
sw_design.elf:     file format elf32-littlenios2
sw_design.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000062b8 memsz 0x000062b8 flags r-x
    LOAD off    0x000072d8 vaddr 0x000062d8 paddr 0x00007d70 align 2**12
         filesz 0x00001a98 memsz 0x00001a98 flags rw-
    LOAD off    0x00009808 vaddr 0x00009808 paddr 0x00009808 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006040  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000050  00006288  00006288  00007288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a98  000062d8  00007d70  000072d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00009808  00009808  00009808  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  0000995c  0000995c  00008d70  2**0
                  CONTENTS
  7 .SRAM         00000000  04020000  04020000  00008d70  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00008d70  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000ae8  00000000  00000000  00008d98  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00018b1c  00000000  00000000  00009880  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000691c  00000000  00000000  0002239c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000074f8  00000000  00000000  00028cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001820  00000000  00000000  000301b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000029b9  00000000  00000000  000319d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004e1a  00000000  00000000  00034389  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  000391a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000710  00000000  00000000  00039208  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0003c191  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000b  00000000  00000000  0003c194  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0003c19f  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0003c1a0  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0003c1a1  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0003c1a5  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0003c1a9  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000004  00000000  00000000  0003c1ad  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000004  00000000  00000000  0003c1b1  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000004  00000000  00000000  0003c1b5  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000a  00000000  00000000  0003c1b9  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001b  00000000  00000000  0003c1c3  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0005e944  00000000  00000000  0003c1de  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
00006288 l    d  .rodata	00000000 .rodata
000062d8 l    d  .rwdata	00000000 .rwdata
00009808 l    d  .bss	00000000 .bss
0000995c l    d  .SDRAM	00000000 .SDRAM
04020000 l    d  .SRAM	00000000 .SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../sw_design_bsp//obj/HAL/src/crt0.o
00000290 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00000690 l     F .text	00000008 __fp_unlock
000006a4 l     F .text	0000019c __sinit.part.1
00000840 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000062d8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
000035ac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000036cc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000036f8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000037f8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000038ec l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000039d8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00003bc0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00007d60 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00003e50 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00003f98 l     F .text	00000038 alt_dev_reg
00006cac l     O .rwdata	00001060 JTAG
00007d0c l     O .rwdata	0000002c UART_COM
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00004298 l     F .text	00000210 altera_avalon_jtag_uart_irq
000044a8 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00004ae8 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000525c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000054d4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000057c4 l     F .text	00000050 alt_get_errno
00005814 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00009830 g     O .bss	00000004 alt_instruction_exception_handler
0000050c g     F .text	00000018 putchar
000033a4 g     F .text	00000054 _isatty_r
00003afc g     F .text	0000007c alt_main
00000524 g     F .text	000000c0 _puts_r
0000985c g     O .bss	00000100 alt_irq
000030cc g     F .text	00000060 _lseek_r
00007d70 g       *ABS*	00000000 __flash_rwdata_start
0000995c g       *ABS*	00000000 __alt_heap_start
00002528 g     F .text	0000005c __sseek
000009e0 g     F .text	00000010 __sinit
0000258c g     F .text	00000140 __swbuf_r
00000848 g     F .text	00000068 __sfmoreglue
00003b9c g     F .text	00000024 __malloc_unlock
00004e18 g     F .text	00000090 alt_up_rs232_read_fd
00001aac g     F .text	0000015c memmove
000009c8 g     F .text	00000018 _cleanup
00005bdc g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00003348 g     F .text	0000005c _fstat_r
00009814 g     O .bss	00000004 errno
000024a4 g     F .text	00000008 __seofread
0000981c g     O .bss	00000004 alt_argv
0000fd38 g       *ABS*	00000000 _gp
00003e20 g     F .text	00000030 usleep
00006b2c g     O .rwdata	00000180 alt_fd_list
00000504 g     F .text	00000008 _putchar_r
00005410 g     F .text	00000090 alt_find_dev
00001964 g     F .text	00000148 memcpy
00000698 g     F .text	0000000c _cleanup_r
00005598 g     F .text	0000007c alt_io_redirect
00006288 g       *ABS*	00000000 __DTOR_END__
00004da4 g     F .text	00000074 alt_up_rs232_read_data
000005e4 g     F .text	00000014 puts
00005e58 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000046a8 g     F .text	0000021c altera_avalon_jtag_uart_read
000034f0 g     F .text	00000064 .hidden __udivsi3
00003848 g     F .text	000000a4 isatty
00005dc8 g     F .text	00000090 alt_icache_flush
00009810 g     O .bss	00000004 __malloc_top_pad
00000a30 g     F .text	000004bc __sfvwrite_r
000023fc g     F .text	00000054 _sbrk_r
000032e8 g     F .text	00000060 _read_r
00007d58 g     O .rwdata	00000004 alt_max_fd
00004d20 g     F .text	00000044 alt_up_rs232_check_parity
000028ec g     F .text	000000f0 _fclose_r
00002c68 g     F .text	00000030 fflush
0000980c g     O .bss	00000004 __malloc_max_sbrked_mem
00005614 g     F .text	000001b0 alt_irq_register
00003a28 g     F .text	000000d4 lseek
00007d38 g     O .rwdata	00000004 _global_impure_ptr
00001e98 g     F .text	00000564 _realloc_r
0000995c g       *ABS*	00000000 __bss_end
00005ad4 g     F .text	00000108 alt_tick
00000a00 g     F .text	00000018 __fp_lock_all
00000294 g     F .text	00000084 print_cmdline
00005a38 g     F .text	0000009c alt_alarm_stop
00009824 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d8 alt_irq_handler
00006b04 g     O .rwdata	00000028 alt_dev_null
00005214 g     F .text	00000048 alt_dcache_flush_all
00007d70 g       *ABS*	00000000 __ram_rwdata_end
00007d50 g     O .rwdata	00000008 alt_dev_list
00003ea0 g     F .text	000000f8 write
00001d30 g     F .text	000000a0 _putc_r
000062d8 g       *ABS*	00000000 __ram_rodata_end
00003748 g     F .text	000000b0 fstat
00004ea8 g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00003554 g     F .text	00000058 .hidden __umodsi3
0000995c g       *ABS*	00000000 end
000041dc g     F .text	000000bc altera_avalon_jtag_uart_init
000001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
00006288 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00004b64 g     F .text	00000084 alt_avalon_timer_sc_init
000048c4 g     F .text	00000224 altera_avalon_jtag_uart_write
000009f0 g     F .text	00000004 __sfp_lock_acquire
00001880 g     F .text	000000e4 memchr
00002dbc g     F .text	00000310 _free_r
000060d4 g     F .text	00000180 __call_exitprocs
00007d40 g     O .rwdata	00000004 __malloc_sbrk_base
00000248 g     F .text	0000004c _start
00009828 g     O .bss	00000004 _alt_tick_rate
0000982c g     O .bss	00000004 _alt_nticks
00003c10 g     F .text	000000fc read
00004008 g     F .text	00000070 alt_sys_init
00005fbc g     F .text	00000118 __register_exitproc
00004ce4 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00004550 g     F .text	00000068 altera_avalon_jtag_uart_close
000062d8 g       *ABS*	00000000 __ram_rwdata_start
00006288 g       *ABS*	00000000 __ram_rodata_start
00000318 g     F .text	0000011c read_data
00009834 g     O .bss	00000028 __malloc_current_mallinfo
00004078 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00005d14 g     F .text	000000b4 alt_get_fd
000050bc g     F .text	00000158 alt_busy_sleep
00002898 g     F .text	00000054 _close_r
00005f40 g     F .text	0000007c memcmp
00004138 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0000995c g       *ABS*	00000000 __alt_stack_base
00004188 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00002744 g     F .text	00000154 __swsetup_r
000008b0 g     F .text	00000118 __sfp
000066fc g     O .rwdata	00000408 __malloc_av_
000009fc g     F .text	00000004 __sinit_lock_release
00002450 g     F .text	00000054 __sread
00004c44 g     F .text	00000060 alt_up_rs232_disable_read_interrupt
00005c00 g     F .text	00000114 alt_find_file
000052ac g     F .text	000000a4 alt_dev_llist_insert
00003b78 g     F .text	00000024 __malloc_lock
00003d70 g     F .text	000000b0 sbrk
00002c0c g     F .text	0000005c _fflush_r
00009808 g       *ABS*	00000000 __bss_start
00001c08 g     F .text	00000128 memset
00000434 g     F .text	000000d0 main
00009820 g     O .bss	00000004 alt_envp
00009808 g     O .bss	00000004 __malloc_max_total_mem
000040d8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000026cc g     F .text	00000018 __swbuf
00002584 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
000029dc g     F .text	00000014 fclose
00001074 g     F .text	0000080c _malloc_r
00007d5c g     O .rwdata	00000004 alt_errno
00000eec g     F .text	000000c4 _fwalk
00001dd0 g     F .text	000000c8 putc
000033f8 g     F .text	00000084 .hidden __divsi3
00002c98 g     F .text	00000124 _malloc_trim_r
00006288 g       *ABS*	00000000 __CTOR_END__
00006288 g       *ABS*	00000000 __flash_rodata_start
00006288 g       *ABS*	00000000 __DTOR_LIST__
00004f3c g     F .text	00000040 alt_up_rs232_open_dev
00003fd0 g     F .text	00000038 alt_irq_init
00003d0c g     F .text	00000064 alt_release_fd
00005ef4 g     F .text	00000014 atexit
000026e4 g     F .text	00000060 _write_r
00007d3c g     O .rwdata	00000004 _impure_ptr
00009818 g     O .bss	00000004 alt_argc
000029f0 g     F .text	0000021c __sflush_r
000053b0 g     F .text	00000060 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00000a18 g     F .text	00000018 __fp_unlock_all
00007d48 g     O .rwdata	00000008 alt_fs_list
00004be8 g     F .text	0000005c alt_up_rs232_enable_read_interrupt
00004d64 g     F .text	00000040 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
00007d70 g       *ABS*	00000000 _edata
0000995c g       *ABS*	00000000 _end
00000248 g       *ABS*	00000000 __ram_exceptions_end
000045b8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000024ac g     F .text	0000007c __swrite
00007d44 g     O .rwdata	00000004 __malloc_trim_threshold
00005f08 g     F .text	00000038 exit
00000fb0 g     F .text	000000c4 _fwalk_reent
0000347c g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000009f4 g     F .text	00000004 __sfp_lock_release
00006254 g     F .text	00000034 _exit
00004f7c g     F .text	00000140 alt_alarm_start
0000312c g     F .text	000001bc __smakebuf_r
000005f8 g     F .text	00000098 strlen
000058e0 g     F .text	00000158 open
04020000 g       *ABS*	00000000 __alt_mem_SRAM
000054a0 g     F .text	00000034 alt_icache_flush_all
00007d64 g     O .rwdata	00000004 alt_priority_mask
00007d68 g     O .rwdata	00000008 alt_alarm_list
00005350 g     F .text	00000060 _do_ctors
00004ca4 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
000035fc g     F .text	000000d0 close
00003954 g     F .text	00000084 alt_load
000009f8 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409214 	ori	at,at,584
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d40 	call	1d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	00800074 	movhi	r2,1
 140:	10a61704 	addi	r2,r2,-26532
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10a61704 	addi	r2,r2,-26532
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	e17ffd17 	ldw	r5,-12(fp)
 174:	1009883a 	mov	r4,r2
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	0001883a 	nop
}
 1bc:	0001883a 	nop
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

000001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d4:	defffb04 	addi	sp,sp,-20
 1d8:	dfc00415 	stw	ra,16(sp)
 1dc:	df000315 	stw	fp,12(sp)
 1e0:	df000304 	addi	fp,sp,12
 1e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e8:	000531fa 	rdctl	r2,exception
 1ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1f0:	e0bffd17 	ldw	r2,-12(fp)
 1f4:	10801f0c 	andi	r2,r2,124
 1f8:	1004d0ba 	srli	r2,r2,2
 1fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 200:	0005333a 	rdctl	r2,badaddr
 204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 208:	d0a6be17 	ldw	r2,-25864(gp)
 20c:	10000726 	beq	r2,zero,22c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 210:	d0a6be17 	ldw	r2,-25864(gp)
 214:	e0fffd17 	ldw	r3,-12(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	e17fff17 	ldw	r5,-4(fp)
 220:	1809883a 	mov	r4,r3
 224:	103ee83a 	callr	r2
 228:	00000206 	br	234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 22c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 230:	0005883a 	mov	r2,zero
}
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     248:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     24c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     250:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     254:	00bffd16 	blt	zero,r2,24c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     258:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     25c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     260:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     264:	d6bf4e14 	ori	gp,gp,64824
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     268:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     26c:	10a60214 	ori	r2,r2,38920

    movhi r3, %hi(__bss_end)
     270:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     274:	18e65714 	ori	r3,r3,39260

    beq r2, r3, 1f
     278:	10c00326 	beq	r2,r3,288 <_start+0x40>

0:
    stw zero, (r2)
     27c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     280:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     284:	10fffd36 	bltu	r2,r3,27c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     288:	00039540 	call	3954 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     28c:	0003afc0 	call	3afc <alt_main>

00000290 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     290:	003fff06 	br	290 <alt_after_alt_main>

00000294 <print_cmdline>:

//#include "altera_avalon_pio_regs.h"
#include <io.h>
#include "system.h"

void print_cmdline(alt_up_rs232_dev *rs232){
     294:	defffd04 	addi	sp,sp,-12
     298:	dfc00215 	stw	ra,8(sp)
     29c:	df000115 	stw	fp,4(sp)
     2a0:	df000104 	addi	fp,sp,4
     2a4:	e13fff15 	stw	r4,-4(fp)
	while (1) {
		if (alt_up_rs232_get_available_space_in_write_FIFO(rs232) > 5) {
     2a8:	e13fff17 	ldw	r4,-4(fp)
     2ac:	0004ce40 	call	4ce4 <alt_up_rs232_get_available_space_in_write_FIFO>
     2b0:	108001b0 	cmpltui	r2,r2,6
     2b4:	1000101e 	bne	r2,zero,2f8 <print_cmdline+0x64>
			alt_up_rs232_write_data(rs232, '\n');
     2b8:	01400284 	movi	r5,10
     2bc:	e13fff17 	ldw	r4,-4(fp)
     2c0:	0004d640 	call	4d64 <alt_up_rs232_write_data>
			alt_up_rs232_write_data(rs232, 'c');
     2c4:	014018c4 	movi	r5,99
     2c8:	e13fff17 	ldw	r4,-4(fp)
     2cc:	0004d640 	call	4d64 <alt_up_rs232_write_data>
			alt_up_rs232_write_data(rs232, 'm');
     2d0:	01401b44 	movi	r5,109
     2d4:	e13fff17 	ldw	r4,-4(fp)
     2d8:	0004d640 	call	4d64 <alt_up_rs232_write_data>
			alt_up_rs232_write_data(rs232, 'd');
     2dc:	01401904 	movi	r5,100
     2e0:	e13fff17 	ldw	r4,-4(fp)
     2e4:	0004d640 	call	4d64 <alt_up_rs232_write_data>
			alt_up_rs232_write_data(rs232, '>');
     2e8:	01400f84 	movi	r5,62
     2ec:	e13fff17 	ldw	r4,-4(fp)
     2f0:	0004d640 	call	4d64 <alt_up_rs232_write_data>

			return;
     2f4:	00000306 	br	304 <print_cmdline+0x70>
		}

		usleep(5);
     2f8:	01000144 	movi	r4,5
     2fc:	0003e200 	call	3e20 <usleep>
	}
     300:	003fe906 	br	2a8 <print_cmdline+0x14>
}
     304:	e037883a 	mov	sp,fp
     308:	dfc00117 	ldw	ra,4(sp)
     30c:	df000017 	ldw	fp,0(sp)
     310:	dec00204 	addi	sp,sp,8
     314:	f800283a 	ret

00000318 <read_data>:

unsigned int read_data(alt_up_rs232_dev *rs232) {
     318:	defff704 	addi	sp,sp,-36
     31c:	dfc00815 	stw	ra,32(sp)
     320:	df000715 	stw	fp,28(sp)
     324:	df000704 	addi	fp,sp,28
     328:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = '0';
     32c:	00800c04 	movi	r2,48
     330:	e0bffe05 	stb	r2,-8(fp)
	alt_u8 parity;
	unsigned int number = 0;
     334:	e03ffc15 	stw	zero,-16(fp)
	unsigned int ret = 0;
     338:	e03ff915 	stw	zero,-28(fp)
	unsigned int all_number = 0;
     33c:	e03ffa15 	stw	zero,-24(fp)
	unsigned int memory_base = SDRAM_BASE;
     340:	e03ffd15 	stw	zero,-12(fp)
	while (1) {
		number = alt_up_rs232_get_used_space_in_read_FIFO(rs232);
     344:	e13fff17 	ldw	r4,-4(fp)
     348:	0004ca40 	call	4ca4 <alt_up_rs232_get_used_space_in_read_FIFO>
     34c:	e0bffc15 	stw	r2,-16(fp)
		for(int i = 0; i < number; i++) {
     350:	e03ffb15 	stw	zero,-20(fp)
     354:	00002e06 	br	410 <read_data+0xf8>
			alt_up_rs232_read_data(rs232, &data, &parity);
     358:	e0fffe44 	addi	r3,fp,-7
     35c:	e0bffe04 	addi	r2,fp,-8
     360:	180d883a 	mov	r6,r3
     364:	100b883a 	mov	r5,r2
     368:	e13fff17 	ldw	r4,-4(fp)
     36c:	0004da40 	call	4da4 <alt_up_rs232_read_data>
			alt_up_rs232_write_data(rs232, data);
     370:	e0bffe03 	ldbu	r2,-8(fp)
     374:	10803fcc 	andi	r2,r2,255
     378:	100b883a 	mov	r5,r2
     37c:	e13fff17 	ldw	r4,-4(fp)
     380:	0004d640 	call	4d64 <alt_up_rs232_write_data>
			IOWR_8DIRECT(memory_base, all_number, data);
     384:	e0fffa17 	ldw	r3,-24(fp)
     388:	e0bffd17 	ldw	r2,-12(fp)
     38c:	1885883a 	add	r2,r3,r2
     390:	1007883a 	mov	r3,r2
     394:	e0bffe03 	ldbu	r2,-8(fp)
     398:	10803fcc 	andi	r2,r2,255
     39c:	18800025 	stbio	r2,0(r3)
			all_number++;
     3a0:	e0bffa17 	ldw	r2,-24(fp)
     3a4:	10800044 	addi	r2,r2,1
     3a8:	e0bffa15 	stw	r2,-24(fp)
			printf("%c", data);
     3ac:	e0bffe03 	ldbu	r2,-8(fp)
     3b0:	10803fcc 	andi	r2,r2,255
     3b4:	1009883a 	mov	r4,r2
     3b8:	000050c0 	call	50c <putchar>
			ret |= alt_up_rs232_check_parity(parity);
     3bc:	e0bffe43 	ldbu	r2,-7(fp)
     3c0:	10803fcc 	andi	r2,r2,255
     3c4:	1009883a 	mov	r4,r2
     3c8:	0004d200 	call	4d20 <alt_up_rs232_check_parity>
     3cc:	1007883a 	mov	r3,r2
     3d0:	e0bff917 	ldw	r2,-28(fp)
     3d4:	10c4b03a 	or	r2,r2,r3
     3d8:	e0bff915 	stw	r2,-28(fp)
			if (data == '\n' || data == '\r') {
     3dc:	e0bffe03 	ldbu	r2,-8(fp)
     3e0:	10803fcc 	andi	r2,r2,255
     3e4:	108002a0 	cmpeqi	r2,r2,10
     3e8:	1000041e 	bne	r2,zero,3fc <read_data+0xe4>
     3ec:	e0bffe03 	ldbu	r2,-8(fp)
     3f0:	10803fcc 	andi	r2,r2,255
     3f4:	10800358 	cmpnei	r2,r2,13
     3f8:	1000021e 	bne	r2,zero,404 <read_data+0xec>
				return all_number;
     3fc:	e0bffa17 	ldw	r2,-24(fp)
     400:	00000706 	br	420 <read_data+0x108>
	unsigned int ret = 0;
	unsigned int all_number = 0;
	unsigned int memory_base = SDRAM_BASE;
	while (1) {
		number = alt_up_rs232_get_used_space_in_read_FIFO(rs232);
		for(int i = 0; i < number; i++) {
     404:	e0bffb17 	ldw	r2,-20(fp)
     408:	10800044 	addi	r2,r2,1
     40c:	e0bffb15 	stw	r2,-20(fp)
     410:	e0fffb17 	ldw	r3,-20(fp)
     414:	e0bffc17 	ldw	r2,-16(fp)
     418:	18bfcf36 	bltu	r3,r2,358 <read_data+0x40>
			ret |= alt_up_rs232_check_parity(parity);
			if (data == '\n' || data == '\r') {
				return all_number;
			}
		}
	}
     41c:	003fc906 	br	344 <read_data+0x2c>

	return ret;
}
     420:	e037883a 	mov	sp,fp
     424:	dfc00117 	ldw	ra,4(sp)
     428:	df000017 	ldw	fp,0(sp)
     42c:	dec00204 	addi	sp,sp,8
     430:	f800283a 	ret

00000434 <main>:

int main()
{
     434:	deffef04 	addi	sp,sp,-68
     438:	dfc01015 	stw	ra,64(sp)
     43c:	df000f15 	stw	fp,60(sp)
     440:	df000f04 	addi	fp,sp,60
  printf("Hello from Nios II!\n");
     444:	01000034 	movhi	r4,0
     448:	2118a204 	addi	r4,r4,25224
     44c:	00005e40 	call	5e4 <puts>

  alt_up_rs232_dev rs232 = {0};
     450:	e03ff515 	stw	zero,-44(fp)
     454:	e03ff615 	stw	zero,-40(fp)
     458:	e03ff715 	stw	zero,-36(fp)
     45c:	e03ff815 	stw	zero,-32(fp)
     460:	e03ff915 	stw	zero,-28(fp)
     464:	e03ffa15 	stw	zero,-24(fp)
     468:	e03ffb15 	stw	zero,-20(fp)
     46c:	e03ffc15 	stw	zero,-16(fp)
     470:	e03ffd15 	stw	zero,-12(fp)
     474:	e03ffe15 	stw	zero,-8(fp)
     478:	e03fff15 	stw	zero,-4(fp)

  rs232.base = UART_COM_BASE;
     47c:	00810134 	movhi	r2,1028
     480:	10840a04 	addi	r2,r2,4136
     484:	e0bfff15 	stw	r2,-4(fp)

  unsigned int ret = 0;
     488:	e03ff215 	stw	zero,-56(fp)
  unsigned int memory_base = SDRAM_BASE;
     48c:	e03ff315 	stw	zero,-52(fp)
//  unsigned int offset = 0x0;

  while(1) {
	  //IOWR_16DIRECT(memory_base, offset, 0x78);
	  print_cmdline(&rs232);
     490:	e0bff504 	addi	r2,fp,-44
     494:	1009883a 	mov	r4,r2
     498:	00002940 	call	294 <print_cmdline>
	  ret = read_data(&rs232);
     49c:	e0bff504 	addi	r2,fp,-44
     4a0:	1009883a 	mov	r4,r2
     4a4:	00003180 	call	318 <read_data>
     4a8:	e0bff215 	stw	r2,-56(fp)
	  //int mem = IORD_16DIRECT(memory_base, offset);
	  //printf ("\nrecive with return code:[%d] with memory :[%x]\n", ret, mem);
	  printf ("\n");
     4ac:	01000284 	movi	r4,10
     4b0:	000050c0 	call	50c <putchar>
	  for (int c = 0; c < ret; c++) {
     4b4:	e03ff115 	stw	zero,-60(fp)
     4b8:	00000c06 	br	4ec <main+0xb8>
		  alt_u8 mem_test = IORD_8DIRECT(memory_base, c);
     4bc:	e0fff117 	ldw	r3,-60(fp)
     4c0:	e0bff317 	ldw	r2,-52(fp)
     4c4:	1885883a 	add	r2,r3,r2
     4c8:	10800023 	ldbuio	r2,0(r2)
     4cc:	10803fcc 	andi	r2,r2,255
     4d0:	e0bff405 	stb	r2,-48(fp)
		  printf ("%c", mem_test);
     4d4:	e0bff403 	ldbu	r2,-48(fp)
     4d8:	1009883a 	mov	r4,r2
     4dc:	000050c0 	call	50c <putchar>
	  print_cmdline(&rs232);
	  ret = read_data(&rs232);
	  //int mem = IORD_16DIRECT(memory_base, offset);
	  //printf ("\nrecive with return code:[%d] with memory :[%x]\n", ret, mem);
	  printf ("\n");
	  for (int c = 0; c < ret; c++) {
     4e0:	e0bff117 	ldw	r2,-60(fp)
     4e4:	10800044 	addi	r2,r2,1
     4e8:	e0bff115 	stw	r2,-60(fp)
     4ec:	e0fff117 	ldw	r3,-60(fp)
     4f0:	e0bff217 	ldw	r2,-56(fp)
     4f4:	18bff136 	bltu	r3,r2,4bc <main+0x88>
		  alt_u8 mem_test = IORD_8DIRECT(memory_base, c);
		  printf ("%c", mem_test);
	  }

	  printf ("\n");
     4f8:	01000284 	movi	r4,10
     4fc:	000050c0 	call	50c <putchar>

  }
     500:	003fe306 	br	490 <main+0x5c>

00000504 <_putchar_r>:
     504:	21800217 	ldw	r6,8(r4)
     508:	0001d301 	jmpi	1d30 <_putc_r>

0000050c <putchar>:
     50c:	00800034 	movhi	r2,0
     510:	109f4f04 	addi	r2,r2,32060
     514:	200b883a 	mov	r5,r4
     518:	11000017 	ldw	r4,0(r2)
     51c:	21800217 	ldw	r6,8(r4)
     520:	0001d301 	jmpi	1d30 <_putc_r>

00000524 <_puts_r>:
     524:	defff604 	addi	sp,sp,-40
     528:	dc000715 	stw	r16,28(sp)
     52c:	2021883a 	mov	r16,r4
     530:	2809883a 	mov	r4,r5
     534:	dc400815 	stw	r17,32(sp)
     538:	dfc00915 	stw	ra,36(sp)
     53c:	2823883a 	mov	r17,r5
     540:	00005f80 	call	5f8 <strlen>
     544:	10c00044 	addi	r3,r2,1
     548:	d8800115 	stw	r2,4(sp)
     54c:	00800034 	movhi	r2,0
     550:	1098a704 	addi	r2,r2,25244
     554:	d8800215 	stw	r2,8(sp)
     558:	00800044 	movi	r2,1
     55c:	d8800315 	stw	r2,12(sp)
     560:	00800084 	movi	r2,2
     564:	dc400015 	stw	r17,0(sp)
     568:	d8c00615 	stw	r3,24(sp)
     56c:	dec00415 	stw	sp,16(sp)
     570:	d8800515 	stw	r2,20(sp)
     574:	80000226 	beq	r16,zero,580 <_puts_r+0x5c>
     578:	80800e17 	ldw	r2,56(r16)
     57c:	10001426 	beq	r2,zero,5d0 <_puts_r+0xac>
     580:	81400217 	ldw	r5,8(r16)
     584:	2880030b 	ldhu	r2,12(r5)
     588:	10c8000c 	andi	r3,r2,8192
     58c:	1800061e 	bne	r3,zero,5a8 <_puts_r+0x84>
     590:	29001917 	ldw	r4,100(r5)
     594:	00f7ffc4 	movi	r3,-8193
     598:	10880014 	ori	r2,r2,8192
     59c:	20c6703a 	and	r3,r4,r3
     5a0:	2880030d 	sth	r2,12(r5)
     5a4:	28c01915 	stw	r3,100(r5)
     5a8:	d9800404 	addi	r6,sp,16
     5ac:	8009883a 	mov	r4,r16
     5b0:	0000a300 	call	a30 <__sfvwrite_r>
     5b4:	1000091e 	bne	r2,zero,5dc <_puts_r+0xb8>
     5b8:	00800284 	movi	r2,10
     5bc:	dfc00917 	ldw	ra,36(sp)
     5c0:	dc400817 	ldw	r17,32(sp)
     5c4:	dc000717 	ldw	r16,28(sp)
     5c8:	dec00a04 	addi	sp,sp,40
     5cc:	f800283a 	ret
     5d0:	8009883a 	mov	r4,r16
     5d4:	00009e00 	call	9e0 <__sinit>
     5d8:	003fe906 	br	580 <_puts_r+0x5c>
     5dc:	00bfffc4 	movi	r2,-1
     5e0:	003ff606 	br	5bc <_puts_r+0x98>

000005e4 <puts>:
     5e4:	00800034 	movhi	r2,0
     5e8:	109f4f04 	addi	r2,r2,32060
     5ec:	200b883a 	mov	r5,r4
     5f0:	11000017 	ldw	r4,0(r2)
     5f4:	00005241 	jmpi	524 <_puts_r>

000005f8 <strlen>:
     5f8:	208000cc 	andi	r2,r4,3
     5fc:	10002026 	beq	r2,zero,680 <strlen+0x88>
     600:	20800007 	ldb	r2,0(r4)
     604:	10002026 	beq	r2,zero,688 <strlen+0x90>
     608:	2005883a 	mov	r2,r4
     60c:	00000206 	br	618 <strlen+0x20>
     610:	10c00007 	ldb	r3,0(r2)
     614:	18001826 	beq	r3,zero,678 <strlen+0x80>
     618:	10800044 	addi	r2,r2,1
     61c:	10c000cc 	andi	r3,r2,3
     620:	183ffb1e 	bne	r3,zero,610 <strlen+0x18>
     624:	10c00017 	ldw	r3,0(r2)
     628:	01ffbff4 	movhi	r7,65279
     62c:	39ffbfc4 	addi	r7,r7,-257
     630:	00ca303a 	nor	r5,zero,r3
     634:	01a02074 	movhi	r6,32897
     638:	19c7883a 	add	r3,r3,r7
     63c:	31a02004 	addi	r6,r6,-32640
     640:	1946703a 	and	r3,r3,r5
     644:	1986703a 	and	r3,r3,r6
     648:	1800091e 	bne	r3,zero,670 <strlen+0x78>
     64c:	10800104 	addi	r2,r2,4
     650:	10c00017 	ldw	r3,0(r2)
     654:	19cb883a 	add	r5,r3,r7
     658:	00c6303a 	nor	r3,zero,r3
     65c:	28c6703a 	and	r3,r5,r3
     660:	1986703a 	and	r3,r3,r6
     664:	183ff926 	beq	r3,zero,64c <strlen+0x54>
     668:	00000106 	br	670 <strlen+0x78>
     66c:	10800044 	addi	r2,r2,1
     670:	10c00007 	ldb	r3,0(r2)
     674:	183ffd1e 	bne	r3,zero,66c <strlen+0x74>
     678:	1105c83a 	sub	r2,r2,r4
     67c:	f800283a 	ret
     680:	2005883a 	mov	r2,r4
     684:	003fe706 	br	624 <strlen+0x2c>
     688:	0005883a 	mov	r2,zero
     68c:	f800283a 	ret

00000690 <__fp_unlock>:
     690:	0005883a 	mov	r2,zero
     694:	f800283a 	ret

00000698 <_cleanup_r>:
     698:	01400034 	movhi	r5,0
     69c:	294a3b04 	addi	r5,r5,10476
     6a0:	0000fb01 	jmpi	fb0 <_fwalk_reent>

000006a4 <__sinit.part.1>:
     6a4:	defff704 	addi	sp,sp,-36
     6a8:	00c00034 	movhi	r3,0
     6ac:	dfc00815 	stw	ra,32(sp)
     6b0:	ddc00715 	stw	r23,28(sp)
     6b4:	dd800615 	stw	r22,24(sp)
     6b8:	dd400515 	stw	r21,20(sp)
     6bc:	dd000415 	stw	r20,16(sp)
     6c0:	dcc00315 	stw	r19,12(sp)
     6c4:	dc800215 	stw	r18,8(sp)
     6c8:	dc400115 	stw	r17,4(sp)
     6cc:	dc000015 	stw	r16,0(sp)
     6d0:	18c1a604 	addi	r3,r3,1688
     6d4:	24000117 	ldw	r16,4(r4)
     6d8:	20c00f15 	stw	r3,60(r4)
     6dc:	2080bb04 	addi	r2,r4,748
     6e0:	00c000c4 	movi	r3,3
     6e4:	20c0b915 	stw	r3,740(r4)
     6e8:	2080ba15 	stw	r2,744(r4)
     6ec:	2000b815 	stw	zero,736(r4)
     6f0:	05c00204 	movi	r23,8
     6f4:	00800104 	movi	r2,4
     6f8:	2025883a 	mov	r18,r4
     6fc:	b80d883a 	mov	r6,r23
     700:	81001704 	addi	r4,r16,92
     704:	000b883a 	mov	r5,zero
     708:	80000015 	stw	zero,0(r16)
     70c:	80000115 	stw	zero,4(r16)
     710:	80000215 	stw	zero,8(r16)
     714:	8080030d 	sth	r2,12(r16)
     718:	80001915 	stw	zero,100(r16)
     71c:	8000038d 	sth	zero,14(r16)
     720:	80000415 	stw	zero,16(r16)
     724:	80000515 	stw	zero,20(r16)
     728:	80000615 	stw	zero,24(r16)
     72c:	0001c080 	call	1c08 <memset>
     730:	05800034 	movhi	r22,0
     734:	94400217 	ldw	r17,8(r18)
     738:	05400034 	movhi	r21,0
     73c:	05000034 	movhi	r20,0
     740:	04c00034 	movhi	r19,0
     744:	b5891404 	addi	r22,r22,9296
     748:	ad492b04 	addi	r21,r21,9388
     74c:	a5094a04 	addi	r20,r20,9512
     750:	9cc96104 	addi	r19,r19,9604
     754:	85800815 	stw	r22,32(r16)
     758:	85400915 	stw	r21,36(r16)
     75c:	85000a15 	stw	r20,40(r16)
     760:	84c00b15 	stw	r19,44(r16)
     764:	84000715 	stw	r16,28(r16)
     768:	00800284 	movi	r2,10
     76c:	8880030d 	sth	r2,12(r17)
     770:	00800044 	movi	r2,1
     774:	b80d883a 	mov	r6,r23
     778:	89001704 	addi	r4,r17,92
     77c:	000b883a 	mov	r5,zero
     780:	88000015 	stw	zero,0(r17)
     784:	88000115 	stw	zero,4(r17)
     788:	88000215 	stw	zero,8(r17)
     78c:	88001915 	stw	zero,100(r17)
     790:	8880038d 	sth	r2,14(r17)
     794:	88000415 	stw	zero,16(r17)
     798:	88000515 	stw	zero,20(r17)
     79c:	88000615 	stw	zero,24(r17)
     7a0:	0001c080 	call	1c08 <memset>
     7a4:	94000317 	ldw	r16,12(r18)
     7a8:	00800484 	movi	r2,18
     7ac:	8c400715 	stw	r17,28(r17)
     7b0:	8d800815 	stw	r22,32(r17)
     7b4:	8d400915 	stw	r21,36(r17)
     7b8:	8d000a15 	stw	r20,40(r17)
     7bc:	8cc00b15 	stw	r19,44(r17)
     7c0:	8080030d 	sth	r2,12(r16)
     7c4:	00800084 	movi	r2,2
     7c8:	80000015 	stw	zero,0(r16)
     7cc:	80000115 	stw	zero,4(r16)
     7d0:	80000215 	stw	zero,8(r16)
     7d4:	80001915 	stw	zero,100(r16)
     7d8:	8080038d 	sth	r2,14(r16)
     7dc:	80000415 	stw	zero,16(r16)
     7e0:	80000515 	stw	zero,20(r16)
     7e4:	80000615 	stw	zero,24(r16)
     7e8:	b80d883a 	mov	r6,r23
     7ec:	000b883a 	mov	r5,zero
     7f0:	81001704 	addi	r4,r16,92
     7f4:	0001c080 	call	1c08 <memset>
     7f8:	00800044 	movi	r2,1
     7fc:	84000715 	stw	r16,28(r16)
     800:	85800815 	stw	r22,32(r16)
     804:	85400915 	stw	r21,36(r16)
     808:	85000a15 	stw	r20,40(r16)
     80c:	84c00b15 	stw	r19,44(r16)
     810:	90800e15 	stw	r2,56(r18)
     814:	dfc00817 	ldw	ra,32(sp)
     818:	ddc00717 	ldw	r23,28(sp)
     81c:	dd800617 	ldw	r22,24(sp)
     820:	dd400517 	ldw	r21,20(sp)
     824:	dd000417 	ldw	r20,16(sp)
     828:	dcc00317 	ldw	r19,12(sp)
     82c:	dc800217 	ldw	r18,8(sp)
     830:	dc400117 	ldw	r17,4(sp)
     834:	dc000017 	ldw	r16,0(sp)
     838:	dec00904 	addi	sp,sp,36
     83c:	f800283a 	ret

00000840 <__fp_lock>:
     840:	0005883a 	mov	r2,zero
     844:	f800283a 	ret

00000848 <__sfmoreglue>:
     848:	defffc04 	addi	sp,sp,-16
     84c:	dc400115 	stw	r17,4(sp)
     850:	2c7fffc4 	addi	r17,r5,-1
     854:	8c401a24 	muli	r17,r17,104
     858:	dc800215 	stw	r18,8(sp)
     85c:	2825883a 	mov	r18,r5
     860:	89401d04 	addi	r5,r17,116
     864:	dc000015 	stw	r16,0(sp)
     868:	dfc00315 	stw	ra,12(sp)
     86c:	00010740 	call	1074 <_malloc_r>
     870:	1021883a 	mov	r16,r2
     874:	10000726 	beq	r2,zero,894 <__sfmoreglue+0x4c>
     878:	11000304 	addi	r4,r2,12
     87c:	10000015 	stw	zero,0(r2)
     880:	14800115 	stw	r18,4(r2)
     884:	11000215 	stw	r4,8(r2)
     888:	89801a04 	addi	r6,r17,104
     88c:	000b883a 	mov	r5,zero
     890:	0001c080 	call	1c08 <memset>
     894:	8005883a 	mov	r2,r16
     898:	dfc00317 	ldw	ra,12(sp)
     89c:	dc800217 	ldw	r18,8(sp)
     8a0:	dc400117 	ldw	r17,4(sp)
     8a4:	dc000017 	ldw	r16,0(sp)
     8a8:	dec00404 	addi	sp,sp,16
     8ac:	f800283a 	ret

000008b0 <__sfp>:
     8b0:	defffb04 	addi	sp,sp,-20
     8b4:	dc000015 	stw	r16,0(sp)
     8b8:	04000034 	movhi	r16,0
     8bc:	841f4e04 	addi	r16,r16,32056
     8c0:	dcc00315 	stw	r19,12(sp)
     8c4:	2027883a 	mov	r19,r4
     8c8:	81000017 	ldw	r4,0(r16)
     8cc:	dfc00415 	stw	ra,16(sp)
     8d0:	dc800215 	stw	r18,8(sp)
     8d4:	20800e17 	ldw	r2,56(r4)
     8d8:	dc400115 	stw	r17,4(sp)
     8dc:	1000021e 	bne	r2,zero,8e8 <__sfp+0x38>
     8e0:	00006a40 	call	6a4 <__sinit.part.1>
     8e4:	81000017 	ldw	r4,0(r16)
     8e8:	2480b804 	addi	r18,r4,736
     8ec:	047fffc4 	movi	r17,-1
     8f0:	91000117 	ldw	r4,4(r18)
     8f4:	94000217 	ldw	r16,8(r18)
     8f8:	213fffc4 	addi	r4,r4,-1
     8fc:	20000a16 	blt	r4,zero,928 <__sfp+0x78>
     900:	8080030f 	ldh	r2,12(r16)
     904:	10000c26 	beq	r2,zero,938 <__sfp+0x88>
     908:	80c01d04 	addi	r3,r16,116
     90c:	00000206 	br	918 <__sfp+0x68>
     910:	18bfe60f 	ldh	r2,-104(r3)
     914:	10000826 	beq	r2,zero,938 <__sfp+0x88>
     918:	213fffc4 	addi	r4,r4,-1
     91c:	1c3ffd04 	addi	r16,r3,-12
     920:	18c01a04 	addi	r3,r3,104
     924:	247ffa1e 	bne	r4,r17,910 <__sfp+0x60>
     928:	90800017 	ldw	r2,0(r18)
     92c:	10001d26 	beq	r2,zero,9a4 <__sfp+0xf4>
     930:	1025883a 	mov	r18,r2
     934:	003fee06 	br	8f0 <__sfp+0x40>
     938:	00bfffc4 	movi	r2,-1
     93c:	8080038d 	sth	r2,14(r16)
     940:	00800044 	movi	r2,1
     944:	8080030d 	sth	r2,12(r16)
     948:	80001915 	stw	zero,100(r16)
     94c:	80000015 	stw	zero,0(r16)
     950:	80000215 	stw	zero,8(r16)
     954:	80000115 	stw	zero,4(r16)
     958:	80000415 	stw	zero,16(r16)
     95c:	80000515 	stw	zero,20(r16)
     960:	80000615 	stw	zero,24(r16)
     964:	01800204 	movi	r6,8
     968:	000b883a 	mov	r5,zero
     96c:	81001704 	addi	r4,r16,92
     970:	0001c080 	call	1c08 <memset>
     974:	8005883a 	mov	r2,r16
     978:	80000c15 	stw	zero,48(r16)
     97c:	80000d15 	stw	zero,52(r16)
     980:	80001115 	stw	zero,68(r16)
     984:	80001215 	stw	zero,72(r16)
     988:	dfc00417 	ldw	ra,16(sp)
     98c:	dcc00317 	ldw	r19,12(sp)
     990:	dc800217 	ldw	r18,8(sp)
     994:	dc400117 	ldw	r17,4(sp)
     998:	dc000017 	ldw	r16,0(sp)
     99c:	dec00504 	addi	sp,sp,20
     9a0:	f800283a 	ret
     9a4:	01400104 	movi	r5,4
     9a8:	9809883a 	mov	r4,r19
     9ac:	00008480 	call	848 <__sfmoreglue>
     9b0:	90800015 	stw	r2,0(r18)
     9b4:	103fde1e 	bne	r2,zero,930 <__sfp+0x80>
     9b8:	00800304 	movi	r2,12
     9bc:	98800015 	stw	r2,0(r19)
     9c0:	0005883a 	mov	r2,zero
     9c4:	003ff006 	br	988 <__sfp+0xd8>

000009c8 <_cleanup>:
     9c8:	00800034 	movhi	r2,0
     9cc:	109f4e04 	addi	r2,r2,32056
     9d0:	11000017 	ldw	r4,0(r2)
     9d4:	01400034 	movhi	r5,0
     9d8:	294a3b04 	addi	r5,r5,10476
     9dc:	0000fb01 	jmpi	fb0 <_fwalk_reent>

000009e0 <__sinit>:
     9e0:	20800e17 	ldw	r2,56(r4)
     9e4:	10000126 	beq	r2,zero,9ec <__sinit+0xc>
     9e8:	f800283a 	ret
     9ec:	00006a41 	jmpi	6a4 <__sinit.part.1>

000009f0 <__sfp_lock_acquire>:
     9f0:	f800283a 	ret

000009f4 <__sfp_lock_release>:
     9f4:	f800283a 	ret

000009f8 <__sinit_lock_acquire>:
     9f8:	f800283a 	ret

000009fc <__sinit_lock_release>:
     9fc:	f800283a 	ret

00000a00 <__fp_lock_all>:
     a00:	00800034 	movhi	r2,0
     a04:	109f4f04 	addi	r2,r2,32060
     a08:	11000017 	ldw	r4,0(r2)
     a0c:	01400034 	movhi	r5,0
     a10:	29421004 	addi	r5,r5,2112
     a14:	0000eec1 	jmpi	eec <_fwalk>

00000a18 <__fp_unlock_all>:
     a18:	00800034 	movhi	r2,0
     a1c:	109f4f04 	addi	r2,r2,32060
     a20:	11000017 	ldw	r4,0(r2)
     a24:	01400034 	movhi	r5,0
     a28:	2941a404 	addi	r5,r5,1680
     a2c:	0000eec1 	jmpi	eec <_fwalk>

00000a30 <__sfvwrite_r>:
     a30:	30800217 	ldw	r2,8(r6)
     a34:	10006726 	beq	r2,zero,bd4 <__sfvwrite_r+0x1a4>
     a38:	28c0030b 	ldhu	r3,12(r5)
     a3c:	defff404 	addi	sp,sp,-48
     a40:	dd400715 	stw	r21,28(sp)
     a44:	dd000615 	stw	r20,24(sp)
     a48:	dc000215 	stw	r16,8(sp)
     a4c:	dfc00b15 	stw	ra,44(sp)
     a50:	df000a15 	stw	fp,40(sp)
     a54:	ddc00915 	stw	r23,36(sp)
     a58:	dd800815 	stw	r22,32(sp)
     a5c:	dcc00515 	stw	r19,20(sp)
     a60:	dc800415 	stw	r18,16(sp)
     a64:	dc400315 	stw	r17,12(sp)
     a68:	1880020c 	andi	r2,r3,8
     a6c:	2821883a 	mov	r16,r5
     a70:	202b883a 	mov	r21,r4
     a74:	3029883a 	mov	r20,r6
     a78:	10002726 	beq	r2,zero,b18 <__sfvwrite_r+0xe8>
     a7c:	28800417 	ldw	r2,16(r5)
     a80:	10002526 	beq	r2,zero,b18 <__sfvwrite_r+0xe8>
     a84:	1880008c 	andi	r2,r3,2
     a88:	a4400017 	ldw	r17,0(r20)
     a8c:	10002a26 	beq	r2,zero,b38 <__sfvwrite_r+0x108>
     a90:	05a00034 	movhi	r22,32768
     a94:	0027883a 	mov	r19,zero
     a98:	0025883a 	mov	r18,zero
     a9c:	b5bf0004 	addi	r22,r22,-1024
     aa0:	980d883a 	mov	r6,r19
     aa4:	a809883a 	mov	r4,r21
     aa8:	90004626 	beq	r18,zero,bc4 <__sfvwrite_r+0x194>
     aac:	900f883a 	mov	r7,r18
     ab0:	b480022e 	bgeu	r22,r18,abc <__sfvwrite_r+0x8c>
     ab4:	01e00034 	movhi	r7,32768
     ab8:	39ff0004 	addi	r7,r7,-1024
     abc:	80800917 	ldw	r2,36(r16)
     ac0:	81400717 	ldw	r5,28(r16)
     ac4:	103ee83a 	callr	r2
     ac8:	0080570e 	bge	zero,r2,c28 <__sfvwrite_r+0x1f8>
     acc:	a0c00217 	ldw	r3,8(r20)
     ad0:	98a7883a 	add	r19,r19,r2
     ad4:	90a5c83a 	sub	r18,r18,r2
     ad8:	1885c83a 	sub	r2,r3,r2
     adc:	a0800215 	stw	r2,8(r20)
     ae0:	103fef1e 	bne	r2,zero,aa0 <__sfvwrite_r+0x70>
     ae4:	0005883a 	mov	r2,zero
     ae8:	dfc00b17 	ldw	ra,44(sp)
     aec:	df000a17 	ldw	fp,40(sp)
     af0:	ddc00917 	ldw	r23,36(sp)
     af4:	dd800817 	ldw	r22,32(sp)
     af8:	dd400717 	ldw	r21,28(sp)
     afc:	dd000617 	ldw	r20,24(sp)
     b00:	dcc00517 	ldw	r19,20(sp)
     b04:	dc800417 	ldw	r18,16(sp)
     b08:	dc400317 	ldw	r17,12(sp)
     b0c:	dc000217 	ldw	r16,8(sp)
     b10:	dec00c04 	addi	sp,sp,48
     b14:	f800283a 	ret
     b18:	800b883a 	mov	r5,r16
     b1c:	a809883a 	mov	r4,r21
     b20:	00027440 	call	2744 <__swsetup_r>
     b24:	1000eb1e 	bne	r2,zero,ed4 <__sfvwrite_r+0x4a4>
     b28:	80c0030b 	ldhu	r3,12(r16)
     b2c:	a4400017 	ldw	r17,0(r20)
     b30:	1880008c 	andi	r2,r3,2
     b34:	103fd61e 	bne	r2,zero,a90 <__sfvwrite_r+0x60>
     b38:	1880004c 	andi	r2,r3,1
     b3c:	10003f1e 	bne	r2,zero,c3c <__sfvwrite_r+0x20c>
     b40:	0039883a 	mov	fp,zero
     b44:	0025883a 	mov	r18,zero
     b48:	90001a26 	beq	r18,zero,bb4 <__sfvwrite_r+0x184>
     b4c:	1880800c 	andi	r2,r3,512
     b50:	84c00217 	ldw	r19,8(r16)
     b54:	10002126 	beq	r2,zero,bdc <__sfvwrite_r+0x1ac>
     b58:	982f883a 	mov	r23,r19
     b5c:	94c09336 	bltu	r18,r19,dac <__sfvwrite_r+0x37c>
     b60:	1881200c 	andi	r2,r3,1152
     b64:	10009e1e 	bne	r2,zero,de0 <__sfvwrite_r+0x3b0>
     b68:	81000017 	ldw	r4,0(r16)
     b6c:	b80d883a 	mov	r6,r23
     b70:	e00b883a 	mov	r5,fp
     b74:	0001aac0 	call	1aac <memmove>
     b78:	80c00217 	ldw	r3,8(r16)
     b7c:	81000017 	ldw	r4,0(r16)
     b80:	9005883a 	mov	r2,r18
     b84:	1ce7c83a 	sub	r19,r3,r19
     b88:	25cf883a 	add	r7,r4,r23
     b8c:	84c00215 	stw	r19,8(r16)
     b90:	81c00015 	stw	r7,0(r16)
     b94:	a0c00217 	ldw	r3,8(r20)
     b98:	e0b9883a 	add	fp,fp,r2
     b9c:	90a5c83a 	sub	r18,r18,r2
     ba0:	18a7c83a 	sub	r19,r3,r2
     ba4:	a4c00215 	stw	r19,8(r20)
     ba8:	983fce26 	beq	r19,zero,ae4 <__sfvwrite_r+0xb4>
     bac:	80c0030b 	ldhu	r3,12(r16)
     bb0:	903fe61e 	bne	r18,zero,b4c <__sfvwrite_r+0x11c>
     bb4:	8f000017 	ldw	fp,0(r17)
     bb8:	8c800117 	ldw	r18,4(r17)
     bbc:	8c400204 	addi	r17,r17,8
     bc0:	003fe106 	br	b48 <__sfvwrite_r+0x118>
     bc4:	8cc00017 	ldw	r19,0(r17)
     bc8:	8c800117 	ldw	r18,4(r17)
     bcc:	8c400204 	addi	r17,r17,8
     bd0:	003fb306 	br	aa0 <__sfvwrite_r+0x70>
     bd4:	0005883a 	mov	r2,zero
     bd8:	f800283a 	ret
     bdc:	81000017 	ldw	r4,0(r16)
     be0:	80800417 	ldw	r2,16(r16)
     be4:	11005736 	bltu	r2,r4,d44 <__sfvwrite_r+0x314>
     be8:	85c00517 	ldw	r23,20(r16)
     bec:	95c05536 	bltu	r18,r23,d44 <__sfvwrite_r+0x314>
     bf0:	00a00034 	movhi	r2,32768
     bf4:	10bfffc4 	addi	r2,r2,-1
     bf8:	9009883a 	mov	r4,r18
     bfc:	1480012e 	bgeu	r2,r18,c04 <__sfvwrite_r+0x1d4>
     c00:	1009883a 	mov	r4,r2
     c04:	b80b883a 	mov	r5,r23
     c08:	00033f80 	call	33f8 <__divsi3>
     c0c:	15cf383a 	mul	r7,r2,r23
     c10:	81400717 	ldw	r5,28(r16)
     c14:	80800917 	ldw	r2,36(r16)
     c18:	e00d883a 	mov	r6,fp
     c1c:	a809883a 	mov	r4,r21
     c20:	103ee83a 	callr	r2
     c24:	00bfdb16 	blt	zero,r2,b94 <__sfvwrite_r+0x164>
     c28:	8080030b 	ldhu	r2,12(r16)
     c2c:	10801014 	ori	r2,r2,64
     c30:	8080030d 	sth	r2,12(r16)
     c34:	00bfffc4 	movi	r2,-1
     c38:	003fab06 	br	ae8 <__sfvwrite_r+0xb8>
     c3c:	0027883a 	mov	r19,zero
     c40:	0011883a 	mov	r8,zero
     c44:	0039883a 	mov	fp,zero
     c48:	0025883a 	mov	r18,zero
     c4c:	90001f26 	beq	r18,zero,ccc <__sfvwrite_r+0x29c>
     c50:	40005a26 	beq	r8,zero,dbc <__sfvwrite_r+0x38c>
     c54:	982d883a 	mov	r22,r19
     c58:	94c0012e 	bgeu	r18,r19,c60 <__sfvwrite_r+0x230>
     c5c:	902d883a 	mov	r22,r18
     c60:	81000017 	ldw	r4,0(r16)
     c64:	80800417 	ldw	r2,16(r16)
     c68:	b02f883a 	mov	r23,r22
     c6c:	81c00517 	ldw	r7,20(r16)
     c70:	1100032e 	bgeu	r2,r4,c80 <__sfvwrite_r+0x250>
     c74:	80c00217 	ldw	r3,8(r16)
     c78:	38c7883a 	add	r3,r7,r3
     c7c:	1d801816 	blt	r3,r22,ce0 <__sfvwrite_r+0x2b0>
     c80:	b1c03e16 	blt	r22,r7,d7c <__sfvwrite_r+0x34c>
     c84:	80800917 	ldw	r2,36(r16)
     c88:	81400717 	ldw	r5,28(r16)
     c8c:	e00d883a 	mov	r6,fp
     c90:	da000115 	stw	r8,4(sp)
     c94:	a809883a 	mov	r4,r21
     c98:	103ee83a 	callr	r2
     c9c:	102f883a 	mov	r23,r2
     ca0:	da000117 	ldw	r8,4(sp)
     ca4:	00bfe00e 	bge	zero,r2,c28 <__sfvwrite_r+0x1f8>
     ca8:	9de7c83a 	sub	r19,r19,r23
     cac:	98001f26 	beq	r19,zero,d2c <__sfvwrite_r+0x2fc>
     cb0:	a0800217 	ldw	r2,8(r20)
     cb4:	e5f9883a 	add	fp,fp,r23
     cb8:	95e5c83a 	sub	r18,r18,r23
     cbc:	15efc83a 	sub	r23,r2,r23
     cc0:	a5c00215 	stw	r23,8(r20)
     cc4:	b83f8726 	beq	r23,zero,ae4 <__sfvwrite_r+0xb4>
     cc8:	903fe11e 	bne	r18,zero,c50 <__sfvwrite_r+0x220>
     ccc:	8f000017 	ldw	fp,0(r17)
     cd0:	8c800117 	ldw	r18,4(r17)
     cd4:	0011883a 	mov	r8,zero
     cd8:	8c400204 	addi	r17,r17,8
     cdc:	003fdb06 	br	c4c <__sfvwrite_r+0x21c>
     ce0:	180d883a 	mov	r6,r3
     ce4:	e00b883a 	mov	r5,fp
     ce8:	da000115 	stw	r8,4(sp)
     cec:	d8c00015 	stw	r3,0(sp)
     cf0:	0001aac0 	call	1aac <memmove>
     cf4:	d8c00017 	ldw	r3,0(sp)
     cf8:	80800017 	ldw	r2,0(r16)
     cfc:	800b883a 	mov	r5,r16
     d00:	a809883a 	mov	r4,r21
     d04:	10c5883a 	add	r2,r2,r3
     d08:	80800015 	stw	r2,0(r16)
     d0c:	d8c00015 	stw	r3,0(sp)
     d10:	0002c0c0 	call	2c0c <_fflush_r>
     d14:	d8c00017 	ldw	r3,0(sp)
     d18:	da000117 	ldw	r8,4(sp)
     d1c:	103fc21e 	bne	r2,zero,c28 <__sfvwrite_r+0x1f8>
     d20:	182f883a 	mov	r23,r3
     d24:	9de7c83a 	sub	r19,r19,r23
     d28:	983fe11e 	bne	r19,zero,cb0 <__sfvwrite_r+0x280>
     d2c:	800b883a 	mov	r5,r16
     d30:	a809883a 	mov	r4,r21
     d34:	0002c0c0 	call	2c0c <_fflush_r>
     d38:	103fbb1e 	bne	r2,zero,c28 <__sfvwrite_r+0x1f8>
     d3c:	0011883a 	mov	r8,zero
     d40:	003fdb06 	br	cb0 <__sfvwrite_r+0x280>
     d44:	94c0012e 	bgeu	r18,r19,d4c <__sfvwrite_r+0x31c>
     d48:	9027883a 	mov	r19,r18
     d4c:	980d883a 	mov	r6,r19
     d50:	e00b883a 	mov	r5,fp
     d54:	0001aac0 	call	1aac <memmove>
     d58:	80800217 	ldw	r2,8(r16)
     d5c:	80c00017 	ldw	r3,0(r16)
     d60:	14c5c83a 	sub	r2,r2,r19
     d64:	1cc7883a 	add	r3,r3,r19
     d68:	80800215 	stw	r2,8(r16)
     d6c:	80c00015 	stw	r3,0(r16)
     d70:	10004326 	beq	r2,zero,e80 <__sfvwrite_r+0x450>
     d74:	9805883a 	mov	r2,r19
     d78:	003f8606 	br	b94 <__sfvwrite_r+0x164>
     d7c:	b00d883a 	mov	r6,r22
     d80:	e00b883a 	mov	r5,fp
     d84:	da000115 	stw	r8,4(sp)
     d88:	0001aac0 	call	1aac <memmove>
     d8c:	80800217 	ldw	r2,8(r16)
     d90:	80c00017 	ldw	r3,0(r16)
     d94:	da000117 	ldw	r8,4(sp)
     d98:	1585c83a 	sub	r2,r2,r22
     d9c:	1dad883a 	add	r22,r3,r22
     da0:	80800215 	stw	r2,8(r16)
     da4:	85800015 	stw	r22,0(r16)
     da8:	003fbf06 	br	ca8 <__sfvwrite_r+0x278>
     dac:	81000017 	ldw	r4,0(r16)
     db0:	9027883a 	mov	r19,r18
     db4:	902f883a 	mov	r23,r18
     db8:	003f6c06 	br	b6c <__sfvwrite_r+0x13c>
     dbc:	900d883a 	mov	r6,r18
     dc0:	01400284 	movi	r5,10
     dc4:	e009883a 	mov	r4,fp
     dc8:	00018800 	call	1880 <memchr>
     dcc:	10003e26 	beq	r2,zero,ec8 <__sfvwrite_r+0x498>
     dd0:	10800044 	addi	r2,r2,1
     dd4:	1727c83a 	sub	r19,r2,fp
     dd8:	02000044 	movi	r8,1
     ddc:	003f9d06 	br	c54 <__sfvwrite_r+0x224>
     de0:	80800517 	ldw	r2,20(r16)
     de4:	81400417 	ldw	r5,16(r16)
     de8:	81c00017 	ldw	r7,0(r16)
     dec:	10a7883a 	add	r19,r2,r2
     df0:	9885883a 	add	r2,r19,r2
     df4:	1026d7fa 	srli	r19,r2,31
     df8:	396dc83a 	sub	r22,r7,r5
     dfc:	b1000044 	addi	r4,r22,1
     e00:	9885883a 	add	r2,r19,r2
     e04:	1027d07a 	srai	r19,r2,1
     e08:	2485883a 	add	r2,r4,r18
     e0c:	980d883a 	mov	r6,r19
     e10:	9880022e 	bgeu	r19,r2,e1c <__sfvwrite_r+0x3ec>
     e14:	1027883a 	mov	r19,r2
     e18:	100d883a 	mov	r6,r2
     e1c:	18c1000c 	andi	r3,r3,1024
     e20:	18001c26 	beq	r3,zero,e94 <__sfvwrite_r+0x464>
     e24:	300b883a 	mov	r5,r6
     e28:	a809883a 	mov	r4,r21
     e2c:	00010740 	call	1074 <_malloc_r>
     e30:	102f883a 	mov	r23,r2
     e34:	10002926 	beq	r2,zero,edc <__sfvwrite_r+0x4ac>
     e38:	81400417 	ldw	r5,16(r16)
     e3c:	b00d883a 	mov	r6,r22
     e40:	1009883a 	mov	r4,r2
     e44:	00019640 	call	1964 <memcpy>
     e48:	8080030b 	ldhu	r2,12(r16)
     e4c:	00fedfc4 	movi	r3,-1153
     e50:	10c4703a 	and	r2,r2,r3
     e54:	10802014 	ori	r2,r2,128
     e58:	8080030d 	sth	r2,12(r16)
     e5c:	bd89883a 	add	r4,r23,r22
     e60:	9d8fc83a 	sub	r7,r19,r22
     e64:	85c00415 	stw	r23,16(r16)
     e68:	84c00515 	stw	r19,20(r16)
     e6c:	81000015 	stw	r4,0(r16)
     e70:	9027883a 	mov	r19,r18
     e74:	81c00215 	stw	r7,8(r16)
     e78:	902f883a 	mov	r23,r18
     e7c:	003f3b06 	br	b6c <__sfvwrite_r+0x13c>
     e80:	800b883a 	mov	r5,r16
     e84:	a809883a 	mov	r4,r21
     e88:	0002c0c0 	call	2c0c <_fflush_r>
     e8c:	103fb926 	beq	r2,zero,d74 <__sfvwrite_r+0x344>
     e90:	003f6506 	br	c28 <__sfvwrite_r+0x1f8>
     e94:	a809883a 	mov	r4,r21
     e98:	0001e980 	call	1e98 <_realloc_r>
     e9c:	102f883a 	mov	r23,r2
     ea0:	103fee1e 	bne	r2,zero,e5c <__sfvwrite_r+0x42c>
     ea4:	81400417 	ldw	r5,16(r16)
     ea8:	a809883a 	mov	r4,r21
     eac:	0002dbc0 	call	2dbc <_free_r>
     eb0:	8080030b 	ldhu	r2,12(r16)
     eb4:	00ffdfc4 	movi	r3,-129
     eb8:	1884703a 	and	r2,r3,r2
     ebc:	00c00304 	movi	r3,12
     ec0:	a8c00015 	stw	r3,0(r21)
     ec4:	003f5906 	br	c2c <__sfvwrite_r+0x1fc>
     ec8:	94c00044 	addi	r19,r18,1
     ecc:	02000044 	movi	r8,1
     ed0:	003f6006 	br	c54 <__sfvwrite_r+0x224>
     ed4:	00bfffc4 	movi	r2,-1
     ed8:	003f0306 	br	ae8 <__sfvwrite_r+0xb8>
     edc:	00800304 	movi	r2,12
     ee0:	a8800015 	stw	r2,0(r21)
     ee4:	8080030b 	ldhu	r2,12(r16)
     ee8:	003f5006 	br	c2c <__sfvwrite_r+0x1fc>

00000eec <_fwalk>:
     eec:	defff704 	addi	sp,sp,-36
     ef0:	dd000415 	stw	r20,16(sp)
     ef4:	dfc00815 	stw	ra,32(sp)
     ef8:	ddc00715 	stw	r23,28(sp)
     efc:	dd800615 	stw	r22,24(sp)
     f00:	dd400515 	stw	r21,20(sp)
     f04:	dcc00315 	stw	r19,12(sp)
     f08:	dc800215 	stw	r18,8(sp)
     f0c:	dc400115 	stw	r17,4(sp)
     f10:	dc000015 	stw	r16,0(sp)
     f14:	2500b804 	addi	r20,r4,736
     f18:	a0002326 	beq	r20,zero,fa8 <_fwalk+0xbc>
     f1c:	282b883a 	mov	r21,r5
     f20:	002f883a 	mov	r23,zero
     f24:	05800044 	movi	r22,1
     f28:	04ffffc4 	movi	r19,-1
     f2c:	a4400117 	ldw	r17,4(r20)
     f30:	a4800217 	ldw	r18,8(r20)
     f34:	8c7fffc4 	addi	r17,r17,-1
     f38:	88000d16 	blt	r17,zero,f70 <_fwalk+0x84>
     f3c:	94000304 	addi	r16,r18,12
     f40:	94800384 	addi	r18,r18,14
     f44:	8080000b 	ldhu	r2,0(r16)
     f48:	8c7fffc4 	addi	r17,r17,-1
     f4c:	813ffd04 	addi	r4,r16,-12
     f50:	b080042e 	bgeu	r22,r2,f64 <_fwalk+0x78>
     f54:	9080000f 	ldh	r2,0(r18)
     f58:	14c00226 	beq	r2,r19,f64 <_fwalk+0x78>
     f5c:	a83ee83a 	callr	r21
     f60:	b8aeb03a 	or	r23,r23,r2
     f64:	84001a04 	addi	r16,r16,104
     f68:	94801a04 	addi	r18,r18,104
     f6c:	8cfff51e 	bne	r17,r19,f44 <_fwalk+0x58>
     f70:	a5000017 	ldw	r20,0(r20)
     f74:	a03fed1e 	bne	r20,zero,f2c <_fwalk+0x40>
     f78:	b805883a 	mov	r2,r23
     f7c:	dfc00817 	ldw	ra,32(sp)
     f80:	ddc00717 	ldw	r23,28(sp)
     f84:	dd800617 	ldw	r22,24(sp)
     f88:	dd400517 	ldw	r21,20(sp)
     f8c:	dd000417 	ldw	r20,16(sp)
     f90:	dcc00317 	ldw	r19,12(sp)
     f94:	dc800217 	ldw	r18,8(sp)
     f98:	dc400117 	ldw	r17,4(sp)
     f9c:	dc000017 	ldw	r16,0(sp)
     fa0:	dec00904 	addi	sp,sp,36
     fa4:	f800283a 	ret
     fa8:	002f883a 	mov	r23,zero
     fac:	003ff206 	br	f78 <_fwalk+0x8c>

00000fb0 <_fwalk_reent>:
     fb0:	defff704 	addi	sp,sp,-36
     fb4:	dd000415 	stw	r20,16(sp)
     fb8:	dfc00815 	stw	ra,32(sp)
     fbc:	ddc00715 	stw	r23,28(sp)
     fc0:	dd800615 	stw	r22,24(sp)
     fc4:	dd400515 	stw	r21,20(sp)
     fc8:	dcc00315 	stw	r19,12(sp)
     fcc:	dc800215 	stw	r18,8(sp)
     fd0:	dc400115 	stw	r17,4(sp)
     fd4:	dc000015 	stw	r16,0(sp)
     fd8:	2500b804 	addi	r20,r4,736
     fdc:	a0002326 	beq	r20,zero,106c <_fwalk_reent+0xbc>
     fe0:	282b883a 	mov	r21,r5
     fe4:	2027883a 	mov	r19,r4
     fe8:	002f883a 	mov	r23,zero
     fec:	05800044 	movi	r22,1
     ff0:	04bfffc4 	movi	r18,-1
     ff4:	a4400117 	ldw	r17,4(r20)
     ff8:	a4000217 	ldw	r16,8(r20)
     ffc:	8c7fffc4 	addi	r17,r17,-1
    1000:	88000c16 	blt	r17,zero,1034 <_fwalk_reent+0x84>
    1004:	84000304 	addi	r16,r16,12
    1008:	8080000b 	ldhu	r2,0(r16)
    100c:	8c7fffc4 	addi	r17,r17,-1
    1010:	817ffd04 	addi	r5,r16,-12
    1014:	b080052e 	bgeu	r22,r2,102c <_fwalk_reent+0x7c>
    1018:	8080008f 	ldh	r2,2(r16)
    101c:	9809883a 	mov	r4,r19
    1020:	14800226 	beq	r2,r18,102c <_fwalk_reent+0x7c>
    1024:	a83ee83a 	callr	r21
    1028:	b8aeb03a 	or	r23,r23,r2
    102c:	84001a04 	addi	r16,r16,104
    1030:	8cbff51e 	bne	r17,r18,1008 <_fwalk_reent+0x58>
    1034:	a5000017 	ldw	r20,0(r20)
    1038:	a03fee1e 	bne	r20,zero,ff4 <_fwalk_reent+0x44>
    103c:	b805883a 	mov	r2,r23
    1040:	dfc00817 	ldw	ra,32(sp)
    1044:	ddc00717 	ldw	r23,28(sp)
    1048:	dd800617 	ldw	r22,24(sp)
    104c:	dd400517 	ldw	r21,20(sp)
    1050:	dd000417 	ldw	r20,16(sp)
    1054:	dcc00317 	ldw	r19,12(sp)
    1058:	dc800217 	ldw	r18,8(sp)
    105c:	dc400117 	ldw	r17,4(sp)
    1060:	dc000017 	ldw	r16,0(sp)
    1064:	dec00904 	addi	sp,sp,36
    1068:	f800283a 	ret
    106c:	002f883a 	mov	r23,zero
    1070:	003ff206 	br	103c <_fwalk_reent+0x8c>

00001074 <_malloc_r>:
    1074:	defff504 	addi	sp,sp,-44
    1078:	dc800315 	stw	r18,12(sp)
    107c:	dfc00a15 	stw	ra,40(sp)
    1080:	df000915 	stw	fp,36(sp)
    1084:	ddc00815 	stw	r23,32(sp)
    1088:	dd800715 	stw	r22,28(sp)
    108c:	dd400615 	stw	r21,24(sp)
    1090:	dd000515 	stw	r20,20(sp)
    1094:	dcc00415 	stw	r19,16(sp)
    1098:	dc400215 	stw	r17,8(sp)
    109c:	dc000115 	stw	r16,4(sp)
    10a0:	288002c4 	addi	r2,r5,11
    10a4:	00c00584 	movi	r3,22
    10a8:	2025883a 	mov	r18,r4
    10ac:	18807f2e 	bgeu	r3,r2,12ac <_malloc_r+0x238>
    10b0:	047ffe04 	movi	r17,-8
    10b4:	1462703a 	and	r17,r2,r17
    10b8:	8800a316 	blt	r17,zero,1348 <_malloc_r+0x2d4>
    10bc:	8940a236 	bltu	r17,r5,1348 <_malloc_r+0x2d4>
    10c0:	0003b780 	call	3b78 <__malloc_lock>
    10c4:	00807dc4 	movi	r2,503
    10c8:	1441e92e 	bgeu	r2,r17,1870 <_malloc_r+0x7fc>
    10cc:	8804d27a 	srli	r2,r17,9
    10d0:	1000a126 	beq	r2,zero,1358 <_malloc_r+0x2e4>
    10d4:	00c00104 	movi	r3,4
    10d8:	18811e36 	bltu	r3,r2,1554 <_malloc_r+0x4e0>
    10dc:	8804d1ba 	srli	r2,r17,6
    10e0:	12000e44 	addi	r8,r2,57
    10e4:	11c00e04 	addi	r7,r2,56
    10e8:	4209883a 	add	r4,r8,r8
    10ec:	04c00034 	movhi	r19,0
    10f0:	2109883a 	add	r4,r4,r4
    10f4:	9cd9bf04 	addi	r19,r19,26364
    10f8:	2109883a 	add	r4,r4,r4
    10fc:	9909883a 	add	r4,r19,r4
    1100:	24000117 	ldw	r16,4(r4)
    1104:	213ffe04 	addi	r4,r4,-8
    1108:	24009726 	beq	r4,r16,1368 <_malloc_r+0x2f4>
    110c:	80800117 	ldw	r2,4(r16)
    1110:	01bfff04 	movi	r6,-4
    1114:	014003c4 	movi	r5,15
    1118:	1184703a 	and	r2,r2,r6
    111c:	1447c83a 	sub	r3,r2,r17
    1120:	28c00716 	blt	r5,r3,1140 <_malloc_r+0xcc>
    1124:	1800920e 	bge	r3,zero,1370 <_malloc_r+0x2fc>
    1128:	84000317 	ldw	r16,12(r16)
    112c:	24008e26 	beq	r4,r16,1368 <_malloc_r+0x2f4>
    1130:	80800117 	ldw	r2,4(r16)
    1134:	1184703a 	and	r2,r2,r6
    1138:	1447c83a 	sub	r3,r2,r17
    113c:	28fff90e 	bge	r5,r3,1124 <_malloc_r+0xb0>
    1140:	3809883a 	mov	r4,r7
    1144:	01800034 	movhi	r6,0
    1148:	9c000417 	ldw	r16,16(r19)
    114c:	3199bf04 	addi	r6,r6,26364
    1150:	32000204 	addi	r8,r6,8
    1154:	82013426 	beq	r16,r8,1628 <_malloc_r+0x5b4>
    1158:	80c00117 	ldw	r3,4(r16)
    115c:	00bfff04 	movi	r2,-4
    1160:	188e703a 	and	r7,r3,r2
    1164:	3c45c83a 	sub	r2,r7,r17
    1168:	00c003c4 	movi	r3,15
    116c:	18811f16 	blt	r3,r2,15ec <_malloc_r+0x578>
    1170:	32000515 	stw	r8,20(r6)
    1174:	32000415 	stw	r8,16(r6)
    1178:	10007f0e 	bge	r2,zero,1378 <_malloc_r+0x304>
    117c:	00807fc4 	movi	r2,511
    1180:	11c0fd36 	bltu	r2,r7,1578 <_malloc_r+0x504>
    1184:	3806d0fa 	srli	r3,r7,3
    1188:	01c00044 	movi	r7,1
    118c:	30800117 	ldw	r2,4(r6)
    1190:	19400044 	addi	r5,r3,1
    1194:	294b883a 	add	r5,r5,r5
    1198:	1807d0ba 	srai	r3,r3,2
    119c:	294b883a 	add	r5,r5,r5
    11a0:	294b883a 	add	r5,r5,r5
    11a4:	298b883a 	add	r5,r5,r6
    11a8:	38c6983a 	sll	r3,r7,r3
    11ac:	29c00017 	ldw	r7,0(r5)
    11b0:	2a7ffe04 	addi	r9,r5,-8
    11b4:	1886b03a 	or	r3,r3,r2
    11b8:	82400315 	stw	r9,12(r16)
    11bc:	81c00215 	stw	r7,8(r16)
    11c0:	30c00115 	stw	r3,4(r6)
    11c4:	2c000015 	stw	r16,0(r5)
    11c8:	3c000315 	stw	r16,12(r7)
    11cc:	2005d0ba 	srai	r2,r4,2
    11d0:	01400044 	movi	r5,1
    11d4:	288a983a 	sll	r5,r5,r2
    11d8:	19406f36 	bltu	r3,r5,1398 <_malloc_r+0x324>
    11dc:	28c4703a 	and	r2,r5,r3
    11e0:	10000a1e 	bne	r2,zero,120c <_malloc_r+0x198>
    11e4:	00bfff04 	movi	r2,-4
    11e8:	294b883a 	add	r5,r5,r5
    11ec:	2088703a 	and	r4,r4,r2
    11f0:	28c4703a 	and	r2,r5,r3
    11f4:	21000104 	addi	r4,r4,4
    11f8:	1000041e 	bne	r2,zero,120c <_malloc_r+0x198>
    11fc:	294b883a 	add	r5,r5,r5
    1200:	28c4703a 	and	r2,r5,r3
    1204:	21000104 	addi	r4,r4,4
    1208:	103ffc26 	beq	r2,zero,11fc <_malloc_r+0x188>
    120c:	02bfff04 	movi	r10,-4
    1210:	024003c4 	movi	r9,15
    1214:	21800044 	addi	r6,r4,1
    1218:	318d883a 	add	r6,r6,r6
    121c:	318d883a 	add	r6,r6,r6
    1220:	318d883a 	add	r6,r6,r6
    1224:	998d883a 	add	r6,r19,r6
    1228:	333ffe04 	addi	r12,r6,-8
    122c:	2017883a 	mov	r11,r4
    1230:	31800104 	addi	r6,r6,4
    1234:	34000017 	ldw	r16,0(r6)
    1238:	31fffd04 	addi	r7,r6,-12
    123c:	81c0041e 	bne	r16,r7,1250 <_malloc_r+0x1dc>
    1240:	0000fb06 	br	1630 <_malloc_r+0x5bc>
    1244:	1801030e 	bge	r3,zero,1654 <_malloc_r+0x5e0>
    1248:	84000317 	ldw	r16,12(r16)
    124c:	81c0f826 	beq	r16,r7,1630 <_malloc_r+0x5bc>
    1250:	80800117 	ldw	r2,4(r16)
    1254:	1284703a 	and	r2,r2,r10
    1258:	1447c83a 	sub	r3,r2,r17
    125c:	48fff90e 	bge	r9,r3,1244 <_malloc_r+0x1d0>
    1260:	80800317 	ldw	r2,12(r16)
    1264:	81000217 	ldw	r4,8(r16)
    1268:	89400054 	ori	r5,r17,1
    126c:	81400115 	stw	r5,4(r16)
    1270:	20800315 	stw	r2,12(r4)
    1274:	11000215 	stw	r4,8(r2)
    1278:	8463883a 	add	r17,r16,r17
    127c:	9c400515 	stw	r17,20(r19)
    1280:	9c400415 	stw	r17,16(r19)
    1284:	18800054 	ori	r2,r3,1
    1288:	88800115 	stw	r2,4(r17)
    128c:	8a000315 	stw	r8,12(r17)
    1290:	8a000215 	stw	r8,8(r17)
    1294:	88e3883a 	add	r17,r17,r3
    1298:	88c00015 	stw	r3,0(r17)
    129c:	9009883a 	mov	r4,r18
    12a0:	0003b9c0 	call	3b9c <__malloc_unlock>
    12a4:	80800204 	addi	r2,r16,8
    12a8:	00001b06 	br	1318 <_malloc_r+0x2a4>
    12ac:	04400404 	movi	r17,16
    12b0:	89402536 	bltu	r17,r5,1348 <_malloc_r+0x2d4>
    12b4:	0003b780 	call	3b78 <__malloc_lock>
    12b8:	00800184 	movi	r2,6
    12bc:	01000084 	movi	r4,2
    12c0:	04c00034 	movhi	r19,0
    12c4:	1085883a 	add	r2,r2,r2
    12c8:	9cd9bf04 	addi	r19,r19,26364
    12cc:	1085883a 	add	r2,r2,r2
    12d0:	9885883a 	add	r2,r19,r2
    12d4:	14000117 	ldw	r16,4(r2)
    12d8:	10fffe04 	addi	r3,r2,-8
    12dc:	80c0d926 	beq	r16,r3,1644 <_malloc_r+0x5d0>
    12e0:	80c00117 	ldw	r3,4(r16)
    12e4:	81000317 	ldw	r4,12(r16)
    12e8:	00bfff04 	movi	r2,-4
    12ec:	1884703a 	and	r2,r3,r2
    12f0:	81400217 	ldw	r5,8(r16)
    12f4:	8085883a 	add	r2,r16,r2
    12f8:	10c00117 	ldw	r3,4(r2)
    12fc:	29000315 	stw	r4,12(r5)
    1300:	21400215 	stw	r5,8(r4)
    1304:	18c00054 	ori	r3,r3,1
    1308:	10c00115 	stw	r3,4(r2)
    130c:	9009883a 	mov	r4,r18
    1310:	0003b9c0 	call	3b9c <__malloc_unlock>
    1314:	80800204 	addi	r2,r16,8
    1318:	dfc00a17 	ldw	ra,40(sp)
    131c:	df000917 	ldw	fp,36(sp)
    1320:	ddc00817 	ldw	r23,32(sp)
    1324:	dd800717 	ldw	r22,28(sp)
    1328:	dd400617 	ldw	r21,24(sp)
    132c:	dd000517 	ldw	r20,20(sp)
    1330:	dcc00417 	ldw	r19,16(sp)
    1334:	dc800317 	ldw	r18,12(sp)
    1338:	dc400217 	ldw	r17,8(sp)
    133c:	dc000117 	ldw	r16,4(sp)
    1340:	dec00b04 	addi	sp,sp,44
    1344:	f800283a 	ret
    1348:	00800304 	movi	r2,12
    134c:	90800015 	stw	r2,0(r18)
    1350:	0005883a 	mov	r2,zero
    1354:	003ff006 	br	1318 <_malloc_r+0x2a4>
    1358:	01002004 	movi	r4,128
    135c:	02001004 	movi	r8,64
    1360:	01c00fc4 	movi	r7,63
    1364:	003f6106 	br	10ec <_malloc_r+0x78>
    1368:	4009883a 	mov	r4,r8
    136c:	003f7506 	br	1144 <_malloc_r+0xd0>
    1370:	81000317 	ldw	r4,12(r16)
    1374:	003fde06 	br	12f0 <_malloc_r+0x27c>
    1378:	81c5883a 	add	r2,r16,r7
    137c:	11400117 	ldw	r5,4(r2)
    1380:	9009883a 	mov	r4,r18
    1384:	29400054 	ori	r5,r5,1
    1388:	11400115 	stw	r5,4(r2)
    138c:	0003b9c0 	call	3b9c <__malloc_unlock>
    1390:	80800204 	addi	r2,r16,8
    1394:	003fe006 	br	1318 <_malloc_r+0x2a4>
    1398:	9c000217 	ldw	r16,8(r19)
    139c:	00bfff04 	movi	r2,-4
    13a0:	85800117 	ldw	r22,4(r16)
    13a4:	b0ac703a 	and	r22,r22,r2
    13a8:	b4400336 	bltu	r22,r17,13b8 <_malloc_r+0x344>
    13ac:	b445c83a 	sub	r2,r22,r17
    13b0:	00c003c4 	movi	r3,15
    13b4:	18805d16 	blt	r3,r2,152c <_malloc_r+0x4b8>
    13b8:	05c00034 	movhi	r23,0
    13bc:	00800074 	movhi	r2,1
    13c0:	10a60404 	addi	r2,r2,-26608
    13c4:	bddf5004 	addi	r23,r23,32064
    13c8:	15400017 	ldw	r21,0(r2)
    13cc:	b8c00017 	ldw	r3,0(r23)
    13d0:	00bfffc4 	movi	r2,-1
    13d4:	858d883a 	add	r6,r16,r22
    13d8:	8d6b883a 	add	r21,r17,r21
    13dc:	1880ea26 	beq	r3,r2,1788 <_malloc_r+0x714>
    13e0:	ad4403c4 	addi	r21,r21,4111
    13e4:	00bc0004 	movi	r2,-4096
    13e8:	a8aa703a 	and	r21,r21,r2
    13ec:	a80b883a 	mov	r5,r21
    13f0:	9009883a 	mov	r4,r18
    13f4:	d9800015 	stw	r6,0(sp)
    13f8:	00023fc0 	call	23fc <_sbrk_r>
    13fc:	1029883a 	mov	r20,r2
    1400:	00bfffc4 	movi	r2,-1
    1404:	d9800017 	ldw	r6,0(sp)
    1408:	a080e826 	beq	r20,r2,17ac <_malloc_r+0x738>
    140c:	a180a636 	bltu	r20,r6,16a8 <_malloc_r+0x634>
    1410:	07000074 	movhi	fp,1
    1414:	e7260d04 	addi	fp,fp,-26572
    1418:	e0800017 	ldw	r2,0(fp)
    141c:	a887883a 	add	r3,r21,r2
    1420:	e0c00015 	stw	r3,0(fp)
    1424:	3500e626 	beq	r6,r20,17c0 <_malloc_r+0x74c>
    1428:	b9000017 	ldw	r4,0(r23)
    142c:	00bfffc4 	movi	r2,-1
    1430:	2080ee26 	beq	r4,r2,17ec <_malloc_r+0x778>
    1434:	a185c83a 	sub	r2,r20,r6
    1438:	10c5883a 	add	r2,r2,r3
    143c:	e0800015 	stw	r2,0(fp)
    1440:	a0c001cc 	andi	r3,r20,7
    1444:	1800bc26 	beq	r3,zero,1738 <_malloc_r+0x6c4>
    1448:	a0e9c83a 	sub	r20,r20,r3
    144c:	00840204 	movi	r2,4104
    1450:	a5000204 	addi	r20,r20,8
    1454:	10c7c83a 	sub	r3,r2,r3
    1458:	a545883a 	add	r2,r20,r21
    145c:	1083ffcc 	andi	r2,r2,4095
    1460:	18abc83a 	sub	r21,r3,r2
    1464:	a80b883a 	mov	r5,r21
    1468:	9009883a 	mov	r4,r18
    146c:	00023fc0 	call	23fc <_sbrk_r>
    1470:	00ffffc4 	movi	r3,-1
    1474:	10c0e126 	beq	r2,r3,17fc <_malloc_r+0x788>
    1478:	1505c83a 	sub	r2,r2,r20
    147c:	1545883a 	add	r2,r2,r21
    1480:	10800054 	ori	r2,r2,1
    1484:	e0c00017 	ldw	r3,0(fp)
    1488:	9d000215 	stw	r20,8(r19)
    148c:	a0800115 	stw	r2,4(r20)
    1490:	a8c7883a 	add	r3,r21,r3
    1494:	e0c00015 	stw	r3,0(fp)
    1498:	84c00e26 	beq	r16,r19,14d4 <_malloc_r+0x460>
    149c:	018003c4 	movi	r6,15
    14a0:	3580a72e 	bgeu	r6,r22,1740 <_malloc_r+0x6cc>
    14a4:	81400117 	ldw	r5,4(r16)
    14a8:	013ffe04 	movi	r4,-8
    14ac:	b0bffd04 	addi	r2,r22,-12
    14b0:	1104703a 	and	r2,r2,r4
    14b4:	2900004c 	andi	r4,r5,1
    14b8:	2088b03a 	or	r4,r4,r2
    14bc:	81000115 	stw	r4,4(r16)
    14c0:	01400144 	movi	r5,5
    14c4:	8089883a 	add	r4,r16,r2
    14c8:	21400115 	stw	r5,4(r4)
    14cc:	21400215 	stw	r5,8(r4)
    14d0:	3080cd36 	bltu	r6,r2,1808 <_malloc_r+0x794>
    14d4:	00800074 	movhi	r2,1
    14d8:	10a60304 	addi	r2,r2,-26612
    14dc:	11000017 	ldw	r4,0(r2)
    14e0:	20c0012e 	bgeu	r4,r3,14e8 <_malloc_r+0x474>
    14e4:	10c00015 	stw	r3,0(r2)
    14e8:	00800074 	movhi	r2,1
    14ec:	10a60204 	addi	r2,r2,-26616
    14f0:	11000017 	ldw	r4,0(r2)
    14f4:	9c000217 	ldw	r16,8(r19)
    14f8:	20c0012e 	bgeu	r4,r3,1500 <_malloc_r+0x48c>
    14fc:	10c00015 	stw	r3,0(r2)
    1500:	80c00117 	ldw	r3,4(r16)
    1504:	00bfff04 	movi	r2,-4
    1508:	1886703a 	and	r3,r3,r2
    150c:	1c45c83a 	sub	r2,r3,r17
    1510:	1c400236 	bltu	r3,r17,151c <_malloc_r+0x4a8>
    1514:	00c003c4 	movi	r3,15
    1518:	18800416 	blt	r3,r2,152c <_malloc_r+0x4b8>
    151c:	9009883a 	mov	r4,r18
    1520:	0003b9c0 	call	3b9c <__malloc_unlock>
    1524:	0005883a 	mov	r2,zero
    1528:	003f7b06 	br	1318 <_malloc_r+0x2a4>
    152c:	88c00054 	ori	r3,r17,1
    1530:	80c00115 	stw	r3,4(r16)
    1534:	8463883a 	add	r17,r16,r17
    1538:	10800054 	ori	r2,r2,1
    153c:	9c400215 	stw	r17,8(r19)
    1540:	88800115 	stw	r2,4(r17)
    1544:	9009883a 	mov	r4,r18
    1548:	0003b9c0 	call	3b9c <__malloc_unlock>
    154c:	80800204 	addi	r2,r16,8
    1550:	003f7106 	br	1318 <_malloc_r+0x2a4>
    1554:	00c00504 	movi	r3,20
    1558:	18804a2e 	bgeu	r3,r2,1684 <_malloc_r+0x610>
    155c:	00c01504 	movi	r3,84
    1560:	18806e36 	bltu	r3,r2,171c <_malloc_r+0x6a8>
    1564:	8804d33a 	srli	r2,r17,12
    1568:	12001bc4 	addi	r8,r2,111
    156c:	11c01b84 	addi	r7,r2,110
    1570:	4209883a 	add	r4,r8,r8
    1574:	003edd06 	br	10ec <_malloc_r+0x78>
    1578:	3804d27a 	srli	r2,r7,9
    157c:	00c00104 	movi	r3,4
    1580:	1880442e 	bgeu	r3,r2,1694 <_malloc_r+0x620>
    1584:	00c00504 	movi	r3,20
    1588:	18808136 	bltu	r3,r2,1790 <_malloc_r+0x71c>
    158c:	11401704 	addi	r5,r2,92
    1590:	10c016c4 	addi	r3,r2,91
    1594:	294b883a 	add	r5,r5,r5
    1598:	294b883a 	add	r5,r5,r5
    159c:	294b883a 	add	r5,r5,r5
    15a0:	994b883a 	add	r5,r19,r5
    15a4:	28800017 	ldw	r2,0(r5)
    15a8:	01800034 	movhi	r6,0
    15ac:	297ffe04 	addi	r5,r5,-8
    15b0:	3199bf04 	addi	r6,r6,26364
    15b4:	28806526 	beq	r5,r2,174c <_malloc_r+0x6d8>
    15b8:	01bfff04 	movi	r6,-4
    15bc:	10c00117 	ldw	r3,4(r2)
    15c0:	1986703a 	and	r3,r3,r6
    15c4:	38c0022e 	bgeu	r7,r3,15d0 <_malloc_r+0x55c>
    15c8:	10800217 	ldw	r2,8(r2)
    15cc:	28bffb1e 	bne	r5,r2,15bc <_malloc_r+0x548>
    15d0:	11400317 	ldw	r5,12(r2)
    15d4:	98c00117 	ldw	r3,4(r19)
    15d8:	81400315 	stw	r5,12(r16)
    15dc:	80800215 	stw	r2,8(r16)
    15e0:	2c000215 	stw	r16,8(r5)
    15e4:	14000315 	stw	r16,12(r2)
    15e8:	003ef806 	br	11cc <_malloc_r+0x158>
    15ec:	88c00054 	ori	r3,r17,1
    15f0:	80c00115 	stw	r3,4(r16)
    15f4:	8463883a 	add	r17,r16,r17
    15f8:	34400515 	stw	r17,20(r6)
    15fc:	34400415 	stw	r17,16(r6)
    1600:	10c00054 	ori	r3,r2,1
    1604:	8a000315 	stw	r8,12(r17)
    1608:	8a000215 	stw	r8,8(r17)
    160c:	88c00115 	stw	r3,4(r17)
    1610:	88a3883a 	add	r17,r17,r2
    1614:	88800015 	stw	r2,0(r17)
    1618:	9009883a 	mov	r4,r18
    161c:	0003b9c0 	call	3b9c <__malloc_unlock>
    1620:	80800204 	addi	r2,r16,8
    1624:	003f3c06 	br	1318 <_malloc_r+0x2a4>
    1628:	30c00117 	ldw	r3,4(r6)
    162c:	003ee706 	br	11cc <_malloc_r+0x158>
    1630:	5ac00044 	addi	r11,r11,1
    1634:	588000cc 	andi	r2,r11,3
    1638:	31800204 	addi	r6,r6,8
    163c:	103efd1e 	bne	r2,zero,1234 <_malloc_r+0x1c0>
    1640:	00002406 	br	16d4 <_malloc_r+0x660>
    1644:	14000317 	ldw	r16,12(r2)
    1648:	143f251e 	bne	r2,r16,12e0 <_malloc_r+0x26c>
    164c:	21000084 	addi	r4,r4,2
    1650:	003ebc06 	br	1144 <_malloc_r+0xd0>
    1654:	8085883a 	add	r2,r16,r2
    1658:	10c00117 	ldw	r3,4(r2)
    165c:	81000317 	ldw	r4,12(r16)
    1660:	81400217 	ldw	r5,8(r16)
    1664:	18c00054 	ori	r3,r3,1
    1668:	10c00115 	stw	r3,4(r2)
    166c:	29000315 	stw	r4,12(r5)
    1670:	21400215 	stw	r5,8(r4)
    1674:	9009883a 	mov	r4,r18
    1678:	0003b9c0 	call	3b9c <__malloc_unlock>
    167c:	80800204 	addi	r2,r16,8
    1680:	003f2506 	br	1318 <_malloc_r+0x2a4>
    1684:	12001704 	addi	r8,r2,92
    1688:	11c016c4 	addi	r7,r2,91
    168c:	4209883a 	add	r4,r8,r8
    1690:	003e9606 	br	10ec <_malloc_r+0x78>
    1694:	3804d1ba 	srli	r2,r7,6
    1698:	11400e44 	addi	r5,r2,57
    169c:	10c00e04 	addi	r3,r2,56
    16a0:	294b883a 	add	r5,r5,r5
    16a4:	003fbc06 	br	1598 <_malloc_r+0x524>
    16a8:	84ff5926 	beq	r16,r19,1410 <_malloc_r+0x39c>
    16ac:	00800034 	movhi	r2,0
    16b0:	1099bf04 	addi	r2,r2,26364
    16b4:	14000217 	ldw	r16,8(r2)
    16b8:	00bfff04 	movi	r2,-4
    16bc:	80c00117 	ldw	r3,4(r16)
    16c0:	1886703a 	and	r3,r3,r2
    16c4:	003f9106 	br	150c <_malloc_r+0x498>
    16c8:	60800217 	ldw	r2,8(r12)
    16cc:	213fffc4 	addi	r4,r4,-1
    16d0:	1300651e 	bne	r2,r12,1868 <_malloc_r+0x7f4>
    16d4:	208000cc 	andi	r2,r4,3
    16d8:	633ffe04 	addi	r12,r12,-8
    16dc:	103ffa1e 	bne	r2,zero,16c8 <_malloc_r+0x654>
    16e0:	98800117 	ldw	r2,4(r19)
    16e4:	0146303a 	nor	r3,zero,r5
    16e8:	1884703a 	and	r2,r3,r2
    16ec:	98800115 	stw	r2,4(r19)
    16f0:	294b883a 	add	r5,r5,r5
    16f4:	117f2836 	bltu	r2,r5,1398 <_malloc_r+0x324>
    16f8:	283f2726 	beq	r5,zero,1398 <_malloc_r+0x324>
    16fc:	2886703a 	and	r3,r5,r2
    1700:	5809883a 	mov	r4,r11
    1704:	183ec31e 	bne	r3,zero,1214 <_malloc_r+0x1a0>
    1708:	294b883a 	add	r5,r5,r5
    170c:	2886703a 	and	r3,r5,r2
    1710:	21000104 	addi	r4,r4,4
    1714:	183ffc26 	beq	r3,zero,1708 <_malloc_r+0x694>
    1718:	003ebe06 	br	1214 <_malloc_r+0x1a0>
    171c:	00c05504 	movi	r3,340
    1720:	18801236 	bltu	r3,r2,176c <_malloc_r+0x6f8>
    1724:	8804d3fa 	srli	r2,r17,15
    1728:	12001e04 	addi	r8,r2,120
    172c:	11c01dc4 	addi	r7,r2,119
    1730:	4209883a 	add	r4,r8,r8
    1734:	003e6d06 	br	10ec <_malloc_r+0x78>
    1738:	00c40004 	movi	r3,4096
    173c:	003f4606 	br	1458 <_malloc_r+0x3e4>
    1740:	00800044 	movi	r2,1
    1744:	a0800115 	stw	r2,4(r20)
    1748:	003f7406 	br	151c <_malloc_r+0x4a8>
    174c:	1805d0ba 	srai	r2,r3,2
    1750:	01c00044 	movi	r7,1
    1754:	30c00117 	ldw	r3,4(r6)
    1758:	388e983a 	sll	r7,r7,r2
    175c:	2805883a 	mov	r2,r5
    1760:	38c6b03a 	or	r3,r7,r3
    1764:	30c00115 	stw	r3,4(r6)
    1768:	003f9b06 	br	15d8 <_malloc_r+0x564>
    176c:	00c15504 	movi	r3,1364
    1770:	18801a36 	bltu	r3,r2,17dc <_malloc_r+0x768>
    1774:	8804d4ba 	srli	r2,r17,18
    1778:	12001f44 	addi	r8,r2,125
    177c:	11c01f04 	addi	r7,r2,124
    1780:	4209883a 	add	r4,r8,r8
    1784:	003e5906 	br	10ec <_malloc_r+0x78>
    1788:	ad400404 	addi	r21,r21,16
    178c:	003f1706 	br	13ec <_malloc_r+0x378>
    1790:	00c01504 	movi	r3,84
    1794:	18802336 	bltu	r3,r2,1824 <_malloc_r+0x7b0>
    1798:	3804d33a 	srli	r2,r7,12
    179c:	11401bc4 	addi	r5,r2,111
    17a0:	10c01b84 	addi	r3,r2,110
    17a4:	294b883a 	add	r5,r5,r5
    17a8:	003f7b06 	br	1598 <_malloc_r+0x524>
    17ac:	9c000217 	ldw	r16,8(r19)
    17b0:	00bfff04 	movi	r2,-4
    17b4:	80c00117 	ldw	r3,4(r16)
    17b8:	1886703a 	and	r3,r3,r2
    17bc:	003f5306 	br	150c <_malloc_r+0x498>
    17c0:	3083ffcc 	andi	r2,r6,4095
    17c4:	103f181e 	bne	r2,zero,1428 <_malloc_r+0x3b4>
    17c8:	99000217 	ldw	r4,8(r19)
    17cc:	b545883a 	add	r2,r22,r21
    17d0:	10800054 	ori	r2,r2,1
    17d4:	20800115 	stw	r2,4(r4)
    17d8:	003f3e06 	br	14d4 <_malloc_r+0x460>
    17dc:	01003f84 	movi	r4,254
    17e0:	02001fc4 	movi	r8,127
    17e4:	01c01f84 	movi	r7,126
    17e8:	003e4006 	br	10ec <_malloc_r+0x78>
    17ec:	00800034 	movhi	r2,0
    17f0:	109f5004 	addi	r2,r2,32064
    17f4:	15000015 	stw	r20,0(r2)
    17f8:	003f1106 	br	1440 <_malloc_r+0x3cc>
    17fc:	00800044 	movi	r2,1
    1800:	002b883a 	mov	r21,zero
    1804:	003f1f06 	br	1484 <_malloc_r+0x410>
    1808:	81400204 	addi	r5,r16,8
    180c:	9009883a 	mov	r4,r18
    1810:	0002dbc0 	call	2dbc <_free_r>
    1814:	00800074 	movhi	r2,1
    1818:	10a60d04 	addi	r2,r2,-26572
    181c:	10c00017 	ldw	r3,0(r2)
    1820:	003f2c06 	br	14d4 <_malloc_r+0x460>
    1824:	00c05504 	movi	r3,340
    1828:	18800536 	bltu	r3,r2,1840 <_malloc_r+0x7cc>
    182c:	3804d3fa 	srli	r2,r7,15
    1830:	11401e04 	addi	r5,r2,120
    1834:	10c01dc4 	addi	r3,r2,119
    1838:	294b883a 	add	r5,r5,r5
    183c:	003f5606 	br	1598 <_malloc_r+0x524>
    1840:	00c15504 	movi	r3,1364
    1844:	18800536 	bltu	r3,r2,185c <_malloc_r+0x7e8>
    1848:	3804d4ba 	srli	r2,r7,18
    184c:	11401f44 	addi	r5,r2,125
    1850:	10c01f04 	addi	r3,r2,124
    1854:	294b883a 	add	r5,r5,r5
    1858:	003f4f06 	br	1598 <_malloc_r+0x524>
    185c:	01403f84 	movi	r5,254
    1860:	00c01f84 	movi	r3,126
    1864:	003f4c06 	br	1598 <_malloc_r+0x524>
    1868:	98800117 	ldw	r2,4(r19)
    186c:	003fa006 	br	16f0 <_malloc_r+0x67c>
    1870:	8808d0fa 	srli	r4,r17,3
    1874:	20800044 	addi	r2,r4,1
    1878:	1085883a 	add	r2,r2,r2
    187c:	003e9006 	br	12c0 <_malloc_r+0x24c>

00001880 <memchr>:
    1880:	208000cc 	andi	r2,r4,3
    1884:	280f883a 	mov	r7,r5
    1888:	10003426 	beq	r2,zero,195c <memchr+0xdc>
    188c:	30bfffc4 	addi	r2,r6,-1
    1890:	30001a26 	beq	r6,zero,18fc <memchr+0x7c>
    1894:	20c00003 	ldbu	r3,0(r4)
    1898:	29803fcc 	andi	r6,r5,255
    189c:	30c0051e 	bne	r6,r3,18b4 <memchr+0x34>
    18a0:	00001806 	br	1904 <memchr+0x84>
    18a4:	10001526 	beq	r2,zero,18fc <memchr+0x7c>
    18a8:	20c00003 	ldbu	r3,0(r4)
    18ac:	10bfffc4 	addi	r2,r2,-1
    18b0:	30c01426 	beq	r6,r3,1904 <memchr+0x84>
    18b4:	21000044 	addi	r4,r4,1
    18b8:	20c000cc 	andi	r3,r4,3
    18bc:	183ff91e 	bne	r3,zero,18a4 <memchr+0x24>
    18c0:	020000c4 	movi	r8,3
    18c4:	40801136 	bltu	r8,r2,190c <memchr+0x8c>
    18c8:	10000c26 	beq	r2,zero,18fc <memchr+0x7c>
    18cc:	20c00003 	ldbu	r3,0(r4)
    18d0:	29403fcc 	andi	r5,r5,255
    18d4:	28c00b26 	beq	r5,r3,1904 <memchr+0x84>
    18d8:	20c00044 	addi	r3,r4,1
    18dc:	39803fcc 	andi	r6,r7,255
    18e0:	2089883a 	add	r4,r4,r2
    18e4:	00000306 	br	18f4 <memchr+0x74>
    18e8:	18c00044 	addi	r3,r3,1
    18ec:	197fffc3 	ldbu	r5,-1(r3)
    18f0:	31400526 	beq	r6,r5,1908 <memchr+0x88>
    18f4:	1805883a 	mov	r2,r3
    18f8:	20fffb1e 	bne	r4,r3,18e8 <memchr+0x68>
    18fc:	0005883a 	mov	r2,zero
    1900:	f800283a 	ret
    1904:	2005883a 	mov	r2,r4
    1908:	f800283a 	ret
    190c:	28c03fcc 	andi	r3,r5,255
    1910:	1812923a 	slli	r9,r3,8
    1914:	02ffbff4 	movhi	r11,65279
    1918:	02a02074 	movhi	r10,32897
    191c:	48d2b03a 	or	r9,r9,r3
    1920:	4806943a 	slli	r3,r9,16
    1924:	5affbfc4 	addi	r11,r11,-257
    1928:	52a02004 	addi	r10,r10,-32640
    192c:	48d2b03a 	or	r9,r9,r3
    1930:	20c00017 	ldw	r3,0(r4)
    1934:	48c6f03a 	xor	r3,r9,r3
    1938:	1acd883a 	add	r6,r3,r11
    193c:	00c6303a 	nor	r3,zero,r3
    1940:	30c6703a 	and	r3,r6,r3
    1944:	1a86703a 	and	r3,r3,r10
    1948:	183fe01e 	bne	r3,zero,18cc <memchr+0x4c>
    194c:	10bfff04 	addi	r2,r2,-4
    1950:	21000104 	addi	r4,r4,4
    1954:	40bff636 	bltu	r8,r2,1930 <memchr+0xb0>
    1958:	003fdb06 	br	18c8 <memchr+0x48>
    195c:	3005883a 	mov	r2,r6
    1960:	003fd706 	br	18c0 <memchr+0x40>

00001964 <memcpy>:
    1964:	defffd04 	addi	sp,sp,-12
    1968:	dfc00215 	stw	ra,8(sp)
    196c:	dc400115 	stw	r17,4(sp)
    1970:	dc000015 	stw	r16,0(sp)
    1974:	00c003c4 	movi	r3,15
    1978:	2005883a 	mov	r2,r4
    197c:	1980452e 	bgeu	r3,r6,1a94 <memcpy+0x130>
    1980:	2906b03a 	or	r3,r5,r4
    1984:	18c000cc 	andi	r3,r3,3
    1988:	1800441e 	bne	r3,zero,1a9c <memcpy+0x138>
    198c:	347ffc04 	addi	r17,r6,-16
    1990:	8822d13a 	srli	r17,r17,4
    1994:	28c00104 	addi	r3,r5,4
    1998:	23400104 	addi	r13,r4,4
    199c:	8820913a 	slli	r16,r17,4
    19a0:	2b000204 	addi	r12,r5,8
    19a4:	22c00204 	addi	r11,r4,8
    19a8:	84000504 	addi	r16,r16,20
    19ac:	2a800304 	addi	r10,r5,12
    19b0:	22400304 	addi	r9,r4,12
    19b4:	2c21883a 	add	r16,r5,r16
    19b8:	2811883a 	mov	r8,r5
    19bc:	200f883a 	mov	r7,r4
    19c0:	41000017 	ldw	r4,0(r8)
    19c4:	1fc00017 	ldw	ra,0(r3)
    19c8:	63c00017 	ldw	r15,0(r12)
    19cc:	39000015 	stw	r4,0(r7)
    19d0:	53800017 	ldw	r14,0(r10)
    19d4:	6fc00015 	stw	ra,0(r13)
    19d8:	5bc00015 	stw	r15,0(r11)
    19dc:	4b800015 	stw	r14,0(r9)
    19e0:	18c00404 	addi	r3,r3,16
    19e4:	39c00404 	addi	r7,r7,16
    19e8:	42000404 	addi	r8,r8,16
    19ec:	6b400404 	addi	r13,r13,16
    19f0:	63000404 	addi	r12,r12,16
    19f4:	5ac00404 	addi	r11,r11,16
    19f8:	52800404 	addi	r10,r10,16
    19fc:	4a400404 	addi	r9,r9,16
    1a00:	1c3fef1e 	bne	r3,r16,19c0 <memcpy+0x5c>
    1a04:	89c00044 	addi	r7,r17,1
    1a08:	380e913a 	slli	r7,r7,4
    1a0c:	310003cc 	andi	r4,r6,15
    1a10:	02c000c4 	movi	r11,3
    1a14:	11c7883a 	add	r3,r2,r7
    1a18:	29cb883a 	add	r5,r5,r7
    1a1c:	5900212e 	bgeu	r11,r4,1aa4 <memcpy+0x140>
    1a20:	1813883a 	mov	r9,r3
    1a24:	2811883a 	mov	r8,r5
    1a28:	200f883a 	mov	r7,r4
    1a2c:	42800017 	ldw	r10,0(r8)
    1a30:	4a400104 	addi	r9,r9,4
    1a34:	39ffff04 	addi	r7,r7,-4
    1a38:	4abfff15 	stw	r10,-4(r9)
    1a3c:	42000104 	addi	r8,r8,4
    1a40:	59fffa36 	bltu	r11,r7,1a2c <memcpy+0xc8>
    1a44:	213fff04 	addi	r4,r4,-4
    1a48:	2008d0ba 	srli	r4,r4,2
    1a4c:	318000cc 	andi	r6,r6,3
    1a50:	21000044 	addi	r4,r4,1
    1a54:	2109883a 	add	r4,r4,r4
    1a58:	2109883a 	add	r4,r4,r4
    1a5c:	1907883a 	add	r3,r3,r4
    1a60:	290b883a 	add	r5,r5,r4
    1a64:	30000626 	beq	r6,zero,1a80 <memcpy+0x11c>
    1a68:	198d883a 	add	r6,r3,r6
    1a6c:	29c00003 	ldbu	r7,0(r5)
    1a70:	18c00044 	addi	r3,r3,1
    1a74:	29400044 	addi	r5,r5,1
    1a78:	19ffffc5 	stb	r7,-1(r3)
    1a7c:	19bffb1e 	bne	r3,r6,1a6c <memcpy+0x108>
    1a80:	dfc00217 	ldw	ra,8(sp)
    1a84:	dc400117 	ldw	r17,4(sp)
    1a88:	dc000017 	ldw	r16,0(sp)
    1a8c:	dec00304 	addi	sp,sp,12
    1a90:	f800283a 	ret
    1a94:	2007883a 	mov	r3,r4
    1a98:	003ff206 	br	1a64 <memcpy+0x100>
    1a9c:	2007883a 	mov	r3,r4
    1aa0:	003ff106 	br	1a68 <memcpy+0x104>
    1aa4:	200d883a 	mov	r6,r4
    1aa8:	003fee06 	br	1a64 <memcpy+0x100>

00001aac <memmove>:
    1aac:	2005883a 	mov	r2,r4
    1ab0:	29000b2e 	bgeu	r5,r4,1ae0 <memmove+0x34>
    1ab4:	298f883a 	add	r7,r5,r6
    1ab8:	21c0092e 	bgeu	r4,r7,1ae0 <memmove+0x34>
    1abc:	2187883a 	add	r3,r4,r6
    1ac0:	198bc83a 	sub	r5,r3,r6
    1ac4:	30004826 	beq	r6,zero,1be8 <memmove+0x13c>
    1ac8:	39ffffc4 	addi	r7,r7,-1
    1acc:	39000003 	ldbu	r4,0(r7)
    1ad0:	18ffffc4 	addi	r3,r3,-1
    1ad4:	19000005 	stb	r4,0(r3)
    1ad8:	28fffb1e 	bne	r5,r3,1ac8 <memmove+0x1c>
    1adc:	f800283a 	ret
    1ae0:	00c003c4 	movi	r3,15
    1ae4:	1980412e 	bgeu	r3,r6,1bec <memmove+0x140>
    1ae8:	2886b03a 	or	r3,r5,r2
    1aec:	18c000cc 	andi	r3,r3,3
    1af0:	1800401e 	bne	r3,zero,1bf4 <memmove+0x148>
    1af4:	33fffc04 	addi	r15,r6,-16
    1af8:	781ed13a 	srli	r15,r15,4
    1afc:	28c00104 	addi	r3,r5,4
    1b00:	13400104 	addi	r13,r2,4
    1b04:	781c913a 	slli	r14,r15,4
    1b08:	2b000204 	addi	r12,r5,8
    1b0c:	12c00204 	addi	r11,r2,8
    1b10:	73800504 	addi	r14,r14,20
    1b14:	2a800304 	addi	r10,r5,12
    1b18:	12400304 	addi	r9,r2,12
    1b1c:	2b9d883a 	add	r14,r5,r14
    1b20:	2811883a 	mov	r8,r5
    1b24:	100f883a 	mov	r7,r2
    1b28:	41000017 	ldw	r4,0(r8)
    1b2c:	39c00404 	addi	r7,r7,16
    1b30:	18c00404 	addi	r3,r3,16
    1b34:	393ffc15 	stw	r4,-16(r7)
    1b38:	193ffc17 	ldw	r4,-16(r3)
    1b3c:	6b400404 	addi	r13,r13,16
    1b40:	5ac00404 	addi	r11,r11,16
    1b44:	693ffc15 	stw	r4,-16(r13)
    1b48:	61000017 	ldw	r4,0(r12)
    1b4c:	4a400404 	addi	r9,r9,16
    1b50:	42000404 	addi	r8,r8,16
    1b54:	593ffc15 	stw	r4,-16(r11)
    1b58:	51000017 	ldw	r4,0(r10)
    1b5c:	63000404 	addi	r12,r12,16
    1b60:	52800404 	addi	r10,r10,16
    1b64:	493ffc15 	stw	r4,-16(r9)
    1b68:	1bbfef1e 	bne	r3,r14,1b28 <memmove+0x7c>
    1b6c:	79000044 	addi	r4,r15,1
    1b70:	2008913a 	slli	r4,r4,4
    1b74:	328003cc 	andi	r10,r6,15
    1b78:	02c000c4 	movi	r11,3
    1b7c:	1107883a 	add	r3,r2,r4
    1b80:	290b883a 	add	r5,r5,r4
    1b84:	5a801e2e 	bgeu	r11,r10,1c00 <memmove+0x154>
    1b88:	1813883a 	mov	r9,r3
    1b8c:	2811883a 	mov	r8,r5
    1b90:	500f883a 	mov	r7,r10
    1b94:	41000017 	ldw	r4,0(r8)
    1b98:	4a400104 	addi	r9,r9,4
    1b9c:	39ffff04 	addi	r7,r7,-4
    1ba0:	493fff15 	stw	r4,-4(r9)
    1ba4:	42000104 	addi	r8,r8,4
    1ba8:	59fffa36 	bltu	r11,r7,1b94 <memmove+0xe8>
    1bac:	513fff04 	addi	r4,r10,-4
    1bb0:	2008d0ba 	srli	r4,r4,2
    1bb4:	318000cc 	andi	r6,r6,3
    1bb8:	21000044 	addi	r4,r4,1
    1bbc:	2109883a 	add	r4,r4,r4
    1bc0:	2109883a 	add	r4,r4,r4
    1bc4:	1907883a 	add	r3,r3,r4
    1bc8:	290b883a 	add	r5,r5,r4
    1bcc:	30000b26 	beq	r6,zero,1bfc <memmove+0x150>
    1bd0:	198d883a 	add	r6,r3,r6
    1bd4:	29c00003 	ldbu	r7,0(r5)
    1bd8:	18c00044 	addi	r3,r3,1
    1bdc:	29400044 	addi	r5,r5,1
    1be0:	19ffffc5 	stb	r7,-1(r3)
    1be4:	19bffb1e 	bne	r3,r6,1bd4 <memmove+0x128>
    1be8:	f800283a 	ret
    1bec:	1007883a 	mov	r3,r2
    1bf0:	003ff606 	br	1bcc <memmove+0x120>
    1bf4:	1007883a 	mov	r3,r2
    1bf8:	003ff506 	br	1bd0 <memmove+0x124>
    1bfc:	f800283a 	ret
    1c00:	500d883a 	mov	r6,r10
    1c04:	003ff106 	br	1bcc <memmove+0x120>

00001c08 <memset>:
    1c08:	20c000cc 	andi	r3,r4,3
    1c0c:	2005883a 	mov	r2,r4
    1c10:	18004426 	beq	r3,zero,1d24 <memset+0x11c>
    1c14:	31ffffc4 	addi	r7,r6,-1
    1c18:	30004026 	beq	r6,zero,1d1c <memset+0x114>
    1c1c:	2813883a 	mov	r9,r5
    1c20:	200d883a 	mov	r6,r4
    1c24:	2007883a 	mov	r3,r4
    1c28:	00000406 	br	1c3c <memset+0x34>
    1c2c:	3a3fffc4 	addi	r8,r7,-1
    1c30:	31800044 	addi	r6,r6,1
    1c34:	38003926 	beq	r7,zero,1d1c <memset+0x114>
    1c38:	400f883a 	mov	r7,r8
    1c3c:	18c00044 	addi	r3,r3,1
    1c40:	32400005 	stb	r9,0(r6)
    1c44:	1a0000cc 	andi	r8,r3,3
    1c48:	403ff81e 	bne	r8,zero,1c2c <memset+0x24>
    1c4c:	010000c4 	movi	r4,3
    1c50:	21c02d2e 	bgeu	r4,r7,1d08 <memset+0x100>
    1c54:	29003fcc 	andi	r4,r5,255
    1c58:	200c923a 	slli	r6,r4,8
    1c5c:	3108b03a 	or	r4,r6,r4
    1c60:	200c943a 	slli	r6,r4,16
    1c64:	218cb03a 	or	r6,r4,r6
    1c68:	010003c4 	movi	r4,15
    1c6c:	21c0182e 	bgeu	r4,r7,1cd0 <memset+0xc8>
    1c70:	3b3ffc04 	addi	r12,r7,-16
    1c74:	6018d13a 	srli	r12,r12,4
    1c78:	1a000104 	addi	r8,r3,4
    1c7c:	1ac00204 	addi	r11,r3,8
    1c80:	6008913a 	slli	r4,r12,4
    1c84:	1a800304 	addi	r10,r3,12
    1c88:	1813883a 	mov	r9,r3
    1c8c:	21000504 	addi	r4,r4,20
    1c90:	1909883a 	add	r4,r3,r4
    1c94:	49800015 	stw	r6,0(r9)
    1c98:	41800015 	stw	r6,0(r8)
    1c9c:	59800015 	stw	r6,0(r11)
    1ca0:	51800015 	stw	r6,0(r10)
    1ca4:	42000404 	addi	r8,r8,16
    1ca8:	4a400404 	addi	r9,r9,16
    1cac:	5ac00404 	addi	r11,r11,16
    1cb0:	52800404 	addi	r10,r10,16
    1cb4:	413ff71e 	bne	r8,r4,1c94 <memset+0x8c>
    1cb8:	63000044 	addi	r12,r12,1
    1cbc:	6018913a 	slli	r12,r12,4
    1cc0:	39c003cc 	andi	r7,r7,15
    1cc4:	010000c4 	movi	r4,3
    1cc8:	1b07883a 	add	r3,r3,r12
    1ccc:	21c00e2e 	bgeu	r4,r7,1d08 <memset+0x100>
    1cd0:	1813883a 	mov	r9,r3
    1cd4:	3811883a 	mov	r8,r7
    1cd8:	010000c4 	movi	r4,3
    1cdc:	49800015 	stw	r6,0(r9)
    1ce0:	423fff04 	addi	r8,r8,-4
    1ce4:	4a400104 	addi	r9,r9,4
    1ce8:	223ffc36 	bltu	r4,r8,1cdc <memset+0xd4>
    1cec:	393fff04 	addi	r4,r7,-4
    1cf0:	2008d0ba 	srli	r4,r4,2
    1cf4:	39c000cc 	andi	r7,r7,3
    1cf8:	21000044 	addi	r4,r4,1
    1cfc:	2109883a 	add	r4,r4,r4
    1d00:	2109883a 	add	r4,r4,r4
    1d04:	1907883a 	add	r3,r3,r4
    1d08:	38000526 	beq	r7,zero,1d20 <memset+0x118>
    1d0c:	19cf883a 	add	r7,r3,r7
    1d10:	19400005 	stb	r5,0(r3)
    1d14:	18c00044 	addi	r3,r3,1
    1d18:	38fffd1e 	bne	r7,r3,1d10 <memset+0x108>
    1d1c:	f800283a 	ret
    1d20:	f800283a 	ret
    1d24:	2007883a 	mov	r3,r4
    1d28:	300f883a 	mov	r7,r6
    1d2c:	003fc706 	br	1c4c <memset+0x44>

00001d30 <_putc_r>:
    1d30:	defffc04 	addi	sp,sp,-16
    1d34:	dc000215 	stw	r16,8(sp)
    1d38:	dfc00315 	stw	ra,12(sp)
    1d3c:	2021883a 	mov	r16,r4
    1d40:	20000226 	beq	r4,zero,1d4c <_putc_r+0x1c>
    1d44:	20800e17 	ldw	r2,56(r4)
    1d48:	10001b26 	beq	r2,zero,1db8 <_putc_r+0x88>
    1d4c:	30800217 	ldw	r2,8(r6)
    1d50:	10bfffc4 	addi	r2,r2,-1
    1d54:	30800215 	stw	r2,8(r6)
    1d58:	10000a16 	blt	r2,zero,1d84 <_putc_r+0x54>
    1d5c:	30800017 	ldw	r2,0(r6)
    1d60:	11400005 	stb	r5,0(r2)
    1d64:	30800017 	ldw	r2,0(r6)
    1d68:	10c00044 	addi	r3,r2,1
    1d6c:	30c00015 	stw	r3,0(r6)
    1d70:	10800003 	ldbu	r2,0(r2)
    1d74:	dfc00317 	ldw	ra,12(sp)
    1d78:	dc000217 	ldw	r16,8(sp)
    1d7c:	dec00404 	addi	sp,sp,16
    1d80:	f800283a 	ret
    1d84:	30c00617 	ldw	r3,24(r6)
    1d88:	10c00616 	blt	r2,r3,1da4 <_putc_r+0x74>
    1d8c:	30800017 	ldw	r2,0(r6)
    1d90:	00c00284 	movi	r3,10
    1d94:	11400005 	stb	r5,0(r2)
    1d98:	30800017 	ldw	r2,0(r6)
    1d9c:	11400003 	ldbu	r5,0(r2)
    1da0:	28fff11e 	bne	r5,r3,1d68 <_putc_r+0x38>
    1da4:	8009883a 	mov	r4,r16
    1da8:	dfc00317 	ldw	ra,12(sp)
    1dac:	dc000217 	ldw	r16,8(sp)
    1db0:	dec00404 	addi	sp,sp,16
    1db4:	000258c1 	jmpi	258c <__swbuf_r>
    1db8:	d9400015 	stw	r5,0(sp)
    1dbc:	d9800115 	stw	r6,4(sp)
    1dc0:	00009e00 	call	9e0 <__sinit>
    1dc4:	d9800117 	ldw	r6,4(sp)
    1dc8:	d9400017 	ldw	r5,0(sp)
    1dcc:	003fdf06 	br	1d4c <_putc_r+0x1c>

00001dd0 <putc>:
    1dd0:	00800034 	movhi	r2,0
    1dd4:	defffc04 	addi	sp,sp,-16
    1dd8:	109f4f04 	addi	r2,r2,32060
    1ddc:	dc000115 	stw	r16,4(sp)
    1de0:	14000017 	ldw	r16,0(r2)
    1de4:	dc400215 	stw	r17,8(sp)
    1de8:	dfc00315 	stw	ra,12(sp)
    1dec:	2023883a 	mov	r17,r4
    1df0:	80000226 	beq	r16,zero,1dfc <putc+0x2c>
    1df4:	80800e17 	ldw	r2,56(r16)
    1df8:	10001a26 	beq	r2,zero,1e64 <putc+0x94>
    1dfc:	28800217 	ldw	r2,8(r5)
    1e00:	10bfffc4 	addi	r2,r2,-1
    1e04:	28800215 	stw	r2,8(r5)
    1e08:	10000b16 	blt	r2,zero,1e38 <putc+0x68>
    1e0c:	28800017 	ldw	r2,0(r5)
    1e10:	14400005 	stb	r17,0(r2)
    1e14:	28800017 	ldw	r2,0(r5)
    1e18:	10c00044 	addi	r3,r2,1
    1e1c:	28c00015 	stw	r3,0(r5)
    1e20:	10800003 	ldbu	r2,0(r2)
    1e24:	dfc00317 	ldw	ra,12(sp)
    1e28:	dc400217 	ldw	r17,8(sp)
    1e2c:	dc000117 	ldw	r16,4(sp)
    1e30:	dec00404 	addi	sp,sp,16
    1e34:	f800283a 	ret
    1e38:	28c00617 	ldw	r3,24(r5)
    1e3c:	10c00e16 	blt	r2,r3,1e78 <putc+0xa8>
    1e40:	28800017 	ldw	r2,0(r5)
    1e44:	01000284 	movi	r4,10
    1e48:	14400005 	stb	r17,0(r2)
    1e4c:	28800017 	ldw	r2,0(r5)
    1e50:	10c00003 	ldbu	r3,0(r2)
    1e54:	193ff01e 	bne	r3,r4,1e18 <putc+0x48>
    1e58:	280d883a 	mov	r6,r5
    1e5c:	180b883a 	mov	r5,r3
    1e60:	00000706 	br	1e80 <putc+0xb0>
    1e64:	8009883a 	mov	r4,r16
    1e68:	d9400015 	stw	r5,0(sp)
    1e6c:	00009e00 	call	9e0 <__sinit>
    1e70:	d9400017 	ldw	r5,0(sp)
    1e74:	003fe106 	br	1dfc <putc+0x2c>
    1e78:	280d883a 	mov	r6,r5
    1e7c:	880b883a 	mov	r5,r17
    1e80:	8009883a 	mov	r4,r16
    1e84:	dfc00317 	ldw	ra,12(sp)
    1e88:	dc400217 	ldw	r17,8(sp)
    1e8c:	dc000117 	ldw	r16,4(sp)
    1e90:	dec00404 	addi	sp,sp,16
    1e94:	000258c1 	jmpi	258c <__swbuf_r>

00001e98 <_realloc_r>:
    1e98:	defff604 	addi	sp,sp,-40
    1e9c:	dc400115 	stw	r17,4(sp)
    1ea0:	dfc00915 	stw	ra,36(sp)
    1ea4:	df000815 	stw	fp,32(sp)
    1ea8:	ddc00715 	stw	r23,28(sp)
    1eac:	dd800615 	stw	r22,24(sp)
    1eb0:	dd400515 	stw	r21,20(sp)
    1eb4:	dd000415 	stw	r20,16(sp)
    1eb8:	dcc00315 	stw	r19,12(sp)
    1ebc:	dc800215 	stw	r18,8(sp)
    1ec0:	dc000015 	stw	r16,0(sp)
    1ec4:	3023883a 	mov	r17,r6
    1ec8:	2800b626 	beq	r5,zero,21a4 <_realloc_r+0x30c>
    1ecc:	2829883a 	mov	r20,r5
    1ed0:	2025883a 	mov	r18,r4
    1ed4:	0003b780 	call	3b78 <__malloc_lock>
    1ed8:	a0ffff17 	ldw	r3,-4(r20)
    1edc:	043fff04 	movi	r16,-4
    1ee0:	888002c4 	addi	r2,r17,11
    1ee4:	01000584 	movi	r4,22
    1ee8:	a57ffe04 	addi	r21,r20,-8
    1eec:	1c20703a 	and	r16,r3,r16
    1ef0:	2080332e 	bgeu	r4,r2,1fc0 <_realloc_r+0x128>
    1ef4:	05bffe04 	movi	r22,-8
    1ef8:	15ac703a 	and	r22,r2,r22
    1efc:	b005883a 	mov	r2,r22
    1f00:	b0005716 	blt	r22,zero,2060 <_realloc_r+0x1c8>
    1f04:	b4405636 	bltu	r22,r17,2060 <_realloc_r+0x1c8>
    1f08:	8080300e 	bge	r16,r2,1fcc <_realloc_r+0x134>
    1f0c:	07000034 	movhi	fp,0
    1f10:	e719bf04 	addi	fp,fp,26364
    1f14:	e2000217 	ldw	r8,8(fp)
    1f18:	ac09883a 	add	r4,r21,r16
    1f1c:	22006126 	beq	r4,r8,20a4 <_realloc_r+0x20c>
    1f20:	22400117 	ldw	r9,4(r4)
    1f24:	01ffff84 	movi	r7,-2
    1f28:	49ce703a 	and	r7,r9,r7
    1f2c:	21cf883a 	add	r7,r4,r7
    1f30:	39800117 	ldw	r6,4(r7)
    1f34:	3180004c 	andi	r6,r6,1
    1f38:	30003e26 	beq	r6,zero,2034 <_realloc_r+0x19c>
    1f3c:	18c0004c 	andi	r3,r3,1
    1f40:	18008126 	beq	r3,zero,2148 <_realloc_r+0x2b0>
    1f44:	880b883a 	mov	r5,r17
    1f48:	9009883a 	mov	r4,r18
    1f4c:	00010740 	call	1074 <_malloc_r>
    1f50:	1023883a 	mov	r17,r2
    1f54:	10011e26 	beq	r2,zero,23d0 <_realloc_r+0x538>
    1f58:	a0ffff17 	ldw	r3,-4(r20)
    1f5c:	113ffe04 	addi	r4,r2,-8
    1f60:	00bfff84 	movi	r2,-2
    1f64:	1884703a 	and	r2,r3,r2
    1f68:	a885883a 	add	r2,r21,r2
    1f6c:	2080ee26 	beq	r4,r2,2328 <_realloc_r+0x490>
    1f70:	81bfff04 	addi	r6,r16,-4
    1f74:	00800904 	movi	r2,36
    1f78:	1180b836 	bltu	r2,r6,225c <_realloc_r+0x3c4>
    1f7c:	00c004c4 	movi	r3,19
    1f80:	19809536 	bltu	r3,r6,21d8 <_realloc_r+0x340>
    1f84:	8805883a 	mov	r2,r17
    1f88:	a007883a 	mov	r3,r20
    1f8c:	19000017 	ldw	r4,0(r3)
    1f90:	11000015 	stw	r4,0(r2)
    1f94:	19000117 	ldw	r4,4(r3)
    1f98:	11000115 	stw	r4,4(r2)
    1f9c:	18c00217 	ldw	r3,8(r3)
    1fa0:	10c00215 	stw	r3,8(r2)
    1fa4:	a00b883a 	mov	r5,r20
    1fa8:	9009883a 	mov	r4,r18
    1fac:	0002dbc0 	call	2dbc <_free_r>
    1fb0:	9009883a 	mov	r4,r18
    1fb4:	0003b9c0 	call	3b9c <__malloc_unlock>
    1fb8:	8805883a 	mov	r2,r17
    1fbc:	00001106 	br	2004 <_realloc_r+0x16c>
    1fc0:	00800404 	movi	r2,16
    1fc4:	102d883a 	mov	r22,r2
    1fc8:	003fce06 	br	1f04 <_realloc_r+0x6c>
    1fcc:	a023883a 	mov	r17,r20
    1fd0:	858fc83a 	sub	r7,r16,r22
    1fd4:	008003c4 	movi	r2,15
    1fd8:	18c0004c 	andi	r3,r3,1
    1fdc:	11c02436 	bltu	r2,r7,2070 <_realloc_r+0x1d8>
    1fe0:	1c06b03a 	or	r3,r3,r16
    1fe4:	a8c00115 	stw	r3,4(r21)
    1fe8:	ac21883a 	add	r16,r21,r16
    1fec:	80800117 	ldw	r2,4(r16)
    1ff0:	10800054 	ori	r2,r2,1
    1ff4:	80800115 	stw	r2,4(r16)
    1ff8:	9009883a 	mov	r4,r18
    1ffc:	0003b9c0 	call	3b9c <__malloc_unlock>
    2000:	8805883a 	mov	r2,r17
    2004:	dfc00917 	ldw	ra,36(sp)
    2008:	df000817 	ldw	fp,32(sp)
    200c:	ddc00717 	ldw	r23,28(sp)
    2010:	dd800617 	ldw	r22,24(sp)
    2014:	dd400517 	ldw	r21,20(sp)
    2018:	dd000417 	ldw	r20,16(sp)
    201c:	dcc00317 	ldw	r19,12(sp)
    2020:	dc800217 	ldw	r18,8(sp)
    2024:	dc400117 	ldw	r17,4(sp)
    2028:	dc000017 	ldw	r16,0(sp)
    202c:	dec00a04 	addi	sp,sp,40
    2030:	f800283a 	ret
    2034:	017fff04 	movi	r5,-4
    2038:	494a703a 	and	r5,r9,r5
    203c:	814d883a 	add	r6,r16,r5
    2040:	30801e16 	blt	r6,r2,20bc <_realloc_r+0x224>
    2044:	20800317 	ldw	r2,12(r4)
    2048:	21000217 	ldw	r4,8(r4)
    204c:	a023883a 	mov	r17,r20
    2050:	3021883a 	mov	r16,r6
    2054:	20800315 	stw	r2,12(r4)
    2058:	11000215 	stw	r4,8(r2)
    205c:	003fdc06 	br	1fd0 <_realloc_r+0x138>
    2060:	00800304 	movi	r2,12
    2064:	90800015 	stw	r2,0(r18)
    2068:	0005883a 	mov	r2,zero
    206c:	003fe506 	br	2004 <_realloc_r+0x16c>
    2070:	1d86b03a 	or	r3,r3,r22
    2074:	a8c00115 	stw	r3,4(r21)
    2078:	ad8b883a 	add	r5,r21,r22
    207c:	38c00054 	ori	r3,r7,1
    2080:	28c00115 	stw	r3,4(r5)
    2084:	29cf883a 	add	r7,r5,r7
    2088:	38c00117 	ldw	r3,4(r7)
    208c:	29400204 	addi	r5,r5,8
    2090:	9009883a 	mov	r4,r18
    2094:	18800054 	ori	r2,r3,1
    2098:	38800115 	stw	r2,4(r7)
    209c:	0002dbc0 	call	2dbc <_free_r>
    20a0:	003fd506 	br	1ff8 <_realloc_r+0x160>
    20a4:	21c00117 	ldw	r7,4(r4)
    20a8:	017fff04 	movi	r5,-4
    20ac:	b1800404 	addi	r6,r22,16
    20b0:	394a703a 	and	r5,r7,r5
    20b4:	814f883a 	add	r7,r16,r5
    20b8:	39805b0e 	bge	r7,r6,2228 <_realloc_r+0x390>
    20bc:	18c0004c 	andi	r3,r3,1
    20c0:	183fa01e 	bne	r3,zero,1f44 <_realloc_r+0xac>
    20c4:	a4fffe17 	ldw	r19,-8(r20)
    20c8:	00ffff04 	movi	r3,-4
    20cc:	ace7c83a 	sub	r19,r21,r19
    20d0:	99800117 	ldw	r6,4(r19)
    20d4:	30c6703a 	and	r3,r6,r3
    20d8:	20002026 	beq	r4,zero,215c <_realloc_r+0x2c4>
    20dc:	80ef883a 	add	r23,r16,r3
    20e0:	b96f883a 	add	r23,r23,r5
    20e4:	22006126 	beq	r4,r8,226c <_realloc_r+0x3d4>
    20e8:	b8801c16 	blt	r23,r2,215c <_realloc_r+0x2c4>
    20ec:	20800317 	ldw	r2,12(r4)
    20f0:	20c00217 	ldw	r3,8(r4)
    20f4:	81bfff04 	addi	r6,r16,-4
    20f8:	01000904 	movi	r4,36
    20fc:	18800315 	stw	r2,12(r3)
    2100:	10c00215 	stw	r3,8(r2)
    2104:	98c00217 	ldw	r3,8(r19)
    2108:	98800317 	ldw	r2,12(r19)
    210c:	9c400204 	addi	r17,r19,8
    2110:	18800315 	stw	r2,12(r3)
    2114:	10c00215 	stw	r3,8(r2)
    2118:	21801b36 	bltu	r4,r6,2188 <_realloc_r+0x2f0>
    211c:	008004c4 	movi	r2,19
    2120:	1180362e 	bgeu	r2,r6,21fc <_realloc_r+0x364>
    2124:	a0800017 	ldw	r2,0(r20)
    2128:	98800215 	stw	r2,8(r19)
    212c:	a0800117 	ldw	r2,4(r20)
    2130:	98800315 	stw	r2,12(r19)
    2134:	008006c4 	movi	r2,27
    2138:	11808136 	bltu	r2,r6,2340 <_realloc_r+0x4a8>
    213c:	98800404 	addi	r2,r19,16
    2140:	a5000204 	addi	r20,r20,8
    2144:	00002e06 	br	2200 <_realloc_r+0x368>
    2148:	a4fffe17 	ldw	r19,-8(r20)
    214c:	00ffff04 	movi	r3,-4
    2150:	ace7c83a 	sub	r19,r21,r19
    2154:	99000117 	ldw	r4,4(r19)
    2158:	20c6703a 	and	r3,r4,r3
    215c:	983f7926 	beq	r19,zero,1f44 <_realloc_r+0xac>
    2160:	80ef883a 	add	r23,r16,r3
    2164:	b8bf7716 	blt	r23,r2,1f44 <_realloc_r+0xac>
    2168:	98800317 	ldw	r2,12(r19)
    216c:	98c00217 	ldw	r3,8(r19)
    2170:	81bfff04 	addi	r6,r16,-4
    2174:	01000904 	movi	r4,36
    2178:	18800315 	stw	r2,12(r3)
    217c:	10c00215 	stw	r3,8(r2)
    2180:	9c400204 	addi	r17,r19,8
    2184:	21bfe52e 	bgeu	r4,r6,211c <_realloc_r+0x284>
    2188:	a00b883a 	mov	r5,r20
    218c:	8809883a 	mov	r4,r17
    2190:	0001aac0 	call	1aac <memmove>
    2194:	98c00117 	ldw	r3,4(r19)
    2198:	b821883a 	mov	r16,r23
    219c:	982b883a 	mov	r21,r19
    21a0:	003f8b06 	br	1fd0 <_realloc_r+0x138>
    21a4:	300b883a 	mov	r5,r6
    21a8:	dfc00917 	ldw	ra,36(sp)
    21ac:	df000817 	ldw	fp,32(sp)
    21b0:	ddc00717 	ldw	r23,28(sp)
    21b4:	dd800617 	ldw	r22,24(sp)
    21b8:	dd400517 	ldw	r21,20(sp)
    21bc:	dd000417 	ldw	r20,16(sp)
    21c0:	dcc00317 	ldw	r19,12(sp)
    21c4:	dc800217 	ldw	r18,8(sp)
    21c8:	dc400117 	ldw	r17,4(sp)
    21cc:	dc000017 	ldw	r16,0(sp)
    21d0:	dec00a04 	addi	sp,sp,40
    21d4:	00010741 	jmpi	1074 <_malloc_r>
    21d8:	a0c00017 	ldw	r3,0(r20)
    21dc:	88c00015 	stw	r3,0(r17)
    21e0:	a0c00117 	ldw	r3,4(r20)
    21e4:	88c00115 	stw	r3,4(r17)
    21e8:	00c006c4 	movi	r3,27
    21ec:	19804636 	bltu	r3,r6,2308 <_realloc_r+0x470>
    21f0:	88800204 	addi	r2,r17,8
    21f4:	a0c00204 	addi	r3,r20,8
    21f8:	003f6406 	br	1f8c <_realloc_r+0xf4>
    21fc:	8805883a 	mov	r2,r17
    2200:	a0c00017 	ldw	r3,0(r20)
    2204:	b821883a 	mov	r16,r23
    2208:	982b883a 	mov	r21,r19
    220c:	10c00015 	stw	r3,0(r2)
    2210:	a0c00117 	ldw	r3,4(r20)
    2214:	10c00115 	stw	r3,4(r2)
    2218:	a0c00217 	ldw	r3,8(r20)
    221c:	10c00215 	stw	r3,8(r2)
    2220:	98c00117 	ldw	r3,4(r19)
    2224:	003f6a06 	br	1fd0 <_realloc_r+0x138>
    2228:	adab883a 	add	r21,r21,r22
    222c:	3d85c83a 	sub	r2,r7,r22
    2230:	e5400215 	stw	r21,8(fp)
    2234:	10800054 	ori	r2,r2,1
    2238:	a8800115 	stw	r2,4(r21)
    223c:	a0bfff17 	ldw	r2,-4(r20)
    2240:	9009883a 	mov	r4,r18
    2244:	1080004c 	andi	r2,r2,1
    2248:	1584b03a 	or	r2,r2,r22
    224c:	a0bfff15 	stw	r2,-4(r20)
    2250:	0003b9c0 	call	3b9c <__malloc_unlock>
    2254:	a005883a 	mov	r2,r20
    2258:	003f6a06 	br	2004 <_realloc_r+0x16c>
    225c:	a00b883a 	mov	r5,r20
    2260:	8809883a 	mov	r4,r17
    2264:	0001aac0 	call	1aac <memmove>
    2268:	003f4e06 	br	1fa4 <_realloc_r+0x10c>
    226c:	b1000404 	addi	r4,r22,16
    2270:	b93fba16 	blt	r23,r4,215c <_realloc_r+0x2c4>
    2274:	98800317 	ldw	r2,12(r19)
    2278:	98c00217 	ldw	r3,8(r19)
    227c:	81bfff04 	addi	r6,r16,-4
    2280:	01000904 	movi	r4,36
    2284:	18800315 	stw	r2,12(r3)
    2288:	10c00215 	stw	r3,8(r2)
    228c:	9c400204 	addi	r17,r19,8
    2290:	21804336 	bltu	r4,r6,23a0 <_realloc_r+0x508>
    2294:	008004c4 	movi	r2,19
    2298:	11803f2e 	bgeu	r2,r6,2398 <_realloc_r+0x500>
    229c:	a0800017 	ldw	r2,0(r20)
    22a0:	98800215 	stw	r2,8(r19)
    22a4:	a0800117 	ldw	r2,4(r20)
    22a8:	98800315 	stw	r2,12(r19)
    22ac:	008006c4 	movi	r2,27
    22b0:	11803f36 	bltu	r2,r6,23b0 <_realloc_r+0x518>
    22b4:	98800404 	addi	r2,r19,16
    22b8:	a5000204 	addi	r20,r20,8
    22bc:	a0c00017 	ldw	r3,0(r20)
    22c0:	10c00015 	stw	r3,0(r2)
    22c4:	a0c00117 	ldw	r3,4(r20)
    22c8:	10c00115 	stw	r3,4(r2)
    22cc:	a0c00217 	ldw	r3,8(r20)
    22d0:	10c00215 	stw	r3,8(r2)
    22d4:	9d87883a 	add	r3,r19,r22
    22d8:	bd85c83a 	sub	r2,r23,r22
    22dc:	e0c00215 	stw	r3,8(fp)
    22e0:	10800054 	ori	r2,r2,1
    22e4:	18800115 	stw	r2,4(r3)
    22e8:	98800117 	ldw	r2,4(r19)
    22ec:	9009883a 	mov	r4,r18
    22f0:	1080004c 	andi	r2,r2,1
    22f4:	1584b03a 	or	r2,r2,r22
    22f8:	98800115 	stw	r2,4(r19)
    22fc:	0003b9c0 	call	3b9c <__malloc_unlock>
    2300:	8805883a 	mov	r2,r17
    2304:	003f3f06 	br	2004 <_realloc_r+0x16c>
    2308:	a0c00217 	ldw	r3,8(r20)
    230c:	88c00215 	stw	r3,8(r17)
    2310:	a0c00317 	ldw	r3,12(r20)
    2314:	88c00315 	stw	r3,12(r17)
    2318:	30801126 	beq	r6,r2,2360 <_realloc_r+0x4c8>
    231c:	88800404 	addi	r2,r17,16
    2320:	a0c00404 	addi	r3,r20,16
    2324:	003f1906 	br	1f8c <_realloc_r+0xf4>
    2328:	893fff17 	ldw	r4,-4(r17)
    232c:	00bfff04 	movi	r2,-4
    2330:	a023883a 	mov	r17,r20
    2334:	2084703a 	and	r2,r4,r2
    2338:	80a1883a 	add	r16,r16,r2
    233c:	003f2406 	br	1fd0 <_realloc_r+0x138>
    2340:	a0800217 	ldw	r2,8(r20)
    2344:	98800415 	stw	r2,16(r19)
    2348:	a0800317 	ldw	r2,12(r20)
    234c:	98800515 	stw	r2,20(r19)
    2350:	31000a26 	beq	r6,r4,237c <_realloc_r+0x4e4>
    2354:	98800604 	addi	r2,r19,24
    2358:	a5000404 	addi	r20,r20,16
    235c:	003fa806 	br	2200 <_realloc_r+0x368>
    2360:	a1000417 	ldw	r4,16(r20)
    2364:	88800604 	addi	r2,r17,24
    2368:	a0c00604 	addi	r3,r20,24
    236c:	89000415 	stw	r4,16(r17)
    2370:	a1000517 	ldw	r4,20(r20)
    2374:	89000515 	stw	r4,20(r17)
    2378:	003f0406 	br	1f8c <_realloc_r+0xf4>
    237c:	a0c00417 	ldw	r3,16(r20)
    2380:	a5000604 	addi	r20,r20,24
    2384:	98800804 	addi	r2,r19,32
    2388:	98c00615 	stw	r3,24(r19)
    238c:	a0ffff17 	ldw	r3,-4(r20)
    2390:	98c00715 	stw	r3,28(r19)
    2394:	003f9a06 	br	2200 <_realloc_r+0x368>
    2398:	8805883a 	mov	r2,r17
    239c:	003fc706 	br	22bc <_realloc_r+0x424>
    23a0:	a00b883a 	mov	r5,r20
    23a4:	8809883a 	mov	r4,r17
    23a8:	0001aac0 	call	1aac <memmove>
    23ac:	003fc906 	br	22d4 <_realloc_r+0x43c>
    23b0:	a0800217 	ldw	r2,8(r20)
    23b4:	98800415 	stw	r2,16(r19)
    23b8:	a0800317 	ldw	r2,12(r20)
    23bc:	98800515 	stw	r2,20(r19)
    23c0:	31000726 	beq	r6,r4,23e0 <_realloc_r+0x548>
    23c4:	98800604 	addi	r2,r19,24
    23c8:	a5000404 	addi	r20,r20,16
    23cc:	003fbb06 	br	22bc <_realloc_r+0x424>
    23d0:	9009883a 	mov	r4,r18
    23d4:	0003b9c0 	call	3b9c <__malloc_unlock>
    23d8:	0005883a 	mov	r2,zero
    23dc:	003f0906 	br	2004 <_realloc_r+0x16c>
    23e0:	a0c00417 	ldw	r3,16(r20)
    23e4:	a5000604 	addi	r20,r20,24
    23e8:	98800804 	addi	r2,r19,32
    23ec:	98c00615 	stw	r3,24(r19)
    23f0:	a0ffff17 	ldw	r3,-4(r20)
    23f4:	98c00715 	stw	r3,28(r19)
    23f8:	003fb006 	br	22bc <_realloc_r+0x424>

000023fc <_sbrk_r>:
    23fc:	defffd04 	addi	sp,sp,-12
    2400:	dc000015 	stw	r16,0(sp)
    2404:	04000074 	movhi	r16,1
    2408:	dc400115 	stw	r17,4(sp)
    240c:	84260504 	addi	r16,r16,-26604
    2410:	2023883a 	mov	r17,r4
    2414:	2809883a 	mov	r4,r5
    2418:	dfc00215 	stw	ra,8(sp)
    241c:	80000015 	stw	zero,0(r16)
    2420:	0003d700 	call	3d70 <sbrk>
    2424:	00ffffc4 	movi	r3,-1
    2428:	10c00526 	beq	r2,r3,2440 <_sbrk_r+0x44>
    242c:	dfc00217 	ldw	ra,8(sp)
    2430:	dc400117 	ldw	r17,4(sp)
    2434:	dc000017 	ldw	r16,0(sp)
    2438:	dec00304 	addi	sp,sp,12
    243c:	f800283a 	ret
    2440:	80c00017 	ldw	r3,0(r16)
    2444:	183ff926 	beq	r3,zero,242c <_sbrk_r+0x30>
    2448:	88c00015 	stw	r3,0(r17)
    244c:	003ff706 	br	242c <_sbrk_r+0x30>

00002450 <__sread>:
    2450:	defffe04 	addi	sp,sp,-8
    2454:	dc000015 	stw	r16,0(sp)
    2458:	2821883a 	mov	r16,r5
    245c:	2940038f 	ldh	r5,14(r5)
    2460:	dfc00115 	stw	ra,4(sp)
    2464:	00032e80 	call	32e8 <_read_r>
    2468:	10000716 	blt	r2,zero,2488 <__sread+0x38>
    246c:	80c01417 	ldw	r3,80(r16)
    2470:	1887883a 	add	r3,r3,r2
    2474:	80c01415 	stw	r3,80(r16)
    2478:	dfc00117 	ldw	ra,4(sp)
    247c:	dc000017 	ldw	r16,0(sp)
    2480:	dec00204 	addi	sp,sp,8
    2484:	f800283a 	ret
    2488:	80c0030b 	ldhu	r3,12(r16)
    248c:	18fbffcc 	andi	r3,r3,61439
    2490:	80c0030d 	sth	r3,12(r16)
    2494:	dfc00117 	ldw	ra,4(sp)
    2498:	dc000017 	ldw	r16,0(sp)
    249c:	dec00204 	addi	sp,sp,8
    24a0:	f800283a 	ret

000024a4 <__seofread>:
    24a4:	0005883a 	mov	r2,zero
    24a8:	f800283a 	ret

000024ac <__swrite>:
    24ac:	2880030b 	ldhu	r2,12(r5)
    24b0:	defffb04 	addi	sp,sp,-20
    24b4:	dcc00315 	stw	r19,12(sp)
    24b8:	dc800215 	stw	r18,8(sp)
    24bc:	dc400115 	stw	r17,4(sp)
    24c0:	dc000015 	stw	r16,0(sp)
    24c4:	dfc00415 	stw	ra,16(sp)
    24c8:	10c0400c 	andi	r3,r2,256
    24cc:	2821883a 	mov	r16,r5
    24d0:	2023883a 	mov	r17,r4
    24d4:	3025883a 	mov	r18,r6
    24d8:	3827883a 	mov	r19,r7
    24dc:	18000526 	beq	r3,zero,24f4 <__swrite+0x48>
    24e0:	2940038f 	ldh	r5,14(r5)
    24e4:	01c00084 	movi	r7,2
    24e8:	000d883a 	mov	r6,zero
    24ec:	00030cc0 	call	30cc <_lseek_r>
    24f0:	8080030b 	ldhu	r2,12(r16)
    24f4:	8140038f 	ldh	r5,14(r16)
    24f8:	10bbffcc 	andi	r2,r2,61439
    24fc:	980f883a 	mov	r7,r19
    2500:	900d883a 	mov	r6,r18
    2504:	8809883a 	mov	r4,r17
    2508:	8080030d 	sth	r2,12(r16)
    250c:	dfc00417 	ldw	ra,16(sp)
    2510:	dcc00317 	ldw	r19,12(sp)
    2514:	dc800217 	ldw	r18,8(sp)
    2518:	dc400117 	ldw	r17,4(sp)
    251c:	dc000017 	ldw	r16,0(sp)
    2520:	dec00504 	addi	sp,sp,20
    2524:	00026e41 	jmpi	26e4 <_write_r>

00002528 <__sseek>:
    2528:	defffe04 	addi	sp,sp,-8
    252c:	dc000015 	stw	r16,0(sp)
    2530:	2821883a 	mov	r16,r5
    2534:	2940038f 	ldh	r5,14(r5)
    2538:	dfc00115 	stw	ra,4(sp)
    253c:	00030cc0 	call	30cc <_lseek_r>
    2540:	00ffffc4 	movi	r3,-1
    2544:	10c00826 	beq	r2,r3,2568 <__sseek+0x40>
    2548:	80c0030b 	ldhu	r3,12(r16)
    254c:	80801415 	stw	r2,80(r16)
    2550:	18c40014 	ori	r3,r3,4096
    2554:	80c0030d 	sth	r3,12(r16)
    2558:	dfc00117 	ldw	ra,4(sp)
    255c:	dc000017 	ldw	r16,0(sp)
    2560:	dec00204 	addi	sp,sp,8
    2564:	f800283a 	ret
    2568:	80c0030b 	ldhu	r3,12(r16)
    256c:	18fbffcc 	andi	r3,r3,61439
    2570:	80c0030d 	sth	r3,12(r16)
    2574:	dfc00117 	ldw	ra,4(sp)
    2578:	dc000017 	ldw	r16,0(sp)
    257c:	dec00204 	addi	sp,sp,8
    2580:	f800283a 	ret

00002584 <__sclose>:
    2584:	2940038f 	ldh	r5,14(r5)
    2588:	00028981 	jmpi	2898 <_close_r>

0000258c <__swbuf_r>:
    258c:	defffb04 	addi	sp,sp,-20
    2590:	dcc00315 	stw	r19,12(sp)
    2594:	dc800215 	stw	r18,8(sp)
    2598:	dc000015 	stw	r16,0(sp)
    259c:	dfc00415 	stw	ra,16(sp)
    25a0:	dc400115 	stw	r17,4(sp)
    25a4:	2025883a 	mov	r18,r4
    25a8:	2827883a 	mov	r19,r5
    25ac:	3021883a 	mov	r16,r6
    25b0:	20000226 	beq	r4,zero,25bc <__swbuf_r+0x30>
    25b4:	20800e17 	ldw	r2,56(r4)
    25b8:	10004226 	beq	r2,zero,26c4 <__swbuf_r+0x138>
    25bc:	80800617 	ldw	r2,24(r16)
    25c0:	8100030b 	ldhu	r4,12(r16)
    25c4:	80800215 	stw	r2,8(r16)
    25c8:	2080020c 	andi	r2,r4,8
    25cc:	10003626 	beq	r2,zero,26a8 <__swbuf_r+0x11c>
    25d0:	80c00417 	ldw	r3,16(r16)
    25d4:	18003426 	beq	r3,zero,26a8 <__swbuf_r+0x11c>
    25d8:	2088000c 	andi	r2,r4,8192
    25dc:	9c403fcc 	andi	r17,r19,255
    25e0:	10001a26 	beq	r2,zero,264c <__swbuf_r+0xc0>
    25e4:	80800017 	ldw	r2,0(r16)
    25e8:	81000517 	ldw	r4,20(r16)
    25ec:	10c7c83a 	sub	r3,r2,r3
    25f0:	1900200e 	bge	r3,r4,2674 <__swbuf_r+0xe8>
    25f4:	18c00044 	addi	r3,r3,1
    25f8:	81000217 	ldw	r4,8(r16)
    25fc:	11400044 	addi	r5,r2,1
    2600:	81400015 	stw	r5,0(r16)
    2604:	213fffc4 	addi	r4,r4,-1
    2608:	81000215 	stw	r4,8(r16)
    260c:	14c00005 	stb	r19,0(r2)
    2610:	80800517 	ldw	r2,20(r16)
    2614:	10c01e26 	beq	r2,r3,2690 <__swbuf_r+0x104>
    2618:	8080030b 	ldhu	r2,12(r16)
    261c:	1080004c 	andi	r2,r2,1
    2620:	10000226 	beq	r2,zero,262c <__swbuf_r+0xa0>
    2624:	00800284 	movi	r2,10
    2628:	88801926 	beq	r17,r2,2690 <__swbuf_r+0x104>
    262c:	8805883a 	mov	r2,r17
    2630:	dfc00417 	ldw	ra,16(sp)
    2634:	dcc00317 	ldw	r19,12(sp)
    2638:	dc800217 	ldw	r18,8(sp)
    263c:	dc400117 	ldw	r17,4(sp)
    2640:	dc000017 	ldw	r16,0(sp)
    2644:	dec00504 	addi	sp,sp,20
    2648:	f800283a 	ret
    264c:	81401917 	ldw	r5,100(r16)
    2650:	00b7ffc4 	movi	r2,-8193
    2654:	21080014 	ori	r4,r4,8192
    2658:	2884703a 	and	r2,r5,r2
    265c:	80801915 	stw	r2,100(r16)
    2660:	80800017 	ldw	r2,0(r16)
    2664:	8100030d 	sth	r4,12(r16)
    2668:	81000517 	ldw	r4,20(r16)
    266c:	10c7c83a 	sub	r3,r2,r3
    2670:	193fe016 	blt	r3,r4,25f4 <__swbuf_r+0x68>
    2674:	800b883a 	mov	r5,r16
    2678:	9009883a 	mov	r4,r18
    267c:	0002c0c0 	call	2c0c <_fflush_r>
    2680:	1000071e 	bne	r2,zero,26a0 <__swbuf_r+0x114>
    2684:	80800017 	ldw	r2,0(r16)
    2688:	00c00044 	movi	r3,1
    268c:	003fda06 	br	25f8 <__swbuf_r+0x6c>
    2690:	800b883a 	mov	r5,r16
    2694:	9009883a 	mov	r4,r18
    2698:	0002c0c0 	call	2c0c <_fflush_r>
    269c:	103fe326 	beq	r2,zero,262c <__swbuf_r+0xa0>
    26a0:	00bfffc4 	movi	r2,-1
    26a4:	003fe206 	br	2630 <__swbuf_r+0xa4>
    26a8:	800b883a 	mov	r5,r16
    26ac:	9009883a 	mov	r4,r18
    26b0:	00027440 	call	2744 <__swsetup_r>
    26b4:	103ffa1e 	bne	r2,zero,26a0 <__swbuf_r+0x114>
    26b8:	8100030b 	ldhu	r4,12(r16)
    26bc:	80c00417 	ldw	r3,16(r16)
    26c0:	003fc506 	br	25d8 <__swbuf_r+0x4c>
    26c4:	00009e00 	call	9e0 <__sinit>
    26c8:	003fbc06 	br	25bc <__swbuf_r+0x30>

000026cc <__swbuf>:
    26cc:	00800034 	movhi	r2,0
    26d0:	109f4f04 	addi	r2,r2,32060
    26d4:	280d883a 	mov	r6,r5
    26d8:	200b883a 	mov	r5,r4
    26dc:	11000017 	ldw	r4,0(r2)
    26e0:	000258c1 	jmpi	258c <__swbuf_r>

000026e4 <_write_r>:
    26e4:	defffd04 	addi	sp,sp,-12
    26e8:	2805883a 	mov	r2,r5
    26ec:	dc000015 	stw	r16,0(sp)
    26f0:	04000074 	movhi	r16,1
    26f4:	dc400115 	stw	r17,4(sp)
    26f8:	300b883a 	mov	r5,r6
    26fc:	84260504 	addi	r16,r16,-26604
    2700:	2023883a 	mov	r17,r4
    2704:	380d883a 	mov	r6,r7
    2708:	1009883a 	mov	r4,r2
    270c:	dfc00215 	stw	ra,8(sp)
    2710:	80000015 	stw	zero,0(r16)
    2714:	0003ea00 	call	3ea0 <write>
    2718:	00ffffc4 	movi	r3,-1
    271c:	10c00526 	beq	r2,r3,2734 <_write_r+0x50>
    2720:	dfc00217 	ldw	ra,8(sp)
    2724:	dc400117 	ldw	r17,4(sp)
    2728:	dc000017 	ldw	r16,0(sp)
    272c:	dec00304 	addi	sp,sp,12
    2730:	f800283a 	ret
    2734:	80c00017 	ldw	r3,0(r16)
    2738:	183ff926 	beq	r3,zero,2720 <_write_r+0x3c>
    273c:	88c00015 	stw	r3,0(r17)
    2740:	003ff706 	br	2720 <_write_r+0x3c>

00002744 <__swsetup_r>:
    2744:	00800034 	movhi	r2,0
    2748:	defffd04 	addi	sp,sp,-12
    274c:	109f4f04 	addi	r2,r2,32060
    2750:	dc400115 	stw	r17,4(sp)
    2754:	2023883a 	mov	r17,r4
    2758:	11000017 	ldw	r4,0(r2)
    275c:	dc000015 	stw	r16,0(sp)
    2760:	dfc00215 	stw	ra,8(sp)
    2764:	2821883a 	mov	r16,r5
    2768:	20000226 	beq	r4,zero,2774 <__swsetup_r+0x30>
    276c:	20800e17 	ldw	r2,56(r4)
    2770:	10003126 	beq	r2,zero,2838 <__swsetup_r+0xf4>
    2774:	8080030b 	ldhu	r2,12(r16)
    2778:	10c0020c 	andi	r3,r2,8
    277c:	1009883a 	mov	r4,r2
    2780:	18000f26 	beq	r3,zero,27c0 <__swsetup_r+0x7c>
    2784:	80c00417 	ldw	r3,16(r16)
    2788:	18001526 	beq	r3,zero,27e0 <__swsetup_r+0x9c>
    278c:	1100004c 	andi	r4,r2,1
    2790:	20001c1e 	bne	r4,zero,2804 <__swsetup_r+0xc0>
    2794:	1080008c 	andi	r2,r2,2
    2798:	1000291e 	bne	r2,zero,2840 <__swsetup_r+0xfc>
    279c:	80800517 	ldw	r2,20(r16)
    27a0:	80800215 	stw	r2,8(r16)
    27a4:	18001c26 	beq	r3,zero,2818 <__swsetup_r+0xd4>
    27a8:	0005883a 	mov	r2,zero
    27ac:	dfc00217 	ldw	ra,8(sp)
    27b0:	dc400117 	ldw	r17,4(sp)
    27b4:	dc000017 	ldw	r16,0(sp)
    27b8:	dec00304 	addi	sp,sp,12
    27bc:	f800283a 	ret
    27c0:	2080040c 	andi	r2,r4,16
    27c4:	10002e26 	beq	r2,zero,2880 <__swsetup_r+0x13c>
    27c8:	2080010c 	andi	r2,r4,4
    27cc:	10001e1e 	bne	r2,zero,2848 <__swsetup_r+0x104>
    27d0:	80c00417 	ldw	r3,16(r16)
    27d4:	20800214 	ori	r2,r4,8
    27d8:	8080030d 	sth	r2,12(r16)
    27dc:	183feb1e 	bne	r3,zero,278c <__swsetup_r+0x48>
    27e0:	1100a00c 	andi	r4,r2,640
    27e4:	01408004 	movi	r5,512
    27e8:	217fe826 	beq	r4,r5,278c <__swsetup_r+0x48>
    27ec:	800b883a 	mov	r5,r16
    27f0:	8809883a 	mov	r4,r17
    27f4:	000312c0 	call	312c <__smakebuf_r>
    27f8:	8080030b 	ldhu	r2,12(r16)
    27fc:	80c00417 	ldw	r3,16(r16)
    2800:	003fe206 	br	278c <__swsetup_r+0x48>
    2804:	80800517 	ldw	r2,20(r16)
    2808:	80000215 	stw	zero,8(r16)
    280c:	0085c83a 	sub	r2,zero,r2
    2810:	80800615 	stw	r2,24(r16)
    2814:	183fe41e 	bne	r3,zero,27a8 <__swsetup_r+0x64>
    2818:	80c0030b 	ldhu	r3,12(r16)
    281c:	0005883a 	mov	r2,zero
    2820:	1900200c 	andi	r4,r3,128
    2824:	203fe126 	beq	r4,zero,27ac <__swsetup_r+0x68>
    2828:	18c01014 	ori	r3,r3,64
    282c:	80c0030d 	sth	r3,12(r16)
    2830:	00bfffc4 	movi	r2,-1
    2834:	003fdd06 	br	27ac <__swsetup_r+0x68>
    2838:	00009e00 	call	9e0 <__sinit>
    283c:	003fcd06 	br	2774 <__swsetup_r+0x30>
    2840:	0005883a 	mov	r2,zero
    2844:	003fd606 	br	27a0 <__swsetup_r+0x5c>
    2848:	81400c17 	ldw	r5,48(r16)
    284c:	28000626 	beq	r5,zero,2868 <__swsetup_r+0x124>
    2850:	80801004 	addi	r2,r16,64
    2854:	28800326 	beq	r5,r2,2864 <__swsetup_r+0x120>
    2858:	8809883a 	mov	r4,r17
    285c:	0002dbc0 	call	2dbc <_free_r>
    2860:	8100030b 	ldhu	r4,12(r16)
    2864:	80000c15 	stw	zero,48(r16)
    2868:	80c00417 	ldw	r3,16(r16)
    286c:	00bff6c4 	movi	r2,-37
    2870:	1108703a 	and	r4,r2,r4
    2874:	80000115 	stw	zero,4(r16)
    2878:	80c00015 	stw	r3,0(r16)
    287c:	003fd506 	br	27d4 <__swsetup_r+0x90>
    2880:	00800244 	movi	r2,9
    2884:	88800015 	stw	r2,0(r17)
    2888:	20801014 	ori	r2,r4,64
    288c:	8080030d 	sth	r2,12(r16)
    2890:	00bfffc4 	movi	r2,-1
    2894:	003fc506 	br	27ac <__swsetup_r+0x68>

00002898 <_close_r>:
    2898:	defffd04 	addi	sp,sp,-12
    289c:	dc000015 	stw	r16,0(sp)
    28a0:	04000074 	movhi	r16,1
    28a4:	dc400115 	stw	r17,4(sp)
    28a8:	84260504 	addi	r16,r16,-26604
    28ac:	2023883a 	mov	r17,r4
    28b0:	2809883a 	mov	r4,r5
    28b4:	dfc00215 	stw	ra,8(sp)
    28b8:	80000015 	stw	zero,0(r16)
    28bc:	00035fc0 	call	35fc <close>
    28c0:	00ffffc4 	movi	r3,-1
    28c4:	10c00526 	beq	r2,r3,28dc <_close_r+0x44>
    28c8:	dfc00217 	ldw	ra,8(sp)
    28cc:	dc400117 	ldw	r17,4(sp)
    28d0:	dc000017 	ldw	r16,0(sp)
    28d4:	dec00304 	addi	sp,sp,12
    28d8:	f800283a 	ret
    28dc:	80c00017 	ldw	r3,0(r16)
    28e0:	183ff926 	beq	r3,zero,28c8 <_close_r+0x30>
    28e4:	88c00015 	stw	r3,0(r17)
    28e8:	003ff706 	br	28c8 <_close_r+0x30>

000028ec <_fclose_r>:
    28ec:	28003926 	beq	r5,zero,29d4 <_fclose_r+0xe8>
    28f0:	defffc04 	addi	sp,sp,-16
    28f4:	dc400115 	stw	r17,4(sp)
    28f8:	dc000015 	stw	r16,0(sp)
    28fc:	dfc00315 	stw	ra,12(sp)
    2900:	dc800215 	stw	r18,8(sp)
    2904:	2023883a 	mov	r17,r4
    2908:	2821883a 	mov	r16,r5
    290c:	20000226 	beq	r4,zero,2918 <_fclose_r+0x2c>
    2910:	20800e17 	ldw	r2,56(r4)
    2914:	10002726 	beq	r2,zero,29b4 <_fclose_r+0xc8>
    2918:	8080030f 	ldh	r2,12(r16)
    291c:	1000071e 	bne	r2,zero,293c <_fclose_r+0x50>
    2920:	0005883a 	mov	r2,zero
    2924:	dfc00317 	ldw	ra,12(sp)
    2928:	dc800217 	ldw	r18,8(sp)
    292c:	dc400117 	ldw	r17,4(sp)
    2930:	dc000017 	ldw	r16,0(sp)
    2934:	dec00404 	addi	sp,sp,16
    2938:	f800283a 	ret
    293c:	800b883a 	mov	r5,r16
    2940:	8809883a 	mov	r4,r17
    2944:	00029f00 	call	29f0 <__sflush_r>
    2948:	1025883a 	mov	r18,r2
    294c:	80800b17 	ldw	r2,44(r16)
    2950:	10000426 	beq	r2,zero,2964 <_fclose_r+0x78>
    2954:	81400717 	ldw	r5,28(r16)
    2958:	8809883a 	mov	r4,r17
    295c:	103ee83a 	callr	r2
    2960:	10001616 	blt	r2,zero,29bc <_fclose_r+0xd0>
    2964:	8080030b 	ldhu	r2,12(r16)
    2968:	1080200c 	andi	r2,r2,128
    296c:	1000151e 	bne	r2,zero,29c4 <_fclose_r+0xd8>
    2970:	81400c17 	ldw	r5,48(r16)
    2974:	28000526 	beq	r5,zero,298c <_fclose_r+0xa0>
    2978:	80801004 	addi	r2,r16,64
    297c:	28800226 	beq	r5,r2,2988 <_fclose_r+0x9c>
    2980:	8809883a 	mov	r4,r17
    2984:	0002dbc0 	call	2dbc <_free_r>
    2988:	80000c15 	stw	zero,48(r16)
    298c:	81401117 	ldw	r5,68(r16)
    2990:	28000326 	beq	r5,zero,29a0 <_fclose_r+0xb4>
    2994:	8809883a 	mov	r4,r17
    2998:	0002dbc0 	call	2dbc <_free_r>
    299c:	80001115 	stw	zero,68(r16)
    29a0:	00009f00 	call	9f0 <__sfp_lock_acquire>
    29a4:	8000030d 	sth	zero,12(r16)
    29a8:	00009f40 	call	9f4 <__sfp_lock_release>
    29ac:	9005883a 	mov	r2,r18
    29b0:	003fdc06 	br	2924 <_fclose_r+0x38>
    29b4:	00009e00 	call	9e0 <__sinit>
    29b8:	003fd706 	br	2918 <_fclose_r+0x2c>
    29bc:	04bfffc4 	movi	r18,-1
    29c0:	003fe806 	br	2964 <_fclose_r+0x78>
    29c4:	81400417 	ldw	r5,16(r16)
    29c8:	8809883a 	mov	r4,r17
    29cc:	0002dbc0 	call	2dbc <_free_r>
    29d0:	003fe706 	br	2970 <_fclose_r+0x84>
    29d4:	0005883a 	mov	r2,zero
    29d8:	f800283a 	ret

000029dc <fclose>:
    29dc:	00800034 	movhi	r2,0
    29e0:	109f4f04 	addi	r2,r2,32060
    29e4:	200b883a 	mov	r5,r4
    29e8:	11000017 	ldw	r4,0(r2)
    29ec:	00028ec1 	jmpi	28ec <_fclose_r>

000029f0 <__sflush_r>:
    29f0:	2880030b 	ldhu	r2,12(r5)
    29f4:	defffb04 	addi	sp,sp,-20
    29f8:	dcc00315 	stw	r19,12(sp)
    29fc:	dc400115 	stw	r17,4(sp)
    2a00:	dfc00415 	stw	ra,16(sp)
    2a04:	dc800215 	stw	r18,8(sp)
    2a08:	dc000015 	stw	r16,0(sp)
    2a0c:	10c0020c 	andi	r3,r2,8
    2a10:	2823883a 	mov	r17,r5
    2a14:	2027883a 	mov	r19,r4
    2a18:	1800311e 	bne	r3,zero,2ae0 <__sflush_r+0xf0>
    2a1c:	28c00117 	ldw	r3,4(r5)
    2a20:	10820014 	ori	r2,r2,2048
    2a24:	2880030d 	sth	r2,12(r5)
    2a28:	00c04b0e 	bge	zero,r3,2b58 <__sflush_r+0x168>
    2a2c:	8a000a17 	ldw	r8,40(r17)
    2a30:	40002326 	beq	r8,zero,2ac0 <__sflush_r+0xd0>
    2a34:	9c000017 	ldw	r16,0(r19)
    2a38:	10c4000c 	andi	r3,r2,4096
    2a3c:	98000015 	stw	zero,0(r19)
    2a40:	18004826 	beq	r3,zero,2b64 <__sflush_r+0x174>
    2a44:	89801417 	ldw	r6,80(r17)
    2a48:	10c0010c 	andi	r3,r2,4
    2a4c:	18000626 	beq	r3,zero,2a68 <__sflush_r+0x78>
    2a50:	88c00117 	ldw	r3,4(r17)
    2a54:	88800c17 	ldw	r2,48(r17)
    2a58:	30cdc83a 	sub	r6,r6,r3
    2a5c:	10000226 	beq	r2,zero,2a68 <__sflush_r+0x78>
    2a60:	88800f17 	ldw	r2,60(r17)
    2a64:	308dc83a 	sub	r6,r6,r2
    2a68:	89400717 	ldw	r5,28(r17)
    2a6c:	000f883a 	mov	r7,zero
    2a70:	9809883a 	mov	r4,r19
    2a74:	403ee83a 	callr	r8
    2a78:	00ffffc4 	movi	r3,-1
    2a7c:	10c04426 	beq	r2,r3,2b90 <__sflush_r+0x1a0>
    2a80:	88c0030b 	ldhu	r3,12(r17)
    2a84:	89000417 	ldw	r4,16(r17)
    2a88:	88000115 	stw	zero,4(r17)
    2a8c:	197dffcc 	andi	r5,r3,63487
    2a90:	8940030d 	sth	r5,12(r17)
    2a94:	89000015 	stw	r4,0(r17)
    2a98:	18c4000c 	andi	r3,r3,4096
    2a9c:	18002c1e 	bne	r3,zero,2b50 <__sflush_r+0x160>
    2aa0:	89400c17 	ldw	r5,48(r17)
    2aa4:	9c000015 	stw	r16,0(r19)
    2aa8:	28000526 	beq	r5,zero,2ac0 <__sflush_r+0xd0>
    2aac:	88801004 	addi	r2,r17,64
    2ab0:	28800226 	beq	r5,r2,2abc <__sflush_r+0xcc>
    2ab4:	9809883a 	mov	r4,r19
    2ab8:	0002dbc0 	call	2dbc <_free_r>
    2abc:	88000c15 	stw	zero,48(r17)
    2ac0:	0005883a 	mov	r2,zero
    2ac4:	dfc00417 	ldw	ra,16(sp)
    2ac8:	dcc00317 	ldw	r19,12(sp)
    2acc:	dc800217 	ldw	r18,8(sp)
    2ad0:	dc400117 	ldw	r17,4(sp)
    2ad4:	dc000017 	ldw	r16,0(sp)
    2ad8:	dec00504 	addi	sp,sp,20
    2adc:	f800283a 	ret
    2ae0:	2c800417 	ldw	r18,16(r5)
    2ae4:	903ff626 	beq	r18,zero,2ac0 <__sflush_r+0xd0>
    2ae8:	2c000017 	ldw	r16,0(r5)
    2aec:	108000cc 	andi	r2,r2,3
    2af0:	2c800015 	stw	r18,0(r5)
    2af4:	84a1c83a 	sub	r16,r16,r18
    2af8:	1000131e 	bne	r2,zero,2b48 <__sflush_r+0x158>
    2afc:	28800517 	ldw	r2,20(r5)
    2b00:	88800215 	stw	r2,8(r17)
    2b04:	04000316 	blt	zero,r16,2b14 <__sflush_r+0x124>
    2b08:	003fed06 	br	2ac0 <__sflush_r+0xd0>
    2b0c:	90a5883a 	add	r18,r18,r2
    2b10:	043feb0e 	bge	zero,r16,2ac0 <__sflush_r+0xd0>
    2b14:	88800917 	ldw	r2,36(r17)
    2b18:	89400717 	ldw	r5,28(r17)
    2b1c:	800f883a 	mov	r7,r16
    2b20:	900d883a 	mov	r6,r18
    2b24:	9809883a 	mov	r4,r19
    2b28:	103ee83a 	callr	r2
    2b2c:	80a1c83a 	sub	r16,r16,r2
    2b30:	00bff616 	blt	zero,r2,2b0c <__sflush_r+0x11c>
    2b34:	88c0030b 	ldhu	r3,12(r17)
    2b38:	00bfffc4 	movi	r2,-1
    2b3c:	18c01014 	ori	r3,r3,64
    2b40:	88c0030d 	sth	r3,12(r17)
    2b44:	003fdf06 	br	2ac4 <__sflush_r+0xd4>
    2b48:	0005883a 	mov	r2,zero
    2b4c:	003fec06 	br	2b00 <__sflush_r+0x110>
    2b50:	88801415 	stw	r2,80(r17)
    2b54:	003fd206 	br	2aa0 <__sflush_r+0xb0>
    2b58:	28c00f17 	ldw	r3,60(r5)
    2b5c:	00ffb316 	blt	zero,r3,2a2c <__sflush_r+0x3c>
    2b60:	003fd706 	br	2ac0 <__sflush_r+0xd0>
    2b64:	89400717 	ldw	r5,28(r17)
    2b68:	000d883a 	mov	r6,zero
    2b6c:	01c00044 	movi	r7,1
    2b70:	9809883a 	mov	r4,r19
    2b74:	403ee83a 	callr	r8
    2b78:	100d883a 	mov	r6,r2
    2b7c:	00bfffc4 	movi	r2,-1
    2b80:	30801426 	beq	r6,r2,2bd4 <__sflush_r+0x1e4>
    2b84:	8880030b 	ldhu	r2,12(r17)
    2b88:	8a000a17 	ldw	r8,40(r17)
    2b8c:	003fae06 	br	2a48 <__sflush_r+0x58>
    2b90:	98c00017 	ldw	r3,0(r19)
    2b94:	183fba26 	beq	r3,zero,2a80 <__sflush_r+0x90>
    2b98:	01000744 	movi	r4,29
    2b9c:	19000626 	beq	r3,r4,2bb8 <__sflush_r+0x1c8>
    2ba0:	01000584 	movi	r4,22
    2ba4:	19000426 	beq	r3,r4,2bb8 <__sflush_r+0x1c8>
    2ba8:	88c0030b 	ldhu	r3,12(r17)
    2bac:	18c01014 	ori	r3,r3,64
    2bb0:	88c0030d 	sth	r3,12(r17)
    2bb4:	003fc306 	br	2ac4 <__sflush_r+0xd4>
    2bb8:	8880030b 	ldhu	r2,12(r17)
    2bbc:	88c00417 	ldw	r3,16(r17)
    2bc0:	88000115 	stw	zero,4(r17)
    2bc4:	10bdffcc 	andi	r2,r2,63487
    2bc8:	8880030d 	sth	r2,12(r17)
    2bcc:	88c00015 	stw	r3,0(r17)
    2bd0:	003fb306 	br	2aa0 <__sflush_r+0xb0>
    2bd4:	98800017 	ldw	r2,0(r19)
    2bd8:	103fea26 	beq	r2,zero,2b84 <__sflush_r+0x194>
    2bdc:	00c00744 	movi	r3,29
    2be0:	10c00226 	beq	r2,r3,2bec <__sflush_r+0x1fc>
    2be4:	00c00584 	movi	r3,22
    2be8:	10c0031e 	bne	r2,r3,2bf8 <__sflush_r+0x208>
    2bec:	9c000015 	stw	r16,0(r19)
    2bf0:	0005883a 	mov	r2,zero
    2bf4:	003fb306 	br	2ac4 <__sflush_r+0xd4>
    2bf8:	88c0030b 	ldhu	r3,12(r17)
    2bfc:	3005883a 	mov	r2,r6
    2c00:	18c01014 	ori	r3,r3,64
    2c04:	88c0030d 	sth	r3,12(r17)
    2c08:	003fae06 	br	2ac4 <__sflush_r+0xd4>

00002c0c <_fflush_r>:
    2c0c:	defffd04 	addi	sp,sp,-12
    2c10:	dc000115 	stw	r16,4(sp)
    2c14:	dfc00215 	stw	ra,8(sp)
    2c18:	2021883a 	mov	r16,r4
    2c1c:	20000226 	beq	r4,zero,2c28 <_fflush_r+0x1c>
    2c20:	20800e17 	ldw	r2,56(r4)
    2c24:	10000c26 	beq	r2,zero,2c58 <_fflush_r+0x4c>
    2c28:	2880030f 	ldh	r2,12(r5)
    2c2c:	1000051e 	bne	r2,zero,2c44 <_fflush_r+0x38>
    2c30:	0005883a 	mov	r2,zero
    2c34:	dfc00217 	ldw	ra,8(sp)
    2c38:	dc000117 	ldw	r16,4(sp)
    2c3c:	dec00304 	addi	sp,sp,12
    2c40:	f800283a 	ret
    2c44:	8009883a 	mov	r4,r16
    2c48:	dfc00217 	ldw	ra,8(sp)
    2c4c:	dc000117 	ldw	r16,4(sp)
    2c50:	dec00304 	addi	sp,sp,12
    2c54:	00029f01 	jmpi	29f0 <__sflush_r>
    2c58:	d9400015 	stw	r5,0(sp)
    2c5c:	00009e00 	call	9e0 <__sinit>
    2c60:	d9400017 	ldw	r5,0(sp)
    2c64:	003ff006 	br	2c28 <_fflush_r+0x1c>

00002c68 <fflush>:
    2c68:	20000526 	beq	r4,zero,2c80 <fflush+0x18>
    2c6c:	00800034 	movhi	r2,0
    2c70:	109f4f04 	addi	r2,r2,32060
    2c74:	200b883a 	mov	r5,r4
    2c78:	11000017 	ldw	r4,0(r2)
    2c7c:	0002c0c1 	jmpi	2c0c <_fflush_r>
    2c80:	00800034 	movhi	r2,0
    2c84:	109f4e04 	addi	r2,r2,32056
    2c88:	11000017 	ldw	r4,0(r2)
    2c8c:	01400034 	movhi	r5,0
    2c90:	294b0304 	addi	r5,r5,11276
    2c94:	0000fb01 	jmpi	fb0 <_fwalk_reent>

00002c98 <_malloc_trim_r>:
    2c98:	defffb04 	addi	sp,sp,-20
    2c9c:	dcc00315 	stw	r19,12(sp)
    2ca0:	04c00034 	movhi	r19,0
    2ca4:	dc800215 	stw	r18,8(sp)
    2ca8:	dc400115 	stw	r17,4(sp)
    2cac:	dc000015 	stw	r16,0(sp)
    2cb0:	dfc00415 	stw	ra,16(sp)
    2cb4:	2821883a 	mov	r16,r5
    2cb8:	9cd9bf04 	addi	r19,r19,26364
    2cbc:	2025883a 	mov	r18,r4
    2cc0:	0003b780 	call	3b78 <__malloc_lock>
    2cc4:	98800217 	ldw	r2,8(r19)
    2cc8:	14400117 	ldw	r17,4(r2)
    2ccc:	00bfff04 	movi	r2,-4
    2cd0:	88a2703a 	and	r17,r17,r2
    2cd4:	8c21c83a 	sub	r16,r17,r16
    2cd8:	8403fbc4 	addi	r16,r16,4079
    2cdc:	8020d33a 	srli	r16,r16,12
    2ce0:	0083ffc4 	movi	r2,4095
    2ce4:	843fffc4 	addi	r16,r16,-1
    2ce8:	8020933a 	slli	r16,r16,12
    2cec:	1400060e 	bge	r2,r16,2d08 <_malloc_trim_r+0x70>
    2cf0:	000b883a 	mov	r5,zero
    2cf4:	9009883a 	mov	r4,r18
    2cf8:	00023fc0 	call	23fc <_sbrk_r>
    2cfc:	98c00217 	ldw	r3,8(r19)
    2d00:	1c47883a 	add	r3,r3,r17
    2d04:	10c00a26 	beq	r2,r3,2d30 <_malloc_trim_r+0x98>
    2d08:	9009883a 	mov	r4,r18
    2d0c:	0003b9c0 	call	3b9c <__malloc_unlock>
    2d10:	0005883a 	mov	r2,zero
    2d14:	dfc00417 	ldw	ra,16(sp)
    2d18:	dcc00317 	ldw	r19,12(sp)
    2d1c:	dc800217 	ldw	r18,8(sp)
    2d20:	dc400117 	ldw	r17,4(sp)
    2d24:	dc000017 	ldw	r16,0(sp)
    2d28:	dec00504 	addi	sp,sp,20
    2d2c:	f800283a 	ret
    2d30:	040bc83a 	sub	r5,zero,r16
    2d34:	9009883a 	mov	r4,r18
    2d38:	00023fc0 	call	23fc <_sbrk_r>
    2d3c:	00ffffc4 	movi	r3,-1
    2d40:	10c00d26 	beq	r2,r3,2d78 <_malloc_trim_r+0xe0>
    2d44:	00c00074 	movhi	r3,1
    2d48:	18e60d04 	addi	r3,r3,-26572
    2d4c:	18800017 	ldw	r2,0(r3)
    2d50:	99000217 	ldw	r4,8(r19)
    2d54:	8c23c83a 	sub	r17,r17,r16
    2d58:	8c400054 	ori	r17,r17,1
    2d5c:	1421c83a 	sub	r16,r2,r16
    2d60:	24400115 	stw	r17,4(r4)
    2d64:	9009883a 	mov	r4,r18
    2d68:	1c000015 	stw	r16,0(r3)
    2d6c:	0003b9c0 	call	3b9c <__malloc_unlock>
    2d70:	00800044 	movi	r2,1
    2d74:	003fe706 	br	2d14 <_malloc_trim_r+0x7c>
    2d78:	000b883a 	mov	r5,zero
    2d7c:	9009883a 	mov	r4,r18
    2d80:	00023fc0 	call	23fc <_sbrk_r>
    2d84:	99000217 	ldw	r4,8(r19)
    2d88:	014003c4 	movi	r5,15
    2d8c:	1107c83a 	sub	r3,r2,r4
    2d90:	28ffdd0e 	bge	r5,r3,2d08 <_malloc_trim_r+0x70>
    2d94:	01400034 	movhi	r5,0
    2d98:	295f5004 	addi	r5,r5,32064
    2d9c:	29400017 	ldw	r5,0(r5)
    2da0:	18c00054 	ori	r3,r3,1
    2da4:	20c00115 	stw	r3,4(r4)
    2da8:	00c00074 	movhi	r3,1
    2dac:	1145c83a 	sub	r2,r2,r5
    2db0:	18e60d04 	addi	r3,r3,-26572
    2db4:	18800015 	stw	r2,0(r3)
    2db8:	003fd306 	br	2d08 <_malloc_trim_r+0x70>

00002dbc <_free_r>:
    2dbc:	28004126 	beq	r5,zero,2ec4 <_free_r+0x108>
    2dc0:	defffd04 	addi	sp,sp,-12
    2dc4:	dc400115 	stw	r17,4(sp)
    2dc8:	dc000015 	stw	r16,0(sp)
    2dcc:	2023883a 	mov	r17,r4
    2dd0:	2821883a 	mov	r16,r5
    2dd4:	dfc00215 	stw	ra,8(sp)
    2dd8:	0003b780 	call	3b78 <__malloc_lock>
    2ddc:	81ffff17 	ldw	r7,-4(r16)
    2de0:	00bfff84 	movi	r2,-2
    2de4:	01000034 	movhi	r4,0
    2de8:	81bffe04 	addi	r6,r16,-8
    2dec:	3884703a 	and	r2,r7,r2
    2df0:	2119bf04 	addi	r4,r4,26364
    2df4:	308b883a 	add	r5,r6,r2
    2df8:	2a400117 	ldw	r9,4(r5)
    2dfc:	22000217 	ldw	r8,8(r4)
    2e00:	00ffff04 	movi	r3,-4
    2e04:	48c6703a 	and	r3,r9,r3
    2e08:	2a005726 	beq	r5,r8,2f68 <_free_r+0x1ac>
    2e0c:	28c00115 	stw	r3,4(r5)
    2e10:	39c0004c 	andi	r7,r7,1
    2e14:	3800091e 	bne	r7,zero,2e3c <_free_r+0x80>
    2e18:	823ffe17 	ldw	r8,-8(r16)
    2e1c:	22400204 	addi	r9,r4,8
    2e20:	320dc83a 	sub	r6,r6,r8
    2e24:	31c00217 	ldw	r7,8(r6)
    2e28:	1205883a 	add	r2,r2,r8
    2e2c:	3a406526 	beq	r7,r9,2fc4 <_free_r+0x208>
    2e30:	32000317 	ldw	r8,12(r6)
    2e34:	3a000315 	stw	r8,12(r7)
    2e38:	41c00215 	stw	r7,8(r8)
    2e3c:	28cf883a 	add	r7,r5,r3
    2e40:	39c00117 	ldw	r7,4(r7)
    2e44:	39c0004c 	andi	r7,r7,1
    2e48:	38003a26 	beq	r7,zero,2f34 <_free_r+0x178>
    2e4c:	10c00054 	ori	r3,r2,1
    2e50:	30c00115 	stw	r3,4(r6)
    2e54:	3087883a 	add	r3,r6,r2
    2e58:	18800015 	stw	r2,0(r3)
    2e5c:	00c07fc4 	movi	r3,511
    2e60:	18801936 	bltu	r3,r2,2ec8 <_free_r+0x10c>
    2e64:	1004d0fa 	srli	r2,r2,3
    2e68:	01c00044 	movi	r7,1
    2e6c:	21400117 	ldw	r5,4(r4)
    2e70:	10c00044 	addi	r3,r2,1
    2e74:	18c7883a 	add	r3,r3,r3
    2e78:	1005d0ba 	srai	r2,r2,2
    2e7c:	18c7883a 	add	r3,r3,r3
    2e80:	18c7883a 	add	r3,r3,r3
    2e84:	1907883a 	add	r3,r3,r4
    2e88:	3884983a 	sll	r2,r7,r2
    2e8c:	19c00017 	ldw	r7,0(r3)
    2e90:	1a3ffe04 	addi	r8,r3,-8
    2e94:	1144b03a 	or	r2,r2,r5
    2e98:	32000315 	stw	r8,12(r6)
    2e9c:	31c00215 	stw	r7,8(r6)
    2ea0:	20800115 	stw	r2,4(r4)
    2ea4:	19800015 	stw	r6,0(r3)
    2ea8:	39800315 	stw	r6,12(r7)
    2eac:	8809883a 	mov	r4,r17
    2eb0:	dfc00217 	ldw	ra,8(sp)
    2eb4:	dc400117 	ldw	r17,4(sp)
    2eb8:	dc000017 	ldw	r16,0(sp)
    2ebc:	dec00304 	addi	sp,sp,12
    2ec0:	0003b9c1 	jmpi	3b9c <__malloc_unlock>
    2ec4:	f800283a 	ret
    2ec8:	100ad27a 	srli	r5,r2,9
    2ecc:	00c00104 	movi	r3,4
    2ed0:	19404a36 	bltu	r3,r5,2ffc <_free_r+0x240>
    2ed4:	100ad1ba 	srli	r5,r2,6
    2ed8:	28c00e44 	addi	r3,r5,57
    2edc:	18c7883a 	add	r3,r3,r3
    2ee0:	29400e04 	addi	r5,r5,56
    2ee4:	18c7883a 	add	r3,r3,r3
    2ee8:	18c7883a 	add	r3,r3,r3
    2eec:	1909883a 	add	r4,r3,r4
    2ef0:	20c00017 	ldw	r3,0(r4)
    2ef4:	01c00034 	movhi	r7,0
    2ef8:	213ffe04 	addi	r4,r4,-8
    2efc:	39d9bf04 	addi	r7,r7,26364
    2f00:	20c04426 	beq	r4,r3,3014 <_free_r+0x258>
    2f04:	01ffff04 	movi	r7,-4
    2f08:	19400117 	ldw	r5,4(r3)
    2f0c:	29ca703a 	and	r5,r5,r7
    2f10:	1140022e 	bgeu	r2,r5,2f1c <_free_r+0x160>
    2f14:	18c00217 	ldw	r3,8(r3)
    2f18:	20fffb1e 	bne	r4,r3,2f08 <_free_r+0x14c>
    2f1c:	19000317 	ldw	r4,12(r3)
    2f20:	31000315 	stw	r4,12(r6)
    2f24:	30c00215 	stw	r3,8(r6)
    2f28:	21800215 	stw	r6,8(r4)
    2f2c:	19800315 	stw	r6,12(r3)
    2f30:	003fde06 	br	2eac <_free_r+0xf0>
    2f34:	29c00217 	ldw	r7,8(r5)
    2f38:	10c5883a 	add	r2,r2,r3
    2f3c:	00c00034 	movhi	r3,0
    2f40:	18d9c104 	addi	r3,r3,26372
    2f44:	38c03b26 	beq	r7,r3,3034 <_free_r+0x278>
    2f48:	2a000317 	ldw	r8,12(r5)
    2f4c:	11400054 	ori	r5,r2,1
    2f50:	3087883a 	add	r3,r6,r2
    2f54:	3a000315 	stw	r8,12(r7)
    2f58:	41c00215 	stw	r7,8(r8)
    2f5c:	31400115 	stw	r5,4(r6)
    2f60:	18800015 	stw	r2,0(r3)
    2f64:	003fbd06 	br	2e5c <_free_r+0xa0>
    2f68:	39c0004c 	andi	r7,r7,1
    2f6c:	10c5883a 	add	r2,r2,r3
    2f70:	3800071e 	bne	r7,zero,2f90 <_free_r+0x1d4>
    2f74:	81fffe17 	ldw	r7,-8(r16)
    2f78:	31cdc83a 	sub	r6,r6,r7
    2f7c:	30c00317 	ldw	r3,12(r6)
    2f80:	31400217 	ldw	r5,8(r6)
    2f84:	11c5883a 	add	r2,r2,r7
    2f88:	28c00315 	stw	r3,12(r5)
    2f8c:	19400215 	stw	r5,8(r3)
    2f90:	10c00054 	ori	r3,r2,1
    2f94:	30c00115 	stw	r3,4(r6)
    2f98:	00c00034 	movhi	r3,0
    2f9c:	18df5104 	addi	r3,r3,32068
    2fa0:	18c00017 	ldw	r3,0(r3)
    2fa4:	21800215 	stw	r6,8(r4)
    2fa8:	10ffc036 	bltu	r2,r3,2eac <_free_r+0xf0>
    2fac:	00800074 	movhi	r2,1
    2fb0:	10a60404 	addi	r2,r2,-26608
    2fb4:	11400017 	ldw	r5,0(r2)
    2fb8:	8809883a 	mov	r4,r17
    2fbc:	0002c980 	call	2c98 <_malloc_trim_r>
    2fc0:	003fba06 	br	2eac <_free_r+0xf0>
    2fc4:	28c9883a 	add	r4,r5,r3
    2fc8:	21000117 	ldw	r4,4(r4)
    2fcc:	2100004c 	andi	r4,r4,1
    2fd0:	2000391e 	bne	r4,zero,30b8 <_free_r+0x2fc>
    2fd4:	29c00217 	ldw	r7,8(r5)
    2fd8:	29000317 	ldw	r4,12(r5)
    2fdc:	1885883a 	add	r2,r3,r2
    2fe0:	10c00054 	ori	r3,r2,1
    2fe4:	39000315 	stw	r4,12(r7)
    2fe8:	21c00215 	stw	r7,8(r4)
    2fec:	30c00115 	stw	r3,4(r6)
    2ff0:	308d883a 	add	r6,r6,r2
    2ff4:	30800015 	stw	r2,0(r6)
    2ff8:	003fac06 	br	2eac <_free_r+0xf0>
    2ffc:	00c00504 	movi	r3,20
    3000:	19401536 	bltu	r3,r5,3058 <_free_r+0x29c>
    3004:	28c01704 	addi	r3,r5,92
    3008:	18c7883a 	add	r3,r3,r3
    300c:	294016c4 	addi	r5,r5,91
    3010:	003fb406 	br	2ee4 <_free_r+0x128>
    3014:	280bd0ba 	srai	r5,r5,2
    3018:	00c00044 	movi	r3,1
    301c:	38800117 	ldw	r2,4(r7)
    3020:	194a983a 	sll	r5,r3,r5
    3024:	2007883a 	mov	r3,r4
    3028:	2884b03a 	or	r2,r5,r2
    302c:	38800115 	stw	r2,4(r7)
    3030:	003fbb06 	br	2f20 <_free_r+0x164>
    3034:	21800515 	stw	r6,20(r4)
    3038:	21800415 	stw	r6,16(r4)
    303c:	10c00054 	ori	r3,r2,1
    3040:	31c00315 	stw	r7,12(r6)
    3044:	31c00215 	stw	r7,8(r6)
    3048:	30c00115 	stw	r3,4(r6)
    304c:	308d883a 	add	r6,r6,r2
    3050:	30800015 	stw	r2,0(r6)
    3054:	003f9506 	br	2eac <_free_r+0xf0>
    3058:	00c01504 	movi	r3,84
    305c:	19400536 	bltu	r3,r5,3074 <_free_r+0x2b8>
    3060:	100ad33a 	srli	r5,r2,12
    3064:	28c01bc4 	addi	r3,r5,111
    3068:	18c7883a 	add	r3,r3,r3
    306c:	29401b84 	addi	r5,r5,110
    3070:	003f9c06 	br	2ee4 <_free_r+0x128>
    3074:	00c05504 	movi	r3,340
    3078:	19400536 	bltu	r3,r5,3090 <_free_r+0x2d4>
    307c:	100ad3fa 	srli	r5,r2,15
    3080:	28c01e04 	addi	r3,r5,120
    3084:	18c7883a 	add	r3,r3,r3
    3088:	29401dc4 	addi	r5,r5,119
    308c:	003f9506 	br	2ee4 <_free_r+0x128>
    3090:	00c15504 	movi	r3,1364
    3094:	19400536 	bltu	r3,r5,30ac <_free_r+0x2f0>
    3098:	100ad4ba 	srli	r5,r2,18
    309c:	28c01f44 	addi	r3,r5,125
    30a0:	18c7883a 	add	r3,r3,r3
    30a4:	29401f04 	addi	r5,r5,124
    30a8:	003f8e06 	br	2ee4 <_free_r+0x128>
    30ac:	00c03f84 	movi	r3,254
    30b0:	01401f84 	movi	r5,126
    30b4:	003f8b06 	br	2ee4 <_free_r+0x128>
    30b8:	10c00054 	ori	r3,r2,1
    30bc:	30c00115 	stw	r3,4(r6)
    30c0:	308d883a 	add	r6,r6,r2
    30c4:	30800015 	stw	r2,0(r6)
    30c8:	003f7806 	br	2eac <_free_r+0xf0>

000030cc <_lseek_r>:
    30cc:	defffd04 	addi	sp,sp,-12
    30d0:	2805883a 	mov	r2,r5
    30d4:	dc000015 	stw	r16,0(sp)
    30d8:	04000074 	movhi	r16,1
    30dc:	dc400115 	stw	r17,4(sp)
    30e0:	300b883a 	mov	r5,r6
    30e4:	84260504 	addi	r16,r16,-26604
    30e8:	2023883a 	mov	r17,r4
    30ec:	380d883a 	mov	r6,r7
    30f0:	1009883a 	mov	r4,r2
    30f4:	dfc00215 	stw	ra,8(sp)
    30f8:	80000015 	stw	zero,0(r16)
    30fc:	0003a280 	call	3a28 <lseek>
    3100:	00ffffc4 	movi	r3,-1
    3104:	10c00526 	beq	r2,r3,311c <_lseek_r+0x50>
    3108:	dfc00217 	ldw	ra,8(sp)
    310c:	dc400117 	ldw	r17,4(sp)
    3110:	dc000017 	ldw	r16,0(sp)
    3114:	dec00304 	addi	sp,sp,12
    3118:	f800283a 	ret
    311c:	80c00017 	ldw	r3,0(r16)
    3120:	183ff926 	beq	r3,zero,3108 <_lseek_r+0x3c>
    3124:	88c00015 	stw	r3,0(r17)
    3128:	003ff706 	br	3108 <_lseek_r+0x3c>

0000312c <__smakebuf_r>:
    312c:	2880030b 	ldhu	r2,12(r5)
    3130:	10c0008c 	andi	r3,r2,2
    3134:	1800411e 	bne	r3,zero,323c <__smakebuf_r+0x110>
    3138:	deffec04 	addi	sp,sp,-80
    313c:	dc000f15 	stw	r16,60(sp)
    3140:	2821883a 	mov	r16,r5
    3144:	2940038f 	ldh	r5,14(r5)
    3148:	dc401015 	stw	r17,64(sp)
    314c:	dfc01315 	stw	ra,76(sp)
    3150:	dcc01215 	stw	r19,72(sp)
    3154:	dc801115 	stw	r18,68(sp)
    3158:	2023883a 	mov	r17,r4
    315c:	28001c16 	blt	r5,zero,31d0 <__smakebuf_r+0xa4>
    3160:	d80d883a 	mov	r6,sp
    3164:	00033480 	call	3348 <_fstat_r>
    3168:	10001816 	blt	r2,zero,31cc <__smakebuf_r+0xa0>
    316c:	d8800117 	ldw	r2,4(sp)
    3170:	00e00014 	movui	r3,32768
    3174:	10bc000c 	andi	r2,r2,61440
    3178:	14c80020 	cmpeqi	r19,r2,8192
    317c:	10c03726 	beq	r2,r3,325c <__smakebuf_r+0x130>
    3180:	80c0030b 	ldhu	r3,12(r16)
    3184:	18c20014 	ori	r3,r3,2048
    3188:	80c0030d 	sth	r3,12(r16)
    318c:	00c80004 	movi	r3,8192
    3190:	10c0521e 	bne	r2,r3,32dc <__smakebuf_r+0x1b0>
    3194:	8140038f 	ldh	r5,14(r16)
    3198:	8809883a 	mov	r4,r17
    319c:	00033a40 	call	33a4 <_isatty_r>
    31a0:	10004c26 	beq	r2,zero,32d4 <__smakebuf_r+0x1a8>
    31a4:	8080030b 	ldhu	r2,12(r16)
    31a8:	80c010c4 	addi	r3,r16,67
    31ac:	80c00015 	stw	r3,0(r16)
    31b0:	10800054 	ori	r2,r2,1
    31b4:	8080030d 	sth	r2,12(r16)
    31b8:	00800044 	movi	r2,1
    31bc:	80c00415 	stw	r3,16(r16)
    31c0:	80800515 	stw	r2,20(r16)
    31c4:	04810004 	movi	r18,1024
    31c8:	00000706 	br	31e8 <__smakebuf_r+0xbc>
    31cc:	8080030b 	ldhu	r2,12(r16)
    31d0:	10c0200c 	andi	r3,r2,128
    31d4:	18001f1e 	bne	r3,zero,3254 <__smakebuf_r+0x128>
    31d8:	04810004 	movi	r18,1024
    31dc:	10820014 	ori	r2,r2,2048
    31e0:	8080030d 	sth	r2,12(r16)
    31e4:	0027883a 	mov	r19,zero
    31e8:	900b883a 	mov	r5,r18
    31ec:	8809883a 	mov	r4,r17
    31f0:	00010740 	call	1074 <_malloc_r>
    31f4:	10002c26 	beq	r2,zero,32a8 <__smakebuf_r+0x17c>
    31f8:	80c0030b 	ldhu	r3,12(r16)
    31fc:	01000034 	movhi	r4,0
    3200:	2101a604 	addi	r4,r4,1688
    3204:	89000f15 	stw	r4,60(r17)
    3208:	18c02014 	ori	r3,r3,128
    320c:	80c0030d 	sth	r3,12(r16)
    3210:	80800015 	stw	r2,0(r16)
    3214:	80800415 	stw	r2,16(r16)
    3218:	84800515 	stw	r18,20(r16)
    321c:	98001a1e 	bne	r19,zero,3288 <__smakebuf_r+0x15c>
    3220:	dfc01317 	ldw	ra,76(sp)
    3224:	dcc01217 	ldw	r19,72(sp)
    3228:	dc801117 	ldw	r18,68(sp)
    322c:	dc401017 	ldw	r17,64(sp)
    3230:	dc000f17 	ldw	r16,60(sp)
    3234:	dec01404 	addi	sp,sp,80
    3238:	f800283a 	ret
    323c:	288010c4 	addi	r2,r5,67
    3240:	28800015 	stw	r2,0(r5)
    3244:	28800415 	stw	r2,16(r5)
    3248:	00800044 	movi	r2,1
    324c:	28800515 	stw	r2,20(r5)
    3250:	f800283a 	ret
    3254:	04801004 	movi	r18,64
    3258:	003fe006 	br	31dc <__smakebuf_r+0xb0>
    325c:	81000a17 	ldw	r4,40(r16)
    3260:	00c00034 	movhi	r3,0
    3264:	18c94a04 	addi	r3,r3,9512
    3268:	20ffc51e 	bne	r4,r3,3180 <__smakebuf_r+0x54>
    326c:	8080030b 	ldhu	r2,12(r16)
    3270:	04810004 	movi	r18,1024
    3274:	84801315 	stw	r18,76(r16)
    3278:	1484b03a 	or	r2,r2,r18
    327c:	8080030d 	sth	r2,12(r16)
    3280:	0027883a 	mov	r19,zero
    3284:	003fd806 	br	31e8 <__smakebuf_r+0xbc>
    3288:	8140038f 	ldh	r5,14(r16)
    328c:	8809883a 	mov	r4,r17
    3290:	00033a40 	call	33a4 <_isatty_r>
    3294:	103fe226 	beq	r2,zero,3220 <__smakebuf_r+0xf4>
    3298:	8080030b 	ldhu	r2,12(r16)
    329c:	10800054 	ori	r2,r2,1
    32a0:	8080030d 	sth	r2,12(r16)
    32a4:	003fde06 	br	3220 <__smakebuf_r+0xf4>
    32a8:	8080030b 	ldhu	r2,12(r16)
    32ac:	10c0800c 	andi	r3,r2,512
    32b0:	183fdb1e 	bne	r3,zero,3220 <__smakebuf_r+0xf4>
    32b4:	10800094 	ori	r2,r2,2
    32b8:	80c010c4 	addi	r3,r16,67
    32bc:	8080030d 	sth	r2,12(r16)
    32c0:	00800044 	movi	r2,1
    32c4:	80c00015 	stw	r3,0(r16)
    32c8:	80c00415 	stw	r3,16(r16)
    32cc:	80800515 	stw	r2,20(r16)
    32d0:	003fd306 	br	3220 <__smakebuf_r+0xf4>
    32d4:	04810004 	movi	r18,1024
    32d8:	003fc306 	br	31e8 <__smakebuf_r+0xbc>
    32dc:	0027883a 	mov	r19,zero
    32e0:	04810004 	movi	r18,1024
    32e4:	003fc006 	br	31e8 <__smakebuf_r+0xbc>

000032e8 <_read_r>:
    32e8:	defffd04 	addi	sp,sp,-12
    32ec:	2805883a 	mov	r2,r5
    32f0:	dc000015 	stw	r16,0(sp)
    32f4:	04000074 	movhi	r16,1
    32f8:	dc400115 	stw	r17,4(sp)
    32fc:	300b883a 	mov	r5,r6
    3300:	84260504 	addi	r16,r16,-26604
    3304:	2023883a 	mov	r17,r4
    3308:	380d883a 	mov	r6,r7
    330c:	1009883a 	mov	r4,r2
    3310:	dfc00215 	stw	ra,8(sp)
    3314:	80000015 	stw	zero,0(r16)
    3318:	0003c100 	call	3c10 <read>
    331c:	00ffffc4 	movi	r3,-1
    3320:	10c00526 	beq	r2,r3,3338 <_read_r+0x50>
    3324:	dfc00217 	ldw	ra,8(sp)
    3328:	dc400117 	ldw	r17,4(sp)
    332c:	dc000017 	ldw	r16,0(sp)
    3330:	dec00304 	addi	sp,sp,12
    3334:	f800283a 	ret
    3338:	80c00017 	ldw	r3,0(r16)
    333c:	183ff926 	beq	r3,zero,3324 <_read_r+0x3c>
    3340:	88c00015 	stw	r3,0(r17)
    3344:	003ff706 	br	3324 <_read_r+0x3c>

00003348 <_fstat_r>:
    3348:	defffd04 	addi	sp,sp,-12
    334c:	2805883a 	mov	r2,r5
    3350:	dc000015 	stw	r16,0(sp)
    3354:	04000074 	movhi	r16,1
    3358:	dc400115 	stw	r17,4(sp)
    335c:	84260504 	addi	r16,r16,-26604
    3360:	2023883a 	mov	r17,r4
    3364:	300b883a 	mov	r5,r6
    3368:	1009883a 	mov	r4,r2
    336c:	dfc00215 	stw	ra,8(sp)
    3370:	80000015 	stw	zero,0(r16)
    3374:	00037480 	call	3748 <fstat>
    3378:	00ffffc4 	movi	r3,-1
    337c:	10c00526 	beq	r2,r3,3394 <_fstat_r+0x4c>
    3380:	dfc00217 	ldw	ra,8(sp)
    3384:	dc400117 	ldw	r17,4(sp)
    3388:	dc000017 	ldw	r16,0(sp)
    338c:	dec00304 	addi	sp,sp,12
    3390:	f800283a 	ret
    3394:	80c00017 	ldw	r3,0(r16)
    3398:	183ff926 	beq	r3,zero,3380 <_fstat_r+0x38>
    339c:	88c00015 	stw	r3,0(r17)
    33a0:	003ff706 	br	3380 <_fstat_r+0x38>

000033a4 <_isatty_r>:
    33a4:	defffd04 	addi	sp,sp,-12
    33a8:	dc000015 	stw	r16,0(sp)
    33ac:	04000074 	movhi	r16,1
    33b0:	dc400115 	stw	r17,4(sp)
    33b4:	84260504 	addi	r16,r16,-26604
    33b8:	2023883a 	mov	r17,r4
    33bc:	2809883a 	mov	r4,r5
    33c0:	dfc00215 	stw	ra,8(sp)
    33c4:	80000015 	stw	zero,0(r16)
    33c8:	00038480 	call	3848 <isatty>
    33cc:	00ffffc4 	movi	r3,-1
    33d0:	10c00526 	beq	r2,r3,33e8 <_isatty_r+0x44>
    33d4:	dfc00217 	ldw	ra,8(sp)
    33d8:	dc400117 	ldw	r17,4(sp)
    33dc:	dc000017 	ldw	r16,0(sp)
    33e0:	dec00304 	addi	sp,sp,12
    33e4:	f800283a 	ret
    33e8:	80c00017 	ldw	r3,0(r16)
    33ec:	183ff926 	beq	r3,zero,33d4 <_isatty_r+0x30>
    33f0:	88c00015 	stw	r3,0(r17)
    33f4:	003ff706 	br	33d4 <_isatty_r+0x30>

000033f8 <__divsi3>:
    33f8:	20001b16 	blt	r4,zero,3468 <__divsi3+0x70>
    33fc:	000f883a 	mov	r7,zero
    3400:	28001616 	blt	r5,zero,345c <__divsi3+0x64>
    3404:	200d883a 	mov	r6,r4
    3408:	29001a2e 	bgeu	r5,r4,3474 <__divsi3+0x7c>
    340c:	00800804 	movi	r2,32
    3410:	00c00044 	movi	r3,1
    3414:	00000106 	br	341c <__divsi3+0x24>
    3418:	10000d26 	beq	r2,zero,3450 <__divsi3+0x58>
    341c:	294b883a 	add	r5,r5,r5
    3420:	10bfffc4 	addi	r2,r2,-1
    3424:	18c7883a 	add	r3,r3,r3
    3428:	293ffb36 	bltu	r5,r4,3418 <__divsi3+0x20>
    342c:	0005883a 	mov	r2,zero
    3430:	18000726 	beq	r3,zero,3450 <__divsi3+0x58>
    3434:	0005883a 	mov	r2,zero
    3438:	31400236 	bltu	r6,r5,3444 <__divsi3+0x4c>
    343c:	314dc83a 	sub	r6,r6,r5
    3440:	10c4b03a 	or	r2,r2,r3
    3444:	1806d07a 	srli	r3,r3,1
    3448:	280ad07a 	srli	r5,r5,1
    344c:	183ffa1e 	bne	r3,zero,3438 <__divsi3+0x40>
    3450:	38000126 	beq	r7,zero,3458 <__divsi3+0x60>
    3454:	0085c83a 	sub	r2,zero,r2
    3458:	f800283a 	ret
    345c:	014bc83a 	sub	r5,zero,r5
    3460:	39c0005c 	xori	r7,r7,1
    3464:	003fe706 	br	3404 <__divsi3+0xc>
    3468:	0109c83a 	sub	r4,zero,r4
    346c:	01c00044 	movi	r7,1
    3470:	003fe306 	br	3400 <__divsi3+0x8>
    3474:	00c00044 	movi	r3,1
    3478:	003fee06 	br	3434 <__divsi3+0x3c>

0000347c <__modsi3>:
    347c:	20001716 	blt	r4,zero,34dc <__modsi3+0x60>
    3480:	000f883a 	mov	r7,zero
    3484:	2005883a 	mov	r2,r4
    3488:	28001216 	blt	r5,zero,34d4 <__modsi3+0x58>
    348c:	2900162e 	bgeu	r5,r4,34e8 <__modsi3+0x6c>
    3490:	01800804 	movi	r6,32
    3494:	00c00044 	movi	r3,1
    3498:	00000106 	br	34a0 <__modsi3+0x24>
    349c:	30000a26 	beq	r6,zero,34c8 <__modsi3+0x4c>
    34a0:	294b883a 	add	r5,r5,r5
    34a4:	31bfffc4 	addi	r6,r6,-1
    34a8:	18c7883a 	add	r3,r3,r3
    34ac:	293ffb36 	bltu	r5,r4,349c <__modsi3+0x20>
    34b0:	18000526 	beq	r3,zero,34c8 <__modsi3+0x4c>
    34b4:	1806d07a 	srli	r3,r3,1
    34b8:	11400136 	bltu	r2,r5,34c0 <__modsi3+0x44>
    34bc:	1145c83a 	sub	r2,r2,r5
    34c0:	280ad07a 	srli	r5,r5,1
    34c4:	183ffb1e 	bne	r3,zero,34b4 <__modsi3+0x38>
    34c8:	38000126 	beq	r7,zero,34d0 <__modsi3+0x54>
    34cc:	0085c83a 	sub	r2,zero,r2
    34d0:	f800283a 	ret
    34d4:	014bc83a 	sub	r5,zero,r5
    34d8:	003fec06 	br	348c <__modsi3+0x10>
    34dc:	0109c83a 	sub	r4,zero,r4
    34e0:	01c00044 	movi	r7,1
    34e4:	003fe706 	br	3484 <__modsi3+0x8>
    34e8:	00c00044 	movi	r3,1
    34ec:	003ff106 	br	34b4 <__modsi3+0x38>

000034f0 <__udivsi3>:
    34f0:	200d883a 	mov	r6,r4
    34f4:	2900152e 	bgeu	r5,r4,354c <__udivsi3+0x5c>
    34f8:	28001416 	blt	r5,zero,354c <__udivsi3+0x5c>
    34fc:	00800804 	movi	r2,32
    3500:	00c00044 	movi	r3,1
    3504:	00000206 	br	3510 <__udivsi3+0x20>
    3508:	10000e26 	beq	r2,zero,3544 <__udivsi3+0x54>
    350c:	28000516 	blt	r5,zero,3524 <__udivsi3+0x34>
    3510:	294b883a 	add	r5,r5,r5
    3514:	10bfffc4 	addi	r2,r2,-1
    3518:	18c7883a 	add	r3,r3,r3
    351c:	293ffa36 	bltu	r5,r4,3508 <__udivsi3+0x18>
    3520:	18000826 	beq	r3,zero,3544 <__udivsi3+0x54>
    3524:	0005883a 	mov	r2,zero
    3528:	31400236 	bltu	r6,r5,3534 <__udivsi3+0x44>
    352c:	314dc83a 	sub	r6,r6,r5
    3530:	10c4b03a 	or	r2,r2,r3
    3534:	1806d07a 	srli	r3,r3,1
    3538:	280ad07a 	srli	r5,r5,1
    353c:	183ffa1e 	bne	r3,zero,3528 <__udivsi3+0x38>
    3540:	f800283a 	ret
    3544:	0005883a 	mov	r2,zero
    3548:	f800283a 	ret
    354c:	00c00044 	movi	r3,1
    3550:	003ff406 	br	3524 <__udivsi3+0x34>

00003554 <__umodsi3>:
    3554:	2005883a 	mov	r2,r4
    3558:	2900122e 	bgeu	r5,r4,35a4 <__umodsi3+0x50>
    355c:	28001116 	blt	r5,zero,35a4 <__umodsi3+0x50>
    3560:	01800804 	movi	r6,32
    3564:	00c00044 	movi	r3,1
    3568:	00000206 	br	3574 <__umodsi3+0x20>
    356c:	30000c26 	beq	r6,zero,35a0 <__umodsi3+0x4c>
    3570:	28000516 	blt	r5,zero,3588 <__umodsi3+0x34>
    3574:	294b883a 	add	r5,r5,r5
    3578:	31bfffc4 	addi	r6,r6,-1
    357c:	18c7883a 	add	r3,r3,r3
    3580:	293ffa36 	bltu	r5,r4,356c <__umodsi3+0x18>
    3584:	18000626 	beq	r3,zero,35a0 <__umodsi3+0x4c>
    3588:	1806d07a 	srli	r3,r3,1
    358c:	11400136 	bltu	r2,r5,3594 <__umodsi3+0x40>
    3590:	1145c83a 	sub	r2,r2,r5
    3594:	280ad07a 	srli	r5,r5,1
    3598:	183ffb1e 	bne	r3,zero,3588 <__umodsi3+0x34>
    359c:	f800283a 	ret
    35a0:	f800283a 	ret
    35a4:	00c00044 	movi	r3,1
    35a8:	003ff706 	br	3588 <__umodsi3+0x34>

000035ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    35ac:	defffe04 	addi	sp,sp,-8
    35b0:	dfc00115 	stw	ra,4(sp)
    35b4:	df000015 	stw	fp,0(sp)
    35b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    35bc:	00800034 	movhi	r2,0
    35c0:	109f5704 	addi	r2,r2,32092
    35c4:	10800017 	ldw	r2,0(r2)
    35c8:	10000526 	beq	r2,zero,35e0 <alt_get_errno+0x34>
    35cc:	00800034 	movhi	r2,0
    35d0:	109f5704 	addi	r2,r2,32092
    35d4:	10800017 	ldw	r2,0(r2)
    35d8:	103ee83a 	callr	r2
    35dc:	00000206 	br	35e8 <alt_get_errno+0x3c>
    35e0:	00800074 	movhi	r2,1
    35e4:	10a60504 	addi	r2,r2,-26604
}
    35e8:	e037883a 	mov	sp,fp
    35ec:	dfc00117 	ldw	ra,4(sp)
    35f0:	df000017 	ldw	fp,0(sp)
    35f4:	dec00204 	addi	sp,sp,8
    35f8:	f800283a 	ret

000035fc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    35fc:	defffb04 	addi	sp,sp,-20
    3600:	dfc00415 	stw	ra,16(sp)
    3604:	df000315 	stw	fp,12(sp)
    3608:	df000304 	addi	fp,sp,12
    360c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    3610:	e0bfff17 	ldw	r2,-4(fp)
    3614:	10000616 	blt	r2,zero,3630 <close+0x34>
    3618:	e0bfff17 	ldw	r2,-4(fp)
    361c:	10c00324 	muli	r3,r2,12
    3620:	00800034 	movhi	r2,0
    3624:	109acb04 	addi	r2,r2,27436
    3628:	1885883a 	add	r2,r3,r2
    362c:	00000106 	br	3634 <close+0x38>
    3630:	0005883a 	mov	r2,zero
    3634:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    3638:	e0bffd17 	ldw	r2,-12(fp)
    363c:	10001926 	beq	r2,zero,36a4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    3640:	e0bffd17 	ldw	r2,-12(fp)
    3644:	10800017 	ldw	r2,0(r2)
    3648:	10800417 	ldw	r2,16(r2)
    364c:	10000626 	beq	r2,zero,3668 <close+0x6c>
    3650:	e0bffd17 	ldw	r2,-12(fp)
    3654:	10800017 	ldw	r2,0(r2)
    3658:	10800417 	ldw	r2,16(r2)
    365c:	e13ffd17 	ldw	r4,-12(fp)
    3660:	103ee83a 	callr	r2
    3664:	00000106 	br	366c <close+0x70>
    3668:	0005883a 	mov	r2,zero
    366c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    3670:	e13fff17 	ldw	r4,-4(fp)
    3674:	0003d0c0 	call	3d0c <alt_release_fd>
    if (rval < 0)
    3678:	e0bffe17 	ldw	r2,-8(fp)
    367c:	1000070e 	bge	r2,zero,369c <close+0xa0>
    {
      ALT_ERRNO = -rval;
    3680:	00035ac0 	call	35ac <alt_get_errno>
    3684:	1007883a 	mov	r3,r2
    3688:	e0bffe17 	ldw	r2,-8(fp)
    368c:	0085c83a 	sub	r2,zero,r2
    3690:	18800015 	stw	r2,0(r3)
      return -1;
    3694:	00bfffc4 	movi	r2,-1
    3698:	00000706 	br	36b8 <close+0xbc>
    }
    return 0;
    369c:	0005883a 	mov	r2,zero
    36a0:	00000506 	br	36b8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    36a4:	00035ac0 	call	35ac <alt_get_errno>
    36a8:	1007883a 	mov	r3,r2
    36ac:	00801444 	movi	r2,81
    36b0:	18800015 	stw	r2,0(r3)
    return -1;
    36b4:	00bfffc4 	movi	r2,-1
  }
}
    36b8:	e037883a 	mov	sp,fp
    36bc:	dfc00117 	ldw	ra,4(sp)
    36c0:	df000017 	ldw	fp,0(sp)
    36c4:	dec00204 	addi	sp,sp,8
    36c8:	f800283a 	ret

000036cc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    36cc:	defffc04 	addi	sp,sp,-16
    36d0:	df000315 	stw	fp,12(sp)
    36d4:	df000304 	addi	fp,sp,12
    36d8:	e13ffd15 	stw	r4,-12(fp)
    36dc:	e17ffe15 	stw	r5,-8(fp)
    36e0:	e1bfff15 	stw	r6,-4(fp)
  return len;
    36e4:	e0bfff17 	ldw	r2,-4(fp)
}
    36e8:	e037883a 	mov	sp,fp
    36ec:	df000017 	ldw	fp,0(sp)
    36f0:	dec00104 	addi	sp,sp,4
    36f4:	f800283a 	ret

000036f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    36f8:	defffe04 	addi	sp,sp,-8
    36fc:	dfc00115 	stw	ra,4(sp)
    3700:	df000015 	stw	fp,0(sp)
    3704:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3708:	00800034 	movhi	r2,0
    370c:	109f5704 	addi	r2,r2,32092
    3710:	10800017 	ldw	r2,0(r2)
    3714:	10000526 	beq	r2,zero,372c <alt_get_errno+0x34>
    3718:	00800034 	movhi	r2,0
    371c:	109f5704 	addi	r2,r2,32092
    3720:	10800017 	ldw	r2,0(r2)
    3724:	103ee83a 	callr	r2
    3728:	00000206 	br	3734 <alt_get_errno+0x3c>
    372c:	00800074 	movhi	r2,1
    3730:	10a60504 	addi	r2,r2,-26604
}
    3734:	e037883a 	mov	sp,fp
    3738:	dfc00117 	ldw	ra,4(sp)
    373c:	df000017 	ldw	fp,0(sp)
    3740:	dec00204 	addi	sp,sp,8
    3744:	f800283a 	ret

00003748 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    3748:	defffb04 	addi	sp,sp,-20
    374c:	dfc00415 	stw	ra,16(sp)
    3750:	df000315 	stw	fp,12(sp)
    3754:	df000304 	addi	fp,sp,12
    3758:	e13ffe15 	stw	r4,-8(fp)
    375c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3760:	e0bffe17 	ldw	r2,-8(fp)
    3764:	10000616 	blt	r2,zero,3780 <fstat+0x38>
    3768:	e0bffe17 	ldw	r2,-8(fp)
    376c:	10c00324 	muli	r3,r2,12
    3770:	00800034 	movhi	r2,0
    3774:	109acb04 	addi	r2,r2,27436
    3778:	1885883a 	add	r2,r3,r2
    377c:	00000106 	br	3784 <fstat+0x3c>
    3780:	0005883a 	mov	r2,zero
    3784:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    3788:	e0bffd17 	ldw	r2,-12(fp)
    378c:	10001026 	beq	r2,zero,37d0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    3790:	e0bffd17 	ldw	r2,-12(fp)
    3794:	10800017 	ldw	r2,0(r2)
    3798:	10800817 	ldw	r2,32(r2)
    379c:	10000726 	beq	r2,zero,37bc <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    37a0:	e0bffd17 	ldw	r2,-12(fp)
    37a4:	10800017 	ldw	r2,0(r2)
    37a8:	10800817 	ldw	r2,32(r2)
    37ac:	e17fff17 	ldw	r5,-4(fp)
    37b0:	e13ffd17 	ldw	r4,-12(fp)
    37b4:	103ee83a 	callr	r2
    37b8:	00000a06 	br	37e4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    37bc:	e0bfff17 	ldw	r2,-4(fp)
    37c0:	00c80004 	movi	r3,8192
    37c4:	10c00115 	stw	r3,4(r2)
      return 0;
    37c8:	0005883a 	mov	r2,zero
    37cc:	00000506 	br	37e4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    37d0:	00036f80 	call	36f8 <alt_get_errno>
    37d4:	1007883a 	mov	r3,r2
    37d8:	00801444 	movi	r2,81
    37dc:	18800015 	stw	r2,0(r3)
    return -1;
    37e0:	00bfffc4 	movi	r2,-1
  }
}
    37e4:	e037883a 	mov	sp,fp
    37e8:	dfc00117 	ldw	ra,4(sp)
    37ec:	df000017 	ldw	fp,0(sp)
    37f0:	dec00204 	addi	sp,sp,8
    37f4:	f800283a 	ret

000037f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    37f8:	defffe04 	addi	sp,sp,-8
    37fc:	dfc00115 	stw	ra,4(sp)
    3800:	df000015 	stw	fp,0(sp)
    3804:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3808:	00800034 	movhi	r2,0
    380c:	109f5704 	addi	r2,r2,32092
    3810:	10800017 	ldw	r2,0(r2)
    3814:	10000526 	beq	r2,zero,382c <alt_get_errno+0x34>
    3818:	00800034 	movhi	r2,0
    381c:	109f5704 	addi	r2,r2,32092
    3820:	10800017 	ldw	r2,0(r2)
    3824:	103ee83a 	callr	r2
    3828:	00000206 	br	3834 <alt_get_errno+0x3c>
    382c:	00800074 	movhi	r2,1
    3830:	10a60504 	addi	r2,r2,-26604
}
    3834:	e037883a 	mov	sp,fp
    3838:	dfc00117 	ldw	ra,4(sp)
    383c:	df000017 	ldw	fp,0(sp)
    3840:	dec00204 	addi	sp,sp,8
    3844:	f800283a 	ret

00003848 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    3848:	deffed04 	addi	sp,sp,-76
    384c:	dfc01215 	stw	ra,72(sp)
    3850:	df001115 	stw	fp,68(sp)
    3854:	df001104 	addi	fp,sp,68
    3858:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    385c:	e0bfff17 	ldw	r2,-4(fp)
    3860:	10000616 	blt	r2,zero,387c <isatty+0x34>
    3864:	e0bfff17 	ldw	r2,-4(fp)
    3868:	10c00324 	muli	r3,r2,12
    386c:	00800034 	movhi	r2,0
    3870:	109acb04 	addi	r2,r2,27436
    3874:	1885883a 	add	r2,r3,r2
    3878:	00000106 	br	3880 <isatty+0x38>
    387c:	0005883a 	mov	r2,zero
    3880:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    3884:	e0bfef17 	ldw	r2,-68(fp)
    3888:	10000e26 	beq	r2,zero,38c4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    388c:	e0bfef17 	ldw	r2,-68(fp)
    3890:	10800017 	ldw	r2,0(r2)
    3894:	10800817 	ldw	r2,32(r2)
    3898:	1000021e 	bne	r2,zero,38a4 <isatty+0x5c>
    {
      return 1;
    389c:	00800044 	movi	r2,1
    38a0:	00000d06 	br	38d8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    38a4:	e0bff004 	addi	r2,fp,-64
    38a8:	100b883a 	mov	r5,r2
    38ac:	e13fff17 	ldw	r4,-4(fp)
    38b0:	00037480 	call	3748 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    38b4:	e0bff117 	ldw	r2,-60(fp)
    38b8:	10880020 	cmpeqi	r2,r2,8192
    38bc:	10803fcc 	andi	r2,r2,255
    38c0:	00000506 	br	38d8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    38c4:	00037f80 	call	37f8 <alt_get_errno>
    38c8:	1007883a 	mov	r3,r2
    38cc:	00801444 	movi	r2,81
    38d0:	18800015 	stw	r2,0(r3)
    return 0;
    38d4:	0005883a 	mov	r2,zero
  }
}
    38d8:	e037883a 	mov	sp,fp
    38dc:	dfc00117 	ldw	ra,4(sp)
    38e0:	df000017 	ldw	fp,0(sp)
    38e4:	dec00204 	addi	sp,sp,8
    38e8:	f800283a 	ret

000038ec <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    38ec:	defffc04 	addi	sp,sp,-16
    38f0:	df000315 	stw	fp,12(sp)
    38f4:	df000304 	addi	fp,sp,12
    38f8:	e13ffd15 	stw	r4,-12(fp)
    38fc:	e17ffe15 	stw	r5,-8(fp)
    3900:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    3904:	e0fffe17 	ldw	r3,-8(fp)
    3908:	e0bffd17 	ldw	r2,-12(fp)
    390c:	18800c26 	beq	r3,r2,3940 <alt_load_section+0x54>
  {
    while( to != end )
    3910:	00000806 	br	3934 <alt_load_section+0x48>
    {
      *to++ = *from++;
    3914:	e0bffe17 	ldw	r2,-8(fp)
    3918:	10c00104 	addi	r3,r2,4
    391c:	e0fffe15 	stw	r3,-8(fp)
    3920:	e0fffd17 	ldw	r3,-12(fp)
    3924:	19000104 	addi	r4,r3,4
    3928:	e13ffd15 	stw	r4,-12(fp)
    392c:	18c00017 	ldw	r3,0(r3)
    3930:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    3934:	e0fffe17 	ldw	r3,-8(fp)
    3938:	e0bfff17 	ldw	r2,-4(fp)
    393c:	18bff51e 	bne	r3,r2,3914 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    3940:	0001883a 	nop
    3944:	e037883a 	mov	sp,fp
    3948:	df000017 	ldw	fp,0(sp)
    394c:	dec00104 	addi	sp,sp,4
    3950:	f800283a 	ret

00003954 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    3954:	defffe04 	addi	sp,sp,-8
    3958:	dfc00115 	stw	ra,4(sp)
    395c:	df000015 	stw	fp,0(sp)
    3960:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    3964:	01800034 	movhi	r6,0
    3968:	319f5c04 	addi	r6,r6,32112
    396c:	01400034 	movhi	r5,0
    3970:	2958b604 	addi	r5,r5,25304
    3974:	01000034 	movhi	r4,0
    3978:	211f5c04 	addi	r4,r4,32112
    397c:	00038ec0 	call	38ec <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    3980:	01800034 	movhi	r6,0
    3984:	31809204 	addi	r6,r6,584
    3988:	01400034 	movhi	r5,0
    398c:	29400804 	addi	r5,r5,32
    3990:	01000034 	movhi	r4,0
    3994:	21000804 	addi	r4,r4,32
    3998:	00038ec0 	call	38ec <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    399c:	01800034 	movhi	r6,0
    39a0:	3198b604 	addi	r6,r6,25304
    39a4:	01400034 	movhi	r5,0
    39a8:	2958a204 	addi	r5,r5,25224
    39ac:	01000034 	movhi	r4,0
    39b0:	2118a204 	addi	r4,r4,25224
    39b4:	00038ec0 	call	38ec <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    39b8:	00052140 	call	5214 <alt_dcache_flush_all>
  alt_icache_flush_all();
    39bc:	00054a00 	call	54a0 <alt_icache_flush_all>
}
    39c0:	0001883a 	nop
    39c4:	e037883a 	mov	sp,fp
    39c8:	dfc00117 	ldw	ra,4(sp)
    39cc:	df000017 	ldw	fp,0(sp)
    39d0:	dec00204 	addi	sp,sp,8
    39d4:	f800283a 	ret

000039d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    39d8:	defffe04 	addi	sp,sp,-8
    39dc:	dfc00115 	stw	ra,4(sp)
    39e0:	df000015 	stw	fp,0(sp)
    39e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    39e8:	00800034 	movhi	r2,0
    39ec:	109f5704 	addi	r2,r2,32092
    39f0:	10800017 	ldw	r2,0(r2)
    39f4:	10000526 	beq	r2,zero,3a0c <alt_get_errno+0x34>
    39f8:	00800034 	movhi	r2,0
    39fc:	109f5704 	addi	r2,r2,32092
    3a00:	10800017 	ldw	r2,0(r2)
    3a04:	103ee83a 	callr	r2
    3a08:	00000206 	br	3a14 <alt_get_errno+0x3c>
    3a0c:	00800074 	movhi	r2,1
    3a10:	10a60504 	addi	r2,r2,-26604
}
    3a14:	e037883a 	mov	sp,fp
    3a18:	dfc00117 	ldw	ra,4(sp)
    3a1c:	df000017 	ldw	fp,0(sp)
    3a20:	dec00204 	addi	sp,sp,8
    3a24:	f800283a 	ret

00003a28 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    3a28:	defff904 	addi	sp,sp,-28
    3a2c:	dfc00615 	stw	ra,24(sp)
    3a30:	df000515 	stw	fp,20(sp)
    3a34:	df000504 	addi	fp,sp,20
    3a38:	e13ffd15 	stw	r4,-12(fp)
    3a3c:	e17ffe15 	stw	r5,-8(fp)
    3a40:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    3a44:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3a48:	e0bffd17 	ldw	r2,-12(fp)
    3a4c:	10000616 	blt	r2,zero,3a68 <lseek+0x40>
    3a50:	e0bffd17 	ldw	r2,-12(fp)
    3a54:	10c00324 	muli	r3,r2,12
    3a58:	00800034 	movhi	r2,0
    3a5c:	109acb04 	addi	r2,r2,27436
    3a60:	1885883a 	add	r2,r3,r2
    3a64:	00000106 	br	3a6c <lseek+0x44>
    3a68:	0005883a 	mov	r2,zero
    3a6c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    3a70:	e0bffc17 	ldw	r2,-16(fp)
    3a74:	10001026 	beq	r2,zero,3ab8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    3a78:	e0bffc17 	ldw	r2,-16(fp)
    3a7c:	10800017 	ldw	r2,0(r2)
    3a80:	10800717 	ldw	r2,28(r2)
    3a84:	10000926 	beq	r2,zero,3aac <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    3a88:	e0bffc17 	ldw	r2,-16(fp)
    3a8c:	10800017 	ldw	r2,0(r2)
    3a90:	10800717 	ldw	r2,28(r2)
    3a94:	e1bfff17 	ldw	r6,-4(fp)
    3a98:	e17ffe17 	ldw	r5,-8(fp)
    3a9c:	e13ffc17 	ldw	r4,-16(fp)
    3aa0:	103ee83a 	callr	r2
    3aa4:	e0bffb15 	stw	r2,-20(fp)
    3aa8:	00000506 	br	3ac0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    3aac:	00bfde84 	movi	r2,-134
    3ab0:	e0bffb15 	stw	r2,-20(fp)
    3ab4:	00000206 	br	3ac0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    3ab8:	00bfebc4 	movi	r2,-81
    3abc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    3ac0:	e0bffb17 	ldw	r2,-20(fp)
    3ac4:	1000070e 	bge	r2,zero,3ae4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    3ac8:	00039d80 	call	39d8 <alt_get_errno>
    3acc:	1007883a 	mov	r3,r2
    3ad0:	e0bffb17 	ldw	r2,-20(fp)
    3ad4:	0085c83a 	sub	r2,zero,r2
    3ad8:	18800015 	stw	r2,0(r3)
    rc = -1;
    3adc:	00bfffc4 	movi	r2,-1
    3ae0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    3ae4:	e0bffb17 	ldw	r2,-20(fp)
}
    3ae8:	e037883a 	mov	sp,fp
    3aec:	dfc00117 	ldw	ra,4(sp)
    3af0:	df000017 	ldw	fp,0(sp)
    3af4:	dec00204 	addi	sp,sp,8
    3af8:	f800283a 	ret

00003afc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    3afc:	defffd04 	addi	sp,sp,-12
    3b00:	dfc00215 	stw	ra,8(sp)
    3b04:	df000115 	stw	fp,4(sp)
    3b08:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    3b0c:	0009883a 	mov	r4,zero
    3b10:	0003fd00 	call	3fd0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    3b14:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    3b18:	00040080 	call	4008 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    3b1c:	01800034 	movhi	r6,0
    3b20:	3198ac04 	addi	r6,r6,25264
    3b24:	01400034 	movhi	r5,0
    3b28:	2958ac04 	addi	r5,r5,25264
    3b2c:	01000034 	movhi	r4,0
    3b30:	2118ac04 	addi	r4,r4,25264
    3b34:	00055980 	call	5598 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    3b38:	00053500 	call	5350 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    3b3c:	01000034 	movhi	r4,0
    3b40:	2114ec04 	addi	r4,r4,21424
    3b44:	0005ef40 	call	5ef4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    3b48:	d0a6b817 	ldw	r2,-25888(gp)
    3b4c:	d0e6b917 	ldw	r3,-25884(gp)
    3b50:	d126ba17 	ldw	r4,-25880(gp)
    3b54:	200d883a 	mov	r6,r4
    3b58:	180b883a 	mov	r5,r3
    3b5c:	1009883a 	mov	r4,r2
    3b60:	00004340 	call	434 <main>
    3b64:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    3b68:	01000044 	movi	r4,1
    3b6c:	00035fc0 	call	35fc <close>
  exit (result);
    3b70:	e13fff17 	ldw	r4,-4(fp)
    3b74:	0005f080 	call	5f08 <exit>

00003b78 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    3b78:	defffe04 	addi	sp,sp,-8
    3b7c:	df000115 	stw	fp,4(sp)
    3b80:	df000104 	addi	fp,sp,4
    3b84:	e13fff15 	stw	r4,-4(fp)
}
    3b88:	0001883a 	nop
    3b8c:	e037883a 	mov	sp,fp
    3b90:	df000017 	ldw	fp,0(sp)
    3b94:	dec00104 	addi	sp,sp,4
    3b98:	f800283a 	ret

00003b9c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    3b9c:	defffe04 	addi	sp,sp,-8
    3ba0:	df000115 	stw	fp,4(sp)
    3ba4:	df000104 	addi	fp,sp,4
    3ba8:	e13fff15 	stw	r4,-4(fp)
}
    3bac:	0001883a 	nop
    3bb0:	e037883a 	mov	sp,fp
    3bb4:	df000017 	ldw	fp,0(sp)
    3bb8:	dec00104 	addi	sp,sp,4
    3bbc:	f800283a 	ret

00003bc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3bc0:	defffe04 	addi	sp,sp,-8
    3bc4:	dfc00115 	stw	ra,4(sp)
    3bc8:	df000015 	stw	fp,0(sp)
    3bcc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3bd0:	00800034 	movhi	r2,0
    3bd4:	109f5704 	addi	r2,r2,32092
    3bd8:	10800017 	ldw	r2,0(r2)
    3bdc:	10000526 	beq	r2,zero,3bf4 <alt_get_errno+0x34>
    3be0:	00800034 	movhi	r2,0
    3be4:	109f5704 	addi	r2,r2,32092
    3be8:	10800017 	ldw	r2,0(r2)
    3bec:	103ee83a 	callr	r2
    3bf0:	00000206 	br	3bfc <alt_get_errno+0x3c>
    3bf4:	00800074 	movhi	r2,1
    3bf8:	10a60504 	addi	r2,r2,-26604
}
    3bfc:	e037883a 	mov	sp,fp
    3c00:	dfc00117 	ldw	ra,4(sp)
    3c04:	df000017 	ldw	fp,0(sp)
    3c08:	dec00204 	addi	sp,sp,8
    3c0c:	f800283a 	ret

00003c10 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    3c10:	defff904 	addi	sp,sp,-28
    3c14:	dfc00615 	stw	ra,24(sp)
    3c18:	df000515 	stw	fp,20(sp)
    3c1c:	df000504 	addi	fp,sp,20
    3c20:	e13ffd15 	stw	r4,-12(fp)
    3c24:	e17ffe15 	stw	r5,-8(fp)
    3c28:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3c2c:	e0bffd17 	ldw	r2,-12(fp)
    3c30:	10000616 	blt	r2,zero,3c4c <read+0x3c>
    3c34:	e0bffd17 	ldw	r2,-12(fp)
    3c38:	10c00324 	muli	r3,r2,12
    3c3c:	00800034 	movhi	r2,0
    3c40:	109acb04 	addi	r2,r2,27436
    3c44:	1885883a 	add	r2,r3,r2
    3c48:	00000106 	br	3c50 <read+0x40>
    3c4c:	0005883a 	mov	r2,zero
    3c50:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    3c54:	e0bffb17 	ldw	r2,-20(fp)
    3c58:	10002226 	beq	r2,zero,3ce4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    3c5c:	e0bffb17 	ldw	r2,-20(fp)
    3c60:	10800217 	ldw	r2,8(r2)
    3c64:	108000cc 	andi	r2,r2,3
    3c68:	10800060 	cmpeqi	r2,r2,1
    3c6c:	1000181e 	bne	r2,zero,3cd0 <read+0xc0>
        (fd->dev->read))
    3c70:	e0bffb17 	ldw	r2,-20(fp)
    3c74:	10800017 	ldw	r2,0(r2)
    3c78:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    3c7c:	10001426 	beq	r2,zero,3cd0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    3c80:	e0bffb17 	ldw	r2,-20(fp)
    3c84:	10800017 	ldw	r2,0(r2)
    3c88:	10800517 	ldw	r2,20(r2)
    3c8c:	e0ffff17 	ldw	r3,-4(fp)
    3c90:	180d883a 	mov	r6,r3
    3c94:	e17ffe17 	ldw	r5,-8(fp)
    3c98:	e13ffb17 	ldw	r4,-20(fp)
    3c9c:	103ee83a 	callr	r2
    3ca0:	e0bffc15 	stw	r2,-16(fp)
    3ca4:	e0bffc17 	ldw	r2,-16(fp)
    3ca8:	1000070e 	bge	r2,zero,3cc8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    3cac:	0003bc00 	call	3bc0 <alt_get_errno>
    3cb0:	1007883a 	mov	r3,r2
    3cb4:	e0bffc17 	ldw	r2,-16(fp)
    3cb8:	0085c83a 	sub	r2,zero,r2
    3cbc:	18800015 	stw	r2,0(r3)
          return -1;
    3cc0:	00bfffc4 	movi	r2,-1
    3cc4:	00000c06 	br	3cf8 <read+0xe8>
        }
        return rval;
    3cc8:	e0bffc17 	ldw	r2,-16(fp)
    3ccc:	00000a06 	br	3cf8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    3cd0:	0003bc00 	call	3bc0 <alt_get_errno>
    3cd4:	1007883a 	mov	r3,r2
    3cd8:	00800344 	movi	r2,13
    3cdc:	18800015 	stw	r2,0(r3)
    3ce0:	00000406 	br	3cf4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    3ce4:	0003bc00 	call	3bc0 <alt_get_errno>
    3ce8:	1007883a 	mov	r3,r2
    3cec:	00801444 	movi	r2,81
    3cf0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    3cf4:	00bfffc4 	movi	r2,-1
}
    3cf8:	e037883a 	mov	sp,fp
    3cfc:	dfc00117 	ldw	ra,4(sp)
    3d00:	df000017 	ldw	fp,0(sp)
    3d04:	dec00204 	addi	sp,sp,8
    3d08:	f800283a 	ret

00003d0c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    3d0c:	defffe04 	addi	sp,sp,-8
    3d10:	df000115 	stw	fp,4(sp)
    3d14:	df000104 	addi	fp,sp,4
    3d18:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    3d1c:	e0bfff17 	ldw	r2,-4(fp)
    3d20:	108000d0 	cmplti	r2,r2,3
    3d24:	10000d1e 	bne	r2,zero,3d5c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    3d28:	00800034 	movhi	r2,0
    3d2c:	109acb04 	addi	r2,r2,27436
    3d30:	e0ffff17 	ldw	r3,-4(fp)
    3d34:	18c00324 	muli	r3,r3,12
    3d38:	10c5883a 	add	r2,r2,r3
    3d3c:	10800204 	addi	r2,r2,8
    3d40:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    3d44:	00800034 	movhi	r2,0
    3d48:	109acb04 	addi	r2,r2,27436
    3d4c:	e0ffff17 	ldw	r3,-4(fp)
    3d50:	18c00324 	muli	r3,r3,12
    3d54:	10c5883a 	add	r2,r2,r3
    3d58:	10000015 	stw	zero,0(r2)
  }
}
    3d5c:	0001883a 	nop
    3d60:	e037883a 	mov	sp,fp
    3d64:	df000017 	ldw	fp,0(sp)
    3d68:	dec00104 	addi	sp,sp,4
    3d6c:	f800283a 	ret

00003d70 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    3d70:	defff904 	addi	sp,sp,-28
    3d74:	df000615 	stw	fp,24(sp)
    3d78:	df000604 	addi	fp,sp,24
    3d7c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3d80:	0005303a 	rdctl	r2,status
    3d84:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3d88:	e0fffe17 	ldw	r3,-8(fp)
    3d8c:	00bfff84 	movi	r2,-2
    3d90:	1884703a 	and	r2,r3,r2
    3d94:	1001703a 	wrctl	status,r2
  
  return context;
    3d98:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    3d9c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    3da0:	d0a00a17 	ldw	r2,-32728(gp)
    3da4:	10c000c4 	addi	r3,r2,3
    3da8:	00bfff04 	movi	r2,-4
    3dac:	1884703a 	and	r2,r3,r2
    3db0:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    3db4:	d0e00a17 	ldw	r3,-32728(gp)
    3db8:	e0bfff17 	ldw	r2,-4(fp)
    3dbc:	1887883a 	add	r3,r3,r2
    3dc0:	00810034 	movhi	r2,1024
    3dc4:	10800004 	addi	r2,r2,0
    3dc8:	10c0062e 	bgeu	r2,r3,3de4 <sbrk+0x74>
    3dcc:	e0bffb17 	ldw	r2,-20(fp)
    3dd0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3dd4:	e0bffa17 	ldw	r2,-24(fp)
    3dd8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    3ddc:	00bfffc4 	movi	r2,-1
    3de0:	00000b06 	br	3e10 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    3de4:	d0a00a17 	ldw	r2,-32728(gp)
    3de8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    3dec:	d0e00a17 	ldw	r3,-32728(gp)
    3df0:	e0bfff17 	ldw	r2,-4(fp)
    3df4:	1885883a 	add	r2,r3,r2
    3df8:	d0a00a15 	stw	r2,-32728(gp)
    3dfc:	e0bffb17 	ldw	r2,-20(fp)
    3e00:	e0bffc15 	stw	r2,-16(fp)
    3e04:	e0bffc17 	ldw	r2,-16(fp)
    3e08:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    3e0c:	e0bffd17 	ldw	r2,-12(fp)
} 
    3e10:	e037883a 	mov	sp,fp
    3e14:	df000017 	ldw	fp,0(sp)
    3e18:	dec00104 	addi	sp,sp,4
    3e1c:	f800283a 	ret

00003e20 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    3e20:	defffd04 	addi	sp,sp,-12
    3e24:	dfc00215 	stw	ra,8(sp)
    3e28:	df000115 	stw	fp,4(sp)
    3e2c:	df000104 	addi	fp,sp,4
    3e30:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    3e34:	e13fff17 	ldw	r4,-4(fp)
    3e38:	00050bc0 	call	50bc <alt_busy_sleep>
}
    3e3c:	e037883a 	mov	sp,fp
    3e40:	dfc00117 	ldw	ra,4(sp)
    3e44:	df000017 	ldw	fp,0(sp)
    3e48:	dec00204 	addi	sp,sp,8
    3e4c:	f800283a 	ret

00003e50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3e50:	defffe04 	addi	sp,sp,-8
    3e54:	dfc00115 	stw	ra,4(sp)
    3e58:	df000015 	stw	fp,0(sp)
    3e5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3e60:	00800034 	movhi	r2,0
    3e64:	109f5704 	addi	r2,r2,32092
    3e68:	10800017 	ldw	r2,0(r2)
    3e6c:	10000526 	beq	r2,zero,3e84 <alt_get_errno+0x34>
    3e70:	00800034 	movhi	r2,0
    3e74:	109f5704 	addi	r2,r2,32092
    3e78:	10800017 	ldw	r2,0(r2)
    3e7c:	103ee83a 	callr	r2
    3e80:	00000206 	br	3e8c <alt_get_errno+0x3c>
    3e84:	00800074 	movhi	r2,1
    3e88:	10a60504 	addi	r2,r2,-26604
}
    3e8c:	e037883a 	mov	sp,fp
    3e90:	dfc00117 	ldw	ra,4(sp)
    3e94:	df000017 	ldw	fp,0(sp)
    3e98:	dec00204 	addi	sp,sp,8
    3e9c:	f800283a 	ret

00003ea0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    3ea0:	defff904 	addi	sp,sp,-28
    3ea4:	dfc00615 	stw	ra,24(sp)
    3ea8:	df000515 	stw	fp,20(sp)
    3eac:	df000504 	addi	fp,sp,20
    3eb0:	e13ffd15 	stw	r4,-12(fp)
    3eb4:	e17ffe15 	stw	r5,-8(fp)
    3eb8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3ebc:	e0bffd17 	ldw	r2,-12(fp)
    3ec0:	10000616 	blt	r2,zero,3edc <write+0x3c>
    3ec4:	e0bffd17 	ldw	r2,-12(fp)
    3ec8:	10c00324 	muli	r3,r2,12
    3ecc:	00800034 	movhi	r2,0
    3ed0:	109acb04 	addi	r2,r2,27436
    3ed4:	1885883a 	add	r2,r3,r2
    3ed8:	00000106 	br	3ee0 <write+0x40>
    3edc:	0005883a 	mov	r2,zero
    3ee0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    3ee4:	e0bffb17 	ldw	r2,-20(fp)
    3ee8:	10002126 	beq	r2,zero,3f70 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    3eec:	e0bffb17 	ldw	r2,-20(fp)
    3ef0:	10800217 	ldw	r2,8(r2)
    3ef4:	108000cc 	andi	r2,r2,3
    3ef8:	10001826 	beq	r2,zero,3f5c <write+0xbc>
    3efc:	e0bffb17 	ldw	r2,-20(fp)
    3f00:	10800017 	ldw	r2,0(r2)
    3f04:	10800617 	ldw	r2,24(r2)
    3f08:	10001426 	beq	r2,zero,3f5c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    3f0c:	e0bffb17 	ldw	r2,-20(fp)
    3f10:	10800017 	ldw	r2,0(r2)
    3f14:	10800617 	ldw	r2,24(r2)
    3f18:	e0ffff17 	ldw	r3,-4(fp)
    3f1c:	180d883a 	mov	r6,r3
    3f20:	e17ffe17 	ldw	r5,-8(fp)
    3f24:	e13ffb17 	ldw	r4,-20(fp)
    3f28:	103ee83a 	callr	r2
    3f2c:	e0bffc15 	stw	r2,-16(fp)
    3f30:	e0bffc17 	ldw	r2,-16(fp)
    3f34:	1000070e 	bge	r2,zero,3f54 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    3f38:	0003e500 	call	3e50 <alt_get_errno>
    3f3c:	1007883a 	mov	r3,r2
    3f40:	e0bffc17 	ldw	r2,-16(fp)
    3f44:	0085c83a 	sub	r2,zero,r2
    3f48:	18800015 	stw	r2,0(r3)
        return -1;
    3f4c:	00bfffc4 	movi	r2,-1
    3f50:	00000c06 	br	3f84 <write+0xe4>
      }
      return rval;
    3f54:	e0bffc17 	ldw	r2,-16(fp)
    3f58:	00000a06 	br	3f84 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    3f5c:	0003e500 	call	3e50 <alt_get_errno>
    3f60:	1007883a 	mov	r3,r2
    3f64:	00800344 	movi	r2,13
    3f68:	18800015 	stw	r2,0(r3)
    3f6c:	00000406 	br	3f80 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    3f70:	0003e500 	call	3e50 <alt_get_errno>
    3f74:	1007883a 	mov	r3,r2
    3f78:	00801444 	movi	r2,81
    3f7c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    3f80:	00bfffc4 	movi	r2,-1
}
    3f84:	e037883a 	mov	sp,fp
    3f88:	dfc00117 	ldw	ra,4(sp)
    3f8c:	df000017 	ldw	fp,0(sp)
    3f90:	dec00204 	addi	sp,sp,8
    3f94:	f800283a 	ret

00003f98 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    3f98:	defffd04 	addi	sp,sp,-12
    3f9c:	dfc00215 	stw	ra,8(sp)
    3fa0:	df000115 	stw	fp,4(sp)
    3fa4:	df000104 	addi	fp,sp,4
    3fa8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    3fac:	01400034 	movhi	r5,0
    3fb0:	295f5404 	addi	r5,r5,32080
    3fb4:	e13fff17 	ldw	r4,-4(fp)
    3fb8:	00052ac0 	call	52ac <alt_dev_llist_insert>
}
    3fbc:	e037883a 	mov	sp,fp
    3fc0:	dfc00117 	ldw	ra,4(sp)
    3fc4:	df000017 	ldw	fp,0(sp)
    3fc8:	dec00204 	addi	sp,sp,8
    3fcc:	f800283a 	ret

00003fd0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    3fd0:	defffd04 	addi	sp,sp,-12
    3fd4:	dfc00215 	stw	ra,8(sp)
    3fd8:	df000115 	stw	fp,4(sp)
    3fdc:	df000104 	addi	fp,sp,4
    3fe0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOSII_CORE, niosII_core);
    3fe4:	0005bdc0 	call	5bdc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    3fe8:	00800044 	movi	r2,1
    3fec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    3ff0:	0001883a 	nop
    3ff4:	e037883a 	mov	sp,fp
    3ff8:	dfc00117 	ldw	ra,4(sp)
    3ffc:	df000017 	ldw	fp,0(sp)
    4000:	dec00204 	addi	sp,sp,8
    4004:	f800283a 	ret

00004008 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    4008:	defffe04 	addi	sp,sp,-8
    400c:	dfc00115 	stw	ra,4(sp)
    4010:	df000015 	stw	fp,0(sp)
    4014:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_TIMER, Sys_Timer);
    4018:	01c0fa04 	movi	r7,1000
    401c:	01800044 	movi	r6,1
    4020:	000b883a 	mov	r5,zero
    4024:	01010134 	movhi	r4,1028
    4028:	21040004 	addi	r4,r4,4096
    402c:	0004b640 	call	4b64 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, JTAG);
    4030:	000d883a 	mov	r6,zero
    4034:	000b883a 	mov	r5,zero
    4038:	01000034 	movhi	r4,0
    403c:	211b3504 	addi	r4,r4,27860
    4040:	00041dc0 	call	41dc <altera_avalon_jtag_uart_init>
    4044:	01000034 	movhi	r4,0
    4048:	211b2b04 	addi	r4,r4,27820
    404c:	0003f980 	call	3f98 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSTEMID, SystemID);
    4050:	0001883a 	nop
    ALTERA_UP_AVALON_RS232_INIT ( UART_COM, UART_COM);
    4054:	01000034 	movhi	r4,0
    4058:	211f4304 	addi	r4,r4,32012
    405c:	0003f980 	call	3f98 <alt_dev_reg>
}
    4060:	0001883a 	nop
    4064:	e037883a 	mov	sp,fp
    4068:	dfc00117 	ldw	ra,4(sp)
    406c:	df000017 	ldw	fp,0(sp)
    4070:	dec00204 	addi	sp,sp,8
    4074:	f800283a 	ret

00004078 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    4078:	defffa04 	addi	sp,sp,-24
    407c:	dfc00515 	stw	ra,20(sp)
    4080:	df000415 	stw	fp,16(sp)
    4084:	df000404 	addi	fp,sp,16
    4088:	e13ffd15 	stw	r4,-12(fp)
    408c:	e17ffe15 	stw	r5,-8(fp)
    4090:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    4094:	e0bffd17 	ldw	r2,-12(fp)
    4098:	10800017 	ldw	r2,0(r2)
    409c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    40a0:	e0bffc17 	ldw	r2,-16(fp)
    40a4:	10c00a04 	addi	r3,r2,40
    40a8:	e0bffd17 	ldw	r2,-12(fp)
    40ac:	10800217 	ldw	r2,8(r2)
    40b0:	100f883a 	mov	r7,r2
    40b4:	e1bfff17 	ldw	r6,-4(fp)
    40b8:	e17ffe17 	ldw	r5,-8(fp)
    40bc:	1809883a 	mov	r4,r3
    40c0:	00046a80 	call	46a8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    40c4:	e037883a 	mov	sp,fp
    40c8:	dfc00117 	ldw	ra,4(sp)
    40cc:	df000017 	ldw	fp,0(sp)
    40d0:	dec00204 	addi	sp,sp,8
    40d4:	f800283a 	ret

000040d8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    40d8:	defffa04 	addi	sp,sp,-24
    40dc:	dfc00515 	stw	ra,20(sp)
    40e0:	df000415 	stw	fp,16(sp)
    40e4:	df000404 	addi	fp,sp,16
    40e8:	e13ffd15 	stw	r4,-12(fp)
    40ec:	e17ffe15 	stw	r5,-8(fp)
    40f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    40f4:	e0bffd17 	ldw	r2,-12(fp)
    40f8:	10800017 	ldw	r2,0(r2)
    40fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    4100:	e0bffc17 	ldw	r2,-16(fp)
    4104:	10c00a04 	addi	r3,r2,40
    4108:	e0bffd17 	ldw	r2,-12(fp)
    410c:	10800217 	ldw	r2,8(r2)
    4110:	100f883a 	mov	r7,r2
    4114:	e1bfff17 	ldw	r6,-4(fp)
    4118:	e17ffe17 	ldw	r5,-8(fp)
    411c:	1809883a 	mov	r4,r3
    4120:	00048c40 	call	48c4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    4124:	e037883a 	mov	sp,fp
    4128:	dfc00117 	ldw	ra,4(sp)
    412c:	df000017 	ldw	fp,0(sp)
    4130:	dec00204 	addi	sp,sp,8
    4134:	f800283a 	ret

00004138 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    4138:	defffc04 	addi	sp,sp,-16
    413c:	dfc00315 	stw	ra,12(sp)
    4140:	df000215 	stw	fp,8(sp)
    4144:	df000204 	addi	fp,sp,8
    4148:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    414c:	e0bfff17 	ldw	r2,-4(fp)
    4150:	10800017 	ldw	r2,0(r2)
    4154:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    4158:	e0bffe17 	ldw	r2,-8(fp)
    415c:	10c00a04 	addi	r3,r2,40
    4160:	e0bfff17 	ldw	r2,-4(fp)
    4164:	10800217 	ldw	r2,8(r2)
    4168:	100b883a 	mov	r5,r2
    416c:	1809883a 	mov	r4,r3
    4170:	00045500 	call	4550 <altera_avalon_jtag_uart_close>
}
    4174:	e037883a 	mov	sp,fp
    4178:	dfc00117 	ldw	ra,4(sp)
    417c:	df000017 	ldw	fp,0(sp)
    4180:	dec00204 	addi	sp,sp,8
    4184:	f800283a 	ret

00004188 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    4188:	defffa04 	addi	sp,sp,-24
    418c:	dfc00515 	stw	ra,20(sp)
    4190:	df000415 	stw	fp,16(sp)
    4194:	df000404 	addi	fp,sp,16
    4198:	e13ffd15 	stw	r4,-12(fp)
    419c:	e17ffe15 	stw	r5,-8(fp)
    41a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    41a4:	e0bffd17 	ldw	r2,-12(fp)
    41a8:	10800017 	ldw	r2,0(r2)
    41ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    41b0:	e0bffc17 	ldw	r2,-16(fp)
    41b4:	10800a04 	addi	r2,r2,40
    41b8:	e1bfff17 	ldw	r6,-4(fp)
    41bc:	e17ffe17 	ldw	r5,-8(fp)
    41c0:	1009883a 	mov	r4,r2
    41c4:	00045b80 	call	45b8 <altera_avalon_jtag_uart_ioctl>
}
    41c8:	e037883a 	mov	sp,fp
    41cc:	dfc00117 	ldw	ra,4(sp)
    41d0:	df000017 	ldw	fp,0(sp)
    41d4:	dec00204 	addi	sp,sp,8
    41d8:	f800283a 	ret

000041dc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    41dc:	defffb04 	addi	sp,sp,-20
    41e0:	dfc00415 	stw	ra,16(sp)
    41e4:	df000315 	stw	fp,12(sp)
    41e8:	df000304 	addi	fp,sp,12
    41ec:	e13ffd15 	stw	r4,-12(fp)
    41f0:	e17ffe15 	stw	r5,-8(fp)
    41f4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    41f8:	e0bffd17 	ldw	r2,-12(fp)
    41fc:	00c00044 	movi	r3,1
    4200:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    4204:	e0bffd17 	ldw	r2,-12(fp)
    4208:	10800017 	ldw	r2,0(r2)
    420c:	10800104 	addi	r2,r2,4
    4210:	1007883a 	mov	r3,r2
    4214:	e0bffd17 	ldw	r2,-12(fp)
    4218:	10800817 	ldw	r2,32(r2)
    421c:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    4220:	e0bfff17 	ldw	r2,-4(fp)
    4224:	01800034 	movhi	r6,0
    4228:	3190a604 	addi	r6,r6,17048
    422c:	e17ffd17 	ldw	r5,-12(fp)
    4230:	1009883a 	mov	r4,r2
    4234:	00056140 	call	5614 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    4238:	e0bffd17 	ldw	r2,-12(fp)
    423c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    4240:	e0bffd17 	ldw	r2,-12(fp)
    4244:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    4248:	00800074 	movhi	r2,1
    424c:	10a60a04 	addi	r2,r2,-26584
    4250:	10800017 	ldw	r2,0(r2)
    4254:	e1fffd17 	ldw	r7,-12(fp)
    4258:	01800034 	movhi	r6,0
    425c:	31912a04 	addi	r6,r6,17576
    4260:	100b883a 	mov	r5,r2
    4264:	1809883a 	mov	r4,r3
    4268:	0004f7c0 	call	4f7c <alt_alarm_start>
    426c:	1000040e 	bge	r2,zero,4280 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    4270:	e0fffd17 	ldw	r3,-12(fp)
    4274:	00a00034 	movhi	r2,32768
    4278:	10bfffc4 	addi	r2,r2,-1
    427c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    4280:	0001883a 	nop
    4284:	e037883a 	mov	sp,fp
    4288:	dfc00117 	ldw	ra,4(sp)
    428c:	df000017 	ldw	fp,0(sp)
    4290:	dec00204 	addi	sp,sp,8
    4294:	f800283a 	ret

00004298 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    4298:	defff704 	addi	sp,sp,-36
    429c:	df000815 	stw	fp,32(sp)
    42a0:	df000804 	addi	fp,sp,32
    42a4:	e13ffe15 	stw	r4,-8(fp)
    42a8:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    42ac:	e0bffe17 	ldw	r2,-8(fp)
    42b0:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
    42b4:	e0bffa17 	ldw	r2,-24(fp)
    42b8:	10800017 	ldw	r2,0(r2)
    42bc:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    42c0:	e0bffb17 	ldw	r2,-20(fp)
    42c4:	10800104 	addi	r2,r2,4
    42c8:	10800037 	ldwio	r2,0(r2)
    42cc:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    42d0:	e0bffc17 	ldw	r2,-16(fp)
    42d4:	1080c00c 	andi	r2,r2,768
    42d8:	10006d26 	beq	r2,zero,4490 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    42dc:	e0bffc17 	ldw	r2,-16(fp)
    42e0:	1080400c 	andi	r2,r2,256
    42e4:	10003526 	beq	r2,zero,43bc <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    42e8:	00800074 	movhi	r2,1
    42ec:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    42f0:	e0bffa17 	ldw	r2,-24(fp)
    42f4:	10800a17 	ldw	r2,40(r2)
    42f8:	10800044 	addi	r2,r2,1
    42fc:	1081ffcc 	andi	r2,r2,2047
    4300:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
    4304:	e0bffa17 	ldw	r2,-24(fp)
    4308:	10c00b17 	ldw	r3,44(r2)
    430c:	e0bffd17 	ldw	r2,-12(fp)
    4310:	18801526 	beq	r3,r2,4368 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    4314:	e0bffb17 	ldw	r2,-20(fp)
    4318:	10800037 	ldwio	r2,0(r2)
    431c:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    4320:	e0bff817 	ldw	r2,-32(fp)
    4324:	10a0000c 	andi	r2,r2,32768
    4328:	10001126 	beq	r2,zero,4370 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    432c:	e0bffa17 	ldw	r2,-24(fp)
    4330:	10800a17 	ldw	r2,40(r2)
    4334:	e0fff817 	ldw	r3,-32(fp)
    4338:	1809883a 	mov	r4,r3
    433c:	e0fffa17 	ldw	r3,-24(fp)
    4340:	1885883a 	add	r2,r3,r2
    4344:	10800e04 	addi	r2,r2,56
    4348:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    434c:	e0bffa17 	ldw	r2,-24(fp)
    4350:	10800a17 	ldw	r2,40(r2)
    4354:	10800044 	addi	r2,r2,1
    4358:	10c1ffcc 	andi	r3,r2,2047
    435c:	e0bffa17 	ldw	r2,-24(fp)
    4360:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    4364:	003fe206 	br	42f0 <altera_avalon_jtag_uart_irq+0x58>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    4368:	0001883a 	nop
    436c:	00000106 	br	4374 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    4370:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    4374:	e0bff817 	ldw	r2,-32(fp)
    4378:	10bfffec 	andhi	r2,r2,65535
    437c:	10000f26 	beq	r2,zero,43bc <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    4380:	e0bffa17 	ldw	r2,-24(fp)
    4384:	10c00817 	ldw	r3,32(r2)
    4388:	00bfff84 	movi	r2,-2
    438c:	1886703a 	and	r3,r3,r2
    4390:	e0bffa17 	ldw	r2,-24(fp)
    4394:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    4398:	e0bffb17 	ldw	r2,-20(fp)
    439c:	10800104 	addi	r2,r2,4
    43a0:	1007883a 	mov	r3,r2
    43a4:	e0bffa17 	ldw	r2,-24(fp)
    43a8:	10800817 	ldw	r2,32(r2)
    43ac:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    43b0:	e0bffb17 	ldw	r2,-20(fp)
    43b4:	10800104 	addi	r2,r2,4
    43b8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    43bc:	e0bffc17 	ldw	r2,-16(fp)
    43c0:	1080800c 	andi	r2,r2,512
    43c4:	103fbe26 	beq	r2,zero,42c0 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    43c8:	e0bffc17 	ldw	r2,-16(fp)
    43cc:	1004d43a 	srli	r2,r2,16
    43d0:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    43d4:	00001406 	br	4428 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    43d8:	e0bffb17 	ldw	r2,-20(fp)
    43dc:	e0fffa17 	ldw	r3,-24(fp)
    43e0:	18c00d17 	ldw	r3,52(r3)
    43e4:	e13ffa17 	ldw	r4,-24(fp)
    43e8:	20c7883a 	add	r3,r4,r3
    43ec:	18c20e04 	addi	r3,r3,2104
    43f0:	18c00003 	ldbu	r3,0(r3)
    43f4:	18c03fcc 	andi	r3,r3,255
    43f8:	18c0201c 	xori	r3,r3,128
    43fc:	18ffe004 	addi	r3,r3,-128
    4400:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4404:	e0bffa17 	ldw	r2,-24(fp)
    4408:	10800d17 	ldw	r2,52(r2)
    440c:	10800044 	addi	r2,r2,1
    4410:	10c1ffcc 	andi	r3,r2,2047
    4414:	e0bffa17 	ldw	r2,-24(fp)
    4418:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    441c:	e0bff917 	ldw	r2,-28(fp)
    4420:	10bfffc4 	addi	r2,r2,-1
    4424:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    4428:	e0bff917 	ldw	r2,-28(fp)
    442c:	10000526 	beq	r2,zero,4444 <altera_avalon_jtag_uart_irq+0x1ac>
    4430:	e0bffa17 	ldw	r2,-24(fp)
    4434:	10c00d17 	ldw	r3,52(r2)
    4438:	e0bffa17 	ldw	r2,-24(fp)
    443c:	10800c17 	ldw	r2,48(r2)
    4440:	18bfe51e 	bne	r3,r2,43d8 <altera_avalon_jtag_uart_irq+0x140>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    4444:	e0bff917 	ldw	r2,-28(fp)
    4448:	103f9d26 	beq	r2,zero,42c0 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    444c:	e0bffa17 	ldw	r2,-24(fp)
    4450:	10c00817 	ldw	r3,32(r2)
    4454:	00bfff44 	movi	r2,-3
    4458:	1886703a 	and	r3,r3,r2
    445c:	e0bffa17 	ldw	r2,-24(fp)
    4460:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    4464:	e0bffa17 	ldw	r2,-24(fp)
    4468:	10800017 	ldw	r2,0(r2)
    446c:	10800104 	addi	r2,r2,4
    4470:	1007883a 	mov	r3,r2
    4474:	e0bffa17 	ldw	r2,-24(fp)
    4478:	10800817 	ldw	r2,32(r2)
    447c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    4480:	e0bffb17 	ldw	r2,-20(fp)
    4484:	10800104 	addi	r2,r2,4
    4488:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    448c:	003f8c06 	br	42c0 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    4490:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    4494:	0001883a 	nop
    4498:	e037883a 	mov	sp,fp
    449c:	df000017 	ldw	fp,0(sp)
    44a0:	dec00104 	addi	sp,sp,4
    44a4:	f800283a 	ret

000044a8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    44a8:	defff804 	addi	sp,sp,-32
    44ac:	df000715 	stw	fp,28(sp)
    44b0:	df000704 	addi	fp,sp,28
    44b4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    44b8:	e0bffb17 	ldw	r2,-20(fp)
    44bc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    44c0:	e0bff917 	ldw	r2,-28(fp)
    44c4:	10800017 	ldw	r2,0(r2)
    44c8:	10800104 	addi	r2,r2,4
    44cc:	10800037 	ldwio	r2,0(r2)
    44d0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    44d4:	e0bffa17 	ldw	r2,-24(fp)
    44d8:	1081000c 	andi	r2,r2,1024
    44dc:	10000b26 	beq	r2,zero,450c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    44e0:	e0bff917 	ldw	r2,-28(fp)
    44e4:	10800017 	ldw	r2,0(r2)
    44e8:	10800104 	addi	r2,r2,4
    44ec:	1007883a 	mov	r3,r2
    44f0:	e0bff917 	ldw	r2,-28(fp)
    44f4:	10800817 	ldw	r2,32(r2)
    44f8:	10810014 	ori	r2,r2,1024
    44fc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    4500:	e0bff917 	ldw	r2,-28(fp)
    4504:	10000915 	stw	zero,36(r2)
    4508:	00000a06 	br	4534 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    450c:	e0bff917 	ldw	r2,-28(fp)
    4510:	10c00917 	ldw	r3,36(r2)
    4514:	00a00034 	movhi	r2,32768
    4518:	10bfff04 	addi	r2,r2,-4
    451c:	10c00536 	bltu	r2,r3,4534 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    4520:	e0bff917 	ldw	r2,-28(fp)
    4524:	10800917 	ldw	r2,36(r2)
    4528:	10c00044 	addi	r3,r2,1
    452c:	e0bff917 	ldw	r2,-28(fp)
    4530:	10c00915 	stw	r3,36(r2)
    4534:	00800074 	movhi	r2,1
    4538:	10a60a04 	addi	r2,r2,-26584
    453c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    4540:	e037883a 	mov	sp,fp
    4544:	df000017 	ldw	fp,0(sp)
    4548:	dec00104 	addi	sp,sp,4
    454c:	f800283a 	ret

00004550 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    4550:	defffd04 	addi	sp,sp,-12
    4554:	df000215 	stw	fp,8(sp)
    4558:	df000204 	addi	fp,sp,8
    455c:	e13ffe15 	stw	r4,-8(fp)
    4560:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    4564:	00000506 	br	457c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    4568:	e0bfff17 	ldw	r2,-4(fp)
    456c:	1090000c 	andi	r2,r2,16384
    4570:	10000226 	beq	r2,zero,457c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    4574:	00bffd44 	movi	r2,-11
    4578:	00000b06 	br	45a8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    457c:	e0bffe17 	ldw	r2,-8(fp)
    4580:	10c00d17 	ldw	r3,52(r2)
    4584:	e0bffe17 	ldw	r2,-8(fp)
    4588:	10800c17 	ldw	r2,48(r2)
    458c:	18800526 	beq	r3,r2,45a4 <altera_avalon_jtag_uart_close+0x54>
    4590:	e0bffe17 	ldw	r2,-8(fp)
    4594:	10c00917 	ldw	r3,36(r2)
    4598:	e0bffe17 	ldw	r2,-8(fp)
    459c:	10800117 	ldw	r2,4(r2)
    45a0:	18bff136 	bltu	r3,r2,4568 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    45a4:	0005883a 	mov	r2,zero
}
    45a8:	e037883a 	mov	sp,fp
    45ac:	df000017 	ldw	fp,0(sp)
    45b0:	dec00104 	addi	sp,sp,4
    45b4:	f800283a 	ret

000045b8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    45b8:	defffa04 	addi	sp,sp,-24
    45bc:	df000515 	stw	fp,20(sp)
    45c0:	df000504 	addi	fp,sp,20
    45c4:	e13ffd15 	stw	r4,-12(fp)
    45c8:	e17ffe15 	stw	r5,-8(fp)
    45cc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    45d0:	00bff9c4 	movi	r2,-25
    45d4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    45d8:	e0bffe17 	ldw	r2,-8(fp)
    45dc:	10da8060 	cmpeqi	r3,r2,27137
    45e0:	1800031e 	bne	r3,zero,45f0 <altera_avalon_jtag_uart_ioctl+0x38>
    45e4:	109a80a0 	cmpeqi	r2,r2,27138
    45e8:	1000181e 	bne	r2,zero,464c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    45ec:	00002906 	br	4694 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    45f0:	e0bffd17 	ldw	r2,-12(fp)
    45f4:	10c00117 	ldw	r3,4(r2)
    45f8:	00a00034 	movhi	r2,32768
    45fc:	10bfffc4 	addi	r2,r2,-1
    4600:	18802126 	beq	r3,r2,4688 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    4604:	e0bfff17 	ldw	r2,-4(fp)
    4608:	10800017 	ldw	r2,0(r2)
    460c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    4610:	e0bffc17 	ldw	r2,-16(fp)
    4614:	10800090 	cmplti	r2,r2,2
    4618:	1000061e 	bne	r2,zero,4634 <altera_avalon_jtag_uart_ioctl+0x7c>
    461c:	e0fffc17 	ldw	r3,-16(fp)
    4620:	00a00034 	movhi	r2,32768
    4624:	10bfffc4 	addi	r2,r2,-1
    4628:	18800226 	beq	r3,r2,4634 <altera_avalon_jtag_uart_ioctl+0x7c>
    462c:	e0bffc17 	ldw	r2,-16(fp)
    4630:	00000206 	br	463c <altera_avalon_jtag_uart_ioctl+0x84>
    4634:	00a00034 	movhi	r2,32768
    4638:	10bfff84 	addi	r2,r2,-2
    463c:	e0fffd17 	ldw	r3,-12(fp)
    4640:	18800115 	stw	r2,4(r3)
      rc = 0;
    4644:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    4648:	00000f06 	br	4688 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    464c:	e0bffd17 	ldw	r2,-12(fp)
    4650:	10c00117 	ldw	r3,4(r2)
    4654:	00a00034 	movhi	r2,32768
    4658:	10bfffc4 	addi	r2,r2,-1
    465c:	18800c26 	beq	r3,r2,4690 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    4660:	e0bffd17 	ldw	r2,-12(fp)
    4664:	10c00917 	ldw	r3,36(r2)
    4668:	e0bffd17 	ldw	r2,-12(fp)
    466c:	10800117 	ldw	r2,4(r2)
    4670:	1885803a 	cmpltu	r2,r3,r2
    4674:	10c03fcc 	andi	r3,r2,255
    4678:	e0bfff17 	ldw	r2,-4(fp)
    467c:	10c00015 	stw	r3,0(r2)
      rc = 0;
    4680:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    4684:	00000206 	br	4690 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    4688:	0001883a 	nop
    468c:	00000106 	br	4694 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    4690:	0001883a 	nop

  default:
    break;
  }

  return rc;
    4694:	e0bffb17 	ldw	r2,-20(fp)
}
    4698:	e037883a 	mov	sp,fp
    469c:	df000017 	ldw	fp,0(sp)
    46a0:	dec00104 	addi	sp,sp,4
    46a4:	f800283a 	ret

000046a8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    46a8:	defff304 	addi	sp,sp,-52
    46ac:	dfc00c15 	stw	ra,48(sp)
    46b0:	df000b15 	stw	fp,44(sp)
    46b4:	df000b04 	addi	fp,sp,44
    46b8:	e13ffc15 	stw	r4,-16(fp)
    46bc:	e17ffd15 	stw	r5,-12(fp)
    46c0:	e1bffe15 	stw	r6,-8(fp)
    46c4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    46c8:	e0bffd17 	ldw	r2,-12(fp)
    46cc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    46d0:	00004706 	br	47f0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    46d4:	e0bffc17 	ldw	r2,-16(fp)
    46d8:	10800a17 	ldw	r2,40(r2)
    46dc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    46e0:	e0bffc17 	ldw	r2,-16(fp)
    46e4:	10800b17 	ldw	r2,44(r2)
    46e8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    46ec:	e0fff717 	ldw	r3,-36(fp)
    46f0:	e0bff817 	ldw	r2,-32(fp)
    46f4:	18800536 	bltu	r3,r2,470c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    46f8:	e0fff717 	ldw	r3,-36(fp)
    46fc:	e0bff817 	ldw	r2,-32(fp)
    4700:	1885c83a 	sub	r2,r3,r2
    4704:	e0bff615 	stw	r2,-40(fp)
    4708:	00000406 	br	471c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    470c:	00c20004 	movi	r3,2048
    4710:	e0bff817 	ldw	r2,-32(fp)
    4714:	1885c83a 	sub	r2,r3,r2
    4718:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    471c:	e0bff617 	ldw	r2,-40(fp)
    4720:	10001e26 	beq	r2,zero,479c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    4724:	e0fffe17 	ldw	r3,-8(fp)
    4728:	e0bff617 	ldw	r2,-40(fp)
    472c:	1880022e 	bgeu	r3,r2,4738 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    4730:	e0bffe17 	ldw	r2,-8(fp)
    4734:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    4738:	e0bffc17 	ldw	r2,-16(fp)
    473c:	10c00e04 	addi	r3,r2,56
    4740:	e0bff817 	ldw	r2,-32(fp)
    4744:	1885883a 	add	r2,r3,r2
    4748:	e1bff617 	ldw	r6,-40(fp)
    474c:	100b883a 	mov	r5,r2
    4750:	e13ff517 	ldw	r4,-44(fp)
    4754:	00019640 	call	1964 <memcpy>
      ptr   += n;
    4758:	e0fff517 	ldw	r3,-44(fp)
    475c:	e0bff617 	ldw	r2,-40(fp)
    4760:	1885883a 	add	r2,r3,r2
    4764:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    4768:	e0fffe17 	ldw	r3,-8(fp)
    476c:	e0bff617 	ldw	r2,-40(fp)
    4770:	1885c83a 	sub	r2,r3,r2
    4774:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4778:	e0fff817 	ldw	r3,-32(fp)
    477c:	e0bff617 	ldw	r2,-40(fp)
    4780:	1885883a 	add	r2,r3,r2
    4784:	10c1ffcc 	andi	r3,r2,2047
    4788:	e0bffc17 	ldw	r2,-16(fp)
    478c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    4790:	e0bffe17 	ldw	r2,-8(fp)
    4794:	00bfcf16 	blt	zero,r2,46d4 <altera_avalon_jtag_uart_read+0x2c>
    4798:	00000106 	br	47a0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    479c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    47a0:	e0fff517 	ldw	r3,-44(fp)
    47a4:	e0bffd17 	ldw	r2,-12(fp)
    47a8:	1880141e 	bne	r3,r2,47fc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    47ac:	e0bfff17 	ldw	r2,-4(fp)
    47b0:	1090000c 	andi	r2,r2,16384
    47b4:	1000131e 	bne	r2,zero,4804 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    47b8:	0001883a 	nop
    47bc:	e0bffc17 	ldw	r2,-16(fp)
    47c0:	10c00a17 	ldw	r3,40(r2)
    47c4:	e0bff717 	ldw	r2,-36(fp)
    47c8:	1880051e 	bne	r3,r2,47e0 <altera_avalon_jtag_uart_read+0x138>
    47cc:	e0bffc17 	ldw	r2,-16(fp)
    47d0:	10c00917 	ldw	r3,36(r2)
    47d4:	e0bffc17 	ldw	r2,-16(fp)
    47d8:	10800117 	ldw	r2,4(r2)
    47dc:	18bff736 	bltu	r3,r2,47bc <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    47e0:	e0bffc17 	ldw	r2,-16(fp)
    47e4:	10c00a17 	ldw	r3,40(r2)
    47e8:	e0bff717 	ldw	r2,-36(fp)
    47ec:	18800726 	beq	r3,r2,480c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    47f0:	e0bffe17 	ldw	r2,-8(fp)
    47f4:	00bfb716 	blt	zero,r2,46d4 <altera_avalon_jtag_uart_read+0x2c>
    47f8:	00000506 	br	4810 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    47fc:	0001883a 	nop
    4800:	00000306 	br	4810 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    4804:	0001883a 	nop
    4808:	00000106 	br	4810 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    480c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    4810:	e0fff517 	ldw	r3,-44(fp)
    4814:	e0bffd17 	ldw	r2,-12(fp)
    4818:	18801826 	beq	r3,r2,487c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    481c:	0005303a 	rdctl	r2,status
    4820:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4824:	e0fffb17 	ldw	r3,-20(fp)
    4828:	00bfff84 	movi	r2,-2
    482c:	1884703a 	and	r2,r3,r2
    4830:	1001703a 	wrctl	status,r2
  
  return context;
    4834:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    4838:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    483c:	e0bffc17 	ldw	r2,-16(fp)
    4840:	10800817 	ldw	r2,32(r2)
    4844:	10c00054 	ori	r3,r2,1
    4848:	e0bffc17 	ldw	r2,-16(fp)
    484c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    4850:	e0bffc17 	ldw	r2,-16(fp)
    4854:	10800017 	ldw	r2,0(r2)
    4858:	10800104 	addi	r2,r2,4
    485c:	1007883a 	mov	r3,r2
    4860:	e0bffc17 	ldw	r2,-16(fp)
    4864:	10800817 	ldw	r2,32(r2)
    4868:	18800035 	stwio	r2,0(r3)
    486c:	e0bffa17 	ldw	r2,-24(fp)
    4870:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4874:	e0bff917 	ldw	r2,-28(fp)
    4878:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    487c:	e0fff517 	ldw	r3,-44(fp)
    4880:	e0bffd17 	ldw	r2,-12(fp)
    4884:	18800426 	beq	r3,r2,4898 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    4888:	e0fff517 	ldw	r3,-44(fp)
    488c:	e0bffd17 	ldw	r2,-12(fp)
    4890:	1885c83a 	sub	r2,r3,r2
    4894:	00000606 	br	48b0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    4898:	e0bfff17 	ldw	r2,-4(fp)
    489c:	1090000c 	andi	r2,r2,16384
    48a0:	10000226 	beq	r2,zero,48ac <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    48a4:	00bffd44 	movi	r2,-11
    48a8:	00000106 	br	48b0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    48ac:	00bffec4 	movi	r2,-5
}
    48b0:	e037883a 	mov	sp,fp
    48b4:	dfc00117 	ldw	ra,4(sp)
    48b8:	df000017 	ldw	fp,0(sp)
    48bc:	dec00204 	addi	sp,sp,8
    48c0:	f800283a 	ret

000048c4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    48c4:	defff304 	addi	sp,sp,-52
    48c8:	dfc00c15 	stw	ra,48(sp)
    48cc:	df000b15 	stw	fp,44(sp)
    48d0:	df000b04 	addi	fp,sp,44
    48d4:	e13ffc15 	stw	r4,-16(fp)
    48d8:	e17ffd15 	stw	r5,-12(fp)
    48dc:	e1bffe15 	stw	r6,-8(fp)
    48e0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    48e4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    48e8:	e0bffd17 	ldw	r2,-12(fp)
    48ec:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    48f0:	00003706 	br	49d0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    48f4:	e0bffc17 	ldw	r2,-16(fp)
    48f8:	10800c17 	ldw	r2,48(r2)
    48fc:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    4900:	e0bffc17 	ldw	r2,-16(fp)
    4904:	10800d17 	ldw	r2,52(r2)
    4908:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    490c:	e0fff917 	ldw	r3,-28(fp)
    4910:	e0bff517 	ldw	r2,-44(fp)
    4914:	1880062e 	bgeu	r3,r2,4930 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    4918:	e0fff517 	ldw	r3,-44(fp)
    491c:	e0bff917 	ldw	r2,-28(fp)
    4920:	1885c83a 	sub	r2,r3,r2
    4924:	10bfffc4 	addi	r2,r2,-1
    4928:	e0bff615 	stw	r2,-40(fp)
    492c:	00000b06 	br	495c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    4930:	e0bff517 	ldw	r2,-44(fp)
    4934:	10000526 	beq	r2,zero,494c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    4938:	00c20004 	movi	r3,2048
    493c:	e0bff917 	ldw	r2,-28(fp)
    4940:	1885c83a 	sub	r2,r3,r2
    4944:	e0bff615 	stw	r2,-40(fp)
    4948:	00000406 	br	495c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    494c:	00c1ffc4 	movi	r3,2047
    4950:	e0bff917 	ldw	r2,-28(fp)
    4954:	1885c83a 	sub	r2,r3,r2
    4958:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    495c:	e0bff617 	ldw	r2,-40(fp)
    4960:	10001e26 	beq	r2,zero,49dc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    4964:	e0fffe17 	ldw	r3,-8(fp)
    4968:	e0bff617 	ldw	r2,-40(fp)
    496c:	1880022e 	bgeu	r3,r2,4978 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    4970:	e0bffe17 	ldw	r2,-8(fp)
    4974:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    4978:	e0bffc17 	ldw	r2,-16(fp)
    497c:	10c20e04 	addi	r3,r2,2104
    4980:	e0bff917 	ldw	r2,-28(fp)
    4984:	1885883a 	add	r2,r3,r2
    4988:	e1bff617 	ldw	r6,-40(fp)
    498c:	e17ffd17 	ldw	r5,-12(fp)
    4990:	1009883a 	mov	r4,r2
    4994:	00019640 	call	1964 <memcpy>
      ptr   += n;
    4998:	e0fffd17 	ldw	r3,-12(fp)
    499c:	e0bff617 	ldw	r2,-40(fp)
    49a0:	1885883a 	add	r2,r3,r2
    49a4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    49a8:	e0fffe17 	ldw	r3,-8(fp)
    49ac:	e0bff617 	ldw	r2,-40(fp)
    49b0:	1885c83a 	sub	r2,r3,r2
    49b4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    49b8:	e0fff917 	ldw	r3,-28(fp)
    49bc:	e0bff617 	ldw	r2,-40(fp)
    49c0:	1885883a 	add	r2,r3,r2
    49c4:	10c1ffcc 	andi	r3,r2,2047
    49c8:	e0bffc17 	ldw	r2,-16(fp)
    49cc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    49d0:	e0bffe17 	ldw	r2,-8(fp)
    49d4:	00bfc716 	blt	zero,r2,48f4 <altera_avalon_jtag_uart_write+0x30>
    49d8:	00000106 	br	49e0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    49dc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    49e0:	0005303a 	rdctl	r2,status
    49e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    49e8:	e0fffb17 	ldw	r3,-20(fp)
    49ec:	00bfff84 	movi	r2,-2
    49f0:	1884703a 	and	r2,r3,r2
    49f4:	1001703a 	wrctl	status,r2
  
  return context;
    49f8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    49fc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    4a00:	e0bffc17 	ldw	r2,-16(fp)
    4a04:	10800817 	ldw	r2,32(r2)
    4a08:	10c00094 	ori	r3,r2,2
    4a0c:	e0bffc17 	ldw	r2,-16(fp)
    4a10:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    4a14:	e0bffc17 	ldw	r2,-16(fp)
    4a18:	10800017 	ldw	r2,0(r2)
    4a1c:	10800104 	addi	r2,r2,4
    4a20:	1007883a 	mov	r3,r2
    4a24:	e0bffc17 	ldw	r2,-16(fp)
    4a28:	10800817 	ldw	r2,32(r2)
    4a2c:	18800035 	stwio	r2,0(r3)
    4a30:	e0bffa17 	ldw	r2,-24(fp)
    4a34:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4a38:	e0bff817 	ldw	r2,-32(fp)
    4a3c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    4a40:	e0bffe17 	ldw	r2,-8(fp)
    4a44:	0080100e 	bge	zero,r2,4a88 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    4a48:	e0bfff17 	ldw	r2,-4(fp)
    4a4c:	1090000c 	andi	r2,r2,16384
    4a50:	1000101e 	bne	r2,zero,4a94 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    4a54:	0001883a 	nop
    4a58:	e0bffc17 	ldw	r2,-16(fp)
    4a5c:	10c00d17 	ldw	r3,52(r2)
    4a60:	e0bff517 	ldw	r2,-44(fp)
    4a64:	1880051e 	bne	r3,r2,4a7c <altera_avalon_jtag_uart_write+0x1b8>
    4a68:	e0bffc17 	ldw	r2,-16(fp)
    4a6c:	10c00917 	ldw	r3,36(r2)
    4a70:	e0bffc17 	ldw	r2,-16(fp)
    4a74:	10800117 	ldw	r2,4(r2)
    4a78:	18bff736 	bltu	r3,r2,4a58 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    4a7c:	e0bffc17 	ldw	r2,-16(fp)
    4a80:	10800917 	ldw	r2,36(r2)
    4a84:	1000051e 	bne	r2,zero,4a9c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    4a88:	e0bffe17 	ldw	r2,-8(fp)
    4a8c:	00bfd016 	blt	zero,r2,49d0 <altera_avalon_jtag_uart_write+0x10c>
    4a90:	00000306 	br	4aa0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    4a94:	0001883a 	nop
    4a98:	00000106 	br	4aa0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    4a9c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    4aa0:	e0fffd17 	ldw	r3,-12(fp)
    4aa4:	e0bff717 	ldw	r2,-36(fp)
    4aa8:	18800426 	beq	r3,r2,4abc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    4aac:	e0fffd17 	ldw	r3,-12(fp)
    4ab0:	e0bff717 	ldw	r2,-36(fp)
    4ab4:	1885c83a 	sub	r2,r3,r2
    4ab8:	00000606 	br	4ad4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    4abc:	e0bfff17 	ldw	r2,-4(fp)
    4ac0:	1090000c 	andi	r2,r2,16384
    4ac4:	10000226 	beq	r2,zero,4ad0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    4ac8:	00bffd44 	movi	r2,-11
    4acc:	00000106 	br	4ad4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    4ad0:	00bffec4 	movi	r2,-5
}
    4ad4:	e037883a 	mov	sp,fp
    4ad8:	dfc00117 	ldw	ra,4(sp)
    4adc:	df000017 	ldw	fp,0(sp)
    4ae0:	dec00204 	addi	sp,sp,8
    4ae4:	f800283a 	ret

00004ae8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    4ae8:	defff904 	addi	sp,sp,-28
    4aec:	dfc00615 	stw	ra,24(sp)
    4af0:	df000515 	stw	fp,20(sp)
    4af4:	df000504 	addi	fp,sp,20
    4af8:	e13ffe15 	stw	r4,-8(fp)
    4afc:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    4b00:	0007883a 	mov	r3,zero
    4b04:	e0bffe17 	ldw	r2,-8(fp)
    4b08:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    4b0c:	e0bffe17 	ldw	r2,-8(fp)
    4b10:	10800104 	addi	r2,r2,4
    4b14:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4b18:	0005303a 	rdctl	r2,status
    4b1c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4b20:	e0fffc17 	ldw	r3,-16(fp)
    4b24:	00bfff84 	movi	r2,-2
    4b28:	1884703a 	and	r2,r3,r2
    4b2c:	1001703a 	wrctl	status,r2
  
  return context;
    4b30:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    4b34:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
    4b38:	0005ad40 	call	5ad4 <alt_tick>
    4b3c:	e0bffb17 	ldw	r2,-20(fp)
    4b40:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4b44:	e0bffd17 	ldw	r2,-12(fp)
    4b48:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    4b4c:	0001883a 	nop
    4b50:	e037883a 	mov	sp,fp
    4b54:	dfc00117 	ldw	ra,4(sp)
    4b58:	df000017 	ldw	fp,0(sp)
    4b5c:	dec00204 	addi	sp,sp,8
    4b60:	f800283a 	ret

00004b64 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    4b64:	defff904 	addi	sp,sp,-28
    4b68:	dfc00615 	stw	ra,24(sp)
    4b6c:	df000515 	stw	fp,20(sp)
    4b70:	df000504 	addi	fp,sp,20
    4b74:	e13ffc15 	stw	r4,-16(fp)
    4b78:	e17ffd15 	stw	r5,-12(fp)
    4b7c:	e1bffe15 	stw	r6,-8(fp)
    4b80:	e1ffff15 	stw	r7,-4(fp)
    4b84:	e0bfff17 	ldw	r2,-4(fp)
    4b88:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    4b8c:	00800074 	movhi	r2,1
    4b90:	10a60a04 	addi	r2,r2,-26584
    4b94:	10800017 	ldw	r2,0(r2)
    4b98:	1000041e 	bne	r2,zero,4bac <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    4b9c:	00800074 	movhi	r2,1
    4ba0:	10a60a04 	addi	r2,r2,-26584
    4ba4:	e0fffb17 	ldw	r3,-20(fp)
    4ba8:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    4bac:	e0bffc17 	ldw	r2,-16(fp)
    4bb0:	10800104 	addi	r2,r2,4
    4bb4:	00c001c4 	movi	r3,7
    4bb8:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    4bbc:	01800034 	movhi	r6,0
    4bc0:	3192ba04 	addi	r6,r6,19176
    4bc4:	e17ffc17 	ldw	r5,-16(fp)
    4bc8:	e13ffe17 	ldw	r4,-8(fp)
    4bcc:	00056140 	call	5614 <alt_irq_register>
#endif  
}
    4bd0:	0001883a 	nop
    4bd4:	e037883a 	mov	sp,fp
    4bd8:	dfc00117 	ldw	ra,4(sp)
    4bdc:	df000017 	ldw	fp,0(sp)
    4be0:	dec00204 	addi	sp,sp,8
    4be4:	f800283a 	ret

00004be8 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
    4be8:	defffd04 	addi	sp,sp,-12
    4bec:	df000215 	stw	fp,8(sp)
    4bf0:	df000204 	addi	fp,sp,8
    4bf4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    4bf8:	e0bfff17 	ldw	r2,-4(fp)
    4bfc:	10800a17 	ldw	r2,40(r2)
    4c00:	10800104 	addi	r2,r2,4
    4c04:	10800037 	ldwio	r2,0(r2)
    4c08:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    4c0c:	e0bffe17 	ldw	r2,-8(fp)
    4c10:	10800054 	ori	r2,r2,1
    4c14:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    4c18:	e0bfff17 	ldw	r2,-4(fp)
    4c1c:	10800a17 	ldw	r2,40(r2)
    4c20:	10800104 	addi	r2,r2,4
    4c24:	1007883a 	mov	r3,r2
    4c28:	e0bffe17 	ldw	r2,-8(fp)
    4c2c:	18800035 	stwio	r2,0(r3)
}
    4c30:	0001883a 	nop
    4c34:	e037883a 	mov	sp,fp
    4c38:	df000017 	ldw	fp,0(sp)
    4c3c:	dec00104 	addi	sp,sp,4
    4c40:	f800283a 	ret

00004c44 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
    4c44:	defffd04 	addi	sp,sp,-12
    4c48:	df000215 	stw	fp,8(sp)
    4c4c:	df000204 	addi	fp,sp,8
    4c50:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    4c54:	e0bfff17 	ldw	r2,-4(fp)
    4c58:	10800a17 	ldw	r2,40(r2)
    4c5c:	10800104 	addi	r2,r2,4
    4c60:	10800037 	ldwio	r2,0(r2)
    4c64:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    4c68:	e0fffe17 	ldw	r3,-8(fp)
    4c6c:	00bfff84 	movi	r2,-2
    4c70:	1884703a 	and	r2,r3,r2
    4c74:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    4c78:	e0bfff17 	ldw	r2,-4(fp)
    4c7c:	10800a17 	ldw	r2,40(r2)
    4c80:	10800104 	addi	r2,r2,4
    4c84:	1007883a 	mov	r3,r2
    4c88:	e0bffe17 	ldw	r2,-8(fp)
    4c8c:	18800035 	stwio	r2,0(r3)
}
    4c90:	0001883a 	nop
    4c94:	e037883a 	mov	sp,fp
    4c98:	df000017 	ldw	fp,0(sp)
    4c9c:	dec00104 	addi	sp,sp,4
    4ca0:	f800283a 	ret

00004ca4 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
    4ca4:	defffd04 	addi	sp,sp,-12
    4ca8:	df000215 	stw	fp,8(sp)
    4cac:	df000204 	addi	fp,sp,8
    4cb0:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    4cb4:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    4cb8:	e0bfff17 	ldw	r2,-4(fp)
    4cbc:	10800a17 	ldw	r2,40(r2)
    4cc0:	10800084 	addi	r2,r2,2
    4cc4:	1080002b 	ldhuio	r2,0(r2)
    4cc8:	10bfffcc 	andi	r2,r2,65535
    4ccc:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
    4cd0:	e0bffe0b 	ldhu	r2,-8(fp)
}
    4cd4:	e037883a 	mov	sp,fp
    4cd8:	df000017 	ldw	fp,0(sp)
    4cdc:	dec00104 	addi	sp,sp,4
    4ce0:	f800283a 	ret

00004ce4 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
    4ce4:	defffd04 	addi	sp,sp,-12
    4ce8:	df000215 	stw	fp,8(sp)
    4cec:	df000204 	addi	fp,sp,8
    4cf0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    4cf4:	e0bfff17 	ldw	r2,-4(fp)
    4cf8:	10800a17 	ldw	r2,40(r2)
    4cfc:	10800104 	addi	r2,r2,4
    4d00:	10800037 	ldwio	r2,0(r2)
    4d04:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
    4d08:	e0bffe17 	ldw	r2,-8(fp)
    4d0c:	1004d43a 	srli	r2,r2,16
}
    4d10:	e037883a 	mov	sp,fp
    4d14:	df000017 	ldw	fp,0(sp)
    4d18:	dec00104 	addi	sp,sp,4
    4d1c:	f800283a 	ret

00004d20 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
    4d20:	defffd04 	addi	sp,sp,-12
    4d24:	df000215 	stw	fp,8(sp)
    4d28:	df000204 	addi	fp,sp,8
    4d2c:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    4d30:	e0bfff17 	ldw	r2,-4(fp)
    4d34:	1080800c 	andi	r2,r2,512
    4d38:	1004d27a 	srli	r2,r2,9
    4d3c:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
    4d40:	e0bffe17 	ldw	r2,-8(fp)
    4d44:	10000226 	beq	r2,zero,4d50 <alt_up_rs232_check_parity+0x30>
    4d48:	00bfffc4 	movi	r2,-1
    4d4c:	00000106 	br	4d54 <alt_up_rs232_check_parity+0x34>
    4d50:	0005883a 	mov	r2,zero
}
    4d54:	e037883a 	mov	sp,fp
    4d58:	df000017 	ldw	fp,0(sp)
    4d5c:	dec00104 	addi	sp,sp,4
    4d60:	f800283a 	ret

00004d64 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
    4d64:	defffd04 	addi	sp,sp,-12
    4d68:	df000215 	stw	fp,8(sp)
    4d6c:	df000204 	addi	fp,sp,8
    4d70:	e13ffe15 	stw	r4,-8(fp)
    4d74:	2805883a 	mov	r2,r5
    4d78:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    4d7c:	e0bffe17 	ldw	r2,-8(fp)
    4d80:	10800a17 	ldw	r2,40(r2)
    4d84:	1007883a 	mov	r3,r2
    4d88:	e0bfff03 	ldbu	r2,-4(fp)
    4d8c:	18800035 	stwio	r2,0(r3)
	return 0;
    4d90:	0005883a 	mov	r2,zero
}
    4d94:	e037883a 	mov	sp,fp
    4d98:	df000017 	ldw	fp,0(sp)
    4d9c:	dec00104 	addi	sp,sp,4
    4da0:	f800283a 	ret

00004da4 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    4da4:	defffa04 	addi	sp,sp,-24
    4da8:	dfc00515 	stw	ra,20(sp)
    4dac:	df000415 	stw	fp,16(sp)
    4db0:	df000404 	addi	fp,sp,16
    4db4:	e13ffd15 	stw	r4,-12(fp)
    4db8:	e17ffe15 	stw	r5,-8(fp)
    4dbc:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    4dc0:	e0bffd17 	ldw	r2,-12(fp)
    4dc4:	10800a17 	ldw	r2,40(r2)
    4dc8:	10800037 	ldwio	r2,0(r2)
    4dcc:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    4dd0:	e0bffc17 	ldw	r2,-16(fp)
    4dd4:	1007883a 	mov	r3,r2
    4dd8:	e0bffe17 	ldw	r2,-8(fp)
    4ddc:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    4de0:	e13ffc17 	ldw	r4,-16(fp)
    4de4:	0004d200 	call	4d20 <alt_up_rs232_check_parity>
    4de8:	1007883a 	mov	r3,r2
    4dec:	e0bfff17 	ldw	r2,-4(fp)
    4df0:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    4df4:	e0bffc17 	ldw	r2,-16(fp)
    4df8:	10a0000c 	andi	r2,r2,32768
    4dfc:	1004d3fa 	srli	r2,r2,15
    4e00:	10bfffc4 	addi	r2,r2,-1
}
    4e04:	e037883a 	mov	sp,fp
    4e08:	dfc00117 	ldw	ra,4(sp)
    4e0c:	df000017 	ldw	fp,0(sp)
    4e10:	dec00204 	addi	sp,sp,8
    4e14:	f800283a 	ret

00004e18 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    4e18:	defff804 	addi	sp,sp,-32
    4e1c:	dfc00715 	stw	ra,28(sp)
    4e20:	df000615 	stw	fp,24(sp)
    4e24:	df000604 	addi	fp,sp,24
    4e28:	e13ffd15 	stw	r4,-12(fp)
    4e2c:	e17ffe15 	stw	r5,-8(fp)
    4e30:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    4e34:	e0bffd17 	ldw	r2,-12(fp)
    4e38:	10800017 	ldw	r2,0(r2)
    4e3c:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    4e40:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    4e44:	00000c06 	br	4e78 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
    4e48:	e0bffe17 	ldw	r2,-8(fp)
    4e4c:	10c00044 	addi	r3,r2,1
    4e50:	e0fffe15 	stw	r3,-8(fp)
    4e54:	e0fffc04 	addi	r3,fp,-16
    4e58:	180d883a 	mov	r6,r3
    4e5c:	100b883a 	mov	r5,r2
    4e60:	e13ffb17 	ldw	r4,-20(fp)
    4e64:	0004da40 	call	4da4 <alt_up_rs232_read_data>
    4e68:	1000081e 	bne	r2,zero,4e8c <alt_up_rs232_read_fd+0x74>
			count++;
    4e6c:	e0bffa17 	ldw	r2,-24(fp)
    4e70:	10800044 	addi	r2,r2,1
    4e74:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    4e78:	e0bfff17 	ldw	r2,-4(fp)
    4e7c:	10ffffc4 	addi	r3,r2,-1
    4e80:	e0ffff15 	stw	r3,-4(fp)
    4e84:	103ff01e 	bne	r2,zero,4e48 <alt_up_rs232_read_fd+0x30>
    4e88:	00000106 	br	4e90 <alt_up_rs232_read_fd+0x78>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
    4e8c:	0001883a 	nop
	}
	return count;
    4e90:	e0bffa17 	ldw	r2,-24(fp)
}
    4e94:	e037883a 	mov	sp,fp
    4e98:	dfc00117 	ldw	ra,4(sp)
    4e9c:	df000017 	ldw	fp,0(sp)
    4ea0:	dec00204 	addi	sp,sp,8
    4ea4:	f800283a 	ret

00004ea8 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    4ea8:	defff904 	addi	sp,sp,-28
    4eac:	dfc00615 	stw	ra,24(sp)
    4eb0:	df000515 	stw	fp,20(sp)
    4eb4:	df000504 	addi	fp,sp,20
    4eb8:	e13ffd15 	stw	r4,-12(fp)
    4ebc:	e17ffe15 	stw	r5,-8(fp)
    4ec0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    4ec4:	e0bffd17 	ldw	r2,-12(fp)
    4ec8:	10800017 	ldw	r2,0(r2)
    4ecc:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    4ed0:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    4ed4:	00000d06 	br	4f0c <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    4ed8:	e0bffe17 	ldw	r2,-8(fp)
    4edc:	10800003 	ldbu	r2,0(r2)
    4ee0:	10803fcc 	andi	r2,r2,255
    4ee4:	100b883a 	mov	r5,r2
    4ee8:	e13ffc17 	ldw	r4,-16(fp)
    4eec:	0004d640 	call	4d64 <alt_up_rs232_write_data>
    4ef0:	10000b1e 	bne	r2,zero,4f20 <alt_up_rs232_write_fd+0x78>
		{
			count++;
    4ef4:	e0bffb17 	ldw	r2,-20(fp)
    4ef8:	10800044 	addi	r2,r2,1
    4efc:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
    4f00:	e0bffe17 	ldw	r2,-8(fp)
    4f04:	10800044 	addi	r2,r2,1
    4f08:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    4f0c:	e0bfff17 	ldw	r2,-4(fp)
    4f10:	10ffffc4 	addi	r3,r2,-1
    4f14:	e0ffff15 	stw	r3,-4(fp)
    4f18:	103fef1e 	bne	r2,zero,4ed8 <alt_up_rs232_write_fd+0x30>
    4f1c:	00000106 	br	4f24 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
			ptr++;
		}
		else
			break;
    4f20:	0001883a 	nop
	}
	return count;
    4f24:	e0bffb17 	ldw	r2,-20(fp)
}
    4f28:	e037883a 	mov	sp,fp
    4f2c:	dfc00117 	ldw	ra,4(sp)
    4f30:	df000017 	ldw	fp,0(sp)
    4f34:	dec00204 	addi	sp,sp,8
    4f38:	f800283a 	ret

00004f3c <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    4f3c:	defffc04 	addi	sp,sp,-16
    4f40:	dfc00315 	stw	ra,12(sp)
    4f44:	df000215 	stw	fp,8(sp)
    4f48:	df000204 	addi	fp,sp,8
    4f4c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    4f50:	01400034 	movhi	r5,0
    4f54:	295f5404 	addi	r5,r5,32080
    4f58:	e13fff17 	ldw	r4,-4(fp)
    4f5c:	00054100 	call	5410 <alt_find_dev>
    4f60:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    4f64:	e0bffe17 	ldw	r2,-8(fp)
}
    4f68:	e037883a 	mov	sp,fp
    4f6c:	dfc00117 	ldw	ra,4(sp)
    4f70:	df000017 	ldw	fp,0(sp)
    4f74:	dec00204 	addi	sp,sp,8
    4f78:	f800283a 	ret

00004f7c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    4f7c:	defff504 	addi	sp,sp,-44
    4f80:	df000a15 	stw	fp,40(sp)
    4f84:	df000a04 	addi	fp,sp,40
    4f88:	e13ffc15 	stw	r4,-16(fp)
    4f8c:	e17ffd15 	stw	r5,-12(fp)
    4f90:	e1bffe15 	stw	r6,-8(fp)
    4f94:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    4f98:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    4f9c:	00800074 	movhi	r2,1
    4fa0:	10a60a04 	addi	r2,r2,-26584
    4fa4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    4fa8:	10003f26 	beq	r2,zero,50a8 <alt_alarm_start+0x12c>
  {
    if (alarm)
    4fac:	e0bffc17 	ldw	r2,-16(fp)
    4fb0:	10003b26 	beq	r2,zero,50a0 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    4fb4:	e0bffc17 	ldw	r2,-16(fp)
    4fb8:	e0fffe17 	ldw	r3,-8(fp)
    4fbc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    4fc0:	e0bffc17 	ldw	r2,-16(fp)
    4fc4:	e0ffff17 	ldw	r3,-4(fp)
    4fc8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4fcc:	0005303a 	rdctl	r2,status
    4fd0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4fd4:	e0fff917 	ldw	r3,-28(fp)
    4fd8:	00bfff84 	movi	r2,-2
    4fdc:	1884703a 	and	r2,r3,r2
    4fe0:	1001703a 	wrctl	status,r2
  
  return context;
    4fe4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    4fe8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    4fec:	00800074 	movhi	r2,1
    4ff0:	10a60b04 	addi	r2,r2,-26580
    4ff4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    4ff8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    4ffc:	e0fffd17 	ldw	r3,-12(fp)
    5000:	e0bff617 	ldw	r2,-40(fp)
    5004:	1885883a 	add	r2,r3,r2
    5008:	10c00044 	addi	r3,r2,1
    500c:	e0bffc17 	ldw	r2,-16(fp)
    5010:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    5014:	e0bffc17 	ldw	r2,-16(fp)
    5018:	10c00217 	ldw	r3,8(r2)
    501c:	e0bff617 	ldw	r2,-40(fp)
    5020:	1880042e 	bgeu	r3,r2,5034 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    5024:	e0bffc17 	ldw	r2,-16(fp)
    5028:	00c00044 	movi	r3,1
    502c:	10c00405 	stb	r3,16(r2)
    5030:	00000206 	br	503c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    5034:	e0bffc17 	ldw	r2,-16(fp)
    5038:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    503c:	e0fffc17 	ldw	r3,-16(fp)
    5040:	00800034 	movhi	r2,0
    5044:	109f5a04 	addi	r2,r2,32104
    5048:	e0bffa15 	stw	r2,-24(fp)
    504c:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    5050:	e0bffb17 	ldw	r2,-20(fp)
    5054:	e0fffa17 	ldw	r3,-24(fp)
    5058:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    505c:	e0bffa17 	ldw	r2,-24(fp)
    5060:	10c00017 	ldw	r3,0(r2)
    5064:	e0bffb17 	ldw	r2,-20(fp)
    5068:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    506c:	e0bffa17 	ldw	r2,-24(fp)
    5070:	10800017 	ldw	r2,0(r2)
    5074:	e0fffb17 	ldw	r3,-20(fp)
    5078:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    507c:	e0bffa17 	ldw	r2,-24(fp)
    5080:	e0fffb17 	ldw	r3,-20(fp)
    5084:	10c00015 	stw	r3,0(r2)
    5088:	e0bff817 	ldw	r2,-32(fp)
    508c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5090:	e0bff717 	ldw	r2,-36(fp)
    5094:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    5098:	0005883a 	mov	r2,zero
    509c:	00000306 	br	50ac <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    50a0:	00bffa84 	movi	r2,-22
    50a4:	00000106 	br	50ac <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    50a8:	00bfde84 	movi	r2,-134
  }
}
    50ac:	e037883a 	mov	sp,fp
    50b0:	df000017 	ldw	fp,0(sp)
    50b4:	dec00104 	addi	sp,sp,4
    50b8:	f800283a 	ret

000050bc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    50bc:	defffa04 	addi	sp,sp,-24
    50c0:	dfc00515 	stw	ra,20(sp)
    50c4:	df000415 	stw	fp,16(sp)
    50c8:	df000404 	addi	fp,sp,16
    50cc:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    50d0:	008000c4 	movi	r2,3
    50d4:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    50d8:	e0fffd17 	ldw	r3,-12(fp)
    50dc:	008003f4 	movhi	r2,15
    50e0:	10909004 	addi	r2,r2,16960
    50e4:	1885383a 	mul	r2,r3,r2
    50e8:	100b883a 	mov	r5,r2
    50ec:	01017db4 	movhi	r4,1526
    50f0:	21384004 	addi	r4,r4,-7936
    50f4:	00034f00 	call	34f0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    50f8:	100b883a 	mov	r5,r2
    50fc:	01200034 	movhi	r4,32768
    5100:	213fffc4 	addi	r4,r4,-1
    5104:	00034f00 	call	34f0 <__udivsi3>
    5108:	100b883a 	mov	r5,r2
    510c:	e13fff17 	ldw	r4,-4(fp)
    5110:	00034f00 	call	34f0 <__udivsi3>
    5114:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    5118:	e0bffe17 	ldw	r2,-8(fp)
    511c:	10002a26 	beq	r2,zero,51c8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    5120:	e03ffc15 	stw	zero,-16(fp)
    5124:	00001706 	br	5184 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    5128:	00a00034 	movhi	r2,32768
    512c:	10bfffc4 	addi	r2,r2,-1
    5130:	10bfffc4 	addi	r2,r2,-1
    5134:	103ffe1e 	bne	r2,zero,5130 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    5138:	e0fffd17 	ldw	r3,-12(fp)
    513c:	008003f4 	movhi	r2,15
    5140:	10909004 	addi	r2,r2,16960
    5144:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    5148:	100b883a 	mov	r5,r2
    514c:	01017db4 	movhi	r4,1526
    5150:	21384004 	addi	r4,r4,-7936
    5154:	00034f00 	call	34f0 <__udivsi3>
    5158:	100b883a 	mov	r5,r2
    515c:	01200034 	movhi	r4,32768
    5160:	213fffc4 	addi	r4,r4,-1
    5164:	00034f00 	call	34f0 <__udivsi3>
    5168:	1007883a 	mov	r3,r2
    516c:	e0bfff17 	ldw	r2,-4(fp)
    5170:	10c5c83a 	sub	r2,r2,r3
    5174:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    5178:	e0bffc17 	ldw	r2,-16(fp)
    517c:	10800044 	addi	r2,r2,1
    5180:	e0bffc15 	stw	r2,-16(fp)
    5184:	e0fffc17 	ldw	r3,-16(fp)
    5188:	e0bffe17 	ldw	r2,-8(fp)
    518c:	18bfe616 	blt	r3,r2,5128 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    5190:	e0fffd17 	ldw	r3,-12(fp)
    5194:	008003f4 	movhi	r2,15
    5198:	10909004 	addi	r2,r2,16960
    519c:	1885383a 	mul	r2,r3,r2
    51a0:	100b883a 	mov	r5,r2
    51a4:	01017db4 	movhi	r4,1526
    51a8:	21384004 	addi	r4,r4,-7936
    51ac:	00034f00 	call	34f0 <__udivsi3>
    51b0:	1007883a 	mov	r3,r2
    51b4:	e0bfff17 	ldw	r2,-4(fp)
    51b8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    51bc:	10bfffc4 	addi	r2,r2,-1
    51c0:	103ffe1e 	bne	r2,zero,51bc <alt_busy_sleep+0x100>
    51c4:	00000d06 	br	51fc <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    51c8:	e0fffd17 	ldw	r3,-12(fp)
    51cc:	008003f4 	movhi	r2,15
    51d0:	10909004 	addi	r2,r2,16960
    51d4:	1885383a 	mul	r2,r3,r2
    51d8:	100b883a 	mov	r5,r2
    51dc:	01017db4 	movhi	r4,1526
    51e0:	21384004 	addi	r4,r4,-7936
    51e4:	00034f00 	call	34f0 <__udivsi3>
    51e8:	1007883a 	mov	r3,r2
    51ec:	e0bfff17 	ldw	r2,-4(fp)
    51f0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    51f4:	10bfffc4 	addi	r2,r2,-1
    51f8:	00bffe16 	blt	zero,r2,51f4 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    51fc:	0005883a 	mov	r2,zero
}
    5200:	e037883a 	mov	sp,fp
    5204:	dfc00117 	ldw	ra,4(sp)
    5208:	df000017 	ldw	fp,0(sp)
    520c:	dec00204 	addi	sp,sp,8
    5210:	f800283a 	ret

00005214 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    5214:	defffe04 	addi	sp,sp,-8
    5218:	df000115 	stw	fp,4(sp)
    521c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    5220:	e03fff15 	stw	zero,-4(fp)
    5224:	00000506 	br	523c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    5228:	e0bfff17 	ldw	r2,-4(fp)
    522c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    5230:	e0bfff17 	ldw	r2,-4(fp)
    5234:	10800804 	addi	r2,r2,32
    5238:	e0bfff15 	stw	r2,-4(fp)
    523c:	e0bfff17 	ldw	r2,-4(fp)
    5240:	10820030 	cmpltui	r2,r2,2048
    5244:	103ff81e 	bne	r2,zero,5228 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    5248:	0001883a 	nop
    524c:	e037883a 	mov	sp,fp
    5250:	df000017 	ldw	fp,0(sp)
    5254:	dec00104 	addi	sp,sp,4
    5258:	f800283a 	ret

0000525c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    525c:	defffe04 	addi	sp,sp,-8
    5260:	dfc00115 	stw	ra,4(sp)
    5264:	df000015 	stw	fp,0(sp)
    5268:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    526c:	00800034 	movhi	r2,0
    5270:	109f5704 	addi	r2,r2,32092
    5274:	10800017 	ldw	r2,0(r2)
    5278:	10000526 	beq	r2,zero,5290 <alt_get_errno+0x34>
    527c:	00800034 	movhi	r2,0
    5280:	109f5704 	addi	r2,r2,32092
    5284:	10800017 	ldw	r2,0(r2)
    5288:	103ee83a 	callr	r2
    528c:	00000206 	br	5298 <alt_get_errno+0x3c>
    5290:	00800074 	movhi	r2,1
    5294:	10a60504 	addi	r2,r2,-26604
}
    5298:	e037883a 	mov	sp,fp
    529c:	dfc00117 	ldw	ra,4(sp)
    52a0:	df000017 	ldw	fp,0(sp)
    52a4:	dec00204 	addi	sp,sp,8
    52a8:	f800283a 	ret

000052ac <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    52ac:	defffa04 	addi	sp,sp,-24
    52b0:	dfc00515 	stw	ra,20(sp)
    52b4:	df000415 	stw	fp,16(sp)
    52b8:	df000404 	addi	fp,sp,16
    52bc:	e13ffe15 	stw	r4,-8(fp)
    52c0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    52c4:	e0bffe17 	ldw	r2,-8(fp)
    52c8:	10000326 	beq	r2,zero,52d8 <alt_dev_llist_insert+0x2c>
    52cc:	e0bffe17 	ldw	r2,-8(fp)
    52d0:	10800217 	ldw	r2,8(r2)
    52d4:	1000061e 	bne	r2,zero,52f0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    52d8:	000525c0 	call	525c <alt_get_errno>
    52dc:	1007883a 	mov	r3,r2
    52e0:	00800584 	movi	r2,22
    52e4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    52e8:	00bffa84 	movi	r2,-22
    52ec:	00001306 	br	533c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    52f0:	e0bffe17 	ldw	r2,-8(fp)
    52f4:	e0ffff17 	ldw	r3,-4(fp)
    52f8:	e0fffc15 	stw	r3,-16(fp)
    52fc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    5300:	e0bffd17 	ldw	r2,-12(fp)
    5304:	e0fffc17 	ldw	r3,-16(fp)
    5308:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    530c:	e0bffc17 	ldw	r2,-16(fp)
    5310:	10c00017 	ldw	r3,0(r2)
    5314:	e0bffd17 	ldw	r2,-12(fp)
    5318:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    531c:	e0bffc17 	ldw	r2,-16(fp)
    5320:	10800017 	ldw	r2,0(r2)
    5324:	e0fffd17 	ldw	r3,-12(fp)
    5328:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    532c:	e0bffc17 	ldw	r2,-16(fp)
    5330:	e0fffd17 	ldw	r3,-12(fp)
    5334:	10c00015 	stw	r3,0(r2)

  return 0;  
    5338:	0005883a 	mov	r2,zero
}
    533c:	e037883a 	mov	sp,fp
    5340:	dfc00117 	ldw	ra,4(sp)
    5344:	df000017 	ldw	fp,0(sp)
    5348:	dec00204 	addi	sp,sp,8
    534c:	f800283a 	ret

00005350 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    5350:	defffd04 	addi	sp,sp,-12
    5354:	dfc00215 	stw	ra,8(sp)
    5358:	df000115 	stw	fp,4(sp)
    535c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    5360:	00800034 	movhi	r2,0
    5364:	1098a104 	addi	r2,r2,25220
    5368:	e0bfff15 	stw	r2,-4(fp)
    536c:	00000606 	br	5388 <_do_ctors+0x38>
        (*ctor) (); 
    5370:	e0bfff17 	ldw	r2,-4(fp)
    5374:	10800017 	ldw	r2,0(r2)
    5378:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    537c:	e0bfff17 	ldw	r2,-4(fp)
    5380:	10bfff04 	addi	r2,r2,-4
    5384:	e0bfff15 	stw	r2,-4(fp)
    5388:	e0ffff17 	ldw	r3,-4(fp)
    538c:	00800034 	movhi	r2,0
    5390:	1098a204 	addi	r2,r2,25224
    5394:	18bff62e 	bgeu	r3,r2,5370 <_do_ctors+0x20>
        (*ctor) (); 
}
    5398:	0001883a 	nop
    539c:	e037883a 	mov	sp,fp
    53a0:	dfc00117 	ldw	ra,4(sp)
    53a4:	df000017 	ldw	fp,0(sp)
    53a8:	dec00204 	addi	sp,sp,8
    53ac:	f800283a 	ret

000053b0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    53b0:	defffd04 	addi	sp,sp,-12
    53b4:	dfc00215 	stw	ra,8(sp)
    53b8:	df000115 	stw	fp,4(sp)
    53bc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    53c0:	00800034 	movhi	r2,0
    53c4:	1098a104 	addi	r2,r2,25220
    53c8:	e0bfff15 	stw	r2,-4(fp)
    53cc:	00000606 	br	53e8 <_do_dtors+0x38>
        (*dtor) (); 
    53d0:	e0bfff17 	ldw	r2,-4(fp)
    53d4:	10800017 	ldw	r2,0(r2)
    53d8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    53dc:	e0bfff17 	ldw	r2,-4(fp)
    53e0:	10bfff04 	addi	r2,r2,-4
    53e4:	e0bfff15 	stw	r2,-4(fp)
    53e8:	e0ffff17 	ldw	r3,-4(fp)
    53ec:	00800034 	movhi	r2,0
    53f0:	1098a204 	addi	r2,r2,25224
    53f4:	18bff62e 	bgeu	r3,r2,53d0 <_do_dtors+0x20>
        (*dtor) (); 
}
    53f8:	0001883a 	nop
    53fc:	e037883a 	mov	sp,fp
    5400:	dfc00117 	ldw	ra,4(sp)
    5404:	df000017 	ldw	fp,0(sp)
    5408:	dec00204 	addi	sp,sp,8
    540c:	f800283a 	ret

00005410 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    5410:	defffa04 	addi	sp,sp,-24
    5414:	dfc00515 	stw	ra,20(sp)
    5418:	df000415 	stw	fp,16(sp)
    541c:	df000404 	addi	fp,sp,16
    5420:	e13ffe15 	stw	r4,-8(fp)
    5424:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    5428:	e0bfff17 	ldw	r2,-4(fp)
    542c:	10800017 	ldw	r2,0(r2)
    5430:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    5434:	e13ffe17 	ldw	r4,-8(fp)
    5438:	00005f80 	call	5f8 <strlen>
    543c:	10800044 	addi	r2,r2,1
    5440:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    5444:	00000d06 	br	547c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    5448:	e0bffc17 	ldw	r2,-16(fp)
    544c:	10800217 	ldw	r2,8(r2)
    5450:	e0fffd17 	ldw	r3,-12(fp)
    5454:	180d883a 	mov	r6,r3
    5458:	e17ffe17 	ldw	r5,-8(fp)
    545c:	1009883a 	mov	r4,r2
    5460:	0005f400 	call	5f40 <memcmp>
    5464:	1000021e 	bne	r2,zero,5470 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    5468:	e0bffc17 	ldw	r2,-16(fp)
    546c:	00000706 	br	548c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    5470:	e0bffc17 	ldw	r2,-16(fp)
    5474:	10800017 	ldw	r2,0(r2)
    5478:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    547c:	e0fffc17 	ldw	r3,-16(fp)
    5480:	e0bfff17 	ldw	r2,-4(fp)
    5484:	18bff01e 	bne	r3,r2,5448 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    5488:	0005883a 	mov	r2,zero
}
    548c:	e037883a 	mov	sp,fp
    5490:	dfc00117 	ldw	ra,4(sp)
    5494:	df000017 	ldw	fp,0(sp)
    5498:	dec00204 	addi	sp,sp,8
    549c:	f800283a 	ret

000054a0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    54a0:	defffe04 	addi	sp,sp,-8
    54a4:	dfc00115 	stw	ra,4(sp)
    54a8:	df000015 	stw	fp,0(sp)
    54ac:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    54b0:	01440004 	movi	r5,4096
    54b4:	0009883a 	mov	r4,zero
    54b8:	0005dc80 	call	5dc8 <alt_icache_flush>
#endif
}
    54bc:	0001883a 	nop
    54c0:	e037883a 	mov	sp,fp
    54c4:	dfc00117 	ldw	ra,4(sp)
    54c8:	df000017 	ldw	fp,0(sp)
    54cc:	dec00204 	addi	sp,sp,8
    54d0:	f800283a 	ret

000054d4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    54d4:	defff904 	addi	sp,sp,-28
    54d8:	dfc00615 	stw	ra,24(sp)
    54dc:	df000515 	stw	fp,20(sp)
    54e0:	df000504 	addi	fp,sp,20
    54e4:	e13ffc15 	stw	r4,-16(fp)
    54e8:	e17ffd15 	stw	r5,-12(fp)
    54ec:	e1bffe15 	stw	r6,-8(fp)
    54f0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    54f4:	e1bfff17 	ldw	r6,-4(fp)
    54f8:	e17ffe17 	ldw	r5,-8(fp)
    54fc:	e13ffd17 	ldw	r4,-12(fp)
    5500:	00058e00 	call	58e0 <open>
    5504:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    5508:	e0bffb17 	ldw	r2,-20(fp)
    550c:	10001c16 	blt	r2,zero,5580 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    5510:	00800034 	movhi	r2,0
    5514:	109acb04 	addi	r2,r2,27436
    5518:	e0fffb17 	ldw	r3,-20(fp)
    551c:	18c00324 	muli	r3,r3,12
    5520:	10c5883a 	add	r2,r2,r3
    5524:	10c00017 	ldw	r3,0(r2)
    5528:	e0bffc17 	ldw	r2,-16(fp)
    552c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    5530:	00800034 	movhi	r2,0
    5534:	109acb04 	addi	r2,r2,27436
    5538:	e0fffb17 	ldw	r3,-20(fp)
    553c:	18c00324 	muli	r3,r3,12
    5540:	10c5883a 	add	r2,r2,r3
    5544:	10800104 	addi	r2,r2,4
    5548:	10c00017 	ldw	r3,0(r2)
    554c:	e0bffc17 	ldw	r2,-16(fp)
    5550:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    5554:	00800034 	movhi	r2,0
    5558:	109acb04 	addi	r2,r2,27436
    555c:	e0fffb17 	ldw	r3,-20(fp)
    5560:	18c00324 	muli	r3,r3,12
    5564:	10c5883a 	add	r2,r2,r3
    5568:	10800204 	addi	r2,r2,8
    556c:	10c00017 	ldw	r3,0(r2)
    5570:	e0bffc17 	ldw	r2,-16(fp)
    5574:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    5578:	e13ffb17 	ldw	r4,-20(fp)
    557c:	0003d0c0 	call	3d0c <alt_release_fd>
  }
} 
    5580:	0001883a 	nop
    5584:	e037883a 	mov	sp,fp
    5588:	dfc00117 	ldw	ra,4(sp)
    558c:	df000017 	ldw	fp,0(sp)
    5590:	dec00204 	addi	sp,sp,8
    5594:	f800283a 	ret

00005598 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    5598:	defffb04 	addi	sp,sp,-20
    559c:	dfc00415 	stw	ra,16(sp)
    55a0:	df000315 	stw	fp,12(sp)
    55a4:	df000304 	addi	fp,sp,12
    55a8:	e13ffd15 	stw	r4,-12(fp)
    55ac:	e17ffe15 	stw	r5,-8(fp)
    55b0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    55b4:	01c07fc4 	movi	r7,511
    55b8:	01800044 	movi	r6,1
    55bc:	e17ffd17 	ldw	r5,-12(fp)
    55c0:	01000034 	movhi	r4,0
    55c4:	211ace04 	addi	r4,r4,27448
    55c8:	00054d40 	call	54d4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    55cc:	01c07fc4 	movi	r7,511
    55d0:	000d883a 	mov	r6,zero
    55d4:	e17ffe17 	ldw	r5,-8(fp)
    55d8:	01000034 	movhi	r4,0
    55dc:	211acb04 	addi	r4,r4,27436
    55e0:	00054d40 	call	54d4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    55e4:	01c07fc4 	movi	r7,511
    55e8:	01800044 	movi	r6,1
    55ec:	e17fff17 	ldw	r5,-4(fp)
    55f0:	01000034 	movhi	r4,0
    55f4:	211ad104 	addi	r4,r4,27460
    55f8:	00054d40 	call	54d4 <alt_open_fd>
}  
    55fc:	0001883a 	nop
    5600:	e037883a 	mov	sp,fp
    5604:	dfc00117 	ldw	ra,4(sp)
    5608:	df000017 	ldw	fp,0(sp)
    560c:	dec00204 	addi	sp,sp,8
    5610:	f800283a 	ret

00005614 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    5614:	defff004 	addi	sp,sp,-64
    5618:	df000f15 	stw	fp,60(sp)
    561c:	df000f04 	addi	fp,sp,60
    5620:	e13ffd15 	stw	r4,-12(fp)
    5624:	e17ffe15 	stw	r5,-8(fp)
    5628:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
    562c:	00bffa84 	movi	r2,-22
    5630:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    5634:	e0bffd17 	ldw	r2,-12(fp)
    5638:	10800828 	cmpgeui	r2,r2,32
    563c:	10005c1e 	bne	r2,zero,57b0 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5640:	0005303a 	rdctl	r2,status
    5644:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5648:	e0fff617 	ldw	r3,-40(fp)
    564c:	00bfff84 	movi	r2,-2
    5650:	1884703a 	and	r2,r3,r2
    5654:	1001703a 	wrctl	status,r2
  
  return context;
    5658:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    565c:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
    5660:	00800074 	movhi	r2,1
    5664:	10a61704 	addi	r2,r2,-26532
    5668:	e0fffd17 	ldw	r3,-12(fp)
    566c:	180690fa 	slli	r3,r3,3
    5670:	10c5883a 	add	r2,r2,r3
    5674:	e0ffff17 	ldw	r3,-4(fp)
    5678:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
    567c:	00800074 	movhi	r2,1
    5680:	10a61704 	addi	r2,r2,-26532
    5684:	e0fffd17 	ldw	r3,-12(fp)
    5688:	180690fa 	slli	r3,r3,3
    568c:	10c5883a 	add	r2,r2,r3
    5690:	10800104 	addi	r2,r2,4
    5694:	e0fffe17 	ldw	r3,-8(fp)
    5698:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    569c:	e0bfff17 	ldw	r2,-4(fp)
    56a0:	10001f26 	beq	r2,zero,5720 <alt_irq_register+0x10c>
    56a4:	e0bffd17 	ldw	r2,-12(fp)
    56a8:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    56ac:	0005303a 	rdctl	r2,status
    56b0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    56b4:	e0fff717 	ldw	r3,-36(fp)
    56b8:	00bfff84 	movi	r2,-2
    56bc:	1884703a 	and	r2,r3,r2
    56c0:	1001703a 	wrctl	status,r2
  
  return context;
    56c4:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    56c8:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    56cc:	00c00044 	movi	r3,1
    56d0:	e0bff217 	ldw	r2,-56(fp)
    56d4:	1884983a 	sll	r2,r3,r2
    56d8:	1007883a 	mov	r3,r2
    56dc:	00800074 	movhi	r2,1
    56e0:	10a60904 	addi	r2,r2,-26588
    56e4:	10800017 	ldw	r2,0(r2)
    56e8:	1886b03a 	or	r3,r3,r2
    56ec:	00800074 	movhi	r2,1
    56f0:	10a60904 	addi	r2,r2,-26588
    56f4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    56f8:	00800074 	movhi	r2,1
    56fc:	10a60904 	addi	r2,r2,-26588
    5700:	10800017 	ldw	r2,0(r2)
    5704:	100170fa 	wrctl	ienable,r2
    5708:	e0bff817 	ldw	r2,-32(fp)
    570c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5710:	e0bff917 	ldw	r2,-28(fp)
    5714:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    5718:	0005883a 	mov	r2,zero
    571c:	00001f06 	br	579c <alt_irq_register+0x188>
    5720:	e0bffd17 	ldw	r2,-12(fp)
    5724:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5728:	0005303a 	rdctl	r2,status
    572c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5730:	e0fffa17 	ldw	r3,-24(fp)
    5734:	00bfff84 	movi	r2,-2
    5738:	1884703a 	and	r2,r3,r2
    573c:	1001703a 	wrctl	status,r2
  
  return context;
    5740:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    5744:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
    5748:	00c00044 	movi	r3,1
    574c:	e0bff417 	ldw	r2,-48(fp)
    5750:	1884983a 	sll	r2,r3,r2
    5754:	0084303a 	nor	r2,zero,r2
    5758:	1007883a 	mov	r3,r2
    575c:	00800074 	movhi	r2,1
    5760:	10a60904 	addi	r2,r2,-26588
    5764:	10800017 	ldw	r2,0(r2)
    5768:	1886703a 	and	r3,r3,r2
    576c:	00800074 	movhi	r2,1
    5770:	10a60904 	addi	r2,r2,-26588
    5774:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    5778:	00800074 	movhi	r2,1
    577c:	10a60904 	addi	r2,r2,-26588
    5780:	10800017 	ldw	r2,0(r2)
    5784:	100170fa 	wrctl	ienable,r2
    5788:	e0bffb17 	ldw	r2,-20(fp)
    578c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5790:	e0bffc17 	ldw	r2,-16(fp)
    5794:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    5798:	0005883a 	mov	r2,zero
    579c:	e0bff115 	stw	r2,-60(fp)
    57a0:	e0bff317 	ldw	r2,-52(fp)
    57a4:	e0bff515 	stw	r2,-44(fp)
    57a8:	e0bff517 	ldw	r2,-44(fp)
    57ac:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    57b0:	e0bff117 	ldw	r2,-60(fp)
}
    57b4:	e037883a 	mov	sp,fp
    57b8:	df000017 	ldw	fp,0(sp)
    57bc:	dec00104 	addi	sp,sp,4
    57c0:	f800283a 	ret

000057c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    57c4:	defffe04 	addi	sp,sp,-8
    57c8:	dfc00115 	stw	ra,4(sp)
    57cc:	df000015 	stw	fp,0(sp)
    57d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    57d4:	00800034 	movhi	r2,0
    57d8:	109f5704 	addi	r2,r2,32092
    57dc:	10800017 	ldw	r2,0(r2)
    57e0:	10000526 	beq	r2,zero,57f8 <alt_get_errno+0x34>
    57e4:	00800034 	movhi	r2,0
    57e8:	109f5704 	addi	r2,r2,32092
    57ec:	10800017 	ldw	r2,0(r2)
    57f0:	103ee83a 	callr	r2
    57f4:	00000206 	br	5800 <alt_get_errno+0x3c>
    57f8:	00800074 	movhi	r2,1
    57fc:	10a60504 	addi	r2,r2,-26604
}
    5800:	e037883a 	mov	sp,fp
    5804:	dfc00117 	ldw	ra,4(sp)
    5808:	df000017 	ldw	fp,0(sp)
    580c:	dec00204 	addi	sp,sp,8
    5810:	f800283a 	ret

00005814 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    5814:	defffd04 	addi	sp,sp,-12
    5818:	df000215 	stw	fp,8(sp)
    581c:	df000204 	addi	fp,sp,8
    5820:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    5824:	e0bfff17 	ldw	r2,-4(fp)
    5828:	10800217 	ldw	r2,8(r2)
    582c:	10d00034 	orhi	r3,r2,16384
    5830:	e0bfff17 	ldw	r2,-4(fp)
    5834:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    5838:	e03ffe15 	stw	zero,-8(fp)
    583c:	00001d06 	br	58b4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    5840:	00800034 	movhi	r2,0
    5844:	109acb04 	addi	r2,r2,27436
    5848:	e0fffe17 	ldw	r3,-8(fp)
    584c:	18c00324 	muli	r3,r3,12
    5850:	10c5883a 	add	r2,r2,r3
    5854:	10c00017 	ldw	r3,0(r2)
    5858:	e0bfff17 	ldw	r2,-4(fp)
    585c:	10800017 	ldw	r2,0(r2)
    5860:	1880111e 	bne	r3,r2,58a8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    5864:	00800034 	movhi	r2,0
    5868:	109acb04 	addi	r2,r2,27436
    586c:	e0fffe17 	ldw	r3,-8(fp)
    5870:	18c00324 	muli	r3,r3,12
    5874:	10c5883a 	add	r2,r2,r3
    5878:	10800204 	addi	r2,r2,8
    587c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    5880:	1000090e 	bge	r2,zero,58a8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    5884:	e0bffe17 	ldw	r2,-8(fp)
    5888:	10c00324 	muli	r3,r2,12
    588c:	00800034 	movhi	r2,0
    5890:	109acb04 	addi	r2,r2,27436
    5894:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    5898:	e0bfff17 	ldw	r2,-4(fp)
    589c:	18800226 	beq	r3,r2,58a8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    58a0:	00bffcc4 	movi	r2,-13
    58a4:	00000a06 	br	58d0 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    58a8:	e0bffe17 	ldw	r2,-8(fp)
    58ac:	10800044 	addi	r2,r2,1
    58b0:	e0bffe15 	stw	r2,-8(fp)
    58b4:	00800034 	movhi	r2,0
    58b8:	109f5604 	addi	r2,r2,32088
    58bc:	10800017 	ldw	r2,0(r2)
    58c0:	1007883a 	mov	r3,r2
    58c4:	e0bffe17 	ldw	r2,-8(fp)
    58c8:	18bfdd2e 	bgeu	r3,r2,5840 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    58cc:	0005883a 	mov	r2,zero
}
    58d0:	e037883a 	mov	sp,fp
    58d4:	df000017 	ldw	fp,0(sp)
    58d8:	dec00104 	addi	sp,sp,4
    58dc:	f800283a 	ret

000058e0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    58e0:	defff604 	addi	sp,sp,-40
    58e4:	dfc00915 	stw	ra,36(sp)
    58e8:	df000815 	stw	fp,32(sp)
    58ec:	df000804 	addi	fp,sp,32
    58f0:	e13ffd15 	stw	r4,-12(fp)
    58f4:	e17ffe15 	stw	r5,-8(fp)
    58f8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    58fc:	00bfffc4 	movi	r2,-1
    5900:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    5904:	00bffb44 	movi	r2,-19
    5908:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    590c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    5910:	01400034 	movhi	r5,0
    5914:	295f5404 	addi	r5,r5,32080
    5918:	e13ffd17 	ldw	r4,-12(fp)
    591c:	00054100 	call	5410 <alt_find_dev>
    5920:	e0bff815 	stw	r2,-32(fp)
    5924:	e0bff817 	ldw	r2,-32(fp)
    5928:	1000051e 	bne	r2,zero,5940 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    592c:	e13ffd17 	ldw	r4,-12(fp)
    5930:	0005c000 	call	5c00 <alt_find_file>
    5934:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    5938:	00800044 	movi	r2,1
    593c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    5940:	e0bff817 	ldw	r2,-32(fp)
    5944:	10002926 	beq	r2,zero,59ec <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    5948:	e13ff817 	ldw	r4,-32(fp)
    594c:	0005d140 	call	5d14 <alt_get_fd>
    5950:	e0bff915 	stw	r2,-28(fp)
    5954:	e0bff917 	ldw	r2,-28(fp)
    5958:	1000030e 	bge	r2,zero,5968 <open+0x88>
    {
      status = index;
    595c:	e0bff917 	ldw	r2,-28(fp)
    5960:	e0bffa15 	stw	r2,-24(fp)
    5964:	00002306 	br	59f4 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
    5968:	e0bff917 	ldw	r2,-28(fp)
    596c:	10c00324 	muli	r3,r2,12
    5970:	00800034 	movhi	r2,0
    5974:	109acb04 	addi	r2,r2,27436
    5978:	1885883a 	add	r2,r3,r2
    597c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    5980:	e0fffe17 	ldw	r3,-8(fp)
    5984:	00900034 	movhi	r2,16384
    5988:	10bfffc4 	addi	r2,r2,-1
    598c:	1886703a 	and	r3,r3,r2
    5990:	e0bffc17 	ldw	r2,-16(fp)
    5994:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    5998:	e0bffb17 	ldw	r2,-20(fp)
    599c:	1000051e 	bne	r2,zero,59b4 <open+0xd4>
    59a0:	e13ffc17 	ldw	r4,-16(fp)
    59a4:	00058140 	call	5814 <alt_file_locked>
    59a8:	e0bffa15 	stw	r2,-24(fp)
    59ac:	e0bffa17 	ldw	r2,-24(fp)
    59b0:	10001016 	blt	r2,zero,59f4 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    59b4:	e0bff817 	ldw	r2,-32(fp)
    59b8:	10800317 	ldw	r2,12(r2)
    59bc:	10000826 	beq	r2,zero,59e0 <open+0x100>
    59c0:	e0bff817 	ldw	r2,-32(fp)
    59c4:	10800317 	ldw	r2,12(r2)
    59c8:	e1ffff17 	ldw	r7,-4(fp)
    59cc:	e1bffe17 	ldw	r6,-8(fp)
    59d0:	e17ffd17 	ldw	r5,-12(fp)
    59d4:	e13ffc17 	ldw	r4,-16(fp)
    59d8:	103ee83a 	callr	r2
    59dc:	00000106 	br	59e4 <open+0x104>
    59e0:	0005883a 	mov	r2,zero
    59e4:	e0bffa15 	stw	r2,-24(fp)
    59e8:	00000206 	br	59f4 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
    59ec:	00bffb44 	movi	r2,-19
    59f0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    59f4:	e0bffa17 	ldw	r2,-24(fp)
    59f8:	1000090e 	bge	r2,zero,5a20 <open+0x140>
  {
    alt_release_fd (index);  
    59fc:	e13ff917 	ldw	r4,-28(fp)
    5a00:	0003d0c0 	call	3d0c <alt_release_fd>
    ALT_ERRNO = -status;
    5a04:	00057c40 	call	57c4 <alt_get_errno>
    5a08:	1007883a 	mov	r3,r2
    5a0c:	e0bffa17 	ldw	r2,-24(fp)
    5a10:	0085c83a 	sub	r2,zero,r2
    5a14:	18800015 	stw	r2,0(r3)
    return -1;
    5a18:	00bfffc4 	movi	r2,-1
    5a1c:	00000106 	br	5a24 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    5a20:	e0bff917 	ldw	r2,-28(fp)
}
    5a24:	e037883a 	mov	sp,fp
    5a28:	dfc00117 	ldw	ra,4(sp)
    5a2c:	df000017 	ldw	fp,0(sp)
    5a30:	dec00204 	addi	sp,sp,8
    5a34:	f800283a 	ret

00005a38 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    5a38:	defffa04 	addi	sp,sp,-24
    5a3c:	df000515 	stw	fp,20(sp)
    5a40:	df000504 	addi	fp,sp,20
    5a44:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5a48:	0005303a 	rdctl	r2,status
    5a4c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5a50:	e0fffc17 	ldw	r3,-16(fp)
    5a54:	00bfff84 	movi	r2,-2
    5a58:	1884703a 	and	r2,r3,r2
    5a5c:	1001703a 	wrctl	status,r2
  
  return context;
    5a60:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    5a64:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    5a68:	e0bfff17 	ldw	r2,-4(fp)
    5a6c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    5a70:	e0bffd17 	ldw	r2,-12(fp)
    5a74:	10800017 	ldw	r2,0(r2)
    5a78:	e0fffd17 	ldw	r3,-12(fp)
    5a7c:	18c00117 	ldw	r3,4(r3)
    5a80:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    5a84:	e0bffd17 	ldw	r2,-12(fp)
    5a88:	10800117 	ldw	r2,4(r2)
    5a8c:	e0fffd17 	ldw	r3,-12(fp)
    5a90:	18c00017 	ldw	r3,0(r3)
    5a94:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    5a98:	e0bffd17 	ldw	r2,-12(fp)
    5a9c:	e0fffd17 	ldw	r3,-12(fp)
    5aa0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    5aa4:	e0bffd17 	ldw	r2,-12(fp)
    5aa8:	e0fffd17 	ldw	r3,-12(fp)
    5aac:	10c00015 	stw	r3,0(r2)
    5ab0:	e0bffb17 	ldw	r2,-20(fp)
    5ab4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5ab8:	e0bffe17 	ldw	r2,-8(fp)
    5abc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    5ac0:	0001883a 	nop
    5ac4:	e037883a 	mov	sp,fp
    5ac8:	df000017 	ldw	fp,0(sp)
    5acc:	dec00104 	addi	sp,sp,4
    5ad0:	f800283a 	ret

00005ad4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    5ad4:	defffb04 	addi	sp,sp,-20
    5ad8:	dfc00415 	stw	ra,16(sp)
    5adc:	df000315 	stw	fp,12(sp)
    5ae0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    5ae4:	d0a00c17 	ldw	r2,-32720(gp)
    5ae8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    5aec:	d0a6bd17 	ldw	r2,-25868(gp)
    5af0:	10800044 	addi	r2,r2,1
    5af4:	d0a6bd15 	stw	r2,-25868(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    5af8:	00002e06 	br	5bb4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    5afc:	e0bffd17 	ldw	r2,-12(fp)
    5b00:	10800017 	ldw	r2,0(r2)
    5b04:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    5b08:	e0bffd17 	ldw	r2,-12(fp)
    5b0c:	10800403 	ldbu	r2,16(r2)
    5b10:	10803fcc 	andi	r2,r2,255
    5b14:	10000426 	beq	r2,zero,5b28 <alt_tick+0x54>
    5b18:	d0a6bd17 	ldw	r2,-25868(gp)
    5b1c:	1000021e 	bne	r2,zero,5b28 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    5b20:	e0bffd17 	ldw	r2,-12(fp)
    5b24:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    5b28:	e0bffd17 	ldw	r2,-12(fp)
    5b2c:	10800217 	ldw	r2,8(r2)
    5b30:	d0e6bd17 	ldw	r3,-25868(gp)
    5b34:	18801d36 	bltu	r3,r2,5bac <alt_tick+0xd8>
    5b38:	e0bffd17 	ldw	r2,-12(fp)
    5b3c:	10800403 	ldbu	r2,16(r2)
    5b40:	10803fcc 	andi	r2,r2,255
    5b44:	1000191e 	bne	r2,zero,5bac <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    5b48:	e0bffd17 	ldw	r2,-12(fp)
    5b4c:	10800317 	ldw	r2,12(r2)
    5b50:	e0fffd17 	ldw	r3,-12(fp)
    5b54:	18c00517 	ldw	r3,20(r3)
    5b58:	1809883a 	mov	r4,r3
    5b5c:	103ee83a 	callr	r2
    5b60:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    5b64:	e0bfff17 	ldw	r2,-4(fp)
    5b68:	1000031e 	bne	r2,zero,5b78 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    5b6c:	e13ffd17 	ldw	r4,-12(fp)
    5b70:	0005a380 	call	5a38 <alt_alarm_stop>
    5b74:	00000d06 	br	5bac <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    5b78:	e0bffd17 	ldw	r2,-12(fp)
    5b7c:	10c00217 	ldw	r3,8(r2)
    5b80:	e0bfff17 	ldw	r2,-4(fp)
    5b84:	1887883a 	add	r3,r3,r2
    5b88:	e0bffd17 	ldw	r2,-12(fp)
    5b8c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    5b90:	e0bffd17 	ldw	r2,-12(fp)
    5b94:	10c00217 	ldw	r3,8(r2)
    5b98:	d0a6bd17 	ldw	r2,-25868(gp)
    5b9c:	1880032e 	bgeu	r3,r2,5bac <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    5ba0:	e0bffd17 	ldw	r2,-12(fp)
    5ba4:	00c00044 	movi	r3,1
    5ba8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    5bac:	e0bffe17 	ldw	r2,-8(fp)
    5bb0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    5bb4:	e0fffd17 	ldw	r3,-12(fp)
    5bb8:	d0a00c04 	addi	r2,gp,-32720
    5bbc:	18bfcf1e 	bne	r3,r2,5afc <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    5bc0:	0001883a 	nop
}
    5bc4:	0001883a 	nop
    5bc8:	e037883a 	mov	sp,fp
    5bcc:	dfc00117 	ldw	ra,4(sp)
    5bd0:	df000017 	ldw	fp,0(sp)
    5bd4:	dec00204 	addi	sp,sp,8
    5bd8:	f800283a 	ret

00005bdc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    5bdc:	deffff04 	addi	sp,sp,-4
    5be0:	df000015 	stw	fp,0(sp)
    5be4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    5be8:	000170fa 	wrctl	ienable,zero
}
    5bec:	0001883a 	nop
    5bf0:	e037883a 	mov	sp,fp
    5bf4:	df000017 	ldw	fp,0(sp)
    5bf8:	dec00104 	addi	sp,sp,4
    5bfc:	f800283a 	ret

00005c00 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    5c00:	defffb04 	addi	sp,sp,-20
    5c04:	dfc00415 	stw	ra,16(sp)
    5c08:	df000315 	stw	fp,12(sp)
    5c0c:	df000304 	addi	fp,sp,12
    5c10:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    5c14:	00800034 	movhi	r2,0
    5c18:	109f5204 	addi	r2,r2,32072
    5c1c:	10800017 	ldw	r2,0(r2)
    5c20:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    5c24:	00003106 	br	5cec <alt_find_file+0xec>
  {
    len = strlen(next->name);
    5c28:	e0bffd17 	ldw	r2,-12(fp)
    5c2c:	10800217 	ldw	r2,8(r2)
    5c30:	1009883a 	mov	r4,r2
    5c34:	00005f80 	call	5f8 <strlen>
    5c38:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    5c3c:	e0bffd17 	ldw	r2,-12(fp)
    5c40:	10c00217 	ldw	r3,8(r2)
    5c44:	e0bffe17 	ldw	r2,-8(fp)
    5c48:	10bfffc4 	addi	r2,r2,-1
    5c4c:	1885883a 	add	r2,r3,r2
    5c50:	10800003 	ldbu	r2,0(r2)
    5c54:	10803fcc 	andi	r2,r2,255
    5c58:	1080201c 	xori	r2,r2,128
    5c5c:	10bfe004 	addi	r2,r2,-128
    5c60:	10800bd8 	cmpnei	r2,r2,47
    5c64:	1000031e 	bne	r2,zero,5c74 <alt_find_file+0x74>
    {
      len -= 1;
    5c68:	e0bffe17 	ldw	r2,-8(fp)
    5c6c:	10bfffc4 	addi	r2,r2,-1
    5c70:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    5c74:	e0bffe17 	ldw	r2,-8(fp)
    5c78:	e0ffff17 	ldw	r3,-4(fp)
    5c7c:	1885883a 	add	r2,r3,r2
    5c80:	10800003 	ldbu	r2,0(r2)
    5c84:	10803fcc 	andi	r2,r2,255
    5c88:	1080201c 	xori	r2,r2,128
    5c8c:	10bfe004 	addi	r2,r2,-128
    5c90:	10800be0 	cmpeqi	r2,r2,47
    5c94:	1000081e 	bne	r2,zero,5cb8 <alt_find_file+0xb8>
    5c98:	e0bffe17 	ldw	r2,-8(fp)
    5c9c:	e0ffff17 	ldw	r3,-4(fp)
    5ca0:	1885883a 	add	r2,r3,r2
    5ca4:	10800003 	ldbu	r2,0(r2)
    5ca8:	10803fcc 	andi	r2,r2,255
    5cac:	1080201c 	xori	r2,r2,128
    5cb0:	10bfe004 	addi	r2,r2,-128
    5cb4:	10000a1e 	bne	r2,zero,5ce0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    5cb8:	e0bffd17 	ldw	r2,-12(fp)
    5cbc:	10800217 	ldw	r2,8(r2)
    5cc0:	e0fffe17 	ldw	r3,-8(fp)
    5cc4:	180d883a 	mov	r6,r3
    5cc8:	e17fff17 	ldw	r5,-4(fp)
    5ccc:	1009883a 	mov	r4,r2
    5cd0:	0005f400 	call	5f40 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    5cd4:	1000021e 	bne	r2,zero,5ce0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    5cd8:	e0bffd17 	ldw	r2,-12(fp)
    5cdc:	00000806 	br	5d00 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    5ce0:	e0bffd17 	ldw	r2,-12(fp)
    5ce4:	10800017 	ldw	r2,0(r2)
    5ce8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    5cec:	e0fffd17 	ldw	r3,-12(fp)
    5cf0:	00800034 	movhi	r2,0
    5cf4:	109f5204 	addi	r2,r2,32072
    5cf8:	18bfcb1e 	bne	r3,r2,5c28 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    5cfc:	0005883a 	mov	r2,zero
}
    5d00:	e037883a 	mov	sp,fp
    5d04:	dfc00117 	ldw	ra,4(sp)
    5d08:	df000017 	ldw	fp,0(sp)
    5d0c:	dec00204 	addi	sp,sp,8
    5d10:	f800283a 	ret

00005d14 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    5d14:	defffc04 	addi	sp,sp,-16
    5d18:	df000315 	stw	fp,12(sp)
    5d1c:	df000304 	addi	fp,sp,12
    5d20:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    5d24:	00bffa04 	movi	r2,-24
    5d28:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    5d2c:	e03ffd15 	stw	zero,-12(fp)
    5d30:	00001d06 	br	5da8 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    5d34:	00800034 	movhi	r2,0
    5d38:	109acb04 	addi	r2,r2,27436
    5d3c:	e0fffd17 	ldw	r3,-12(fp)
    5d40:	18c00324 	muli	r3,r3,12
    5d44:	10c5883a 	add	r2,r2,r3
    5d48:	10800017 	ldw	r2,0(r2)
    5d4c:	1000131e 	bne	r2,zero,5d9c <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    5d50:	00800034 	movhi	r2,0
    5d54:	109acb04 	addi	r2,r2,27436
    5d58:	e0fffd17 	ldw	r3,-12(fp)
    5d5c:	18c00324 	muli	r3,r3,12
    5d60:	10c5883a 	add	r2,r2,r3
    5d64:	e0ffff17 	ldw	r3,-4(fp)
    5d68:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    5d6c:	00800034 	movhi	r2,0
    5d70:	109f5604 	addi	r2,r2,32088
    5d74:	10c00017 	ldw	r3,0(r2)
    5d78:	e0bffd17 	ldw	r2,-12(fp)
    5d7c:	1880040e 	bge	r3,r2,5d90 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    5d80:	00800034 	movhi	r2,0
    5d84:	109f5604 	addi	r2,r2,32088
    5d88:	e0fffd17 	ldw	r3,-12(fp)
    5d8c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    5d90:	e0bffd17 	ldw	r2,-12(fp)
    5d94:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    5d98:	00000606 	br	5db4 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    5d9c:	e0bffd17 	ldw	r2,-12(fp)
    5da0:	10800044 	addi	r2,r2,1
    5da4:	e0bffd15 	stw	r2,-12(fp)
    5da8:	e0bffd17 	ldw	r2,-12(fp)
    5dac:	10800810 	cmplti	r2,r2,32
    5db0:	103fe01e 	bne	r2,zero,5d34 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    5db4:	e0bffe17 	ldw	r2,-8(fp)
}
    5db8:	e037883a 	mov	sp,fp
    5dbc:	df000017 	ldw	fp,0(sp)
    5dc0:	dec00104 	addi	sp,sp,4
    5dc4:	f800283a 	ret

00005dc8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    5dc8:	defffb04 	addi	sp,sp,-20
    5dcc:	df000415 	stw	fp,16(sp)
    5dd0:	df000404 	addi	fp,sp,16
    5dd4:	e13ffe15 	stw	r4,-8(fp)
    5dd8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    5ddc:	e0bfff17 	ldw	r2,-4(fp)
    5de0:	10840070 	cmpltui	r2,r2,4097
    5de4:	1000021e 	bne	r2,zero,5df0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    5de8:	00840004 	movi	r2,4096
    5dec:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    5df0:	e0fffe17 	ldw	r3,-8(fp)
    5df4:	e0bfff17 	ldw	r2,-4(fp)
    5df8:	1885883a 	add	r2,r3,r2
    5dfc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    5e00:	e0bffe17 	ldw	r2,-8(fp)
    5e04:	e0bffc15 	stw	r2,-16(fp)
    5e08:	00000506 	br	5e20 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    5e0c:	e0bffc17 	ldw	r2,-16(fp)
    5e10:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    5e14:	e0bffc17 	ldw	r2,-16(fp)
    5e18:	10800804 	addi	r2,r2,32
    5e1c:	e0bffc15 	stw	r2,-16(fp)
    5e20:	e0fffc17 	ldw	r3,-16(fp)
    5e24:	e0bffd17 	ldw	r2,-12(fp)
    5e28:	18bff836 	bltu	r3,r2,5e0c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    5e2c:	e0bffe17 	ldw	r2,-8(fp)
    5e30:	108007cc 	andi	r2,r2,31
    5e34:	10000226 	beq	r2,zero,5e40 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    5e38:	e0bffc17 	ldw	r2,-16(fp)
    5e3c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    5e40:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    5e44:	0001883a 	nop
    5e48:	e037883a 	mov	sp,fp
    5e4c:	df000017 	ldw	fp,0(sp)
    5e50:	dec00104 	addi	sp,sp,4
    5e54:	f800283a 	ret

00005e58 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    5e58:	defffe04 	addi	sp,sp,-8
    5e5c:	df000115 	stw	fp,4(sp)
    5e60:	df000104 	addi	fp,sp,4
    5e64:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    5e68:	e0bfff17 	ldw	r2,-4(fp)
    5e6c:	10bffe84 	addi	r2,r2,-6
    5e70:	10c00428 	cmpgeui	r3,r2,16
    5e74:	18001a1e 	bne	r3,zero,5ee0 <alt_exception_cause_generated_bad_addr+0x88>
    5e78:	100690ba 	slli	r3,r2,2
    5e7c:	00800034 	movhi	r2,0
    5e80:	1097a404 	addi	r2,r2,24208
    5e84:	1885883a 	add	r2,r3,r2
    5e88:	10800017 	ldw	r2,0(r2)
    5e8c:	1000683a 	jmp	r2
    5e90:	00005ed0 	cmplti	zero,zero,379
    5e94:	00005ed0 	cmplti	zero,zero,379
    5e98:	00005ee0 	cmpeqi	zero,zero,379
    5e9c:	00005ee0 	cmpeqi	zero,zero,379
    5ea0:	00005ee0 	cmpeqi	zero,zero,379
    5ea4:	00005ed0 	cmplti	zero,zero,379
    5ea8:	00005ed8 	cmpnei	zero,zero,379
    5eac:	00005ee0 	cmpeqi	zero,zero,379
    5eb0:	00005ed0 	cmplti	zero,zero,379
    5eb4:	00005ed0 	cmplti	zero,zero,379
    5eb8:	00005ee0 	cmpeqi	zero,zero,379
    5ebc:	00005ed0 	cmplti	zero,zero,379
    5ec0:	00005ed8 	cmpnei	zero,zero,379
    5ec4:	00005ee0 	cmpeqi	zero,zero,379
    5ec8:	00005ee0 	cmpeqi	zero,zero,379
    5ecc:	00005ed0 	cmplti	zero,zero,379
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    5ed0:	00800044 	movi	r2,1
    5ed4:	00000306 	br	5ee4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    5ed8:	0005883a 	mov	r2,zero
    5edc:	00000106 	br	5ee4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    5ee0:	0005883a 	mov	r2,zero
  }
}
    5ee4:	e037883a 	mov	sp,fp
    5ee8:	df000017 	ldw	fp,0(sp)
    5eec:	dec00104 	addi	sp,sp,4
    5ef0:	f800283a 	ret

00005ef4 <atexit>:
    5ef4:	200b883a 	mov	r5,r4
    5ef8:	000f883a 	mov	r7,zero
    5efc:	000d883a 	mov	r6,zero
    5f00:	0009883a 	mov	r4,zero
    5f04:	0005fbc1 	jmpi	5fbc <__register_exitproc>

00005f08 <exit>:
    5f08:	defffe04 	addi	sp,sp,-8
    5f0c:	000b883a 	mov	r5,zero
    5f10:	dc000015 	stw	r16,0(sp)
    5f14:	dfc00115 	stw	ra,4(sp)
    5f18:	2021883a 	mov	r16,r4
    5f1c:	00060d40 	call	60d4 <__call_exitprocs>
    5f20:	00800034 	movhi	r2,0
    5f24:	109f4e04 	addi	r2,r2,32056
    5f28:	11000017 	ldw	r4,0(r2)
    5f2c:	20800f17 	ldw	r2,60(r4)
    5f30:	10000126 	beq	r2,zero,5f38 <exit+0x30>
    5f34:	103ee83a 	callr	r2
    5f38:	8009883a 	mov	r4,r16
    5f3c:	00062540 	call	6254 <_exit>

00005f40 <memcmp>:
    5f40:	01c000c4 	movi	r7,3
    5f44:	3980192e 	bgeu	r7,r6,5fac <memcmp+0x6c>
    5f48:	2144b03a 	or	r2,r4,r5
    5f4c:	11c4703a 	and	r2,r2,r7
    5f50:	10000f26 	beq	r2,zero,5f90 <memcmp+0x50>
    5f54:	20800003 	ldbu	r2,0(r4)
    5f58:	28c00003 	ldbu	r3,0(r5)
    5f5c:	10c0151e 	bne	r2,r3,5fb4 <memcmp+0x74>
    5f60:	31bfff84 	addi	r6,r6,-2
    5f64:	01ffffc4 	movi	r7,-1
    5f68:	00000406 	br	5f7c <memcmp+0x3c>
    5f6c:	20800003 	ldbu	r2,0(r4)
    5f70:	28c00003 	ldbu	r3,0(r5)
    5f74:	31bfffc4 	addi	r6,r6,-1
    5f78:	10c00e1e 	bne	r2,r3,5fb4 <memcmp+0x74>
    5f7c:	21000044 	addi	r4,r4,1
    5f80:	29400044 	addi	r5,r5,1
    5f84:	31fff91e 	bne	r6,r7,5f6c <memcmp+0x2c>
    5f88:	0005883a 	mov	r2,zero
    5f8c:	f800283a 	ret
    5f90:	20c00017 	ldw	r3,0(r4)
    5f94:	28800017 	ldw	r2,0(r5)
    5f98:	18bfee1e 	bne	r3,r2,5f54 <memcmp+0x14>
    5f9c:	31bfff04 	addi	r6,r6,-4
    5fa0:	21000104 	addi	r4,r4,4
    5fa4:	29400104 	addi	r5,r5,4
    5fa8:	39bff936 	bltu	r7,r6,5f90 <memcmp+0x50>
    5fac:	303fe91e 	bne	r6,zero,5f54 <memcmp+0x14>
    5fb0:	003ff506 	br	5f88 <memcmp+0x48>
    5fb4:	10c5c83a 	sub	r2,r2,r3
    5fb8:	f800283a 	ret

00005fbc <__register_exitproc>:
    5fbc:	defffa04 	addi	sp,sp,-24
    5fc0:	dc000315 	stw	r16,12(sp)
    5fc4:	04000034 	movhi	r16,0
    5fc8:	841f4e04 	addi	r16,r16,32056
    5fcc:	80c00017 	ldw	r3,0(r16)
    5fd0:	dc400415 	stw	r17,16(sp)
    5fd4:	dfc00515 	stw	ra,20(sp)
    5fd8:	18805217 	ldw	r2,328(r3)
    5fdc:	2023883a 	mov	r17,r4
    5fe0:	10003726 	beq	r2,zero,60c0 <__register_exitproc+0x104>
    5fe4:	10c00117 	ldw	r3,4(r2)
    5fe8:	010007c4 	movi	r4,31
    5fec:	20c00e16 	blt	r4,r3,6028 <__register_exitproc+0x6c>
    5ff0:	1a000044 	addi	r8,r3,1
    5ff4:	8800221e 	bne	r17,zero,6080 <__register_exitproc+0xc4>
    5ff8:	18c00084 	addi	r3,r3,2
    5ffc:	18c7883a 	add	r3,r3,r3
    6000:	18c7883a 	add	r3,r3,r3
    6004:	12000115 	stw	r8,4(r2)
    6008:	10c7883a 	add	r3,r2,r3
    600c:	19400015 	stw	r5,0(r3)
    6010:	0005883a 	mov	r2,zero
    6014:	dfc00517 	ldw	ra,20(sp)
    6018:	dc400417 	ldw	r17,16(sp)
    601c:	dc000317 	ldw	r16,12(sp)
    6020:	dec00604 	addi	sp,sp,24
    6024:	f800283a 	ret
    6028:	00800034 	movhi	r2,0
    602c:	10800004 	addi	r2,r2,0
    6030:	10002626 	beq	r2,zero,60cc <__register_exitproc+0x110>
    6034:	01006404 	movi	r4,400
    6038:	d9400015 	stw	r5,0(sp)
    603c:	d9800115 	stw	r6,4(sp)
    6040:	d9c00215 	stw	r7,8(sp)
    6044:	00000000 	call	0 <__alt_mem_SDRAM>
    6048:	d9400017 	ldw	r5,0(sp)
    604c:	d9800117 	ldw	r6,4(sp)
    6050:	d9c00217 	ldw	r7,8(sp)
    6054:	10001d26 	beq	r2,zero,60cc <__register_exitproc+0x110>
    6058:	81000017 	ldw	r4,0(r16)
    605c:	10000115 	stw	zero,4(r2)
    6060:	02000044 	movi	r8,1
    6064:	22405217 	ldw	r9,328(r4)
    6068:	0007883a 	mov	r3,zero
    606c:	12400015 	stw	r9,0(r2)
    6070:	20805215 	stw	r2,328(r4)
    6074:	10006215 	stw	zero,392(r2)
    6078:	10006315 	stw	zero,396(r2)
    607c:	883fde26 	beq	r17,zero,5ff8 <__register_exitproc+0x3c>
    6080:	18c9883a 	add	r4,r3,r3
    6084:	2109883a 	add	r4,r4,r4
    6088:	1109883a 	add	r4,r2,r4
    608c:	21802215 	stw	r6,136(r4)
    6090:	01800044 	movi	r6,1
    6094:	12406217 	ldw	r9,392(r2)
    6098:	30cc983a 	sll	r6,r6,r3
    609c:	4992b03a 	or	r9,r9,r6
    60a0:	12406215 	stw	r9,392(r2)
    60a4:	21c04215 	stw	r7,264(r4)
    60a8:	01000084 	movi	r4,2
    60ac:	893fd21e 	bne	r17,r4,5ff8 <__register_exitproc+0x3c>
    60b0:	11006317 	ldw	r4,396(r2)
    60b4:	218cb03a 	or	r6,r4,r6
    60b8:	11806315 	stw	r6,396(r2)
    60bc:	003fce06 	br	5ff8 <__register_exitproc+0x3c>
    60c0:	18805304 	addi	r2,r3,332
    60c4:	18805215 	stw	r2,328(r3)
    60c8:	003fc606 	br	5fe4 <__register_exitproc+0x28>
    60cc:	00bfffc4 	movi	r2,-1
    60d0:	003fd006 	br	6014 <__register_exitproc+0x58>

000060d4 <__call_exitprocs>:
    60d4:	defff504 	addi	sp,sp,-44
    60d8:	df000915 	stw	fp,36(sp)
    60dc:	dd400615 	stw	r21,24(sp)
    60e0:	dc800315 	stw	r18,12(sp)
    60e4:	dfc00a15 	stw	ra,40(sp)
    60e8:	ddc00815 	stw	r23,32(sp)
    60ec:	dd800715 	stw	r22,28(sp)
    60f0:	dd000515 	stw	r20,20(sp)
    60f4:	dcc00415 	stw	r19,16(sp)
    60f8:	dc400215 	stw	r17,8(sp)
    60fc:	dc000115 	stw	r16,4(sp)
    6100:	d9000015 	stw	r4,0(sp)
    6104:	2839883a 	mov	fp,r5
    6108:	04800044 	movi	r18,1
    610c:	057fffc4 	movi	r21,-1
    6110:	00800034 	movhi	r2,0
    6114:	109f4e04 	addi	r2,r2,32056
    6118:	12000017 	ldw	r8,0(r2)
    611c:	45005217 	ldw	r20,328(r8)
    6120:	44c05204 	addi	r19,r8,328
    6124:	a0001c26 	beq	r20,zero,6198 <__call_exitprocs+0xc4>
    6128:	a0800117 	ldw	r2,4(r20)
    612c:	15ffffc4 	addi	r23,r2,-1
    6130:	b8000d16 	blt	r23,zero,6168 <__call_exitprocs+0x94>
    6134:	14000044 	addi	r16,r2,1
    6138:	8421883a 	add	r16,r16,r16
    613c:	8421883a 	add	r16,r16,r16
    6140:	84402004 	addi	r17,r16,128
    6144:	a463883a 	add	r17,r20,r17
    6148:	a421883a 	add	r16,r20,r16
    614c:	e0001e26 	beq	fp,zero,61c8 <__call_exitprocs+0xf4>
    6150:	80804017 	ldw	r2,256(r16)
    6154:	e0801c26 	beq	fp,r2,61c8 <__call_exitprocs+0xf4>
    6158:	bdffffc4 	addi	r23,r23,-1
    615c:	843fff04 	addi	r16,r16,-4
    6160:	8c7fff04 	addi	r17,r17,-4
    6164:	bd7ff91e 	bne	r23,r21,614c <__call_exitprocs+0x78>
    6168:	00800034 	movhi	r2,0
    616c:	10800004 	addi	r2,r2,0
    6170:	10000926 	beq	r2,zero,6198 <__call_exitprocs+0xc4>
    6174:	a0800117 	ldw	r2,4(r20)
    6178:	1000301e 	bne	r2,zero,623c <__call_exitprocs+0x168>
    617c:	a0800017 	ldw	r2,0(r20)
    6180:	10003226 	beq	r2,zero,624c <__call_exitprocs+0x178>
    6184:	a009883a 	mov	r4,r20
    6188:	98800015 	stw	r2,0(r19)
    618c:	00000000 	call	0 <__alt_mem_SDRAM>
    6190:	9d000017 	ldw	r20,0(r19)
    6194:	a03fe41e 	bne	r20,zero,6128 <__call_exitprocs+0x54>
    6198:	dfc00a17 	ldw	ra,40(sp)
    619c:	df000917 	ldw	fp,36(sp)
    61a0:	ddc00817 	ldw	r23,32(sp)
    61a4:	dd800717 	ldw	r22,28(sp)
    61a8:	dd400617 	ldw	r21,24(sp)
    61ac:	dd000517 	ldw	r20,20(sp)
    61b0:	dcc00417 	ldw	r19,16(sp)
    61b4:	dc800317 	ldw	r18,12(sp)
    61b8:	dc400217 	ldw	r17,8(sp)
    61bc:	dc000117 	ldw	r16,4(sp)
    61c0:	dec00b04 	addi	sp,sp,44
    61c4:	f800283a 	ret
    61c8:	a0800117 	ldw	r2,4(r20)
    61cc:	80c00017 	ldw	r3,0(r16)
    61d0:	10bfffc4 	addi	r2,r2,-1
    61d4:	15c01426 	beq	r2,r23,6228 <__call_exitprocs+0x154>
    61d8:	80000015 	stw	zero,0(r16)
    61dc:	183fde26 	beq	r3,zero,6158 <__call_exitprocs+0x84>
    61e0:	95c8983a 	sll	r4,r18,r23
    61e4:	a0806217 	ldw	r2,392(r20)
    61e8:	a5800117 	ldw	r22,4(r20)
    61ec:	2084703a 	and	r2,r4,r2
    61f0:	10000b26 	beq	r2,zero,6220 <__call_exitprocs+0x14c>
    61f4:	a0806317 	ldw	r2,396(r20)
    61f8:	2088703a 	and	r4,r4,r2
    61fc:	20000c1e 	bne	r4,zero,6230 <__call_exitprocs+0x15c>
    6200:	89400017 	ldw	r5,0(r17)
    6204:	d9000017 	ldw	r4,0(sp)
    6208:	183ee83a 	callr	r3
    620c:	a0800117 	ldw	r2,4(r20)
    6210:	15bfbf1e 	bne	r2,r22,6110 <__call_exitprocs+0x3c>
    6214:	98800017 	ldw	r2,0(r19)
    6218:	153fcf26 	beq	r2,r20,6158 <__call_exitprocs+0x84>
    621c:	003fbc06 	br	6110 <__call_exitprocs+0x3c>
    6220:	183ee83a 	callr	r3
    6224:	003ff906 	br	620c <__call_exitprocs+0x138>
    6228:	a5c00115 	stw	r23,4(r20)
    622c:	003feb06 	br	61dc <__call_exitprocs+0x108>
    6230:	89000017 	ldw	r4,0(r17)
    6234:	183ee83a 	callr	r3
    6238:	003ff406 	br	620c <__call_exitprocs+0x138>
    623c:	a0800017 	ldw	r2,0(r20)
    6240:	a027883a 	mov	r19,r20
    6244:	1029883a 	mov	r20,r2
    6248:	003fb606 	br	6124 <__call_exitprocs+0x50>
    624c:	0005883a 	mov	r2,zero
    6250:	003ffb06 	br	6240 <__call_exitprocs+0x16c>

00006254 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    6254:	defffd04 	addi	sp,sp,-12
    6258:	df000215 	stw	fp,8(sp)
    625c:	df000204 	addi	fp,sp,8
    6260:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    6264:	0001883a 	nop
    6268:	e0bfff17 	ldw	r2,-4(fp)
    626c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    6270:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    6274:	10000226 	beq	r2,zero,6280 <_exit+0x2c>
    ALT_SIM_FAIL();
    6278:	002af070 	cmpltui	zero,zero,43969
    627c:	00000106 	br	6284 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    6280:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    6284:	003fff06 	br	6284 <_exit+0x30>
