
sw_design.elf:     file format elf32-littlenios2
sw_design.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000fb3c memsz 0x0000fb3c flags r-x
    LOAD off    0x00010b5c vaddr 0x0000fb5c paddr 0x00011674 align 2**12
         filesz 0x00001b18 memsz 0x00001b18 flags rw-
    LOAD off    0x0001318c vaddr 0x0001318c paddr 0x0001318c align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f5d8  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000033c  0000f820  0000f820  00010820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b18  0000fb5c  00011674  00010b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  0001318c  0001318c  0001318c  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  000132ec  000132ec  00012674  2**0
                  CONTENTS
  7 .SRAM         00000000  04020000  04020000  00012674  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00012674  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000eb8  00000000  00000000  00012698  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000239a7  00000000  00000000  00013550  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000090b8  00000000  00000000  00036ef7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b6d0  00000000  00000000  0003ffaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000216c  00000000  00000000  0004b680  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003920  00000000  00000000  0004d7ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017b46  00000000  00000000  0005110c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00068c54  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018c0  00000000  00000000  00068c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006d7c1  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000b  00000000  00000000  0006d7c4  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006d7cf  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006d7d0  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006d7d1  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006d7d5  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006d7d9  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000004  00000000  00000000  0006d7dd  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000004  00000000  00000000  0006d7e1  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000004  00000000  00000000  0006d7e5  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000a  00000000  00000000  0006d7e9  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001b  00000000  00000000  0006d7f3  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00069b25  00000000  00000000  0006d80e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
0000f820 l    d  .rodata	00000000 .rodata
0000fb5c l    d  .rwdata	00000000 .rwdata
0001318c l    d  .bss	00000000 .bss
000132ec l    d  .SDRAM	00000000 .SDRAM
04020000 l    d  .SRAM	00000000 .SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../sw_design_bsp//obj/HAL/src/crt0.o
00000290 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000f8a2 l     O .rodata	00000010 zeroes.4404
00002798 l     F .text	000000bc __sbprintf
0000f8b2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000029a8 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000044d8 l     F .text	00000008 __fp_unlock
000044ec l     F .text	0000019c __sinit.part.1
00004688 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000fb5c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0000ffa0 l     O .rwdata	00000020 lc_ctype_charset
0000ff80 l     O .rwdata	00000020 lc_message_charset
0000ffc0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000f8e4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00007a84 l     F .text	000000fc __sprint_r.part.0
0000fa18 l     O .rodata	00000010 blanks.4348
0000fa08 l     O .rodata	00000010 zeroes.4349
00009010 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000cccc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000cdec l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000ce18 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000cf18 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000d00c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000d0f8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000d2e0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00011664 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000d540 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000d688 l     F .text	00000038 alt_dev_reg
000105a8 l     O .rwdata	00001060 JTAG
00011608 l     O .rwdata	0000002c UART_COM
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000d988 l     F .text	00000210 altera_avalon_jtag_uart_irq
0000db98 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000e1d8 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000e7f4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000ea6c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000ed5c l     F .text	00000050 alt_get_errno
0000edac l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000131c0 g     O .bss	00000004 alt_instruction_exception_handler
000070c8 g     F .text	00000074 _mprec_log10
000071b4 g     F .text	0000008c __any_on
000095ac g     F .text	00000054 _isatty_r
0000f8f0 g     O .rodata	00000028 __mprec_tinytens
0000d21c g     F .text	0000007c alt_main
00000418 g     F .text	000000c0 _puts_r
000131ec g     O .bss	00000100 alt_irq
00009600 g     F .text	00000060 _lseek_r
00011674 g       *ABS*	00000000 __flash_rwdata_start
0000b7f8 g     F .text	00000088 .hidden __eqdf2
000132ec g       *ABS*	00000000 __alt_heap_start
000003dc g     F .text	0000003c printf
00009818 g     F .text	0000009c _wcrtomb_r
00007944 g     F .text	0000005c __sseek
00004828 g     F .text	00000010 __sinit
000096c0 g     F .text	00000140 __swbuf_r
000052f0 g     F .text	0000007c _setlocale_r
00004690 g     F .text	00000068 __sfmoreglue
0000d2bc g     F .text	00000024 __malloc_unlock
0000e508 g     F .text	00000090 alt_up_rs232_read_fd
00005fc0 g     F .text	0000015c memmove
00004810 g     F .text	00000018 _cleanup
00006244 g     F .text	000000a8 _Balloc
0000b880 g     F .text	000000dc .hidden __gtdf2
0000f174 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00009550 g     F .text	0000005c _fstat_r
000131a4 g     O .bss	00000004 errno
000078c0 g     F .text	00000008 __seofread
000131ac g     O .bss	00000004 alt_argv
00019634 g       *ABS*	00000000 _gp
00010428 g     O .rwdata	00000180 alt_fd_list
0000e9a8 g     F .text	00000090 alt_find_dev
00005e78 g     F .text	00000148 memcpy
000044e0 g     F .text	0000000c _cleanup_r
0000cae4 g     F .text	000000dc .hidden __floatsidf
0000eb30 g     F .text	0000007c alt_io_redirect
0000b95c g     F .text	000000f4 .hidden __ltdf2
0000f820 g       *ABS*	00000000 __DTOR_END__
0000e494 g     F .text	00000074 alt_up_rs232_read_data
000004d8 g     F .text	00000014 puts
0000f3f0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000077a4 g     F .text	00000074 __fpclassifyd
00007024 g     F .text	000000a4 __ratio
00008ff4 g     F .text	0000001c __vfiprintf_internal
0000dd98 g     F .text	0000021c altera_avalon_jtag_uart_read
000003ac g     F .text	00000030 _printf_r
0000a5a8 g     F .text	00000064 .hidden __udivsi3
0000cf68 g     F .text	000000a4 isatty
0000f940 g     O .rodata	000000c8 __mprec_tens
0000536c g     F .text	0000000c __locale_charset
0000f360 g     F .text	00000090 alt_icache_flush
000131a0 g     O .bss	00000004 __malloc_top_pad
0001163c g     O .rwdata	00000004 __mb_cur_max
0000539c g     F .text	0000000c _localeconv_r
00006650 g     F .text	0000003c __i2b
00004cac g     F .text	000004bc __sfvwrite_r
00007818 g     F .text	00000054 _sbrk_r
00009660 g     F .text	00000060 _read_r
0001165c g     O .rwdata	00000004 alt_max_fd
0000e410 g     F .text	00000044 alt_up_rs232_check_parity
00009244 g     F .text	000000f0 _fclose_r
000044a8 g     F .text	00000030 fflush
0001319c g     O .bss	00000004 __malloc_max_sbrked_mem
0000ebac g     F .text	000001b0 alt_irq_register
0000a664 g     F .text	000008ac .hidden __adddf3
00006dcc g     F .text	0000010c __b2d
00009f78 g     F .text	00000538 .hidden __umoddi3
0000d148 g     F .text	000000d4 lseek
00011634 g     O .rwdata	00000004 _global_impure_ptr
00007240 g     F .text	00000564 _realloc_r
000132ec g       *ABS*	00000000 __bss_end
0000f06c g     F .text	00000108 alt_tick
00009a00 g     F .text	00000578 .hidden __udivdi3
000094ac g     F .text	00000024 _fputwc_r
0000f918 g     O .rodata	00000028 __mprec_bigtens
00006434 g     F .text	00000104 __s2b
0000cbc0 g     F .text	000000a8 .hidden __floatunsidf
00006b0c g     F .text	00000060 __mcmp
00004848 g     F .text	00000018 __fp_lock_all
0000efd0 g     F .text	0000009c alt_alarm_stop
000131b4 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d8 alt_irq_handler
00010400 g     O .rwdata	00000028 alt_dev_null
0000e7ac g     F .text	00000048 alt_dcache_flush_all
00006538 g     F .text	00000068 __hi0bits
0000ca64 g     F .text	00000080 .hidden __fixdfsi
00011674 g       *ABS*	00000000 __ram_rwdata_end
00011654 g     O .rwdata	00000008 alt_dev_list
0000d590 g     F .text	000000f8 write
0000fb5c g       *ABS*	00000000 __ram_rodata_end
0000ce68 g     F .text	000000b0 fstat
0000e598 g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000b95c g     F .text	000000f4 .hidden __ledf2
00006884 g     F .text	00000140 __pow5mult
00007b98 g     F .text	0000145c ___vfiprintf_internal_r
00013194 g     O .bss	00000004 __nlocale_changed
0000a60c g     F .text	00000058 .hidden __umodsi3
000132ec g       *ABS*	00000000 end
0000d8cc g     F .text	000000bc altera_avalon_jtag_uart_init
000001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
0000f820 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0000e254 g     F .text	00000084 alt_avalon_timer_sc_init
0000cc68 g     F .text	00000064 .hidden __clzsi2
0000dfb4 g     F .text	00000224 altera_avalon_jtag_uart_write
00004838 g     F .text	00000004 __sfp_lock_acquire
00005d94 g     F .text	000000e4 memchr
00000584 g     F .text	000021f8 ___vfprintf_internal_r
0000499c g     F .text	00000310 _free_r
00005378 g     F .text	00000010 __locale_mb_cur_max
0000f66c g     F .text	00000180 __call_exitprocs
00013190 g     O .bss	00000004 __mlocale_changed
00011640 g     O .rwdata	00000004 __malloc_sbrk_base
00000248 g     F .text	0000004c _start
000131b8 g     O .bss	00000004 _alt_tick_rate
000069c4 g     F .text	00000148 __lshift
000131bc g     O .bss	00000004 _alt_nticks
0000d330 g     F .text	000000fc read
0000d6f8 g     F .text	00000070 alt_sys_init
0000f554 g     F .text	00000118 __register_exitproc
0000e3d4 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
0000668c g     F .text	000001f8 __multiply
0000dc40 g     F .text	00000068 altera_avalon_jtag_uart_close
0000fb5c g       *ABS*	00000000 __ram_rwdata_start
0000f820 g       *ABS*	00000000 __ram_rodata_start
000131c4 g     O .bss	00000028 __malloc_current_mallinfo
00006ed8 g     F .text	0000014c __d2b
0000d768 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000f2ac g     F .text	000000b4 alt_get_fd
0000912c g     F .text	00000054 _close_r
0000f4d8 g     F .text	0000007c memcmp
0000d828 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000132ec g       *ABS*	00000000 __alt_stack_base
0000d878 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00002854 g     F .text	00000154 __swsetup_r
0000af10 g     F .text	000008e8 .hidden __divdf3
000046f8 g     F .text	00000118 __sfp
0000713c g     F .text	00000078 __copybits
0000fff8 g     O .rwdata	00000408 __malloc_av_
00004844 g     F .text	00000004 __sinit_lock_release
0000ba50 g     F .text	00000718 .hidden __muldf3
0000786c g     F .text	00000054 __sread
0000e334 g     F .text	00000060 alt_up_rs232_disable_read_interrupt
0000f198 g     F .text	00000114 alt_find_file
0000e844 g     F .text	000000a4 alt_dev_llist_insert
0000d298 g     F .text	00000024 __malloc_lock
0000d490 g     F .text	000000b0 sbrk
0000444c g     F .text	0000005c _fflush_r
00009180 g     F .text	000000c4 _calloc_r
0001318c g       *ABS*	00000000 __bss_start
0000611c g     F .text	00000128 memset
000002b8 g     F .text	000000f4 main
000131b0 g     O .bss	00000004 alt_envp
00013198 g     O .bss	00000004 __malloc_max_total_mem
0000d7c8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00009800 g     F .text	00000018 __swbuf
000079a0 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
00009334 g     F .text	00000014 fclose
00002ba8 g     F .text	00001688 _dtoa_r
00005588 g     F .text	0000080c _malloc_r
00009974 g     F .text	00000030 __ascii_wctomb
00011660 g     O .rwdata	00000004 alt_errno
00005168 g     F .text	000000c4 _fwalk
0000a4b0 g     F .text	00000084 .hidden __divsi3
00004878 g     F .text	00000124 _malloc_trim_r
0000f820 g       *ABS*	00000000 __CTOR_END__
000079a8 g     F .text	000000dc strcmp
0000f820 g       *ABS*	00000000 __flash_rodata_start
0000f820 g       *ABS*	00000000 __DTOR_LIST__
0000e62c g     F .text	00000040 alt_up_rs232_open_dev
0000b7f8 g     F .text	00000088 .hidden __nedf2
0000d6c0 g     F .text	00000038 alt_irq_init
0000d42c g     F .text	00000064 alt_release_fd
0000fa28 g     O .rodata	00000100 .hidden __clz_tab
0001318c g     O .bss	00000004 _PathLocale
00000294 g     F .text	00000024 caculate_convolution
0000f48c g     F .text	00000014 atexit
000090cc g     F .text	00000060 _write_r
000053a8 g     F .text	00000018 setlocale
00011638 g     O .rwdata	00000004 _impure_ptr
000131a8 g     O .bss	00000004 alt_argc
00004230 g     F .text	0000021c __sflush_r
0000e948 g     F .text	00000060 _do_dtors
00005394 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00006d68 g     F .text	00000064 __ulp
00004860 g     F .text	00000018 __fp_unlock_all
0001164c g     O .rwdata	00000008 alt_fs_list
0000e2d8 g     F .text	0000005c alt_up_rs232_enable_read_interrupt
0000e454 g     F .text	00000040 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
000053c0 g     F .text	0000000c localeconv
00011674 g       *ABS*	00000000 _edata
000132ec g       *ABS*	00000000 _end
00009348 g     F .text	00000164 __fputwc
00000248 g       *ABS*	00000000 __ram_exceptions_end
0000dca8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000078c8 g     F .text	0000007c __swrite
00011644 g     O .rwdata	00000004 __malloc_trim_threshold
00005388 g     F .text	0000000c __locale_msgcharset
0000f4a0 g     F .text	00000038 exit
0000522c g     F .text	000000c4 _fwalk_reent
00006b6c g     F .text	000001fc __mdiff
0000a534 g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000483c g     F .text	00000004 __sfp_lock_release
0000f7ec g     F .text	00000034 _exit
0000e66c g     F .text	00000140 alt_alarm_start
000053cc g     F .text	000001bc __smakebuf_r
000004ec g     F .text	00000098 strlen
0000ee78 g     F .text	00000158 open
0000b880 g     F .text	000000dc .hidden __gedf2
00011648 g     O .rwdata	00000004 __wctomb
04020000 g       *ABS*	00000000 __alt_mem_SRAM
00007b80 g     F .text	00000018 __sprint_r
0000ea38 g     F .text	00000034 alt_icache_flush_all
00011668 g     O .rwdata	00000004 alt_priority_mask
0000277c g     F .text	0000001c __vfprintf_internal
000099a4 g     F .text	0000005c _wctomb_r
0000c168 g     F .text	000008fc .hidden __subdf3
000065a0 g     F .text	000000b0 __lo0bits
0001166c g     O .rwdata	00000008 alt_alarm_list
0000e8e8 g     F .text	00000060 _do_ctors
0000e394 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
000098b4 g     F .text	000000c0 wcrtomb
0000cd1c g     F .text	000000d0 close
0000d074 g     F .text	00000084 alt_load
000094d0 g     F .text	00000080 fputwc
00004840 g     F .text	00000004 __sinit_lock_acquire
00006314 g     F .text	00000120 __multadd
000062ec g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409214 	ori	at,at,584
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d40 	call	1d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	00800074 	movhi	r2,1
 140:	108c7b04 	addi	r2,r2,12780
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	108c7b04 	addi	r2,r2,12780
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	e17ffd17 	ldw	r5,-12(fp)
 174:	1009883a 	mov	r4,r2
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	0001883a 	nop
}
 1bc:	0001883a 	nop
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

000001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d4:	defffb04 	addi	sp,sp,-20
 1d8:	dfc00415 	stw	ra,16(sp)
 1dc:	df000315 	stw	fp,12(sp)
 1e0:	df000304 	addi	fp,sp,12
 1e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e8:	000531fa 	rdctl	r2,exception
 1ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1f0:	e0bffd17 	ldw	r2,-12(fp)
 1f4:	10801f0c 	andi	r2,r2,124
 1f8:	1004d0ba 	srli	r2,r2,2
 1fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 200:	0005333a 	rdctl	r2,badaddr
 204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 208:	d0a6e317 	ldw	r2,-25716(gp)
 20c:	10000726 	beq	r2,zero,22c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 210:	d0a6e317 	ldw	r2,-25716(gp)
 214:	e0fffd17 	ldw	r3,-12(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	e17fff17 	ldw	r5,-4(fp)
 220:	1809883a 	mov	r4,r3
 224:	103ee83a 	callr	r2
 228:	00000206 	br	234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 22c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 230:	0005883a 	mov	r2,zero
}
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     248:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     24c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     250:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     254:	00bffd16 	blt	zero,r2,24c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     258:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     25c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     260:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     264:	d6a58d14 	ori	gp,gp,38452
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     268:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     26c:	108c6314 	ori	r2,r2,12684

    movhi r3, %hi(__bss_end)
     270:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     274:	18ccbb14 	ori	r3,r3,13036

    beq r2, r3, 1f
     278:	10c00326 	beq	r2,r3,288 <_start+0x40>

0:
    stw zero, (r2)
     27c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     280:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     284:	10fffd36 	bltu	r2,r3,27c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     288:	000d0740 	call	d074 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     28c:	000d21c0 	call	d21c <alt_main>

00000290 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     290:	003fff06 	br	290 <alt_after_alt_main>

00000294 <caculate_convolution>:

	return ret;
}
#endif

unsigned int caculate_convolution(){
     294:	defffe04 	addi	sp,sp,-8
     298:	df000115 	stw	fp,4(sp)
     29c:	df000104 	addi	fp,sp,4
	int ret = 0;
     2a0:	e03fff15 	stw	zero,-4(fp)
	return ret;
     2a4:	e0bfff17 	ldw	r2,-4(fp)
}
     2a8:	e037883a 	mov	sp,fp
     2ac:	df000017 	ldw	fp,0(sp)
     2b0:	dec00104 	addi	sp,sp,4
     2b4:	f800283a 	ret

000002b8 <main>:
Resetting and trying again: FAILED
Leaving target processor paused*/


int main()
{
     2b8:	defffc04 	addi	sp,sp,-16
     2bc:	dfc00315 	stw	ra,12(sp)
     2c0:	df000215 	stw	fp,8(sp)
     2c4:	df000204 	addi	fp,sp,8
  printf("Hello from Nios II, Begin to run....!\n");
     2c8:	01000074 	movhi	r4,1
     2cc:	213e0804 	addi	r4,r4,-2016
     2d0:	00004d80 	call	4d8 <puts>
  printf("adfasdf\n");
//  int ret = IORD_32DIRECT(n_test_base, 0x0);
  printf ("get return value: [%d]\n", reg); */

  while (1) {
	  int counter = 0;
     2d4:	e03ffe15 	stw	zero,-8(fp)

	  while (counter < 5000000) {
     2d8:	00000306 	br	2e8 <main+0x30>
		  counter++;
     2dc:	e0bffe17 	ldw	r2,-8(fp)
     2e0:	10800044 	addi	r2,r2,1
     2e4:	e0bffe15 	stw	r2,-8(fp)
  printf ("get return value: [%d]\n", reg); */

  while (1) {
	  int counter = 0;

	  while (counter < 5000000) {
     2e8:	e0fffe17 	ldw	r3,-8(fp)
     2ec:	00801334 	movhi	r2,76
     2f0:	1092cfc4 	addi	r2,r2,19263
     2f4:	10fff90e 	bge	r2,r3,2dc <main+0x24>
		  counter++;
	  }
	  IOWR(0x04041000, 0x0, 2);
     2f8:	00c00084 	movi	r3,2
     2fc:	00810134 	movhi	r2,1028
     300:	10840004 	addi	r2,r2,4096
     304:	10c00035 	stwio	r3,0(r2)
	  IOWR(0x04041000, 0x1, 1);
     308:	00c00044 	movi	r3,1
     30c:	00810134 	movhi	r2,1028
     310:	10840104 	addi	r2,r2,4100
     314:	10c00035 	stwio	r3,0(r2)
	  IOWR(0x04041000, 0x2, 1);
     318:	00c00044 	movi	r3,1
     31c:	00810134 	movhi	r2,1028
     320:	10840204 	addi	r2,r2,4104
     324:	10c00035 	stwio	r3,0(r2)
	  IOWR(0x04041000, 0x3, 1);
     328:	00c00044 	movi	r3,1
     32c:	00810134 	movhi	r2,1028
     330:	10840304 	addi	r2,r2,4108
     334:	10c00035 	stwio	r3,0(r2)
	  IOWR(0x04041000, 0x4, 1);
     338:	00c00044 	movi	r3,1
     33c:	00810134 	movhi	r2,1028
     340:	10840404 	addi	r2,r2,4112
     344:	10c00035 	stwio	r3,0(r2)
	  IOWR(0x04041000, 0x5, 1);
     348:	00c00044 	movi	r3,1
     34c:	00810134 	movhi	r2,1028
     350:	10840504 	addi	r2,r2,4116
     354:	10c00035 	stwio	r3,0(r2)
	  IOWR(0x04041000, 0x6, 1);
     358:	00c00044 	movi	r3,1
     35c:	00810134 	movhi	r2,1028
     360:	10840604 	addi	r2,r2,4120
     364:	10c00035 	stwio	r3,0(r2)
	  IOWR(0x04041000, 0x7, 1);
     368:	00c00044 	movi	r3,1
     36c:	00810134 	movhi	r2,1028
     370:	10840704 	addi	r2,r2,4124
     374:	10c00035 	stwio	r3,0(r2)
	  IOWR(0x04041000, 0x8, 2);
     378:	00c00084 	movi	r3,2
     37c:	00810134 	movhi	r2,1028
     380:	10840804 	addi	r2,r2,4128
     384:	10c00035 	stwio	r3,0(r2)
	  unsigned int ret = IORD(0x04041000, 0x9);
     388:	00810134 	movhi	r2,1028
     38c:	10840904 	addi	r2,r2,4132
     390:	10800037 	ldwio	r2,0(r2)
     394:	e0bfff15 	stw	r2,-4(fp)
	  printf ("return value:[%d]\n", ret);
     398:	e17fff17 	ldw	r5,-4(fp)
     39c:	01000074 	movhi	r4,1
     3a0:	213e1204 	addi	r4,r4,-1976
     3a4:	00003dc0 	call	3dc <printf>
  }
     3a8:	003fca06 	br	2d4 <main+0x1c>

000003ac <_printf_r>:
     3ac:	defffd04 	addi	sp,sp,-12
     3b0:	2805883a 	mov	r2,r5
     3b4:	dfc00015 	stw	ra,0(sp)
     3b8:	d9800115 	stw	r6,4(sp)
     3bc:	d9c00215 	stw	r7,8(sp)
     3c0:	21400217 	ldw	r5,8(r4)
     3c4:	d9c00104 	addi	r7,sp,4
     3c8:	100d883a 	mov	r6,r2
     3cc:	00005840 	call	584 <___vfprintf_internal_r>
     3d0:	dfc00017 	ldw	ra,0(sp)
     3d4:	dec00304 	addi	sp,sp,12
     3d8:	f800283a 	ret

000003dc <printf>:
     3dc:	defffc04 	addi	sp,sp,-16
     3e0:	dfc00015 	stw	ra,0(sp)
     3e4:	d9400115 	stw	r5,4(sp)
     3e8:	d9800215 	stw	r6,8(sp)
     3ec:	d9c00315 	stw	r7,12(sp)
     3f0:	00800074 	movhi	r2,1
     3f4:	10858e04 	addi	r2,r2,5688
     3f8:	10800017 	ldw	r2,0(r2)
     3fc:	200b883a 	mov	r5,r4
     400:	d9800104 	addi	r6,sp,4
     404:	11000217 	ldw	r4,8(r2)
     408:	000277c0 	call	277c <__vfprintf_internal>
     40c:	dfc00017 	ldw	ra,0(sp)
     410:	dec00404 	addi	sp,sp,16
     414:	f800283a 	ret

00000418 <_puts_r>:
     418:	defff604 	addi	sp,sp,-40
     41c:	dc000715 	stw	r16,28(sp)
     420:	2021883a 	mov	r16,r4
     424:	2809883a 	mov	r4,r5
     428:	dc400815 	stw	r17,32(sp)
     42c:	dfc00915 	stw	ra,36(sp)
     430:	2823883a 	mov	r17,r5
     434:	00004ec0 	call	4ec <strlen>
     438:	10c00044 	addi	r3,r2,1
     43c:	d8800115 	stw	r2,4(sp)
     440:	00800074 	movhi	r2,1
     444:	10be1704 	addi	r2,r2,-1956
     448:	d8800215 	stw	r2,8(sp)
     44c:	00800044 	movi	r2,1
     450:	d8800315 	stw	r2,12(sp)
     454:	00800084 	movi	r2,2
     458:	dc400015 	stw	r17,0(sp)
     45c:	d8c00615 	stw	r3,24(sp)
     460:	dec00415 	stw	sp,16(sp)
     464:	d8800515 	stw	r2,20(sp)
     468:	80000226 	beq	r16,zero,474 <_puts_r+0x5c>
     46c:	80800e17 	ldw	r2,56(r16)
     470:	10001426 	beq	r2,zero,4c4 <_puts_r+0xac>
     474:	81400217 	ldw	r5,8(r16)
     478:	2880030b 	ldhu	r2,12(r5)
     47c:	10c8000c 	andi	r3,r2,8192
     480:	1800061e 	bne	r3,zero,49c <_puts_r+0x84>
     484:	29001917 	ldw	r4,100(r5)
     488:	00f7ffc4 	movi	r3,-8193
     48c:	10880014 	ori	r2,r2,8192
     490:	20c6703a 	and	r3,r4,r3
     494:	2880030d 	sth	r2,12(r5)
     498:	28c01915 	stw	r3,100(r5)
     49c:	d9800404 	addi	r6,sp,16
     4a0:	8009883a 	mov	r4,r16
     4a4:	0004cac0 	call	4cac <__sfvwrite_r>
     4a8:	1000091e 	bne	r2,zero,4d0 <_puts_r+0xb8>
     4ac:	00800284 	movi	r2,10
     4b0:	dfc00917 	ldw	ra,36(sp)
     4b4:	dc400817 	ldw	r17,32(sp)
     4b8:	dc000717 	ldw	r16,28(sp)
     4bc:	dec00a04 	addi	sp,sp,40
     4c0:	f800283a 	ret
     4c4:	8009883a 	mov	r4,r16
     4c8:	00048280 	call	4828 <__sinit>
     4cc:	003fe906 	br	474 <_puts_r+0x5c>
     4d0:	00bfffc4 	movi	r2,-1
     4d4:	003ff606 	br	4b0 <_puts_r+0x98>

000004d8 <puts>:
     4d8:	00800074 	movhi	r2,1
     4dc:	10858e04 	addi	r2,r2,5688
     4e0:	200b883a 	mov	r5,r4
     4e4:	11000017 	ldw	r4,0(r2)
     4e8:	00004181 	jmpi	418 <_puts_r>

000004ec <strlen>:
     4ec:	208000cc 	andi	r2,r4,3
     4f0:	10002026 	beq	r2,zero,574 <strlen+0x88>
     4f4:	20800007 	ldb	r2,0(r4)
     4f8:	10002026 	beq	r2,zero,57c <strlen+0x90>
     4fc:	2005883a 	mov	r2,r4
     500:	00000206 	br	50c <strlen+0x20>
     504:	10c00007 	ldb	r3,0(r2)
     508:	18001826 	beq	r3,zero,56c <strlen+0x80>
     50c:	10800044 	addi	r2,r2,1
     510:	10c000cc 	andi	r3,r2,3
     514:	183ffb1e 	bne	r3,zero,504 <strlen+0x18>
     518:	10c00017 	ldw	r3,0(r2)
     51c:	01ffbff4 	movhi	r7,65279
     520:	39ffbfc4 	addi	r7,r7,-257
     524:	00ca303a 	nor	r5,zero,r3
     528:	01a02074 	movhi	r6,32897
     52c:	19c7883a 	add	r3,r3,r7
     530:	31a02004 	addi	r6,r6,-32640
     534:	1946703a 	and	r3,r3,r5
     538:	1986703a 	and	r3,r3,r6
     53c:	1800091e 	bne	r3,zero,564 <strlen+0x78>
     540:	10800104 	addi	r2,r2,4
     544:	10c00017 	ldw	r3,0(r2)
     548:	19cb883a 	add	r5,r3,r7
     54c:	00c6303a 	nor	r3,zero,r3
     550:	28c6703a 	and	r3,r5,r3
     554:	1986703a 	and	r3,r3,r6
     558:	183ff926 	beq	r3,zero,540 <strlen+0x54>
     55c:	00000106 	br	564 <strlen+0x78>
     560:	10800044 	addi	r2,r2,1
     564:	10c00007 	ldb	r3,0(r2)
     568:	183ffd1e 	bne	r3,zero,560 <strlen+0x74>
     56c:	1105c83a 	sub	r2,r2,r4
     570:	f800283a 	ret
     574:	2005883a 	mov	r2,r4
     578:	003fe706 	br	518 <strlen+0x2c>
     57c:	0005883a 	mov	r2,zero
     580:	f800283a 	ret

00000584 <___vfprintf_internal_r>:
     584:	deffb804 	addi	sp,sp,-288
     588:	dfc04715 	stw	ra,284(sp)
     58c:	ddc04515 	stw	r23,276(sp)
     590:	dd404315 	stw	r21,268(sp)
     594:	d9002c15 	stw	r4,176(sp)
     598:	282f883a 	mov	r23,r5
     59c:	302b883a 	mov	r21,r6
     5a0:	d9c02d15 	stw	r7,180(sp)
     5a4:	df004615 	stw	fp,280(sp)
     5a8:	dd804415 	stw	r22,272(sp)
     5ac:	dd004215 	stw	r20,264(sp)
     5b0:	dcc04115 	stw	r19,260(sp)
     5b4:	dc804015 	stw	r18,256(sp)
     5b8:	dc403f15 	stw	r17,252(sp)
     5bc:	dc003e15 	stw	r16,248(sp)
     5c0:	000539c0 	call	539c <_localeconv_r>
     5c4:	10800017 	ldw	r2,0(r2)
     5c8:	1009883a 	mov	r4,r2
     5cc:	d8803415 	stw	r2,208(sp)
     5d0:	00004ec0 	call	4ec <strlen>
     5d4:	d8803715 	stw	r2,220(sp)
     5d8:	d8802c17 	ldw	r2,176(sp)
     5dc:	10000226 	beq	r2,zero,5e8 <___vfprintf_internal_r+0x64>
     5e0:	10800e17 	ldw	r2,56(r2)
     5e4:	1000f926 	beq	r2,zero,9cc <___vfprintf_internal_r+0x448>
     5e8:	b880030b 	ldhu	r2,12(r23)
     5ec:	10c8000c 	andi	r3,r2,8192
     5f0:	1800061e 	bne	r3,zero,60c <___vfprintf_internal_r+0x88>
     5f4:	b9001917 	ldw	r4,100(r23)
     5f8:	00f7ffc4 	movi	r3,-8193
     5fc:	10880014 	ori	r2,r2,8192
     600:	20c6703a 	and	r3,r4,r3
     604:	b880030d 	sth	r2,12(r23)
     608:	b8c01915 	stw	r3,100(r23)
     60c:	10c0020c 	andi	r3,r2,8
     610:	1800c126 	beq	r3,zero,918 <___vfprintf_internal_r+0x394>
     614:	b8c00417 	ldw	r3,16(r23)
     618:	1800bf26 	beq	r3,zero,918 <___vfprintf_internal_r+0x394>
     61c:	1080068c 	andi	r2,r2,26
     620:	00c00284 	movi	r3,10
     624:	10c0c426 	beq	r2,r3,938 <___vfprintf_internal_r+0x3b4>
     628:	d8c00404 	addi	r3,sp,16
     62c:	05000074 	movhi	r20,1
     630:	d9001e04 	addi	r4,sp,120
     634:	a53e2884 	addi	r20,r20,-1886
     638:	d8c01e15 	stw	r3,120(sp)
     63c:	d8002015 	stw	zero,128(sp)
     640:	d8001f15 	stw	zero,124(sp)
     644:	d8003315 	stw	zero,204(sp)
     648:	d8003615 	stw	zero,216(sp)
     64c:	d8003815 	stw	zero,224(sp)
     650:	1811883a 	mov	r8,r3
     654:	d8003915 	stw	zero,228(sp)
     658:	d8003a15 	stw	zero,232(sp)
     65c:	d8002f15 	stw	zero,188(sp)
     660:	d9002815 	stw	r4,160(sp)
     664:	a8800007 	ldb	r2,0(r21)
     668:	10027b26 	beq	r2,zero,1058 <___vfprintf_internal_r+0xad4>
     66c:	00c00944 	movi	r3,37
     670:	a821883a 	mov	r16,r21
     674:	10c0021e 	bne	r2,r3,680 <___vfprintf_internal_r+0xfc>
     678:	00001406 	br	6cc <___vfprintf_internal_r+0x148>
     67c:	10c00326 	beq	r2,r3,68c <___vfprintf_internal_r+0x108>
     680:	84000044 	addi	r16,r16,1
     684:	80800007 	ldb	r2,0(r16)
     688:	103ffc1e 	bne	r2,zero,67c <___vfprintf_internal_r+0xf8>
     68c:	8563c83a 	sub	r17,r16,r21
     690:	88000e26 	beq	r17,zero,6cc <___vfprintf_internal_r+0x148>
     694:	d8c02017 	ldw	r3,128(sp)
     698:	d8801f17 	ldw	r2,124(sp)
     69c:	45400015 	stw	r21,0(r8)
     6a0:	1c47883a 	add	r3,r3,r17
     6a4:	10800044 	addi	r2,r2,1
     6a8:	d8c02015 	stw	r3,128(sp)
     6ac:	44400115 	stw	r17,4(r8)
     6b0:	d8801f15 	stw	r2,124(sp)
     6b4:	00c001c4 	movi	r3,7
     6b8:	1880a716 	blt	r3,r2,958 <___vfprintf_internal_r+0x3d4>
     6bc:	42000204 	addi	r8,r8,8
     6c0:	d9402f17 	ldw	r5,188(sp)
     6c4:	2c4b883a 	add	r5,r5,r17
     6c8:	d9402f15 	stw	r5,188(sp)
     6cc:	80800007 	ldb	r2,0(r16)
     6d0:	1000a826 	beq	r2,zero,974 <___vfprintf_internal_r+0x3f0>
     6d4:	84400047 	ldb	r17,1(r16)
     6d8:	00bfffc4 	movi	r2,-1
     6dc:	85400044 	addi	r21,r16,1
     6e0:	d8002785 	stb	zero,158(sp)
     6e4:	0007883a 	mov	r3,zero
     6e8:	000f883a 	mov	r7,zero
     6ec:	d8802915 	stw	r2,164(sp)
     6f0:	d8003115 	stw	zero,196(sp)
     6f4:	0025883a 	mov	r18,zero
     6f8:	01401604 	movi	r5,88
     6fc:	01800244 	movi	r6,9
     700:	02800a84 	movi	r10,42
     704:	02401b04 	movi	r9,108
     708:	ad400044 	addi	r21,r21,1
     70c:	88bff804 	addi	r2,r17,-32
     710:	28830436 	bltu	r5,r2,1324 <___vfprintf_internal_r+0xda0>
     714:	100490ba 	slli	r2,r2,2
     718:	01000034 	movhi	r4,0
     71c:	2101cb04 	addi	r4,r4,1836
     720:	1105883a 	add	r2,r2,r4
     724:	10800017 	ldw	r2,0(r2)
     728:	1000683a 	jmp	r2
     72c:	00001244 	movi	zero,73
     730:	00001324 	muli	zero,zero,76
     734:	00001324 	muli	zero,zero,76
     738:	00001264 	muli	zero,zero,73
     73c:	00001324 	muli	zero,zero,76
     740:	00001324 	muli	zero,zero,76
     744:	00001324 	muli	zero,zero,76
     748:	00001324 	muli	zero,zero,76
     74c:	00001324 	muli	zero,zero,76
     750:	00001324 	muli	zero,zero,76
     754:	000009d8 	cmpnei	zero,zero,39
     758:	00001180 	call	118 <alt_irq_handler+0x1c>
     75c:	00001324 	muli	zero,zero,76
     760:	000008a0 	cmpeqi	zero,zero,34
     764:	00000a00 	call	a0 <__flash_exceptions_start+0x80>
     768:	00001324 	muli	zero,zero,76
     76c:	00000a40 	call	a4 <__flash_exceptions_start+0x84>
     770:	00000a4c 	andi	zero,zero,41
     774:	00000a4c 	andi	zero,zero,41
     778:	00000a4c 	andi	zero,zero,41
     77c:	00000a4c 	andi	zero,zero,41
     780:	00000a4c 	andi	zero,zero,41
     784:	00000a4c 	andi	zero,zero,41
     788:	00000a4c 	andi	zero,zero,41
     78c:	00000a4c 	andi	zero,zero,41
     790:	00000a4c 	andi	zero,zero,41
     794:	00001324 	muli	zero,zero,76
     798:	00001324 	muli	zero,zero,76
     79c:	00001324 	muli	zero,zero,76
     7a0:	00001324 	muli	zero,zero,76
     7a4:	00001324 	muli	zero,zero,76
     7a8:	00001324 	muli	zero,zero,76
     7ac:	00001324 	muli	zero,zero,76
     7b0:	00001324 	muli	zero,zero,76
     7b4:	00001324 	muli	zero,zero,76
     7b8:	00001324 	muli	zero,zero,76
     7bc:	00000a80 	call	a8 <__flash_exceptions_start+0x88>
     7c0:	00000b3c 	xorhi	zero,zero,44
     7c4:	00001324 	muli	zero,zero,76
     7c8:	00000b3c 	xorhi	zero,zero,44
     7cc:	00001324 	muli	zero,zero,76
     7d0:	00001324 	muli	zero,zero,76
     7d4:	00001324 	muli	zero,zero,76
     7d8:	00001324 	muli	zero,zero,76
     7dc:	00000bdc 	xori	zero,zero,47
     7e0:	00001324 	muli	zero,zero,76
     7e4:	00001324 	muli	zero,zero,76
     7e8:	00000be8 	cmpgeui	zero,zero,47
     7ec:	00001324 	muli	zero,zero,76
     7f0:	00001324 	muli	zero,zero,76
     7f4:	00001324 	muli	zero,zero,76
     7f8:	00001324 	muli	zero,zero,76
     7fc:	00001324 	muli	zero,zero,76
     800:	00001060 	cmpeqi	zero,zero,65
     804:	00001324 	muli	zero,zero,76
     808:	00001324 	muli	zero,zero,76
     80c:	000010c0 	call	10c <alt_irq_handler+0x10>
     810:	00001324 	muli	zero,zero,76
     814:	00001324 	muli	zero,zero,76
     818:	00001324 	muli	zero,zero,76
     81c:	00001324 	muli	zero,zero,76
     820:	00001324 	muli	zero,zero,76
     824:	00001324 	muli	zero,zero,76
     828:	00001324 	muli	zero,zero,76
     82c:	00001324 	muli	zero,zero,76
     830:	00001324 	muli	zero,zero,76
     834:	00001324 	muli	zero,zero,76
     838:	000012d0 	cmplti	zero,zero,75
     83c:	00001270 	cmpltui	zero,zero,73
     840:	00000b3c 	xorhi	zero,zero,44
     844:	00000b3c 	xorhi	zero,zero,44
     848:	00000b3c 	xorhi	zero,zero,44
     84c:	00001280 	call	128 <alt_irq_handler+0x2c>
     850:	00001270 	cmpltui	zero,zero,73
     854:	00001324 	muli	zero,zero,76
     858:	00001324 	muli	zero,zero,76
     85c:	0000128c 	andi	zero,zero,74
     860:	00001324 	muli	zero,zero,76
     864:	0000129c 	xori	zero,zero,74
     868:	00001170 	cmpltui	zero,zero,69
     86c:	000008ac 	andhi	zero,zero,34
     870:	00001190 	cmplti	zero,zero,70
     874:	00001324 	muli	zero,zero,76
     878:	0000119c 	xori	zero,zero,70
     87c:	00001324 	muli	zero,zero,76
     880:	000011f8 	rdprs	zero,zero,71
     884:	00001324 	muli	zero,zero,76
     888:	00001324 	muli	zero,zero,76
     88c:	00001208 	cmpgei	zero,zero,72
     890:	d9003117 	ldw	r4,196(sp)
     894:	d8802d15 	stw	r2,180(sp)
     898:	0109c83a 	sub	r4,zero,r4
     89c:	d9003115 	stw	r4,196(sp)
     8a0:	94800114 	ori	r18,r18,4
     8a4:	ac400007 	ldb	r17,0(r21)
     8a8:	003f9706 	br	708 <___vfprintf_internal_r+0x184>
     8ac:	00800c04 	movi	r2,48
     8b0:	d9002d17 	ldw	r4,180(sp)
     8b4:	d9402917 	ldw	r5,164(sp)
     8b8:	d8802705 	stb	r2,156(sp)
     8bc:	00801e04 	movi	r2,120
     8c0:	d8802745 	stb	r2,157(sp)
     8c4:	d8002785 	stb	zero,158(sp)
     8c8:	20c00104 	addi	r3,r4,4
     8cc:	24c00017 	ldw	r19,0(r4)
     8d0:	002d883a 	mov	r22,zero
     8d4:	90800094 	ori	r2,r18,2
     8d8:	28029a16 	blt	r5,zero,1344 <___vfprintf_internal_r+0xdc0>
     8dc:	00bfdfc4 	movi	r2,-129
     8e0:	90a4703a 	and	r18,r18,r2
     8e4:	d8c02d15 	stw	r3,180(sp)
     8e8:	94800094 	ori	r18,r18,2
     8ec:	9802871e 	bne	r19,zero,130c <___vfprintf_internal_r+0xd88>
     8f0:	00800074 	movhi	r2,1
     8f4:	10be2104 	addi	r2,r2,-1916
     8f8:	d8803915 	stw	r2,228(sp)
     8fc:	04401e04 	movi	r17,120
     900:	d8802917 	ldw	r2,164(sp)
     904:	0039883a 	mov	fp,zero
     908:	1001e926 	beq	r2,zero,10b0 <___vfprintf_internal_r+0xb2c>
     90c:	0027883a 	mov	r19,zero
     910:	002d883a 	mov	r22,zero
     914:	00020506 	br	112c <___vfprintf_internal_r+0xba8>
     918:	d9002c17 	ldw	r4,176(sp)
     91c:	b80b883a 	mov	r5,r23
     920:	00028540 	call	2854 <__swsetup_r>
     924:	1005ac1e 	bne	r2,zero,1fd8 <___vfprintf_internal_r+0x1a54>
     928:	b880030b 	ldhu	r2,12(r23)
     92c:	00c00284 	movi	r3,10
     930:	1080068c 	andi	r2,r2,26
     934:	10ff3c1e 	bne	r2,r3,628 <___vfprintf_internal_r+0xa4>
     938:	b880038f 	ldh	r2,14(r23)
     93c:	103f3a16 	blt	r2,zero,628 <___vfprintf_internal_r+0xa4>
     940:	d9c02d17 	ldw	r7,180(sp)
     944:	d9002c17 	ldw	r4,176(sp)
     948:	a80d883a 	mov	r6,r21
     94c:	b80b883a 	mov	r5,r23
     950:	00027980 	call	2798 <__sbprintf>
     954:	00001106 	br	99c <___vfprintf_internal_r+0x418>
     958:	d9002c17 	ldw	r4,176(sp)
     95c:	d9801e04 	addi	r6,sp,120
     960:	b80b883a 	mov	r5,r23
     964:	0007b800 	call	7b80 <__sprint_r>
     968:	1000081e 	bne	r2,zero,98c <___vfprintf_internal_r+0x408>
     96c:	da000404 	addi	r8,sp,16
     970:	003f5306 	br	6c0 <___vfprintf_internal_r+0x13c>
     974:	d8802017 	ldw	r2,128(sp)
     978:	10000426 	beq	r2,zero,98c <___vfprintf_internal_r+0x408>
     97c:	d9002c17 	ldw	r4,176(sp)
     980:	d9801e04 	addi	r6,sp,120
     984:	b80b883a 	mov	r5,r23
     988:	0007b800 	call	7b80 <__sprint_r>
     98c:	b880030b 	ldhu	r2,12(r23)
     990:	1080100c 	andi	r2,r2,64
     994:	1005901e 	bne	r2,zero,1fd8 <___vfprintf_internal_r+0x1a54>
     998:	d8802f17 	ldw	r2,188(sp)
     99c:	dfc04717 	ldw	ra,284(sp)
     9a0:	df004617 	ldw	fp,280(sp)
     9a4:	ddc04517 	ldw	r23,276(sp)
     9a8:	dd804417 	ldw	r22,272(sp)
     9ac:	dd404317 	ldw	r21,268(sp)
     9b0:	dd004217 	ldw	r20,264(sp)
     9b4:	dcc04117 	ldw	r19,260(sp)
     9b8:	dc804017 	ldw	r18,256(sp)
     9bc:	dc403f17 	ldw	r17,252(sp)
     9c0:	dc003e17 	ldw	r16,248(sp)
     9c4:	dec04804 	addi	sp,sp,288
     9c8:	f800283a 	ret
     9cc:	d9002c17 	ldw	r4,176(sp)
     9d0:	00048280 	call	4828 <__sinit>
     9d4:	003f0406 	br	5e8 <___vfprintf_internal_r+0x64>
     9d8:	d8802d17 	ldw	r2,180(sp)
     9dc:	d9002d17 	ldw	r4,180(sp)
     9e0:	10800017 	ldw	r2,0(r2)
     9e4:	d8803115 	stw	r2,196(sp)
     9e8:	20800104 	addi	r2,r4,4
     9ec:	d9003117 	ldw	r4,196(sp)
     9f0:	203fa716 	blt	r4,zero,890 <___vfprintf_internal_r+0x30c>
     9f4:	d8802d15 	stw	r2,180(sp)
     9f8:	ac400007 	ldb	r17,0(r21)
     9fc:	003f4206 	br	708 <___vfprintf_internal_r+0x184>
     a00:	ac400007 	ldb	r17,0(r21)
     a04:	aac00044 	addi	r11,r21,1
     a08:	8a872826 	beq	r17,r10,26ac <___vfprintf_internal_r+0x2128>
     a0c:	88bff404 	addi	r2,r17,-48
     a10:	0009883a 	mov	r4,zero
     a14:	30867d36 	bltu	r6,r2,240c <___vfprintf_internal_r+0x1e88>
     a18:	5c400007 	ldb	r17,0(r11)
     a1c:	210002a4 	muli	r4,r4,10
     a20:	5d400044 	addi	r21,r11,1
     a24:	a817883a 	mov	r11,r21
     a28:	2089883a 	add	r4,r4,r2
     a2c:	88bff404 	addi	r2,r17,-48
     a30:	30bff92e 	bgeu	r6,r2,a18 <___vfprintf_internal_r+0x494>
     a34:	2005c916 	blt	r4,zero,215c <___vfprintf_internal_r+0x1bd8>
     a38:	d9002915 	stw	r4,164(sp)
     a3c:	003f3306 	br	70c <___vfprintf_internal_r+0x188>
     a40:	94802014 	ori	r18,r18,128
     a44:	ac400007 	ldb	r17,0(r21)
     a48:	003f2f06 	br	708 <___vfprintf_internal_r+0x184>
     a4c:	a809883a 	mov	r4,r21
     a50:	d8003115 	stw	zero,196(sp)
     a54:	88bff404 	addi	r2,r17,-48
     a58:	0017883a 	mov	r11,zero
     a5c:	24400007 	ldb	r17,0(r4)
     a60:	5ac002a4 	muli	r11,r11,10
     a64:	ad400044 	addi	r21,r21,1
     a68:	a809883a 	mov	r4,r21
     a6c:	12d7883a 	add	r11,r2,r11
     a70:	88bff404 	addi	r2,r17,-48
     a74:	30bff92e 	bgeu	r6,r2,a5c <___vfprintf_internal_r+0x4d8>
     a78:	dac03115 	stw	r11,196(sp)
     a7c:	003f2306 	br	70c <___vfprintf_internal_r+0x188>
     a80:	18c03fcc 	andi	r3,r3,255
     a84:	18072b1e 	bne	r3,zero,2734 <___vfprintf_internal_r+0x21b0>
     a88:	94800414 	ori	r18,r18,16
     a8c:	9080080c 	andi	r2,r18,32
     a90:	10037b26 	beq	r2,zero,1880 <___vfprintf_internal_r+0x12fc>
     a94:	d9402d17 	ldw	r5,180(sp)
     a98:	28800117 	ldw	r2,4(r5)
     a9c:	2cc00017 	ldw	r19,0(r5)
     aa0:	29400204 	addi	r5,r5,8
     aa4:	d9402d15 	stw	r5,180(sp)
     aa8:	102d883a 	mov	r22,r2
     aac:	10044b16 	blt	r2,zero,1bdc <___vfprintf_internal_r+0x1658>
     ab0:	d9402917 	ldw	r5,164(sp)
     ab4:	df002783 	ldbu	fp,158(sp)
     ab8:	2803bc16 	blt	r5,zero,19ac <___vfprintf_internal_r+0x1428>
     abc:	00ffdfc4 	movi	r3,-129
     ac0:	9d84b03a 	or	r2,r19,r22
     ac4:	90e4703a 	and	r18,r18,r3
     ac8:	10017726 	beq	r2,zero,10a8 <___vfprintf_internal_r+0xb24>
     acc:	b0038326 	beq	r22,zero,18dc <___vfprintf_internal_r+0x1358>
     ad0:	dc402a15 	stw	r17,168(sp)
     ad4:	dc001e04 	addi	r16,sp,120
     ad8:	b023883a 	mov	r17,r22
     adc:	402d883a 	mov	r22,r8
     ae0:	9809883a 	mov	r4,r19
     ae4:	880b883a 	mov	r5,r17
     ae8:	01800284 	movi	r6,10
     aec:	000f883a 	mov	r7,zero
     af0:	0009f780 	call	9f78 <__umoddi3>
     af4:	10800c04 	addi	r2,r2,48
     af8:	843fffc4 	addi	r16,r16,-1
     afc:	9809883a 	mov	r4,r19
     b00:	880b883a 	mov	r5,r17
     b04:	80800005 	stb	r2,0(r16)
     b08:	01800284 	movi	r6,10
     b0c:	000f883a 	mov	r7,zero
     b10:	0009a000 	call	9a00 <__udivdi3>
     b14:	1027883a 	mov	r19,r2
     b18:	10c4b03a 	or	r2,r2,r3
     b1c:	1823883a 	mov	r17,r3
     b20:	103fef1e 	bne	r2,zero,ae0 <___vfprintf_internal_r+0x55c>
     b24:	d8c02817 	ldw	r3,160(sp)
     b28:	dc402a17 	ldw	r17,168(sp)
     b2c:	b011883a 	mov	r8,r22
     b30:	1c07c83a 	sub	r3,r3,r16
     b34:	d8c02e15 	stw	r3,184(sp)
     b38:	00005906 	br	ca0 <___vfprintf_internal_r+0x71c>
     b3c:	18c03fcc 	andi	r3,r3,255
     b40:	1806fa1e 	bne	r3,zero,272c <___vfprintf_internal_r+0x21a8>
     b44:	9080020c 	andi	r2,r18,8
     b48:	10048a26 	beq	r2,zero,1d74 <___vfprintf_internal_r+0x17f0>
     b4c:	d8c02d17 	ldw	r3,180(sp)
     b50:	d9002d17 	ldw	r4,180(sp)
     b54:	d9402d17 	ldw	r5,180(sp)
     b58:	18c00017 	ldw	r3,0(r3)
     b5c:	21000117 	ldw	r4,4(r4)
     b60:	29400204 	addi	r5,r5,8
     b64:	d8c03615 	stw	r3,216(sp)
     b68:	d9003815 	stw	r4,224(sp)
     b6c:	d9402d15 	stw	r5,180(sp)
     b70:	d9003617 	ldw	r4,216(sp)
     b74:	d9403817 	ldw	r5,224(sp)
     b78:	da003d15 	stw	r8,244(sp)
     b7c:	04000044 	movi	r16,1
     b80:	00077a40 	call	77a4 <__fpclassifyd>
     b84:	da003d17 	ldw	r8,244(sp)
     b88:	14041f1e 	bne	r2,r16,1c08 <___vfprintf_internal_r+0x1684>
     b8c:	d9003617 	ldw	r4,216(sp)
     b90:	d9403817 	ldw	r5,224(sp)
     b94:	000d883a 	mov	r6,zero
     b98:	000f883a 	mov	r7,zero
     b9c:	000b95c0 	call	b95c <__ledf2>
     ba0:	da003d17 	ldw	r8,244(sp)
     ba4:	1005be16 	blt	r2,zero,22a0 <___vfprintf_internal_r+0x1d1c>
     ba8:	df002783 	ldbu	fp,158(sp)
     bac:	008011c4 	movi	r2,71
     bb0:	1445330e 	bge	r2,r17,2080 <___vfprintf_internal_r+0x1afc>
     bb4:	04000074 	movhi	r16,1
     bb8:	843e1904 	addi	r16,r16,-1948
     bbc:	00c000c4 	movi	r3,3
     bc0:	00bfdfc4 	movi	r2,-129
     bc4:	d8c02a15 	stw	r3,168(sp)
     bc8:	90a4703a 	and	r18,r18,r2
     bcc:	d8c02e15 	stw	r3,184(sp)
     bd0:	d8002915 	stw	zero,164(sp)
     bd4:	d8003215 	stw	zero,200(sp)
     bd8:	00003706 	br	cb8 <___vfprintf_internal_r+0x734>
     bdc:	94800214 	ori	r18,r18,8
     be0:	ac400007 	ldb	r17,0(r21)
     be4:	003ec806 	br	708 <___vfprintf_internal_r+0x184>
     be8:	18c03fcc 	andi	r3,r3,255
     bec:	1806db1e 	bne	r3,zero,275c <___vfprintf_internal_r+0x21d8>
     bf0:	94800414 	ori	r18,r18,16
     bf4:	9080080c 	andi	r2,r18,32
     bf8:	1002d826 	beq	r2,zero,175c <___vfprintf_internal_r+0x11d8>
     bfc:	d9402d17 	ldw	r5,180(sp)
     c00:	d8c02917 	ldw	r3,164(sp)
     c04:	d8002785 	stb	zero,158(sp)
     c08:	28800204 	addi	r2,r5,8
     c0c:	2cc00017 	ldw	r19,0(r5)
     c10:	2d800117 	ldw	r22,4(r5)
     c14:	18048f16 	blt	r3,zero,1e54 <___vfprintf_internal_r+0x18d0>
     c18:	013fdfc4 	movi	r4,-129
     c1c:	9d86b03a 	or	r3,r19,r22
     c20:	d8802d15 	stw	r2,180(sp)
     c24:	9124703a 	and	r18,r18,r4
     c28:	1802d91e 	bne	r3,zero,1790 <___vfprintf_internal_r+0x120c>
     c2c:	d8c02917 	ldw	r3,164(sp)
     c30:	0039883a 	mov	fp,zero
     c34:	1805c326 	beq	r3,zero,2344 <___vfprintf_internal_r+0x1dc0>
     c38:	0027883a 	mov	r19,zero
     c3c:	002d883a 	mov	r22,zero
     c40:	dc001e04 	addi	r16,sp,120
     c44:	9806d0fa 	srli	r3,r19,3
     c48:	b008977a 	slli	r4,r22,29
     c4c:	b02cd0fa 	srli	r22,r22,3
     c50:	9cc001cc 	andi	r19,r19,7
     c54:	98800c04 	addi	r2,r19,48
     c58:	843fffc4 	addi	r16,r16,-1
     c5c:	20e6b03a 	or	r19,r4,r3
     c60:	80800005 	stb	r2,0(r16)
     c64:	9d86b03a 	or	r3,r19,r22
     c68:	183ff61e 	bne	r3,zero,c44 <___vfprintf_internal_r+0x6c0>
     c6c:	90c0004c 	andi	r3,r18,1
     c70:	18013b26 	beq	r3,zero,1160 <___vfprintf_internal_r+0xbdc>
     c74:	10803fcc 	andi	r2,r2,255
     c78:	1080201c 	xori	r2,r2,128
     c7c:	10bfe004 	addi	r2,r2,-128
     c80:	00c00c04 	movi	r3,48
     c84:	10c13626 	beq	r2,r3,1160 <___vfprintf_internal_r+0xbdc>
     c88:	80ffffc5 	stb	r3,-1(r16)
     c8c:	d8c02817 	ldw	r3,160(sp)
     c90:	80bfffc4 	addi	r2,r16,-1
     c94:	1021883a 	mov	r16,r2
     c98:	1887c83a 	sub	r3,r3,r2
     c9c:	d8c02e15 	stw	r3,184(sp)
     ca0:	d8802e17 	ldw	r2,184(sp)
     ca4:	d9002917 	ldw	r4,164(sp)
     ca8:	1100010e 	bge	r2,r4,cb0 <___vfprintf_internal_r+0x72c>
     cac:	2005883a 	mov	r2,r4
     cb0:	d8802a15 	stw	r2,168(sp)
     cb4:	d8003215 	stw	zero,200(sp)
     cb8:	e7003fcc 	andi	fp,fp,255
     cbc:	e700201c 	xori	fp,fp,128
     cc0:	e73fe004 	addi	fp,fp,-128
     cc4:	e0000326 	beq	fp,zero,cd4 <___vfprintf_internal_r+0x750>
     cc8:	d8c02a17 	ldw	r3,168(sp)
     ccc:	18c00044 	addi	r3,r3,1
     cd0:	d8c02a15 	stw	r3,168(sp)
     cd4:	90c0008c 	andi	r3,r18,2
     cd8:	d8c02b15 	stw	r3,172(sp)
     cdc:	18000326 	beq	r3,zero,cec <___vfprintf_internal_r+0x768>
     ce0:	d8c02a17 	ldw	r3,168(sp)
     ce4:	18c00084 	addi	r3,r3,2
     ce8:	d8c02a15 	stw	r3,168(sp)
     cec:	90c0210c 	andi	r3,r18,132
     cf0:	d8c03015 	stw	r3,192(sp)
     cf4:	1801a31e 	bne	r3,zero,1384 <___vfprintf_internal_r+0xe00>
     cf8:	d9003117 	ldw	r4,196(sp)
     cfc:	d8c02a17 	ldw	r3,168(sp)
     d00:	20e7c83a 	sub	r19,r4,r3
     d04:	04c19f0e 	bge	zero,r19,1384 <___vfprintf_internal_r+0xe00>
     d08:	02400404 	movi	r9,16
     d0c:	d8c02017 	ldw	r3,128(sp)
     d10:	d8801f17 	ldw	r2,124(sp)
     d14:	4cc50d0e 	bge	r9,r19,214c <___vfprintf_internal_r+0x1bc8>
     d18:	01400074 	movhi	r5,1
     d1c:	297e2c84 	addi	r5,r5,-1870
     d20:	dc403b15 	stw	r17,236(sp)
     d24:	d9403515 	stw	r5,212(sp)
     d28:	9823883a 	mov	r17,r19
     d2c:	482d883a 	mov	r22,r9
     d30:	9027883a 	mov	r19,r18
     d34:	070001c4 	movi	fp,7
     d38:	8025883a 	mov	r18,r16
     d3c:	dc002c17 	ldw	r16,176(sp)
     d40:	00000306 	br	d50 <___vfprintf_internal_r+0x7cc>
     d44:	8c7ffc04 	addi	r17,r17,-16
     d48:	42000204 	addi	r8,r8,8
     d4c:	b440130e 	bge	r22,r17,d9c <___vfprintf_internal_r+0x818>
     d50:	01000074 	movhi	r4,1
     d54:	18c00404 	addi	r3,r3,16
     d58:	10800044 	addi	r2,r2,1
     d5c:	213e2c84 	addi	r4,r4,-1870
     d60:	41000015 	stw	r4,0(r8)
     d64:	45800115 	stw	r22,4(r8)
     d68:	d8c02015 	stw	r3,128(sp)
     d6c:	d8801f15 	stw	r2,124(sp)
     d70:	e0bff40e 	bge	fp,r2,d44 <___vfprintf_internal_r+0x7c0>
     d74:	d9801e04 	addi	r6,sp,120
     d78:	b80b883a 	mov	r5,r23
     d7c:	8009883a 	mov	r4,r16
     d80:	0007b800 	call	7b80 <__sprint_r>
     d84:	103f011e 	bne	r2,zero,98c <___vfprintf_internal_r+0x408>
     d88:	8c7ffc04 	addi	r17,r17,-16
     d8c:	d8c02017 	ldw	r3,128(sp)
     d90:	d8801f17 	ldw	r2,124(sp)
     d94:	da000404 	addi	r8,sp,16
     d98:	b47fed16 	blt	r22,r17,d50 <___vfprintf_internal_r+0x7cc>
     d9c:	9021883a 	mov	r16,r18
     da0:	9825883a 	mov	r18,r19
     da4:	8827883a 	mov	r19,r17
     da8:	dc403b17 	ldw	r17,236(sp)
     dac:	d9403517 	ldw	r5,212(sp)
     db0:	98c7883a 	add	r3,r19,r3
     db4:	10800044 	addi	r2,r2,1
     db8:	41400015 	stw	r5,0(r8)
     dbc:	44c00115 	stw	r19,4(r8)
     dc0:	d8c02015 	stw	r3,128(sp)
     dc4:	d8801f15 	stw	r2,124(sp)
     dc8:	010001c4 	movi	r4,7
     dcc:	2082a316 	blt	r4,r2,185c <___vfprintf_internal_r+0x12d8>
     dd0:	df002787 	ldb	fp,158(sp)
     dd4:	42000204 	addi	r8,r8,8
     dd8:	e0000c26 	beq	fp,zero,e0c <___vfprintf_internal_r+0x888>
     ddc:	d8801f17 	ldw	r2,124(sp)
     de0:	d9002784 	addi	r4,sp,158
     de4:	18c00044 	addi	r3,r3,1
     de8:	10800044 	addi	r2,r2,1
     dec:	41000015 	stw	r4,0(r8)
     df0:	01000044 	movi	r4,1
     df4:	41000115 	stw	r4,4(r8)
     df8:	d8c02015 	stw	r3,128(sp)
     dfc:	d8801f15 	stw	r2,124(sp)
     e00:	010001c4 	movi	r4,7
     e04:	20823c16 	blt	r4,r2,16f8 <___vfprintf_internal_r+0x1174>
     e08:	42000204 	addi	r8,r8,8
     e0c:	d8802b17 	ldw	r2,172(sp)
     e10:	10000c26 	beq	r2,zero,e44 <___vfprintf_internal_r+0x8c0>
     e14:	d8801f17 	ldw	r2,124(sp)
     e18:	d9002704 	addi	r4,sp,156
     e1c:	18c00084 	addi	r3,r3,2
     e20:	10800044 	addi	r2,r2,1
     e24:	41000015 	stw	r4,0(r8)
     e28:	01000084 	movi	r4,2
     e2c:	41000115 	stw	r4,4(r8)
     e30:	d8c02015 	stw	r3,128(sp)
     e34:	d8801f15 	stw	r2,124(sp)
     e38:	010001c4 	movi	r4,7
     e3c:	20823616 	blt	r4,r2,1718 <___vfprintf_internal_r+0x1194>
     e40:	42000204 	addi	r8,r8,8
     e44:	d9003017 	ldw	r4,192(sp)
     e48:	00802004 	movi	r2,128
     e4c:	20819926 	beq	r4,r2,14b4 <___vfprintf_internal_r+0xf30>
     e50:	d9402917 	ldw	r5,164(sp)
     e54:	d8802e17 	ldw	r2,184(sp)
     e58:	28adc83a 	sub	r22,r5,r2
     e5c:	0580310e 	bge	zero,r22,f24 <___vfprintf_internal_r+0x9a0>
     e60:	07000404 	movi	fp,16
     e64:	d8801f17 	ldw	r2,124(sp)
     e68:	e584140e 	bge	fp,r22,1ebc <___vfprintf_internal_r+0x1938>
     e6c:	01400074 	movhi	r5,1
     e70:	297e2884 	addi	r5,r5,-1886
     e74:	dc402915 	stw	r17,164(sp)
     e78:	d9402b15 	stw	r5,172(sp)
     e7c:	b023883a 	mov	r17,r22
     e80:	04c001c4 	movi	r19,7
     e84:	a82d883a 	mov	r22,r21
     e88:	902b883a 	mov	r21,r18
     e8c:	8025883a 	mov	r18,r16
     e90:	dc002c17 	ldw	r16,176(sp)
     e94:	00000306 	br	ea4 <___vfprintf_internal_r+0x920>
     e98:	8c7ffc04 	addi	r17,r17,-16
     e9c:	42000204 	addi	r8,r8,8
     ea0:	e440110e 	bge	fp,r17,ee8 <___vfprintf_internal_r+0x964>
     ea4:	18c00404 	addi	r3,r3,16
     ea8:	10800044 	addi	r2,r2,1
     eac:	45000015 	stw	r20,0(r8)
     eb0:	47000115 	stw	fp,4(r8)
     eb4:	d8c02015 	stw	r3,128(sp)
     eb8:	d8801f15 	stw	r2,124(sp)
     ebc:	98bff60e 	bge	r19,r2,e98 <___vfprintf_internal_r+0x914>
     ec0:	d9801e04 	addi	r6,sp,120
     ec4:	b80b883a 	mov	r5,r23
     ec8:	8009883a 	mov	r4,r16
     ecc:	0007b800 	call	7b80 <__sprint_r>
     ed0:	103eae1e 	bne	r2,zero,98c <___vfprintf_internal_r+0x408>
     ed4:	8c7ffc04 	addi	r17,r17,-16
     ed8:	d8c02017 	ldw	r3,128(sp)
     edc:	d8801f17 	ldw	r2,124(sp)
     ee0:	da000404 	addi	r8,sp,16
     ee4:	e47fef16 	blt	fp,r17,ea4 <___vfprintf_internal_r+0x920>
     ee8:	9021883a 	mov	r16,r18
     eec:	a825883a 	mov	r18,r21
     ef0:	b02b883a 	mov	r21,r22
     ef4:	882d883a 	mov	r22,r17
     ef8:	dc402917 	ldw	r17,164(sp)
     efc:	d9002b17 	ldw	r4,172(sp)
     f00:	1d87883a 	add	r3,r3,r22
     f04:	10800044 	addi	r2,r2,1
     f08:	41000015 	stw	r4,0(r8)
     f0c:	45800115 	stw	r22,4(r8)
     f10:	d8c02015 	stw	r3,128(sp)
     f14:	d8801f15 	stw	r2,124(sp)
     f18:	010001c4 	movi	r4,7
     f1c:	2081ee16 	blt	r4,r2,16d8 <___vfprintf_internal_r+0x1154>
     f20:	42000204 	addi	r8,r8,8
     f24:	9080400c 	andi	r2,r18,256
     f28:	1001181e 	bne	r2,zero,138c <___vfprintf_internal_r+0xe08>
     f2c:	d9402e17 	ldw	r5,184(sp)
     f30:	d8801f17 	ldw	r2,124(sp)
     f34:	44000015 	stw	r16,0(r8)
     f38:	1947883a 	add	r3,r3,r5
     f3c:	10800044 	addi	r2,r2,1
     f40:	41400115 	stw	r5,4(r8)
     f44:	d8c02015 	stw	r3,128(sp)
     f48:	d8801f15 	stw	r2,124(sp)
     f4c:	010001c4 	movi	r4,7
     f50:	2081d316 	blt	r4,r2,16a0 <___vfprintf_internal_r+0x111c>
     f54:	42000204 	addi	r8,r8,8
     f58:	9480010c 	andi	r18,r18,4
     f5c:	90003226 	beq	r18,zero,1028 <___vfprintf_internal_r+0xaa4>
     f60:	d9403117 	ldw	r5,196(sp)
     f64:	d8802a17 	ldw	r2,168(sp)
     f68:	28a1c83a 	sub	r16,r5,r2
     f6c:	04002e0e 	bge	zero,r16,1028 <___vfprintf_internal_r+0xaa4>
     f70:	04400404 	movi	r17,16
     f74:	d8801f17 	ldw	r2,124(sp)
     f78:	8c04a20e 	bge	r17,r16,2204 <___vfprintf_internal_r+0x1c80>
     f7c:	01400074 	movhi	r5,1
     f80:	297e2c84 	addi	r5,r5,-1870
     f84:	d9403515 	stw	r5,212(sp)
     f88:	048001c4 	movi	r18,7
     f8c:	dcc02c17 	ldw	r19,176(sp)
     f90:	00000306 	br	fa0 <___vfprintf_internal_r+0xa1c>
     f94:	843ffc04 	addi	r16,r16,-16
     f98:	42000204 	addi	r8,r8,8
     f9c:	8c00130e 	bge	r17,r16,fec <___vfprintf_internal_r+0xa68>
     fa0:	01000074 	movhi	r4,1
     fa4:	18c00404 	addi	r3,r3,16
     fa8:	10800044 	addi	r2,r2,1
     fac:	213e2c84 	addi	r4,r4,-1870
     fb0:	41000015 	stw	r4,0(r8)
     fb4:	44400115 	stw	r17,4(r8)
     fb8:	d8c02015 	stw	r3,128(sp)
     fbc:	d8801f15 	stw	r2,124(sp)
     fc0:	90bff40e 	bge	r18,r2,f94 <___vfprintf_internal_r+0xa10>
     fc4:	d9801e04 	addi	r6,sp,120
     fc8:	b80b883a 	mov	r5,r23
     fcc:	9809883a 	mov	r4,r19
     fd0:	0007b800 	call	7b80 <__sprint_r>
     fd4:	103e6d1e 	bne	r2,zero,98c <___vfprintf_internal_r+0x408>
     fd8:	843ffc04 	addi	r16,r16,-16
     fdc:	d8c02017 	ldw	r3,128(sp)
     fe0:	d8801f17 	ldw	r2,124(sp)
     fe4:	da000404 	addi	r8,sp,16
     fe8:	8c3fed16 	blt	r17,r16,fa0 <___vfprintf_internal_r+0xa1c>
     fec:	d9403517 	ldw	r5,212(sp)
     ff0:	1c07883a 	add	r3,r3,r16
     ff4:	10800044 	addi	r2,r2,1
     ff8:	41400015 	stw	r5,0(r8)
     ffc:	44000115 	stw	r16,4(r8)
    1000:	d8c02015 	stw	r3,128(sp)
    1004:	d8801f15 	stw	r2,124(sp)
    1008:	010001c4 	movi	r4,7
    100c:	2080060e 	bge	r4,r2,1028 <___vfprintf_internal_r+0xaa4>
    1010:	d9002c17 	ldw	r4,176(sp)
    1014:	d9801e04 	addi	r6,sp,120
    1018:	b80b883a 	mov	r5,r23
    101c:	0007b800 	call	7b80 <__sprint_r>
    1020:	103e5a1e 	bne	r2,zero,98c <___vfprintf_internal_r+0x408>
    1024:	d8c02017 	ldw	r3,128(sp)
    1028:	d8803117 	ldw	r2,196(sp)
    102c:	d9002a17 	ldw	r4,168(sp)
    1030:	1100010e 	bge	r2,r4,1038 <___vfprintf_internal_r+0xab4>
    1034:	2005883a 	mov	r2,r4
    1038:	d9402f17 	ldw	r5,188(sp)
    103c:	288b883a 	add	r5,r5,r2
    1040:	d9402f15 	stw	r5,188(sp)
    1044:	18019e1e 	bne	r3,zero,16c0 <___vfprintf_internal_r+0x113c>
    1048:	a8800007 	ldb	r2,0(r21)
    104c:	d8001f15 	stw	zero,124(sp)
    1050:	da000404 	addi	r8,sp,16
    1054:	103d851e 	bne	r2,zero,66c <___vfprintf_internal_r+0xe8>
    1058:	a821883a 	mov	r16,r21
    105c:	003d9b06 	br	6cc <___vfprintf_internal_r+0x148>
    1060:	18c03fcc 	andi	r3,r3,255
    1064:	1805c11e 	bne	r3,zero,276c <___vfprintf_internal_r+0x21e8>
    1068:	94800414 	ori	r18,r18,16
    106c:	9080080c 	andi	r2,r18,32
    1070:	10020c26 	beq	r2,zero,18a4 <___vfprintf_internal_r+0x1320>
    1074:	d8802d17 	ldw	r2,180(sp)
    1078:	d9002917 	ldw	r4,164(sp)
    107c:	d8002785 	stb	zero,158(sp)
    1080:	10c00204 	addi	r3,r2,8
    1084:	14c00017 	ldw	r19,0(r2)
    1088:	15800117 	ldw	r22,4(r2)
    108c:	20040f16 	blt	r4,zero,20cc <___vfprintf_internal_r+0x1b48>
    1090:	013fdfc4 	movi	r4,-129
    1094:	9d84b03a 	or	r2,r19,r22
    1098:	d8c02d15 	stw	r3,180(sp)
    109c:	9124703a 	and	r18,r18,r4
    10a0:	0039883a 	mov	fp,zero
    10a4:	103e891e 	bne	r2,zero,acc <___vfprintf_internal_r+0x548>
    10a8:	d9002917 	ldw	r4,164(sp)
    10ac:	2002c11e 	bne	r4,zero,1bb4 <___vfprintf_internal_r+0x1630>
    10b0:	d8002915 	stw	zero,164(sp)
    10b4:	d8002e15 	stw	zero,184(sp)
    10b8:	dc001e04 	addi	r16,sp,120
    10bc:	003ef806 	br	ca0 <___vfprintf_internal_r+0x71c>
    10c0:	18c03fcc 	andi	r3,r3,255
    10c4:	18059d1e 	bne	r3,zero,273c <___vfprintf_internal_r+0x21b8>
    10c8:	01400074 	movhi	r5,1
    10cc:	297e1c04 	addi	r5,r5,-1936
    10d0:	d9403915 	stw	r5,228(sp)
    10d4:	9080080c 	andi	r2,r18,32
    10d8:	10005226 	beq	r2,zero,1224 <___vfprintf_internal_r+0xca0>
    10dc:	d8802d17 	ldw	r2,180(sp)
    10e0:	14c00017 	ldw	r19,0(r2)
    10e4:	15800117 	ldw	r22,4(r2)
    10e8:	10800204 	addi	r2,r2,8
    10ec:	d8802d15 	stw	r2,180(sp)
    10f0:	9080004c 	andi	r2,r18,1
    10f4:	10019026 	beq	r2,zero,1738 <___vfprintf_internal_r+0x11b4>
    10f8:	9d84b03a 	or	r2,r19,r22
    10fc:	10036926 	beq	r2,zero,1ea4 <___vfprintf_internal_r+0x1920>
    1100:	d8c02917 	ldw	r3,164(sp)
    1104:	00800c04 	movi	r2,48
    1108:	d8802705 	stb	r2,156(sp)
    110c:	dc402745 	stb	r17,157(sp)
    1110:	d8002785 	stb	zero,158(sp)
    1114:	90800094 	ori	r2,r18,2
    1118:	18045d16 	blt	r3,zero,2290 <___vfprintf_internal_r+0x1d0c>
    111c:	00bfdfc4 	movi	r2,-129
    1120:	90a4703a 	and	r18,r18,r2
    1124:	94800094 	ori	r18,r18,2
    1128:	0039883a 	mov	fp,zero
    112c:	d9003917 	ldw	r4,228(sp)
    1130:	dc001e04 	addi	r16,sp,120
    1134:	988003cc 	andi	r2,r19,15
    1138:	b006973a 	slli	r3,r22,28
    113c:	2085883a 	add	r2,r4,r2
    1140:	9826d13a 	srli	r19,r19,4
    1144:	10800003 	ldbu	r2,0(r2)
    1148:	b02cd13a 	srli	r22,r22,4
    114c:	843fffc4 	addi	r16,r16,-1
    1150:	1ce6b03a 	or	r19,r3,r19
    1154:	80800005 	stb	r2,0(r16)
    1158:	9d84b03a 	or	r2,r19,r22
    115c:	103ff51e 	bne	r2,zero,1134 <___vfprintf_internal_r+0xbb0>
    1160:	d8c02817 	ldw	r3,160(sp)
    1164:	1c07c83a 	sub	r3,r3,r16
    1168:	d8c02e15 	stw	r3,184(sp)
    116c:	003ecc06 	br	ca0 <___vfprintf_internal_r+0x71c>
    1170:	18c03fcc 	andi	r3,r3,255
    1174:	183e9f26 	beq	r3,zero,bf4 <___vfprintf_internal_r+0x670>
    1178:	d9c02785 	stb	r7,158(sp)
    117c:	003e9d06 	br	bf4 <___vfprintf_internal_r+0x670>
    1180:	00c00044 	movi	r3,1
    1184:	01c00ac4 	movi	r7,43
    1188:	ac400007 	ldb	r17,0(r21)
    118c:	003d5e06 	br	708 <___vfprintf_internal_r+0x184>
    1190:	94800814 	ori	r18,r18,32
    1194:	ac400007 	ldb	r17,0(r21)
    1198:	003d5b06 	br	708 <___vfprintf_internal_r+0x184>
    119c:	d8c02d17 	ldw	r3,180(sp)
    11a0:	d8002785 	stb	zero,158(sp)
    11a4:	1c000017 	ldw	r16,0(r3)
    11a8:	1cc00104 	addi	r19,r3,4
    11ac:	80041926 	beq	r16,zero,2214 <___vfprintf_internal_r+0x1c90>
    11b0:	d9002917 	ldw	r4,164(sp)
    11b4:	2003d016 	blt	r4,zero,20f8 <___vfprintf_internal_r+0x1b74>
    11b8:	200d883a 	mov	r6,r4
    11bc:	000b883a 	mov	r5,zero
    11c0:	8009883a 	mov	r4,r16
    11c4:	da003d15 	stw	r8,244(sp)
    11c8:	0005d940 	call	5d94 <memchr>
    11cc:	da003d17 	ldw	r8,244(sp)
    11d0:	10045426 	beq	r2,zero,2324 <___vfprintf_internal_r+0x1da0>
    11d4:	1405c83a 	sub	r2,r2,r16
    11d8:	d8802e15 	stw	r2,184(sp)
    11dc:	1003cc16 	blt	r2,zero,2110 <___vfprintf_internal_r+0x1b8c>
    11e0:	df002783 	ldbu	fp,158(sp)
    11e4:	d8802a15 	stw	r2,168(sp)
    11e8:	dcc02d15 	stw	r19,180(sp)
    11ec:	d8002915 	stw	zero,164(sp)
    11f0:	d8003215 	stw	zero,200(sp)
    11f4:	003eb006 	br	cb8 <___vfprintf_internal_r+0x734>
    11f8:	18c03fcc 	andi	r3,r3,255
    11fc:	183f9b26 	beq	r3,zero,106c <___vfprintf_internal_r+0xae8>
    1200:	d9c02785 	stb	r7,158(sp)
    1204:	003f9906 	br	106c <___vfprintf_internal_r+0xae8>
    1208:	18c03fcc 	andi	r3,r3,255
    120c:	1805551e 	bne	r3,zero,2764 <___vfprintf_internal_r+0x21e0>
    1210:	01400074 	movhi	r5,1
    1214:	297e2104 	addi	r5,r5,-1916
    1218:	d9403915 	stw	r5,228(sp)
    121c:	9080080c 	andi	r2,r18,32
    1220:	103fae1e 	bne	r2,zero,10dc <___vfprintf_internal_r+0xb58>
    1224:	9080040c 	andi	r2,r18,16
    1228:	1002de26 	beq	r2,zero,1da4 <___vfprintf_internal_r+0x1820>
    122c:	d8c02d17 	ldw	r3,180(sp)
    1230:	002d883a 	mov	r22,zero
    1234:	1cc00017 	ldw	r19,0(r3)
    1238:	18c00104 	addi	r3,r3,4
    123c:	d8c02d15 	stw	r3,180(sp)
    1240:	003fab06 	br	10f0 <___vfprintf_internal_r+0xb6c>
    1244:	38803fcc 	andi	r2,r7,255
    1248:	1080201c 	xori	r2,r2,128
    124c:	10bfe004 	addi	r2,r2,-128
    1250:	1002d21e 	bne	r2,zero,1d9c <___vfprintf_internal_r+0x1818>
    1254:	00c00044 	movi	r3,1
    1258:	01c00804 	movi	r7,32
    125c:	ac400007 	ldb	r17,0(r21)
    1260:	003d2906 	br	708 <___vfprintf_internal_r+0x184>
    1264:	94800054 	ori	r18,r18,1
    1268:	ac400007 	ldb	r17,0(r21)
    126c:	003d2606 	br	708 <___vfprintf_internal_r+0x184>
    1270:	18c03fcc 	andi	r3,r3,255
    1274:	183e0526 	beq	r3,zero,a8c <___vfprintf_internal_r+0x508>
    1278:	d9c02785 	stb	r7,158(sp)
    127c:	003e0306 	br	a8c <___vfprintf_internal_r+0x508>
    1280:	94801014 	ori	r18,r18,64
    1284:	ac400007 	ldb	r17,0(r21)
    1288:	003d1f06 	br	708 <___vfprintf_internal_r+0x184>
    128c:	ac400007 	ldb	r17,0(r21)
    1290:	8a438726 	beq	r17,r9,20b0 <___vfprintf_internal_r+0x1b2c>
    1294:	94800414 	ori	r18,r18,16
    1298:	003d1b06 	br	708 <___vfprintf_internal_r+0x184>
    129c:	18c03fcc 	andi	r3,r3,255
    12a0:	1805341e 	bne	r3,zero,2774 <___vfprintf_internal_r+0x21f0>
    12a4:	9080080c 	andi	r2,r18,32
    12a8:	1002cd26 	beq	r2,zero,1de0 <___vfprintf_internal_r+0x185c>
    12ac:	d9402d17 	ldw	r5,180(sp)
    12b0:	d9002f17 	ldw	r4,188(sp)
    12b4:	28800017 	ldw	r2,0(r5)
    12b8:	2007d7fa 	srai	r3,r4,31
    12bc:	29400104 	addi	r5,r5,4
    12c0:	d9402d15 	stw	r5,180(sp)
    12c4:	11000015 	stw	r4,0(r2)
    12c8:	10c00115 	stw	r3,4(r2)
    12cc:	003ce506 	br	664 <___vfprintf_internal_r+0xe0>
    12d0:	d8c02d17 	ldw	r3,180(sp)
    12d4:	d9002d17 	ldw	r4,180(sp)
    12d8:	d8002785 	stb	zero,158(sp)
    12dc:	18800017 	ldw	r2,0(r3)
    12e0:	21000104 	addi	r4,r4,4
    12e4:	00c00044 	movi	r3,1
    12e8:	d8c02a15 	stw	r3,168(sp)
    12ec:	d8801405 	stb	r2,80(sp)
    12f0:	d9002d15 	stw	r4,180(sp)
    12f4:	d8c02e15 	stw	r3,184(sp)
    12f8:	d8002915 	stw	zero,164(sp)
    12fc:	d8003215 	stw	zero,200(sp)
    1300:	dc001404 	addi	r16,sp,80
    1304:	0039883a 	mov	fp,zero
    1308:	003e7206 	br	cd4 <___vfprintf_internal_r+0x750>
    130c:	01000074 	movhi	r4,1
    1310:	213e2104 	addi	r4,r4,-1916
    1314:	0039883a 	mov	fp,zero
    1318:	d9003915 	stw	r4,228(sp)
    131c:	04401e04 	movi	r17,120
    1320:	003f8206 	br	112c <___vfprintf_internal_r+0xba8>
    1324:	18c03fcc 	andi	r3,r3,255
    1328:	1805061e 	bne	r3,zero,2744 <___vfprintf_internal_r+0x21c0>
    132c:	883d9126 	beq	r17,zero,974 <___vfprintf_internal_r+0x3f0>
    1330:	00c00044 	movi	r3,1
    1334:	d8c02a15 	stw	r3,168(sp)
    1338:	dc401405 	stb	r17,80(sp)
    133c:	d8002785 	stb	zero,158(sp)
    1340:	003fec06 	br	12f4 <___vfprintf_internal_r+0xd70>
    1344:	01400074 	movhi	r5,1
    1348:	297e2104 	addi	r5,r5,-1916
    134c:	d9403915 	stw	r5,228(sp)
    1350:	d8c02d15 	stw	r3,180(sp)
    1354:	1025883a 	mov	r18,r2
    1358:	04401e04 	movi	r17,120
    135c:	9d84b03a 	or	r2,r19,r22
    1360:	1000fc1e 	bne	r2,zero,1754 <___vfprintf_internal_r+0x11d0>
    1364:	0039883a 	mov	fp,zero
    1368:	00800084 	movi	r2,2
    136c:	10803fcc 	andi	r2,r2,255
    1370:	00c00044 	movi	r3,1
    1374:	10c20f26 	beq	r2,r3,1bb4 <___vfprintf_internal_r+0x1630>
    1378:	00c00084 	movi	r3,2
    137c:	10fd6326 	beq	r2,r3,90c <___vfprintf_internal_r+0x388>
    1380:	003e2d06 	br	c38 <___vfprintf_internal_r+0x6b4>
    1384:	d8c02017 	ldw	r3,128(sp)
    1388:	003e9306 	br	dd8 <___vfprintf_internal_r+0x854>
    138c:	00801944 	movi	r2,101
    1390:	14407e0e 	bge	r2,r17,158c <___vfprintf_internal_r+0x1008>
    1394:	d9003617 	ldw	r4,216(sp)
    1398:	d9403817 	ldw	r5,224(sp)
    139c:	000d883a 	mov	r6,zero
    13a0:	000f883a 	mov	r7,zero
    13a4:	d8c03c15 	stw	r3,240(sp)
    13a8:	da003d15 	stw	r8,244(sp)
    13ac:	000b7f80 	call	b7f8 <__eqdf2>
    13b0:	d8c03c17 	ldw	r3,240(sp)
    13b4:	da003d17 	ldw	r8,244(sp)
    13b8:	1000f71e 	bne	r2,zero,1798 <___vfprintf_internal_r+0x1214>
    13bc:	d8801f17 	ldw	r2,124(sp)
    13c0:	01000074 	movhi	r4,1
    13c4:	213e2804 	addi	r4,r4,-1888
    13c8:	18c00044 	addi	r3,r3,1
    13cc:	10800044 	addi	r2,r2,1
    13d0:	41000015 	stw	r4,0(r8)
    13d4:	01000044 	movi	r4,1
    13d8:	41000115 	stw	r4,4(r8)
    13dc:	d8c02015 	stw	r3,128(sp)
    13e0:	d8801f15 	stw	r2,124(sp)
    13e4:	010001c4 	movi	r4,7
    13e8:	2082b816 	blt	r4,r2,1ecc <___vfprintf_internal_r+0x1948>
    13ec:	42000204 	addi	r8,r8,8
    13f0:	d8802617 	ldw	r2,152(sp)
    13f4:	d9403317 	ldw	r5,204(sp)
    13f8:	11400216 	blt	r2,r5,1404 <___vfprintf_internal_r+0xe80>
    13fc:	9080004c 	andi	r2,r18,1
    1400:	103ed526 	beq	r2,zero,f58 <___vfprintf_internal_r+0x9d4>
    1404:	d8803717 	ldw	r2,220(sp)
    1408:	d9003417 	ldw	r4,208(sp)
    140c:	d9403717 	ldw	r5,220(sp)
    1410:	1887883a 	add	r3,r3,r2
    1414:	d8801f17 	ldw	r2,124(sp)
    1418:	41000015 	stw	r4,0(r8)
    141c:	41400115 	stw	r5,4(r8)
    1420:	10800044 	addi	r2,r2,1
    1424:	d8c02015 	stw	r3,128(sp)
    1428:	d8801f15 	stw	r2,124(sp)
    142c:	010001c4 	movi	r4,7
    1430:	20832916 	blt	r4,r2,20d8 <___vfprintf_internal_r+0x1b54>
    1434:	42000204 	addi	r8,r8,8
    1438:	d8803317 	ldw	r2,204(sp)
    143c:	143fffc4 	addi	r16,r2,-1
    1440:	043ec50e 	bge	zero,r16,f58 <___vfprintf_internal_r+0x9d4>
    1444:	04400404 	movi	r17,16
    1448:	d8801f17 	ldw	r2,124(sp)
    144c:	8c00880e 	bge	r17,r16,1670 <___vfprintf_internal_r+0x10ec>
    1450:	01400074 	movhi	r5,1
    1454:	297e2884 	addi	r5,r5,-1886
    1458:	d9402b15 	stw	r5,172(sp)
    145c:	058001c4 	movi	r22,7
    1460:	dcc02c17 	ldw	r19,176(sp)
    1464:	00000306 	br	1474 <___vfprintf_internal_r+0xef0>
    1468:	42000204 	addi	r8,r8,8
    146c:	843ffc04 	addi	r16,r16,-16
    1470:	8c00820e 	bge	r17,r16,167c <___vfprintf_internal_r+0x10f8>
    1474:	18c00404 	addi	r3,r3,16
    1478:	10800044 	addi	r2,r2,1
    147c:	45000015 	stw	r20,0(r8)
    1480:	44400115 	stw	r17,4(r8)
    1484:	d8c02015 	stw	r3,128(sp)
    1488:	d8801f15 	stw	r2,124(sp)
    148c:	b0bff60e 	bge	r22,r2,1468 <___vfprintf_internal_r+0xee4>
    1490:	d9801e04 	addi	r6,sp,120
    1494:	b80b883a 	mov	r5,r23
    1498:	9809883a 	mov	r4,r19
    149c:	0007b800 	call	7b80 <__sprint_r>
    14a0:	103d3a1e 	bne	r2,zero,98c <___vfprintf_internal_r+0x408>
    14a4:	d8c02017 	ldw	r3,128(sp)
    14a8:	d8801f17 	ldw	r2,124(sp)
    14ac:	da000404 	addi	r8,sp,16
    14b0:	003fee06 	br	146c <___vfprintf_internal_r+0xee8>
    14b4:	d9403117 	ldw	r5,196(sp)
    14b8:	d8802a17 	ldw	r2,168(sp)
    14bc:	28adc83a 	sub	r22,r5,r2
    14c0:	05be630e 	bge	zero,r22,e50 <___vfprintf_internal_r+0x8cc>
    14c4:	07000404 	movi	fp,16
    14c8:	d8801f17 	ldw	r2,124(sp)
    14cc:	e5838f0e 	bge	fp,r22,230c <___vfprintf_internal_r+0x1d88>
    14d0:	01400074 	movhi	r5,1
    14d4:	297e2884 	addi	r5,r5,-1886
    14d8:	dc403015 	stw	r17,192(sp)
    14dc:	d9402b15 	stw	r5,172(sp)
    14e0:	b023883a 	mov	r17,r22
    14e4:	04c001c4 	movi	r19,7
    14e8:	a82d883a 	mov	r22,r21
    14ec:	902b883a 	mov	r21,r18
    14f0:	8025883a 	mov	r18,r16
    14f4:	dc002c17 	ldw	r16,176(sp)
    14f8:	00000306 	br	1508 <___vfprintf_internal_r+0xf84>
    14fc:	8c7ffc04 	addi	r17,r17,-16
    1500:	42000204 	addi	r8,r8,8
    1504:	e440110e 	bge	fp,r17,154c <___vfprintf_internal_r+0xfc8>
    1508:	18c00404 	addi	r3,r3,16
    150c:	10800044 	addi	r2,r2,1
    1510:	45000015 	stw	r20,0(r8)
    1514:	47000115 	stw	fp,4(r8)
    1518:	d8c02015 	stw	r3,128(sp)
    151c:	d8801f15 	stw	r2,124(sp)
    1520:	98bff60e 	bge	r19,r2,14fc <___vfprintf_internal_r+0xf78>
    1524:	d9801e04 	addi	r6,sp,120
    1528:	b80b883a 	mov	r5,r23
    152c:	8009883a 	mov	r4,r16
    1530:	0007b800 	call	7b80 <__sprint_r>
    1534:	103d151e 	bne	r2,zero,98c <___vfprintf_internal_r+0x408>
    1538:	8c7ffc04 	addi	r17,r17,-16
    153c:	d8c02017 	ldw	r3,128(sp)
    1540:	d8801f17 	ldw	r2,124(sp)
    1544:	da000404 	addi	r8,sp,16
    1548:	e47fef16 	blt	fp,r17,1508 <___vfprintf_internal_r+0xf84>
    154c:	9021883a 	mov	r16,r18
    1550:	a825883a 	mov	r18,r21
    1554:	b02b883a 	mov	r21,r22
    1558:	882d883a 	mov	r22,r17
    155c:	dc403017 	ldw	r17,192(sp)
    1560:	d9002b17 	ldw	r4,172(sp)
    1564:	1d87883a 	add	r3,r3,r22
    1568:	10800044 	addi	r2,r2,1
    156c:	41000015 	stw	r4,0(r8)
    1570:	45800115 	stw	r22,4(r8)
    1574:	d8c02015 	stw	r3,128(sp)
    1578:	d8801f15 	stw	r2,124(sp)
    157c:	010001c4 	movi	r4,7
    1580:	20818e16 	blt	r4,r2,1bbc <___vfprintf_internal_r+0x1638>
    1584:	42000204 	addi	r8,r8,8
    1588:	003e3106 	br	e50 <___vfprintf_internal_r+0x8cc>
    158c:	d9403317 	ldw	r5,204(sp)
    1590:	00800044 	movi	r2,1
    1594:	18c00044 	addi	r3,r3,1
    1598:	1141530e 	bge	r2,r5,1ae8 <___vfprintf_internal_r+0x1564>
    159c:	dc401f17 	ldw	r17,124(sp)
    15a0:	00800044 	movi	r2,1
    15a4:	40800115 	stw	r2,4(r8)
    15a8:	8c400044 	addi	r17,r17,1
    15ac:	44000015 	stw	r16,0(r8)
    15b0:	d8c02015 	stw	r3,128(sp)
    15b4:	dc401f15 	stw	r17,124(sp)
    15b8:	008001c4 	movi	r2,7
    15bc:	14416b16 	blt	r2,r17,1b6c <___vfprintf_internal_r+0x15e8>
    15c0:	42000204 	addi	r8,r8,8
    15c4:	d8803717 	ldw	r2,220(sp)
    15c8:	d9003417 	ldw	r4,208(sp)
    15cc:	8c400044 	addi	r17,r17,1
    15d0:	10c7883a 	add	r3,r2,r3
    15d4:	40800115 	stw	r2,4(r8)
    15d8:	41000015 	stw	r4,0(r8)
    15dc:	d8c02015 	stw	r3,128(sp)
    15e0:	dc401f15 	stw	r17,124(sp)
    15e4:	008001c4 	movi	r2,7
    15e8:	14416916 	blt	r2,r17,1b90 <___vfprintf_internal_r+0x160c>
    15ec:	45800204 	addi	r22,r8,8
    15f0:	d9003617 	ldw	r4,216(sp)
    15f4:	d9403817 	ldw	r5,224(sp)
    15f8:	000d883a 	mov	r6,zero
    15fc:	000f883a 	mov	r7,zero
    1600:	d8c03c15 	stw	r3,240(sp)
    1604:	000b7f80 	call	b7f8 <__eqdf2>
    1608:	d8c03c17 	ldw	r3,240(sp)
    160c:	1000bc26 	beq	r2,zero,1900 <___vfprintf_internal_r+0x137c>
    1610:	d9403317 	ldw	r5,204(sp)
    1614:	84000044 	addi	r16,r16,1
    1618:	8c400044 	addi	r17,r17,1
    161c:	28bfffc4 	addi	r2,r5,-1
    1620:	1887883a 	add	r3,r3,r2
    1624:	b0800115 	stw	r2,4(r22)
    1628:	b4000015 	stw	r16,0(r22)
    162c:	d8c02015 	stw	r3,128(sp)
    1630:	dc401f15 	stw	r17,124(sp)
    1634:	008001c4 	movi	r2,7
    1638:	14414316 	blt	r2,r17,1b48 <___vfprintf_internal_r+0x15c4>
    163c:	b5800204 	addi	r22,r22,8
    1640:	d9003a17 	ldw	r4,232(sp)
    1644:	df0022c4 	addi	fp,sp,139
    1648:	8c400044 	addi	r17,r17,1
    164c:	20c7883a 	add	r3,r4,r3
    1650:	b7000015 	stw	fp,0(r22)
    1654:	b1000115 	stw	r4,4(r22)
    1658:	d8c02015 	stw	r3,128(sp)
    165c:	dc401f15 	stw	r17,124(sp)
    1660:	008001c4 	movi	r2,7
    1664:	14400e16 	blt	r2,r17,16a0 <___vfprintf_internal_r+0x111c>
    1668:	b2000204 	addi	r8,r22,8
    166c:	003e3a06 	br	f58 <___vfprintf_internal_r+0x9d4>
    1670:	01000074 	movhi	r4,1
    1674:	213e2884 	addi	r4,r4,-1886
    1678:	d9002b15 	stw	r4,172(sp)
    167c:	d9002b17 	ldw	r4,172(sp)
    1680:	1c07883a 	add	r3,r3,r16
    1684:	44000115 	stw	r16,4(r8)
    1688:	41000015 	stw	r4,0(r8)
    168c:	10800044 	addi	r2,r2,1
    1690:	d8c02015 	stw	r3,128(sp)
    1694:	d8801f15 	stw	r2,124(sp)
    1698:	010001c4 	movi	r4,7
    169c:	20be2d0e 	bge	r4,r2,f54 <___vfprintf_internal_r+0x9d0>
    16a0:	d9002c17 	ldw	r4,176(sp)
    16a4:	d9801e04 	addi	r6,sp,120
    16a8:	b80b883a 	mov	r5,r23
    16ac:	0007b800 	call	7b80 <__sprint_r>
    16b0:	103cb61e 	bne	r2,zero,98c <___vfprintf_internal_r+0x408>
    16b4:	d8c02017 	ldw	r3,128(sp)
    16b8:	da000404 	addi	r8,sp,16
    16bc:	003e2606 	br	f58 <___vfprintf_internal_r+0x9d4>
    16c0:	d9002c17 	ldw	r4,176(sp)
    16c4:	d9801e04 	addi	r6,sp,120
    16c8:	b80b883a 	mov	r5,r23
    16cc:	0007b800 	call	7b80 <__sprint_r>
    16d0:	103e5d26 	beq	r2,zero,1048 <___vfprintf_internal_r+0xac4>
    16d4:	003cad06 	br	98c <___vfprintf_internal_r+0x408>
    16d8:	d9002c17 	ldw	r4,176(sp)
    16dc:	d9801e04 	addi	r6,sp,120
    16e0:	b80b883a 	mov	r5,r23
    16e4:	0007b800 	call	7b80 <__sprint_r>
    16e8:	103ca81e 	bne	r2,zero,98c <___vfprintf_internal_r+0x408>
    16ec:	d8c02017 	ldw	r3,128(sp)
    16f0:	da000404 	addi	r8,sp,16
    16f4:	003e0b06 	br	f24 <___vfprintf_internal_r+0x9a0>
    16f8:	d9002c17 	ldw	r4,176(sp)
    16fc:	d9801e04 	addi	r6,sp,120
    1700:	b80b883a 	mov	r5,r23
    1704:	0007b800 	call	7b80 <__sprint_r>
    1708:	103ca01e 	bne	r2,zero,98c <___vfprintf_internal_r+0x408>
    170c:	d8c02017 	ldw	r3,128(sp)
    1710:	da000404 	addi	r8,sp,16
    1714:	003dbd06 	br	e0c <___vfprintf_internal_r+0x888>
    1718:	d9002c17 	ldw	r4,176(sp)
    171c:	d9801e04 	addi	r6,sp,120
    1720:	b80b883a 	mov	r5,r23
    1724:	0007b800 	call	7b80 <__sprint_r>
    1728:	103c981e 	bne	r2,zero,98c <___vfprintf_internal_r+0x408>
    172c:	d8c02017 	ldw	r3,128(sp)
    1730:	da000404 	addi	r8,sp,16
    1734:	003dc306 	br	e44 <___vfprintf_internal_r+0x8c0>
    1738:	d8802917 	ldw	r2,164(sp)
    173c:	d8002785 	stb	zero,158(sp)
    1740:	103f0616 	blt	r2,zero,135c <___vfprintf_internal_r+0xdd8>
    1744:	00ffdfc4 	movi	r3,-129
    1748:	9d84b03a 	or	r2,r19,r22
    174c:	90e4703a 	and	r18,r18,r3
    1750:	103c6b26 	beq	r2,zero,900 <___vfprintf_internal_r+0x37c>
    1754:	0039883a 	mov	fp,zero
    1758:	003e7406 	br	112c <___vfprintf_internal_r+0xba8>
    175c:	9080040c 	andi	r2,r18,16
    1760:	1001b326 	beq	r2,zero,1e30 <___vfprintf_internal_r+0x18ac>
    1764:	d9002d17 	ldw	r4,180(sp)
    1768:	d9402917 	ldw	r5,164(sp)
    176c:	d8002785 	stb	zero,158(sp)
    1770:	20800104 	addi	r2,r4,4
    1774:	24c00017 	ldw	r19,0(r4)
    1778:	002d883a 	mov	r22,zero
    177c:	2801b516 	blt	r5,zero,1e54 <___vfprintf_internal_r+0x18d0>
    1780:	00ffdfc4 	movi	r3,-129
    1784:	d8802d15 	stw	r2,180(sp)
    1788:	90e4703a 	and	r18,r18,r3
    178c:	983d2726 	beq	r19,zero,c2c <___vfprintf_internal_r+0x6a8>
    1790:	0039883a 	mov	fp,zero
    1794:	003d2a06 	br	c40 <___vfprintf_internal_r+0x6bc>
    1798:	dc402617 	ldw	r17,152(sp)
    179c:	0441d30e 	bge	zero,r17,1eec <___vfprintf_internal_r+0x1968>
    17a0:	dc403217 	ldw	r17,200(sp)
    17a4:	d8803317 	ldw	r2,204(sp)
    17a8:	1440010e 	bge	r2,r17,17b0 <___vfprintf_internal_r+0x122c>
    17ac:	1023883a 	mov	r17,r2
    17b0:	04400a0e 	bge	zero,r17,17dc <___vfprintf_internal_r+0x1258>
    17b4:	d8801f17 	ldw	r2,124(sp)
    17b8:	1c47883a 	add	r3,r3,r17
    17bc:	44000015 	stw	r16,0(r8)
    17c0:	10800044 	addi	r2,r2,1
    17c4:	44400115 	stw	r17,4(r8)
    17c8:	d8c02015 	stw	r3,128(sp)
    17cc:	d8801f15 	stw	r2,124(sp)
    17d0:	010001c4 	movi	r4,7
    17d4:	20826516 	blt	r4,r2,216c <___vfprintf_internal_r+0x1be8>
    17d8:	42000204 	addi	r8,r8,8
    17dc:	88026116 	blt	r17,zero,2164 <___vfprintf_internal_r+0x1be0>
    17e0:	d9003217 	ldw	r4,200(sp)
    17e4:	2463c83a 	sub	r17,r4,r17
    17e8:	04407b0e 	bge	zero,r17,19d8 <___vfprintf_internal_r+0x1454>
    17ec:	05800404 	movi	r22,16
    17f0:	d8801f17 	ldw	r2,124(sp)
    17f4:	b4419d0e 	bge	r22,r17,1e6c <___vfprintf_internal_r+0x18e8>
    17f8:	01000074 	movhi	r4,1
    17fc:	213e2884 	addi	r4,r4,-1886
    1800:	d9002b15 	stw	r4,172(sp)
    1804:	070001c4 	movi	fp,7
    1808:	dcc02c17 	ldw	r19,176(sp)
    180c:	00000306 	br	181c <___vfprintf_internal_r+0x1298>
    1810:	42000204 	addi	r8,r8,8
    1814:	8c7ffc04 	addi	r17,r17,-16
    1818:	b441970e 	bge	r22,r17,1e78 <___vfprintf_internal_r+0x18f4>
    181c:	18c00404 	addi	r3,r3,16
    1820:	10800044 	addi	r2,r2,1
    1824:	45000015 	stw	r20,0(r8)
    1828:	45800115 	stw	r22,4(r8)
    182c:	d8c02015 	stw	r3,128(sp)
    1830:	d8801f15 	stw	r2,124(sp)
    1834:	e0bff60e 	bge	fp,r2,1810 <___vfprintf_internal_r+0x128c>
    1838:	d9801e04 	addi	r6,sp,120
    183c:	b80b883a 	mov	r5,r23
    1840:	9809883a 	mov	r4,r19
    1844:	0007b800 	call	7b80 <__sprint_r>
    1848:	103c501e 	bne	r2,zero,98c <___vfprintf_internal_r+0x408>
    184c:	d8c02017 	ldw	r3,128(sp)
    1850:	d8801f17 	ldw	r2,124(sp)
    1854:	da000404 	addi	r8,sp,16
    1858:	003fee06 	br	1814 <___vfprintf_internal_r+0x1290>
    185c:	d9002c17 	ldw	r4,176(sp)
    1860:	d9801e04 	addi	r6,sp,120
    1864:	b80b883a 	mov	r5,r23
    1868:	0007b800 	call	7b80 <__sprint_r>
    186c:	103c471e 	bne	r2,zero,98c <___vfprintf_internal_r+0x408>
    1870:	d8c02017 	ldw	r3,128(sp)
    1874:	df002787 	ldb	fp,158(sp)
    1878:	da000404 	addi	r8,sp,16
    187c:	003d5606 	br	dd8 <___vfprintf_internal_r+0x854>
    1880:	9080040c 	andi	r2,r18,16
    1884:	10016126 	beq	r2,zero,1e0c <___vfprintf_internal_r+0x1888>
    1888:	d8802d17 	ldw	r2,180(sp)
    188c:	14c00017 	ldw	r19,0(r2)
    1890:	10800104 	addi	r2,r2,4
    1894:	d8802d15 	stw	r2,180(sp)
    1898:	982dd7fa 	srai	r22,r19,31
    189c:	b005883a 	mov	r2,r22
    18a0:	003c8206 	br	aac <___vfprintf_internal_r+0x528>
    18a4:	9080040c 	andi	r2,r18,16
    18a8:	10003526 	beq	r2,zero,1980 <___vfprintf_internal_r+0x13fc>
    18ac:	d9402d17 	ldw	r5,180(sp)
    18b0:	d8c02917 	ldw	r3,164(sp)
    18b4:	d8002785 	stb	zero,158(sp)
    18b8:	28800104 	addi	r2,r5,4
    18bc:	2cc00017 	ldw	r19,0(r5)
    18c0:	002d883a 	mov	r22,zero
    18c4:	18003716 	blt	r3,zero,19a4 <___vfprintf_internal_r+0x1420>
    18c8:	00ffdfc4 	movi	r3,-129
    18cc:	d8802d15 	stw	r2,180(sp)
    18d0:	90e4703a 	and	r18,r18,r3
    18d4:	0039883a 	mov	fp,zero
    18d8:	983df326 	beq	r19,zero,10a8 <___vfprintf_internal_r+0xb24>
    18dc:	00800244 	movi	r2,9
    18e0:	14fc7b36 	bltu	r2,r19,ad0 <___vfprintf_internal_r+0x54c>
    18e4:	d8c02817 	ldw	r3,160(sp)
    18e8:	dc001dc4 	addi	r16,sp,119
    18ec:	9cc00c04 	addi	r19,r19,48
    18f0:	1c07c83a 	sub	r3,r3,r16
    18f4:	dcc01dc5 	stb	r19,119(sp)
    18f8:	d8c02e15 	stw	r3,184(sp)
    18fc:	003ce806 	br	ca0 <___vfprintf_internal_r+0x71c>
    1900:	d8803317 	ldw	r2,204(sp)
    1904:	143fffc4 	addi	r16,r2,-1
    1908:	043f4d0e 	bge	zero,r16,1640 <___vfprintf_internal_r+0x10bc>
    190c:	07000404 	movi	fp,16
    1910:	e400810e 	bge	fp,r16,1b18 <___vfprintf_internal_r+0x1594>
    1914:	01400074 	movhi	r5,1
    1918:	297e2884 	addi	r5,r5,-1886
    191c:	d9402b15 	stw	r5,172(sp)
    1920:	01c001c4 	movi	r7,7
    1924:	dcc02c17 	ldw	r19,176(sp)
    1928:	00000306 	br	1938 <___vfprintf_internal_r+0x13b4>
    192c:	b5800204 	addi	r22,r22,8
    1930:	843ffc04 	addi	r16,r16,-16
    1934:	e4007b0e 	bge	fp,r16,1b24 <___vfprintf_internal_r+0x15a0>
    1938:	18c00404 	addi	r3,r3,16
    193c:	8c400044 	addi	r17,r17,1
    1940:	b5000015 	stw	r20,0(r22)
    1944:	b7000115 	stw	fp,4(r22)
    1948:	d8c02015 	stw	r3,128(sp)
    194c:	dc401f15 	stw	r17,124(sp)
    1950:	3c7ff60e 	bge	r7,r17,192c <___vfprintf_internal_r+0x13a8>
    1954:	d9801e04 	addi	r6,sp,120
    1958:	b80b883a 	mov	r5,r23
    195c:	9809883a 	mov	r4,r19
    1960:	d9c03c15 	stw	r7,240(sp)
    1964:	0007b800 	call	7b80 <__sprint_r>
    1968:	d9c03c17 	ldw	r7,240(sp)
    196c:	103c071e 	bne	r2,zero,98c <___vfprintf_internal_r+0x408>
    1970:	d8c02017 	ldw	r3,128(sp)
    1974:	dc401f17 	ldw	r17,124(sp)
    1978:	dd800404 	addi	r22,sp,16
    197c:	003fec06 	br	1930 <___vfprintf_internal_r+0x13ac>
    1980:	9080100c 	andi	r2,r18,64
    1984:	d8002785 	stb	zero,158(sp)
    1988:	10010e26 	beq	r2,zero,1dc4 <___vfprintf_internal_r+0x1840>
    198c:	d9002d17 	ldw	r4,180(sp)
    1990:	d9402917 	ldw	r5,164(sp)
    1994:	002d883a 	mov	r22,zero
    1998:	20800104 	addi	r2,r4,4
    199c:	24c0000b 	ldhu	r19,0(r4)
    19a0:	283fc90e 	bge	r5,zero,18c8 <___vfprintf_internal_r+0x1344>
    19a4:	d8802d15 	stw	r2,180(sp)
    19a8:	0039883a 	mov	fp,zero
    19ac:	9d84b03a 	or	r2,r19,r22
    19b0:	103c461e 	bne	r2,zero,acc <___vfprintf_internal_r+0x548>
    19b4:	00800044 	movi	r2,1
    19b8:	003e6c06 	br	136c <___vfprintf_internal_r+0xde8>
    19bc:	d9002c17 	ldw	r4,176(sp)
    19c0:	d9801e04 	addi	r6,sp,120
    19c4:	b80b883a 	mov	r5,r23
    19c8:	0007b800 	call	7b80 <__sprint_r>
    19cc:	103bef1e 	bne	r2,zero,98c <___vfprintf_internal_r+0x408>
    19d0:	d8c02017 	ldw	r3,128(sp)
    19d4:	da000404 	addi	r8,sp,16
    19d8:	d9003217 	ldw	r4,200(sp)
    19dc:	d8802617 	ldw	r2,152(sp)
    19e0:	d9403317 	ldw	r5,204(sp)
    19e4:	8123883a 	add	r17,r16,r4
    19e8:	11400216 	blt	r2,r5,19f4 <___vfprintf_internal_r+0x1470>
    19ec:	9100004c 	andi	r4,r18,1
    19f0:	20000d26 	beq	r4,zero,1a28 <___vfprintf_internal_r+0x14a4>
    19f4:	d9003717 	ldw	r4,220(sp)
    19f8:	d9403417 	ldw	r5,208(sp)
    19fc:	1907883a 	add	r3,r3,r4
    1a00:	d9001f17 	ldw	r4,124(sp)
    1a04:	41400015 	stw	r5,0(r8)
    1a08:	d9403717 	ldw	r5,220(sp)
    1a0c:	21000044 	addi	r4,r4,1
    1a10:	d8c02015 	stw	r3,128(sp)
    1a14:	41400115 	stw	r5,4(r8)
    1a18:	d9001f15 	stw	r4,124(sp)
    1a1c:	014001c4 	movi	r5,7
    1a20:	2901e816 	blt	r5,r4,21c4 <___vfprintf_internal_r+0x1c40>
    1a24:	42000204 	addi	r8,r8,8
    1a28:	d9003317 	ldw	r4,204(sp)
    1a2c:	8121883a 	add	r16,r16,r4
    1a30:	2085c83a 	sub	r2,r4,r2
    1a34:	8461c83a 	sub	r16,r16,r17
    1a38:	1400010e 	bge	r2,r16,1a40 <___vfprintf_internal_r+0x14bc>
    1a3c:	1021883a 	mov	r16,r2
    1a40:	04000a0e 	bge	zero,r16,1a6c <___vfprintf_internal_r+0x14e8>
    1a44:	d9001f17 	ldw	r4,124(sp)
    1a48:	1c07883a 	add	r3,r3,r16
    1a4c:	44400015 	stw	r17,0(r8)
    1a50:	21000044 	addi	r4,r4,1
    1a54:	44000115 	stw	r16,4(r8)
    1a58:	d8c02015 	stw	r3,128(sp)
    1a5c:	d9001f15 	stw	r4,124(sp)
    1a60:	014001c4 	movi	r5,7
    1a64:	2901fb16 	blt	r5,r4,2254 <___vfprintf_internal_r+0x1cd0>
    1a68:	42000204 	addi	r8,r8,8
    1a6c:	8001f716 	blt	r16,zero,224c <___vfprintf_internal_r+0x1cc8>
    1a70:	1421c83a 	sub	r16,r2,r16
    1a74:	043d380e 	bge	zero,r16,f58 <___vfprintf_internal_r+0x9d4>
    1a78:	04400404 	movi	r17,16
    1a7c:	d8801f17 	ldw	r2,124(sp)
    1a80:	8c3efb0e 	bge	r17,r16,1670 <___vfprintf_internal_r+0x10ec>
    1a84:	01400074 	movhi	r5,1
    1a88:	297e2884 	addi	r5,r5,-1886
    1a8c:	d9402b15 	stw	r5,172(sp)
    1a90:	058001c4 	movi	r22,7
    1a94:	dcc02c17 	ldw	r19,176(sp)
    1a98:	00000306 	br	1aa8 <___vfprintf_internal_r+0x1524>
    1a9c:	42000204 	addi	r8,r8,8
    1aa0:	843ffc04 	addi	r16,r16,-16
    1aa4:	8c3ef50e 	bge	r17,r16,167c <___vfprintf_internal_r+0x10f8>
    1aa8:	18c00404 	addi	r3,r3,16
    1aac:	10800044 	addi	r2,r2,1
    1ab0:	45000015 	stw	r20,0(r8)
    1ab4:	44400115 	stw	r17,4(r8)
    1ab8:	d8c02015 	stw	r3,128(sp)
    1abc:	d8801f15 	stw	r2,124(sp)
    1ac0:	b0bff60e 	bge	r22,r2,1a9c <___vfprintf_internal_r+0x1518>
    1ac4:	d9801e04 	addi	r6,sp,120
    1ac8:	b80b883a 	mov	r5,r23
    1acc:	9809883a 	mov	r4,r19
    1ad0:	0007b800 	call	7b80 <__sprint_r>
    1ad4:	103bad1e 	bne	r2,zero,98c <___vfprintf_internal_r+0x408>
    1ad8:	d8c02017 	ldw	r3,128(sp)
    1adc:	d8801f17 	ldw	r2,124(sp)
    1ae0:	da000404 	addi	r8,sp,16
    1ae4:	003fee06 	br	1aa0 <___vfprintf_internal_r+0x151c>
    1ae8:	9088703a 	and	r4,r18,r2
    1aec:	203eab1e 	bne	r4,zero,159c <___vfprintf_internal_r+0x1018>
    1af0:	dc401f17 	ldw	r17,124(sp)
    1af4:	40800115 	stw	r2,4(r8)
    1af8:	44000015 	stw	r16,0(r8)
    1afc:	8c400044 	addi	r17,r17,1
    1b00:	d8c02015 	stw	r3,128(sp)
    1b04:	dc401f15 	stw	r17,124(sp)
    1b08:	008001c4 	movi	r2,7
    1b0c:	14400e16 	blt	r2,r17,1b48 <___vfprintf_internal_r+0x15c4>
    1b10:	45800204 	addi	r22,r8,8
    1b14:	003eca06 	br	1640 <___vfprintf_internal_r+0x10bc>
    1b18:	01000074 	movhi	r4,1
    1b1c:	213e2884 	addi	r4,r4,-1886
    1b20:	d9002b15 	stw	r4,172(sp)
    1b24:	d8802b17 	ldw	r2,172(sp)
    1b28:	1c07883a 	add	r3,r3,r16
    1b2c:	8c400044 	addi	r17,r17,1
    1b30:	b0800015 	stw	r2,0(r22)
    1b34:	b4000115 	stw	r16,4(r22)
    1b38:	d8c02015 	stw	r3,128(sp)
    1b3c:	dc401f15 	stw	r17,124(sp)
    1b40:	008001c4 	movi	r2,7
    1b44:	147ebd0e 	bge	r2,r17,163c <___vfprintf_internal_r+0x10b8>
    1b48:	d9002c17 	ldw	r4,176(sp)
    1b4c:	d9801e04 	addi	r6,sp,120
    1b50:	b80b883a 	mov	r5,r23
    1b54:	0007b800 	call	7b80 <__sprint_r>
    1b58:	103b8c1e 	bne	r2,zero,98c <___vfprintf_internal_r+0x408>
    1b5c:	d8c02017 	ldw	r3,128(sp)
    1b60:	dc401f17 	ldw	r17,124(sp)
    1b64:	dd800404 	addi	r22,sp,16
    1b68:	003eb506 	br	1640 <___vfprintf_internal_r+0x10bc>
    1b6c:	d9002c17 	ldw	r4,176(sp)
    1b70:	d9801e04 	addi	r6,sp,120
    1b74:	b80b883a 	mov	r5,r23
    1b78:	0007b800 	call	7b80 <__sprint_r>
    1b7c:	103b831e 	bne	r2,zero,98c <___vfprintf_internal_r+0x408>
    1b80:	d8c02017 	ldw	r3,128(sp)
    1b84:	dc401f17 	ldw	r17,124(sp)
    1b88:	da000404 	addi	r8,sp,16
    1b8c:	003e8d06 	br	15c4 <___vfprintf_internal_r+0x1040>
    1b90:	d9002c17 	ldw	r4,176(sp)
    1b94:	d9801e04 	addi	r6,sp,120
    1b98:	b80b883a 	mov	r5,r23
    1b9c:	0007b800 	call	7b80 <__sprint_r>
    1ba0:	103b7a1e 	bne	r2,zero,98c <___vfprintf_internal_r+0x408>
    1ba4:	d8c02017 	ldw	r3,128(sp)
    1ba8:	dc401f17 	ldw	r17,124(sp)
    1bac:	dd800404 	addi	r22,sp,16
    1bb0:	003e8f06 	br	15f0 <___vfprintf_internal_r+0x106c>
    1bb4:	0027883a 	mov	r19,zero
    1bb8:	003f4a06 	br	18e4 <___vfprintf_internal_r+0x1360>
    1bbc:	d9002c17 	ldw	r4,176(sp)
    1bc0:	d9801e04 	addi	r6,sp,120
    1bc4:	b80b883a 	mov	r5,r23
    1bc8:	0007b800 	call	7b80 <__sprint_r>
    1bcc:	103b6f1e 	bne	r2,zero,98c <___vfprintf_internal_r+0x408>
    1bd0:	d8c02017 	ldw	r3,128(sp)
    1bd4:	da000404 	addi	r8,sp,16
    1bd8:	003c9d06 	br	e50 <___vfprintf_internal_r+0x8cc>
    1bdc:	04e7c83a 	sub	r19,zero,r19
    1be0:	9804c03a 	cmpne	r2,r19,zero
    1be4:	05adc83a 	sub	r22,zero,r22
    1be8:	b0adc83a 	sub	r22,r22,r2
    1bec:	d8802917 	ldw	r2,164(sp)
    1bf0:	07000b44 	movi	fp,45
    1bf4:	df002785 	stb	fp,158(sp)
    1bf8:	10017b16 	blt	r2,zero,21e8 <___vfprintf_internal_r+0x1c64>
    1bfc:	00bfdfc4 	movi	r2,-129
    1c00:	90a4703a 	and	r18,r18,r2
    1c04:	003bb106 	br	acc <___vfprintf_internal_r+0x548>
    1c08:	d9003617 	ldw	r4,216(sp)
    1c0c:	d9403817 	ldw	r5,224(sp)
    1c10:	da003d15 	stw	r8,244(sp)
    1c14:	00077a40 	call	77a4 <__fpclassifyd>
    1c18:	da003d17 	ldw	r8,244(sp)
    1c1c:	1000f026 	beq	r2,zero,1fe0 <___vfprintf_internal_r+0x1a5c>
    1c20:	d9002917 	ldw	r4,164(sp)
    1c24:	05bff7c4 	movi	r22,-33
    1c28:	00bfffc4 	movi	r2,-1
    1c2c:	8dac703a 	and	r22,r17,r22
    1c30:	20820026 	beq	r4,r2,2434 <___vfprintf_internal_r+0x1eb0>
    1c34:	008011c4 	movi	r2,71
    1c38:	b081f726 	beq	r22,r2,2418 <___vfprintf_internal_r+0x1e94>
    1c3c:	d9003817 	ldw	r4,224(sp)
    1c40:	90c04014 	ori	r3,r18,256
    1c44:	d8c02b15 	stw	r3,172(sp)
    1c48:	20021516 	blt	r4,zero,24a0 <___vfprintf_internal_r+0x1f1c>
    1c4c:	dcc03817 	ldw	r19,224(sp)
    1c50:	d8002a05 	stb	zero,168(sp)
    1c54:	00801984 	movi	r2,102
    1c58:	8881f926 	beq	r17,r2,2440 <___vfprintf_internal_r+0x1ebc>
    1c5c:	00801184 	movi	r2,70
    1c60:	88821c26 	beq	r17,r2,24d4 <___vfprintf_internal_r+0x1f50>
    1c64:	00801144 	movi	r2,69
    1c68:	b081ef26 	beq	r22,r2,2428 <___vfprintf_internal_r+0x1ea4>
    1c6c:	d8c02917 	ldw	r3,164(sp)
    1c70:	d8802104 	addi	r2,sp,132
    1c74:	d8800315 	stw	r2,12(sp)
    1c78:	d9403617 	ldw	r5,216(sp)
    1c7c:	d8802504 	addi	r2,sp,148
    1c80:	d9002c17 	ldw	r4,176(sp)
    1c84:	d8800215 	stw	r2,8(sp)
    1c88:	d8802604 	addi	r2,sp,152
    1c8c:	d8c00015 	stw	r3,0(sp)
    1c90:	d8800115 	stw	r2,4(sp)
    1c94:	01c00084 	movi	r7,2
    1c98:	980d883a 	mov	r6,r19
    1c9c:	d8c03c15 	stw	r3,240(sp)
    1ca0:	da003d15 	stw	r8,244(sp)
    1ca4:	0002ba80 	call	2ba8 <_dtoa_r>
    1ca8:	1021883a 	mov	r16,r2
    1cac:	008019c4 	movi	r2,103
    1cb0:	d8c03c17 	ldw	r3,240(sp)
    1cb4:	da003d17 	ldw	r8,244(sp)
    1cb8:	88817126 	beq	r17,r2,2280 <___vfprintf_internal_r+0x1cfc>
    1cbc:	008011c4 	movi	r2,71
    1cc0:	88829226 	beq	r17,r2,270c <___vfprintf_internal_r+0x2188>
    1cc4:	80f9883a 	add	fp,r16,r3
    1cc8:	d9003617 	ldw	r4,216(sp)
    1ccc:	000d883a 	mov	r6,zero
    1cd0:	000f883a 	mov	r7,zero
    1cd4:	980b883a 	mov	r5,r19
    1cd8:	da003d15 	stw	r8,244(sp)
    1cdc:	000b7f80 	call	b7f8 <__eqdf2>
    1ce0:	da003d17 	ldw	r8,244(sp)
    1ce4:	10018d26 	beq	r2,zero,231c <___vfprintf_internal_r+0x1d98>
    1ce8:	d8802117 	ldw	r2,132(sp)
    1cec:	1700062e 	bgeu	r2,fp,1d08 <___vfprintf_internal_r+0x1784>
    1cf0:	01000c04 	movi	r4,48
    1cf4:	10c00044 	addi	r3,r2,1
    1cf8:	d8c02115 	stw	r3,132(sp)
    1cfc:	11000005 	stb	r4,0(r2)
    1d00:	d8802117 	ldw	r2,132(sp)
    1d04:	173ffb36 	bltu	r2,fp,1cf4 <___vfprintf_internal_r+0x1770>
    1d08:	1405c83a 	sub	r2,r2,r16
    1d0c:	d8803315 	stw	r2,204(sp)
    1d10:	008011c4 	movi	r2,71
    1d14:	b0817626 	beq	r22,r2,22f0 <___vfprintf_internal_r+0x1d6c>
    1d18:	00801944 	movi	r2,101
    1d1c:	1442810e 	bge	r2,r17,2724 <___vfprintf_internal_r+0x21a0>
    1d20:	d8c02617 	ldw	r3,152(sp)
    1d24:	00801984 	movi	r2,102
    1d28:	d8c03215 	stw	r3,200(sp)
    1d2c:	8881fe26 	beq	r17,r2,2528 <___vfprintf_internal_r+0x1fa4>
    1d30:	d8c03217 	ldw	r3,200(sp)
    1d34:	d9003317 	ldw	r4,204(sp)
    1d38:	1901dd16 	blt	r3,r4,24b0 <___vfprintf_internal_r+0x1f2c>
    1d3c:	9480004c 	andi	r18,r18,1
    1d40:	90022b1e 	bne	r18,zero,25f0 <___vfprintf_internal_r+0x206c>
    1d44:	1805883a 	mov	r2,r3
    1d48:	18028016 	blt	r3,zero,274c <___vfprintf_internal_r+0x21c8>
    1d4c:	d8c03217 	ldw	r3,200(sp)
    1d50:	044019c4 	movi	r17,103
    1d54:	d8c02e15 	stw	r3,184(sp)
    1d58:	df002a07 	ldb	fp,168(sp)
    1d5c:	e001531e 	bne	fp,zero,22ac <___vfprintf_internal_r+0x1d28>
    1d60:	df002783 	ldbu	fp,158(sp)
    1d64:	d8802a15 	stw	r2,168(sp)
    1d68:	dc802b17 	ldw	r18,172(sp)
    1d6c:	d8002915 	stw	zero,164(sp)
    1d70:	003bd106 	br	cb8 <___vfprintf_internal_r+0x734>
    1d74:	d8802d17 	ldw	r2,180(sp)
    1d78:	d8c02d17 	ldw	r3,180(sp)
    1d7c:	d9002d17 	ldw	r4,180(sp)
    1d80:	10800017 	ldw	r2,0(r2)
    1d84:	18c00117 	ldw	r3,4(r3)
    1d88:	21000204 	addi	r4,r4,8
    1d8c:	d8803615 	stw	r2,216(sp)
    1d90:	d8c03815 	stw	r3,224(sp)
    1d94:	d9002d15 	stw	r4,180(sp)
    1d98:	003b7506 	br	b70 <___vfprintf_internal_r+0x5ec>
    1d9c:	ac400007 	ldb	r17,0(r21)
    1da0:	003a5906 	br	708 <___vfprintf_internal_r+0x184>
    1da4:	9080100c 	andi	r2,r18,64
    1da8:	1000a826 	beq	r2,zero,204c <___vfprintf_internal_r+0x1ac8>
    1dac:	d9002d17 	ldw	r4,180(sp)
    1db0:	002d883a 	mov	r22,zero
    1db4:	24c0000b 	ldhu	r19,0(r4)
    1db8:	21000104 	addi	r4,r4,4
    1dbc:	d9002d15 	stw	r4,180(sp)
    1dc0:	003ccb06 	br	10f0 <___vfprintf_internal_r+0xb6c>
    1dc4:	d8c02d17 	ldw	r3,180(sp)
    1dc8:	d9002917 	ldw	r4,164(sp)
    1dcc:	002d883a 	mov	r22,zero
    1dd0:	18800104 	addi	r2,r3,4
    1dd4:	1cc00017 	ldw	r19,0(r3)
    1dd8:	203ebb0e 	bge	r4,zero,18c8 <___vfprintf_internal_r+0x1344>
    1ddc:	003ef106 	br	19a4 <___vfprintf_internal_r+0x1420>
    1de0:	9080040c 	andi	r2,r18,16
    1de4:	1000921e 	bne	r2,zero,2030 <___vfprintf_internal_r+0x1aac>
    1de8:	9480100c 	andi	r18,r18,64
    1dec:	90013926 	beq	r18,zero,22d4 <___vfprintf_internal_r+0x1d50>
    1df0:	d9002d17 	ldw	r4,180(sp)
    1df4:	d9402f17 	ldw	r5,188(sp)
    1df8:	20800017 	ldw	r2,0(r4)
    1dfc:	21000104 	addi	r4,r4,4
    1e00:	d9002d15 	stw	r4,180(sp)
    1e04:	1140000d 	sth	r5,0(r2)
    1e08:	003a1606 	br	664 <___vfprintf_internal_r+0xe0>
    1e0c:	9080100c 	andi	r2,r18,64
    1e10:	10008026 	beq	r2,zero,2014 <___vfprintf_internal_r+0x1a90>
    1e14:	d8c02d17 	ldw	r3,180(sp)
    1e18:	1cc0000f 	ldh	r19,0(r3)
    1e1c:	18c00104 	addi	r3,r3,4
    1e20:	d8c02d15 	stw	r3,180(sp)
    1e24:	982dd7fa 	srai	r22,r19,31
    1e28:	b005883a 	mov	r2,r22
    1e2c:	003b1f06 	br	aac <___vfprintf_internal_r+0x528>
    1e30:	9080100c 	andi	r2,r18,64
    1e34:	d8002785 	stb	zero,158(sp)
    1e38:	10008a1e 	bne	r2,zero,2064 <___vfprintf_internal_r+0x1ae0>
    1e3c:	d9402d17 	ldw	r5,180(sp)
    1e40:	d8c02917 	ldw	r3,164(sp)
    1e44:	002d883a 	mov	r22,zero
    1e48:	28800104 	addi	r2,r5,4
    1e4c:	2cc00017 	ldw	r19,0(r5)
    1e50:	183e4b0e 	bge	r3,zero,1780 <___vfprintf_internal_r+0x11fc>
    1e54:	9d86b03a 	or	r3,r19,r22
    1e58:	d8802d15 	stw	r2,180(sp)
    1e5c:	183e4c1e 	bne	r3,zero,1790 <___vfprintf_internal_r+0x120c>
    1e60:	0039883a 	mov	fp,zero
    1e64:	0005883a 	mov	r2,zero
    1e68:	003d4006 	br	136c <___vfprintf_internal_r+0xde8>
    1e6c:	01400074 	movhi	r5,1
    1e70:	297e2884 	addi	r5,r5,-1886
    1e74:	d9402b15 	stw	r5,172(sp)
    1e78:	d9402b17 	ldw	r5,172(sp)
    1e7c:	1c47883a 	add	r3,r3,r17
    1e80:	10800044 	addi	r2,r2,1
    1e84:	41400015 	stw	r5,0(r8)
    1e88:	44400115 	stw	r17,4(r8)
    1e8c:	d8c02015 	stw	r3,128(sp)
    1e90:	d8801f15 	stw	r2,124(sp)
    1e94:	010001c4 	movi	r4,7
    1e98:	20bec816 	blt	r4,r2,19bc <___vfprintf_internal_r+0x1438>
    1e9c:	42000204 	addi	r8,r8,8
    1ea0:	003ecd06 	br	19d8 <___vfprintf_internal_r+0x1454>
    1ea4:	d9002917 	ldw	r4,164(sp)
    1ea8:	d8002785 	stb	zero,158(sp)
    1eac:	203d2d16 	blt	r4,zero,1364 <___vfprintf_internal_r+0xde0>
    1eb0:	00bfdfc4 	movi	r2,-129
    1eb4:	90a4703a 	and	r18,r18,r2
    1eb8:	003a9106 	br	900 <___vfprintf_internal_r+0x37c>
    1ebc:	01000074 	movhi	r4,1
    1ec0:	213e2884 	addi	r4,r4,-1886
    1ec4:	d9002b15 	stw	r4,172(sp)
    1ec8:	003c0c06 	br	efc <___vfprintf_internal_r+0x978>
    1ecc:	d9002c17 	ldw	r4,176(sp)
    1ed0:	d9801e04 	addi	r6,sp,120
    1ed4:	b80b883a 	mov	r5,r23
    1ed8:	0007b800 	call	7b80 <__sprint_r>
    1edc:	103aab1e 	bne	r2,zero,98c <___vfprintf_internal_r+0x408>
    1ee0:	d8c02017 	ldw	r3,128(sp)
    1ee4:	da000404 	addi	r8,sp,16
    1ee8:	003d4106 	br	13f0 <___vfprintf_internal_r+0xe6c>
    1eec:	d8801f17 	ldw	r2,124(sp)
    1ef0:	01400074 	movhi	r5,1
    1ef4:	01000044 	movi	r4,1
    1ef8:	18c00044 	addi	r3,r3,1
    1efc:	10800044 	addi	r2,r2,1
    1f00:	297e2804 	addi	r5,r5,-1888
    1f04:	41000115 	stw	r4,4(r8)
    1f08:	41400015 	stw	r5,0(r8)
    1f0c:	d8c02015 	stw	r3,128(sp)
    1f10:	d8801f15 	stw	r2,124(sp)
    1f14:	010001c4 	movi	r4,7
    1f18:	20805c16 	blt	r4,r2,208c <___vfprintf_internal_r+0x1b08>
    1f1c:	42000204 	addi	r8,r8,8
    1f20:	8800041e 	bne	r17,zero,1f34 <___vfprintf_internal_r+0x19b0>
    1f24:	d8803317 	ldw	r2,204(sp)
    1f28:	1000021e 	bne	r2,zero,1f34 <___vfprintf_internal_r+0x19b0>
    1f2c:	9080004c 	andi	r2,r18,1
    1f30:	103c0926 	beq	r2,zero,f58 <___vfprintf_internal_r+0x9d4>
    1f34:	d9003717 	ldw	r4,220(sp)
    1f38:	d8801f17 	ldw	r2,124(sp)
    1f3c:	d9403417 	ldw	r5,208(sp)
    1f40:	20c7883a 	add	r3,r4,r3
    1f44:	10800044 	addi	r2,r2,1
    1f48:	41000115 	stw	r4,4(r8)
    1f4c:	41400015 	stw	r5,0(r8)
    1f50:	d8c02015 	stw	r3,128(sp)
    1f54:	d8801f15 	stw	r2,124(sp)
    1f58:	010001c4 	movi	r4,7
    1f5c:	20812116 	blt	r4,r2,23e4 <___vfprintf_internal_r+0x1e60>
    1f60:	42000204 	addi	r8,r8,8
    1f64:	0463c83a 	sub	r17,zero,r17
    1f68:	0440730e 	bge	zero,r17,2138 <___vfprintf_internal_r+0x1bb4>
    1f6c:	05800404 	movi	r22,16
    1f70:	b440860e 	bge	r22,r17,218c <___vfprintf_internal_r+0x1c08>
    1f74:	01400074 	movhi	r5,1
    1f78:	297e2884 	addi	r5,r5,-1886
    1f7c:	d9402b15 	stw	r5,172(sp)
    1f80:	070001c4 	movi	fp,7
    1f84:	dcc02c17 	ldw	r19,176(sp)
    1f88:	00000306 	br	1f98 <___vfprintf_internal_r+0x1a14>
    1f8c:	42000204 	addi	r8,r8,8
    1f90:	8c7ffc04 	addi	r17,r17,-16
    1f94:	b440800e 	bge	r22,r17,2198 <___vfprintf_internal_r+0x1c14>
    1f98:	18c00404 	addi	r3,r3,16
    1f9c:	10800044 	addi	r2,r2,1
    1fa0:	45000015 	stw	r20,0(r8)
    1fa4:	45800115 	stw	r22,4(r8)
    1fa8:	d8c02015 	stw	r3,128(sp)
    1fac:	d8801f15 	stw	r2,124(sp)
    1fb0:	e0bff60e 	bge	fp,r2,1f8c <___vfprintf_internal_r+0x1a08>
    1fb4:	d9801e04 	addi	r6,sp,120
    1fb8:	b80b883a 	mov	r5,r23
    1fbc:	9809883a 	mov	r4,r19
    1fc0:	0007b800 	call	7b80 <__sprint_r>
    1fc4:	103a711e 	bne	r2,zero,98c <___vfprintf_internal_r+0x408>
    1fc8:	d8c02017 	ldw	r3,128(sp)
    1fcc:	d8801f17 	ldw	r2,124(sp)
    1fd0:	da000404 	addi	r8,sp,16
    1fd4:	003fee06 	br	1f90 <___vfprintf_internal_r+0x1a0c>
    1fd8:	00bfffc4 	movi	r2,-1
    1fdc:	003a6f06 	br	99c <___vfprintf_internal_r+0x418>
    1fe0:	008011c4 	movi	r2,71
    1fe4:	1440b816 	blt	r2,r17,22c8 <___vfprintf_internal_r+0x1d44>
    1fe8:	04000074 	movhi	r16,1
    1fec:	843e1a04 	addi	r16,r16,-1944
    1ff0:	00c000c4 	movi	r3,3
    1ff4:	00bfdfc4 	movi	r2,-129
    1ff8:	d8c02a15 	stw	r3,168(sp)
    1ffc:	90a4703a 	and	r18,r18,r2
    2000:	df002783 	ldbu	fp,158(sp)
    2004:	d8c02e15 	stw	r3,184(sp)
    2008:	d8002915 	stw	zero,164(sp)
    200c:	d8003215 	stw	zero,200(sp)
    2010:	003b2906 	br	cb8 <___vfprintf_internal_r+0x734>
    2014:	d9002d17 	ldw	r4,180(sp)
    2018:	24c00017 	ldw	r19,0(r4)
    201c:	21000104 	addi	r4,r4,4
    2020:	d9002d15 	stw	r4,180(sp)
    2024:	982dd7fa 	srai	r22,r19,31
    2028:	b005883a 	mov	r2,r22
    202c:	003a9f06 	br	aac <___vfprintf_internal_r+0x528>
    2030:	d9402d17 	ldw	r5,180(sp)
    2034:	d8c02f17 	ldw	r3,188(sp)
    2038:	28800017 	ldw	r2,0(r5)
    203c:	29400104 	addi	r5,r5,4
    2040:	d9402d15 	stw	r5,180(sp)
    2044:	10c00015 	stw	r3,0(r2)
    2048:	00398606 	br	664 <___vfprintf_internal_r+0xe0>
    204c:	d9402d17 	ldw	r5,180(sp)
    2050:	002d883a 	mov	r22,zero
    2054:	2cc00017 	ldw	r19,0(r5)
    2058:	29400104 	addi	r5,r5,4
    205c:	d9402d15 	stw	r5,180(sp)
    2060:	003c2306 	br	10f0 <___vfprintf_internal_r+0xb6c>
    2064:	d8c02d17 	ldw	r3,180(sp)
    2068:	d9002917 	ldw	r4,164(sp)
    206c:	002d883a 	mov	r22,zero
    2070:	18800104 	addi	r2,r3,4
    2074:	1cc0000b 	ldhu	r19,0(r3)
    2078:	203dc10e 	bge	r4,zero,1780 <___vfprintf_internal_r+0x11fc>
    207c:	003f7506 	br	1e54 <___vfprintf_internal_r+0x18d0>
    2080:	04000074 	movhi	r16,1
    2084:	843e1804 	addi	r16,r16,-1952
    2088:	003acc06 	br	bbc <___vfprintf_internal_r+0x638>
    208c:	d9002c17 	ldw	r4,176(sp)
    2090:	d9801e04 	addi	r6,sp,120
    2094:	b80b883a 	mov	r5,r23
    2098:	0007b800 	call	7b80 <__sprint_r>
    209c:	103a3b1e 	bne	r2,zero,98c <___vfprintf_internal_r+0x408>
    20a0:	dc402617 	ldw	r17,152(sp)
    20a4:	d8c02017 	ldw	r3,128(sp)
    20a8:	da000404 	addi	r8,sp,16
    20ac:	003f9c06 	br	1f20 <___vfprintf_internal_r+0x199c>
    20b0:	ac400043 	ldbu	r17,1(r21)
    20b4:	94800814 	ori	r18,r18,32
    20b8:	ad400044 	addi	r21,r21,1
    20bc:	8c403fcc 	andi	r17,r17,255
    20c0:	8c40201c 	xori	r17,r17,128
    20c4:	8c7fe004 	addi	r17,r17,-128
    20c8:	00398f06 	br	708 <___vfprintf_internal_r+0x184>
    20cc:	d8c02d15 	stw	r3,180(sp)
    20d0:	0039883a 	mov	fp,zero
    20d4:	003e3506 	br	19ac <___vfprintf_internal_r+0x1428>
    20d8:	d9002c17 	ldw	r4,176(sp)
    20dc:	d9801e04 	addi	r6,sp,120
    20e0:	b80b883a 	mov	r5,r23
    20e4:	0007b800 	call	7b80 <__sprint_r>
    20e8:	103a281e 	bne	r2,zero,98c <___vfprintf_internal_r+0x408>
    20ec:	d8c02017 	ldw	r3,128(sp)
    20f0:	da000404 	addi	r8,sp,16
    20f4:	003cd006 	br	1438 <___vfprintf_internal_r+0xeb4>
    20f8:	8009883a 	mov	r4,r16
    20fc:	da003d15 	stw	r8,244(sp)
    2100:	00004ec0 	call	4ec <strlen>
    2104:	d8802e15 	stw	r2,184(sp)
    2108:	da003d17 	ldw	r8,244(sp)
    210c:	103c340e 	bge	r2,zero,11e0 <___vfprintf_internal_r+0xc5c>
    2110:	0005883a 	mov	r2,zero
    2114:	003c3206 	br	11e0 <___vfprintf_internal_r+0xc5c>
    2118:	d9002c17 	ldw	r4,176(sp)
    211c:	d9801e04 	addi	r6,sp,120
    2120:	b80b883a 	mov	r5,r23
    2124:	0007b800 	call	7b80 <__sprint_r>
    2128:	103a181e 	bne	r2,zero,98c <___vfprintf_internal_r+0x408>
    212c:	d8c02017 	ldw	r3,128(sp)
    2130:	d8801f17 	ldw	r2,124(sp)
    2134:	da000404 	addi	r8,sp,16
    2138:	d9403317 	ldw	r5,204(sp)
    213c:	10800044 	addi	r2,r2,1
    2140:	44000015 	stw	r16,0(r8)
    2144:	28c7883a 	add	r3,r5,r3
    2148:	003b7d06 	br	f40 <___vfprintf_internal_r+0x9bc>
    214c:	01000074 	movhi	r4,1
    2150:	213e2c84 	addi	r4,r4,-1870
    2154:	d9003515 	stw	r4,212(sp)
    2158:	003b1406 	br	dac <___vfprintf_internal_r+0x828>
    215c:	013fffc4 	movi	r4,-1
    2160:	003a3506 	br	a38 <___vfprintf_internal_r+0x4b4>
    2164:	0023883a 	mov	r17,zero
    2168:	003d9d06 	br	17e0 <___vfprintf_internal_r+0x125c>
    216c:	d9002c17 	ldw	r4,176(sp)
    2170:	d9801e04 	addi	r6,sp,120
    2174:	b80b883a 	mov	r5,r23
    2178:	0007b800 	call	7b80 <__sprint_r>
    217c:	103a031e 	bne	r2,zero,98c <___vfprintf_internal_r+0x408>
    2180:	d8c02017 	ldw	r3,128(sp)
    2184:	da000404 	addi	r8,sp,16
    2188:	003d9406 	br	17dc <___vfprintf_internal_r+0x1258>
    218c:	01000074 	movhi	r4,1
    2190:	213e2884 	addi	r4,r4,-1886
    2194:	d9002b15 	stw	r4,172(sp)
    2198:	d9002b17 	ldw	r4,172(sp)
    219c:	1c47883a 	add	r3,r3,r17
    21a0:	10800044 	addi	r2,r2,1
    21a4:	41000015 	stw	r4,0(r8)
    21a8:	44400115 	stw	r17,4(r8)
    21ac:	d8c02015 	stw	r3,128(sp)
    21b0:	d8801f15 	stw	r2,124(sp)
    21b4:	010001c4 	movi	r4,7
    21b8:	20bfd716 	blt	r4,r2,2118 <___vfprintf_internal_r+0x1b94>
    21bc:	42000204 	addi	r8,r8,8
    21c0:	003fdd06 	br	2138 <___vfprintf_internal_r+0x1bb4>
    21c4:	d9002c17 	ldw	r4,176(sp)
    21c8:	d9801e04 	addi	r6,sp,120
    21cc:	b80b883a 	mov	r5,r23
    21d0:	0007b800 	call	7b80 <__sprint_r>
    21d4:	1039ed1e 	bne	r2,zero,98c <___vfprintf_internal_r+0x408>
    21d8:	d8802617 	ldw	r2,152(sp)
    21dc:	d8c02017 	ldw	r3,128(sp)
    21e0:	da000404 	addi	r8,sp,16
    21e4:	003e1006 	br	1a28 <___vfprintf_internal_r+0x14a4>
    21e8:	00800044 	movi	r2,1
    21ec:	10803fcc 	andi	r2,r2,255
    21f0:	00c00044 	movi	r3,1
    21f4:	10fa3526 	beq	r2,r3,acc <___vfprintf_internal_r+0x548>
    21f8:	00c00084 	movi	r3,2
    21fc:	10fbcb26 	beq	r2,r3,112c <___vfprintf_internal_r+0xba8>
    2200:	003a8f06 	br	c40 <___vfprintf_internal_r+0x6bc>
    2204:	01000074 	movhi	r4,1
    2208:	213e2c84 	addi	r4,r4,-1870
    220c:	d9003515 	stw	r4,212(sp)
    2210:	003b7606 	br	fec <___vfprintf_internal_r+0xa68>
    2214:	d8802917 	ldw	r2,164(sp)
    2218:	00c00184 	movi	r3,6
    221c:	1880012e 	bgeu	r3,r2,2224 <___vfprintf_internal_r+0x1ca0>
    2220:	1805883a 	mov	r2,r3
    2224:	d8802e15 	stw	r2,184(sp)
    2228:	1000ef16 	blt	r2,zero,25e8 <___vfprintf_internal_r+0x2064>
    222c:	04000074 	movhi	r16,1
    2230:	d8802a15 	stw	r2,168(sp)
    2234:	dcc02d15 	stw	r19,180(sp)
    2238:	d8002915 	stw	zero,164(sp)
    223c:	d8003215 	stw	zero,200(sp)
    2240:	843e2604 	addi	r16,r16,-1896
    2244:	0039883a 	mov	fp,zero
    2248:	003aa206 	br	cd4 <___vfprintf_internal_r+0x750>
    224c:	0021883a 	mov	r16,zero
    2250:	003e0706 	br	1a70 <___vfprintf_internal_r+0x14ec>
    2254:	d9002c17 	ldw	r4,176(sp)
    2258:	d9801e04 	addi	r6,sp,120
    225c:	b80b883a 	mov	r5,r23
    2260:	0007b800 	call	7b80 <__sprint_r>
    2264:	1039c91e 	bne	r2,zero,98c <___vfprintf_internal_r+0x408>
    2268:	d8802617 	ldw	r2,152(sp)
    226c:	d9403317 	ldw	r5,204(sp)
    2270:	d8c02017 	ldw	r3,128(sp)
    2274:	da000404 	addi	r8,sp,16
    2278:	2885c83a 	sub	r2,r5,r2
    227c:	003dfb06 	br	1a6c <___vfprintf_internal_r+0x14e8>
    2280:	9080004c 	andi	r2,r18,1
    2284:	103e8f1e 	bne	r2,zero,1cc4 <___vfprintf_internal_r+0x1740>
    2288:	d8802117 	ldw	r2,132(sp)
    228c:	003e9e06 	br	1d08 <___vfprintf_internal_r+0x1784>
    2290:	1025883a 	mov	r18,r2
    2294:	0039883a 	mov	fp,zero
    2298:	00800084 	movi	r2,2
    229c:	003fd306 	br	21ec <___vfprintf_internal_r+0x1c68>
    22a0:	07000b44 	movi	fp,45
    22a4:	df002785 	stb	fp,158(sp)
    22a8:	003a4006 	br	bac <___vfprintf_internal_r+0x628>
    22ac:	00c00b44 	movi	r3,45
    22b0:	d8c02785 	stb	r3,158(sp)
    22b4:	d8802a15 	stw	r2,168(sp)
    22b8:	dc802b17 	ldw	r18,172(sp)
    22bc:	d8002915 	stw	zero,164(sp)
    22c0:	07000b44 	movi	fp,45
    22c4:	003a8006 	br	cc8 <___vfprintf_internal_r+0x744>
    22c8:	04000074 	movhi	r16,1
    22cc:	843e1b04 	addi	r16,r16,-1940
    22d0:	003f4706 	br	1ff0 <___vfprintf_internal_r+0x1a6c>
    22d4:	d8c02d17 	ldw	r3,180(sp)
    22d8:	d9002f17 	ldw	r4,188(sp)
    22dc:	18800017 	ldw	r2,0(r3)
    22e0:	18c00104 	addi	r3,r3,4
    22e4:	d8c02d15 	stw	r3,180(sp)
    22e8:	11000015 	stw	r4,0(r2)
    22ec:	0038dd06 	br	664 <___vfprintf_internal_r+0xe0>
    22f0:	dd802617 	ldw	r22,152(sp)
    22f4:	00bfff44 	movi	r2,-3
    22f8:	b0801c16 	blt	r22,r2,236c <___vfprintf_internal_r+0x1de8>
    22fc:	d9402917 	ldw	r5,164(sp)
    2300:	2d801a16 	blt	r5,r22,236c <___vfprintf_internal_r+0x1de8>
    2304:	dd803215 	stw	r22,200(sp)
    2308:	003e8906 	br	1d30 <___vfprintf_internal_r+0x17ac>
    230c:	01000074 	movhi	r4,1
    2310:	213e2884 	addi	r4,r4,-1886
    2314:	d9002b15 	stw	r4,172(sp)
    2318:	003c9106 	br	1560 <___vfprintf_internal_r+0xfdc>
    231c:	e005883a 	mov	r2,fp
    2320:	003e7906 	br	1d08 <___vfprintf_internal_r+0x1784>
    2324:	d9402917 	ldw	r5,164(sp)
    2328:	df002783 	ldbu	fp,158(sp)
    232c:	dcc02d15 	stw	r19,180(sp)
    2330:	d9402a15 	stw	r5,168(sp)
    2334:	d9402e15 	stw	r5,184(sp)
    2338:	d8002915 	stw	zero,164(sp)
    233c:	d8003215 	stw	zero,200(sp)
    2340:	003a5d06 	br	cb8 <___vfprintf_internal_r+0x734>
    2344:	9080004c 	andi	r2,r18,1
    2348:	0039883a 	mov	fp,zero
    234c:	10000426 	beq	r2,zero,2360 <___vfprintf_internal_r+0x1ddc>
    2350:	00800c04 	movi	r2,48
    2354:	dc001dc4 	addi	r16,sp,119
    2358:	d8801dc5 	stb	r2,119(sp)
    235c:	003b8006 	br	1160 <___vfprintf_internal_r+0xbdc>
    2360:	d8002e15 	stw	zero,184(sp)
    2364:	dc001e04 	addi	r16,sp,120
    2368:	003a4d06 	br	ca0 <___vfprintf_internal_r+0x71c>
    236c:	8c7fff84 	addi	r17,r17,-2
    2370:	b5bfffc4 	addi	r22,r22,-1
    2374:	dd802615 	stw	r22,152(sp)
    2378:	dc4022c5 	stb	r17,139(sp)
    237c:	b000bf16 	blt	r22,zero,267c <___vfprintf_internal_r+0x20f8>
    2380:	00800ac4 	movi	r2,43
    2384:	d8802305 	stb	r2,140(sp)
    2388:	00800244 	movi	r2,9
    238c:	15807016 	blt	r2,r22,2550 <___vfprintf_internal_r+0x1fcc>
    2390:	00800c04 	movi	r2,48
    2394:	b5800c04 	addi	r22,r22,48
    2398:	d8802345 	stb	r2,141(sp)
    239c:	dd802385 	stb	r22,142(sp)
    23a0:	d88023c4 	addi	r2,sp,143
    23a4:	df0022c4 	addi	fp,sp,139
    23a8:	d8c03317 	ldw	r3,204(sp)
    23ac:	1739c83a 	sub	fp,r2,fp
    23b0:	d9003317 	ldw	r4,204(sp)
    23b4:	e0c7883a 	add	r3,fp,r3
    23b8:	df003a15 	stw	fp,232(sp)
    23bc:	d8c02e15 	stw	r3,184(sp)
    23c0:	00800044 	movi	r2,1
    23c4:	1100b30e 	bge	r2,r4,2694 <___vfprintf_internal_r+0x2110>
    23c8:	d8c02e17 	ldw	r3,184(sp)
    23cc:	18c00044 	addi	r3,r3,1
    23d0:	d8c02e15 	stw	r3,184(sp)
    23d4:	1805883a 	mov	r2,r3
    23d8:	1800ac16 	blt	r3,zero,268c <___vfprintf_internal_r+0x2108>
    23dc:	d8003215 	stw	zero,200(sp)
    23e0:	003e5d06 	br	1d58 <___vfprintf_internal_r+0x17d4>
    23e4:	d9002c17 	ldw	r4,176(sp)
    23e8:	d9801e04 	addi	r6,sp,120
    23ec:	b80b883a 	mov	r5,r23
    23f0:	0007b800 	call	7b80 <__sprint_r>
    23f4:	1039651e 	bne	r2,zero,98c <___vfprintf_internal_r+0x408>
    23f8:	dc402617 	ldw	r17,152(sp)
    23fc:	d8c02017 	ldw	r3,128(sp)
    2400:	d8801f17 	ldw	r2,124(sp)
    2404:	da000404 	addi	r8,sp,16
    2408:	003ed606 	br	1f64 <___vfprintf_internal_r+0x19e0>
    240c:	582b883a 	mov	r21,r11
    2410:	d8002915 	stw	zero,164(sp)
    2414:	0038bd06 	br	70c <___vfprintf_internal_r+0x188>
    2418:	d8802917 	ldw	r2,164(sp)
    241c:	103e071e 	bne	r2,zero,1c3c <___vfprintf_internal_r+0x16b8>
    2420:	dc002915 	stw	r16,164(sp)
    2424:	003e0506 	br	1c3c <___vfprintf_internal_r+0x16b8>
    2428:	d9002917 	ldw	r4,164(sp)
    242c:	20c00044 	addi	r3,r4,1
    2430:	003e0f06 	br	1c70 <___vfprintf_internal_r+0x16ec>
    2434:	01400184 	movi	r5,6
    2438:	d9402915 	stw	r5,164(sp)
    243c:	003dff06 	br	1c3c <___vfprintf_internal_r+0x16b8>
    2440:	d8802104 	addi	r2,sp,132
    2444:	d8800315 	stw	r2,12(sp)
    2448:	d8802504 	addi	r2,sp,148
    244c:	d8800215 	stw	r2,8(sp)
    2450:	d8802604 	addi	r2,sp,152
    2454:	d8800115 	stw	r2,4(sp)
    2458:	d8802917 	ldw	r2,164(sp)
    245c:	d9403617 	ldw	r5,216(sp)
    2460:	d9002c17 	ldw	r4,176(sp)
    2464:	d8800015 	stw	r2,0(sp)
    2468:	01c000c4 	movi	r7,3
    246c:	980d883a 	mov	r6,r19
    2470:	da003d15 	stw	r8,244(sp)
    2474:	0002ba80 	call	2ba8 <_dtoa_r>
    2478:	d8c02917 	ldw	r3,164(sp)
    247c:	da003d17 	ldw	r8,244(sp)
    2480:	1021883a 	mov	r16,r2
    2484:	10f9883a 	add	fp,r2,r3
    2488:	81000007 	ldb	r4,0(r16)
    248c:	00800c04 	movi	r2,48
    2490:	20805e26 	beq	r4,r2,260c <___vfprintf_internal_r+0x2088>
    2494:	d8c02617 	ldw	r3,152(sp)
    2498:	e0f9883a 	add	fp,fp,r3
    249c:	003e0a06 	br	1cc8 <___vfprintf_internal_r+0x1744>
    24a0:	00c00b44 	movi	r3,45
    24a4:	24e0003c 	xorhi	r19,r4,32768
    24a8:	d8c02a05 	stb	r3,168(sp)
    24ac:	003de906 	br	1c54 <___vfprintf_internal_r+0x16d0>
    24b0:	d8c03217 	ldw	r3,200(sp)
    24b4:	00c07a0e 	bge	zero,r3,26a0 <___vfprintf_internal_r+0x211c>
    24b8:	00800044 	movi	r2,1
    24bc:	d9003317 	ldw	r4,204(sp)
    24c0:	1105883a 	add	r2,r2,r4
    24c4:	d8802e15 	stw	r2,184(sp)
    24c8:	10004e16 	blt	r2,zero,2604 <___vfprintf_internal_r+0x2080>
    24cc:	044019c4 	movi	r17,103
    24d0:	003e2106 	br	1d58 <___vfprintf_internal_r+0x17d4>
    24d4:	d9002917 	ldw	r4,164(sp)
    24d8:	d8802104 	addi	r2,sp,132
    24dc:	d8800315 	stw	r2,12(sp)
    24e0:	d9000015 	stw	r4,0(sp)
    24e4:	d8802504 	addi	r2,sp,148
    24e8:	d9403617 	ldw	r5,216(sp)
    24ec:	d9002c17 	ldw	r4,176(sp)
    24f0:	d8800215 	stw	r2,8(sp)
    24f4:	d8802604 	addi	r2,sp,152
    24f8:	d8800115 	stw	r2,4(sp)
    24fc:	01c000c4 	movi	r7,3
    2500:	980d883a 	mov	r6,r19
    2504:	da003d15 	stw	r8,244(sp)
    2508:	0002ba80 	call	2ba8 <_dtoa_r>
    250c:	d8c02917 	ldw	r3,164(sp)
    2510:	da003d17 	ldw	r8,244(sp)
    2514:	1021883a 	mov	r16,r2
    2518:	00801184 	movi	r2,70
    251c:	80f9883a 	add	fp,r16,r3
    2520:	88bfd926 	beq	r17,r2,2488 <___vfprintf_internal_r+0x1f04>
    2524:	003de806 	br	1cc8 <___vfprintf_internal_r+0x1744>
    2528:	d9002917 	ldw	r4,164(sp)
    252c:	00c04d0e 	bge	zero,r3,2664 <___vfprintf_internal_r+0x20e0>
    2530:	2000441e 	bne	r4,zero,2644 <___vfprintf_internal_r+0x20c0>
    2534:	9480004c 	andi	r18,r18,1
    2538:	9000421e 	bne	r18,zero,2644 <___vfprintf_internal_r+0x20c0>
    253c:	1805883a 	mov	r2,r3
    2540:	18007016 	blt	r3,zero,2704 <___vfprintf_internal_r+0x2180>
    2544:	d8c03217 	ldw	r3,200(sp)
    2548:	d8c02e15 	stw	r3,184(sp)
    254c:	003e0206 	br	1d58 <___vfprintf_internal_r+0x17d4>
    2550:	df0022c4 	addi	fp,sp,139
    2554:	dc002915 	stw	r16,164(sp)
    2558:	4027883a 	mov	r19,r8
    255c:	e021883a 	mov	r16,fp
    2560:	b009883a 	mov	r4,r22
    2564:	01400284 	movi	r5,10
    2568:	000a5340 	call	a534 <__modsi3>
    256c:	10800c04 	addi	r2,r2,48
    2570:	843fffc4 	addi	r16,r16,-1
    2574:	b009883a 	mov	r4,r22
    2578:	01400284 	movi	r5,10
    257c:	80800005 	stb	r2,0(r16)
    2580:	000a4b00 	call	a4b0 <__divsi3>
    2584:	102d883a 	mov	r22,r2
    2588:	00800244 	movi	r2,9
    258c:	15bff416 	blt	r2,r22,2560 <___vfprintf_internal_r+0x1fdc>
    2590:	9811883a 	mov	r8,r19
    2594:	b0800c04 	addi	r2,r22,48
    2598:	8027883a 	mov	r19,r16
    259c:	997fffc4 	addi	r5,r19,-1
    25a0:	98bfffc5 	stb	r2,-1(r19)
    25a4:	dc002917 	ldw	r16,164(sp)
    25a8:	2f006a2e 	bgeu	r5,fp,2754 <___vfprintf_internal_r+0x21d0>
    25ac:	d9c02384 	addi	r7,sp,142
    25b0:	3ccfc83a 	sub	r7,r7,r19
    25b4:	d9002344 	addi	r4,sp,141
    25b8:	e1cf883a 	add	r7,fp,r7
    25bc:	00000106 	br	25c4 <___vfprintf_internal_r+0x2040>
    25c0:	28800003 	ldbu	r2,0(r5)
    25c4:	20800005 	stb	r2,0(r4)
    25c8:	21000044 	addi	r4,r4,1
    25cc:	29400044 	addi	r5,r5,1
    25d0:	393ffb1e 	bne	r7,r4,25c0 <___vfprintf_internal_r+0x203c>
    25d4:	d8802304 	addi	r2,sp,140
    25d8:	14c5c83a 	sub	r2,r2,r19
    25dc:	d8c02344 	addi	r3,sp,141
    25e0:	1885883a 	add	r2,r3,r2
    25e4:	003f7006 	br	23a8 <___vfprintf_internal_r+0x1e24>
    25e8:	0005883a 	mov	r2,zero
    25ec:	003f0f06 	br	222c <___vfprintf_internal_r+0x1ca8>
    25f0:	d8c03217 	ldw	r3,200(sp)
    25f4:	18c00044 	addi	r3,r3,1
    25f8:	d8c02e15 	stw	r3,184(sp)
    25fc:	1805883a 	mov	r2,r3
    2600:	183fb20e 	bge	r3,zero,24cc <___vfprintf_internal_r+0x1f48>
    2604:	0005883a 	mov	r2,zero
    2608:	003fb006 	br	24cc <___vfprintf_internal_r+0x1f48>
    260c:	d9003617 	ldw	r4,216(sp)
    2610:	000d883a 	mov	r6,zero
    2614:	000f883a 	mov	r7,zero
    2618:	980b883a 	mov	r5,r19
    261c:	d8c03c15 	stw	r3,240(sp)
    2620:	da003d15 	stw	r8,244(sp)
    2624:	000b7f80 	call	b7f8 <__eqdf2>
    2628:	d8c03c17 	ldw	r3,240(sp)
    262c:	da003d17 	ldw	r8,244(sp)
    2630:	103f9826 	beq	r2,zero,2494 <___vfprintf_internal_r+0x1f10>
    2634:	00800044 	movi	r2,1
    2638:	10c7c83a 	sub	r3,r2,r3
    263c:	d8c02615 	stw	r3,152(sp)
    2640:	003f9506 	br	2498 <___vfprintf_internal_r+0x1f14>
    2644:	d9002917 	ldw	r4,164(sp)
    2648:	d8c03217 	ldw	r3,200(sp)
    264c:	20800044 	addi	r2,r4,1
    2650:	1885883a 	add	r2,r3,r2
    2654:	d8802e15 	stw	r2,184(sp)
    2658:	103dbf0e 	bge	r2,zero,1d58 <___vfprintf_internal_r+0x17d4>
    265c:	0005883a 	mov	r2,zero
    2660:	003dbd06 	br	1d58 <___vfprintf_internal_r+0x17d4>
    2664:	2000211e 	bne	r4,zero,26ec <___vfprintf_internal_r+0x2168>
    2668:	9480004c 	andi	r18,r18,1
    266c:	90001f1e 	bne	r18,zero,26ec <___vfprintf_internal_r+0x2168>
    2670:	00800044 	movi	r2,1
    2674:	d8802e15 	stw	r2,184(sp)
    2678:	003db706 	br	1d58 <___vfprintf_internal_r+0x17d4>
    267c:	00800b44 	movi	r2,45
    2680:	05adc83a 	sub	r22,zero,r22
    2684:	d8802305 	stb	r2,140(sp)
    2688:	003f3f06 	br	2388 <___vfprintf_internal_r+0x1e04>
    268c:	0005883a 	mov	r2,zero
    2690:	003f5206 	br	23dc <___vfprintf_internal_r+0x1e58>
    2694:	90a4703a 	and	r18,r18,r2
    2698:	903f4e26 	beq	r18,zero,23d4 <___vfprintf_internal_r+0x1e50>
    269c:	003f4a06 	br	23c8 <___vfprintf_internal_r+0x1e44>
    26a0:	00800084 	movi	r2,2
    26a4:	10c5c83a 	sub	r2,r2,r3
    26a8:	003f8406 	br	24bc <___vfprintf_internal_r+0x1f38>
    26ac:	d8802d17 	ldw	r2,180(sp)
    26b0:	d9002d17 	ldw	r4,180(sp)
    26b4:	ac400043 	ldbu	r17,1(r21)
    26b8:	10800017 	ldw	r2,0(r2)
    26bc:	582b883a 	mov	r21,r11
    26c0:	d8802915 	stw	r2,164(sp)
    26c4:	20800104 	addi	r2,r4,4
    26c8:	d9002917 	ldw	r4,164(sp)
    26cc:	d8802d15 	stw	r2,180(sp)
    26d0:	203e7a0e 	bge	r4,zero,20bc <___vfprintf_internal_r+0x1b38>
    26d4:	8c403fcc 	andi	r17,r17,255
    26d8:	00bfffc4 	movi	r2,-1
    26dc:	8c40201c 	xori	r17,r17,128
    26e0:	d8802915 	stw	r2,164(sp)
    26e4:	8c7fe004 	addi	r17,r17,-128
    26e8:	00380706 	br	708 <___vfprintf_internal_r+0x184>
    26ec:	d8c02917 	ldw	r3,164(sp)
    26f0:	18c00084 	addi	r3,r3,2
    26f4:	d8c02e15 	stw	r3,184(sp)
    26f8:	1805883a 	mov	r2,r3
    26fc:	183d960e 	bge	r3,zero,1d58 <___vfprintf_internal_r+0x17d4>
    2700:	003fd606 	br	265c <___vfprintf_internal_r+0x20d8>
    2704:	0005883a 	mov	r2,zero
    2708:	003f8e06 	br	2544 <___vfprintf_internal_r+0x1fc0>
    270c:	9080004c 	andi	r2,r18,1
    2710:	103f811e 	bne	r2,zero,2518 <___vfprintf_internal_r+0x1f94>
    2714:	d8802117 	ldw	r2,132(sp)
    2718:	1405c83a 	sub	r2,r2,r16
    271c:	d8803315 	stw	r2,204(sp)
    2720:	b47ef326 	beq	r22,r17,22f0 <___vfprintf_internal_r+0x1d6c>
    2724:	dd802617 	ldw	r22,152(sp)
    2728:	003f1106 	br	2370 <___vfprintf_internal_r+0x1dec>
    272c:	d9c02785 	stb	r7,158(sp)
    2730:	00390406 	br	b44 <___vfprintf_internal_r+0x5c0>
    2734:	d9c02785 	stb	r7,158(sp)
    2738:	0038d306 	br	a88 <___vfprintf_internal_r+0x504>
    273c:	d9c02785 	stb	r7,158(sp)
    2740:	003a6106 	br	10c8 <___vfprintf_internal_r+0xb44>
    2744:	d9c02785 	stb	r7,158(sp)
    2748:	003af806 	br	132c <___vfprintf_internal_r+0xda8>
    274c:	0005883a 	mov	r2,zero
    2750:	003d7e06 	br	1d4c <___vfprintf_internal_r+0x17c8>
    2754:	d8802344 	addi	r2,sp,141
    2758:	003f1306 	br	23a8 <___vfprintf_internal_r+0x1e24>
    275c:	d9c02785 	stb	r7,158(sp)
    2760:	00392306 	br	bf0 <___vfprintf_internal_r+0x66c>
    2764:	d9c02785 	stb	r7,158(sp)
    2768:	003aa906 	br	1210 <___vfprintf_internal_r+0xc8c>
    276c:	d9c02785 	stb	r7,158(sp)
    2770:	003a3d06 	br	1068 <___vfprintf_internal_r+0xae4>
    2774:	d9c02785 	stb	r7,158(sp)
    2778:	003aca06 	br	12a4 <___vfprintf_internal_r+0xd20>

0000277c <__vfprintf_internal>:
    277c:	00800074 	movhi	r2,1
    2780:	10858e04 	addi	r2,r2,5688
    2784:	300f883a 	mov	r7,r6
    2788:	280d883a 	mov	r6,r5
    278c:	200b883a 	mov	r5,r4
    2790:	11000017 	ldw	r4,0(r2)
    2794:	00005841 	jmpi	584 <___vfprintf_internal_r>

00002798 <__sbprintf>:
    2798:	2880030b 	ldhu	r2,12(r5)
    279c:	2ac01917 	ldw	r11,100(r5)
    27a0:	2a80038b 	ldhu	r10,14(r5)
    27a4:	2a400717 	ldw	r9,28(r5)
    27a8:	2a000917 	ldw	r8,36(r5)
    27ac:	defee204 	addi	sp,sp,-1144
    27b0:	00c10004 	movi	r3,1024
    27b4:	dc011a15 	stw	r16,1128(sp)
    27b8:	10bfff4c 	andi	r2,r2,65533
    27bc:	2821883a 	mov	r16,r5
    27c0:	d8cb883a 	add	r5,sp,r3
    27c4:	dc811c15 	stw	r18,1136(sp)
    27c8:	dc411b15 	stw	r17,1132(sp)
    27cc:	dfc11d15 	stw	ra,1140(sp)
    27d0:	2025883a 	mov	r18,r4
    27d4:	d881030d 	sth	r2,1036(sp)
    27d8:	dac11915 	stw	r11,1124(sp)
    27dc:	da81038d 	sth	r10,1038(sp)
    27e0:	da410715 	stw	r9,1052(sp)
    27e4:	da010915 	stw	r8,1060(sp)
    27e8:	dec10015 	stw	sp,1024(sp)
    27ec:	dec10415 	stw	sp,1040(sp)
    27f0:	d8c10215 	stw	r3,1032(sp)
    27f4:	d8c10515 	stw	r3,1044(sp)
    27f8:	d8010615 	stw	zero,1048(sp)
    27fc:	00005840 	call	584 <___vfprintf_internal_r>
    2800:	1023883a 	mov	r17,r2
    2804:	10000416 	blt	r2,zero,2818 <__sbprintf+0x80>
    2808:	d9410004 	addi	r5,sp,1024
    280c:	9009883a 	mov	r4,r18
    2810:	000444c0 	call	444c <_fflush_r>
    2814:	10000d1e 	bne	r2,zero,284c <__sbprintf+0xb4>
    2818:	d881030b 	ldhu	r2,1036(sp)
    281c:	1080100c 	andi	r2,r2,64
    2820:	10000326 	beq	r2,zero,2830 <__sbprintf+0x98>
    2824:	8080030b 	ldhu	r2,12(r16)
    2828:	10801014 	ori	r2,r2,64
    282c:	8080030d 	sth	r2,12(r16)
    2830:	8805883a 	mov	r2,r17
    2834:	dfc11d17 	ldw	ra,1140(sp)
    2838:	dc811c17 	ldw	r18,1136(sp)
    283c:	dc411b17 	ldw	r17,1132(sp)
    2840:	dc011a17 	ldw	r16,1128(sp)
    2844:	dec11e04 	addi	sp,sp,1144
    2848:	f800283a 	ret
    284c:	047fffc4 	movi	r17,-1
    2850:	003ff106 	br	2818 <__sbprintf+0x80>

00002854 <__swsetup_r>:
    2854:	00800074 	movhi	r2,1
    2858:	defffd04 	addi	sp,sp,-12
    285c:	10858e04 	addi	r2,r2,5688
    2860:	dc400115 	stw	r17,4(sp)
    2864:	2023883a 	mov	r17,r4
    2868:	11000017 	ldw	r4,0(r2)
    286c:	dc000015 	stw	r16,0(sp)
    2870:	dfc00215 	stw	ra,8(sp)
    2874:	2821883a 	mov	r16,r5
    2878:	20000226 	beq	r4,zero,2884 <__swsetup_r+0x30>
    287c:	20800e17 	ldw	r2,56(r4)
    2880:	10003126 	beq	r2,zero,2948 <__swsetup_r+0xf4>
    2884:	8080030b 	ldhu	r2,12(r16)
    2888:	10c0020c 	andi	r3,r2,8
    288c:	1009883a 	mov	r4,r2
    2890:	18000f26 	beq	r3,zero,28d0 <__swsetup_r+0x7c>
    2894:	80c00417 	ldw	r3,16(r16)
    2898:	18001526 	beq	r3,zero,28f0 <__swsetup_r+0x9c>
    289c:	1100004c 	andi	r4,r2,1
    28a0:	20001c1e 	bne	r4,zero,2914 <__swsetup_r+0xc0>
    28a4:	1080008c 	andi	r2,r2,2
    28a8:	1000291e 	bne	r2,zero,2950 <__swsetup_r+0xfc>
    28ac:	80800517 	ldw	r2,20(r16)
    28b0:	80800215 	stw	r2,8(r16)
    28b4:	18001c26 	beq	r3,zero,2928 <__swsetup_r+0xd4>
    28b8:	0005883a 	mov	r2,zero
    28bc:	dfc00217 	ldw	ra,8(sp)
    28c0:	dc400117 	ldw	r17,4(sp)
    28c4:	dc000017 	ldw	r16,0(sp)
    28c8:	dec00304 	addi	sp,sp,12
    28cc:	f800283a 	ret
    28d0:	2080040c 	andi	r2,r4,16
    28d4:	10002e26 	beq	r2,zero,2990 <__swsetup_r+0x13c>
    28d8:	2080010c 	andi	r2,r4,4
    28dc:	10001e1e 	bne	r2,zero,2958 <__swsetup_r+0x104>
    28e0:	80c00417 	ldw	r3,16(r16)
    28e4:	20800214 	ori	r2,r4,8
    28e8:	8080030d 	sth	r2,12(r16)
    28ec:	183feb1e 	bne	r3,zero,289c <__swsetup_r+0x48>
    28f0:	1100a00c 	andi	r4,r2,640
    28f4:	01408004 	movi	r5,512
    28f8:	217fe826 	beq	r4,r5,289c <__swsetup_r+0x48>
    28fc:	800b883a 	mov	r5,r16
    2900:	8809883a 	mov	r4,r17
    2904:	00053cc0 	call	53cc <__smakebuf_r>
    2908:	8080030b 	ldhu	r2,12(r16)
    290c:	80c00417 	ldw	r3,16(r16)
    2910:	003fe206 	br	289c <__swsetup_r+0x48>
    2914:	80800517 	ldw	r2,20(r16)
    2918:	80000215 	stw	zero,8(r16)
    291c:	0085c83a 	sub	r2,zero,r2
    2920:	80800615 	stw	r2,24(r16)
    2924:	183fe41e 	bne	r3,zero,28b8 <__swsetup_r+0x64>
    2928:	80c0030b 	ldhu	r3,12(r16)
    292c:	0005883a 	mov	r2,zero
    2930:	1900200c 	andi	r4,r3,128
    2934:	203fe126 	beq	r4,zero,28bc <__swsetup_r+0x68>
    2938:	18c01014 	ori	r3,r3,64
    293c:	80c0030d 	sth	r3,12(r16)
    2940:	00bfffc4 	movi	r2,-1
    2944:	003fdd06 	br	28bc <__swsetup_r+0x68>
    2948:	00048280 	call	4828 <__sinit>
    294c:	003fcd06 	br	2884 <__swsetup_r+0x30>
    2950:	0005883a 	mov	r2,zero
    2954:	003fd606 	br	28b0 <__swsetup_r+0x5c>
    2958:	81400c17 	ldw	r5,48(r16)
    295c:	28000626 	beq	r5,zero,2978 <__swsetup_r+0x124>
    2960:	80801004 	addi	r2,r16,64
    2964:	28800326 	beq	r5,r2,2974 <__swsetup_r+0x120>
    2968:	8809883a 	mov	r4,r17
    296c:	000499c0 	call	499c <_free_r>
    2970:	8100030b 	ldhu	r4,12(r16)
    2974:	80000c15 	stw	zero,48(r16)
    2978:	80c00417 	ldw	r3,16(r16)
    297c:	00bff6c4 	movi	r2,-37
    2980:	1108703a 	and	r4,r2,r4
    2984:	80000115 	stw	zero,4(r16)
    2988:	80c00015 	stw	r3,0(r16)
    298c:	003fd506 	br	28e4 <__swsetup_r+0x90>
    2990:	00800244 	movi	r2,9
    2994:	88800015 	stw	r2,0(r17)
    2998:	20801014 	ori	r2,r4,64
    299c:	8080030d 	sth	r2,12(r16)
    29a0:	00bfffc4 	movi	r2,-1
    29a4:	003fc506 	br	28bc <__swsetup_r+0x68>

000029a8 <quorem>:
    29a8:	defff704 	addi	sp,sp,-36
    29ac:	dc800215 	stw	r18,8(sp)
    29b0:	20800417 	ldw	r2,16(r4)
    29b4:	2c800417 	ldw	r18,16(r5)
    29b8:	dfc00815 	stw	ra,32(sp)
    29bc:	ddc00715 	stw	r23,28(sp)
    29c0:	dd800615 	stw	r22,24(sp)
    29c4:	dd400515 	stw	r21,20(sp)
    29c8:	dd000415 	stw	r20,16(sp)
    29cc:	dcc00315 	stw	r19,12(sp)
    29d0:	dc400115 	stw	r17,4(sp)
    29d4:	dc000015 	stw	r16,0(sp)
    29d8:	14807116 	blt	r2,r18,2ba0 <quorem+0x1f8>
    29dc:	94bfffc4 	addi	r18,r18,-1
    29e0:	94ad883a 	add	r22,r18,r18
    29e4:	b5ad883a 	add	r22,r22,r22
    29e8:	2c400504 	addi	r17,r5,20
    29ec:	8da9883a 	add	r20,r17,r22
    29f0:	25400504 	addi	r21,r4,20
    29f4:	282f883a 	mov	r23,r5
    29f8:	adad883a 	add	r22,r21,r22
    29fc:	a1400017 	ldw	r5,0(r20)
    2a00:	2021883a 	mov	r16,r4
    2a04:	b1000017 	ldw	r4,0(r22)
    2a08:	29400044 	addi	r5,r5,1
    2a0c:	000a5a80 	call	a5a8 <__udivsi3>
    2a10:	1027883a 	mov	r19,r2
    2a14:	10002c26 	beq	r2,zero,2ac8 <quorem+0x120>
    2a18:	a813883a 	mov	r9,r21
    2a1c:	880b883a 	mov	r5,r17
    2a20:	0009883a 	mov	r4,zero
    2a24:	000d883a 	mov	r6,zero
    2a28:	2a000017 	ldw	r8,0(r5)
    2a2c:	49c00017 	ldw	r7,0(r9)
    2a30:	29400104 	addi	r5,r5,4
    2a34:	40bfffcc 	andi	r2,r8,65535
    2a38:	14c5383a 	mul	r2,r2,r19
    2a3c:	4010d43a 	srli	r8,r8,16
    2a40:	38ffffcc 	andi	r3,r7,65535
    2a44:	1105883a 	add	r2,r2,r4
    2a48:	1008d43a 	srli	r4,r2,16
    2a4c:	44d1383a 	mul	r8,r8,r19
    2a50:	198d883a 	add	r6,r3,r6
    2a54:	10ffffcc 	andi	r3,r2,65535
    2a58:	30c7c83a 	sub	r3,r6,r3
    2a5c:	380ed43a 	srli	r7,r7,16
    2a60:	4105883a 	add	r2,r8,r4
    2a64:	180dd43a 	srai	r6,r3,16
    2a68:	113fffcc 	andi	r4,r2,65535
    2a6c:	390fc83a 	sub	r7,r7,r4
    2a70:	398d883a 	add	r6,r7,r6
    2a74:	300e943a 	slli	r7,r6,16
    2a78:	18ffffcc 	andi	r3,r3,65535
    2a7c:	1008d43a 	srli	r4,r2,16
    2a80:	38ceb03a 	or	r7,r7,r3
    2a84:	49c00015 	stw	r7,0(r9)
    2a88:	300dd43a 	srai	r6,r6,16
    2a8c:	4a400104 	addi	r9,r9,4
    2a90:	a17fe52e 	bgeu	r20,r5,2a28 <quorem+0x80>
    2a94:	b0800017 	ldw	r2,0(r22)
    2a98:	10000b1e 	bne	r2,zero,2ac8 <quorem+0x120>
    2a9c:	b0bfff04 	addi	r2,r22,-4
    2aa0:	a880082e 	bgeu	r21,r2,2ac4 <quorem+0x11c>
    2aa4:	b0ffff17 	ldw	r3,-4(r22)
    2aa8:	18000326 	beq	r3,zero,2ab8 <quorem+0x110>
    2aac:	00000506 	br	2ac4 <quorem+0x11c>
    2ab0:	10c00017 	ldw	r3,0(r2)
    2ab4:	1800031e 	bne	r3,zero,2ac4 <quorem+0x11c>
    2ab8:	10bfff04 	addi	r2,r2,-4
    2abc:	94bfffc4 	addi	r18,r18,-1
    2ac0:	a8bffb36 	bltu	r21,r2,2ab0 <quorem+0x108>
    2ac4:	84800415 	stw	r18,16(r16)
    2ac8:	b80b883a 	mov	r5,r23
    2acc:	8009883a 	mov	r4,r16
    2ad0:	0006b0c0 	call	6b0c <__mcmp>
    2ad4:	10002616 	blt	r2,zero,2b70 <quorem+0x1c8>
    2ad8:	9cc00044 	addi	r19,r19,1
    2adc:	a805883a 	mov	r2,r21
    2ae0:	000b883a 	mov	r5,zero
    2ae4:	11000017 	ldw	r4,0(r2)
    2ae8:	89800017 	ldw	r6,0(r17)
    2aec:	10800104 	addi	r2,r2,4
    2af0:	20ffffcc 	andi	r3,r4,65535
    2af4:	194b883a 	add	r5,r3,r5
    2af8:	30ffffcc 	andi	r3,r6,65535
    2afc:	28c7c83a 	sub	r3,r5,r3
    2b00:	300cd43a 	srli	r6,r6,16
    2b04:	2008d43a 	srli	r4,r4,16
    2b08:	180bd43a 	srai	r5,r3,16
    2b0c:	18ffffcc 	andi	r3,r3,65535
    2b10:	2189c83a 	sub	r4,r4,r6
    2b14:	2149883a 	add	r4,r4,r5
    2b18:	200c943a 	slli	r6,r4,16
    2b1c:	8c400104 	addi	r17,r17,4
    2b20:	200bd43a 	srai	r5,r4,16
    2b24:	30c6b03a 	or	r3,r6,r3
    2b28:	10ffff15 	stw	r3,-4(r2)
    2b2c:	a47fed2e 	bgeu	r20,r17,2ae4 <quorem+0x13c>
    2b30:	9485883a 	add	r2,r18,r18
    2b34:	1085883a 	add	r2,r2,r2
    2b38:	a887883a 	add	r3,r21,r2
    2b3c:	18800017 	ldw	r2,0(r3)
    2b40:	10000b1e 	bne	r2,zero,2b70 <quorem+0x1c8>
    2b44:	18bfff04 	addi	r2,r3,-4
    2b48:	a880082e 	bgeu	r21,r2,2b6c <quorem+0x1c4>
    2b4c:	18ffff17 	ldw	r3,-4(r3)
    2b50:	18000326 	beq	r3,zero,2b60 <quorem+0x1b8>
    2b54:	00000506 	br	2b6c <quorem+0x1c4>
    2b58:	10c00017 	ldw	r3,0(r2)
    2b5c:	1800031e 	bne	r3,zero,2b6c <quorem+0x1c4>
    2b60:	10bfff04 	addi	r2,r2,-4
    2b64:	94bfffc4 	addi	r18,r18,-1
    2b68:	a8bffb36 	bltu	r21,r2,2b58 <quorem+0x1b0>
    2b6c:	84800415 	stw	r18,16(r16)
    2b70:	9805883a 	mov	r2,r19
    2b74:	dfc00817 	ldw	ra,32(sp)
    2b78:	ddc00717 	ldw	r23,28(sp)
    2b7c:	dd800617 	ldw	r22,24(sp)
    2b80:	dd400517 	ldw	r21,20(sp)
    2b84:	dd000417 	ldw	r20,16(sp)
    2b88:	dcc00317 	ldw	r19,12(sp)
    2b8c:	dc800217 	ldw	r18,8(sp)
    2b90:	dc400117 	ldw	r17,4(sp)
    2b94:	dc000017 	ldw	r16,0(sp)
    2b98:	dec00904 	addi	sp,sp,36
    2b9c:	f800283a 	ret
    2ba0:	0005883a 	mov	r2,zero
    2ba4:	003ff306 	br	2b74 <quorem+0x1cc>

00002ba8 <_dtoa_r>:
    2ba8:	20801017 	ldw	r2,64(r4)
    2bac:	deffde04 	addi	sp,sp,-136
    2bb0:	df002015 	stw	fp,128(sp)
    2bb4:	dcc01b15 	stw	r19,108(sp)
    2bb8:	dc801a15 	stw	r18,104(sp)
    2bbc:	dc401915 	stw	r17,100(sp)
    2bc0:	dc001815 	stw	r16,96(sp)
    2bc4:	dfc02115 	stw	ra,132(sp)
    2bc8:	ddc01f15 	stw	r23,124(sp)
    2bcc:	dd801e15 	stw	r22,120(sp)
    2bd0:	dd401d15 	stw	r21,116(sp)
    2bd4:	dd001c15 	stw	r20,112(sp)
    2bd8:	d9c00315 	stw	r7,12(sp)
    2bdc:	2039883a 	mov	fp,r4
    2be0:	3023883a 	mov	r17,r6
    2be4:	2825883a 	mov	r18,r5
    2be8:	dc002417 	ldw	r16,144(sp)
    2bec:	3027883a 	mov	r19,r6
    2bf0:	10000826 	beq	r2,zero,2c14 <_dtoa_r+0x6c>
    2bf4:	21801117 	ldw	r6,68(r4)
    2bf8:	00c00044 	movi	r3,1
    2bfc:	100b883a 	mov	r5,r2
    2c00:	1986983a 	sll	r3,r3,r6
    2c04:	11800115 	stw	r6,4(r2)
    2c08:	10c00215 	stw	r3,8(r2)
    2c0c:	00062ec0 	call	62ec <_Bfree>
    2c10:	e0001015 	stw	zero,64(fp)
    2c14:	88002e16 	blt	r17,zero,2cd0 <_dtoa_r+0x128>
    2c18:	80000015 	stw	zero,0(r16)
    2c1c:	889ffc2c 	andhi	r2,r17,32752
    2c20:	00dffc34 	movhi	r3,32752
    2c24:	10c01c26 	beq	r2,r3,2c98 <_dtoa_r+0xf0>
    2c28:	000d883a 	mov	r6,zero
    2c2c:	000f883a 	mov	r7,zero
    2c30:	9009883a 	mov	r4,r18
    2c34:	980b883a 	mov	r5,r19
    2c38:	000b7f80 	call	b7f8 <__eqdf2>
    2c3c:	10002b1e 	bne	r2,zero,2cec <_dtoa_r+0x144>
    2c40:	d9c02317 	ldw	r7,140(sp)
    2c44:	00800044 	movi	r2,1
    2c48:	38800015 	stw	r2,0(r7)
    2c4c:	d8802517 	ldw	r2,148(sp)
    2c50:	10019e26 	beq	r2,zero,32cc <_dtoa_r+0x724>
    2c54:	d8c02517 	ldw	r3,148(sp)
    2c58:	00800074 	movhi	r2,1
    2c5c:	10be2844 	addi	r2,r2,-1887
    2c60:	18800015 	stw	r2,0(r3)
    2c64:	10bfffc4 	addi	r2,r2,-1
    2c68:	dfc02117 	ldw	ra,132(sp)
    2c6c:	df002017 	ldw	fp,128(sp)
    2c70:	ddc01f17 	ldw	r23,124(sp)
    2c74:	dd801e17 	ldw	r22,120(sp)
    2c78:	dd401d17 	ldw	r21,116(sp)
    2c7c:	dd001c17 	ldw	r20,112(sp)
    2c80:	dcc01b17 	ldw	r19,108(sp)
    2c84:	dc801a17 	ldw	r18,104(sp)
    2c88:	dc401917 	ldw	r17,100(sp)
    2c8c:	dc001817 	ldw	r16,96(sp)
    2c90:	dec02204 	addi	sp,sp,136
    2c94:	f800283a 	ret
    2c98:	d8c02317 	ldw	r3,140(sp)
    2c9c:	0089c3c4 	movi	r2,9999
    2ca0:	18800015 	stw	r2,0(r3)
    2ca4:	90017726 	beq	r18,zero,3284 <_dtoa_r+0x6dc>
    2ca8:	00800074 	movhi	r2,1
    2cac:	10be3404 	addi	r2,r2,-1840
    2cb0:	d9002517 	ldw	r4,148(sp)
    2cb4:	203fec26 	beq	r4,zero,2c68 <_dtoa_r+0xc0>
    2cb8:	10c000c7 	ldb	r3,3(r2)
    2cbc:	1801781e 	bne	r3,zero,32a0 <_dtoa_r+0x6f8>
    2cc0:	10c000c4 	addi	r3,r2,3
    2cc4:	d9802517 	ldw	r6,148(sp)
    2cc8:	30c00015 	stw	r3,0(r6)
    2ccc:	003fe606 	br	2c68 <_dtoa_r+0xc0>
    2cd0:	04e00034 	movhi	r19,32768
    2cd4:	9cffffc4 	addi	r19,r19,-1
    2cd8:	00800044 	movi	r2,1
    2cdc:	8ce6703a 	and	r19,r17,r19
    2ce0:	80800015 	stw	r2,0(r16)
    2ce4:	9823883a 	mov	r17,r19
    2ce8:	003fcc06 	br	2c1c <_dtoa_r+0x74>
    2cec:	d8800204 	addi	r2,sp,8
    2cf0:	d8800015 	stw	r2,0(sp)
    2cf4:	d9c00104 	addi	r7,sp,4
    2cf8:	900b883a 	mov	r5,r18
    2cfc:	980d883a 	mov	r6,r19
    2d00:	e009883a 	mov	r4,fp
    2d04:	8820d53a 	srli	r16,r17,20
    2d08:	0006ed80 	call	6ed8 <__d2b>
    2d0c:	d8800915 	stw	r2,36(sp)
    2d10:	8001651e 	bne	r16,zero,32a8 <_dtoa_r+0x700>
    2d14:	dd800217 	ldw	r22,8(sp)
    2d18:	dc000117 	ldw	r16,4(sp)
    2d1c:	00800804 	movi	r2,32
    2d20:	b421883a 	add	r16,r22,r16
    2d24:	80c10c84 	addi	r3,r16,1074
    2d28:	10c2d10e 	bge	r2,r3,3870 <_dtoa_r+0xcc8>
    2d2c:	00801004 	movi	r2,64
    2d30:	81010484 	addi	r4,r16,1042
    2d34:	10c7c83a 	sub	r3,r2,r3
    2d38:	9108d83a 	srl	r4,r18,r4
    2d3c:	88e2983a 	sll	r17,r17,r3
    2d40:	2448b03a 	or	r4,r4,r17
    2d44:	000cbc00 	call	cbc0 <__floatunsidf>
    2d48:	017f8434 	movhi	r5,65040
    2d4c:	01800044 	movi	r6,1
    2d50:	1009883a 	mov	r4,r2
    2d54:	194b883a 	add	r5,r3,r5
    2d58:	843fffc4 	addi	r16,r16,-1
    2d5c:	d9801115 	stw	r6,68(sp)
    2d60:	000d883a 	mov	r6,zero
    2d64:	01cffe34 	movhi	r7,16376
    2d68:	000c1680 	call	c168 <__subdf3>
    2d6c:	0198dbf4 	movhi	r6,25455
    2d70:	01cff4f4 	movhi	r7,16339
    2d74:	3190d844 	addi	r6,r6,17249
    2d78:	39e1e9c4 	addi	r7,r7,-30809
    2d7c:	1009883a 	mov	r4,r2
    2d80:	180b883a 	mov	r5,r3
    2d84:	000ba500 	call	ba50 <__muldf3>
    2d88:	01a2d874 	movhi	r6,35681
    2d8c:	01cff1f4 	movhi	r7,16327
    2d90:	31b22cc4 	addi	r6,r6,-14157
    2d94:	39e28a04 	addi	r7,r7,-30168
    2d98:	180b883a 	mov	r5,r3
    2d9c:	1009883a 	mov	r4,r2
    2da0:	000a6640 	call	a664 <__adddf3>
    2da4:	8009883a 	mov	r4,r16
    2da8:	1029883a 	mov	r20,r2
    2dac:	1823883a 	mov	r17,r3
    2db0:	000cae40 	call	cae4 <__floatsidf>
    2db4:	019427f4 	movhi	r6,20639
    2db8:	01cff4f4 	movhi	r7,16339
    2dbc:	319e7ec4 	addi	r6,r6,31227
    2dc0:	39d104c4 	addi	r7,r7,17427
    2dc4:	1009883a 	mov	r4,r2
    2dc8:	180b883a 	mov	r5,r3
    2dcc:	000ba500 	call	ba50 <__muldf3>
    2dd0:	100d883a 	mov	r6,r2
    2dd4:	180f883a 	mov	r7,r3
    2dd8:	a009883a 	mov	r4,r20
    2ddc:	880b883a 	mov	r5,r17
    2de0:	000a6640 	call	a664 <__adddf3>
    2de4:	1009883a 	mov	r4,r2
    2de8:	180b883a 	mov	r5,r3
    2dec:	1029883a 	mov	r20,r2
    2df0:	1823883a 	mov	r17,r3
    2df4:	000ca640 	call	ca64 <__fixdfsi>
    2df8:	000d883a 	mov	r6,zero
    2dfc:	000f883a 	mov	r7,zero
    2e00:	a009883a 	mov	r4,r20
    2e04:	880b883a 	mov	r5,r17
    2e08:	d8800515 	stw	r2,20(sp)
    2e0c:	000b95c0 	call	b95c <__ledf2>
    2e10:	10028716 	blt	r2,zero,3830 <_dtoa_r+0xc88>
    2e14:	d8c00517 	ldw	r3,20(sp)
    2e18:	00800584 	movi	r2,22
    2e1c:	10c27536 	bltu	r2,r3,37f4 <_dtoa_r+0xc4c>
    2e20:	180490fa 	slli	r2,r3,3
    2e24:	00c00074 	movhi	r3,1
    2e28:	18fe5004 	addi	r3,r3,-1728
    2e2c:	1885883a 	add	r2,r3,r2
    2e30:	11000017 	ldw	r4,0(r2)
    2e34:	11400117 	ldw	r5,4(r2)
    2e38:	900d883a 	mov	r6,r18
    2e3c:	980f883a 	mov	r7,r19
    2e40:	000b8800 	call	b880 <__gedf2>
    2e44:	00828d0e 	bge	zero,r2,387c <_dtoa_r+0xcd4>
    2e48:	d9000517 	ldw	r4,20(sp)
    2e4c:	d8000e15 	stw	zero,56(sp)
    2e50:	213fffc4 	addi	r4,r4,-1
    2e54:	d9000515 	stw	r4,20(sp)
    2e58:	b42dc83a 	sub	r22,r22,r16
    2e5c:	b5bfffc4 	addi	r22,r22,-1
    2e60:	b0026f16 	blt	r22,zero,3820 <_dtoa_r+0xc78>
    2e64:	d8000815 	stw	zero,32(sp)
    2e68:	d9c00517 	ldw	r7,20(sp)
    2e6c:	38026416 	blt	r7,zero,3800 <_dtoa_r+0xc58>
    2e70:	b1ed883a 	add	r22,r22,r7
    2e74:	d9c00d15 	stw	r7,52(sp)
    2e78:	d8000a15 	stw	zero,40(sp)
    2e7c:	d9800317 	ldw	r6,12(sp)
    2e80:	00800244 	movi	r2,9
    2e84:	11811436 	bltu	r2,r6,32d8 <_dtoa_r+0x730>
    2e88:	00800144 	movi	r2,5
    2e8c:	1184e10e 	bge	r2,r6,4214 <_dtoa_r+0x166c>
    2e90:	31bfff04 	addi	r6,r6,-4
    2e94:	d9800315 	stw	r6,12(sp)
    2e98:	0023883a 	mov	r17,zero
    2e9c:	d9800317 	ldw	r6,12(sp)
    2ea0:	008000c4 	movi	r2,3
    2ea4:	30836726 	beq	r6,r2,3c44 <_dtoa_r+0x109c>
    2ea8:	1183410e 	bge	r2,r6,3bb0 <_dtoa_r+0x1008>
    2eac:	d9c00317 	ldw	r7,12(sp)
    2eb0:	00800104 	movi	r2,4
    2eb4:	38827c26 	beq	r7,r2,38a8 <_dtoa_r+0xd00>
    2eb8:	00800144 	movi	r2,5
    2ebc:	3884c41e 	bne	r7,r2,41d0 <_dtoa_r+0x1628>
    2ec0:	00800044 	movi	r2,1
    2ec4:	d8800b15 	stw	r2,44(sp)
    2ec8:	d8c00517 	ldw	r3,20(sp)
    2ecc:	d9002217 	ldw	r4,136(sp)
    2ed0:	1907883a 	add	r3,r3,r4
    2ed4:	19800044 	addi	r6,r3,1
    2ed8:	d8c00c15 	stw	r3,48(sp)
    2edc:	d9800615 	stw	r6,24(sp)
    2ee0:	0183a40e 	bge	zero,r6,3d74 <_dtoa_r+0x11cc>
    2ee4:	d9800617 	ldw	r6,24(sp)
    2ee8:	3021883a 	mov	r16,r6
    2eec:	e0001115 	stw	zero,68(fp)
    2ef0:	008005c4 	movi	r2,23
    2ef4:	1184c92e 	bgeu	r2,r6,421c <_dtoa_r+0x1674>
    2ef8:	00c00044 	movi	r3,1
    2efc:	00800104 	movi	r2,4
    2f00:	1085883a 	add	r2,r2,r2
    2f04:	11000504 	addi	r4,r2,20
    2f08:	180b883a 	mov	r5,r3
    2f0c:	18c00044 	addi	r3,r3,1
    2f10:	313ffb2e 	bgeu	r6,r4,2f00 <_dtoa_r+0x358>
    2f14:	e1401115 	stw	r5,68(fp)
    2f18:	e009883a 	mov	r4,fp
    2f1c:	00062440 	call	6244 <_Balloc>
    2f20:	d8800715 	stw	r2,28(sp)
    2f24:	e0801015 	stw	r2,64(fp)
    2f28:	00800384 	movi	r2,14
    2f2c:	1400f736 	bltu	r2,r16,330c <_dtoa_r+0x764>
    2f30:	8800f626 	beq	r17,zero,330c <_dtoa_r+0x764>
    2f34:	d9c00517 	ldw	r7,20(sp)
    2f38:	01c39a0e 	bge	zero,r7,3da4 <_dtoa_r+0x11fc>
    2f3c:	388003cc 	andi	r2,r7,15
    2f40:	100490fa 	slli	r2,r2,3
    2f44:	382bd13a 	srai	r21,r7,4
    2f48:	00c00074 	movhi	r3,1
    2f4c:	18fe5004 	addi	r3,r3,-1728
    2f50:	1885883a 	add	r2,r3,r2
    2f54:	a8c0040c 	andi	r3,r21,16
    2f58:	12400017 	ldw	r9,0(r2)
    2f5c:	12000117 	ldw	r8,4(r2)
    2f60:	18037926 	beq	r3,zero,3d48 <_dtoa_r+0x11a0>
    2f64:	00800074 	movhi	r2,1
    2f68:	10be4604 	addi	r2,r2,-1768
    2f6c:	11800817 	ldw	r6,32(r2)
    2f70:	11c00917 	ldw	r7,36(r2)
    2f74:	9009883a 	mov	r4,r18
    2f78:	980b883a 	mov	r5,r19
    2f7c:	da001715 	stw	r8,92(sp)
    2f80:	da401615 	stw	r9,88(sp)
    2f84:	000af100 	call	af10 <__divdf3>
    2f88:	da001717 	ldw	r8,92(sp)
    2f8c:	da401617 	ldw	r9,88(sp)
    2f90:	ad4003cc 	andi	r21,r21,15
    2f94:	040000c4 	movi	r16,3
    2f98:	1023883a 	mov	r17,r2
    2f9c:	1829883a 	mov	r20,r3
    2fa0:	a8001126 	beq	r21,zero,2fe8 <_dtoa_r+0x440>
    2fa4:	05c00074 	movhi	r23,1
    2fa8:	bdfe4604 	addi	r23,r23,-1768
    2fac:	4805883a 	mov	r2,r9
    2fb0:	4007883a 	mov	r3,r8
    2fb4:	a980004c 	andi	r6,r21,1
    2fb8:	1009883a 	mov	r4,r2
    2fbc:	a82bd07a 	srai	r21,r21,1
    2fc0:	180b883a 	mov	r5,r3
    2fc4:	30000426 	beq	r6,zero,2fd8 <_dtoa_r+0x430>
    2fc8:	b9800017 	ldw	r6,0(r23)
    2fcc:	b9c00117 	ldw	r7,4(r23)
    2fd0:	84000044 	addi	r16,r16,1
    2fd4:	000ba500 	call	ba50 <__muldf3>
    2fd8:	bdc00204 	addi	r23,r23,8
    2fdc:	a83ff51e 	bne	r21,zero,2fb4 <_dtoa_r+0x40c>
    2fe0:	1013883a 	mov	r9,r2
    2fe4:	1811883a 	mov	r8,r3
    2fe8:	480d883a 	mov	r6,r9
    2fec:	400f883a 	mov	r7,r8
    2ff0:	8809883a 	mov	r4,r17
    2ff4:	a00b883a 	mov	r5,r20
    2ff8:	000af100 	call	af10 <__divdf3>
    2ffc:	d8800f15 	stw	r2,60(sp)
    3000:	d8c01015 	stw	r3,64(sp)
    3004:	d8c00e17 	ldw	r3,56(sp)
    3008:	18000626 	beq	r3,zero,3024 <_dtoa_r+0x47c>
    300c:	d9000f17 	ldw	r4,60(sp)
    3010:	d9401017 	ldw	r5,64(sp)
    3014:	000d883a 	mov	r6,zero
    3018:	01cffc34 	movhi	r7,16368
    301c:	000b95c0 	call	b95c <__ledf2>
    3020:	10040b16 	blt	r2,zero,4050 <_dtoa_r+0x14a8>
    3024:	8009883a 	mov	r4,r16
    3028:	000cae40 	call	cae4 <__floatsidf>
    302c:	d9800f17 	ldw	r6,60(sp)
    3030:	d9c01017 	ldw	r7,64(sp)
    3034:	1009883a 	mov	r4,r2
    3038:	180b883a 	mov	r5,r3
    303c:	000ba500 	call	ba50 <__muldf3>
    3040:	000d883a 	mov	r6,zero
    3044:	01d00734 	movhi	r7,16412
    3048:	1009883a 	mov	r4,r2
    304c:	180b883a 	mov	r5,r3
    3050:	000a6640 	call	a664 <__adddf3>
    3054:	1021883a 	mov	r16,r2
    3058:	d8800617 	ldw	r2,24(sp)
    305c:	047f3034 	movhi	r17,64704
    3060:	1c63883a 	add	r17,r3,r17
    3064:	10031826 	beq	r2,zero,3cc8 <_dtoa_r+0x1120>
    3068:	d8c00517 	ldw	r3,20(sp)
    306c:	db000617 	ldw	r12,24(sp)
    3070:	d8c01315 	stw	r3,76(sp)
    3074:	d9000b17 	ldw	r4,44(sp)
    3078:	20038f26 	beq	r4,zero,3eb8 <_dtoa_r+0x1310>
    307c:	60bfffc4 	addi	r2,r12,-1
    3080:	100490fa 	slli	r2,r2,3
    3084:	00c00074 	movhi	r3,1
    3088:	18fe5004 	addi	r3,r3,-1728
    308c:	1885883a 	add	r2,r3,r2
    3090:	11800017 	ldw	r6,0(r2)
    3094:	11c00117 	ldw	r7,4(r2)
    3098:	d8800717 	ldw	r2,28(sp)
    309c:	0009883a 	mov	r4,zero
    30a0:	014ff834 	movhi	r5,16352
    30a4:	db001615 	stw	r12,88(sp)
    30a8:	15c00044 	addi	r23,r2,1
    30ac:	000af100 	call	af10 <__divdf3>
    30b0:	800d883a 	mov	r6,r16
    30b4:	880f883a 	mov	r7,r17
    30b8:	1009883a 	mov	r4,r2
    30bc:	180b883a 	mov	r5,r3
    30c0:	000c1680 	call	c168 <__subdf3>
    30c4:	d9401017 	ldw	r5,64(sp)
    30c8:	d9000f17 	ldw	r4,60(sp)
    30cc:	102b883a 	mov	r21,r2
    30d0:	d8c01215 	stw	r3,72(sp)
    30d4:	000ca640 	call	ca64 <__fixdfsi>
    30d8:	1009883a 	mov	r4,r2
    30dc:	1029883a 	mov	r20,r2
    30e0:	000cae40 	call	cae4 <__floatsidf>
    30e4:	d9000f17 	ldw	r4,60(sp)
    30e8:	d9401017 	ldw	r5,64(sp)
    30ec:	100d883a 	mov	r6,r2
    30f0:	180f883a 	mov	r7,r3
    30f4:	000c1680 	call	c168 <__subdf3>
    30f8:	1823883a 	mov	r17,r3
    30fc:	d8c00717 	ldw	r3,28(sp)
    3100:	d9401217 	ldw	r5,72(sp)
    3104:	a2000c04 	addi	r8,r20,48
    3108:	1021883a 	mov	r16,r2
    310c:	1a000005 	stb	r8,0(r3)
    3110:	800d883a 	mov	r6,r16
    3114:	880f883a 	mov	r7,r17
    3118:	a809883a 	mov	r4,r21
    311c:	4029883a 	mov	r20,r8
    3120:	000b8800 	call	b880 <__gedf2>
    3124:	00841d16 	blt	zero,r2,419c <_dtoa_r+0x15f4>
    3128:	800d883a 	mov	r6,r16
    312c:	880f883a 	mov	r7,r17
    3130:	0009883a 	mov	r4,zero
    3134:	014ffc34 	movhi	r5,16368
    3138:	000c1680 	call	c168 <__subdf3>
    313c:	d9401217 	ldw	r5,72(sp)
    3140:	100d883a 	mov	r6,r2
    3144:	180f883a 	mov	r7,r3
    3148:	a809883a 	mov	r4,r21
    314c:	000b8800 	call	b880 <__gedf2>
    3150:	db001617 	ldw	r12,88(sp)
    3154:	00840e16 	blt	zero,r2,4190 <_dtoa_r+0x15e8>
    3158:	00800044 	movi	r2,1
    315c:	13006b0e 	bge	r2,r12,330c <_dtoa_r+0x764>
    3160:	d9000717 	ldw	r4,28(sp)
    3164:	dd800f15 	stw	r22,60(sp)
    3168:	dcc01015 	stw	r19,64(sp)
    316c:	2319883a 	add	r12,r4,r12
    3170:	dcc01217 	ldw	r19,72(sp)
    3174:	602d883a 	mov	r22,r12
    3178:	dc801215 	stw	r18,72(sp)
    317c:	b825883a 	mov	r18,r23
    3180:	00000906 	br	31a8 <_dtoa_r+0x600>
    3184:	000c1680 	call	c168 <__subdf3>
    3188:	a80d883a 	mov	r6,r21
    318c:	980f883a 	mov	r7,r19
    3190:	1009883a 	mov	r4,r2
    3194:	180b883a 	mov	r5,r3
    3198:	000b95c0 	call	b95c <__ledf2>
    319c:	1003e816 	blt	r2,zero,4140 <_dtoa_r+0x1598>
    31a0:	b825883a 	mov	r18,r23
    31a4:	bd83e926 	beq	r23,r22,414c <_dtoa_r+0x15a4>
    31a8:	a809883a 	mov	r4,r21
    31ac:	980b883a 	mov	r5,r19
    31b0:	000d883a 	mov	r6,zero
    31b4:	01d00934 	movhi	r7,16420
    31b8:	000ba500 	call	ba50 <__muldf3>
    31bc:	000d883a 	mov	r6,zero
    31c0:	01d00934 	movhi	r7,16420
    31c4:	8009883a 	mov	r4,r16
    31c8:	880b883a 	mov	r5,r17
    31cc:	102b883a 	mov	r21,r2
    31d0:	1827883a 	mov	r19,r3
    31d4:	000ba500 	call	ba50 <__muldf3>
    31d8:	180b883a 	mov	r5,r3
    31dc:	1009883a 	mov	r4,r2
    31e0:	1821883a 	mov	r16,r3
    31e4:	1023883a 	mov	r17,r2
    31e8:	000ca640 	call	ca64 <__fixdfsi>
    31ec:	1009883a 	mov	r4,r2
    31f0:	1029883a 	mov	r20,r2
    31f4:	000cae40 	call	cae4 <__floatsidf>
    31f8:	8809883a 	mov	r4,r17
    31fc:	800b883a 	mov	r5,r16
    3200:	100d883a 	mov	r6,r2
    3204:	180f883a 	mov	r7,r3
    3208:	000c1680 	call	c168 <__subdf3>
    320c:	a5000c04 	addi	r20,r20,48
    3210:	a80d883a 	mov	r6,r21
    3214:	980f883a 	mov	r7,r19
    3218:	1009883a 	mov	r4,r2
    321c:	180b883a 	mov	r5,r3
    3220:	95000005 	stb	r20,0(r18)
    3224:	1021883a 	mov	r16,r2
    3228:	1823883a 	mov	r17,r3
    322c:	000b95c0 	call	b95c <__ledf2>
    3230:	bdc00044 	addi	r23,r23,1
    3234:	800d883a 	mov	r6,r16
    3238:	880f883a 	mov	r7,r17
    323c:	0009883a 	mov	r4,zero
    3240:	014ffc34 	movhi	r5,16368
    3244:	103fcf0e 	bge	r2,zero,3184 <_dtoa_r+0x5dc>
    3248:	d8c01317 	ldw	r3,76(sp)
    324c:	d8c00515 	stw	r3,20(sp)
    3250:	d9400917 	ldw	r5,36(sp)
    3254:	e009883a 	mov	r4,fp
    3258:	00062ec0 	call	62ec <_Bfree>
    325c:	d9000517 	ldw	r4,20(sp)
    3260:	d9802317 	ldw	r6,140(sp)
    3264:	d9c02517 	ldw	r7,148(sp)
    3268:	b8000005 	stb	zero,0(r23)
    326c:	20800044 	addi	r2,r4,1
    3270:	30800015 	stw	r2,0(r6)
    3274:	3802aa26 	beq	r7,zero,3d20 <_dtoa_r+0x1178>
    3278:	3dc00015 	stw	r23,0(r7)
    327c:	d8800717 	ldw	r2,28(sp)
    3280:	003e7906 	br	2c68 <_dtoa_r+0xc0>
    3284:	00800434 	movhi	r2,16
    3288:	10bfffc4 	addi	r2,r2,-1
    328c:	88a2703a 	and	r17,r17,r2
    3290:	883e851e 	bne	r17,zero,2ca8 <_dtoa_r+0x100>
    3294:	00800074 	movhi	r2,1
    3298:	10be3104 	addi	r2,r2,-1852
    329c:	003e8406 	br	2cb0 <_dtoa_r+0x108>
    32a0:	10c00204 	addi	r3,r2,8
    32a4:	003e8706 	br	2cc4 <_dtoa_r+0x11c>
    32a8:	01400434 	movhi	r5,16
    32ac:	297fffc4 	addi	r5,r5,-1
    32b0:	994a703a 	and	r5,r19,r5
    32b4:	9009883a 	mov	r4,r18
    32b8:	843f0044 	addi	r16,r16,-1023
    32bc:	294ffc34 	orhi	r5,r5,16368
    32c0:	dd800217 	ldw	r22,8(sp)
    32c4:	d8001115 	stw	zero,68(sp)
    32c8:	003ea506 	br	2d60 <_dtoa_r+0x1b8>
    32cc:	00800074 	movhi	r2,1
    32d0:	10be2804 	addi	r2,r2,-1888
    32d4:	003e6406 	br	2c68 <_dtoa_r+0xc0>
    32d8:	e0001115 	stw	zero,68(fp)
    32dc:	000b883a 	mov	r5,zero
    32e0:	e009883a 	mov	r4,fp
    32e4:	00062440 	call	6244 <_Balloc>
    32e8:	01bfffc4 	movi	r6,-1
    32ec:	01c00044 	movi	r7,1
    32f0:	d8800715 	stw	r2,28(sp)
    32f4:	d9800c15 	stw	r6,48(sp)
    32f8:	e0801015 	stw	r2,64(fp)
    32fc:	d8000315 	stw	zero,12(sp)
    3300:	d9c00b15 	stw	r7,44(sp)
    3304:	d9800615 	stw	r6,24(sp)
    3308:	d8002215 	stw	zero,136(sp)
    330c:	d8800117 	ldw	r2,4(sp)
    3310:	10008916 	blt	r2,zero,3538 <_dtoa_r+0x990>
    3314:	d9000517 	ldw	r4,20(sp)
    3318:	00c00384 	movi	r3,14
    331c:	19008616 	blt	r3,r4,3538 <_dtoa_r+0x990>
    3320:	200490fa 	slli	r2,r4,3
    3324:	00c00074 	movhi	r3,1
    3328:	d9802217 	ldw	r6,136(sp)
    332c:	18fe5004 	addi	r3,r3,-1728
    3330:	1885883a 	add	r2,r3,r2
    3334:	14000017 	ldw	r16,0(r2)
    3338:	14400117 	ldw	r17,4(r2)
    333c:	30016316 	blt	r6,zero,38cc <_dtoa_r+0xd24>
    3340:	800d883a 	mov	r6,r16
    3344:	880f883a 	mov	r7,r17
    3348:	9009883a 	mov	r4,r18
    334c:	980b883a 	mov	r5,r19
    3350:	000af100 	call	af10 <__divdf3>
    3354:	180b883a 	mov	r5,r3
    3358:	1009883a 	mov	r4,r2
    335c:	000ca640 	call	ca64 <__fixdfsi>
    3360:	1009883a 	mov	r4,r2
    3364:	102b883a 	mov	r21,r2
    3368:	000cae40 	call	cae4 <__floatsidf>
    336c:	800d883a 	mov	r6,r16
    3370:	880f883a 	mov	r7,r17
    3374:	1009883a 	mov	r4,r2
    3378:	180b883a 	mov	r5,r3
    337c:	000ba500 	call	ba50 <__muldf3>
    3380:	100d883a 	mov	r6,r2
    3384:	180f883a 	mov	r7,r3
    3388:	9009883a 	mov	r4,r18
    338c:	980b883a 	mov	r5,r19
    3390:	000c1680 	call	c168 <__subdf3>
    3394:	d9c00717 	ldw	r7,28(sp)
    3398:	1009883a 	mov	r4,r2
    339c:	a8800c04 	addi	r2,r21,48
    33a0:	38800005 	stb	r2,0(r7)
    33a4:	3dc00044 	addi	r23,r7,1
    33a8:	d9c00617 	ldw	r7,24(sp)
    33ac:	01800044 	movi	r6,1
    33b0:	180b883a 	mov	r5,r3
    33b4:	2005883a 	mov	r2,r4
    33b8:	39803826 	beq	r7,r6,349c <_dtoa_r+0x8f4>
    33bc:	000d883a 	mov	r6,zero
    33c0:	01d00934 	movhi	r7,16420
    33c4:	000ba500 	call	ba50 <__muldf3>
    33c8:	000d883a 	mov	r6,zero
    33cc:	000f883a 	mov	r7,zero
    33d0:	1009883a 	mov	r4,r2
    33d4:	180b883a 	mov	r5,r3
    33d8:	1025883a 	mov	r18,r2
    33dc:	1827883a 	mov	r19,r3
    33e0:	000b7f80 	call	b7f8 <__eqdf2>
    33e4:	103f9a26 	beq	r2,zero,3250 <_dtoa_r+0x6a8>
    33e8:	d9c00617 	ldw	r7,24(sp)
    33ec:	d8c00717 	ldw	r3,28(sp)
    33f0:	b829883a 	mov	r20,r23
    33f4:	38bfffc4 	addi	r2,r7,-1
    33f8:	18ad883a 	add	r22,r3,r2
    33fc:	00000a06 	br	3428 <_dtoa_r+0x880>
    3400:	000ba500 	call	ba50 <__muldf3>
    3404:	000d883a 	mov	r6,zero
    3408:	000f883a 	mov	r7,zero
    340c:	1009883a 	mov	r4,r2
    3410:	180b883a 	mov	r5,r3
    3414:	1025883a 	mov	r18,r2
    3418:	1827883a 	mov	r19,r3
    341c:	b829883a 	mov	r20,r23
    3420:	000b7f80 	call	b7f8 <__eqdf2>
    3424:	103f8a26 	beq	r2,zero,3250 <_dtoa_r+0x6a8>
    3428:	800d883a 	mov	r6,r16
    342c:	880f883a 	mov	r7,r17
    3430:	9009883a 	mov	r4,r18
    3434:	980b883a 	mov	r5,r19
    3438:	000af100 	call	af10 <__divdf3>
    343c:	180b883a 	mov	r5,r3
    3440:	1009883a 	mov	r4,r2
    3444:	000ca640 	call	ca64 <__fixdfsi>
    3448:	1009883a 	mov	r4,r2
    344c:	102b883a 	mov	r21,r2
    3450:	000cae40 	call	cae4 <__floatsidf>
    3454:	800d883a 	mov	r6,r16
    3458:	880f883a 	mov	r7,r17
    345c:	1009883a 	mov	r4,r2
    3460:	180b883a 	mov	r5,r3
    3464:	000ba500 	call	ba50 <__muldf3>
    3468:	100d883a 	mov	r6,r2
    346c:	180f883a 	mov	r7,r3
    3470:	9009883a 	mov	r4,r18
    3474:	980b883a 	mov	r5,r19
    3478:	000c1680 	call	c168 <__subdf3>
    347c:	aa000c04 	addi	r8,r21,48
    3480:	a2000005 	stb	r8,0(r20)
    3484:	000d883a 	mov	r6,zero
    3488:	01d00934 	movhi	r7,16420
    348c:	1009883a 	mov	r4,r2
    3490:	180b883a 	mov	r5,r3
    3494:	a5c00044 	addi	r23,r20,1
    3498:	b53fd91e 	bne	r22,r20,3400 <_dtoa_r+0x858>
    349c:	100d883a 	mov	r6,r2
    34a0:	180f883a 	mov	r7,r3
    34a4:	1009883a 	mov	r4,r2
    34a8:	180b883a 	mov	r5,r3
    34ac:	000a6640 	call	a664 <__adddf3>
    34b0:	100d883a 	mov	r6,r2
    34b4:	180f883a 	mov	r7,r3
    34b8:	8009883a 	mov	r4,r16
    34bc:	880b883a 	mov	r5,r17
    34c0:	1027883a 	mov	r19,r2
    34c4:	1825883a 	mov	r18,r3
    34c8:	000b95c0 	call	b95c <__ledf2>
    34cc:	10000816 	blt	r2,zero,34f0 <_dtoa_r+0x948>
    34d0:	980d883a 	mov	r6,r19
    34d4:	900f883a 	mov	r7,r18
    34d8:	8009883a 	mov	r4,r16
    34dc:	880b883a 	mov	r5,r17
    34e0:	000b7f80 	call	b7f8 <__eqdf2>
    34e4:	103f5a1e 	bne	r2,zero,3250 <_dtoa_r+0x6a8>
    34e8:	ad40004c 	andi	r21,r21,1
    34ec:	a83f5826 	beq	r21,zero,3250 <_dtoa_r+0x6a8>
    34f0:	bd3fffc3 	ldbu	r20,-1(r23)
    34f4:	b8bfffc4 	addi	r2,r23,-1
    34f8:	1007883a 	mov	r3,r2
    34fc:	01400e44 	movi	r5,57
    3500:	d9800717 	ldw	r6,28(sp)
    3504:	00000506 	br	351c <_dtoa_r+0x974>
    3508:	18ffffc4 	addi	r3,r3,-1
    350c:	11824726 	beq	r2,r6,3e2c <_dtoa_r+0x1284>
    3510:	1d000003 	ldbu	r20,0(r3)
    3514:	102f883a 	mov	r23,r2
    3518:	10bfffc4 	addi	r2,r2,-1
    351c:	a1003fcc 	andi	r4,r20,255
    3520:	2100201c 	xori	r4,r4,128
    3524:	213fe004 	addi	r4,r4,-128
    3528:	217ff726 	beq	r4,r5,3508 <_dtoa_r+0x960>
    352c:	a2000044 	addi	r8,r20,1
    3530:	12000005 	stb	r8,0(r2)
    3534:	003f4606 	br	3250 <_dtoa_r+0x6a8>
    3538:	d9000b17 	ldw	r4,44(sp)
    353c:	2000c826 	beq	r4,zero,3860 <_dtoa_r+0xcb8>
    3540:	d9800317 	ldw	r6,12(sp)
    3544:	00c00044 	movi	r3,1
    3548:	1980f90e 	bge	r3,r6,3930 <_dtoa_r+0xd88>
    354c:	d8800617 	ldw	r2,24(sp)
    3550:	d8c00a17 	ldw	r3,40(sp)
    3554:	157fffc4 	addi	r21,r2,-1
    3558:	1d41f316 	blt	r3,r21,3d28 <_dtoa_r+0x1180>
    355c:	1d6bc83a 	sub	r21,r3,r21
    3560:	d9c00617 	ldw	r7,24(sp)
    3564:	3802aa16 	blt	r7,zero,4010 <_dtoa_r+0x1468>
    3568:	dd000817 	ldw	r20,32(sp)
    356c:	d8800617 	ldw	r2,24(sp)
    3570:	d8c00817 	ldw	r3,32(sp)
    3574:	01400044 	movi	r5,1
    3578:	e009883a 	mov	r4,fp
    357c:	1887883a 	add	r3,r3,r2
    3580:	d8c00815 	stw	r3,32(sp)
    3584:	b0ad883a 	add	r22,r22,r2
    3588:	00066500 	call	6650 <__i2b>
    358c:	1023883a 	mov	r17,r2
    3590:	a0000826 	beq	r20,zero,35b4 <_dtoa_r+0xa0c>
    3594:	0580070e 	bge	zero,r22,35b4 <_dtoa_r+0xa0c>
    3598:	a005883a 	mov	r2,r20
    359c:	b500b916 	blt	r22,r20,3884 <_dtoa_r+0xcdc>
    35a0:	d9000817 	ldw	r4,32(sp)
    35a4:	a0a9c83a 	sub	r20,r20,r2
    35a8:	b0adc83a 	sub	r22,r22,r2
    35ac:	2089c83a 	sub	r4,r4,r2
    35b0:	d9000815 	stw	r4,32(sp)
    35b4:	d9800a17 	ldw	r6,40(sp)
    35b8:	0181810e 	bge	zero,r6,3bc0 <_dtoa_r+0x1018>
    35bc:	d9c00b17 	ldw	r7,44(sp)
    35c0:	3800b326 	beq	r7,zero,3890 <_dtoa_r+0xce8>
    35c4:	a800b226 	beq	r21,zero,3890 <_dtoa_r+0xce8>
    35c8:	880b883a 	mov	r5,r17
    35cc:	a80d883a 	mov	r6,r21
    35d0:	e009883a 	mov	r4,fp
    35d4:	00068840 	call	6884 <__pow5mult>
    35d8:	d9800917 	ldw	r6,36(sp)
    35dc:	100b883a 	mov	r5,r2
    35e0:	e009883a 	mov	r4,fp
    35e4:	1023883a 	mov	r17,r2
    35e8:	000668c0 	call	668c <__multiply>
    35ec:	1021883a 	mov	r16,r2
    35f0:	d8800a17 	ldw	r2,40(sp)
    35f4:	d9400917 	ldw	r5,36(sp)
    35f8:	e009883a 	mov	r4,fp
    35fc:	1545c83a 	sub	r2,r2,r21
    3600:	d8800a15 	stw	r2,40(sp)
    3604:	00062ec0 	call	62ec <_Bfree>
    3608:	d8c00a17 	ldw	r3,40(sp)
    360c:	18009f1e 	bne	r3,zero,388c <_dtoa_r+0xce4>
    3610:	05c00044 	movi	r23,1
    3614:	e009883a 	mov	r4,fp
    3618:	b80b883a 	mov	r5,r23
    361c:	00066500 	call	6650 <__i2b>
    3620:	d9000d17 	ldw	r4,52(sp)
    3624:	102b883a 	mov	r21,r2
    3628:	2000ce26 	beq	r4,zero,3964 <_dtoa_r+0xdbc>
    362c:	200d883a 	mov	r6,r4
    3630:	100b883a 	mov	r5,r2
    3634:	e009883a 	mov	r4,fp
    3638:	00068840 	call	6884 <__pow5mult>
    363c:	d9800317 	ldw	r6,12(sp)
    3640:	102b883a 	mov	r21,r2
    3644:	b981810e 	bge	r23,r6,3c4c <_dtoa_r+0x10a4>
    3648:	0027883a 	mov	r19,zero
    364c:	a8800417 	ldw	r2,16(r21)
    3650:	05c00804 	movi	r23,32
    3654:	10800104 	addi	r2,r2,4
    3658:	1085883a 	add	r2,r2,r2
    365c:	1085883a 	add	r2,r2,r2
    3660:	a885883a 	add	r2,r21,r2
    3664:	11000017 	ldw	r4,0(r2)
    3668:	00065380 	call	6538 <__hi0bits>
    366c:	b885c83a 	sub	r2,r23,r2
    3670:	1585883a 	add	r2,r2,r22
    3674:	108007cc 	andi	r2,r2,31
    3678:	1000b326 	beq	r2,zero,3948 <_dtoa_r+0xda0>
    367c:	00c00804 	movi	r3,32
    3680:	1887c83a 	sub	r3,r3,r2
    3684:	01000104 	movi	r4,4
    3688:	20c2cd0e 	bge	r4,r3,41c0 <_dtoa_r+0x1618>
    368c:	00c00704 	movi	r3,28
    3690:	1885c83a 	sub	r2,r3,r2
    3694:	d8c00817 	ldw	r3,32(sp)
    3698:	a0a9883a 	add	r20,r20,r2
    369c:	b0ad883a 	add	r22,r22,r2
    36a0:	1887883a 	add	r3,r3,r2
    36a4:	d8c00815 	stw	r3,32(sp)
    36a8:	d9800817 	ldw	r6,32(sp)
    36ac:	0180040e 	bge	zero,r6,36c0 <_dtoa_r+0xb18>
    36b0:	800b883a 	mov	r5,r16
    36b4:	e009883a 	mov	r4,fp
    36b8:	00069c40 	call	69c4 <__lshift>
    36bc:	1021883a 	mov	r16,r2
    36c0:	0580050e 	bge	zero,r22,36d8 <_dtoa_r+0xb30>
    36c4:	a80b883a 	mov	r5,r21
    36c8:	b00d883a 	mov	r6,r22
    36cc:	e009883a 	mov	r4,fp
    36d0:	00069c40 	call	69c4 <__lshift>
    36d4:	102b883a 	mov	r21,r2
    36d8:	d9c00e17 	ldw	r7,56(sp)
    36dc:	3801211e 	bne	r7,zero,3b64 <_dtoa_r+0xfbc>
    36e0:	d9800617 	ldw	r6,24(sp)
    36e4:	0181380e 	bge	zero,r6,3bc8 <_dtoa_r+0x1020>
    36e8:	d8c00b17 	ldw	r3,44(sp)
    36ec:	1800ab1e 	bne	r3,zero,399c <_dtoa_r+0xdf4>
    36f0:	dc800717 	ldw	r18,28(sp)
    36f4:	dcc00617 	ldw	r19,24(sp)
    36f8:	9029883a 	mov	r20,r18
    36fc:	00000206 	br	3708 <_dtoa_r+0xb60>
    3700:	00063140 	call	6314 <__multadd>
    3704:	1021883a 	mov	r16,r2
    3708:	a80b883a 	mov	r5,r21
    370c:	8009883a 	mov	r4,r16
    3710:	00029a80 	call	29a8 <quorem>
    3714:	10800c04 	addi	r2,r2,48
    3718:	90800005 	stb	r2,0(r18)
    371c:	94800044 	addi	r18,r18,1
    3720:	9507c83a 	sub	r3,r18,r20
    3724:	000f883a 	mov	r7,zero
    3728:	01800284 	movi	r6,10
    372c:	800b883a 	mov	r5,r16
    3730:	e009883a 	mov	r4,fp
    3734:	1cfff216 	blt	r3,r19,3700 <_dtoa_r+0xb58>
    3738:	1011883a 	mov	r8,r2
    373c:	d8800617 	ldw	r2,24(sp)
    3740:	0082370e 	bge	zero,r2,4020 <_dtoa_r+0x1478>
    3744:	d9000717 	ldw	r4,28(sp)
    3748:	0025883a 	mov	r18,zero
    374c:	20af883a 	add	r23,r4,r2
    3750:	01800044 	movi	r6,1
    3754:	800b883a 	mov	r5,r16
    3758:	e009883a 	mov	r4,fp
    375c:	da001715 	stw	r8,92(sp)
    3760:	00069c40 	call	69c4 <__lshift>
    3764:	a80b883a 	mov	r5,r21
    3768:	1009883a 	mov	r4,r2
    376c:	d8800915 	stw	r2,36(sp)
    3770:	0006b0c0 	call	6b0c <__mcmp>
    3774:	da001717 	ldw	r8,92(sp)
    3778:	0081800e 	bge	zero,r2,3d7c <_dtoa_r+0x11d4>
    377c:	b93fffc3 	ldbu	r4,-1(r23)
    3780:	b8bfffc4 	addi	r2,r23,-1
    3784:	1007883a 	mov	r3,r2
    3788:	01800e44 	movi	r6,57
    378c:	d9c00717 	ldw	r7,28(sp)
    3790:	00000506 	br	37a8 <_dtoa_r+0xc00>
    3794:	18ffffc4 	addi	r3,r3,-1
    3798:	11c12326 	beq	r2,r7,3c28 <_dtoa_r+0x1080>
    379c:	19000003 	ldbu	r4,0(r3)
    37a0:	102f883a 	mov	r23,r2
    37a4:	10bfffc4 	addi	r2,r2,-1
    37a8:	21403fcc 	andi	r5,r4,255
    37ac:	2940201c 	xori	r5,r5,128
    37b0:	297fe004 	addi	r5,r5,-128
    37b4:	29bff726 	beq	r5,r6,3794 <_dtoa_r+0xbec>
    37b8:	21000044 	addi	r4,r4,1
    37bc:	11000005 	stb	r4,0(r2)
    37c0:	a80b883a 	mov	r5,r21
    37c4:	e009883a 	mov	r4,fp
    37c8:	00062ec0 	call	62ec <_Bfree>
    37cc:	883ea026 	beq	r17,zero,3250 <_dtoa_r+0x6a8>
    37d0:	90000426 	beq	r18,zero,37e4 <_dtoa_r+0xc3c>
    37d4:	94400326 	beq	r18,r17,37e4 <_dtoa_r+0xc3c>
    37d8:	900b883a 	mov	r5,r18
    37dc:	e009883a 	mov	r4,fp
    37e0:	00062ec0 	call	62ec <_Bfree>
    37e4:	880b883a 	mov	r5,r17
    37e8:	e009883a 	mov	r4,fp
    37ec:	00062ec0 	call	62ec <_Bfree>
    37f0:	003e9706 	br	3250 <_dtoa_r+0x6a8>
    37f4:	01800044 	movi	r6,1
    37f8:	d9800e15 	stw	r6,56(sp)
    37fc:	003d9606 	br	2e58 <_dtoa_r+0x2b0>
    3800:	d8800817 	ldw	r2,32(sp)
    3804:	d8c00517 	ldw	r3,20(sp)
    3808:	d8000d15 	stw	zero,52(sp)
    380c:	10c5c83a 	sub	r2,r2,r3
    3810:	00c9c83a 	sub	r4,zero,r3
    3814:	d8800815 	stw	r2,32(sp)
    3818:	d9000a15 	stw	r4,40(sp)
    381c:	003d9706 	br	2e7c <_dtoa_r+0x2d4>
    3820:	05adc83a 	sub	r22,zero,r22
    3824:	dd800815 	stw	r22,32(sp)
    3828:	002d883a 	mov	r22,zero
    382c:	003d8e06 	br	2e68 <_dtoa_r+0x2c0>
    3830:	d9000517 	ldw	r4,20(sp)
    3834:	000cae40 	call	cae4 <__floatsidf>
    3838:	100d883a 	mov	r6,r2
    383c:	180f883a 	mov	r7,r3
    3840:	a009883a 	mov	r4,r20
    3844:	880b883a 	mov	r5,r17
    3848:	000b7f80 	call	b7f8 <__eqdf2>
    384c:	103d7126 	beq	r2,zero,2e14 <_dtoa_r+0x26c>
    3850:	d9c00517 	ldw	r7,20(sp)
    3854:	39ffffc4 	addi	r7,r7,-1
    3858:	d9c00515 	stw	r7,20(sp)
    385c:	003d6d06 	br	2e14 <_dtoa_r+0x26c>
    3860:	dd400a17 	ldw	r21,40(sp)
    3864:	dd000817 	ldw	r20,32(sp)
    3868:	0023883a 	mov	r17,zero
    386c:	003f4806 	br	3590 <_dtoa_r+0x9e8>
    3870:	10e3c83a 	sub	r17,r2,r3
    3874:	9448983a 	sll	r4,r18,r17
    3878:	003d3206 	br	2d44 <_dtoa_r+0x19c>
    387c:	d8000e15 	stw	zero,56(sp)
    3880:	003d7506 	br	2e58 <_dtoa_r+0x2b0>
    3884:	b005883a 	mov	r2,r22
    3888:	003f4506 	br	35a0 <_dtoa_r+0x9f8>
    388c:	dc000915 	stw	r16,36(sp)
    3890:	d9800a17 	ldw	r6,40(sp)
    3894:	d9400917 	ldw	r5,36(sp)
    3898:	e009883a 	mov	r4,fp
    389c:	00068840 	call	6884 <__pow5mult>
    38a0:	1021883a 	mov	r16,r2
    38a4:	003f5a06 	br	3610 <_dtoa_r+0xa68>
    38a8:	01c00044 	movi	r7,1
    38ac:	d9c00b15 	stw	r7,44(sp)
    38b0:	d8802217 	ldw	r2,136(sp)
    38b4:	0081280e 	bge	zero,r2,3d58 <_dtoa_r+0x11b0>
    38b8:	100d883a 	mov	r6,r2
    38bc:	1021883a 	mov	r16,r2
    38c0:	d8800c15 	stw	r2,48(sp)
    38c4:	d8800615 	stw	r2,24(sp)
    38c8:	003d8806 	br	2eec <_dtoa_r+0x344>
    38cc:	d8800617 	ldw	r2,24(sp)
    38d0:	00be9b16 	blt	zero,r2,3340 <_dtoa_r+0x798>
    38d4:	10010f1e 	bne	r2,zero,3d14 <_dtoa_r+0x116c>
    38d8:	880b883a 	mov	r5,r17
    38dc:	000d883a 	mov	r6,zero
    38e0:	01d00534 	movhi	r7,16404
    38e4:	8009883a 	mov	r4,r16
    38e8:	000ba500 	call	ba50 <__muldf3>
    38ec:	900d883a 	mov	r6,r18
    38f0:	980f883a 	mov	r7,r19
    38f4:	1009883a 	mov	r4,r2
    38f8:	180b883a 	mov	r5,r3
    38fc:	000b8800 	call	b880 <__gedf2>
    3900:	002b883a 	mov	r21,zero
    3904:	0023883a 	mov	r17,zero
    3908:	1000bf16 	blt	r2,zero,3c08 <_dtoa_r+0x1060>
    390c:	d9802217 	ldw	r6,136(sp)
    3910:	ddc00717 	ldw	r23,28(sp)
    3914:	018c303a 	nor	r6,zero,r6
    3918:	d9800515 	stw	r6,20(sp)
    391c:	a80b883a 	mov	r5,r21
    3920:	e009883a 	mov	r4,fp
    3924:	00062ec0 	call	62ec <_Bfree>
    3928:	883e4926 	beq	r17,zero,3250 <_dtoa_r+0x6a8>
    392c:	003fad06 	br	37e4 <_dtoa_r+0xc3c>
    3930:	d9c01117 	ldw	r7,68(sp)
    3934:	3801bc26 	beq	r7,zero,4028 <_dtoa_r+0x1480>
    3938:	10810cc4 	addi	r2,r2,1075
    393c:	dd400a17 	ldw	r21,40(sp)
    3940:	dd000817 	ldw	r20,32(sp)
    3944:	003f0a06 	br	3570 <_dtoa_r+0x9c8>
    3948:	00800704 	movi	r2,28
    394c:	d9000817 	ldw	r4,32(sp)
    3950:	a0a9883a 	add	r20,r20,r2
    3954:	b0ad883a 	add	r22,r22,r2
    3958:	2089883a 	add	r4,r4,r2
    395c:	d9000815 	stw	r4,32(sp)
    3960:	003f5106 	br	36a8 <_dtoa_r+0xb00>
    3964:	d8c00317 	ldw	r3,12(sp)
    3968:	b8c1fc0e 	bge	r23,r3,415c <_dtoa_r+0x15b4>
    396c:	0027883a 	mov	r19,zero
    3970:	b805883a 	mov	r2,r23
    3974:	003f3e06 	br	3670 <_dtoa_r+0xac8>
    3978:	880b883a 	mov	r5,r17
    397c:	e009883a 	mov	r4,fp
    3980:	000f883a 	mov	r7,zero
    3984:	01800284 	movi	r6,10
    3988:	00063140 	call	6314 <__multadd>
    398c:	d9000c17 	ldw	r4,48(sp)
    3990:	1023883a 	mov	r17,r2
    3994:	0102040e 	bge	zero,r4,41a8 <_dtoa_r+0x1600>
    3998:	d9000615 	stw	r4,24(sp)
    399c:	0500050e 	bge	zero,r20,39b4 <_dtoa_r+0xe0c>
    39a0:	880b883a 	mov	r5,r17
    39a4:	a00d883a 	mov	r6,r20
    39a8:	e009883a 	mov	r4,fp
    39ac:	00069c40 	call	69c4 <__lshift>
    39b0:	1023883a 	mov	r17,r2
    39b4:	9801241e 	bne	r19,zero,3e48 <_dtoa_r+0x12a0>
    39b8:	8829883a 	mov	r20,r17
    39bc:	d9000617 	ldw	r4,24(sp)
    39c0:	dcc00717 	ldw	r19,28(sp)
    39c4:	9480004c 	andi	r18,r18,1
    39c8:	20bfffc4 	addi	r2,r4,-1
    39cc:	9885883a 	add	r2,r19,r2
    39d0:	d8800415 	stw	r2,16(sp)
    39d4:	dc800615 	stw	r18,24(sp)
    39d8:	a80b883a 	mov	r5,r21
    39dc:	8009883a 	mov	r4,r16
    39e0:	00029a80 	call	29a8 <quorem>
    39e4:	880b883a 	mov	r5,r17
    39e8:	8009883a 	mov	r4,r16
    39ec:	102f883a 	mov	r23,r2
    39f0:	0006b0c0 	call	6b0c <__mcmp>
    39f4:	a80b883a 	mov	r5,r21
    39f8:	a00d883a 	mov	r6,r20
    39fc:	e009883a 	mov	r4,fp
    3a00:	102d883a 	mov	r22,r2
    3a04:	0006b6c0 	call	6b6c <__mdiff>
    3a08:	1007883a 	mov	r3,r2
    3a0c:	10800317 	ldw	r2,12(r2)
    3a10:	bc800c04 	addi	r18,r23,48
    3a14:	180b883a 	mov	r5,r3
    3a18:	10004e1e 	bne	r2,zero,3b54 <_dtoa_r+0xfac>
    3a1c:	8009883a 	mov	r4,r16
    3a20:	d8c01615 	stw	r3,88(sp)
    3a24:	0006b0c0 	call	6b0c <__mcmp>
    3a28:	d8c01617 	ldw	r3,88(sp)
    3a2c:	e009883a 	mov	r4,fp
    3a30:	d8801615 	stw	r2,88(sp)
    3a34:	180b883a 	mov	r5,r3
    3a38:	00062ec0 	call	62ec <_Bfree>
    3a3c:	d8801617 	ldw	r2,88(sp)
    3a40:	1000041e 	bne	r2,zero,3a54 <_dtoa_r+0xeac>
    3a44:	d9800317 	ldw	r6,12(sp)
    3a48:	3000021e 	bne	r6,zero,3a54 <_dtoa_r+0xeac>
    3a4c:	d8c00617 	ldw	r3,24(sp)
    3a50:	18003726 	beq	r3,zero,3b30 <_dtoa_r+0xf88>
    3a54:	b0002016 	blt	r22,zero,3ad8 <_dtoa_r+0xf30>
    3a58:	b000041e 	bne	r22,zero,3a6c <_dtoa_r+0xec4>
    3a5c:	d9000317 	ldw	r4,12(sp)
    3a60:	2000021e 	bne	r4,zero,3a6c <_dtoa_r+0xec4>
    3a64:	d8c00617 	ldw	r3,24(sp)
    3a68:	18001b26 	beq	r3,zero,3ad8 <_dtoa_r+0xf30>
    3a6c:	00810716 	blt	zero,r2,3e8c <_dtoa_r+0x12e4>
    3a70:	d8c00417 	ldw	r3,16(sp)
    3a74:	9d800044 	addi	r22,r19,1
    3a78:	9c800005 	stb	r18,0(r19)
    3a7c:	b02f883a 	mov	r23,r22
    3a80:	98c10626 	beq	r19,r3,3e9c <_dtoa_r+0x12f4>
    3a84:	800b883a 	mov	r5,r16
    3a88:	000f883a 	mov	r7,zero
    3a8c:	01800284 	movi	r6,10
    3a90:	e009883a 	mov	r4,fp
    3a94:	00063140 	call	6314 <__multadd>
    3a98:	1021883a 	mov	r16,r2
    3a9c:	000f883a 	mov	r7,zero
    3aa0:	01800284 	movi	r6,10
    3aa4:	880b883a 	mov	r5,r17
    3aa8:	e009883a 	mov	r4,fp
    3aac:	8d002526 	beq	r17,r20,3b44 <_dtoa_r+0xf9c>
    3ab0:	00063140 	call	6314 <__multadd>
    3ab4:	a00b883a 	mov	r5,r20
    3ab8:	000f883a 	mov	r7,zero
    3abc:	01800284 	movi	r6,10
    3ac0:	e009883a 	mov	r4,fp
    3ac4:	1023883a 	mov	r17,r2
    3ac8:	00063140 	call	6314 <__multadd>
    3acc:	1029883a 	mov	r20,r2
    3ad0:	b027883a 	mov	r19,r22
    3ad4:	003fc006 	br	39d8 <_dtoa_r+0xe30>
    3ad8:	9011883a 	mov	r8,r18
    3adc:	00800e0e 	bge	zero,r2,3b18 <_dtoa_r+0xf70>
    3ae0:	800b883a 	mov	r5,r16
    3ae4:	01800044 	movi	r6,1
    3ae8:	e009883a 	mov	r4,fp
    3aec:	da001715 	stw	r8,92(sp)
    3af0:	00069c40 	call	69c4 <__lshift>
    3af4:	a80b883a 	mov	r5,r21
    3af8:	1009883a 	mov	r4,r2
    3afc:	1021883a 	mov	r16,r2
    3b00:	0006b0c0 	call	6b0c <__mcmp>
    3b04:	da001717 	ldw	r8,92(sp)
    3b08:	0081960e 	bge	zero,r2,4164 <_dtoa_r+0x15bc>
    3b0c:	00800e44 	movi	r2,57
    3b10:	40817026 	beq	r8,r2,40d4 <_dtoa_r+0x152c>
    3b14:	ba000c44 	addi	r8,r23,49
    3b18:	8825883a 	mov	r18,r17
    3b1c:	9dc00044 	addi	r23,r19,1
    3b20:	9a000005 	stb	r8,0(r19)
    3b24:	a023883a 	mov	r17,r20
    3b28:	dc000915 	stw	r16,36(sp)
    3b2c:	003f2406 	br	37c0 <_dtoa_r+0xc18>
    3b30:	00800e44 	movi	r2,57
    3b34:	9011883a 	mov	r8,r18
    3b38:	90816626 	beq	r18,r2,40d4 <_dtoa_r+0x152c>
    3b3c:	05bff516 	blt	zero,r22,3b14 <_dtoa_r+0xf6c>
    3b40:	003ff506 	br	3b18 <_dtoa_r+0xf70>
    3b44:	00063140 	call	6314 <__multadd>
    3b48:	1023883a 	mov	r17,r2
    3b4c:	1029883a 	mov	r20,r2
    3b50:	003fdf06 	br	3ad0 <_dtoa_r+0xf28>
    3b54:	e009883a 	mov	r4,fp
    3b58:	00062ec0 	call	62ec <_Bfree>
    3b5c:	00800044 	movi	r2,1
    3b60:	003fbc06 	br	3a54 <_dtoa_r+0xeac>
    3b64:	a80b883a 	mov	r5,r21
    3b68:	8009883a 	mov	r4,r16
    3b6c:	0006b0c0 	call	6b0c <__mcmp>
    3b70:	103edb0e 	bge	r2,zero,36e0 <_dtoa_r+0xb38>
    3b74:	800b883a 	mov	r5,r16
    3b78:	000f883a 	mov	r7,zero
    3b7c:	01800284 	movi	r6,10
    3b80:	e009883a 	mov	r4,fp
    3b84:	00063140 	call	6314 <__multadd>
    3b88:	1021883a 	mov	r16,r2
    3b8c:	d8800517 	ldw	r2,20(sp)
    3b90:	d8c00b17 	ldw	r3,44(sp)
    3b94:	10bfffc4 	addi	r2,r2,-1
    3b98:	d8800515 	stw	r2,20(sp)
    3b9c:	183f761e 	bne	r3,zero,3978 <_dtoa_r+0xdd0>
    3ba0:	d9000c17 	ldw	r4,48(sp)
    3ba4:	0101730e 	bge	zero,r4,4174 <_dtoa_r+0x15cc>
    3ba8:	d9000615 	stw	r4,24(sp)
    3bac:	003ed006 	br	36f0 <_dtoa_r+0xb48>
    3bb0:	00800084 	movi	r2,2
    3bb4:	3081861e 	bne	r6,r2,41d0 <_dtoa_r+0x1628>
    3bb8:	d8000b15 	stw	zero,44(sp)
    3bbc:	003f3c06 	br	38b0 <_dtoa_r+0xd08>
    3bc0:	dc000917 	ldw	r16,36(sp)
    3bc4:	003e9206 	br	3610 <_dtoa_r+0xa68>
    3bc8:	d9c00317 	ldw	r7,12(sp)
    3bcc:	00800084 	movi	r2,2
    3bd0:	11fec50e 	bge	r2,r7,36e8 <_dtoa_r+0xb40>
    3bd4:	d9000617 	ldw	r4,24(sp)
    3bd8:	20013c1e 	bne	r4,zero,40cc <_dtoa_r+0x1524>
    3bdc:	a80b883a 	mov	r5,r21
    3be0:	000f883a 	mov	r7,zero
    3be4:	01800144 	movi	r6,5
    3be8:	e009883a 	mov	r4,fp
    3bec:	00063140 	call	6314 <__multadd>
    3bf0:	100b883a 	mov	r5,r2
    3bf4:	8009883a 	mov	r4,r16
    3bf8:	102b883a 	mov	r21,r2
    3bfc:	0006b0c0 	call	6b0c <__mcmp>
    3c00:	dc000915 	stw	r16,36(sp)
    3c04:	00bf410e 	bge	zero,r2,390c <_dtoa_r+0xd64>
    3c08:	d9c00717 	ldw	r7,28(sp)
    3c0c:	00800c44 	movi	r2,49
    3c10:	38800005 	stb	r2,0(r7)
    3c14:	d8800517 	ldw	r2,20(sp)
    3c18:	3dc00044 	addi	r23,r7,1
    3c1c:	10800044 	addi	r2,r2,1
    3c20:	d8800515 	stw	r2,20(sp)
    3c24:	003f3d06 	br	391c <_dtoa_r+0xd74>
    3c28:	d9800517 	ldw	r6,20(sp)
    3c2c:	d9c00717 	ldw	r7,28(sp)
    3c30:	00800c44 	movi	r2,49
    3c34:	31800044 	addi	r6,r6,1
    3c38:	d9800515 	stw	r6,20(sp)
    3c3c:	38800005 	stb	r2,0(r7)
    3c40:	003edf06 	br	37c0 <_dtoa_r+0xc18>
    3c44:	d8000b15 	stw	zero,44(sp)
    3c48:	003c9f06 	br	2ec8 <_dtoa_r+0x320>
    3c4c:	903e7e1e 	bne	r18,zero,3648 <_dtoa_r+0xaa0>
    3c50:	00800434 	movhi	r2,16
    3c54:	10bfffc4 	addi	r2,r2,-1
    3c58:	9884703a 	and	r2,r19,r2
    3c5c:	1000ea1e 	bne	r2,zero,4008 <_dtoa_r+0x1460>
    3c60:	9cdffc2c 	andhi	r19,r19,32752
    3c64:	9800e826 	beq	r19,zero,4008 <_dtoa_r+0x1460>
    3c68:	d9c00817 	ldw	r7,32(sp)
    3c6c:	b5800044 	addi	r22,r22,1
    3c70:	04c00044 	movi	r19,1
    3c74:	39c00044 	addi	r7,r7,1
    3c78:	d9c00815 	stw	r7,32(sp)
    3c7c:	d8800d17 	ldw	r2,52(sp)
    3c80:	103e721e 	bne	r2,zero,364c <_dtoa_r+0xaa4>
    3c84:	00800044 	movi	r2,1
    3c88:	003e7906 	br	3670 <_dtoa_r+0xac8>
    3c8c:	8009883a 	mov	r4,r16
    3c90:	000cae40 	call	cae4 <__floatsidf>
    3c94:	d9800f17 	ldw	r6,60(sp)
    3c98:	d9c01017 	ldw	r7,64(sp)
    3c9c:	1009883a 	mov	r4,r2
    3ca0:	180b883a 	mov	r5,r3
    3ca4:	000ba500 	call	ba50 <__muldf3>
    3ca8:	000d883a 	mov	r6,zero
    3cac:	01d00734 	movhi	r7,16412
    3cb0:	1009883a 	mov	r4,r2
    3cb4:	180b883a 	mov	r5,r3
    3cb8:	000a6640 	call	a664 <__adddf3>
    3cbc:	047f3034 	movhi	r17,64704
    3cc0:	1021883a 	mov	r16,r2
    3cc4:	1c63883a 	add	r17,r3,r17
    3cc8:	d9000f17 	ldw	r4,60(sp)
    3ccc:	d9401017 	ldw	r5,64(sp)
    3cd0:	000d883a 	mov	r6,zero
    3cd4:	01d00534 	movhi	r7,16404
    3cd8:	000c1680 	call	c168 <__subdf3>
    3cdc:	800d883a 	mov	r6,r16
    3ce0:	880f883a 	mov	r7,r17
    3ce4:	1009883a 	mov	r4,r2
    3ce8:	180b883a 	mov	r5,r3
    3cec:	102b883a 	mov	r21,r2
    3cf0:	1829883a 	mov	r20,r3
    3cf4:	000b8800 	call	b880 <__gedf2>
    3cf8:	00806c16 	blt	zero,r2,3eac <_dtoa_r+0x1304>
    3cfc:	89e0003c 	xorhi	r7,r17,32768
    3d00:	800d883a 	mov	r6,r16
    3d04:	a809883a 	mov	r4,r21
    3d08:	a00b883a 	mov	r5,r20
    3d0c:	000b95c0 	call	b95c <__ledf2>
    3d10:	103d7e0e 	bge	r2,zero,330c <_dtoa_r+0x764>
    3d14:	002b883a 	mov	r21,zero
    3d18:	0023883a 	mov	r17,zero
    3d1c:	003efb06 	br	390c <_dtoa_r+0xd64>
    3d20:	d8800717 	ldw	r2,28(sp)
    3d24:	003bd006 	br	2c68 <_dtoa_r+0xc0>
    3d28:	d9000a17 	ldw	r4,40(sp)
    3d2c:	d9800d17 	ldw	r6,52(sp)
    3d30:	dd400a15 	stw	r21,40(sp)
    3d34:	a905c83a 	sub	r2,r21,r4
    3d38:	308d883a 	add	r6,r6,r2
    3d3c:	d9800d15 	stw	r6,52(sp)
    3d40:	002b883a 	mov	r21,zero
    3d44:	003e0606 	br	3560 <_dtoa_r+0x9b8>
    3d48:	9023883a 	mov	r17,r18
    3d4c:	9829883a 	mov	r20,r19
    3d50:	04000084 	movi	r16,2
    3d54:	003c9206 	br	2fa0 <_dtoa_r+0x3f8>
    3d58:	04000044 	movi	r16,1
    3d5c:	dc000c15 	stw	r16,48(sp)
    3d60:	dc000615 	stw	r16,24(sp)
    3d64:	dc002215 	stw	r16,136(sp)
    3d68:	e0001115 	stw	zero,68(fp)
    3d6c:	000b883a 	mov	r5,zero
    3d70:	003c6906 	br	2f18 <_dtoa_r+0x370>
    3d74:	3021883a 	mov	r16,r6
    3d78:	003ffb06 	br	3d68 <_dtoa_r+0x11c0>
    3d7c:	1000021e 	bne	r2,zero,3d88 <_dtoa_r+0x11e0>
    3d80:	4200004c 	andi	r8,r8,1
    3d84:	403e7d1e 	bne	r8,zero,377c <_dtoa_r+0xbd4>
    3d88:	01000c04 	movi	r4,48
    3d8c:	00000106 	br	3d94 <_dtoa_r+0x11ec>
    3d90:	102f883a 	mov	r23,r2
    3d94:	b8bfffc4 	addi	r2,r23,-1
    3d98:	10c00007 	ldb	r3,0(r2)
    3d9c:	193ffc26 	beq	r3,r4,3d90 <_dtoa_r+0x11e8>
    3da0:	003e8706 	br	37c0 <_dtoa_r+0xc18>
    3da4:	d8800517 	ldw	r2,20(sp)
    3da8:	00a3c83a 	sub	r17,zero,r2
    3dac:	8800a426 	beq	r17,zero,4040 <_dtoa_r+0x1498>
    3db0:	888003cc 	andi	r2,r17,15
    3db4:	100490fa 	slli	r2,r2,3
    3db8:	00c00074 	movhi	r3,1
    3dbc:	18fe5004 	addi	r3,r3,-1728
    3dc0:	1885883a 	add	r2,r3,r2
    3dc4:	11800017 	ldw	r6,0(r2)
    3dc8:	11c00117 	ldw	r7,4(r2)
    3dcc:	9009883a 	mov	r4,r18
    3dd0:	980b883a 	mov	r5,r19
    3dd4:	8823d13a 	srai	r17,r17,4
    3dd8:	000ba500 	call	ba50 <__muldf3>
    3ddc:	d8800f15 	stw	r2,60(sp)
    3de0:	d8c01015 	stw	r3,64(sp)
    3de4:	8800e826 	beq	r17,zero,4188 <_dtoa_r+0x15e0>
    3de8:	05000074 	movhi	r20,1
    3dec:	a53e4604 	addi	r20,r20,-1768
    3df0:	04000084 	movi	r16,2
    3df4:	8980004c 	andi	r6,r17,1
    3df8:	1009883a 	mov	r4,r2
    3dfc:	8823d07a 	srai	r17,r17,1
    3e00:	180b883a 	mov	r5,r3
    3e04:	30000426 	beq	r6,zero,3e18 <_dtoa_r+0x1270>
    3e08:	a1800017 	ldw	r6,0(r20)
    3e0c:	a1c00117 	ldw	r7,4(r20)
    3e10:	84000044 	addi	r16,r16,1
    3e14:	000ba500 	call	ba50 <__muldf3>
    3e18:	a5000204 	addi	r20,r20,8
    3e1c:	883ff51e 	bne	r17,zero,3df4 <_dtoa_r+0x124c>
    3e20:	d8800f15 	stw	r2,60(sp)
    3e24:	d8c01015 	stw	r3,64(sp)
    3e28:	003c7606 	br	3004 <_dtoa_r+0x45c>
    3e2c:	00c00c04 	movi	r3,48
    3e30:	10c00005 	stb	r3,0(r2)
    3e34:	d8c00517 	ldw	r3,20(sp)
    3e38:	bd3fffc3 	ldbu	r20,-1(r23)
    3e3c:	18c00044 	addi	r3,r3,1
    3e40:	d8c00515 	stw	r3,20(sp)
    3e44:	003db906 	br	352c <_dtoa_r+0x984>
    3e48:	89400117 	ldw	r5,4(r17)
    3e4c:	e009883a 	mov	r4,fp
    3e50:	00062440 	call	6244 <_Balloc>
    3e54:	89800417 	ldw	r6,16(r17)
    3e58:	89400304 	addi	r5,r17,12
    3e5c:	11000304 	addi	r4,r2,12
    3e60:	31800084 	addi	r6,r6,2
    3e64:	318d883a 	add	r6,r6,r6
    3e68:	318d883a 	add	r6,r6,r6
    3e6c:	1027883a 	mov	r19,r2
    3e70:	0005e780 	call	5e78 <memcpy>
    3e74:	01800044 	movi	r6,1
    3e78:	980b883a 	mov	r5,r19
    3e7c:	e009883a 	mov	r4,fp
    3e80:	00069c40 	call	69c4 <__lshift>
    3e84:	1029883a 	mov	r20,r2
    3e88:	003ecc06 	br	39bc <_dtoa_r+0xe14>
    3e8c:	00800e44 	movi	r2,57
    3e90:	90809026 	beq	r18,r2,40d4 <_dtoa_r+0x152c>
    3e94:	92000044 	addi	r8,r18,1
    3e98:	003f1f06 	br	3b18 <_dtoa_r+0xf70>
    3e9c:	9011883a 	mov	r8,r18
    3ea0:	8825883a 	mov	r18,r17
    3ea4:	a023883a 	mov	r17,r20
    3ea8:	003e2906 	br	3750 <_dtoa_r+0xba8>
    3eac:	002b883a 	mov	r21,zero
    3eb0:	0023883a 	mov	r17,zero
    3eb4:	003f5406 	br	3c08 <_dtoa_r+0x1060>
    3eb8:	61bfffc4 	addi	r6,r12,-1
    3ebc:	300490fa 	slli	r2,r6,3
    3ec0:	00c00074 	movhi	r3,1
    3ec4:	18fe5004 	addi	r3,r3,-1728
    3ec8:	1885883a 	add	r2,r3,r2
    3ecc:	11000017 	ldw	r4,0(r2)
    3ed0:	11400117 	ldw	r5,4(r2)
    3ed4:	d8800717 	ldw	r2,28(sp)
    3ed8:	880f883a 	mov	r7,r17
    3edc:	d9801215 	stw	r6,72(sp)
    3ee0:	800d883a 	mov	r6,r16
    3ee4:	db001615 	stw	r12,88(sp)
    3ee8:	15c00044 	addi	r23,r2,1
    3eec:	000ba500 	call	ba50 <__muldf3>
    3ef0:	d9401017 	ldw	r5,64(sp)
    3ef4:	d9000f17 	ldw	r4,60(sp)
    3ef8:	d8c01515 	stw	r3,84(sp)
    3efc:	d8801415 	stw	r2,80(sp)
    3f00:	000ca640 	call	ca64 <__fixdfsi>
    3f04:	1009883a 	mov	r4,r2
    3f08:	1021883a 	mov	r16,r2
    3f0c:	000cae40 	call	cae4 <__floatsidf>
    3f10:	d9000f17 	ldw	r4,60(sp)
    3f14:	d9401017 	ldw	r5,64(sp)
    3f18:	100d883a 	mov	r6,r2
    3f1c:	180f883a 	mov	r7,r3
    3f20:	000c1680 	call	c168 <__subdf3>
    3f24:	1829883a 	mov	r20,r3
    3f28:	d8c00717 	ldw	r3,28(sp)
    3f2c:	84000c04 	addi	r16,r16,48
    3f30:	1023883a 	mov	r17,r2
    3f34:	1c000005 	stb	r16,0(r3)
    3f38:	db001617 	ldw	r12,88(sp)
    3f3c:	00800044 	movi	r2,1
    3f40:	60802226 	beq	r12,r2,3fcc <_dtoa_r+0x1424>
    3f44:	d9c00717 	ldw	r7,28(sp)
    3f48:	8805883a 	mov	r2,r17
    3f4c:	b82b883a 	mov	r21,r23
    3f50:	3b19883a 	add	r12,r7,r12
    3f54:	6023883a 	mov	r17,r12
    3f58:	a007883a 	mov	r3,r20
    3f5c:	dc800f15 	stw	r18,60(sp)
    3f60:	000d883a 	mov	r6,zero
    3f64:	01d00934 	movhi	r7,16420
    3f68:	1009883a 	mov	r4,r2
    3f6c:	180b883a 	mov	r5,r3
    3f70:	000ba500 	call	ba50 <__muldf3>
    3f74:	180b883a 	mov	r5,r3
    3f78:	1009883a 	mov	r4,r2
    3f7c:	1829883a 	mov	r20,r3
    3f80:	1025883a 	mov	r18,r2
    3f84:	000ca640 	call	ca64 <__fixdfsi>
    3f88:	1009883a 	mov	r4,r2
    3f8c:	1021883a 	mov	r16,r2
    3f90:	000cae40 	call	cae4 <__floatsidf>
    3f94:	100d883a 	mov	r6,r2
    3f98:	180f883a 	mov	r7,r3
    3f9c:	9009883a 	mov	r4,r18
    3fa0:	a00b883a 	mov	r5,r20
    3fa4:	84000c04 	addi	r16,r16,48
    3fa8:	000c1680 	call	c168 <__subdf3>
    3fac:	ad400044 	addi	r21,r21,1
    3fb0:	ac3fffc5 	stb	r16,-1(r21)
    3fb4:	ac7fea1e 	bne	r21,r17,3f60 <_dtoa_r+0x13b8>
    3fb8:	1023883a 	mov	r17,r2
    3fbc:	d8801217 	ldw	r2,72(sp)
    3fc0:	dc800f17 	ldw	r18,60(sp)
    3fc4:	1829883a 	mov	r20,r3
    3fc8:	b8af883a 	add	r23,r23,r2
    3fcc:	d9001417 	ldw	r4,80(sp)
    3fd0:	d9401517 	ldw	r5,84(sp)
    3fd4:	000d883a 	mov	r6,zero
    3fd8:	01cff834 	movhi	r7,16352
    3fdc:	000a6640 	call	a664 <__adddf3>
    3fe0:	880d883a 	mov	r6,r17
    3fe4:	a00f883a 	mov	r7,r20
    3fe8:	1009883a 	mov	r4,r2
    3fec:	180b883a 	mov	r5,r3
    3ff0:	000b95c0 	call	b95c <__ledf2>
    3ff4:	10003e0e 	bge	r2,zero,40f0 <_dtoa_r+0x1548>
    3ff8:	d9001317 	ldw	r4,76(sp)
    3ffc:	bd3fffc3 	ldbu	r20,-1(r23)
    4000:	d9000515 	stw	r4,20(sp)
    4004:	003d3b06 	br	34f4 <_dtoa_r+0x94c>
    4008:	0027883a 	mov	r19,zero
    400c:	003f1b06 	br	3c7c <_dtoa_r+0x10d4>
    4010:	d8800817 	ldw	r2,32(sp)
    4014:	11e9c83a 	sub	r20,r2,r7
    4018:	0005883a 	mov	r2,zero
    401c:	003d5406 	br	3570 <_dtoa_r+0x9c8>
    4020:	00800044 	movi	r2,1
    4024:	003dc706 	br	3744 <_dtoa_r+0xb9c>
    4028:	d8c00217 	ldw	r3,8(sp)
    402c:	00800d84 	movi	r2,54
    4030:	dd400a17 	ldw	r21,40(sp)
    4034:	10c5c83a 	sub	r2,r2,r3
    4038:	dd000817 	ldw	r20,32(sp)
    403c:	003d4c06 	br	3570 <_dtoa_r+0x9c8>
    4040:	dc800f15 	stw	r18,60(sp)
    4044:	dcc01015 	stw	r19,64(sp)
    4048:	04000084 	movi	r16,2
    404c:	003bed06 	br	3004 <_dtoa_r+0x45c>
    4050:	d9000617 	ldw	r4,24(sp)
    4054:	203f0d26 	beq	r4,zero,3c8c <_dtoa_r+0x10e4>
    4058:	d9800c17 	ldw	r6,48(sp)
    405c:	01bcab0e 	bge	zero,r6,330c <_dtoa_r+0x764>
    4060:	d9401017 	ldw	r5,64(sp)
    4064:	d9000f17 	ldw	r4,60(sp)
    4068:	000d883a 	mov	r6,zero
    406c:	01d00934 	movhi	r7,16420
    4070:	000ba500 	call	ba50 <__muldf3>
    4074:	81000044 	addi	r4,r16,1
    4078:	d8800f15 	stw	r2,60(sp)
    407c:	d8c01015 	stw	r3,64(sp)
    4080:	000cae40 	call	cae4 <__floatsidf>
    4084:	d9800f17 	ldw	r6,60(sp)
    4088:	d9c01017 	ldw	r7,64(sp)
    408c:	1009883a 	mov	r4,r2
    4090:	180b883a 	mov	r5,r3
    4094:	000ba500 	call	ba50 <__muldf3>
    4098:	01d00734 	movhi	r7,16412
    409c:	000d883a 	mov	r6,zero
    40a0:	1009883a 	mov	r4,r2
    40a4:	180b883a 	mov	r5,r3
    40a8:	000a6640 	call	a664 <__adddf3>
    40ac:	d9c00517 	ldw	r7,20(sp)
    40b0:	047f3034 	movhi	r17,64704
    40b4:	1021883a 	mov	r16,r2
    40b8:	39ffffc4 	addi	r7,r7,-1
    40bc:	d9c01315 	stw	r7,76(sp)
    40c0:	1c63883a 	add	r17,r3,r17
    40c4:	db000c17 	ldw	r12,48(sp)
    40c8:	003bea06 	br	3074 <_dtoa_r+0x4cc>
    40cc:	dc000915 	stw	r16,36(sp)
    40d0:	003e0e06 	br	390c <_dtoa_r+0xd64>
    40d4:	01000e44 	movi	r4,57
    40d8:	8825883a 	mov	r18,r17
    40dc:	9dc00044 	addi	r23,r19,1
    40e0:	99000005 	stb	r4,0(r19)
    40e4:	a023883a 	mov	r17,r20
    40e8:	dc000915 	stw	r16,36(sp)
    40ec:	003da406 	br	3780 <_dtoa_r+0xbd8>
    40f0:	d9801417 	ldw	r6,80(sp)
    40f4:	d9c01517 	ldw	r7,84(sp)
    40f8:	0009883a 	mov	r4,zero
    40fc:	014ff834 	movhi	r5,16352
    4100:	000c1680 	call	c168 <__subdf3>
    4104:	880d883a 	mov	r6,r17
    4108:	a00f883a 	mov	r7,r20
    410c:	1009883a 	mov	r4,r2
    4110:	180b883a 	mov	r5,r3
    4114:	000b8800 	call	b880 <__gedf2>
    4118:	00bc7c0e 	bge	zero,r2,330c <_dtoa_r+0x764>
    411c:	01000c04 	movi	r4,48
    4120:	00000106 	br	4128 <_dtoa_r+0x1580>
    4124:	102f883a 	mov	r23,r2
    4128:	b8bfffc4 	addi	r2,r23,-1
    412c:	10c00007 	ldb	r3,0(r2)
    4130:	193ffc26 	beq	r3,r4,4124 <_dtoa_r+0x157c>
    4134:	d9801317 	ldw	r6,76(sp)
    4138:	d9800515 	stw	r6,20(sp)
    413c:	003c4406 	br	3250 <_dtoa_r+0x6a8>
    4140:	d9801317 	ldw	r6,76(sp)
    4144:	d9800515 	stw	r6,20(sp)
    4148:	003cea06 	br	34f4 <_dtoa_r+0x94c>
    414c:	dd800f17 	ldw	r22,60(sp)
    4150:	dcc01017 	ldw	r19,64(sp)
    4154:	dc801217 	ldw	r18,72(sp)
    4158:	003c6c06 	br	330c <_dtoa_r+0x764>
    415c:	903e031e 	bne	r18,zero,396c <_dtoa_r+0xdc4>
    4160:	003ebb06 	br	3c50 <_dtoa_r+0x10a8>
    4164:	103e6c1e 	bne	r2,zero,3b18 <_dtoa_r+0xf70>
    4168:	4080004c 	andi	r2,r8,1
    416c:	103e6a26 	beq	r2,zero,3b18 <_dtoa_r+0xf70>
    4170:	003e6606 	br	3b0c <_dtoa_r+0xf64>
    4174:	d8c00317 	ldw	r3,12(sp)
    4178:	00800084 	movi	r2,2
    417c:	10c02916 	blt	r2,r3,4224 <_dtoa_r+0x167c>
    4180:	d9000c17 	ldw	r4,48(sp)
    4184:	003e8806 	br	3ba8 <_dtoa_r+0x1000>
    4188:	04000084 	movi	r16,2
    418c:	003b9d06 	br	3004 <_dtoa_r+0x45c>
    4190:	d9001317 	ldw	r4,76(sp)
    4194:	d9000515 	stw	r4,20(sp)
    4198:	003cd606 	br	34f4 <_dtoa_r+0x94c>
    419c:	d8801317 	ldw	r2,76(sp)
    41a0:	d8800515 	stw	r2,20(sp)
    41a4:	003c2a06 	br	3250 <_dtoa_r+0x6a8>
    41a8:	d9800317 	ldw	r6,12(sp)
    41ac:	00800084 	movi	r2,2
    41b0:	11801516 	blt	r2,r6,4208 <_dtoa_r+0x1660>
    41b4:	d9c00c17 	ldw	r7,48(sp)
    41b8:	d9c00615 	stw	r7,24(sp)
    41bc:	003df706 	br	399c <_dtoa_r+0xdf4>
    41c0:	193d3926 	beq	r3,r4,36a8 <_dtoa_r+0xb00>
    41c4:	00c00f04 	movi	r3,60
    41c8:	1885c83a 	sub	r2,r3,r2
    41cc:	003ddf06 	br	394c <_dtoa_r+0xda4>
    41d0:	e009883a 	mov	r4,fp
    41d4:	e0001115 	stw	zero,68(fp)
    41d8:	000b883a 	mov	r5,zero
    41dc:	00062440 	call	6244 <_Balloc>
    41e0:	d8800715 	stw	r2,28(sp)
    41e4:	d8c00717 	ldw	r3,28(sp)
    41e8:	00bfffc4 	movi	r2,-1
    41ec:	01000044 	movi	r4,1
    41f0:	d8800c15 	stw	r2,48(sp)
    41f4:	e0c01015 	stw	r3,64(fp)
    41f8:	d9000b15 	stw	r4,44(sp)
    41fc:	d8800615 	stw	r2,24(sp)
    4200:	d8002215 	stw	zero,136(sp)
    4204:	003c4106 	br	330c <_dtoa_r+0x764>
    4208:	d8c00c17 	ldw	r3,48(sp)
    420c:	d8c00615 	stw	r3,24(sp)
    4210:	003e7006 	br	3bd4 <_dtoa_r+0x102c>
    4214:	04400044 	movi	r17,1
    4218:	003b2006 	br	2e9c <_dtoa_r+0x2f4>
    421c:	000b883a 	mov	r5,zero
    4220:	003b3d06 	br	2f18 <_dtoa_r+0x370>
    4224:	d8800c17 	ldw	r2,48(sp)
    4228:	d8800615 	stw	r2,24(sp)
    422c:	003e6906 	br	3bd4 <_dtoa_r+0x102c>

00004230 <__sflush_r>:
    4230:	2880030b 	ldhu	r2,12(r5)
    4234:	defffb04 	addi	sp,sp,-20
    4238:	dcc00315 	stw	r19,12(sp)
    423c:	dc400115 	stw	r17,4(sp)
    4240:	dfc00415 	stw	ra,16(sp)
    4244:	dc800215 	stw	r18,8(sp)
    4248:	dc000015 	stw	r16,0(sp)
    424c:	10c0020c 	andi	r3,r2,8
    4250:	2823883a 	mov	r17,r5
    4254:	2027883a 	mov	r19,r4
    4258:	1800311e 	bne	r3,zero,4320 <__sflush_r+0xf0>
    425c:	28c00117 	ldw	r3,4(r5)
    4260:	10820014 	ori	r2,r2,2048
    4264:	2880030d 	sth	r2,12(r5)
    4268:	00c04b0e 	bge	zero,r3,4398 <__sflush_r+0x168>
    426c:	8a000a17 	ldw	r8,40(r17)
    4270:	40002326 	beq	r8,zero,4300 <__sflush_r+0xd0>
    4274:	9c000017 	ldw	r16,0(r19)
    4278:	10c4000c 	andi	r3,r2,4096
    427c:	98000015 	stw	zero,0(r19)
    4280:	18004826 	beq	r3,zero,43a4 <__sflush_r+0x174>
    4284:	89801417 	ldw	r6,80(r17)
    4288:	10c0010c 	andi	r3,r2,4
    428c:	18000626 	beq	r3,zero,42a8 <__sflush_r+0x78>
    4290:	88c00117 	ldw	r3,4(r17)
    4294:	88800c17 	ldw	r2,48(r17)
    4298:	30cdc83a 	sub	r6,r6,r3
    429c:	10000226 	beq	r2,zero,42a8 <__sflush_r+0x78>
    42a0:	88800f17 	ldw	r2,60(r17)
    42a4:	308dc83a 	sub	r6,r6,r2
    42a8:	89400717 	ldw	r5,28(r17)
    42ac:	000f883a 	mov	r7,zero
    42b0:	9809883a 	mov	r4,r19
    42b4:	403ee83a 	callr	r8
    42b8:	00ffffc4 	movi	r3,-1
    42bc:	10c04426 	beq	r2,r3,43d0 <__sflush_r+0x1a0>
    42c0:	88c0030b 	ldhu	r3,12(r17)
    42c4:	89000417 	ldw	r4,16(r17)
    42c8:	88000115 	stw	zero,4(r17)
    42cc:	197dffcc 	andi	r5,r3,63487
    42d0:	8940030d 	sth	r5,12(r17)
    42d4:	89000015 	stw	r4,0(r17)
    42d8:	18c4000c 	andi	r3,r3,4096
    42dc:	18002c1e 	bne	r3,zero,4390 <__sflush_r+0x160>
    42e0:	89400c17 	ldw	r5,48(r17)
    42e4:	9c000015 	stw	r16,0(r19)
    42e8:	28000526 	beq	r5,zero,4300 <__sflush_r+0xd0>
    42ec:	88801004 	addi	r2,r17,64
    42f0:	28800226 	beq	r5,r2,42fc <__sflush_r+0xcc>
    42f4:	9809883a 	mov	r4,r19
    42f8:	000499c0 	call	499c <_free_r>
    42fc:	88000c15 	stw	zero,48(r17)
    4300:	0005883a 	mov	r2,zero
    4304:	dfc00417 	ldw	ra,16(sp)
    4308:	dcc00317 	ldw	r19,12(sp)
    430c:	dc800217 	ldw	r18,8(sp)
    4310:	dc400117 	ldw	r17,4(sp)
    4314:	dc000017 	ldw	r16,0(sp)
    4318:	dec00504 	addi	sp,sp,20
    431c:	f800283a 	ret
    4320:	2c800417 	ldw	r18,16(r5)
    4324:	903ff626 	beq	r18,zero,4300 <__sflush_r+0xd0>
    4328:	2c000017 	ldw	r16,0(r5)
    432c:	108000cc 	andi	r2,r2,3
    4330:	2c800015 	stw	r18,0(r5)
    4334:	84a1c83a 	sub	r16,r16,r18
    4338:	1000131e 	bne	r2,zero,4388 <__sflush_r+0x158>
    433c:	28800517 	ldw	r2,20(r5)
    4340:	88800215 	stw	r2,8(r17)
    4344:	04000316 	blt	zero,r16,4354 <__sflush_r+0x124>
    4348:	003fed06 	br	4300 <__sflush_r+0xd0>
    434c:	90a5883a 	add	r18,r18,r2
    4350:	043feb0e 	bge	zero,r16,4300 <__sflush_r+0xd0>
    4354:	88800917 	ldw	r2,36(r17)
    4358:	89400717 	ldw	r5,28(r17)
    435c:	800f883a 	mov	r7,r16
    4360:	900d883a 	mov	r6,r18
    4364:	9809883a 	mov	r4,r19
    4368:	103ee83a 	callr	r2
    436c:	80a1c83a 	sub	r16,r16,r2
    4370:	00bff616 	blt	zero,r2,434c <__sflush_r+0x11c>
    4374:	88c0030b 	ldhu	r3,12(r17)
    4378:	00bfffc4 	movi	r2,-1
    437c:	18c01014 	ori	r3,r3,64
    4380:	88c0030d 	sth	r3,12(r17)
    4384:	003fdf06 	br	4304 <__sflush_r+0xd4>
    4388:	0005883a 	mov	r2,zero
    438c:	003fec06 	br	4340 <__sflush_r+0x110>
    4390:	88801415 	stw	r2,80(r17)
    4394:	003fd206 	br	42e0 <__sflush_r+0xb0>
    4398:	28c00f17 	ldw	r3,60(r5)
    439c:	00ffb316 	blt	zero,r3,426c <__sflush_r+0x3c>
    43a0:	003fd706 	br	4300 <__sflush_r+0xd0>
    43a4:	89400717 	ldw	r5,28(r17)
    43a8:	000d883a 	mov	r6,zero
    43ac:	01c00044 	movi	r7,1
    43b0:	9809883a 	mov	r4,r19
    43b4:	403ee83a 	callr	r8
    43b8:	100d883a 	mov	r6,r2
    43bc:	00bfffc4 	movi	r2,-1
    43c0:	30801426 	beq	r6,r2,4414 <__sflush_r+0x1e4>
    43c4:	8880030b 	ldhu	r2,12(r17)
    43c8:	8a000a17 	ldw	r8,40(r17)
    43cc:	003fae06 	br	4288 <__sflush_r+0x58>
    43d0:	98c00017 	ldw	r3,0(r19)
    43d4:	183fba26 	beq	r3,zero,42c0 <__sflush_r+0x90>
    43d8:	01000744 	movi	r4,29
    43dc:	19000626 	beq	r3,r4,43f8 <__sflush_r+0x1c8>
    43e0:	01000584 	movi	r4,22
    43e4:	19000426 	beq	r3,r4,43f8 <__sflush_r+0x1c8>
    43e8:	88c0030b 	ldhu	r3,12(r17)
    43ec:	18c01014 	ori	r3,r3,64
    43f0:	88c0030d 	sth	r3,12(r17)
    43f4:	003fc306 	br	4304 <__sflush_r+0xd4>
    43f8:	8880030b 	ldhu	r2,12(r17)
    43fc:	88c00417 	ldw	r3,16(r17)
    4400:	88000115 	stw	zero,4(r17)
    4404:	10bdffcc 	andi	r2,r2,63487
    4408:	8880030d 	sth	r2,12(r17)
    440c:	88c00015 	stw	r3,0(r17)
    4410:	003fb306 	br	42e0 <__sflush_r+0xb0>
    4414:	98800017 	ldw	r2,0(r19)
    4418:	103fea26 	beq	r2,zero,43c4 <__sflush_r+0x194>
    441c:	00c00744 	movi	r3,29
    4420:	10c00226 	beq	r2,r3,442c <__sflush_r+0x1fc>
    4424:	00c00584 	movi	r3,22
    4428:	10c0031e 	bne	r2,r3,4438 <__sflush_r+0x208>
    442c:	9c000015 	stw	r16,0(r19)
    4430:	0005883a 	mov	r2,zero
    4434:	003fb306 	br	4304 <__sflush_r+0xd4>
    4438:	88c0030b 	ldhu	r3,12(r17)
    443c:	3005883a 	mov	r2,r6
    4440:	18c01014 	ori	r3,r3,64
    4444:	88c0030d 	sth	r3,12(r17)
    4448:	003fae06 	br	4304 <__sflush_r+0xd4>

0000444c <_fflush_r>:
    444c:	defffd04 	addi	sp,sp,-12
    4450:	dc000115 	stw	r16,4(sp)
    4454:	dfc00215 	stw	ra,8(sp)
    4458:	2021883a 	mov	r16,r4
    445c:	20000226 	beq	r4,zero,4468 <_fflush_r+0x1c>
    4460:	20800e17 	ldw	r2,56(r4)
    4464:	10000c26 	beq	r2,zero,4498 <_fflush_r+0x4c>
    4468:	2880030f 	ldh	r2,12(r5)
    446c:	1000051e 	bne	r2,zero,4484 <_fflush_r+0x38>
    4470:	0005883a 	mov	r2,zero
    4474:	dfc00217 	ldw	ra,8(sp)
    4478:	dc000117 	ldw	r16,4(sp)
    447c:	dec00304 	addi	sp,sp,12
    4480:	f800283a 	ret
    4484:	8009883a 	mov	r4,r16
    4488:	dfc00217 	ldw	ra,8(sp)
    448c:	dc000117 	ldw	r16,4(sp)
    4490:	dec00304 	addi	sp,sp,12
    4494:	00042301 	jmpi	4230 <__sflush_r>
    4498:	d9400015 	stw	r5,0(sp)
    449c:	00048280 	call	4828 <__sinit>
    44a0:	d9400017 	ldw	r5,0(sp)
    44a4:	003ff006 	br	4468 <_fflush_r+0x1c>

000044a8 <fflush>:
    44a8:	20000526 	beq	r4,zero,44c0 <fflush+0x18>
    44ac:	00800074 	movhi	r2,1
    44b0:	10858e04 	addi	r2,r2,5688
    44b4:	200b883a 	mov	r5,r4
    44b8:	11000017 	ldw	r4,0(r2)
    44bc:	000444c1 	jmpi	444c <_fflush_r>
    44c0:	00800074 	movhi	r2,1
    44c4:	10858d04 	addi	r2,r2,5684
    44c8:	11000017 	ldw	r4,0(r2)
    44cc:	01400034 	movhi	r5,0
    44d0:	29511304 	addi	r5,r5,17484
    44d4:	000522c1 	jmpi	522c <_fwalk_reent>

000044d8 <__fp_unlock>:
    44d8:	0005883a 	mov	r2,zero
    44dc:	f800283a 	ret

000044e0 <_cleanup_r>:
    44e0:	01400074 	movhi	r5,1
    44e4:	29649104 	addi	r5,r5,-28092
    44e8:	000522c1 	jmpi	522c <_fwalk_reent>

000044ec <__sinit.part.1>:
    44ec:	defff704 	addi	sp,sp,-36
    44f0:	00c00034 	movhi	r3,0
    44f4:	dfc00815 	stw	ra,32(sp)
    44f8:	ddc00715 	stw	r23,28(sp)
    44fc:	dd800615 	stw	r22,24(sp)
    4500:	dd400515 	stw	r21,20(sp)
    4504:	dd000415 	stw	r20,16(sp)
    4508:	dcc00315 	stw	r19,12(sp)
    450c:	dc800215 	stw	r18,8(sp)
    4510:	dc400115 	stw	r17,4(sp)
    4514:	dc000015 	stw	r16,0(sp)
    4518:	18d13804 	addi	r3,r3,17632
    451c:	24000117 	ldw	r16,4(r4)
    4520:	20c00f15 	stw	r3,60(r4)
    4524:	2080bb04 	addi	r2,r4,748
    4528:	00c000c4 	movi	r3,3
    452c:	20c0b915 	stw	r3,740(r4)
    4530:	2080ba15 	stw	r2,744(r4)
    4534:	2000b815 	stw	zero,736(r4)
    4538:	05c00204 	movi	r23,8
    453c:	00800104 	movi	r2,4
    4540:	2025883a 	mov	r18,r4
    4544:	b80d883a 	mov	r6,r23
    4548:	81001704 	addi	r4,r16,92
    454c:	000b883a 	mov	r5,zero
    4550:	80000015 	stw	zero,0(r16)
    4554:	80000115 	stw	zero,4(r16)
    4558:	80000215 	stw	zero,8(r16)
    455c:	8080030d 	sth	r2,12(r16)
    4560:	80001915 	stw	zero,100(r16)
    4564:	8000038d 	sth	zero,14(r16)
    4568:	80000415 	stw	zero,16(r16)
    456c:	80000515 	stw	zero,20(r16)
    4570:	80000615 	stw	zero,24(r16)
    4574:	000611c0 	call	611c <memset>
    4578:	05800034 	movhi	r22,0
    457c:	94400217 	ldw	r17,8(r18)
    4580:	05400034 	movhi	r21,0
    4584:	05000034 	movhi	r20,0
    4588:	04c00034 	movhi	r19,0
    458c:	b59e1b04 	addi	r22,r22,30828
    4590:	ad5e3204 	addi	r21,r21,30920
    4594:	a51e5104 	addi	r20,r20,31044
    4598:	9cde6804 	addi	r19,r19,31136
    459c:	85800815 	stw	r22,32(r16)
    45a0:	85400915 	stw	r21,36(r16)
    45a4:	85000a15 	stw	r20,40(r16)
    45a8:	84c00b15 	stw	r19,44(r16)
    45ac:	84000715 	stw	r16,28(r16)
    45b0:	00800284 	movi	r2,10
    45b4:	8880030d 	sth	r2,12(r17)
    45b8:	00800044 	movi	r2,1
    45bc:	b80d883a 	mov	r6,r23
    45c0:	89001704 	addi	r4,r17,92
    45c4:	000b883a 	mov	r5,zero
    45c8:	88000015 	stw	zero,0(r17)
    45cc:	88000115 	stw	zero,4(r17)
    45d0:	88000215 	stw	zero,8(r17)
    45d4:	88001915 	stw	zero,100(r17)
    45d8:	8880038d 	sth	r2,14(r17)
    45dc:	88000415 	stw	zero,16(r17)
    45e0:	88000515 	stw	zero,20(r17)
    45e4:	88000615 	stw	zero,24(r17)
    45e8:	000611c0 	call	611c <memset>
    45ec:	94000317 	ldw	r16,12(r18)
    45f0:	00800484 	movi	r2,18
    45f4:	8c400715 	stw	r17,28(r17)
    45f8:	8d800815 	stw	r22,32(r17)
    45fc:	8d400915 	stw	r21,36(r17)
    4600:	8d000a15 	stw	r20,40(r17)
    4604:	8cc00b15 	stw	r19,44(r17)
    4608:	8080030d 	sth	r2,12(r16)
    460c:	00800084 	movi	r2,2
    4610:	80000015 	stw	zero,0(r16)
    4614:	80000115 	stw	zero,4(r16)
    4618:	80000215 	stw	zero,8(r16)
    461c:	80001915 	stw	zero,100(r16)
    4620:	8080038d 	sth	r2,14(r16)
    4624:	80000415 	stw	zero,16(r16)
    4628:	80000515 	stw	zero,20(r16)
    462c:	80000615 	stw	zero,24(r16)
    4630:	b80d883a 	mov	r6,r23
    4634:	000b883a 	mov	r5,zero
    4638:	81001704 	addi	r4,r16,92
    463c:	000611c0 	call	611c <memset>
    4640:	00800044 	movi	r2,1
    4644:	84000715 	stw	r16,28(r16)
    4648:	85800815 	stw	r22,32(r16)
    464c:	85400915 	stw	r21,36(r16)
    4650:	85000a15 	stw	r20,40(r16)
    4654:	84c00b15 	stw	r19,44(r16)
    4658:	90800e15 	stw	r2,56(r18)
    465c:	dfc00817 	ldw	ra,32(sp)
    4660:	ddc00717 	ldw	r23,28(sp)
    4664:	dd800617 	ldw	r22,24(sp)
    4668:	dd400517 	ldw	r21,20(sp)
    466c:	dd000417 	ldw	r20,16(sp)
    4670:	dcc00317 	ldw	r19,12(sp)
    4674:	dc800217 	ldw	r18,8(sp)
    4678:	dc400117 	ldw	r17,4(sp)
    467c:	dc000017 	ldw	r16,0(sp)
    4680:	dec00904 	addi	sp,sp,36
    4684:	f800283a 	ret

00004688 <__fp_lock>:
    4688:	0005883a 	mov	r2,zero
    468c:	f800283a 	ret

00004690 <__sfmoreglue>:
    4690:	defffc04 	addi	sp,sp,-16
    4694:	dc400115 	stw	r17,4(sp)
    4698:	2c7fffc4 	addi	r17,r5,-1
    469c:	8c401a24 	muli	r17,r17,104
    46a0:	dc800215 	stw	r18,8(sp)
    46a4:	2825883a 	mov	r18,r5
    46a8:	89401d04 	addi	r5,r17,116
    46ac:	dc000015 	stw	r16,0(sp)
    46b0:	dfc00315 	stw	ra,12(sp)
    46b4:	00055880 	call	5588 <_malloc_r>
    46b8:	1021883a 	mov	r16,r2
    46bc:	10000726 	beq	r2,zero,46dc <__sfmoreglue+0x4c>
    46c0:	11000304 	addi	r4,r2,12
    46c4:	10000015 	stw	zero,0(r2)
    46c8:	14800115 	stw	r18,4(r2)
    46cc:	11000215 	stw	r4,8(r2)
    46d0:	89801a04 	addi	r6,r17,104
    46d4:	000b883a 	mov	r5,zero
    46d8:	000611c0 	call	611c <memset>
    46dc:	8005883a 	mov	r2,r16
    46e0:	dfc00317 	ldw	ra,12(sp)
    46e4:	dc800217 	ldw	r18,8(sp)
    46e8:	dc400117 	ldw	r17,4(sp)
    46ec:	dc000017 	ldw	r16,0(sp)
    46f0:	dec00404 	addi	sp,sp,16
    46f4:	f800283a 	ret

000046f8 <__sfp>:
    46f8:	defffb04 	addi	sp,sp,-20
    46fc:	dc000015 	stw	r16,0(sp)
    4700:	04000074 	movhi	r16,1
    4704:	84058d04 	addi	r16,r16,5684
    4708:	dcc00315 	stw	r19,12(sp)
    470c:	2027883a 	mov	r19,r4
    4710:	81000017 	ldw	r4,0(r16)
    4714:	dfc00415 	stw	ra,16(sp)
    4718:	dc800215 	stw	r18,8(sp)
    471c:	20800e17 	ldw	r2,56(r4)
    4720:	dc400115 	stw	r17,4(sp)
    4724:	1000021e 	bne	r2,zero,4730 <__sfp+0x38>
    4728:	00044ec0 	call	44ec <__sinit.part.1>
    472c:	81000017 	ldw	r4,0(r16)
    4730:	2480b804 	addi	r18,r4,736
    4734:	047fffc4 	movi	r17,-1
    4738:	91000117 	ldw	r4,4(r18)
    473c:	94000217 	ldw	r16,8(r18)
    4740:	213fffc4 	addi	r4,r4,-1
    4744:	20000a16 	blt	r4,zero,4770 <__sfp+0x78>
    4748:	8080030f 	ldh	r2,12(r16)
    474c:	10000c26 	beq	r2,zero,4780 <__sfp+0x88>
    4750:	80c01d04 	addi	r3,r16,116
    4754:	00000206 	br	4760 <__sfp+0x68>
    4758:	18bfe60f 	ldh	r2,-104(r3)
    475c:	10000826 	beq	r2,zero,4780 <__sfp+0x88>
    4760:	213fffc4 	addi	r4,r4,-1
    4764:	1c3ffd04 	addi	r16,r3,-12
    4768:	18c01a04 	addi	r3,r3,104
    476c:	247ffa1e 	bne	r4,r17,4758 <__sfp+0x60>
    4770:	90800017 	ldw	r2,0(r18)
    4774:	10001d26 	beq	r2,zero,47ec <__sfp+0xf4>
    4778:	1025883a 	mov	r18,r2
    477c:	003fee06 	br	4738 <__sfp+0x40>
    4780:	00bfffc4 	movi	r2,-1
    4784:	8080038d 	sth	r2,14(r16)
    4788:	00800044 	movi	r2,1
    478c:	8080030d 	sth	r2,12(r16)
    4790:	80001915 	stw	zero,100(r16)
    4794:	80000015 	stw	zero,0(r16)
    4798:	80000215 	stw	zero,8(r16)
    479c:	80000115 	stw	zero,4(r16)
    47a0:	80000415 	stw	zero,16(r16)
    47a4:	80000515 	stw	zero,20(r16)
    47a8:	80000615 	stw	zero,24(r16)
    47ac:	01800204 	movi	r6,8
    47b0:	000b883a 	mov	r5,zero
    47b4:	81001704 	addi	r4,r16,92
    47b8:	000611c0 	call	611c <memset>
    47bc:	8005883a 	mov	r2,r16
    47c0:	80000c15 	stw	zero,48(r16)
    47c4:	80000d15 	stw	zero,52(r16)
    47c8:	80001115 	stw	zero,68(r16)
    47cc:	80001215 	stw	zero,72(r16)
    47d0:	dfc00417 	ldw	ra,16(sp)
    47d4:	dcc00317 	ldw	r19,12(sp)
    47d8:	dc800217 	ldw	r18,8(sp)
    47dc:	dc400117 	ldw	r17,4(sp)
    47e0:	dc000017 	ldw	r16,0(sp)
    47e4:	dec00504 	addi	sp,sp,20
    47e8:	f800283a 	ret
    47ec:	01400104 	movi	r5,4
    47f0:	9809883a 	mov	r4,r19
    47f4:	00046900 	call	4690 <__sfmoreglue>
    47f8:	90800015 	stw	r2,0(r18)
    47fc:	103fde1e 	bne	r2,zero,4778 <__sfp+0x80>
    4800:	00800304 	movi	r2,12
    4804:	98800015 	stw	r2,0(r19)
    4808:	0005883a 	mov	r2,zero
    480c:	003ff006 	br	47d0 <__sfp+0xd8>

00004810 <_cleanup>:
    4810:	00800074 	movhi	r2,1
    4814:	10858d04 	addi	r2,r2,5684
    4818:	11000017 	ldw	r4,0(r2)
    481c:	01400074 	movhi	r5,1
    4820:	29649104 	addi	r5,r5,-28092
    4824:	000522c1 	jmpi	522c <_fwalk_reent>

00004828 <__sinit>:
    4828:	20800e17 	ldw	r2,56(r4)
    482c:	10000126 	beq	r2,zero,4834 <__sinit+0xc>
    4830:	f800283a 	ret
    4834:	00044ec1 	jmpi	44ec <__sinit.part.1>

00004838 <__sfp_lock_acquire>:
    4838:	f800283a 	ret

0000483c <__sfp_lock_release>:
    483c:	f800283a 	ret

00004840 <__sinit_lock_acquire>:
    4840:	f800283a 	ret

00004844 <__sinit_lock_release>:
    4844:	f800283a 	ret

00004848 <__fp_lock_all>:
    4848:	00800074 	movhi	r2,1
    484c:	10858e04 	addi	r2,r2,5688
    4850:	11000017 	ldw	r4,0(r2)
    4854:	01400034 	movhi	r5,0
    4858:	2951a204 	addi	r5,r5,18056
    485c:	00051681 	jmpi	5168 <_fwalk>

00004860 <__fp_unlock_all>:
    4860:	00800074 	movhi	r2,1
    4864:	10858e04 	addi	r2,r2,5688
    4868:	11000017 	ldw	r4,0(r2)
    486c:	01400034 	movhi	r5,0
    4870:	29513604 	addi	r5,r5,17624
    4874:	00051681 	jmpi	5168 <_fwalk>

00004878 <_malloc_trim_r>:
    4878:	defffb04 	addi	sp,sp,-20
    487c:	dcc00315 	stw	r19,12(sp)
    4880:	04c00074 	movhi	r19,1
    4884:	dc800215 	stw	r18,8(sp)
    4888:	dc400115 	stw	r17,4(sp)
    488c:	dc000015 	stw	r16,0(sp)
    4890:	dfc00415 	stw	ra,16(sp)
    4894:	2821883a 	mov	r16,r5
    4898:	9cfffe04 	addi	r19,r19,-8
    489c:	2025883a 	mov	r18,r4
    48a0:	000d2980 	call	d298 <__malloc_lock>
    48a4:	98800217 	ldw	r2,8(r19)
    48a8:	14400117 	ldw	r17,4(r2)
    48ac:	00bfff04 	movi	r2,-4
    48b0:	88a2703a 	and	r17,r17,r2
    48b4:	8c21c83a 	sub	r16,r17,r16
    48b8:	8403fbc4 	addi	r16,r16,4079
    48bc:	8020d33a 	srli	r16,r16,12
    48c0:	0083ffc4 	movi	r2,4095
    48c4:	843fffc4 	addi	r16,r16,-1
    48c8:	8020933a 	slli	r16,r16,12
    48cc:	1400060e 	bge	r2,r16,48e8 <_malloc_trim_r+0x70>
    48d0:	000b883a 	mov	r5,zero
    48d4:	9009883a 	mov	r4,r18
    48d8:	00078180 	call	7818 <_sbrk_r>
    48dc:	98c00217 	ldw	r3,8(r19)
    48e0:	1c47883a 	add	r3,r3,r17
    48e4:	10c00a26 	beq	r2,r3,4910 <_malloc_trim_r+0x98>
    48e8:	9009883a 	mov	r4,r18
    48ec:	000d2bc0 	call	d2bc <__malloc_unlock>
    48f0:	0005883a 	mov	r2,zero
    48f4:	dfc00417 	ldw	ra,16(sp)
    48f8:	dcc00317 	ldw	r19,12(sp)
    48fc:	dc800217 	ldw	r18,8(sp)
    4900:	dc400117 	ldw	r17,4(sp)
    4904:	dc000017 	ldw	r16,0(sp)
    4908:	dec00504 	addi	sp,sp,20
    490c:	f800283a 	ret
    4910:	040bc83a 	sub	r5,zero,r16
    4914:	9009883a 	mov	r4,r18
    4918:	00078180 	call	7818 <_sbrk_r>
    491c:	00ffffc4 	movi	r3,-1
    4920:	10c00d26 	beq	r2,r3,4958 <_malloc_trim_r+0xe0>
    4924:	00c00074 	movhi	r3,1
    4928:	18cc7104 	addi	r3,r3,12740
    492c:	18800017 	ldw	r2,0(r3)
    4930:	99000217 	ldw	r4,8(r19)
    4934:	8c23c83a 	sub	r17,r17,r16
    4938:	8c400054 	ori	r17,r17,1
    493c:	1421c83a 	sub	r16,r2,r16
    4940:	24400115 	stw	r17,4(r4)
    4944:	9009883a 	mov	r4,r18
    4948:	1c000015 	stw	r16,0(r3)
    494c:	000d2bc0 	call	d2bc <__malloc_unlock>
    4950:	00800044 	movi	r2,1
    4954:	003fe706 	br	48f4 <_malloc_trim_r+0x7c>
    4958:	000b883a 	mov	r5,zero
    495c:	9009883a 	mov	r4,r18
    4960:	00078180 	call	7818 <_sbrk_r>
    4964:	99000217 	ldw	r4,8(r19)
    4968:	014003c4 	movi	r5,15
    496c:	1107c83a 	sub	r3,r2,r4
    4970:	28ffdd0e 	bge	r5,r3,48e8 <_malloc_trim_r+0x70>
    4974:	01400074 	movhi	r5,1
    4978:	29459004 	addi	r5,r5,5696
    497c:	29400017 	ldw	r5,0(r5)
    4980:	18c00054 	ori	r3,r3,1
    4984:	20c00115 	stw	r3,4(r4)
    4988:	00c00074 	movhi	r3,1
    498c:	1145c83a 	sub	r2,r2,r5
    4990:	18cc7104 	addi	r3,r3,12740
    4994:	18800015 	stw	r2,0(r3)
    4998:	003fd306 	br	48e8 <_malloc_trim_r+0x70>

0000499c <_free_r>:
    499c:	28004126 	beq	r5,zero,4aa4 <_free_r+0x108>
    49a0:	defffd04 	addi	sp,sp,-12
    49a4:	dc400115 	stw	r17,4(sp)
    49a8:	dc000015 	stw	r16,0(sp)
    49ac:	2023883a 	mov	r17,r4
    49b0:	2821883a 	mov	r16,r5
    49b4:	dfc00215 	stw	ra,8(sp)
    49b8:	000d2980 	call	d298 <__malloc_lock>
    49bc:	81ffff17 	ldw	r7,-4(r16)
    49c0:	00bfff84 	movi	r2,-2
    49c4:	01000074 	movhi	r4,1
    49c8:	81bffe04 	addi	r6,r16,-8
    49cc:	3884703a 	and	r2,r7,r2
    49d0:	213ffe04 	addi	r4,r4,-8
    49d4:	308b883a 	add	r5,r6,r2
    49d8:	2a400117 	ldw	r9,4(r5)
    49dc:	22000217 	ldw	r8,8(r4)
    49e0:	00ffff04 	movi	r3,-4
    49e4:	48c6703a 	and	r3,r9,r3
    49e8:	2a005726 	beq	r5,r8,4b48 <_free_r+0x1ac>
    49ec:	28c00115 	stw	r3,4(r5)
    49f0:	39c0004c 	andi	r7,r7,1
    49f4:	3800091e 	bne	r7,zero,4a1c <_free_r+0x80>
    49f8:	823ffe17 	ldw	r8,-8(r16)
    49fc:	22400204 	addi	r9,r4,8
    4a00:	320dc83a 	sub	r6,r6,r8
    4a04:	31c00217 	ldw	r7,8(r6)
    4a08:	1205883a 	add	r2,r2,r8
    4a0c:	3a406526 	beq	r7,r9,4ba4 <_free_r+0x208>
    4a10:	32000317 	ldw	r8,12(r6)
    4a14:	3a000315 	stw	r8,12(r7)
    4a18:	41c00215 	stw	r7,8(r8)
    4a1c:	28cf883a 	add	r7,r5,r3
    4a20:	39c00117 	ldw	r7,4(r7)
    4a24:	39c0004c 	andi	r7,r7,1
    4a28:	38003a26 	beq	r7,zero,4b14 <_free_r+0x178>
    4a2c:	10c00054 	ori	r3,r2,1
    4a30:	30c00115 	stw	r3,4(r6)
    4a34:	3087883a 	add	r3,r6,r2
    4a38:	18800015 	stw	r2,0(r3)
    4a3c:	00c07fc4 	movi	r3,511
    4a40:	18801936 	bltu	r3,r2,4aa8 <_free_r+0x10c>
    4a44:	1004d0fa 	srli	r2,r2,3
    4a48:	01c00044 	movi	r7,1
    4a4c:	21400117 	ldw	r5,4(r4)
    4a50:	10c00044 	addi	r3,r2,1
    4a54:	18c7883a 	add	r3,r3,r3
    4a58:	1005d0ba 	srai	r2,r2,2
    4a5c:	18c7883a 	add	r3,r3,r3
    4a60:	18c7883a 	add	r3,r3,r3
    4a64:	1907883a 	add	r3,r3,r4
    4a68:	3884983a 	sll	r2,r7,r2
    4a6c:	19c00017 	ldw	r7,0(r3)
    4a70:	1a3ffe04 	addi	r8,r3,-8
    4a74:	1144b03a 	or	r2,r2,r5
    4a78:	32000315 	stw	r8,12(r6)
    4a7c:	31c00215 	stw	r7,8(r6)
    4a80:	20800115 	stw	r2,4(r4)
    4a84:	19800015 	stw	r6,0(r3)
    4a88:	39800315 	stw	r6,12(r7)
    4a8c:	8809883a 	mov	r4,r17
    4a90:	dfc00217 	ldw	ra,8(sp)
    4a94:	dc400117 	ldw	r17,4(sp)
    4a98:	dc000017 	ldw	r16,0(sp)
    4a9c:	dec00304 	addi	sp,sp,12
    4aa0:	000d2bc1 	jmpi	d2bc <__malloc_unlock>
    4aa4:	f800283a 	ret
    4aa8:	100ad27a 	srli	r5,r2,9
    4aac:	00c00104 	movi	r3,4
    4ab0:	19404a36 	bltu	r3,r5,4bdc <_free_r+0x240>
    4ab4:	100ad1ba 	srli	r5,r2,6
    4ab8:	28c00e44 	addi	r3,r5,57
    4abc:	18c7883a 	add	r3,r3,r3
    4ac0:	29400e04 	addi	r5,r5,56
    4ac4:	18c7883a 	add	r3,r3,r3
    4ac8:	18c7883a 	add	r3,r3,r3
    4acc:	1909883a 	add	r4,r3,r4
    4ad0:	20c00017 	ldw	r3,0(r4)
    4ad4:	01c00074 	movhi	r7,1
    4ad8:	213ffe04 	addi	r4,r4,-8
    4adc:	39fffe04 	addi	r7,r7,-8
    4ae0:	20c04426 	beq	r4,r3,4bf4 <_free_r+0x258>
    4ae4:	01ffff04 	movi	r7,-4
    4ae8:	19400117 	ldw	r5,4(r3)
    4aec:	29ca703a 	and	r5,r5,r7
    4af0:	1140022e 	bgeu	r2,r5,4afc <_free_r+0x160>
    4af4:	18c00217 	ldw	r3,8(r3)
    4af8:	20fffb1e 	bne	r4,r3,4ae8 <_free_r+0x14c>
    4afc:	19000317 	ldw	r4,12(r3)
    4b00:	31000315 	stw	r4,12(r6)
    4b04:	30c00215 	stw	r3,8(r6)
    4b08:	21800215 	stw	r6,8(r4)
    4b0c:	19800315 	stw	r6,12(r3)
    4b10:	003fde06 	br	4a8c <_free_r+0xf0>
    4b14:	29c00217 	ldw	r7,8(r5)
    4b18:	10c5883a 	add	r2,r2,r3
    4b1c:	00c00074 	movhi	r3,1
    4b20:	18c00004 	addi	r3,r3,0
    4b24:	38c03b26 	beq	r7,r3,4c14 <_free_r+0x278>
    4b28:	2a000317 	ldw	r8,12(r5)
    4b2c:	11400054 	ori	r5,r2,1
    4b30:	3087883a 	add	r3,r6,r2
    4b34:	3a000315 	stw	r8,12(r7)
    4b38:	41c00215 	stw	r7,8(r8)
    4b3c:	31400115 	stw	r5,4(r6)
    4b40:	18800015 	stw	r2,0(r3)
    4b44:	003fbd06 	br	4a3c <_free_r+0xa0>
    4b48:	39c0004c 	andi	r7,r7,1
    4b4c:	10c5883a 	add	r2,r2,r3
    4b50:	3800071e 	bne	r7,zero,4b70 <_free_r+0x1d4>
    4b54:	81fffe17 	ldw	r7,-8(r16)
    4b58:	31cdc83a 	sub	r6,r6,r7
    4b5c:	30c00317 	ldw	r3,12(r6)
    4b60:	31400217 	ldw	r5,8(r6)
    4b64:	11c5883a 	add	r2,r2,r7
    4b68:	28c00315 	stw	r3,12(r5)
    4b6c:	19400215 	stw	r5,8(r3)
    4b70:	10c00054 	ori	r3,r2,1
    4b74:	30c00115 	stw	r3,4(r6)
    4b78:	00c00074 	movhi	r3,1
    4b7c:	18c59104 	addi	r3,r3,5700
    4b80:	18c00017 	ldw	r3,0(r3)
    4b84:	21800215 	stw	r6,8(r4)
    4b88:	10ffc036 	bltu	r2,r3,4a8c <_free_r+0xf0>
    4b8c:	00800074 	movhi	r2,1
    4b90:	108c6804 	addi	r2,r2,12704
    4b94:	11400017 	ldw	r5,0(r2)
    4b98:	8809883a 	mov	r4,r17
    4b9c:	00048780 	call	4878 <_malloc_trim_r>
    4ba0:	003fba06 	br	4a8c <_free_r+0xf0>
    4ba4:	28c9883a 	add	r4,r5,r3
    4ba8:	21000117 	ldw	r4,4(r4)
    4bac:	2100004c 	andi	r4,r4,1
    4bb0:	2000391e 	bne	r4,zero,4c98 <_free_r+0x2fc>
    4bb4:	29c00217 	ldw	r7,8(r5)
    4bb8:	29000317 	ldw	r4,12(r5)
    4bbc:	1885883a 	add	r2,r3,r2
    4bc0:	10c00054 	ori	r3,r2,1
    4bc4:	39000315 	stw	r4,12(r7)
    4bc8:	21c00215 	stw	r7,8(r4)
    4bcc:	30c00115 	stw	r3,4(r6)
    4bd0:	308d883a 	add	r6,r6,r2
    4bd4:	30800015 	stw	r2,0(r6)
    4bd8:	003fac06 	br	4a8c <_free_r+0xf0>
    4bdc:	00c00504 	movi	r3,20
    4be0:	19401536 	bltu	r3,r5,4c38 <_free_r+0x29c>
    4be4:	28c01704 	addi	r3,r5,92
    4be8:	18c7883a 	add	r3,r3,r3
    4bec:	294016c4 	addi	r5,r5,91
    4bf0:	003fb406 	br	4ac4 <_free_r+0x128>
    4bf4:	280bd0ba 	srai	r5,r5,2
    4bf8:	00c00044 	movi	r3,1
    4bfc:	38800117 	ldw	r2,4(r7)
    4c00:	194a983a 	sll	r5,r3,r5
    4c04:	2007883a 	mov	r3,r4
    4c08:	2884b03a 	or	r2,r5,r2
    4c0c:	38800115 	stw	r2,4(r7)
    4c10:	003fbb06 	br	4b00 <_free_r+0x164>
    4c14:	21800515 	stw	r6,20(r4)
    4c18:	21800415 	stw	r6,16(r4)
    4c1c:	10c00054 	ori	r3,r2,1
    4c20:	31c00315 	stw	r7,12(r6)
    4c24:	31c00215 	stw	r7,8(r6)
    4c28:	30c00115 	stw	r3,4(r6)
    4c2c:	308d883a 	add	r6,r6,r2
    4c30:	30800015 	stw	r2,0(r6)
    4c34:	003f9506 	br	4a8c <_free_r+0xf0>
    4c38:	00c01504 	movi	r3,84
    4c3c:	19400536 	bltu	r3,r5,4c54 <_free_r+0x2b8>
    4c40:	100ad33a 	srli	r5,r2,12
    4c44:	28c01bc4 	addi	r3,r5,111
    4c48:	18c7883a 	add	r3,r3,r3
    4c4c:	29401b84 	addi	r5,r5,110
    4c50:	003f9c06 	br	4ac4 <_free_r+0x128>
    4c54:	00c05504 	movi	r3,340
    4c58:	19400536 	bltu	r3,r5,4c70 <_free_r+0x2d4>
    4c5c:	100ad3fa 	srli	r5,r2,15
    4c60:	28c01e04 	addi	r3,r5,120
    4c64:	18c7883a 	add	r3,r3,r3
    4c68:	29401dc4 	addi	r5,r5,119
    4c6c:	003f9506 	br	4ac4 <_free_r+0x128>
    4c70:	00c15504 	movi	r3,1364
    4c74:	19400536 	bltu	r3,r5,4c8c <_free_r+0x2f0>
    4c78:	100ad4ba 	srli	r5,r2,18
    4c7c:	28c01f44 	addi	r3,r5,125
    4c80:	18c7883a 	add	r3,r3,r3
    4c84:	29401f04 	addi	r5,r5,124
    4c88:	003f8e06 	br	4ac4 <_free_r+0x128>
    4c8c:	00c03f84 	movi	r3,254
    4c90:	01401f84 	movi	r5,126
    4c94:	003f8b06 	br	4ac4 <_free_r+0x128>
    4c98:	10c00054 	ori	r3,r2,1
    4c9c:	30c00115 	stw	r3,4(r6)
    4ca0:	308d883a 	add	r6,r6,r2
    4ca4:	30800015 	stw	r2,0(r6)
    4ca8:	003f7806 	br	4a8c <_free_r+0xf0>

00004cac <__sfvwrite_r>:
    4cac:	30800217 	ldw	r2,8(r6)
    4cb0:	10006726 	beq	r2,zero,4e50 <__sfvwrite_r+0x1a4>
    4cb4:	28c0030b 	ldhu	r3,12(r5)
    4cb8:	defff404 	addi	sp,sp,-48
    4cbc:	dd400715 	stw	r21,28(sp)
    4cc0:	dd000615 	stw	r20,24(sp)
    4cc4:	dc000215 	stw	r16,8(sp)
    4cc8:	dfc00b15 	stw	ra,44(sp)
    4ccc:	df000a15 	stw	fp,40(sp)
    4cd0:	ddc00915 	stw	r23,36(sp)
    4cd4:	dd800815 	stw	r22,32(sp)
    4cd8:	dcc00515 	stw	r19,20(sp)
    4cdc:	dc800415 	stw	r18,16(sp)
    4ce0:	dc400315 	stw	r17,12(sp)
    4ce4:	1880020c 	andi	r2,r3,8
    4ce8:	2821883a 	mov	r16,r5
    4cec:	202b883a 	mov	r21,r4
    4cf0:	3029883a 	mov	r20,r6
    4cf4:	10002726 	beq	r2,zero,4d94 <__sfvwrite_r+0xe8>
    4cf8:	28800417 	ldw	r2,16(r5)
    4cfc:	10002526 	beq	r2,zero,4d94 <__sfvwrite_r+0xe8>
    4d00:	1880008c 	andi	r2,r3,2
    4d04:	a4400017 	ldw	r17,0(r20)
    4d08:	10002a26 	beq	r2,zero,4db4 <__sfvwrite_r+0x108>
    4d0c:	05a00034 	movhi	r22,32768
    4d10:	0027883a 	mov	r19,zero
    4d14:	0025883a 	mov	r18,zero
    4d18:	b5bf0004 	addi	r22,r22,-1024
    4d1c:	980d883a 	mov	r6,r19
    4d20:	a809883a 	mov	r4,r21
    4d24:	90004626 	beq	r18,zero,4e40 <__sfvwrite_r+0x194>
    4d28:	900f883a 	mov	r7,r18
    4d2c:	b480022e 	bgeu	r22,r18,4d38 <__sfvwrite_r+0x8c>
    4d30:	01e00034 	movhi	r7,32768
    4d34:	39ff0004 	addi	r7,r7,-1024
    4d38:	80800917 	ldw	r2,36(r16)
    4d3c:	81400717 	ldw	r5,28(r16)
    4d40:	103ee83a 	callr	r2
    4d44:	0080570e 	bge	zero,r2,4ea4 <__sfvwrite_r+0x1f8>
    4d48:	a0c00217 	ldw	r3,8(r20)
    4d4c:	98a7883a 	add	r19,r19,r2
    4d50:	90a5c83a 	sub	r18,r18,r2
    4d54:	1885c83a 	sub	r2,r3,r2
    4d58:	a0800215 	stw	r2,8(r20)
    4d5c:	103fef1e 	bne	r2,zero,4d1c <__sfvwrite_r+0x70>
    4d60:	0005883a 	mov	r2,zero
    4d64:	dfc00b17 	ldw	ra,44(sp)
    4d68:	df000a17 	ldw	fp,40(sp)
    4d6c:	ddc00917 	ldw	r23,36(sp)
    4d70:	dd800817 	ldw	r22,32(sp)
    4d74:	dd400717 	ldw	r21,28(sp)
    4d78:	dd000617 	ldw	r20,24(sp)
    4d7c:	dcc00517 	ldw	r19,20(sp)
    4d80:	dc800417 	ldw	r18,16(sp)
    4d84:	dc400317 	ldw	r17,12(sp)
    4d88:	dc000217 	ldw	r16,8(sp)
    4d8c:	dec00c04 	addi	sp,sp,48
    4d90:	f800283a 	ret
    4d94:	800b883a 	mov	r5,r16
    4d98:	a809883a 	mov	r4,r21
    4d9c:	00028540 	call	2854 <__swsetup_r>
    4da0:	1000eb1e 	bne	r2,zero,5150 <__sfvwrite_r+0x4a4>
    4da4:	80c0030b 	ldhu	r3,12(r16)
    4da8:	a4400017 	ldw	r17,0(r20)
    4dac:	1880008c 	andi	r2,r3,2
    4db0:	103fd61e 	bne	r2,zero,4d0c <__sfvwrite_r+0x60>
    4db4:	1880004c 	andi	r2,r3,1
    4db8:	10003f1e 	bne	r2,zero,4eb8 <__sfvwrite_r+0x20c>
    4dbc:	0039883a 	mov	fp,zero
    4dc0:	0025883a 	mov	r18,zero
    4dc4:	90001a26 	beq	r18,zero,4e30 <__sfvwrite_r+0x184>
    4dc8:	1880800c 	andi	r2,r3,512
    4dcc:	84c00217 	ldw	r19,8(r16)
    4dd0:	10002126 	beq	r2,zero,4e58 <__sfvwrite_r+0x1ac>
    4dd4:	982f883a 	mov	r23,r19
    4dd8:	94c09336 	bltu	r18,r19,5028 <__sfvwrite_r+0x37c>
    4ddc:	1881200c 	andi	r2,r3,1152
    4de0:	10009e1e 	bne	r2,zero,505c <__sfvwrite_r+0x3b0>
    4de4:	81000017 	ldw	r4,0(r16)
    4de8:	b80d883a 	mov	r6,r23
    4dec:	e00b883a 	mov	r5,fp
    4df0:	0005fc00 	call	5fc0 <memmove>
    4df4:	80c00217 	ldw	r3,8(r16)
    4df8:	81000017 	ldw	r4,0(r16)
    4dfc:	9005883a 	mov	r2,r18
    4e00:	1ce7c83a 	sub	r19,r3,r19
    4e04:	25cf883a 	add	r7,r4,r23
    4e08:	84c00215 	stw	r19,8(r16)
    4e0c:	81c00015 	stw	r7,0(r16)
    4e10:	a0c00217 	ldw	r3,8(r20)
    4e14:	e0b9883a 	add	fp,fp,r2
    4e18:	90a5c83a 	sub	r18,r18,r2
    4e1c:	18a7c83a 	sub	r19,r3,r2
    4e20:	a4c00215 	stw	r19,8(r20)
    4e24:	983fce26 	beq	r19,zero,4d60 <__sfvwrite_r+0xb4>
    4e28:	80c0030b 	ldhu	r3,12(r16)
    4e2c:	903fe61e 	bne	r18,zero,4dc8 <__sfvwrite_r+0x11c>
    4e30:	8f000017 	ldw	fp,0(r17)
    4e34:	8c800117 	ldw	r18,4(r17)
    4e38:	8c400204 	addi	r17,r17,8
    4e3c:	003fe106 	br	4dc4 <__sfvwrite_r+0x118>
    4e40:	8cc00017 	ldw	r19,0(r17)
    4e44:	8c800117 	ldw	r18,4(r17)
    4e48:	8c400204 	addi	r17,r17,8
    4e4c:	003fb306 	br	4d1c <__sfvwrite_r+0x70>
    4e50:	0005883a 	mov	r2,zero
    4e54:	f800283a 	ret
    4e58:	81000017 	ldw	r4,0(r16)
    4e5c:	80800417 	ldw	r2,16(r16)
    4e60:	11005736 	bltu	r2,r4,4fc0 <__sfvwrite_r+0x314>
    4e64:	85c00517 	ldw	r23,20(r16)
    4e68:	95c05536 	bltu	r18,r23,4fc0 <__sfvwrite_r+0x314>
    4e6c:	00a00034 	movhi	r2,32768
    4e70:	10bfffc4 	addi	r2,r2,-1
    4e74:	9009883a 	mov	r4,r18
    4e78:	1480012e 	bgeu	r2,r18,4e80 <__sfvwrite_r+0x1d4>
    4e7c:	1009883a 	mov	r4,r2
    4e80:	b80b883a 	mov	r5,r23
    4e84:	000a4b00 	call	a4b0 <__divsi3>
    4e88:	15cf383a 	mul	r7,r2,r23
    4e8c:	81400717 	ldw	r5,28(r16)
    4e90:	80800917 	ldw	r2,36(r16)
    4e94:	e00d883a 	mov	r6,fp
    4e98:	a809883a 	mov	r4,r21
    4e9c:	103ee83a 	callr	r2
    4ea0:	00bfdb16 	blt	zero,r2,4e10 <__sfvwrite_r+0x164>
    4ea4:	8080030b 	ldhu	r2,12(r16)
    4ea8:	10801014 	ori	r2,r2,64
    4eac:	8080030d 	sth	r2,12(r16)
    4eb0:	00bfffc4 	movi	r2,-1
    4eb4:	003fab06 	br	4d64 <__sfvwrite_r+0xb8>
    4eb8:	0027883a 	mov	r19,zero
    4ebc:	0011883a 	mov	r8,zero
    4ec0:	0039883a 	mov	fp,zero
    4ec4:	0025883a 	mov	r18,zero
    4ec8:	90001f26 	beq	r18,zero,4f48 <__sfvwrite_r+0x29c>
    4ecc:	40005a26 	beq	r8,zero,5038 <__sfvwrite_r+0x38c>
    4ed0:	982d883a 	mov	r22,r19
    4ed4:	94c0012e 	bgeu	r18,r19,4edc <__sfvwrite_r+0x230>
    4ed8:	902d883a 	mov	r22,r18
    4edc:	81000017 	ldw	r4,0(r16)
    4ee0:	80800417 	ldw	r2,16(r16)
    4ee4:	b02f883a 	mov	r23,r22
    4ee8:	81c00517 	ldw	r7,20(r16)
    4eec:	1100032e 	bgeu	r2,r4,4efc <__sfvwrite_r+0x250>
    4ef0:	80c00217 	ldw	r3,8(r16)
    4ef4:	38c7883a 	add	r3,r7,r3
    4ef8:	1d801816 	blt	r3,r22,4f5c <__sfvwrite_r+0x2b0>
    4efc:	b1c03e16 	blt	r22,r7,4ff8 <__sfvwrite_r+0x34c>
    4f00:	80800917 	ldw	r2,36(r16)
    4f04:	81400717 	ldw	r5,28(r16)
    4f08:	e00d883a 	mov	r6,fp
    4f0c:	da000115 	stw	r8,4(sp)
    4f10:	a809883a 	mov	r4,r21
    4f14:	103ee83a 	callr	r2
    4f18:	102f883a 	mov	r23,r2
    4f1c:	da000117 	ldw	r8,4(sp)
    4f20:	00bfe00e 	bge	zero,r2,4ea4 <__sfvwrite_r+0x1f8>
    4f24:	9de7c83a 	sub	r19,r19,r23
    4f28:	98001f26 	beq	r19,zero,4fa8 <__sfvwrite_r+0x2fc>
    4f2c:	a0800217 	ldw	r2,8(r20)
    4f30:	e5f9883a 	add	fp,fp,r23
    4f34:	95e5c83a 	sub	r18,r18,r23
    4f38:	15efc83a 	sub	r23,r2,r23
    4f3c:	a5c00215 	stw	r23,8(r20)
    4f40:	b83f8726 	beq	r23,zero,4d60 <__sfvwrite_r+0xb4>
    4f44:	903fe11e 	bne	r18,zero,4ecc <__sfvwrite_r+0x220>
    4f48:	8f000017 	ldw	fp,0(r17)
    4f4c:	8c800117 	ldw	r18,4(r17)
    4f50:	0011883a 	mov	r8,zero
    4f54:	8c400204 	addi	r17,r17,8
    4f58:	003fdb06 	br	4ec8 <__sfvwrite_r+0x21c>
    4f5c:	180d883a 	mov	r6,r3
    4f60:	e00b883a 	mov	r5,fp
    4f64:	da000115 	stw	r8,4(sp)
    4f68:	d8c00015 	stw	r3,0(sp)
    4f6c:	0005fc00 	call	5fc0 <memmove>
    4f70:	d8c00017 	ldw	r3,0(sp)
    4f74:	80800017 	ldw	r2,0(r16)
    4f78:	800b883a 	mov	r5,r16
    4f7c:	a809883a 	mov	r4,r21
    4f80:	10c5883a 	add	r2,r2,r3
    4f84:	80800015 	stw	r2,0(r16)
    4f88:	d8c00015 	stw	r3,0(sp)
    4f8c:	000444c0 	call	444c <_fflush_r>
    4f90:	d8c00017 	ldw	r3,0(sp)
    4f94:	da000117 	ldw	r8,4(sp)
    4f98:	103fc21e 	bne	r2,zero,4ea4 <__sfvwrite_r+0x1f8>
    4f9c:	182f883a 	mov	r23,r3
    4fa0:	9de7c83a 	sub	r19,r19,r23
    4fa4:	983fe11e 	bne	r19,zero,4f2c <__sfvwrite_r+0x280>
    4fa8:	800b883a 	mov	r5,r16
    4fac:	a809883a 	mov	r4,r21
    4fb0:	000444c0 	call	444c <_fflush_r>
    4fb4:	103fbb1e 	bne	r2,zero,4ea4 <__sfvwrite_r+0x1f8>
    4fb8:	0011883a 	mov	r8,zero
    4fbc:	003fdb06 	br	4f2c <__sfvwrite_r+0x280>
    4fc0:	94c0012e 	bgeu	r18,r19,4fc8 <__sfvwrite_r+0x31c>
    4fc4:	9027883a 	mov	r19,r18
    4fc8:	980d883a 	mov	r6,r19
    4fcc:	e00b883a 	mov	r5,fp
    4fd0:	0005fc00 	call	5fc0 <memmove>
    4fd4:	80800217 	ldw	r2,8(r16)
    4fd8:	80c00017 	ldw	r3,0(r16)
    4fdc:	14c5c83a 	sub	r2,r2,r19
    4fe0:	1cc7883a 	add	r3,r3,r19
    4fe4:	80800215 	stw	r2,8(r16)
    4fe8:	80c00015 	stw	r3,0(r16)
    4fec:	10004326 	beq	r2,zero,50fc <__sfvwrite_r+0x450>
    4ff0:	9805883a 	mov	r2,r19
    4ff4:	003f8606 	br	4e10 <__sfvwrite_r+0x164>
    4ff8:	b00d883a 	mov	r6,r22
    4ffc:	e00b883a 	mov	r5,fp
    5000:	da000115 	stw	r8,4(sp)
    5004:	0005fc00 	call	5fc0 <memmove>
    5008:	80800217 	ldw	r2,8(r16)
    500c:	80c00017 	ldw	r3,0(r16)
    5010:	da000117 	ldw	r8,4(sp)
    5014:	1585c83a 	sub	r2,r2,r22
    5018:	1dad883a 	add	r22,r3,r22
    501c:	80800215 	stw	r2,8(r16)
    5020:	85800015 	stw	r22,0(r16)
    5024:	003fbf06 	br	4f24 <__sfvwrite_r+0x278>
    5028:	81000017 	ldw	r4,0(r16)
    502c:	9027883a 	mov	r19,r18
    5030:	902f883a 	mov	r23,r18
    5034:	003f6c06 	br	4de8 <__sfvwrite_r+0x13c>
    5038:	900d883a 	mov	r6,r18
    503c:	01400284 	movi	r5,10
    5040:	e009883a 	mov	r4,fp
    5044:	0005d940 	call	5d94 <memchr>
    5048:	10003e26 	beq	r2,zero,5144 <__sfvwrite_r+0x498>
    504c:	10800044 	addi	r2,r2,1
    5050:	1727c83a 	sub	r19,r2,fp
    5054:	02000044 	movi	r8,1
    5058:	003f9d06 	br	4ed0 <__sfvwrite_r+0x224>
    505c:	80800517 	ldw	r2,20(r16)
    5060:	81400417 	ldw	r5,16(r16)
    5064:	81c00017 	ldw	r7,0(r16)
    5068:	10a7883a 	add	r19,r2,r2
    506c:	9885883a 	add	r2,r19,r2
    5070:	1026d7fa 	srli	r19,r2,31
    5074:	396dc83a 	sub	r22,r7,r5
    5078:	b1000044 	addi	r4,r22,1
    507c:	9885883a 	add	r2,r19,r2
    5080:	1027d07a 	srai	r19,r2,1
    5084:	2485883a 	add	r2,r4,r18
    5088:	980d883a 	mov	r6,r19
    508c:	9880022e 	bgeu	r19,r2,5098 <__sfvwrite_r+0x3ec>
    5090:	1027883a 	mov	r19,r2
    5094:	100d883a 	mov	r6,r2
    5098:	18c1000c 	andi	r3,r3,1024
    509c:	18001c26 	beq	r3,zero,5110 <__sfvwrite_r+0x464>
    50a0:	300b883a 	mov	r5,r6
    50a4:	a809883a 	mov	r4,r21
    50a8:	00055880 	call	5588 <_malloc_r>
    50ac:	102f883a 	mov	r23,r2
    50b0:	10002926 	beq	r2,zero,5158 <__sfvwrite_r+0x4ac>
    50b4:	81400417 	ldw	r5,16(r16)
    50b8:	b00d883a 	mov	r6,r22
    50bc:	1009883a 	mov	r4,r2
    50c0:	0005e780 	call	5e78 <memcpy>
    50c4:	8080030b 	ldhu	r2,12(r16)
    50c8:	00fedfc4 	movi	r3,-1153
    50cc:	10c4703a 	and	r2,r2,r3
    50d0:	10802014 	ori	r2,r2,128
    50d4:	8080030d 	sth	r2,12(r16)
    50d8:	bd89883a 	add	r4,r23,r22
    50dc:	9d8fc83a 	sub	r7,r19,r22
    50e0:	85c00415 	stw	r23,16(r16)
    50e4:	84c00515 	stw	r19,20(r16)
    50e8:	81000015 	stw	r4,0(r16)
    50ec:	9027883a 	mov	r19,r18
    50f0:	81c00215 	stw	r7,8(r16)
    50f4:	902f883a 	mov	r23,r18
    50f8:	003f3b06 	br	4de8 <__sfvwrite_r+0x13c>
    50fc:	800b883a 	mov	r5,r16
    5100:	a809883a 	mov	r4,r21
    5104:	000444c0 	call	444c <_fflush_r>
    5108:	103fb926 	beq	r2,zero,4ff0 <__sfvwrite_r+0x344>
    510c:	003f6506 	br	4ea4 <__sfvwrite_r+0x1f8>
    5110:	a809883a 	mov	r4,r21
    5114:	00072400 	call	7240 <_realloc_r>
    5118:	102f883a 	mov	r23,r2
    511c:	103fee1e 	bne	r2,zero,50d8 <__sfvwrite_r+0x42c>
    5120:	81400417 	ldw	r5,16(r16)
    5124:	a809883a 	mov	r4,r21
    5128:	000499c0 	call	499c <_free_r>
    512c:	8080030b 	ldhu	r2,12(r16)
    5130:	00ffdfc4 	movi	r3,-129
    5134:	1884703a 	and	r2,r3,r2
    5138:	00c00304 	movi	r3,12
    513c:	a8c00015 	stw	r3,0(r21)
    5140:	003f5906 	br	4ea8 <__sfvwrite_r+0x1fc>
    5144:	94c00044 	addi	r19,r18,1
    5148:	02000044 	movi	r8,1
    514c:	003f6006 	br	4ed0 <__sfvwrite_r+0x224>
    5150:	00bfffc4 	movi	r2,-1
    5154:	003f0306 	br	4d64 <__sfvwrite_r+0xb8>
    5158:	00800304 	movi	r2,12
    515c:	a8800015 	stw	r2,0(r21)
    5160:	8080030b 	ldhu	r2,12(r16)
    5164:	003f5006 	br	4ea8 <__sfvwrite_r+0x1fc>

00005168 <_fwalk>:
    5168:	defff704 	addi	sp,sp,-36
    516c:	dd000415 	stw	r20,16(sp)
    5170:	dfc00815 	stw	ra,32(sp)
    5174:	ddc00715 	stw	r23,28(sp)
    5178:	dd800615 	stw	r22,24(sp)
    517c:	dd400515 	stw	r21,20(sp)
    5180:	dcc00315 	stw	r19,12(sp)
    5184:	dc800215 	stw	r18,8(sp)
    5188:	dc400115 	stw	r17,4(sp)
    518c:	dc000015 	stw	r16,0(sp)
    5190:	2500b804 	addi	r20,r4,736
    5194:	a0002326 	beq	r20,zero,5224 <_fwalk+0xbc>
    5198:	282b883a 	mov	r21,r5
    519c:	002f883a 	mov	r23,zero
    51a0:	05800044 	movi	r22,1
    51a4:	04ffffc4 	movi	r19,-1
    51a8:	a4400117 	ldw	r17,4(r20)
    51ac:	a4800217 	ldw	r18,8(r20)
    51b0:	8c7fffc4 	addi	r17,r17,-1
    51b4:	88000d16 	blt	r17,zero,51ec <_fwalk+0x84>
    51b8:	94000304 	addi	r16,r18,12
    51bc:	94800384 	addi	r18,r18,14
    51c0:	8080000b 	ldhu	r2,0(r16)
    51c4:	8c7fffc4 	addi	r17,r17,-1
    51c8:	813ffd04 	addi	r4,r16,-12
    51cc:	b080042e 	bgeu	r22,r2,51e0 <_fwalk+0x78>
    51d0:	9080000f 	ldh	r2,0(r18)
    51d4:	14c00226 	beq	r2,r19,51e0 <_fwalk+0x78>
    51d8:	a83ee83a 	callr	r21
    51dc:	b8aeb03a 	or	r23,r23,r2
    51e0:	84001a04 	addi	r16,r16,104
    51e4:	94801a04 	addi	r18,r18,104
    51e8:	8cfff51e 	bne	r17,r19,51c0 <_fwalk+0x58>
    51ec:	a5000017 	ldw	r20,0(r20)
    51f0:	a03fed1e 	bne	r20,zero,51a8 <_fwalk+0x40>
    51f4:	b805883a 	mov	r2,r23
    51f8:	dfc00817 	ldw	ra,32(sp)
    51fc:	ddc00717 	ldw	r23,28(sp)
    5200:	dd800617 	ldw	r22,24(sp)
    5204:	dd400517 	ldw	r21,20(sp)
    5208:	dd000417 	ldw	r20,16(sp)
    520c:	dcc00317 	ldw	r19,12(sp)
    5210:	dc800217 	ldw	r18,8(sp)
    5214:	dc400117 	ldw	r17,4(sp)
    5218:	dc000017 	ldw	r16,0(sp)
    521c:	dec00904 	addi	sp,sp,36
    5220:	f800283a 	ret
    5224:	002f883a 	mov	r23,zero
    5228:	003ff206 	br	51f4 <_fwalk+0x8c>

0000522c <_fwalk_reent>:
    522c:	defff704 	addi	sp,sp,-36
    5230:	dd000415 	stw	r20,16(sp)
    5234:	dfc00815 	stw	ra,32(sp)
    5238:	ddc00715 	stw	r23,28(sp)
    523c:	dd800615 	stw	r22,24(sp)
    5240:	dd400515 	stw	r21,20(sp)
    5244:	dcc00315 	stw	r19,12(sp)
    5248:	dc800215 	stw	r18,8(sp)
    524c:	dc400115 	stw	r17,4(sp)
    5250:	dc000015 	stw	r16,0(sp)
    5254:	2500b804 	addi	r20,r4,736
    5258:	a0002326 	beq	r20,zero,52e8 <_fwalk_reent+0xbc>
    525c:	282b883a 	mov	r21,r5
    5260:	2027883a 	mov	r19,r4
    5264:	002f883a 	mov	r23,zero
    5268:	05800044 	movi	r22,1
    526c:	04bfffc4 	movi	r18,-1
    5270:	a4400117 	ldw	r17,4(r20)
    5274:	a4000217 	ldw	r16,8(r20)
    5278:	8c7fffc4 	addi	r17,r17,-1
    527c:	88000c16 	blt	r17,zero,52b0 <_fwalk_reent+0x84>
    5280:	84000304 	addi	r16,r16,12
    5284:	8080000b 	ldhu	r2,0(r16)
    5288:	8c7fffc4 	addi	r17,r17,-1
    528c:	817ffd04 	addi	r5,r16,-12
    5290:	b080052e 	bgeu	r22,r2,52a8 <_fwalk_reent+0x7c>
    5294:	8080008f 	ldh	r2,2(r16)
    5298:	9809883a 	mov	r4,r19
    529c:	14800226 	beq	r2,r18,52a8 <_fwalk_reent+0x7c>
    52a0:	a83ee83a 	callr	r21
    52a4:	b8aeb03a 	or	r23,r23,r2
    52a8:	84001a04 	addi	r16,r16,104
    52ac:	8cbff51e 	bne	r17,r18,5284 <_fwalk_reent+0x58>
    52b0:	a5000017 	ldw	r20,0(r20)
    52b4:	a03fee1e 	bne	r20,zero,5270 <_fwalk_reent+0x44>
    52b8:	b805883a 	mov	r2,r23
    52bc:	dfc00817 	ldw	ra,32(sp)
    52c0:	ddc00717 	ldw	r23,28(sp)
    52c4:	dd800617 	ldw	r22,24(sp)
    52c8:	dd400517 	ldw	r21,20(sp)
    52cc:	dd000417 	ldw	r20,16(sp)
    52d0:	dcc00317 	ldw	r19,12(sp)
    52d4:	dc800217 	ldw	r18,8(sp)
    52d8:	dc400117 	ldw	r17,4(sp)
    52dc:	dc000017 	ldw	r16,0(sp)
    52e0:	dec00904 	addi	sp,sp,36
    52e4:	f800283a 	ret
    52e8:	002f883a 	mov	r23,zero
    52ec:	003ff206 	br	52b8 <_fwalk_reent+0x8c>

000052f0 <_setlocale_r>:
    52f0:	30001b26 	beq	r6,zero,5360 <_setlocale_r+0x70>
    52f4:	01400074 	movhi	r5,1
    52f8:	defffe04 	addi	sp,sp,-8
    52fc:	297e3604 	addi	r5,r5,-1832
    5300:	3009883a 	mov	r4,r6
    5304:	dc000015 	stw	r16,0(sp)
    5308:	dfc00115 	stw	ra,4(sp)
    530c:	3021883a 	mov	r16,r6
    5310:	00079a80 	call	79a8 <strcmp>
    5314:	1000061e 	bne	r2,zero,5330 <_setlocale_r+0x40>
    5318:	00800074 	movhi	r2,1
    531c:	10be3504 	addi	r2,r2,-1836
    5320:	dfc00117 	ldw	ra,4(sp)
    5324:	dc000017 	ldw	r16,0(sp)
    5328:	dec00204 	addi	sp,sp,8
    532c:	f800283a 	ret
    5330:	01400074 	movhi	r5,1
    5334:	297e3504 	addi	r5,r5,-1836
    5338:	8009883a 	mov	r4,r16
    533c:	00079a80 	call	79a8 <strcmp>
    5340:	103ff526 	beq	r2,zero,5318 <_setlocale_r+0x28>
    5344:	01400074 	movhi	r5,1
    5348:	297e2004 	addi	r5,r5,-1920
    534c:	8009883a 	mov	r4,r16
    5350:	00079a80 	call	79a8 <strcmp>
    5354:	103ff026 	beq	r2,zero,5318 <_setlocale_r+0x28>
    5358:	0005883a 	mov	r2,zero
    535c:	003ff006 	br	5320 <_setlocale_r+0x30>
    5360:	00800074 	movhi	r2,1
    5364:	10be3504 	addi	r2,r2,-1836
    5368:	f800283a 	ret

0000536c <__locale_charset>:
    536c:	00800074 	movhi	r2,1
    5370:	10bfe804 	addi	r2,r2,-96
    5374:	f800283a 	ret

00005378 <__locale_mb_cur_max>:
    5378:	00800074 	movhi	r2,1
    537c:	10858f04 	addi	r2,r2,5692
    5380:	10800017 	ldw	r2,0(r2)
    5384:	f800283a 	ret

00005388 <__locale_msgcharset>:
    5388:	00800074 	movhi	r2,1
    538c:	10bfe004 	addi	r2,r2,-128
    5390:	f800283a 	ret

00005394 <__locale_cjk_lang>:
    5394:	0005883a 	mov	r2,zero
    5398:	f800283a 	ret

0000539c <_localeconv_r>:
    539c:	00800074 	movhi	r2,1
    53a0:	10bff004 	addi	r2,r2,-64
    53a4:	f800283a 	ret

000053a8 <setlocale>:
    53a8:	00800074 	movhi	r2,1
    53ac:	10858e04 	addi	r2,r2,5688
    53b0:	280d883a 	mov	r6,r5
    53b4:	200b883a 	mov	r5,r4
    53b8:	11000017 	ldw	r4,0(r2)
    53bc:	00052f01 	jmpi	52f0 <_setlocale_r>

000053c0 <localeconv>:
    53c0:	00800074 	movhi	r2,1
    53c4:	10bff004 	addi	r2,r2,-64
    53c8:	f800283a 	ret

000053cc <__smakebuf_r>:
    53cc:	2880030b 	ldhu	r2,12(r5)
    53d0:	10c0008c 	andi	r3,r2,2
    53d4:	1800411e 	bne	r3,zero,54dc <__smakebuf_r+0x110>
    53d8:	deffec04 	addi	sp,sp,-80
    53dc:	dc000f15 	stw	r16,60(sp)
    53e0:	2821883a 	mov	r16,r5
    53e4:	2940038f 	ldh	r5,14(r5)
    53e8:	dc401015 	stw	r17,64(sp)
    53ec:	dfc01315 	stw	ra,76(sp)
    53f0:	dcc01215 	stw	r19,72(sp)
    53f4:	dc801115 	stw	r18,68(sp)
    53f8:	2023883a 	mov	r17,r4
    53fc:	28001c16 	blt	r5,zero,5470 <__smakebuf_r+0xa4>
    5400:	d80d883a 	mov	r6,sp
    5404:	00095500 	call	9550 <_fstat_r>
    5408:	10001816 	blt	r2,zero,546c <__smakebuf_r+0xa0>
    540c:	d8800117 	ldw	r2,4(sp)
    5410:	00e00014 	movui	r3,32768
    5414:	10bc000c 	andi	r2,r2,61440
    5418:	14c80020 	cmpeqi	r19,r2,8192
    541c:	10c03726 	beq	r2,r3,54fc <__smakebuf_r+0x130>
    5420:	80c0030b 	ldhu	r3,12(r16)
    5424:	18c20014 	ori	r3,r3,2048
    5428:	80c0030d 	sth	r3,12(r16)
    542c:	00c80004 	movi	r3,8192
    5430:	10c0521e 	bne	r2,r3,557c <__smakebuf_r+0x1b0>
    5434:	8140038f 	ldh	r5,14(r16)
    5438:	8809883a 	mov	r4,r17
    543c:	00095ac0 	call	95ac <_isatty_r>
    5440:	10004c26 	beq	r2,zero,5574 <__smakebuf_r+0x1a8>
    5444:	8080030b 	ldhu	r2,12(r16)
    5448:	80c010c4 	addi	r3,r16,67
    544c:	80c00015 	stw	r3,0(r16)
    5450:	10800054 	ori	r2,r2,1
    5454:	8080030d 	sth	r2,12(r16)
    5458:	00800044 	movi	r2,1
    545c:	80c00415 	stw	r3,16(r16)
    5460:	80800515 	stw	r2,20(r16)
    5464:	04810004 	movi	r18,1024
    5468:	00000706 	br	5488 <__smakebuf_r+0xbc>
    546c:	8080030b 	ldhu	r2,12(r16)
    5470:	10c0200c 	andi	r3,r2,128
    5474:	18001f1e 	bne	r3,zero,54f4 <__smakebuf_r+0x128>
    5478:	04810004 	movi	r18,1024
    547c:	10820014 	ori	r2,r2,2048
    5480:	8080030d 	sth	r2,12(r16)
    5484:	0027883a 	mov	r19,zero
    5488:	900b883a 	mov	r5,r18
    548c:	8809883a 	mov	r4,r17
    5490:	00055880 	call	5588 <_malloc_r>
    5494:	10002c26 	beq	r2,zero,5548 <__smakebuf_r+0x17c>
    5498:	80c0030b 	ldhu	r3,12(r16)
    549c:	01000034 	movhi	r4,0
    54a0:	21113804 	addi	r4,r4,17632
    54a4:	89000f15 	stw	r4,60(r17)
    54a8:	18c02014 	ori	r3,r3,128
    54ac:	80c0030d 	sth	r3,12(r16)
    54b0:	80800015 	stw	r2,0(r16)
    54b4:	80800415 	stw	r2,16(r16)
    54b8:	84800515 	stw	r18,20(r16)
    54bc:	98001a1e 	bne	r19,zero,5528 <__smakebuf_r+0x15c>
    54c0:	dfc01317 	ldw	ra,76(sp)
    54c4:	dcc01217 	ldw	r19,72(sp)
    54c8:	dc801117 	ldw	r18,68(sp)
    54cc:	dc401017 	ldw	r17,64(sp)
    54d0:	dc000f17 	ldw	r16,60(sp)
    54d4:	dec01404 	addi	sp,sp,80
    54d8:	f800283a 	ret
    54dc:	288010c4 	addi	r2,r5,67
    54e0:	28800015 	stw	r2,0(r5)
    54e4:	28800415 	stw	r2,16(r5)
    54e8:	00800044 	movi	r2,1
    54ec:	28800515 	stw	r2,20(r5)
    54f0:	f800283a 	ret
    54f4:	04801004 	movi	r18,64
    54f8:	003fe006 	br	547c <__smakebuf_r+0xb0>
    54fc:	81000a17 	ldw	r4,40(r16)
    5500:	00c00034 	movhi	r3,0
    5504:	18de5104 	addi	r3,r3,31044
    5508:	20ffc51e 	bne	r4,r3,5420 <__smakebuf_r+0x54>
    550c:	8080030b 	ldhu	r2,12(r16)
    5510:	04810004 	movi	r18,1024
    5514:	84801315 	stw	r18,76(r16)
    5518:	1484b03a 	or	r2,r2,r18
    551c:	8080030d 	sth	r2,12(r16)
    5520:	0027883a 	mov	r19,zero
    5524:	003fd806 	br	5488 <__smakebuf_r+0xbc>
    5528:	8140038f 	ldh	r5,14(r16)
    552c:	8809883a 	mov	r4,r17
    5530:	00095ac0 	call	95ac <_isatty_r>
    5534:	103fe226 	beq	r2,zero,54c0 <__smakebuf_r+0xf4>
    5538:	8080030b 	ldhu	r2,12(r16)
    553c:	10800054 	ori	r2,r2,1
    5540:	8080030d 	sth	r2,12(r16)
    5544:	003fde06 	br	54c0 <__smakebuf_r+0xf4>
    5548:	8080030b 	ldhu	r2,12(r16)
    554c:	10c0800c 	andi	r3,r2,512
    5550:	183fdb1e 	bne	r3,zero,54c0 <__smakebuf_r+0xf4>
    5554:	10800094 	ori	r2,r2,2
    5558:	80c010c4 	addi	r3,r16,67
    555c:	8080030d 	sth	r2,12(r16)
    5560:	00800044 	movi	r2,1
    5564:	80c00015 	stw	r3,0(r16)
    5568:	80c00415 	stw	r3,16(r16)
    556c:	80800515 	stw	r2,20(r16)
    5570:	003fd306 	br	54c0 <__smakebuf_r+0xf4>
    5574:	04810004 	movi	r18,1024
    5578:	003fc306 	br	5488 <__smakebuf_r+0xbc>
    557c:	0027883a 	mov	r19,zero
    5580:	04810004 	movi	r18,1024
    5584:	003fc006 	br	5488 <__smakebuf_r+0xbc>

00005588 <_malloc_r>:
    5588:	defff504 	addi	sp,sp,-44
    558c:	dc800315 	stw	r18,12(sp)
    5590:	dfc00a15 	stw	ra,40(sp)
    5594:	df000915 	stw	fp,36(sp)
    5598:	ddc00815 	stw	r23,32(sp)
    559c:	dd800715 	stw	r22,28(sp)
    55a0:	dd400615 	stw	r21,24(sp)
    55a4:	dd000515 	stw	r20,20(sp)
    55a8:	dcc00415 	stw	r19,16(sp)
    55ac:	dc400215 	stw	r17,8(sp)
    55b0:	dc000115 	stw	r16,4(sp)
    55b4:	288002c4 	addi	r2,r5,11
    55b8:	00c00584 	movi	r3,22
    55bc:	2025883a 	mov	r18,r4
    55c0:	18807f2e 	bgeu	r3,r2,57c0 <_malloc_r+0x238>
    55c4:	047ffe04 	movi	r17,-8
    55c8:	1462703a 	and	r17,r2,r17
    55cc:	8800a316 	blt	r17,zero,585c <_malloc_r+0x2d4>
    55d0:	8940a236 	bltu	r17,r5,585c <_malloc_r+0x2d4>
    55d4:	000d2980 	call	d298 <__malloc_lock>
    55d8:	00807dc4 	movi	r2,503
    55dc:	1441e92e 	bgeu	r2,r17,5d84 <_malloc_r+0x7fc>
    55e0:	8804d27a 	srli	r2,r17,9
    55e4:	1000a126 	beq	r2,zero,586c <_malloc_r+0x2e4>
    55e8:	00c00104 	movi	r3,4
    55ec:	18811e36 	bltu	r3,r2,5a68 <_malloc_r+0x4e0>
    55f0:	8804d1ba 	srli	r2,r17,6
    55f4:	12000e44 	addi	r8,r2,57
    55f8:	11c00e04 	addi	r7,r2,56
    55fc:	4209883a 	add	r4,r8,r8
    5600:	04c00074 	movhi	r19,1
    5604:	2109883a 	add	r4,r4,r4
    5608:	9cfffe04 	addi	r19,r19,-8
    560c:	2109883a 	add	r4,r4,r4
    5610:	9909883a 	add	r4,r19,r4
    5614:	24000117 	ldw	r16,4(r4)
    5618:	213ffe04 	addi	r4,r4,-8
    561c:	24009726 	beq	r4,r16,587c <_malloc_r+0x2f4>
    5620:	80800117 	ldw	r2,4(r16)
    5624:	01bfff04 	movi	r6,-4
    5628:	014003c4 	movi	r5,15
    562c:	1184703a 	and	r2,r2,r6
    5630:	1447c83a 	sub	r3,r2,r17
    5634:	28c00716 	blt	r5,r3,5654 <_malloc_r+0xcc>
    5638:	1800920e 	bge	r3,zero,5884 <_malloc_r+0x2fc>
    563c:	84000317 	ldw	r16,12(r16)
    5640:	24008e26 	beq	r4,r16,587c <_malloc_r+0x2f4>
    5644:	80800117 	ldw	r2,4(r16)
    5648:	1184703a 	and	r2,r2,r6
    564c:	1447c83a 	sub	r3,r2,r17
    5650:	28fff90e 	bge	r5,r3,5638 <_malloc_r+0xb0>
    5654:	3809883a 	mov	r4,r7
    5658:	01800074 	movhi	r6,1
    565c:	9c000417 	ldw	r16,16(r19)
    5660:	31bffe04 	addi	r6,r6,-8
    5664:	32000204 	addi	r8,r6,8
    5668:	82013426 	beq	r16,r8,5b3c <_malloc_r+0x5b4>
    566c:	80c00117 	ldw	r3,4(r16)
    5670:	00bfff04 	movi	r2,-4
    5674:	188e703a 	and	r7,r3,r2
    5678:	3c45c83a 	sub	r2,r7,r17
    567c:	00c003c4 	movi	r3,15
    5680:	18811f16 	blt	r3,r2,5b00 <_malloc_r+0x578>
    5684:	32000515 	stw	r8,20(r6)
    5688:	32000415 	stw	r8,16(r6)
    568c:	10007f0e 	bge	r2,zero,588c <_malloc_r+0x304>
    5690:	00807fc4 	movi	r2,511
    5694:	11c0fd36 	bltu	r2,r7,5a8c <_malloc_r+0x504>
    5698:	3806d0fa 	srli	r3,r7,3
    569c:	01c00044 	movi	r7,1
    56a0:	30800117 	ldw	r2,4(r6)
    56a4:	19400044 	addi	r5,r3,1
    56a8:	294b883a 	add	r5,r5,r5
    56ac:	1807d0ba 	srai	r3,r3,2
    56b0:	294b883a 	add	r5,r5,r5
    56b4:	294b883a 	add	r5,r5,r5
    56b8:	298b883a 	add	r5,r5,r6
    56bc:	38c6983a 	sll	r3,r7,r3
    56c0:	29c00017 	ldw	r7,0(r5)
    56c4:	2a7ffe04 	addi	r9,r5,-8
    56c8:	1886b03a 	or	r3,r3,r2
    56cc:	82400315 	stw	r9,12(r16)
    56d0:	81c00215 	stw	r7,8(r16)
    56d4:	30c00115 	stw	r3,4(r6)
    56d8:	2c000015 	stw	r16,0(r5)
    56dc:	3c000315 	stw	r16,12(r7)
    56e0:	2005d0ba 	srai	r2,r4,2
    56e4:	01400044 	movi	r5,1
    56e8:	288a983a 	sll	r5,r5,r2
    56ec:	19406f36 	bltu	r3,r5,58ac <_malloc_r+0x324>
    56f0:	28c4703a 	and	r2,r5,r3
    56f4:	10000a1e 	bne	r2,zero,5720 <_malloc_r+0x198>
    56f8:	00bfff04 	movi	r2,-4
    56fc:	294b883a 	add	r5,r5,r5
    5700:	2088703a 	and	r4,r4,r2
    5704:	28c4703a 	and	r2,r5,r3
    5708:	21000104 	addi	r4,r4,4
    570c:	1000041e 	bne	r2,zero,5720 <_malloc_r+0x198>
    5710:	294b883a 	add	r5,r5,r5
    5714:	28c4703a 	and	r2,r5,r3
    5718:	21000104 	addi	r4,r4,4
    571c:	103ffc26 	beq	r2,zero,5710 <_malloc_r+0x188>
    5720:	02bfff04 	movi	r10,-4
    5724:	024003c4 	movi	r9,15
    5728:	21800044 	addi	r6,r4,1
    572c:	318d883a 	add	r6,r6,r6
    5730:	318d883a 	add	r6,r6,r6
    5734:	318d883a 	add	r6,r6,r6
    5738:	998d883a 	add	r6,r19,r6
    573c:	333ffe04 	addi	r12,r6,-8
    5740:	2017883a 	mov	r11,r4
    5744:	31800104 	addi	r6,r6,4
    5748:	34000017 	ldw	r16,0(r6)
    574c:	31fffd04 	addi	r7,r6,-12
    5750:	81c0041e 	bne	r16,r7,5764 <_malloc_r+0x1dc>
    5754:	0000fb06 	br	5b44 <_malloc_r+0x5bc>
    5758:	1801030e 	bge	r3,zero,5b68 <_malloc_r+0x5e0>
    575c:	84000317 	ldw	r16,12(r16)
    5760:	81c0f826 	beq	r16,r7,5b44 <_malloc_r+0x5bc>
    5764:	80800117 	ldw	r2,4(r16)
    5768:	1284703a 	and	r2,r2,r10
    576c:	1447c83a 	sub	r3,r2,r17
    5770:	48fff90e 	bge	r9,r3,5758 <_malloc_r+0x1d0>
    5774:	80800317 	ldw	r2,12(r16)
    5778:	81000217 	ldw	r4,8(r16)
    577c:	89400054 	ori	r5,r17,1
    5780:	81400115 	stw	r5,4(r16)
    5784:	20800315 	stw	r2,12(r4)
    5788:	11000215 	stw	r4,8(r2)
    578c:	8463883a 	add	r17,r16,r17
    5790:	9c400515 	stw	r17,20(r19)
    5794:	9c400415 	stw	r17,16(r19)
    5798:	18800054 	ori	r2,r3,1
    579c:	88800115 	stw	r2,4(r17)
    57a0:	8a000315 	stw	r8,12(r17)
    57a4:	8a000215 	stw	r8,8(r17)
    57a8:	88e3883a 	add	r17,r17,r3
    57ac:	88c00015 	stw	r3,0(r17)
    57b0:	9009883a 	mov	r4,r18
    57b4:	000d2bc0 	call	d2bc <__malloc_unlock>
    57b8:	80800204 	addi	r2,r16,8
    57bc:	00001b06 	br	582c <_malloc_r+0x2a4>
    57c0:	04400404 	movi	r17,16
    57c4:	89402536 	bltu	r17,r5,585c <_malloc_r+0x2d4>
    57c8:	000d2980 	call	d298 <__malloc_lock>
    57cc:	00800184 	movi	r2,6
    57d0:	01000084 	movi	r4,2
    57d4:	04c00074 	movhi	r19,1
    57d8:	1085883a 	add	r2,r2,r2
    57dc:	9cfffe04 	addi	r19,r19,-8
    57e0:	1085883a 	add	r2,r2,r2
    57e4:	9885883a 	add	r2,r19,r2
    57e8:	14000117 	ldw	r16,4(r2)
    57ec:	10fffe04 	addi	r3,r2,-8
    57f0:	80c0d926 	beq	r16,r3,5b58 <_malloc_r+0x5d0>
    57f4:	80c00117 	ldw	r3,4(r16)
    57f8:	81000317 	ldw	r4,12(r16)
    57fc:	00bfff04 	movi	r2,-4
    5800:	1884703a 	and	r2,r3,r2
    5804:	81400217 	ldw	r5,8(r16)
    5808:	8085883a 	add	r2,r16,r2
    580c:	10c00117 	ldw	r3,4(r2)
    5810:	29000315 	stw	r4,12(r5)
    5814:	21400215 	stw	r5,8(r4)
    5818:	18c00054 	ori	r3,r3,1
    581c:	10c00115 	stw	r3,4(r2)
    5820:	9009883a 	mov	r4,r18
    5824:	000d2bc0 	call	d2bc <__malloc_unlock>
    5828:	80800204 	addi	r2,r16,8
    582c:	dfc00a17 	ldw	ra,40(sp)
    5830:	df000917 	ldw	fp,36(sp)
    5834:	ddc00817 	ldw	r23,32(sp)
    5838:	dd800717 	ldw	r22,28(sp)
    583c:	dd400617 	ldw	r21,24(sp)
    5840:	dd000517 	ldw	r20,20(sp)
    5844:	dcc00417 	ldw	r19,16(sp)
    5848:	dc800317 	ldw	r18,12(sp)
    584c:	dc400217 	ldw	r17,8(sp)
    5850:	dc000117 	ldw	r16,4(sp)
    5854:	dec00b04 	addi	sp,sp,44
    5858:	f800283a 	ret
    585c:	00800304 	movi	r2,12
    5860:	90800015 	stw	r2,0(r18)
    5864:	0005883a 	mov	r2,zero
    5868:	003ff006 	br	582c <_malloc_r+0x2a4>
    586c:	01002004 	movi	r4,128
    5870:	02001004 	movi	r8,64
    5874:	01c00fc4 	movi	r7,63
    5878:	003f6106 	br	5600 <_malloc_r+0x78>
    587c:	4009883a 	mov	r4,r8
    5880:	003f7506 	br	5658 <_malloc_r+0xd0>
    5884:	81000317 	ldw	r4,12(r16)
    5888:	003fde06 	br	5804 <_malloc_r+0x27c>
    588c:	81c5883a 	add	r2,r16,r7
    5890:	11400117 	ldw	r5,4(r2)
    5894:	9009883a 	mov	r4,r18
    5898:	29400054 	ori	r5,r5,1
    589c:	11400115 	stw	r5,4(r2)
    58a0:	000d2bc0 	call	d2bc <__malloc_unlock>
    58a4:	80800204 	addi	r2,r16,8
    58a8:	003fe006 	br	582c <_malloc_r+0x2a4>
    58ac:	9c000217 	ldw	r16,8(r19)
    58b0:	00bfff04 	movi	r2,-4
    58b4:	85800117 	ldw	r22,4(r16)
    58b8:	b0ac703a 	and	r22,r22,r2
    58bc:	b4400336 	bltu	r22,r17,58cc <_malloc_r+0x344>
    58c0:	b445c83a 	sub	r2,r22,r17
    58c4:	00c003c4 	movi	r3,15
    58c8:	18805d16 	blt	r3,r2,5a40 <_malloc_r+0x4b8>
    58cc:	05c00074 	movhi	r23,1
    58d0:	00800074 	movhi	r2,1
    58d4:	108c6804 	addi	r2,r2,12704
    58d8:	bdc59004 	addi	r23,r23,5696
    58dc:	15400017 	ldw	r21,0(r2)
    58e0:	b8c00017 	ldw	r3,0(r23)
    58e4:	00bfffc4 	movi	r2,-1
    58e8:	858d883a 	add	r6,r16,r22
    58ec:	8d6b883a 	add	r21,r17,r21
    58f0:	1880ea26 	beq	r3,r2,5c9c <_malloc_r+0x714>
    58f4:	ad4403c4 	addi	r21,r21,4111
    58f8:	00bc0004 	movi	r2,-4096
    58fc:	a8aa703a 	and	r21,r21,r2
    5900:	a80b883a 	mov	r5,r21
    5904:	9009883a 	mov	r4,r18
    5908:	d9800015 	stw	r6,0(sp)
    590c:	00078180 	call	7818 <_sbrk_r>
    5910:	1029883a 	mov	r20,r2
    5914:	00bfffc4 	movi	r2,-1
    5918:	d9800017 	ldw	r6,0(sp)
    591c:	a080e826 	beq	r20,r2,5cc0 <_malloc_r+0x738>
    5920:	a180a636 	bltu	r20,r6,5bbc <_malloc_r+0x634>
    5924:	07000074 	movhi	fp,1
    5928:	e70c7104 	addi	fp,fp,12740
    592c:	e0800017 	ldw	r2,0(fp)
    5930:	a887883a 	add	r3,r21,r2
    5934:	e0c00015 	stw	r3,0(fp)
    5938:	3500e626 	beq	r6,r20,5cd4 <_malloc_r+0x74c>
    593c:	b9000017 	ldw	r4,0(r23)
    5940:	00bfffc4 	movi	r2,-1
    5944:	2080ee26 	beq	r4,r2,5d00 <_malloc_r+0x778>
    5948:	a185c83a 	sub	r2,r20,r6
    594c:	10c5883a 	add	r2,r2,r3
    5950:	e0800015 	stw	r2,0(fp)
    5954:	a0c001cc 	andi	r3,r20,7
    5958:	1800bc26 	beq	r3,zero,5c4c <_malloc_r+0x6c4>
    595c:	a0e9c83a 	sub	r20,r20,r3
    5960:	00840204 	movi	r2,4104
    5964:	a5000204 	addi	r20,r20,8
    5968:	10c7c83a 	sub	r3,r2,r3
    596c:	a545883a 	add	r2,r20,r21
    5970:	1083ffcc 	andi	r2,r2,4095
    5974:	18abc83a 	sub	r21,r3,r2
    5978:	a80b883a 	mov	r5,r21
    597c:	9009883a 	mov	r4,r18
    5980:	00078180 	call	7818 <_sbrk_r>
    5984:	00ffffc4 	movi	r3,-1
    5988:	10c0e126 	beq	r2,r3,5d10 <_malloc_r+0x788>
    598c:	1505c83a 	sub	r2,r2,r20
    5990:	1545883a 	add	r2,r2,r21
    5994:	10800054 	ori	r2,r2,1
    5998:	e0c00017 	ldw	r3,0(fp)
    599c:	9d000215 	stw	r20,8(r19)
    59a0:	a0800115 	stw	r2,4(r20)
    59a4:	a8c7883a 	add	r3,r21,r3
    59a8:	e0c00015 	stw	r3,0(fp)
    59ac:	84c00e26 	beq	r16,r19,59e8 <_malloc_r+0x460>
    59b0:	018003c4 	movi	r6,15
    59b4:	3580a72e 	bgeu	r6,r22,5c54 <_malloc_r+0x6cc>
    59b8:	81400117 	ldw	r5,4(r16)
    59bc:	013ffe04 	movi	r4,-8
    59c0:	b0bffd04 	addi	r2,r22,-12
    59c4:	1104703a 	and	r2,r2,r4
    59c8:	2900004c 	andi	r4,r5,1
    59cc:	2088b03a 	or	r4,r4,r2
    59d0:	81000115 	stw	r4,4(r16)
    59d4:	01400144 	movi	r5,5
    59d8:	8089883a 	add	r4,r16,r2
    59dc:	21400115 	stw	r5,4(r4)
    59e0:	21400215 	stw	r5,8(r4)
    59e4:	3080cd36 	bltu	r6,r2,5d1c <_malloc_r+0x794>
    59e8:	00800074 	movhi	r2,1
    59ec:	108c6704 	addi	r2,r2,12700
    59f0:	11000017 	ldw	r4,0(r2)
    59f4:	20c0012e 	bgeu	r4,r3,59fc <_malloc_r+0x474>
    59f8:	10c00015 	stw	r3,0(r2)
    59fc:	00800074 	movhi	r2,1
    5a00:	108c6604 	addi	r2,r2,12696
    5a04:	11000017 	ldw	r4,0(r2)
    5a08:	9c000217 	ldw	r16,8(r19)
    5a0c:	20c0012e 	bgeu	r4,r3,5a14 <_malloc_r+0x48c>
    5a10:	10c00015 	stw	r3,0(r2)
    5a14:	80c00117 	ldw	r3,4(r16)
    5a18:	00bfff04 	movi	r2,-4
    5a1c:	1886703a 	and	r3,r3,r2
    5a20:	1c45c83a 	sub	r2,r3,r17
    5a24:	1c400236 	bltu	r3,r17,5a30 <_malloc_r+0x4a8>
    5a28:	00c003c4 	movi	r3,15
    5a2c:	18800416 	blt	r3,r2,5a40 <_malloc_r+0x4b8>
    5a30:	9009883a 	mov	r4,r18
    5a34:	000d2bc0 	call	d2bc <__malloc_unlock>
    5a38:	0005883a 	mov	r2,zero
    5a3c:	003f7b06 	br	582c <_malloc_r+0x2a4>
    5a40:	88c00054 	ori	r3,r17,1
    5a44:	80c00115 	stw	r3,4(r16)
    5a48:	8463883a 	add	r17,r16,r17
    5a4c:	10800054 	ori	r2,r2,1
    5a50:	9c400215 	stw	r17,8(r19)
    5a54:	88800115 	stw	r2,4(r17)
    5a58:	9009883a 	mov	r4,r18
    5a5c:	000d2bc0 	call	d2bc <__malloc_unlock>
    5a60:	80800204 	addi	r2,r16,8
    5a64:	003f7106 	br	582c <_malloc_r+0x2a4>
    5a68:	00c00504 	movi	r3,20
    5a6c:	18804a2e 	bgeu	r3,r2,5b98 <_malloc_r+0x610>
    5a70:	00c01504 	movi	r3,84
    5a74:	18806e36 	bltu	r3,r2,5c30 <_malloc_r+0x6a8>
    5a78:	8804d33a 	srli	r2,r17,12
    5a7c:	12001bc4 	addi	r8,r2,111
    5a80:	11c01b84 	addi	r7,r2,110
    5a84:	4209883a 	add	r4,r8,r8
    5a88:	003edd06 	br	5600 <_malloc_r+0x78>
    5a8c:	3804d27a 	srli	r2,r7,9
    5a90:	00c00104 	movi	r3,4
    5a94:	1880442e 	bgeu	r3,r2,5ba8 <_malloc_r+0x620>
    5a98:	00c00504 	movi	r3,20
    5a9c:	18808136 	bltu	r3,r2,5ca4 <_malloc_r+0x71c>
    5aa0:	11401704 	addi	r5,r2,92
    5aa4:	10c016c4 	addi	r3,r2,91
    5aa8:	294b883a 	add	r5,r5,r5
    5aac:	294b883a 	add	r5,r5,r5
    5ab0:	294b883a 	add	r5,r5,r5
    5ab4:	994b883a 	add	r5,r19,r5
    5ab8:	28800017 	ldw	r2,0(r5)
    5abc:	01800074 	movhi	r6,1
    5ac0:	297ffe04 	addi	r5,r5,-8
    5ac4:	31bffe04 	addi	r6,r6,-8
    5ac8:	28806526 	beq	r5,r2,5c60 <_malloc_r+0x6d8>
    5acc:	01bfff04 	movi	r6,-4
    5ad0:	10c00117 	ldw	r3,4(r2)
    5ad4:	1986703a 	and	r3,r3,r6
    5ad8:	38c0022e 	bgeu	r7,r3,5ae4 <_malloc_r+0x55c>
    5adc:	10800217 	ldw	r2,8(r2)
    5ae0:	28bffb1e 	bne	r5,r2,5ad0 <_malloc_r+0x548>
    5ae4:	11400317 	ldw	r5,12(r2)
    5ae8:	98c00117 	ldw	r3,4(r19)
    5aec:	81400315 	stw	r5,12(r16)
    5af0:	80800215 	stw	r2,8(r16)
    5af4:	2c000215 	stw	r16,8(r5)
    5af8:	14000315 	stw	r16,12(r2)
    5afc:	003ef806 	br	56e0 <_malloc_r+0x158>
    5b00:	88c00054 	ori	r3,r17,1
    5b04:	80c00115 	stw	r3,4(r16)
    5b08:	8463883a 	add	r17,r16,r17
    5b0c:	34400515 	stw	r17,20(r6)
    5b10:	34400415 	stw	r17,16(r6)
    5b14:	10c00054 	ori	r3,r2,1
    5b18:	8a000315 	stw	r8,12(r17)
    5b1c:	8a000215 	stw	r8,8(r17)
    5b20:	88c00115 	stw	r3,4(r17)
    5b24:	88a3883a 	add	r17,r17,r2
    5b28:	88800015 	stw	r2,0(r17)
    5b2c:	9009883a 	mov	r4,r18
    5b30:	000d2bc0 	call	d2bc <__malloc_unlock>
    5b34:	80800204 	addi	r2,r16,8
    5b38:	003f3c06 	br	582c <_malloc_r+0x2a4>
    5b3c:	30c00117 	ldw	r3,4(r6)
    5b40:	003ee706 	br	56e0 <_malloc_r+0x158>
    5b44:	5ac00044 	addi	r11,r11,1
    5b48:	588000cc 	andi	r2,r11,3
    5b4c:	31800204 	addi	r6,r6,8
    5b50:	103efd1e 	bne	r2,zero,5748 <_malloc_r+0x1c0>
    5b54:	00002406 	br	5be8 <_malloc_r+0x660>
    5b58:	14000317 	ldw	r16,12(r2)
    5b5c:	143f251e 	bne	r2,r16,57f4 <_malloc_r+0x26c>
    5b60:	21000084 	addi	r4,r4,2
    5b64:	003ebc06 	br	5658 <_malloc_r+0xd0>
    5b68:	8085883a 	add	r2,r16,r2
    5b6c:	10c00117 	ldw	r3,4(r2)
    5b70:	81000317 	ldw	r4,12(r16)
    5b74:	81400217 	ldw	r5,8(r16)
    5b78:	18c00054 	ori	r3,r3,1
    5b7c:	10c00115 	stw	r3,4(r2)
    5b80:	29000315 	stw	r4,12(r5)
    5b84:	21400215 	stw	r5,8(r4)
    5b88:	9009883a 	mov	r4,r18
    5b8c:	000d2bc0 	call	d2bc <__malloc_unlock>
    5b90:	80800204 	addi	r2,r16,8
    5b94:	003f2506 	br	582c <_malloc_r+0x2a4>
    5b98:	12001704 	addi	r8,r2,92
    5b9c:	11c016c4 	addi	r7,r2,91
    5ba0:	4209883a 	add	r4,r8,r8
    5ba4:	003e9606 	br	5600 <_malloc_r+0x78>
    5ba8:	3804d1ba 	srli	r2,r7,6
    5bac:	11400e44 	addi	r5,r2,57
    5bb0:	10c00e04 	addi	r3,r2,56
    5bb4:	294b883a 	add	r5,r5,r5
    5bb8:	003fbc06 	br	5aac <_malloc_r+0x524>
    5bbc:	84ff5926 	beq	r16,r19,5924 <_malloc_r+0x39c>
    5bc0:	00800074 	movhi	r2,1
    5bc4:	10bffe04 	addi	r2,r2,-8
    5bc8:	14000217 	ldw	r16,8(r2)
    5bcc:	00bfff04 	movi	r2,-4
    5bd0:	80c00117 	ldw	r3,4(r16)
    5bd4:	1886703a 	and	r3,r3,r2
    5bd8:	003f9106 	br	5a20 <_malloc_r+0x498>
    5bdc:	60800217 	ldw	r2,8(r12)
    5be0:	213fffc4 	addi	r4,r4,-1
    5be4:	1300651e 	bne	r2,r12,5d7c <_malloc_r+0x7f4>
    5be8:	208000cc 	andi	r2,r4,3
    5bec:	633ffe04 	addi	r12,r12,-8
    5bf0:	103ffa1e 	bne	r2,zero,5bdc <_malloc_r+0x654>
    5bf4:	98800117 	ldw	r2,4(r19)
    5bf8:	0146303a 	nor	r3,zero,r5
    5bfc:	1884703a 	and	r2,r3,r2
    5c00:	98800115 	stw	r2,4(r19)
    5c04:	294b883a 	add	r5,r5,r5
    5c08:	117f2836 	bltu	r2,r5,58ac <_malloc_r+0x324>
    5c0c:	283f2726 	beq	r5,zero,58ac <_malloc_r+0x324>
    5c10:	2886703a 	and	r3,r5,r2
    5c14:	5809883a 	mov	r4,r11
    5c18:	183ec31e 	bne	r3,zero,5728 <_malloc_r+0x1a0>
    5c1c:	294b883a 	add	r5,r5,r5
    5c20:	2886703a 	and	r3,r5,r2
    5c24:	21000104 	addi	r4,r4,4
    5c28:	183ffc26 	beq	r3,zero,5c1c <_malloc_r+0x694>
    5c2c:	003ebe06 	br	5728 <_malloc_r+0x1a0>
    5c30:	00c05504 	movi	r3,340
    5c34:	18801236 	bltu	r3,r2,5c80 <_malloc_r+0x6f8>
    5c38:	8804d3fa 	srli	r2,r17,15
    5c3c:	12001e04 	addi	r8,r2,120
    5c40:	11c01dc4 	addi	r7,r2,119
    5c44:	4209883a 	add	r4,r8,r8
    5c48:	003e6d06 	br	5600 <_malloc_r+0x78>
    5c4c:	00c40004 	movi	r3,4096
    5c50:	003f4606 	br	596c <_malloc_r+0x3e4>
    5c54:	00800044 	movi	r2,1
    5c58:	a0800115 	stw	r2,4(r20)
    5c5c:	003f7406 	br	5a30 <_malloc_r+0x4a8>
    5c60:	1805d0ba 	srai	r2,r3,2
    5c64:	01c00044 	movi	r7,1
    5c68:	30c00117 	ldw	r3,4(r6)
    5c6c:	388e983a 	sll	r7,r7,r2
    5c70:	2805883a 	mov	r2,r5
    5c74:	38c6b03a 	or	r3,r7,r3
    5c78:	30c00115 	stw	r3,4(r6)
    5c7c:	003f9b06 	br	5aec <_malloc_r+0x564>
    5c80:	00c15504 	movi	r3,1364
    5c84:	18801a36 	bltu	r3,r2,5cf0 <_malloc_r+0x768>
    5c88:	8804d4ba 	srli	r2,r17,18
    5c8c:	12001f44 	addi	r8,r2,125
    5c90:	11c01f04 	addi	r7,r2,124
    5c94:	4209883a 	add	r4,r8,r8
    5c98:	003e5906 	br	5600 <_malloc_r+0x78>
    5c9c:	ad400404 	addi	r21,r21,16
    5ca0:	003f1706 	br	5900 <_malloc_r+0x378>
    5ca4:	00c01504 	movi	r3,84
    5ca8:	18802336 	bltu	r3,r2,5d38 <_malloc_r+0x7b0>
    5cac:	3804d33a 	srli	r2,r7,12
    5cb0:	11401bc4 	addi	r5,r2,111
    5cb4:	10c01b84 	addi	r3,r2,110
    5cb8:	294b883a 	add	r5,r5,r5
    5cbc:	003f7b06 	br	5aac <_malloc_r+0x524>
    5cc0:	9c000217 	ldw	r16,8(r19)
    5cc4:	00bfff04 	movi	r2,-4
    5cc8:	80c00117 	ldw	r3,4(r16)
    5ccc:	1886703a 	and	r3,r3,r2
    5cd0:	003f5306 	br	5a20 <_malloc_r+0x498>
    5cd4:	3083ffcc 	andi	r2,r6,4095
    5cd8:	103f181e 	bne	r2,zero,593c <_malloc_r+0x3b4>
    5cdc:	99000217 	ldw	r4,8(r19)
    5ce0:	b545883a 	add	r2,r22,r21
    5ce4:	10800054 	ori	r2,r2,1
    5ce8:	20800115 	stw	r2,4(r4)
    5cec:	003f3e06 	br	59e8 <_malloc_r+0x460>
    5cf0:	01003f84 	movi	r4,254
    5cf4:	02001fc4 	movi	r8,127
    5cf8:	01c01f84 	movi	r7,126
    5cfc:	003e4006 	br	5600 <_malloc_r+0x78>
    5d00:	00800074 	movhi	r2,1
    5d04:	10859004 	addi	r2,r2,5696
    5d08:	15000015 	stw	r20,0(r2)
    5d0c:	003f1106 	br	5954 <_malloc_r+0x3cc>
    5d10:	00800044 	movi	r2,1
    5d14:	002b883a 	mov	r21,zero
    5d18:	003f1f06 	br	5998 <_malloc_r+0x410>
    5d1c:	81400204 	addi	r5,r16,8
    5d20:	9009883a 	mov	r4,r18
    5d24:	000499c0 	call	499c <_free_r>
    5d28:	00800074 	movhi	r2,1
    5d2c:	108c7104 	addi	r2,r2,12740
    5d30:	10c00017 	ldw	r3,0(r2)
    5d34:	003f2c06 	br	59e8 <_malloc_r+0x460>
    5d38:	00c05504 	movi	r3,340
    5d3c:	18800536 	bltu	r3,r2,5d54 <_malloc_r+0x7cc>
    5d40:	3804d3fa 	srli	r2,r7,15
    5d44:	11401e04 	addi	r5,r2,120
    5d48:	10c01dc4 	addi	r3,r2,119
    5d4c:	294b883a 	add	r5,r5,r5
    5d50:	003f5606 	br	5aac <_malloc_r+0x524>
    5d54:	00c15504 	movi	r3,1364
    5d58:	18800536 	bltu	r3,r2,5d70 <_malloc_r+0x7e8>
    5d5c:	3804d4ba 	srli	r2,r7,18
    5d60:	11401f44 	addi	r5,r2,125
    5d64:	10c01f04 	addi	r3,r2,124
    5d68:	294b883a 	add	r5,r5,r5
    5d6c:	003f4f06 	br	5aac <_malloc_r+0x524>
    5d70:	01403f84 	movi	r5,254
    5d74:	00c01f84 	movi	r3,126
    5d78:	003f4c06 	br	5aac <_malloc_r+0x524>
    5d7c:	98800117 	ldw	r2,4(r19)
    5d80:	003fa006 	br	5c04 <_malloc_r+0x67c>
    5d84:	8808d0fa 	srli	r4,r17,3
    5d88:	20800044 	addi	r2,r4,1
    5d8c:	1085883a 	add	r2,r2,r2
    5d90:	003e9006 	br	57d4 <_malloc_r+0x24c>

00005d94 <memchr>:
    5d94:	208000cc 	andi	r2,r4,3
    5d98:	280f883a 	mov	r7,r5
    5d9c:	10003426 	beq	r2,zero,5e70 <memchr+0xdc>
    5da0:	30bfffc4 	addi	r2,r6,-1
    5da4:	30001a26 	beq	r6,zero,5e10 <memchr+0x7c>
    5da8:	20c00003 	ldbu	r3,0(r4)
    5dac:	29803fcc 	andi	r6,r5,255
    5db0:	30c0051e 	bne	r6,r3,5dc8 <memchr+0x34>
    5db4:	00001806 	br	5e18 <memchr+0x84>
    5db8:	10001526 	beq	r2,zero,5e10 <memchr+0x7c>
    5dbc:	20c00003 	ldbu	r3,0(r4)
    5dc0:	10bfffc4 	addi	r2,r2,-1
    5dc4:	30c01426 	beq	r6,r3,5e18 <memchr+0x84>
    5dc8:	21000044 	addi	r4,r4,1
    5dcc:	20c000cc 	andi	r3,r4,3
    5dd0:	183ff91e 	bne	r3,zero,5db8 <memchr+0x24>
    5dd4:	020000c4 	movi	r8,3
    5dd8:	40801136 	bltu	r8,r2,5e20 <memchr+0x8c>
    5ddc:	10000c26 	beq	r2,zero,5e10 <memchr+0x7c>
    5de0:	20c00003 	ldbu	r3,0(r4)
    5de4:	29403fcc 	andi	r5,r5,255
    5de8:	28c00b26 	beq	r5,r3,5e18 <memchr+0x84>
    5dec:	20c00044 	addi	r3,r4,1
    5df0:	39803fcc 	andi	r6,r7,255
    5df4:	2089883a 	add	r4,r4,r2
    5df8:	00000306 	br	5e08 <memchr+0x74>
    5dfc:	18c00044 	addi	r3,r3,1
    5e00:	197fffc3 	ldbu	r5,-1(r3)
    5e04:	31400526 	beq	r6,r5,5e1c <memchr+0x88>
    5e08:	1805883a 	mov	r2,r3
    5e0c:	20fffb1e 	bne	r4,r3,5dfc <memchr+0x68>
    5e10:	0005883a 	mov	r2,zero
    5e14:	f800283a 	ret
    5e18:	2005883a 	mov	r2,r4
    5e1c:	f800283a 	ret
    5e20:	28c03fcc 	andi	r3,r5,255
    5e24:	1812923a 	slli	r9,r3,8
    5e28:	02ffbff4 	movhi	r11,65279
    5e2c:	02a02074 	movhi	r10,32897
    5e30:	48d2b03a 	or	r9,r9,r3
    5e34:	4806943a 	slli	r3,r9,16
    5e38:	5affbfc4 	addi	r11,r11,-257
    5e3c:	52a02004 	addi	r10,r10,-32640
    5e40:	48d2b03a 	or	r9,r9,r3
    5e44:	20c00017 	ldw	r3,0(r4)
    5e48:	48c6f03a 	xor	r3,r9,r3
    5e4c:	1acd883a 	add	r6,r3,r11
    5e50:	00c6303a 	nor	r3,zero,r3
    5e54:	30c6703a 	and	r3,r6,r3
    5e58:	1a86703a 	and	r3,r3,r10
    5e5c:	183fe01e 	bne	r3,zero,5de0 <memchr+0x4c>
    5e60:	10bfff04 	addi	r2,r2,-4
    5e64:	21000104 	addi	r4,r4,4
    5e68:	40bff636 	bltu	r8,r2,5e44 <memchr+0xb0>
    5e6c:	003fdb06 	br	5ddc <memchr+0x48>
    5e70:	3005883a 	mov	r2,r6
    5e74:	003fd706 	br	5dd4 <memchr+0x40>

00005e78 <memcpy>:
    5e78:	defffd04 	addi	sp,sp,-12
    5e7c:	dfc00215 	stw	ra,8(sp)
    5e80:	dc400115 	stw	r17,4(sp)
    5e84:	dc000015 	stw	r16,0(sp)
    5e88:	00c003c4 	movi	r3,15
    5e8c:	2005883a 	mov	r2,r4
    5e90:	1980452e 	bgeu	r3,r6,5fa8 <memcpy+0x130>
    5e94:	2906b03a 	or	r3,r5,r4
    5e98:	18c000cc 	andi	r3,r3,3
    5e9c:	1800441e 	bne	r3,zero,5fb0 <memcpy+0x138>
    5ea0:	347ffc04 	addi	r17,r6,-16
    5ea4:	8822d13a 	srli	r17,r17,4
    5ea8:	28c00104 	addi	r3,r5,4
    5eac:	23400104 	addi	r13,r4,4
    5eb0:	8820913a 	slli	r16,r17,4
    5eb4:	2b000204 	addi	r12,r5,8
    5eb8:	22c00204 	addi	r11,r4,8
    5ebc:	84000504 	addi	r16,r16,20
    5ec0:	2a800304 	addi	r10,r5,12
    5ec4:	22400304 	addi	r9,r4,12
    5ec8:	2c21883a 	add	r16,r5,r16
    5ecc:	2811883a 	mov	r8,r5
    5ed0:	200f883a 	mov	r7,r4
    5ed4:	41000017 	ldw	r4,0(r8)
    5ed8:	1fc00017 	ldw	ra,0(r3)
    5edc:	63c00017 	ldw	r15,0(r12)
    5ee0:	39000015 	stw	r4,0(r7)
    5ee4:	53800017 	ldw	r14,0(r10)
    5ee8:	6fc00015 	stw	ra,0(r13)
    5eec:	5bc00015 	stw	r15,0(r11)
    5ef0:	4b800015 	stw	r14,0(r9)
    5ef4:	18c00404 	addi	r3,r3,16
    5ef8:	39c00404 	addi	r7,r7,16
    5efc:	42000404 	addi	r8,r8,16
    5f00:	6b400404 	addi	r13,r13,16
    5f04:	63000404 	addi	r12,r12,16
    5f08:	5ac00404 	addi	r11,r11,16
    5f0c:	52800404 	addi	r10,r10,16
    5f10:	4a400404 	addi	r9,r9,16
    5f14:	1c3fef1e 	bne	r3,r16,5ed4 <memcpy+0x5c>
    5f18:	89c00044 	addi	r7,r17,1
    5f1c:	380e913a 	slli	r7,r7,4
    5f20:	310003cc 	andi	r4,r6,15
    5f24:	02c000c4 	movi	r11,3
    5f28:	11c7883a 	add	r3,r2,r7
    5f2c:	29cb883a 	add	r5,r5,r7
    5f30:	5900212e 	bgeu	r11,r4,5fb8 <memcpy+0x140>
    5f34:	1813883a 	mov	r9,r3
    5f38:	2811883a 	mov	r8,r5
    5f3c:	200f883a 	mov	r7,r4
    5f40:	42800017 	ldw	r10,0(r8)
    5f44:	4a400104 	addi	r9,r9,4
    5f48:	39ffff04 	addi	r7,r7,-4
    5f4c:	4abfff15 	stw	r10,-4(r9)
    5f50:	42000104 	addi	r8,r8,4
    5f54:	59fffa36 	bltu	r11,r7,5f40 <memcpy+0xc8>
    5f58:	213fff04 	addi	r4,r4,-4
    5f5c:	2008d0ba 	srli	r4,r4,2
    5f60:	318000cc 	andi	r6,r6,3
    5f64:	21000044 	addi	r4,r4,1
    5f68:	2109883a 	add	r4,r4,r4
    5f6c:	2109883a 	add	r4,r4,r4
    5f70:	1907883a 	add	r3,r3,r4
    5f74:	290b883a 	add	r5,r5,r4
    5f78:	30000626 	beq	r6,zero,5f94 <memcpy+0x11c>
    5f7c:	198d883a 	add	r6,r3,r6
    5f80:	29c00003 	ldbu	r7,0(r5)
    5f84:	18c00044 	addi	r3,r3,1
    5f88:	29400044 	addi	r5,r5,1
    5f8c:	19ffffc5 	stb	r7,-1(r3)
    5f90:	19bffb1e 	bne	r3,r6,5f80 <memcpy+0x108>
    5f94:	dfc00217 	ldw	ra,8(sp)
    5f98:	dc400117 	ldw	r17,4(sp)
    5f9c:	dc000017 	ldw	r16,0(sp)
    5fa0:	dec00304 	addi	sp,sp,12
    5fa4:	f800283a 	ret
    5fa8:	2007883a 	mov	r3,r4
    5fac:	003ff206 	br	5f78 <memcpy+0x100>
    5fb0:	2007883a 	mov	r3,r4
    5fb4:	003ff106 	br	5f7c <memcpy+0x104>
    5fb8:	200d883a 	mov	r6,r4
    5fbc:	003fee06 	br	5f78 <memcpy+0x100>

00005fc0 <memmove>:
    5fc0:	2005883a 	mov	r2,r4
    5fc4:	29000b2e 	bgeu	r5,r4,5ff4 <memmove+0x34>
    5fc8:	298f883a 	add	r7,r5,r6
    5fcc:	21c0092e 	bgeu	r4,r7,5ff4 <memmove+0x34>
    5fd0:	2187883a 	add	r3,r4,r6
    5fd4:	198bc83a 	sub	r5,r3,r6
    5fd8:	30004826 	beq	r6,zero,60fc <memmove+0x13c>
    5fdc:	39ffffc4 	addi	r7,r7,-1
    5fe0:	39000003 	ldbu	r4,0(r7)
    5fe4:	18ffffc4 	addi	r3,r3,-1
    5fe8:	19000005 	stb	r4,0(r3)
    5fec:	28fffb1e 	bne	r5,r3,5fdc <memmove+0x1c>
    5ff0:	f800283a 	ret
    5ff4:	00c003c4 	movi	r3,15
    5ff8:	1980412e 	bgeu	r3,r6,6100 <memmove+0x140>
    5ffc:	2886b03a 	or	r3,r5,r2
    6000:	18c000cc 	andi	r3,r3,3
    6004:	1800401e 	bne	r3,zero,6108 <memmove+0x148>
    6008:	33fffc04 	addi	r15,r6,-16
    600c:	781ed13a 	srli	r15,r15,4
    6010:	28c00104 	addi	r3,r5,4
    6014:	13400104 	addi	r13,r2,4
    6018:	781c913a 	slli	r14,r15,4
    601c:	2b000204 	addi	r12,r5,8
    6020:	12c00204 	addi	r11,r2,8
    6024:	73800504 	addi	r14,r14,20
    6028:	2a800304 	addi	r10,r5,12
    602c:	12400304 	addi	r9,r2,12
    6030:	2b9d883a 	add	r14,r5,r14
    6034:	2811883a 	mov	r8,r5
    6038:	100f883a 	mov	r7,r2
    603c:	41000017 	ldw	r4,0(r8)
    6040:	39c00404 	addi	r7,r7,16
    6044:	18c00404 	addi	r3,r3,16
    6048:	393ffc15 	stw	r4,-16(r7)
    604c:	193ffc17 	ldw	r4,-16(r3)
    6050:	6b400404 	addi	r13,r13,16
    6054:	5ac00404 	addi	r11,r11,16
    6058:	693ffc15 	stw	r4,-16(r13)
    605c:	61000017 	ldw	r4,0(r12)
    6060:	4a400404 	addi	r9,r9,16
    6064:	42000404 	addi	r8,r8,16
    6068:	593ffc15 	stw	r4,-16(r11)
    606c:	51000017 	ldw	r4,0(r10)
    6070:	63000404 	addi	r12,r12,16
    6074:	52800404 	addi	r10,r10,16
    6078:	493ffc15 	stw	r4,-16(r9)
    607c:	1bbfef1e 	bne	r3,r14,603c <memmove+0x7c>
    6080:	79000044 	addi	r4,r15,1
    6084:	2008913a 	slli	r4,r4,4
    6088:	328003cc 	andi	r10,r6,15
    608c:	02c000c4 	movi	r11,3
    6090:	1107883a 	add	r3,r2,r4
    6094:	290b883a 	add	r5,r5,r4
    6098:	5a801e2e 	bgeu	r11,r10,6114 <memmove+0x154>
    609c:	1813883a 	mov	r9,r3
    60a0:	2811883a 	mov	r8,r5
    60a4:	500f883a 	mov	r7,r10
    60a8:	41000017 	ldw	r4,0(r8)
    60ac:	4a400104 	addi	r9,r9,4
    60b0:	39ffff04 	addi	r7,r7,-4
    60b4:	493fff15 	stw	r4,-4(r9)
    60b8:	42000104 	addi	r8,r8,4
    60bc:	59fffa36 	bltu	r11,r7,60a8 <memmove+0xe8>
    60c0:	513fff04 	addi	r4,r10,-4
    60c4:	2008d0ba 	srli	r4,r4,2
    60c8:	318000cc 	andi	r6,r6,3
    60cc:	21000044 	addi	r4,r4,1
    60d0:	2109883a 	add	r4,r4,r4
    60d4:	2109883a 	add	r4,r4,r4
    60d8:	1907883a 	add	r3,r3,r4
    60dc:	290b883a 	add	r5,r5,r4
    60e0:	30000b26 	beq	r6,zero,6110 <memmove+0x150>
    60e4:	198d883a 	add	r6,r3,r6
    60e8:	29c00003 	ldbu	r7,0(r5)
    60ec:	18c00044 	addi	r3,r3,1
    60f0:	29400044 	addi	r5,r5,1
    60f4:	19ffffc5 	stb	r7,-1(r3)
    60f8:	19bffb1e 	bne	r3,r6,60e8 <memmove+0x128>
    60fc:	f800283a 	ret
    6100:	1007883a 	mov	r3,r2
    6104:	003ff606 	br	60e0 <memmove+0x120>
    6108:	1007883a 	mov	r3,r2
    610c:	003ff506 	br	60e4 <memmove+0x124>
    6110:	f800283a 	ret
    6114:	500d883a 	mov	r6,r10
    6118:	003ff106 	br	60e0 <memmove+0x120>

0000611c <memset>:
    611c:	20c000cc 	andi	r3,r4,3
    6120:	2005883a 	mov	r2,r4
    6124:	18004426 	beq	r3,zero,6238 <memset+0x11c>
    6128:	31ffffc4 	addi	r7,r6,-1
    612c:	30004026 	beq	r6,zero,6230 <memset+0x114>
    6130:	2813883a 	mov	r9,r5
    6134:	200d883a 	mov	r6,r4
    6138:	2007883a 	mov	r3,r4
    613c:	00000406 	br	6150 <memset+0x34>
    6140:	3a3fffc4 	addi	r8,r7,-1
    6144:	31800044 	addi	r6,r6,1
    6148:	38003926 	beq	r7,zero,6230 <memset+0x114>
    614c:	400f883a 	mov	r7,r8
    6150:	18c00044 	addi	r3,r3,1
    6154:	32400005 	stb	r9,0(r6)
    6158:	1a0000cc 	andi	r8,r3,3
    615c:	403ff81e 	bne	r8,zero,6140 <memset+0x24>
    6160:	010000c4 	movi	r4,3
    6164:	21c02d2e 	bgeu	r4,r7,621c <memset+0x100>
    6168:	29003fcc 	andi	r4,r5,255
    616c:	200c923a 	slli	r6,r4,8
    6170:	3108b03a 	or	r4,r6,r4
    6174:	200c943a 	slli	r6,r4,16
    6178:	218cb03a 	or	r6,r4,r6
    617c:	010003c4 	movi	r4,15
    6180:	21c0182e 	bgeu	r4,r7,61e4 <memset+0xc8>
    6184:	3b3ffc04 	addi	r12,r7,-16
    6188:	6018d13a 	srli	r12,r12,4
    618c:	1a000104 	addi	r8,r3,4
    6190:	1ac00204 	addi	r11,r3,8
    6194:	6008913a 	slli	r4,r12,4
    6198:	1a800304 	addi	r10,r3,12
    619c:	1813883a 	mov	r9,r3
    61a0:	21000504 	addi	r4,r4,20
    61a4:	1909883a 	add	r4,r3,r4
    61a8:	49800015 	stw	r6,0(r9)
    61ac:	41800015 	stw	r6,0(r8)
    61b0:	59800015 	stw	r6,0(r11)
    61b4:	51800015 	stw	r6,0(r10)
    61b8:	42000404 	addi	r8,r8,16
    61bc:	4a400404 	addi	r9,r9,16
    61c0:	5ac00404 	addi	r11,r11,16
    61c4:	52800404 	addi	r10,r10,16
    61c8:	413ff71e 	bne	r8,r4,61a8 <memset+0x8c>
    61cc:	63000044 	addi	r12,r12,1
    61d0:	6018913a 	slli	r12,r12,4
    61d4:	39c003cc 	andi	r7,r7,15
    61d8:	010000c4 	movi	r4,3
    61dc:	1b07883a 	add	r3,r3,r12
    61e0:	21c00e2e 	bgeu	r4,r7,621c <memset+0x100>
    61e4:	1813883a 	mov	r9,r3
    61e8:	3811883a 	mov	r8,r7
    61ec:	010000c4 	movi	r4,3
    61f0:	49800015 	stw	r6,0(r9)
    61f4:	423fff04 	addi	r8,r8,-4
    61f8:	4a400104 	addi	r9,r9,4
    61fc:	223ffc36 	bltu	r4,r8,61f0 <memset+0xd4>
    6200:	393fff04 	addi	r4,r7,-4
    6204:	2008d0ba 	srli	r4,r4,2
    6208:	39c000cc 	andi	r7,r7,3
    620c:	21000044 	addi	r4,r4,1
    6210:	2109883a 	add	r4,r4,r4
    6214:	2109883a 	add	r4,r4,r4
    6218:	1907883a 	add	r3,r3,r4
    621c:	38000526 	beq	r7,zero,6234 <memset+0x118>
    6220:	19cf883a 	add	r7,r3,r7
    6224:	19400005 	stb	r5,0(r3)
    6228:	18c00044 	addi	r3,r3,1
    622c:	38fffd1e 	bne	r7,r3,6224 <memset+0x108>
    6230:	f800283a 	ret
    6234:	f800283a 	ret
    6238:	2007883a 	mov	r3,r4
    623c:	300f883a 	mov	r7,r6
    6240:	003fc706 	br	6160 <memset+0x44>

00006244 <_Balloc>:
    6244:	20801317 	ldw	r2,76(r4)
    6248:	defffc04 	addi	sp,sp,-16
    624c:	dc400115 	stw	r17,4(sp)
    6250:	dc000015 	stw	r16,0(sp)
    6254:	dfc00315 	stw	ra,12(sp)
    6258:	dc800215 	stw	r18,8(sp)
    625c:	2023883a 	mov	r17,r4
    6260:	2821883a 	mov	r16,r5
    6264:	10000f26 	beq	r2,zero,62a4 <_Balloc+0x60>
    6268:	8407883a 	add	r3,r16,r16
    626c:	18c7883a 	add	r3,r3,r3
    6270:	10c7883a 	add	r3,r2,r3
    6274:	18800017 	ldw	r2,0(r3)
    6278:	10001126 	beq	r2,zero,62c0 <_Balloc+0x7c>
    627c:	11000017 	ldw	r4,0(r2)
    6280:	19000015 	stw	r4,0(r3)
    6284:	10000415 	stw	zero,16(r2)
    6288:	10000315 	stw	zero,12(r2)
    628c:	dfc00317 	ldw	ra,12(sp)
    6290:	dc800217 	ldw	r18,8(sp)
    6294:	dc400117 	ldw	r17,4(sp)
    6298:	dc000017 	ldw	r16,0(sp)
    629c:	dec00404 	addi	sp,sp,16
    62a0:	f800283a 	ret
    62a4:	01800844 	movi	r6,33
    62a8:	01400104 	movi	r5,4
    62ac:	00091800 	call	9180 <_calloc_r>
    62b0:	88801315 	stw	r2,76(r17)
    62b4:	103fec1e 	bne	r2,zero,6268 <_Balloc+0x24>
    62b8:	0005883a 	mov	r2,zero
    62bc:	003ff306 	br	628c <_Balloc+0x48>
    62c0:	01400044 	movi	r5,1
    62c4:	2c24983a 	sll	r18,r5,r16
    62c8:	8809883a 	mov	r4,r17
    62cc:	91800144 	addi	r6,r18,5
    62d0:	318d883a 	add	r6,r6,r6
    62d4:	318d883a 	add	r6,r6,r6
    62d8:	00091800 	call	9180 <_calloc_r>
    62dc:	103ff626 	beq	r2,zero,62b8 <_Balloc+0x74>
    62e0:	14000115 	stw	r16,4(r2)
    62e4:	14800215 	stw	r18,8(r2)
    62e8:	003fe606 	br	6284 <_Balloc+0x40>

000062ec <_Bfree>:
    62ec:	28000826 	beq	r5,zero,6310 <_Bfree+0x24>
    62f0:	28c00117 	ldw	r3,4(r5)
    62f4:	20801317 	ldw	r2,76(r4)
    62f8:	18c7883a 	add	r3,r3,r3
    62fc:	18c7883a 	add	r3,r3,r3
    6300:	10c5883a 	add	r2,r2,r3
    6304:	10c00017 	ldw	r3,0(r2)
    6308:	28c00015 	stw	r3,0(r5)
    630c:	11400015 	stw	r5,0(r2)
    6310:	f800283a 	ret

00006314 <__multadd>:
    6314:	defffa04 	addi	sp,sp,-24
    6318:	dc800315 	stw	r18,12(sp)
    631c:	dc400215 	stw	r17,8(sp)
    6320:	dc000115 	stw	r16,4(sp)
    6324:	2823883a 	mov	r17,r5
    6328:	2c000417 	ldw	r16,16(r5)
    632c:	dfc00515 	stw	ra,20(sp)
    6330:	dcc00415 	stw	r19,16(sp)
    6334:	2025883a 	mov	r18,r4
    6338:	29400504 	addi	r5,r5,20
    633c:	0011883a 	mov	r8,zero
    6340:	28c00017 	ldw	r3,0(r5)
    6344:	29400104 	addi	r5,r5,4
    6348:	42000044 	addi	r8,r8,1
    634c:	18bfffcc 	andi	r2,r3,65535
    6350:	1185383a 	mul	r2,r2,r6
    6354:	1806d43a 	srli	r3,r3,16
    6358:	11cf883a 	add	r7,r2,r7
    635c:	3808d43a 	srli	r4,r7,16
    6360:	1987383a 	mul	r3,r3,r6
    6364:	38bfffcc 	andi	r2,r7,65535
    6368:	1907883a 	add	r3,r3,r4
    636c:	1808943a 	slli	r4,r3,16
    6370:	180ed43a 	srli	r7,r3,16
    6374:	2085883a 	add	r2,r4,r2
    6378:	28bfff15 	stw	r2,-4(r5)
    637c:	443ff016 	blt	r8,r16,6340 <__multadd+0x2c>
    6380:	38000926 	beq	r7,zero,63a8 <__multadd+0x94>
    6384:	88800217 	ldw	r2,8(r17)
    6388:	80800f0e 	bge	r16,r2,63c8 <__multadd+0xb4>
    638c:	80800144 	addi	r2,r16,5
    6390:	1085883a 	add	r2,r2,r2
    6394:	1085883a 	add	r2,r2,r2
    6398:	8885883a 	add	r2,r17,r2
    639c:	11c00015 	stw	r7,0(r2)
    63a0:	84000044 	addi	r16,r16,1
    63a4:	8c000415 	stw	r16,16(r17)
    63a8:	8805883a 	mov	r2,r17
    63ac:	dfc00517 	ldw	ra,20(sp)
    63b0:	dcc00417 	ldw	r19,16(sp)
    63b4:	dc800317 	ldw	r18,12(sp)
    63b8:	dc400217 	ldw	r17,8(sp)
    63bc:	dc000117 	ldw	r16,4(sp)
    63c0:	dec00604 	addi	sp,sp,24
    63c4:	f800283a 	ret
    63c8:	89400117 	ldw	r5,4(r17)
    63cc:	9009883a 	mov	r4,r18
    63d0:	d9c00015 	stw	r7,0(sp)
    63d4:	29400044 	addi	r5,r5,1
    63d8:	00062440 	call	6244 <_Balloc>
    63dc:	89800417 	ldw	r6,16(r17)
    63e0:	89400304 	addi	r5,r17,12
    63e4:	11000304 	addi	r4,r2,12
    63e8:	31800084 	addi	r6,r6,2
    63ec:	318d883a 	add	r6,r6,r6
    63f0:	318d883a 	add	r6,r6,r6
    63f4:	1027883a 	mov	r19,r2
    63f8:	0005e780 	call	5e78 <memcpy>
    63fc:	d9c00017 	ldw	r7,0(sp)
    6400:	88000a26 	beq	r17,zero,642c <__multadd+0x118>
    6404:	88c00117 	ldw	r3,4(r17)
    6408:	90801317 	ldw	r2,76(r18)
    640c:	18c7883a 	add	r3,r3,r3
    6410:	18c7883a 	add	r3,r3,r3
    6414:	10c5883a 	add	r2,r2,r3
    6418:	10c00017 	ldw	r3,0(r2)
    641c:	88c00015 	stw	r3,0(r17)
    6420:	14400015 	stw	r17,0(r2)
    6424:	9823883a 	mov	r17,r19
    6428:	003fd806 	br	638c <__multadd+0x78>
    642c:	9823883a 	mov	r17,r19
    6430:	003fd606 	br	638c <__multadd+0x78>

00006434 <__s2b>:
    6434:	defff904 	addi	sp,sp,-28
    6438:	dc400115 	stw	r17,4(sp)
    643c:	dc000015 	stw	r16,0(sp)
    6440:	2023883a 	mov	r17,r4
    6444:	2821883a 	mov	r16,r5
    6448:	39000204 	addi	r4,r7,8
    644c:	01400244 	movi	r5,9
    6450:	dcc00315 	stw	r19,12(sp)
    6454:	dc800215 	stw	r18,8(sp)
    6458:	dfc00615 	stw	ra,24(sp)
    645c:	dd400515 	stw	r21,20(sp)
    6460:	dd000415 	stw	r20,16(sp)
    6464:	3825883a 	mov	r18,r7
    6468:	3027883a 	mov	r19,r6
    646c:	000a4b00 	call	a4b0 <__divsi3>
    6470:	00c00044 	movi	r3,1
    6474:	000b883a 	mov	r5,zero
    6478:	1880030e 	bge	r3,r2,6488 <__s2b+0x54>
    647c:	18c7883a 	add	r3,r3,r3
    6480:	29400044 	addi	r5,r5,1
    6484:	18bffd16 	blt	r3,r2,647c <__s2b+0x48>
    6488:	8809883a 	mov	r4,r17
    648c:	00062440 	call	6244 <_Balloc>
    6490:	d8c00717 	ldw	r3,28(sp)
    6494:	10c00515 	stw	r3,20(r2)
    6498:	00c00044 	movi	r3,1
    649c:	10c00415 	stw	r3,16(r2)
    64a0:	00c00244 	movi	r3,9
    64a4:	1cc0210e 	bge	r3,r19,652c <__s2b+0xf8>
    64a8:	80eb883a 	add	r21,r16,r3
    64ac:	a829883a 	mov	r20,r21
    64b0:	84e1883a 	add	r16,r16,r19
    64b4:	a1c00007 	ldb	r7,0(r20)
    64b8:	01800284 	movi	r6,10
    64bc:	a5000044 	addi	r20,r20,1
    64c0:	100b883a 	mov	r5,r2
    64c4:	39fff404 	addi	r7,r7,-48
    64c8:	8809883a 	mov	r4,r17
    64cc:	00063140 	call	6314 <__multadd>
    64d0:	a43ff81e 	bne	r20,r16,64b4 <__s2b+0x80>
    64d4:	ace1883a 	add	r16,r21,r19
    64d8:	843ffe04 	addi	r16,r16,-8
    64dc:	9c800a0e 	bge	r19,r18,6508 <__s2b+0xd4>
    64e0:	94e5c83a 	sub	r18,r18,r19
    64e4:	84a5883a 	add	r18,r16,r18
    64e8:	81c00007 	ldb	r7,0(r16)
    64ec:	01800284 	movi	r6,10
    64f0:	84000044 	addi	r16,r16,1
    64f4:	100b883a 	mov	r5,r2
    64f8:	39fff404 	addi	r7,r7,-48
    64fc:	8809883a 	mov	r4,r17
    6500:	00063140 	call	6314 <__multadd>
    6504:	84bff81e 	bne	r16,r18,64e8 <__s2b+0xb4>
    6508:	dfc00617 	ldw	ra,24(sp)
    650c:	dd400517 	ldw	r21,20(sp)
    6510:	dd000417 	ldw	r20,16(sp)
    6514:	dcc00317 	ldw	r19,12(sp)
    6518:	dc800217 	ldw	r18,8(sp)
    651c:	dc400117 	ldw	r17,4(sp)
    6520:	dc000017 	ldw	r16,0(sp)
    6524:	dec00704 	addi	sp,sp,28
    6528:	f800283a 	ret
    652c:	84000284 	addi	r16,r16,10
    6530:	1827883a 	mov	r19,r3
    6534:	003fe906 	br	64dc <__s2b+0xa8>

00006538 <__hi0bits>:
    6538:	20bfffec 	andhi	r2,r4,65535
    653c:	1000141e 	bne	r2,zero,6590 <__hi0bits+0x58>
    6540:	2008943a 	slli	r4,r4,16
    6544:	00800404 	movi	r2,16
    6548:	20ffc02c 	andhi	r3,r4,65280
    654c:	1800021e 	bne	r3,zero,6558 <__hi0bits+0x20>
    6550:	2008923a 	slli	r4,r4,8
    6554:	10800204 	addi	r2,r2,8
    6558:	20fc002c 	andhi	r3,r4,61440
    655c:	1800021e 	bne	r3,zero,6568 <__hi0bits+0x30>
    6560:	2008913a 	slli	r4,r4,4
    6564:	10800104 	addi	r2,r2,4
    6568:	20f0002c 	andhi	r3,r4,49152
    656c:	1800031e 	bne	r3,zero,657c <__hi0bits+0x44>
    6570:	2109883a 	add	r4,r4,r4
    6574:	10800084 	addi	r2,r2,2
    6578:	2109883a 	add	r4,r4,r4
    657c:	20000316 	blt	r4,zero,658c <__hi0bits+0x54>
    6580:	2110002c 	andhi	r4,r4,16384
    6584:	2000041e 	bne	r4,zero,6598 <__hi0bits+0x60>
    6588:	00800804 	movi	r2,32
    658c:	f800283a 	ret
    6590:	0005883a 	mov	r2,zero
    6594:	003fec06 	br	6548 <__hi0bits+0x10>
    6598:	10800044 	addi	r2,r2,1
    659c:	f800283a 	ret

000065a0 <__lo0bits>:
    65a0:	20c00017 	ldw	r3,0(r4)
    65a4:	188001cc 	andi	r2,r3,7
    65a8:	10000826 	beq	r2,zero,65cc <__lo0bits+0x2c>
    65ac:	1880004c 	andi	r2,r3,1
    65b0:	1000211e 	bne	r2,zero,6638 <__lo0bits+0x98>
    65b4:	1880008c 	andi	r2,r3,2
    65b8:	1000211e 	bne	r2,zero,6640 <__lo0bits+0xa0>
    65bc:	1806d0ba 	srli	r3,r3,2
    65c0:	00800084 	movi	r2,2
    65c4:	20c00015 	stw	r3,0(r4)
    65c8:	f800283a 	ret
    65cc:	18bfffcc 	andi	r2,r3,65535
    65d0:	10001326 	beq	r2,zero,6620 <__lo0bits+0x80>
    65d4:	0005883a 	mov	r2,zero
    65d8:	19403fcc 	andi	r5,r3,255
    65dc:	2800021e 	bne	r5,zero,65e8 <__lo0bits+0x48>
    65e0:	1806d23a 	srli	r3,r3,8
    65e4:	10800204 	addi	r2,r2,8
    65e8:	194003cc 	andi	r5,r3,15
    65ec:	2800021e 	bne	r5,zero,65f8 <__lo0bits+0x58>
    65f0:	1806d13a 	srli	r3,r3,4
    65f4:	10800104 	addi	r2,r2,4
    65f8:	194000cc 	andi	r5,r3,3
    65fc:	2800021e 	bne	r5,zero,6608 <__lo0bits+0x68>
    6600:	1806d0ba 	srli	r3,r3,2
    6604:	10800084 	addi	r2,r2,2
    6608:	1940004c 	andi	r5,r3,1
    660c:	2800081e 	bne	r5,zero,6630 <__lo0bits+0x90>
    6610:	1806d07a 	srli	r3,r3,1
    6614:	1800051e 	bne	r3,zero,662c <__lo0bits+0x8c>
    6618:	00800804 	movi	r2,32
    661c:	f800283a 	ret
    6620:	1806d43a 	srli	r3,r3,16
    6624:	00800404 	movi	r2,16
    6628:	003feb06 	br	65d8 <__lo0bits+0x38>
    662c:	10800044 	addi	r2,r2,1
    6630:	20c00015 	stw	r3,0(r4)
    6634:	f800283a 	ret
    6638:	0005883a 	mov	r2,zero
    663c:	f800283a 	ret
    6640:	1806d07a 	srli	r3,r3,1
    6644:	00800044 	movi	r2,1
    6648:	20c00015 	stw	r3,0(r4)
    664c:	f800283a 	ret

00006650 <__i2b>:
    6650:	defffd04 	addi	sp,sp,-12
    6654:	dc000015 	stw	r16,0(sp)
    6658:	04000044 	movi	r16,1
    665c:	dc400115 	stw	r17,4(sp)
    6660:	2823883a 	mov	r17,r5
    6664:	800b883a 	mov	r5,r16
    6668:	dfc00215 	stw	ra,8(sp)
    666c:	00062440 	call	6244 <_Balloc>
    6670:	14400515 	stw	r17,20(r2)
    6674:	14000415 	stw	r16,16(r2)
    6678:	dfc00217 	ldw	ra,8(sp)
    667c:	dc400117 	ldw	r17,4(sp)
    6680:	dc000017 	ldw	r16,0(sp)
    6684:	dec00304 	addi	sp,sp,12
    6688:	f800283a 	ret

0000668c <__multiply>:
    668c:	defffa04 	addi	sp,sp,-24
    6690:	dcc00315 	stw	r19,12(sp)
    6694:	dc800215 	stw	r18,8(sp)
    6698:	34c00417 	ldw	r19,16(r6)
    669c:	2c800417 	ldw	r18,16(r5)
    66a0:	dd000415 	stw	r20,16(sp)
    66a4:	dc400115 	stw	r17,4(sp)
    66a8:	dfc00515 	stw	ra,20(sp)
    66ac:	dc000015 	stw	r16,0(sp)
    66b0:	2829883a 	mov	r20,r5
    66b4:	3023883a 	mov	r17,r6
    66b8:	94c0050e 	bge	r18,r19,66d0 <__multiply+0x44>
    66bc:	9007883a 	mov	r3,r18
    66c0:	3029883a 	mov	r20,r6
    66c4:	9825883a 	mov	r18,r19
    66c8:	2823883a 	mov	r17,r5
    66cc:	1827883a 	mov	r19,r3
    66d0:	a0800217 	ldw	r2,8(r20)
    66d4:	94e1883a 	add	r16,r18,r19
    66d8:	a1400117 	ldw	r5,4(r20)
    66dc:	1400010e 	bge	r2,r16,66e4 <__multiply+0x58>
    66e0:	29400044 	addi	r5,r5,1
    66e4:	00062440 	call	6244 <_Balloc>
    66e8:	8415883a 	add	r10,r16,r16
    66ec:	12c00504 	addi	r11,r2,20
    66f0:	5295883a 	add	r10,r10,r10
    66f4:	5a95883a 	add	r10,r11,r10
    66f8:	5807883a 	mov	r3,r11
    66fc:	5a80032e 	bgeu	r11,r10,670c <__multiply+0x80>
    6700:	18000015 	stw	zero,0(r3)
    6704:	18c00104 	addi	r3,r3,4
    6708:	1abffd36 	bltu	r3,r10,6700 <__multiply+0x74>
    670c:	9ce7883a 	add	r19,r19,r19
    6710:	94a5883a 	add	r18,r18,r18
    6714:	89800504 	addi	r6,r17,20
    6718:	9ce7883a 	add	r19,r19,r19
    671c:	a3400504 	addi	r13,r20,20
    6720:	94a5883a 	add	r18,r18,r18
    6724:	34d9883a 	add	r12,r6,r19
    6728:	6c93883a 	add	r9,r13,r18
    672c:	3300422e 	bgeu	r6,r12,6838 <__multiply+0x1ac>
    6730:	37c00017 	ldw	ra,0(r6)
    6734:	fbffffcc 	andi	r15,ra,65535
    6738:	78001b26 	beq	r15,zero,67a8 <__multiply+0x11c>
    673c:	5811883a 	mov	r8,r11
    6740:	681d883a 	mov	r14,r13
    6744:	000f883a 	mov	r7,zero
    6748:	71000017 	ldw	r4,0(r14)
    674c:	40c00017 	ldw	r3,0(r8)
    6750:	73800104 	addi	r14,r14,4
    6754:	217fffcc 	andi	r5,r4,65535
    6758:	2bcb383a 	mul	r5,r5,r15
    675c:	2008d43a 	srli	r4,r4,16
    6760:	1c7fffcc 	andi	r17,r3,65535
    6764:	2c4b883a 	add	r5,r5,r17
    6768:	29cb883a 	add	r5,r5,r7
    676c:	23c9383a 	mul	r4,r4,r15
    6770:	1806d43a 	srli	r3,r3,16
    6774:	280ed43a 	srli	r7,r5,16
    6778:	297fffcc 	andi	r5,r5,65535
    677c:	20c7883a 	add	r3,r4,r3
    6780:	19c7883a 	add	r3,r3,r7
    6784:	1808943a 	slli	r4,r3,16
    6788:	4023883a 	mov	r17,r8
    678c:	180ed43a 	srli	r7,r3,16
    6790:	214ab03a 	or	r5,r4,r5
    6794:	41400015 	stw	r5,0(r8)
    6798:	42000104 	addi	r8,r8,4
    679c:	727fea36 	bltu	r14,r9,6748 <__multiply+0xbc>
    67a0:	89c00115 	stw	r7,4(r17)
    67a4:	37c00017 	ldw	ra,0(r6)
    67a8:	f83ed43a 	srli	ra,ra,16
    67ac:	f8001f26 	beq	ra,zero,682c <__multiply+0x1a0>
    67b0:	58c00017 	ldw	r3,0(r11)
    67b4:	681d883a 	mov	r14,r13
    67b8:	581f883a 	mov	r15,r11
    67bc:	1811883a 	mov	r8,r3
    67c0:	5825883a 	mov	r18,r11
    67c4:	000f883a 	mov	r7,zero
    67c8:	00000106 	br	67d0 <__multiply+0x144>
    67cc:	8825883a 	mov	r18,r17
    67d0:	7140000b 	ldhu	r5,0(r14)
    67d4:	4010d43a 	srli	r8,r8,16
    67d8:	193fffcc 	andi	r4,r3,65535
    67dc:	2fcb383a 	mul	r5,r5,ra
    67e0:	7bc00104 	addi	r15,r15,4
    67e4:	73800104 	addi	r14,r14,4
    67e8:	2a0b883a 	add	r5,r5,r8
    67ec:	29cb883a 	add	r5,r5,r7
    67f0:	2806943a 	slli	r3,r5,16
    67f4:	94400104 	addi	r17,r18,4
    67f8:	280ad43a 	srli	r5,r5,16
    67fc:	1908b03a 	or	r4,r3,r4
    6800:	793fff15 	stw	r4,-4(r15)
    6804:	70ffff17 	ldw	r3,-4(r14)
    6808:	8a000017 	ldw	r8,0(r17)
    680c:	1806d43a 	srli	r3,r3,16
    6810:	413fffcc 	andi	r4,r8,65535
    6814:	1fc7383a 	mul	r3,r3,ra
    6818:	1907883a 	add	r3,r3,r4
    681c:	1947883a 	add	r3,r3,r5
    6820:	180ed43a 	srli	r7,r3,16
    6824:	727fe936 	bltu	r14,r9,67cc <__multiply+0x140>
    6828:	90c00115 	stw	r3,4(r18)
    682c:	31800104 	addi	r6,r6,4
    6830:	5ac00104 	addi	r11,r11,4
    6834:	333fbe36 	bltu	r6,r12,6730 <__multiply+0xa4>
    6838:	0400090e 	bge	zero,r16,6860 <__multiply+0x1d4>
    683c:	50ffff17 	ldw	r3,-4(r10)
    6840:	52bfff04 	addi	r10,r10,-4
    6844:	18000326 	beq	r3,zero,6854 <__multiply+0x1c8>
    6848:	00000506 	br	6860 <__multiply+0x1d4>
    684c:	50c00017 	ldw	r3,0(r10)
    6850:	1800031e 	bne	r3,zero,6860 <__multiply+0x1d4>
    6854:	843fffc4 	addi	r16,r16,-1
    6858:	52bfff04 	addi	r10,r10,-4
    685c:	803ffb1e 	bne	r16,zero,684c <__multiply+0x1c0>
    6860:	14000415 	stw	r16,16(r2)
    6864:	dfc00517 	ldw	ra,20(sp)
    6868:	dd000417 	ldw	r20,16(sp)
    686c:	dcc00317 	ldw	r19,12(sp)
    6870:	dc800217 	ldw	r18,8(sp)
    6874:	dc400117 	ldw	r17,4(sp)
    6878:	dc000017 	ldw	r16,0(sp)
    687c:	dec00604 	addi	sp,sp,24
    6880:	f800283a 	ret

00006884 <__pow5mult>:
    6884:	defffa04 	addi	sp,sp,-24
    6888:	dcc00315 	stw	r19,12(sp)
    688c:	dc000015 	stw	r16,0(sp)
    6890:	dfc00515 	stw	ra,20(sp)
    6894:	dd000415 	stw	r20,16(sp)
    6898:	dc800215 	stw	r18,8(sp)
    689c:	dc400115 	stw	r17,4(sp)
    68a0:	308000cc 	andi	r2,r6,3
    68a4:	3021883a 	mov	r16,r6
    68a8:	2027883a 	mov	r19,r4
    68ac:	10002f1e 	bne	r2,zero,696c <__pow5mult+0xe8>
    68b0:	2825883a 	mov	r18,r5
    68b4:	8021d0ba 	srai	r16,r16,2
    68b8:	80001a26 	beq	r16,zero,6924 <__pow5mult+0xa0>
    68bc:	9c401217 	ldw	r17,72(r19)
    68c0:	8800061e 	bne	r17,zero,68dc <__pow5mult+0x58>
    68c4:	00003406 	br	6998 <__pow5mult+0x114>
    68c8:	8021d07a 	srai	r16,r16,1
    68cc:	80001526 	beq	r16,zero,6924 <__pow5mult+0xa0>
    68d0:	88800017 	ldw	r2,0(r17)
    68d4:	10001c26 	beq	r2,zero,6948 <__pow5mult+0xc4>
    68d8:	1023883a 	mov	r17,r2
    68dc:	8080004c 	andi	r2,r16,1
    68e0:	103ff926 	beq	r2,zero,68c8 <__pow5mult+0x44>
    68e4:	880d883a 	mov	r6,r17
    68e8:	900b883a 	mov	r5,r18
    68ec:	9809883a 	mov	r4,r19
    68f0:	000668c0 	call	668c <__multiply>
    68f4:	90001b26 	beq	r18,zero,6964 <__pow5mult+0xe0>
    68f8:	91000117 	ldw	r4,4(r18)
    68fc:	98c01317 	ldw	r3,76(r19)
    6900:	8021d07a 	srai	r16,r16,1
    6904:	2109883a 	add	r4,r4,r4
    6908:	2109883a 	add	r4,r4,r4
    690c:	1907883a 	add	r3,r3,r4
    6910:	19000017 	ldw	r4,0(r3)
    6914:	91000015 	stw	r4,0(r18)
    6918:	1c800015 	stw	r18,0(r3)
    691c:	1025883a 	mov	r18,r2
    6920:	803feb1e 	bne	r16,zero,68d0 <__pow5mult+0x4c>
    6924:	9005883a 	mov	r2,r18
    6928:	dfc00517 	ldw	ra,20(sp)
    692c:	dd000417 	ldw	r20,16(sp)
    6930:	dcc00317 	ldw	r19,12(sp)
    6934:	dc800217 	ldw	r18,8(sp)
    6938:	dc400117 	ldw	r17,4(sp)
    693c:	dc000017 	ldw	r16,0(sp)
    6940:	dec00604 	addi	sp,sp,24
    6944:	f800283a 	ret
    6948:	880d883a 	mov	r6,r17
    694c:	880b883a 	mov	r5,r17
    6950:	9809883a 	mov	r4,r19
    6954:	000668c0 	call	668c <__multiply>
    6958:	88800015 	stw	r2,0(r17)
    695c:	10000015 	stw	zero,0(r2)
    6960:	003fdd06 	br	68d8 <__pow5mult+0x54>
    6964:	1025883a 	mov	r18,r2
    6968:	003fd706 	br	68c8 <__pow5mult+0x44>
    696c:	10bfffc4 	addi	r2,r2,-1
    6970:	1085883a 	add	r2,r2,r2
    6974:	00c00074 	movhi	r3,1
    6978:	18fe3904 	addi	r3,r3,-1820
    697c:	1085883a 	add	r2,r2,r2
    6980:	1885883a 	add	r2,r3,r2
    6984:	11800017 	ldw	r6,0(r2)
    6988:	000f883a 	mov	r7,zero
    698c:	00063140 	call	6314 <__multadd>
    6990:	1025883a 	mov	r18,r2
    6994:	003fc706 	br	68b4 <__pow5mult+0x30>
    6998:	05000044 	movi	r20,1
    699c:	a00b883a 	mov	r5,r20
    69a0:	9809883a 	mov	r4,r19
    69a4:	00062440 	call	6244 <_Balloc>
    69a8:	1023883a 	mov	r17,r2
    69ac:	00809c44 	movi	r2,625
    69b0:	88800515 	stw	r2,20(r17)
    69b4:	8d000415 	stw	r20,16(r17)
    69b8:	9c401215 	stw	r17,72(r19)
    69bc:	88000015 	stw	zero,0(r17)
    69c0:	003fc606 	br	68dc <__pow5mult+0x58>

000069c4 <__lshift>:
    69c4:	defff904 	addi	sp,sp,-28
    69c8:	dd400515 	stw	r21,20(sp)
    69cc:	dcc00315 	stw	r19,12(sp)
    69d0:	302bd17a 	srai	r21,r6,5
    69d4:	2cc00417 	ldw	r19,16(r5)
    69d8:	28800217 	ldw	r2,8(r5)
    69dc:	dd000415 	stw	r20,16(sp)
    69e0:	ace7883a 	add	r19,r21,r19
    69e4:	dc800215 	stw	r18,8(sp)
    69e8:	dc400115 	stw	r17,4(sp)
    69ec:	dc000015 	stw	r16,0(sp)
    69f0:	dfc00615 	stw	ra,24(sp)
    69f4:	9c000044 	addi	r16,r19,1
    69f8:	2823883a 	mov	r17,r5
    69fc:	3029883a 	mov	r20,r6
    6a00:	2025883a 	mov	r18,r4
    6a04:	29400117 	ldw	r5,4(r5)
    6a08:	1400030e 	bge	r2,r16,6a18 <__lshift+0x54>
    6a0c:	1085883a 	add	r2,r2,r2
    6a10:	29400044 	addi	r5,r5,1
    6a14:	143ffd16 	blt	r2,r16,6a0c <__lshift+0x48>
    6a18:	9009883a 	mov	r4,r18
    6a1c:	00062440 	call	6244 <_Balloc>
    6a20:	10c00504 	addi	r3,r2,20
    6a24:	0540070e 	bge	zero,r21,6a44 <__lshift+0x80>
    6a28:	ad6b883a 	add	r21,r21,r21
    6a2c:	ad6b883a 	add	r21,r21,r21
    6a30:	1809883a 	mov	r4,r3
    6a34:	1d47883a 	add	r3,r3,r21
    6a38:	20000015 	stw	zero,0(r4)
    6a3c:	21000104 	addi	r4,r4,4
    6a40:	193ffd1e 	bne	r3,r4,6a38 <__lshift+0x74>
    6a44:	8a000417 	ldw	r8,16(r17)
    6a48:	89000504 	addi	r4,r17,20
    6a4c:	a18007cc 	andi	r6,r20,31
    6a50:	4211883a 	add	r8,r8,r8
    6a54:	4211883a 	add	r8,r8,r8
    6a58:	2211883a 	add	r8,r4,r8
    6a5c:	30002326 	beq	r6,zero,6aec <__lshift+0x128>
    6a60:	02400804 	movi	r9,32
    6a64:	4993c83a 	sub	r9,r9,r6
    6a68:	000b883a 	mov	r5,zero
    6a6c:	21c00017 	ldw	r7,0(r4)
    6a70:	1815883a 	mov	r10,r3
    6a74:	18c00104 	addi	r3,r3,4
    6a78:	398e983a 	sll	r7,r7,r6
    6a7c:	21000104 	addi	r4,r4,4
    6a80:	394ab03a 	or	r5,r7,r5
    6a84:	197fff15 	stw	r5,-4(r3)
    6a88:	217fff17 	ldw	r5,-4(r4)
    6a8c:	2a4ad83a 	srl	r5,r5,r9
    6a90:	223ff636 	bltu	r4,r8,6a6c <__lshift+0xa8>
    6a94:	51400115 	stw	r5,4(r10)
    6a98:	28001a1e 	bne	r5,zero,6b04 <__lshift+0x140>
    6a9c:	843fffc4 	addi	r16,r16,-1
    6aa0:	14000415 	stw	r16,16(r2)
    6aa4:	88000826 	beq	r17,zero,6ac8 <__lshift+0x104>
    6aa8:	89000117 	ldw	r4,4(r17)
    6aac:	90c01317 	ldw	r3,76(r18)
    6ab0:	2109883a 	add	r4,r4,r4
    6ab4:	2109883a 	add	r4,r4,r4
    6ab8:	1907883a 	add	r3,r3,r4
    6abc:	19000017 	ldw	r4,0(r3)
    6ac0:	89000015 	stw	r4,0(r17)
    6ac4:	1c400015 	stw	r17,0(r3)
    6ac8:	dfc00617 	ldw	ra,24(sp)
    6acc:	dd400517 	ldw	r21,20(sp)
    6ad0:	dd000417 	ldw	r20,16(sp)
    6ad4:	dcc00317 	ldw	r19,12(sp)
    6ad8:	dc800217 	ldw	r18,8(sp)
    6adc:	dc400117 	ldw	r17,4(sp)
    6ae0:	dc000017 	ldw	r16,0(sp)
    6ae4:	dec00704 	addi	sp,sp,28
    6ae8:	f800283a 	ret
    6aec:	21400017 	ldw	r5,0(r4)
    6af0:	18c00104 	addi	r3,r3,4
    6af4:	21000104 	addi	r4,r4,4
    6af8:	197fff15 	stw	r5,-4(r3)
    6afc:	223ffb36 	bltu	r4,r8,6aec <__lshift+0x128>
    6b00:	003fe606 	br	6a9c <__lshift+0xd8>
    6b04:	9c000084 	addi	r16,r19,2
    6b08:	003fe406 	br	6a9c <__lshift+0xd8>

00006b0c <__mcmp>:
    6b0c:	20800417 	ldw	r2,16(r4)
    6b10:	28c00417 	ldw	r3,16(r5)
    6b14:	10c5c83a 	sub	r2,r2,r3
    6b18:	1000111e 	bne	r2,zero,6b60 <__mcmp+0x54>
    6b1c:	18c7883a 	add	r3,r3,r3
    6b20:	18c7883a 	add	r3,r3,r3
    6b24:	21000504 	addi	r4,r4,20
    6b28:	29400504 	addi	r5,r5,20
    6b2c:	20c5883a 	add	r2,r4,r3
    6b30:	28cb883a 	add	r5,r5,r3
    6b34:	00000106 	br	6b3c <__mcmp+0x30>
    6b38:	20800a2e 	bgeu	r4,r2,6b64 <__mcmp+0x58>
    6b3c:	10bfff04 	addi	r2,r2,-4
    6b40:	297fff04 	addi	r5,r5,-4
    6b44:	11800017 	ldw	r6,0(r2)
    6b48:	28c00017 	ldw	r3,0(r5)
    6b4c:	30fffa26 	beq	r6,r3,6b38 <__mcmp+0x2c>
    6b50:	30c00236 	bltu	r6,r3,6b5c <__mcmp+0x50>
    6b54:	00800044 	movi	r2,1
    6b58:	f800283a 	ret
    6b5c:	00bfffc4 	movi	r2,-1
    6b60:	f800283a 	ret
    6b64:	0005883a 	mov	r2,zero
    6b68:	f800283a 	ret

00006b6c <__mdiff>:
    6b6c:	28c00417 	ldw	r3,16(r5)
    6b70:	30800417 	ldw	r2,16(r6)
    6b74:	defffa04 	addi	sp,sp,-24
    6b78:	dcc00315 	stw	r19,12(sp)
    6b7c:	dc800215 	stw	r18,8(sp)
    6b80:	dfc00515 	stw	ra,20(sp)
    6b84:	dd000415 	stw	r20,16(sp)
    6b88:	dc400115 	stw	r17,4(sp)
    6b8c:	dc000015 	stw	r16,0(sp)
    6b90:	1887c83a 	sub	r3,r3,r2
    6b94:	2825883a 	mov	r18,r5
    6b98:	3027883a 	mov	r19,r6
    6b9c:	1800141e 	bne	r3,zero,6bf0 <__mdiff+0x84>
    6ba0:	1085883a 	add	r2,r2,r2
    6ba4:	1085883a 	add	r2,r2,r2
    6ba8:	2a000504 	addi	r8,r5,20
    6bac:	34000504 	addi	r16,r6,20
    6bb0:	4087883a 	add	r3,r8,r2
    6bb4:	8085883a 	add	r2,r16,r2
    6bb8:	00000106 	br	6bc0 <__mdiff+0x54>
    6bbc:	40c0592e 	bgeu	r8,r3,6d24 <__mdiff+0x1b8>
    6bc0:	18ffff04 	addi	r3,r3,-4
    6bc4:	10bfff04 	addi	r2,r2,-4
    6bc8:	19c00017 	ldw	r7,0(r3)
    6bcc:	11400017 	ldw	r5,0(r2)
    6bd0:	397ffa26 	beq	r7,r5,6bbc <__mdiff+0x50>
    6bd4:	3940592e 	bgeu	r7,r5,6d3c <__mdiff+0x1d0>
    6bd8:	9005883a 	mov	r2,r18
    6bdc:	4023883a 	mov	r17,r8
    6be0:	9825883a 	mov	r18,r19
    6be4:	05000044 	movi	r20,1
    6be8:	1027883a 	mov	r19,r2
    6bec:	00000406 	br	6c00 <__mdiff+0x94>
    6bf0:	18005616 	blt	r3,zero,6d4c <__mdiff+0x1e0>
    6bf4:	34400504 	addi	r17,r6,20
    6bf8:	2c000504 	addi	r16,r5,20
    6bfc:	0029883a 	mov	r20,zero
    6c00:	91400117 	ldw	r5,4(r18)
    6c04:	00062440 	call	6244 <_Balloc>
    6c08:	92400417 	ldw	r9,16(r18)
    6c0c:	9b000417 	ldw	r12,16(r19)
    6c10:	12c00504 	addi	r11,r2,20
    6c14:	4a51883a 	add	r8,r9,r9
    6c18:	6319883a 	add	r12,r12,r12
    6c1c:	4211883a 	add	r8,r8,r8
    6c20:	6319883a 	add	r12,r12,r12
    6c24:	15000315 	stw	r20,12(r2)
    6c28:	8211883a 	add	r8,r16,r8
    6c2c:	8b19883a 	add	r12,r17,r12
    6c30:	0007883a 	mov	r3,zero
    6c34:	81400017 	ldw	r5,0(r16)
    6c38:	89c00017 	ldw	r7,0(r17)
    6c3c:	59800104 	addi	r6,r11,4
    6c40:	293fffcc 	andi	r4,r5,65535
    6c44:	20c7883a 	add	r3,r4,r3
    6c48:	393fffcc 	andi	r4,r7,65535
    6c4c:	1909c83a 	sub	r4,r3,r4
    6c50:	280ad43a 	srli	r5,r5,16
    6c54:	380ed43a 	srli	r7,r7,16
    6c58:	2007d43a 	srai	r3,r4,16
    6c5c:	213fffcc 	andi	r4,r4,65535
    6c60:	29cbc83a 	sub	r5,r5,r7
    6c64:	28c7883a 	add	r3,r5,r3
    6c68:	180a943a 	slli	r5,r3,16
    6c6c:	8c400104 	addi	r17,r17,4
    6c70:	84000104 	addi	r16,r16,4
    6c74:	2908b03a 	or	r4,r5,r4
    6c78:	59000015 	stw	r4,0(r11)
    6c7c:	1807d43a 	srai	r3,r3,16
    6c80:	3015883a 	mov	r10,r6
    6c84:	3017883a 	mov	r11,r6
    6c88:	8b3fea36 	bltu	r17,r12,6c34 <__mdiff+0xc8>
    6c8c:	8200162e 	bgeu	r16,r8,6ce8 <__mdiff+0x17c>
    6c90:	8017883a 	mov	r11,r16
    6c94:	59400017 	ldw	r5,0(r11)
    6c98:	31800104 	addi	r6,r6,4
    6c9c:	5ac00104 	addi	r11,r11,4
    6ca0:	293fffcc 	andi	r4,r5,65535
    6ca4:	20c7883a 	add	r3,r4,r3
    6ca8:	280ed43a 	srli	r7,r5,16
    6cac:	180bd43a 	srai	r5,r3,16
    6cb0:	193fffcc 	andi	r4,r3,65535
    6cb4:	3947883a 	add	r3,r7,r5
    6cb8:	180a943a 	slli	r5,r3,16
    6cbc:	1807d43a 	srai	r3,r3,16
    6cc0:	2908b03a 	or	r4,r5,r4
    6cc4:	313fff15 	stw	r4,-4(r6)
    6cc8:	5a3ff236 	bltu	r11,r8,6c94 <__mdiff+0x128>
    6ccc:	0406303a 	nor	r3,zero,r16
    6cd0:	1a07883a 	add	r3,r3,r8
    6cd4:	1806d0ba 	srli	r3,r3,2
    6cd8:	18c00044 	addi	r3,r3,1
    6cdc:	18c7883a 	add	r3,r3,r3
    6ce0:	18c7883a 	add	r3,r3,r3
    6ce4:	50d5883a 	add	r10,r10,r3
    6ce8:	50ffff04 	addi	r3,r10,-4
    6cec:	2000041e 	bne	r4,zero,6d00 <__mdiff+0x194>
    6cf0:	18ffff04 	addi	r3,r3,-4
    6cf4:	19000017 	ldw	r4,0(r3)
    6cf8:	4a7fffc4 	addi	r9,r9,-1
    6cfc:	203ffc26 	beq	r4,zero,6cf0 <__mdiff+0x184>
    6d00:	12400415 	stw	r9,16(r2)
    6d04:	dfc00517 	ldw	ra,20(sp)
    6d08:	dd000417 	ldw	r20,16(sp)
    6d0c:	dcc00317 	ldw	r19,12(sp)
    6d10:	dc800217 	ldw	r18,8(sp)
    6d14:	dc400117 	ldw	r17,4(sp)
    6d18:	dc000017 	ldw	r16,0(sp)
    6d1c:	dec00604 	addi	sp,sp,24
    6d20:	f800283a 	ret
    6d24:	000b883a 	mov	r5,zero
    6d28:	00062440 	call	6244 <_Balloc>
    6d2c:	00c00044 	movi	r3,1
    6d30:	10c00415 	stw	r3,16(r2)
    6d34:	10000515 	stw	zero,20(r2)
    6d38:	003ff206 	br	6d04 <__mdiff+0x198>
    6d3c:	8023883a 	mov	r17,r16
    6d40:	0029883a 	mov	r20,zero
    6d44:	4021883a 	mov	r16,r8
    6d48:	003fad06 	br	6c00 <__mdiff+0x94>
    6d4c:	9005883a 	mov	r2,r18
    6d50:	94400504 	addi	r17,r18,20
    6d54:	9c000504 	addi	r16,r19,20
    6d58:	9825883a 	mov	r18,r19
    6d5c:	05000044 	movi	r20,1
    6d60:	1027883a 	mov	r19,r2
    6d64:	003fa606 	br	6c00 <__mdiff+0x94>

00006d68 <__ulp>:
    6d68:	295ffc2c 	andhi	r5,r5,32752
    6d6c:	00bf3034 	movhi	r2,64704
    6d70:	2887883a 	add	r3,r5,r2
    6d74:	00c0020e 	bge	zero,r3,6d80 <__ulp+0x18>
    6d78:	0005883a 	mov	r2,zero
    6d7c:	f800283a 	ret
    6d80:	00c7c83a 	sub	r3,zero,r3
    6d84:	1807d53a 	srai	r3,r3,20
    6d88:	008004c4 	movi	r2,19
    6d8c:	10c00b0e 	bge	r2,r3,6dbc <__ulp+0x54>
    6d90:	18bffb04 	addi	r2,r3,-20
    6d94:	01000784 	movi	r4,30
    6d98:	0007883a 	mov	r3,zero
    6d9c:	20800516 	blt	r4,r2,6db4 <__ulp+0x4c>
    6da0:	010007c4 	movi	r4,31
    6da4:	2089c83a 	sub	r4,r4,r2
    6da8:	00800044 	movi	r2,1
    6dac:	1104983a 	sll	r2,r2,r4
    6db0:	f800283a 	ret
    6db4:	00800044 	movi	r2,1
    6db8:	f800283a 	ret
    6dbc:	01400234 	movhi	r5,8
    6dc0:	28c7d83a 	sra	r3,r5,r3
    6dc4:	0005883a 	mov	r2,zero
    6dc8:	f800283a 	ret

00006dcc <__b2d>:
    6dcc:	defffa04 	addi	sp,sp,-24
    6dd0:	dc000015 	stw	r16,0(sp)
    6dd4:	24000417 	ldw	r16,16(r4)
    6dd8:	dc400115 	stw	r17,4(sp)
    6ddc:	24400504 	addi	r17,r4,20
    6de0:	8421883a 	add	r16,r16,r16
    6de4:	8421883a 	add	r16,r16,r16
    6de8:	8c21883a 	add	r16,r17,r16
    6dec:	dc800215 	stw	r18,8(sp)
    6df0:	84bfff17 	ldw	r18,-4(r16)
    6df4:	dd000415 	stw	r20,16(sp)
    6df8:	dcc00315 	stw	r19,12(sp)
    6dfc:	9009883a 	mov	r4,r18
    6e00:	2829883a 	mov	r20,r5
    6e04:	dfc00515 	stw	ra,20(sp)
    6e08:	00065380 	call	6538 <__hi0bits>
    6e0c:	00c00804 	movi	r3,32
    6e10:	1889c83a 	sub	r4,r3,r2
    6e14:	a1000015 	stw	r4,0(r20)
    6e18:	01000284 	movi	r4,10
    6e1c:	84ffff04 	addi	r19,r16,-4
    6e20:	20801216 	blt	r4,r2,6e6c <__b2d+0xa0>
    6e24:	018002c4 	movi	r6,11
    6e28:	308dc83a 	sub	r6,r6,r2
    6e2c:	9186d83a 	srl	r3,r18,r6
    6e30:	18cffc34 	orhi	r3,r3,16368
    6e34:	8cc0212e 	bgeu	r17,r19,6ebc <__b2d+0xf0>
    6e38:	813ffe17 	ldw	r4,-8(r16)
    6e3c:	218cd83a 	srl	r6,r4,r6
    6e40:	10800544 	addi	r2,r2,21
    6e44:	9084983a 	sll	r2,r18,r2
    6e48:	1184b03a 	or	r2,r2,r6
    6e4c:	dfc00517 	ldw	ra,20(sp)
    6e50:	dd000417 	ldw	r20,16(sp)
    6e54:	dcc00317 	ldw	r19,12(sp)
    6e58:	dc800217 	ldw	r18,8(sp)
    6e5c:	dc400117 	ldw	r17,4(sp)
    6e60:	dc000017 	ldw	r16,0(sp)
    6e64:	dec00604 	addi	sp,sp,24
    6e68:	f800283a 	ret
    6e6c:	8cc00f2e 	bgeu	r17,r19,6eac <__b2d+0xe0>
    6e70:	117ffd44 	addi	r5,r2,-11
    6e74:	80bffe17 	ldw	r2,-8(r16)
    6e78:	28000e26 	beq	r5,zero,6eb4 <__b2d+0xe8>
    6e7c:	1949c83a 	sub	r4,r3,r5
    6e80:	9164983a 	sll	r18,r18,r5
    6e84:	1106d83a 	srl	r3,r2,r4
    6e88:	81bffe04 	addi	r6,r16,-8
    6e8c:	948ffc34 	orhi	r18,r18,16368
    6e90:	90c6b03a 	or	r3,r18,r3
    6e94:	89800e2e 	bgeu	r17,r6,6ed0 <__b2d+0x104>
    6e98:	81bffd17 	ldw	r6,-12(r16)
    6e9c:	1144983a 	sll	r2,r2,r5
    6ea0:	310ad83a 	srl	r5,r6,r4
    6ea4:	2884b03a 	or	r2,r5,r2
    6ea8:	003fe806 	br	6e4c <__b2d+0x80>
    6eac:	10bffd44 	addi	r2,r2,-11
    6eb0:	1000041e 	bne	r2,zero,6ec4 <__b2d+0xf8>
    6eb4:	90cffc34 	orhi	r3,r18,16368
    6eb8:	003fe406 	br	6e4c <__b2d+0x80>
    6ebc:	000d883a 	mov	r6,zero
    6ec0:	003fdf06 	br	6e40 <__b2d+0x74>
    6ec4:	90a4983a 	sll	r18,r18,r2
    6ec8:	0005883a 	mov	r2,zero
    6ecc:	003ff906 	br	6eb4 <__b2d+0xe8>
    6ed0:	1144983a 	sll	r2,r2,r5
    6ed4:	003fdd06 	br	6e4c <__b2d+0x80>

00006ed8 <__d2b>:
    6ed8:	defff804 	addi	sp,sp,-32
    6edc:	dc000215 	stw	r16,8(sp)
    6ee0:	3021883a 	mov	r16,r6
    6ee4:	dc400315 	stw	r17,12(sp)
    6ee8:	8022907a 	slli	r17,r16,1
    6eec:	dd000615 	stw	r20,24(sp)
    6ef0:	2829883a 	mov	r20,r5
    6ef4:	01400044 	movi	r5,1
    6ef8:	dcc00515 	stw	r19,20(sp)
    6efc:	dc800415 	stw	r18,16(sp)
    6f00:	dfc00715 	stw	ra,28(sp)
    6f04:	3825883a 	mov	r18,r7
    6f08:	8822d57a 	srli	r17,r17,21
    6f0c:	00062440 	call	6244 <_Balloc>
    6f10:	1027883a 	mov	r19,r2
    6f14:	00800434 	movhi	r2,16
    6f18:	10bfffc4 	addi	r2,r2,-1
    6f1c:	808c703a 	and	r6,r16,r2
    6f20:	88000126 	beq	r17,zero,6f28 <__d2b+0x50>
    6f24:	31800434 	orhi	r6,r6,16
    6f28:	d9800015 	stw	r6,0(sp)
    6f2c:	a0002426 	beq	r20,zero,6fc0 <__d2b+0xe8>
    6f30:	d9000104 	addi	r4,sp,4
    6f34:	dd000115 	stw	r20,4(sp)
    6f38:	00065a00 	call	65a0 <__lo0bits>
    6f3c:	d8c00017 	ldw	r3,0(sp)
    6f40:	10002f1e 	bne	r2,zero,7000 <__d2b+0x128>
    6f44:	d9000117 	ldw	r4,4(sp)
    6f48:	99000515 	stw	r4,20(r19)
    6f4c:	1821003a 	cmpeq	r16,r3,zero
    6f50:	01000084 	movi	r4,2
    6f54:	2421c83a 	sub	r16,r4,r16
    6f58:	98c00615 	stw	r3,24(r19)
    6f5c:	9c000415 	stw	r16,16(r19)
    6f60:	88001f1e 	bne	r17,zero,6fe0 <__d2b+0x108>
    6f64:	10bef384 	addi	r2,r2,-1074
    6f68:	90800015 	stw	r2,0(r18)
    6f6c:	00900034 	movhi	r2,16384
    6f70:	10bfffc4 	addi	r2,r2,-1
    6f74:	8085883a 	add	r2,r16,r2
    6f78:	1085883a 	add	r2,r2,r2
    6f7c:	1085883a 	add	r2,r2,r2
    6f80:	9885883a 	add	r2,r19,r2
    6f84:	11000517 	ldw	r4,20(r2)
    6f88:	8020917a 	slli	r16,r16,5
    6f8c:	00065380 	call	6538 <__hi0bits>
    6f90:	d8c00817 	ldw	r3,32(sp)
    6f94:	8085c83a 	sub	r2,r16,r2
    6f98:	18800015 	stw	r2,0(r3)
    6f9c:	9805883a 	mov	r2,r19
    6fa0:	dfc00717 	ldw	ra,28(sp)
    6fa4:	dd000617 	ldw	r20,24(sp)
    6fa8:	dcc00517 	ldw	r19,20(sp)
    6fac:	dc800417 	ldw	r18,16(sp)
    6fb0:	dc400317 	ldw	r17,12(sp)
    6fb4:	dc000217 	ldw	r16,8(sp)
    6fb8:	dec00804 	addi	sp,sp,32
    6fbc:	f800283a 	ret
    6fc0:	d809883a 	mov	r4,sp
    6fc4:	00065a00 	call	65a0 <__lo0bits>
    6fc8:	d8c00017 	ldw	r3,0(sp)
    6fcc:	04000044 	movi	r16,1
    6fd0:	9c000415 	stw	r16,16(r19)
    6fd4:	98c00515 	stw	r3,20(r19)
    6fd8:	10800804 	addi	r2,r2,32
    6fdc:	883fe126 	beq	r17,zero,6f64 <__d2b+0x8c>
    6fe0:	00c00d44 	movi	r3,53
    6fe4:	8c7ef344 	addi	r17,r17,-1075
    6fe8:	88a3883a 	add	r17,r17,r2
    6fec:	1885c83a 	sub	r2,r3,r2
    6ff0:	d8c00817 	ldw	r3,32(sp)
    6ff4:	94400015 	stw	r17,0(r18)
    6ff8:	18800015 	stw	r2,0(r3)
    6ffc:	003fe706 	br	6f9c <__d2b+0xc4>
    7000:	01000804 	movi	r4,32
    7004:	2089c83a 	sub	r4,r4,r2
    7008:	1908983a 	sll	r4,r3,r4
    700c:	d9400117 	ldw	r5,4(sp)
    7010:	1886d83a 	srl	r3,r3,r2
    7014:	2148b03a 	or	r4,r4,r5
    7018:	99000515 	stw	r4,20(r19)
    701c:	d8c00015 	stw	r3,0(sp)
    7020:	003fca06 	br	6f4c <__d2b+0x74>

00007024 <__ratio>:
    7024:	defff904 	addi	sp,sp,-28
    7028:	dc400315 	stw	r17,12(sp)
    702c:	2823883a 	mov	r17,r5
    7030:	d9400104 	addi	r5,sp,4
    7034:	dfc00615 	stw	ra,24(sp)
    7038:	dcc00515 	stw	r19,20(sp)
    703c:	dc800415 	stw	r18,16(sp)
    7040:	2027883a 	mov	r19,r4
    7044:	dc000215 	stw	r16,8(sp)
    7048:	0006dcc0 	call	6dcc <__b2d>
    704c:	d80b883a 	mov	r5,sp
    7050:	8809883a 	mov	r4,r17
    7054:	1025883a 	mov	r18,r2
    7058:	1821883a 	mov	r16,r3
    705c:	0006dcc0 	call	6dcc <__b2d>
    7060:	8a000417 	ldw	r8,16(r17)
    7064:	99000417 	ldw	r4,16(r19)
    7068:	d9400117 	ldw	r5,4(sp)
    706c:	2209c83a 	sub	r4,r4,r8
    7070:	2010917a 	slli	r8,r4,5
    7074:	d9000017 	ldw	r4,0(sp)
    7078:	2909c83a 	sub	r4,r5,r4
    707c:	4109883a 	add	r4,r8,r4
    7080:	01000e0e 	bge	zero,r4,70bc <__ratio+0x98>
    7084:	2008953a 	slli	r4,r4,20
    7088:	2421883a 	add	r16,r4,r16
    708c:	100d883a 	mov	r6,r2
    7090:	180f883a 	mov	r7,r3
    7094:	9009883a 	mov	r4,r18
    7098:	800b883a 	mov	r5,r16
    709c:	000af100 	call	af10 <__divdf3>
    70a0:	dfc00617 	ldw	ra,24(sp)
    70a4:	dcc00517 	ldw	r19,20(sp)
    70a8:	dc800417 	ldw	r18,16(sp)
    70ac:	dc400317 	ldw	r17,12(sp)
    70b0:	dc000217 	ldw	r16,8(sp)
    70b4:	dec00704 	addi	sp,sp,28
    70b8:	f800283a 	ret
    70bc:	2008953a 	slli	r4,r4,20
    70c0:	1907c83a 	sub	r3,r3,r4
    70c4:	003ff106 	br	708c <__ratio+0x68>

000070c8 <_mprec_log10>:
    70c8:	defffe04 	addi	sp,sp,-8
    70cc:	dc000015 	stw	r16,0(sp)
    70d0:	dfc00115 	stw	ra,4(sp)
    70d4:	008005c4 	movi	r2,23
    70d8:	2021883a 	mov	r16,r4
    70dc:	11000d0e 	bge	r2,r4,7114 <_mprec_log10+0x4c>
    70e0:	0005883a 	mov	r2,zero
    70e4:	00cffc34 	movhi	r3,16368
    70e8:	843fffc4 	addi	r16,r16,-1
    70ec:	000d883a 	mov	r6,zero
    70f0:	01d00934 	movhi	r7,16420
    70f4:	1009883a 	mov	r4,r2
    70f8:	180b883a 	mov	r5,r3
    70fc:	000ba500 	call	ba50 <__muldf3>
    7100:	803ff91e 	bne	r16,zero,70e8 <_mprec_log10+0x20>
    7104:	dfc00117 	ldw	ra,4(sp)
    7108:	dc000017 	ldw	r16,0(sp)
    710c:	dec00204 	addi	sp,sp,8
    7110:	f800283a 	ret
    7114:	202090fa 	slli	r16,r4,3
    7118:	00800074 	movhi	r2,1
    711c:	10be5004 	addi	r2,r2,-1728
    7120:	1421883a 	add	r16,r2,r16
    7124:	80800017 	ldw	r2,0(r16)
    7128:	80c00117 	ldw	r3,4(r16)
    712c:	dfc00117 	ldw	ra,4(sp)
    7130:	dc000017 	ldw	r16,0(sp)
    7134:	dec00204 	addi	sp,sp,8
    7138:	f800283a 	ret

0000713c <__copybits>:
    713c:	297fffc4 	addi	r5,r5,-1
    7140:	280fd17a 	srai	r7,r5,5
    7144:	30c00417 	ldw	r3,16(r6)
    7148:	30800504 	addi	r2,r6,20
    714c:	39c00044 	addi	r7,r7,1
    7150:	18c7883a 	add	r3,r3,r3
    7154:	39cf883a 	add	r7,r7,r7
    7158:	18c7883a 	add	r3,r3,r3
    715c:	39cf883a 	add	r7,r7,r7
    7160:	10c7883a 	add	r3,r2,r3
    7164:	21cf883a 	add	r7,r4,r7
    7168:	10c00d2e 	bgeu	r2,r3,71a0 <__copybits+0x64>
    716c:	200b883a 	mov	r5,r4
    7170:	12000017 	ldw	r8,0(r2)
    7174:	29400104 	addi	r5,r5,4
    7178:	10800104 	addi	r2,r2,4
    717c:	2a3fff15 	stw	r8,-4(r5)
    7180:	10fffb36 	bltu	r2,r3,7170 <__copybits+0x34>
    7184:	1985c83a 	sub	r2,r3,r6
    7188:	10bffac4 	addi	r2,r2,-21
    718c:	1004d0ba 	srli	r2,r2,2
    7190:	10800044 	addi	r2,r2,1
    7194:	1085883a 	add	r2,r2,r2
    7198:	1085883a 	add	r2,r2,r2
    719c:	2089883a 	add	r4,r4,r2
    71a0:	21c0032e 	bgeu	r4,r7,71b0 <__copybits+0x74>
    71a4:	20000015 	stw	zero,0(r4)
    71a8:	21000104 	addi	r4,r4,4
    71ac:	21fffd36 	bltu	r4,r7,71a4 <__copybits+0x68>
    71b0:	f800283a 	ret

000071b4 <__any_on>:
    71b4:	20c00417 	ldw	r3,16(r4)
    71b8:	2805d17a 	srai	r2,r5,5
    71bc:	21000504 	addi	r4,r4,20
    71c0:	18800d0e 	bge	r3,r2,71f8 <__any_on+0x44>
    71c4:	18c7883a 	add	r3,r3,r3
    71c8:	18c7883a 	add	r3,r3,r3
    71cc:	20c7883a 	add	r3,r4,r3
    71d0:	20c0192e 	bgeu	r4,r3,7238 <__any_on+0x84>
    71d4:	18bfff17 	ldw	r2,-4(r3)
    71d8:	18ffff04 	addi	r3,r3,-4
    71dc:	1000041e 	bne	r2,zero,71f0 <__any_on+0x3c>
    71e0:	20c0142e 	bgeu	r4,r3,7234 <__any_on+0x80>
    71e4:	18ffff04 	addi	r3,r3,-4
    71e8:	19400017 	ldw	r5,0(r3)
    71ec:	283ffc26 	beq	r5,zero,71e0 <__any_on+0x2c>
    71f0:	00800044 	movi	r2,1
    71f4:	f800283a 	ret
    71f8:	10c00a0e 	bge	r2,r3,7224 <__any_on+0x70>
    71fc:	1085883a 	add	r2,r2,r2
    7200:	1085883a 	add	r2,r2,r2
    7204:	294007cc 	andi	r5,r5,31
    7208:	2087883a 	add	r3,r4,r2
    720c:	283ff026 	beq	r5,zero,71d0 <__any_on+0x1c>
    7210:	19800017 	ldw	r6,0(r3)
    7214:	3144d83a 	srl	r2,r6,r5
    7218:	114a983a 	sll	r5,r2,r5
    721c:	317ff41e 	bne	r6,r5,71f0 <__any_on+0x3c>
    7220:	003feb06 	br	71d0 <__any_on+0x1c>
    7224:	1085883a 	add	r2,r2,r2
    7228:	1085883a 	add	r2,r2,r2
    722c:	2087883a 	add	r3,r4,r2
    7230:	003fe706 	br	71d0 <__any_on+0x1c>
    7234:	f800283a 	ret
    7238:	0005883a 	mov	r2,zero
    723c:	f800283a 	ret

00007240 <_realloc_r>:
    7240:	defff604 	addi	sp,sp,-40
    7244:	dc400115 	stw	r17,4(sp)
    7248:	dfc00915 	stw	ra,36(sp)
    724c:	df000815 	stw	fp,32(sp)
    7250:	ddc00715 	stw	r23,28(sp)
    7254:	dd800615 	stw	r22,24(sp)
    7258:	dd400515 	stw	r21,20(sp)
    725c:	dd000415 	stw	r20,16(sp)
    7260:	dcc00315 	stw	r19,12(sp)
    7264:	dc800215 	stw	r18,8(sp)
    7268:	dc000015 	stw	r16,0(sp)
    726c:	3023883a 	mov	r17,r6
    7270:	2800b626 	beq	r5,zero,754c <_realloc_r+0x30c>
    7274:	2829883a 	mov	r20,r5
    7278:	2025883a 	mov	r18,r4
    727c:	000d2980 	call	d298 <__malloc_lock>
    7280:	a0ffff17 	ldw	r3,-4(r20)
    7284:	043fff04 	movi	r16,-4
    7288:	888002c4 	addi	r2,r17,11
    728c:	01000584 	movi	r4,22
    7290:	a57ffe04 	addi	r21,r20,-8
    7294:	1c20703a 	and	r16,r3,r16
    7298:	2080332e 	bgeu	r4,r2,7368 <_realloc_r+0x128>
    729c:	05bffe04 	movi	r22,-8
    72a0:	15ac703a 	and	r22,r2,r22
    72a4:	b005883a 	mov	r2,r22
    72a8:	b0005716 	blt	r22,zero,7408 <_realloc_r+0x1c8>
    72ac:	b4405636 	bltu	r22,r17,7408 <_realloc_r+0x1c8>
    72b0:	8080300e 	bge	r16,r2,7374 <_realloc_r+0x134>
    72b4:	07000074 	movhi	fp,1
    72b8:	e73ffe04 	addi	fp,fp,-8
    72bc:	e2000217 	ldw	r8,8(fp)
    72c0:	ac09883a 	add	r4,r21,r16
    72c4:	22006126 	beq	r4,r8,744c <_realloc_r+0x20c>
    72c8:	22400117 	ldw	r9,4(r4)
    72cc:	01ffff84 	movi	r7,-2
    72d0:	49ce703a 	and	r7,r9,r7
    72d4:	21cf883a 	add	r7,r4,r7
    72d8:	39800117 	ldw	r6,4(r7)
    72dc:	3180004c 	andi	r6,r6,1
    72e0:	30003e26 	beq	r6,zero,73dc <_realloc_r+0x19c>
    72e4:	18c0004c 	andi	r3,r3,1
    72e8:	18008126 	beq	r3,zero,74f0 <_realloc_r+0x2b0>
    72ec:	880b883a 	mov	r5,r17
    72f0:	9009883a 	mov	r4,r18
    72f4:	00055880 	call	5588 <_malloc_r>
    72f8:	1023883a 	mov	r17,r2
    72fc:	10011e26 	beq	r2,zero,7778 <_realloc_r+0x538>
    7300:	a0ffff17 	ldw	r3,-4(r20)
    7304:	113ffe04 	addi	r4,r2,-8
    7308:	00bfff84 	movi	r2,-2
    730c:	1884703a 	and	r2,r3,r2
    7310:	a885883a 	add	r2,r21,r2
    7314:	2080ee26 	beq	r4,r2,76d0 <_realloc_r+0x490>
    7318:	81bfff04 	addi	r6,r16,-4
    731c:	00800904 	movi	r2,36
    7320:	1180b836 	bltu	r2,r6,7604 <_realloc_r+0x3c4>
    7324:	00c004c4 	movi	r3,19
    7328:	19809536 	bltu	r3,r6,7580 <_realloc_r+0x340>
    732c:	8805883a 	mov	r2,r17
    7330:	a007883a 	mov	r3,r20
    7334:	19000017 	ldw	r4,0(r3)
    7338:	11000015 	stw	r4,0(r2)
    733c:	19000117 	ldw	r4,4(r3)
    7340:	11000115 	stw	r4,4(r2)
    7344:	18c00217 	ldw	r3,8(r3)
    7348:	10c00215 	stw	r3,8(r2)
    734c:	a00b883a 	mov	r5,r20
    7350:	9009883a 	mov	r4,r18
    7354:	000499c0 	call	499c <_free_r>
    7358:	9009883a 	mov	r4,r18
    735c:	000d2bc0 	call	d2bc <__malloc_unlock>
    7360:	8805883a 	mov	r2,r17
    7364:	00001106 	br	73ac <_realloc_r+0x16c>
    7368:	00800404 	movi	r2,16
    736c:	102d883a 	mov	r22,r2
    7370:	003fce06 	br	72ac <_realloc_r+0x6c>
    7374:	a023883a 	mov	r17,r20
    7378:	858fc83a 	sub	r7,r16,r22
    737c:	008003c4 	movi	r2,15
    7380:	18c0004c 	andi	r3,r3,1
    7384:	11c02436 	bltu	r2,r7,7418 <_realloc_r+0x1d8>
    7388:	1c06b03a 	or	r3,r3,r16
    738c:	a8c00115 	stw	r3,4(r21)
    7390:	ac21883a 	add	r16,r21,r16
    7394:	80800117 	ldw	r2,4(r16)
    7398:	10800054 	ori	r2,r2,1
    739c:	80800115 	stw	r2,4(r16)
    73a0:	9009883a 	mov	r4,r18
    73a4:	000d2bc0 	call	d2bc <__malloc_unlock>
    73a8:	8805883a 	mov	r2,r17
    73ac:	dfc00917 	ldw	ra,36(sp)
    73b0:	df000817 	ldw	fp,32(sp)
    73b4:	ddc00717 	ldw	r23,28(sp)
    73b8:	dd800617 	ldw	r22,24(sp)
    73bc:	dd400517 	ldw	r21,20(sp)
    73c0:	dd000417 	ldw	r20,16(sp)
    73c4:	dcc00317 	ldw	r19,12(sp)
    73c8:	dc800217 	ldw	r18,8(sp)
    73cc:	dc400117 	ldw	r17,4(sp)
    73d0:	dc000017 	ldw	r16,0(sp)
    73d4:	dec00a04 	addi	sp,sp,40
    73d8:	f800283a 	ret
    73dc:	017fff04 	movi	r5,-4
    73e0:	494a703a 	and	r5,r9,r5
    73e4:	814d883a 	add	r6,r16,r5
    73e8:	30801e16 	blt	r6,r2,7464 <_realloc_r+0x224>
    73ec:	20800317 	ldw	r2,12(r4)
    73f0:	21000217 	ldw	r4,8(r4)
    73f4:	a023883a 	mov	r17,r20
    73f8:	3021883a 	mov	r16,r6
    73fc:	20800315 	stw	r2,12(r4)
    7400:	11000215 	stw	r4,8(r2)
    7404:	003fdc06 	br	7378 <_realloc_r+0x138>
    7408:	00800304 	movi	r2,12
    740c:	90800015 	stw	r2,0(r18)
    7410:	0005883a 	mov	r2,zero
    7414:	003fe506 	br	73ac <_realloc_r+0x16c>
    7418:	1d86b03a 	or	r3,r3,r22
    741c:	a8c00115 	stw	r3,4(r21)
    7420:	ad8b883a 	add	r5,r21,r22
    7424:	38c00054 	ori	r3,r7,1
    7428:	28c00115 	stw	r3,4(r5)
    742c:	29cf883a 	add	r7,r5,r7
    7430:	38c00117 	ldw	r3,4(r7)
    7434:	29400204 	addi	r5,r5,8
    7438:	9009883a 	mov	r4,r18
    743c:	18800054 	ori	r2,r3,1
    7440:	38800115 	stw	r2,4(r7)
    7444:	000499c0 	call	499c <_free_r>
    7448:	003fd506 	br	73a0 <_realloc_r+0x160>
    744c:	21c00117 	ldw	r7,4(r4)
    7450:	017fff04 	movi	r5,-4
    7454:	b1800404 	addi	r6,r22,16
    7458:	394a703a 	and	r5,r7,r5
    745c:	814f883a 	add	r7,r16,r5
    7460:	39805b0e 	bge	r7,r6,75d0 <_realloc_r+0x390>
    7464:	18c0004c 	andi	r3,r3,1
    7468:	183fa01e 	bne	r3,zero,72ec <_realloc_r+0xac>
    746c:	a4fffe17 	ldw	r19,-8(r20)
    7470:	00ffff04 	movi	r3,-4
    7474:	ace7c83a 	sub	r19,r21,r19
    7478:	99800117 	ldw	r6,4(r19)
    747c:	30c6703a 	and	r3,r6,r3
    7480:	20002026 	beq	r4,zero,7504 <_realloc_r+0x2c4>
    7484:	80ef883a 	add	r23,r16,r3
    7488:	b96f883a 	add	r23,r23,r5
    748c:	22006126 	beq	r4,r8,7614 <_realloc_r+0x3d4>
    7490:	b8801c16 	blt	r23,r2,7504 <_realloc_r+0x2c4>
    7494:	20800317 	ldw	r2,12(r4)
    7498:	20c00217 	ldw	r3,8(r4)
    749c:	81bfff04 	addi	r6,r16,-4
    74a0:	01000904 	movi	r4,36
    74a4:	18800315 	stw	r2,12(r3)
    74a8:	10c00215 	stw	r3,8(r2)
    74ac:	98c00217 	ldw	r3,8(r19)
    74b0:	98800317 	ldw	r2,12(r19)
    74b4:	9c400204 	addi	r17,r19,8
    74b8:	18800315 	stw	r2,12(r3)
    74bc:	10c00215 	stw	r3,8(r2)
    74c0:	21801b36 	bltu	r4,r6,7530 <_realloc_r+0x2f0>
    74c4:	008004c4 	movi	r2,19
    74c8:	1180362e 	bgeu	r2,r6,75a4 <_realloc_r+0x364>
    74cc:	a0800017 	ldw	r2,0(r20)
    74d0:	98800215 	stw	r2,8(r19)
    74d4:	a0800117 	ldw	r2,4(r20)
    74d8:	98800315 	stw	r2,12(r19)
    74dc:	008006c4 	movi	r2,27
    74e0:	11808136 	bltu	r2,r6,76e8 <_realloc_r+0x4a8>
    74e4:	98800404 	addi	r2,r19,16
    74e8:	a5000204 	addi	r20,r20,8
    74ec:	00002e06 	br	75a8 <_realloc_r+0x368>
    74f0:	a4fffe17 	ldw	r19,-8(r20)
    74f4:	00ffff04 	movi	r3,-4
    74f8:	ace7c83a 	sub	r19,r21,r19
    74fc:	99000117 	ldw	r4,4(r19)
    7500:	20c6703a 	and	r3,r4,r3
    7504:	983f7926 	beq	r19,zero,72ec <_realloc_r+0xac>
    7508:	80ef883a 	add	r23,r16,r3
    750c:	b8bf7716 	blt	r23,r2,72ec <_realloc_r+0xac>
    7510:	98800317 	ldw	r2,12(r19)
    7514:	98c00217 	ldw	r3,8(r19)
    7518:	81bfff04 	addi	r6,r16,-4
    751c:	01000904 	movi	r4,36
    7520:	18800315 	stw	r2,12(r3)
    7524:	10c00215 	stw	r3,8(r2)
    7528:	9c400204 	addi	r17,r19,8
    752c:	21bfe52e 	bgeu	r4,r6,74c4 <_realloc_r+0x284>
    7530:	a00b883a 	mov	r5,r20
    7534:	8809883a 	mov	r4,r17
    7538:	0005fc00 	call	5fc0 <memmove>
    753c:	98c00117 	ldw	r3,4(r19)
    7540:	b821883a 	mov	r16,r23
    7544:	982b883a 	mov	r21,r19
    7548:	003f8b06 	br	7378 <_realloc_r+0x138>
    754c:	300b883a 	mov	r5,r6
    7550:	dfc00917 	ldw	ra,36(sp)
    7554:	df000817 	ldw	fp,32(sp)
    7558:	ddc00717 	ldw	r23,28(sp)
    755c:	dd800617 	ldw	r22,24(sp)
    7560:	dd400517 	ldw	r21,20(sp)
    7564:	dd000417 	ldw	r20,16(sp)
    7568:	dcc00317 	ldw	r19,12(sp)
    756c:	dc800217 	ldw	r18,8(sp)
    7570:	dc400117 	ldw	r17,4(sp)
    7574:	dc000017 	ldw	r16,0(sp)
    7578:	dec00a04 	addi	sp,sp,40
    757c:	00055881 	jmpi	5588 <_malloc_r>
    7580:	a0c00017 	ldw	r3,0(r20)
    7584:	88c00015 	stw	r3,0(r17)
    7588:	a0c00117 	ldw	r3,4(r20)
    758c:	88c00115 	stw	r3,4(r17)
    7590:	00c006c4 	movi	r3,27
    7594:	19804636 	bltu	r3,r6,76b0 <_realloc_r+0x470>
    7598:	88800204 	addi	r2,r17,8
    759c:	a0c00204 	addi	r3,r20,8
    75a0:	003f6406 	br	7334 <_realloc_r+0xf4>
    75a4:	8805883a 	mov	r2,r17
    75a8:	a0c00017 	ldw	r3,0(r20)
    75ac:	b821883a 	mov	r16,r23
    75b0:	982b883a 	mov	r21,r19
    75b4:	10c00015 	stw	r3,0(r2)
    75b8:	a0c00117 	ldw	r3,4(r20)
    75bc:	10c00115 	stw	r3,4(r2)
    75c0:	a0c00217 	ldw	r3,8(r20)
    75c4:	10c00215 	stw	r3,8(r2)
    75c8:	98c00117 	ldw	r3,4(r19)
    75cc:	003f6a06 	br	7378 <_realloc_r+0x138>
    75d0:	adab883a 	add	r21,r21,r22
    75d4:	3d85c83a 	sub	r2,r7,r22
    75d8:	e5400215 	stw	r21,8(fp)
    75dc:	10800054 	ori	r2,r2,1
    75e0:	a8800115 	stw	r2,4(r21)
    75e4:	a0bfff17 	ldw	r2,-4(r20)
    75e8:	9009883a 	mov	r4,r18
    75ec:	1080004c 	andi	r2,r2,1
    75f0:	1584b03a 	or	r2,r2,r22
    75f4:	a0bfff15 	stw	r2,-4(r20)
    75f8:	000d2bc0 	call	d2bc <__malloc_unlock>
    75fc:	a005883a 	mov	r2,r20
    7600:	003f6a06 	br	73ac <_realloc_r+0x16c>
    7604:	a00b883a 	mov	r5,r20
    7608:	8809883a 	mov	r4,r17
    760c:	0005fc00 	call	5fc0 <memmove>
    7610:	003f4e06 	br	734c <_realloc_r+0x10c>
    7614:	b1000404 	addi	r4,r22,16
    7618:	b93fba16 	blt	r23,r4,7504 <_realloc_r+0x2c4>
    761c:	98800317 	ldw	r2,12(r19)
    7620:	98c00217 	ldw	r3,8(r19)
    7624:	81bfff04 	addi	r6,r16,-4
    7628:	01000904 	movi	r4,36
    762c:	18800315 	stw	r2,12(r3)
    7630:	10c00215 	stw	r3,8(r2)
    7634:	9c400204 	addi	r17,r19,8
    7638:	21804336 	bltu	r4,r6,7748 <_realloc_r+0x508>
    763c:	008004c4 	movi	r2,19
    7640:	11803f2e 	bgeu	r2,r6,7740 <_realloc_r+0x500>
    7644:	a0800017 	ldw	r2,0(r20)
    7648:	98800215 	stw	r2,8(r19)
    764c:	a0800117 	ldw	r2,4(r20)
    7650:	98800315 	stw	r2,12(r19)
    7654:	008006c4 	movi	r2,27
    7658:	11803f36 	bltu	r2,r6,7758 <_realloc_r+0x518>
    765c:	98800404 	addi	r2,r19,16
    7660:	a5000204 	addi	r20,r20,8
    7664:	a0c00017 	ldw	r3,0(r20)
    7668:	10c00015 	stw	r3,0(r2)
    766c:	a0c00117 	ldw	r3,4(r20)
    7670:	10c00115 	stw	r3,4(r2)
    7674:	a0c00217 	ldw	r3,8(r20)
    7678:	10c00215 	stw	r3,8(r2)
    767c:	9d87883a 	add	r3,r19,r22
    7680:	bd85c83a 	sub	r2,r23,r22
    7684:	e0c00215 	stw	r3,8(fp)
    7688:	10800054 	ori	r2,r2,1
    768c:	18800115 	stw	r2,4(r3)
    7690:	98800117 	ldw	r2,4(r19)
    7694:	9009883a 	mov	r4,r18
    7698:	1080004c 	andi	r2,r2,1
    769c:	1584b03a 	or	r2,r2,r22
    76a0:	98800115 	stw	r2,4(r19)
    76a4:	000d2bc0 	call	d2bc <__malloc_unlock>
    76a8:	8805883a 	mov	r2,r17
    76ac:	003f3f06 	br	73ac <_realloc_r+0x16c>
    76b0:	a0c00217 	ldw	r3,8(r20)
    76b4:	88c00215 	stw	r3,8(r17)
    76b8:	a0c00317 	ldw	r3,12(r20)
    76bc:	88c00315 	stw	r3,12(r17)
    76c0:	30801126 	beq	r6,r2,7708 <_realloc_r+0x4c8>
    76c4:	88800404 	addi	r2,r17,16
    76c8:	a0c00404 	addi	r3,r20,16
    76cc:	003f1906 	br	7334 <_realloc_r+0xf4>
    76d0:	893fff17 	ldw	r4,-4(r17)
    76d4:	00bfff04 	movi	r2,-4
    76d8:	a023883a 	mov	r17,r20
    76dc:	2084703a 	and	r2,r4,r2
    76e0:	80a1883a 	add	r16,r16,r2
    76e4:	003f2406 	br	7378 <_realloc_r+0x138>
    76e8:	a0800217 	ldw	r2,8(r20)
    76ec:	98800415 	stw	r2,16(r19)
    76f0:	a0800317 	ldw	r2,12(r20)
    76f4:	98800515 	stw	r2,20(r19)
    76f8:	31000a26 	beq	r6,r4,7724 <_realloc_r+0x4e4>
    76fc:	98800604 	addi	r2,r19,24
    7700:	a5000404 	addi	r20,r20,16
    7704:	003fa806 	br	75a8 <_realloc_r+0x368>
    7708:	a1000417 	ldw	r4,16(r20)
    770c:	88800604 	addi	r2,r17,24
    7710:	a0c00604 	addi	r3,r20,24
    7714:	89000415 	stw	r4,16(r17)
    7718:	a1000517 	ldw	r4,20(r20)
    771c:	89000515 	stw	r4,20(r17)
    7720:	003f0406 	br	7334 <_realloc_r+0xf4>
    7724:	a0c00417 	ldw	r3,16(r20)
    7728:	a5000604 	addi	r20,r20,24
    772c:	98800804 	addi	r2,r19,32
    7730:	98c00615 	stw	r3,24(r19)
    7734:	a0ffff17 	ldw	r3,-4(r20)
    7738:	98c00715 	stw	r3,28(r19)
    773c:	003f9a06 	br	75a8 <_realloc_r+0x368>
    7740:	8805883a 	mov	r2,r17
    7744:	003fc706 	br	7664 <_realloc_r+0x424>
    7748:	a00b883a 	mov	r5,r20
    774c:	8809883a 	mov	r4,r17
    7750:	0005fc00 	call	5fc0 <memmove>
    7754:	003fc906 	br	767c <_realloc_r+0x43c>
    7758:	a0800217 	ldw	r2,8(r20)
    775c:	98800415 	stw	r2,16(r19)
    7760:	a0800317 	ldw	r2,12(r20)
    7764:	98800515 	stw	r2,20(r19)
    7768:	31000726 	beq	r6,r4,7788 <_realloc_r+0x548>
    776c:	98800604 	addi	r2,r19,24
    7770:	a5000404 	addi	r20,r20,16
    7774:	003fbb06 	br	7664 <_realloc_r+0x424>
    7778:	9009883a 	mov	r4,r18
    777c:	000d2bc0 	call	d2bc <__malloc_unlock>
    7780:	0005883a 	mov	r2,zero
    7784:	003f0906 	br	73ac <_realloc_r+0x16c>
    7788:	a0c00417 	ldw	r3,16(r20)
    778c:	a5000604 	addi	r20,r20,24
    7790:	98800804 	addi	r2,r19,32
    7794:	98c00615 	stw	r3,24(r19)
    7798:	a0ffff17 	ldw	r3,-4(r20)
    779c:	98c00715 	stw	r3,28(r19)
    77a0:	003fb006 	br	7664 <_realloc_r+0x424>

000077a4 <__fpclassifyd>:
    77a4:	00a00034 	movhi	r2,32768
    77a8:	10bfffc4 	addi	r2,r2,-1
    77ac:	2884703a 	and	r2,r5,r2
    77b0:	10000726 	beq	r2,zero,77d0 <__fpclassifyd+0x2c>
    77b4:	00fffc34 	movhi	r3,65520
    77b8:	019ff834 	movhi	r6,32736
    77bc:	28c7883a 	add	r3,r5,r3
    77c0:	31bfffc4 	addi	r6,r6,-1
    77c4:	30c00536 	bltu	r6,r3,77dc <__fpclassifyd+0x38>
    77c8:	00800104 	movi	r2,4
    77cc:	f800283a 	ret
    77d0:	2000021e 	bne	r4,zero,77dc <__fpclassifyd+0x38>
    77d4:	00800084 	movi	r2,2
    77d8:	f800283a 	ret
    77dc:	00dffc34 	movhi	r3,32752
    77e0:	019ff834 	movhi	r6,32736
    77e4:	28cb883a 	add	r5,r5,r3
    77e8:	31bfffc4 	addi	r6,r6,-1
    77ec:	317ff62e 	bgeu	r6,r5,77c8 <__fpclassifyd+0x24>
    77f0:	01400434 	movhi	r5,16
    77f4:	297fffc4 	addi	r5,r5,-1
    77f8:	28800236 	bltu	r5,r2,7804 <__fpclassifyd+0x60>
    77fc:	008000c4 	movi	r2,3
    7800:	f800283a 	ret
    7804:	10c00226 	beq	r2,r3,7810 <__fpclassifyd+0x6c>
    7808:	0005883a 	mov	r2,zero
    780c:	f800283a 	ret
    7810:	2005003a 	cmpeq	r2,r4,zero
    7814:	f800283a 	ret

00007818 <_sbrk_r>:
    7818:	defffd04 	addi	sp,sp,-12
    781c:	dc000015 	stw	r16,0(sp)
    7820:	04000074 	movhi	r16,1
    7824:	dc400115 	stw	r17,4(sp)
    7828:	840c6904 	addi	r16,r16,12708
    782c:	2023883a 	mov	r17,r4
    7830:	2809883a 	mov	r4,r5
    7834:	dfc00215 	stw	ra,8(sp)
    7838:	80000015 	stw	zero,0(r16)
    783c:	000d4900 	call	d490 <sbrk>
    7840:	00ffffc4 	movi	r3,-1
    7844:	10c00526 	beq	r2,r3,785c <_sbrk_r+0x44>
    7848:	dfc00217 	ldw	ra,8(sp)
    784c:	dc400117 	ldw	r17,4(sp)
    7850:	dc000017 	ldw	r16,0(sp)
    7854:	dec00304 	addi	sp,sp,12
    7858:	f800283a 	ret
    785c:	80c00017 	ldw	r3,0(r16)
    7860:	183ff926 	beq	r3,zero,7848 <_sbrk_r+0x30>
    7864:	88c00015 	stw	r3,0(r17)
    7868:	003ff706 	br	7848 <_sbrk_r+0x30>

0000786c <__sread>:
    786c:	defffe04 	addi	sp,sp,-8
    7870:	dc000015 	stw	r16,0(sp)
    7874:	2821883a 	mov	r16,r5
    7878:	2940038f 	ldh	r5,14(r5)
    787c:	dfc00115 	stw	ra,4(sp)
    7880:	00096600 	call	9660 <_read_r>
    7884:	10000716 	blt	r2,zero,78a4 <__sread+0x38>
    7888:	80c01417 	ldw	r3,80(r16)
    788c:	1887883a 	add	r3,r3,r2
    7890:	80c01415 	stw	r3,80(r16)
    7894:	dfc00117 	ldw	ra,4(sp)
    7898:	dc000017 	ldw	r16,0(sp)
    789c:	dec00204 	addi	sp,sp,8
    78a0:	f800283a 	ret
    78a4:	80c0030b 	ldhu	r3,12(r16)
    78a8:	18fbffcc 	andi	r3,r3,61439
    78ac:	80c0030d 	sth	r3,12(r16)
    78b0:	dfc00117 	ldw	ra,4(sp)
    78b4:	dc000017 	ldw	r16,0(sp)
    78b8:	dec00204 	addi	sp,sp,8
    78bc:	f800283a 	ret

000078c0 <__seofread>:
    78c0:	0005883a 	mov	r2,zero
    78c4:	f800283a 	ret

000078c8 <__swrite>:
    78c8:	2880030b 	ldhu	r2,12(r5)
    78cc:	defffb04 	addi	sp,sp,-20
    78d0:	dcc00315 	stw	r19,12(sp)
    78d4:	dc800215 	stw	r18,8(sp)
    78d8:	dc400115 	stw	r17,4(sp)
    78dc:	dc000015 	stw	r16,0(sp)
    78e0:	dfc00415 	stw	ra,16(sp)
    78e4:	10c0400c 	andi	r3,r2,256
    78e8:	2821883a 	mov	r16,r5
    78ec:	2023883a 	mov	r17,r4
    78f0:	3025883a 	mov	r18,r6
    78f4:	3827883a 	mov	r19,r7
    78f8:	18000526 	beq	r3,zero,7910 <__swrite+0x48>
    78fc:	2940038f 	ldh	r5,14(r5)
    7900:	01c00084 	movi	r7,2
    7904:	000d883a 	mov	r6,zero
    7908:	00096000 	call	9600 <_lseek_r>
    790c:	8080030b 	ldhu	r2,12(r16)
    7910:	8140038f 	ldh	r5,14(r16)
    7914:	10bbffcc 	andi	r2,r2,61439
    7918:	980f883a 	mov	r7,r19
    791c:	900d883a 	mov	r6,r18
    7920:	8809883a 	mov	r4,r17
    7924:	8080030d 	sth	r2,12(r16)
    7928:	dfc00417 	ldw	ra,16(sp)
    792c:	dcc00317 	ldw	r19,12(sp)
    7930:	dc800217 	ldw	r18,8(sp)
    7934:	dc400117 	ldw	r17,4(sp)
    7938:	dc000017 	ldw	r16,0(sp)
    793c:	dec00504 	addi	sp,sp,20
    7940:	00090cc1 	jmpi	90cc <_write_r>

00007944 <__sseek>:
    7944:	defffe04 	addi	sp,sp,-8
    7948:	dc000015 	stw	r16,0(sp)
    794c:	2821883a 	mov	r16,r5
    7950:	2940038f 	ldh	r5,14(r5)
    7954:	dfc00115 	stw	ra,4(sp)
    7958:	00096000 	call	9600 <_lseek_r>
    795c:	00ffffc4 	movi	r3,-1
    7960:	10c00826 	beq	r2,r3,7984 <__sseek+0x40>
    7964:	80c0030b 	ldhu	r3,12(r16)
    7968:	80801415 	stw	r2,80(r16)
    796c:	18c40014 	ori	r3,r3,4096
    7970:	80c0030d 	sth	r3,12(r16)
    7974:	dfc00117 	ldw	ra,4(sp)
    7978:	dc000017 	ldw	r16,0(sp)
    797c:	dec00204 	addi	sp,sp,8
    7980:	f800283a 	ret
    7984:	80c0030b 	ldhu	r3,12(r16)
    7988:	18fbffcc 	andi	r3,r3,61439
    798c:	80c0030d 	sth	r3,12(r16)
    7990:	dfc00117 	ldw	ra,4(sp)
    7994:	dc000017 	ldw	r16,0(sp)
    7998:	dec00204 	addi	sp,sp,8
    799c:	f800283a 	ret

000079a0 <__sclose>:
    79a0:	2940038f 	ldh	r5,14(r5)
    79a4:	000912c1 	jmpi	912c <_close_r>

000079a8 <strcmp>:
    79a8:	2144b03a 	or	r2,r4,r5
    79ac:	108000cc 	andi	r2,r2,3
    79b0:	1000171e 	bne	r2,zero,7a10 <strcmp+0x68>
    79b4:	20800017 	ldw	r2,0(r4)
    79b8:	28c00017 	ldw	r3,0(r5)
    79bc:	10c0141e 	bne	r2,r3,7a10 <strcmp+0x68>
    79c0:	027fbff4 	movhi	r9,65279
    79c4:	4a7fbfc4 	addi	r9,r9,-257
    79c8:	0086303a 	nor	r3,zero,r2
    79cc:	02202074 	movhi	r8,32897
    79d0:	1245883a 	add	r2,r2,r9
    79d4:	42202004 	addi	r8,r8,-32640
    79d8:	10c4703a 	and	r2,r2,r3
    79dc:	1204703a 	and	r2,r2,r8
    79e0:	10000226 	beq	r2,zero,79ec <strcmp+0x44>
    79e4:	00002306 	br	7a74 <strcmp+0xcc>
    79e8:	1000221e 	bne	r2,zero,7a74 <strcmp+0xcc>
    79ec:	21000104 	addi	r4,r4,4
    79f0:	20c00017 	ldw	r3,0(r4)
    79f4:	29400104 	addi	r5,r5,4
    79f8:	29800017 	ldw	r6,0(r5)
    79fc:	1a4f883a 	add	r7,r3,r9
    7a00:	00c4303a 	nor	r2,zero,r3
    7a04:	3884703a 	and	r2,r7,r2
    7a08:	1204703a 	and	r2,r2,r8
    7a0c:	19bff626 	beq	r3,r6,79e8 <strcmp+0x40>
    7a10:	20800003 	ldbu	r2,0(r4)
    7a14:	10c03fcc 	andi	r3,r2,255
    7a18:	18c0201c 	xori	r3,r3,128
    7a1c:	18ffe004 	addi	r3,r3,-128
    7a20:	18000c26 	beq	r3,zero,7a54 <strcmp+0xac>
    7a24:	29800007 	ldb	r6,0(r5)
    7a28:	19800326 	beq	r3,r6,7a38 <strcmp+0x90>
    7a2c:	00001306 	br	7a7c <strcmp+0xd4>
    7a30:	29800007 	ldb	r6,0(r5)
    7a34:	11800b1e 	bne	r2,r6,7a64 <strcmp+0xbc>
    7a38:	21000044 	addi	r4,r4,1
    7a3c:	20c00003 	ldbu	r3,0(r4)
    7a40:	29400044 	addi	r5,r5,1
    7a44:	18803fcc 	andi	r2,r3,255
    7a48:	1080201c 	xori	r2,r2,128
    7a4c:	10bfe004 	addi	r2,r2,-128
    7a50:	103ff71e 	bne	r2,zero,7a30 <strcmp+0x88>
    7a54:	0007883a 	mov	r3,zero
    7a58:	28800003 	ldbu	r2,0(r5)
    7a5c:	1885c83a 	sub	r2,r3,r2
    7a60:	f800283a 	ret
    7a64:	28800003 	ldbu	r2,0(r5)
    7a68:	18c03fcc 	andi	r3,r3,255
    7a6c:	1885c83a 	sub	r2,r3,r2
    7a70:	f800283a 	ret
    7a74:	0005883a 	mov	r2,zero
    7a78:	f800283a 	ret
    7a7c:	10c03fcc 	andi	r3,r2,255
    7a80:	003ff506 	br	7a58 <strcmp+0xb0>

00007a84 <__sprint_r.part.0>:
    7a84:	28801917 	ldw	r2,100(r5)
    7a88:	defff604 	addi	sp,sp,-40
    7a8c:	dd400515 	stw	r21,20(sp)
    7a90:	dfc00915 	stw	ra,36(sp)
    7a94:	df000815 	stw	fp,32(sp)
    7a98:	ddc00715 	stw	r23,28(sp)
    7a9c:	dd800615 	stw	r22,24(sp)
    7aa0:	dd000415 	stw	r20,16(sp)
    7aa4:	dcc00315 	stw	r19,12(sp)
    7aa8:	dc800215 	stw	r18,8(sp)
    7aac:	dc400115 	stw	r17,4(sp)
    7ab0:	dc000015 	stw	r16,0(sp)
    7ab4:	1088000c 	andi	r2,r2,8192
    7ab8:	302b883a 	mov	r21,r6
    7abc:	10002e26 	beq	r2,zero,7b78 <__sprint_r.part.0+0xf4>
    7ac0:	30800217 	ldw	r2,8(r6)
    7ac4:	35800017 	ldw	r22,0(r6)
    7ac8:	10002926 	beq	r2,zero,7b70 <__sprint_r.part.0+0xec>
    7acc:	2827883a 	mov	r19,r5
    7ad0:	2029883a 	mov	r20,r4
    7ad4:	b5c00104 	addi	r23,r22,4
    7ad8:	04bfffc4 	movi	r18,-1
    7adc:	bc400017 	ldw	r17,0(r23)
    7ae0:	b4000017 	ldw	r16,0(r22)
    7ae4:	0039883a 	mov	fp,zero
    7ae8:	8822d0ba 	srli	r17,r17,2
    7aec:	8800031e 	bne	r17,zero,7afc <__sprint_r.part.0+0x78>
    7af0:	00001806 	br	7b54 <__sprint_r.part.0+0xd0>
    7af4:	84000104 	addi	r16,r16,4
    7af8:	8f001526 	beq	r17,fp,7b50 <__sprint_r.part.0+0xcc>
    7afc:	81400017 	ldw	r5,0(r16)
    7b00:	980d883a 	mov	r6,r19
    7b04:	a009883a 	mov	r4,r20
    7b08:	00094ac0 	call	94ac <_fputwc_r>
    7b0c:	e7000044 	addi	fp,fp,1
    7b10:	14bff81e 	bne	r2,r18,7af4 <__sprint_r.part.0+0x70>
    7b14:	9005883a 	mov	r2,r18
    7b18:	a8000215 	stw	zero,8(r21)
    7b1c:	a8000115 	stw	zero,4(r21)
    7b20:	dfc00917 	ldw	ra,36(sp)
    7b24:	df000817 	ldw	fp,32(sp)
    7b28:	ddc00717 	ldw	r23,28(sp)
    7b2c:	dd800617 	ldw	r22,24(sp)
    7b30:	dd400517 	ldw	r21,20(sp)
    7b34:	dd000417 	ldw	r20,16(sp)
    7b38:	dcc00317 	ldw	r19,12(sp)
    7b3c:	dc800217 	ldw	r18,8(sp)
    7b40:	dc400117 	ldw	r17,4(sp)
    7b44:	dc000017 	ldw	r16,0(sp)
    7b48:	dec00a04 	addi	sp,sp,40
    7b4c:	f800283a 	ret
    7b50:	a8800217 	ldw	r2,8(r21)
    7b54:	8c63883a 	add	r17,r17,r17
    7b58:	8c63883a 	add	r17,r17,r17
    7b5c:	1445c83a 	sub	r2,r2,r17
    7b60:	a8800215 	stw	r2,8(r21)
    7b64:	b5800204 	addi	r22,r22,8
    7b68:	bdc00204 	addi	r23,r23,8
    7b6c:	103fdb1e 	bne	r2,zero,7adc <__sprint_r.part.0+0x58>
    7b70:	0005883a 	mov	r2,zero
    7b74:	003fe806 	br	7b18 <__sprint_r.part.0+0x94>
    7b78:	0004cac0 	call	4cac <__sfvwrite_r>
    7b7c:	003fe606 	br	7b18 <__sprint_r.part.0+0x94>

00007b80 <__sprint_r>:
    7b80:	30c00217 	ldw	r3,8(r6)
    7b84:	18000126 	beq	r3,zero,7b8c <__sprint_r+0xc>
    7b88:	0007a841 	jmpi	7a84 <__sprint_r.part.0>
    7b8c:	30000115 	stw	zero,4(r6)
    7b90:	0005883a 	mov	r2,zero
    7b94:	f800283a 	ret

00007b98 <___vfiprintf_internal_r>:
    7b98:	deffc904 	addi	sp,sp,-220
    7b9c:	df003515 	stw	fp,212(sp)
    7ba0:	dd003115 	stw	r20,196(sp)
    7ba4:	dfc03615 	stw	ra,216(sp)
    7ba8:	ddc03415 	stw	r23,208(sp)
    7bac:	dd803315 	stw	r22,204(sp)
    7bb0:	dd403215 	stw	r21,200(sp)
    7bb4:	dcc03015 	stw	r19,192(sp)
    7bb8:	dc802f15 	stw	r18,188(sp)
    7bbc:	dc402e15 	stw	r17,184(sp)
    7bc0:	dc002d15 	stw	r16,180(sp)
    7bc4:	d9002015 	stw	r4,128(sp)
    7bc8:	d9c02215 	stw	r7,136(sp)
    7bcc:	2829883a 	mov	r20,r5
    7bd0:	3039883a 	mov	fp,r6
    7bd4:	20000226 	beq	r4,zero,7be0 <___vfiprintf_internal_r+0x48>
    7bd8:	20800e17 	ldw	r2,56(r4)
    7bdc:	1000cf26 	beq	r2,zero,7f1c <___vfiprintf_internal_r+0x384>
    7be0:	a080030b 	ldhu	r2,12(r20)
    7be4:	10c8000c 	andi	r3,r2,8192
    7be8:	1800061e 	bne	r3,zero,7c04 <___vfiprintf_internal_r+0x6c>
    7bec:	a1001917 	ldw	r4,100(r20)
    7bf0:	00f7ffc4 	movi	r3,-8193
    7bf4:	10880014 	ori	r2,r2,8192
    7bf8:	20c6703a 	and	r3,r4,r3
    7bfc:	a080030d 	sth	r2,12(r20)
    7c00:	a0c01915 	stw	r3,100(r20)
    7c04:	10c0020c 	andi	r3,r2,8
    7c08:	1800a926 	beq	r3,zero,7eb0 <___vfiprintf_internal_r+0x318>
    7c0c:	a0c00417 	ldw	r3,16(r20)
    7c10:	1800a726 	beq	r3,zero,7eb0 <___vfiprintf_internal_r+0x318>
    7c14:	1080068c 	andi	r2,r2,26
    7c18:	00c00284 	movi	r3,10
    7c1c:	10c0ac26 	beq	r2,r3,7ed0 <___vfiprintf_internal_r+0x338>
    7c20:	da801a04 	addi	r10,sp,104
    7c24:	da801e15 	stw	r10,120(sp)
    7c28:	d8801e17 	ldw	r2,120(sp)
    7c2c:	da8019c4 	addi	r10,sp,103
    7c30:	05800074 	movhi	r22,1
    7c34:	05c00074 	movhi	r23,1
    7c38:	da801f15 	stw	r10,124(sp)
    7c3c:	1295c83a 	sub	r10,r2,r10
    7c40:	b5be8604 	addi	r22,r22,-1512
    7c44:	bdfe8204 	addi	r23,r23,-1528
    7c48:	dec01a15 	stw	sp,104(sp)
    7c4c:	d8001c15 	stw	zero,112(sp)
    7c50:	d8001b15 	stw	zero,108(sp)
    7c54:	d8002615 	stw	zero,152(sp)
    7c58:	d8002315 	stw	zero,140(sp)
    7c5c:	da802715 	stw	r10,156(sp)
    7c60:	d811883a 	mov	r8,sp
    7c64:	dd002115 	stw	r20,132(sp)
    7c68:	e021883a 	mov	r16,fp
    7c6c:	80800007 	ldb	r2,0(r16)
    7c70:	1003ea26 	beq	r2,zero,8c1c <___vfiprintf_internal_r+0x1084>
    7c74:	00c00944 	movi	r3,37
    7c78:	8025883a 	mov	r18,r16
    7c7c:	10c0021e 	bne	r2,r3,7c88 <___vfiprintf_internal_r+0xf0>
    7c80:	00001606 	br	7cdc <___vfiprintf_internal_r+0x144>
    7c84:	10c00326 	beq	r2,r3,7c94 <___vfiprintf_internal_r+0xfc>
    7c88:	94800044 	addi	r18,r18,1
    7c8c:	90800007 	ldb	r2,0(r18)
    7c90:	103ffc1e 	bne	r2,zero,7c84 <___vfiprintf_internal_r+0xec>
    7c94:	9423c83a 	sub	r17,r18,r16
    7c98:	88001026 	beq	r17,zero,7cdc <___vfiprintf_internal_r+0x144>
    7c9c:	d8c01c17 	ldw	r3,112(sp)
    7ca0:	d8801b17 	ldw	r2,108(sp)
    7ca4:	44000015 	stw	r16,0(r8)
    7ca8:	88c7883a 	add	r3,r17,r3
    7cac:	10800044 	addi	r2,r2,1
    7cb0:	44400115 	stw	r17,4(r8)
    7cb4:	d8c01c15 	stw	r3,112(sp)
    7cb8:	d8801b15 	stw	r2,108(sp)
    7cbc:	010001c4 	movi	r4,7
    7cc0:	2080760e 	bge	r4,r2,7e9c <___vfiprintf_internal_r+0x304>
    7cc4:	1803821e 	bne	r3,zero,8ad0 <___vfiprintf_internal_r+0xf38>
    7cc8:	da802317 	ldw	r10,140(sp)
    7ccc:	d8001b15 	stw	zero,108(sp)
    7cd0:	d811883a 	mov	r8,sp
    7cd4:	5455883a 	add	r10,r10,r17
    7cd8:	da802315 	stw	r10,140(sp)
    7cdc:	90800007 	ldb	r2,0(r18)
    7ce0:	10044626 	beq	r2,zero,8dfc <___vfiprintf_internal_r+0x1264>
    7ce4:	90c00047 	ldb	r3,1(r18)
    7ce8:	94000044 	addi	r16,r18,1
    7cec:	d8001d85 	stb	zero,118(sp)
    7cf0:	0009883a 	mov	r4,zero
    7cf4:	000f883a 	mov	r7,zero
    7cf8:	027fffc4 	movi	r9,-1
    7cfc:	0023883a 	mov	r17,zero
    7d00:	0029883a 	mov	r20,zero
    7d04:	01401604 	movi	r5,88
    7d08:	01800244 	movi	r6,9
    7d0c:	03400a84 	movi	r13,42
    7d10:	03001b04 	movi	r12,108
    7d14:	84000044 	addi	r16,r16,1
    7d18:	18bff804 	addi	r2,r3,-32
    7d1c:	28827336 	bltu	r5,r2,86ec <___vfiprintf_internal_r+0xb54>
    7d20:	100490ba 	slli	r2,r2,2
    7d24:	02800034 	movhi	r10,0
    7d28:	529f4e04 	addi	r10,r10,32056
    7d2c:	1285883a 	add	r2,r2,r10
    7d30:	10800017 	ldw	r2,0(r2)
    7d34:	1000683a 	jmp	r2
    7d38:	00008420 	cmpeqi	zero,zero,528
    7d3c:	000086ec 	andhi	zero,zero,539
    7d40:	000086ec 	andhi	zero,zero,539
    7d44:	00008440 	call	844 <___vfprintf_internal_r+0x2c0>
    7d48:	000086ec 	andhi	zero,zero,539
    7d4c:	000086ec 	andhi	zero,zero,539
    7d50:	000086ec 	andhi	zero,zero,539
    7d54:	000086ec 	andhi	zero,zero,539
    7d58:	000086ec 	andhi	zero,zero,539
    7d5c:	000086ec 	andhi	zero,zero,539
    7d60:	00008628 	cmpgeui	zero,zero,536
    7d64:	00008644 	movi	zero,537
    7d68:	000086ec 	andhi	zero,zero,539
    7d6c:	00007f2c 	andhi	zero,zero,508
    7d70:	00008654 	movui	zero,537
    7d74:	000086ec 	andhi	zero,zero,539
    7d78:	0000844c 	andi	zero,zero,529
    7d7c:	00008458 	cmpnei	zero,zero,529
    7d80:	00008458 	cmpnei	zero,zero,529
    7d84:	00008458 	cmpnei	zero,zero,529
    7d88:	00008458 	cmpnei	zero,zero,529
    7d8c:	00008458 	cmpnei	zero,zero,529
    7d90:	00008458 	cmpnei	zero,zero,529
    7d94:	00008458 	cmpnei	zero,zero,529
    7d98:	00008458 	cmpnei	zero,zero,529
    7d9c:	00008458 	cmpnei	zero,zero,529
    7da0:	000086ec 	andhi	zero,zero,539
    7da4:	000086ec 	andhi	zero,zero,539
    7da8:	000086ec 	andhi	zero,zero,539
    7dac:	000086ec 	andhi	zero,zero,539
    7db0:	000086ec 	andhi	zero,zero,539
    7db4:	000086ec 	andhi	zero,zero,539
    7db8:	000086ec 	andhi	zero,zero,539
    7dbc:	000086ec 	andhi	zero,zero,539
    7dc0:	000086ec 	andhi	zero,zero,539
    7dc4:	000086ec 	andhi	zero,zero,539
    7dc8:	00008484 	movi	zero,530
    7dcc:	000086ec 	andhi	zero,zero,539
    7dd0:	000086ec 	andhi	zero,zero,539
    7dd4:	000086ec 	andhi	zero,zero,539
    7dd8:	000086ec 	andhi	zero,zero,539
    7ddc:	000086ec 	andhi	zero,zero,539
    7de0:	000086ec 	andhi	zero,zero,539
    7de4:	000086ec 	andhi	zero,zero,539
    7de8:	000086ec 	andhi	zero,zero,539
    7dec:	000086ec 	andhi	zero,zero,539
    7df0:	000086ec 	andhi	zero,zero,539
    7df4:	000084bc 	xorhi	zero,zero,530
    7df8:	000086ec 	andhi	zero,zero,539
    7dfc:	000086ec 	andhi	zero,zero,539
    7e00:	000086ec 	andhi	zero,zero,539
    7e04:	000086ec 	andhi	zero,zero,539
    7e08:	000086ec 	andhi	zero,zero,539
    7e0c:	00008514 	movui	zero,532
    7e10:	000086ec 	andhi	zero,zero,539
    7e14:	000086ec 	andhi	zero,zero,539
    7e18:	00008584 	movi	zero,534
    7e1c:	000086ec 	andhi	zero,zero,539
    7e20:	000086ec 	andhi	zero,zero,539
    7e24:	000086ec 	andhi	zero,zero,539
    7e28:	000086ec 	andhi	zero,zero,539
    7e2c:	000086ec 	andhi	zero,zero,539
    7e30:	000086ec 	andhi	zero,zero,539
    7e34:	000086ec 	andhi	zero,zero,539
    7e38:	000086ec 	andhi	zero,zero,539
    7e3c:	000086ec 	andhi	zero,zero,539
    7e40:	000086ec 	andhi	zero,zero,539
    7e44:	00008330 	cmpltui	zero,zero,524
    7e48:	0000835c 	xori	zero,zero,525
    7e4c:	000086ec 	andhi	zero,zero,539
    7e50:	000086ec 	andhi	zero,zero,539
    7e54:	000086ec 	andhi	zero,zero,539
    7e58:	00008694 	movui	zero,538
    7e5c:	0000835c 	xori	zero,zero,525
    7e60:	000086ec 	andhi	zero,zero,539
    7e64:	000086ec 	andhi	zero,zero,539
    7e68:	000081f0 	cmpltui	zero,zero,519
    7e6c:	000086ec 	andhi	zero,zero,539
    7e70:	00008200 	call	820 <___vfprintf_internal_r+0x29c>
    7e74:	0000823c 	xorhi	zero,zero,520
    7e78:	00007f38 	rdprs	zero,zero,508
    7e7c:	000081e4 	muli	zero,zero,519
    7e80:	000086ec 	andhi	zero,zero,539
    7e84:	000085c0 	call	85c <___vfprintf_internal_r+0x2d8>
    7e88:	000086ec 	andhi	zero,zero,539
    7e8c:	00008618 	cmpnei	zero,zero,536
    7e90:	000086ec 	andhi	zero,zero,539
    7e94:	000086ec 	andhi	zero,zero,539
    7e98:	000082dc 	xori	zero,zero,523
    7e9c:	42000204 	addi	r8,r8,8
    7ea0:	da802317 	ldw	r10,140(sp)
    7ea4:	5455883a 	add	r10,r10,r17
    7ea8:	da802315 	stw	r10,140(sp)
    7eac:	003f8b06 	br	7cdc <___vfiprintf_internal_r+0x144>
    7eb0:	d9002017 	ldw	r4,128(sp)
    7eb4:	a00b883a 	mov	r5,r20
    7eb8:	00028540 	call	2854 <__swsetup_r>
    7ebc:	1003b11e 	bne	r2,zero,8d84 <___vfiprintf_internal_r+0x11ec>
    7ec0:	a080030b 	ldhu	r2,12(r20)
    7ec4:	00c00284 	movi	r3,10
    7ec8:	1080068c 	andi	r2,r2,26
    7ecc:	10ff541e 	bne	r2,r3,7c20 <___vfiprintf_internal_r+0x88>
    7ed0:	a080038f 	ldh	r2,14(r20)
    7ed4:	103f5216 	blt	r2,zero,7c20 <___vfiprintf_internal_r+0x88>
    7ed8:	d9c02217 	ldw	r7,136(sp)
    7edc:	d9002017 	ldw	r4,128(sp)
    7ee0:	e00d883a 	mov	r6,fp
    7ee4:	a00b883a 	mov	r5,r20
    7ee8:	00090100 	call	9010 <__sbprintf>
    7eec:	dfc03617 	ldw	ra,216(sp)
    7ef0:	df003517 	ldw	fp,212(sp)
    7ef4:	ddc03417 	ldw	r23,208(sp)
    7ef8:	dd803317 	ldw	r22,204(sp)
    7efc:	dd403217 	ldw	r21,200(sp)
    7f00:	dd003117 	ldw	r20,196(sp)
    7f04:	dcc03017 	ldw	r19,192(sp)
    7f08:	dc802f17 	ldw	r18,188(sp)
    7f0c:	dc402e17 	ldw	r17,184(sp)
    7f10:	dc002d17 	ldw	r16,180(sp)
    7f14:	dec03704 	addi	sp,sp,220
    7f18:	f800283a 	ret
    7f1c:	00048280 	call	4828 <__sinit>
    7f20:	003f2f06 	br	7be0 <___vfiprintf_internal_r+0x48>
    7f24:	0463c83a 	sub	r17,zero,r17
    7f28:	d8802215 	stw	r2,136(sp)
    7f2c:	a5000114 	ori	r20,r20,4
    7f30:	80c00007 	ldb	r3,0(r16)
    7f34:	003f7706 	br	7d14 <___vfiprintf_internal_r+0x17c>
    7f38:	00800c04 	movi	r2,48
    7f3c:	da802217 	ldw	r10,136(sp)
    7f40:	d8801d05 	stb	r2,116(sp)
    7f44:	00801e04 	movi	r2,120
    7f48:	d8801d45 	stb	r2,117(sp)
    7f4c:	d8001d85 	stb	zero,118(sp)
    7f50:	50c00104 	addi	r3,r10,4
    7f54:	54800017 	ldw	r18,0(r10)
    7f58:	0027883a 	mov	r19,zero
    7f5c:	a0800094 	ori	r2,r20,2
    7f60:	48030b16 	blt	r9,zero,8b90 <___vfiprintf_internal_r+0xff8>
    7f64:	00bfdfc4 	movi	r2,-129
    7f68:	a096703a 	and	r11,r20,r2
    7f6c:	d8c02215 	stw	r3,136(sp)
    7f70:	5d000094 	ori	r20,r11,2
    7f74:	90032b1e 	bne	r18,zero,8c24 <___vfiprintf_internal_r+0x108c>
    7f78:	00800074 	movhi	r2,1
    7f7c:	10be2104 	addi	r2,r2,-1916
    7f80:	d8802615 	stw	r2,152(sp)
    7f84:	0039883a 	mov	fp,zero
    7f88:	48017b1e 	bne	r9,zero,8578 <___vfiprintf_internal_r+0x9e0>
    7f8c:	0013883a 	mov	r9,zero
    7f90:	0027883a 	mov	r19,zero
    7f94:	dd401a04 	addi	r21,sp,104
    7f98:	4825883a 	mov	r18,r9
    7f9c:	4cc0010e 	bge	r9,r19,7fa4 <___vfiprintf_internal_r+0x40c>
    7fa0:	9825883a 	mov	r18,r19
    7fa4:	e7003fcc 	andi	fp,fp,255
    7fa8:	e700201c 	xori	fp,fp,128
    7fac:	e73fe004 	addi	fp,fp,-128
    7fb0:	e0000126 	beq	fp,zero,7fb8 <___vfiprintf_internal_r+0x420>
    7fb4:	94800044 	addi	r18,r18,1
    7fb8:	a380008c 	andi	r14,r20,2
    7fbc:	70000126 	beq	r14,zero,7fc4 <___vfiprintf_internal_r+0x42c>
    7fc0:	94800084 	addi	r18,r18,2
    7fc4:	a700210c 	andi	fp,r20,132
    7fc8:	e001df1e 	bne	fp,zero,8748 <___vfiprintf_internal_r+0xbb0>
    7fcc:	8c87c83a 	sub	r3,r17,r18
    7fd0:	00c1dd0e 	bge	zero,r3,8748 <___vfiprintf_internal_r+0xbb0>
    7fd4:	01c00404 	movi	r7,16
    7fd8:	d8801c17 	ldw	r2,112(sp)
    7fdc:	38c3ad0e 	bge	r7,r3,8e94 <___vfiprintf_internal_r+0x12fc>
    7fe0:	02800074 	movhi	r10,1
    7fe4:	52be8604 	addi	r10,r10,-1512
    7fe8:	dc002915 	stw	r16,164(sp)
    7fec:	d9801b17 	ldw	r6,108(sp)
    7ff0:	da802415 	stw	r10,144(sp)
    7ff4:	03c001c4 	movi	r15,7
    7ff8:	da402515 	stw	r9,148(sp)
    7ffc:	db802815 	stw	r14,160(sp)
    8000:	1821883a 	mov	r16,r3
    8004:	00000506 	br	801c <___vfiprintf_internal_r+0x484>
    8008:	31400084 	addi	r5,r6,2
    800c:	42000204 	addi	r8,r8,8
    8010:	200d883a 	mov	r6,r4
    8014:	843ffc04 	addi	r16,r16,-16
    8018:	3c000d0e 	bge	r7,r16,8050 <___vfiprintf_internal_r+0x4b8>
    801c:	10800404 	addi	r2,r2,16
    8020:	31000044 	addi	r4,r6,1
    8024:	45800015 	stw	r22,0(r8)
    8028:	41c00115 	stw	r7,4(r8)
    802c:	d8801c15 	stw	r2,112(sp)
    8030:	d9001b15 	stw	r4,108(sp)
    8034:	793ff40e 	bge	r15,r4,8008 <___vfiprintf_internal_r+0x470>
    8038:	1001b51e 	bne	r2,zero,8710 <___vfiprintf_internal_r+0xb78>
    803c:	843ffc04 	addi	r16,r16,-16
    8040:	000d883a 	mov	r6,zero
    8044:	01400044 	movi	r5,1
    8048:	d811883a 	mov	r8,sp
    804c:	3c3ff316 	blt	r7,r16,801c <___vfiprintf_internal_r+0x484>
    8050:	8007883a 	mov	r3,r16
    8054:	da402517 	ldw	r9,148(sp)
    8058:	db802817 	ldw	r14,160(sp)
    805c:	dc002917 	ldw	r16,164(sp)
    8060:	da802417 	ldw	r10,144(sp)
    8064:	1885883a 	add	r2,r3,r2
    8068:	40c00115 	stw	r3,4(r8)
    806c:	42800015 	stw	r10,0(r8)
    8070:	d8801c15 	stw	r2,112(sp)
    8074:	d9401b15 	stw	r5,108(sp)
    8078:	00c001c4 	movi	r3,7
    807c:	19426016 	blt	r3,r5,8a00 <___vfiprintf_internal_r+0xe68>
    8080:	d8c01d87 	ldb	r3,118(sp)
    8084:	42000204 	addi	r8,r8,8
    8088:	29000044 	addi	r4,r5,1
    808c:	1801b31e 	bne	r3,zero,875c <___vfiprintf_internal_r+0xbc4>
    8090:	7001c026 	beq	r14,zero,8794 <___vfiprintf_internal_r+0xbfc>
    8094:	d8c01d04 	addi	r3,sp,116
    8098:	10800084 	addi	r2,r2,2
    809c:	40c00015 	stw	r3,0(r8)
    80a0:	00c00084 	movi	r3,2
    80a4:	40c00115 	stw	r3,4(r8)
    80a8:	d8801c15 	stw	r2,112(sp)
    80ac:	d9001b15 	stw	r4,108(sp)
    80b0:	00c001c4 	movi	r3,7
    80b4:	1902650e 	bge	r3,r4,8a4c <___vfiprintf_internal_r+0xeb4>
    80b8:	10029a1e 	bne	r2,zero,8b24 <___vfiprintf_internal_r+0xf8c>
    80bc:	00c02004 	movi	r3,128
    80c0:	01000044 	movi	r4,1
    80c4:	000b883a 	mov	r5,zero
    80c8:	d811883a 	mov	r8,sp
    80cc:	e0c1b31e 	bne	fp,r3,879c <___vfiprintf_internal_r+0xc04>
    80d0:	8cb9c83a 	sub	fp,r17,r18
    80d4:	0701b10e 	bge	zero,fp,879c <___vfiprintf_internal_r+0xc04>
    80d8:	01c00404 	movi	r7,16
    80dc:	3f03890e 	bge	r7,fp,8f04 <___vfiprintf_internal_r+0x136c>
    80e0:	00c00074 	movhi	r3,1
    80e4:	18fe8204 	addi	r3,r3,-1528
    80e8:	d8c02415 	stw	r3,144(sp)
    80ec:	8007883a 	mov	r3,r16
    80f0:	034001c4 	movi	r13,7
    80f4:	e021883a 	mov	r16,fp
    80f8:	da402515 	stw	r9,148(sp)
    80fc:	1839883a 	mov	fp,r3
    8100:	00000506 	br	8118 <___vfiprintf_internal_r+0x580>
    8104:	29800084 	addi	r6,r5,2
    8108:	42000204 	addi	r8,r8,8
    810c:	180b883a 	mov	r5,r3
    8110:	843ffc04 	addi	r16,r16,-16
    8114:	3c000d0e 	bge	r7,r16,814c <___vfiprintf_internal_r+0x5b4>
    8118:	10800404 	addi	r2,r2,16
    811c:	28c00044 	addi	r3,r5,1
    8120:	45c00015 	stw	r23,0(r8)
    8124:	41c00115 	stw	r7,4(r8)
    8128:	d8801c15 	stw	r2,112(sp)
    812c:	d8c01b15 	stw	r3,108(sp)
    8130:	68fff40e 	bge	r13,r3,8104 <___vfiprintf_internal_r+0x56c>
    8134:	1002241e 	bne	r2,zero,89c8 <___vfiprintf_internal_r+0xe30>
    8138:	843ffc04 	addi	r16,r16,-16
    813c:	01800044 	movi	r6,1
    8140:	000b883a 	mov	r5,zero
    8144:	d811883a 	mov	r8,sp
    8148:	3c3ff316 	blt	r7,r16,8118 <___vfiprintf_internal_r+0x580>
    814c:	da402517 	ldw	r9,148(sp)
    8150:	e007883a 	mov	r3,fp
    8154:	8039883a 	mov	fp,r16
    8158:	1821883a 	mov	r16,r3
    815c:	d8c02417 	ldw	r3,144(sp)
    8160:	1705883a 	add	r2,r2,fp
    8164:	47000115 	stw	fp,4(r8)
    8168:	40c00015 	stw	r3,0(r8)
    816c:	d8801c15 	stw	r2,112(sp)
    8170:	d9801b15 	stw	r6,108(sp)
    8174:	00c001c4 	movi	r3,7
    8178:	19827616 	blt	r3,r6,8b54 <___vfiprintf_internal_r+0xfbc>
    817c:	4cf9c83a 	sub	fp,r9,r19
    8180:	42000204 	addi	r8,r8,8
    8184:	31000044 	addi	r4,r6,1
    8188:	300b883a 	mov	r5,r6
    818c:	07018516 	blt	zero,fp,87a4 <___vfiprintf_internal_r+0xc0c>
    8190:	9885883a 	add	r2,r19,r2
    8194:	45400015 	stw	r21,0(r8)
    8198:	44c00115 	stw	r19,4(r8)
    819c:	d8801c15 	stw	r2,112(sp)
    81a0:	d9001b15 	stw	r4,108(sp)
    81a4:	00c001c4 	movi	r3,7
    81a8:	1901dd0e 	bge	r3,r4,8920 <___vfiprintf_internal_r+0xd88>
    81ac:	1002401e 	bne	r2,zero,8ab0 <___vfiprintf_internal_r+0xf18>
    81b0:	d8001b15 	stw	zero,108(sp)
    81b4:	a2c0010c 	andi	r11,r20,4
    81b8:	58000226 	beq	r11,zero,81c4 <___vfiprintf_internal_r+0x62c>
    81bc:	8ca7c83a 	sub	r19,r17,r18
    81c0:	04c2f216 	blt	zero,r19,8d8c <___vfiprintf_internal_r+0x11f4>
    81c4:	8c80010e 	bge	r17,r18,81cc <___vfiprintf_internal_r+0x634>
    81c8:	9023883a 	mov	r17,r18
    81cc:	da802317 	ldw	r10,140(sp)
    81d0:	5455883a 	add	r10,r10,r17
    81d4:	da802315 	stw	r10,140(sp)
    81d8:	d8001b15 	stw	zero,108(sp)
    81dc:	d811883a 	mov	r8,sp
    81e0:	003ea206 	br	7c6c <___vfiprintf_internal_r+0xd4>
    81e4:	a5000814 	ori	r20,r20,32
    81e8:	80c00007 	ldb	r3,0(r16)
    81ec:	003ec906 	br	7d14 <___vfiprintf_internal_r+0x17c>
    81f0:	80c00007 	ldb	r3,0(r16)
    81f4:	1b030926 	beq	r3,r12,8e1c <___vfiprintf_internal_r+0x1284>
    81f8:	a5000414 	ori	r20,r20,16
    81fc:	003ec506 	br	7d14 <___vfiprintf_internal_r+0x17c>
    8200:	21003fcc 	andi	r4,r4,255
    8204:	20035e1e 	bne	r4,zero,8f80 <___vfiprintf_internal_r+0x13e8>
    8208:	a080080c 	andi	r2,r20,32
    820c:	1002a526 	beq	r2,zero,8ca4 <___vfiprintf_internal_r+0x110c>
    8210:	da802217 	ldw	r10,136(sp)
    8214:	50800017 	ldw	r2,0(r10)
    8218:	da802317 	ldw	r10,140(sp)
    821c:	5007d7fa 	srai	r3,r10,31
    8220:	da802217 	ldw	r10,136(sp)
    8224:	10c00115 	stw	r3,4(r2)
    8228:	52800104 	addi	r10,r10,4
    822c:	da802215 	stw	r10,136(sp)
    8230:	da802317 	ldw	r10,140(sp)
    8234:	12800015 	stw	r10,0(r2)
    8238:	003e8c06 	br	7c6c <___vfiprintf_internal_r+0xd4>
    823c:	21003fcc 	andi	r4,r4,255
    8240:	2003511e 	bne	r4,zero,8f88 <___vfiprintf_internal_r+0x13f0>
    8244:	a080080c 	andi	r2,r20,32
    8248:	1000a126 	beq	r2,zero,84d0 <___vfiprintf_internal_r+0x938>
    824c:	da802217 	ldw	r10,136(sp)
    8250:	d8001d85 	stb	zero,118(sp)
    8254:	50800204 	addi	r2,r10,8
    8258:	54800017 	ldw	r18,0(r10)
    825c:	54c00117 	ldw	r19,4(r10)
    8260:	4802b416 	blt	r9,zero,8d34 <___vfiprintf_internal_r+0x119c>
    8264:	013fdfc4 	movi	r4,-129
    8268:	94c6b03a 	or	r3,r18,r19
    826c:	d8802215 	stw	r2,136(sp)
    8270:	a128703a 	and	r20,r20,r4
    8274:	1800a226 	beq	r3,zero,8500 <___vfiprintf_internal_r+0x968>
    8278:	0039883a 	mov	fp,zero
    827c:	dd401a04 	addi	r21,sp,104
    8280:	9006d0fa 	srli	r3,r18,3
    8284:	9808977a 	slli	r4,r19,29
    8288:	9826d0fa 	srli	r19,r19,3
    828c:	948001cc 	andi	r18,r18,7
    8290:	90800c04 	addi	r2,r18,48
    8294:	ad7fffc4 	addi	r21,r21,-1
    8298:	20e4b03a 	or	r18,r4,r3
    829c:	a8800005 	stb	r2,0(r21)
    82a0:	94c6b03a 	or	r3,r18,r19
    82a4:	183ff61e 	bne	r3,zero,8280 <___vfiprintf_internal_r+0x6e8>
    82a8:	a0c0004c 	andi	r3,r20,1
    82ac:	18005926 	beq	r3,zero,8414 <___vfiprintf_internal_r+0x87c>
    82b0:	10803fcc 	andi	r2,r2,255
    82b4:	1080201c 	xori	r2,r2,128
    82b8:	10bfe004 	addi	r2,r2,-128
    82bc:	00c00c04 	movi	r3,48
    82c0:	10c05426 	beq	r2,r3,8414 <___vfiprintf_internal_r+0x87c>
    82c4:	da801e17 	ldw	r10,120(sp)
    82c8:	a8bfffc4 	addi	r2,r21,-1
    82cc:	a8ffffc5 	stb	r3,-1(r21)
    82d0:	50a7c83a 	sub	r19,r10,r2
    82d4:	102b883a 	mov	r21,r2
    82d8:	003f2f06 	br	7f98 <___vfiprintf_internal_r+0x400>
    82dc:	21003fcc 	andi	r4,r4,255
    82e0:	2003421e 	bne	r4,zero,8fec <___vfiprintf_internal_r+0x1454>
    82e4:	00800074 	movhi	r2,1
    82e8:	10be2104 	addi	r2,r2,-1916
    82ec:	d8802615 	stw	r2,152(sp)
    82f0:	a080080c 	andi	r2,r20,32
    82f4:	1000aa26 	beq	r2,zero,85a0 <___vfiprintf_internal_r+0xa08>
    82f8:	da802217 	ldw	r10,136(sp)
    82fc:	54800017 	ldw	r18,0(r10)
    8300:	54c00117 	ldw	r19,4(r10)
    8304:	52800204 	addi	r10,r10,8
    8308:	da802215 	stw	r10,136(sp)
    830c:	a080004c 	andi	r2,r20,1
    8310:	1001d226 	beq	r2,zero,8a5c <___vfiprintf_internal_r+0xec4>
    8314:	94c4b03a 	or	r2,r18,r19
    8318:	1002351e 	bne	r2,zero,8bf0 <___vfiprintf_internal_r+0x1058>
    831c:	d8001d85 	stb	zero,118(sp)
    8320:	48022216 	blt	r9,zero,8bac <___vfiprintf_internal_r+0x1014>
    8324:	00bfdfc4 	movi	r2,-129
    8328:	a0a8703a 	and	r20,r20,r2
    832c:	003f1506 	br	7f84 <___vfiprintf_internal_r+0x3ec>
    8330:	da802217 	ldw	r10,136(sp)
    8334:	04800044 	movi	r18,1
    8338:	d8001d85 	stb	zero,118(sp)
    833c:	50800017 	ldw	r2,0(r10)
    8340:	52800104 	addi	r10,r10,4
    8344:	da802215 	stw	r10,136(sp)
    8348:	d8801005 	stb	r2,64(sp)
    834c:	9027883a 	mov	r19,r18
    8350:	dd401004 	addi	r21,sp,64
    8354:	0013883a 	mov	r9,zero
    8358:	003f1706 	br	7fb8 <___vfiprintf_internal_r+0x420>
    835c:	21003fcc 	andi	r4,r4,255
    8360:	2003201e 	bne	r4,zero,8fe4 <___vfiprintf_internal_r+0x144c>
    8364:	a080080c 	andi	r2,r20,32
    8368:	10004b26 	beq	r2,zero,8498 <___vfiprintf_internal_r+0x900>
    836c:	da802217 	ldw	r10,136(sp)
    8370:	50800117 	ldw	r2,4(r10)
    8374:	54800017 	ldw	r18,0(r10)
    8378:	52800204 	addi	r10,r10,8
    837c:	da802215 	stw	r10,136(sp)
    8380:	1027883a 	mov	r19,r2
    8384:	10022c16 	blt	r2,zero,8c38 <___vfiprintf_internal_r+0x10a0>
    8388:	df001d83 	ldbu	fp,118(sp)
    838c:	48007216 	blt	r9,zero,8558 <___vfiprintf_internal_r+0x9c0>
    8390:	00ffdfc4 	movi	r3,-129
    8394:	94c4b03a 	or	r2,r18,r19
    8398:	a0e8703a 	and	r20,r20,r3
    839c:	1000cc26 	beq	r2,zero,86d0 <___vfiprintf_internal_r+0xb38>
    83a0:	98021026 	beq	r19,zero,8be4 <___vfiprintf_internal_r+0x104c>
    83a4:	dc402415 	stw	r17,144(sp)
    83a8:	dc002515 	stw	r16,148(sp)
    83ac:	9823883a 	mov	r17,r19
    83b0:	9021883a 	mov	r16,r18
    83b4:	dd401a04 	addi	r21,sp,104
    83b8:	4825883a 	mov	r18,r9
    83bc:	4027883a 	mov	r19,r8
    83c0:	8009883a 	mov	r4,r16
    83c4:	880b883a 	mov	r5,r17
    83c8:	01800284 	movi	r6,10
    83cc:	000f883a 	mov	r7,zero
    83d0:	0009f780 	call	9f78 <__umoddi3>
    83d4:	10800c04 	addi	r2,r2,48
    83d8:	ad7fffc4 	addi	r21,r21,-1
    83dc:	8009883a 	mov	r4,r16
    83e0:	880b883a 	mov	r5,r17
    83e4:	a8800005 	stb	r2,0(r21)
    83e8:	01800284 	movi	r6,10
    83ec:	000f883a 	mov	r7,zero
    83f0:	0009a000 	call	9a00 <__udivdi3>
    83f4:	1021883a 	mov	r16,r2
    83f8:	10c4b03a 	or	r2,r2,r3
    83fc:	1823883a 	mov	r17,r3
    8400:	103fef1e 	bne	r2,zero,83c0 <___vfiprintf_internal_r+0x828>
    8404:	dc402417 	ldw	r17,144(sp)
    8408:	dc002517 	ldw	r16,148(sp)
    840c:	9013883a 	mov	r9,r18
    8410:	9811883a 	mov	r8,r19
    8414:	da801e17 	ldw	r10,120(sp)
    8418:	5567c83a 	sub	r19,r10,r21
    841c:	003ede06 	br	7f98 <___vfiprintf_internal_r+0x400>
    8420:	38803fcc 	andi	r2,r7,255
    8424:	1080201c 	xori	r2,r2,128
    8428:	10bfe004 	addi	r2,r2,-128
    842c:	1002371e 	bne	r2,zero,8d0c <___vfiprintf_internal_r+0x1174>
    8430:	01000044 	movi	r4,1
    8434:	01c00804 	movi	r7,32
    8438:	80c00007 	ldb	r3,0(r16)
    843c:	003e3506 	br	7d14 <___vfiprintf_internal_r+0x17c>
    8440:	a5000054 	ori	r20,r20,1
    8444:	80c00007 	ldb	r3,0(r16)
    8448:	003e3206 	br	7d14 <___vfiprintf_internal_r+0x17c>
    844c:	a5002014 	ori	r20,r20,128
    8450:	80c00007 	ldb	r3,0(r16)
    8454:	003e2f06 	br	7d14 <___vfiprintf_internal_r+0x17c>
    8458:	8015883a 	mov	r10,r16
    845c:	0023883a 	mov	r17,zero
    8460:	18bff404 	addi	r2,r3,-48
    8464:	50c00007 	ldb	r3,0(r10)
    8468:	8c4002a4 	muli	r17,r17,10
    846c:	84000044 	addi	r16,r16,1
    8470:	8015883a 	mov	r10,r16
    8474:	1463883a 	add	r17,r2,r17
    8478:	18bff404 	addi	r2,r3,-48
    847c:	30bff92e 	bgeu	r6,r2,8464 <___vfiprintf_internal_r+0x8cc>
    8480:	003e2506 	br	7d18 <___vfiprintf_internal_r+0x180>
    8484:	21003fcc 	andi	r4,r4,255
    8488:	2002d41e 	bne	r4,zero,8fdc <___vfiprintf_internal_r+0x1444>
    848c:	a5000414 	ori	r20,r20,16
    8490:	a080080c 	andi	r2,r20,32
    8494:	103fb51e 	bne	r2,zero,836c <___vfiprintf_internal_r+0x7d4>
    8498:	a080040c 	andi	r2,r20,16
    849c:	1001f826 	beq	r2,zero,8c80 <___vfiprintf_internal_r+0x10e8>
    84a0:	da802217 	ldw	r10,136(sp)
    84a4:	54800017 	ldw	r18,0(r10)
    84a8:	52800104 	addi	r10,r10,4
    84ac:	da802215 	stw	r10,136(sp)
    84b0:	9027d7fa 	srai	r19,r18,31
    84b4:	9805883a 	mov	r2,r19
    84b8:	003fb206 	br	8384 <___vfiprintf_internal_r+0x7ec>
    84bc:	21003fcc 	andi	r4,r4,255
    84c0:	2002c41e 	bne	r4,zero,8fd4 <___vfiprintf_internal_r+0x143c>
    84c4:	a5000414 	ori	r20,r20,16
    84c8:	a080080c 	andi	r2,r20,32
    84cc:	103f5f1e 	bne	r2,zero,824c <___vfiprintf_internal_r+0x6b4>
    84d0:	a080040c 	andi	r2,r20,16
    84d4:	10020f26 	beq	r2,zero,8d14 <___vfiprintf_internal_r+0x117c>
    84d8:	da802217 	ldw	r10,136(sp)
    84dc:	d8001d85 	stb	zero,118(sp)
    84e0:	0027883a 	mov	r19,zero
    84e4:	50800104 	addi	r2,r10,4
    84e8:	54800017 	ldw	r18,0(r10)
    84ec:	48021116 	blt	r9,zero,8d34 <___vfiprintf_internal_r+0x119c>
    84f0:	00ffdfc4 	movi	r3,-129
    84f4:	d8802215 	stw	r2,136(sp)
    84f8:	a0e8703a 	and	r20,r20,r3
    84fc:	903f5e1e 	bne	r18,zero,8278 <___vfiprintf_internal_r+0x6e0>
    8500:	0039883a 	mov	fp,zero
    8504:	4802a626 	beq	r9,zero,8fa0 <___vfiprintf_internal_r+0x1408>
    8508:	0025883a 	mov	r18,zero
    850c:	0027883a 	mov	r19,zero
    8510:	003f5a06 	br	827c <___vfiprintf_internal_r+0x6e4>
    8514:	21003fcc 	andi	r4,r4,255
    8518:	20029f1e 	bne	r4,zero,8f98 <___vfiprintf_internal_r+0x1400>
    851c:	a5000414 	ori	r20,r20,16
    8520:	a080080c 	andi	r2,r20,32
    8524:	10005e1e 	bne	r2,zero,86a0 <___vfiprintf_internal_r+0xb08>
    8528:	a080040c 	andi	r2,r20,16
    852c:	1001a21e 	bne	r2,zero,8bb8 <___vfiprintf_internal_r+0x1020>
    8530:	a080100c 	andi	r2,r20,64
    8534:	d8001d85 	stb	zero,118(sp)
    8538:	da802217 	ldw	r10,136(sp)
    853c:	1002231e 	bne	r2,zero,8dcc <___vfiprintf_internal_r+0x1234>
    8540:	50800104 	addi	r2,r10,4
    8544:	54800017 	ldw	r18,0(r10)
    8548:	0027883a 	mov	r19,zero
    854c:	4801a00e 	bge	r9,zero,8bd0 <___vfiprintf_internal_r+0x1038>
    8550:	d8802215 	stw	r2,136(sp)
    8554:	0039883a 	mov	fp,zero
    8558:	94c4b03a 	or	r2,r18,r19
    855c:	103f901e 	bne	r2,zero,83a0 <___vfiprintf_internal_r+0x808>
    8560:	00800044 	movi	r2,1
    8564:	10803fcc 	andi	r2,r2,255
    8568:	00c00044 	movi	r3,1
    856c:	10c05926 	beq	r2,r3,86d4 <___vfiprintf_internal_r+0xb3c>
    8570:	00c00084 	movi	r3,2
    8574:	10ffe41e 	bne	r2,r3,8508 <___vfiprintf_internal_r+0x970>
    8578:	0025883a 	mov	r18,zero
    857c:	0027883a 	mov	r19,zero
    8580:	00013d06 	br	8a78 <___vfiprintf_internal_r+0xee0>
    8584:	21003fcc 	andi	r4,r4,255
    8588:	2002811e 	bne	r4,zero,8f90 <___vfiprintf_internal_r+0x13f8>
    858c:	00800074 	movhi	r2,1
    8590:	10be1c04 	addi	r2,r2,-1936
    8594:	d8802615 	stw	r2,152(sp)
    8598:	a080080c 	andi	r2,r20,32
    859c:	103f561e 	bne	r2,zero,82f8 <___vfiprintf_internal_r+0x760>
    85a0:	a080040c 	andi	r2,r20,16
    85a4:	1001d126 	beq	r2,zero,8cec <___vfiprintf_internal_r+0x1154>
    85a8:	da802217 	ldw	r10,136(sp)
    85ac:	0027883a 	mov	r19,zero
    85b0:	54800017 	ldw	r18,0(r10)
    85b4:	52800104 	addi	r10,r10,4
    85b8:	da802215 	stw	r10,136(sp)
    85bc:	003f5306 	br	830c <___vfiprintf_internal_r+0x774>
    85c0:	da802217 	ldw	r10,136(sp)
    85c4:	d8001d85 	stb	zero,118(sp)
    85c8:	55400017 	ldw	r21,0(r10)
    85cc:	50c00104 	addi	r3,r10,4
    85d0:	a8024226 	beq	r21,zero,8edc <___vfiprintf_internal_r+0x1344>
    85d4:	48021816 	blt	r9,zero,8e38 <___vfiprintf_internal_r+0x12a0>
    85d8:	480d883a 	mov	r6,r9
    85dc:	000b883a 	mov	r5,zero
    85e0:	a809883a 	mov	r4,r21
    85e4:	d8c02a15 	stw	r3,168(sp)
    85e8:	da002b15 	stw	r8,172(sp)
    85ec:	da402c15 	stw	r9,176(sp)
    85f0:	0005d940 	call	5d94 <memchr>
    85f4:	d8c02a17 	ldw	r3,168(sp)
    85f8:	da002b17 	ldw	r8,172(sp)
    85fc:	da402c17 	ldw	r9,176(sp)
    8600:	10024826 	beq	r2,zero,8f24 <___vfiprintf_internal_r+0x138c>
    8604:	1567c83a 	sub	r19,r2,r21
    8608:	df001d83 	ldbu	fp,118(sp)
    860c:	d8c02215 	stw	r3,136(sp)
    8610:	0013883a 	mov	r9,zero
    8614:	003e6006 	br	7f98 <___vfiprintf_internal_r+0x400>
    8618:	21003fcc 	andi	r4,r4,255
    861c:	203fc026 	beq	r4,zero,8520 <___vfiprintf_internal_r+0x988>
    8620:	d9c01d85 	stb	r7,118(sp)
    8624:	003fbe06 	br	8520 <___vfiprintf_internal_r+0x988>
    8628:	da802217 	ldw	r10,136(sp)
    862c:	54400017 	ldw	r17,0(r10)
    8630:	50800104 	addi	r2,r10,4
    8634:	883e3b16 	blt	r17,zero,7f24 <___vfiprintf_internal_r+0x38c>
    8638:	d8802215 	stw	r2,136(sp)
    863c:	80c00007 	ldb	r3,0(r16)
    8640:	003db406 	br	7d14 <___vfiprintf_internal_r+0x17c>
    8644:	01000044 	movi	r4,1
    8648:	01c00ac4 	movi	r7,43
    864c:	80c00007 	ldb	r3,0(r16)
    8650:	003db006 	br	7d14 <___vfiprintf_internal_r+0x17c>
    8654:	80c00007 	ldb	r3,0(r16)
    8658:	82800044 	addi	r10,r16,1
    865c:	1b423c26 	beq	r3,r13,8f50 <___vfiprintf_internal_r+0x13b8>
    8660:	18bff404 	addi	r2,r3,-48
    8664:	0013883a 	mov	r9,zero
    8668:	30822b36 	bltu	r6,r2,8f18 <___vfiprintf_internal_r+0x1380>
    866c:	50c00007 	ldb	r3,0(r10)
    8670:	4a4002a4 	muli	r9,r9,10
    8674:	54000044 	addi	r16,r10,1
    8678:	8015883a 	mov	r10,r16
    867c:	4893883a 	add	r9,r9,r2
    8680:	18bff404 	addi	r2,r3,-48
    8684:	30bff92e 	bgeu	r6,r2,866c <___vfiprintf_internal_r+0xad4>
    8688:	483da30e 	bge	r9,zero,7d18 <___vfiprintf_internal_r+0x180>
    868c:	027fffc4 	movi	r9,-1
    8690:	003da106 	br	7d18 <___vfiprintf_internal_r+0x180>
    8694:	a5001014 	ori	r20,r20,64
    8698:	80c00007 	ldb	r3,0(r16)
    869c:	003d9d06 	br	7d14 <___vfiprintf_internal_r+0x17c>
    86a0:	da802217 	ldw	r10,136(sp)
    86a4:	d8001d85 	stb	zero,118(sp)
    86a8:	50c00204 	addi	r3,r10,8
    86ac:	54800017 	ldw	r18,0(r10)
    86b0:	54c00117 	ldw	r19,4(r10)
    86b4:	4801ca16 	blt	r9,zero,8de0 <___vfiprintf_internal_r+0x1248>
    86b8:	013fdfc4 	movi	r4,-129
    86bc:	94c4b03a 	or	r2,r18,r19
    86c0:	d8c02215 	stw	r3,136(sp)
    86c4:	a128703a 	and	r20,r20,r4
    86c8:	0039883a 	mov	fp,zero
    86cc:	103f341e 	bne	r2,zero,83a0 <___vfiprintf_internal_r+0x808>
    86d0:	483e2e26 	beq	r9,zero,7f8c <___vfiprintf_internal_r+0x3f4>
    86d4:	0025883a 	mov	r18,zero
    86d8:	94800c04 	addi	r18,r18,48
    86dc:	dc8019c5 	stb	r18,103(sp)
    86e0:	dcc02717 	ldw	r19,156(sp)
    86e4:	dd4019c4 	addi	r21,sp,103
    86e8:	003e2b06 	br	7f98 <___vfiprintf_internal_r+0x400>
    86ec:	21003fcc 	andi	r4,r4,255
    86f0:	2002361e 	bne	r4,zero,8fcc <___vfiprintf_internal_r+0x1434>
    86f4:	1801c126 	beq	r3,zero,8dfc <___vfiprintf_internal_r+0x1264>
    86f8:	04800044 	movi	r18,1
    86fc:	d8c01005 	stb	r3,64(sp)
    8700:	d8001d85 	stb	zero,118(sp)
    8704:	9027883a 	mov	r19,r18
    8708:	dd401004 	addi	r21,sp,64
    870c:	003f1106 	br	8354 <___vfiprintf_internal_r+0x7bc>
    8710:	d9402117 	ldw	r5,132(sp)
    8714:	d9002017 	ldw	r4,128(sp)
    8718:	d9801a04 	addi	r6,sp,104
    871c:	d9c02b15 	stw	r7,172(sp)
    8720:	dbc02a15 	stw	r15,168(sp)
    8724:	0007a840 	call	7a84 <__sprint_r.part.0>
    8728:	d9c02b17 	ldw	r7,172(sp)
    872c:	dbc02a17 	ldw	r15,168(sp)
    8730:	10006d1e 	bne	r2,zero,88e8 <___vfiprintf_internal_r+0xd50>
    8734:	d9801b17 	ldw	r6,108(sp)
    8738:	d8801c17 	ldw	r2,112(sp)
    873c:	d811883a 	mov	r8,sp
    8740:	31400044 	addi	r5,r6,1
    8744:	003e3306 	br	8014 <___vfiprintf_internal_r+0x47c>
    8748:	d9401b17 	ldw	r5,108(sp)
    874c:	d8801c17 	ldw	r2,112(sp)
    8750:	29000044 	addi	r4,r5,1
    8754:	d8c01d87 	ldb	r3,118(sp)
    8758:	183e4d26 	beq	r3,zero,8090 <___vfiprintf_internal_r+0x4f8>
    875c:	00c00044 	movi	r3,1
    8760:	d9401d84 	addi	r5,sp,118
    8764:	10c5883a 	add	r2,r2,r3
    8768:	41400015 	stw	r5,0(r8)
    876c:	40c00115 	stw	r3,4(r8)
    8770:	d8801c15 	stw	r2,112(sp)
    8774:	d9001b15 	stw	r4,108(sp)
    8778:	014001c4 	movi	r5,7
    877c:	2900a90e 	bge	r5,r4,8a24 <___vfiprintf_internal_r+0xe8c>
    8780:	1000da1e 	bne	r2,zero,8aec <___vfiprintf_internal_r+0xf54>
    8784:	7000ab1e 	bne	r14,zero,8a34 <___vfiprintf_internal_r+0xe9c>
    8788:	000b883a 	mov	r5,zero
    878c:	1809883a 	mov	r4,r3
    8790:	d811883a 	mov	r8,sp
    8794:	00c02004 	movi	r3,128
    8798:	e0fe4d26 	beq	fp,r3,80d0 <___vfiprintf_internal_r+0x538>
    879c:	4cf9c83a 	sub	fp,r9,r19
    87a0:	073e7b0e 	bge	zero,fp,8190 <___vfiprintf_internal_r+0x5f8>
    87a4:	01c00404 	movi	r7,16
    87a8:	3f01900e 	bge	r7,fp,8dec <___vfiprintf_internal_r+0x1254>
    87ac:	00c00074 	movhi	r3,1
    87b0:	18fe8204 	addi	r3,r3,-1528
    87b4:	d8c02415 	stw	r3,144(sp)
    87b8:	034001c4 	movi	r13,7
    87bc:	00000506 	br	87d4 <___vfiprintf_internal_r+0xc3c>
    87c0:	29000084 	addi	r4,r5,2
    87c4:	42000204 	addi	r8,r8,8
    87c8:	180b883a 	mov	r5,r3
    87cc:	e73ffc04 	addi	fp,fp,-16
    87d0:	3f000d0e 	bge	r7,fp,8808 <___vfiprintf_internal_r+0xc70>
    87d4:	10800404 	addi	r2,r2,16
    87d8:	28c00044 	addi	r3,r5,1
    87dc:	45c00015 	stw	r23,0(r8)
    87e0:	41c00115 	stw	r7,4(r8)
    87e4:	d8801c15 	stw	r2,112(sp)
    87e8:	d8c01b15 	stw	r3,108(sp)
    87ec:	68fff40e 	bge	r13,r3,87c0 <___vfiprintf_internal_r+0xc28>
    87f0:	1000101e 	bne	r2,zero,8834 <___vfiprintf_internal_r+0xc9c>
    87f4:	e73ffc04 	addi	fp,fp,-16
    87f8:	01000044 	movi	r4,1
    87fc:	000b883a 	mov	r5,zero
    8800:	d811883a 	mov	r8,sp
    8804:	3f3ff316 	blt	r7,fp,87d4 <___vfiprintf_internal_r+0xc3c>
    8808:	da802417 	ldw	r10,144(sp)
    880c:	1705883a 	add	r2,r2,fp
    8810:	47000115 	stw	fp,4(r8)
    8814:	42800015 	stw	r10,0(r8)
    8818:	d8801c15 	stw	r2,112(sp)
    881c:	d9001b15 	stw	r4,108(sp)
    8820:	00c001c4 	movi	r3,7
    8824:	19003616 	blt	r3,r4,8900 <___vfiprintf_internal_r+0xd68>
    8828:	42000204 	addi	r8,r8,8
    882c:	21000044 	addi	r4,r4,1
    8830:	003e5706 	br	8190 <___vfiprintf_internal_r+0x5f8>
    8834:	d9402117 	ldw	r5,132(sp)
    8838:	d9002017 	ldw	r4,128(sp)
    883c:	d9801a04 	addi	r6,sp,104
    8840:	d9c02b15 	stw	r7,172(sp)
    8844:	db402a15 	stw	r13,168(sp)
    8848:	0007a840 	call	7a84 <__sprint_r.part.0>
    884c:	d9c02b17 	ldw	r7,172(sp)
    8850:	db402a17 	ldw	r13,168(sp)
    8854:	1000241e 	bne	r2,zero,88e8 <___vfiprintf_internal_r+0xd50>
    8858:	d9401b17 	ldw	r5,108(sp)
    885c:	d8801c17 	ldw	r2,112(sp)
    8860:	d811883a 	mov	r8,sp
    8864:	29000044 	addi	r4,r5,1
    8868:	003fd806 	br	87cc <___vfiprintf_internal_r+0xc34>
    886c:	d9401b17 	ldw	r5,108(sp)
    8870:	00c00074 	movhi	r3,1
    8874:	18fe8604 	addi	r3,r3,-1512
    8878:	d8c02415 	stw	r3,144(sp)
    887c:	29400044 	addi	r5,r5,1
    8880:	d8c02417 	ldw	r3,144(sp)
    8884:	14c5883a 	add	r2,r2,r19
    8888:	44c00115 	stw	r19,4(r8)
    888c:	40c00015 	stw	r3,0(r8)
    8890:	d8801c15 	stw	r2,112(sp)
    8894:	d9401b15 	stw	r5,108(sp)
    8898:	00c001c4 	movi	r3,7
    889c:	1940070e 	bge	r3,r5,88bc <___vfiprintf_internal_r+0xd24>
    88a0:	103e4826 	beq	r2,zero,81c4 <___vfiprintf_internal_r+0x62c>
    88a4:	d9402117 	ldw	r5,132(sp)
    88a8:	d9002017 	ldw	r4,128(sp)
    88ac:	d9801a04 	addi	r6,sp,104
    88b0:	0007a840 	call	7a84 <__sprint_r.part.0>
    88b4:	10000c1e 	bne	r2,zero,88e8 <___vfiprintf_internal_r+0xd50>
    88b8:	d8801c17 	ldw	r2,112(sp)
    88bc:	8c80010e 	bge	r17,r18,88c4 <___vfiprintf_internal_r+0xd2c>
    88c0:	9023883a 	mov	r17,r18
    88c4:	da802317 	ldw	r10,140(sp)
    88c8:	5455883a 	add	r10,r10,r17
    88cc:	da802315 	stw	r10,140(sp)
    88d0:	103e4126 	beq	r2,zero,81d8 <___vfiprintf_internal_r+0x640>
    88d4:	d9402117 	ldw	r5,132(sp)
    88d8:	d9002017 	ldw	r4,128(sp)
    88dc:	d9801a04 	addi	r6,sp,104
    88e0:	0007a840 	call	7a84 <__sprint_r.part.0>
    88e4:	103e3c26 	beq	r2,zero,81d8 <___vfiprintf_internal_r+0x640>
    88e8:	dd002117 	ldw	r20,132(sp)
    88ec:	a080030b 	ldhu	r2,12(r20)
    88f0:	1080100c 	andi	r2,r2,64
    88f4:	1001231e 	bne	r2,zero,8d84 <___vfiprintf_internal_r+0x11ec>
    88f8:	d8802317 	ldw	r2,140(sp)
    88fc:	003d7b06 	br	7eec <___vfiprintf_internal_r+0x354>
    8900:	1000991e 	bne	r2,zero,8b68 <___vfiprintf_internal_r+0xfd0>
    8904:	00c00044 	movi	r3,1
    8908:	9805883a 	mov	r2,r19
    890c:	dd400015 	stw	r21,0(sp)
    8910:	dcc00115 	stw	r19,4(sp)
    8914:	dcc01c15 	stw	r19,112(sp)
    8918:	d8c01b15 	stw	r3,108(sp)
    891c:	d811883a 	mov	r8,sp
    8920:	42000204 	addi	r8,r8,8
    8924:	a2c0010c 	andi	r11,r20,4
    8928:	583fe426 	beq	r11,zero,88bc <___vfiprintf_internal_r+0xd24>
    892c:	8ca7c83a 	sub	r19,r17,r18
    8930:	04ffe20e 	bge	zero,r19,88bc <___vfiprintf_internal_r+0xd24>
    8934:	01c00404 	movi	r7,16
    8938:	3cffcc0e 	bge	r7,r19,886c <___vfiprintf_internal_r+0xcd4>
    893c:	02800074 	movhi	r10,1
    8940:	52be8604 	addi	r10,r10,-1512
    8944:	d9001b17 	ldw	r4,108(sp)
    8948:	da802415 	stw	r10,144(sp)
    894c:	382b883a 	mov	r21,r7
    8950:	050001c4 	movi	r20,7
    8954:	df002017 	ldw	fp,128(sp)
    8958:	00000506 	br	8970 <___vfiprintf_internal_r+0xdd8>
    895c:	21400084 	addi	r5,r4,2
    8960:	42000204 	addi	r8,r8,8
    8964:	1809883a 	mov	r4,r3
    8968:	9cfffc04 	addi	r19,r19,-16
    896c:	acffc40e 	bge	r21,r19,8880 <___vfiprintf_internal_r+0xce8>
    8970:	10800404 	addi	r2,r2,16
    8974:	20c00044 	addi	r3,r4,1
    8978:	45800015 	stw	r22,0(r8)
    897c:	45400115 	stw	r21,4(r8)
    8980:	d8801c15 	stw	r2,112(sp)
    8984:	d8c01b15 	stw	r3,108(sp)
    8988:	a0fff40e 	bge	r20,r3,895c <___vfiprintf_internal_r+0xdc4>
    898c:	1000041e 	bne	r2,zero,89a0 <___vfiprintf_internal_r+0xe08>
    8990:	01400044 	movi	r5,1
    8994:	0009883a 	mov	r4,zero
    8998:	d811883a 	mov	r8,sp
    899c:	003ff206 	br	8968 <___vfiprintf_internal_r+0xdd0>
    89a0:	d9402117 	ldw	r5,132(sp)
    89a4:	d9801a04 	addi	r6,sp,104
    89a8:	e009883a 	mov	r4,fp
    89ac:	0007a840 	call	7a84 <__sprint_r.part.0>
    89b0:	103fcd1e 	bne	r2,zero,88e8 <___vfiprintf_internal_r+0xd50>
    89b4:	d9001b17 	ldw	r4,108(sp)
    89b8:	d8801c17 	ldw	r2,112(sp)
    89bc:	d811883a 	mov	r8,sp
    89c0:	21400044 	addi	r5,r4,1
    89c4:	003fe806 	br	8968 <___vfiprintf_internal_r+0xdd0>
    89c8:	d9402117 	ldw	r5,132(sp)
    89cc:	d9002017 	ldw	r4,128(sp)
    89d0:	d9801a04 	addi	r6,sp,104
    89d4:	d9c02b15 	stw	r7,172(sp)
    89d8:	db402a15 	stw	r13,168(sp)
    89dc:	0007a840 	call	7a84 <__sprint_r.part.0>
    89e0:	d9c02b17 	ldw	r7,172(sp)
    89e4:	db402a17 	ldw	r13,168(sp)
    89e8:	103fbf1e 	bne	r2,zero,88e8 <___vfiprintf_internal_r+0xd50>
    89ec:	d9401b17 	ldw	r5,108(sp)
    89f0:	d8801c17 	ldw	r2,112(sp)
    89f4:	d811883a 	mov	r8,sp
    89f8:	29800044 	addi	r6,r5,1
    89fc:	003dc406 	br	8110 <___vfiprintf_internal_r+0x578>
    8a00:	1000d21e 	bne	r2,zero,8d4c <___vfiprintf_internal_r+0x11b4>
    8a04:	d8c01d87 	ldb	r3,118(sp)
    8a08:	18009526 	beq	r3,zero,8c60 <___vfiprintf_internal_r+0x10c8>
    8a0c:	00800044 	movi	r2,1
    8a10:	d8c01d84 	addi	r3,sp,118
    8a14:	1009883a 	mov	r4,r2
    8a18:	d8c00015 	stw	r3,0(sp)
    8a1c:	d8800115 	stw	r2,4(sp)
    8a20:	d811883a 	mov	r8,sp
    8a24:	200b883a 	mov	r5,r4
    8a28:	42000204 	addi	r8,r8,8
    8a2c:	21000044 	addi	r4,r4,1
    8a30:	003d9706 	br	8090 <___vfiprintf_internal_r+0x4f8>
    8a34:	d9001d04 	addi	r4,sp,116
    8a38:	00800084 	movi	r2,2
    8a3c:	d9000015 	stw	r4,0(sp)
    8a40:	d8800115 	stw	r2,4(sp)
    8a44:	1809883a 	mov	r4,r3
    8a48:	d811883a 	mov	r8,sp
    8a4c:	200b883a 	mov	r5,r4
    8a50:	42000204 	addi	r8,r8,8
    8a54:	21000044 	addi	r4,r4,1
    8a58:	003f4e06 	br	8794 <___vfiprintf_internal_r+0xbfc>
    8a5c:	d8001d85 	stb	zero,118(sp)
    8a60:	48005016 	blt	r9,zero,8ba4 <___vfiprintf_internal_r+0x100c>
    8a64:	00ffdfc4 	movi	r3,-129
    8a68:	94c4b03a 	or	r2,r18,r19
    8a6c:	a0e8703a 	and	r20,r20,r3
    8a70:	103d4426 	beq	r2,zero,7f84 <___vfiprintf_internal_r+0x3ec>
    8a74:	0039883a 	mov	fp,zero
    8a78:	d9002617 	ldw	r4,152(sp)
    8a7c:	dd401a04 	addi	r21,sp,104
    8a80:	908003cc 	andi	r2,r18,15
    8a84:	9806973a 	slli	r3,r19,28
    8a88:	2085883a 	add	r2,r4,r2
    8a8c:	9024d13a 	srli	r18,r18,4
    8a90:	10800003 	ldbu	r2,0(r2)
    8a94:	9826d13a 	srli	r19,r19,4
    8a98:	ad7fffc4 	addi	r21,r21,-1
    8a9c:	1ca4b03a 	or	r18,r3,r18
    8aa0:	a8800005 	stb	r2,0(r21)
    8aa4:	94c4b03a 	or	r2,r18,r19
    8aa8:	103ff51e 	bne	r2,zero,8a80 <___vfiprintf_internal_r+0xee8>
    8aac:	003e5906 	br	8414 <___vfiprintf_internal_r+0x87c>
    8ab0:	d9402117 	ldw	r5,132(sp)
    8ab4:	d9002017 	ldw	r4,128(sp)
    8ab8:	d9801a04 	addi	r6,sp,104
    8abc:	0007a840 	call	7a84 <__sprint_r.part.0>
    8ac0:	103f891e 	bne	r2,zero,88e8 <___vfiprintf_internal_r+0xd50>
    8ac4:	d8801c17 	ldw	r2,112(sp)
    8ac8:	d811883a 	mov	r8,sp
    8acc:	003f9506 	br	8924 <___vfiprintf_internal_r+0xd8c>
    8ad0:	d9402117 	ldw	r5,132(sp)
    8ad4:	d9002017 	ldw	r4,128(sp)
    8ad8:	d9801a04 	addi	r6,sp,104
    8adc:	0007a840 	call	7a84 <__sprint_r.part.0>
    8ae0:	103f811e 	bne	r2,zero,88e8 <___vfiprintf_internal_r+0xd50>
    8ae4:	d811883a 	mov	r8,sp
    8ae8:	003ced06 	br	7ea0 <___vfiprintf_internal_r+0x308>
    8aec:	d9402117 	ldw	r5,132(sp)
    8af0:	d9002017 	ldw	r4,128(sp)
    8af4:	d9801a04 	addi	r6,sp,104
    8af8:	da402c15 	stw	r9,176(sp)
    8afc:	db802a15 	stw	r14,168(sp)
    8b00:	0007a840 	call	7a84 <__sprint_r.part.0>
    8b04:	da402c17 	ldw	r9,176(sp)
    8b08:	db802a17 	ldw	r14,168(sp)
    8b0c:	103f761e 	bne	r2,zero,88e8 <___vfiprintf_internal_r+0xd50>
    8b10:	d9401b17 	ldw	r5,108(sp)
    8b14:	d8801c17 	ldw	r2,112(sp)
    8b18:	d811883a 	mov	r8,sp
    8b1c:	29000044 	addi	r4,r5,1
    8b20:	003d5b06 	br	8090 <___vfiprintf_internal_r+0x4f8>
    8b24:	d9402117 	ldw	r5,132(sp)
    8b28:	d9002017 	ldw	r4,128(sp)
    8b2c:	d9801a04 	addi	r6,sp,104
    8b30:	da402c15 	stw	r9,176(sp)
    8b34:	0007a840 	call	7a84 <__sprint_r.part.0>
    8b38:	da402c17 	ldw	r9,176(sp)
    8b3c:	103f6a1e 	bne	r2,zero,88e8 <___vfiprintf_internal_r+0xd50>
    8b40:	d9401b17 	ldw	r5,108(sp)
    8b44:	d8801c17 	ldw	r2,112(sp)
    8b48:	d811883a 	mov	r8,sp
    8b4c:	29000044 	addi	r4,r5,1
    8b50:	003f1006 	br	8794 <___vfiprintf_internal_r+0xbfc>
    8b54:	1000c31e 	bne	r2,zero,8e64 <___vfiprintf_internal_r+0x12cc>
    8b58:	01000044 	movi	r4,1
    8b5c:	000b883a 	mov	r5,zero
    8b60:	d811883a 	mov	r8,sp
    8b64:	003f0d06 	br	879c <___vfiprintf_internal_r+0xc04>
    8b68:	d9402117 	ldw	r5,132(sp)
    8b6c:	d9002017 	ldw	r4,128(sp)
    8b70:	d9801a04 	addi	r6,sp,104
    8b74:	0007a840 	call	7a84 <__sprint_r.part.0>
    8b78:	103f5b1e 	bne	r2,zero,88e8 <___vfiprintf_internal_r+0xd50>
    8b7c:	d9001b17 	ldw	r4,108(sp)
    8b80:	d8801c17 	ldw	r2,112(sp)
    8b84:	d811883a 	mov	r8,sp
    8b88:	21000044 	addi	r4,r4,1
    8b8c:	003d8006 	br	8190 <___vfiprintf_internal_r+0x5f8>
    8b90:	01000074 	movhi	r4,1
    8b94:	213e2104 	addi	r4,r4,-1916
    8b98:	d9002615 	stw	r4,152(sp)
    8b9c:	d8c02215 	stw	r3,136(sp)
    8ba0:	1029883a 	mov	r20,r2
    8ba4:	94c4b03a 	or	r2,r18,r19
    8ba8:	103fb21e 	bne	r2,zero,8a74 <___vfiprintf_internal_r+0xedc>
    8bac:	0039883a 	mov	fp,zero
    8bb0:	00800084 	movi	r2,2
    8bb4:	003e6b06 	br	8564 <___vfiprintf_internal_r+0x9cc>
    8bb8:	da802217 	ldw	r10,136(sp)
    8bbc:	d8001d85 	stb	zero,118(sp)
    8bc0:	0027883a 	mov	r19,zero
    8bc4:	50800104 	addi	r2,r10,4
    8bc8:	54800017 	ldw	r18,0(r10)
    8bcc:	483e6016 	blt	r9,zero,8550 <___vfiprintf_internal_r+0x9b8>
    8bd0:	00ffdfc4 	movi	r3,-129
    8bd4:	d8802215 	stw	r2,136(sp)
    8bd8:	a0e8703a 	and	r20,r20,r3
    8bdc:	0039883a 	mov	fp,zero
    8be0:	903ebb26 	beq	r18,zero,86d0 <___vfiprintf_internal_r+0xb38>
    8be4:	00800244 	movi	r2,9
    8be8:	14bdee36 	bltu	r2,r18,83a4 <___vfiprintf_internal_r+0x80c>
    8bec:	003eba06 	br	86d8 <___vfiprintf_internal_r+0xb40>
    8bf0:	00800c04 	movi	r2,48
    8bf4:	d8c01d45 	stb	r3,117(sp)
    8bf8:	d8801d05 	stb	r2,116(sp)
    8bfc:	d8001d85 	stb	zero,118(sp)
    8c00:	a0c00094 	ori	r3,r20,2
    8c04:	4800a916 	blt	r9,zero,8eac <___vfiprintf_internal_r+0x1314>
    8c08:	00bfdfc4 	movi	r2,-129
    8c0c:	a096703a 	and	r11,r20,r2
    8c10:	5d000094 	ori	r20,r11,2
    8c14:	0039883a 	mov	fp,zero
    8c18:	003f9706 	br	8a78 <___vfiprintf_internal_r+0xee0>
    8c1c:	8025883a 	mov	r18,r16
    8c20:	003c2e06 	br	7cdc <___vfiprintf_internal_r+0x144>
    8c24:	00800074 	movhi	r2,1
    8c28:	10be2104 	addi	r2,r2,-1916
    8c2c:	0039883a 	mov	fp,zero
    8c30:	d8802615 	stw	r2,152(sp)
    8c34:	003f9006 	br	8a78 <___vfiprintf_internal_r+0xee0>
    8c38:	04a5c83a 	sub	r18,zero,r18
    8c3c:	07000b44 	movi	fp,45
    8c40:	9004c03a 	cmpne	r2,r18,zero
    8c44:	04e7c83a 	sub	r19,zero,r19
    8c48:	df001d85 	stb	fp,118(sp)
    8c4c:	98a7c83a 	sub	r19,r19,r2
    8c50:	48009f16 	blt	r9,zero,8ed0 <___vfiprintf_internal_r+0x1338>
    8c54:	00bfdfc4 	movi	r2,-129
    8c58:	a0a8703a 	and	r20,r20,r2
    8c5c:	003dd006 	br	83a0 <___vfiprintf_internal_r+0x808>
    8c60:	70004c26 	beq	r14,zero,8d94 <___vfiprintf_internal_r+0x11fc>
    8c64:	00800084 	movi	r2,2
    8c68:	d8c01d04 	addi	r3,sp,116
    8c6c:	d8c00015 	stw	r3,0(sp)
    8c70:	d8800115 	stw	r2,4(sp)
    8c74:	01000044 	movi	r4,1
    8c78:	d811883a 	mov	r8,sp
    8c7c:	003f7306 	br	8a4c <___vfiprintf_internal_r+0xeb4>
    8c80:	a080100c 	andi	r2,r20,64
    8c84:	da802217 	ldw	r10,136(sp)
    8c88:	103e0626 	beq	r2,zero,84a4 <___vfiprintf_internal_r+0x90c>
    8c8c:	5480000f 	ldh	r18,0(r10)
    8c90:	52800104 	addi	r10,r10,4
    8c94:	da802215 	stw	r10,136(sp)
    8c98:	9027d7fa 	srai	r19,r18,31
    8c9c:	9805883a 	mov	r2,r19
    8ca0:	003db806 	br	8384 <___vfiprintf_internal_r+0x7ec>
    8ca4:	a080040c 	andi	r2,r20,16
    8ca8:	1000091e 	bne	r2,zero,8cd0 <___vfiprintf_internal_r+0x1138>
    8cac:	a2c0100c 	andi	r11,r20,64
    8cb0:	58000726 	beq	r11,zero,8cd0 <___vfiprintf_internal_r+0x1138>
    8cb4:	da802217 	ldw	r10,136(sp)
    8cb8:	50800017 	ldw	r2,0(r10)
    8cbc:	52800104 	addi	r10,r10,4
    8cc0:	da802215 	stw	r10,136(sp)
    8cc4:	da802317 	ldw	r10,140(sp)
    8cc8:	1280000d 	sth	r10,0(r2)
    8ccc:	003be706 	br	7c6c <___vfiprintf_internal_r+0xd4>
    8cd0:	da802217 	ldw	r10,136(sp)
    8cd4:	50800017 	ldw	r2,0(r10)
    8cd8:	52800104 	addi	r10,r10,4
    8cdc:	da802215 	stw	r10,136(sp)
    8ce0:	da802317 	ldw	r10,140(sp)
    8ce4:	12800015 	stw	r10,0(r2)
    8ce8:	003be006 	br	7c6c <___vfiprintf_internal_r+0xd4>
    8cec:	a080100c 	andi	r2,r20,64
    8cf0:	da802217 	ldw	r10,136(sp)
    8cf4:	10003026 	beq	r2,zero,8db8 <___vfiprintf_internal_r+0x1220>
    8cf8:	5480000b 	ldhu	r18,0(r10)
    8cfc:	52800104 	addi	r10,r10,4
    8d00:	0027883a 	mov	r19,zero
    8d04:	da802215 	stw	r10,136(sp)
    8d08:	003d8006 	br	830c <___vfiprintf_internal_r+0x774>
    8d0c:	80c00007 	ldb	r3,0(r16)
    8d10:	003c0006 	br	7d14 <___vfiprintf_internal_r+0x17c>
    8d14:	a080100c 	andi	r2,r20,64
    8d18:	d8001d85 	stb	zero,118(sp)
    8d1c:	da802217 	ldw	r10,136(sp)
    8d20:	1000201e 	bne	r2,zero,8da4 <___vfiprintf_internal_r+0x120c>
    8d24:	50800104 	addi	r2,r10,4
    8d28:	54800017 	ldw	r18,0(r10)
    8d2c:	0027883a 	mov	r19,zero
    8d30:	483def0e 	bge	r9,zero,84f0 <___vfiprintf_internal_r+0x958>
    8d34:	94c6b03a 	or	r3,r18,r19
    8d38:	d8802215 	stw	r2,136(sp)
    8d3c:	183d4e1e 	bne	r3,zero,8278 <___vfiprintf_internal_r+0x6e0>
    8d40:	0039883a 	mov	fp,zero
    8d44:	0005883a 	mov	r2,zero
    8d48:	003e0606 	br	8564 <___vfiprintf_internal_r+0x9cc>
    8d4c:	d9402117 	ldw	r5,132(sp)
    8d50:	d9002017 	ldw	r4,128(sp)
    8d54:	d9801a04 	addi	r6,sp,104
    8d58:	da402c15 	stw	r9,176(sp)
    8d5c:	db802a15 	stw	r14,168(sp)
    8d60:	0007a840 	call	7a84 <__sprint_r.part.0>
    8d64:	da402c17 	ldw	r9,176(sp)
    8d68:	db802a17 	ldw	r14,168(sp)
    8d6c:	103ede1e 	bne	r2,zero,88e8 <___vfiprintf_internal_r+0xd50>
    8d70:	d9401b17 	ldw	r5,108(sp)
    8d74:	d8801c17 	ldw	r2,112(sp)
    8d78:	d811883a 	mov	r8,sp
    8d7c:	29000044 	addi	r4,r5,1
    8d80:	003e7406 	br	8754 <___vfiprintf_internal_r+0xbbc>
    8d84:	00bfffc4 	movi	r2,-1
    8d88:	003c5806 	br	7eec <___vfiprintf_internal_r+0x354>
    8d8c:	d811883a 	mov	r8,sp
    8d90:	003ee806 	br	8934 <___vfiprintf_internal_r+0xd9c>
    8d94:	000b883a 	mov	r5,zero
    8d98:	01000044 	movi	r4,1
    8d9c:	d811883a 	mov	r8,sp
    8da0:	003e7c06 	br	8794 <___vfiprintf_internal_r+0xbfc>
    8da4:	50800104 	addi	r2,r10,4
    8da8:	5480000b 	ldhu	r18,0(r10)
    8dac:	0027883a 	mov	r19,zero
    8db0:	483dcf0e 	bge	r9,zero,84f0 <___vfiprintf_internal_r+0x958>
    8db4:	003fdf06 	br	8d34 <___vfiprintf_internal_r+0x119c>
    8db8:	54800017 	ldw	r18,0(r10)
    8dbc:	52800104 	addi	r10,r10,4
    8dc0:	0027883a 	mov	r19,zero
    8dc4:	da802215 	stw	r10,136(sp)
    8dc8:	003d5006 	br	830c <___vfiprintf_internal_r+0x774>
    8dcc:	50800104 	addi	r2,r10,4
    8dd0:	5480000b 	ldhu	r18,0(r10)
    8dd4:	0027883a 	mov	r19,zero
    8dd8:	483f7d0e 	bge	r9,zero,8bd0 <___vfiprintf_internal_r+0x1038>
    8ddc:	003ddc06 	br	8550 <___vfiprintf_internal_r+0x9b8>
    8de0:	d8c02215 	stw	r3,136(sp)
    8de4:	0039883a 	mov	fp,zero
    8de8:	003ddb06 	br	8558 <___vfiprintf_internal_r+0x9c0>
    8dec:	02800074 	movhi	r10,1
    8df0:	52be8204 	addi	r10,r10,-1528
    8df4:	da802415 	stw	r10,144(sp)
    8df8:	003e8306 	br	8808 <___vfiprintf_internal_r+0xc70>
    8dfc:	d8801c17 	ldw	r2,112(sp)
    8e00:	dd002117 	ldw	r20,132(sp)
    8e04:	103eb926 	beq	r2,zero,88ec <___vfiprintf_internal_r+0xd54>
    8e08:	d9002017 	ldw	r4,128(sp)
    8e0c:	d9801a04 	addi	r6,sp,104
    8e10:	a00b883a 	mov	r5,r20
    8e14:	0007a840 	call	7a84 <__sprint_r.part.0>
    8e18:	003eb406 	br	88ec <___vfiprintf_internal_r+0xd54>
    8e1c:	80c00043 	ldbu	r3,1(r16)
    8e20:	a5000814 	ori	r20,r20,32
    8e24:	84000044 	addi	r16,r16,1
    8e28:	18c03fcc 	andi	r3,r3,255
    8e2c:	18c0201c 	xori	r3,r3,128
    8e30:	18ffe004 	addi	r3,r3,-128
    8e34:	003bb706 	br	7d14 <___vfiprintf_internal_r+0x17c>
    8e38:	a809883a 	mov	r4,r21
    8e3c:	d8c02a15 	stw	r3,168(sp)
    8e40:	da002b15 	stw	r8,172(sp)
    8e44:	00004ec0 	call	4ec <strlen>
    8e48:	d8c02a17 	ldw	r3,168(sp)
    8e4c:	1027883a 	mov	r19,r2
    8e50:	df001d83 	ldbu	fp,118(sp)
    8e54:	d8c02215 	stw	r3,136(sp)
    8e58:	0013883a 	mov	r9,zero
    8e5c:	da002b17 	ldw	r8,172(sp)
    8e60:	003c4d06 	br	7f98 <___vfiprintf_internal_r+0x400>
    8e64:	d9402117 	ldw	r5,132(sp)
    8e68:	d9002017 	ldw	r4,128(sp)
    8e6c:	d9801a04 	addi	r6,sp,104
    8e70:	da402c15 	stw	r9,176(sp)
    8e74:	0007a840 	call	7a84 <__sprint_r.part.0>
    8e78:	da402c17 	ldw	r9,176(sp)
    8e7c:	103e9a1e 	bne	r2,zero,88e8 <___vfiprintf_internal_r+0xd50>
    8e80:	d9401b17 	ldw	r5,108(sp)
    8e84:	d8801c17 	ldw	r2,112(sp)
    8e88:	d811883a 	mov	r8,sp
    8e8c:	29000044 	addi	r4,r5,1
    8e90:	003e4206 	br	879c <___vfiprintf_internal_r+0xc04>
    8e94:	d9401b17 	ldw	r5,108(sp)
    8e98:	01000074 	movhi	r4,1
    8e9c:	213e8604 	addi	r4,r4,-1512
    8ea0:	d9002415 	stw	r4,144(sp)
    8ea4:	29400044 	addi	r5,r5,1
    8ea8:	003c6d06 	br	8060 <___vfiprintf_internal_r+0x4c8>
    8eac:	0039883a 	mov	fp,zero
    8eb0:	00800084 	movi	r2,2
    8eb4:	10803fcc 	andi	r2,r2,255
    8eb8:	01000044 	movi	r4,1
    8ebc:	11001e26 	beq	r2,r4,8f38 <___vfiprintf_internal_r+0x13a0>
    8ec0:	01000084 	movi	r4,2
    8ec4:	11001e1e 	bne	r2,r4,8f40 <___vfiprintf_internal_r+0x13a8>
    8ec8:	1829883a 	mov	r20,r3
    8ecc:	003eea06 	br	8a78 <___vfiprintf_internal_r+0xee0>
    8ed0:	a007883a 	mov	r3,r20
    8ed4:	00800044 	movi	r2,1
    8ed8:	003ff606 	br	8eb4 <___vfiprintf_internal_r+0x131c>
    8edc:	00800184 	movi	r2,6
    8ee0:	1240012e 	bgeu	r2,r9,8ee8 <___vfiprintf_internal_r+0x1350>
    8ee4:	1013883a 	mov	r9,r2
    8ee8:	4827883a 	mov	r19,r9
    8eec:	4825883a 	mov	r18,r9
    8ef0:	48001516 	blt	r9,zero,8f48 <___vfiprintf_internal_r+0x13b0>
    8ef4:	05400074 	movhi	r21,1
    8ef8:	d8c02215 	stw	r3,136(sp)
    8efc:	ad7e2604 	addi	r21,r21,-1896
    8f00:	003d1406 	br	8354 <___vfiprintf_internal_r+0x7bc>
    8f04:	02800074 	movhi	r10,1
    8f08:	52be8204 	addi	r10,r10,-1528
    8f0c:	da802415 	stw	r10,144(sp)
    8f10:	200d883a 	mov	r6,r4
    8f14:	003c9106 	br	815c <___vfiprintf_internal_r+0x5c4>
    8f18:	5021883a 	mov	r16,r10
    8f1c:	0013883a 	mov	r9,zero
    8f20:	003b7d06 	br	7d18 <___vfiprintf_internal_r+0x180>
    8f24:	4827883a 	mov	r19,r9
    8f28:	df001d83 	ldbu	fp,118(sp)
    8f2c:	d8c02215 	stw	r3,136(sp)
    8f30:	0013883a 	mov	r9,zero
    8f34:	003c1806 	br	7f98 <___vfiprintf_internal_r+0x400>
    8f38:	1829883a 	mov	r20,r3
    8f3c:	003d1806 	br	83a0 <___vfiprintf_internal_r+0x808>
    8f40:	1829883a 	mov	r20,r3
    8f44:	003ccd06 	br	827c <___vfiprintf_internal_r+0x6e4>
    8f48:	0025883a 	mov	r18,zero
    8f4c:	003fe906 	br	8ef4 <___vfiprintf_internal_r+0x135c>
    8f50:	d8802217 	ldw	r2,136(sp)
    8f54:	80c00043 	ldbu	r3,1(r16)
    8f58:	5021883a 	mov	r16,r10
    8f5c:	12400017 	ldw	r9,0(r2)
    8f60:	10800104 	addi	r2,r2,4
    8f64:	d8802215 	stw	r2,136(sp)
    8f68:	483faf0e 	bge	r9,zero,8e28 <___vfiprintf_internal_r+0x1290>
    8f6c:	18c03fcc 	andi	r3,r3,255
    8f70:	18c0201c 	xori	r3,r3,128
    8f74:	027fffc4 	movi	r9,-1
    8f78:	18ffe004 	addi	r3,r3,-128
    8f7c:	003b6506 	br	7d14 <___vfiprintf_internal_r+0x17c>
    8f80:	d9c01d85 	stb	r7,118(sp)
    8f84:	003ca006 	br	8208 <___vfiprintf_internal_r+0x670>
    8f88:	d9c01d85 	stb	r7,118(sp)
    8f8c:	003cad06 	br	8244 <___vfiprintf_internal_r+0x6ac>
    8f90:	d9c01d85 	stb	r7,118(sp)
    8f94:	003d7d06 	br	858c <___vfiprintf_internal_r+0x9f4>
    8f98:	d9c01d85 	stb	r7,118(sp)
    8f9c:	003d5f06 	br	851c <___vfiprintf_internal_r+0x984>
    8fa0:	a080004c 	andi	r2,r20,1
    8fa4:	0039883a 	mov	fp,zero
    8fa8:	10000526 	beq	r2,zero,8fc0 <___vfiprintf_internal_r+0x1428>
    8fac:	00800c04 	movi	r2,48
    8fb0:	d88019c5 	stb	r2,103(sp)
    8fb4:	dcc02717 	ldw	r19,156(sp)
    8fb8:	dd4019c4 	addi	r21,sp,103
    8fbc:	003bf606 	br	7f98 <___vfiprintf_internal_r+0x400>
    8fc0:	0027883a 	mov	r19,zero
    8fc4:	dd401a04 	addi	r21,sp,104
    8fc8:	003bf306 	br	7f98 <___vfiprintf_internal_r+0x400>
    8fcc:	d9c01d85 	stb	r7,118(sp)
    8fd0:	003dc806 	br	86f4 <___vfiprintf_internal_r+0xb5c>
    8fd4:	d9c01d85 	stb	r7,118(sp)
    8fd8:	003d3a06 	br	84c4 <___vfiprintf_internal_r+0x92c>
    8fdc:	d9c01d85 	stb	r7,118(sp)
    8fe0:	003d2a06 	br	848c <___vfiprintf_internal_r+0x8f4>
    8fe4:	d9c01d85 	stb	r7,118(sp)
    8fe8:	003cde06 	br	8364 <___vfiprintf_internal_r+0x7cc>
    8fec:	d9c01d85 	stb	r7,118(sp)
    8ff0:	003cbc06 	br	82e4 <___vfiprintf_internal_r+0x74c>

00008ff4 <__vfiprintf_internal>:
    8ff4:	00800074 	movhi	r2,1
    8ff8:	10858e04 	addi	r2,r2,5688
    8ffc:	300f883a 	mov	r7,r6
    9000:	280d883a 	mov	r6,r5
    9004:	200b883a 	mov	r5,r4
    9008:	11000017 	ldw	r4,0(r2)
    900c:	0007b981 	jmpi	7b98 <___vfiprintf_internal_r>

00009010 <__sbprintf>:
    9010:	2880030b 	ldhu	r2,12(r5)
    9014:	2ac01917 	ldw	r11,100(r5)
    9018:	2a80038b 	ldhu	r10,14(r5)
    901c:	2a400717 	ldw	r9,28(r5)
    9020:	2a000917 	ldw	r8,36(r5)
    9024:	defee204 	addi	sp,sp,-1144
    9028:	00c10004 	movi	r3,1024
    902c:	dc011a15 	stw	r16,1128(sp)
    9030:	10bfff4c 	andi	r2,r2,65533
    9034:	2821883a 	mov	r16,r5
    9038:	d8cb883a 	add	r5,sp,r3
    903c:	dc811c15 	stw	r18,1136(sp)
    9040:	dc411b15 	stw	r17,1132(sp)
    9044:	dfc11d15 	stw	ra,1140(sp)
    9048:	2025883a 	mov	r18,r4
    904c:	d881030d 	sth	r2,1036(sp)
    9050:	dac11915 	stw	r11,1124(sp)
    9054:	da81038d 	sth	r10,1038(sp)
    9058:	da410715 	stw	r9,1052(sp)
    905c:	da010915 	stw	r8,1060(sp)
    9060:	dec10015 	stw	sp,1024(sp)
    9064:	dec10415 	stw	sp,1040(sp)
    9068:	d8c10215 	stw	r3,1032(sp)
    906c:	d8c10515 	stw	r3,1044(sp)
    9070:	d8010615 	stw	zero,1048(sp)
    9074:	0007b980 	call	7b98 <___vfiprintf_internal_r>
    9078:	1023883a 	mov	r17,r2
    907c:	10000416 	blt	r2,zero,9090 <__sbprintf+0x80>
    9080:	d9410004 	addi	r5,sp,1024
    9084:	9009883a 	mov	r4,r18
    9088:	000444c0 	call	444c <_fflush_r>
    908c:	10000d1e 	bne	r2,zero,90c4 <__sbprintf+0xb4>
    9090:	d881030b 	ldhu	r2,1036(sp)
    9094:	1080100c 	andi	r2,r2,64
    9098:	10000326 	beq	r2,zero,90a8 <__sbprintf+0x98>
    909c:	8080030b 	ldhu	r2,12(r16)
    90a0:	10801014 	ori	r2,r2,64
    90a4:	8080030d 	sth	r2,12(r16)
    90a8:	8805883a 	mov	r2,r17
    90ac:	dfc11d17 	ldw	ra,1140(sp)
    90b0:	dc811c17 	ldw	r18,1136(sp)
    90b4:	dc411b17 	ldw	r17,1132(sp)
    90b8:	dc011a17 	ldw	r16,1128(sp)
    90bc:	dec11e04 	addi	sp,sp,1144
    90c0:	f800283a 	ret
    90c4:	047fffc4 	movi	r17,-1
    90c8:	003ff106 	br	9090 <__sbprintf+0x80>

000090cc <_write_r>:
    90cc:	defffd04 	addi	sp,sp,-12
    90d0:	2805883a 	mov	r2,r5
    90d4:	dc000015 	stw	r16,0(sp)
    90d8:	04000074 	movhi	r16,1
    90dc:	dc400115 	stw	r17,4(sp)
    90e0:	300b883a 	mov	r5,r6
    90e4:	840c6904 	addi	r16,r16,12708
    90e8:	2023883a 	mov	r17,r4
    90ec:	380d883a 	mov	r6,r7
    90f0:	1009883a 	mov	r4,r2
    90f4:	dfc00215 	stw	ra,8(sp)
    90f8:	80000015 	stw	zero,0(r16)
    90fc:	000d5900 	call	d590 <write>
    9100:	00ffffc4 	movi	r3,-1
    9104:	10c00526 	beq	r2,r3,911c <_write_r+0x50>
    9108:	dfc00217 	ldw	ra,8(sp)
    910c:	dc400117 	ldw	r17,4(sp)
    9110:	dc000017 	ldw	r16,0(sp)
    9114:	dec00304 	addi	sp,sp,12
    9118:	f800283a 	ret
    911c:	80c00017 	ldw	r3,0(r16)
    9120:	183ff926 	beq	r3,zero,9108 <_write_r+0x3c>
    9124:	88c00015 	stw	r3,0(r17)
    9128:	003ff706 	br	9108 <_write_r+0x3c>

0000912c <_close_r>:
    912c:	defffd04 	addi	sp,sp,-12
    9130:	dc000015 	stw	r16,0(sp)
    9134:	04000074 	movhi	r16,1
    9138:	dc400115 	stw	r17,4(sp)
    913c:	840c6904 	addi	r16,r16,12708
    9140:	2023883a 	mov	r17,r4
    9144:	2809883a 	mov	r4,r5
    9148:	dfc00215 	stw	ra,8(sp)
    914c:	80000015 	stw	zero,0(r16)
    9150:	000cd1c0 	call	cd1c <close>
    9154:	00ffffc4 	movi	r3,-1
    9158:	10c00526 	beq	r2,r3,9170 <_close_r+0x44>
    915c:	dfc00217 	ldw	ra,8(sp)
    9160:	dc400117 	ldw	r17,4(sp)
    9164:	dc000017 	ldw	r16,0(sp)
    9168:	dec00304 	addi	sp,sp,12
    916c:	f800283a 	ret
    9170:	80c00017 	ldw	r3,0(r16)
    9174:	183ff926 	beq	r3,zero,915c <_close_r+0x30>
    9178:	88c00015 	stw	r3,0(r17)
    917c:	003ff706 	br	915c <_close_r+0x30>

00009180 <_calloc_r>:
    9180:	298b383a 	mul	r5,r5,r6
    9184:	defffe04 	addi	sp,sp,-8
    9188:	dfc00115 	stw	ra,4(sp)
    918c:	dc000015 	stw	r16,0(sp)
    9190:	00055880 	call	5588 <_malloc_r>
    9194:	10002926 	beq	r2,zero,923c <_calloc_r+0xbc>
    9198:	11bfff17 	ldw	r6,-4(r2)
    919c:	1021883a 	mov	r16,r2
    91a0:	00bfff04 	movi	r2,-4
    91a4:	308c703a 	and	r6,r6,r2
    91a8:	00c00904 	movi	r3,36
    91ac:	308d883a 	add	r6,r6,r2
    91b0:	19801636 	bltu	r3,r6,920c <_calloc_r+0x8c>
    91b4:	008004c4 	movi	r2,19
    91b8:	11800b2e 	bgeu	r2,r6,91e8 <_calloc_r+0x68>
    91bc:	80000015 	stw	zero,0(r16)
    91c0:	80000115 	stw	zero,4(r16)
    91c4:	008006c4 	movi	r2,27
    91c8:	11801a2e 	bgeu	r2,r6,9234 <_calloc_r+0xb4>
    91cc:	80000215 	stw	zero,8(r16)
    91d0:	80000315 	stw	zero,12(r16)
    91d4:	30c0151e 	bne	r6,r3,922c <_calloc_r+0xac>
    91d8:	80000415 	stw	zero,16(r16)
    91dc:	80800604 	addi	r2,r16,24
    91e0:	80000515 	stw	zero,20(r16)
    91e4:	00000106 	br	91ec <_calloc_r+0x6c>
    91e8:	8005883a 	mov	r2,r16
    91ec:	10000015 	stw	zero,0(r2)
    91f0:	10000115 	stw	zero,4(r2)
    91f4:	10000215 	stw	zero,8(r2)
    91f8:	8005883a 	mov	r2,r16
    91fc:	dfc00117 	ldw	ra,4(sp)
    9200:	dc000017 	ldw	r16,0(sp)
    9204:	dec00204 	addi	sp,sp,8
    9208:	f800283a 	ret
    920c:	000b883a 	mov	r5,zero
    9210:	8009883a 	mov	r4,r16
    9214:	000611c0 	call	611c <memset>
    9218:	8005883a 	mov	r2,r16
    921c:	dfc00117 	ldw	ra,4(sp)
    9220:	dc000017 	ldw	r16,0(sp)
    9224:	dec00204 	addi	sp,sp,8
    9228:	f800283a 	ret
    922c:	80800404 	addi	r2,r16,16
    9230:	003fee06 	br	91ec <_calloc_r+0x6c>
    9234:	80800204 	addi	r2,r16,8
    9238:	003fec06 	br	91ec <_calloc_r+0x6c>
    923c:	0005883a 	mov	r2,zero
    9240:	003fee06 	br	91fc <_calloc_r+0x7c>

00009244 <_fclose_r>:
    9244:	28003926 	beq	r5,zero,932c <_fclose_r+0xe8>
    9248:	defffc04 	addi	sp,sp,-16
    924c:	dc400115 	stw	r17,4(sp)
    9250:	dc000015 	stw	r16,0(sp)
    9254:	dfc00315 	stw	ra,12(sp)
    9258:	dc800215 	stw	r18,8(sp)
    925c:	2023883a 	mov	r17,r4
    9260:	2821883a 	mov	r16,r5
    9264:	20000226 	beq	r4,zero,9270 <_fclose_r+0x2c>
    9268:	20800e17 	ldw	r2,56(r4)
    926c:	10002726 	beq	r2,zero,930c <_fclose_r+0xc8>
    9270:	8080030f 	ldh	r2,12(r16)
    9274:	1000071e 	bne	r2,zero,9294 <_fclose_r+0x50>
    9278:	0005883a 	mov	r2,zero
    927c:	dfc00317 	ldw	ra,12(sp)
    9280:	dc800217 	ldw	r18,8(sp)
    9284:	dc400117 	ldw	r17,4(sp)
    9288:	dc000017 	ldw	r16,0(sp)
    928c:	dec00404 	addi	sp,sp,16
    9290:	f800283a 	ret
    9294:	800b883a 	mov	r5,r16
    9298:	8809883a 	mov	r4,r17
    929c:	00042300 	call	4230 <__sflush_r>
    92a0:	1025883a 	mov	r18,r2
    92a4:	80800b17 	ldw	r2,44(r16)
    92a8:	10000426 	beq	r2,zero,92bc <_fclose_r+0x78>
    92ac:	81400717 	ldw	r5,28(r16)
    92b0:	8809883a 	mov	r4,r17
    92b4:	103ee83a 	callr	r2
    92b8:	10001616 	blt	r2,zero,9314 <_fclose_r+0xd0>
    92bc:	8080030b 	ldhu	r2,12(r16)
    92c0:	1080200c 	andi	r2,r2,128
    92c4:	1000151e 	bne	r2,zero,931c <_fclose_r+0xd8>
    92c8:	81400c17 	ldw	r5,48(r16)
    92cc:	28000526 	beq	r5,zero,92e4 <_fclose_r+0xa0>
    92d0:	80801004 	addi	r2,r16,64
    92d4:	28800226 	beq	r5,r2,92e0 <_fclose_r+0x9c>
    92d8:	8809883a 	mov	r4,r17
    92dc:	000499c0 	call	499c <_free_r>
    92e0:	80000c15 	stw	zero,48(r16)
    92e4:	81401117 	ldw	r5,68(r16)
    92e8:	28000326 	beq	r5,zero,92f8 <_fclose_r+0xb4>
    92ec:	8809883a 	mov	r4,r17
    92f0:	000499c0 	call	499c <_free_r>
    92f4:	80001115 	stw	zero,68(r16)
    92f8:	00048380 	call	4838 <__sfp_lock_acquire>
    92fc:	8000030d 	sth	zero,12(r16)
    9300:	000483c0 	call	483c <__sfp_lock_release>
    9304:	9005883a 	mov	r2,r18
    9308:	003fdc06 	br	927c <_fclose_r+0x38>
    930c:	00048280 	call	4828 <__sinit>
    9310:	003fd706 	br	9270 <_fclose_r+0x2c>
    9314:	04bfffc4 	movi	r18,-1
    9318:	003fe806 	br	92bc <_fclose_r+0x78>
    931c:	81400417 	ldw	r5,16(r16)
    9320:	8809883a 	mov	r4,r17
    9324:	000499c0 	call	499c <_free_r>
    9328:	003fe706 	br	92c8 <_fclose_r+0x84>
    932c:	0005883a 	mov	r2,zero
    9330:	f800283a 	ret

00009334 <fclose>:
    9334:	00800074 	movhi	r2,1
    9338:	10858e04 	addi	r2,r2,5688
    933c:	200b883a 	mov	r5,r4
    9340:	11000017 	ldw	r4,0(r2)
    9344:	00092441 	jmpi	9244 <_fclose_r>

00009348 <__fputwc>:
    9348:	defff804 	addi	sp,sp,-32
    934c:	dcc00415 	stw	r19,16(sp)
    9350:	dc800315 	stw	r18,12(sp)
    9354:	dc000115 	stw	r16,4(sp)
    9358:	dfc00715 	stw	ra,28(sp)
    935c:	dd400615 	stw	r21,24(sp)
    9360:	dd000515 	stw	r20,20(sp)
    9364:	dc400215 	stw	r17,8(sp)
    9368:	2027883a 	mov	r19,r4
    936c:	2825883a 	mov	r18,r5
    9370:	3021883a 	mov	r16,r6
    9374:	00053780 	call	5378 <__locale_mb_cur_max>
    9378:	00c00044 	movi	r3,1
    937c:	10c03e26 	beq	r2,r3,9478 <__fputwc+0x130>
    9380:	81c01704 	addi	r7,r16,92
    9384:	900d883a 	mov	r6,r18
    9388:	d80b883a 	mov	r5,sp
    938c:	9809883a 	mov	r4,r19
    9390:	00098180 	call	9818 <_wcrtomb_r>
    9394:	1029883a 	mov	r20,r2
    9398:	00bfffc4 	movi	r2,-1
    939c:	a0802026 	beq	r20,r2,9420 <__fputwc+0xd8>
    93a0:	d9400003 	ldbu	r5,0(sp)
    93a4:	a0001c26 	beq	r20,zero,9418 <__fputwc+0xd0>
    93a8:	0023883a 	mov	r17,zero
    93ac:	05400284 	movi	r21,10
    93b0:	00000906 	br	93d8 <__fputwc+0x90>
    93b4:	80800017 	ldw	r2,0(r16)
    93b8:	11400005 	stb	r5,0(r2)
    93bc:	80c00017 	ldw	r3,0(r16)
    93c0:	18c00044 	addi	r3,r3,1
    93c4:	80c00015 	stw	r3,0(r16)
    93c8:	8c400044 	addi	r17,r17,1
    93cc:	dc45883a 	add	r2,sp,r17
    93d0:	8d00112e 	bgeu	r17,r20,9418 <__fputwc+0xd0>
    93d4:	11400003 	ldbu	r5,0(r2)
    93d8:	80c00217 	ldw	r3,8(r16)
    93dc:	18ffffc4 	addi	r3,r3,-1
    93e0:	80c00215 	stw	r3,8(r16)
    93e4:	183ff30e 	bge	r3,zero,93b4 <__fputwc+0x6c>
    93e8:	80800617 	ldw	r2,24(r16)
    93ec:	18801916 	blt	r3,r2,9454 <__fputwc+0x10c>
    93f0:	80800017 	ldw	r2,0(r16)
    93f4:	11400005 	stb	r5,0(r2)
    93f8:	80800017 	ldw	r2,0(r16)
    93fc:	10c00003 	ldbu	r3,0(r2)
    9400:	10800044 	addi	r2,r2,1
    9404:	1d402326 	beq	r3,r21,9494 <__fputwc+0x14c>
    9408:	80800015 	stw	r2,0(r16)
    940c:	8c400044 	addi	r17,r17,1
    9410:	dc45883a 	add	r2,sp,r17
    9414:	8d3fef36 	bltu	r17,r20,93d4 <__fputwc+0x8c>
    9418:	9005883a 	mov	r2,r18
    941c:	00000406 	br	9430 <__fputwc+0xe8>
    9420:	80c0030b 	ldhu	r3,12(r16)
    9424:	a005883a 	mov	r2,r20
    9428:	18c01014 	ori	r3,r3,64
    942c:	80c0030d 	sth	r3,12(r16)
    9430:	dfc00717 	ldw	ra,28(sp)
    9434:	dd400617 	ldw	r21,24(sp)
    9438:	dd000517 	ldw	r20,20(sp)
    943c:	dcc00417 	ldw	r19,16(sp)
    9440:	dc800317 	ldw	r18,12(sp)
    9444:	dc400217 	ldw	r17,8(sp)
    9448:	dc000117 	ldw	r16,4(sp)
    944c:	dec00804 	addi	sp,sp,32
    9450:	f800283a 	ret
    9454:	800d883a 	mov	r6,r16
    9458:	29403fcc 	andi	r5,r5,255
    945c:	9809883a 	mov	r4,r19
    9460:	00096c00 	call	96c0 <__swbuf_r>
    9464:	10bfffe0 	cmpeqi	r2,r2,-1
    9468:	10803fcc 	andi	r2,r2,255
    946c:	103fd626 	beq	r2,zero,93c8 <__fputwc+0x80>
    9470:	00bfffc4 	movi	r2,-1
    9474:	003fee06 	br	9430 <__fputwc+0xe8>
    9478:	90ffffc4 	addi	r3,r18,-1
    947c:	01003f84 	movi	r4,254
    9480:	20ffbf36 	bltu	r4,r3,9380 <__fputwc+0x38>
    9484:	900b883a 	mov	r5,r18
    9488:	dc800005 	stb	r18,0(sp)
    948c:	1029883a 	mov	r20,r2
    9490:	003fc506 	br	93a8 <__fputwc+0x60>
    9494:	800d883a 	mov	r6,r16
    9498:	a80b883a 	mov	r5,r21
    949c:	9809883a 	mov	r4,r19
    94a0:	00096c00 	call	96c0 <__swbuf_r>
    94a4:	10bfffe0 	cmpeqi	r2,r2,-1
    94a8:	003fef06 	br	9468 <__fputwc+0x120>

000094ac <_fputwc_r>:
    94ac:	3080030b 	ldhu	r2,12(r6)
    94b0:	10c8000c 	andi	r3,r2,8192
    94b4:	1800051e 	bne	r3,zero,94cc <_fputwc_r+0x20>
    94b8:	30c01917 	ldw	r3,100(r6)
    94bc:	10880014 	ori	r2,r2,8192
    94c0:	3080030d 	sth	r2,12(r6)
    94c4:	18880014 	ori	r2,r3,8192
    94c8:	30801915 	stw	r2,100(r6)
    94cc:	00093481 	jmpi	9348 <__fputwc>

000094d0 <fputwc>:
    94d0:	00800074 	movhi	r2,1
    94d4:	defffc04 	addi	sp,sp,-16
    94d8:	10858e04 	addi	r2,r2,5688
    94dc:	dc000115 	stw	r16,4(sp)
    94e0:	14000017 	ldw	r16,0(r2)
    94e4:	dc400215 	stw	r17,8(sp)
    94e8:	dfc00315 	stw	ra,12(sp)
    94ec:	2023883a 	mov	r17,r4
    94f0:	80000226 	beq	r16,zero,94fc <fputwc+0x2c>
    94f4:	80800e17 	ldw	r2,56(r16)
    94f8:	10001026 	beq	r2,zero,953c <fputwc+0x6c>
    94fc:	2880030b 	ldhu	r2,12(r5)
    9500:	10c8000c 	andi	r3,r2,8192
    9504:	1800051e 	bne	r3,zero,951c <fputwc+0x4c>
    9508:	28c01917 	ldw	r3,100(r5)
    950c:	10880014 	ori	r2,r2,8192
    9510:	2880030d 	sth	r2,12(r5)
    9514:	18880014 	ori	r2,r3,8192
    9518:	28801915 	stw	r2,100(r5)
    951c:	280d883a 	mov	r6,r5
    9520:	8009883a 	mov	r4,r16
    9524:	880b883a 	mov	r5,r17
    9528:	dfc00317 	ldw	ra,12(sp)
    952c:	dc400217 	ldw	r17,8(sp)
    9530:	dc000117 	ldw	r16,4(sp)
    9534:	dec00404 	addi	sp,sp,16
    9538:	00093481 	jmpi	9348 <__fputwc>
    953c:	8009883a 	mov	r4,r16
    9540:	d9400015 	stw	r5,0(sp)
    9544:	00048280 	call	4828 <__sinit>
    9548:	d9400017 	ldw	r5,0(sp)
    954c:	003feb06 	br	94fc <fputwc+0x2c>

00009550 <_fstat_r>:
    9550:	defffd04 	addi	sp,sp,-12
    9554:	2805883a 	mov	r2,r5
    9558:	dc000015 	stw	r16,0(sp)
    955c:	04000074 	movhi	r16,1
    9560:	dc400115 	stw	r17,4(sp)
    9564:	840c6904 	addi	r16,r16,12708
    9568:	2023883a 	mov	r17,r4
    956c:	300b883a 	mov	r5,r6
    9570:	1009883a 	mov	r4,r2
    9574:	dfc00215 	stw	ra,8(sp)
    9578:	80000015 	stw	zero,0(r16)
    957c:	000ce680 	call	ce68 <fstat>
    9580:	00ffffc4 	movi	r3,-1
    9584:	10c00526 	beq	r2,r3,959c <_fstat_r+0x4c>
    9588:	dfc00217 	ldw	ra,8(sp)
    958c:	dc400117 	ldw	r17,4(sp)
    9590:	dc000017 	ldw	r16,0(sp)
    9594:	dec00304 	addi	sp,sp,12
    9598:	f800283a 	ret
    959c:	80c00017 	ldw	r3,0(r16)
    95a0:	183ff926 	beq	r3,zero,9588 <_fstat_r+0x38>
    95a4:	88c00015 	stw	r3,0(r17)
    95a8:	003ff706 	br	9588 <_fstat_r+0x38>

000095ac <_isatty_r>:
    95ac:	defffd04 	addi	sp,sp,-12
    95b0:	dc000015 	stw	r16,0(sp)
    95b4:	04000074 	movhi	r16,1
    95b8:	dc400115 	stw	r17,4(sp)
    95bc:	840c6904 	addi	r16,r16,12708
    95c0:	2023883a 	mov	r17,r4
    95c4:	2809883a 	mov	r4,r5
    95c8:	dfc00215 	stw	ra,8(sp)
    95cc:	80000015 	stw	zero,0(r16)
    95d0:	000cf680 	call	cf68 <isatty>
    95d4:	00ffffc4 	movi	r3,-1
    95d8:	10c00526 	beq	r2,r3,95f0 <_isatty_r+0x44>
    95dc:	dfc00217 	ldw	ra,8(sp)
    95e0:	dc400117 	ldw	r17,4(sp)
    95e4:	dc000017 	ldw	r16,0(sp)
    95e8:	dec00304 	addi	sp,sp,12
    95ec:	f800283a 	ret
    95f0:	80c00017 	ldw	r3,0(r16)
    95f4:	183ff926 	beq	r3,zero,95dc <_isatty_r+0x30>
    95f8:	88c00015 	stw	r3,0(r17)
    95fc:	003ff706 	br	95dc <_isatty_r+0x30>

00009600 <_lseek_r>:
    9600:	defffd04 	addi	sp,sp,-12
    9604:	2805883a 	mov	r2,r5
    9608:	dc000015 	stw	r16,0(sp)
    960c:	04000074 	movhi	r16,1
    9610:	dc400115 	stw	r17,4(sp)
    9614:	300b883a 	mov	r5,r6
    9618:	840c6904 	addi	r16,r16,12708
    961c:	2023883a 	mov	r17,r4
    9620:	380d883a 	mov	r6,r7
    9624:	1009883a 	mov	r4,r2
    9628:	dfc00215 	stw	ra,8(sp)
    962c:	80000015 	stw	zero,0(r16)
    9630:	000d1480 	call	d148 <lseek>
    9634:	00ffffc4 	movi	r3,-1
    9638:	10c00526 	beq	r2,r3,9650 <_lseek_r+0x50>
    963c:	dfc00217 	ldw	ra,8(sp)
    9640:	dc400117 	ldw	r17,4(sp)
    9644:	dc000017 	ldw	r16,0(sp)
    9648:	dec00304 	addi	sp,sp,12
    964c:	f800283a 	ret
    9650:	80c00017 	ldw	r3,0(r16)
    9654:	183ff926 	beq	r3,zero,963c <_lseek_r+0x3c>
    9658:	88c00015 	stw	r3,0(r17)
    965c:	003ff706 	br	963c <_lseek_r+0x3c>

00009660 <_read_r>:
    9660:	defffd04 	addi	sp,sp,-12
    9664:	2805883a 	mov	r2,r5
    9668:	dc000015 	stw	r16,0(sp)
    966c:	04000074 	movhi	r16,1
    9670:	dc400115 	stw	r17,4(sp)
    9674:	300b883a 	mov	r5,r6
    9678:	840c6904 	addi	r16,r16,12708
    967c:	2023883a 	mov	r17,r4
    9680:	380d883a 	mov	r6,r7
    9684:	1009883a 	mov	r4,r2
    9688:	dfc00215 	stw	ra,8(sp)
    968c:	80000015 	stw	zero,0(r16)
    9690:	000d3300 	call	d330 <read>
    9694:	00ffffc4 	movi	r3,-1
    9698:	10c00526 	beq	r2,r3,96b0 <_read_r+0x50>
    969c:	dfc00217 	ldw	ra,8(sp)
    96a0:	dc400117 	ldw	r17,4(sp)
    96a4:	dc000017 	ldw	r16,0(sp)
    96a8:	dec00304 	addi	sp,sp,12
    96ac:	f800283a 	ret
    96b0:	80c00017 	ldw	r3,0(r16)
    96b4:	183ff926 	beq	r3,zero,969c <_read_r+0x3c>
    96b8:	88c00015 	stw	r3,0(r17)
    96bc:	003ff706 	br	969c <_read_r+0x3c>

000096c0 <__swbuf_r>:
    96c0:	defffb04 	addi	sp,sp,-20
    96c4:	dcc00315 	stw	r19,12(sp)
    96c8:	dc800215 	stw	r18,8(sp)
    96cc:	dc000015 	stw	r16,0(sp)
    96d0:	dfc00415 	stw	ra,16(sp)
    96d4:	dc400115 	stw	r17,4(sp)
    96d8:	2025883a 	mov	r18,r4
    96dc:	2827883a 	mov	r19,r5
    96e0:	3021883a 	mov	r16,r6
    96e4:	20000226 	beq	r4,zero,96f0 <__swbuf_r+0x30>
    96e8:	20800e17 	ldw	r2,56(r4)
    96ec:	10004226 	beq	r2,zero,97f8 <__swbuf_r+0x138>
    96f0:	80800617 	ldw	r2,24(r16)
    96f4:	8100030b 	ldhu	r4,12(r16)
    96f8:	80800215 	stw	r2,8(r16)
    96fc:	2080020c 	andi	r2,r4,8
    9700:	10003626 	beq	r2,zero,97dc <__swbuf_r+0x11c>
    9704:	80c00417 	ldw	r3,16(r16)
    9708:	18003426 	beq	r3,zero,97dc <__swbuf_r+0x11c>
    970c:	2088000c 	andi	r2,r4,8192
    9710:	9c403fcc 	andi	r17,r19,255
    9714:	10001a26 	beq	r2,zero,9780 <__swbuf_r+0xc0>
    9718:	80800017 	ldw	r2,0(r16)
    971c:	81000517 	ldw	r4,20(r16)
    9720:	10c7c83a 	sub	r3,r2,r3
    9724:	1900200e 	bge	r3,r4,97a8 <__swbuf_r+0xe8>
    9728:	18c00044 	addi	r3,r3,1
    972c:	81000217 	ldw	r4,8(r16)
    9730:	11400044 	addi	r5,r2,1
    9734:	81400015 	stw	r5,0(r16)
    9738:	213fffc4 	addi	r4,r4,-1
    973c:	81000215 	stw	r4,8(r16)
    9740:	14c00005 	stb	r19,0(r2)
    9744:	80800517 	ldw	r2,20(r16)
    9748:	10c01e26 	beq	r2,r3,97c4 <__swbuf_r+0x104>
    974c:	8080030b 	ldhu	r2,12(r16)
    9750:	1080004c 	andi	r2,r2,1
    9754:	10000226 	beq	r2,zero,9760 <__swbuf_r+0xa0>
    9758:	00800284 	movi	r2,10
    975c:	88801926 	beq	r17,r2,97c4 <__swbuf_r+0x104>
    9760:	8805883a 	mov	r2,r17
    9764:	dfc00417 	ldw	ra,16(sp)
    9768:	dcc00317 	ldw	r19,12(sp)
    976c:	dc800217 	ldw	r18,8(sp)
    9770:	dc400117 	ldw	r17,4(sp)
    9774:	dc000017 	ldw	r16,0(sp)
    9778:	dec00504 	addi	sp,sp,20
    977c:	f800283a 	ret
    9780:	81401917 	ldw	r5,100(r16)
    9784:	00b7ffc4 	movi	r2,-8193
    9788:	21080014 	ori	r4,r4,8192
    978c:	2884703a 	and	r2,r5,r2
    9790:	80801915 	stw	r2,100(r16)
    9794:	80800017 	ldw	r2,0(r16)
    9798:	8100030d 	sth	r4,12(r16)
    979c:	81000517 	ldw	r4,20(r16)
    97a0:	10c7c83a 	sub	r3,r2,r3
    97a4:	193fe016 	blt	r3,r4,9728 <__swbuf_r+0x68>
    97a8:	800b883a 	mov	r5,r16
    97ac:	9009883a 	mov	r4,r18
    97b0:	000444c0 	call	444c <_fflush_r>
    97b4:	1000071e 	bne	r2,zero,97d4 <__swbuf_r+0x114>
    97b8:	80800017 	ldw	r2,0(r16)
    97bc:	00c00044 	movi	r3,1
    97c0:	003fda06 	br	972c <__swbuf_r+0x6c>
    97c4:	800b883a 	mov	r5,r16
    97c8:	9009883a 	mov	r4,r18
    97cc:	000444c0 	call	444c <_fflush_r>
    97d0:	103fe326 	beq	r2,zero,9760 <__swbuf_r+0xa0>
    97d4:	00bfffc4 	movi	r2,-1
    97d8:	003fe206 	br	9764 <__swbuf_r+0xa4>
    97dc:	800b883a 	mov	r5,r16
    97e0:	9009883a 	mov	r4,r18
    97e4:	00028540 	call	2854 <__swsetup_r>
    97e8:	103ffa1e 	bne	r2,zero,97d4 <__swbuf_r+0x114>
    97ec:	8100030b 	ldhu	r4,12(r16)
    97f0:	80c00417 	ldw	r3,16(r16)
    97f4:	003fc506 	br	970c <__swbuf_r+0x4c>
    97f8:	00048280 	call	4828 <__sinit>
    97fc:	003fbc06 	br	96f0 <__swbuf_r+0x30>

00009800 <__swbuf>:
    9800:	00800074 	movhi	r2,1
    9804:	10858e04 	addi	r2,r2,5688
    9808:	280d883a 	mov	r6,r5
    980c:	200b883a 	mov	r5,r4
    9810:	11000017 	ldw	r4,0(r2)
    9814:	00096c01 	jmpi	96c0 <__swbuf_r>

00009818 <_wcrtomb_r>:
    9818:	defff604 	addi	sp,sp,-40
    981c:	00800074 	movhi	r2,1
    9820:	dc800815 	stw	r18,32(sp)
    9824:	dc400715 	stw	r17,28(sp)
    9828:	dc000615 	stw	r16,24(sp)
    982c:	10859204 	addi	r2,r2,5704
    9830:	dfc00915 	stw	ra,36(sp)
    9834:	2021883a 	mov	r16,r4
    9838:	3823883a 	mov	r17,r7
    983c:	14800017 	ldw	r18,0(r2)
    9840:	28001426 	beq	r5,zero,9894 <_wcrtomb_r+0x7c>
    9844:	d9400415 	stw	r5,16(sp)
    9848:	d9800515 	stw	r6,20(sp)
    984c:	000536c0 	call	536c <__locale_charset>
    9850:	d9800517 	ldw	r6,20(sp)
    9854:	d9400417 	ldw	r5,16(sp)
    9858:	100f883a 	mov	r7,r2
    985c:	dc400015 	stw	r17,0(sp)
    9860:	8009883a 	mov	r4,r16
    9864:	903ee83a 	callr	r18
    9868:	00ffffc4 	movi	r3,-1
    986c:	10c0031e 	bne	r2,r3,987c <_wcrtomb_r+0x64>
    9870:	88000015 	stw	zero,0(r17)
    9874:	00c02284 	movi	r3,138
    9878:	80c00015 	stw	r3,0(r16)
    987c:	dfc00917 	ldw	ra,36(sp)
    9880:	dc800817 	ldw	r18,32(sp)
    9884:	dc400717 	ldw	r17,28(sp)
    9888:	dc000617 	ldw	r16,24(sp)
    988c:	dec00a04 	addi	sp,sp,40
    9890:	f800283a 	ret
    9894:	000536c0 	call	536c <__locale_charset>
    9898:	100f883a 	mov	r7,r2
    989c:	dc400015 	stw	r17,0(sp)
    98a0:	000d883a 	mov	r6,zero
    98a4:	d9400104 	addi	r5,sp,4
    98a8:	8009883a 	mov	r4,r16
    98ac:	903ee83a 	callr	r18
    98b0:	003fed06 	br	9868 <_wcrtomb_r+0x50>

000098b4 <wcrtomb>:
    98b4:	defff604 	addi	sp,sp,-40
    98b8:	00800074 	movhi	r2,1
    98bc:	dc800615 	stw	r18,24(sp)
    98c0:	dc400515 	stw	r17,20(sp)
    98c4:	10858e04 	addi	r2,r2,5688
    98c8:	dfc00915 	stw	ra,36(sp)
    98cc:	dd000815 	stw	r20,32(sp)
    98d0:	dcc00715 	stw	r19,28(sp)
    98d4:	dc000415 	stw	r16,16(sp)
    98d8:	3025883a 	mov	r18,r6
    98dc:	14400017 	ldw	r17,0(r2)
    98e0:	20001926 	beq	r4,zero,9948 <wcrtomb+0x94>
    98e4:	00800074 	movhi	r2,1
    98e8:	10859204 	addi	r2,r2,5704
    98ec:	15000017 	ldw	r20,0(r2)
    98f0:	2021883a 	mov	r16,r4
    98f4:	2827883a 	mov	r19,r5
    98f8:	000536c0 	call	536c <__locale_charset>
    98fc:	100f883a 	mov	r7,r2
    9900:	dc800015 	stw	r18,0(sp)
    9904:	980d883a 	mov	r6,r19
    9908:	800b883a 	mov	r5,r16
    990c:	8809883a 	mov	r4,r17
    9910:	a03ee83a 	callr	r20
    9914:	00ffffc4 	movi	r3,-1
    9918:	10c0031e 	bne	r2,r3,9928 <wcrtomb+0x74>
    991c:	90000015 	stw	zero,0(r18)
    9920:	00c02284 	movi	r3,138
    9924:	88c00015 	stw	r3,0(r17)
    9928:	dfc00917 	ldw	ra,36(sp)
    992c:	dd000817 	ldw	r20,32(sp)
    9930:	dcc00717 	ldw	r19,28(sp)
    9934:	dc800617 	ldw	r18,24(sp)
    9938:	dc400517 	ldw	r17,20(sp)
    993c:	dc000417 	ldw	r16,16(sp)
    9940:	dec00a04 	addi	sp,sp,40
    9944:	f800283a 	ret
    9948:	00800074 	movhi	r2,1
    994c:	10859204 	addi	r2,r2,5704
    9950:	14000017 	ldw	r16,0(r2)
    9954:	000536c0 	call	536c <__locale_charset>
    9958:	100f883a 	mov	r7,r2
    995c:	dc800015 	stw	r18,0(sp)
    9960:	000d883a 	mov	r6,zero
    9964:	d9400104 	addi	r5,sp,4
    9968:	8809883a 	mov	r4,r17
    996c:	803ee83a 	callr	r16
    9970:	003fe806 	br	9914 <wcrtomb+0x60>

00009974 <__ascii_wctomb>:
    9974:	28000526 	beq	r5,zero,998c <__ascii_wctomb+0x18>
    9978:	00803fc4 	movi	r2,255
    997c:	11800536 	bltu	r2,r6,9994 <__ascii_wctomb+0x20>
    9980:	29800005 	stb	r6,0(r5)
    9984:	00800044 	movi	r2,1
    9988:	f800283a 	ret
    998c:	0005883a 	mov	r2,zero
    9990:	f800283a 	ret
    9994:	00802284 	movi	r2,138
    9998:	20800015 	stw	r2,0(r4)
    999c:	00bfffc4 	movi	r2,-1
    99a0:	f800283a 	ret

000099a4 <_wctomb_r>:
    99a4:	00800074 	movhi	r2,1
    99a8:	defff904 	addi	sp,sp,-28
    99ac:	10859204 	addi	r2,r2,5704
    99b0:	dfc00615 	stw	ra,24(sp)
    99b4:	dc400515 	stw	r17,20(sp)
    99b8:	dc000415 	stw	r16,16(sp)
    99bc:	3823883a 	mov	r17,r7
    99c0:	14000017 	ldw	r16,0(r2)
    99c4:	d9000115 	stw	r4,4(sp)
    99c8:	d9400215 	stw	r5,8(sp)
    99cc:	d9800315 	stw	r6,12(sp)
    99d0:	000536c0 	call	536c <__locale_charset>
    99d4:	d9800317 	ldw	r6,12(sp)
    99d8:	d9400217 	ldw	r5,8(sp)
    99dc:	d9000117 	ldw	r4,4(sp)
    99e0:	100f883a 	mov	r7,r2
    99e4:	dc400015 	stw	r17,0(sp)
    99e8:	803ee83a 	callr	r16
    99ec:	dfc00617 	ldw	ra,24(sp)
    99f0:	dc400517 	ldw	r17,20(sp)
    99f4:	dc000417 	ldw	r16,16(sp)
    99f8:	dec00704 	addi	sp,sp,28
    99fc:	f800283a 	ret

00009a00 <__udivdi3>:
    9a00:	defff504 	addi	sp,sp,-44
    9a04:	dcc00415 	stw	r19,16(sp)
    9a08:	dc000115 	stw	r16,4(sp)
    9a0c:	dfc00a15 	stw	ra,40(sp)
    9a10:	df000915 	stw	fp,36(sp)
    9a14:	ddc00815 	stw	r23,32(sp)
    9a18:	dd800715 	stw	r22,28(sp)
    9a1c:	dd400615 	stw	r21,24(sp)
    9a20:	dd000515 	stw	r20,20(sp)
    9a24:	dc800315 	stw	r18,12(sp)
    9a28:	dc400215 	stw	r17,8(sp)
    9a2c:	2027883a 	mov	r19,r4
    9a30:	2821883a 	mov	r16,r5
    9a34:	3800411e 	bne	r7,zero,9b3c <__udivdi3+0x13c>
    9a38:	3023883a 	mov	r17,r6
    9a3c:	2025883a 	mov	r18,r4
    9a40:	2980522e 	bgeu	r5,r6,9b8c <__udivdi3+0x18c>
    9a44:	00bfffd4 	movui	r2,65535
    9a48:	282d883a 	mov	r22,r5
    9a4c:	1180a836 	bltu	r2,r6,9cf0 <__udivdi3+0x2f0>
    9a50:	00803fc4 	movi	r2,255
    9a54:	1185803a 	cmpltu	r2,r2,r6
    9a58:	100490fa 	slli	r2,r2,3
    9a5c:	3086d83a 	srl	r3,r6,r2
    9a60:	01000074 	movhi	r4,1
    9a64:	213e8a04 	addi	r4,r4,-1496
    9a68:	20c7883a 	add	r3,r4,r3
    9a6c:	18c00003 	ldbu	r3,0(r3)
    9a70:	1885883a 	add	r2,r3,r2
    9a74:	00c00804 	movi	r3,32
    9a78:	1887c83a 	sub	r3,r3,r2
    9a7c:	18000526 	beq	r3,zero,9a94 <__udivdi3+0x94>
    9a80:	80e0983a 	sll	r16,r16,r3
    9a84:	9884d83a 	srl	r2,r19,r2
    9a88:	30e2983a 	sll	r17,r6,r3
    9a8c:	98e4983a 	sll	r18,r19,r3
    9a90:	142cb03a 	or	r22,r2,r16
    9a94:	882ad43a 	srli	r21,r17,16
    9a98:	b009883a 	mov	r4,r22
    9a9c:	8d3fffcc 	andi	r20,r17,65535
    9aa0:	a80b883a 	mov	r5,r21
    9aa4:	000a60c0 	call	a60c <__umodsi3>
    9aa8:	b009883a 	mov	r4,r22
    9aac:	a80b883a 	mov	r5,r21
    9ab0:	1027883a 	mov	r19,r2
    9ab4:	000a5a80 	call	a5a8 <__udivsi3>
    9ab8:	102d883a 	mov	r22,r2
    9abc:	9826943a 	slli	r19,r19,16
    9ac0:	9004d43a 	srli	r2,r18,16
    9ac4:	a5a1383a 	mul	r16,r20,r22
    9ac8:	14c4b03a 	or	r2,r2,r19
    9acc:	1400052e 	bgeu	r2,r16,9ae4 <__udivdi3+0xe4>
    9ad0:	1445883a 	add	r2,r2,r17
    9ad4:	b0ffffc4 	addi	r3,r22,-1
    9ad8:	14400136 	bltu	r2,r17,9ae0 <__udivdi3+0xe0>
    9adc:	14012336 	bltu	r2,r16,9f6c <__udivdi3+0x56c>
    9ae0:	182d883a 	mov	r22,r3
    9ae4:	1421c83a 	sub	r16,r2,r16
    9ae8:	a80b883a 	mov	r5,r21
    9aec:	8009883a 	mov	r4,r16
    9af0:	000a60c0 	call	a60c <__umodsi3>
    9af4:	1027883a 	mov	r19,r2
    9af8:	a80b883a 	mov	r5,r21
    9afc:	8009883a 	mov	r4,r16
    9b00:	000a5a80 	call	a5a8 <__udivsi3>
    9b04:	9826943a 	slli	r19,r19,16
    9b08:	a0a9383a 	mul	r20,r20,r2
    9b0c:	94bfffcc 	andi	r18,r18,65535
    9b10:	94e4b03a 	or	r18,r18,r19
    9b14:	9500052e 	bgeu	r18,r20,9b2c <__udivdi3+0x12c>
    9b18:	8ca5883a 	add	r18,r17,r18
    9b1c:	10ffffc4 	addi	r3,r2,-1
    9b20:	9440f136 	bltu	r18,r17,9ee8 <__udivdi3+0x4e8>
    9b24:	9500f02e 	bgeu	r18,r20,9ee8 <__udivdi3+0x4e8>
    9b28:	10bfff84 	addi	r2,r2,-2
    9b2c:	b00c943a 	slli	r6,r22,16
    9b30:	0007883a 	mov	r3,zero
    9b34:	3084b03a 	or	r2,r6,r2
    9b38:	00005906 	br	9ca0 <__udivdi3+0x2a0>
    9b3c:	29c05636 	bltu	r5,r7,9c98 <__udivdi3+0x298>
    9b40:	00bfffd4 	movui	r2,65535
    9b44:	11c0622e 	bgeu	r2,r7,9cd0 <__udivdi3+0x2d0>
    9b48:	00804034 	movhi	r2,256
    9b4c:	10bfffc4 	addi	r2,r2,-1
    9b50:	11c0ee36 	bltu	r2,r7,9f0c <__udivdi3+0x50c>
    9b54:	00800404 	movi	r2,16
    9b58:	3886d83a 	srl	r3,r7,r2
    9b5c:	01000074 	movhi	r4,1
    9b60:	213e8a04 	addi	r4,r4,-1496
    9b64:	20c7883a 	add	r3,r4,r3
    9b68:	18c00003 	ldbu	r3,0(r3)
    9b6c:	05400804 	movi	r21,32
    9b70:	1885883a 	add	r2,r3,r2
    9b74:	a8abc83a 	sub	r21,r21,r2
    9b78:	a800621e 	bne	r21,zero,9d04 <__udivdi3+0x304>
    9b7c:	3c00e936 	bltu	r7,r16,9f24 <__udivdi3+0x524>
    9b80:	9985403a 	cmpgeu	r2,r19,r6
    9b84:	0007883a 	mov	r3,zero
    9b88:	00004506 	br	9ca0 <__udivdi3+0x2a0>
    9b8c:	3000041e 	bne	r6,zero,9ba0 <__udivdi3+0x1a0>
    9b90:	000b883a 	mov	r5,zero
    9b94:	01000044 	movi	r4,1
    9b98:	000a5a80 	call	a5a8 <__udivsi3>
    9b9c:	1023883a 	mov	r17,r2
    9ba0:	00bfffd4 	movui	r2,65535
    9ba4:	14404e2e 	bgeu	r2,r17,9ce0 <__udivdi3+0x2e0>
    9ba8:	00804034 	movhi	r2,256
    9bac:	10bfffc4 	addi	r2,r2,-1
    9bb0:	1440d836 	bltu	r2,r17,9f14 <__udivdi3+0x514>
    9bb4:	00800404 	movi	r2,16
    9bb8:	8886d83a 	srl	r3,r17,r2
    9bbc:	01000074 	movhi	r4,1
    9bc0:	213e8a04 	addi	r4,r4,-1496
    9bc4:	20c7883a 	add	r3,r4,r3
    9bc8:	18c00003 	ldbu	r3,0(r3)
    9bcc:	1885883a 	add	r2,r3,r2
    9bd0:	00c00804 	movi	r3,32
    9bd4:	1887c83a 	sub	r3,r3,r2
    9bd8:	18008f1e 	bne	r3,zero,9e18 <__udivdi3+0x418>
    9bdc:	882ad43a 	srli	r21,r17,16
    9be0:	8461c83a 	sub	r16,r16,r17
    9be4:	8d3fffcc 	andi	r20,r17,65535
    9be8:	00c00044 	movi	r3,1
    9bec:	8009883a 	mov	r4,r16
    9bf0:	a80b883a 	mov	r5,r21
    9bf4:	d8c00015 	stw	r3,0(sp)
    9bf8:	000a60c0 	call	a60c <__umodsi3>
    9bfc:	8009883a 	mov	r4,r16
    9c00:	a80b883a 	mov	r5,r21
    9c04:	1027883a 	mov	r19,r2
    9c08:	000a5a80 	call	a5a8 <__udivsi3>
    9c0c:	9826943a 	slli	r19,r19,16
    9c10:	9008d43a 	srli	r4,r18,16
    9c14:	1521383a 	mul	r16,r2,r20
    9c18:	102d883a 	mov	r22,r2
    9c1c:	24c8b03a 	or	r4,r4,r19
    9c20:	d8c00017 	ldw	r3,0(sp)
    9c24:	2400052e 	bgeu	r4,r16,9c3c <__udivdi3+0x23c>
    9c28:	2449883a 	add	r4,r4,r17
    9c2c:	b0bfffc4 	addi	r2,r22,-1
    9c30:	24400136 	bltu	r4,r17,9c38 <__udivdi3+0x238>
    9c34:	2400ca36 	bltu	r4,r16,9f60 <__udivdi3+0x560>
    9c38:	102d883a 	mov	r22,r2
    9c3c:	2421c83a 	sub	r16,r4,r16
    9c40:	a80b883a 	mov	r5,r21
    9c44:	8009883a 	mov	r4,r16
    9c48:	d8c00015 	stw	r3,0(sp)
    9c4c:	000a60c0 	call	a60c <__umodsi3>
    9c50:	1027883a 	mov	r19,r2
    9c54:	a80b883a 	mov	r5,r21
    9c58:	8009883a 	mov	r4,r16
    9c5c:	000a5a80 	call	a5a8 <__udivsi3>
    9c60:	9826943a 	slli	r19,r19,16
    9c64:	1529383a 	mul	r20,r2,r20
    9c68:	94bfffcc 	andi	r18,r18,65535
    9c6c:	94e4b03a 	or	r18,r18,r19
    9c70:	d8c00017 	ldw	r3,0(sp)
    9c74:	9500052e 	bgeu	r18,r20,9c8c <__udivdi3+0x28c>
    9c78:	8ca5883a 	add	r18,r17,r18
    9c7c:	113fffc4 	addi	r4,r2,-1
    9c80:	94409736 	bltu	r18,r17,9ee0 <__udivdi3+0x4e0>
    9c84:	9500962e 	bgeu	r18,r20,9ee0 <__udivdi3+0x4e0>
    9c88:	10bfff84 	addi	r2,r2,-2
    9c8c:	b00c943a 	slli	r6,r22,16
    9c90:	3084b03a 	or	r2,r6,r2
    9c94:	00000206 	br	9ca0 <__udivdi3+0x2a0>
    9c98:	0007883a 	mov	r3,zero
    9c9c:	0005883a 	mov	r2,zero
    9ca0:	dfc00a17 	ldw	ra,40(sp)
    9ca4:	df000917 	ldw	fp,36(sp)
    9ca8:	ddc00817 	ldw	r23,32(sp)
    9cac:	dd800717 	ldw	r22,28(sp)
    9cb0:	dd400617 	ldw	r21,24(sp)
    9cb4:	dd000517 	ldw	r20,20(sp)
    9cb8:	dcc00417 	ldw	r19,16(sp)
    9cbc:	dc800317 	ldw	r18,12(sp)
    9cc0:	dc400217 	ldw	r17,8(sp)
    9cc4:	dc000117 	ldw	r16,4(sp)
    9cc8:	dec00b04 	addi	sp,sp,44
    9ccc:	f800283a 	ret
    9cd0:	00803fc4 	movi	r2,255
    9cd4:	11c5803a 	cmpltu	r2,r2,r7
    9cd8:	100490fa 	slli	r2,r2,3
    9cdc:	003f9e06 	br	9b58 <__udivdi3+0x158>
    9ce0:	00803fc4 	movi	r2,255
    9ce4:	1445803a 	cmpltu	r2,r2,r17
    9ce8:	100490fa 	slli	r2,r2,3
    9cec:	003fb206 	br	9bb8 <__udivdi3+0x1b8>
    9cf0:	00804034 	movhi	r2,256
    9cf4:	10bfffc4 	addi	r2,r2,-1
    9cf8:	11808836 	bltu	r2,r6,9f1c <__udivdi3+0x51c>
    9cfc:	00800404 	movi	r2,16
    9d00:	003f5606 	br	9a5c <__udivdi3+0x5c>
    9d04:	30aed83a 	srl	r23,r6,r2
    9d08:	3d4e983a 	sll	r7,r7,r21
    9d0c:	80acd83a 	srl	r22,r16,r2
    9d10:	9884d83a 	srl	r2,r19,r2
    9d14:	3deeb03a 	or	r23,r7,r23
    9d18:	b824d43a 	srli	r18,r23,16
    9d1c:	8560983a 	sll	r16,r16,r21
    9d20:	b009883a 	mov	r4,r22
    9d24:	900b883a 	mov	r5,r18
    9d28:	3568983a 	sll	r20,r6,r21
    9d2c:	1420b03a 	or	r16,r2,r16
    9d30:	000a60c0 	call	a60c <__umodsi3>
    9d34:	b009883a 	mov	r4,r22
    9d38:	900b883a 	mov	r5,r18
    9d3c:	1023883a 	mov	r17,r2
    9d40:	000a5a80 	call	a5a8 <__udivsi3>
    9d44:	8808943a 	slli	r4,r17,16
    9d48:	bf3fffcc 	andi	fp,r23,65535
    9d4c:	8006d43a 	srli	r3,r16,16
    9d50:	e0a3383a 	mul	r17,fp,r2
    9d54:	100d883a 	mov	r6,r2
    9d58:	1906b03a 	or	r3,r3,r4
    9d5c:	1c40042e 	bgeu	r3,r17,9d70 <__udivdi3+0x370>
    9d60:	1dc7883a 	add	r3,r3,r23
    9d64:	10bfffc4 	addi	r2,r2,-1
    9d68:	1dc0752e 	bgeu	r3,r23,9f40 <__udivdi3+0x540>
    9d6c:	100d883a 	mov	r6,r2
    9d70:	1c63c83a 	sub	r17,r3,r17
    9d74:	900b883a 	mov	r5,r18
    9d78:	8809883a 	mov	r4,r17
    9d7c:	d9800015 	stw	r6,0(sp)
    9d80:	000a60c0 	call	a60c <__umodsi3>
    9d84:	102d883a 	mov	r22,r2
    9d88:	8809883a 	mov	r4,r17
    9d8c:	900b883a 	mov	r5,r18
    9d90:	000a5a80 	call	a5a8 <__udivsi3>
    9d94:	b02c943a 	slli	r22,r22,16
    9d98:	e089383a 	mul	r4,fp,r2
    9d9c:	843fffcc 	andi	r16,r16,65535
    9da0:	85a0b03a 	or	r16,r16,r22
    9da4:	d9800017 	ldw	r6,0(sp)
    9da8:	8100042e 	bgeu	r16,r4,9dbc <__udivdi3+0x3bc>
    9dac:	85e1883a 	add	r16,r16,r23
    9db0:	10ffffc4 	addi	r3,r2,-1
    9db4:	85c05e2e 	bgeu	r16,r23,9f30 <__udivdi3+0x530>
    9db8:	1805883a 	mov	r2,r3
    9dbc:	300c943a 	slli	r6,r6,16
    9dc0:	a17fffcc 	andi	r5,r20,65535
    9dc4:	a028d43a 	srli	r20,r20,16
    9dc8:	3084b03a 	or	r2,r6,r2
    9dcc:	10ffffcc 	andi	r3,r2,65535
    9dd0:	100cd43a 	srli	r6,r2,16
    9dd4:	194f383a 	mul	r7,r3,r5
    9dd8:	1d07383a 	mul	r3,r3,r20
    9ddc:	314b383a 	mul	r5,r6,r5
    9de0:	3810d43a 	srli	r8,r7,16
    9de4:	8121c83a 	sub	r16,r16,r4
    9de8:	1947883a 	add	r3,r3,r5
    9dec:	40c7883a 	add	r3,r8,r3
    9df0:	350d383a 	mul	r6,r6,r20
    9df4:	1940022e 	bgeu	r3,r5,9e00 <__udivdi3+0x400>
    9df8:	01000074 	movhi	r4,1
    9dfc:	310d883a 	add	r6,r6,r4
    9e00:	1828d43a 	srli	r20,r3,16
    9e04:	a18d883a 	add	r6,r20,r6
    9e08:	81803e36 	bltu	r16,r6,9f04 <__udivdi3+0x504>
    9e0c:	81803826 	beq	r16,r6,9ef0 <__udivdi3+0x4f0>
    9e10:	0007883a 	mov	r3,zero
    9e14:	003fa206 	br	9ca0 <__udivdi3+0x2a0>
    9e18:	88e2983a 	sll	r17,r17,r3
    9e1c:	80a8d83a 	srl	r20,r16,r2
    9e20:	80e0983a 	sll	r16,r16,r3
    9e24:	882ad43a 	srli	r21,r17,16
    9e28:	9884d83a 	srl	r2,r19,r2
    9e2c:	a009883a 	mov	r4,r20
    9e30:	a80b883a 	mov	r5,r21
    9e34:	142eb03a 	or	r23,r2,r16
    9e38:	98e4983a 	sll	r18,r19,r3
    9e3c:	000a60c0 	call	a60c <__umodsi3>
    9e40:	a009883a 	mov	r4,r20
    9e44:	a80b883a 	mov	r5,r21
    9e48:	1021883a 	mov	r16,r2
    9e4c:	000a5a80 	call	a5a8 <__udivsi3>
    9e50:	1039883a 	mov	fp,r2
    9e54:	8d3fffcc 	andi	r20,r17,65535
    9e58:	8020943a 	slli	r16,r16,16
    9e5c:	b804d43a 	srli	r2,r23,16
    9e60:	a72d383a 	mul	r22,r20,fp
    9e64:	1404b03a 	or	r2,r2,r16
    9e68:	1580062e 	bgeu	r2,r22,9e84 <__udivdi3+0x484>
    9e6c:	1445883a 	add	r2,r2,r17
    9e70:	e0ffffc4 	addi	r3,fp,-1
    9e74:	14403836 	bltu	r2,r17,9f58 <__udivdi3+0x558>
    9e78:	1580372e 	bgeu	r2,r22,9f58 <__udivdi3+0x558>
    9e7c:	e73fff84 	addi	fp,fp,-2
    9e80:	1445883a 	add	r2,r2,r17
    9e84:	15adc83a 	sub	r22,r2,r22
    9e88:	a80b883a 	mov	r5,r21
    9e8c:	b009883a 	mov	r4,r22
    9e90:	000a60c0 	call	a60c <__umodsi3>
    9e94:	1027883a 	mov	r19,r2
    9e98:	b009883a 	mov	r4,r22
    9e9c:	a80b883a 	mov	r5,r21
    9ea0:	000a5a80 	call	a5a8 <__udivsi3>
    9ea4:	9826943a 	slli	r19,r19,16
    9ea8:	a0a1383a 	mul	r16,r20,r2
    9eac:	b93fffcc 	andi	r4,r23,65535
    9eb0:	24c8b03a 	or	r4,r4,r19
    9eb4:	2400062e 	bgeu	r4,r16,9ed0 <__udivdi3+0x4d0>
    9eb8:	2449883a 	add	r4,r4,r17
    9ebc:	10ffffc4 	addi	r3,r2,-1
    9ec0:	24402336 	bltu	r4,r17,9f50 <__udivdi3+0x550>
    9ec4:	2400222e 	bgeu	r4,r16,9f50 <__udivdi3+0x550>
    9ec8:	10bfff84 	addi	r2,r2,-2
    9ecc:	2449883a 	add	r4,r4,r17
    9ed0:	e038943a 	slli	fp,fp,16
    9ed4:	2421c83a 	sub	r16,r4,r16
    9ed8:	e086b03a 	or	r3,fp,r2
    9edc:	003f4306 	br	9bec <__udivdi3+0x1ec>
    9ee0:	2005883a 	mov	r2,r4
    9ee4:	003f6906 	br	9c8c <__udivdi3+0x28c>
    9ee8:	1805883a 	mov	r2,r3
    9eec:	003f0f06 	br	9b2c <__udivdi3+0x12c>
    9ef0:	1806943a 	slli	r3,r3,16
    9ef4:	9d66983a 	sll	r19,r19,r21
    9ef8:	39ffffcc 	andi	r7,r7,65535
    9efc:	19c7883a 	add	r3,r3,r7
    9f00:	98ffc32e 	bgeu	r19,r3,9e10 <__udivdi3+0x410>
    9f04:	10bfffc4 	addi	r2,r2,-1
    9f08:	003fc106 	br	9e10 <__udivdi3+0x410>
    9f0c:	00800604 	movi	r2,24
    9f10:	003f1106 	br	9b58 <__udivdi3+0x158>
    9f14:	00800604 	movi	r2,24
    9f18:	003f2706 	br	9bb8 <__udivdi3+0x1b8>
    9f1c:	00800604 	movi	r2,24
    9f20:	003ece06 	br	9a5c <__udivdi3+0x5c>
    9f24:	0007883a 	mov	r3,zero
    9f28:	00800044 	movi	r2,1
    9f2c:	003f5c06 	br	9ca0 <__udivdi3+0x2a0>
    9f30:	813fa12e 	bgeu	r16,r4,9db8 <__udivdi3+0x3b8>
    9f34:	10bfff84 	addi	r2,r2,-2
    9f38:	85e1883a 	add	r16,r16,r23
    9f3c:	003f9f06 	br	9dbc <__udivdi3+0x3bc>
    9f40:	1c7f8a2e 	bgeu	r3,r17,9d6c <__udivdi3+0x36c>
    9f44:	31bfff84 	addi	r6,r6,-2
    9f48:	1dc7883a 	add	r3,r3,r23
    9f4c:	003f8806 	br	9d70 <__udivdi3+0x370>
    9f50:	1805883a 	mov	r2,r3
    9f54:	003fde06 	br	9ed0 <__udivdi3+0x4d0>
    9f58:	1839883a 	mov	fp,r3
    9f5c:	003fc906 	br	9e84 <__udivdi3+0x484>
    9f60:	b5bfff84 	addi	r22,r22,-2
    9f64:	2449883a 	add	r4,r4,r17
    9f68:	003f3406 	br	9c3c <__udivdi3+0x23c>
    9f6c:	b5bfff84 	addi	r22,r22,-2
    9f70:	1445883a 	add	r2,r2,r17
    9f74:	003edb06 	br	9ae4 <__udivdi3+0xe4>

00009f78 <__umoddi3>:
    9f78:	defff404 	addi	sp,sp,-48
    9f7c:	df000a15 	stw	fp,40(sp)
    9f80:	dc400315 	stw	r17,12(sp)
    9f84:	dc000215 	stw	r16,8(sp)
    9f88:	dfc00b15 	stw	ra,44(sp)
    9f8c:	ddc00915 	stw	r23,36(sp)
    9f90:	dd800815 	stw	r22,32(sp)
    9f94:	dd400715 	stw	r21,28(sp)
    9f98:	dd000615 	stw	r20,24(sp)
    9f9c:	dcc00515 	stw	r19,20(sp)
    9fa0:	dc800415 	stw	r18,16(sp)
    9fa4:	2021883a 	mov	r16,r4
    9fa8:	2823883a 	mov	r17,r5
    9fac:	2839883a 	mov	fp,r5
    9fb0:	38003c1e 	bne	r7,zero,a0a4 <__umoddi3+0x12c>
    9fb4:	3027883a 	mov	r19,r6
    9fb8:	2029883a 	mov	r20,r4
    9fbc:	2980512e 	bgeu	r5,r6,a104 <__umoddi3+0x18c>
    9fc0:	00bfffd4 	movui	r2,65535
    9fc4:	11809a36 	bltu	r2,r6,a230 <__umoddi3+0x2b8>
    9fc8:	01003fc4 	movi	r4,255
    9fcc:	2189803a 	cmpltu	r4,r4,r6
    9fd0:	200890fa 	slli	r4,r4,3
    9fd4:	3104d83a 	srl	r2,r6,r4
    9fd8:	00c00074 	movhi	r3,1
    9fdc:	18fe8a04 	addi	r3,r3,-1496
    9fe0:	1885883a 	add	r2,r3,r2
    9fe4:	10c00003 	ldbu	r3,0(r2)
    9fe8:	00800804 	movi	r2,32
    9fec:	1909883a 	add	r4,r3,r4
    9ff0:	1125c83a 	sub	r18,r2,r4
    9ff4:	90000526 	beq	r18,zero,a00c <__umoddi3+0x94>
    9ff8:	8ca2983a 	sll	r17,r17,r18
    9ffc:	8108d83a 	srl	r4,r16,r4
    a000:	34a6983a 	sll	r19,r6,r18
    a004:	84a8983a 	sll	r20,r16,r18
    a008:	2478b03a 	or	fp,r4,r17
    a00c:	982ed43a 	srli	r23,r19,16
    a010:	e009883a 	mov	r4,fp
    a014:	9dbfffcc 	andi	r22,r19,65535
    a018:	b80b883a 	mov	r5,r23
    a01c:	000a60c0 	call	a60c <__umodsi3>
    a020:	e009883a 	mov	r4,fp
    a024:	b80b883a 	mov	r5,r23
    a028:	102b883a 	mov	r21,r2
    a02c:	000a5a80 	call	a5a8 <__udivsi3>
    a030:	a806943a 	slli	r3,r21,16
    a034:	a008d43a 	srli	r4,r20,16
    a038:	b085383a 	mul	r2,r22,r2
    a03c:	20c8b03a 	or	r4,r4,r3
    a040:	2080032e 	bgeu	r4,r2,a050 <__umoddi3+0xd8>
    a044:	24c9883a 	add	r4,r4,r19
    a048:	24c00136 	bltu	r4,r19,a050 <__umoddi3+0xd8>
    a04c:	20811036 	bltu	r4,r2,a490 <__umoddi3+0x518>
    a050:	20abc83a 	sub	r21,r4,r2
    a054:	b80b883a 	mov	r5,r23
    a058:	a809883a 	mov	r4,r21
    a05c:	000a60c0 	call	a60c <__umodsi3>
    a060:	1023883a 	mov	r17,r2
    a064:	b80b883a 	mov	r5,r23
    a068:	a809883a 	mov	r4,r21
    a06c:	000a5a80 	call	a5a8 <__udivsi3>
    a070:	8822943a 	slli	r17,r17,16
    a074:	b085383a 	mul	r2,r22,r2
    a078:	a0ffffcc 	andi	r3,r20,65535
    a07c:	1c46b03a 	or	r3,r3,r17
    a080:	1880042e 	bgeu	r3,r2,a094 <__umoddi3+0x11c>
    a084:	1cc7883a 	add	r3,r3,r19
    a088:	1cc00236 	bltu	r3,r19,a094 <__umoddi3+0x11c>
    a08c:	1880012e 	bgeu	r3,r2,a094 <__umoddi3+0x11c>
    a090:	1cc7883a 	add	r3,r3,r19
    a094:	1885c83a 	sub	r2,r3,r2
    a098:	1484d83a 	srl	r2,r2,r18
    a09c:	0007883a 	mov	r3,zero
    a0a0:	00004f06 	br	a1e0 <__umoddi3+0x268>
    a0a4:	29c04c36 	bltu	r5,r7,a1d8 <__umoddi3+0x260>
    a0a8:	00bfffd4 	movui	r2,65535
    a0ac:	11c0582e 	bgeu	r2,r7,a210 <__umoddi3+0x298>
    a0b0:	00804034 	movhi	r2,256
    a0b4:	10bfffc4 	addi	r2,r2,-1
    a0b8:	11c0e736 	bltu	r2,r7,a458 <__umoddi3+0x4e0>
    a0bc:	01000404 	movi	r4,16
    a0c0:	3904d83a 	srl	r2,r7,r4
    a0c4:	00c00074 	movhi	r3,1
    a0c8:	18fe8a04 	addi	r3,r3,-1496
    a0cc:	1885883a 	add	r2,r3,r2
    a0d0:	14c00003 	ldbu	r19,0(r2)
    a0d4:	00c00804 	movi	r3,32
    a0d8:	9927883a 	add	r19,r19,r4
    a0dc:	1ce9c83a 	sub	r20,r3,r19
    a0e0:	a000581e 	bne	r20,zero,a244 <__umoddi3+0x2cc>
    a0e4:	3c400136 	bltu	r7,r17,a0ec <__umoddi3+0x174>
    a0e8:	8180eb36 	bltu	r16,r6,a498 <__umoddi3+0x520>
    a0ec:	8185c83a 	sub	r2,r16,r6
    a0f0:	89e3c83a 	sub	r17,r17,r7
    a0f4:	8089803a 	cmpltu	r4,r16,r2
    a0f8:	8939c83a 	sub	fp,r17,r4
    a0fc:	e007883a 	mov	r3,fp
    a100:	00003706 	br	a1e0 <__umoddi3+0x268>
    a104:	3000041e 	bne	r6,zero,a118 <__umoddi3+0x1a0>
    a108:	000b883a 	mov	r5,zero
    a10c:	01000044 	movi	r4,1
    a110:	000a5a80 	call	a5a8 <__udivsi3>
    a114:	1027883a 	mov	r19,r2
    a118:	00bfffd4 	movui	r2,65535
    a11c:	14c0402e 	bgeu	r2,r19,a220 <__umoddi3+0x2a8>
    a120:	00804034 	movhi	r2,256
    a124:	10bfffc4 	addi	r2,r2,-1
    a128:	14c0cd36 	bltu	r2,r19,a460 <__umoddi3+0x4e8>
    a12c:	00800404 	movi	r2,16
    a130:	9886d83a 	srl	r3,r19,r2
    a134:	01000074 	movhi	r4,1
    a138:	213e8a04 	addi	r4,r4,-1496
    a13c:	20c7883a 	add	r3,r4,r3
    a140:	18c00003 	ldbu	r3,0(r3)
    a144:	1887883a 	add	r3,r3,r2
    a148:	00800804 	movi	r2,32
    a14c:	10e5c83a 	sub	r18,r2,r3
    a150:	9000901e 	bne	r18,zero,a394 <__umoddi3+0x41c>
    a154:	982cd43a 	srli	r22,r19,16
    a158:	8ce3c83a 	sub	r17,r17,r19
    a15c:	9d7fffcc 	andi	r21,r19,65535
    a160:	b00b883a 	mov	r5,r22
    a164:	8809883a 	mov	r4,r17
    a168:	000a60c0 	call	a60c <__umodsi3>
    a16c:	8809883a 	mov	r4,r17
    a170:	b00b883a 	mov	r5,r22
    a174:	1021883a 	mov	r16,r2
    a178:	000a5a80 	call	a5a8 <__udivsi3>
    a17c:	8006943a 	slli	r3,r16,16
    a180:	a008d43a 	srli	r4,r20,16
    a184:	1545383a 	mul	r2,r2,r21
    a188:	20c8b03a 	or	r4,r4,r3
    a18c:	2080042e 	bgeu	r4,r2,a1a0 <__umoddi3+0x228>
    a190:	24c9883a 	add	r4,r4,r19
    a194:	24c00236 	bltu	r4,r19,a1a0 <__umoddi3+0x228>
    a198:	2080012e 	bgeu	r4,r2,a1a0 <__umoddi3+0x228>
    a19c:	24c9883a 	add	r4,r4,r19
    a1a0:	20a1c83a 	sub	r16,r4,r2
    a1a4:	b00b883a 	mov	r5,r22
    a1a8:	8009883a 	mov	r4,r16
    a1ac:	000a60c0 	call	a60c <__umodsi3>
    a1b0:	1023883a 	mov	r17,r2
    a1b4:	b00b883a 	mov	r5,r22
    a1b8:	8009883a 	mov	r4,r16
    a1bc:	000a5a80 	call	a5a8 <__udivsi3>
    a1c0:	8822943a 	slli	r17,r17,16
    a1c4:	1545383a 	mul	r2,r2,r21
    a1c8:	a53fffcc 	andi	r20,r20,65535
    a1cc:	a446b03a 	or	r3,r20,r17
    a1d0:	18bfb02e 	bgeu	r3,r2,a094 <__umoddi3+0x11c>
    a1d4:	003fab06 	br	a084 <__umoddi3+0x10c>
    a1d8:	2005883a 	mov	r2,r4
    a1dc:	2807883a 	mov	r3,r5
    a1e0:	dfc00b17 	ldw	ra,44(sp)
    a1e4:	df000a17 	ldw	fp,40(sp)
    a1e8:	ddc00917 	ldw	r23,36(sp)
    a1ec:	dd800817 	ldw	r22,32(sp)
    a1f0:	dd400717 	ldw	r21,28(sp)
    a1f4:	dd000617 	ldw	r20,24(sp)
    a1f8:	dcc00517 	ldw	r19,20(sp)
    a1fc:	dc800417 	ldw	r18,16(sp)
    a200:	dc400317 	ldw	r17,12(sp)
    a204:	dc000217 	ldw	r16,8(sp)
    a208:	dec00c04 	addi	sp,sp,48
    a20c:	f800283a 	ret
    a210:	04c03fc4 	movi	r19,255
    a214:	99c9803a 	cmpltu	r4,r19,r7
    a218:	200890fa 	slli	r4,r4,3
    a21c:	003fa806 	br	a0c0 <__umoddi3+0x148>
    a220:	00803fc4 	movi	r2,255
    a224:	14c5803a 	cmpltu	r2,r2,r19
    a228:	100490fa 	slli	r2,r2,3
    a22c:	003fc006 	br	a130 <__umoddi3+0x1b8>
    a230:	00804034 	movhi	r2,256
    a234:	10bfffc4 	addi	r2,r2,-1
    a238:	11808b36 	bltu	r2,r6,a468 <__umoddi3+0x4f0>
    a23c:	01000404 	movi	r4,16
    a240:	003f6406 	br	9fd4 <__umoddi3+0x5c>
    a244:	34c4d83a 	srl	r2,r6,r19
    a248:	3d0e983a 	sll	r7,r7,r20
    a24c:	8cf8d83a 	srl	fp,r17,r19
    a250:	8d10983a 	sll	r8,r17,r20
    a254:	38aab03a 	or	r21,r7,r2
    a258:	a82cd43a 	srli	r22,r21,16
    a25c:	84e2d83a 	srl	r17,r16,r19
    a260:	e009883a 	mov	r4,fp
    a264:	b00b883a 	mov	r5,r22
    a268:	8a22b03a 	or	r17,r17,r8
    a26c:	3524983a 	sll	r18,r6,r20
    a270:	000a60c0 	call	a60c <__umodsi3>
    a274:	e009883a 	mov	r4,fp
    a278:	b00b883a 	mov	r5,r22
    a27c:	102f883a 	mov	r23,r2
    a280:	000a5a80 	call	a5a8 <__udivsi3>
    a284:	100d883a 	mov	r6,r2
    a288:	b808943a 	slli	r4,r23,16
    a28c:	aa3fffcc 	andi	r8,r21,65535
    a290:	8804d43a 	srli	r2,r17,16
    a294:	41af383a 	mul	r23,r8,r6
    a298:	8520983a 	sll	r16,r16,r20
    a29c:	1104b03a 	or	r2,r2,r4
    a2a0:	15c0042e 	bgeu	r2,r23,a2b4 <__umoddi3+0x33c>
    a2a4:	1545883a 	add	r2,r2,r21
    a2a8:	30ffffc4 	addi	r3,r6,-1
    a2ac:	1540742e 	bgeu	r2,r21,a480 <__umoddi3+0x508>
    a2b0:	180d883a 	mov	r6,r3
    a2b4:	15efc83a 	sub	r23,r2,r23
    a2b8:	b00b883a 	mov	r5,r22
    a2bc:	b809883a 	mov	r4,r23
    a2c0:	d9800115 	stw	r6,4(sp)
    a2c4:	da000015 	stw	r8,0(sp)
    a2c8:	000a60c0 	call	a60c <__umodsi3>
    a2cc:	b00b883a 	mov	r5,r22
    a2d0:	b809883a 	mov	r4,r23
    a2d4:	1039883a 	mov	fp,r2
    a2d8:	000a5a80 	call	a5a8 <__udivsi3>
    a2dc:	da000017 	ldw	r8,0(sp)
    a2e0:	e038943a 	slli	fp,fp,16
    a2e4:	100b883a 	mov	r5,r2
    a2e8:	4089383a 	mul	r4,r8,r2
    a2ec:	8a3fffcc 	andi	r8,r17,65535
    a2f0:	4710b03a 	or	r8,r8,fp
    a2f4:	d9800117 	ldw	r6,4(sp)
    a2f8:	4100042e 	bgeu	r8,r4,a30c <__umoddi3+0x394>
    a2fc:	4551883a 	add	r8,r8,r21
    a300:	10bfffc4 	addi	r2,r2,-1
    a304:	45405a2e 	bgeu	r8,r21,a470 <__umoddi3+0x4f8>
    a308:	100b883a 	mov	r5,r2
    a30c:	300c943a 	slli	r6,r6,16
    a310:	91ffffcc 	andi	r7,r18,65535
    a314:	9004d43a 	srli	r2,r18,16
    a318:	314cb03a 	or	r6,r6,r5
    a31c:	317fffcc 	andi	r5,r6,65535
    a320:	300cd43a 	srli	r6,r6,16
    a324:	29d3383a 	mul	r9,r5,r7
    a328:	288b383a 	mul	r5,r5,r2
    a32c:	31cf383a 	mul	r7,r6,r7
    a330:	4806d43a 	srli	r3,r9,16
    a334:	4111c83a 	sub	r8,r8,r4
    a338:	29cb883a 	add	r5,r5,r7
    a33c:	194b883a 	add	r5,r3,r5
    a340:	3085383a 	mul	r2,r6,r2
    a344:	29c0022e 	bgeu	r5,r7,a350 <__umoddi3+0x3d8>
    a348:	00c00074 	movhi	r3,1
    a34c:	10c5883a 	add	r2,r2,r3
    a350:	2808d43a 	srli	r4,r5,16
    a354:	280a943a 	slli	r5,r5,16
    a358:	4a7fffcc 	andi	r9,r9,65535
    a35c:	2085883a 	add	r2,r4,r2
    a360:	2a4b883a 	add	r5,r5,r9
    a364:	40803636 	bltu	r8,r2,a440 <__umoddi3+0x4c8>
    a368:	40804d26 	beq	r8,r2,a4a0 <__umoddi3+0x528>
    a36c:	4089c83a 	sub	r4,r8,r2
    a370:	280f883a 	mov	r7,r5
    a374:	81cfc83a 	sub	r7,r16,r7
    a378:	81c7803a 	cmpltu	r3,r16,r7
    a37c:	20c7c83a 	sub	r3,r4,r3
    a380:	1cc4983a 	sll	r2,r3,r19
    a384:	3d0ed83a 	srl	r7,r7,r20
    a388:	1d06d83a 	srl	r3,r3,r20
    a38c:	11c4b03a 	or	r2,r2,r7
    a390:	003f9306 	br	a1e0 <__umoddi3+0x268>
    a394:	9ca6983a 	sll	r19,r19,r18
    a398:	88e8d83a 	srl	r20,r17,r3
    a39c:	80c4d83a 	srl	r2,r16,r3
    a3a0:	982cd43a 	srli	r22,r19,16
    a3a4:	8ca2983a 	sll	r17,r17,r18
    a3a8:	a009883a 	mov	r4,r20
    a3ac:	b00b883a 	mov	r5,r22
    a3b0:	1478b03a 	or	fp,r2,r17
    a3b4:	000a60c0 	call	a60c <__umodsi3>
    a3b8:	a009883a 	mov	r4,r20
    a3bc:	b00b883a 	mov	r5,r22
    a3c0:	1023883a 	mov	r17,r2
    a3c4:	000a5a80 	call	a5a8 <__udivsi3>
    a3c8:	9d7fffcc 	andi	r21,r19,65535
    a3cc:	880a943a 	slli	r5,r17,16
    a3d0:	e008d43a 	srli	r4,fp,16
    a3d4:	a885383a 	mul	r2,r21,r2
    a3d8:	84a8983a 	sll	r20,r16,r18
    a3dc:	2148b03a 	or	r4,r4,r5
    a3e0:	2080042e 	bgeu	r4,r2,a3f4 <__umoddi3+0x47c>
    a3e4:	24c9883a 	add	r4,r4,r19
    a3e8:	24c00236 	bltu	r4,r19,a3f4 <__umoddi3+0x47c>
    a3ec:	2080012e 	bgeu	r4,r2,a3f4 <__umoddi3+0x47c>
    a3f0:	24c9883a 	add	r4,r4,r19
    a3f4:	20a3c83a 	sub	r17,r4,r2
    a3f8:	b00b883a 	mov	r5,r22
    a3fc:	8809883a 	mov	r4,r17
    a400:	000a60c0 	call	a60c <__umodsi3>
    a404:	102f883a 	mov	r23,r2
    a408:	8809883a 	mov	r4,r17
    a40c:	b00b883a 	mov	r5,r22
    a410:	000a5a80 	call	a5a8 <__udivsi3>
    a414:	b82e943a 	slli	r23,r23,16
    a418:	a885383a 	mul	r2,r21,r2
    a41c:	e13fffcc 	andi	r4,fp,65535
    a420:	25c8b03a 	or	r4,r4,r23
    a424:	2080042e 	bgeu	r4,r2,a438 <__umoddi3+0x4c0>
    a428:	24c9883a 	add	r4,r4,r19
    a42c:	24c00236 	bltu	r4,r19,a438 <__umoddi3+0x4c0>
    a430:	2080012e 	bgeu	r4,r2,a438 <__umoddi3+0x4c0>
    a434:	24c9883a 	add	r4,r4,r19
    a438:	20a3c83a 	sub	r17,r4,r2
    a43c:	003f4806 	br	a160 <__umoddi3+0x1e8>
    a440:	2c8fc83a 	sub	r7,r5,r18
    a444:	1545c83a 	sub	r2,r2,r21
    a448:	29cb803a 	cmpltu	r5,r5,r7
    a44c:	1145c83a 	sub	r2,r2,r5
    a450:	4089c83a 	sub	r4,r8,r2
    a454:	003fc706 	br	a374 <__umoddi3+0x3fc>
    a458:	01000604 	movi	r4,24
    a45c:	003f1806 	br	a0c0 <__umoddi3+0x148>
    a460:	00800604 	movi	r2,24
    a464:	003f3206 	br	a130 <__umoddi3+0x1b8>
    a468:	01000604 	movi	r4,24
    a46c:	003ed906 	br	9fd4 <__umoddi3+0x5c>
    a470:	413fa52e 	bgeu	r8,r4,a308 <__umoddi3+0x390>
    a474:	297fff84 	addi	r5,r5,-2
    a478:	4551883a 	add	r8,r8,r21
    a47c:	003fa306 	br	a30c <__umoddi3+0x394>
    a480:	15ff8b2e 	bgeu	r2,r23,a2b0 <__umoddi3+0x338>
    a484:	31bfff84 	addi	r6,r6,-2
    a488:	1545883a 	add	r2,r2,r21
    a48c:	003f8906 	br	a2b4 <__umoddi3+0x33c>
    a490:	24c9883a 	add	r4,r4,r19
    a494:	003eee06 	br	a050 <__umoddi3+0xd8>
    a498:	8005883a 	mov	r2,r16
    a49c:	003f1706 	br	a0fc <__umoddi3+0x184>
    a4a0:	817fe736 	bltu	r16,r5,a440 <__umoddi3+0x4c8>
    a4a4:	280f883a 	mov	r7,r5
    a4a8:	0009883a 	mov	r4,zero
    a4ac:	003fb106 	br	a374 <__umoddi3+0x3fc>

0000a4b0 <__divsi3>:
    a4b0:	20001b16 	blt	r4,zero,a520 <__divsi3+0x70>
    a4b4:	000f883a 	mov	r7,zero
    a4b8:	28001616 	blt	r5,zero,a514 <__divsi3+0x64>
    a4bc:	200d883a 	mov	r6,r4
    a4c0:	29001a2e 	bgeu	r5,r4,a52c <__divsi3+0x7c>
    a4c4:	00800804 	movi	r2,32
    a4c8:	00c00044 	movi	r3,1
    a4cc:	00000106 	br	a4d4 <__divsi3+0x24>
    a4d0:	10000d26 	beq	r2,zero,a508 <__divsi3+0x58>
    a4d4:	294b883a 	add	r5,r5,r5
    a4d8:	10bfffc4 	addi	r2,r2,-1
    a4dc:	18c7883a 	add	r3,r3,r3
    a4e0:	293ffb36 	bltu	r5,r4,a4d0 <__divsi3+0x20>
    a4e4:	0005883a 	mov	r2,zero
    a4e8:	18000726 	beq	r3,zero,a508 <__divsi3+0x58>
    a4ec:	0005883a 	mov	r2,zero
    a4f0:	31400236 	bltu	r6,r5,a4fc <__divsi3+0x4c>
    a4f4:	314dc83a 	sub	r6,r6,r5
    a4f8:	10c4b03a 	or	r2,r2,r3
    a4fc:	1806d07a 	srli	r3,r3,1
    a500:	280ad07a 	srli	r5,r5,1
    a504:	183ffa1e 	bne	r3,zero,a4f0 <__divsi3+0x40>
    a508:	38000126 	beq	r7,zero,a510 <__divsi3+0x60>
    a50c:	0085c83a 	sub	r2,zero,r2
    a510:	f800283a 	ret
    a514:	014bc83a 	sub	r5,zero,r5
    a518:	39c0005c 	xori	r7,r7,1
    a51c:	003fe706 	br	a4bc <__divsi3+0xc>
    a520:	0109c83a 	sub	r4,zero,r4
    a524:	01c00044 	movi	r7,1
    a528:	003fe306 	br	a4b8 <__divsi3+0x8>
    a52c:	00c00044 	movi	r3,1
    a530:	003fee06 	br	a4ec <__divsi3+0x3c>

0000a534 <__modsi3>:
    a534:	20001716 	blt	r4,zero,a594 <__modsi3+0x60>
    a538:	000f883a 	mov	r7,zero
    a53c:	2005883a 	mov	r2,r4
    a540:	28001216 	blt	r5,zero,a58c <__modsi3+0x58>
    a544:	2900162e 	bgeu	r5,r4,a5a0 <__modsi3+0x6c>
    a548:	01800804 	movi	r6,32
    a54c:	00c00044 	movi	r3,1
    a550:	00000106 	br	a558 <__modsi3+0x24>
    a554:	30000a26 	beq	r6,zero,a580 <__modsi3+0x4c>
    a558:	294b883a 	add	r5,r5,r5
    a55c:	31bfffc4 	addi	r6,r6,-1
    a560:	18c7883a 	add	r3,r3,r3
    a564:	293ffb36 	bltu	r5,r4,a554 <__modsi3+0x20>
    a568:	18000526 	beq	r3,zero,a580 <__modsi3+0x4c>
    a56c:	1806d07a 	srli	r3,r3,1
    a570:	11400136 	bltu	r2,r5,a578 <__modsi3+0x44>
    a574:	1145c83a 	sub	r2,r2,r5
    a578:	280ad07a 	srli	r5,r5,1
    a57c:	183ffb1e 	bne	r3,zero,a56c <__modsi3+0x38>
    a580:	38000126 	beq	r7,zero,a588 <__modsi3+0x54>
    a584:	0085c83a 	sub	r2,zero,r2
    a588:	f800283a 	ret
    a58c:	014bc83a 	sub	r5,zero,r5
    a590:	003fec06 	br	a544 <__modsi3+0x10>
    a594:	0109c83a 	sub	r4,zero,r4
    a598:	01c00044 	movi	r7,1
    a59c:	003fe706 	br	a53c <__modsi3+0x8>
    a5a0:	00c00044 	movi	r3,1
    a5a4:	003ff106 	br	a56c <__modsi3+0x38>

0000a5a8 <__udivsi3>:
    a5a8:	200d883a 	mov	r6,r4
    a5ac:	2900152e 	bgeu	r5,r4,a604 <__udivsi3+0x5c>
    a5b0:	28001416 	blt	r5,zero,a604 <__udivsi3+0x5c>
    a5b4:	00800804 	movi	r2,32
    a5b8:	00c00044 	movi	r3,1
    a5bc:	00000206 	br	a5c8 <__udivsi3+0x20>
    a5c0:	10000e26 	beq	r2,zero,a5fc <__udivsi3+0x54>
    a5c4:	28000516 	blt	r5,zero,a5dc <__udivsi3+0x34>
    a5c8:	294b883a 	add	r5,r5,r5
    a5cc:	10bfffc4 	addi	r2,r2,-1
    a5d0:	18c7883a 	add	r3,r3,r3
    a5d4:	293ffa36 	bltu	r5,r4,a5c0 <__udivsi3+0x18>
    a5d8:	18000826 	beq	r3,zero,a5fc <__udivsi3+0x54>
    a5dc:	0005883a 	mov	r2,zero
    a5e0:	31400236 	bltu	r6,r5,a5ec <__udivsi3+0x44>
    a5e4:	314dc83a 	sub	r6,r6,r5
    a5e8:	10c4b03a 	or	r2,r2,r3
    a5ec:	1806d07a 	srli	r3,r3,1
    a5f0:	280ad07a 	srli	r5,r5,1
    a5f4:	183ffa1e 	bne	r3,zero,a5e0 <__udivsi3+0x38>
    a5f8:	f800283a 	ret
    a5fc:	0005883a 	mov	r2,zero
    a600:	f800283a 	ret
    a604:	00c00044 	movi	r3,1
    a608:	003ff406 	br	a5dc <__udivsi3+0x34>

0000a60c <__umodsi3>:
    a60c:	2005883a 	mov	r2,r4
    a610:	2900122e 	bgeu	r5,r4,a65c <__umodsi3+0x50>
    a614:	28001116 	blt	r5,zero,a65c <__umodsi3+0x50>
    a618:	01800804 	movi	r6,32
    a61c:	00c00044 	movi	r3,1
    a620:	00000206 	br	a62c <__umodsi3+0x20>
    a624:	30000c26 	beq	r6,zero,a658 <__umodsi3+0x4c>
    a628:	28000516 	blt	r5,zero,a640 <__umodsi3+0x34>
    a62c:	294b883a 	add	r5,r5,r5
    a630:	31bfffc4 	addi	r6,r6,-1
    a634:	18c7883a 	add	r3,r3,r3
    a638:	293ffa36 	bltu	r5,r4,a624 <__umodsi3+0x18>
    a63c:	18000626 	beq	r3,zero,a658 <__umodsi3+0x4c>
    a640:	1806d07a 	srli	r3,r3,1
    a644:	11400136 	bltu	r2,r5,a64c <__umodsi3+0x40>
    a648:	1145c83a 	sub	r2,r2,r5
    a64c:	280ad07a 	srli	r5,r5,1
    a650:	183ffb1e 	bne	r3,zero,a640 <__umodsi3+0x34>
    a654:	f800283a 	ret
    a658:	f800283a 	ret
    a65c:	00c00044 	movi	r3,1
    a660:	003ff706 	br	a640 <__umodsi3+0x34>

0000a664 <__adddf3>:
    a664:	02c00434 	movhi	r11,16
    a668:	5affffc4 	addi	r11,r11,-1
    a66c:	2806d7fa 	srli	r3,r5,31
    a670:	2ad4703a 	and	r10,r5,r11
    a674:	3ad2703a 	and	r9,r7,r11
    a678:	3804d53a 	srli	r2,r7,20
    a67c:	3018d77a 	srli	r12,r6,29
    a680:	280ad53a 	srli	r5,r5,20
    a684:	501490fa 	slli	r10,r10,3
    a688:	2010d77a 	srli	r8,r4,29
    a68c:	481290fa 	slli	r9,r9,3
    a690:	380ed7fa 	srli	r7,r7,31
    a694:	defffb04 	addi	sp,sp,-20
    a698:	dc800215 	stw	r18,8(sp)
    a69c:	dc400115 	stw	r17,4(sp)
    a6a0:	dc000015 	stw	r16,0(sp)
    a6a4:	dfc00415 	stw	ra,16(sp)
    a6a8:	dcc00315 	stw	r19,12(sp)
    a6ac:	1c803fcc 	andi	r18,r3,255
    a6b0:	2c01ffcc 	andi	r16,r5,2047
    a6b4:	5210b03a 	or	r8,r10,r8
    a6b8:	202290fa 	slli	r17,r4,3
    a6bc:	1081ffcc 	andi	r2,r2,2047
    a6c0:	4b12b03a 	or	r9,r9,r12
    a6c4:	300c90fa 	slli	r6,r6,3
    a6c8:	91c07526 	beq	r18,r7,a8a0 <__adddf3+0x23c>
    a6cc:	8087c83a 	sub	r3,r16,r2
    a6d0:	00c0ab0e 	bge	zero,r3,a980 <__adddf3+0x31c>
    a6d4:	10002a1e 	bne	r2,zero,a780 <__adddf3+0x11c>
    a6d8:	4984b03a 	or	r2,r9,r6
    a6dc:	1000961e 	bne	r2,zero,a938 <__adddf3+0x2d4>
    a6e0:	888001cc 	andi	r2,r17,7
    a6e4:	10000726 	beq	r2,zero,a704 <__adddf3+0xa0>
    a6e8:	888003cc 	andi	r2,r17,15
    a6ec:	00c00104 	movi	r3,4
    a6f0:	10c00426 	beq	r2,r3,a704 <__adddf3+0xa0>
    a6f4:	88c7883a 	add	r3,r17,r3
    a6f8:	1c63803a 	cmpltu	r17,r3,r17
    a6fc:	4451883a 	add	r8,r8,r17
    a700:	1823883a 	mov	r17,r3
    a704:	4080202c 	andhi	r2,r8,128
    a708:	10005926 	beq	r2,zero,a870 <__adddf3+0x20c>
    a70c:	84000044 	addi	r16,r16,1
    a710:	0081ffc4 	movi	r2,2047
    a714:	8080ba26 	beq	r16,r2,aa00 <__adddf3+0x39c>
    a718:	00bfe034 	movhi	r2,65408
    a71c:	10bfffc4 	addi	r2,r2,-1
    a720:	4090703a 	and	r8,r8,r2
    a724:	4004977a 	slli	r2,r8,29
    a728:	4010927a 	slli	r8,r8,9
    a72c:	8822d0fa 	srli	r17,r17,3
    a730:	8401ffcc 	andi	r16,r16,2047
    a734:	4010d33a 	srli	r8,r8,12
    a738:	9007883a 	mov	r3,r18
    a73c:	1444b03a 	or	r2,r2,r17
    a740:	8401ffcc 	andi	r16,r16,2047
    a744:	8020953a 	slli	r16,r16,20
    a748:	18c03fcc 	andi	r3,r3,255
    a74c:	01000434 	movhi	r4,16
    a750:	213fffc4 	addi	r4,r4,-1
    a754:	180697fa 	slli	r3,r3,31
    a758:	4110703a 	and	r8,r8,r4
    a75c:	4410b03a 	or	r8,r8,r16
    a760:	40c6b03a 	or	r3,r8,r3
    a764:	dfc00417 	ldw	ra,16(sp)
    a768:	dcc00317 	ldw	r19,12(sp)
    a76c:	dc800217 	ldw	r18,8(sp)
    a770:	dc400117 	ldw	r17,4(sp)
    a774:	dc000017 	ldw	r16,0(sp)
    a778:	dec00504 	addi	sp,sp,20
    a77c:	f800283a 	ret
    a780:	0081ffc4 	movi	r2,2047
    a784:	80bfd626 	beq	r16,r2,a6e0 <__adddf3+0x7c>
    a788:	4a402034 	orhi	r9,r9,128
    a78c:	00800e04 	movi	r2,56
    a790:	10c09f16 	blt	r2,r3,aa10 <__adddf3+0x3ac>
    a794:	008007c4 	movi	r2,31
    a798:	10c0c216 	blt	r2,r3,aaa4 <__adddf3+0x440>
    a79c:	00800804 	movi	r2,32
    a7a0:	10c5c83a 	sub	r2,r2,r3
    a7a4:	488a983a 	sll	r5,r9,r2
    a7a8:	30c8d83a 	srl	r4,r6,r3
    a7ac:	3084983a 	sll	r2,r6,r2
    a7b0:	48c6d83a 	srl	r3,r9,r3
    a7b4:	290cb03a 	or	r6,r5,r4
    a7b8:	1004c03a 	cmpne	r2,r2,zero
    a7bc:	308cb03a 	or	r6,r6,r2
    a7c0:	898dc83a 	sub	r6,r17,r6
    a7c4:	89a3803a 	cmpltu	r17,r17,r6
    a7c8:	40d1c83a 	sub	r8,r8,r3
    a7cc:	4451c83a 	sub	r8,r8,r17
    a7d0:	3023883a 	mov	r17,r6
    a7d4:	4080202c 	andhi	r2,r8,128
    a7d8:	10002326 	beq	r2,zero,a868 <__adddf3+0x204>
    a7dc:	04c02034 	movhi	r19,128
    a7e0:	9cffffc4 	addi	r19,r19,-1
    a7e4:	44e6703a 	and	r19,r8,r19
    a7e8:	98007626 	beq	r19,zero,a9c4 <__adddf3+0x360>
    a7ec:	9809883a 	mov	r4,r19
    a7f0:	000cc680 	call	cc68 <__clzsi2>
    a7f4:	10fffe04 	addi	r3,r2,-8
    a7f8:	010007c4 	movi	r4,31
    a7fc:	20c07716 	blt	r4,r3,a9dc <__adddf3+0x378>
    a800:	00800804 	movi	r2,32
    a804:	10c5c83a 	sub	r2,r2,r3
    a808:	8884d83a 	srl	r2,r17,r2
    a80c:	98d0983a 	sll	r8,r19,r3
    a810:	88e2983a 	sll	r17,r17,r3
    a814:	1204b03a 	or	r2,r2,r8
    a818:	1c007416 	blt	r3,r16,a9ec <__adddf3+0x388>
    a81c:	1c21c83a 	sub	r16,r3,r16
    a820:	82000044 	addi	r8,r16,1
    a824:	00c007c4 	movi	r3,31
    a828:	1a009116 	blt	r3,r8,aa70 <__adddf3+0x40c>
    a82c:	00c00804 	movi	r3,32
    a830:	1a07c83a 	sub	r3,r3,r8
    a834:	8a08d83a 	srl	r4,r17,r8
    a838:	88e2983a 	sll	r17,r17,r3
    a83c:	10c6983a 	sll	r3,r2,r3
    a840:	1210d83a 	srl	r8,r2,r8
    a844:	8804c03a 	cmpne	r2,r17,zero
    a848:	1906b03a 	or	r3,r3,r4
    a84c:	18a2b03a 	or	r17,r3,r2
    a850:	0021883a 	mov	r16,zero
    a854:	003fa206 	br	a6e0 <__adddf3+0x7c>
    a858:	1890b03a 	or	r8,r3,r2
    a85c:	40017d26 	beq	r8,zero,ae54 <__adddf3+0x7f0>
    a860:	1011883a 	mov	r8,r2
    a864:	1823883a 	mov	r17,r3
    a868:	888001cc 	andi	r2,r17,7
    a86c:	103f9e1e 	bne	r2,zero,a6e8 <__adddf3+0x84>
    a870:	4004977a 	slli	r2,r8,29
    a874:	8822d0fa 	srli	r17,r17,3
    a878:	4010d0fa 	srli	r8,r8,3
    a87c:	9007883a 	mov	r3,r18
    a880:	1444b03a 	or	r2,r2,r17
    a884:	0101ffc4 	movi	r4,2047
    a888:	81002426 	beq	r16,r4,a91c <__adddf3+0x2b8>
    a88c:	8120703a 	and	r16,r16,r4
    a890:	01000434 	movhi	r4,16
    a894:	213fffc4 	addi	r4,r4,-1
    a898:	4110703a 	and	r8,r8,r4
    a89c:	003fa806 	br	a740 <__adddf3+0xdc>
    a8a0:	8089c83a 	sub	r4,r16,r2
    a8a4:	01005e0e 	bge	zero,r4,aa20 <__adddf3+0x3bc>
    a8a8:	10002b26 	beq	r2,zero,a958 <__adddf3+0x2f4>
    a8ac:	0081ffc4 	movi	r2,2047
    a8b0:	80bf8b26 	beq	r16,r2,a6e0 <__adddf3+0x7c>
    a8b4:	4a402034 	orhi	r9,r9,128
    a8b8:	00800e04 	movi	r2,56
    a8bc:	1100a40e 	bge	r2,r4,ab50 <__adddf3+0x4ec>
    a8c0:	498cb03a 	or	r6,r9,r6
    a8c4:	300ac03a 	cmpne	r5,r6,zero
    a8c8:	0013883a 	mov	r9,zero
    a8cc:	2c4b883a 	add	r5,r5,r17
    a8d0:	2c63803a 	cmpltu	r17,r5,r17
    a8d4:	4a11883a 	add	r8,r9,r8
    a8d8:	8a11883a 	add	r8,r17,r8
    a8dc:	2823883a 	mov	r17,r5
    a8e0:	4080202c 	andhi	r2,r8,128
    a8e4:	103fe026 	beq	r2,zero,a868 <__adddf3+0x204>
    a8e8:	84000044 	addi	r16,r16,1
    a8ec:	0081ffc4 	movi	r2,2047
    a8f0:	8080d226 	beq	r16,r2,ac3c <__adddf3+0x5d8>
    a8f4:	00bfe034 	movhi	r2,65408
    a8f8:	10bfffc4 	addi	r2,r2,-1
    a8fc:	4090703a 	and	r8,r8,r2
    a900:	880ad07a 	srli	r5,r17,1
    a904:	400897fa 	slli	r4,r8,31
    a908:	88c0004c 	andi	r3,r17,1
    a90c:	28e2b03a 	or	r17,r5,r3
    a910:	4010d07a 	srli	r8,r8,1
    a914:	2462b03a 	or	r17,r4,r17
    a918:	003f7106 	br	a6e0 <__adddf3+0x7c>
    a91c:	4088b03a 	or	r4,r8,r2
    a920:	20014526 	beq	r4,zero,ae38 <__adddf3+0x7d4>
    a924:	01000434 	movhi	r4,16
    a928:	42000234 	orhi	r8,r8,8
    a92c:	213fffc4 	addi	r4,r4,-1
    a930:	4110703a 	and	r8,r8,r4
    a934:	003f8206 	br	a740 <__adddf3+0xdc>
    a938:	18ffffc4 	addi	r3,r3,-1
    a93c:	1800491e 	bne	r3,zero,aa64 <__adddf3+0x400>
    a940:	898bc83a 	sub	r5,r17,r6
    a944:	8963803a 	cmpltu	r17,r17,r5
    a948:	4251c83a 	sub	r8,r8,r9
    a94c:	4451c83a 	sub	r8,r8,r17
    a950:	2823883a 	mov	r17,r5
    a954:	003f9f06 	br	a7d4 <__adddf3+0x170>
    a958:	4984b03a 	or	r2,r9,r6
    a95c:	103f6026 	beq	r2,zero,a6e0 <__adddf3+0x7c>
    a960:	213fffc4 	addi	r4,r4,-1
    a964:	2000931e 	bne	r4,zero,abb4 <__adddf3+0x550>
    a968:	898d883a 	add	r6,r17,r6
    a96c:	3463803a 	cmpltu	r17,r6,r17
    a970:	4251883a 	add	r8,r8,r9
    a974:	8a11883a 	add	r8,r17,r8
    a978:	3023883a 	mov	r17,r6
    a97c:	003fd806 	br	a8e0 <__adddf3+0x27c>
    a980:	1800541e 	bne	r3,zero,aad4 <__adddf3+0x470>
    a984:	80800044 	addi	r2,r16,1
    a988:	1081ffcc 	andi	r2,r2,2047
    a98c:	00c00044 	movi	r3,1
    a990:	1880a00e 	bge	r3,r2,ac14 <__adddf3+0x5b0>
    a994:	8989c83a 	sub	r4,r17,r6
    a998:	8905803a 	cmpltu	r2,r17,r4
    a99c:	4267c83a 	sub	r19,r8,r9
    a9a0:	98a7c83a 	sub	r19,r19,r2
    a9a4:	9880202c 	andhi	r2,r19,128
    a9a8:	10006326 	beq	r2,zero,ab38 <__adddf3+0x4d4>
    a9ac:	3463c83a 	sub	r17,r6,r17
    a9b0:	4a07c83a 	sub	r3,r9,r8
    a9b4:	344d803a 	cmpltu	r6,r6,r17
    a9b8:	19a7c83a 	sub	r19,r3,r6
    a9bc:	3825883a 	mov	r18,r7
    a9c0:	983f8a1e 	bne	r19,zero,a7ec <__adddf3+0x188>
    a9c4:	8809883a 	mov	r4,r17
    a9c8:	000cc680 	call	cc68 <__clzsi2>
    a9cc:	10800804 	addi	r2,r2,32
    a9d0:	10fffe04 	addi	r3,r2,-8
    a9d4:	010007c4 	movi	r4,31
    a9d8:	20ff890e 	bge	r4,r3,a800 <__adddf3+0x19c>
    a9dc:	10bff604 	addi	r2,r2,-40
    a9e0:	8884983a 	sll	r2,r17,r2
    a9e4:	0023883a 	mov	r17,zero
    a9e8:	1c3f8c0e 	bge	r3,r16,a81c <__adddf3+0x1b8>
    a9ec:	023fe034 	movhi	r8,65408
    a9f0:	423fffc4 	addi	r8,r8,-1
    a9f4:	80e1c83a 	sub	r16,r16,r3
    a9f8:	1210703a 	and	r8,r2,r8
    a9fc:	003f3806 	br	a6e0 <__adddf3+0x7c>
    aa00:	9007883a 	mov	r3,r18
    aa04:	0011883a 	mov	r8,zero
    aa08:	0005883a 	mov	r2,zero
    aa0c:	003f4c06 	br	a740 <__adddf3+0xdc>
    aa10:	498cb03a 	or	r6,r9,r6
    aa14:	300cc03a 	cmpne	r6,r6,zero
    aa18:	0007883a 	mov	r3,zero
    aa1c:	003f6806 	br	a7c0 <__adddf3+0x15c>
    aa20:	20009c1e 	bne	r4,zero,ac94 <__adddf3+0x630>
    aa24:	80800044 	addi	r2,r16,1
    aa28:	1141ffcc 	andi	r5,r2,2047
    aa2c:	01000044 	movi	r4,1
    aa30:	2140670e 	bge	r4,r5,abd0 <__adddf3+0x56c>
    aa34:	0101ffc4 	movi	r4,2047
    aa38:	11007f26 	beq	r2,r4,ac38 <__adddf3+0x5d4>
    aa3c:	898d883a 	add	r6,r17,r6
    aa40:	4247883a 	add	r3,r8,r9
    aa44:	3451803a 	cmpltu	r8,r6,r17
    aa48:	40d1883a 	add	r8,r8,r3
    aa4c:	402297fa 	slli	r17,r8,31
    aa50:	300cd07a 	srli	r6,r6,1
    aa54:	4010d07a 	srli	r8,r8,1
    aa58:	1021883a 	mov	r16,r2
    aa5c:	89a2b03a 	or	r17,r17,r6
    aa60:	003f1f06 	br	a6e0 <__adddf3+0x7c>
    aa64:	0081ffc4 	movi	r2,2047
    aa68:	80bf481e 	bne	r16,r2,a78c <__adddf3+0x128>
    aa6c:	003f1c06 	br	a6e0 <__adddf3+0x7c>
    aa70:	843ff844 	addi	r16,r16,-31
    aa74:	01000804 	movi	r4,32
    aa78:	1406d83a 	srl	r3,r2,r16
    aa7c:	41005026 	beq	r8,r4,abc0 <__adddf3+0x55c>
    aa80:	01001004 	movi	r4,64
    aa84:	2211c83a 	sub	r8,r4,r8
    aa88:	1204983a 	sll	r2,r2,r8
    aa8c:	88a2b03a 	or	r17,r17,r2
    aa90:	8822c03a 	cmpne	r17,r17,zero
    aa94:	1c62b03a 	or	r17,r3,r17
    aa98:	0011883a 	mov	r8,zero
    aa9c:	0021883a 	mov	r16,zero
    aaa0:	003f7106 	br	a868 <__adddf3+0x204>
    aaa4:	193ff804 	addi	r4,r3,-32
    aaa8:	00800804 	movi	r2,32
    aaac:	4908d83a 	srl	r4,r9,r4
    aab0:	18804526 	beq	r3,r2,abc8 <__adddf3+0x564>
    aab4:	00801004 	movi	r2,64
    aab8:	10c5c83a 	sub	r2,r2,r3
    aabc:	4886983a 	sll	r3,r9,r2
    aac0:	198cb03a 	or	r6,r3,r6
    aac4:	300cc03a 	cmpne	r6,r6,zero
    aac8:	218cb03a 	or	r6,r4,r6
    aacc:	0007883a 	mov	r3,zero
    aad0:	003f3b06 	br	a7c0 <__adddf3+0x15c>
    aad4:	80002a26 	beq	r16,zero,ab80 <__adddf3+0x51c>
    aad8:	0101ffc4 	movi	r4,2047
    aadc:	11006826 	beq	r2,r4,ac80 <__adddf3+0x61c>
    aae0:	00c7c83a 	sub	r3,zero,r3
    aae4:	42002034 	orhi	r8,r8,128
    aae8:	01000e04 	movi	r4,56
    aaec:	20c07c16 	blt	r4,r3,ace0 <__adddf3+0x67c>
    aaf0:	010007c4 	movi	r4,31
    aaf4:	20c0da16 	blt	r4,r3,ae60 <__adddf3+0x7fc>
    aaf8:	01000804 	movi	r4,32
    aafc:	20c9c83a 	sub	r4,r4,r3
    ab00:	4114983a 	sll	r10,r8,r4
    ab04:	88cad83a 	srl	r5,r17,r3
    ab08:	8908983a 	sll	r4,r17,r4
    ab0c:	40c6d83a 	srl	r3,r8,r3
    ab10:	5162b03a 	or	r17,r10,r5
    ab14:	2008c03a 	cmpne	r4,r4,zero
    ab18:	8922b03a 	or	r17,r17,r4
    ab1c:	3463c83a 	sub	r17,r6,r17
    ab20:	48c7c83a 	sub	r3,r9,r3
    ab24:	344d803a 	cmpltu	r6,r6,r17
    ab28:	1991c83a 	sub	r8,r3,r6
    ab2c:	1021883a 	mov	r16,r2
    ab30:	3825883a 	mov	r18,r7
    ab34:	003f2706 	br	a7d4 <__adddf3+0x170>
    ab38:	24d0b03a 	or	r8,r4,r19
    ab3c:	40001b1e 	bne	r8,zero,abac <__adddf3+0x548>
    ab40:	0005883a 	mov	r2,zero
    ab44:	0007883a 	mov	r3,zero
    ab48:	0021883a 	mov	r16,zero
    ab4c:	003f4d06 	br	a884 <__adddf3+0x220>
    ab50:	008007c4 	movi	r2,31
    ab54:	11003c16 	blt	r2,r4,ac48 <__adddf3+0x5e4>
    ab58:	00800804 	movi	r2,32
    ab5c:	1105c83a 	sub	r2,r2,r4
    ab60:	488e983a 	sll	r7,r9,r2
    ab64:	310ad83a 	srl	r5,r6,r4
    ab68:	3084983a 	sll	r2,r6,r2
    ab6c:	4912d83a 	srl	r9,r9,r4
    ab70:	394ab03a 	or	r5,r7,r5
    ab74:	1004c03a 	cmpne	r2,r2,zero
    ab78:	288ab03a 	or	r5,r5,r2
    ab7c:	003f5306 	br	a8cc <__adddf3+0x268>
    ab80:	4448b03a 	or	r4,r8,r17
    ab84:	20003e26 	beq	r4,zero,ac80 <__adddf3+0x61c>
    ab88:	00c6303a 	nor	r3,zero,r3
    ab8c:	18003a1e 	bne	r3,zero,ac78 <__adddf3+0x614>
    ab90:	3463c83a 	sub	r17,r6,r17
    ab94:	4a07c83a 	sub	r3,r9,r8
    ab98:	344d803a 	cmpltu	r6,r6,r17
    ab9c:	1991c83a 	sub	r8,r3,r6
    aba0:	1021883a 	mov	r16,r2
    aba4:	3825883a 	mov	r18,r7
    aba8:	003f0a06 	br	a7d4 <__adddf3+0x170>
    abac:	2023883a 	mov	r17,r4
    abb0:	003f0d06 	br	a7e8 <__adddf3+0x184>
    abb4:	0081ffc4 	movi	r2,2047
    abb8:	80bf3f1e 	bne	r16,r2,a8b8 <__adddf3+0x254>
    abbc:	003ec806 	br	a6e0 <__adddf3+0x7c>
    abc0:	0005883a 	mov	r2,zero
    abc4:	003fb106 	br	aa8c <__adddf3+0x428>
    abc8:	0007883a 	mov	r3,zero
    abcc:	003fbc06 	br	aac0 <__adddf3+0x45c>
    abd0:	4444b03a 	or	r2,r8,r17
    abd4:	8000871e 	bne	r16,zero,adf4 <__adddf3+0x790>
    abd8:	1000ba26 	beq	r2,zero,aec4 <__adddf3+0x860>
    abdc:	4984b03a 	or	r2,r9,r6
    abe0:	103ebf26 	beq	r2,zero,a6e0 <__adddf3+0x7c>
    abe4:	8985883a 	add	r2,r17,r6
    abe8:	4247883a 	add	r3,r8,r9
    abec:	1451803a 	cmpltu	r8,r2,r17
    abf0:	40d1883a 	add	r8,r8,r3
    abf4:	40c0202c 	andhi	r3,r8,128
    abf8:	1023883a 	mov	r17,r2
    abfc:	183f1a26 	beq	r3,zero,a868 <__adddf3+0x204>
    ac00:	00bfe034 	movhi	r2,65408
    ac04:	10bfffc4 	addi	r2,r2,-1
    ac08:	2021883a 	mov	r16,r4
    ac0c:	4090703a 	and	r8,r8,r2
    ac10:	003eb306 	br	a6e0 <__adddf3+0x7c>
    ac14:	4444b03a 	or	r2,r8,r17
    ac18:	8000291e 	bne	r16,zero,acc0 <__adddf3+0x65c>
    ac1c:	10004b1e 	bne	r2,zero,ad4c <__adddf3+0x6e8>
    ac20:	4990b03a 	or	r8,r9,r6
    ac24:	40008b26 	beq	r8,zero,ae54 <__adddf3+0x7f0>
    ac28:	4811883a 	mov	r8,r9
    ac2c:	3023883a 	mov	r17,r6
    ac30:	3825883a 	mov	r18,r7
    ac34:	003eaa06 	br	a6e0 <__adddf3+0x7c>
    ac38:	1021883a 	mov	r16,r2
    ac3c:	0011883a 	mov	r8,zero
    ac40:	0005883a 	mov	r2,zero
    ac44:	003f0f06 	br	a884 <__adddf3+0x220>
    ac48:	217ff804 	addi	r5,r4,-32
    ac4c:	00800804 	movi	r2,32
    ac50:	494ad83a 	srl	r5,r9,r5
    ac54:	20807d26 	beq	r4,r2,ae4c <__adddf3+0x7e8>
    ac58:	00801004 	movi	r2,64
    ac5c:	1109c83a 	sub	r4,r2,r4
    ac60:	4912983a 	sll	r9,r9,r4
    ac64:	498cb03a 	or	r6,r9,r6
    ac68:	300cc03a 	cmpne	r6,r6,zero
    ac6c:	298ab03a 	or	r5,r5,r6
    ac70:	0013883a 	mov	r9,zero
    ac74:	003f1506 	br	a8cc <__adddf3+0x268>
    ac78:	0101ffc4 	movi	r4,2047
    ac7c:	113f9a1e 	bne	r2,r4,aae8 <__adddf3+0x484>
    ac80:	4811883a 	mov	r8,r9
    ac84:	3023883a 	mov	r17,r6
    ac88:	1021883a 	mov	r16,r2
    ac8c:	3825883a 	mov	r18,r7
    ac90:	003e9306 	br	a6e0 <__adddf3+0x7c>
    ac94:	8000161e 	bne	r16,zero,acf0 <__adddf3+0x68c>
    ac98:	444ab03a 	or	r5,r8,r17
    ac9c:	28005126 	beq	r5,zero,ade4 <__adddf3+0x780>
    aca0:	0108303a 	nor	r4,zero,r4
    aca4:	20004d1e 	bne	r4,zero,addc <__adddf3+0x778>
    aca8:	89a3883a 	add	r17,r17,r6
    acac:	4253883a 	add	r9,r8,r9
    acb0:	898d803a 	cmpltu	r6,r17,r6
    acb4:	3251883a 	add	r8,r6,r9
    acb8:	1021883a 	mov	r16,r2
    acbc:	003f0806 	br	a8e0 <__adddf3+0x27c>
    acc0:	1000301e 	bne	r2,zero,ad84 <__adddf3+0x720>
    acc4:	4984b03a 	or	r2,r9,r6
    acc8:	10007126 	beq	r2,zero,ae90 <__adddf3+0x82c>
    accc:	4811883a 	mov	r8,r9
    acd0:	3023883a 	mov	r17,r6
    acd4:	3825883a 	mov	r18,r7
    acd8:	0401ffc4 	movi	r16,2047
    acdc:	003e8006 	br	a6e0 <__adddf3+0x7c>
    ace0:	4462b03a 	or	r17,r8,r17
    ace4:	8822c03a 	cmpne	r17,r17,zero
    ace8:	0007883a 	mov	r3,zero
    acec:	003f8b06 	br	ab1c <__adddf3+0x4b8>
    acf0:	0141ffc4 	movi	r5,2047
    acf4:	11403b26 	beq	r2,r5,ade4 <__adddf3+0x780>
    acf8:	0109c83a 	sub	r4,zero,r4
    acfc:	42002034 	orhi	r8,r8,128
    ad00:	01400e04 	movi	r5,56
    ad04:	29006716 	blt	r5,r4,aea4 <__adddf3+0x840>
    ad08:	014007c4 	movi	r5,31
    ad0c:	29007016 	blt	r5,r4,aed0 <__adddf3+0x86c>
    ad10:	01400804 	movi	r5,32
    ad14:	290bc83a 	sub	r5,r5,r4
    ad18:	4154983a 	sll	r10,r8,r5
    ad1c:	890ed83a 	srl	r7,r17,r4
    ad20:	894a983a 	sll	r5,r17,r5
    ad24:	4108d83a 	srl	r4,r8,r4
    ad28:	51e2b03a 	or	r17,r10,r7
    ad2c:	280ac03a 	cmpne	r5,r5,zero
    ad30:	8962b03a 	or	r17,r17,r5
    ad34:	89a3883a 	add	r17,r17,r6
    ad38:	2253883a 	add	r9,r4,r9
    ad3c:	898d803a 	cmpltu	r6,r17,r6
    ad40:	3251883a 	add	r8,r6,r9
    ad44:	1021883a 	mov	r16,r2
    ad48:	003ee506 	br	a8e0 <__adddf3+0x27c>
    ad4c:	4984b03a 	or	r2,r9,r6
    ad50:	103e6326 	beq	r2,zero,a6e0 <__adddf3+0x7c>
    ad54:	8987c83a 	sub	r3,r17,r6
    ad58:	88c9803a 	cmpltu	r4,r17,r3
    ad5c:	4245c83a 	sub	r2,r8,r9
    ad60:	1105c83a 	sub	r2,r2,r4
    ad64:	1100202c 	andhi	r4,r2,128
    ad68:	203ebb26 	beq	r4,zero,a858 <__adddf3+0x1f4>
    ad6c:	3463c83a 	sub	r17,r6,r17
    ad70:	4a07c83a 	sub	r3,r9,r8
    ad74:	344d803a 	cmpltu	r6,r6,r17
    ad78:	1991c83a 	sub	r8,r3,r6
    ad7c:	3825883a 	mov	r18,r7
    ad80:	003e5706 	br	a6e0 <__adddf3+0x7c>
    ad84:	4984b03a 	or	r2,r9,r6
    ad88:	10002e26 	beq	r2,zero,ae44 <__adddf3+0x7e0>
    ad8c:	4004d0fa 	srli	r2,r8,3
    ad90:	8822d0fa 	srli	r17,r17,3
    ad94:	4010977a 	slli	r8,r8,29
    ad98:	10c0022c 	andhi	r3,r2,8
    ad9c:	4462b03a 	or	r17,r8,r17
    ada0:	18000826 	beq	r3,zero,adc4 <__adddf3+0x760>
    ada4:	4808d0fa 	srli	r4,r9,3
    ada8:	20c0022c 	andhi	r3,r4,8
    adac:	1800051e 	bne	r3,zero,adc4 <__adddf3+0x760>
    adb0:	300cd0fa 	srli	r6,r6,3
    adb4:	4806977a 	slli	r3,r9,29
    adb8:	2005883a 	mov	r2,r4
    adbc:	3825883a 	mov	r18,r7
    adc0:	19a2b03a 	or	r17,r3,r6
    adc4:	8810d77a 	srli	r8,r17,29
    adc8:	100490fa 	slli	r2,r2,3
    adcc:	882290fa 	slli	r17,r17,3
    add0:	0401ffc4 	movi	r16,2047
    add4:	4090b03a 	or	r8,r8,r2
    add8:	003e4106 	br	a6e0 <__adddf3+0x7c>
    addc:	0141ffc4 	movi	r5,2047
    ade0:	117fc71e 	bne	r2,r5,ad00 <__adddf3+0x69c>
    ade4:	4811883a 	mov	r8,r9
    ade8:	3023883a 	mov	r17,r6
    adec:	1021883a 	mov	r16,r2
    adf0:	003e3b06 	br	a6e0 <__adddf3+0x7c>
    adf4:	10002f26 	beq	r2,zero,aeb4 <__adddf3+0x850>
    adf8:	4984b03a 	or	r2,r9,r6
    adfc:	10001126 	beq	r2,zero,ae44 <__adddf3+0x7e0>
    ae00:	4004d0fa 	srli	r2,r8,3
    ae04:	8822d0fa 	srli	r17,r17,3
    ae08:	4010977a 	slli	r8,r8,29
    ae0c:	10c0022c 	andhi	r3,r2,8
    ae10:	4462b03a 	or	r17,r8,r17
    ae14:	183feb26 	beq	r3,zero,adc4 <__adddf3+0x760>
    ae18:	4808d0fa 	srli	r4,r9,3
    ae1c:	20c0022c 	andhi	r3,r4,8
    ae20:	183fe81e 	bne	r3,zero,adc4 <__adddf3+0x760>
    ae24:	300cd0fa 	srli	r6,r6,3
    ae28:	4806977a 	slli	r3,r9,29
    ae2c:	2005883a 	mov	r2,r4
    ae30:	19a2b03a 	or	r17,r3,r6
    ae34:	003fe306 	br	adc4 <__adddf3+0x760>
    ae38:	0011883a 	mov	r8,zero
    ae3c:	0005883a 	mov	r2,zero
    ae40:	003e3f06 	br	a740 <__adddf3+0xdc>
    ae44:	0401ffc4 	movi	r16,2047
    ae48:	003e2506 	br	a6e0 <__adddf3+0x7c>
    ae4c:	0013883a 	mov	r9,zero
    ae50:	003f8406 	br	ac64 <__adddf3+0x600>
    ae54:	0005883a 	mov	r2,zero
    ae58:	0007883a 	mov	r3,zero
    ae5c:	003e8906 	br	a884 <__adddf3+0x220>
    ae60:	197ff804 	addi	r5,r3,-32
    ae64:	01000804 	movi	r4,32
    ae68:	414ad83a 	srl	r5,r8,r5
    ae6c:	19002426 	beq	r3,r4,af00 <__adddf3+0x89c>
    ae70:	01001004 	movi	r4,64
    ae74:	20c7c83a 	sub	r3,r4,r3
    ae78:	40c6983a 	sll	r3,r8,r3
    ae7c:	1c46b03a 	or	r3,r3,r17
    ae80:	1806c03a 	cmpne	r3,r3,zero
    ae84:	28e2b03a 	or	r17,r5,r3
    ae88:	0007883a 	mov	r3,zero
    ae8c:	003f2306 	br	ab1c <__adddf3+0x4b8>
    ae90:	0007883a 	mov	r3,zero
    ae94:	5811883a 	mov	r8,r11
    ae98:	00bfffc4 	movi	r2,-1
    ae9c:	0401ffc4 	movi	r16,2047
    aea0:	003e7806 	br	a884 <__adddf3+0x220>
    aea4:	4462b03a 	or	r17,r8,r17
    aea8:	8822c03a 	cmpne	r17,r17,zero
    aeac:	0009883a 	mov	r4,zero
    aeb0:	003fa006 	br	ad34 <__adddf3+0x6d0>
    aeb4:	4811883a 	mov	r8,r9
    aeb8:	3023883a 	mov	r17,r6
    aebc:	0401ffc4 	movi	r16,2047
    aec0:	003e0706 	br	a6e0 <__adddf3+0x7c>
    aec4:	4811883a 	mov	r8,r9
    aec8:	3023883a 	mov	r17,r6
    aecc:	003e0406 	br	a6e0 <__adddf3+0x7c>
    aed0:	21fff804 	addi	r7,r4,-32
    aed4:	01400804 	movi	r5,32
    aed8:	41ced83a 	srl	r7,r8,r7
    aedc:	21400a26 	beq	r4,r5,af08 <__adddf3+0x8a4>
    aee0:	01401004 	movi	r5,64
    aee4:	2909c83a 	sub	r4,r5,r4
    aee8:	4108983a 	sll	r4,r8,r4
    aeec:	2448b03a 	or	r4,r4,r17
    aef0:	2008c03a 	cmpne	r4,r4,zero
    aef4:	3922b03a 	or	r17,r7,r4
    aef8:	0009883a 	mov	r4,zero
    aefc:	003f8d06 	br	ad34 <__adddf3+0x6d0>
    af00:	0007883a 	mov	r3,zero
    af04:	003fdd06 	br	ae7c <__adddf3+0x818>
    af08:	0009883a 	mov	r4,zero
    af0c:	003ff706 	br	aeec <__adddf3+0x888>

0000af10 <__divdf3>:
    af10:	defff204 	addi	sp,sp,-56
    af14:	dd400915 	stw	r21,36(sp)
    af18:	282ad53a 	srli	r21,r5,20
    af1c:	dd000815 	stw	r20,32(sp)
    af20:	2828d7fa 	srli	r20,r5,31
    af24:	dc000415 	stw	r16,16(sp)
    af28:	04000434 	movhi	r16,16
    af2c:	df000c15 	stw	fp,48(sp)
    af30:	843fffc4 	addi	r16,r16,-1
    af34:	dfc00d15 	stw	ra,52(sp)
    af38:	ddc00b15 	stw	r23,44(sp)
    af3c:	dd800a15 	stw	r22,40(sp)
    af40:	dcc00715 	stw	r19,28(sp)
    af44:	dc800615 	stw	r18,24(sp)
    af48:	dc400515 	stw	r17,20(sp)
    af4c:	ad41ffcc 	andi	r21,r21,2047
    af50:	2c20703a 	and	r16,r5,r16
    af54:	a7003fcc 	andi	fp,r20,255
    af58:	a8006126 	beq	r21,zero,b0e0 <__divdf3+0x1d0>
    af5c:	0081ffc4 	movi	r2,2047
    af60:	2025883a 	mov	r18,r4
    af64:	a8803726 	beq	r21,r2,b044 <__divdf3+0x134>
    af68:	80c00434 	orhi	r3,r16,16
    af6c:	180690fa 	slli	r3,r3,3
    af70:	2020d77a 	srli	r16,r4,29
    af74:	202490fa 	slli	r18,r4,3
    af78:	ad7f0044 	addi	r21,r21,-1023
    af7c:	80e0b03a 	or	r16,r16,r3
    af80:	0027883a 	mov	r19,zero
    af84:	0013883a 	mov	r9,zero
    af88:	3808d53a 	srli	r4,r7,20
    af8c:	382cd7fa 	srli	r22,r7,31
    af90:	04400434 	movhi	r17,16
    af94:	8c7fffc4 	addi	r17,r17,-1
    af98:	2101ffcc 	andi	r4,r4,2047
    af9c:	3011883a 	mov	r8,r6
    afa0:	3c62703a 	and	r17,r7,r17
    afa4:	b5c03fcc 	andi	r23,r22,255
    afa8:	20006c26 	beq	r4,zero,b15c <__divdf3+0x24c>
    afac:	0081ffc4 	movi	r2,2047
    afb0:	20806426 	beq	r4,r2,b144 <__divdf3+0x234>
    afb4:	88c00434 	orhi	r3,r17,16
    afb8:	180690fa 	slli	r3,r3,3
    afbc:	3022d77a 	srli	r17,r6,29
    afc0:	301090fa 	slli	r8,r6,3
    afc4:	213f0044 	addi	r4,r4,-1023
    afc8:	88e2b03a 	or	r17,r17,r3
    afcc:	000d883a 	mov	r6,zero
    afd0:	a584f03a 	xor	r2,r20,r22
    afd4:	34cab03a 	or	r5,r6,r19
    afd8:	1007883a 	mov	r3,r2
    afdc:	14c03fcc 	andi	r19,r2,255
    afe0:	008003c4 	movi	r2,15
    afe4:	a92bc83a 	sub	r21,r21,r4
    afe8:	11409036 	bltu	r2,r5,b22c <__divdf3+0x31c>
    afec:	280a90ba 	slli	r5,r5,2
    aff0:	00800074 	movhi	r2,1
    aff4:	10ac0104 	addi	r2,r2,-20476
    aff8:	288b883a 	add	r5,r5,r2
    affc:	28800017 	ldw	r2,0(r5)
    b000:	1000683a 	jmp	r2
    b004:	0000b22c 	andhi	zero,zero,712
    b008:	0000b07c 	xorhi	zero,zero,705
    b00c:	0000b21c 	xori	zero,zero,712
    b010:	0000b070 	cmpltui	zero,zero,705
    b014:	0000b21c 	xori	zero,zero,712
    b018:	0000b1f0 	cmpltui	zero,zero,711
    b01c:	0000b21c 	xori	zero,zero,712
    b020:	0000b070 	cmpltui	zero,zero,705
    b024:	0000b07c 	xorhi	zero,zero,705
    b028:	0000b07c 	xorhi	zero,zero,705
    b02c:	0000b1f0 	cmpltui	zero,zero,711
    b030:	0000b070 	cmpltui	zero,zero,705
    b034:	0000b060 	cmpeqi	zero,zero,705
    b038:	0000b060 	cmpeqi	zero,zero,705
    b03c:	0000b060 	cmpeqi	zero,zero,705
    b040:	0000b510 	cmplti	zero,zero,724
    b044:	2404b03a 	or	r2,r4,r16
    b048:	1000661e 	bne	r2,zero,b1e4 <__divdf3+0x2d4>
    b04c:	04c00204 	movi	r19,8
    b050:	0021883a 	mov	r16,zero
    b054:	0025883a 	mov	r18,zero
    b058:	02400084 	movi	r9,2
    b05c:	003fca06 	br	af88 <__divdf3+0x78>
    b060:	8023883a 	mov	r17,r16
    b064:	9011883a 	mov	r8,r18
    b068:	e02f883a 	mov	r23,fp
    b06c:	480d883a 	mov	r6,r9
    b070:	00800084 	movi	r2,2
    b074:	3081311e 	bne	r6,r2,b53c <__divdf3+0x62c>
    b078:	b827883a 	mov	r19,r23
    b07c:	98c0004c 	andi	r3,r19,1
    b080:	0081ffc4 	movi	r2,2047
    b084:	000b883a 	mov	r5,zero
    b088:	0025883a 	mov	r18,zero
    b08c:	1004953a 	slli	r2,r2,20
    b090:	18c03fcc 	andi	r3,r3,255
    b094:	04400434 	movhi	r17,16
    b098:	8c7fffc4 	addi	r17,r17,-1
    b09c:	180697fa 	slli	r3,r3,31
    b0a0:	2c4a703a 	and	r5,r5,r17
    b0a4:	288ab03a 	or	r5,r5,r2
    b0a8:	28c6b03a 	or	r3,r5,r3
    b0ac:	9005883a 	mov	r2,r18
    b0b0:	dfc00d17 	ldw	ra,52(sp)
    b0b4:	df000c17 	ldw	fp,48(sp)
    b0b8:	ddc00b17 	ldw	r23,44(sp)
    b0bc:	dd800a17 	ldw	r22,40(sp)
    b0c0:	dd400917 	ldw	r21,36(sp)
    b0c4:	dd000817 	ldw	r20,32(sp)
    b0c8:	dcc00717 	ldw	r19,28(sp)
    b0cc:	dc800617 	ldw	r18,24(sp)
    b0d0:	dc400517 	ldw	r17,20(sp)
    b0d4:	dc000417 	ldw	r16,16(sp)
    b0d8:	dec00e04 	addi	sp,sp,56
    b0dc:	f800283a 	ret
    b0e0:	2404b03a 	or	r2,r4,r16
    b0e4:	2027883a 	mov	r19,r4
    b0e8:	10003926 	beq	r2,zero,b1d0 <__divdf3+0x2c0>
    b0ec:	80012e26 	beq	r16,zero,b5a8 <__divdf3+0x698>
    b0f0:	8009883a 	mov	r4,r16
    b0f4:	d9800315 	stw	r6,12(sp)
    b0f8:	d9c00215 	stw	r7,8(sp)
    b0fc:	000cc680 	call	cc68 <__clzsi2>
    b100:	d9800317 	ldw	r6,12(sp)
    b104:	d9c00217 	ldw	r7,8(sp)
    b108:	10fffd44 	addi	r3,r2,-11
    b10c:	01000704 	movi	r4,28
    b110:	20c12116 	blt	r4,r3,b598 <__divdf3+0x688>
    b114:	01000744 	movi	r4,29
    b118:	147ffe04 	addi	r17,r2,-8
    b11c:	20c9c83a 	sub	r4,r4,r3
    b120:	8460983a 	sll	r16,r16,r17
    b124:	9908d83a 	srl	r4,r19,r4
    b128:	9c64983a 	sll	r18,r19,r17
    b12c:	2420b03a 	or	r16,r4,r16
    b130:	057f0084 	movi	r21,-1022
    b134:	a8ebc83a 	sub	r21,r21,r3
    b138:	0027883a 	mov	r19,zero
    b13c:	0013883a 	mov	r9,zero
    b140:	003f9106 	br	af88 <__divdf3+0x78>
    b144:	3444b03a 	or	r2,r6,r17
    b148:	10001f1e 	bne	r2,zero,b1c8 <__divdf3+0x2b8>
    b14c:	0023883a 	mov	r17,zero
    b150:	0011883a 	mov	r8,zero
    b154:	01800084 	movi	r6,2
    b158:	003f9d06 	br	afd0 <__divdf3+0xc0>
    b15c:	3444b03a 	or	r2,r6,r17
    b160:	10001526 	beq	r2,zero,b1b8 <__divdf3+0x2a8>
    b164:	88011b26 	beq	r17,zero,b5d4 <__divdf3+0x6c4>
    b168:	8809883a 	mov	r4,r17
    b16c:	d9800315 	stw	r6,12(sp)
    b170:	da400115 	stw	r9,4(sp)
    b174:	000cc680 	call	cc68 <__clzsi2>
    b178:	d9800317 	ldw	r6,12(sp)
    b17c:	da400117 	ldw	r9,4(sp)
    b180:	10fffd44 	addi	r3,r2,-11
    b184:	01000704 	movi	r4,28
    b188:	20c10e16 	blt	r4,r3,b5c4 <__divdf3+0x6b4>
    b18c:	01000744 	movi	r4,29
    b190:	123ffe04 	addi	r8,r2,-8
    b194:	20c9c83a 	sub	r4,r4,r3
    b198:	8a22983a 	sll	r17,r17,r8
    b19c:	3108d83a 	srl	r4,r6,r4
    b1a0:	3210983a 	sll	r8,r6,r8
    b1a4:	2462b03a 	or	r17,r4,r17
    b1a8:	013f0084 	movi	r4,-1022
    b1ac:	20c9c83a 	sub	r4,r4,r3
    b1b0:	000d883a 	mov	r6,zero
    b1b4:	003f8606 	br	afd0 <__divdf3+0xc0>
    b1b8:	0023883a 	mov	r17,zero
    b1bc:	0011883a 	mov	r8,zero
    b1c0:	01800044 	movi	r6,1
    b1c4:	003f8206 	br	afd0 <__divdf3+0xc0>
    b1c8:	018000c4 	movi	r6,3
    b1cc:	003f8006 	br	afd0 <__divdf3+0xc0>
    b1d0:	04c00104 	movi	r19,4
    b1d4:	0021883a 	mov	r16,zero
    b1d8:	0025883a 	mov	r18,zero
    b1dc:	02400044 	movi	r9,1
    b1e0:	003f6906 	br	af88 <__divdf3+0x78>
    b1e4:	04c00304 	movi	r19,12
    b1e8:	024000c4 	movi	r9,3
    b1ec:	003f6606 	br	af88 <__divdf3+0x78>
    b1f0:	01400434 	movhi	r5,16
    b1f4:	0007883a 	mov	r3,zero
    b1f8:	297fffc4 	addi	r5,r5,-1
    b1fc:	04bfffc4 	movi	r18,-1
    b200:	0081ffc4 	movi	r2,2047
    b204:	003fa106 	br	b08c <__divdf3+0x17c>
    b208:	00c00044 	movi	r3,1
    b20c:	1887c83a 	sub	r3,r3,r2
    b210:	01000e04 	movi	r4,56
    b214:	20c1210e 	bge	r4,r3,b69c <__divdf3+0x78c>
    b218:	98c0004c 	andi	r3,r19,1
    b21c:	0005883a 	mov	r2,zero
    b220:	000b883a 	mov	r5,zero
    b224:	0025883a 	mov	r18,zero
    b228:	003f9806 	br	b08c <__divdf3+0x17c>
    b22c:	8c00fd36 	bltu	r17,r16,b624 <__divdf3+0x714>
    b230:	8440fb26 	beq	r16,r17,b620 <__divdf3+0x710>
    b234:	8007883a 	mov	r3,r16
    b238:	ad7fffc4 	addi	r21,r21,-1
    b23c:	0021883a 	mov	r16,zero
    b240:	400ad63a 	srli	r5,r8,24
    b244:	8822923a 	slli	r17,r17,8
    b248:	1809883a 	mov	r4,r3
    b24c:	402c923a 	slli	r22,r8,8
    b250:	8978b03a 	or	fp,r17,r5
    b254:	e028d43a 	srli	r20,fp,16
    b258:	d8c00015 	stw	r3,0(sp)
    b25c:	e5ffffcc 	andi	r23,fp,65535
    b260:	a00b883a 	mov	r5,r20
    b264:	000a5a80 	call	a5a8 <__udivsi3>
    b268:	d8c00017 	ldw	r3,0(sp)
    b26c:	a00b883a 	mov	r5,r20
    b270:	d8800315 	stw	r2,12(sp)
    b274:	1809883a 	mov	r4,r3
    b278:	000a60c0 	call	a60c <__umodsi3>
    b27c:	d9800317 	ldw	r6,12(sp)
    b280:	1006943a 	slli	r3,r2,16
    b284:	9004d43a 	srli	r2,r18,16
    b288:	b9a3383a 	mul	r17,r23,r6
    b28c:	10c4b03a 	or	r2,r2,r3
    b290:	1440062e 	bgeu	r2,r17,b2ac <__divdf3+0x39c>
    b294:	1705883a 	add	r2,r2,fp
    b298:	30ffffc4 	addi	r3,r6,-1
    b29c:	1700ee36 	bltu	r2,fp,b658 <__divdf3+0x748>
    b2a0:	1440ed2e 	bgeu	r2,r17,b658 <__divdf3+0x748>
    b2a4:	31bfff84 	addi	r6,r6,-2
    b2a8:	1705883a 	add	r2,r2,fp
    b2ac:	1463c83a 	sub	r17,r2,r17
    b2b0:	a00b883a 	mov	r5,r20
    b2b4:	8809883a 	mov	r4,r17
    b2b8:	d9800315 	stw	r6,12(sp)
    b2bc:	000a5a80 	call	a5a8 <__udivsi3>
    b2c0:	a00b883a 	mov	r5,r20
    b2c4:	8809883a 	mov	r4,r17
    b2c8:	d8800215 	stw	r2,8(sp)
    b2cc:	000a60c0 	call	a60c <__umodsi3>
    b2d0:	d9c00217 	ldw	r7,8(sp)
    b2d4:	1004943a 	slli	r2,r2,16
    b2d8:	94bfffcc 	andi	r18,r18,65535
    b2dc:	b9d1383a 	mul	r8,r23,r7
    b2e0:	90a4b03a 	or	r18,r18,r2
    b2e4:	d9800317 	ldw	r6,12(sp)
    b2e8:	9200062e 	bgeu	r18,r8,b304 <__divdf3+0x3f4>
    b2ec:	9725883a 	add	r18,r18,fp
    b2f0:	38bfffc4 	addi	r2,r7,-1
    b2f4:	9700d636 	bltu	r18,fp,b650 <__divdf3+0x740>
    b2f8:	9200d52e 	bgeu	r18,r8,b650 <__divdf3+0x740>
    b2fc:	39ffff84 	addi	r7,r7,-2
    b300:	9725883a 	add	r18,r18,fp
    b304:	3004943a 	slli	r2,r6,16
    b308:	b012d43a 	srli	r9,r22,16
    b30c:	b1bfffcc 	andi	r6,r22,65535
    b310:	11e2b03a 	or	r17,r2,r7
    b314:	8806d43a 	srli	r3,r17,16
    b318:	893fffcc 	andi	r4,r17,65535
    b31c:	218b383a 	mul	r5,r4,r6
    b320:	30c5383a 	mul	r2,r6,r3
    b324:	2249383a 	mul	r4,r4,r9
    b328:	280ed43a 	srli	r7,r5,16
    b32c:	9225c83a 	sub	r18,r18,r8
    b330:	2089883a 	add	r4,r4,r2
    b334:	3909883a 	add	r4,r7,r4
    b338:	1a47383a 	mul	r3,r3,r9
    b33c:	2080022e 	bgeu	r4,r2,b348 <__divdf3+0x438>
    b340:	00800074 	movhi	r2,1
    b344:	1887883a 	add	r3,r3,r2
    b348:	2004d43a 	srli	r2,r4,16
    b34c:	2008943a 	slli	r4,r4,16
    b350:	297fffcc 	andi	r5,r5,65535
    b354:	10c7883a 	add	r3,r2,r3
    b358:	2149883a 	add	r4,r4,r5
    b35c:	90c0a536 	bltu	r18,r3,b5f4 <__divdf3+0x6e4>
    b360:	90c0bf26 	beq	r18,r3,b660 <__divdf3+0x750>
    b364:	90c7c83a 	sub	r3,r18,r3
    b368:	810fc83a 	sub	r7,r16,r4
    b36c:	81e5803a 	cmpltu	r18,r16,r7
    b370:	1ca5c83a 	sub	r18,r3,r18
    b374:	e480c126 	beq	fp,r18,b67c <__divdf3+0x76c>
    b378:	a00b883a 	mov	r5,r20
    b37c:	9009883a 	mov	r4,r18
    b380:	d9800315 	stw	r6,12(sp)
    b384:	d9c00215 	stw	r7,8(sp)
    b388:	da400115 	stw	r9,4(sp)
    b38c:	000a5a80 	call	a5a8 <__udivsi3>
    b390:	a00b883a 	mov	r5,r20
    b394:	9009883a 	mov	r4,r18
    b398:	d8800015 	stw	r2,0(sp)
    b39c:	000a60c0 	call	a60c <__umodsi3>
    b3a0:	d9c00217 	ldw	r7,8(sp)
    b3a4:	da000017 	ldw	r8,0(sp)
    b3a8:	1006943a 	slli	r3,r2,16
    b3ac:	3804d43a 	srli	r2,r7,16
    b3b0:	ba21383a 	mul	r16,r23,r8
    b3b4:	d9800317 	ldw	r6,12(sp)
    b3b8:	10c4b03a 	or	r2,r2,r3
    b3bc:	da400117 	ldw	r9,4(sp)
    b3c0:	1400062e 	bgeu	r2,r16,b3dc <__divdf3+0x4cc>
    b3c4:	1705883a 	add	r2,r2,fp
    b3c8:	40ffffc4 	addi	r3,r8,-1
    b3cc:	1700ad36 	bltu	r2,fp,b684 <__divdf3+0x774>
    b3d0:	1400ac2e 	bgeu	r2,r16,b684 <__divdf3+0x774>
    b3d4:	423fff84 	addi	r8,r8,-2
    b3d8:	1705883a 	add	r2,r2,fp
    b3dc:	1421c83a 	sub	r16,r2,r16
    b3e0:	a00b883a 	mov	r5,r20
    b3e4:	8009883a 	mov	r4,r16
    b3e8:	d9800315 	stw	r6,12(sp)
    b3ec:	d9c00215 	stw	r7,8(sp)
    b3f0:	da000015 	stw	r8,0(sp)
    b3f4:	da400115 	stw	r9,4(sp)
    b3f8:	000a5a80 	call	a5a8 <__udivsi3>
    b3fc:	8009883a 	mov	r4,r16
    b400:	a00b883a 	mov	r5,r20
    b404:	1025883a 	mov	r18,r2
    b408:	000a60c0 	call	a60c <__umodsi3>
    b40c:	d9c00217 	ldw	r7,8(sp)
    b410:	1004943a 	slli	r2,r2,16
    b414:	bcaf383a 	mul	r23,r23,r18
    b418:	393fffcc 	andi	r4,r7,65535
    b41c:	2088b03a 	or	r4,r4,r2
    b420:	d9800317 	ldw	r6,12(sp)
    b424:	da000017 	ldw	r8,0(sp)
    b428:	da400117 	ldw	r9,4(sp)
    b42c:	25c0062e 	bgeu	r4,r23,b448 <__divdf3+0x538>
    b430:	2709883a 	add	r4,r4,fp
    b434:	90bfffc4 	addi	r2,r18,-1
    b438:	27009436 	bltu	r4,fp,b68c <__divdf3+0x77c>
    b43c:	25c0932e 	bgeu	r4,r23,b68c <__divdf3+0x77c>
    b440:	94bfff84 	addi	r18,r18,-2
    b444:	2709883a 	add	r4,r4,fp
    b448:	4004943a 	slli	r2,r8,16
    b44c:	25efc83a 	sub	r23,r4,r23
    b450:	1490b03a 	or	r8,r2,r18
    b454:	4008d43a 	srli	r4,r8,16
    b458:	40ffffcc 	andi	r3,r8,65535
    b45c:	30c5383a 	mul	r2,r6,r3
    b460:	1a47383a 	mul	r3,r3,r9
    b464:	310d383a 	mul	r6,r6,r4
    b468:	100ad43a 	srli	r5,r2,16
    b46c:	4913383a 	mul	r9,r9,r4
    b470:	1987883a 	add	r3,r3,r6
    b474:	28c7883a 	add	r3,r5,r3
    b478:	1980022e 	bgeu	r3,r6,b484 <__divdf3+0x574>
    b47c:	01000074 	movhi	r4,1
    b480:	4913883a 	add	r9,r9,r4
    b484:	1808d43a 	srli	r4,r3,16
    b488:	1806943a 	slli	r3,r3,16
    b48c:	10bfffcc 	andi	r2,r2,65535
    b490:	2253883a 	add	r9,r4,r9
    b494:	1887883a 	add	r3,r3,r2
    b498:	ba403836 	bltu	r23,r9,b57c <__divdf3+0x66c>
    b49c:	ba403626 	beq	r23,r9,b578 <__divdf3+0x668>
    b4a0:	42000054 	ori	r8,r8,1
    b4a4:	a880ffc4 	addi	r2,r21,1023
    b4a8:	00bf570e 	bge	zero,r2,b208 <__divdf3+0x2f8>
    b4ac:	40c001cc 	andi	r3,r8,7
    b4b0:	18000726 	beq	r3,zero,b4d0 <__divdf3+0x5c0>
    b4b4:	40c003cc 	andi	r3,r8,15
    b4b8:	01000104 	movi	r4,4
    b4bc:	19000426 	beq	r3,r4,b4d0 <__divdf3+0x5c0>
    b4c0:	4107883a 	add	r3,r8,r4
    b4c4:	1a11803a 	cmpltu	r8,r3,r8
    b4c8:	8a23883a 	add	r17,r17,r8
    b4cc:	1811883a 	mov	r8,r3
    b4d0:	88c0402c 	andhi	r3,r17,256
    b4d4:	18000426 	beq	r3,zero,b4e8 <__divdf3+0x5d8>
    b4d8:	00ffc034 	movhi	r3,65280
    b4dc:	18ffffc4 	addi	r3,r3,-1
    b4e0:	a8810004 	addi	r2,r21,1024
    b4e4:	88e2703a 	and	r17,r17,r3
    b4e8:	00c1ff84 	movi	r3,2046
    b4ec:	18bee316 	blt	r3,r2,b07c <__divdf3+0x16c>
    b4f0:	8824977a 	slli	r18,r17,29
    b4f4:	4010d0fa 	srli	r8,r8,3
    b4f8:	8822927a 	slli	r17,r17,9
    b4fc:	1081ffcc 	andi	r2,r2,2047
    b500:	9224b03a 	or	r18,r18,r8
    b504:	880ad33a 	srli	r5,r17,12
    b508:	98c0004c 	andi	r3,r19,1
    b50c:	003edf06 	br	b08c <__divdf3+0x17c>
    b510:	8080022c 	andhi	r2,r16,8
    b514:	10001226 	beq	r2,zero,b560 <__divdf3+0x650>
    b518:	8880022c 	andhi	r2,r17,8
    b51c:	1000101e 	bne	r2,zero,b560 <__divdf3+0x650>
    b520:	00800434 	movhi	r2,16
    b524:	89400234 	orhi	r5,r17,8
    b528:	10bfffc4 	addi	r2,r2,-1
    b52c:	b007883a 	mov	r3,r22
    b530:	288a703a 	and	r5,r5,r2
    b534:	4025883a 	mov	r18,r8
    b538:	003f3106 	br	b200 <__divdf3+0x2f0>
    b53c:	008000c4 	movi	r2,3
    b540:	3080a626 	beq	r6,r2,b7dc <__divdf3+0x8cc>
    b544:	00800044 	movi	r2,1
    b548:	3080521e 	bne	r6,r2,b694 <__divdf3+0x784>
    b54c:	b807883a 	mov	r3,r23
    b550:	0005883a 	mov	r2,zero
    b554:	000b883a 	mov	r5,zero
    b558:	0025883a 	mov	r18,zero
    b55c:	003ecb06 	br	b08c <__divdf3+0x17c>
    b560:	00800434 	movhi	r2,16
    b564:	81400234 	orhi	r5,r16,8
    b568:	10bfffc4 	addi	r2,r2,-1
    b56c:	a007883a 	mov	r3,r20
    b570:	288a703a 	and	r5,r5,r2
    b574:	003f2206 	br	b200 <__divdf3+0x2f0>
    b578:	183fca26 	beq	r3,zero,b4a4 <__divdf3+0x594>
    b57c:	e5ef883a 	add	r23,fp,r23
    b580:	40bfffc4 	addi	r2,r8,-1
    b584:	bf00392e 	bgeu	r23,fp,b66c <__divdf3+0x75c>
    b588:	1011883a 	mov	r8,r2
    b58c:	ba7fc41e 	bne	r23,r9,b4a0 <__divdf3+0x590>
    b590:	b0ffc31e 	bne	r22,r3,b4a0 <__divdf3+0x590>
    b594:	003fc306 	br	b4a4 <__divdf3+0x594>
    b598:	10bff604 	addi	r2,r2,-40
    b59c:	98a0983a 	sll	r16,r19,r2
    b5a0:	0025883a 	mov	r18,zero
    b5a4:	003ee206 	br	b130 <__divdf3+0x220>
    b5a8:	d9800315 	stw	r6,12(sp)
    b5ac:	d9c00215 	stw	r7,8(sp)
    b5b0:	000cc680 	call	cc68 <__clzsi2>
    b5b4:	10800804 	addi	r2,r2,32
    b5b8:	d9c00217 	ldw	r7,8(sp)
    b5bc:	d9800317 	ldw	r6,12(sp)
    b5c0:	003ed106 	br	b108 <__divdf3+0x1f8>
    b5c4:	10bff604 	addi	r2,r2,-40
    b5c8:	30a2983a 	sll	r17,r6,r2
    b5cc:	0011883a 	mov	r8,zero
    b5d0:	003ef506 	br	b1a8 <__divdf3+0x298>
    b5d4:	3009883a 	mov	r4,r6
    b5d8:	d9800315 	stw	r6,12(sp)
    b5dc:	da400115 	stw	r9,4(sp)
    b5e0:	000cc680 	call	cc68 <__clzsi2>
    b5e4:	10800804 	addi	r2,r2,32
    b5e8:	da400117 	ldw	r9,4(sp)
    b5ec:	d9800317 	ldw	r6,12(sp)
    b5f0:	003ee306 	br	b180 <__divdf3+0x270>
    b5f4:	85a1883a 	add	r16,r16,r22
    b5f8:	8585803a 	cmpltu	r2,r16,r22
    b5fc:	1705883a 	add	r2,r2,fp
    b600:	14a5883a 	add	r18,r2,r18
    b604:	88bfffc4 	addi	r2,r17,-1
    b608:	e4800c2e 	bgeu	fp,r18,b63c <__divdf3+0x72c>
    b60c:	90c03e36 	bltu	r18,r3,b708 <__divdf3+0x7f8>
    b610:	1c806926 	beq	r3,r18,b7b8 <__divdf3+0x8a8>
    b614:	90c7c83a 	sub	r3,r18,r3
    b618:	1023883a 	mov	r17,r2
    b61c:	003f5206 	br	b368 <__divdf3+0x458>
    b620:	923f0436 	bltu	r18,r8,b234 <__divdf3+0x324>
    b624:	800897fa 	slli	r4,r16,31
    b628:	9004d07a 	srli	r2,r18,1
    b62c:	8006d07a 	srli	r3,r16,1
    b630:	902097fa 	slli	r16,r18,31
    b634:	20a4b03a 	or	r18,r4,r2
    b638:	003f0106 	br	b240 <__divdf3+0x330>
    b63c:	e4bff51e 	bne	fp,r18,b614 <__divdf3+0x704>
    b640:	85bff22e 	bgeu	r16,r22,b60c <__divdf3+0x6fc>
    b644:	e0c7c83a 	sub	r3,fp,r3
    b648:	1023883a 	mov	r17,r2
    b64c:	003f4606 	br	b368 <__divdf3+0x458>
    b650:	100f883a 	mov	r7,r2
    b654:	003f2b06 	br	b304 <__divdf3+0x3f4>
    b658:	180d883a 	mov	r6,r3
    b65c:	003f1306 	br	b2ac <__divdf3+0x39c>
    b660:	813fe436 	bltu	r16,r4,b5f4 <__divdf3+0x6e4>
    b664:	0007883a 	mov	r3,zero
    b668:	003f3f06 	br	b368 <__divdf3+0x458>
    b66c:	ba402c36 	bltu	r23,r9,b720 <__divdf3+0x810>
    b670:	4dc05426 	beq	r9,r23,b7c4 <__divdf3+0x8b4>
    b674:	1011883a 	mov	r8,r2
    b678:	003f8906 	br	b4a0 <__divdf3+0x590>
    b67c:	023fffc4 	movi	r8,-1
    b680:	003f8806 	br	b4a4 <__divdf3+0x594>
    b684:	1811883a 	mov	r8,r3
    b688:	003f5406 	br	b3dc <__divdf3+0x4cc>
    b68c:	1025883a 	mov	r18,r2
    b690:	003f6d06 	br	b448 <__divdf3+0x538>
    b694:	b827883a 	mov	r19,r23
    b698:	003f8206 	br	b4a4 <__divdf3+0x594>
    b69c:	010007c4 	movi	r4,31
    b6a0:	20c02616 	blt	r4,r3,b73c <__divdf3+0x82c>
    b6a4:	00800804 	movi	r2,32
    b6a8:	10c5c83a 	sub	r2,r2,r3
    b6ac:	888a983a 	sll	r5,r17,r2
    b6b0:	40c8d83a 	srl	r4,r8,r3
    b6b4:	4084983a 	sll	r2,r8,r2
    b6b8:	88e2d83a 	srl	r17,r17,r3
    b6bc:	2906b03a 	or	r3,r5,r4
    b6c0:	1004c03a 	cmpne	r2,r2,zero
    b6c4:	1886b03a 	or	r3,r3,r2
    b6c8:	188001cc 	andi	r2,r3,7
    b6cc:	10000726 	beq	r2,zero,b6ec <__divdf3+0x7dc>
    b6d0:	188003cc 	andi	r2,r3,15
    b6d4:	01000104 	movi	r4,4
    b6d8:	11000426 	beq	r2,r4,b6ec <__divdf3+0x7dc>
    b6dc:	1805883a 	mov	r2,r3
    b6e0:	10c00104 	addi	r3,r2,4
    b6e4:	1885803a 	cmpltu	r2,r3,r2
    b6e8:	88a3883a 	add	r17,r17,r2
    b6ec:	8880202c 	andhi	r2,r17,128
    b6f0:	10002726 	beq	r2,zero,b790 <__divdf3+0x880>
    b6f4:	98c0004c 	andi	r3,r19,1
    b6f8:	00800044 	movi	r2,1
    b6fc:	000b883a 	mov	r5,zero
    b700:	0025883a 	mov	r18,zero
    b704:	003e6106 	br	b08c <__divdf3+0x17c>
    b708:	85a1883a 	add	r16,r16,r22
    b70c:	8585803a 	cmpltu	r2,r16,r22
    b710:	1705883a 	add	r2,r2,fp
    b714:	14a5883a 	add	r18,r2,r18
    b718:	8c7fff84 	addi	r17,r17,-2
    b71c:	003f1106 	br	b364 <__divdf3+0x454>
    b720:	b589883a 	add	r4,r22,r22
    b724:	25ad803a 	cmpltu	r22,r4,r22
    b728:	b739883a 	add	fp,r22,fp
    b72c:	40bfff84 	addi	r2,r8,-2
    b730:	bf2f883a 	add	r23,r23,fp
    b734:	202d883a 	mov	r22,r4
    b738:	003f9306 	br	b588 <__divdf3+0x678>
    b73c:	013ff844 	movi	r4,-31
    b740:	2085c83a 	sub	r2,r4,r2
    b744:	8888d83a 	srl	r4,r17,r2
    b748:	00800804 	movi	r2,32
    b74c:	18802126 	beq	r3,r2,b7d4 <__divdf3+0x8c4>
    b750:	00801004 	movi	r2,64
    b754:	10c5c83a 	sub	r2,r2,r3
    b758:	8884983a 	sll	r2,r17,r2
    b75c:	1204b03a 	or	r2,r2,r8
    b760:	1004c03a 	cmpne	r2,r2,zero
    b764:	2084b03a 	or	r2,r4,r2
    b768:	144001cc 	andi	r17,r2,7
    b76c:	88000d1e 	bne	r17,zero,b7a4 <__divdf3+0x894>
    b770:	000b883a 	mov	r5,zero
    b774:	1024d0fa 	srli	r18,r2,3
    b778:	98c0004c 	andi	r3,r19,1
    b77c:	0005883a 	mov	r2,zero
    b780:	9464b03a 	or	r18,r18,r17
    b784:	003e4106 	br	b08c <__divdf3+0x17c>
    b788:	1007883a 	mov	r3,r2
    b78c:	0023883a 	mov	r17,zero
    b790:	880a927a 	slli	r5,r17,9
    b794:	1805883a 	mov	r2,r3
    b798:	8822977a 	slli	r17,r17,29
    b79c:	280ad33a 	srli	r5,r5,12
    b7a0:	003ff406 	br	b774 <__divdf3+0x864>
    b7a4:	10c003cc 	andi	r3,r2,15
    b7a8:	01000104 	movi	r4,4
    b7ac:	193ff626 	beq	r3,r4,b788 <__divdf3+0x878>
    b7b0:	0023883a 	mov	r17,zero
    b7b4:	003fca06 	br	b6e0 <__divdf3+0x7d0>
    b7b8:	813fd336 	bltu	r16,r4,b708 <__divdf3+0x7f8>
    b7bc:	1023883a 	mov	r17,r2
    b7c0:	003fa806 	br	b664 <__divdf3+0x754>
    b7c4:	b0ffd636 	bltu	r22,r3,b720 <__divdf3+0x810>
    b7c8:	1011883a 	mov	r8,r2
    b7cc:	b0ff341e 	bne	r22,r3,b4a0 <__divdf3+0x590>
    b7d0:	003f3406 	br	b4a4 <__divdf3+0x594>
    b7d4:	0005883a 	mov	r2,zero
    b7d8:	003fe006 	br	b75c <__divdf3+0x84c>
    b7dc:	00800434 	movhi	r2,16
    b7e0:	89400234 	orhi	r5,r17,8
    b7e4:	10bfffc4 	addi	r2,r2,-1
    b7e8:	b807883a 	mov	r3,r23
    b7ec:	288a703a 	and	r5,r5,r2
    b7f0:	4025883a 	mov	r18,r8
    b7f4:	003e8206 	br	b200 <__divdf3+0x2f0>

0000b7f8 <__eqdf2>:
    b7f8:	2804d53a 	srli	r2,r5,20
    b7fc:	3806d53a 	srli	r3,r7,20
    b800:	02000434 	movhi	r8,16
    b804:	423fffc4 	addi	r8,r8,-1
    b808:	1081ffcc 	andi	r2,r2,2047
    b80c:	0281ffc4 	movi	r10,2047
    b810:	2a12703a 	and	r9,r5,r8
    b814:	18c1ffcc 	andi	r3,r3,2047
    b818:	3a10703a 	and	r8,r7,r8
    b81c:	280ad7fa 	srli	r5,r5,31
    b820:	380ed7fa 	srli	r7,r7,31
    b824:	12801026 	beq	r2,r10,b868 <__eqdf2+0x70>
    b828:	0281ffc4 	movi	r10,2047
    b82c:	1a800a26 	beq	r3,r10,b858 <__eqdf2+0x60>
    b830:	10c00226 	beq	r2,r3,b83c <__eqdf2+0x44>
    b834:	00800044 	movi	r2,1
    b838:	f800283a 	ret
    b83c:	4a3ffd1e 	bne	r9,r8,b834 <__eqdf2+0x3c>
    b840:	21bffc1e 	bne	r4,r6,b834 <__eqdf2+0x3c>
    b844:	29c00c26 	beq	r5,r7,b878 <__eqdf2+0x80>
    b848:	103ffa1e 	bne	r2,zero,b834 <__eqdf2+0x3c>
    b84c:	2244b03a 	or	r2,r4,r9
    b850:	1004c03a 	cmpne	r2,r2,zero
    b854:	f800283a 	ret
    b858:	3214b03a 	or	r10,r6,r8
    b85c:	503ff426 	beq	r10,zero,b830 <__eqdf2+0x38>
    b860:	00800044 	movi	r2,1
    b864:	f800283a 	ret
    b868:	2254b03a 	or	r10,r4,r9
    b86c:	503fee26 	beq	r10,zero,b828 <__eqdf2+0x30>
    b870:	00800044 	movi	r2,1
    b874:	f800283a 	ret
    b878:	0005883a 	mov	r2,zero
    b87c:	f800283a 	ret

0000b880 <__gedf2>:
    b880:	2804d53a 	srli	r2,r5,20
    b884:	3806d53a 	srli	r3,r7,20
    b888:	02000434 	movhi	r8,16
    b88c:	423fffc4 	addi	r8,r8,-1
    b890:	1081ffcc 	andi	r2,r2,2047
    b894:	0241ffc4 	movi	r9,2047
    b898:	2a14703a 	and	r10,r5,r8
    b89c:	18c1ffcc 	andi	r3,r3,2047
    b8a0:	3a10703a 	and	r8,r7,r8
    b8a4:	280ad7fa 	srli	r5,r5,31
    b8a8:	380ed7fa 	srli	r7,r7,31
    b8ac:	12401d26 	beq	r2,r9,b924 <__gedf2+0xa4>
    b8b0:	0241ffc4 	movi	r9,2047
    b8b4:	1a401226 	beq	r3,r9,b900 <__gedf2+0x80>
    b8b8:	1000081e 	bne	r2,zero,b8dc <__gedf2+0x5c>
    b8bc:	2296b03a 	or	r11,r4,r10
    b8c0:	5813003a 	cmpeq	r9,r11,zero
    b8c4:	1800091e 	bne	r3,zero,b8ec <__gedf2+0x6c>
    b8c8:	3218b03a 	or	r12,r6,r8
    b8cc:	6000071e 	bne	r12,zero,b8ec <__gedf2+0x6c>
    b8d0:	0005883a 	mov	r2,zero
    b8d4:	5800101e 	bne	r11,zero,b918 <__gedf2+0x98>
    b8d8:	f800283a 	ret
    b8dc:	18000c1e 	bne	r3,zero,b910 <__gedf2+0x90>
    b8e0:	3212b03a 	or	r9,r6,r8
    b8e4:	48000c26 	beq	r9,zero,b918 <__gedf2+0x98>
    b8e8:	0013883a 	mov	r9,zero
    b8ec:	39c03fcc 	andi	r7,r7,255
    b8f0:	48000826 	beq	r9,zero,b914 <__gedf2+0x94>
    b8f4:	38000926 	beq	r7,zero,b91c <__gedf2+0x9c>
    b8f8:	00800044 	movi	r2,1
    b8fc:	f800283a 	ret
    b900:	3212b03a 	or	r9,r6,r8
    b904:	483fec26 	beq	r9,zero,b8b8 <__gedf2+0x38>
    b908:	00bfff84 	movi	r2,-2
    b90c:	f800283a 	ret
    b910:	39c03fcc 	andi	r7,r7,255
    b914:	29c00626 	beq	r5,r7,b930 <__gedf2+0xb0>
    b918:	283ff726 	beq	r5,zero,b8f8 <__gedf2+0x78>
    b91c:	00bfffc4 	movi	r2,-1
    b920:	f800283a 	ret
    b924:	2292b03a 	or	r9,r4,r10
    b928:	483fe126 	beq	r9,zero,b8b0 <__gedf2+0x30>
    b92c:	003ff606 	br	b908 <__gedf2+0x88>
    b930:	18bff916 	blt	r3,r2,b918 <__gedf2+0x98>
    b934:	10c00316 	blt	r2,r3,b944 <__gedf2+0xc4>
    b938:	42bff736 	bltu	r8,r10,b918 <__gedf2+0x98>
    b93c:	52000326 	beq	r10,r8,b94c <__gedf2+0xcc>
    b940:	5200042e 	bgeu	r10,r8,b954 <__gedf2+0xd4>
    b944:	283fec1e 	bne	r5,zero,b8f8 <__gedf2+0x78>
    b948:	003ff406 	br	b91c <__gedf2+0x9c>
    b94c:	313ff236 	bltu	r6,r4,b918 <__gedf2+0x98>
    b950:	21bffc36 	bltu	r4,r6,b944 <__gedf2+0xc4>
    b954:	0005883a 	mov	r2,zero
    b958:	f800283a 	ret

0000b95c <__ledf2>:
    b95c:	2804d53a 	srli	r2,r5,20
    b960:	3810d53a 	srli	r8,r7,20
    b964:	00c00434 	movhi	r3,16
    b968:	18ffffc4 	addi	r3,r3,-1
    b96c:	1081ffcc 	andi	r2,r2,2047
    b970:	0241ffc4 	movi	r9,2047
    b974:	28d4703a 	and	r10,r5,r3
    b978:	4201ffcc 	andi	r8,r8,2047
    b97c:	38c6703a 	and	r3,r7,r3
    b980:	280ad7fa 	srli	r5,r5,31
    b984:	380ed7fa 	srli	r7,r7,31
    b988:	12401f26 	beq	r2,r9,ba08 <__ledf2+0xac>
    b98c:	0241ffc4 	movi	r9,2047
    b990:	42401426 	beq	r8,r9,b9e4 <__ledf2+0x88>
    b994:	1000091e 	bne	r2,zero,b9bc <__ledf2+0x60>
    b998:	2296b03a 	or	r11,r4,r10
    b99c:	5813003a 	cmpeq	r9,r11,zero
    b9a0:	29403fcc 	andi	r5,r5,255
    b9a4:	40000a1e 	bne	r8,zero,b9d0 <__ledf2+0x74>
    b9a8:	30d8b03a 	or	r12,r6,r3
    b9ac:	6000081e 	bne	r12,zero,b9d0 <__ledf2+0x74>
    b9b0:	0005883a 	mov	r2,zero
    b9b4:	5800111e 	bne	r11,zero,b9fc <__ledf2+0xa0>
    b9b8:	f800283a 	ret
    b9bc:	29403fcc 	andi	r5,r5,255
    b9c0:	40000c1e 	bne	r8,zero,b9f4 <__ledf2+0x98>
    b9c4:	30d2b03a 	or	r9,r6,r3
    b9c8:	48000c26 	beq	r9,zero,b9fc <__ledf2+0xa0>
    b9cc:	0013883a 	mov	r9,zero
    b9d0:	39c03fcc 	andi	r7,r7,255
    b9d4:	48000826 	beq	r9,zero,b9f8 <__ledf2+0x9c>
    b9d8:	38001126 	beq	r7,zero,ba20 <__ledf2+0xc4>
    b9dc:	00800044 	movi	r2,1
    b9e0:	f800283a 	ret
    b9e4:	30d2b03a 	or	r9,r6,r3
    b9e8:	483fea26 	beq	r9,zero,b994 <__ledf2+0x38>
    b9ec:	00800084 	movi	r2,2
    b9f0:	f800283a 	ret
    b9f4:	39c03fcc 	andi	r7,r7,255
    b9f8:	39400726 	beq	r7,r5,ba18 <__ledf2+0xbc>
    b9fc:	2800081e 	bne	r5,zero,ba20 <__ledf2+0xc4>
    ba00:	00800044 	movi	r2,1
    ba04:	f800283a 	ret
    ba08:	2292b03a 	or	r9,r4,r10
    ba0c:	483fdf26 	beq	r9,zero,b98c <__ledf2+0x30>
    ba10:	00800084 	movi	r2,2
    ba14:	f800283a 	ret
    ba18:	4080030e 	bge	r8,r2,ba28 <__ledf2+0xcc>
    ba1c:	383fef26 	beq	r7,zero,b9dc <__ledf2+0x80>
    ba20:	00bfffc4 	movi	r2,-1
    ba24:	f800283a 	ret
    ba28:	123feb16 	blt	r2,r8,b9d8 <__ledf2+0x7c>
    ba2c:	1abff336 	bltu	r3,r10,b9fc <__ledf2+0xa0>
    ba30:	50c00326 	beq	r10,r3,ba40 <__ledf2+0xe4>
    ba34:	50c0042e 	bgeu	r10,r3,ba48 <__ledf2+0xec>
    ba38:	283fe81e 	bne	r5,zero,b9dc <__ledf2+0x80>
    ba3c:	003ff806 	br	ba20 <__ledf2+0xc4>
    ba40:	313fee36 	bltu	r6,r4,b9fc <__ledf2+0xa0>
    ba44:	21bffc36 	bltu	r4,r6,ba38 <__ledf2+0xdc>
    ba48:	0005883a 	mov	r2,zero
    ba4c:	f800283a 	ret

0000ba50 <__muldf3>:
    ba50:	defff304 	addi	sp,sp,-52
    ba54:	dd400815 	stw	r21,32(sp)
    ba58:	282ad53a 	srli	r21,r5,20
    ba5c:	dd800915 	stw	r22,36(sp)
    ba60:	282cd7fa 	srli	r22,r5,31
    ba64:	dc000315 	stw	r16,12(sp)
    ba68:	04000434 	movhi	r16,16
    ba6c:	dd000715 	stw	r20,28(sp)
    ba70:	843fffc4 	addi	r16,r16,-1
    ba74:	dfc00c15 	stw	ra,48(sp)
    ba78:	df000b15 	stw	fp,44(sp)
    ba7c:	ddc00a15 	stw	r23,40(sp)
    ba80:	dcc00615 	stw	r19,24(sp)
    ba84:	dc800515 	stw	r18,20(sp)
    ba88:	dc400415 	stw	r17,16(sp)
    ba8c:	ad41ffcc 	andi	r21,r21,2047
    ba90:	2c20703a 	and	r16,r5,r16
    ba94:	b029883a 	mov	r20,r22
    ba98:	b2403fcc 	andi	r9,r22,255
    ba9c:	a8006026 	beq	r21,zero,bc20 <__muldf3+0x1d0>
    baa0:	0081ffc4 	movi	r2,2047
    baa4:	2027883a 	mov	r19,r4
    baa8:	a8803626 	beq	r21,r2,bb84 <__muldf3+0x134>
    baac:	80c00434 	orhi	r3,r16,16
    bab0:	180690fa 	slli	r3,r3,3
    bab4:	2020d77a 	srli	r16,r4,29
    bab8:	202690fa 	slli	r19,r4,3
    babc:	ad7f0044 	addi	r21,r21,-1023
    bac0:	80e0b03a 	or	r16,r16,r3
    bac4:	0025883a 	mov	r18,zero
    bac8:	0039883a 	mov	fp,zero
    bacc:	3808d53a 	srli	r4,r7,20
    bad0:	382ed7fa 	srli	r23,r7,31
    bad4:	04400434 	movhi	r17,16
    bad8:	8c7fffc4 	addi	r17,r17,-1
    badc:	2101ffcc 	andi	r4,r4,2047
    bae0:	3011883a 	mov	r8,r6
    bae4:	3c62703a 	and	r17,r7,r17
    bae8:	ba803fcc 	andi	r10,r23,255
    baec:	20006d26 	beq	r4,zero,bca4 <__muldf3+0x254>
    baf0:	0081ffc4 	movi	r2,2047
    baf4:	20806526 	beq	r4,r2,bc8c <__muldf3+0x23c>
    baf8:	88c00434 	orhi	r3,r17,16
    bafc:	180690fa 	slli	r3,r3,3
    bb00:	3022d77a 	srli	r17,r6,29
    bb04:	301090fa 	slli	r8,r6,3
    bb08:	213f0044 	addi	r4,r4,-1023
    bb0c:	88e2b03a 	or	r17,r17,r3
    bb10:	000b883a 	mov	r5,zero
    bb14:	a909883a 	add	r4,r21,r4
    bb18:	2c84b03a 	or	r2,r5,r18
    bb1c:	00c003c4 	movi	r3,15
    bb20:	bdacf03a 	xor	r22,r23,r22
    bb24:	22c00044 	addi	r11,r4,1
    bb28:	18809936 	bltu	r3,r2,bd90 <__muldf3+0x340>
    bb2c:	100490ba 	slli	r2,r2,2
    bb30:	00c00074 	movhi	r3,1
    bb34:	18eed104 	addi	r3,r3,-17596
    bb38:	10c5883a 	add	r2,r2,r3
    bb3c:	10800017 	ldw	r2,0(r2)
    bb40:	1000683a 	jmp	r2
    bb44:	0000bd90 	cmplti	zero,zero,758
    bb48:	0000bba4 	muli	zero,zero,750
    bb4c:	0000bba4 	muli	zero,zero,750
    bb50:	0000bba0 	cmpeqi	zero,zero,750
    bb54:	0000bd6c 	andhi	zero,zero,757
    bb58:	0000bd6c 	andhi	zero,zero,757
    bb5c:	0000bd54 	movui	zero,757
    bb60:	0000bba0 	cmpeqi	zero,zero,750
    bb64:	0000bd6c 	andhi	zero,zero,757
    bb68:	0000bd54 	movui	zero,757
    bb6c:	0000bd6c 	andhi	zero,zero,757
    bb70:	0000bba0 	cmpeqi	zero,zero,750
    bb74:	0000bd7c 	xorhi	zero,zero,757
    bb78:	0000bd7c 	xorhi	zero,zero,757
    bb7c:	0000bd7c 	xorhi	zero,zero,757
    bb80:	0000bf98 	cmpnei	zero,zero,766
    bb84:	2404b03a 	or	r2,r4,r16
    bb88:	10006f1e 	bne	r2,zero,bd48 <__muldf3+0x2f8>
    bb8c:	04800204 	movi	r18,8
    bb90:	0021883a 	mov	r16,zero
    bb94:	0027883a 	mov	r19,zero
    bb98:	07000084 	movi	fp,2
    bb9c:	003fcb06 	br	bacc <__muldf3+0x7c>
    bba0:	502d883a 	mov	r22,r10
    bba4:	00800084 	movi	r2,2
    bba8:	28805726 	beq	r5,r2,bd08 <__muldf3+0x2b8>
    bbac:	008000c4 	movi	r2,3
    bbb0:	28816626 	beq	r5,r2,c14c <__muldf3+0x6fc>
    bbb4:	00800044 	movi	r2,1
    bbb8:	2881411e 	bne	r5,r2,c0c0 <__muldf3+0x670>
    bbbc:	b029883a 	mov	r20,r22
    bbc0:	0005883a 	mov	r2,zero
    bbc4:	000b883a 	mov	r5,zero
    bbc8:	0027883a 	mov	r19,zero
    bbcc:	1004953a 	slli	r2,r2,20
    bbd0:	a0c03fcc 	andi	r3,r20,255
    bbd4:	04400434 	movhi	r17,16
    bbd8:	8c7fffc4 	addi	r17,r17,-1
    bbdc:	180697fa 	slli	r3,r3,31
    bbe0:	2c4a703a 	and	r5,r5,r17
    bbe4:	288ab03a 	or	r5,r5,r2
    bbe8:	28c6b03a 	or	r3,r5,r3
    bbec:	9805883a 	mov	r2,r19
    bbf0:	dfc00c17 	ldw	ra,48(sp)
    bbf4:	df000b17 	ldw	fp,44(sp)
    bbf8:	ddc00a17 	ldw	r23,40(sp)
    bbfc:	dd800917 	ldw	r22,36(sp)
    bc00:	dd400817 	ldw	r21,32(sp)
    bc04:	dd000717 	ldw	r20,28(sp)
    bc08:	dcc00617 	ldw	r19,24(sp)
    bc0c:	dc800517 	ldw	r18,20(sp)
    bc10:	dc400417 	ldw	r17,16(sp)
    bc14:	dc000317 	ldw	r16,12(sp)
    bc18:	dec00d04 	addi	sp,sp,52
    bc1c:	f800283a 	ret
    bc20:	2404b03a 	or	r2,r4,r16
    bc24:	2025883a 	mov	r18,r4
    bc28:	10004226 	beq	r2,zero,bd34 <__muldf3+0x2e4>
    bc2c:	8000fc26 	beq	r16,zero,c020 <__muldf3+0x5d0>
    bc30:	8009883a 	mov	r4,r16
    bc34:	d9800215 	stw	r6,8(sp)
    bc38:	d9c00015 	stw	r7,0(sp)
    bc3c:	da400115 	stw	r9,4(sp)
    bc40:	000cc680 	call	cc68 <__clzsi2>
    bc44:	d9800217 	ldw	r6,8(sp)
    bc48:	d9c00017 	ldw	r7,0(sp)
    bc4c:	da400117 	ldw	r9,4(sp)
    bc50:	10fffd44 	addi	r3,r2,-11
    bc54:	01000704 	movi	r4,28
    bc58:	20c0ed16 	blt	r4,r3,c010 <__muldf3+0x5c0>
    bc5c:	01000744 	movi	r4,29
    bc60:	147ffe04 	addi	r17,r2,-8
    bc64:	20c9c83a 	sub	r4,r4,r3
    bc68:	8460983a 	sll	r16,r16,r17
    bc6c:	9108d83a 	srl	r4,r18,r4
    bc70:	9466983a 	sll	r19,r18,r17
    bc74:	2420b03a 	or	r16,r4,r16
    bc78:	013f0084 	movi	r4,-1022
    bc7c:	20ebc83a 	sub	r21,r4,r3
    bc80:	0025883a 	mov	r18,zero
    bc84:	0039883a 	mov	fp,zero
    bc88:	003f9006 	br	bacc <__muldf3+0x7c>
    bc8c:	3444b03a 	or	r2,r6,r17
    bc90:	1000261e 	bne	r2,zero,bd2c <__muldf3+0x2dc>
    bc94:	0023883a 	mov	r17,zero
    bc98:	0011883a 	mov	r8,zero
    bc9c:	01400084 	movi	r5,2
    bca0:	003f9c06 	br	bb14 <__muldf3+0xc4>
    bca4:	3444b03a 	or	r2,r6,r17
    bca8:	10001c26 	beq	r2,zero,bd1c <__muldf3+0x2cc>
    bcac:	8800ce26 	beq	r17,zero,bfe8 <__muldf3+0x598>
    bcb0:	8809883a 	mov	r4,r17
    bcb4:	d9800215 	stw	r6,8(sp)
    bcb8:	da400115 	stw	r9,4(sp)
    bcbc:	da800015 	stw	r10,0(sp)
    bcc0:	000cc680 	call	cc68 <__clzsi2>
    bcc4:	d9800217 	ldw	r6,8(sp)
    bcc8:	da400117 	ldw	r9,4(sp)
    bccc:	da800017 	ldw	r10,0(sp)
    bcd0:	113ffd44 	addi	r4,r2,-11
    bcd4:	00c00704 	movi	r3,28
    bcd8:	1900bf16 	blt	r3,r4,bfd8 <__muldf3+0x588>
    bcdc:	00c00744 	movi	r3,29
    bce0:	123ffe04 	addi	r8,r2,-8
    bce4:	1907c83a 	sub	r3,r3,r4
    bce8:	8a22983a 	sll	r17,r17,r8
    bcec:	30c6d83a 	srl	r3,r6,r3
    bcf0:	3210983a 	sll	r8,r6,r8
    bcf4:	1c62b03a 	or	r17,r3,r17
    bcf8:	017f0084 	movi	r5,-1022
    bcfc:	2909c83a 	sub	r4,r5,r4
    bd00:	000b883a 	mov	r5,zero
    bd04:	003f8306 	br	bb14 <__muldf3+0xc4>
    bd08:	b029883a 	mov	r20,r22
    bd0c:	0081ffc4 	movi	r2,2047
    bd10:	000b883a 	mov	r5,zero
    bd14:	0027883a 	mov	r19,zero
    bd18:	003fac06 	br	bbcc <__muldf3+0x17c>
    bd1c:	0023883a 	mov	r17,zero
    bd20:	0011883a 	mov	r8,zero
    bd24:	01400044 	movi	r5,1
    bd28:	003f7a06 	br	bb14 <__muldf3+0xc4>
    bd2c:	014000c4 	movi	r5,3
    bd30:	003f7806 	br	bb14 <__muldf3+0xc4>
    bd34:	04800104 	movi	r18,4
    bd38:	0021883a 	mov	r16,zero
    bd3c:	0027883a 	mov	r19,zero
    bd40:	07000044 	movi	fp,1
    bd44:	003f6106 	br	bacc <__muldf3+0x7c>
    bd48:	04800304 	movi	r18,12
    bd4c:	070000c4 	movi	fp,3
    bd50:	003f5e06 	br	bacc <__muldf3+0x7c>
    bd54:	01400434 	movhi	r5,16
    bd58:	0029883a 	mov	r20,zero
    bd5c:	297fffc4 	addi	r5,r5,-1
    bd60:	04ffffc4 	movi	r19,-1
    bd64:	0081ffc4 	movi	r2,2047
    bd68:	003f9806 	br	bbcc <__muldf3+0x17c>
    bd6c:	8023883a 	mov	r17,r16
    bd70:	9811883a 	mov	r8,r19
    bd74:	e00b883a 	mov	r5,fp
    bd78:	003f8a06 	br	bba4 <__muldf3+0x154>
    bd7c:	8023883a 	mov	r17,r16
    bd80:	9811883a 	mov	r8,r19
    bd84:	482d883a 	mov	r22,r9
    bd88:	e00b883a 	mov	r5,fp
    bd8c:	003f8506 	br	bba4 <__muldf3+0x154>
    bd90:	980ad43a 	srli	r5,r19,16
    bd94:	401ad43a 	srli	r13,r8,16
    bd98:	9cffffcc 	andi	r19,r19,65535
    bd9c:	423fffcc 	andi	r8,r8,65535
    bda0:	44d9383a 	mul	r12,r8,r19
    bda4:	4145383a 	mul	r2,r8,r5
    bda8:	6ccd383a 	mul	r6,r13,r19
    bdac:	6006d43a 	srli	r3,r12,16
    bdb0:	2b5d383a 	mul	r14,r5,r13
    bdb4:	308d883a 	add	r6,r6,r2
    bdb8:	198d883a 	add	r6,r3,r6
    bdbc:	3080022e 	bgeu	r6,r2,bdc8 <__muldf3+0x378>
    bdc0:	00800074 	movhi	r2,1
    bdc4:	709d883a 	add	r14,r14,r2
    bdc8:	8828d43a 	srli	r20,r17,16
    bdcc:	8bffffcc 	andi	r15,r17,65535
    bdd0:	7ce3383a 	mul	r17,r15,r19
    bdd4:	7945383a 	mul	r2,r15,r5
    bdd8:	a4e7383a 	mul	r19,r20,r19
    bddc:	8814d43a 	srli	r10,r17,16
    bde0:	3012943a 	slli	r9,r6,16
    bde4:	98a7883a 	add	r19,r19,r2
    bde8:	633fffcc 	andi	r12,r12,65535
    bdec:	54d5883a 	add	r10,r10,r19
    bdf0:	3006d43a 	srli	r3,r6,16
    bdf4:	4b13883a 	add	r9,r9,r12
    bdf8:	2d0b383a 	mul	r5,r5,r20
    bdfc:	5080022e 	bgeu	r10,r2,be08 <__muldf3+0x3b8>
    be00:	00800074 	movhi	r2,1
    be04:	288b883a 	add	r5,r5,r2
    be08:	802ad43a 	srli	r21,r16,16
    be0c:	843fffcc 	andi	r16,r16,65535
    be10:	440d383a 	mul	r6,r8,r16
    be14:	4565383a 	mul	r18,r8,r21
    be18:	8359383a 	mul	r12,r16,r13
    be1c:	500e943a 	slli	r7,r10,16
    be20:	3010d43a 	srli	r8,r6,16
    be24:	5026d43a 	srli	r19,r10,16
    be28:	6499883a 	add	r12,r12,r18
    be2c:	8abfffcc 	andi	r10,r17,65535
    be30:	3a95883a 	add	r10,r7,r10
    be34:	4319883a 	add	r12,r8,r12
    be38:	9967883a 	add	r19,r19,r5
    be3c:	1a87883a 	add	r3,r3,r10
    be40:	6d5b383a 	mul	r13,r13,r21
    be44:	6480022e 	bgeu	r12,r18,be50 <__muldf3+0x400>
    be48:	00800074 	movhi	r2,1
    be4c:	689b883a 	add	r13,r13,r2
    be50:	7c25383a 	mul	r18,r15,r16
    be54:	7d4b383a 	mul	r5,r15,r21
    be58:	850f383a 	mul	r7,r16,r20
    be5c:	901ed43a 	srli	r15,r18,16
    be60:	6004d43a 	srli	r2,r12,16
    be64:	6010943a 	slli	r8,r12,16
    be68:	394f883a 	add	r7,r7,r5
    be6c:	333fffcc 	andi	r12,r6,65535
    be70:	79df883a 	add	r15,r15,r7
    be74:	135b883a 	add	r13,r2,r13
    be78:	a563383a 	mul	r17,r20,r21
    be7c:	4305883a 	add	r2,r8,r12
    be80:	7940022e 	bgeu	r15,r5,be8c <__muldf3+0x43c>
    be84:	01400074 	movhi	r5,1
    be88:	8963883a 	add	r17,r17,r5
    be8c:	780a943a 	slli	r5,r15,16
    be90:	91bfffcc 	andi	r6,r18,65535
    be94:	70c7883a 	add	r3,r14,r3
    be98:	298d883a 	add	r6,r5,r6
    be9c:	1a8f803a 	cmpltu	r7,r3,r10
    bea0:	34cb883a 	add	r5,r6,r19
    bea4:	10c7883a 	add	r3,r2,r3
    bea8:	3955883a 	add	r10,r7,r5
    beac:	1885803a 	cmpltu	r2,r3,r2
    beb0:	6a91883a 	add	r8,r13,r10
    beb4:	780cd43a 	srli	r6,r15,16
    beb8:	1219883a 	add	r12,r2,r8
    bebc:	2ccb803a 	cmpltu	r5,r5,r19
    bec0:	51cf803a 	cmpltu	r7,r10,r7
    bec4:	29ceb03a 	or	r7,r5,r7
    bec8:	4351803a 	cmpltu	r8,r8,r13
    becc:	608b803a 	cmpltu	r5,r12,r2
    bed0:	4144b03a 	or	r2,r8,r5
    bed4:	398f883a 	add	r7,r7,r6
    bed8:	3885883a 	add	r2,r7,r2
    bedc:	1810927a 	slli	r8,r3,9
    bee0:	1445883a 	add	r2,r2,r17
    bee4:	1004927a 	slli	r2,r2,9
    bee8:	6022d5fa 	srli	r17,r12,23
    beec:	1806d5fa 	srli	r3,r3,23
    bef0:	4252b03a 	or	r9,r8,r9
    bef4:	600a927a 	slli	r5,r12,9
    bef8:	4810c03a 	cmpne	r8,r9,zero
    befc:	1462b03a 	or	r17,r2,r17
    bf00:	40c6b03a 	or	r3,r8,r3
    bf04:	8880402c 	andhi	r2,r17,256
    bf08:	1950b03a 	or	r8,r3,r5
    bf0c:	10000726 	beq	r2,zero,bf2c <__muldf3+0x4dc>
    bf10:	4006d07a 	srli	r3,r8,1
    bf14:	880497fa 	slli	r2,r17,31
    bf18:	4200004c 	andi	r8,r8,1
    bf1c:	8822d07a 	srli	r17,r17,1
    bf20:	1a10b03a 	or	r8,r3,r8
    bf24:	1210b03a 	or	r8,r2,r8
    bf28:	5809883a 	mov	r4,r11
    bf2c:	2080ffc4 	addi	r2,r4,1023
    bf30:	0080440e 	bge	zero,r2,c044 <__muldf3+0x5f4>
    bf34:	40c001cc 	andi	r3,r8,7
    bf38:	18000726 	beq	r3,zero,bf58 <__muldf3+0x508>
    bf3c:	40c003cc 	andi	r3,r8,15
    bf40:	01400104 	movi	r5,4
    bf44:	19400426 	beq	r3,r5,bf58 <__muldf3+0x508>
    bf48:	4147883a 	add	r3,r8,r5
    bf4c:	1a11803a 	cmpltu	r8,r3,r8
    bf50:	8a23883a 	add	r17,r17,r8
    bf54:	1811883a 	mov	r8,r3
    bf58:	88c0402c 	andhi	r3,r17,256
    bf5c:	18000426 	beq	r3,zero,bf70 <__muldf3+0x520>
    bf60:	00ffc034 	movhi	r3,65280
    bf64:	18ffffc4 	addi	r3,r3,-1
    bf68:	20810004 	addi	r2,r4,1024
    bf6c:	88e2703a 	and	r17,r17,r3
    bf70:	00c1ff84 	movi	r3,2046
    bf74:	18bf6416 	blt	r3,r2,bd08 <__muldf3+0x2b8>
    bf78:	8826977a 	slli	r19,r17,29
    bf7c:	4010d0fa 	srli	r8,r8,3
    bf80:	8822927a 	slli	r17,r17,9
    bf84:	1081ffcc 	andi	r2,r2,2047
    bf88:	9a26b03a 	or	r19,r19,r8
    bf8c:	880ad33a 	srli	r5,r17,12
    bf90:	b029883a 	mov	r20,r22
    bf94:	003f0d06 	br	bbcc <__muldf3+0x17c>
    bf98:	8080022c 	andhi	r2,r16,8
    bf9c:	10000926 	beq	r2,zero,bfc4 <__muldf3+0x574>
    bfa0:	8880022c 	andhi	r2,r17,8
    bfa4:	1000071e 	bne	r2,zero,bfc4 <__muldf3+0x574>
    bfa8:	00800434 	movhi	r2,16
    bfac:	89400234 	orhi	r5,r17,8
    bfb0:	10bfffc4 	addi	r2,r2,-1
    bfb4:	b829883a 	mov	r20,r23
    bfb8:	288a703a 	and	r5,r5,r2
    bfbc:	4027883a 	mov	r19,r8
    bfc0:	003f6806 	br	bd64 <__muldf3+0x314>
    bfc4:	00800434 	movhi	r2,16
    bfc8:	81400234 	orhi	r5,r16,8
    bfcc:	10bfffc4 	addi	r2,r2,-1
    bfd0:	288a703a 	and	r5,r5,r2
    bfd4:	003f6306 	br	bd64 <__muldf3+0x314>
    bfd8:	10bff604 	addi	r2,r2,-40
    bfdc:	30a2983a 	sll	r17,r6,r2
    bfe0:	0011883a 	mov	r8,zero
    bfe4:	003f4406 	br	bcf8 <__muldf3+0x2a8>
    bfe8:	3009883a 	mov	r4,r6
    bfec:	d9800215 	stw	r6,8(sp)
    bff0:	da400115 	stw	r9,4(sp)
    bff4:	da800015 	stw	r10,0(sp)
    bff8:	000cc680 	call	cc68 <__clzsi2>
    bffc:	10800804 	addi	r2,r2,32
    c000:	da800017 	ldw	r10,0(sp)
    c004:	da400117 	ldw	r9,4(sp)
    c008:	d9800217 	ldw	r6,8(sp)
    c00c:	003f3006 	br	bcd0 <__muldf3+0x280>
    c010:	10bff604 	addi	r2,r2,-40
    c014:	90a0983a 	sll	r16,r18,r2
    c018:	0027883a 	mov	r19,zero
    c01c:	003f1606 	br	bc78 <__muldf3+0x228>
    c020:	d9800215 	stw	r6,8(sp)
    c024:	d9c00015 	stw	r7,0(sp)
    c028:	da400115 	stw	r9,4(sp)
    c02c:	000cc680 	call	cc68 <__clzsi2>
    c030:	10800804 	addi	r2,r2,32
    c034:	da400117 	ldw	r9,4(sp)
    c038:	d9c00017 	ldw	r7,0(sp)
    c03c:	d9800217 	ldw	r6,8(sp)
    c040:	003f0306 	br	bc50 <__muldf3+0x200>
    c044:	00c00044 	movi	r3,1
    c048:	1887c83a 	sub	r3,r3,r2
    c04c:	01000e04 	movi	r4,56
    c050:	20feda16 	blt	r4,r3,bbbc <__muldf3+0x16c>
    c054:	010007c4 	movi	r4,31
    c058:	20c01b16 	blt	r4,r3,c0c8 <__muldf3+0x678>
    c05c:	00800804 	movi	r2,32
    c060:	10c5c83a 	sub	r2,r2,r3
    c064:	888a983a 	sll	r5,r17,r2
    c068:	40c8d83a 	srl	r4,r8,r3
    c06c:	4084983a 	sll	r2,r8,r2
    c070:	88e2d83a 	srl	r17,r17,r3
    c074:	2906b03a 	or	r3,r5,r4
    c078:	1004c03a 	cmpne	r2,r2,zero
    c07c:	1886b03a 	or	r3,r3,r2
    c080:	188001cc 	andi	r2,r3,7
    c084:	10000726 	beq	r2,zero,c0a4 <__muldf3+0x654>
    c088:	188003cc 	andi	r2,r3,15
    c08c:	01000104 	movi	r4,4
    c090:	11000426 	beq	r2,r4,c0a4 <__muldf3+0x654>
    c094:	1805883a 	mov	r2,r3
    c098:	10c00104 	addi	r3,r2,4
    c09c:	1885803a 	cmpltu	r2,r3,r2
    c0a0:	88a3883a 	add	r17,r17,r2
    c0a4:	8880202c 	andhi	r2,r17,128
    c0a8:	10001c26 	beq	r2,zero,c11c <__muldf3+0x6cc>
    c0ac:	b029883a 	mov	r20,r22
    c0b0:	00800044 	movi	r2,1
    c0b4:	000b883a 	mov	r5,zero
    c0b8:	0027883a 	mov	r19,zero
    c0bc:	003ec306 	br	bbcc <__muldf3+0x17c>
    c0c0:	5809883a 	mov	r4,r11
    c0c4:	003f9906 	br	bf2c <__muldf3+0x4dc>
    c0c8:	013ff844 	movi	r4,-31
    c0cc:	2085c83a 	sub	r2,r4,r2
    c0d0:	8888d83a 	srl	r4,r17,r2
    c0d4:	00800804 	movi	r2,32
    c0d8:	18801a26 	beq	r3,r2,c144 <__muldf3+0x6f4>
    c0dc:	00801004 	movi	r2,64
    c0e0:	10c5c83a 	sub	r2,r2,r3
    c0e4:	8884983a 	sll	r2,r17,r2
    c0e8:	1204b03a 	or	r2,r2,r8
    c0ec:	1004c03a 	cmpne	r2,r2,zero
    c0f0:	2084b03a 	or	r2,r4,r2
    c0f4:	144001cc 	andi	r17,r2,7
    c0f8:	88000d1e 	bne	r17,zero,c130 <__muldf3+0x6e0>
    c0fc:	000b883a 	mov	r5,zero
    c100:	1026d0fa 	srli	r19,r2,3
    c104:	b029883a 	mov	r20,r22
    c108:	0005883a 	mov	r2,zero
    c10c:	9c66b03a 	or	r19,r19,r17
    c110:	003eae06 	br	bbcc <__muldf3+0x17c>
    c114:	1007883a 	mov	r3,r2
    c118:	0023883a 	mov	r17,zero
    c11c:	880a927a 	slli	r5,r17,9
    c120:	1805883a 	mov	r2,r3
    c124:	8822977a 	slli	r17,r17,29
    c128:	280ad33a 	srli	r5,r5,12
    c12c:	003ff406 	br	c100 <__muldf3+0x6b0>
    c130:	10c003cc 	andi	r3,r2,15
    c134:	01000104 	movi	r4,4
    c138:	193ff626 	beq	r3,r4,c114 <__muldf3+0x6c4>
    c13c:	0023883a 	mov	r17,zero
    c140:	003fd506 	br	c098 <__muldf3+0x648>
    c144:	0005883a 	mov	r2,zero
    c148:	003fe706 	br	c0e8 <__muldf3+0x698>
    c14c:	00800434 	movhi	r2,16
    c150:	89400234 	orhi	r5,r17,8
    c154:	10bfffc4 	addi	r2,r2,-1
    c158:	b029883a 	mov	r20,r22
    c15c:	288a703a 	and	r5,r5,r2
    c160:	4027883a 	mov	r19,r8
    c164:	003eff06 	br	bd64 <__muldf3+0x314>

0000c168 <__subdf3>:
    c168:	02000434 	movhi	r8,16
    c16c:	423fffc4 	addi	r8,r8,-1
    c170:	defffb04 	addi	sp,sp,-20
    c174:	2a14703a 	and	r10,r5,r8
    c178:	3812d53a 	srli	r9,r7,20
    c17c:	3a10703a 	and	r8,r7,r8
    c180:	2006d77a 	srli	r3,r4,29
    c184:	3004d77a 	srli	r2,r6,29
    c188:	dc000015 	stw	r16,0(sp)
    c18c:	501490fa 	slli	r10,r10,3
    c190:	2820d53a 	srli	r16,r5,20
    c194:	401090fa 	slli	r8,r8,3
    c198:	dc800215 	stw	r18,8(sp)
    c19c:	dc400115 	stw	r17,4(sp)
    c1a0:	dfc00415 	stw	ra,16(sp)
    c1a4:	202290fa 	slli	r17,r4,3
    c1a8:	dcc00315 	stw	r19,12(sp)
    c1ac:	4a41ffcc 	andi	r9,r9,2047
    c1b0:	0101ffc4 	movi	r4,2047
    c1b4:	2824d7fa 	srli	r18,r5,31
    c1b8:	8401ffcc 	andi	r16,r16,2047
    c1bc:	50c6b03a 	or	r3,r10,r3
    c1c0:	380ed7fa 	srli	r7,r7,31
    c1c4:	408ab03a 	or	r5,r8,r2
    c1c8:	300c90fa 	slli	r6,r6,3
    c1cc:	49009626 	beq	r9,r4,c428 <__subdf3+0x2c0>
    c1d0:	39c0005c 	xori	r7,r7,1
    c1d4:	8245c83a 	sub	r2,r16,r9
    c1d8:	3c807426 	beq	r7,r18,c3ac <__subdf3+0x244>
    c1dc:	0080af0e 	bge	zero,r2,c49c <__subdf3+0x334>
    c1e0:	48002a1e 	bne	r9,zero,c28c <__subdf3+0x124>
    c1e4:	2988b03a 	or	r4,r5,r6
    c1e8:	20009a1e 	bne	r4,zero,c454 <__subdf3+0x2ec>
    c1ec:	888001cc 	andi	r2,r17,7
    c1f0:	10000726 	beq	r2,zero,c210 <__subdf3+0xa8>
    c1f4:	888003cc 	andi	r2,r17,15
    c1f8:	01000104 	movi	r4,4
    c1fc:	11000426 	beq	r2,r4,c210 <__subdf3+0xa8>
    c200:	890b883a 	add	r5,r17,r4
    c204:	2c63803a 	cmpltu	r17,r5,r17
    c208:	1c47883a 	add	r3,r3,r17
    c20c:	2823883a 	mov	r17,r5
    c210:	1880202c 	andhi	r2,r3,128
    c214:	10005926 	beq	r2,zero,c37c <__subdf3+0x214>
    c218:	84000044 	addi	r16,r16,1
    c21c:	0081ffc4 	movi	r2,2047
    c220:	8080be26 	beq	r16,r2,c51c <__subdf3+0x3b4>
    c224:	017fe034 	movhi	r5,65408
    c228:	297fffc4 	addi	r5,r5,-1
    c22c:	1946703a 	and	r3,r3,r5
    c230:	1804977a 	slli	r2,r3,29
    c234:	1806927a 	slli	r3,r3,9
    c238:	8822d0fa 	srli	r17,r17,3
    c23c:	8401ffcc 	andi	r16,r16,2047
    c240:	180ad33a 	srli	r5,r3,12
    c244:	9100004c 	andi	r4,r18,1
    c248:	1444b03a 	or	r2,r2,r17
    c24c:	80c1ffcc 	andi	r3,r16,2047
    c250:	1820953a 	slli	r16,r3,20
    c254:	20c03fcc 	andi	r3,r4,255
    c258:	180897fa 	slli	r4,r3,31
    c25c:	00c00434 	movhi	r3,16
    c260:	18ffffc4 	addi	r3,r3,-1
    c264:	28c6703a 	and	r3,r5,r3
    c268:	1c06b03a 	or	r3,r3,r16
    c26c:	1906b03a 	or	r3,r3,r4
    c270:	dfc00417 	ldw	ra,16(sp)
    c274:	dcc00317 	ldw	r19,12(sp)
    c278:	dc800217 	ldw	r18,8(sp)
    c27c:	dc400117 	ldw	r17,4(sp)
    c280:	dc000017 	ldw	r16,0(sp)
    c284:	dec00504 	addi	sp,sp,20
    c288:	f800283a 	ret
    c28c:	0101ffc4 	movi	r4,2047
    c290:	813fd626 	beq	r16,r4,c1ec <__subdf3+0x84>
    c294:	29402034 	orhi	r5,r5,128
    c298:	01000e04 	movi	r4,56
    c29c:	2080a316 	blt	r4,r2,c52c <__subdf3+0x3c4>
    c2a0:	010007c4 	movi	r4,31
    c2a4:	2080c616 	blt	r4,r2,c5c0 <__subdf3+0x458>
    c2a8:	01000804 	movi	r4,32
    c2ac:	2089c83a 	sub	r4,r4,r2
    c2b0:	2910983a 	sll	r8,r5,r4
    c2b4:	308ed83a 	srl	r7,r6,r2
    c2b8:	3108983a 	sll	r4,r6,r4
    c2bc:	2884d83a 	srl	r2,r5,r2
    c2c0:	41ccb03a 	or	r6,r8,r7
    c2c4:	2008c03a 	cmpne	r4,r4,zero
    c2c8:	310cb03a 	or	r6,r6,r4
    c2cc:	898dc83a 	sub	r6,r17,r6
    c2d0:	89a3803a 	cmpltu	r17,r17,r6
    c2d4:	1887c83a 	sub	r3,r3,r2
    c2d8:	1c47c83a 	sub	r3,r3,r17
    c2dc:	3023883a 	mov	r17,r6
    c2e0:	1880202c 	andhi	r2,r3,128
    c2e4:	10002326 	beq	r2,zero,c374 <__subdf3+0x20c>
    c2e8:	04c02034 	movhi	r19,128
    c2ec:	9cffffc4 	addi	r19,r19,-1
    c2f0:	1ce6703a 	and	r19,r3,r19
    c2f4:	98007a26 	beq	r19,zero,c4e0 <__subdf3+0x378>
    c2f8:	9809883a 	mov	r4,r19
    c2fc:	000cc680 	call	cc68 <__clzsi2>
    c300:	113ffe04 	addi	r4,r2,-8
    c304:	00c007c4 	movi	r3,31
    c308:	19007b16 	blt	r3,r4,c4f8 <__subdf3+0x390>
    c30c:	00800804 	movi	r2,32
    c310:	1105c83a 	sub	r2,r2,r4
    c314:	8884d83a 	srl	r2,r17,r2
    c318:	9906983a 	sll	r3,r19,r4
    c31c:	8922983a 	sll	r17,r17,r4
    c320:	10c4b03a 	or	r2,r2,r3
    c324:	24007816 	blt	r4,r16,c508 <__subdf3+0x3a0>
    c328:	2421c83a 	sub	r16,r4,r16
    c32c:	80c00044 	addi	r3,r16,1
    c330:	010007c4 	movi	r4,31
    c334:	20c09516 	blt	r4,r3,c58c <__subdf3+0x424>
    c338:	01400804 	movi	r5,32
    c33c:	28cbc83a 	sub	r5,r5,r3
    c340:	88c8d83a 	srl	r4,r17,r3
    c344:	8962983a 	sll	r17,r17,r5
    c348:	114a983a 	sll	r5,r2,r5
    c34c:	10c6d83a 	srl	r3,r2,r3
    c350:	8804c03a 	cmpne	r2,r17,zero
    c354:	290ab03a 	or	r5,r5,r4
    c358:	28a2b03a 	or	r17,r5,r2
    c35c:	0021883a 	mov	r16,zero
    c360:	003fa206 	br	c1ec <__subdf3+0x84>
    c364:	2090b03a 	or	r8,r4,r2
    c368:	40018e26 	beq	r8,zero,c9a4 <__subdf3+0x83c>
    c36c:	1007883a 	mov	r3,r2
    c370:	2023883a 	mov	r17,r4
    c374:	888001cc 	andi	r2,r17,7
    c378:	103f9e1e 	bne	r2,zero,c1f4 <__subdf3+0x8c>
    c37c:	1804977a 	slli	r2,r3,29
    c380:	8822d0fa 	srli	r17,r17,3
    c384:	1810d0fa 	srli	r8,r3,3
    c388:	9100004c 	andi	r4,r18,1
    c38c:	1444b03a 	or	r2,r2,r17
    c390:	00c1ffc4 	movi	r3,2047
    c394:	80c02826 	beq	r16,r3,c438 <__subdf3+0x2d0>
    c398:	01400434 	movhi	r5,16
    c39c:	297fffc4 	addi	r5,r5,-1
    c3a0:	80e0703a 	and	r16,r16,r3
    c3a4:	414a703a 	and	r5,r8,r5
    c3a8:	003fa806 	br	c24c <__subdf3+0xe4>
    c3ac:	0080630e 	bge	zero,r2,c53c <__subdf3+0x3d4>
    c3b0:	48003026 	beq	r9,zero,c474 <__subdf3+0x30c>
    c3b4:	0101ffc4 	movi	r4,2047
    c3b8:	813f8c26 	beq	r16,r4,c1ec <__subdf3+0x84>
    c3bc:	29402034 	orhi	r5,r5,128
    c3c0:	01000e04 	movi	r4,56
    c3c4:	2080a90e 	bge	r4,r2,c66c <__subdf3+0x504>
    c3c8:	298cb03a 	or	r6,r5,r6
    c3cc:	3012c03a 	cmpne	r9,r6,zero
    c3d0:	0005883a 	mov	r2,zero
    c3d4:	4c53883a 	add	r9,r9,r17
    c3d8:	4c63803a 	cmpltu	r17,r9,r17
    c3dc:	10c7883a 	add	r3,r2,r3
    c3e0:	88c7883a 	add	r3,r17,r3
    c3e4:	4823883a 	mov	r17,r9
    c3e8:	1880202c 	andhi	r2,r3,128
    c3ec:	1000d026 	beq	r2,zero,c730 <__subdf3+0x5c8>
    c3f0:	84000044 	addi	r16,r16,1
    c3f4:	0081ffc4 	movi	r2,2047
    c3f8:	8080fe26 	beq	r16,r2,c7f4 <__subdf3+0x68c>
    c3fc:	00bfe034 	movhi	r2,65408
    c400:	10bfffc4 	addi	r2,r2,-1
    c404:	1886703a 	and	r3,r3,r2
    c408:	880ad07a 	srli	r5,r17,1
    c40c:	180497fa 	slli	r2,r3,31
    c410:	8900004c 	andi	r4,r17,1
    c414:	2922b03a 	or	r17,r5,r4
    c418:	1806d07a 	srli	r3,r3,1
    c41c:	1462b03a 	or	r17,r2,r17
    c420:	3825883a 	mov	r18,r7
    c424:	003f7106 	br	c1ec <__subdf3+0x84>
    c428:	2984b03a 	or	r2,r5,r6
    c42c:	103f6826 	beq	r2,zero,c1d0 <__subdf3+0x68>
    c430:	39c03fcc 	andi	r7,r7,255
    c434:	003f6706 	br	c1d4 <__subdf3+0x6c>
    c438:	4086b03a 	or	r3,r8,r2
    c43c:	18015226 	beq	r3,zero,c988 <__subdf3+0x820>
    c440:	00c00434 	movhi	r3,16
    c444:	41400234 	orhi	r5,r8,8
    c448:	18ffffc4 	addi	r3,r3,-1
    c44c:	28ca703a 	and	r5,r5,r3
    c450:	003f7e06 	br	c24c <__subdf3+0xe4>
    c454:	10bfffc4 	addi	r2,r2,-1
    c458:	1000491e 	bne	r2,zero,c580 <__subdf3+0x418>
    c45c:	898fc83a 	sub	r7,r17,r6
    c460:	89e3803a 	cmpltu	r17,r17,r7
    c464:	1947c83a 	sub	r3,r3,r5
    c468:	1c47c83a 	sub	r3,r3,r17
    c46c:	3823883a 	mov	r17,r7
    c470:	003f9b06 	br	c2e0 <__subdf3+0x178>
    c474:	2988b03a 	or	r4,r5,r6
    c478:	203f5c26 	beq	r4,zero,c1ec <__subdf3+0x84>
    c47c:	10bfffc4 	addi	r2,r2,-1
    c480:	1000931e 	bne	r2,zero,c6d0 <__subdf3+0x568>
    c484:	898d883a 	add	r6,r17,r6
    c488:	3463803a 	cmpltu	r17,r6,r17
    c48c:	1947883a 	add	r3,r3,r5
    c490:	88c7883a 	add	r3,r17,r3
    c494:	3023883a 	mov	r17,r6
    c498:	003fd306 	br	c3e8 <__subdf3+0x280>
    c49c:	1000541e 	bne	r2,zero,c5f0 <__subdf3+0x488>
    c4a0:	80800044 	addi	r2,r16,1
    c4a4:	1081ffcc 	andi	r2,r2,2047
    c4a8:	01000044 	movi	r4,1
    c4ac:	2080a20e 	bge	r4,r2,c738 <__subdf3+0x5d0>
    c4b0:	8989c83a 	sub	r4,r17,r6
    c4b4:	8905803a 	cmpltu	r2,r17,r4
    c4b8:	1967c83a 	sub	r19,r3,r5
    c4bc:	98a7c83a 	sub	r19,r19,r2
    c4c0:	9880202c 	andhi	r2,r19,128
    c4c4:	10006326 	beq	r2,zero,c654 <__subdf3+0x4ec>
    c4c8:	3463c83a 	sub	r17,r6,r17
    c4cc:	28c7c83a 	sub	r3,r5,r3
    c4d0:	344d803a 	cmpltu	r6,r6,r17
    c4d4:	19a7c83a 	sub	r19,r3,r6
    c4d8:	3825883a 	mov	r18,r7
    c4dc:	983f861e 	bne	r19,zero,c2f8 <__subdf3+0x190>
    c4e0:	8809883a 	mov	r4,r17
    c4e4:	000cc680 	call	cc68 <__clzsi2>
    c4e8:	10800804 	addi	r2,r2,32
    c4ec:	113ffe04 	addi	r4,r2,-8
    c4f0:	00c007c4 	movi	r3,31
    c4f4:	193f850e 	bge	r3,r4,c30c <__subdf3+0x1a4>
    c4f8:	10bff604 	addi	r2,r2,-40
    c4fc:	8884983a 	sll	r2,r17,r2
    c500:	0023883a 	mov	r17,zero
    c504:	243f880e 	bge	r4,r16,c328 <__subdf3+0x1c0>
    c508:	00ffe034 	movhi	r3,65408
    c50c:	18ffffc4 	addi	r3,r3,-1
    c510:	8121c83a 	sub	r16,r16,r4
    c514:	10c6703a 	and	r3,r2,r3
    c518:	003f3406 	br	c1ec <__subdf3+0x84>
    c51c:	9100004c 	andi	r4,r18,1
    c520:	000b883a 	mov	r5,zero
    c524:	0005883a 	mov	r2,zero
    c528:	003f4806 	br	c24c <__subdf3+0xe4>
    c52c:	298cb03a 	or	r6,r5,r6
    c530:	300cc03a 	cmpne	r6,r6,zero
    c534:	0005883a 	mov	r2,zero
    c538:	003f6406 	br	c2cc <__subdf3+0x164>
    c53c:	10009a1e 	bne	r2,zero,c7a8 <__subdf3+0x640>
    c540:	82400044 	addi	r9,r16,1
    c544:	4881ffcc 	andi	r2,r9,2047
    c548:	02800044 	movi	r10,1
    c54c:	5080670e 	bge	r10,r2,c6ec <__subdf3+0x584>
    c550:	0081ffc4 	movi	r2,2047
    c554:	4880af26 	beq	r9,r2,c814 <__subdf3+0x6ac>
    c558:	898d883a 	add	r6,r17,r6
    c55c:	1945883a 	add	r2,r3,r5
    c560:	3447803a 	cmpltu	r3,r6,r17
    c564:	1887883a 	add	r3,r3,r2
    c568:	182297fa 	slli	r17,r3,31
    c56c:	300cd07a 	srli	r6,r6,1
    c570:	1806d07a 	srli	r3,r3,1
    c574:	4821883a 	mov	r16,r9
    c578:	89a2b03a 	or	r17,r17,r6
    c57c:	003f1b06 	br	c1ec <__subdf3+0x84>
    c580:	0101ffc4 	movi	r4,2047
    c584:	813f441e 	bne	r16,r4,c298 <__subdf3+0x130>
    c588:	003f1806 	br	c1ec <__subdf3+0x84>
    c58c:	843ff844 	addi	r16,r16,-31
    c590:	01400804 	movi	r5,32
    c594:	1408d83a 	srl	r4,r2,r16
    c598:	19405026 	beq	r3,r5,c6dc <__subdf3+0x574>
    c59c:	01401004 	movi	r5,64
    c5a0:	28c7c83a 	sub	r3,r5,r3
    c5a4:	10c4983a 	sll	r2,r2,r3
    c5a8:	88a2b03a 	or	r17,r17,r2
    c5ac:	8822c03a 	cmpne	r17,r17,zero
    c5b0:	2462b03a 	or	r17,r4,r17
    c5b4:	0007883a 	mov	r3,zero
    c5b8:	0021883a 	mov	r16,zero
    c5bc:	003f6d06 	br	c374 <__subdf3+0x20c>
    c5c0:	11fff804 	addi	r7,r2,-32
    c5c4:	01000804 	movi	r4,32
    c5c8:	29ced83a 	srl	r7,r5,r7
    c5cc:	11004526 	beq	r2,r4,c6e4 <__subdf3+0x57c>
    c5d0:	01001004 	movi	r4,64
    c5d4:	2089c83a 	sub	r4,r4,r2
    c5d8:	2904983a 	sll	r2,r5,r4
    c5dc:	118cb03a 	or	r6,r2,r6
    c5e0:	300cc03a 	cmpne	r6,r6,zero
    c5e4:	398cb03a 	or	r6,r7,r6
    c5e8:	0005883a 	mov	r2,zero
    c5ec:	003f3706 	br	c2cc <__subdf3+0x164>
    c5f0:	80002a26 	beq	r16,zero,c69c <__subdf3+0x534>
    c5f4:	0101ffc4 	movi	r4,2047
    c5f8:	49006626 	beq	r9,r4,c794 <__subdf3+0x62c>
    c5fc:	0085c83a 	sub	r2,zero,r2
    c600:	18c02034 	orhi	r3,r3,128
    c604:	01000e04 	movi	r4,56
    c608:	20807e16 	blt	r4,r2,c804 <__subdf3+0x69c>
    c60c:	010007c4 	movi	r4,31
    c610:	2080e716 	blt	r4,r2,c9b0 <__subdf3+0x848>
    c614:	01000804 	movi	r4,32
    c618:	2089c83a 	sub	r4,r4,r2
    c61c:	1914983a 	sll	r10,r3,r4
    c620:	8890d83a 	srl	r8,r17,r2
    c624:	8908983a 	sll	r4,r17,r4
    c628:	1884d83a 	srl	r2,r3,r2
    c62c:	5222b03a 	or	r17,r10,r8
    c630:	2006c03a 	cmpne	r3,r4,zero
    c634:	88e2b03a 	or	r17,r17,r3
    c638:	3463c83a 	sub	r17,r6,r17
    c63c:	2885c83a 	sub	r2,r5,r2
    c640:	344d803a 	cmpltu	r6,r6,r17
    c644:	1187c83a 	sub	r3,r2,r6
    c648:	4821883a 	mov	r16,r9
    c64c:	3825883a 	mov	r18,r7
    c650:	003f2306 	br	c2e0 <__subdf3+0x178>
    c654:	24d0b03a 	or	r8,r4,r19
    c658:	40001b1e 	bne	r8,zero,c6c8 <__subdf3+0x560>
    c65c:	0005883a 	mov	r2,zero
    c660:	0009883a 	mov	r4,zero
    c664:	0021883a 	mov	r16,zero
    c668:	003f4906 	br	c390 <__subdf3+0x228>
    c66c:	010007c4 	movi	r4,31
    c670:	20803a16 	blt	r4,r2,c75c <__subdf3+0x5f4>
    c674:	01000804 	movi	r4,32
    c678:	2089c83a 	sub	r4,r4,r2
    c67c:	2912983a 	sll	r9,r5,r4
    c680:	3090d83a 	srl	r8,r6,r2
    c684:	3108983a 	sll	r4,r6,r4
    c688:	2884d83a 	srl	r2,r5,r2
    c68c:	4a12b03a 	or	r9,r9,r8
    c690:	2008c03a 	cmpne	r4,r4,zero
    c694:	4912b03a 	or	r9,r9,r4
    c698:	003f4e06 	br	c3d4 <__subdf3+0x26c>
    c69c:	1c48b03a 	or	r4,r3,r17
    c6a0:	20003c26 	beq	r4,zero,c794 <__subdf3+0x62c>
    c6a4:	0084303a 	nor	r2,zero,r2
    c6a8:	1000381e 	bne	r2,zero,c78c <__subdf3+0x624>
    c6ac:	3463c83a 	sub	r17,r6,r17
    c6b0:	28c5c83a 	sub	r2,r5,r3
    c6b4:	344d803a 	cmpltu	r6,r6,r17
    c6b8:	1187c83a 	sub	r3,r2,r6
    c6bc:	4821883a 	mov	r16,r9
    c6c0:	3825883a 	mov	r18,r7
    c6c4:	003f0606 	br	c2e0 <__subdf3+0x178>
    c6c8:	2023883a 	mov	r17,r4
    c6cc:	003f0906 	br	c2f4 <__subdf3+0x18c>
    c6d0:	0101ffc4 	movi	r4,2047
    c6d4:	813f3a1e 	bne	r16,r4,c3c0 <__subdf3+0x258>
    c6d8:	003ec406 	br	c1ec <__subdf3+0x84>
    c6dc:	0005883a 	mov	r2,zero
    c6e0:	003fb106 	br	c5a8 <__subdf3+0x440>
    c6e4:	0005883a 	mov	r2,zero
    c6e8:	003fbc06 	br	c5dc <__subdf3+0x474>
    c6ec:	1c44b03a 	or	r2,r3,r17
    c6f0:	80008e1e 	bne	r16,zero,c92c <__subdf3+0x7c4>
    c6f4:	1000c826 	beq	r2,zero,ca18 <__subdf3+0x8b0>
    c6f8:	2984b03a 	or	r2,r5,r6
    c6fc:	103ebb26 	beq	r2,zero,c1ec <__subdf3+0x84>
    c700:	8989883a 	add	r4,r17,r6
    c704:	1945883a 	add	r2,r3,r5
    c708:	2447803a 	cmpltu	r3,r4,r17
    c70c:	1887883a 	add	r3,r3,r2
    c710:	1880202c 	andhi	r2,r3,128
    c714:	2023883a 	mov	r17,r4
    c718:	103f1626 	beq	r2,zero,c374 <__subdf3+0x20c>
    c71c:	00bfe034 	movhi	r2,65408
    c720:	10bfffc4 	addi	r2,r2,-1
    c724:	5021883a 	mov	r16,r10
    c728:	1886703a 	and	r3,r3,r2
    c72c:	003eaf06 	br	c1ec <__subdf3+0x84>
    c730:	3825883a 	mov	r18,r7
    c734:	003f0f06 	br	c374 <__subdf3+0x20c>
    c738:	1c44b03a 	or	r2,r3,r17
    c73c:	8000251e 	bne	r16,zero,c7d4 <__subdf3+0x66c>
    c740:	1000661e 	bne	r2,zero,c8dc <__subdf3+0x774>
    c744:	2990b03a 	or	r8,r5,r6
    c748:	40009626 	beq	r8,zero,c9a4 <__subdf3+0x83c>
    c74c:	2807883a 	mov	r3,r5
    c750:	3023883a 	mov	r17,r6
    c754:	3825883a 	mov	r18,r7
    c758:	003ea406 	br	c1ec <__subdf3+0x84>
    c75c:	127ff804 	addi	r9,r2,-32
    c760:	01000804 	movi	r4,32
    c764:	2a52d83a 	srl	r9,r5,r9
    c768:	11008c26 	beq	r2,r4,c99c <__subdf3+0x834>
    c76c:	01001004 	movi	r4,64
    c770:	2085c83a 	sub	r2,r4,r2
    c774:	2884983a 	sll	r2,r5,r2
    c778:	118cb03a 	or	r6,r2,r6
    c77c:	300cc03a 	cmpne	r6,r6,zero
    c780:	4992b03a 	or	r9,r9,r6
    c784:	0005883a 	mov	r2,zero
    c788:	003f1206 	br	c3d4 <__subdf3+0x26c>
    c78c:	0101ffc4 	movi	r4,2047
    c790:	493f9c1e 	bne	r9,r4,c604 <__subdf3+0x49c>
    c794:	2807883a 	mov	r3,r5
    c798:	3023883a 	mov	r17,r6
    c79c:	4821883a 	mov	r16,r9
    c7a0:	3825883a 	mov	r18,r7
    c7a4:	003e9106 	br	c1ec <__subdf3+0x84>
    c7a8:	80001f1e 	bne	r16,zero,c828 <__subdf3+0x6c0>
    c7ac:	1c48b03a 	or	r4,r3,r17
    c7b0:	20005a26 	beq	r4,zero,c91c <__subdf3+0x7b4>
    c7b4:	0084303a 	nor	r2,zero,r2
    c7b8:	1000561e 	bne	r2,zero,c914 <__subdf3+0x7ac>
    c7bc:	89a3883a 	add	r17,r17,r6
    c7c0:	1945883a 	add	r2,r3,r5
    c7c4:	898d803a 	cmpltu	r6,r17,r6
    c7c8:	3087883a 	add	r3,r6,r2
    c7cc:	4821883a 	mov	r16,r9
    c7d0:	003f0506 	br	c3e8 <__subdf3+0x280>
    c7d4:	10002b1e 	bne	r2,zero,c884 <__subdf3+0x71c>
    c7d8:	2984b03a 	or	r2,r5,r6
    c7dc:	10008026 	beq	r2,zero,c9e0 <__subdf3+0x878>
    c7e0:	2807883a 	mov	r3,r5
    c7e4:	3023883a 	mov	r17,r6
    c7e8:	3825883a 	mov	r18,r7
    c7ec:	0401ffc4 	movi	r16,2047
    c7f0:	003e7e06 	br	c1ec <__subdf3+0x84>
    c7f4:	3809883a 	mov	r4,r7
    c7f8:	0011883a 	mov	r8,zero
    c7fc:	0005883a 	mov	r2,zero
    c800:	003ee306 	br	c390 <__subdf3+0x228>
    c804:	1c62b03a 	or	r17,r3,r17
    c808:	8822c03a 	cmpne	r17,r17,zero
    c80c:	0005883a 	mov	r2,zero
    c810:	003f8906 	br	c638 <__subdf3+0x4d0>
    c814:	3809883a 	mov	r4,r7
    c818:	4821883a 	mov	r16,r9
    c81c:	0011883a 	mov	r8,zero
    c820:	0005883a 	mov	r2,zero
    c824:	003eda06 	br	c390 <__subdf3+0x228>
    c828:	0101ffc4 	movi	r4,2047
    c82c:	49003b26 	beq	r9,r4,c91c <__subdf3+0x7b4>
    c830:	0085c83a 	sub	r2,zero,r2
    c834:	18c02034 	orhi	r3,r3,128
    c838:	01000e04 	movi	r4,56
    c83c:	20806e16 	blt	r4,r2,c9f8 <__subdf3+0x890>
    c840:	010007c4 	movi	r4,31
    c844:	20807716 	blt	r4,r2,ca24 <__subdf3+0x8bc>
    c848:	01000804 	movi	r4,32
    c84c:	2089c83a 	sub	r4,r4,r2
    c850:	1914983a 	sll	r10,r3,r4
    c854:	8890d83a 	srl	r8,r17,r2
    c858:	8908983a 	sll	r4,r17,r4
    c85c:	1884d83a 	srl	r2,r3,r2
    c860:	5222b03a 	or	r17,r10,r8
    c864:	2006c03a 	cmpne	r3,r4,zero
    c868:	88e2b03a 	or	r17,r17,r3
    c86c:	89a3883a 	add	r17,r17,r6
    c870:	1145883a 	add	r2,r2,r5
    c874:	898d803a 	cmpltu	r6,r17,r6
    c878:	3087883a 	add	r3,r6,r2
    c87c:	4821883a 	mov	r16,r9
    c880:	003ed906 	br	c3e8 <__subdf3+0x280>
    c884:	2984b03a 	or	r2,r5,r6
    c888:	10004226 	beq	r2,zero,c994 <__subdf3+0x82c>
    c88c:	1808d0fa 	srli	r4,r3,3
    c890:	8822d0fa 	srli	r17,r17,3
    c894:	1806977a 	slli	r3,r3,29
    c898:	2080022c 	andhi	r2,r4,8
    c89c:	1c62b03a 	or	r17,r3,r17
    c8a0:	10000826 	beq	r2,zero,c8c4 <__subdf3+0x75c>
    c8a4:	2812d0fa 	srli	r9,r5,3
    c8a8:	4880022c 	andhi	r2,r9,8
    c8ac:	1000051e 	bne	r2,zero,c8c4 <__subdf3+0x75c>
    c8b0:	300cd0fa 	srli	r6,r6,3
    c8b4:	2804977a 	slli	r2,r5,29
    c8b8:	4809883a 	mov	r4,r9
    c8bc:	3825883a 	mov	r18,r7
    c8c0:	11a2b03a 	or	r17,r2,r6
    c8c4:	8806d77a 	srli	r3,r17,29
    c8c8:	200890fa 	slli	r4,r4,3
    c8cc:	882290fa 	slli	r17,r17,3
    c8d0:	0401ffc4 	movi	r16,2047
    c8d4:	1906b03a 	or	r3,r3,r4
    c8d8:	003e4406 	br	c1ec <__subdf3+0x84>
    c8dc:	2984b03a 	or	r2,r5,r6
    c8e0:	103e4226 	beq	r2,zero,c1ec <__subdf3+0x84>
    c8e4:	8989c83a 	sub	r4,r17,r6
    c8e8:	8911803a 	cmpltu	r8,r17,r4
    c8ec:	1945c83a 	sub	r2,r3,r5
    c8f0:	1205c83a 	sub	r2,r2,r8
    c8f4:	1200202c 	andhi	r8,r2,128
    c8f8:	403e9a26 	beq	r8,zero,c364 <__subdf3+0x1fc>
    c8fc:	3463c83a 	sub	r17,r6,r17
    c900:	28c5c83a 	sub	r2,r5,r3
    c904:	344d803a 	cmpltu	r6,r6,r17
    c908:	1187c83a 	sub	r3,r2,r6
    c90c:	3825883a 	mov	r18,r7
    c910:	003e3606 	br	c1ec <__subdf3+0x84>
    c914:	0101ffc4 	movi	r4,2047
    c918:	493fc71e 	bne	r9,r4,c838 <__subdf3+0x6d0>
    c91c:	2807883a 	mov	r3,r5
    c920:	3023883a 	mov	r17,r6
    c924:	4821883a 	mov	r16,r9
    c928:	003e3006 	br	c1ec <__subdf3+0x84>
    c92c:	10003626 	beq	r2,zero,ca08 <__subdf3+0x8a0>
    c930:	2984b03a 	or	r2,r5,r6
    c934:	10001726 	beq	r2,zero,c994 <__subdf3+0x82c>
    c938:	1808d0fa 	srli	r4,r3,3
    c93c:	8822d0fa 	srli	r17,r17,3
    c940:	1806977a 	slli	r3,r3,29
    c944:	2080022c 	andhi	r2,r4,8
    c948:	1c62b03a 	or	r17,r3,r17
    c94c:	10000726 	beq	r2,zero,c96c <__subdf3+0x804>
    c950:	2812d0fa 	srli	r9,r5,3
    c954:	4880022c 	andhi	r2,r9,8
    c958:	1000041e 	bne	r2,zero,c96c <__subdf3+0x804>
    c95c:	300cd0fa 	srli	r6,r6,3
    c960:	2804977a 	slli	r2,r5,29
    c964:	4809883a 	mov	r4,r9
    c968:	11a2b03a 	or	r17,r2,r6
    c96c:	8806d77a 	srli	r3,r17,29
    c970:	200890fa 	slli	r4,r4,3
    c974:	882290fa 	slli	r17,r17,3
    c978:	3825883a 	mov	r18,r7
    c97c:	1906b03a 	or	r3,r3,r4
    c980:	0401ffc4 	movi	r16,2047
    c984:	003e1906 	br	c1ec <__subdf3+0x84>
    c988:	000b883a 	mov	r5,zero
    c98c:	0005883a 	mov	r2,zero
    c990:	003e2e06 	br	c24c <__subdf3+0xe4>
    c994:	0401ffc4 	movi	r16,2047
    c998:	003e1406 	br	c1ec <__subdf3+0x84>
    c99c:	0005883a 	mov	r2,zero
    c9a0:	003f7506 	br	c778 <__subdf3+0x610>
    c9a4:	0005883a 	mov	r2,zero
    c9a8:	0009883a 	mov	r4,zero
    c9ac:	003e7806 	br	c390 <__subdf3+0x228>
    c9b0:	123ff804 	addi	r8,r2,-32
    c9b4:	01000804 	movi	r4,32
    c9b8:	1a10d83a 	srl	r8,r3,r8
    c9bc:	11002526 	beq	r2,r4,ca54 <__subdf3+0x8ec>
    c9c0:	01001004 	movi	r4,64
    c9c4:	2085c83a 	sub	r2,r4,r2
    c9c8:	1884983a 	sll	r2,r3,r2
    c9cc:	1444b03a 	or	r2,r2,r17
    c9d0:	1004c03a 	cmpne	r2,r2,zero
    c9d4:	40a2b03a 	or	r17,r8,r2
    c9d8:	0005883a 	mov	r2,zero
    c9dc:	003f1606 	br	c638 <__subdf3+0x4d0>
    c9e0:	02000434 	movhi	r8,16
    c9e4:	0009883a 	mov	r4,zero
    c9e8:	423fffc4 	addi	r8,r8,-1
    c9ec:	00bfffc4 	movi	r2,-1
    c9f0:	0401ffc4 	movi	r16,2047
    c9f4:	003e6606 	br	c390 <__subdf3+0x228>
    c9f8:	1c62b03a 	or	r17,r3,r17
    c9fc:	8822c03a 	cmpne	r17,r17,zero
    ca00:	0005883a 	mov	r2,zero
    ca04:	003f9906 	br	c86c <__subdf3+0x704>
    ca08:	2807883a 	mov	r3,r5
    ca0c:	3023883a 	mov	r17,r6
    ca10:	0401ffc4 	movi	r16,2047
    ca14:	003df506 	br	c1ec <__subdf3+0x84>
    ca18:	2807883a 	mov	r3,r5
    ca1c:	3023883a 	mov	r17,r6
    ca20:	003df206 	br	c1ec <__subdf3+0x84>
    ca24:	123ff804 	addi	r8,r2,-32
    ca28:	01000804 	movi	r4,32
    ca2c:	1a10d83a 	srl	r8,r3,r8
    ca30:	11000a26 	beq	r2,r4,ca5c <__subdf3+0x8f4>
    ca34:	01001004 	movi	r4,64
    ca38:	2085c83a 	sub	r2,r4,r2
    ca3c:	1884983a 	sll	r2,r3,r2
    ca40:	1444b03a 	or	r2,r2,r17
    ca44:	1004c03a 	cmpne	r2,r2,zero
    ca48:	40a2b03a 	or	r17,r8,r2
    ca4c:	0005883a 	mov	r2,zero
    ca50:	003f8606 	br	c86c <__subdf3+0x704>
    ca54:	0005883a 	mov	r2,zero
    ca58:	003fdc06 	br	c9cc <__subdf3+0x864>
    ca5c:	0005883a 	mov	r2,zero
    ca60:	003ff706 	br	ca40 <__subdf3+0x8d8>

0000ca64 <__fixdfsi>:
    ca64:	280cd53a 	srli	r6,r5,20
    ca68:	00c00434 	movhi	r3,16
    ca6c:	18ffffc4 	addi	r3,r3,-1
    ca70:	3181ffcc 	andi	r6,r6,2047
    ca74:	01c0ff84 	movi	r7,1022
    ca78:	28c6703a 	and	r3,r5,r3
    ca7c:	280ad7fa 	srli	r5,r5,31
    ca80:	3980120e 	bge	r7,r6,cacc <__fixdfsi+0x68>
    ca84:	00810744 	movi	r2,1053
    ca88:	11800c16 	blt	r2,r6,cabc <__fixdfsi+0x58>
    ca8c:	00810cc4 	movi	r2,1075
    ca90:	1185c83a 	sub	r2,r2,r6
    ca94:	01c007c4 	movi	r7,31
    ca98:	18c00434 	orhi	r3,r3,16
    ca9c:	38800d16 	blt	r7,r2,cad4 <__fixdfsi+0x70>
    caa0:	31befb44 	addi	r6,r6,-1043
    caa4:	2084d83a 	srl	r2,r4,r2
    caa8:	1986983a 	sll	r3,r3,r6
    caac:	1884b03a 	or	r2,r3,r2
    cab0:	28000726 	beq	r5,zero,cad0 <__fixdfsi+0x6c>
    cab4:	0085c83a 	sub	r2,zero,r2
    cab8:	f800283a 	ret
    cabc:	00a00034 	movhi	r2,32768
    cac0:	10bfffc4 	addi	r2,r2,-1
    cac4:	2885883a 	add	r2,r5,r2
    cac8:	f800283a 	ret
    cacc:	0005883a 	mov	r2,zero
    cad0:	f800283a 	ret
    cad4:	008104c4 	movi	r2,1043
    cad8:	1185c83a 	sub	r2,r2,r6
    cadc:	1884d83a 	srl	r2,r3,r2
    cae0:	003ff306 	br	cab0 <__fixdfsi+0x4c>

0000cae4 <__floatsidf>:
    cae4:	defffd04 	addi	sp,sp,-12
    cae8:	dfc00215 	stw	ra,8(sp)
    caec:	dc400115 	stw	r17,4(sp)
    caf0:	dc000015 	stw	r16,0(sp)
    caf4:	20002b26 	beq	r4,zero,cba4 <__floatsidf+0xc0>
    caf8:	2023883a 	mov	r17,r4
    cafc:	2020d7fa 	srli	r16,r4,31
    cb00:	20002d16 	blt	r4,zero,cbb8 <__floatsidf+0xd4>
    cb04:	8809883a 	mov	r4,r17
    cb08:	000cc680 	call	cc68 <__clzsi2>
    cb0c:	01410784 	movi	r5,1054
    cb10:	288bc83a 	sub	r5,r5,r2
    cb14:	01010cc4 	movi	r4,1075
    cb18:	2149c83a 	sub	r4,r4,r5
    cb1c:	00c007c4 	movi	r3,31
    cb20:	1900160e 	bge	r3,r4,cb7c <__floatsidf+0x98>
    cb24:	00c104c4 	movi	r3,1043
    cb28:	1947c83a 	sub	r3,r3,r5
    cb2c:	88c6983a 	sll	r3,r17,r3
    cb30:	00800434 	movhi	r2,16
    cb34:	10bfffc4 	addi	r2,r2,-1
    cb38:	1886703a 	and	r3,r3,r2
    cb3c:	2941ffcc 	andi	r5,r5,2047
    cb40:	800d883a 	mov	r6,r16
    cb44:	0005883a 	mov	r2,zero
    cb48:	280a953a 	slli	r5,r5,20
    cb4c:	31803fcc 	andi	r6,r6,255
    cb50:	01000434 	movhi	r4,16
    cb54:	300c97fa 	slli	r6,r6,31
    cb58:	213fffc4 	addi	r4,r4,-1
    cb5c:	1906703a 	and	r3,r3,r4
    cb60:	1946b03a 	or	r3,r3,r5
    cb64:	1986b03a 	or	r3,r3,r6
    cb68:	dfc00217 	ldw	ra,8(sp)
    cb6c:	dc400117 	ldw	r17,4(sp)
    cb70:	dc000017 	ldw	r16,0(sp)
    cb74:	dec00304 	addi	sp,sp,12
    cb78:	f800283a 	ret
    cb7c:	00c002c4 	movi	r3,11
    cb80:	1887c83a 	sub	r3,r3,r2
    cb84:	88c6d83a 	srl	r3,r17,r3
    cb88:	8904983a 	sll	r2,r17,r4
    cb8c:	01000434 	movhi	r4,16
    cb90:	213fffc4 	addi	r4,r4,-1
    cb94:	2941ffcc 	andi	r5,r5,2047
    cb98:	1906703a 	and	r3,r3,r4
    cb9c:	800d883a 	mov	r6,r16
    cba0:	003fe906 	br	cb48 <__floatsidf+0x64>
    cba4:	000d883a 	mov	r6,zero
    cba8:	000b883a 	mov	r5,zero
    cbac:	0007883a 	mov	r3,zero
    cbb0:	0005883a 	mov	r2,zero
    cbb4:	003fe406 	br	cb48 <__floatsidf+0x64>
    cbb8:	0123c83a 	sub	r17,zero,r4
    cbbc:	003fd106 	br	cb04 <__floatsidf+0x20>

0000cbc0 <__floatunsidf>:
    cbc0:	defffe04 	addi	sp,sp,-8
    cbc4:	dc000015 	stw	r16,0(sp)
    cbc8:	dfc00115 	stw	ra,4(sp)
    cbcc:	2021883a 	mov	r16,r4
    cbd0:	20002226 	beq	r4,zero,cc5c <__floatunsidf+0x9c>
    cbd4:	000cc680 	call	cc68 <__clzsi2>
    cbd8:	01010784 	movi	r4,1054
    cbdc:	2089c83a 	sub	r4,r4,r2
    cbe0:	01810cc4 	movi	r6,1075
    cbe4:	310dc83a 	sub	r6,r6,r4
    cbe8:	00c007c4 	movi	r3,31
    cbec:	1980120e 	bge	r3,r6,cc38 <__floatunsidf+0x78>
    cbf0:	00c104c4 	movi	r3,1043
    cbf4:	1907c83a 	sub	r3,r3,r4
    cbf8:	80ca983a 	sll	r5,r16,r3
    cbfc:	00800434 	movhi	r2,16
    cc00:	10bfffc4 	addi	r2,r2,-1
    cc04:	2101ffcc 	andi	r4,r4,2047
    cc08:	0021883a 	mov	r16,zero
    cc0c:	288a703a 	and	r5,r5,r2
    cc10:	2008953a 	slli	r4,r4,20
    cc14:	00c00434 	movhi	r3,16
    cc18:	18ffffc4 	addi	r3,r3,-1
    cc1c:	28c6703a 	and	r3,r5,r3
    cc20:	8005883a 	mov	r2,r16
    cc24:	1906b03a 	or	r3,r3,r4
    cc28:	dfc00117 	ldw	ra,4(sp)
    cc2c:	dc000017 	ldw	r16,0(sp)
    cc30:	dec00204 	addi	sp,sp,8
    cc34:	f800283a 	ret
    cc38:	00c002c4 	movi	r3,11
    cc3c:	188bc83a 	sub	r5,r3,r2
    cc40:	814ad83a 	srl	r5,r16,r5
    cc44:	00c00434 	movhi	r3,16
    cc48:	18ffffc4 	addi	r3,r3,-1
    cc4c:	81a0983a 	sll	r16,r16,r6
    cc50:	2101ffcc 	andi	r4,r4,2047
    cc54:	28ca703a 	and	r5,r5,r3
    cc58:	003fed06 	br	cc10 <__floatunsidf+0x50>
    cc5c:	0009883a 	mov	r4,zero
    cc60:	000b883a 	mov	r5,zero
    cc64:	003fea06 	br	cc10 <__floatunsidf+0x50>

0000cc68 <__clzsi2>:
    cc68:	00bfffd4 	movui	r2,65535
    cc6c:	11000536 	bltu	r2,r4,cc84 <__clzsi2+0x1c>
    cc70:	00803fc4 	movi	r2,255
    cc74:	11000f36 	bltu	r2,r4,ccb4 <__clzsi2+0x4c>
    cc78:	00800804 	movi	r2,32
    cc7c:	0007883a 	mov	r3,zero
    cc80:	00000506 	br	cc98 <__clzsi2+0x30>
    cc84:	00804034 	movhi	r2,256
    cc88:	10bfffc4 	addi	r2,r2,-1
    cc8c:	11000c2e 	bgeu	r2,r4,ccc0 <__clzsi2+0x58>
    cc90:	00800204 	movi	r2,8
    cc94:	00c00604 	movi	r3,24
    cc98:	20c8d83a 	srl	r4,r4,r3
    cc9c:	00c00074 	movhi	r3,1
    cca0:	18fe8a04 	addi	r3,r3,-1496
    cca4:	1909883a 	add	r4,r3,r4
    cca8:	20c00003 	ldbu	r3,0(r4)
    ccac:	10c5c83a 	sub	r2,r2,r3
    ccb0:	f800283a 	ret
    ccb4:	00800604 	movi	r2,24
    ccb8:	00c00204 	movi	r3,8
    ccbc:	003ff606 	br	cc98 <__clzsi2+0x30>
    ccc0:	00800404 	movi	r2,16
    ccc4:	1007883a 	mov	r3,r2
    ccc8:	003ff306 	br	cc98 <__clzsi2+0x30>

0000cccc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cccc:	defffe04 	addi	sp,sp,-8
    ccd0:	dfc00115 	stw	ra,4(sp)
    ccd4:	df000015 	stw	fp,0(sp)
    ccd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ccdc:	00800074 	movhi	r2,1
    cce0:	10859804 	addi	r2,r2,5728
    cce4:	10800017 	ldw	r2,0(r2)
    cce8:	10000526 	beq	r2,zero,cd00 <alt_get_errno+0x34>
    ccec:	00800074 	movhi	r2,1
    ccf0:	10859804 	addi	r2,r2,5728
    ccf4:	10800017 	ldw	r2,0(r2)
    ccf8:	103ee83a 	callr	r2
    ccfc:	00000206 	br	cd08 <alt_get_errno+0x3c>
    cd00:	00800074 	movhi	r2,1
    cd04:	108c6904 	addi	r2,r2,12708
}
    cd08:	e037883a 	mov	sp,fp
    cd0c:	dfc00117 	ldw	ra,4(sp)
    cd10:	df000017 	ldw	fp,0(sp)
    cd14:	dec00204 	addi	sp,sp,8
    cd18:	f800283a 	ret

0000cd1c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    cd1c:	defffb04 	addi	sp,sp,-20
    cd20:	dfc00415 	stw	ra,16(sp)
    cd24:	df000315 	stw	fp,12(sp)
    cd28:	df000304 	addi	fp,sp,12
    cd2c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    cd30:	e0bfff17 	ldw	r2,-4(fp)
    cd34:	10000616 	blt	r2,zero,cd50 <close+0x34>
    cd38:	e0bfff17 	ldw	r2,-4(fp)
    cd3c:	10c00324 	muli	r3,r2,12
    cd40:	00800074 	movhi	r2,1
    cd44:	10810a04 	addi	r2,r2,1064
    cd48:	1885883a 	add	r2,r3,r2
    cd4c:	00000106 	br	cd54 <close+0x38>
    cd50:	0005883a 	mov	r2,zero
    cd54:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    cd58:	e0bffd17 	ldw	r2,-12(fp)
    cd5c:	10001926 	beq	r2,zero,cdc4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    cd60:	e0bffd17 	ldw	r2,-12(fp)
    cd64:	10800017 	ldw	r2,0(r2)
    cd68:	10800417 	ldw	r2,16(r2)
    cd6c:	10000626 	beq	r2,zero,cd88 <close+0x6c>
    cd70:	e0bffd17 	ldw	r2,-12(fp)
    cd74:	10800017 	ldw	r2,0(r2)
    cd78:	10800417 	ldw	r2,16(r2)
    cd7c:	e13ffd17 	ldw	r4,-12(fp)
    cd80:	103ee83a 	callr	r2
    cd84:	00000106 	br	cd8c <close+0x70>
    cd88:	0005883a 	mov	r2,zero
    cd8c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    cd90:	e13fff17 	ldw	r4,-4(fp)
    cd94:	000d42c0 	call	d42c <alt_release_fd>
    if (rval < 0)
    cd98:	e0bffe17 	ldw	r2,-8(fp)
    cd9c:	1000070e 	bge	r2,zero,cdbc <close+0xa0>
    {
      ALT_ERRNO = -rval;
    cda0:	000cccc0 	call	cccc <alt_get_errno>
    cda4:	1007883a 	mov	r3,r2
    cda8:	e0bffe17 	ldw	r2,-8(fp)
    cdac:	0085c83a 	sub	r2,zero,r2
    cdb0:	18800015 	stw	r2,0(r3)
      return -1;
    cdb4:	00bfffc4 	movi	r2,-1
    cdb8:	00000706 	br	cdd8 <close+0xbc>
    }
    return 0;
    cdbc:	0005883a 	mov	r2,zero
    cdc0:	00000506 	br	cdd8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    cdc4:	000cccc0 	call	cccc <alt_get_errno>
    cdc8:	1007883a 	mov	r3,r2
    cdcc:	00801444 	movi	r2,81
    cdd0:	18800015 	stw	r2,0(r3)
    return -1;
    cdd4:	00bfffc4 	movi	r2,-1
  }
}
    cdd8:	e037883a 	mov	sp,fp
    cddc:	dfc00117 	ldw	ra,4(sp)
    cde0:	df000017 	ldw	fp,0(sp)
    cde4:	dec00204 	addi	sp,sp,8
    cde8:	f800283a 	ret

0000cdec <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    cdec:	defffc04 	addi	sp,sp,-16
    cdf0:	df000315 	stw	fp,12(sp)
    cdf4:	df000304 	addi	fp,sp,12
    cdf8:	e13ffd15 	stw	r4,-12(fp)
    cdfc:	e17ffe15 	stw	r5,-8(fp)
    ce00:	e1bfff15 	stw	r6,-4(fp)
  return len;
    ce04:	e0bfff17 	ldw	r2,-4(fp)
}
    ce08:	e037883a 	mov	sp,fp
    ce0c:	df000017 	ldw	fp,0(sp)
    ce10:	dec00104 	addi	sp,sp,4
    ce14:	f800283a 	ret

0000ce18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ce18:	defffe04 	addi	sp,sp,-8
    ce1c:	dfc00115 	stw	ra,4(sp)
    ce20:	df000015 	stw	fp,0(sp)
    ce24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ce28:	00800074 	movhi	r2,1
    ce2c:	10859804 	addi	r2,r2,5728
    ce30:	10800017 	ldw	r2,0(r2)
    ce34:	10000526 	beq	r2,zero,ce4c <alt_get_errno+0x34>
    ce38:	00800074 	movhi	r2,1
    ce3c:	10859804 	addi	r2,r2,5728
    ce40:	10800017 	ldw	r2,0(r2)
    ce44:	103ee83a 	callr	r2
    ce48:	00000206 	br	ce54 <alt_get_errno+0x3c>
    ce4c:	00800074 	movhi	r2,1
    ce50:	108c6904 	addi	r2,r2,12708
}
    ce54:	e037883a 	mov	sp,fp
    ce58:	dfc00117 	ldw	ra,4(sp)
    ce5c:	df000017 	ldw	fp,0(sp)
    ce60:	dec00204 	addi	sp,sp,8
    ce64:	f800283a 	ret

0000ce68 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    ce68:	defffb04 	addi	sp,sp,-20
    ce6c:	dfc00415 	stw	ra,16(sp)
    ce70:	df000315 	stw	fp,12(sp)
    ce74:	df000304 	addi	fp,sp,12
    ce78:	e13ffe15 	stw	r4,-8(fp)
    ce7c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ce80:	e0bffe17 	ldw	r2,-8(fp)
    ce84:	10000616 	blt	r2,zero,cea0 <fstat+0x38>
    ce88:	e0bffe17 	ldw	r2,-8(fp)
    ce8c:	10c00324 	muli	r3,r2,12
    ce90:	00800074 	movhi	r2,1
    ce94:	10810a04 	addi	r2,r2,1064
    ce98:	1885883a 	add	r2,r3,r2
    ce9c:	00000106 	br	cea4 <fstat+0x3c>
    cea0:	0005883a 	mov	r2,zero
    cea4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    cea8:	e0bffd17 	ldw	r2,-12(fp)
    ceac:	10001026 	beq	r2,zero,cef0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    ceb0:	e0bffd17 	ldw	r2,-12(fp)
    ceb4:	10800017 	ldw	r2,0(r2)
    ceb8:	10800817 	ldw	r2,32(r2)
    cebc:	10000726 	beq	r2,zero,cedc <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    cec0:	e0bffd17 	ldw	r2,-12(fp)
    cec4:	10800017 	ldw	r2,0(r2)
    cec8:	10800817 	ldw	r2,32(r2)
    cecc:	e17fff17 	ldw	r5,-4(fp)
    ced0:	e13ffd17 	ldw	r4,-12(fp)
    ced4:	103ee83a 	callr	r2
    ced8:	00000a06 	br	cf04 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    cedc:	e0bfff17 	ldw	r2,-4(fp)
    cee0:	00c80004 	movi	r3,8192
    cee4:	10c00115 	stw	r3,4(r2)
      return 0;
    cee8:	0005883a 	mov	r2,zero
    ceec:	00000506 	br	cf04 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    cef0:	000ce180 	call	ce18 <alt_get_errno>
    cef4:	1007883a 	mov	r3,r2
    cef8:	00801444 	movi	r2,81
    cefc:	18800015 	stw	r2,0(r3)
    return -1;
    cf00:	00bfffc4 	movi	r2,-1
  }
}
    cf04:	e037883a 	mov	sp,fp
    cf08:	dfc00117 	ldw	ra,4(sp)
    cf0c:	df000017 	ldw	fp,0(sp)
    cf10:	dec00204 	addi	sp,sp,8
    cf14:	f800283a 	ret

0000cf18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cf18:	defffe04 	addi	sp,sp,-8
    cf1c:	dfc00115 	stw	ra,4(sp)
    cf20:	df000015 	stw	fp,0(sp)
    cf24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cf28:	00800074 	movhi	r2,1
    cf2c:	10859804 	addi	r2,r2,5728
    cf30:	10800017 	ldw	r2,0(r2)
    cf34:	10000526 	beq	r2,zero,cf4c <alt_get_errno+0x34>
    cf38:	00800074 	movhi	r2,1
    cf3c:	10859804 	addi	r2,r2,5728
    cf40:	10800017 	ldw	r2,0(r2)
    cf44:	103ee83a 	callr	r2
    cf48:	00000206 	br	cf54 <alt_get_errno+0x3c>
    cf4c:	00800074 	movhi	r2,1
    cf50:	108c6904 	addi	r2,r2,12708
}
    cf54:	e037883a 	mov	sp,fp
    cf58:	dfc00117 	ldw	ra,4(sp)
    cf5c:	df000017 	ldw	fp,0(sp)
    cf60:	dec00204 	addi	sp,sp,8
    cf64:	f800283a 	ret

0000cf68 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    cf68:	deffed04 	addi	sp,sp,-76
    cf6c:	dfc01215 	stw	ra,72(sp)
    cf70:	df001115 	stw	fp,68(sp)
    cf74:	df001104 	addi	fp,sp,68
    cf78:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    cf7c:	e0bfff17 	ldw	r2,-4(fp)
    cf80:	10000616 	blt	r2,zero,cf9c <isatty+0x34>
    cf84:	e0bfff17 	ldw	r2,-4(fp)
    cf88:	10c00324 	muli	r3,r2,12
    cf8c:	00800074 	movhi	r2,1
    cf90:	10810a04 	addi	r2,r2,1064
    cf94:	1885883a 	add	r2,r3,r2
    cf98:	00000106 	br	cfa0 <isatty+0x38>
    cf9c:	0005883a 	mov	r2,zero
    cfa0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    cfa4:	e0bfef17 	ldw	r2,-68(fp)
    cfa8:	10000e26 	beq	r2,zero,cfe4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    cfac:	e0bfef17 	ldw	r2,-68(fp)
    cfb0:	10800017 	ldw	r2,0(r2)
    cfb4:	10800817 	ldw	r2,32(r2)
    cfb8:	1000021e 	bne	r2,zero,cfc4 <isatty+0x5c>
    {
      return 1;
    cfbc:	00800044 	movi	r2,1
    cfc0:	00000d06 	br	cff8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    cfc4:	e0bff004 	addi	r2,fp,-64
    cfc8:	100b883a 	mov	r5,r2
    cfcc:	e13fff17 	ldw	r4,-4(fp)
    cfd0:	000ce680 	call	ce68 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    cfd4:	e0bff117 	ldw	r2,-60(fp)
    cfd8:	10880020 	cmpeqi	r2,r2,8192
    cfdc:	10803fcc 	andi	r2,r2,255
    cfe0:	00000506 	br	cff8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    cfe4:	000cf180 	call	cf18 <alt_get_errno>
    cfe8:	1007883a 	mov	r3,r2
    cfec:	00801444 	movi	r2,81
    cff0:	18800015 	stw	r2,0(r3)
    return 0;
    cff4:	0005883a 	mov	r2,zero
  }
}
    cff8:	e037883a 	mov	sp,fp
    cffc:	dfc00117 	ldw	ra,4(sp)
    d000:	df000017 	ldw	fp,0(sp)
    d004:	dec00204 	addi	sp,sp,8
    d008:	f800283a 	ret

0000d00c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    d00c:	defffc04 	addi	sp,sp,-16
    d010:	df000315 	stw	fp,12(sp)
    d014:	df000304 	addi	fp,sp,12
    d018:	e13ffd15 	stw	r4,-12(fp)
    d01c:	e17ffe15 	stw	r5,-8(fp)
    d020:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    d024:	e0fffe17 	ldw	r3,-8(fp)
    d028:	e0bffd17 	ldw	r2,-12(fp)
    d02c:	18800c26 	beq	r3,r2,d060 <alt_load_section+0x54>
  {
    while( to != end )
    d030:	00000806 	br	d054 <alt_load_section+0x48>
    {
      *to++ = *from++;
    d034:	e0bffe17 	ldw	r2,-8(fp)
    d038:	10c00104 	addi	r3,r2,4
    d03c:	e0fffe15 	stw	r3,-8(fp)
    d040:	e0fffd17 	ldw	r3,-12(fp)
    d044:	19000104 	addi	r4,r3,4
    d048:	e13ffd15 	stw	r4,-12(fp)
    d04c:	18c00017 	ldw	r3,0(r3)
    d050:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    d054:	e0fffe17 	ldw	r3,-8(fp)
    d058:	e0bfff17 	ldw	r2,-4(fp)
    d05c:	18bff51e 	bne	r3,r2,d034 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    d060:	0001883a 	nop
    d064:	e037883a 	mov	sp,fp
    d068:	df000017 	ldw	fp,0(sp)
    d06c:	dec00104 	addi	sp,sp,4
    d070:	f800283a 	ret

0000d074 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    d074:	defffe04 	addi	sp,sp,-8
    d078:	dfc00115 	stw	ra,4(sp)
    d07c:	df000015 	stw	fp,0(sp)
    d080:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    d084:	01800074 	movhi	r6,1
    d088:	31859d04 	addi	r6,r6,5748
    d08c:	01400074 	movhi	r5,1
    d090:	297ed704 	addi	r5,r5,-1188
    d094:	01000074 	movhi	r4,1
    d098:	21059d04 	addi	r4,r4,5748
    d09c:	000d00c0 	call	d00c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    d0a0:	01800034 	movhi	r6,0
    d0a4:	31809204 	addi	r6,r6,584
    d0a8:	01400034 	movhi	r5,0
    d0ac:	29400804 	addi	r5,r5,32
    d0b0:	01000034 	movhi	r4,0
    d0b4:	21000804 	addi	r4,r4,32
    d0b8:	000d00c0 	call	d00c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    d0bc:	01800074 	movhi	r6,1
    d0c0:	31bed704 	addi	r6,r6,-1188
    d0c4:	01400074 	movhi	r5,1
    d0c8:	297e0804 	addi	r5,r5,-2016
    d0cc:	01000074 	movhi	r4,1
    d0d0:	213e0804 	addi	r4,r4,-2016
    d0d4:	000d00c0 	call	d00c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    d0d8:	000e7ac0 	call	e7ac <alt_dcache_flush_all>
  alt_icache_flush_all();
    d0dc:	000ea380 	call	ea38 <alt_icache_flush_all>
}
    d0e0:	0001883a 	nop
    d0e4:	e037883a 	mov	sp,fp
    d0e8:	dfc00117 	ldw	ra,4(sp)
    d0ec:	df000017 	ldw	fp,0(sp)
    d0f0:	dec00204 	addi	sp,sp,8
    d0f4:	f800283a 	ret

0000d0f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d0f8:	defffe04 	addi	sp,sp,-8
    d0fc:	dfc00115 	stw	ra,4(sp)
    d100:	df000015 	stw	fp,0(sp)
    d104:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d108:	00800074 	movhi	r2,1
    d10c:	10859804 	addi	r2,r2,5728
    d110:	10800017 	ldw	r2,0(r2)
    d114:	10000526 	beq	r2,zero,d12c <alt_get_errno+0x34>
    d118:	00800074 	movhi	r2,1
    d11c:	10859804 	addi	r2,r2,5728
    d120:	10800017 	ldw	r2,0(r2)
    d124:	103ee83a 	callr	r2
    d128:	00000206 	br	d134 <alt_get_errno+0x3c>
    d12c:	00800074 	movhi	r2,1
    d130:	108c6904 	addi	r2,r2,12708
}
    d134:	e037883a 	mov	sp,fp
    d138:	dfc00117 	ldw	ra,4(sp)
    d13c:	df000017 	ldw	fp,0(sp)
    d140:	dec00204 	addi	sp,sp,8
    d144:	f800283a 	ret

0000d148 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    d148:	defff904 	addi	sp,sp,-28
    d14c:	dfc00615 	stw	ra,24(sp)
    d150:	df000515 	stw	fp,20(sp)
    d154:	df000504 	addi	fp,sp,20
    d158:	e13ffd15 	stw	r4,-12(fp)
    d15c:	e17ffe15 	stw	r5,-8(fp)
    d160:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    d164:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d168:	e0bffd17 	ldw	r2,-12(fp)
    d16c:	10000616 	blt	r2,zero,d188 <lseek+0x40>
    d170:	e0bffd17 	ldw	r2,-12(fp)
    d174:	10c00324 	muli	r3,r2,12
    d178:	00800074 	movhi	r2,1
    d17c:	10810a04 	addi	r2,r2,1064
    d180:	1885883a 	add	r2,r3,r2
    d184:	00000106 	br	d18c <lseek+0x44>
    d188:	0005883a 	mov	r2,zero
    d18c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    d190:	e0bffc17 	ldw	r2,-16(fp)
    d194:	10001026 	beq	r2,zero,d1d8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    d198:	e0bffc17 	ldw	r2,-16(fp)
    d19c:	10800017 	ldw	r2,0(r2)
    d1a0:	10800717 	ldw	r2,28(r2)
    d1a4:	10000926 	beq	r2,zero,d1cc <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    d1a8:	e0bffc17 	ldw	r2,-16(fp)
    d1ac:	10800017 	ldw	r2,0(r2)
    d1b0:	10800717 	ldw	r2,28(r2)
    d1b4:	e1bfff17 	ldw	r6,-4(fp)
    d1b8:	e17ffe17 	ldw	r5,-8(fp)
    d1bc:	e13ffc17 	ldw	r4,-16(fp)
    d1c0:	103ee83a 	callr	r2
    d1c4:	e0bffb15 	stw	r2,-20(fp)
    d1c8:	00000506 	br	d1e0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    d1cc:	00bfde84 	movi	r2,-134
    d1d0:	e0bffb15 	stw	r2,-20(fp)
    d1d4:	00000206 	br	d1e0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    d1d8:	00bfebc4 	movi	r2,-81
    d1dc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    d1e0:	e0bffb17 	ldw	r2,-20(fp)
    d1e4:	1000070e 	bge	r2,zero,d204 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    d1e8:	000d0f80 	call	d0f8 <alt_get_errno>
    d1ec:	1007883a 	mov	r3,r2
    d1f0:	e0bffb17 	ldw	r2,-20(fp)
    d1f4:	0085c83a 	sub	r2,zero,r2
    d1f8:	18800015 	stw	r2,0(r3)
    rc = -1;
    d1fc:	00bfffc4 	movi	r2,-1
    d200:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    d204:	e0bffb17 	ldw	r2,-20(fp)
}
    d208:	e037883a 	mov	sp,fp
    d20c:	dfc00117 	ldw	ra,4(sp)
    d210:	df000017 	ldw	fp,0(sp)
    d214:	dec00204 	addi	sp,sp,8
    d218:	f800283a 	ret

0000d21c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    d21c:	defffd04 	addi	sp,sp,-12
    d220:	dfc00215 	stw	ra,8(sp)
    d224:	df000115 	stw	fp,4(sp)
    d228:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    d22c:	0009883a 	mov	r4,zero
    d230:	000d6c00 	call	d6c0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    d234:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    d238:	000d6f80 	call	d6f8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    d23c:	01800074 	movhi	r6,1
    d240:	31becd04 	addi	r6,r6,-1228
    d244:	01400074 	movhi	r5,1
    d248:	297ecd04 	addi	r5,r5,-1228
    d24c:	01000074 	movhi	r4,1
    d250:	213ecd04 	addi	r4,r4,-1228
    d254:	000eb300 	call	eb30 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    d258:	000e8e80 	call	e8e8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    d25c:	01000074 	movhi	r4,1
    d260:	213a5204 	addi	r4,r4,-5816
    d264:	000f48c0 	call	f48c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    d268:	d0a6dd17 	ldw	r2,-25740(gp)
    d26c:	d0e6de17 	ldw	r3,-25736(gp)
    d270:	d126df17 	ldw	r4,-25732(gp)
    d274:	200d883a 	mov	r6,r4
    d278:	180b883a 	mov	r5,r3
    d27c:	1009883a 	mov	r4,r2
    d280:	00002b80 	call	2b8 <main>
    d284:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    d288:	01000044 	movi	r4,1
    d28c:	000cd1c0 	call	cd1c <close>
  exit (result);
    d290:	e13fff17 	ldw	r4,-4(fp)
    d294:	000f4a00 	call	f4a0 <exit>

0000d298 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    d298:	defffe04 	addi	sp,sp,-8
    d29c:	df000115 	stw	fp,4(sp)
    d2a0:	df000104 	addi	fp,sp,4
    d2a4:	e13fff15 	stw	r4,-4(fp)
}
    d2a8:	0001883a 	nop
    d2ac:	e037883a 	mov	sp,fp
    d2b0:	df000017 	ldw	fp,0(sp)
    d2b4:	dec00104 	addi	sp,sp,4
    d2b8:	f800283a 	ret

0000d2bc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    d2bc:	defffe04 	addi	sp,sp,-8
    d2c0:	df000115 	stw	fp,4(sp)
    d2c4:	df000104 	addi	fp,sp,4
    d2c8:	e13fff15 	stw	r4,-4(fp)
}
    d2cc:	0001883a 	nop
    d2d0:	e037883a 	mov	sp,fp
    d2d4:	df000017 	ldw	fp,0(sp)
    d2d8:	dec00104 	addi	sp,sp,4
    d2dc:	f800283a 	ret

0000d2e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d2e0:	defffe04 	addi	sp,sp,-8
    d2e4:	dfc00115 	stw	ra,4(sp)
    d2e8:	df000015 	stw	fp,0(sp)
    d2ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d2f0:	00800074 	movhi	r2,1
    d2f4:	10859804 	addi	r2,r2,5728
    d2f8:	10800017 	ldw	r2,0(r2)
    d2fc:	10000526 	beq	r2,zero,d314 <alt_get_errno+0x34>
    d300:	00800074 	movhi	r2,1
    d304:	10859804 	addi	r2,r2,5728
    d308:	10800017 	ldw	r2,0(r2)
    d30c:	103ee83a 	callr	r2
    d310:	00000206 	br	d31c <alt_get_errno+0x3c>
    d314:	00800074 	movhi	r2,1
    d318:	108c6904 	addi	r2,r2,12708
}
    d31c:	e037883a 	mov	sp,fp
    d320:	dfc00117 	ldw	ra,4(sp)
    d324:	df000017 	ldw	fp,0(sp)
    d328:	dec00204 	addi	sp,sp,8
    d32c:	f800283a 	ret

0000d330 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    d330:	defff904 	addi	sp,sp,-28
    d334:	dfc00615 	stw	ra,24(sp)
    d338:	df000515 	stw	fp,20(sp)
    d33c:	df000504 	addi	fp,sp,20
    d340:	e13ffd15 	stw	r4,-12(fp)
    d344:	e17ffe15 	stw	r5,-8(fp)
    d348:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d34c:	e0bffd17 	ldw	r2,-12(fp)
    d350:	10000616 	blt	r2,zero,d36c <read+0x3c>
    d354:	e0bffd17 	ldw	r2,-12(fp)
    d358:	10c00324 	muli	r3,r2,12
    d35c:	00800074 	movhi	r2,1
    d360:	10810a04 	addi	r2,r2,1064
    d364:	1885883a 	add	r2,r3,r2
    d368:	00000106 	br	d370 <read+0x40>
    d36c:	0005883a 	mov	r2,zero
    d370:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d374:	e0bffb17 	ldw	r2,-20(fp)
    d378:	10002226 	beq	r2,zero,d404 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d37c:	e0bffb17 	ldw	r2,-20(fp)
    d380:	10800217 	ldw	r2,8(r2)
    d384:	108000cc 	andi	r2,r2,3
    d388:	10800060 	cmpeqi	r2,r2,1
    d38c:	1000181e 	bne	r2,zero,d3f0 <read+0xc0>
        (fd->dev->read))
    d390:	e0bffb17 	ldw	r2,-20(fp)
    d394:	10800017 	ldw	r2,0(r2)
    d398:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d39c:	10001426 	beq	r2,zero,d3f0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    d3a0:	e0bffb17 	ldw	r2,-20(fp)
    d3a4:	10800017 	ldw	r2,0(r2)
    d3a8:	10800517 	ldw	r2,20(r2)
    d3ac:	e0ffff17 	ldw	r3,-4(fp)
    d3b0:	180d883a 	mov	r6,r3
    d3b4:	e17ffe17 	ldw	r5,-8(fp)
    d3b8:	e13ffb17 	ldw	r4,-20(fp)
    d3bc:	103ee83a 	callr	r2
    d3c0:	e0bffc15 	stw	r2,-16(fp)
    d3c4:	e0bffc17 	ldw	r2,-16(fp)
    d3c8:	1000070e 	bge	r2,zero,d3e8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    d3cc:	000d2e00 	call	d2e0 <alt_get_errno>
    d3d0:	1007883a 	mov	r3,r2
    d3d4:	e0bffc17 	ldw	r2,-16(fp)
    d3d8:	0085c83a 	sub	r2,zero,r2
    d3dc:	18800015 	stw	r2,0(r3)
          return -1;
    d3e0:	00bfffc4 	movi	r2,-1
    d3e4:	00000c06 	br	d418 <read+0xe8>
        }
        return rval;
    d3e8:	e0bffc17 	ldw	r2,-16(fp)
    d3ec:	00000a06 	br	d418 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    d3f0:	000d2e00 	call	d2e0 <alt_get_errno>
    d3f4:	1007883a 	mov	r3,r2
    d3f8:	00800344 	movi	r2,13
    d3fc:	18800015 	stw	r2,0(r3)
    d400:	00000406 	br	d414 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    d404:	000d2e00 	call	d2e0 <alt_get_errno>
    d408:	1007883a 	mov	r3,r2
    d40c:	00801444 	movi	r2,81
    d410:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d414:	00bfffc4 	movi	r2,-1
}
    d418:	e037883a 	mov	sp,fp
    d41c:	dfc00117 	ldw	ra,4(sp)
    d420:	df000017 	ldw	fp,0(sp)
    d424:	dec00204 	addi	sp,sp,8
    d428:	f800283a 	ret

0000d42c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    d42c:	defffe04 	addi	sp,sp,-8
    d430:	df000115 	stw	fp,4(sp)
    d434:	df000104 	addi	fp,sp,4
    d438:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    d43c:	e0bfff17 	ldw	r2,-4(fp)
    d440:	108000d0 	cmplti	r2,r2,3
    d444:	10000d1e 	bne	r2,zero,d47c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    d448:	00800074 	movhi	r2,1
    d44c:	10810a04 	addi	r2,r2,1064
    d450:	e0ffff17 	ldw	r3,-4(fp)
    d454:	18c00324 	muli	r3,r3,12
    d458:	10c5883a 	add	r2,r2,r3
    d45c:	10800204 	addi	r2,r2,8
    d460:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    d464:	00800074 	movhi	r2,1
    d468:	10810a04 	addi	r2,r2,1064
    d46c:	e0ffff17 	ldw	r3,-4(fp)
    d470:	18c00324 	muli	r3,r3,12
    d474:	10c5883a 	add	r2,r2,r3
    d478:	10000015 	stw	zero,0(r2)
  }
}
    d47c:	0001883a 	nop
    d480:	e037883a 	mov	sp,fp
    d484:	df000017 	ldw	fp,0(sp)
    d488:	dec00104 	addi	sp,sp,4
    d48c:	f800283a 	ret

0000d490 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    d490:	defff904 	addi	sp,sp,-28
    d494:	df000615 	stw	fp,24(sp)
    d498:	df000604 	addi	fp,sp,24
    d49c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d4a0:	0005303a 	rdctl	r2,status
    d4a4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d4a8:	e0fffe17 	ldw	r3,-8(fp)
    d4ac:	00bfff84 	movi	r2,-2
    d4b0:	1884703a 	and	r2,r3,r2
    d4b4:	1001703a 	wrctl	status,r2
  
  return context;
    d4b8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    d4bc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    d4c0:	d0a00c17 	ldw	r2,-32720(gp)
    d4c4:	10c000c4 	addi	r3,r2,3
    d4c8:	00bfff04 	movi	r2,-4
    d4cc:	1884703a 	and	r2,r3,r2
    d4d0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    d4d4:	d0e00c17 	ldw	r3,-32720(gp)
    d4d8:	e0bfff17 	ldw	r2,-4(fp)
    d4dc:	1887883a 	add	r3,r3,r2
    d4e0:	00810034 	movhi	r2,1024
    d4e4:	10800004 	addi	r2,r2,0
    d4e8:	10c0062e 	bgeu	r2,r3,d504 <sbrk+0x74>
    d4ec:	e0bffb17 	ldw	r2,-20(fp)
    d4f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d4f4:	e0bffa17 	ldw	r2,-24(fp)
    d4f8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    d4fc:	00bfffc4 	movi	r2,-1
    d500:	00000b06 	br	d530 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    d504:	d0a00c17 	ldw	r2,-32720(gp)
    d508:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    d50c:	d0e00c17 	ldw	r3,-32720(gp)
    d510:	e0bfff17 	ldw	r2,-4(fp)
    d514:	1885883a 	add	r2,r3,r2
    d518:	d0a00c15 	stw	r2,-32720(gp)
    d51c:	e0bffb17 	ldw	r2,-20(fp)
    d520:	e0bffc15 	stw	r2,-16(fp)
    d524:	e0bffc17 	ldw	r2,-16(fp)
    d528:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    d52c:	e0bffd17 	ldw	r2,-12(fp)
} 
    d530:	e037883a 	mov	sp,fp
    d534:	df000017 	ldw	fp,0(sp)
    d538:	dec00104 	addi	sp,sp,4
    d53c:	f800283a 	ret

0000d540 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d540:	defffe04 	addi	sp,sp,-8
    d544:	dfc00115 	stw	ra,4(sp)
    d548:	df000015 	stw	fp,0(sp)
    d54c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d550:	00800074 	movhi	r2,1
    d554:	10859804 	addi	r2,r2,5728
    d558:	10800017 	ldw	r2,0(r2)
    d55c:	10000526 	beq	r2,zero,d574 <alt_get_errno+0x34>
    d560:	00800074 	movhi	r2,1
    d564:	10859804 	addi	r2,r2,5728
    d568:	10800017 	ldw	r2,0(r2)
    d56c:	103ee83a 	callr	r2
    d570:	00000206 	br	d57c <alt_get_errno+0x3c>
    d574:	00800074 	movhi	r2,1
    d578:	108c6904 	addi	r2,r2,12708
}
    d57c:	e037883a 	mov	sp,fp
    d580:	dfc00117 	ldw	ra,4(sp)
    d584:	df000017 	ldw	fp,0(sp)
    d588:	dec00204 	addi	sp,sp,8
    d58c:	f800283a 	ret

0000d590 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    d590:	defff904 	addi	sp,sp,-28
    d594:	dfc00615 	stw	ra,24(sp)
    d598:	df000515 	stw	fp,20(sp)
    d59c:	df000504 	addi	fp,sp,20
    d5a0:	e13ffd15 	stw	r4,-12(fp)
    d5a4:	e17ffe15 	stw	r5,-8(fp)
    d5a8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d5ac:	e0bffd17 	ldw	r2,-12(fp)
    d5b0:	10000616 	blt	r2,zero,d5cc <write+0x3c>
    d5b4:	e0bffd17 	ldw	r2,-12(fp)
    d5b8:	10c00324 	muli	r3,r2,12
    d5bc:	00800074 	movhi	r2,1
    d5c0:	10810a04 	addi	r2,r2,1064
    d5c4:	1885883a 	add	r2,r3,r2
    d5c8:	00000106 	br	d5d0 <write+0x40>
    d5cc:	0005883a 	mov	r2,zero
    d5d0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d5d4:	e0bffb17 	ldw	r2,-20(fp)
    d5d8:	10002126 	beq	r2,zero,d660 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    d5dc:	e0bffb17 	ldw	r2,-20(fp)
    d5e0:	10800217 	ldw	r2,8(r2)
    d5e4:	108000cc 	andi	r2,r2,3
    d5e8:	10001826 	beq	r2,zero,d64c <write+0xbc>
    d5ec:	e0bffb17 	ldw	r2,-20(fp)
    d5f0:	10800017 	ldw	r2,0(r2)
    d5f4:	10800617 	ldw	r2,24(r2)
    d5f8:	10001426 	beq	r2,zero,d64c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    d5fc:	e0bffb17 	ldw	r2,-20(fp)
    d600:	10800017 	ldw	r2,0(r2)
    d604:	10800617 	ldw	r2,24(r2)
    d608:	e0ffff17 	ldw	r3,-4(fp)
    d60c:	180d883a 	mov	r6,r3
    d610:	e17ffe17 	ldw	r5,-8(fp)
    d614:	e13ffb17 	ldw	r4,-20(fp)
    d618:	103ee83a 	callr	r2
    d61c:	e0bffc15 	stw	r2,-16(fp)
    d620:	e0bffc17 	ldw	r2,-16(fp)
    d624:	1000070e 	bge	r2,zero,d644 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    d628:	000d5400 	call	d540 <alt_get_errno>
    d62c:	1007883a 	mov	r3,r2
    d630:	e0bffc17 	ldw	r2,-16(fp)
    d634:	0085c83a 	sub	r2,zero,r2
    d638:	18800015 	stw	r2,0(r3)
        return -1;
    d63c:	00bfffc4 	movi	r2,-1
    d640:	00000c06 	br	d674 <write+0xe4>
      }
      return rval;
    d644:	e0bffc17 	ldw	r2,-16(fp)
    d648:	00000a06 	br	d674 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    d64c:	000d5400 	call	d540 <alt_get_errno>
    d650:	1007883a 	mov	r3,r2
    d654:	00800344 	movi	r2,13
    d658:	18800015 	stw	r2,0(r3)
    d65c:	00000406 	br	d670 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    d660:	000d5400 	call	d540 <alt_get_errno>
    d664:	1007883a 	mov	r3,r2
    d668:	00801444 	movi	r2,81
    d66c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d670:	00bfffc4 	movi	r2,-1
}
    d674:	e037883a 	mov	sp,fp
    d678:	dfc00117 	ldw	ra,4(sp)
    d67c:	df000017 	ldw	fp,0(sp)
    d680:	dec00204 	addi	sp,sp,8
    d684:	f800283a 	ret

0000d688 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    d688:	defffd04 	addi	sp,sp,-12
    d68c:	dfc00215 	stw	ra,8(sp)
    d690:	df000115 	stw	fp,4(sp)
    d694:	df000104 	addi	fp,sp,4
    d698:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    d69c:	01400074 	movhi	r5,1
    d6a0:	29459504 	addi	r5,r5,5716
    d6a4:	e13fff17 	ldw	r4,-4(fp)
    d6a8:	000e8440 	call	e844 <alt_dev_llist_insert>
}
    d6ac:	e037883a 	mov	sp,fp
    d6b0:	dfc00117 	ldw	ra,4(sp)
    d6b4:	df000017 	ldw	fp,0(sp)
    d6b8:	dec00204 	addi	sp,sp,8
    d6bc:	f800283a 	ret

0000d6c0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    d6c0:	defffd04 	addi	sp,sp,-12
    d6c4:	dfc00215 	stw	ra,8(sp)
    d6c8:	df000115 	stw	fp,4(sp)
    d6cc:	df000104 	addi	fp,sp,4
    d6d0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOSII_CORE, niosII_core);
    d6d4:	000f1740 	call	f174 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    d6d8:	00800044 	movi	r2,1
    d6dc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    d6e0:	0001883a 	nop
    d6e4:	e037883a 	mov	sp,fp
    d6e8:	dfc00117 	ldw	ra,4(sp)
    d6ec:	df000017 	ldw	fp,0(sp)
    d6f0:	dec00204 	addi	sp,sp,8
    d6f4:	f800283a 	ret

0000d6f8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    d6f8:	defffe04 	addi	sp,sp,-8
    d6fc:	dfc00115 	stw	ra,4(sp)
    d700:	df000015 	stw	fp,0(sp)
    d704:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_TIMER, Sys_Timer);
    d708:	01c0fa04 	movi	r7,1000
    d70c:	01800044 	movi	r6,1
    d710:	000b883a 	mov	r5,zero
    d714:	01010134 	movhi	r4,1028
    d718:	21070004 	addi	r4,r4,7168
    d71c:	000e2540 	call	e254 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, JTAG);
    d720:	000d883a 	mov	r6,zero
    d724:	000b883a 	mov	r5,zero
    d728:	01000074 	movhi	r4,1
    d72c:	21017404 	addi	r4,r4,1488
    d730:	000d8cc0 	call	d8cc <altera_avalon_jtag_uart_init>
    d734:	01000074 	movhi	r4,1
    d738:	21016a04 	addi	r4,r4,1448
    d73c:	000d6880 	call	d688 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSTEMID, SystemID);
    d740:	0001883a 	nop
    ALTERA_UP_AVALON_RS232_INIT ( UART_COM, UART_COM);
    d744:	01000074 	movhi	r4,1
    d748:	21058204 	addi	r4,r4,5640
    d74c:	000d6880 	call	d688 <alt_dev_reg>
}
    d750:	0001883a 	nop
    d754:	e037883a 	mov	sp,fp
    d758:	dfc00117 	ldw	ra,4(sp)
    d75c:	df000017 	ldw	fp,0(sp)
    d760:	dec00204 	addi	sp,sp,8
    d764:	f800283a 	ret

0000d768 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    d768:	defffa04 	addi	sp,sp,-24
    d76c:	dfc00515 	stw	ra,20(sp)
    d770:	df000415 	stw	fp,16(sp)
    d774:	df000404 	addi	fp,sp,16
    d778:	e13ffd15 	stw	r4,-12(fp)
    d77c:	e17ffe15 	stw	r5,-8(fp)
    d780:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d784:	e0bffd17 	ldw	r2,-12(fp)
    d788:	10800017 	ldw	r2,0(r2)
    d78c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    d790:	e0bffc17 	ldw	r2,-16(fp)
    d794:	10c00a04 	addi	r3,r2,40
    d798:	e0bffd17 	ldw	r2,-12(fp)
    d79c:	10800217 	ldw	r2,8(r2)
    d7a0:	100f883a 	mov	r7,r2
    d7a4:	e1bfff17 	ldw	r6,-4(fp)
    d7a8:	e17ffe17 	ldw	r5,-8(fp)
    d7ac:	1809883a 	mov	r4,r3
    d7b0:	000dd980 	call	dd98 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    d7b4:	e037883a 	mov	sp,fp
    d7b8:	dfc00117 	ldw	ra,4(sp)
    d7bc:	df000017 	ldw	fp,0(sp)
    d7c0:	dec00204 	addi	sp,sp,8
    d7c4:	f800283a 	ret

0000d7c8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    d7c8:	defffa04 	addi	sp,sp,-24
    d7cc:	dfc00515 	stw	ra,20(sp)
    d7d0:	df000415 	stw	fp,16(sp)
    d7d4:	df000404 	addi	fp,sp,16
    d7d8:	e13ffd15 	stw	r4,-12(fp)
    d7dc:	e17ffe15 	stw	r5,-8(fp)
    d7e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d7e4:	e0bffd17 	ldw	r2,-12(fp)
    d7e8:	10800017 	ldw	r2,0(r2)
    d7ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    d7f0:	e0bffc17 	ldw	r2,-16(fp)
    d7f4:	10c00a04 	addi	r3,r2,40
    d7f8:	e0bffd17 	ldw	r2,-12(fp)
    d7fc:	10800217 	ldw	r2,8(r2)
    d800:	100f883a 	mov	r7,r2
    d804:	e1bfff17 	ldw	r6,-4(fp)
    d808:	e17ffe17 	ldw	r5,-8(fp)
    d80c:	1809883a 	mov	r4,r3
    d810:	000dfb40 	call	dfb4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    d814:	e037883a 	mov	sp,fp
    d818:	dfc00117 	ldw	ra,4(sp)
    d81c:	df000017 	ldw	fp,0(sp)
    d820:	dec00204 	addi	sp,sp,8
    d824:	f800283a 	ret

0000d828 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    d828:	defffc04 	addi	sp,sp,-16
    d82c:	dfc00315 	stw	ra,12(sp)
    d830:	df000215 	stw	fp,8(sp)
    d834:	df000204 	addi	fp,sp,8
    d838:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d83c:	e0bfff17 	ldw	r2,-4(fp)
    d840:	10800017 	ldw	r2,0(r2)
    d844:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    d848:	e0bffe17 	ldw	r2,-8(fp)
    d84c:	10c00a04 	addi	r3,r2,40
    d850:	e0bfff17 	ldw	r2,-4(fp)
    d854:	10800217 	ldw	r2,8(r2)
    d858:	100b883a 	mov	r5,r2
    d85c:	1809883a 	mov	r4,r3
    d860:	000dc400 	call	dc40 <altera_avalon_jtag_uart_close>
}
    d864:	e037883a 	mov	sp,fp
    d868:	dfc00117 	ldw	ra,4(sp)
    d86c:	df000017 	ldw	fp,0(sp)
    d870:	dec00204 	addi	sp,sp,8
    d874:	f800283a 	ret

0000d878 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    d878:	defffa04 	addi	sp,sp,-24
    d87c:	dfc00515 	stw	ra,20(sp)
    d880:	df000415 	stw	fp,16(sp)
    d884:	df000404 	addi	fp,sp,16
    d888:	e13ffd15 	stw	r4,-12(fp)
    d88c:	e17ffe15 	stw	r5,-8(fp)
    d890:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    d894:	e0bffd17 	ldw	r2,-12(fp)
    d898:	10800017 	ldw	r2,0(r2)
    d89c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    d8a0:	e0bffc17 	ldw	r2,-16(fp)
    d8a4:	10800a04 	addi	r2,r2,40
    d8a8:	e1bfff17 	ldw	r6,-4(fp)
    d8ac:	e17ffe17 	ldw	r5,-8(fp)
    d8b0:	1009883a 	mov	r4,r2
    d8b4:	000dca80 	call	dca8 <altera_avalon_jtag_uart_ioctl>
}
    d8b8:	e037883a 	mov	sp,fp
    d8bc:	dfc00117 	ldw	ra,4(sp)
    d8c0:	df000017 	ldw	fp,0(sp)
    d8c4:	dec00204 	addi	sp,sp,8
    d8c8:	f800283a 	ret

0000d8cc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    d8cc:	defffb04 	addi	sp,sp,-20
    d8d0:	dfc00415 	stw	ra,16(sp)
    d8d4:	df000315 	stw	fp,12(sp)
    d8d8:	df000304 	addi	fp,sp,12
    d8dc:	e13ffd15 	stw	r4,-12(fp)
    d8e0:	e17ffe15 	stw	r5,-8(fp)
    d8e4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    d8e8:	e0bffd17 	ldw	r2,-12(fp)
    d8ec:	00c00044 	movi	r3,1
    d8f0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    d8f4:	e0bffd17 	ldw	r2,-12(fp)
    d8f8:	10800017 	ldw	r2,0(r2)
    d8fc:	10800104 	addi	r2,r2,4
    d900:	1007883a 	mov	r3,r2
    d904:	e0bffd17 	ldw	r2,-12(fp)
    d908:	10800817 	ldw	r2,32(r2)
    d90c:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    d910:	e0bfff17 	ldw	r2,-4(fp)
    d914:	01800074 	movhi	r6,1
    d918:	31b66204 	addi	r6,r6,-9848
    d91c:	e17ffd17 	ldw	r5,-12(fp)
    d920:	1009883a 	mov	r4,r2
    d924:	000ebac0 	call	ebac <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    d928:	e0bffd17 	ldw	r2,-12(fp)
    d92c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    d930:	e0bffd17 	ldw	r2,-12(fp)
    d934:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    d938:	00800074 	movhi	r2,1
    d93c:	108c6e04 	addi	r2,r2,12728
    d940:	10800017 	ldw	r2,0(r2)
    d944:	e1fffd17 	ldw	r7,-12(fp)
    d948:	01800074 	movhi	r6,1
    d94c:	31b6e604 	addi	r6,r6,-9320
    d950:	100b883a 	mov	r5,r2
    d954:	1809883a 	mov	r4,r3
    d958:	000e66c0 	call	e66c <alt_alarm_start>
    d95c:	1000040e 	bge	r2,zero,d970 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    d960:	e0fffd17 	ldw	r3,-12(fp)
    d964:	00a00034 	movhi	r2,32768
    d968:	10bfffc4 	addi	r2,r2,-1
    d96c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    d970:	0001883a 	nop
    d974:	e037883a 	mov	sp,fp
    d978:	dfc00117 	ldw	ra,4(sp)
    d97c:	df000017 	ldw	fp,0(sp)
    d980:	dec00204 	addi	sp,sp,8
    d984:	f800283a 	ret

0000d988 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    d988:	defff704 	addi	sp,sp,-36
    d98c:	df000815 	stw	fp,32(sp)
    d990:	df000804 	addi	fp,sp,32
    d994:	e13ffe15 	stw	r4,-8(fp)
    d998:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    d99c:	e0bffe17 	ldw	r2,-8(fp)
    d9a0:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
    d9a4:	e0bffa17 	ldw	r2,-24(fp)
    d9a8:	10800017 	ldw	r2,0(r2)
    d9ac:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    d9b0:	e0bffb17 	ldw	r2,-20(fp)
    d9b4:	10800104 	addi	r2,r2,4
    d9b8:	10800037 	ldwio	r2,0(r2)
    d9bc:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    d9c0:	e0bffc17 	ldw	r2,-16(fp)
    d9c4:	1080c00c 	andi	r2,r2,768
    d9c8:	10006d26 	beq	r2,zero,db80 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    d9cc:	e0bffc17 	ldw	r2,-16(fp)
    d9d0:	1080400c 	andi	r2,r2,256
    d9d4:	10003526 	beq	r2,zero,daac <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    d9d8:	00800074 	movhi	r2,1
    d9dc:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d9e0:	e0bffa17 	ldw	r2,-24(fp)
    d9e4:	10800a17 	ldw	r2,40(r2)
    d9e8:	10800044 	addi	r2,r2,1
    d9ec:	1081ffcc 	andi	r2,r2,2047
    d9f0:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
    d9f4:	e0bffa17 	ldw	r2,-24(fp)
    d9f8:	10c00b17 	ldw	r3,44(r2)
    d9fc:	e0bffd17 	ldw	r2,-12(fp)
    da00:	18801526 	beq	r3,r2,da58 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    da04:	e0bffb17 	ldw	r2,-20(fp)
    da08:	10800037 	ldwio	r2,0(r2)
    da0c:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    da10:	e0bff817 	ldw	r2,-32(fp)
    da14:	10a0000c 	andi	r2,r2,32768
    da18:	10001126 	beq	r2,zero,da60 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    da1c:	e0bffa17 	ldw	r2,-24(fp)
    da20:	10800a17 	ldw	r2,40(r2)
    da24:	e0fff817 	ldw	r3,-32(fp)
    da28:	1809883a 	mov	r4,r3
    da2c:	e0fffa17 	ldw	r3,-24(fp)
    da30:	1885883a 	add	r2,r3,r2
    da34:	10800e04 	addi	r2,r2,56
    da38:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    da3c:	e0bffa17 	ldw	r2,-24(fp)
    da40:	10800a17 	ldw	r2,40(r2)
    da44:	10800044 	addi	r2,r2,1
    da48:	10c1ffcc 	andi	r3,r2,2047
    da4c:	e0bffa17 	ldw	r2,-24(fp)
    da50:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    da54:	003fe206 	br	d9e0 <altera_avalon_jtag_uart_irq+0x58>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    da58:	0001883a 	nop
    da5c:	00000106 	br	da64 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    da60:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    da64:	e0bff817 	ldw	r2,-32(fp)
    da68:	10bfffec 	andhi	r2,r2,65535
    da6c:	10000f26 	beq	r2,zero,daac <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    da70:	e0bffa17 	ldw	r2,-24(fp)
    da74:	10c00817 	ldw	r3,32(r2)
    da78:	00bfff84 	movi	r2,-2
    da7c:	1886703a 	and	r3,r3,r2
    da80:	e0bffa17 	ldw	r2,-24(fp)
    da84:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    da88:	e0bffb17 	ldw	r2,-20(fp)
    da8c:	10800104 	addi	r2,r2,4
    da90:	1007883a 	mov	r3,r2
    da94:	e0bffa17 	ldw	r2,-24(fp)
    da98:	10800817 	ldw	r2,32(r2)
    da9c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    daa0:	e0bffb17 	ldw	r2,-20(fp)
    daa4:	10800104 	addi	r2,r2,4
    daa8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    daac:	e0bffc17 	ldw	r2,-16(fp)
    dab0:	1080800c 	andi	r2,r2,512
    dab4:	103fbe26 	beq	r2,zero,d9b0 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    dab8:	e0bffc17 	ldw	r2,-16(fp)
    dabc:	1004d43a 	srli	r2,r2,16
    dac0:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    dac4:	00001406 	br	db18 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    dac8:	e0bffb17 	ldw	r2,-20(fp)
    dacc:	e0fffa17 	ldw	r3,-24(fp)
    dad0:	18c00d17 	ldw	r3,52(r3)
    dad4:	e13ffa17 	ldw	r4,-24(fp)
    dad8:	20c7883a 	add	r3,r4,r3
    dadc:	18c20e04 	addi	r3,r3,2104
    dae0:	18c00003 	ldbu	r3,0(r3)
    dae4:	18c03fcc 	andi	r3,r3,255
    dae8:	18c0201c 	xori	r3,r3,128
    daec:	18ffe004 	addi	r3,r3,-128
    daf0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    daf4:	e0bffa17 	ldw	r2,-24(fp)
    daf8:	10800d17 	ldw	r2,52(r2)
    dafc:	10800044 	addi	r2,r2,1
    db00:	10c1ffcc 	andi	r3,r2,2047
    db04:	e0bffa17 	ldw	r2,-24(fp)
    db08:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    db0c:	e0bff917 	ldw	r2,-28(fp)
    db10:	10bfffc4 	addi	r2,r2,-1
    db14:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    db18:	e0bff917 	ldw	r2,-28(fp)
    db1c:	10000526 	beq	r2,zero,db34 <altera_avalon_jtag_uart_irq+0x1ac>
    db20:	e0bffa17 	ldw	r2,-24(fp)
    db24:	10c00d17 	ldw	r3,52(r2)
    db28:	e0bffa17 	ldw	r2,-24(fp)
    db2c:	10800c17 	ldw	r2,48(r2)
    db30:	18bfe51e 	bne	r3,r2,dac8 <altera_avalon_jtag_uart_irq+0x140>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    db34:	e0bff917 	ldw	r2,-28(fp)
    db38:	103f9d26 	beq	r2,zero,d9b0 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    db3c:	e0bffa17 	ldw	r2,-24(fp)
    db40:	10c00817 	ldw	r3,32(r2)
    db44:	00bfff44 	movi	r2,-3
    db48:	1886703a 	and	r3,r3,r2
    db4c:	e0bffa17 	ldw	r2,-24(fp)
    db50:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    db54:	e0bffa17 	ldw	r2,-24(fp)
    db58:	10800017 	ldw	r2,0(r2)
    db5c:	10800104 	addi	r2,r2,4
    db60:	1007883a 	mov	r3,r2
    db64:	e0bffa17 	ldw	r2,-24(fp)
    db68:	10800817 	ldw	r2,32(r2)
    db6c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    db70:	e0bffb17 	ldw	r2,-20(fp)
    db74:	10800104 	addi	r2,r2,4
    db78:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    db7c:	003f8c06 	br	d9b0 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    db80:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    db84:	0001883a 	nop
    db88:	e037883a 	mov	sp,fp
    db8c:	df000017 	ldw	fp,0(sp)
    db90:	dec00104 	addi	sp,sp,4
    db94:	f800283a 	ret

0000db98 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    db98:	defff804 	addi	sp,sp,-32
    db9c:	df000715 	stw	fp,28(sp)
    dba0:	df000704 	addi	fp,sp,28
    dba4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    dba8:	e0bffb17 	ldw	r2,-20(fp)
    dbac:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    dbb0:	e0bff917 	ldw	r2,-28(fp)
    dbb4:	10800017 	ldw	r2,0(r2)
    dbb8:	10800104 	addi	r2,r2,4
    dbbc:	10800037 	ldwio	r2,0(r2)
    dbc0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    dbc4:	e0bffa17 	ldw	r2,-24(fp)
    dbc8:	1081000c 	andi	r2,r2,1024
    dbcc:	10000b26 	beq	r2,zero,dbfc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    dbd0:	e0bff917 	ldw	r2,-28(fp)
    dbd4:	10800017 	ldw	r2,0(r2)
    dbd8:	10800104 	addi	r2,r2,4
    dbdc:	1007883a 	mov	r3,r2
    dbe0:	e0bff917 	ldw	r2,-28(fp)
    dbe4:	10800817 	ldw	r2,32(r2)
    dbe8:	10810014 	ori	r2,r2,1024
    dbec:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    dbf0:	e0bff917 	ldw	r2,-28(fp)
    dbf4:	10000915 	stw	zero,36(r2)
    dbf8:	00000a06 	br	dc24 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    dbfc:	e0bff917 	ldw	r2,-28(fp)
    dc00:	10c00917 	ldw	r3,36(r2)
    dc04:	00a00034 	movhi	r2,32768
    dc08:	10bfff04 	addi	r2,r2,-4
    dc0c:	10c00536 	bltu	r2,r3,dc24 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    dc10:	e0bff917 	ldw	r2,-28(fp)
    dc14:	10800917 	ldw	r2,36(r2)
    dc18:	10c00044 	addi	r3,r2,1
    dc1c:	e0bff917 	ldw	r2,-28(fp)
    dc20:	10c00915 	stw	r3,36(r2)
    dc24:	00800074 	movhi	r2,1
    dc28:	108c6e04 	addi	r2,r2,12728
    dc2c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    dc30:	e037883a 	mov	sp,fp
    dc34:	df000017 	ldw	fp,0(sp)
    dc38:	dec00104 	addi	sp,sp,4
    dc3c:	f800283a 	ret

0000dc40 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    dc40:	defffd04 	addi	sp,sp,-12
    dc44:	df000215 	stw	fp,8(sp)
    dc48:	df000204 	addi	fp,sp,8
    dc4c:	e13ffe15 	stw	r4,-8(fp)
    dc50:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    dc54:	00000506 	br	dc6c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    dc58:	e0bfff17 	ldw	r2,-4(fp)
    dc5c:	1090000c 	andi	r2,r2,16384
    dc60:	10000226 	beq	r2,zero,dc6c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    dc64:	00bffd44 	movi	r2,-11
    dc68:	00000b06 	br	dc98 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    dc6c:	e0bffe17 	ldw	r2,-8(fp)
    dc70:	10c00d17 	ldw	r3,52(r2)
    dc74:	e0bffe17 	ldw	r2,-8(fp)
    dc78:	10800c17 	ldw	r2,48(r2)
    dc7c:	18800526 	beq	r3,r2,dc94 <altera_avalon_jtag_uart_close+0x54>
    dc80:	e0bffe17 	ldw	r2,-8(fp)
    dc84:	10c00917 	ldw	r3,36(r2)
    dc88:	e0bffe17 	ldw	r2,-8(fp)
    dc8c:	10800117 	ldw	r2,4(r2)
    dc90:	18bff136 	bltu	r3,r2,dc58 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    dc94:	0005883a 	mov	r2,zero
}
    dc98:	e037883a 	mov	sp,fp
    dc9c:	df000017 	ldw	fp,0(sp)
    dca0:	dec00104 	addi	sp,sp,4
    dca4:	f800283a 	ret

0000dca8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    dca8:	defffa04 	addi	sp,sp,-24
    dcac:	df000515 	stw	fp,20(sp)
    dcb0:	df000504 	addi	fp,sp,20
    dcb4:	e13ffd15 	stw	r4,-12(fp)
    dcb8:	e17ffe15 	stw	r5,-8(fp)
    dcbc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    dcc0:	00bff9c4 	movi	r2,-25
    dcc4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    dcc8:	e0bffe17 	ldw	r2,-8(fp)
    dccc:	10da8060 	cmpeqi	r3,r2,27137
    dcd0:	1800031e 	bne	r3,zero,dce0 <altera_avalon_jtag_uart_ioctl+0x38>
    dcd4:	109a80a0 	cmpeqi	r2,r2,27138
    dcd8:	1000181e 	bne	r2,zero,dd3c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    dcdc:	00002906 	br	dd84 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    dce0:	e0bffd17 	ldw	r2,-12(fp)
    dce4:	10c00117 	ldw	r3,4(r2)
    dce8:	00a00034 	movhi	r2,32768
    dcec:	10bfffc4 	addi	r2,r2,-1
    dcf0:	18802126 	beq	r3,r2,dd78 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    dcf4:	e0bfff17 	ldw	r2,-4(fp)
    dcf8:	10800017 	ldw	r2,0(r2)
    dcfc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    dd00:	e0bffc17 	ldw	r2,-16(fp)
    dd04:	10800090 	cmplti	r2,r2,2
    dd08:	1000061e 	bne	r2,zero,dd24 <altera_avalon_jtag_uart_ioctl+0x7c>
    dd0c:	e0fffc17 	ldw	r3,-16(fp)
    dd10:	00a00034 	movhi	r2,32768
    dd14:	10bfffc4 	addi	r2,r2,-1
    dd18:	18800226 	beq	r3,r2,dd24 <altera_avalon_jtag_uart_ioctl+0x7c>
    dd1c:	e0bffc17 	ldw	r2,-16(fp)
    dd20:	00000206 	br	dd2c <altera_avalon_jtag_uart_ioctl+0x84>
    dd24:	00a00034 	movhi	r2,32768
    dd28:	10bfff84 	addi	r2,r2,-2
    dd2c:	e0fffd17 	ldw	r3,-12(fp)
    dd30:	18800115 	stw	r2,4(r3)
      rc = 0;
    dd34:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    dd38:	00000f06 	br	dd78 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    dd3c:	e0bffd17 	ldw	r2,-12(fp)
    dd40:	10c00117 	ldw	r3,4(r2)
    dd44:	00a00034 	movhi	r2,32768
    dd48:	10bfffc4 	addi	r2,r2,-1
    dd4c:	18800c26 	beq	r3,r2,dd80 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    dd50:	e0bffd17 	ldw	r2,-12(fp)
    dd54:	10c00917 	ldw	r3,36(r2)
    dd58:	e0bffd17 	ldw	r2,-12(fp)
    dd5c:	10800117 	ldw	r2,4(r2)
    dd60:	1885803a 	cmpltu	r2,r3,r2
    dd64:	10c03fcc 	andi	r3,r2,255
    dd68:	e0bfff17 	ldw	r2,-4(fp)
    dd6c:	10c00015 	stw	r3,0(r2)
      rc = 0;
    dd70:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    dd74:	00000206 	br	dd80 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    dd78:	0001883a 	nop
    dd7c:	00000106 	br	dd84 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    dd80:	0001883a 	nop

  default:
    break;
  }

  return rc;
    dd84:	e0bffb17 	ldw	r2,-20(fp)
}
    dd88:	e037883a 	mov	sp,fp
    dd8c:	df000017 	ldw	fp,0(sp)
    dd90:	dec00104 	addi	sp,sp,4
    dd94:	f800283a 	ret

0000dd98 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    dd98:	defff304 	addi	sp,sp,-52
    dd9c:	dfc00c15 	stw	ra,48(sp)
    dda0:	df000b15 	stw	fp,44(sp)
    dda4:	df000b04 	addi	fp,sp,44
    dda8:	e13ffc15 	stw	r4,-16(fp)
    ddac:	e17ffd15 	stw	r5,-12(fp)
    ddb0:	e1bffe15 	stw	r6,-8(fp)
    ddb4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    ddb8:	e0bffd17 	ldw	r2,-12(fp)
    ddbc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ddc0:	00004706 	br	dee0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    ddc4:	e0bffc17 	ldw	r2,-16(fp)
    ddc8:	10800a17 	ldw	r2,40(r2)
    ddcc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    ddd0:	e0bffc17 	ldw	r2,-16(fp)
    ddd4:	10800b17 	ldw	r2,44(r2)
    ddd8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    dddc:	e0fff717 	ldw	r3,-36(fp)
    dde0:	e0bff817 	ldw	r2,-32(fp)
    dde4:	18800536 	bltu	r3,r2,ddfc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    dde8:	e0fff717 	ldw	r3,-36(fp)
    ddec:	e0bff817 	ldw	r2,-32(fp)
    ddf0:	1885c83a 	sub	r2,r3,r2
    ddf4:	e0bff615 	stw	r2,-40(fp)
    ddf8:	00000406 	br	de0c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    ddfc:	00c20004 	movi	r3,2048
    de00:	e0bff817 	ldw	r2,-32(fp)
    de04:	1885c83a 	sub	r2,r3,r2
    de08:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    de0c:	e0bff617 	ldw	r2,-40(fp)
    de10:	10001e26 	beq	r2,zero,de8c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    de14:	e0fffe17 	ldw	r3,-8(fp)
    de18:	e0bff617 	ldw	r2,-40(fp)
    de1c:	1880022e 	bgeu	r3,r2,de28 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    de20:	e0bffe17 	ldw	r2,-8(fp)
    de24:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    de28:	e0bffc17 	ldw	r2,-16(fp)
    de2c:	10c00e04 	addi	r3,r2,56
    de30:	e0bff817 	ldw	r2,-32(fp)
    de34:	1885883a 	add	r2,r3,r2
    de38:	e1bff617 	ldw	r6,-40(fp)
    de3c:	100b883a 	mov	r5,r2
    de40:	e13ff517 	ldw	r4,-44(fp)
    de44:	0005e780 	call	5e78 <memcpy>
      ptr   += n;
    de48:	e0fff517 	ldw	r3,-44(fp)
    de4c:	e0bff617 	ldw	r2,-40(fp)
    de50:	1885883a 	add	r2,r3,r2
    de54:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    de58:	e0fffe17 	ldw	r3,-8(fp)
    de5c:	e0bff617 	ldw	r2,-40(fp)
    de60:	1885c83a 	sub	r2,r3,r2
    de64:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    de68:	e0fff817 	ldw	r3,-32(fp)
    de6c:	e0bff617 	ldw	r2,-40(fp)
    de70:	1885883a 	add	r2,r3,r2
    de74:	10c1ffcc 	andi	r3,r2,2047
    de78:	e0bffc17 	ldw	r2,-16(fp)
    de7c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    de80:	e0bffe17 	ldw	r2,-8(fp)
    de84:	00bfcf16 	blt	zero,r2,ddc4 <altera_avalon_jtag_uart_read+0x2c>
    de88:	00000106 	br	de90 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    de8c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    de90:	e0fff517 	ldw	r3,-44(fp)
    de94:	e0bffd17 	ldw	r2,-12(fp)
    de98:	1880141e 	bne	r3,r2,deec <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    de9c:	e0bfff17 	ldw	r2,-4(fp)
    dea0:	1090000c 	andi	r2,r2,16384
    dea4:	1000131e 	bne	r2,zero,def4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    dea8:	0001883a 	nop
    deac:	e0bffc17 	ldw	r2,-16(fp)
    deb0:	10c00a17 	ldw	r3,40(r2)
    deb4:	e0bff717 	ldw	r2,-36(fp)
    deb8:	1880051e 	bne	r3,r2,ded0 <altera_avalon_jtag_uart_read+0x138>
    debc:	e0bffc17 	ldw	r2,-16(fp)
    dec0:	10c00917 	ldw	r3,36(r2)
    dec4:	e0bffc17 	ldw	r2,-16(fp)
    dec8:	10800117 	ldw	r2,4(r2)
    decc:	18bff736 	bltu	r3,r2,deac <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    ded0:	e0bffc17 	ldw	r2,-16(fp)
    ded4:	10c00a17 	ldw	r3,40(r2)
    ded8:	e0bff717 	ldw	r2,-36(fp)
    dedc:	18800726 	beq	r3,r2,defc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    dee0:	e0bffe17 	ldw	r2,-8(fp)
    dee4:	00bfb716 	blt	zero,r2,ddc4 <altera_avalon_jtag_uart_read+0x2c>
    dee8:	00000506 	br	df00 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    deec:	0001883a 	nop
    def0:	00000306 	br	df00 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    def4:	0001883a 	nop
    def8:	00000106 	br	df00 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    defc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    df00:	e0fff517 	ldw	r3,-44(fp)
    df04:	e0bffd17 	ldw	r2,-12(fp)
    df08:	18801826 	beq	r3,r2,df6c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    df0c:	0005303a 	rdctl	r2,status
    df10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    df14:	e0fffb17 	ldw	r3,-20(fp)
    df18:	00bfff84 	movi	r2,-2
    df1c:	1884703a 	and	r2,r3,r2
    df20:	1001703a 	wrctl	status,r2
  
  return context;
    df24:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    df28:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    df2c:	e0bffc17 	ldw	r2,-16(fp)
    df30:	10800817 	ldw	r2,32(r2)
    df34:	10c00054 	ori	r3,r2,1
    df38:	e0bffc17 	ldw	r2,-16(fp)
    df3c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    df40:	e0bffc17 	ldw	r2,-16(fp)
    df44:	10800017 	ldw	r2,0(r2)
    df48:	10800104 	addi	r2,r2,4
    df4c:	1007883a 	mov	r3,r2
    df50:	e0bffc17 	ldw	r2,-16(fp)
    df54:	10800817 	ldw	r2,32(r2)
    df58:	18800035 	stwio	r2,0(r3)
    df5c:	e0bffa17 	ldw	r2,-24(fp)
    df60:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    df64:	e0bff917 	ldw	r2,-28(fp)
    df68:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    df6c:	e0fff517 	ldw	r3,-44(fp)
    df70:	e0bffd17 	ldw	r2,-12(fp)
    df74:	18800426 	beq	r3,r2,df88 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    df78:	e0fff517 	ldw	r3,-44(fp)
    df7c:	e0bffd17 	ldw	r2,-12(fp)
    df80:	1885c83a 	sub	r2,r3,r2
    df84:	00000606 	br	dfa0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    df88:	e0bfff17 	ldw	r2,-4(fp)
    df8c:	1090000c 	andi	r2,r2,16384
    df90:	10000226 	beq	r2,zero,df9c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    df94:	00bffd44 	movi	r2,-11
    df98:	00000106 	br	dfa0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    df9c:	00bffec4 	movi	r2,-5
}
    dfa0:	e037883a 	mov	sp,fp
    dfa4:	dfc00117 	ldw	ra,4(sp)
    dfa8:	df000017 	ldw	fp,0(sp)
    dfac:	dec00204 	addi	sp,sp,8
    dfb0:	f800283a 	ret

0000dfb4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    dfb4:	defff304 	addi	sp,sp,-52
    dfb8:	dfc00c15 	stw	ra,48(sp)
    dfbc:	df000b15 	stw	fp,44(sp)
    dfc0:	df000b04 	addi	fp,sp,44
    dfc4:	e13ffc15 	stw	r4,-16(fp)
    dfc8:	e17ffd15 	stw	r5,-12(fp)
    dfcc:	e1bffe15 	stw	r6,-8(fp)
    dfd0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    dfd4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    dfd8:	e0bffd17 	ldw	r2,-12(fp)
    dfdc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    dfe0:	00003706 	br	e0c0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    dfe4:	e0bffc17 	ldw	r2,-16(fp)
    dfe8:	10800c17 	ldw	r2,48(r2)
    dfec:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    dff0:	e0bffc17 	ldw	r2,-16(fp)
    dff4:	10800d17 	ldw	r2,52(r2)
    dff8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    dffc:	e0fff917 	ldw	r3,-28(fp)
    e000:	e0bff517 	ldw	r2,-44(fp)
    e004:	1880062e 	bgeu	r3,r2,e020 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    e008:	e0fff517 	ldw	r3,-44(fp)
    e00c:	e0bff917 	ldw	r2,-28(fp)
    e010:	1885c83a 	sub	r2,r3,r2
    e014:	10bfffc4 	addi	r2,r2,-1
    e018:	e0bff615 	stw	r2,-40(fp)
    e01c:	00000b06 	br	e04c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    e020:	e0bff517 	ldw	r2,-44(fp)
    e024:	10000526 	beq	r2,zero,e03c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    e028:	00c20004 	movi	r3,2048
    e02c:	e0bff917 	ldw	r2,-28(fp)
    e030:	1885c83a 	sub	r2,r3,r2
    e034:	e0bff615 	stw	r2,-40(fp)
    e038:	00000406 	br	e04c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    e03c:	00c1ffc4 	movi	r3,2047
    e040:	e0bff917 	ldw	r2,-28(fp)
    e044:	1885c83a 	sub	r2,r3,r2
    e048:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    e04c:	e0bff617 	ldw	r2,-40(fp)
    e050:	10001e26 	beq	r2,zero,e0cc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    e054:	e0fffe17 	ldw	r3,-8(fp)
    e058:	e0bff617 	ldw	r2,-40(fp)
    e05c:	1880022e 	bgeu	r3,r2,e068 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    e060:	e0bffe17 	ldw	r2,-8(fp)
    e064:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    e068:	e0bffc17 	ldw	r2,-16(fp)
    e06c:	10c20e04 	addi	r3,r2,2104
    e070:	e0bff917 	ldw	r2,-28(fp)
    e074:	1885883a 	add	r2,r3,r2
    e078:	e1bff617 	ldw	r6,-40(fp)
    e07c:	e17ffd17 	ldw	r5,-12(fp)
    e080:	1009883a 	mov	r4,r2
    e084:	0005e780 	call	5e78 <memcpy>
      ptr   += n;
    e088:	e0fffd17 	ldw	r3,-12(fp)
    e08c:	e0bff617 	ldw	r2,-40(fp)
    e090:	1885883a 	add	r2,r3,r2
    e094:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    e098:	e0fffe17 	ldw	r3,-8(fp)
    e09c:	e0bff617 	ldw	r2,-40(fp)
    e0a0:	1885c83a 	sub	r2,r3,r2
    e0a4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e0a8:	e0fff917 	ldw	r3,-28(fp)
    e0ac:	e0bff617 	ldw	r2,-40(fp)
    e0b0:	1885883a 	add	r2,r3,r2
    e0b4:	10c1ffcc 	andi	r3,r2,2047
    e0b8:	e0bffc17 	ldw	r2,-16(fp)
    e0bc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    e0c0:	e0bffe17 	ldw	r2,-8(fp)
    e0c4:	00bfc716 	blt	zero,r2,dfe4 <altera_avalon_jtag_uart_write+0x30>
    e0c8:	00000106 	br	e0d0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    e0cc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e0d0:	0005303a 	rdctl	r2,status
    e0d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e0d8:	e0fffb17 	ldw	r3,-20(fp)
    e0dc:	00bfff84 	movi	r2,-2
    e0e0:	1884703a 	and	r2,r3,r2
    e0e4:	1001703a 	wrctl	status,r2
  
  return context;
    e0e8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    e0ec:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    e0f0:	e0bffc17 	ldw	r2,-16(fp)
    e0f4:	10800817 	ldw	r2,32(r2)
    e0f8:	10c00094 	ori	r3,r2,2
    e0fc:	e0bffc17 	ldw	r2,-16(fp)
    e100:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e104:	e0bffc17 	ldw	r2,-16(fp)
    e108:	10800017 	ldw	r2,0(r2)
    e10c:	10800104 	addi	r2,r2,4
    e110:	1007883a 	mov	r3,r2
    e114:	e0bffc17 	ldw	r2,-16(fp)
    e118:	10800817 	ldw	r2,32(r2)
    e11c:	18800035 	stwio	r2,0(r3)
    e120:	e0bffa17 	ldw	r2,-24(fp)
    e124:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e128:	e0bff817 	ldw	r2,-32(fp)
    e12c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    e130:	e0bffe17 	ldw	r2,-8(fp)
    e134:	0080100e 	bge	zero,r2,e178 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    e138:	e0bfff17 	ldw	r2,-4(fp)
    e13c:	1090000c 	andi	r2,r2,16384
    e140:	1000101e 	bne	r2,zero,e184 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    e144:	0001883a 	nop
    e148:	e0bffc17 	ldw	r2,-16(fp)
    e14c:	10c00d17 	ldw	r3,52(r2)
    e150:	e0bff517 	ldw	r2,-44(fp)
    e154:	1880051e 	bne	r3,r2,e16c <altera_avalon_jtag_uart_write+0x1b8>
    e158:	e0bffc17 	ldw	r2,-16(fp)
    e15c:	10c00917 	ldw	r3,36(r2)
    e160:	e0bffc17 	ldw	r2,-16(fp)
    e164:	10800117 	ldw	r2,4(r2)
    e168:	18bff736 	bltu	r3,r2,e148 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    e16c:	e0bffc17 	ldw	r2,-16(fp)
    e170:	10800917 	ldw	r2,36(r2)
    e174:	1000051e 	bne	r2,zero,e18c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    e178:	e0bffe17 	ldw	r2,-8(fp)
    e17c:	00bfd016 	blt	zero,r2,e0c0 <altera_avalon_jtag_uart_write+0x10c>
    e180:	00000306 	br	e190 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    e184:	0001883a 	nop
    e188:	00000106 	br	e190 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    e18c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    e190:	e0fffd17 	ldw	r3,-12(fp)
    e194:	e0bff717 	ldw	r2,-36(fp)
    e198:	18800426 	beq	r3,r2,e1ac <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    e19c:	e0fffd17 	ldw	r3,-12(fp)
    e1a0:	e0bff717 	ldw	r2,-36(fp)
    e1a4:	1885c83a 	sub	r2,r3,r2
    e1a8:	00000606 	br	e1c4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    e1ac:	e0bfff17 	ldw	r2,-4(fp)
    e1b0:	1090000c 	andi	r2,r2,16384
    e1b4:	10000226 	beq	r2,zero,e1c0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    e1b8:	00bffd44 	movi	r2,-11
    e1bc:	00000106 	br	e1c4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    e1c0:	00bffec4 	movi	r2,-5
}
    e1c4:	e037883a 	mov	sp,fp
    e1c8:	dfc00117 	ldw	ra,4(sp)
    e1cc:	df000017 	ldw	fp,0(sp)
    e1d0:	dec00204 	addi	sp,sp,8
    e1d4:	f800283a 	ret

0000e1d8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    e1d8:	defff904 	addi	sp,sp,-28
    e1dc:	dfc00615 	stw	ra,24(sp)
    e1e0:	df000515 	stw	fp,20(sp)
    e1e4:	df000504 	addi	fp,sp,20
    e1e8:	e13ffe15 	stw	r4,-8(fp)
    e1ec:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    e1f0:	0007883a 	mov	r3,zero
    e1f4:	e0bffe17 	ldw	r2,-8(fp)
    e1f8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    e1fc:	e0bffe17 	ldw	r2,-8(fp)
    e200:	10800104 	addi	r2,r2,4
    e204:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e208:	0005303a 	rdctl	r2,status
    e20c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e210:	e0fffc17 	ldw	r3,-16(fp)
    e214:	00bfff84 	movi	r2,-2
    e218:	1884703a 	and	r2,r3,r2
    e21c:	1001703a 	wrctl	status,r2
  
  return context;
    e220:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    e224:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
    e228:	000f06c0 	call	f06c <alt_tick>
    e22c:	e0bffb17 	ldw	r2,-20(fp)
    e230:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e234:	e0bffd17 	ldw	r2,-12(fp)
    e238:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    e23c:	0001883a 	nop
    e240:	e037883a 	mov	sp,fp
    e244:	dfc00117 	ldw	ra,4(sp)
    e248:	df000017 	ldw	fp,0(sp)
    e24c:	dec00204 	addi	sp,sp,8
    e250:	f800283a 	ret

0000e254 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    e254:	defff904 	addi	sp,sp,-28
    e258:	dfc00615 	stw	ra,24(sp)
    e25c:	df000515 	stw	fp,20(sp)
    e260:	df000504 	addi	fp,sp,20
    e264:	e13ffc15 	stw	r4,-16(fp)
    e268:	e17ffd15 	stw	r5,-12(fp)
    e26c:	e1bffe15 	stw	r6,-8(fp)
    e270:	e1ffff15 	stw	r7,-4(fp)
    e274:	e0bfff17 	ldw	r2,-4(fp)
    e278:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    e27c:	00800074 	movhi	r2,1
    e280:	108c6e04 	addi	r2,r2,12728
    e284:	10800017 	ldw	r2,0(r2)
    e288:	1000041e 	bne	r2,zero,e29c <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    e28c:	00800074 	movhi	r2,1
    e290:	108c6e04 	addi	r2,r2,12728
    e294:	e0fffb17 	ldw	r3,-20(fp)
    e298:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    e29c:	e0bffc17 	ldw	r2,-16(fp)
    e2a0:	10800104 	addi	r2,r2,4
    e2a4:	00c001c4 	movi	r3,7
    e2a8:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    e2ac:	01800074 	movhi	r6,1
    e2b0:	31b87604 	addi	r6,r6,-7720
    e2b4:	e17ffc17 	ldw	r5,-16(fp)
    e2b8:	e13ffe17 	ldw	r4,-8(fp)
    e2bc:	000ebac0 	call	ebac <alt_irq_register>
#endif  
}
    e2c0:	0001883a 	nop
    e2c4:	e037883a 	mov	sp,fp
    e2c8:	dfc00117 	ldw	ra,4(sp)
    e2cc:	df000017 	ldw	fp,0(sp)
    e2d0:	dec00204 	addi	sp,sp,8
    e2d4:	f800283a 	ret

0000e2d8 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
    e2d8:	defffd04 	addi	sp,sp,-12
    e2dc:	df000215 	stw	fp,8(sp)
    e2e0:	df000204 	addi	fp,sp,8
    e2e4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    e2e8:	e0bfff17 	ldw	r2,-4(fp)
    e2ec:	10800a17 	ldw	r2,40(r2)
    e2f0:	10800104 	addi	r2,r2,4
    e2f4:	10800037 	ldwio	r2,0(r2)
    e2f8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    e2fc:	e0bffe17 	ldw	r2,-8(fp)
    e300:	10800054 	ori	r2,r2,1
    e304:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    e308:	e0bfff17 	ldw	r2,-4(fp)
    e30c:	10800a17 	ldw	r2,40(r2)
    e310:	10800104 	addi	r2,r2,4
    e314:	1007883a 	mov	r3,r2
    e318:	e0bffe17 	ldw	r2,-8(fp)
    e31c:	18800035 	stwio	r2,0(r3)
}
    e320:	0001883a 	nop
    e324:	e037883a 	mov	sp,fp
    e328:	df000017 	ldw	fp,0(sp)
    e32c:	dec00104 	addi	sp,sp,4
    e330:	f800283a 	ret

0000e334 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
    e334:	defffd04 	addi	sp,sp,-12
    e338:	df000215 	stw	fp,8(sp)
    e33c:	df000204 	addi	fp,sp,8
    e340:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    e344:	e0bfff17 	ldw	r2,-4(fp)
    e348:	10800a17 	ldw	r2,40(r2)
    e34c:	10800104 	addi	r2,r2,4
    e350:	10800037 	ldwio	r2,0(r2)
    e354:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    e358:	e0fffe17 	ldw	r3,-8(fp)
    e35c:	00bfff84 	movi	r2,-2
    e360:	1884703a 	and	r2,r3,r2
    e364:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    e368:	e0bfff17 	ldw	r2,-4(fp)
    e36c:	10800a17 	ldw	r2,40(r2)
    e370:	10800104 	addi	r2,r2,4
    e374:	1007883a 	mov	r3,r2
    e378:	e0bffe17 	ldw	r2,-8(fp)
    e37c:	18800035 	stwio	r2,0(r3)
}
    e380:	0001883a 	nop
    e384:	e037883a 	mov	sp,fp
    e388:	df000017 	ldw	fp,0(sp)
    e38c:	dec00104 	addi	sp,sp,4
    e390:	f800283a 	ret

0000e394 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
    e394:	defffd04 	addi	sp,sp,-12
    e398:	df000215 	stw	fp,8(sp)
    e39c:	df000204 	addi	fp,sp,8
    e3a0:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    e3a4:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    e3a8:	e0bfff17 	ldw	r2,-4(fp)
    e3ac:	10800a17 	ldw	r2,40(r2)
    e3b0:	10800084 	addi	r2,r2,2
    e3b4:	1080002b 	ldhuio	r2,0(r2)
    e3b8:	10bfffcc 	andi	r2,r2,65535
    e3bc:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
    e3c0:	e0bffe0b 	ldhu	r2,-8(fp)
}
    e3c4:	e037883a 	mov	sp,fp
    e3c8:	df000017 	ldw	fp,0(sp)
    e3cc:	dec00104 	addi	sp,sp,4
    e3d0:	f800283a 	ret

0000e3d4 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
    e3d4:	defffd04 	addi	sp,sp,-12
    e3d8:	df000215 	stw	fp,8(sp)
    e3dc:	df000204 	addi	fp,sp,8
    e3e0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    e3e4:	e0bfff17 	ldw	r2,-4(fp)
    e3e8:	10800a17 	ldw	r2,40(r2)
    e3ec:	10800104 	addi	r2,r2,4
    e3f0:	10800037 	ldwio	r2,0(r2)
    e3f4:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
    e3f8:	e0bffe17 	ldw	r2,-8(fp)
    e3fc:	1004d43a 	srli	r2,r2,16
}
    e400:	e037883a 	mov	sp,fp
    e404:	df000017 	ldw	fp,0(sp)
    e408:	dec00104 	addi	sp,sp,4
    e40c:	f800283a 	ret

0000e410 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
    e410:	defffd04 	addi	sp,sp,-12
    e414:	df000215 	stw	fp,8(sp)
    e418:	df000204 	addi	fp,sp,8
    e41c:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    e420:	e0bfff17 	ldw	r2,-4(fp)
    e424:	1080800c 	andi	r2,r2,512
    e428:	1004d27a 	srli	r2,r2,9
    e42c:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
    e430:	e0bffe17 	ldw	r2,-8(fp)
    e434:	10000226 	beq	r2,zero,e440 <alt_up_rs232_check_parity+0x30>
    e438:	00bfffc4 	movi	r2,-1
    e43c:	00000106 	br	e444 <alt_up_rs232_check_parity+0x34>
    e440:	0005883a 	mov	r2,zero
}
    e444:	e037883a 	mov	sp,fp
    e448:	df000017 	ldw	fp,0(sp)
    e44c:	dec00104 	addi	sp,sp,4
    e450:	f800283a 	ret

0000e454 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
    e454:	defffd04 	addi	sp,sp,-12
    e458:	df000215 	stw	fp,8(sp)
    e45c:	df000204 	addi	fp,sp,8
    e460:	e13ffe15 	stw	r4,-8(fp)
    e464:	2805883a 	mov	r2,r5
    e468:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    e46c:	e0bffe17 	ldw	r2,-8(fp)
    e470:	10800a17 	ldw	r2,40(r2)
    e474:	1007883a 	mov	r3,r2
    e478:	e0bfff03 	ldbu	r2,-4(fp)
    e47c:	18800035 	stwio	r2,0(r3)
	return 0;
    e480:	0005883a 	mov	r2,zero
}
    e484:	e037883a 	mov	sp,fp
    e488:	df000017 	ldw	fp,0(sp)
    e48c:	dec00104 	addi	sp,sp,4
    e490:	f800283a 	ret

0000e494 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    e494:	defffa04 	addi	sp,sp,-24
    e498:	dfc00515 	stw	ra,20(sp)
    e49c:	df000415 	stw	fp,16(sp)
    e4a0:	df000404 	addi	fp,sp,16
    e4a4:	e13ffd15 	stw	r4,-12(fp)
    e4a8:	e17ffe15 	stw	r5,-8(fp)
    e4ac:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    e4b0:	e0bffd17 	ldw	r2,-12(fp)
    e4b4:	10800a17 	ldw	r2,40(r2)
    e4b8:	10800037 	ldwio	r2,0(r2)
    e4bc:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    e4c0:	e0bffc17 	ldw	r2,-16(fp)
    e4c4:	1007883a 	mov	r3,r2
    e4c8:	e0bffe17 	ldw	r2,-8(fp)
    e4cc:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    e4d0:	e13ffc17 	ldw	r4,-16(fp)
    e4d4:	000e4100 	call	e410 <alt_up_rs232_check_parity>
    e4d8:	1007883a 	mov	r3,r2
    e4dc:	e0bfff17 	ldw	r2,-4(fp)
    e4e0:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    e4e4:	e0bffc17 	ldw	r2,-16(fp)
    e4e8:	10a0000c 	andi	r2,r2,32768
    e4ec:	1004d3fa 	srli	r2,r2,15
    e4f0:	10bfffc4 	addi	r2,r2,-1
}
    e4f4:	e037883a 	mov	sp,fp
    e4f8:	dfc00117 	ldw	ra,4(sp)
    e4fc:	df000017 	ldw	fp,0(sp)
    e500:	dec00204 	addi	sp,sp,8
    e504:	f800283a 	ret

0000e508 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    e508:	defff804 	addi	sp,sp,-32
    e50c:	dfc00715 	stw	ra,28(sp)
    e510:	df000615 	stw	fp,24(sp)
    e514:	df000604 	addi	fp,sp,24
    e518:	e13ffd15 	stw	r4,-12(fp)
    e51c:	e17ffe15 	stw	r5,-8(fp)
    e520:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    e524:	e0bffd17 	ldw	r2,-12(fp)
    e528:	10800017 	ldw	r2,0(r2)
    e52c:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    e530:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    e534:	00000c06 	br	e568 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
    e538:	e0bffe17 	ldw	r2,-8(fp)
    e53c:	10c00044 	addi	r3,r2,1
    e540:	e0fffe15 	stw	r3,-8(fp)
    e544:	e0fffc04 	addi	r3,fp,-16
    e548:	180d883a 	mov	r6,r3
    e54c:	100b883a 	mov	r5,r2
    e550:	e13ffb17 	ldw	r4,-20(fp)
    e554:	000e4940 	call	e494 <alt_up_rs232_read_data>
    e558:	1000081e 	bne	r2,zero,e57c <alt_up_rs232_read_fd+0x74>
			count++;
    e55c:	e0bffa17 	ldw	r2,-24(fp)
    e560:	10800044 	addi	r2,r2,1
    e564:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    e568:	e0bfff17 	ldw	r2,-4(fp)
    e56c:	10ffffc4 	addi	r3,r2,-1
    e570:	e0ffff15 	stw	r3,-4(fp)
    e574:	103ff01e 	bne	r2,zero,e538 <alt_up_rs232_read_fd+0x30>
    e578:	00000106 	br	e580 <alt_up_rs232_read_fd+0x78>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
    e57c:	0001883a 	nop
	}
	return count;
    e580:	e0bffa17 	ldw	r2,-24(fp)
}
    e584:	e037883a 	mov	sp,fp
    e588:	dfc00117 	ldw	ra,4(sp)
    e58c:	df000017 	ldw	fp,0(sp)
    e590:	dec00204 	addi	sp,sp,8
    e594:	f800283a 	ret

0000e598 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    e598:	defff904 	addi	sp,sp,-28
    e59c:	dfc00615 	stw	ra,24(sp)
    e5a0:	df000515 	stw	fp,20(sp)
    e5a4:	df000504 	addi	fp,sp,20
    e5a8:	e13ffd15 	stw	r4,-12(fp)
    e5ac:	e17ffe15 	stw	r5,-8(fp)
    e5b0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    e5b4:	e0bffd17 	ldw	r2,-12(fp)
    e5b8:	10800017 	ldw	r2,0(r2)
    e5bc:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    e5c0:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    e5c4:	00000d06 	br	e5fc <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    e5c8:	e0bffe17 	ldw	r2,-8(fp)
    e5cc:	10800003 	ldbu	r2,0(r2)
    e5d0:	10803fcc 	andi	r2,r2,255
    e5d4:	100b883a 	mov	r5,r2
    e5d8:	e13ffc17 	ldw	r4,-16(fp)
    e5dc:	000e4540 	call	e454 <alt_up_rs232_write_data>
    e5e0:	10000b1e 	bne	r2,zero,e610 <alt_up_rs232_write_fd+0x78>
		{
			count++;
    e5e4:	e0bffb17 	ldw	r2,-20(fp)
    e5e8:	10800044 	addi	r2,r2,1
    e5ec:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
    e5f0:	e0bffe17 	ldw	r2,-8(fp)
    e5f4:	10800044 	addi	r2,r2,1
    e5f8:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    e5fc:	e0bfff17 	ldw	r2,-4(fp)
    e600:	10ffffc4 	addi	r3,r2,-1
    e604:	e0ffff15 	stw	r3,-4(fp)
    e608:	103fef1e 	bne	r2,zero,e5c8 <alt_up_rs232_write_fd+0x30>
    e60c:	00000106 	br	e614 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
			ptr++;
		}
		else
			break;
    e610:	0001883a 	nop
	}
	return count;
    e614:	e0bffb17 	ldw	r2,-20(fp)
}
    e618:	e037883a 	mov	sp,fp
    e61c:	dfc00117 	ldw	ra,4(sp)
    e620:	df000017 	ldw	fp,0(sp)
    e624:	dec00204 	addi	sp,sp,8
    e628:	f800283a 	ret

0000e62c <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    e62c:	defffc04 	addi	sp,sp,-16
    e630:	dfc00315 	stw	ra,12(sp)
    e634:	df000215 	stw	fp,8(sp)
    e638:	df000204 	addi	fp,sp,8
    e63c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    e640:	01400074 	movhi	r5,1
    e644:	29459504 	addi	r5,r5,5716
    e648:	e13fff17 	ldw	r4,-4(fp)
    e64c:	000e9a80 	call	e9a8 <alt_find_dev>
    e650:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    e654:	e0bffe17 	ldw	r2,-8(fp)
}
    e658:	e037883a 	mov	sp,fp
    e65c:	dfc00117 	ldw	ra,4(sp)
    e660:	df000017 	ldw	fp,0(sp)
    e664:	dec00204 	addi	sp,sp,8
    e668:	f800283a 	ret

0000e66c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    e66c:	defff504 	addi	sp,sp,-44
    e670:	df000a15 	stw	fp,40(sp)
    e674:	df000a04 	addi	fp,sp,40
    e678:	e13ffc15 	stw	r4,-16(fp)
    e67c:	e17ffd15 	stw	r5,-12(fp)
    e680:	e1bffe15 	stw	r6,-8(fp)
    e684:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    e688:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    e68c:	00800074 	movhi	r2,1
    e690:	108c6e04 	addi	r2,r2,12728
    e694:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    e698:	10003f26 	beq	r2,zero,e798 <alt_alarm_start+0x12c>
  {
    if (alarm)
    e69c:	e0bffc17 	ldw	r2,-16(fp)
    e6a0:	10003b26 	beq	r2,zero,e790 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    e6a4:	e0bffc17 	ldw	r2,-16(fp)
    e6a8:	e0fffe17 	ldw	r3,-8(fp)
    e6ac:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    e6b0:	e0bffc17 	ldw	r2,-16(fp)
    e6b4:	e0ffff17 	ldw	r3,-4(fp)
    e6b8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e6bc:	0005303a 	rdctl	r2,status
    e6c0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e6c4:	e0fff917 	ldw	r3,-28(fp)
    e6c8:	00bfff84 	movi	r2,-2
    e6cc:	1884703a 	and	r2,r3,r2
    e6d0:	1001703a 	wrctl	status,r2
  
  return context;
    e6d4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    e6d8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    e6dc:	00800074 	movhi	r2,1
    e6e0:	108c6f04 	addi	r2,r2,12732
    e6e4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    e6e8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    e6ec:	e0fffd17 	ldw	r3,-12(fp)
    e6f0:	e0bff617 	ldw	r2,-40(fp)
    e6f4:	1885883a 	add	r2,r3,r2
    e6f8:	10c00044 	addi	r3,r2,1
    e6fc:	e0bffc17 	ldw	r2,-16(fp)
    e700:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    e704:	e0bffc17 	ldw	r2,-16(fp)
    e708:	10c00217 	ldw	r3,8(r2)
    e70c:	e0bff617 	ldw	r2,-40(fp)
    e710:	1880042e 	bgeu	r3,r2,e724 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    e714:	e0bffc17 	ldw	r2,-16(fp)
    e718:	00c00044 	movi	r3,1
    e71c:	10c00405 	stb	r3,16(r2)
    e720:	00000206 	br	e72c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    e724:	e0bffc17 	ldw	r2,-16(fp)
    e728:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    e72c:	e0fffc17 	ldw	r3,-16(fp)
    e730:	00800074 	movhi	r2,1
    e734:	10859b04 	addi	r2,r2,5740
    e738:	e0bffa15 	stw	r2,-24(fp)
    e73c:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    e740:	e0bffb17 	ldw	r2,-20(fp)
    e744:	e0fffa17 	ldw	r3,-24(fp)
    e748:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    e74c:	e0bffa17 	ldw	r2,-24(fp)
    e750:	10c00017 	ldw	r3,0(r2)
    e754:	e0bffb17 	ldw	r2,-20(fp)
    e758:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    e75c:	e0bffa17 	ldw	r2,-24(fp)
    e760:	10800017 	ldw	r2,0(r2)
    e764:	e0fffb17 	ldw	r3,-20(fp)
    e768:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    e76c:	e0bffa17 	ldw	r2,-24(fp)
    e770:	e0fffb17 	ldw	r3,-20(fp)
    e774:	10c00015 	stw	r3,0(r2)
    e778:	e0bff817 	ldw	r2,-32(fp)
    e77c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e780:	e0bff717 	ldw	r2,-36(fp)
    e784:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    e788:	0005883a 	mov	r2,zero
    e78c:	00000306 	br	e79c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    e790:	00bffa84 	movi	r2,-22
    e794:	00000106 	br	e79c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    e798:	00bfde84 	movi	r2,-134
  }
}
    e79c:	e037883a 	mov	sp,fp
    e7a0:	df000017 	ldw	fp,0(sp)
    e7a4:	dec00104 	addi	sp,sp,4
    e7a8:	f800283a 	ret

0000e7ac <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    e7ac:	defffe04 	addi	sp,sp,-8
    e7b0:	df000115 	stw	fp,4(sp)
    e7b4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    e7b8:	e03fff15 	stw	zero,-4(fp)
    e7bc:	00000506 	br	e7d4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    e7c0:	e0bfff17 	ldw	r2,-4(fp)
    e7c4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    e7c8:	e0bfff17 	ldw	r2,-4(fp)
    e7cc:	10800804 	addi	r2,r2,32
    e7d0:	e0bfff15 	stw	r2,-4(fp)
    e7d4:	e0bfff17 	ldw	r2,-4(fp)
    e7d8:	10820030 	cmpltui	r2,r2,2048
    e7dc:	103ff81e 	bne	r2,zero,e7c0 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    e7e0:	0001883a 	nop
    e7e4:	e037883a 	mov	sp,fp
    e7e8:	df000017 	ldw	fp,0(sp)
    e7ec:	dec00104 	addi	sp,sp,4
    e7f0:	f800283a 	ret

0000e7f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e7f4:	defffe04 	addi	sp,sp,-8
    e7f8:	dfc00115 	stw	ra,4(sp)
    e7fc:	df000015 	stw	fp,0(sp)
    e800:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e804:	00800074 	movhi	r2,1
    e808:	10859804 	addi	r2,r2,5728
    e80c:	10800017 	ldw	r2,0(r2)
    e810:	10000526 	beq	r2,zero,e828 <alt_get_errno+0x34>
    e814:	00800074 	movhi	r2,1
    e818:	10859804 	addi	r2,r2,5728
    e81c:	10800017 	ldw	r2,0(r2)
    e820:	103ee83a 	callr	r2
    e824:	00000206 	br	e830 <alt_get_errno+0x3c>
    e828:	00800074 	movhi	r2,1
    e82c:	108c6904 	addi	r2,r2,12708
}
    e830:	e037883a 	mov	sp,fp
    e834:	dfc00117 	ldw	ra,4(sp)
    e838:	df000017 	ldw	fp,0(sp)
    e83c:	dec00204 	addi	sp,sp,8
    e840:	f800283a 	ret

0000e844 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    e844:	defffa04 	addi	sp,sp,-24
    e848:	dfc00515 	stw	ra,20(sp)
    e84c:	df000415 	stw	fp,16(sp)
    e850:	df000404 	addi	fp,sp,16
    e854:	e13ffe15 	stw	r4,-8(fp)
    e858:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    e85c:	e0bffe17 	ldw	r2,-8(fp)
    e860:	10000326 	beq	r2,zero,e870 <alt_dev_llist_insert+0x2c>
    e864:	e0bffe17 	ldw	r2,-8(fp)
    e868:	10800217 	ldw	r2,8(r2)
    e86c:	1000061e 	bne	r2,zero,e888 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    e870:	000e7f40 	call	e7f4 <alt_get_errno>
    e874:	1007883a 	mov	r3,r2
    e878:	00800584 	movi	r2,22
    e87c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    e880:	00bffa84 	movi	r2,-22
    e884:	00001306 	br	e8d4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    e888:	e0bffe17 	ldw	r2,-8(fp)
    e88c:	e0ffff17 	ldw	r3,-4(fp)
    e890:	e0fffc15 	stw	r3,-16(fp)
    e894:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    e898:	e0bffd17 	ldw	r2,-12(fp)
    e89c:	e0fffc17 	ldw	r3,-16(fp)
    e8a0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    e8a4:	e0bffc17 	ldw	r2,-16(fp)
    e8a8:	10c00017 	ldw	r3,0(r2)
    e8ac:	e0bffd17 	ldw	r2,-12(fp)
    e8b0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    e8b4:	e0bffc17 	ldw	r2,-16(fp)
    e8b8:	10800017 	ldw	r2,0(r2)
    e8bc:	e0fffd17 	ldw	r3,-12(fp)
    e8c0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    e8c4:	e0bffc17 	ldw	r2,-16(fp)
    e8c8:	e0fffd17 	ldw	r3,-12(fp)
    e8cc:	10c00015 	stw	r3,0(r2)

  return 0;  
    e8d0:	0005883a 	mov	r2,zero
}
    e8d4:	e037883a 	mov	sp,fp
    e8d8:	dfc00117 	ldw	ra,4(sp)
    e8dc:	df000017 	ldw	fp,0(sp)
    e8e0:	dec00204 	addi	sp,sp,8
    e8e4:	f800283a 	ret

0000e8e8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    e8e8:	defffd04 	addi	sp,sp,-12
    e8ec:	dfc00215 	stw	ra,8(sp)
    e8f0:	df000115 	stw	fp,4(sp)
    e8f4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    e8f8:	00800074 	movhi	r2,1
    e8fc:	10be0704 	addi	r2,r2,-2020
    e900:	e0bfff15 	stw	r2,-4(fp)
    e904:	00000606 	br	e920 <_do_ctors+0x38>
        (*ctor) (); 
    e908:	e0bfff17 	ldw	r2,-4(fp)
    e90c:	10800017 	ldw	r2,0(r2)
    e910:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    e914:	e0bfff17 	ldw	r2,-4(fp)
    e918:	10bfff04 	addi	r2,r2,-4
    e91c:	e0bfff15 	stw	r2,-4(fp)
    e920:	e0ffff17 	ldw	r3,-4(fp)
    e924:	00800074 	movhi	r2,1
    e928:	10be0804 	addi	r2,r2,-2016
    e92c:	18bff62e 	bgeu	r3,r2,e908 <_do_ctors+0x20>
        (*ctor) (); 
}
    e930:	0001883a 	nop
    e934:	e037883a 	mov	sp,fp
    e938:	dfc00117 	ldw	ra,4(sp)
    e93c:	df000017 	ldw	fp,0(sp)
    e940:	dec00204 	addi	sp,sp,8
    e944:	f800283a 	ret

0000e948 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    e948:	defffd04 	addi	sp,sp,-12
    e94c:	dfc00215 	stw	ra,8(sp)
    e950:	df000115 	stw	fp,4(sp)
    e954:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    e958:	00800074 	movhi	r2,1
    e95c:	10be0704 	addi	r2,r2,-2020
    e960:	e0bfff15 	stw	r2,-4(fp)
    e964:	00000606 	br	e980 <_do_dtors+0x38>
        (*dtor) (); 
    e968:	e0bfff17 	ldw	r2,-4(fp)
    e96c:	10800017 	ldw	r2,0(r2)
    e970:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    e974:	e0bfff17 	ldw	r2,-4(fp)
    e978:	10bfff04 	addi	r2,r2,-4
    e97c:	e0bfff15 	stw	r2,-4(fp)
    e980:	e0ffff17 	ldw	r3,-4(fp)
    e984:	00800074 	movhi	r2,1
    e988:	10be0804 	addi	r2,r2,-2016
    e98c:	18bff62e 	bgeu	r3,r2,e968 <_do_dtors+0x20>
        (*dtor) (); 
}
    e990:	0001883a 	nop
    e994:	e037883a 	mov	sp,fp
    e998:	dfc00117 	ldw	ra,4(sp)
    e99c:	df000017 	ldw	fp,0(sp)
    e9a0:	dec00204 	addi	sp,sp,8
    e9a4:	f800283a 	ret

0000e9a8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    e9a8:	defffa04 	addi	sp,sp,-24
    e9ac:	dfc00515 	stw	ra,20(sp)
    e9b0:	df000415 	stw	fp,16(sp)
    e9b4:	df000404 	addi	fp,sp,16
    e9b8:	e13ffe15 	stw	r4,-8(fp)
    e9bc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    e9c0:	e0bfff17 	ldw	r2,-4(fp)
    e9c4:	10800017 	ldw	r2,0(r2)
    e9c8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    e9cc:	e13ffe17 	ldw	r4,-8(fp)
    e9d0:	00004ec0 	call	4ec <strlen>
    e9d4:	10800044 	addi	r2,r2,1
    e9d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    e9dc:	00000d06 	br	ea14 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    e9e0:	e0bffc17 	ldw	r2,-16(fp)
    e9e4:	10800217 	ldw	r2,8(r2)
    e9e8:	e0fffd17 	ldw	r3,-12(fp)
    e9ec:	180d883a 	mov	r6,r3
    e9f0:	e17ffe17 	ldw	r5,-8(fp)
    e9f4:	1009883a 	mov	r4,r2
    e9f8:	000f4d80 	call	f4d8 <memcmp>
    e9fc:	1000021e 	bne	r2,zero,ea08 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    ea00:	e0bffc17 	ldw	r2,-16(fp)
    ea04:	00000706 	br	ea24 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    ea08:	e0bffc17 	ldw	r2,-16(fp)
    ea0c:	10800017 	ldw	r2,0(r2)
    ea10:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    ea14:	e0fffc17 	ldw	r3,-16(fp)
    ea18:	e0bfff17 	ldw	r2,-4(fp)
    ea1c:	18bff01e 	bne	r3,r2,e9e0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    ea20:	0005883a 	mov	r2,zero
}
    ea24:	e037883a 	mov	sp,fp
    ea28:	dfc00117 	ldw	ra,4(sp)
    ea2c:	df000017 	ldw	fp,0(sp)
    ea30:	dec00204 	addi	sp,sp,8
    ea34:	f800283a 	ret

0000ea38 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    ea38:	defffe04 	addi	sp,sp,-8
    ea3c:	dfc00115 	stw	ra,4(sp)
    ea40:	df000015 	stw	fp,0(sp)
    ea44:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    ea48:	01440004 	movi	r5,4096
    ea4c:	0009883a 	mov	r4,zero
    ea50:	000f3600 	call	f360 <alt_icache_flush>
#endif
}
    ea54:	0001883a 	nop
    ea58:	e037883a 	mov	sp,fp
    ea5c:	dfc00117 	ldw	ra,4(sp)
    ea60:	df000017 	ldw	fp,0(sp)
    ea64:	dec00204 	addi	sp,sp,8
    ea68:	f800283a 	ret

0000ea6c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    ea6c:	defff904 	addi	sp,sp,-28
    ea70:	dfc00615 	stw	ra,24(sp)
    ea74:	df000515 	stw	fp,20(sp)
    ea78:	df000504 	addi	fp,sp,20
    ea7c:	e13ffc15 	stw	r4,-16(fp)
    ea80:	e17ffd15 	stw	r5,-12(fp)
    ea84:	e1bffe15 	stw	r6,-8(fp)
    ea88:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    ea8c:	e1bfff17 	ldw	r6,-4(fp)
    ea90:	e17ffe17 	ldw	r5,-8(fp)
    ea94:	e13ffd17 	ldw	r4,-12(fp)
    ea98:	000ee780 	call	ee78 <open>
    ea9c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    eaa0:	e0bffb17 	ldw	r2,-20(fp)
    eaa4:	10001c16 	blt	r2,zero,eb18 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    eaa8:	00800074 	movhi	r2,1
    eaac:	10810a04 	addi	r2,r2,1064
    eab0:	e0fffb17 	ldw	r3,-20(fp)
    eab4:	18c00324 	muli	r3,r3,12
    eab8:	10c5883a 	add	r2,r2,r3
    eabc:	10c00017 	ldw	r3,0(r2)
    eac0:	e0bffc17 	ldw	r2,-16(fp)
    eac4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    eac8:	00800074 	movhi	r2,1
    eacc:	10810a04 	addi	r2,r2,1064
    ead0:	e0fffb17 	ldw	r3,-20(fp)
    ead4:	18c00324 	muli	r3,r3,12
    ead8:	10c5883a 	add	r2,r2,r3
    eadc:	10800104 	addi	r2,r2,4
    eae0:	10c00017 	ldw	r3,0(r2)
    eae4:	e0bffc17 	ldw	r2,-16(fp)
    eae8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    eaec:	00800074 	movhi	r2,1
    eaf0:	10810a04 	addi	r2,r2,1064
    eaf4:	e0fffb17 	ldw	r3,-20(fp)
    eaf8:	18c00324 	muli	r3,r3,12
    eafc:	10c5883a 	add	r2,r2,r3
    eb00:	10800204 	addi	r2,r2,8
    eb04:	10c00017 	ldw	r3,0(r2)
    eb08:	e0bffc17 	ldw	r2,-16(fp)
    eb0c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    eb10:	e13ffb17 	ldw	r4,-20(fp)
    eb14:	000d42c0 	call	d42c <alt_release_fd>
  }
} 
    eb18:	0001883a 	nop
    eb1c:	e037883a 	mov	sp,fp
    eb20:	dfc00117 	ldw	ra,4(sp)
    eb24:	df000017 	ldw	fp,0(sp)
    eb28:	dec00204 	addi	sp,sp,8
    eb2c:	f800283a 	ret

0000eb30 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    eb30:	defffb04 	addi	sp,sp,-20
    eb34:	dfc00415 	stw	ra,16(sp)
    eb38:	df000315 	stw	fp,12(sp)
    eb3c:	df000304 	addi	fp,sp,12
    eb40:	e13ffd15 	stw	r4,-12(fp)
    eb44:	e17ffe15 	stw	r5,-8(fp)
    eb48:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    eb4c:	01c07fc4 	movi	r7,511
    eb50:	01800044 	movi	r6,1
    eb54:	e17ffd17 	ldw	r5,-12(fp)
    eb58:	01000074 	movhi	r4,1
    eb5c:	21010d04 	addi	r4,r4,1076
    eb60:	000ea6c0 	call	ea6c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    eb64:	01c07fc4 	movi	r7,511
    eb68:	000d883a 	mov	r6,zero
    eb6c:	e17ffe17 	ldw	r5,-8(fp)
    eb70:	01000074 	movhi	r4,1
    eb74:	21010a04 	addi	r4,r4,1064
    eb78:	000ea6c0 	call	ea6c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    eb7c:	01c07fc4 	movi	r7,511
    eb80:	01800044 	movi	r6,1
    eb84:	e17fff17 	ldw	r5,-4(fp)
    eb88:	01000074 	movhi	r4,1
    eb8c:	21011004 	addi	r4,r4,1088
    eb90:	000ea6c0 	call	ea6c <alt_open_fd>
}  
    eb94:	0001883a 	nop
    eb98:	e037883a 	mov	sp,fp
    eb9c:	dfc00117 	ldw	ra,4(sp)
    eba0:	df000017 	ldw	fp,0(sp)
    eba4:	dec00204 	addi	sp,sp,8
    eba8:	f800283a 	ret

0000ebac <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    ebac:	defff004 	addi	sp,sp,-64
    ebb0:	df000f15 	stw	fp,60(sp)
    ebb4:	df000f04 	addi	fp,sp,60
    ebb8:	e13ffd15 	stw	r4,-12(fp)
    ebbc:	e17ffe15 	stw	r5,-8(fp)
    ebc0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
    ebc4:	00bffa84 	movi	r2,-22
    ebc8:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    ebcc:	e0bffd17 	ldw	r2,-12(fp)
    ebd0:	10800828 	cmpgeui	r2,r2,32
    ebd4:	10005c1e 	bne	r2,zero,ed48 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ebd8:	0005303a 	rdctl	r2,status
    ebdc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ebe0:	e0fff617 	ldw	r3,-40(fp)
    ebe4:	00bfff84 	movi	r2,-2
    ebe8:	1884703a 	and	r2,r3,r2
    ebec:	1001703a 	wrctl	status,r2
  
  return context;
    ebf0:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    ebf4:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
    ebf8:	00800074 	movhi	r2,1
    ebfc:	108c7b04 	addi	r2,r2,12780
    ec00:	e0fffd17 	ldw	r3,-12(fp)
    ec04:	180690fa 	slli	r3,r3,3
    ec08:	10c5883a 	add	r2,r2,r3
    ec0c:	e0ffff17 	ldw	r3,-4(fp)
    ec10:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
    ec14:	00800074 	movhi	r2,1
    ec18:	108c7b04 	addi	r2,r2,12780
    ec1c:	e0fffd17 	ldw	r3,-12(fp)
    ec20:	180690fa 	slli	r3,r3,3
    ec24:	10c5883a 	add	r2,r2,r3
    ec28:	10800104 	addi	r2,r2,4
    ec2c:	e0fffe17 	ldw	r3,-8(fp)
    ec30:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    ec34:	e0bfff17 	ldw	r2,-4(fp)
    ec38:	10001f26 	beq	r2,zero,ecb8 <alt_irq_register+0x10c>
    ec3c:	e0bffd17 	ldw	r2,-12(fp)
    ec40:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ec44:	0005303a 	rdctl	r2,status
    ec48:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ec4c:	e0fff717 	ldw	r3,-36(fp)
    ec50:	00bfff84 	movi	r2,-2
    ec54:	1884703a 	and	r2,r3,r2
    ec58:	1001703a 	wrctl	status,r2
  
  return context;
    ec5c:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    ec60:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    ec64:	00c00044 	movi	r3,1
    ec68:	e0bff217 	ldw	r2,-56(fp)
    ec6c:	1884983a 	sll	r2,r3,r2
    ec70:	1007883a 	mov	r3,r2
    ec74:	00800074 	movhi	r2,1
    ec78:	108c6d04 	addi	r2,r2,12724
    ec7c:	10800017 	ldw	r2,0(r2)
    ec80:	1886b03a 	or	r3,r3,r2
    ec84:	00800074 	movhi	r2,1
    ec88:	108c6d04 	addi	r2,r2,12724
    ec8c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    ec90:	00800074 	movhi	r2,1
    ec94:	108c6d04 	addi	r2,r2,12724
    ec98:	10800017 	ldw	r2,0(r2)
    ec9c:	100170fa 	wrctl	ienable,r2
    eca0:	e0bff817 	ldw	r2,-32(fp)
    eca4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eca8:	e0bff917 	ldw	r2,-28(fp)
    ecac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    ecb0:	0005883a 	mov	r2,zero
    ecb4:	00001f06 	br	ed34 <alt_irq_register+0x188>
    ecb8:	e0bffd17 	ldw	r2,-12(fp)
    ecbc:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ecc0:	0005303a 	rdctl	r2,status
    ecc4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ecc8:	e0fffa17 	ldw	r3,-24(fp)
    eccc:	00bfff84 	movi	r2,-2
    ecd0:	1884703a 	and	r2,r3,r2
    ecd4:	1001703a 	wrctl	status,r2
  
  return context;
    ecd8:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    ecdc:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
    ece0:	00c00044 	movi	r3,1
    ece4:	e0bff417 	ldw	r2,-48(fp)
    ece8:	1884983a 	sll	r2,r3,r2
    ecec:	0084303a 	nor	r2,zero,r2
    ecf0:	1007883a 	mov	r3,r2
    ecf4:	00800074 	movhi	r2,1
    ecf8:	108c6d04 	addi	r2,r2,12724
    ecfc:	10800017 	ldw	r2,0(r2)
    ed00:	1886703a 	and	r3,r3,r2
    ed04:	00800074 	movhi	r2,1
    ed08:	108c6d04 	addi	r2,r2,12724
    ed0c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    ed10:	00800074 	movhi	r2,1
    ed14:	108c6d04 	addi	r2,r2,12724
    ed18:	10800017 	ldw	r2,0(r2)
    ed1c:	100170fa 	wrctl	ienable,r2
    ed20:	e0bffb17 	ldw	r2,-20(fp)
    ed24:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ed28:	e0bffc17 	ldw	r2,-16(fp)
    ed2c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    ed30:	0005883a 	mov	r2,zero
    ed34:	e0bff115 	stw	r2,-60(fp)
    ed38:	e0bff317 	ldw	r2,-52(fp)
    ed3c:	e0bff515 	stw	r2,-44(fp)
    ed40:	e0bff517 	ldw	r2,-44(fp)
    ed44:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    ed48:	e0bff117 	ldw	r2,-60(fp)
}
    ed4c:	e037883a 	mov	sp,fp
    ed50:	df000017 	ldw	fp,0(sp)
    ed54:	dec00104 	addi	sp,sp,4
    ed58:	f800283a 	ret

0000ed5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ed5c:	defffe04 	addi	sp,sp,-8
    ed60:	dfc00115 	stw	ra,4(sp)
    ed64:	df000015 	stw	fp,0(sp)
    ed68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ed6c:	00800074 	movhi	r2,1
    ed70:	10859804 	addi	r2,r2,5728
    ed74:	10800017 	ldw	r2,0(r2)
    ed78:	10000526 	beq	r2,zero,ed90 <alt_get_errno+0x34>
    ed7c:	00800074 	movhi	r2,1
    ed80:	10859804 	addi	r2,r2,5728
    ed84:	10800017 	ldw	r2,0(r2)
    ed88:	103ee83a 	callr	r2
    ed8c:	00000206 	br	ed98 <alt_get_errno+0x3c>
    ed90:	00800074 	movhi	r2,1
    ed94:	108c6904 	addi	r2,r2,12708
}
    ed98:	e037883a 	mov	sp,fp
    ed9c:	dfc00117 	ldw	ra,4(sp)
    eda0:	df000017 	ldw	fp,0(sp)
    eda4:	dec00204 	addi	sp,sp,8
    eda8:	f800283a 	ret

0000edac <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    edac:	defffd04 	addi	sp,sp,-12
    edb0:	df000215 	stw	fp,8(sp)
    edb4:	df000204 	addi	fp,sp,8
    edb8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    edbc:	e0bfff17 	ldw	r2,-4(fp)
    edc0:	10800217 	ldw	r2,8(r2)
    edc4:	10d00034 	orhi	r3,r2,16384
    edc8:	e0bfff17 	ldw	r2,-4(fp)
    edcc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    edd0:	e03ffe15 	stw	zero,-8(fp)
    edd4:	00001d06 	br	ee4c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    edd8:	00800074 	movhi	r2,1
    eddc:	10810a04 	addi	r2,r2,1064
    ede0:	e0fffe17 	ldw	r3,-8(fp)
    ede4:	18c00324 	muli	r3,r3,12
    ede8:	10c5883a 	add	r2,r2,r3
    edec:	10c00017 	ldw	r3,0(r2)
    edf0:	e0bfff17 	ldw	r2,-4(fp)
    edf4:	10800017 	ldw	r2,0(r2)
    edf8:	1880111e 	bne	r3,r2,ee40 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    edfc:	00800074 	movhi	r2,1
    ee00:	10810a04 	addi	r2,r2,1064
    ee04:	e0fffe17 	ldw	r3,-8(fp)
    ee08:	18c00324 	muli	r3,r3,12
    ee0c:	10c5883a 	add	r2,r2,r3
    ee10:	10800204 	addi	r2,r2,8
    ee14:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    ee18:	1000090e 	bge	r2,zero,ee40 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    ee1c:	e0bffe17 	ldw	r2,-8(fp)
    ee20:	10c00324 	muli	r3,r2,12
    ee24:	00800074 	movhi	r2,1
    ee28:	10810a04 	addi	r2,r2,1064
    ee2c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    ee30:	e0bfff17 	ldw	r2,-4(fp)
    ee34:	18800226 	beq	r3,r2,ee40 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    ee38:	00bffcc4 	movi	r2,-13
    ee3c:	00000a06 	br	ee68 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    ee40:	e0bffe17 	ldw	r2,-8(fp)
    ee44:	10800044 	addi	r2,r2,1
    ee48:	e0bffe15 	stw	r2,-8(fp)
    ee4c:	00800074 	movhi	r2,1
    ee50:	10859704 	addi	r2,r2,5724
    ee54:	10800017 	ldw	r2,0(r2)
    ee58:	1007883a 	mov	r3,r2
    ee5c:	e0bffe17 	ldw	r2,-8(fp)
    ee60:	18bfdd2e 	bgeu	r3,r2,edd8 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    ee64:	0005883a 	mov	r2,zero
}
    ee68:	e037883a 	mov	sp,fp
    ee6c:	df000017 	ldw	fp,0(sp)
    ee70:	dec00104 	addi	sp,sp,4
    ee74:	f800283a 	ret

0000ee78 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    ee78:	defff604 	addi	sp,sp,-40
    ee7c:	dfc00915 	stw	ra,36(sp)
    ee80:	df000815 	stw	fp,32(sp)
    ee84:	df000804 	addi	fp,sp,32
    ee88:	e13ffd15 	stw	r4,-12(fp)
    ee8c:	e17ffe15 	stw	r5,-8(fp)
    ee90:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    ee94:	00bfffc4 	movi	r2,-1
    ee98:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    ee9c:	00bffb44 	movi	r2,-19
    eea0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    eea4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    eea8:	01400074 	movhi	r5,1
    eeac:	29459504 	addi	r5,r5,5716
    eeb0:	e13ffd17 	ldw	r4,-12(fp)
    eeb4:	000e9a80 	call	e9a8 <alt_find_dev>
    eeb8:	e0bff815 	stw	r2,-32(fp)
    eebc:	e0bff817 	ldw	r2,-32(fp)
    eec0:	1000051e 	bne	r2,zero,eed8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    eec4:	e13ffd17 	ldw	r4,-12(fp)
    eec8:	000f1980 	call	f198 <alt_find_file>
    eecc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    eed0:	00800044 	movi	r2,1
    eed4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    eed8:	e0bff817 	ldw	r2,-32(fp)
    eedc:	10002926 	beq	r2,zero,ef84 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    eee0:	e13ff817 	ldw	r4,-32(fp)
    eee4:	000f2ac0 	call	f2ac <alt_get_fd>
    eee8:	e0bff915 	stw	r2,-28(fp)
    eeec:	e0bff917 	ldw	r2,-28(fp)
    eef0:	1000030e 	bge	r2,zero,ef00 <open+0x88>
    {
      status = index;
    eef4:	e0bff917 	ldw	r2,-28(fp)
    eef8:	e0bffa15 	stw	r2,-24(fp)
    eefc:	00002306 	br	ef8c <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
    ef00:	e0bff917 	ldw	r2,-28(fp)
    ef04:	10c00324 	muli	r3,r2,12
    ef08:	00800074 	movhi	r2,1
    ef0c:	10810a04 	addi	r2,r2,1064
    ef10:	1885883a 	add	r2,r3,r2
    ef14:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    ef18:	e0fffe17 	ldw	r3,-8(fp)
    ef1c:	00900034 	movhi	r2,16384
    ef20:	10bfffc4 	addi	r2,r2,-1
    ef24:	1886703a 	and	r3,r3,r2
    ef28:	e0bffc17 	ldw	r2,-16(fp)
    ef2c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    ef30:	e0bffb17 	ldw	r2,-20(fp)
    ef34:	1000051e 	bne	r2,zero,ef4c <open+0xd4>
    ef38:	e13ffc17 	ldw	r4,-16(fp)
    ef3c:	000edac0 	call	edac <alt_file_locked>
    ef40:	e0bffa15 	stw	r2,-24(fp)
    ef44:	e0bffa17 	ldw	r2,-24(fp)
    ef48:	10001016 	blt	r2,zero,ef8c <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    ef4c:	e0bff817 	ldw	r2,-32(fp)
    ef50:	10800317 	ldw	r2,12(r2)
    ef54:	10000826 	beq	r2,zero,ef78 <open+0x100>
    ef58:	e0bff817 	ldw	r2,-32(fp)
    ef5c:	10800317 	ldw	r2,12(r2)
    ef60:	e1ffff17 	ldw	r7,-4(fp)
    ef64:	e1bffe17 	ldw	r6,-8(fp)
    ef68:	e17ffd17 	ldw	r5,-12(fp)
    ef6c:	e13ffc17 	ldw	r4,-16(fp)
    ef70:	103ee83a 	callr	r2
    ef74:	00000106 	br	ef7c <open+0x104>
    ef78:	0005883a 	mov	r2,zero
    ef7c:	e0bffa15 	stw	r2,-24(fp)
    ef80:	00000206 	br	ef8c <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
    ef84:	00bffb44 	movi	r2,-19
    ef88:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    ef8c:	e0bffa17 	ldw	r2,-24(fp)
    ef90:	1000090e 	bge	r2,zero,efb8 <open+0x140>
  {
    alt_release_fd (index);  
    ef94:	e13ff917 	ldw	r4,-28(fp)
    ef98:	000d42c0 	call	d42c <alt_release_fd>
    ALT_ERRNO = -status;
    ef9c:	000ed5c0 	call	ed5c <alt_get_errno>
    efa0:	1007883a 	mov	r3,r2
    efa4:	e0bffa17 	ldw	r2,-24(fp)
    efa8:	0085c83a 	sub	r2,zero,r2
    efac:	18800015 	stw	r2,0(r3)
    return -1;
    efb0:	00bfffc4 	movi	r2,-1
    efb4:	00000106 	br	efbc <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    efb8:	e0bff917 	ldw	r2,-28(fp)
}
    efbc:	e037883a 	mov	sp,fp
    efc0:	dfc00117 	ldw	ra,4(sp)
    efc4:	df000017 	ldw	fp,0(sp)
    efc8:	dec00204 	addi	sp,sp,8
    efcc:	f800283a 	ret

0000efd0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    efd0:	defffa04 	addi	sp,sp,-24
    efd4:	df000515 	stw	fp,20(sp)
    efd8:	df000504 	addi	fp,sp,20
    efdc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    efe0:	0005303a 	rdctl	r2,status
    efe4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    efe8:	e0fffc17 	ldw	r3,-16(fp)
    efec:	00bfff84 	movi	r2,-2
    eff0:	1884703a 	and	r2,r3,r2
    eff4:	1001703a 	wrctl	status,r2
  
  return context;
    eff8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    effc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    f000:	e0bfff17 	ldw	r2,-4(fp)
    f004:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    f008:	e0bffd17 	ldw	r2,-12(fp)
    f00c:	10800017 	ldw	r2,0(r2)
    f010:	e0fffd17 	ldw	r3,-12(fp)
    f014:	18c00117 	ldw	r3,4(r3)
    f018:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    f01c:	e0bffd17 	ldw	r2,-12(fp)
    f020:	10800117 	ldw	r2,4(r2)
    f024:	e0fffd17 	ldw	r3,-12(fp)
    f028:	18c00017 	ldw	r3,0(r3)
    f02c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    f030:	e0bffd17 	ldw	r2,-12(fp)
    f034:	e0fffd17 	ldw	r3,-12(fp)
    f038:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    f03c:	e0bffd17 	ldw	r2,-12(fp)
    f040:	e0fffd17 	ldw	r3,-12(fp)
    f044:	10c00015 	stw	r3,0(r2)
    f048:	e0bffb17 	ldw	r2,-20(fp)
    f04c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f050:	e0bffe17 	ldw	r2,-8(fp)
    f054:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    f058:	0001883a 	nop
    f05c:	e037883a 	mov	sp,fp
    f060:	df000017 	ldw	fp,0(sp)
    f064:	dec00104 	addi	sp,sp,4
    f068:	f800283a 	ret

0000f06c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    f06c:	defffb04 	addi	sp,sp,-20
    f070:	dfc00415 	stw	ra,16(sp)
    f074:	df000315 	stw	fp,12(sp)
    f078:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    f07c:	d0a00e17 	ldw	r2,-32712(gp)
    f080:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    f084:	d0a6e217 	ldw	r2,-25720(gp)
    f088:	10800044 	addi	r2,r2,1
    f08c:	d0a6e215 	stw	r2,-25720(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f090:	00002e06 	br	f14c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    f094:	e0bffd17 	ldw	r2,-12(fp)
    f098:	10800017 	ldw	r2,0(r2)
    f09c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    f0a0:	e0bffd17 	ldw	r2,-12(fp)
    f0a4:	10800403 	ldbu	r2,16(r2)
    f0a8:	10803fcc 	andi	r2,r2,255
    f0ac:	10000426 	beq	r2,zero,f0c0 <alt_tick+0x54>
    f0b0:	d0a6e217 	ldw	r2,-25720(gp)
    f0b4:	1000021e 	bne	r2,zero,f0c0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    f0b8:	e0bffd17 	ldw	r2,-12(fp)
    f0bc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    f0c0:	e0bffd17 	ldw	r2,-12(fp)
    f0c4:	10800217 	ldw	r2,8(r2)
    f0c8:	d0e6e217 	ldw	r3,-25720(gp)
    f0cc:	18801d36 	bltu	r3,r2,f144 <alt_tick+0xd8>
    f0d0:	e0bffd17 	ldw	r2,-12(fp)
    f0d4:	10800403 	ldbu	r2,16(r2)
    f0d8:	10803fcc 	andi	r2,r2,255
    f0dc:	1000191e 	bne	r2,zero,f144 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    f0e0:	e0bffd17 	ldw	r2,-12(fp)
    f0e4:	10800317 	ldw	r2,12(r2)
    f0e8:	e0fffd17 	ldw	r3,-12(fp)
    f0ec:	18c00517 	ldw	r3,20(r3)
    f0f0:	1809883a 	mov	r4,r3
    f0f4:	103ee83a 	callr	r2
    f0f8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    f0fc:	e0bfff17 	ldw	r2,-4(fp)
    f100:	1000031e 	bne	r2,zero,f110 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    f104:	e13ffd17 	ldw	r4,-12(fp)
    f108:	000efd00 	call	efd0 <alt_alarm_stop>
    f10c:	00000d06 	br	f144 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    f110:	e0bffd17 	ldw	r2,-12(fp)
    f114:	10c00217 	ldw	r3,8(r2)
    f118:	e0bfff17 	ldw	r2,-4(fp)
    f11c:	1887883a 	add	r3,r3,r2
    f120:	e0bffd17 	ldw	r2,-12(fp)
    f124:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    f128:	e0bffd17 	ldw	r2,-12(fp)
    f12c:	10c00217 	ldw	r3,8(r2)
    f130:	d0a6e217 	ldw	r2,-25720(gp)
    f134:	1880032e 	bgeu	r3,r2,f144 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    f138:	e0bffd17 	ldw	r2,-12(fp)
    f13c:	00c00044 	movi	r3,1
    f140:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    f144:	e0bffe17 	ldw	r2,-8(fp)
    f148:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f14c:	e0fffd17 	ldw	r3,-12(fp)
    f150:	d0a00e04 	addi	r2,gp,-32712
    f154:	18bfcf1e 	bne	r3,r2,f094 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    f158:	0001883a 	nop
}
    f15c:	0001883a 	nop
    f160:	e037883a 	mov	sp,fp
    f164:	dfc00117 	ldw	ra,4(sp)
    f168:	df000017 	ldw	fp,0(sp)
    f16c:	dec00204 	addi	sp,sp,8
    f170:	f800283a 	ret

0000f174 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    f174:	deffff04 	addi	sp,sp,-4
    f178:	df000015 	stw	fp,0(sp)
    f17c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    f180:	000170fa 	wrctl	ienable,zero
}
    f184:	0001883a 	nop
    f188:	e037883a 	mov	sp,fp
    f18c:	df000017 	ldw	fp,0(sp)
    f190:	dec00104 	addi	sp,sp,4
    f194:	f800283a 	ret

0000f198 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    f198:	defffb04 	addi	sp,sp,-20
    f19c:	dfc00415 	stw	ra,16(sp)
    f1a0:	df000315 	stw	fp,12(sp)
    f1a4:	df000304 	addi	fp,sp,12
    f1a8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    f1ac:	00800074 	movhi	r2,1
    f1b0:	10859304 	addi	r2,r2,5708
    f1b4:	10800017 	ldw	r2,0(r2)
    f1b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    f1bc:	00003106 	br	f284 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    f1c0:	e0bffd17 	ldw	r2,-12(fp)
    f1c4:	10800217 	ldw	r2,8(r2)
    f1c8:	1009883a 	mov	r4,r2
    f1cc:	00004ec0 	call	4ec <strlen>
    f1d0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    f1d4:	e0bffd17 	ldw	r2,-12(fp)
    f1d8:	10c00217 	ldw	r3,8(r2)
    f1dc:	e0bffe17 	ldw	r2,-8(fp)
    f1e0:	10bfffc4 	addi	r2,r2,-1
    f1e4:	1885883a 	add	r2,r3,r2
    f1e8:	10800003 	ldbu	r2,0(r2)
    f1ec:	10803fcc 	andi	r2,r2,255
    f1f0:	1080201c 	xori	r2,r2,128
    f1f4:	10bfe004 	addi	r2,r2,-128
    f1f8:	10800bd8 	cmpnei	r2,r2,47
    f1fc:	1000031e 	bne	r2,zero,f20c <alt_find_file+0x74>
    {
      len -= 1;
    f200:	e0bffe17 	ldw	r2,-8(fp)
    f204:	10bfffc4 	addi	r2,r2,-1
    f208:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    f20c:	e0bffe17 	ldw	r2,-8(fp)
    f210:	e0ffff17 	ldw	r3,-4(fp)
    f214:	1885883a 	add	r2,r3,r2
    f218:	10800003 	ldbu	r2,0(r2)
    f21c:	10803fcc 	andi	r2,r2,255
    f220:	1080201c 	xori	r2,r2,128
    f224:	10bfe004 	addi	r2,r2,-128
    f228:	10800be0 	cmpeqi	r2,r2,47
    f22c:	1000081e 	bne	r2,zero,f250 <alt_find_file+0xb8>
    f230:	e0bffe17 	ldw	r2,-8(fp)
    f234:	e0ffff17 	ldw	r3,-4(fp)
    f238:	1885883a 	add	r2,r3,r2
    f23c:	10800003 	ldbu	r2,0(r2)
    f240:	10803fcc 	andi	r2,r2,255
    f244:	1080201c 	xori	r2,r2,128
    f248:	10bfe004 	addi	r2,r2,-128
    f24c:	10000a1e 	bne	r2,zero,f278 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    f250:	e0bffd17 	ldw	r2,-12(fp)
    f254:	10800217 	ldw	r2,8(r2)
    f258:	e0fffe17 	ldw	r3,-8(fp)
    f25c:	180d883a 	mov	r6,r3
    f260:	e17fff17 	ldw	r5,-4(fp)
    f264:	1009883a 	mov	r4,r2
    f268:	000f4d80 	call	f4d8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    f26c:	1000021e 	bne	r2,zero,f278 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    f270:	e0bffd17 	ldw	r2,-12(fp)
    f274:	00000806 	br	f298 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    f278:	e0bffd17 	ldw	r2,-12(fp)
    f27c:	10800017 	ldw	r2,0(r2)
    f280:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    f284:	e0fffd17 	ldw	r3,-12(fp)
    f288:	00800074 	movhi	r2,1
    f28c:	10859304 	addi	r2,r2,5708
    f290:	18bfcb1e 	bne	r3,r2,f1c0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    f294:	0005883a 	mov	r2,zero
}
    f298:	e037883a 	mov	sp,fp
    f29c:	dfc00117 	ldw	ra,4(sp)
    f2a0:	df000017 	ldw	fp,0(sp)
    f2a4:	dec00204 	addi	sp,sp,8
    f2a8:	f800283a 	ret

0000f2ac <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    f2ac:	defffc04 	addi	sp,sp,-16
    f2b0:	df000315 	stw	fp,12(sp)
    f2b4:	df000304 	addi	fp,sp,12
    f2b8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    f2bc:	00bffa04 	movi	r2,-24
    f2c0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    f2c4:	e03ffd15 	stw	zero,-12(fp)
    f2c8:	00001d06 	br	f340 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    f2cc:	00800074 	movhi	r2,1
    f2d0:	10810a04 	addi	r2,r2,1064
    f2d4:	e0fffd17 	ldw	r3,-12(fp)
    f2d8:	18c00324 	muli	r3,r3,12
    f2dc:	10c5883a 	add	r2,r2,r3
    f2e0:	10800017 	ldw	r2,0(r2)
    f2e4:	1000131e 	bne	r2,zero,f334 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    f2e8:	00800074 	movhi	r2,1
    f2ec:	10810a04 	addi	r2,r2,1064
    f2f0:	e0fffd17 	ldw	r3,-12(fp)
    f2f4:	18c00324 	muli	r3,r3,12
    f2f8:	10c5883a 	add	r2,r2,r3
    f2fc:	e0ffff17 	ldw	r3,-4(fp)
    f300:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    f304:	00800074 	movhi	r2,1
    f308:	10859704 	addi	r2,r2,5724
    f30c:	10c00017 	ldw	r3,0(r2)
    f310:	e0bffd17 	ldw	r2,-12(fp)
    f314:	1880040e 	bge	r3,r2,f328 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    f318:	00800074 	movhi	r2,1
    f31c:	10859704 	addi	r2,r2,5724
    f320:	e0fffd17 	ldw	r3,-12(fp)
    f324:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    f328:	e0bffd17 	ldw	r2,-12(fp)
    f32c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    f330:	00000606 	br	f34c <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    f334:	e0bffd17 	ldw	r2,-12(fp)
    f338:	10800044 	addi	r2,r2,1
    f33c:	e0bffd15 	stw	r2,-12(fp)
    f340:	e0bffd17 	ldw	r2,-12(fp)
    f344:	10800810 	cmplti	r2,r2,32
    f348:	103fe01e 	bne	r2,zero,f2cc <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    f34c:	e0bffe17 	ldw	r2,-8(fp)
}
    f350:	e037883a 	mov	sp,fp
    f354:	df000017 	ldw	fp,0(sp)
    f358:	dec00104 	addi	sp,sp,4
    f35c:	f800283a 	ret

0000f360 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    f360:	defffb04 	addi	sp,sp,-20
    f364:	df000415 	stw	fp,16(sp)
    f368:	df000404 	addi	fp,sp,16
    f36c:	e13ffe15 	stw	r4,-8(fp)
    f370:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    f374:	e0bfff17 	ldw	r2,-4(fp)
    f378:	10840070 	cmpltui	r2,r2,4097
    f37c:	1000021e 	bne	r2,zero,f388 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    f380:	00840004 	movi	r2,4096
    f384:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    f388:	e0fffe17 	ldw	r3,-8(fp)
    f38c:	e0bfff17 	ldw	r2,-4(fp)
    f390:	1885883a 	add	r2,r3,r2
    f394:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    f398:	e0bffe17 	ldw	r2,-8(fp)
    f39c:	e0bffc15 	stw	r2,-16(fp)
    f3a0:	00000506 	br	f3b8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    f3a4:	e0bffc17 	ldw	r2,-16(fp)
    f3a8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    f3ac:	e0bffc17 	ldw	r2,-16(fp)
    f3b0:	10800804 	addi	r2,r2,32
    f3b4:	e0bffc15 	stw	r2,-16(fp)
    f3b8:	e0fffc17 	ldw	r3,-16(fp)
    f3bc:	e0bffd17 	ldw	r2,-12(fp)
    f3c0:	18bff836 	bltu	r3,r2,f3a4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    f3c4:	e0bffe17 	ldw	r2,-8(fp)
    f3c8:	108007cc 	andi	r2,r2,31
    f3cc:	10000226 	beq	r2,zero,f3d8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    f3d0:	e0bffc17 	ldw	r2,-16(fp)
    f3d4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    f3d8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    f3dc:	0001883a 	nop
    f3e0:	e037883a 	mov	sp,fp
    f3e4:	df000017 	ldw	fp,0(sp)
    f3e8:	dec00104 	addi	sp,sp,4
    f3ec:	f800283a 	ret

0000f3f0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    f3f0:	defffe04 	addi	sp,sp,-8
    f3f4:	df000115 	stw	fp,4(sp)
    f3f8:	df000104 	addi	fp,sp,4
    f3fc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    f400:	e0bfff17 	ldw	r2,-4(fp)
    f404:	10bffe84 	addi	r2,r2,-6
    f408:	10c00428 	cmpgeui	r3,r2,16
    f40c:	18001a1e 	bne	r3,zero,f478 <alt_exception_cause_generated_bad_addr+0x88>
    f410:	100690ba 	slli	r3,r2,2
    f414:	00800074 	movhi	r2,1
    f418:	10bd0a04 	addi	r2,r2,-3032
    f41c:	1885883a 	add	r2,r3,r2
    f420:	10800017 	ldw	r2,0(r2)
    f424:	1000683a 	jmp	r2
    f428:	0000f468 	cmpgeui	zero,zero,977
    f42c:	0000f468 	cmpgeui	zero,zero,977
    f430:	0000f478 	rdprs	zero,zero,977
    f434:	0000f478 	rdprs	zero,zero,977
    f438:	0000f478 	rdprs	zero,zero,977
    f43c:	0000f468 	cmpgeui	zero,zero,977
    f440:	0000f470 	cmpltui	zero,zero,977
    f444:	0000f478 	rdprs	zero,zero,977
    f448:	0000f468 	cmpgeui	zero,zero,977
    f44c:	0000f468 	cmpgeui	zero,zero,977
    f450:	0000f478 	rdprs	zero,zero,977
    f454:	0000f468 	cmpgeui	zero,zero,977
    f458:	0000f470 	cmpltui	zero,zero,977
    f45c:	0000f478 	rdprs	zero,zero,977
    f460:	0000f478 	rdprs	zero,zero,977
    f464:	0000f468 	cmpgeui	zero,zero,977
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    f468:	00800044 	movi	r2,1
    f46c:	00000306 	br	f47c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    f470:	0005883a 	mov	r2,zero
    f474:	00000106 	br	f47c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    f478:	0005883a 	mov	r2,zero
  }
}
    f47c:	e037883a 	mov	sp,fp
    f480:	df000017 	ldw	fp,0(sp)
    f484:	dec00104 	addi	sp,sp,4
    f488:	f800283a 	ret

0000f48c <atexit>:
    f48c:	200b883a 	mov	r5,r4
    f490:	000f883a 	mov	r7,zero
    f494:	000d883a 	mov	r6,zero
    f498:	0009883a 	mov	r4,zero
    f49c:	000f5541 	jmpi	f554 <__register_exitproc>

0000f4a0 <exit>:
    f4a0:	defffe04 	addi	sp,sp,-8
    f4a4:	000b883a 	mov	r5,zero
    f4a8:	dc000015 	stw	r16,0(sp)
    f4ac:	dfc00115 	stw	ra,4(sp)
    f4b0:	2021883a 	mov	r16,r4
    f4b4:	000f66c0 	call	f66c <__call_exitprocs>
    f4b8:	00800074 	movhi	r2,1
    f4bc:	10858d04 	addi	r2,r2,5684
    f4c0:	11000017 	ldw	r4,0(r2)
    f4c4:	20800f17 	ldw	r2,60(r4)
    f4c8:	10000126 	beq	r2,zero,f4d0 <exit+0x30>
    f4cc:	103ee83a 	callr	r2
    f4d0:	8009883a 	mov	r4,r16
    f4d4:	000f7ec0 	call	f7ec <_exit>

0000f4d8 <memcmp>:
    f4d8:	01c000c4 	movi	r7,3
    f4dc:	3980192e 	bgeu	r7,r6,f544 <memcmp+0x6c>
    f4e0:	2144b03a 	or	r2,r4,r5
    f4e4:	11c4703a 	and	r2,r2,r7
    f4e8:	10000f26 	beq	r2,zero,f528 <memcmp+0x50>
    f4ec:	20800003 	ldbu	r2,0(r4)
    f4f0:	28c00003 	ldbu	r3,0(r5)
    f4f4:	10c0151e 	bne	r2,r3,f54c <memcmp+0x74>
    f4f8:	31bfff84 	addi	r6,r6,-2
    f4fc:	01ffffc4 	movi	r7,-1
    f500:	00000406 	br	f514 <memcmp+0x3c>
    f504:	20800003 	ldbu	r2,0(r4)
    f508:	28c00003 	ldbu	r3,0(r5)
    f50c:	31bfffc4 	addi	r6,r6,-1
    f510:	10c00e1e 	bne	r2,r3,f54c <memcmp+0x74>
    f514:	21000044 	addi	r4,r4,1
    f518:	29400044 	addi	r5,r5,1
    f51c:	31fff91e 	bne	r6,r7,f504 <memcmp+0x2c>
    f520:	0005883a 	mov	r2,zero
    f524:	f800283a 	ret
    f528:	20c00017 	ldw	r3,0(r4)
    f52c:	28800017 	ldw	r2,0(r5)
    f530:	18bfee1e 	bne	r3,r2,f4ec <memcmp+0x14>
    f534:	31bfff04 	addi	r6,r6,-4
    f538:	21000104 	addi	r4,r4,4
    f53c:	29400104 	addi	r5,r5,4
    f540:	39bff936 	bltu	r7,r6,f528 <memcmp+0x50>
    f544:	303fe91e 	bne	r6,zero,f4ec <memcmp+0x14>
    f548:	003ff506 	br	f520 <memcmp+0x48>
    f54c:	10c5c83a 	sub	r2,r2,r3
    f550:	f800283a 	ret

0000f554 <__register_exitproc>:
    f554:	defffa04 	addi	sp,sp,-24
    f558:	dc000315 	stw	r16,12(sp)
    f55c:	04000074 	movhi	r16,1
    f560:	84058d04 	addi	r16,r16,5684
    f564:	80c00017 	ldw	r3,0(r16)
    f568:	dc400415 	stw	r17,16(sp)
    f56c:	dfc00515 	stw	ra,20(sp)
    f570:	18805217 	ldw	r2,328(r3)
    f574:	2023883a 	mov	r17,r4
    f578:	10003726 	beq	r2,zero,f658 <__register_exitproc+0x104>
    f57c:	10c00117 	ldw	r3,4(r2)
    f580:	010007c4 	movi	r4,31
    f584:	20c00e16 	blt	r4,r3,f5c0 <__register_exitproc+0x6c>
    f588:	1a000044 	addi	r8,r3,1
    f58c:	8800221e 	bne	r17,zero,f618 <__register_exitproc+0xc4>
    f590:	18c00084 	addi	r3,r3,2
    f594:	18c7883a 	add	r3,r3,r3
    f598:	18c7883a 	add	r3,r3,r3
    f59c:	12000115 	stw	r8,4(r2)
    f5a0:	10c7883a 	add	r3,r2,r3
    f5a4:	19400015 	stw	r5,0(r3)
    f5a8:	0005883a 	mov	r2,zero
    f5ac:	dfc00517 	ldw	ra,20(sp)
    f5b0:	dc400417 	ldw	r17,16(sp)
    f5b4:	dc000317 	ldw	r16,12(sp)
    f5b8:	dec00604 	addi	sp,sp,24
    f5bc:	f800283a 	ret
    f5c0:	00800034 	movhi	r2,0
    f5c4:	10800004 	addi	r2,r2,0
    f5c8:	10002626 	beq	r2,zero,f664 <__register_exitproc+0x110>
    f5cc:	01006404 	movi	r4,400
    f5d0:	d9400015 	stw	r5,0(sp)
    f5d4:	d9800115 	stw	r6,4(sp)
    f5d8:	d9c00215 	stw	r7,8(sp)
    f5dc:	00000000 	call	0 <__alt_mem_SDRAM>
    f5e0:	d9400017 	ldw	r5,0(sp)
    f5e4:	d9800117 	ldw	r6,4(sp)
    f5e8:	d9c00217 	ldw	r7,8(sp)
    f5ec:	10001d26 	beq	r2,zero,f664 <__register_exitproc+0x110>
    f5f0:	81000017 	ldw	r4,0(r16)
    f5f4:	10000115 	stw	zero,4(r2)
    f5f8:	02000044 	movi	r8,1
    f5fc:	22405217 	ldw	r9,328(r4)
    f600:	0007883a 	mov	r3,zero
    f604:	12400015 	stw	r9,0(r2)
    f608:	20805215 	stw	r2,328(r4)
    f60c:	10006215 	stw	zero,392(r2)
    f610:	10006315 	stw	zero,396(r2)
    f614:	883fde26 	beq	r17,zero,f590 <__register_exitproc+0x3c>
    f618:	18c9883a 	add	r4,r3,r3
    f61c:	2109883a 	add	r4,r4,r4
    f620:	1109883a 	add	r4,r2,r4
    f624:	21802215 	stw	r6,136(r4)
    f628:	01800044 	movi	r6,1
    f62c:	12406217 	ldw	r9,392(r2)
    f630:	30cc983a 	sll	r6,r6,r3
    f634:	4992b03a 	or	r9,r9,r6
    f638:	12406215 	stw	r9,392(r2)
    f63c:	21c04215 	stw	r7,264(r4)
    f640:	01000084 	movi	r4,2
    f644:	893fd21e 	bne	r17,r4,f590 <__register_exitproc+0x3c>
    f648:	11006317 	ldw	r4,396(r2)
    f64c:	218cb03a 	or	r6,r4,r6
    f650:	11806315 	stw	r6,396(r2)
    f654:	003fce06 	br	f590 <__register_exitproc+0x3c>
    f658:	18805304 	addi	r2,r3,332
    f65c:	18805215 	stw	r2,328(r3)
    f660:	003fc606 	br	f57c <__register_exitproc+0x28>
    f664:	00bfffc4 	movi	r2,-1
    f668:	003fd006 	br	f5ac <__register_exitproc+0x58>

0000f66c <__call_exitprocs>:
    f66c:	defff504 	addi	sp,sp,-44
    f670:	df000915 	stw	fp,36(sp)
    f674:	dd400615 	stw	r21,24(sp)
    f678:	dc800315 	stw	r18,12(sp)
    f67c:	dfc00a15 	stw	ra,40(sp)
    f680:	ddc00815 	stw	r23,32(sp)
    f684:	dd800715 	stw	r22,28(sp)
    f688:	dd000515 	stw	r20,20(sp)
    f68c:	dcc00415 	stw	r19,16(sp)
    f690:	dc400215 	stw	r17,8(sp)
    f694:	dc000115 	stw	r16,4(sp)
    f698:	d9000015 	stw	r4,0(sp)
    f69c:	2839883a 	mov	fp,r5
    f6a0:	04800044 	movi	r18,1
    f6a4:	057fffc4 	movi	r21,-1
    f6a8:	00800074 	movhi	r2,1
    f6ac:	10858d04 	addi	r2,r2,5684
    f6b0:	12000017 	ldw	r8,0(r2)
    f6b4:	45005217 	ldw	r20,328(r8)
    f6b8:	44c05204 	addi	r19,r8,328
    f6bc:	a0001c26 	beq	r20,zero,f730 <__call_exitprocs+0xc4>
    f6c0:	a0800117 	ldw	r2,4(r20)
    f6c4:	15ffffc4 	addi	r23,r2,-1
    f6c8:	b8000d16 	blt	r23,zero,f700 <__call_exitprocs+0x94>
    f6cc:	14000044 	addi	r16,r2,1
    f6d0:	8421883a 	add	r16,r16,r16
    f6d4:	8421883a 	add	r16,r16,r16
    f6d8:	84402004 	addi	r17,r16,128
    f6dc:	a463883a 	add	r17,r20,r17
    f6e0:	a421883a 	add	r16,r20,r16
    f6e4:	e0001e26 	beq	fp,zero,f760 <__call_exitprocs+0xf4>
    f6e8:	80804017 	ldw	r2,256(r16)
    f6ec:	e0801c26 	beq	fp,r2,f760 <__call_exitprocs+0xf4>
    f6f0:	bdffffc4 	addi	r23,r23,-1
    f6f4:	843fff04 	addi	r16,r16,-4
    f6f8:	8c7fff04 	addi	r17,r17,-4
    f6fc:	bd7ff91e 	bne	r23,r21,f6e4 <__call_exitprocs+0x78>
    f700:	00800034 	movhi	r2,0
    f704:	10800004 	addi	r2,r2,0
    f708:	10000926 	beq	r2,zero,f730 <__call_exitprocs+0xc4>
    f70c:	a0800117 	ldw	r2,4(r20)
    f710:	1000301e 	bne	r2,zero,f7d4 <__call_exitprocs+0x168>
    f714:	a0800017 	ldw	r2,0(r20)
    f718:	10003226 	beq	r2,zero,f7e4 <__call_exitprocs+0x178>
    f71c:	a009883a 	mov	r4,r20
    f720:	98800015 	stw	r2,0(r19)
    f724:	00000000 	call	0 <__alt_mem_SDRAM>
    f728:	9d000017 	ldw	r20,0(r19)
    f72c:	a03fe41e 	bne	r20,zero,f6c0 <__call_exitprocs+0x54>
    f730:	dfc00a17 	ldw	ra,40(sp)
    f734:	df000917 	ldw	fp,36(sp)
    f738:	ddc00817 	ldw	r23,32(sp)
    f73c:	dd800717 	ldw	r22,28(sp)
    f740:	dd400617 	ldw	r21,24(sp)
    f744:	dd000517 	ldw	r20,20(sp)
    f748:	dcc00417 	ldw	r19,16(sp)
    f74c:	dc800317 	ldw	r18,12(sp)
    f750:	dc400217 	ldw	r17,8(sp)
    f754:	dc000117 	ldw	r16,4(sp)
    f758:	dec00b04 	addi	sp,sp,44
    f75c:	f800283a 	ret
    f760:	a0800117 	ldw	r2,4(r20)
    f764:	80c00017 	ldw	r3,0(r16)
    f768:	10bfffc4 	addi	r2,r2,-1
    f76c:	15c01426 	beq	r2,r23,f7c0 <__call_exitprocs+0x154>
    f770:	80000015 	stw	zero,0(r16)
    f774:	183fde26 	beq	r3,zero,f6f0 <__call_exitprocs+0x84>
    f778:	95c8983a 	sll	r4,r18,r23
    f77c:	a0806217 	ldw	r2,392(r20)
    f780:	a5800117 	ldw	r22,4(r20)
    f784:	2084703a 	and	r2,r4,r2
    f788:	10000b26 	beq	r2,zero,f7b8 <__call_exitprocs+0x14c>
    f78c:	a0806317 	ldw	r2,396(r20)
    f790:	2088703a 	and	r4,r4,r2
    f794:	20000c1e 	bne	r4,zero,f7c8 <__call_exitprocs+0x15c>
    f798:	89400017 	ldw	r5,0(r17)
    f79c:	d9000017 	ldw	r4,0(sp)
    f7a0:	183ee83a 	callr	r3
    f7a4:	a0800117 	ldw	r2,4(r20)
    f7a8:	15bfbf1e 	bne	r2,r22,f6a8 <__call_exitprocs+0x3c>
    f7ac:	98800017 	ldw	r2,0(r19)
    f7b0:	153fcf26 	beq	r2,r20,f6f0 <__call_exitprocs+0x84>
    f7b4:	003fbc06 	br	f6a8 <__call_exitprocs+0x3c>
    f7b8:	183ee83a 	callr	r3
    f7bc:	003ff906 	br	f7a4 <__call_exitprocs+0x138>
    f7c0:	a5c00115 	stw	r23,4(r20)
    f7c4:	003feb06 	br	f774 <__call_exitprocs+0x108>
    f7c8:	89000017 	ldw	r4,0(r17)
    f7cc:	183ee83a 	callr	r3
    f7d0:	003ff406 	br	f7a4 <__call_exitprocs+0x138>
    f7d4:	a0800017 	ldw	r2,0(r20)
    f7d8:	a027883a 	mov	r19,r20
    f7dc:	1029883a 	mov	r20,r2
    f7e0:	003fb606 	br	f6bc <__call_exitprocs+0x50>
    f7e4:	0005883a 	mov	r2,zero
    f7e8:	003ffb06 	br	f7d8 <__call_exitprocs+0x16c>

0000f7ec <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    f7ec:	defffd04 	addi	sp,sp,-12
    f7f0:	df000215 	stw	fp,8(sp)
    f7f4:	df000204 	addi	fp,sp,8
    f7f8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    f7fc:	0001883a 	nop
    f800:	e0bfff17 	ldw	r2,-4(fp)
    f804:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    f808:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    f80c:	10000226 	beq	r2,zero,f818 <_exit+0x2c>
    ALT_SIM_FAIL();
    f810:	002af070 	cmpltui	zero,zero,43969
    f814:	00000106 	br	f81c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    f818:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    f81c:	003fff06 	br	f81c <_exit+0x30>
