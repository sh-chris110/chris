
ucos.elf:     file format elf32-littlenios2
ucos.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000e7e4 memsz 0x0000e7e4 flags r-x
    LOAD off    0x0000f804 vaddr 0x0000e804 paddr 0x000102f8 align 2**12
         filesz 0x00001af4 memsz 0x00001af4 flags rw-
    LOAD off    0x00011dec vaddr 0x00011dec paddr 0x00011dec align 2**12
         filesz 0x00000000 memsz 0x000073dc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000e448  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000178  0000e68c  0000e68c  0000f68c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af4  0000e804  000102f8  0000f804  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000073dc  00011dec  00011dec  00011dec  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  000191c8  000191c8  000112f8  2**0
                  CONTENTS
  7 .SRAM         00000000  04020000  04020000  000112f8  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000112f8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000b90  00000000  00000000  00011320  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001fc0e  00000000  00000000  00011eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00007b08  00000000  00000000  00031abe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008fff  00000000  00000000  000395c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002600  00000000  00000000  000425c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003828  00000000  00000000  00044bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000049c3  00000000  00000000  000483f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  0004cdb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000680  00000000  00000000  0004cde8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  00051291  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000b  00000000  00000000  00051297  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000512a2  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000512a3  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000512a4  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000512a8  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000512ac  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000004  00000000  00000000  000512b0  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000004  00000000  00000000  000512b4  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000004  00000000  00000000  000512b8  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000a  00000000  00000000  000512bc  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001b  00000000  00000000  000512c6  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0005d209  00000000  00000000  000512e1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
0000e68c l    d  .rodata	00000000 .rodata
0000e804 l    d  .rwdata	00000000 .rwdata
00011dec l    d  .bss	00000000 .bss
000191c8 l    d  .SDRAM	00000000 .SDRAM
04020000 l    d  .SRAM	00000000 .SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ucos_bsp//obj/HAL/src/crt0.o
0000028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
0000051c l     F .text	00000008 __fp_unlock
00000530 l     F .text	0000019c __sinit.part.1
000006cc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000e804 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
00003178 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00003298 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000032c4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000033c4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000034b8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000035a4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
000037a0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001026c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00003a00 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00010270 l     O .rwdata	00000004 lockid
00011e0c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00010274 l     O .rwdata	00000004 lockid
00011e14 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
000057e0 l     F .text	00000098 OS_InitMisc
00005878 l     F .text	00000098 OS_InitRdyList
00005a10 l     F .text	000000f4 OS_InitTCBList
000056f8 l     F .text	000000e8 OS_InitEventList
00005910 l     F .text	00000080 OS_InitTaskIdle
00005990 l     F .text	00000080 OS_InitTaskStat
00005cd8 l     F .text	0000008c OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00007bf8 l     F .text	00000110 OS_FlagTaskRdy
00007948 l     F .text	000001c8 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000c0c4 l     F .text	00000038 alt_dev_reg
0000f1d8 l     O .rwdata	0000106c JTAG
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000c44c l     F .text	000002b4 altera_avalon_jtag_uart_irq
0000c700 l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000cf0c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000d198 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000d650 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000d790 l     F .text	00000050 alt_get_errno
0000d7e0 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00011e78 g     O .bss	00000004 alt_instruction_exception_handler
000102c2 g     O .rwdata	00000002 OSTaskNameSize
00002f70 g     F .text	00000054 _isatty_r
000036c8 g     F .text	000000d8 alt_main
000003b0 g     F .text	000000c0 _puts_r
000190c8 g     O .bss	00000100 alt_irq
00002c98 g     F .text	00000060 _lseek_r
00008464 g     F .text	000000d4 OS_MemInit
000102f8 g       *ABS*	00000000 __flash_rwdata_start
0000c05c g     F .text	00000068 OSTimeSet
00004108 g     F .text	000006a0 OSEventPendMulti
000191c8 g       *ABS*	00000000 __alt_heap_start
0000ddf8 g     F .text	00000024 OSTaskCreateHook
00011ea4 g     O .bss	00002000 task1_stk
0001029a g     O .rwdata	00000002 OSMboxEn
00004800 g     F .text	000000a4 OSIntEnter
0000224c g     F .text	0000005c __sseek
0000086c g     F .text	00000010 __sinit
000102aa g     O .rwdata	00000002 OSQEn
000006d4 g     F .text	00000068 __sfmoreglue
00003dbc g     F .text	000000dc __malloc_unlock
0000de60 g     F .text	00000020 OSTaskStatHook
00011e1c g     O .bss	00000001 OSLockNesting
000102e8 g     O .rwdata	00000002 OSDataSize
00011e1d g     O .bss	00000001 OSRunning
00001938 g     F .text	0000015c memmove
0000dea0 g     F .text	00000020 OSInitHookBegin
000102e0 g     O .rwdata	00000002 OSTmrSize
00000854 g     F .text	00000018 _cleanup
00011e20 g     O .bss	00000004 OSIdleCtr
0000dba8 g     F .text	00000024 altera_nios2_gen2_irq_init
0000dc78 g       .text	00000000 OSStartTsk
00006090 g     F .text	00000334 OS_TCBInit
00000000 g     F .entry	0000001c __reset
000102e6 g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
00010286 g     O .rwdata	00000002 OSEventSize
00011e24 g     O .bss	00000001 OSPrioHighRdy
00002f14 g     F .text	0000005c _fstat_r
0000de1c g     F .text	00000024 OSTaskDelHook
00011df8 g     O .bss	00000004 errno
000021c8 g     F .text	00000008 __seofread
0000dc58 g       .text	00000000 OSStartHighRdy
0000a958 g     F .text	000001f4 OSTaskCreateExt
00007488 g     F .text	00000068 OSFlagPendGetFlagsRdy
000102c6 g     O .rwdata	00000002 OSTaskStatStkSize
00006554 g     F .text	00000308 OSFlagAccept
00008b3c g     F .text	000000b8 OSQFlush
00008538 g     F .text	00000140 OSQAccept
00011e04 g     O .bss	00000004 alt_argv
00018244 g       *ABS*	00000000 _gp
0000a79c g     F .text	000001bc OSTaskCreate
0000a25c g     F .text	00000540 OSTaskChangePrio
00011e18 g     O .bss	00000004 alt_heapsem
000063c4 g     F .text	00000190 OSDebugInit
0000ab4c g     F .text	000003e0 OSTaskDel
0000f058 g     O .rwdata	00000180 alt_fd_list
00015ea4 g     O .bss	00000370 OSFlagTbl
000054d8 g     F .text	000000b8 OS_EventTaskRemove
0000df24 g     F .text	00000090 alt_find_dev
000017f0 g     F .text	00000148 memcpy
000102b0 g     O .rwdata	00000002 OSRdyTblSize
00000524 g     F .text	0000000c _cleanup_r
0000d714 g     F .text	0000007c alt_io_redirect
0000e68c g       *ABS*	00000000 __DTOR_END__
00000470 g     F .text	00000014 puts
0000e254 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00003e98 g     F .text	00000128 OSEventNameGet
00010294 g     O .rwdata	00000002 OSFlagMax
000048a4 g     F .text	00000164 OSIntExit
000102ce g     O .rwdata	00000002 OSTCBSize
00011e25 g     O .bss	00000001 OSPrioCur
0000c96c g     F .text	000002cc altera_avalon_jtag_uart_read
000030bc g     F .text	00000064 .hidden __udivsi3
00003414 g     F .text	000000a4 isatty
000102b4 g     O .rwdata	00000002 OSStkWidth
000102a8 g     O .rwdata	00000002 OSPtrSize
00010288 g     O .rwdata	00000002 OSEventTblSize
0000dbcc g       .text	00000000 OSCtxSw
0000e1c4 g     F .text	00000090 alt_icache_flush
00011df4 g     O .bss	00000004 __malloc_top_pad
00011e28 g     O .bss	00000004 OSTCBList
00011dfc g     O .bss	00000004 alt_fd_list_lock
000008bc g     F .text	000004bc __sfvwrite_r
00016214 g     O .bss	00000c30 OSMemTbl
00011e2c g     O .bss	00000001 OSTickStepState
00002120 g     F .text	00000054 _sbrk_r
000102ac g     O .rwdata	00000002 OSQMax
00016e44 g     O .bss	00000800 OSTaskStatStk
00008090 g     F .text	000000f8 OSMemNameGet
0001028c g     O .rwdata	00000002 OSFlagEn
00002eb4 g     F .text	00000060 _read_r
000102d2 g     O .rwdata	00000002 OSTimeTickHookEn
0000905c g     F .text	00000168 OSQPost
00007d08 g     F .text	000000a4 OS_FlagUnlink
00010264 g     O .rwdata	00000004 alt_max_fd
00005b58 g     F .text	00000068 OS_MemCopy
00005bc0 g     F .text	00000118 OS_Sched
000024b8 g     F .text	000000f0 _fclose_r
00007fa0 g     F .text	000000f0 OSMemGet
0000b22c g     F .text	000001c4 OSTaskNameSet
00002834 g     F .text	00000030 fflush
00011df0 g     O .bss	00000004 __malloc_max_sbrked_mem
00011e30 g     O .bss	00000004 OSCtxSwCtr
0000de80 g     F .text	00000020 OSTimeTickHook
00010296 g     O .rwdata	00000002 OSFlagNameSize
00005590 g     F .text	00000100 OS_EventTaskRemoveMulti
00005320 g     F .text	000001b8 OS_EventTaskWaitMulti
000102ae g     O .rwdata	00000002 OSQSize
000035f4 g     F .text	000000d4 lseek
00009b64 g     F .text	0000026c OSSemPend
00010244 g     O .rwdata	00000004 _global_impure_ptr
00001bbc g     F .text	00000564 _realloc_r
00010298 g     O .rwdata	00000002 OSLowestPrio
000191c8 g       *ABS*	00000000 __bss_end
0000d560 g     F .text	000000f0 alt_iic_isr_register
0000df00 g     F .text	00000024 OSTCBInitHook
000102de g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0000daa0 g     F .text	00000108 alt_tick
00010280 g     O .rwdata	00000002 OSEventEn
000102da g     O .rwdata	00000002 OSTmrCfgNameSize
0000088c g     F .text	00000018 __fp_lock_all
0000d514 g     F .text	0000004c alt_ic_irq_enabled
00007b10 g     F .text	000000e8 OS_FlagInit
0000da04 g     F .text	0000009c alt_alarm_stop
000102bc g     O .rwdata	00000002 OSTaskIdleStkSize
00011e6c g     O .bss	00000004 alt_irq_active
0000974c g     F .text	000000b0 OSSemAccept
000082a4 g     F .text	000000d8 OSMemPut
00007dac g     F .text	000001f4 OSMemCreate
00011e34 g     O .bss	00000004 OSIdleCtrMax
000000fc g     F .exceptions	000000d4 alt_irq_handler
0000f030 g     O .rwdata	00000028 alt_dev_null
000102d0 g     O .rwdata	00000002 OSTicksPerSec
0000dbcc g       .text	00000000 OSIntCtxSw
0000d150 g     F .text	00000048 alt_dcache_flush_all
00011e38 g     O .bss	00000004 OSTCBFreeList
000102f8 g       *ABS*	00000000 __ram_rwdata_end
00009dd0 g     F .text	0000016c OSSemPendAbort
0001025c g     O .rwdata	00000008 alt_dev_list
00003a50 g     F .text	000000f8 write
000102d4 g     O .rwdata	00000002 OSVersionNbr
0000e804 g       *ABS*	00000000 __ram_rodata_end
00003314 g     F .text	000000b0 fstat
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0001027c g     O .rwdata	00000004 OSEndiannessTest
00003120 g     F .text	00000058 .hidden __umodsi3
0001028e g     O .rwdata	00000002 OSFlagGrpSize
000191c8 g       *ABS*	00000000 end
0000c2fc g     F .text	00000150 altera_avalon_jtag_uart_init
00005e98 g     F .text	0000012c OS_TaskStat
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0000e68c g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0000cf84 g     F .text	0000008c alt_avalon_timer_sc_init
0000cc38 g     F .text	000002d4 altera_avalon_jtag_uart_write
0000087c g     F .text	00000004 __sfp_lock_acquire
0000170c g     F .text	000000e4 memchr
00005b04 g     F .text	00000054 OS_MemClr
0000dc9c g     F .text	0000015c OSTaskStkInit
00000290 g     F .text	00000038 task1
00002988 g     F .text	00000310 _free_r
00004ffc g     F .text	000001b4 OS_EventTaskRdy
0000e4d0 g     F .text	00000180 __call_exitprocs
00011e3c g     O .bss	00000001 OSCPUUsage
0001024c g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000004c _start
000002c8 g     F .text	00000038 task2
00011e70 g     O .bss	00000004 _alt_tick_rate
00008bf4 g     F .text	000002fc OSQPend
0000bb60 g     F .text	0000014c OSTimeDly
00011e74 g     O .bss	00000004 _alt_nticks
000037f0 g     F .text	000000fc read
0000c134 g     F .text	00000064 alt_sys_init
0000e3b8 g     F .text	00000118 __register_exitproc
00011e3d g     O .bss	00000001 OSTaskCtr
0000bcac g     F .text	0000015c OSTimeDlyHMSM
0000c814 g     F .text	00000068 altera_avalon_jtag_uart_close
0000e804 g       *ABS*	00000000 __ram_rwdata_start
0000e68c g       *ABS*	00000000 __ram_rodata_start
00011e7c g     O .bss	00000028 __malloc_current_mallinfo
00010282 g     O .rwdata	00000002 OSEventMax
00009f3c g     F .text	00000110 OSSemPost
00004ac0 g     F .text	00000110 OSSchedUnlock
0000c198 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000e0c8 g     F .text	000000fc alt_get_fd
00011e40 g     O .bss	00000004 OSMemFreeList
00004c78 g     F .text	000000d0 OSStatInit
00007884 g     F .text	000000c4 OSFlagQuery
000102b8 g     O .rwdata	00000002 OSTaskCreateExtEn
00002464 g     F .text	00000054 _close_r
0000e33c g     F .text	0000007c memcmp
00004fdc g     F .text	00000020 OS_Dummy
0000c258 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000191c8 g       *ABS*	00000000 __alt_stack_base
0000c2a8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00002310 g     F .text	00000154 __swsetup_r
00017644 g     O .bss	000001e0 OSQTbl
0000073c g     F .text	00000118 __sfp
0000ec28 g     O .rwdata	00000408 __malloc_av_
00000888 g     F .text	00000004 __sinit_lock_release
00011e44 g     O .bss	00000004 OSTCBHighRdy
00002174 g     F .text	00000054 __sread
00011e48 g     O .bss	00000004 OSQFreeList
0000dfb4 g     F .text	00000114 alt_find_file
0000d1e8 g     F .text	000000a4 alt_dev_llist_insert
00003c84 g     F .text	00000138 __malloc_lock
00003950 g     F .text	000000b0 sbrk
00003fc0 g     F .text	00000148 OSEventNameSet
000027d8 g     F .text	0000005c _fflush_r
00011e4c g     O .bss	00000001 OSRdyGrp
00011dec g       *ABS*	00000000 __bss_start
00001a94 g     F .text	00000128 memset
00000300 g     F .text	000000b0 main
00011e08 g     O .bss	00000004 alt_envp
00011dec g     O .bss	00000004 __malloc_max_total_mem
0000c1f8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000e6d4 g     O .rodata	00000100 OSUnMapTbl
000102b2 g     O .rwdata	00000002 OSSemEn
000074f0 g     F .text	00000394 OSFlagPost
000022a8 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
000025a8 g     F .text	00000014 fclose
000051b0 g     F .text	00000170 OS_EventTaskWait
00013ea4 g     O .bss	00002000 task2_stk
00005fc4 g     F .text	000000cc OS_TaskStatStkChk
0000af2c g     F .text	00000158 OSTaskDelReq
00000f00 g     F .text	0000080c _malloc_r
00010268 g     O .rwdata	00000004 alt_errno
00004bd0 g     F .text	000000a8 OSStart
00003c1c g     F .text	00000068 __env_unlock
00000d78 g     F .text	000000c4 _fwalk
0000b3f0 g     F .text	000001f8 OSTaskResume
0000837c g     F .text	000000e8 OSMemQuery
000102c4 g     O .rwdata	00000002 OSTaskStatEn
0001029e g     O .rwdata	00000002 OSMemMax
000091c4 g     F .text	00000170 OSQPostFront
00002fc4 g     F .text	00000084 .hidden __divsi3
00011e4d g     O .bss	00000003 OSRdyTbl
00010278 g     O .rwdata	00000002 OSDebugEn
00002864 g     F .text	00000124 _malloc_trim_r
0000e68c g       *ABS*	00000000 __CTOR_END__
00010290 g     O .rwdata	00000002 OSFlagNodeSize
000102d8 g     O .rwdata	00000002 OSTmrCfgMax
00008678 g     F .text	000001fc OSQCreate
0000b084 g     F .text	000001a8 OSTaskNameGet
0000e68c g       *ABS*	00000000 __flash_rodata_start
00009334 g     F .text	0000020c OSQPostOpt
00004d48 g     F .text	00000274 OSTimeTick
000102c0 g     O .rwdata	00000002 OSTaskMax
0000e68c g       *ABS*	00000000 __DTOR_LIST__
000097fc g     F .text	00000100 OSSemCreate
000102e4 g     O .rwdata	00000002 OSTmrWheelSize
000102ba g     O .rwdata	00000002 OSTaskDelEn
0000a04c g     F .text	00000110 OSSemQuery
00008874 g     F .text	000002c8 OSQDel
00008ef0 g     F .text	0000016c OSQPendAbort
0000c0fc g     F .text	00000038 alt_irq_init
000038ec g     F .text	00000064 alt_release_fd
0000e2f0 g     F .text	00000014 atexit
000022b0 g     F .text	00000060 _write_r
00004a08 g     F .text	000000b8 OSSchedLock
0000685c g     F .text	00000128 OSFlagCreate
00010248 g     O .rwdata	00000004 _impure_ptr
00011e00 g     O .bss	00000004 alt_argc
000025bc g     F .text	0000021c __sflush_r
0000d2ec g     F .text	00000060 _do_dtors
0001028a g     O .rwdata	00000002 OSEventMultiEn
00006984 g     F .text	00000270 OSFlagDel
00011e50 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
00006e78 g     F .text	00000610 OSFlagPend
000102d6 g     O .rwdata	00000002 OSTmrEn
000008a4 g     F .text	00000018 __fp_unlock_all
00010254 g     O .rwdata	00000008 alt_fs_list
00005d64 g     F .text	00000074 OS_StrCopy
000102a0 g     O .rwdata	00000002 OSMemNameSize
0000dec0 g     F .text	00000020 OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
000102cc g     O .rwdata	00000002 OSTCBPrioTblMax
000102c8 g     O .rwdata	00000002 OSTaskStatStkChkEn
0000d380 g     F .text	00000050 alt_ic_isr_register
0001029c g     O .rwdata	00000002 OSMemEn
000102a6 g     O .rwdata	00000002 OSMutexEn
000102f8 g       *ABS*	00000000 _edata
000191c8 g       *ABS*	00000000 _end
00011e54 g     O .bss	00000001 OSIntNesting
00000244 g       *ABS*	00000000 __ram_exceptions_end
0000c87c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000be08 g     F .text	000001f0 OSTimeDlyResume
00006d24 g     F .text	00000154 OSFlagNameSet
0000b5e8 g     F .text	000001c8 OSTaskStkChk
0000d470 g     F .text	000000a4 alt_ic_irq_disable
000102a2 g     O .rwdata	00000002 OSMemSize
000021d0 g     F .text	0000007c __swrite
00010250 g     O .rwdata	00000004 __malloc_trim_threshold
00011e58 g     O .bss	00000004 OSTCBCur
0000e304 g     F .text	00000038 exit
000102a4 g     O .rwdata	00000002 OSMemTblSize
00000e3c g     F .text	000000c4 _fwalk_reent
00003048 g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000880 g     F .text	00000004 __sfp_lock_release
000047a8 g     F .text	00000058 OSInit
0000b9c4 g     F .text	0000012c OSTaskQuery
0000969c g     F .text	000000b0 OS_QInit
00005dd8 g     F .text	00000054 OS_StrLen
00008188 g     F .text	0000011c OSMemNameSet
000102be g     O .rwdata	00000002 OSTaskProfileEn
00011e5c g     O .bss	00000004 OSTime
00017824 g     O .bss	00000800 OSTaskIdleStk
0000e650 g     F .text	0000003c _exit
0000d010 g     F .text	00000140 alt_alarm_start
00006bf4 g     F .text	00000130 OSFlagNameGet
0000bff8 g     F .text	00000064 OSTimeGet
00002cf8 g     F .text	000001bc __smakebuf_r
00000484 g     F .text	00000098 strlen
0000de40 g     F .text	00000020 OSTaskSwHook
0000d8ac g     F .text	00000158 open
00018024 g     O .bss	00000b40 OSEventTbl
00018b64 g     O .bss	00000510 OSTCBTbl
0000a15c g     F .text	00000100 OSSemSet
04020000 g       *ABS*	00000000 __alt_mem_SRAM
0000d34c g     F .text	00000034 alt_icache_flush_all
000102ec g     O .rwdata	00000004 alt_priority_mask
000098fc g     F .text	00000268 OSSemDel
00011e60 g     O .bss	00000004 OSFlagFreeList
0000d3d0 g     F .text	000000a0 alt_ic_irq_enable
00010284 g     O .rwdata	00000002 OSEventNameSize
00011e64 g     O .bss	00000001 OSStatRdy
00019074 g     O .bss	00000054 OSTCBPrioTbl
00003b48 g     F .text	000000d4 __env_lock
000102ca g     O .rwdata	00000002 OSTaskSwHookEn
000102f0 g     O .rwdata	00000008 alt_alarm_list
00010292 g     O .rwdata	00000002 OSFlagWidth
0000d28c g     F .text	00000060 _do_ctors
000031c8 g     F .text	000000d0 close
00011e10 g     O .bss	00000004 alt_envsem
00011e68 g     O .bss	00000004 OSIdleCtrRun
00004fbc g     F .text	00000020 OSVersion
000102dc g     O .rwdata	00000002 OSTmrCfgWheelSize
00003520 g     F .text	00000084 alt_load
0000baf0 g     F .text	00000070 OS_TaskStkClr
000102b6 g     O .rwdata	00000002 OSTaskCreateEn
00005690 g     F .text	00000068 OS_EventWaitListInit
0000dee0 g     F .text	00000020 OSTaskIdleHook
00000884 g     F .text	00000004 __sinit_lock_acquire
0000b7b0 g     F .text	00000214 OSTaskSuspend
00005e2c g     F .text	0000006c OS_TaskIdle
000102e2 g     O .rwdata	00000002 OSTmrTblSize
00009540 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	00048000 	call	4800 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	008000b4 	movhi	r2,2
 140:	10a43204 	addi	r2,r2,-28472
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	10a43204 	addi	r2,r2,-28472
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	00048a40 	call	48a4 <OSIntExit>
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a70d17 	ldw	r2,-25548(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a70d17 	ldw	r2,-25548(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     24c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     250:	00bffd16 	blt	zero,r2,248 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     254:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     25c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     260:	d6a09114 	ori	gp,gp,33348
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     264:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     268:	10877b14 	ori	r2,r2,7660

    movhi r3, %hi(__bss_end)
     26c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     270:	18e47214 	ori	r3,r3,37320

    beq r2, r3, 1f
     274:	10c00326 	beq	r2,r3,284 <_start+0x40>

0:
    stw zero, (r2)
     278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     27c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     280:	10fffd36 	bltu	r2,r3,278 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     284:	00035200 	call	3520 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     288:	00036c80 	call	36c8 <alt_main>

0000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     28c:	003fff06 	br	28c <alt_after_alt_main>

00000290 <task1>:
#define TASK1_PRIORITY      1
#define TASK2_PRIORITY      2

/* Prints "Hello World" and sleeps for three seconds */
void task1(void* pdata)
{
     290:	defffd04 	addi	sp,sp,-12
     294:	dfc00215 	stw	ra,8(sp)
     298:	df000115 	stw	fp,4(sp)
     29c:	df000104 	addi	fp,sp,4
     2a0:	e13fff15 	stw	r4,-4(fp)
  while (1)
  { 
    printf("Hello from task1\n");
     2a4:	01000074 	movhi	r4,1
     2a8:	2139a304 	addi	r4,r4,-6516
     2ac:	00004700 	call	470 <puts>
    OSTimeDlyHMSM(0, 0, 3, 0);
     2b0:	000f883a 	mov	r7,zero
     2b4:	018000c4 	movi	r6,3
     2b8:	000b883a 	mov	r5,zero
     2bc:	0009883a 	mov	r4,zero
     2c0:	000bcac0 	call	bcac <OSTimeDlyHMSM>
  }
     2c4:	003ff706 	br	2a4 <task1+0x14>

000002c8 <task2>:
}
/* Prints "Hello World" and sleeps for three seconds */
void task2(void* pdata)
{
     2c8:	defffd04 	addi	sp,sp,-12
     2cc:	dfc00215 	stw	ra,8(sp)
     2d0:	df000115 	stw	fp,4(sp)
     2d4:	df000104 	addi	fp,sp,4
     2d8:	e13fff15 	stw	r4,-4(fp)
  while (1)
  { 
    printf("Hello from task2\n");
     2dc:	01000074 	movhi	r4,1
     2e0:	2139a804 	addi	r4,r4,-6496
     2e4:	00004700 	call	470 <puts>
    OSTimeDlyHMSM(0, 0, 3, 0);
     2e8:	000f883a 	mov	r7,zero
     2ec:	018000c4 	movi	r6,3
     2f0:	000b883a 	mov	r5,zero
     2f4:	0009883a 	mov	r4,zero
     2f8:	000bcac0 	call	bcac <OSTimeDlyHMSM>
  }
     2fc:	003ff706 	br	2dc <task2+0x14>

00000300 <main>:
}
/* The main function creates two task and starts multi-tasking */
int main(void)
{
     300:	defff904 	addi	sp,sp,-28
     304:	dfc00615 	stw	ra,24(sp)
     308:	df000515 	stw	fp,20(sp)
     30c:	df000504 	addi	fp,sp,20
	OSInit();
     310:	00047a80 	call	47a8 <OSInit>
  
  OSTaskCreateExt(task1,
     314:	d8000415 	stw	zero,16(sp)
     318:	d8000315 	stw	zero,12(sp)
     31c:	00820004 	movi	r2,2048
     320:	d8800215 	stw	r2,8(sp)
     324:	00800074 	movhi	r2,1
     328:	1087a904 	addi	r2,r2,7844
     32c:	d8800115 	stw	r2,4(sp)
     330:	00800044 	movi	r2,1
     334:	d8800015 	stw	r2,0(sp)
     338:	01c00044 	movi	r7,1
     33c:	01800074 	movhi	r6,1
     340:	318fa804 	addi	r6,r6,16032
     344:	000b883a 	mov	r5,zero
     348:	01000034 	movhi	r4,0
     34c:	2100a404 	addi	r4,r4,656
     350:	000a9580 	call	a958 <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);
              
               
  OSTaskCreateExt(task2,
     354:	d8000415 	stw	zero,16(sp)
     358:	d8000315 	stw	zero,12(sp)
     35c:	00820004 	movi	r2,2048
     360:	d8800215 	stw	r2,8(sp)
     364:	00800074 	movhi	r2,1
     368:	108fa904 	addi	r2,r2,16036
     36c:	d8800115 	stw	r2,4(sp)
     370:	00800084 	movi	r2,2
     374:	d8800015 	stw	r2,0(sp)
     378:	01c00084 	movi	r7,2
     37c:	01800074 	movhi	r6,1
     380:	3197a804 	addi	r6,r6,24224
     384:	000b883a 	mov	r5,zero
     388:	01000034 	movhi	r4,0
     38c:	2100b204 	addi	r4,r4,712
     390:	000a9580 	call	a958 <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSStart();
     394:	0004bd00 	call	4bd0 <OSStart>
  return 0;
     398:	0005883a 	mov	r2,zero
}
     39c:	e037883a 	mov	sp,fp
     3a0:	dfc00117 	ldw	ra,4(sp)
     3a4:	df000017 	ldw	fp,0(sp)
     3a8:	dec00204 	addi	sp,sp,8
     3ac:	f800283a 	ret

000003b0 <_puts_r>:
     3b0:	defff604 	addi	sp,sp,-40
     3b4:	dc000715 	stw	r16,28(sp)
     3b8:	2021883a 	mov	r16,r4
     3bc:	2809883a 	mov	r4,r5
     3c0:	dc400815 	stw	r17,32(sp)
     3c4:	dfc00915 	stw	ra,36(sp)
     3c8:	2823883a 	mov	r17,r5
     3cc:	00004840 	call	484 <strlen>
     3d0:	10c00044 	addi	r3,r2,1
     3d4:	d8800115 	stw	r2,4(sp)
     3d8:	00800074 	movhi	r2,1
     3dc:	10b9ad04 	addi	r2,r2,-6476
     3e0:	d8800215 	stw	r2,8(sp)
     3e4:	00800044 	movi	r2,1
     3e8:	d8800315 	stw	r2,12(sp)
     3ec:	00800084 	movi	r2,2
     3f0:	dc400015 	stw	r17,0(sp)
     3f4:	d8c00615 	stw	r3,24(sp)
     3f8:	dec00415 	stw	sp,16(sp)
     3fc:	d8800515 	stw	r2,20(sp)
     400:	80000226 	beq	r16,zero,40c <_puts_r+0x5c>
     404:	80800e17 	ldw	r2,56(r16)
     408:	10001426 	beq	r2,zero,45c <_puts_r+0xac>
     40c:	81400217 	ldw	r5,8(r16)
     410:	2880030b 	ldhu	r2,12(r5)
     414:	10c8000c 	andi	r3,r2,8192
     418:	1800061e 	bne	r3,zero,434 <_puts_r+0x84>
     41c:	29001917 	ldw	r4,100(r5)
     420:	00f7ffc4 	movi	r3,-8193
     424:	10880014 	ori	r2,r2,8192
     428:	20c6703a 	and	r3,r4,r3
     42c:	2880030d 	sth	r2,12(r5)
     430:	28c01915 	stw	r3,100(r5)
     434:	d9800404 	addi	r6,sp,16
     438:	8009883a 	mov	r4,r16
     43c:	00008bc0 	call	8bc <__sfvwrite_r>
     440:	1000091e 	bne	r2,zero,468 <_puts_r+0xb8>
     444:	00800284 	movi	r2,10
     448:	dfc00917 	ldw	ra,36(sp)
     44c:	dc400817 	ldw	r17,32(sp)
     450:	dc000717 	ldw	r16,28(sp)
     454:	dec00a04 	addi	sp,sp,40
     458:	f800283a 	ret
     45c:	8009883a 	mov	r4,r16
     460:	000086c0 	call	86c <__sinit>
     464:	003fe906 	br	40c <_puts_r+0x5c>
     468:	00bfffc4 	movi	r2,-1
     46c:	003ff606 	br	448 <_puts_r+0x98>

00000470 <puts>:
     470:	00800074 	movhi	r2,1
     474:	10809204 	addi	r2,r2,584
     478:	200b883a 	mov	r5,r4
     47c:	11000017 	ldw	r4,0(r2)
     480:	00003b01 	jmpi	3b0 <_puts_r>

00000484 <strlen>:
     484:	208000cc 	andi	r2,r4,3
     488:	10002026 	beq	r2,zero,50c <strlen+0x88>
     48c:	20800007 	ldb	r2,0(r4)
     490:	10002026 	beq	r2,zero,514 <strlen+0x90>
     494:	2005883a 	mov	r2,r4
     498:	00000206 	br	4a4 <strlen+0x20>
     49c:	10c00007 	ldb	r3,0(r2)
     4a0:	18001826 	beq	r3,zero,504 <strlen+0x80>
     4a4:	10800044 	addi	r2,r2,1
     4a8:	10c000cc 	andi	r3,r2,3
     4ac:	183ffb1e 	bne	r3,zero,49c <strlen+0x18>
     4b0:	10c00017 	ldw	r3,0(r2)
     4b4:	01ffbff4 	movhi	r7,65279
     4b8:	39ffbfc4 	addi	r7,r7,-257
     4bc:	00ca303a 	nor	r5,zero,r3
     4c0:	01a02074 	movhi	r6,32897
     4c4:	19c7883a 	add	r3,r3,r7
     4c8:	31a02004 	addi	r6,r6,-32640
     4cc:	1946703a 	and	r3,r3,r5
     4d0:	1986703a 	and	r3,r3,r6
     4d4:	1800091e 	bne	r3,zero,4fc <strlen+0x78>
     4d8:	10800104 	addi	r2,r2,4
     4dc:	10c00017 	ldw	r3,0(r2)
     4e0:	19cb883a 	add	r5,r3,r7
     4e4:	00c6303a 	nor	r3,zero,r3
     4e8:	28c6703a 	and	r3,r5,r3
     4ec:	1986703a 	and	r3,r3,r6
     4f0:	183ff926 	beq	r3,zero,4d8 <strlen+0x54>
     4f4:	00000106 	br	4fc <strlen+0x78>
     4f8:	10800044 	addi	r2,r2,1
     4fc:	10c00007 	ldb	r3,0(r2)
     500:	183ffd1e 	bne	r3,zero,4f8 <strlen+0x74>
     504:	1105c83a 	sub	r2,r2,r4
     508:	f800283a 	ret
     50c:	2005883a 	mov	r2,r4
     510:	003fe706 	br	4b0 <strlen+0x2c>
     514:	0005883a 	mov	r2,zero
     518:	f800283a 	ret

0000051c <__fp_unlock>:
     51c:	0005883a 	mov	r2,zero
     520:	f800283a 	ret

00000524 <_cleanup_r>:
     524:	01400034 	movhi	r5,0
     528:	29492e04 	addi	r5,r5,9400
     52c:	0000e3c1 	jmpi	e3c <_fwalk_reent>

00000530 <__sinit.part.1>:
     530:	defff704 	addi	sp,sp,-36
     534:	00c00034 	movhi	r3,0
     538:	dfc00815 	stw	ra,32(sp)
     53c:	ddc00715 	stw	r23,28(sp)
     540:	dd800615 	stw	r22,24(sp)
     544:	dd400515 	stw	r21,20(sp)
     548:	dd000415 	stw	r20,16(sp)
     54c:	dcc00315 	stw	r19,12(sp)
     550:	dc800215 	stw	r18,8(sp)
     554:	dc400115 	stw	r17,4(sp)
     558:	dc000015 	stw	r16,0(sp)
     55c:	18c14904 	addi	r3,r3,1316
     560:	24000117 	ldw	r16,4(r4)
     564:	20c00f15 	stw	r3,60(r4)
     568:	2080bb04 	addi	r2,r4,748
     56c:	00c000c4 	movi	r3,3
     570:	20c0b915 	stw	r3,740(r4)
     574:	2080ba15 	stw	r2,744(r4)
     578:	2000b815 	stw	zero,736(r4)
     57c:	05c00204 	movi	r23,8
     580:	00800104 	movi	r2,4
     584:	2025883a 	mov	r18,r4
     588:	b80d883a 	mov	r6,r23
     58c:	81001704 	addi	r4,r16,92
     590:	000b883a 	mov	r5,zero
     594:	80000015 	stw	zero,0(r16)
     598:	80000115 	stw	zero,4(r16)
     59c:	80000215 	stw	zero,8(r16)
     5a0:	8080030d 	sth	r2,12(r16)
     5a4:	80001915 	stw	zero,100(r16)
     5a8:	8000038d 	sth	zero,14(r16)
     5ac:	80000415 	stw	zero,16(r16)
     5b0:	80000515 	stw	zero,20(r16)
     5b4:	80000615 	stw	zero,24(r16)
     5b8:	0001a940 	call	1a94 <memset>
     5bc:	05800034 	movhi	r22,0
     5c0:	94400217 	ldw	r17,8(r18)
     5c4:	05400034 	movhi	r21,0
     5c8:	05000034 	movhi	r20,0
     5cc:	04c00034 	movhi	r19,0
     5d0:	b5885d04 	addi	r22,r22,8564
     5d4:	ad487404 	addi	r21,r21,8656
     5d8:	a5089304 	addi	r20,r20,8780
     5dc:	9cc8aa04 	addi	r19,r19,8872
     5e0:	85800815 	stw	r22,32(r16)
     5e4:	85400915 	stw	r21,36(r16)
     5e8:	85000a15 	stw	r20,40(r16)
     5ec:	84c00b15 	stw	r19,44(r16)
     5f0:	84000715 	stw	r16,28(r16)
     5f4:	00800284 	movi	r2,10
     5f8:	8880030d 	sth	r2,12(r17)
     5fc:	00800044 	movi	r2,1
     600:	b80d883a 	mov	r6,r23
     604:	89001704 	addi	r4,r17,92
     608:	000b883a 	mov	r5,zero
     60c:	88000015 	stw	zero,0(r17)
     610:	88000115 	stw	zero,4(r17)
     614:	88000215 	stw	zero,8(r17)
     618:	88001915 	stw	zero,100(r17)
     61c:	8880038d 	sth	r2,14(r17)
     620:	88000415 	stw	zero,16(r17)
     624:	88000515 	stw	zero,20(r17)
     628:	88000615 	stw	zero,24(r17)
     62c:	0001a940 	call	1a94 <memset>
     630:	94000317 	ldw	r16,12(r18)
     634:	00800484 	movi	r2,18
     638:	8c400715 	stw	r17,28(r17)
     63c:	8d800815 	stw	r22,32(r17)
     640:	8d400915 	stw	r21,36(r17)
     644:	8d000a15 	stw	r20,40(r17)
     648:	8cc00b15 	stw	r19,44(r17)
     64c:	8080030d 	sth	r2,12(r16)
     650:	00800084 	movi	r2,2
     654:	80000015 	stw	zero,0(r16)
     658:	80000115 	stw	zero,4(r16)
     65c:	80000215 	stw	zero,8(r16)
     660:	80001915 	stw	zero,100(r16)
     664:	8080038d 	sth	r2,14(r16)
     668:	80000415 	stw	zero,16(r16)
     66c:	80000515 	stw	zero,20(r16)
     670:	80000615 	stw	zero,24(r16)
     674:	b80d883a 	mov	r6,r23
     678:	000b883a 	mov	r5,zero
     67c:	81001704 	addi	r4,r16,92
     680:	0001a940 	call	1a94 <memset>
     684:	00800044 	movi	r2,1
     688:	84000715 	stw	r16,28(r16)
     68c:	85800815 	stw	r22,32(r16)
     690:	85400915 	stw	r21,36(r16)
     694:	85000a15 	stw	r20,40(r16)
     698:	84c00b15 	stw	r19,44(r16)
     69c:	90800e15 	stw	r2,56(r18)
     6a0:	dfc00817 	ldw	ra,32(sp)
     6a4:	ddc00717 	ldw	r23,28(sp)
     6a8:	dd800617 	ldw	r22,24(sp)
     6ac:	dd400517 	ldw	r21,20(sp)
     6b0:	dd000417 	ldw	r20,16(sp)
     6b4:	dcc00317 	ldw	r19,12(sp)
     6b8:	dc800217 	ldw	r18,8(sp)
     6bc:	dc400117 	ldw	r17,4(sp)
     6c0:	dc000017 	ldw	r16,0(sp)
     6c4:	dec00904 	addi	sp,sp,36
     6c8:	f800283a 	ret

000006cc <__fp_lock>:
     6cc:	0005883a 	mov	r2,zero
     6d0:	f800283a 	ret

000006d4 <__sfmoreglue>:
     6d4:	defffc04 	addi	sp,sp,-16
     6d8:	dc400115 	stw	r17,4(sp)
     6dc:	2c7fffc4 	addi	r17,r5,-1
     6e0:	8c401a24 	muli	r17,r17,104
     6e4:	dc800215 	stw	r18,8(sp)
     6e8:	2825883a 	mov	r18,r5
     6ec:	89401d04 	addi	r5,r17,116
     6f0:	dc000015 	stw	r16,0(sp)
     6f4:	dfc00315 	stw	ra,12(sp)
     6f8:	0000f000 	call	f00 <_malloc_r>
     6fc:	1021883a 	mov	r16,r2
     700:	10000726 	beq	r2,zero,720 <__sfmoreglue+0x4c>
     704:	11000304 	addi	r4,r2,12
     708:	10000015 	stw	zero,0(r2)
     70c:	14800115 	stw	r18,4(r2)
     710:	11000215 	stw	r4,8(r2)
     714:	89801a04 	addi	r6,r17,104
     718:	000b883a 	mov	r5,zero
     71c:	0001a940 	call	1a94 <memset>
     720:	8005883a 	mov	r2,r16
     724:	dfc00317 	ldw	ra,12(sp)
     728:	dc800217 	ldw	r18,8(sp)
     72c:	dc400117 	ldw	r17,4(sp)
     730:	dc000017 	ldw	r16,0(sp)
     734:	dec00404 	addi	sp,sp,16
     738:	f800283a 	ret

0000073c <__sfp>:
     73c:	defffb04 	addi	sp,sp,-20
     740:	dc000015 	stw	r16,0(sp)
     744:	04000074 	movhi	r16,1
     748:	84009104 	addi	r16,r16,580
     74c:	dcc00315 	stw	r19,12(sp)
     750:	2027883a 	mov	r19,r4
     754:	81000017 	ldw	r4,0(r16)
     758:	dfc00415 	stw	ra,16(sp)
     75c:	dc800215 	stw	r18,8(sp)
     760:	20800e17 	ldw	r2,56(r4)
     764:	dc400115 	stw	r17,4(sp)
     768:	1000021e 	bne	r2,zero,774 <__sfp+0x38>
     76c:	00005300 	call	530 <__sinit.part.1>
     770:	81000017 	ldw	r4,0(r16)
     774:	2480b804 	addi	r18,r4,736
     778:	047fffc4 	movi	r17,-1
     77c:	91000117 	ldw	r4,4(r18)
     780:	94000217 	ldw	r16,8(r18)
     784:	213fffc4 	addi	r4,r4,-1
     788:	20000a16 	blt	r4,zero,7b4 <__sfp+0x78>
     78c:	8080030f 	ldh	r2,12(r16)
     790:	10000c26 	beq	r2,zero,7c4 <__sfp+0x88>
     794:	80c01d04 	addi	r3,r16,116
     798:	00000206 	br	7a4 <__sfp+0x68>
     79c:	18bfe60f 	ldh	r2,-104(r3)
     7a0:	10000826 	beq	r2,zero,7c4 <__sfp+0x88>
     7a4:	213fffc4 	addi	r4,r4,-1
     7a8:	1c3ffd04 	addi	r16,r3,-12
     7ac:	18c01a04 	addi	r3,r3,104
     7b0:	247ffa1e 	bne	r4,r17,79c <__sfp+0x60>
     7b4:	90800017 	ldw	r2,0(r18)
     7b8:	10001d26 	beq	r2,zero,830 <__sfp+0xf4>
     7bc:	1025883a 	mov	r18,r2
     7c0:	003fee06 	br	77c <__sfp+0x40>
     7c4:	00bfffc4 	movi	r2,-1
     7c8:	8080038d 	sth	r2,14(r16)
     7cc:	00800044 	movi	r2,1
     7d0:	8080030d 	sth	r2,12(r16)
     7d4:	80001915 	stw	zero,100(r16)
     7d8:	80000015 	stw	zero,0(r16)
     7dc:	80000215 	stw	zero,8(r16)
     7e0:	80000115 	stw	zero,4(r16)
     7e4:	80000415 	stw	zero,16(r16)
     7e8:	80000515 	stw	zero,20(r16)
     7ec:	80000615 	stw	zero,24(r16)
     7f0:	01800204 	movi	r6,8
     7f4:	000b883a 	mov	r5,zero
     7f8:	81001704 	addi	r4,r16,92
     7fc:	0001a940 	call	1a94 <memset>
     800:	8005883a 	mov	r2,r16
     804:	80000c15 	stw	zero,48(r16)
     808:	80000d15 	stw	zero,52(r16)
     80c:	80001115 	stw	zero,68(r16)
     810:	80001215 	stw	zero,72(r16)
     814:	dfc00417 	ldw	ra,16(sp)
     818:	dcc00317 	ldw	r19,12(sp)
     81c:	dc800217 	ldw	r18,8(sp)
     820:	dc400117 	ldw	r17,4(sp)
     824:	dc000017 	ldw	r16,0(sp)
     828:	dec00504 	addi	sp,sp,20
     82c:	f800283a 	ret
     830:	01400104 	movi	r5,4
     834:	9809883a 	mov	r4,r19
     838:	00006d40 	call	6d4 <__sfmoreglue>
     83c:	90800015 	stw	r2,0(r18)
     840:	103fde1e 	bne	r2,zero,7bc <__sfp+0x80>
     844:	00800304 	movi	r2,12
     848:	98800015 	stw	r2,0(r19)
     84c:	0005883a 	mov	r2,zero
     850:	003ff006 	br	814 <__sfp+0xd8>

00000854 <_cleanup>:
     854:	00800074 	movhi	r2,1
     858:	10809104 	addi	r2,r2,580
     85c:	11000017 	ldw	r4,0(r2)
     860:	01400034 	movhi	r5,0
     864:	29492e04 	addi	r5,r5,9400
     868:	0000e3c1 	jmpi	e3c <_fwalk_reent>

0000086c <__sinit>:
     86c:	20800e17 	ldw	r2,56(r4)
     870:	10000126 	beq	r2,zero,878 <__sinit+0xc>
     874:	f800283a 	ret
     878:	00005301 	jmpi	530 <__sinit.part.1>

0000087c <__sfp_lock_acquire>:
     87c:	f800283a 	ret

00000880 <__sfp_lock_release>:
     880:	f800283a 	ret

00000884 <__sinit_lock_acquire>:
     884:	f800283a 	ret

00000888 <__sinit_lock_release>:
     888:	f800283a 	ret

0000088c <__fp_lock_all>:
     88c:	00800074 	movhi	r2,1
     890:	10809204 	addi	r2,r2,584
     894:	11000017 	ldw	r4,0(r2)
     898:	01400034 	movhi	r5,0
     89c:	2941b304 	addi	r5,r5,1740
     8a0:	0000d781 	jmpi	d78 <_fwalk>

000008a4 <__fp_unlock_all>:
     8a4:	00800074 	movhi	r2,1
     8a8:	10809204 	addi	r2,r2,584
     8ac:	11000017 	ldw	r4,0(r2)
     8b0:	01400034 	movhi	r5,0
     8b4:	29414704 	addi	r5,r5,1308
     8b8:	0000d781 	jmpi	d78 <_fwalk>

000008bc <__sfvwrite_r>:
     8bc:	30800217 	ldw	r2,8(r6)
     8c0:	10006726 	beq	r2,zero,a60 <__sfvwrite_r+0x1a4>
     8c4:	28c0030b 	ldhu	r3,12(r5)
     8c8:	defff404 	addi	sp,sp,-48
     8cc:	dd400715 	stw	r21,28(sp)
     8d0:	dd000615 	stw	r20,24(sp)
     8d4:	dc000215 	stw	r16,8(sp)
     8d8:	dfc00b15 	stw	ra,44(sp)
     8dc:	df000a15 	stw	fp,40(sp)
     8e0:	ddc00915 	stw	r23,36(sp)
     8e4:	dd800815 	stw	r22,32(sp)
     8e8:	dcc00515 	stw	r19,20(sp)
     8ec:	dc800415 	stw	r18,16(sp)
     8f0:	dc400315 	stw	r17,12(sp)
     8f4:	1880020c 	andi	r2,r3,8
     8f8:	2821883a 	mov	r16,r5
     8fc:	202b883a 	mov	r21,r4
     900:	3029883a 	mov	r20,r6
     904:	10002726 	beq	r2,zero,9a4 <__sfvwrite_r+0xe8>
     908:	28800417 	ldw	r2,16(r5)
     90c:	10002526 	beq	r2,zero,9a4 <__sfvwrite_r+0xe8>
     910:	1880008c 	andi	r2,r3,2
     914:	a4400017 	ldw	r17,0(r20)
     918:	10002a26 	beq	r2,zero,9c4 <__sfvwrite_r+0x108>
     91c:	05a00034 	movhi	r22,32768
     920:	0027883a 	mov	r19,zero
     924:	0025883a 	mov	r18,zero
     928:	b5bf0004 	addi	r22,r22,-1024
     92c:	980d883a 	mov	r6,r19
     930:	a809883a 	mov	r4,r21
     934:	90004626 	beq	r18,zero,a50 <__sfvwrite_r+0x194>
     938:	900f883a 	mov	r7,r18
     93c:	b480022e 	bgeu	r22,r18,948 <__sfvwrite_r+0x8c>
     940:	01e00034 	movhi	r7,32768
     944:	39ff0004 	addi	r7,r7,-1024
     948:	80800917 	ldw	r2,36(r16)
     94c:	81400717 	ldw	r5,28(r16)
     950:	103ee83a 	callr	r2
     954:	0080570e 	bge	zero,r2,ab4 <__sfvwrite_r+0x1f8>
     958:	a0c00217 	ldw	r3,8(r20)
     95c:	98a7883a 	add	r19,r19,r2
     960:	90a5c83a 	sub	r18,r18,r2
     964:	1885c83a 	sub	r2,r3,r2
     968:	a0800215 	stw	r2,8(r20)
     96c:	103fef1e 	bne	r2,zero,92c <__sfvwrite_r+0x70>
     970:	0005883a 	mov	r2,zero
     974:	dfc00b17 	ldw	ra,44(sp)
     978:	df000a17 	ldw	fp,40(sp)
     97c:	ddc00917 	ldw	r23,36(sp)
     980:	dd800817 	ldw	r22,32(sp)
     984:	dd400717 	ldw	r21,28(sp)
     988:	dd000617 	ldw	r20,24(sp)
     98c:	dcc00517 	ldw	r19,20(sp)
     990:	dc800417 	ldw	r18,16(sp)
     994:	dc400317 	ldw	r17,12(sp)
     998:	dc000217 	ldw	r16,8(sp)
     99c:	dec00c04 	addi	sp,sp,48
     9a0:	f800283a 	ret
     9a4:	800b883a 	mov	r5,r16
     9a8:	a809883a 	mov	r4,r21
     9ac:	00023100 	call	2310 <__swsetup_r>
     9b0:	1000eb1e 	bne	r2,zero,d60 <__sfvwrite_r+0x4a4>
     9b4:	80c0030b 	ldhu	r3,12(r16)
     9b8:	a4400017 	ldw	r17,0(r20)
     9bc:	1880008c 	andi	r2,r3,2
     9c0:	103fd61e 	bne	r2,zero,91c <__sfvwrite_r+0x60>
     9c4:	1880004c 	andi	r2,r3,1
     9c8:	10003f1e 	bne	r2,zero,ac8 <__sfvwrite_r+0x20c>
     9cc:	0039883a 	mov	fp,zero
     9d0:	0025883a 	mov	r18,zero
     9d4:	90001a26 	beq	r18,zero,a40 <__sfvwrite_r+0x184>
     9d8:	1880800c 	andi	r2,r3,512
     9dc:	84c00217 	ldw	r19,8(r16)
     9e0:	10002126 	beq	r2,zero,a68 <__sfvwrite_r+0x1ac>
     9e4:	982f883a 	mov	r23,r19
     9e8:	94c09336 	bltu	r18,r19,c38 <__sfvwrite_r+0x37c>
     9ec:	1881200c 	andi	r2,r3,1152
     9f0:	10009e1e 	bne	r2,zero,c6c <__sfvwrite_r+0x3b0>
     9f4:	81000017 	ldw	r4,0(r16)
     9f8:	b80d883a 	mov	r6,r23
     9fc:	e00b883a 	mov	r5,fp
     a00:	00019380 	call	1938 <memmove>
     a04:	80c00217 	ldw	r3,8(r16)
     a08:	81000017 	ldw	r4,0(r16)
     a0c:	9005883a 	mov	r2,r18
     a10:	1ce7c83a 	sub	r19,r3,r19
     a14:	25cf883a 	add	r7,r4,r23
     a18:	84c00215 	stw	r19,8(r16)
     a1c:	81c00015 	stw	r7,0(r16)
     a20:	a0c00217 	ldw	r3,8(r20)
     a24:	e0b9883a 	add	fp,fp,r2
     a28:	90a5c83a 	sub	r18,r18,r2
     a2c:	18a7c83a 	sub	r19,r3,r2
     a30:	a4c00215 	stw	r19,8(r20)
     a34:	983fce26 	beq	r19,zero,970 <__sfvwrite_r+0xb4>
     a38:	80c0030b 	ldhu	r3,12(r16)
     a3c:	903fe61e 	bne	r18,zero,9d8 <__sfvwrite_r+0x11c>
     a40:	8f000017 	ldw	fp,0(r17)
     a44:	8c800117 	ldw	r18,4(r17)
     a48:	8c400204 	addi	r17,r17,8
     a4c:	003fe106 	br	9d4 <__sfvwrite_r+0x118>
     a50:	8cc00017 	ldw	r19,0(r17)
     a54:	8c800117 	ldw	r18,4(r17)
     a58:	8c400204 	addi	r17,r17,8
     a5c:	003fb306 	br	92c <__sfvwrite_r+0x70>
     a60:	0005883a 	mov	r2,zero
     a64:	f800283a 	ret
     a68:	81000017 	ldw	r4,0(r16)
     a6c:	80800417 	ldw	r2,16(r16)
     a70:	11005736 	bltu	r2,r4,bd0 <__sfvwrite_r+0x314>
     a74:	85c00517 	ldw	r23,20(r16)
     a78:	95c05536 	bltu	r18,r23,bd0 <__sfvwrite_r+0x314>
     a7c:	00a00034 	movhi	r2,32768
     a80:	10bfffc4 	addi	r2,r2,-1
     a84:	9009883a 	mov	r4,r18
     a88:	1480012e 	bgeu	r2,r18,a90 <__sfvwrite_r+0x1d4>
     a8c:	1009883a 	mov	r4,r2
     a90:	b80b883a 	mov	r5,r23
     a94:	0002fc40 	call	2fc4 <__divsi3>
     a98:	15cf383a 	mul	r7,r2,r23
     a9c:	81400717 	ldw	r5,28(r16)
     aa0:	80800917 	ldw	r2,36(r16)
     aa4:	e00d883a 	mov	r6,fp
     aa8:	a809883a 	mov	r4,r21
     aac:	103ee83a 	callr	r2
     ab0:	00bfdb16 	blt	zero,r2,a20 <__sfvwrite_r+0x164>
     ab4:	8080030b 	ldhu	r2,12(r16)
     ab8:	10801014 	ori	r2,r2,64
     abc:	8080030d 	sth	r2,12(r16)
     ac0:	00bfffc4 	movi	r2,-1
     ac4:	003fab06 	br	974 <__sfvwrite_r+0xb8>
     ac8:	0027883a 	mov	r19,zero
     acc:	0011883a 	mov	r8,zero
     ad0:	0039883a 	mov	fp,zero
     ad4:	0025883a 	mov	r18,zero
     ad8:	90001f26 	beq	r18,zero,b58 <__sfvwrite_r+0x29c>
     adc:	40005a26 	beq	r8,zero,c48 <__sfvwrite_r+0x38c>
     ae0:	982d883a 	mov	r22,r19
     ae4:	94c0012e 	bgeu	r18,r19,aec <__sfvwrite_r+0x230>
     ae8:	902d883a 	mov	r22,r18
     aec:	81000017 	ldw	r4,0(r16)
     af0:	80800417 	ldw	r2,16(r16)
     af4:	b02f883a 	mov	r23,r22
     af8:	81c00517 	ldw	r7,20(r16)
     afc:	1100032e 	bgeu	r2,r4,b0c <__sfvwrite_r+0x250>
     b00:	80c00217 	ldw	r3,8(r16)
     b04:	38c7883a 	add	r3,r7,r3
     b08:	1d801816 	blt	r3,r22,b6c <__sfvwrite_r+0x2b0>
     b0c:	b1c03e16 	blt	r22,r7,c08 <__sfvwrite_r+0x34c>
     b10:	80800917 	ldw	r2,36(r16)
     b14:	81400717 	ldw	r5,28(r16)
     b18:	e00d883a 	mov	r6,fp
     b1c:	da000115 	stw	r8,4(sp)
     b20:	a809883a 	mov	r4,r21
     b24:	103ee83a 	callr	r2
     b28:	102f883a 	mov	r23,r2
     b2c:	da000117 	ldw	r8,4(sp)
     b30:	00bfe00e 	bge	zero,r2,ab4 <__sfvwrite_r+0x1f8>
     b34:	9de7c83a 	sub	r19,r19,r23
     b38:	98001f26 	beq	r19,zero,bb8 <__sfvwrite_r+0x2fc>
     b3c:	a0800217 	ldw	r2,8(r20)
     b40:	e5f9883a 	add	fp,fp,r23
     b44:	95e5c83a 	sub	r18,r18,r23
     b48:	15efc83a 	sub	r23,r2,r23
     b4c:	a5c00215 	stw	r23,8(r20)
     b50:	b83f8726 	beq	r23,zero,970 <__sfvwrite_r+0xb4>
     b54:	903fe11e 	bne	r18,zero,adc <__sfvwrite_r+0x220>
     b58:	8f000017 	ldw	fp,0(r17)
     b5c:	8c800117 	ldw	r18,4(r17)
     b60:	0011883a 	mov	r8,zero
     b64:	8c400204 	addi	r17,r17,8
     b68:	003fdb06 	br	ad8 <__sfvwrite_r+0x21c>
     b6c:	180d883a 	mov	r6,r3
     b70:	e00b883a 	mov	r5,fp
     b74:	da000115 	stw	r8,4(sp)
     b78:	d8c00015 	stw	r3,0(sp)
     b7c:	00019380 	call	1938 <memmove>
     b80:	d8c00017 	ldw	r3,0(sp)
     b84:	80800017 	ldw	r2,0(r16)
     b88:	800b883a 	mov	r5,r16
     b8c:	a809883a 	mov	r4,r21
     b90:	10c5883a 	add	r2,r2,r3
     b94:	80800015 	stw	r2,0(r16)
     b98:	d8c00015 	stw	r3,0(sp)
     b9c:	00027d80 	call	27d8 <_fflush_r>
     ba0:	d8c00017 	ldw	r3,0(sp)
     ba4:	da000117 	ldw	r8,4(sp)
     ba8:	103fc21e 	bne	r2,zero,ab4 <__sfvwrite_r+0x1f8>
     bac:	182f883a 	mov	r23,r3
     bb0:	9de7c83a 	sub	r19,r19,r23
     bb4:	983fe11e 	bne	r19,zero,b3c <__sfvwrite_r+0x280>
     bb8:	800b883a 	mov	r5,r16
     bbc:	a809883a 	mov	r4,r21
     bc0:	00027d80 	call	27d8 <_fflush_r>
     bc4:	103fbb1e 	bne	r2,zero,ab4 <__sfvwrite_r+0x1f8>
     bc8:	0011883a 	mov	r8,zero
     bcc:	003fdb06 	br	b3c <__sfvwrite_r+0x280>
     bd0:	94c0012e 	bgeu	r18,r19,bd8 <__sfvwrite_r+0x31c>
     bd4:	9027883a 	mov	r19,r18
     bd8:	980d883a 	mov	r6,r19
     bdc:	e00b883a 	mov	r5,fp
     be0:	00019380 	call	1938 <memmove>
     be4:	80800217 	ldw	r2,8(r16)
     be8:	80c00017 	ldw	r3,0(r16)
     bec:	14c5c83a 	sub	r2,r2,r19
     bf0:	1cc7883a 	add	r3,r3,r19
     bf4:	80800215 	stw	r2,8(r16)
     bf8:	80c00015 	stw	r3,0(r16)
     bfc:	10004326 	beq	r2,zero,d0c <__sfvwrite_r+0x450>
     c00:	9805883a 	mov	r2,r19
     c04:	003f8606 	br	a20 <__sfvwrite_r+0x164>
     c08:	b00d883a 	mov	r6,r22
     c0c:	e00b883a 	mov	r5,fp
     c10:	da000115 	stw	r8,4(sp)
     c14:	00019380 	call	1938 <memmove>
     c18:	80800217 	ldw	r2,8(r16)
     c1c:	80c00017 	ldw	r3,0(r16)
     c20:	da000117 	ldw	r8,4(sp)
     c24:	1585c83a 	sub	r2,r2,r22
     c28:	1dad883a 	add	r22,r3,r22
     c2c:	80800215 	stw	r2,8(r16)
     c30:	85800015 	stw	r22,0(r16)
     c34:	003fbf06 	br	b34 <__sfvwrite_r+0x278>
     c38:	81000017 	ldw	r4,0(r16)
     c3c:	9027883a 	mov	r19,r18
     c40:	902f883a 	mov	r23,r18
     c44:	003f6c06 	br	9f8 <__sfvwrite_r+0x13c>
     c48:	900d883a 	mov	r6,r18
     c4c:	01400284 	movi	r5,10
     c50:	e009883a 	mov	r4,fp
     c54:	000170c0 	call	170c <memchr>
     c58:	10003e26 	beq	r2,zero,d54 <__sfvwrite_r+0x498>
     c5c:	10800044 	addi	r2,r2,1
     c60:	1727c83a 	sub	r19,r2,fp
     c64:	02000044 	movi	r8,1
     c68:	003f9d06 	br	ae0 <__sfvwrite_r+0x224>
     c6c:	80800517 	ldw	r2,20(r16)
     c70:	81400417 	ldw	r5,16(r16)
     c74:	81c00017 	ldw	r7,0(r16)
     c78:	10a7883a 	add	r19,r2,r2
     c7c:	9885883a 	add	r2,r19,r2
     c80:	1026d7fa 	srli	r19,r2,31
     c84:	396dc83a 	sub	r22,r7,r5
     c88:	b1000044 	addi	r4,r22,1
     c8c:	9885883a 	add	r2,r19,r2
     c90:	1027d07a 	srai	r19,r2,1
     c94:	2485883a 	add	r2,r4,r18
     c98:	980d883a 	mov	r6,r19
     c9c:	9880022e 	bgeu	r19,r2,ca8 <__sfvwrite_r+0x3ec>
     ca0:	1027883a 	mov	r19,r2
     ca4:	100d883a 	mov	r6,r2
     ca8:	18c1000c 	andi	r3,r3,1024
     cac:	18001c26 	beq	r3,zero,d20 <__sfvwrite_r+0x464>
     cb0:	300b883a 	mov	r5,r6
     cb4:	a809883a 	mov	r4,r21
     cb8:	0000f000 	call	f00 <_malloc_r>
     cbc:	102f883a 	mov	r23,r2
     cc0:	10002926 	beq	r2,zero,d68 <__sfvwrite_r+0x4ac>
     cc4:	81400417 	ldw	r5,16(r16)
     cc8:	b00d883a 	mov	r6,r22
     ccc:	1009883a 	mov	r4,r2
     cd0:	00017f00 	call	17f0 <memcpy>
     cd4:	8080030b 	ldhu	r2,12(r16)
     cd8:	00fedfc4 	movi	r3,-1153
     cdc:	10c4703a 	and	r2,r2,r3
     ce0:	10802014 	ori	r2,r2,128
     ce4:	8080030d 	sth	r2,12(r16)
     ce8:	bd89883a 	add	r4,r23,r22
     cec:	9d8fc83a 	sub	r7,r19,r22
     cf0:	85c00415 	stw	r23,16(r16)
     cf4:	84c00515 	stw	r19,20(r16)
     cf8:	81000015 	stw	r4,0(r16)
     cfc:	9027883a 	mov	r19,r18
     d00:	81c00215 	stw	r7,8(r16)
     d04:	902f883a 	mov	r23,r18
     d08:	003f3b06 	br	9f8 <__sfvwrite_r+0x13c>
     d0c:	800b883a 	mov	r5,r16
     d10:	a809883a 	mov	r4,r21
     d14:	00027d80 	call	27d8 <_fflush_r>
     d18:	103fb926 	beq	r2,zero,c00 <__sfvwrite_r+0x344>
     d1c:	003f6506 	br	ab4 <__sfvwrite_r+0x1f8>
     d20:	a809883a 	mov	r4,r21
     d24:	0001bbc0 	call	1bbc <_realloc_r>
     d28:	102f883a 	mov	r23,r2
     d2c:	103fee1e 	bne	r2,zero,ce8 <__sfvwrite_r+0x42c>
     d30:	81400417 	ldw	r5,16(r16)
     d34:	a809883a 	mov	r4,r21
     d38:	00029880 	call	2988 <_free_r>
     d3c:	8080030b 	ldhu	r2,12(r16)
     d40:	00ffdfc4 	movi	r3,-129
     d44:	1884703a 	and	r2,r3,r2
     d48:	00c00304 	movi	r3,12
     d4c:	a8c00015 	stw	r3,0(r21)
     d50:	003f5906 	br	ab8 <__sfvwrite_r+0x1fc>
     d54:	94c00044 	addi	r19,r18,1
     d58:	02000044 	movi	r8,1
     d5c:	003f6006 	br	ae0 <__sfvwrite_r+0x224>
     d60:	00bfffc4 	movi	r2,-1
     d64:	003f0306 	br	974 <__sfvwrite_r+0xb8>
     d68:	00800304 	movi	r2,12
     d6c:	a8800015 	stw	r2,0(r21)
     d70:	8080030b 	ldhu	r2,12(r16)
     d74:	003f5006 	br	ab8 <__sfvwrite_r+0x1fc>

00000d78 <_fwalk>:
     d78:	defff704 	addi	sp,sp,-36
     d7c:	dd000415 	stw	r20,16(sp)
     d80:	dfc00815 	stw	ra,32(sp)
     d84:	ddc00715 	stw	r23,28(sp)
     d88:	dd800615 	stw	r22,24(sp)
     d8c:	dd400515 	stw	r21,20(sp)
     d90:	dcc00315 	stw	r19,12(sp)
     d94:	dc800215 	stw	r18,8(sp)
     d98:	dc400115 	stw	r17,4(sp)
     d9c:	dc000015 	stw	r16,0(sp)
     da0:	2500b804 	addi	r20,r4,736
     da4:	a0002326 	beq	r20,zero,e34 <_fwalk+0xbc>
     da8:	282b883a 	mov	r21,r5
     dac:	002f883a 	mov	r23,zero
     db0:	05800044 	movi	r22,1
     db4:	04ffffc4 	movi	r19,-1
     db8:	a4400117 	ldw	r17,4(r20)
     dbc:	a4800217 	ldw	r18,8(r20)
     dc0:	8c7fffc4 	addi	r17,r17,-1
     dc4:	88000d16 	blt	r17,zero,dfc <_fwalk+0x84>
     dc8:	94000304 	addi	r16,r18,12
     dcc:	94800384 	addi	r18,r18,14
     dd0:	8080000b 	ldhu	r2,0(r16)
     dd4:	8c7fffc4 	addi	r17,r17,-1
     dd8:	813ffd04 	addi	r4,r16,-12
     ddc:	b080042e 	bgeu	r22,r2,df0 <_fwalk+0x78>
     de0:	9080000f 	ldh	r2,0(r18)
     de4:	14c00226 	beq	r2,r19,df0 <_fwalk+0x78>
     de8:	a83ee83a 	callr	r21
     dec:	b8aeb03a 	or	r23,r23,r2
     df0:	84001a04 	addi	r16,r16,104
     df4:	94801a04 	addi	r18,r18,104
     df8:	8cfff51e 	bne	r17,r19,dd0 <_fwalk+0x58>
     dfc:	a5000017 	ldw	r20,0(r20)
     e00:	a03fed1e 	bne	r20,zero,db8 <_fwalk+0x40>
     e04:	b805883a 	mov	r2,r23
     e08:	dfc00817 	ldw	ra,32(sp)
     e0c:	ddc00717 	ldw	r23,28(sp)
     e10:	dd800617 	ldw	r22,24(sp)
     e14:	dd400517 	ldw	r21,20(sp)
     e18:	dd000417 	ldw	r20,16(sp)
     e1c:	dcc00317 	ldw	r19,12(sp)
     e20:	dc800217 	ldw	r18,8(sp)
     e24:	dc400117 	ldw	r17,4(sp)
     e28:	dc000017 	ldw	r16,0(sp)
     e2c:	dec00904 	addi	sp,sp,36
     e30:	f800283a 	ret
     e34:	002f883a 	mov	r23,zero
     e38:	003ff206 	br	e04 <_fwalk+0x8c>

00000e3c <_fwalk_reent>:
     e3c:	defff704 	addi	sp,sp,-36
     e40:	dd000415 	stw	r20,16(sp)
     e44:	dfc00815 	stw	ra,32(sp)
     e48:	ddc00715 	stw	r23,28(sp)
     e4c:	dd800615 	stw	r22,24(sp)
     e50:	dd400515 	stw	r21,20(sp)
     e54:	dcc00315 	stw	r19,12(sp)
     e58:	dc800215 	stw	r18,8(sp)
     e5c:	dc400115 	stw	r17,4(sp)
     e60:	dc000015 	stw	r16,0(sp)
     e64:	2500b804 	addi	r20,r4,736
     e68:	a0002326 	beq	r20,zero,ef8 <_fwalk_reent+0xbc>
     e6c:	282b883a 	mov	r21,r5
     e70:	2027883a 	mov	r19,r4
     e74:	002f883a 	mov	r23,zero
     e78:	05800044 	movi	r22,1
     e7c:	04bfffc4 	movi	r18,-1
     e80:	a4400117 	ldw	r17,4(r20)
     e84:	a4000217 	ldw	r16,8(r20)
     e88:	8c7fffc4 	addi	r17,r17,-1
     e8c:	88000c16 	blt	r17,zero,ec0 <_fwalk_reent+0x84>
     e90:	84000304 	addi	r16,r16,12
     e94:	8080000b 	ldhu	r2,0(r16)
     e98:	8c7fffc4 	addi	r17,r17,-1
     e9c:	817ffd04 	addi	r5,r16,-12
     ea0:	b080052e 	bgeu	r22,r2,eb8 <_fwalk_reent+0x7c>
     ea4:	8080008f 	ldh	r2,2(r16)
     ea8:	9809883a 	mov	r4,r19
     eac:	14800226 	beq	r2,r18,eb8 <_fwalk_reent+0x7c>
     eb0:	a83ee83a 	callr	r21
     eb4:	b8aeb03a 	or	r23,r23,r2
     eb8:	84001a04 	addi	r16,r16,104
     ebc:	8cbff51e 	bne	r17,r18,e94 <_fwalk_reent+0x58>
     ec0:	a5000017 	ldw	r20,0(r20)
     ec4:	a03fee1e 	bne	r20,zero,e80 <_fwalk_reent+0x44>
     ec8:	b805883a 	mov	r2,r23
     ecc:	dfc00817 	ldw	ra,32(sp)
     ed0:	ddc00717 	ldw	r23,28(sp)
     ed4:	dd800617 	ldw	r22,24(sp)
     ed8:	dd400517 	ldw	r21,20(sp)
     edc:	dd000417 	ldw	r20,16(sp)
     ee0:	dcc00317 	ldw	r19,12(sp)
     ee4:	dc800217 	ldw	r18,8(sp)
     ee8:	dc400117 	ldw	r17,4(sp)
     eec:	dc000017 	ldw	r16,0(sp)
     ef0:	dec00904 	addi	sp,sp,36
     ef4:	f800283a 	ret
     ef8:	002f883a 	mov	r23,zero
     efc:	003ff206 	br	ec8 <_fwalk_reent+0x8c>

00000f00 <_malloc_r>:
     f00:	defff504 	addi	sp,sp,-44
     f04:	dc800315 	stw	r18,12(sp)
     f08:	dfc00a15 	stw	ra,40(sp)
     f0c:	df000915 	stw	fp,36(sp)
     f10:	ddc00815 	stw	r23,32(sp)
     f14:	dd800715 	stw	r22,28(sp)
     f18:	dd400615 	stw	r21,24(sp)
     f1c:	dd000515 	stw	r20,20(sp)
     f20:	dcc00415 	stw	r19,16(sp)
     f24:	dc400215 	stw	r17,8(sp)
     f28:	dc000115 	stw	r16,4(sp)
     f2c:	288002c4 	addi	r2,r5,11
     f30:	00c00584 	movi	r3,22
     f34:	2025883a 	mov	r18,r4
     f38:	18807f2e 	bgeu	r3,r2,1138 <_malloc_r+0x238>
     f3c:	047ffe04 	movi	r17,-8
     f40:	1462703a 	and	r17,r2,r17
     f44:	8800a316 	blt	r17,zero,11d4 <_malloc_r+0x2d4>
     f48:	8940a236 	bltu	r17,r5,11d4 <_malloc_r+0x2d4>
     f4c:	0003c840 	call	3c84 <__malloc_lock>
     f50:	00807dc4 	movi	r2,503
     f54:	1441e92e 	bgeu	r2,r17,16fc <_malloc_r+0x7fc>
     f58:	8804d27a 	srli	r2,r17,9
     f5c:	1000a126 	beq	r2,zero,11e4 <_malloc_r+0x2e4>
     f60:	00c00104 	movi	r3,4
     f64:	18811e36 	bltu	r3,r2,13e0 <_malloc_r+0x4e0>
     f68:	8804d1ba 	srli	r2,r17,6
     f6c:	12000e44 	addi	r8,r2,57
     f70:	11c00e04 	addi	r7,r2,56
     f74:	4209883a 	add	r4,r8,r8
     f78:	04c00074 	movhi	r19,1
     f7c:	2109883a 	add	r4,r4,r4
     f80:	9cfb0a04 	addi	r19,r19,-5080
     f84:	2109883a 	add	r4,r4,r4
     f88:	9909883a 	add	r4,r19,r4
     f8c:	24000117 	ldw	r16,4(r4)
     f90:	213ffe04 	addi	r4,r4,-8
     f94:	24009726 	beq	r4,r16,11f4 <_malloc_r+0x2f4>
     f98:	80800117 	ldw	r2,4(r16)
     f9c:	01bfff04 	movi	r6,-4
     fa0:	014003c4 	movi	r5,15
     fa4:	1184703a 	and	r2,r2,r6
     fa8:	1447c83a 	sub	r3,r2,r17
     fac:	28c00716 	blt	r5,r3,fcc <_malloc_r+0xcc>
     fb0:	1800920e 	bge	r3,zero,11fc <_malloc_r+0x2fc>
     fb4:	84000317 	ldw	r16,12(r16)
     fb8:	24008e26 	beq	r4,r16,11f4 <_malloc_r+0x2f4>
     fbc:	80800117 	ldw	r2,4(r16)
     fc0:	1184703a 	and	r2,r2,r6
     fc4:	1447c83a 	sub	r3,r2,r17
     fc8:	28fff90e 	bge	r5,r3,fb0 <_malloc_r+0xb0>
     fcc:	3809883a 	mov	r4,r7
     fd0:	01800074 	movhi	r6,1
     fd4:	9c000417 	ldw	r16,16(r19)
     fd8:	31bb0a04 	addi	r6,r6,-5080
     fdc:	32000204 	addi	r8,r6,8
     fe0:	82013426 	beq	r16,r8,14b4 <_malloc_r+0x5b4>
     fe4:	80c00117 	ldw	r3,4(r16)
     fe8:	00bfff04 	movi	r2,-4
     fec:	188e703a 	and	r7,r3,r2
     ff0:	3c45c83a 	sub	r2,r7,r17
     ff4:	00c003c4 	movi	r3,15
     ff8:	18811f16 	blt	r3,r2,1478 <_malloc_r+0x578>
     ffc:	32000515 	stw	r8,20(r6)
    1000:	32000415 	stw	r8,16(r6)
    1004:	10007f0e 	bge	r2,zero,1204 <_malloc_r+0x304>
    1008:	00807fc4 	movi	r2,511
    100c:	11c0fd36 	bltu	r2,r7,1404 <_malloc_r+0x504>
    1010:	3806d0fa 	srli	r3,r7,3
    1014:	01c00044 	movi	r7,1
    1018:	30800117 	ldw	r2,4(r6)
    101c:	19400044 	addi	r5,r3,1
    1020:	294b883a 	add	r5,r5,r5
    1024:	1807d0ba 	srai	r3,r3,2
    1028:	294b883a 	add	r5,r5,r5
    102c:	294b883a 	add	r5,r5,r5
    1030:	298b883a 	add	r5,r5,r6
    1034:	38c6983a 	sll	r3,r7,r3
    1038:	29c00017 	ldw	r7,0(r5)
    103c:	2a7ffe04 	addi	r9,r5,-8
    1040:	1886b03a 	or	r3,r3,r2
    1044:	82400315 	stw	r9,12(r16)
    1048:	81c00215 	stw	r7,8(r16)
    104c:	30c00115 	stw	r3,4(r6)
    1050:	2c000015 	stw	r16,0(r5)
    1054:	3c000315 	stw	r16,12(r7)
    1058:	2005d0ba 	srai	r2,r4,2
    105c:	01400044 	movi	r5,1
    1060:	288a983a 	sll	r5,r5,r2
    1064:	19406f36 	bltu	r3,r5,1224 <_malloc_r+0x324>
    1068:	28c4703a 	and	r2,r5,r3
    106c:	10000a1e 	bne	r2,zero,1098 <_malloc_r+0x198>
    1070:	00bfff04 	movi	r2,-4
    1074:	294b883a 	add	r5,r5,r5
    1078:	2088703a 	and	r4,r4,r2
    107c:	28c4703a 	and	r2,r5,r3
    1080:	21000104 	addi	r4,r4,4
    1084:	1000041e 	bne	r2,zero,1098 <_malloc_r+0x198>
    1088:	294b883a 	add	r5,r5,r5
    108c:	28c4703a 	and	r2,r5,r3
    1090:	21000104 	addi	r4,r4,4
    1094:	103ffc26 	beq	r2,zero,1088 <_malloc_r+0x188>
    1098:	02bfff04 	movi	r10,-4
    109c:	024003c4 	movi	r9,15
    10a0:	21800044 	addi	r6,r4,1
    10a4:	318d883a 	add	r6,r6,r6
    10a8:	318d883a 	add	r6,r6,r6
    10ac:	318d883a 	add	r6,r6,r6
    10b0:	998d883a 	add	r6,r19,r6
    10b4:	333ffe04 	addi	r12,r6,-8
    10b8:	2017883a 	mov	r11,r4
    10bc:	31800104 	addi	r6,r6,4
    10c0:	34000017 	ldw	r16,0(r6)
    10c4:	31fffd04 	addi	r7,r6,-12
    10c8:	81c0041e 	bne	r16,r7,10dc <_malloc_r+0x1dc>
    10cc:	0000fb06 	br	14bc <_malloc_r+0x5bc>
    10d0:	1801030e 	bge	r3,zero,14e0 <_malloc_r+0x5e0>
    10d4:	84000317 	ldw	r16,12(r16)
    10d8:	81c0f826 	beq	r16,r7,14bc <_malloc_r+0x5bc>
    10dc:	80800117 	ldw	r2,4(r16)
    10e0:	1284703a 	and	r2,r2,r10
    10e4:	1447c83a 	sub	r3,r2,r17
    10e8:	48fff90e 	bge	r9,r3,10d0 <_malloc_r+0x1d0>
    10ec:	80800317 	ldw	r2,12(r16)
    10f0:	81000217 	ldw	r4,8(r16)
    10f4:	89400054 	ori	r5,r17,1
    10f8:	81400115 	stw	r5,4(r16)
    10fc:	20800315 	stw	r2,12(r4)
    1100:	11000215 	stw	r4,8(r2)
    1104:	8463883a 	add	r17,r16,r17
    1108:	9c400515 	stw	r17,20(r19)
    110c:	9c400415 	stw	r17,16(r19)
    1110:	18800054 	ori	r2,r3,1
    1114:	88800115 	stw	r2,4(r17)
    1118:	8a000315 	stw	r8,12(r17)
    111c:	8a000215 	stw	r8,8(r17)
    1120:	88e3883a 	add	r17,r17,r3
    1124:	88c00015 	stw	r3,0(r17)
    1128:	9009883a 	mov	r4,r18
    112c:	0003dbc0 	call	3dbc <__malloc_unlock>
    1130:	80800204 	addi	r2,r16,8
    1134:	00001b06 	br	11a4 <_malloc_r+0x2a4>
    1138:	04400404 	movi	r17,16
    113c:	89402536 	bltu	r17,r5,11d4 <_malloc_r+0x2d4>
    1140:	0003c840 	call	3c84 <__malloc_lock>
    1144:	00800184 	movi	r2,6
    1148:	01000084 	movi	r4,2
    114c:	04c00074 	movhi	r19,1
    1150:	1085883a 	add	r2,r2,r2
    1154:	9cfb0a04 	addi	r19,r19,-5080
    1158:	1085883a 	add	r2,r2,r2
    115c:	9885883a 	add	r2,r19,r2
    1160:	14000117 	ldw	r16,4(r2)
    1164:	10fffe04 	addi	r3,r2,-8
    1168:	80c0d926 	beq	r16,r3,14d0 <_malloc_r+0x5d0>
    116c:	80c00117 	ldw	r3,4(r16)
    1170:	81000317 	ldw	r4,12(r16)
    1174:	00bfff04 	movi	r2,-4
    1178:	1884703a 	and	r2,r3,r2
    117c:	81400217 	ldw	r5,8(r16)
    1180:	8085883a 	add	r2,r16,r2
    1184:	10c00117 	ldw	r3,4(r2)
    1188:	29000315 	stw	r4,12(r5)
    118c:	21400215 	stw	r5,8(r4)
    1190:	18c00054 	ori	r3,r3,1
    1194:	10c00115 	stw	r3,4(r2)
    1198:	9009883a 	mov	r4,r18
    119c:	0003dbc0 	call	3dbc <__malloc_unlock>
    11a0:	80800204 	addi	r2,r16,8
    11a4:	dfc00a17 	ldw	ra,40(sp)
    11a8:	df000917 	ldw	fp,36(sp)
    11ac:	ddc00817 	ldw	r23,32(sp)
    11b0:	dd800717 	ldw	r22,28(sp)
    11b4:	dd400617 	ldw	r21,24(sp)
    11b8:	dd000517 	ldw	r20,20(sp)
    11bc:	dcc00417 	ldw	r19,16(sp)
    11c0:	dc800317 	ldw	r18,12(sp)
    11c4:	dc400217 	ldw	r17,8(sp)
    11c8:	dc000117 	ldw	r16,4(sp)
    11cc:	dec00b04 	addi	sp,sp,44
    11d0:	f800283a 	ret
    11d4:	00800304 	movi	r2,12
    11d8:	90800015 	stw	r2,0(r18)
    11dc:	0005883a 	mov	r2,zero
    11e0:	003ff006 	br	11a4 <_malloc_r+0x2a4>
    11e4:	01002004 	movi	r4,128
    11e8:	02001004 	movi	r8,64
    11ec:	01c00fc4 	movi	r7,63
    11f0:	003f6106 	br	f78 <_malloc_r+0x78>
    11f4:	4009883a 	mov	r4,r8
    11f8:	003f7506 	br	fd0 <_malloc_r+0xd0>
    11fc:	81000317 	ldw	r4,12(r16)
    1200:	003fde06 	br	117c <_malloc_r+0x27c>
    1204:	81c5883a 	add	r2,r16,r7
    1208:	11400117 	ldw	r5,4(r2)
    120c:	9009883a 	mov	r4,r18
    1210:	29400054 	ori	r5,r5,1
    1214:	11400115 	stw	r5,4(r2)
    1218:	0003dbc0 	call	3dbc <__malloc_unlock>
    121c:	80800204 	addi	r2,r16,8
    1220:	003fe006 	br	11a4 <_malloc_r+0x2a4>
    1224:	9c000217 	ldw	r16,8(r19)
    1228:	00bfff04 	movi	r2,-4
    122c:	85800117 	ldw	r22,4(r16)
    1230:	b0ac703a 	and	r22,r22,r2
    1234:	b4400336 	bltu	r22,r17,1244 <_malloc_r+0x344>
    1238:	b445c83a 	sub	r2,r22,r17
    123c:	00c003c4 	movi	r3,15
    1240:	18805d16 	blt	r3,r2,13b8 <_malloc_r+0x4b8>
    1244:	05c00074 	movhi	r23,1
    1248:	00800074 	movhi	r2,1
    124c:	10877d04 	addi	r2,r2,7668
    1250:	bdc09304 	addi	r23,r23,588
    1254:	15400017 	ldw	r21,0(r2)
    1258:	b8c00017 	ldw	r3,0(r23)
    125c:	00bfffc4 	movi	r2,-1
    1260:	858d883a 	add	r6,r16,r22
    1264:	8d6b883a 	add	r21,r17,r21
    1268:	1880ea26 	beq	r3,r2,1614 <_malloc_r+0x714>
    126c:	ad4403c4 	addi	r21,r21,4111
    1270:	00bc0004 	movi	r2,-4096
    1274:	a8aa703a 	and	r21,r21,r2
    1278:	a80b883a 	mov	r5,r21
    127c:	9009883a 	mov	r4,r18
    1280:	d9800015 	stw	r6,0(sp)
    1284:	00021200 	call	2120 <_sbrk_r>
    1288:	1029883a 	mov	r20,r2
    128c:	00bfffc4 	movi	r2,-1
    1290:	d9800017 	ldw	r6,0(sp)
    1294:	a080e826 	beq	r20,r2,1638 <_malloc_r+0x738>
    1298:	a180a636 	bltu	r20,r6,1534 <_malloc_r+0x634>
    129c:	07000074 	movhi	fp,1
    12a0:	e7079f04 	addi	fp,fp,7804
    12a4:	e0800017 	ldw	r2,0(fp)
    12a8:	a887883a 	add	r3,r21,r2
    12ac:	e0c00015 	stw	r3,0(fp)
    12b0:	3500e626 	beq	r6,r20,164c <_malloc_r+0x74c>
    12b4:	b9000017 	ldw	r4,0(r23)
    12b8:	00bfffc4 	movi	r2,-1
    12bc:	2080ee26 	beq	r4,r2,1678 <_malloc_r+0x778>
    12c0:	a185c83a 	sub	r2,r20,r6
    12c4:	10c5883a 	add	r2,r2,r3
    12c8:	e0800015 	stw	r2,0(fp)
    12cc:	a0c001cc 	andi	r3,r20,7
    12d0:	1800bc26 	beq	r3,zero,15c4 <_malloc_r+0x6c4>
    12d4:	a0e9c83a 	sub	r20,r20,r3
    12d8:	00840204 	movi	r2,4104
    12dc:	a5000204 	addi	r20,r20,8
    12e0:	10c7c83a 	sub	r3,r2,r3
    12e4:	a545883a 	add	r2,r20,r21
    12e8:	1083ffcc 	andi	r2,r2,4095
    12ec:	18abc83a 	sub	r21,r3,r2
    12f0:	a80b883a 	mov	r5,r21
    12f4:	9009883a 	mov	r4,r18
    12f8:	00021200 	call	2120 <_sbrk_r>
    12fc:	00ffffc4 	movi	r3,-1
    1300:	10c0e126 	beq	r2,r3,1688 <_malloc_r+0x788>
    1304:	1505c83a 	sub	r2,r2,r20
    1308:	1545883a 	add	r2,r2,r21
    130c:	10800054 	ori	r2,r2,1
    1310:	e0c00017 	ldw	r3,0(fp)
    1314:	9d000215 	stw	r20,8(r19)
    1318:	a0800115 	stw	r2,4(r20)
    131c:	a8c7883a 	add	r3,r21,r3
    1320:	e0c00015 	stw	r3,0(fp)
    1324:	84c00e26 	beq	r16,r19,1360 <_malloc_r+0x460>
    1328:	018003c4 	movi	r6,15
    132c:	3580a72e 	bgeu	r6,r22,15cc <_malloc_r+0x6cc>
    1330:	81400117 	ldw	r5,4(r16)
    1334:	013ffe04 	movi	r4,-8
    1338:	b0bffd04 	addi	r2,r22,-12
    133c:	1104703a 	and	r2,r2,r4
    1340:	2900004c 	andi	r4,r5,1
    1344:	2088b03a 	or	r4,r4,r2
    1348:	81000115 	stw	r4,4(r16)
    134c:	01400144 	movi	r5,5
    1350:	8089883a 	add	r4,r16,r2
    1354:	21400115 	stw	r5,4(r4)
    1358:	21400215 	stw	r5,8(r4)
    135c:	3080cd36 	bltu	r6,r2,1694 <_malloc_r+0x794>
    1360:	00800074 	movhi	r2,1
    1364:	10877c04 	addi	r2,r2,7664
    1368:	11000017 	ldw	r4,0(r2)
    136c:	20c0012e 	bgeu	r4,r3,1374 <_malloc_r+0x474>
    1370:	10c00015 	stw	r3,0(r2)
    1374:	00800074 	movhi	r2,1
    1378:	10877b04 	addi	r2,r2,7660
    137c:	11000017 	ldw	r4,0(r2)
    1380:	9c000217 	ldw	r16,8(r19)
    1384:	20c0012e 	bgeu	r4,r3,138c <_malloc_r+0x48c>
    1388:	10c00015 	stw	r3,0(r2)
    138c:	80c00117 	ldw	r3,4(r16)
    1390:	00bfff04 	movi	r2,-4
    1394:	1886703a 	and	r3,r3,r2
    1398:	1c45c83a 	sub	r2,r3,r17
    139c:	1c400236 	bltu	r3,r17,13a8 <_malloc_r+0x4a8>
    13a0:	00c003c4 	movi	r3,15
    13a4:	18800416 	blt	r3,r2,13b8 <_malloc_r+0x4b8>
    13a8:	9009883a 	mov	r4,r18
    13ac:	0003dbc0 	call	3dbc <__malloc_unlock>
    13b0:	0005883a 	mov	r2,zero
    13b4:	003f7b06 	br	11a4 <_malloc_r+0x2a4>
    13b8:	88c00054 	ori	r3,r17,1
    13bc:	80c00115 	stw	r3,4(r16)
    13c0:	8463883a 	add	r17,r16,r17
    13c4:	10800054 	ori	r2,r2,1
    13c8:	9c400215 	stw	r17,8(r19)
    13cc:	88800115 	stw	r2,4(r17)
    13d0:	9009883a 	mov	r4,r18
    13d4:	0003dbc0 	call	3dbc <__malloc_unlock>
    13d8:	80800204 	addi	r2,r16,8
    13dc:	003f7106 	br	11a4 <_malloc_r+0x2a4>
    13e0:	00c00504 	movi	r3,20
    13e4:	18804a2e 	bgeu	r3,r2,1510 <_malloc_r+0x610>
    13e8:	00c01504 	movi	r3,84
    13ec:	18806e36 	bltu	r3,r2,15a8 <_malloc_r+0x6a8>
    13f0:	8804d33a 	srli	r2,r17,12
    13f4:	12001bc4 	addi	r8,r2,111
    13f8:	11c01b84 	addi	r7,r2,110
    13fc:	4209883a 	add	r4,r8,r8
    1400:	003edd06 	br	f78 <_malloc_r+0x78>
    1404:	3804d27a 	srli	r2,r7,9
    1408:	00c00104 	movi	r3,4
    140c:	1880442e 	bgeu	r3,r2,1520 <_malloc_r+0x620>
    1410:	00c00504 	movi	r3,20
    1414:	18808136 	bltu	r3,r2,161c <_malloc_r+0x71c>
    1418:	11401704 	addi	r5,r2,92
    141c:	10c016c4 	addi	r3,r2,91
    1420:	294b883a 	add	r5,r5,r5
    1424:	294b883a 	add	r5,r5,r5
    1428:	294b883a 	add	r5,r5,r5
    142c:	994b883a 	add	r5,r19,r5
    1430:	28800017 	ldw	r2,0(r5)
    1434:	01800074 	movhi	r6,1
    1438:	297ffe04 	addi	r5,r5,-8
    143c:	31bb0a04 	addi	r6,r6,-5080
    1440:	28806526 	beq	r5,r2,15d8 <_malloc_r+0x6d8>
    1444:	01bfff04 	movi	r6,-4
    1448:	10c00117 	ldw	r3,4(r2)
    144c:	1986703a 	and	r3,r3,r6
    1450:	38c0022e 	bgeu	r7,r3,145c <_malloc_r+0x55c>
    1454:	10800217 	ldw	r2,8(r2)
    1458:	28bffb1e 	bne	r5,r2,1448 <_malloc_r+0x548>
    145c:	11400317 	ldw	r5,12(r2)
    1460:	98c00117 	ldw	r3,4(r19)
    1464:	81400315 	stw	r5,12(r16)
    1468:	80800215 	stw	r2,8(r16)
    146c:	2c000215 	stw	r16,8(r5)
    1470:	14000315 	stw	r16,12(r2)
    1474:	003ef806 	br	1058 <_malloc_r+0x158>
    1478:	88c00054 	ori	r3,r17,1
    147c:	80c00115 	stw	r3,4(r16)
    1480:	8463883a 	add	r17,r16,r17
    1484:	34400515 	stw	r17,20(r6)
    1488:	34400415 	stw	r17,16(r6)
    148c:	10c00054 	ori	r3,r2,1
    1490:	8a000315 	stw	r8,12(r17)
    1494:	8a000215 	stw	r8,8(r17)
    1498:	88c00115 	stw	r3,4(r17)
    149c:	88a3883a 	add	r17,r17,r2
    14a0:	88800015 	stw	r2,0(r17)
    14a4:	9009883a 	mov	r4,r18
    14a8:	0003dbc0 	call	3dbc <__malloc_unlock>
    14ac:	80800204 	addi	r2,r16,8
    14b0:	003f3c06 	br	11a4 <_malloc_r+0x2a4>
    14b4:	30c00117 	ldw	r3,4(r6)
    14b8:	003ee706 	br	1058 <_malloc_r+0x158>
    14bc:	5ac00044 	addi	r11,r11,1
    14c0:	588000cc 	andi	r2,r11,3
    14c4:	31800204 	addi	r6,r6,8
    14c8:	103efd1e 	bne	r2,zero,10c0 <_malloc_r+0x1c0>
    14cc:	00002406 	br	1560 <_malloc_r+0x660>
    14d0:	14000317 	ldw	r16,12(r2)
    14d4:	143f251e 	bne	r2,r16,116c <_malloc_r+0x26c>
    14d8:	21000084 	addi	r4,r4,2
    14dc:	003ebc06 	br	fd0 <_malloc_r+0xd0>
    14e0:	8085883a 	add	r2,r16,r2
    14e4:	10c00117 	ldw	r3,4(r2)
    14e8:	81000317 	ldw	r4,12(r16)
    14ec:	81400217 	ldw	r5,8(r16)
    14f0:	18c00054 	ori	r3,r3,1
    14f4:	10c00115 	stw	r3,4(r2)
    14f8:	29000315 	stw	r4,12(r5)
    14fc:	21400215 	stw	r5,8(r4)
    1500:	9009883a 	mov	r4,r18
    1504:	0003dbc0 	call	3dbc <__malloc_unlock>
    1508:	80800204 	addi	r2,r16,8
    150c:	003f2506 	br	11a4 <_malloc_r+0x2a4>
    1510:	12001704 	addi	r8,r2,92
    1514:	11c016c4 	addi	r7,r2,91
    1518:	4209883a 	add	r4,r8,r8
    151c:	003e9606 	br	f78 <_malloc_r+0x78>
    1520:	3804d1ba 	srli	r2,r7,6
    1524:	11400e44 	addi	r5,r2,57
    1528:	10c00e04 	addi	r3,r2,56
    152c:	294b883a 	add	r5,r5,r5
    1530:	003fbc06 	br	1424 <_malloc_r+0x524>
    1534:	84ff5926 	beq	r16,r19,129c <_malloc_r+0x39c>
    1538:	00800074 	movhi	r2,1
    153c:	10bb0a04 	addi	r2,r2,-5080
    1540:	14000217 	ldw	r16,8(r2)
    1544:	00bfff04 	movi	r2,-4
    1548:	80c00117 	ldw	r3,4(r16)
    154c:	1886703a 	and	r3,r3,r2
    1550:	003f9106 	br	1398 <_malloc_r+0x498>
    1554:	60800217 	ldw	r2,8(r12)
    1558:	213fffc4 	addi	r4,r4,-1
    155c:	1300651e 	bne	r2,r12,16f4 <_malloc_r+0x7f4>
    1560:	208000cc 	andi	r2,r4,3
    1564:	633ffe04 	addi	r12,r12,-8
    1568:	103ffa1e 	bne	r2,zero,1554 <_malloc_r+0x654>
    156c:	98800117 	ldw	r2,4(r19)
    1570:	0146303a 	nor	r3,zero,r5
    1574:	1884703a 	and	r2,r3,r2
    1578:	98800115 	stw	r2,4(r19)
    157c:	294b883a 	add	r5,r5,r5
    1580:	117f2836 	bltu	r2,r5,1224 <_malloc_r+0x324>
    1584:	283f2726 	beq	r5,zero,1224 <_malloc_r+0x324>
    1588:	2886703a 	and	r3,r5,r2
    158c:	5809883a 	mov	r4,r11
    1590:	183ec31e 	bne	r3,zero,10a0 <_malloc_r+0x1a0>
    1594:	294b883a 	add	r5,r5,r5
    1598:	2886703a 	and	r3,r5,r2
    159c:	21000104 	addi	r4,r4,4
    15a0:	183ffc26 	beq	r3,zero,1594 <_malloc_r+0x694>
    15a4:	003ebe06 	br	10a0 <_malloc_r+0x1a0>
    15a8:	00c05504 	movi	r3,340
    15ac:	18801236 	bltu	r3,r2,15f8 <_malloc_r+0x6f8>
    15b0:	8804d3fa 	srli	r2,r17,15
    15b4:	12001e04 	addi	r8,r2,120
    15b8:	11c01dc4 	addi	r7,r2,119
    15bc:	4209883a 	add	r4,r8,r8
    15c0:	003e6d06 	br	f78 <_malloc_r+0x78>
    15c4:	00c40004 	movi	r3,4096
    15c8:	003f4606 	br	12e4 <_malloc_r+0x3e4>
    15cc:	00800044 	movi	r2,1
    15d0:	a0800115 	stw	r2,4(r20)
    15d4:	003f7406 	br	13a8 <_malloc_r+0x4a8>
    15d8:	1805d0ba 	srai	r2,r3,2
    15dc:	01c00044 	movi	r7,1
    15e0:	30c00117 	ldw	r3,4(r6)
    15e4:	388e983a 	sll	r7,r7,r2
    15e8:	2805883a 	mov	r2,r5
    15ec:	38c6b03a 	or	r3,r7,r3
    15f0:	30c00115 	stw	r3,4(r6)
    15f4:	003f9b06 	br	1464 <_malloc_r+0x564>
    15f8:	00c15504 	movi	r3,1364
    15fc:	18801a36 	bltu	r3,r2,1668 <_malloc_r+0x768>
    1600:	8804d4ba 	srli	r2,r17,18
    1604:	12001f44 	addi	r8,r2,125
    1608:	11c01f04 	addi	r7,r2,124
    160c:	4209883a 	add	r4,r8,r8
    1610:	003e5906 	br	f78 <_malloc_r+0x78>
    1614:	ad400404 	addi	r21,r21,16
    1618:	003f1706 	br	1278 <_malloc_r+0x378>
    161c:	00c01504 	movi	r3,84
    1620:	18802336 	bltu	r3,r2,16b0 <_malloc_r+0x7b0>
    1624:	3804d33a 	srli	r2,r7,12
    1628:	11401bc4 	addi	r5,r2,111
    162c:	10c01b84 	addi	r3,r2,110
    1630:	294b883a 	add	r5,r5,r5
    1634:	003f7b06 	br	1424 <_malloc_r+0x524>
    1638:	9c000217 	ldw	r16,8(r19)
    163c:	00bfff04 	movi	r2,-4
    1640:	80c00117 	ldw	r3,4(r16)
    1644:	1886703a 	and	r3,r3,r2
    1648:	003f5306 	br	1398 <_malloc_r+0x498>
    164c:	3083ffcc 	andi	r2,r6,4095
    1650:	103f181e 	bne	r2,zero,12b4 <_malloc_r+0x3b4>
    1654:	99000217 	ldw	r4,8(r19)
    1658:	b545883a 	add	r2,r22,r21
    165c:	10800054 	ori	r2,r2,1
    1660:	20800115 	stw	r2,4(r4)
    1664:	003f3e06 	br	1360 <_malloc_r+0x460>
    1668:	01003f84 	movi	r4,254
    166c:	02001fc4 	movi	r8,127
    1670:	01c01f84 	movi	r7,126
    1674:	003e4006 	br	f78 <_malloc_r+0x78>
    1678:	00800074 	movhi	r2,1
    167c:	10809304 	addi	r2,r2,588
    1680:	15000015 	stw	r20,0(r2)
    1684:	003f1106 	br	12cc <_malloc_r+0x3cc>
    1688:	00800044 	movi	r2,1
    168c:	002b883a 	mov	r21,zero
    1690:	003f1f06 	br	1310 <_malloc_r+0x410>
    1694:	81400204 	addi	r5,r16,8
    1698:	9009883a 	mov	r4,r18
    169c:	00029880 	call	2988 <_free_r>
    16a0:	00800074 	movhi	r2,1
    16a4:	10879f04 	addi	r2,r2,7804
    16a8:	10c00017 	ldw	r3,0(r2)
    16ac:	003f2c06 	br	1360 <_malloc_r+0x460>
    16b0:	00c05504 	movi	r3,340
    16b4:	18800536 	bltu	r3,r2,16cc <_malloc_r+0x7cc>
    16b8:	3804d3fa 	srli	r2,r7,15
    16bc:	11401e04 	addi	r5,r2,120
    16c0:	10c01dc4 	addi	r3,r2,119
    16c4:	294b883a 	add	r5,r5,r5
    16c8:	003f5606 	br	1424 <_malloc_r+0x524>
    16cc:	00c15504 	movi	r3,1364
    16d0:	18800536 	bltu	r3,r2,16e8 <_malloc_r+0x7e8>
    16d4:	3804d4ba 	srli	r2,r7,18
    16d8:	11401f44 	addi	r5,r2,125
    16dc:	10c01f04 	addi	r3,r2,124
    16e0:	294b883a 	add	r5,r5,r5
    16e4:	003f4f06 	br	1424 <_malloc_r+0x524>
    16e8:	01403f84 	movi	r5,254
    16ec:	00c01f84 	movi	r3,126
    16f0:	003f4c06 	br	1424 <_malloc_r+0x524>
    16f4:	98800117 	ldw	r2,4(r19)
    16f8:	003fa006 	br	157c <_malloc_r+0x67c>
    16fc:	8808d0fa 	srli	r4,r17,3
    1700:	20800044 	addi	r2,r4,1
    1704:	1085883a 	add	r2,r2,r2
    1708:	003e9006 	br	114c <_malloc_r+0x24c>

0000170c <memchr>:
    170c:	208000cc 	andi	r2,r4,3
    1710:	280f883a 	mov	r7,r5
    1714:	10003426 	beq	r2,zero,17e8 <memchr+0xdc>
    1718:	30bfffc4 	addi	r2,r6,-1
    171c:	30001a26 	beq	r6,zero,1788 <memchr+0x7c>
    1720:	20c00003 	ldbu	r3,0(r4)
    1724:	29803fcc 	andi	r6,r5,255
    1728:	30c0051e 	bne	r6,r3,1740 <memchr+0x34>
    172c:	00001806 	br	1790 <memchr+0x84>
    1730:	10001526 	beq	r2,zero,1788 <memchr+0x7c>
    1734:	20c00003 	ldbu	r3,0(r4)
    1738:	10bfffc4 	addi	r2,r2,-1
    173c:	30c01426 	beq	r6,r3,1790 <memchr+0x84>
    1740:	21000044 	addi	r4,r4,1
    1744:	20c000cc 	andi	r3,r4,3
    1748:	183ff91e 	bne	r3,zero,1730 <memchr+0x24>
    174c:	020000c4 	movi	r8,3
    1750:	40801136 	bltu	r8,r2,1798 <memchr+0x8c>
    1754:	10000c26 	beq	r2,zero,1788 <memchr+0x7c>
    1758:	20c00003 	ldbu	r3,0(r4)
    175c:	29403fcc 	andi	r5,r5,255
    1760:	28c00b26 	beq	r5,r3,1790 <memchr+0x84>
    1764:	20c00044 	addi	r3,r4,1
    1768:	39803fcc 	andi	r6,r7,255
    176c:	2089883a 	add	r4,r4,r2
    1770:	00000306 	br	1780 <memchr+0x74>
    1774:	18c00044 	addi	r3,r3,1
    1778:	197fffc3 	ldbu	r5,-1(r3)
    177c:	31400526 	beq	r6,r5,1794 <memchr+0x88>
    1780:	1805883a 	mov	r2,r3
    1784:	20fffb1e 	bne	r4,r3,1774 <memchr+0x68>
    1788:	0005883a 	mov	r2,zero
    178c:	f800283a 	ret
    1790:	2005883a 	mov	r2,r4
    1794:	f800283a 	ret
    1798:	28c03fcc 	andi	r3,r5,255
    179c:	1812923a 	slli	r9,r3,8
    17a0:	02ffbff4 	movhi	r11,65279
    17a4:	02a02074 	movhi	r10,32897
    17a8:	48d2b03a 	or	r9,r9,r3
    17ac:	4806943a 	slli	r3,r9,16
    17b0:	5affbfc4 	addi	r11,r11,-257
    17b4:	52a02004 	addi	r10,r10,-32640
    17b8:	48d2b03a 	or	r9,r9,r3
    17bc:	20c00017 	ldw	r3,0(r4)
    17c0:	48c6f03a 	xor	r3,r9,r3
    17c4:	1acd883a 	add	r6,r3,r11
    17c8:	00c6303a 	nor	r3,zero,r3
    17cc:	30c6703a 	and	r3,r6,r3
    17d0:	1a86703a 	and	r3,r3,r10
    17d4:	183fe01e 	bne	r3,zero,1758 <memchr+0x4c>
    17d8:	10bfff04 	addi	r2,r2,-4
    17dc:	21000104 	addi	r4,r4,4
    17e0:	40bff636 	bltu	r8,r2,17bc <memchr+0xb0>
    17e4:	003fdb06 	br	1754 <memchr+0x48>
    17e8:	3005883a 	mov	r2,r6
    17ec:	003fd706 	br	174c <memchr+0x40>

000017f0 <memcpy>:
    17f0:	defffd04 	addi	sp,sp,-12
    17f4:	dfc00215 	stw	ra,8(sp)
    17f8:	dc400115 	stw	r17,4(sp)
    17fc:	dc000015 	stw	r16,0(sp)
    1800:	00c003c4 	movi	r3,15
    1804:	2005883a 	mov	r2,r4
    1808:	1980452e 	bgeu	r3,r6,1920 <memcpy+0x130>
    180c:	2906b03a 	or	r3,r5,r4
    1810:	18c000cc 	andi	r3,r3,3
    1814:	1800441e 	bne	r3,zero,1928 <memcpy+0x138>
    1818:	347ffc04 	addi	r17,r6,-16
    181c:	8822d13a 	srli	r17,r17,4
    1820:	28c00104 	addi	r3,r5,4
    1824:	23400104 	addi	r13,r4,4
    1828:	8820913a 	slli	r16,r17,4
    182c:	2b000204 	addi	r12,r5,8
    1830:	22c00204 	addi	r11,r4,8
    1834:	84000504 	addi	r16,r16,20
    1838:	2a800304 	addi	r10,r5,12
    183c:	22400304 	addi	r9,r4,12
    1840:	2c21883a 	add	r16,r5,r16
    1844:	2811883a 	mov	r8,r5
    1848:	200f883a 	mov	r7,r4
    184c:	41000017 	ldw	r4,0(r8)
    1850:	1fc00017 	ldw	ra,0(r3)
    1854:	63c00017 	ldw	r15,0(r12)
    1858:	39000015 	stw	r4,0(r7)
    185c:	53800017 	ldw	r14,0(r10)
    1860:	6fc00015 	stw	ra,0(r13)
    1864:	5bc00015 	stw	r15,0(r11)
    1868:	4b800015 	stw	r14,0(r9)
    186c:	18c00404 	addi	r3,r3,16
    1870:	39c00404 	addi	r7,r7,16
    1874:	42000404 	addi	r8,r8,16
    1878:	6b400404 	addi	r13,r13,16
    187c:	63000404 	addi	r12,r12,16
    1880:	5ac00404 	addi	r11,r11,16
    1884:	52800404 	addi	r10,r10,16
    1888:	4a400404 	addi	r9,r9,16
    188c:	1c3fef1e 	bne	r3,r16,184c <memcpy+0x5c>
    1890:	89c00044 	addi	r7,r17,1
    1894:	380e913a 	slli	r7,r7,4
    1898:	310003cc 	andi	r4,r6,15
    189c:	02c000c4 	movi	r11,3
    18a0:	11c7883a 	add	r3,r2,r7
    18a4:	29cb883a 	add	r5,r5,r7
    18a8:	5900212e 	bgeu	r11,r4,1930 <memcpy+0x140>
    18ac:	1813883a 	mov	r9,r3
    18b0:	2811883a 	mov	r8,r5
    18b4:	200f883a 	mov	r7,r4
    18b8:	42800017 	ldw	r10,0(r8)
    18bc:	4a400104 	addi	r9,r9,4
    18c0:	39ffff04 	addi	r7,r7,-4
    18c4:	4abfff15 	stw	r10,-4(r9)
    18c8:	42000104 	addi	r8,r8,4
    18cc:	59fffa36 	bltu	r11,r7,18b8 <memcpy+0xc8>
    18d0:	213fff04 	addi	r4,r4,-4
    18d4:	2008d0ba 	srli	r4,r4,2
    18d8:	318000cc 	andi	r6,r6,3
    18dc:	21000044 	addi	r4,r4,1
    18e0:	2109883a 	add	r4,r4,r4
    18e4:	2109883a 	add	r4,r4,r4
    18e8:	1907883a 	add	r3,r3,r4
    18ec:	290b883a 	add	r5,r5,r4
    18f0:	30000626 	beq	r6,zero,190c <memcpy+0x11c>
    18f4:	198d883a 	add	r6,r3,r6
    18f8:	29c00003 	ldbu	r7,0(r5)
    18fc:	18c00044 	addi	r3,r3,1
    1900:	29400044 	addi	r5,r5,1
    1904:	19ffffc5 	stb	r7,-1(r3)
    1908:	19bffb1e 	bne	r3,r6,18f8 <memcpy+0x108>
    190c:	dfc00217 	ldw	ra,8(sp)
    1910:	dc400117 	ldw	r17,4(sp)
    1914:	dc000017 	ldw	r16,0(sp)
    1918:	dec00304 	addi	sp,sp,12
    191c:	f800283a 	ret
    1920:	2007883a 	mov	r3,r4
    1924:	003ff206 	br	18f0 <memcpy+0x100>
    1928:	2007883a 	mov	r3,r4
    192c:	003ff106 	br	18f4 <memcpy+0x104>
    1930:	200d883a 	mov	r6,r4
    1934:	003fee06 	br	18f0 <memcpy+0x100>

00001938 <memmove>:
    1938:	2005883a 	mov	r2,r4
    193c:	29000b2e 	bgeu	r5,r4,196c <memmove+0x34>
    1940:	298f883a 	add	r7,r5,r6
    1944:	21c0092e 	bgeu	r4,r7,196c <memmove+0x34>
    1948:	2187883a 	add	r3,r4,r6
    194c:	198bc83a 	sub	r5,r3,r6
    1950:	30004826 	beq	r6,zero,1a74 <memmove+0x13c>
    1954:	39ffffc4 	addi	r7,r7,-1
    1958:	39000003 	ldbu	r4,0(r7)
    195c:	18ffffc4 	addi	r3,r3,-1
    1960:	19000005 	stb	r4,0(r3)
    1964:	28fffb1e 	bne	r5,r3,1954 <memmove+0x1c>
    1968:	f800283a 	ret
    196c:	00c003c4 	movi	r3,15
    1970:	1980412e 	bgeu	r3,r6,1a78 <memmove+0x140>
    1974:	2886b03a 	or	r3,r5,r2
    1978:	18c000cc 	andi	r3,r3,3
    197c:	1800401e 	bne	r3,zero,1a80 <memmove+0x148>
    1980:	33fffc04 	addi	r15,r6,-16
    1984:	781ed13a 	srli	r15,r15,4
    1988:	28c00104 	addi	r3,r5,4
    198c:	13400104 	addi	r13,r2,4
    1990:	781c913a 	slli	r14,r15,4
    1994:	2b000204 	addi	r12,r5,8
    1998:	12c00204 	addi	r11,r2,8
    199c:	73800504 	addi	r14,r14,20
    19a0:	2a800304 	addi	r10,r5,12
    19a4:	12400304 	addi	r9,r2,12
    19a8:	2b9d883a 	add	r14,r5,r14
    19ac:	2811883a 	mov	r8,r5
    19b0:	100f883a 	mov	r7,r2
    19b4:	41000017 	ldw	r4,0(r8)
    19b8:	39c00404 	addi	r7,r7,16
    19bc:	18c00404 	addi	r3,r3,16
    19c0:	393ffc15 	stw	r4,-16(r7)
    19c4:	193ffc17 	ldw	r4,-16(r3)
    19c8:	6b400404 	addi	r13,r13,16
    19cc:	5ac00404 	addi	r11,r11,16
    19d0:	693ffc15 	stw	r4,-16(r13)
    19d4:	61000017 	ldw	r4,0(r12)
    19d8:	4a400404 	addi	r9,r9,16
    19dc:	42000404 	addi	r8,r8,16
    19e0:	593ffc15 	stw	r4,-16(r11)
    19e4:	51000017 	ldw	r4,0(r10)
    19e8:	63000404 	addi	r12,r12,16
    19ec:	52800404 	addi	r10,r10,16
    19f0:	493ffc15 	stw	r4,-16(r9)
    19f4:	1bbfef1e 	bne	r3,r14,19b4 <memmove+0x7c>
    19f8:	79000044 	addi	r4,r15,1
    19fc:	2008913a 	slli	r4,r4,4
    1a00:	328003cc 	andi	r10,r6,15
    1a04:	02c000c4 	movi	r11,3
    1a08:	1107883a 	add	r3,r2,r4
    1a0c:	290b883a 	add	r5,r5,r4
    1a10:	5a801e2e 	bgeu	r11,r10,1a8c <memmove+0x154>
    1a14:	1813883a 	mov	r9,r3
    1a18:	2811883a 	mov	r8,r5
    1a1c:	500f883a 	mov	r7,r10
    1a20:	41000017 	ldw	r4,0(r8)
    1a24:	4a400104 	addi	r9,r9,4
    1a28:	39ffff04 	addi	r7,r7,-4
    1a2c:	493fff15 	stw	r4,-4(r9)
    1a30:	42000104 	addi	r8,r8,4
    1a34:	59fffa36 	bltu	r11,r7,1a20 <memmove+0xe8>
    1a38:	513fff04 	addi	r4,r10,-4
    1a3c:	2008d0ba 	srli	r4,r4,2
    1a40:	318000cc 	andi	r6,r6,3
    1a44:	21000044 	addi	r4,r4,1
    1a48:	2109883a 	add	r4,r4,r4
    1a4c:	2109883a 	add	r4,r4,r4
    1a50:	1907883a 	add	r3,r3,r4
    1a54:	290b883a 	add	r5,r5,r4
    1a58:	30000b26 	beq	r6,zero,1a88 <memmove+0x150>
    1a5c:	198d883a 	add	r6,r3,r6
    1a60:	29c00003 	ldbu	r7,0(r5)
    1a64:	18c00044 	addi	r3,r3,1
    1a68:	29400044 	addi	r5,r5,1
    1a6c:	19ffffc5 	stb	r7,-1(r3)
    1a70:	19bffb1e 	bne	r3,r6,1a60 <memmove+0x128>
    1a74:	f800283a 	ret
    1a78:	1007883a 	mov	r3,r2
    1a7c:	003ff606 	br	1a58 <memmove+0x120>
    1a80:	1007883a 	mov	r3,r2
    1a84:	003ff506 	br	1a5c <memmove+0x124>
    1a88:	f800283a 	ret
    1a8c:	500d883a 	mov	r6,r10
    1a90:	003ff106 	br	1a58 <memmove+0x120>

00001a94 <memset>:
    1a94:	20c000cc 	andi	r3,r4,3
    1a98:	2005883a 	mov	r2,r4
    1a9c:	18004426 	beq	r3,zero,1bb0 <memset+0x11c>
    1aa0:	31ffffc4 	addi	r7,r6,-1
    1aa4:	30004026 	beq	r6,zero,1ba8 <memset+0x114>
    1aa8:	2813883a 	mov	r9,r5
    1aac:	200d883a 	mov	r6,r4
    1ab0:	2007883a 	mov	r3,r4
    1ab4:	00000406 	br	1ac8 <memset+0x34>
    1ab8:	3a3fffc4 	addi	r8,r7,-1
    1abc:	31800044 	addi	r6,r6,1
    1ac0:	38003926 	beq	r7,zero,1ba8 <memset+0x114>
    1ac4:	400f883a 	mov	r7,r8
    1ac8:	18c00044 	addi	r3,r3,1
    1acc:	32400005 	stb	r9,0(r6)
    1ad0:	1a0000cc 	andi	r8,r3,3
    1ad4:	403ff81e 	bne	r8,zero,1ab8 <memset+0x24>
    1ad8:	010000c4 	movi	r4,3
    1adc:	21c02d2e 	bgeu	r4,r7,1b94 <memset+0x100>
    1ae0:	29003fcc 	andi	r4,r5,255
    1ae4:	200c923a 	slli	r6,r4,8
    1ae8:	3108b03a 	or	r4,r6,r4
    1aec:	200c943a 	slli	r6,r4,16
    1af0:	218cb03a 	or	r6,r4,r6
    1af4:	010003c4 	movi	r4,15
    1af8:	21c0182e 	bgeu	r4,r7,1b5c <memset+0xc8>
    1afc:	3b3ffc04 	addi	r12,r7,-16
    1b00:	6018d13a 	srli	r12,r12,4
    1b04:	1a000104 	addi	r8,r3,4
    1b08:	1ac00204 	addi	r11,r3,8
    1b0c:	6008913a 	slli	r4,r12,4
    1b10:	1a800304 	addi	r10,r3,12
    1b14:	1813883a 	mov	r9,r3
    1b18:	21000504 	addi	r4,r4,20
    1b1c:	1909883a 	add	r4,r3,r4
    1b20:	49800015 	stw	r6,0(r9)
    1b24:	41800015 	stw	r6,0(r8)
    1b28:	59800015 	stw	r6,0(r11)
    1b2c:	51800015 	stw	r6,0(r10)
    1b30:	42000404 	addi	r8,r8,16
    1b34:	4a400404 	addi	r9,r9,16
    1b38:	5ac00404 	addi	r11,r11,16
    1b3c:	52800404 	addi	r10,r10,16
    1b40:	413ff71e 	bne	r8,r4,1b20 <memset+0x8c>
    1b44:	63000044 	addi	r12,r12,1
    1b48:	6018913a 	slli	r12,r12,4
    1b4c:	39c003cc 	andi	r7,r7,15
    1b50:	010000c4 	movi	r4,3
    1b54:	1b07883a 	add	r3,r3,r12
    1b58:	21c00e2e 	bgeu	r4,r7,1b94 <memset+0x100>
    1b5c:	1813883a 	mov	r9,r3
    1b60:	3811883a 	mov	r8,r7
    1b64:	010000c4 	movi	r4,3
    1b68:	49800015 	stw	r6,0(r9)
    1b6c:	423fff04 	addi	r8,r8,-4
    1b70:	4a400104 	addi	r9,r9,4
    1b74:	223ffc36 	bltu	r4,r8,1b68 <memset+0xd4>
    1b78:	393fff04 	addi	r4,r7,-4
    1b7c:	2008d0ba 	srli	r4,r4,2
    1b80:	39c000cc 	andi	r7,r7,3
    1b84:	21000044 	addi	r4,r4,1
    1b88:	2109883a 	add	r4,r4,r4
    1b8c:	2109883a 	add	r4,r4,r4
    1b90:	1907883a 	add	r3,r3,r4
    1b94:	38000526 	beq	r7,zero,1bac <memset+0x118>
    1b98:	19cf883a 	add	r7,r3,r7
    1b9c:	19400005 	stb	r5,0(r3)
    1ba0:	18c00044 	addi	r3,r3,1
    1ba4:	38fffd1e 	bne	r7,r3,1b9c <memset+0x108>
    1ba8:	f800283a 	ret
    1bac:	f800283a 	ret
    1bb0:	2007883a 	mov	r3,r4
    1bb4:	300f883a 	mov	r7,r6
    1bb8:	003fc706 	br	1ad8 <memset+0x44>

00001bbc <_realloc_r>:
    1bbc:	defff604 	addi	sp,sp,-40
    1bc0:	dc400115 	stw	r17,4(sp)
    1bc4:	dfc00915 	stw	ra,36(sp)
    1bc8:	df000815 	stw	fp,32(sp)
    1bcc:	ddc00715 	stw	r23,28(sp)
    1bd0:	dd800615 	stw	r22,24(sp)
    1bd4:	dd400515 	stw	r21,20(sp)
    1bd8:	dd000415 	stw	r20,16(sp)
    1bdc:	dcc00315 	stw	r19,12(sp)
    1be0:	dc800215 	stw	r18,8(sp)
    1be4:	dc000015 	stw	r16,0(sp)
    1be8:	3023883a 	mov	r17,r6
    1bec:	2800b626 	beq	r5,zero,1ec8 <_realloc_r+0x30c>
    1bf0:	2829883a 	mov	r20,r5
    1bf4:	2025883a 	mov	r18,r4
    1bf8:	0003c840 	call	3c84 <__malloc_lock>
    1bfc:	a0ffff17 	ldw	r3,-4(r20)
    1c00:	043fff04 	movi	r16,-4
    1c04:	888002c4 	addi	r2,r17,11
    1c08:	01000584 	movi	r4,22
    1c0c:	a57ffe04 	addi	r21,r20,-8
    1c10:	1c20703a 	and	r16,r3,r16
    1c14:	2080332e 	bgeu	r4,r2,1ce4 <_realloc_r+0x128>
    1c18:	05bffe04 	movi	r22,-8
    1c1c:	15ac703a 	and	r22,r2,r22
    1c20:	b005883a 	mov	r2,r22
    1c24:	b0005716 	blt	r22,zero,1d84 <_realloc_r+0x1c8>
    1c28:	b4405636 	bltu	r22,r17,1d84 <_realloc_r+0x1c8>
    1c2c:	8080300e 	bge	r16,r2,1cf0 <_realloc_r+0x134>
    1c30:	07000074 	movhi	fp,1
    1c34:	e73b0a04 	addi	fp,fp,-5080
    1c38:	e2000217 	ldw	r8,8(fp)
    1c3c:	ac09883a 	add	r4,r21,r16
    1c40:	22006126 	beq	r4,r8,1dc8 <_realloc_r+0x20c>
    1c44:	22400117 	ldw	r9,4(r4)
    1c48:	01ffff84 	movi	r7,-2
    1c4c:	49ce703a 	and	r7,r9,r7
    1c50:	21cf883a 	add	r7,r4,r7
    1c54:	39800117 	ldw	r6,4(r7)
    1c58:	3180004c 	andi	r6,r6,1
    1c5c:	30003e26 	beq	r6,zero,1d58 <_realloc_r+0x19c>
    1c60:	18c0004c 	andi	r3,r3,1
    1c64:	18008126 	beq	r3,zero,1e6c <_realloc_r+0x2b0>
    1c68:	880b883a 	mov	r5,r17
    1c6c:	9009883a 	mov	r4,r18
    1c70:	0000f000 	call	f00 <_malloc_r>
    1c74:	1023883a 	mov	r17,r2
    1c78:	10011e26 	beq	r2,zero,20f4 <_realloc_r+0x538>
    1c7c:	a0ffff17 	ldw	r3,-4(r20)
    1c80:	113ffe04 	addi	r4,r2,-8
    1c84:	00bfff84 	movi	r2,-2
    1c88:	1884703a 	and	r2,r3,r2
    1c8c:	a885883a 	add	r2,r21,r2
    1c90:	2080ee26 	beq	r4,r2,204c <_realloc_r+0x490>
    1c94:	81bfff04 	addi	r6,r16,-4
    1c98:	00800904 	movi	r2,36
    1c9c:	1180b836 	bltu	r2,r6,1f80 <_realloc_r+0x3c4>
    1ca0:	00c004c4 	movi	r3,19
    1ca4:	19809536 	bltu	r3,r6,1efc <_realloc_r+0x340>
    1ca8:	8805883a 	mov	r2,r17
    1cac:	a007883a 	mov	r3,r20
    1cb0:	19000017 	ldw	r4,0(r3)
    1cb4:	11000015 	stw	r4,0(r2)
    1cb8:	19000117 	ldw	r4,4(r3)
    1cbc:	11000115 	stw	r4,4(r2)
    1cc0:	18c00217 	ldw	r3,8(r3)
    1cc4:	10c00215 	stw	r3,8(r2)
    1cc8:	a00b883a 	mov	r5,r20
    1ccc:	9009883a 	mov	r4,r18
    1cd0:	00029880 	call	2988 <_free_r>
    1cd4:	9009883a 	mov	r4,r18
    1cd8:	0003dbc0 	call	3dbc <__malloc_unlock>
    1cdc:	8805883a 	mov	r2,r17
    1ce0:	00001106 	br	1d28 <_realloc_r+0x16c>
    1ce4:	00800404 	movi	r2,16
    1ce8:	102d883a 	mov	r22,r2
    1cec:	003fce06 	br	1c28 <_realloc_r+0x6c>
    1cf0:	a023883a 	mov	r17,r20
    1cf4:	858fc83a 	sub	r7,r16,r22
    1cf8:	008003c4 	movi	r2,15
    1cfc:	18c0004c 	andi	r3,r3,1
    1d00:	11c02436 	bltu	r2,r7,1d94 <_realloc_r+0x1d8>
    1d04:	1c06b03a 	or	r3,r3,r16
    1d08:	a8c00115 	stw	r3,4(r21)
    1d0c:	ac21883a 	add	r16,r21,r16
    1d10:	80800117 	ldw	r2,4(r16)
    1d14:	10800054 	ori	r2,r2,1
    1d18:	80800115 	stw	r2,4(r16)
    1d1c:	9009883a 	mov	r4,r18
    1d20:	0003dbc0 	call	3dbc <__malloc_unlock>
    1d24:	8805883a 	mov	r2,r17
    1d28:	dfc00917 	ldw	ra,36(sp)
    1d2c:	df000817 	ldw	fp,32(sp)
    1d30:	ddc00717 	ldw	r23,28(sp)
    1d34:	dd800617 	ldw	r22,24(sp)
    1d38:	dd400517 	ldw	r21,20(sp)
    1d3c:	dd000417 	ldw	r20,16(sp)
    1d40:	dcc00317 	ldw	r19,12(sp)
    1d44:	dc800217 	ldw	r18,8(sp)
    1d48:	dc400117 	ldw	r17,4(sp)
    1d4c:	dc000017 	ldw	r16,0(sp)
    1d50:	dec00a04 	addi	sp,sp,40
    1d54:	f800283a 	ret
    1d58:	017fff04 	movi	r5,-4
    1d5c:	494a703a 	and	r5,r9,r5
    1d60:	814d883a 	add	r6,r16,r5
    1d64:	30801e16 	blt	r6,r2,1de0 <_realloc_r+0x224>
    1d68:	20800317 	ldw	r2,12(r4)
    1d6c:	21000217 	ldw	r4,8(r4)
    1d70:	a023883a 	mov	r17,r20
    1d74:	3021883a 	mov	r16,r6
    1d78:	20800315 	stw	r2,12(r4)
    1d7c:	11000215 	stw	r4,8(r2)
    1d80:	003fdc06 	br	1cf4 <_realloc_r+0x138>
    1d84:	00800304 	movi	r2,12
    1d88:	90800015 	stw	r2,0(r18)
    1d8c:	0005883a 	mov	r2,zero
    1d90:	003fe506 	br	1d28 <_realloc_r+0x16c>
    1d94:	1d86b03a 	or	r3,r3,r22
    1d98:	a8c00115 	stw	r3,4(r21)
    1d9c:	ad8b883a 	add	r5,r21,r22
    1da0:	38c00054 	ori	r3,r7,1
    1da4:	28c00115 	stw	r3,4(r5)
    1da8:	29cf883a 	add	r7,r5,r7
    1dac:	38c00117 	ldw	r3,4(r7)
    1db0:	29400204 	addi	r5,r5,8
    1db4:	9009883a 	mov	r4,r18
    1db8:	18800054 	ori	r2,r3,1
    1dbc:	38800115 	stw	r2,4(r7)
    1dc0:	00029880 	call	2988 <_free_r>
    1dc4:	003fd506 	br	1d1c <_realloc_r+0x160>
    1dc8:	21c00117 	ldw	r7,4(r4)
    1dcc:	017fff04 	movi	r5,-4
    1dd0:	b1800404 	addi	r6,r22,16
    1dd4:	394a703a 	and	r5,r7,r5
    1dd8:	814f883a 	add	r7,r16,r5
    1ddc:	39805b0e 	bge	r7,r6,1f4c <_realloc_r+0x390>
    1de0:	18c0004c 	andi	r3,r3,1
    1de4:	183fa01e 	bne	r3,zero,1c68 <_realloc_r+0xac>
    1de8:	a4fffe17 	ldw	r19,-8(r20)
    1dec:	00ffff04 	movi	r3,-4
    1df0:	ace7c83a 	sub	r19,r21,r19
    1df4:	99800117 	ldw	r6,4(r19)
    1df8:	30c6703a 	and	r3,r6,r3
    1dfc:	20002026 	beq	r4,zero,1e80 <_realloc_r+0x2c4>
    1e00:	80ef883a 	add	r23,r16,r3
    1e04:	b96f883a 	add	r23,r23,r5
    1e08:	22006126 	beq	r4,r8,1f90 <_realloc_r+0x3d4>
    1e0c:	b8801c16 	blt	r23,r2,1e80 <_realloc_r+0x2c4>
    1e10:	20800317 	ldw	r2,12(r4)
    1e14:	20c00217 	ldw	r3,8(r4)
    1e18:	81bfff04 	addi	r6,r16,-4
    1e1c:	01000904 	movi	r4,36
    1e20:	18800315 	stw	r2,12(r3)
    1e24:	10c00215 	stw	r3,8(r2)
    1e28:	98c00217 	ldw	r3,8(r19)
    1e2c:	98800317 	ldw	r2,12(r19)
    1e30:	9c400204 	addi	r17,r19,8
    1e34:	18800315 	stw	r2,12(r3)
    1e38:	10c00215 	stw	r3,8(r2)
    1e3c:	21801b36 	bltu	r4,r6,1eac <_realloc_r+0x2f0>
    1e40:	008004c4 	movi	r2,19
    1e44:	1180362e 	bgeu	r2,r6,1f20 <_realloc_r+0x364>
    1e48:	a0800017 	ldw	r2,0(r20)
    1e4c:	98800215 	stw	r2,8(r19)
    1e50:	a0800117 	ldw	r2,4(r20)
    1e54:	98800315 	stw	r2,12(r19)
    1e58:	008006c4 	movi	r2,27
    1e5c:	11808136 	bltu	r2,r6,2064 <_realloc_r+0x4a8>
    1e60:	98800404 	addi	r2,r19,16
    1e64:	a5000204 	addi	r20,r20,8
    1e68:	00002e06 	br	1f24 <_realloc_r+0x368>
    1e6c:	a4fffe17 	ldw	r19,-8(r20)
    1e70:	00ffff04 	movi	r3,-4
    1e74:	ace7c83a 	sub	r19,r21,r19
    1e78:	99000117 	ldw	r4,4(r19)
    1e7c:	20c6703a 	and	r3,r4,r3
    1e80:	983f7926 	beq	r19,zero,1c68 <_realloc_r+0xac>
    1e84:	80ef883a 	add	r23,r16,r3
    1e88:	b8bf7716 	blt	r23,r2,1c68 <_realloc_r+0xac>
    1e8c:	98800317 	ldw	r2,12(r19)
    1e90:	98c00217 	ldw	r3,8(r19)
    1e94:	81bfff04 	addi	r6,r16,-4
    1e98:	01000904 	movi	r4,36
    1e9c:	18800315 	stw	r2,12(r3)
    1ea0:	10c00215 	stw	r3,8(r2)
    1ea4:	9c400204 	addi	r17,r19,8
    1ea8:	21bfe52e 	bgeu	r4,r6,1e40 <_realloc_r+0x284>
    1eac:	a00b883a 	mov	r5,r20
    1eb0:	8809883a 	mov	r4,r17
    1eb4:	00019380 	call	1938 <memmove>
    1eb8:	98c00117 	ldw	r3,4(r19)
    1ebc:	b821883a 	mov	r16,r23
    1ec0:	982b883a 	mov	r21,r19
    1ec4:	003f8b06 	br	1cf4 <_realloc_r+0x138>
    1ec8:	300b883a 	mov	r5,r6
    1ecc:	dfc00917 	ldw	ra,36(sp)
    1ed0:	df000817 	ldw	fp,32(sp)
    1ed4:	ddc00717 	ldw	r23,28(sp)
    1ed8:	dd800617 	ldw	r22,24(sp)
    1edc:	dd400517 	ldw	r21,20(sp)
    1ee0:	dd000417 	ldw	r20,16(sp)
    1ee4:	dcc00317 	ldw	r19,12(sp)
    1ee8:	dc800217 	ldw	r18,8(sp)
    1eec:	dc400117 	ldw	r17,4(sp)
    1ef0:	dc000017 	ldw	r16,0(sp)
    1ef4:	dec00a04 	addi	sp,sp,40
    1ef8:	0000f001 	jmpi	f00 <_malloc_r>
    1efc:	a0c00017 	ldw	r3,0(r20)
    1f00:	88c00015 	stw	r3,0(r17)
    1f04:	a0c00117 	ldw	r3,4(r20)
    1f08:	88c00115 	stw	r3,4(r17)
    1f0c:	00c006c4 	movi	r3,27
    1f10:	19804636 	bltu	r3,r6,202c <_realloc_r+0x470>
    1f14:	88800204 	addi	r2,r17,8
    1f18:	a0c00204 	addi	r3,r20,8
    1f1c:	003f6406 	br	1cb0 <_realloc_r+0xf4>
    1f20:	8805883a 	mov	r2,r17
    1f24:	a0c00017 	ldw	r3,0(r20)
    1f28:	b821883a 	mov	r16,r23
    1f2c:	982b883a 	mov	r21,r19
    1f30:	10c00015 	stw	r3,0(r2)
    1f34:	a0c00117 	ldw	r3,4(r20)
    1f38:	10c00115 	stw	r3,4(r2)
    1f3c:	a0c00217 	ldw	r3,8(r20)
    1f40:	10c00215 	stw	r3,8(r2)
    1f44:	98c00117 	ldw	r3,4(r19)
    1f48:	003f6a06 	br	1cf4 <_realloc_r+0x138>
    1f4c:	adab883a 	add	r21,r21,r22
    1f50:	3d85c83a 	sub	r2,r7,r22
    1f54:	e5400215 	stw	r21,8(fp)
    1f58:	10800054 	ori	r2,r2,1
    1f5c:	a8800115 	stw	r2,4(r21)
    1f60:	a0bfff17 	ldw	r2,-4(r20)
    1f64:	9009883a 	mov	r4,r18
    1f68:	1080004c 	andi	r2,r2,1
    1f6c:	1584b03a 	or	r2,r2,r22
    1f70:	a0bfff15 	stw	r2,-4(r20)
    1f74:	0003dbc0 	call	3dbc <__malloc_unlock>
    1f78:	a005883a 	mov	r2,r20
    1f7c:	003f6a06 	br	1d28 <_realloc_r+0x16c>
    1f80:	a00b883a 	mov	r5,r20
    1f84:	8809883a 	mov	r4,r17
    1f88:	00019380 	call	1938 <memmove>
    1f8c:	003f4e06 	br	1cc8 <_realloc_r+0x10c>
    1f90:	b1000404 	addi	r4,r22,16
    1f94:	b93fba16 	blt	r23,r4,1e80 <_realloc_r+0x2c4>
    1f98:	98800317 	ldw	r2,12(r19)
    1f9c:	98c00217 	ldw	r3,8(r19)
    1fa0:	81bfff04 	addi	r6,r16,-4
    1fa4:	01000904 	movi	r4,36
    1fa8:	18800315 	stw	r2,12(r3)
    1fac:	10c00215 	stw	r3,8(r2)
    1fb0:	9c400204 	addi	r17,r19,8
    1fb4:	21804336 	bltu	r4,r6,20c4 <_realloc_r+0x508>
    1fb8:	008004c4 	movi	r2,19
    1fbc:	11803f2e 	bgeu	r2,r6,20bc <_realloc_r+0x500>
    1fc0:	a0800017 	ldw	r2,0(r20)
    1fc4:	98800215 	stw	r2,8(r19)
    1fc8:	a0800117 	ldw	r2,4(r20)
    1fcc:	98800315 	stw	r2,12(r19)
    1fd0:	008006c4 	movi	r2,27
    1fd4:	11803f36 	bltu	r2,r6,20d4 <_realloc_r+0x518>
    1fd8:	98800404 	addi	r2,r19,16
    1fdc:	a5000204 	addi	r20,r20,8
    1fe0:	a0c00017 	ldw	r3,0(r20)
    1fe4:	10c00015 	stw	r3,0(r2)
    1fe8:	a0c00117 	ldw	r3,4(r20)
    1fec:	10c00115 	stw	r3,4(r2)
    1ff0:	a0c00217 	ldw	r3,8(r20)
    1ff4:	10c00215 	stw	r3,8(r2)
    1ff8:	9d87883a 	add	r3,r19,r22
    1ffc:	bd85c83a 	sub	r2,r23,r22
    2000:	e0c00215 	stw	r3,8(fp)
    2004:	10800054 	ori	r2,r2,1
    2008:	18800115 	stw	r2,4(r3)
    200c:	98800117 	ldw	r2,4(r19)
    2010:	9009883a 	mov	r4,r18
    2014:	1080004c 	andi	r2,r2,1
    2018:	1584b03a 	or	r2,r2,r22
    201c:	98800115 	stw	r2,4(r19)
    2020:	0003dbc0 	call	3dbc <__malloc_unlock>
    2024:	8805883a 	mov	r2,r17
    2028:	003f3f06 	br	1d28 <_realloc_r+0x16c>
    202c:	a0c00217 	ldw	r3,8(r20)
    2030:	88c00215 	stw	r3,8(r17)
    2034:	a0c00317 	ldw	r3,12(r20)
    2038:	88c00315 	stw	r3,12(r17)
    203c:	30801126 	beq	r6,r2,2084 <_realloc_r+0x4c8>
    2040:	88800404 	addi	r2,r17,16
    2044:	a0c00404 	addi	r3,r20,16
    2048:	003f1906 	br	1cb0 <_realloc_r+0xf4>
    204c:	893fff17 	ldw	r4,-4(r17)
    2050:	00bfff04 	movi	r2,-4
    2054:	a023883a 	mov	r17,r20
    2058:	2084703a 	and	r2,r4,r2
    205c:	80a1883a 	add	r16,r16,r2
    2060:	003f2406 	br	1cf4 <_realloc_r+0x138>
    2064:	a0800217 	ldw	r2,8(r20)
    2068:	98800415 	stw	r2,16(r19)
    206c:	a0800317 	ldw	r2,12(r20)
    2070:	98800515 	stw	r2,20(r19)
    2074:	31000a26 	beq	r6,r4,20a0 <_realloc_r+0x4e4>
    2078:	98800604 	addi	r2,r19,24
    207c:	a5000404 	addi	r20,r20,16
    2080:	003fa806 	br	1f24 <_realloc_r+0x368>
    2084:	a1000417 	ldw	r4,16(r20)
    2088:	88800604 	addi	r2,r17,24
    208c:	a0c00604 	addi	r3,r20,24
    2090:	89000415 	stw	r4,16(r17)
    2094:	a1000517 	ldw	r4,20(r20)
    2098:	89000515 	stw	r4,20(r17)
    209c:	003f0406 	br	1cb0 <_realloc_r+0xf4>
    20a0:	a0c00417 	ldw	r3,16(r20)
    20a4:	a5000604 	addi	r20,r20,24
    20a8:	98800804 	addi	r2,r19,32
    20ac:	98c00615 	stw	r3,24(r19)
    20b0:	a0ffff17 	ldw	r3,-4(r20)
    20b4:	98c00715 	stw	r3,28(r19)
    20b8:	003f9a06 	br	1f24 <_realloc_r+0x368>
    20bc:	8805883a 	mov	r2,r17
    20c0:	003fc706 	br	1fe0 <_realloc_r+0x424>
    20c4:	a00b883a 	mov	r5,r20
    20c8:	8809883a 	mov	r4,r17
    20cc:	00019380 	call	1938 <memmove>
    20d0:	003fc906 	br	1ff8 <_realloc_r+0x43c>
    20d4:	a0800217 	ldw	r2,8(r20)
    20d8:	98800415 	stw	r2,16(r19)
    20dc:	a0800317 	ldw	r2,12(r20)
    20e0:	98800515 	stw	r2,20(r19)
    20e4:	31000726 	beq	r6,r4,2104 <_realloc_r+0x548>
    20e8:	98800604 	addi	r2,r19,24
    20ec:	a5000404 	addi	r20,r20,16
    20f0:	003fbb06 	br	1fe0 <_realloc_r+0x424>
    20f4:	9009883a 	mov	r4,r18
    20f8:	0003dbc0 	call	3dbc <__malloc_unlock>
    20fc:	0005883a 	mov	r2,zero
    2100:	003f0906 	br	1d28 <_realloc_r+0x16c>
    2104:	a0c00417 	ldw	r3,16(r20)
    2108:	a5000604 	addi	r20,r20,24
    210c:	98800804 	addi	r2,r19,32
    2110:	98c00615 	stw	r3,24(r19)
    2114:	a0ffff17 	ldw	r3,-4(r20)
    2118:	98c00715 	stw	r3,28(r19)
    211c:	003fb006 	br	1fe0 <_realloc_r+0x424>

00002120 <_sbrk_r>:
    2120:	defffd04 	addi	sp,sp,-12
    2124:	dc000015 	stw	r16,0(sp)
    2128:	04000074 	movhi	r16,1
    212c:	dc400115 	stw	r17,4(sp)
    2130:	84077e04 	addi	r16,r16,7672
    2134:	2023883a 	mov	r17,r4
    2138:	2809883a 	mov	r4,r5
    213c:	dfc00215 	stw	ra,8(sp)
    2140:	80000015 	stw	zero,0(r16)
    2144:	00039500 	call	3950 <sbrk>
    2148:	00ffffc4 	movi	r3,-1
    214c:	10c00526 	beq	r2,r3,2164 <_sbrk_r+0x44>
    2150:	dfc00217 	ldw	ra,8(sp)
    2154:	dc400117 	ldw	r17,4(sp)
    2158:	dc000017 	ldw	r16,0(sp)
    215c:	dec00304 	addi	sp,sp,12
    2160:	f800283a 	ret
    2164:	80c00017 	ldw	r3,0(r16)
    2168:	183ff926 	beq	r3,zero,2150 <_sbrk_r+0x30>
    216c:	88c00015 	stw	r3,0(r17)
    2170:	003ff706 	br	2150 <_sbrk_r+0x30>

00002174 <__sread>:
    2174:	defffe04 	addi	sp,sp,-8
    2178:	dc000015 	stw	r16,0(sp)
    217c:	2821883a 	mov	r16,r5
    2180:	2940038f 	ldh	r5,14(r5)
    2184:	dfc00115 	stw	ra,4(sp)
    2188:	0002eb40 	call	2eb4 <_read_r>
    218c:	10000716 	blt	r2,zero,21ac <__sread+0x38>
    2190:	80c01417 	ldw	r3,80(r16)
    2194:	1887883a 	add	r3,r3,r2
    2198:	80c01415 	stw	r3,80(r16)
    219c:	dfc00117 	ldw	ra,4(sp)
    21a0:	dc000017 	ldw	r16,0(sp)
    21a4:	dec00204 	addi	sp,sp,8
    21a8:	f800283a 	ret
    21ac:	80c0030b 	ldhu	r3,12(r16)
    21b0:	18fbffcc 	andi	r3,r3,61439
    21b4:	80c0030d 	sth	r3,12(r16)
    21b8:	dfc00117 	ldw	ra,4(sp)
    21bc:	dc000017 	ldw	r16,0(sp)
    21c0:	dec00204 	addi	sp,sp,8
    21c4:	f800283a 	ret

000021c8 <__seofread>:
    21c8:	0005883a 	mov	r2,zero
    21cc:	f800283a 	ret

000021d0 <__swrite>:
    21d0:	2880030b 	ldhu	r2,12(r5)
    21d4:	defffb04 	addi	sp,sp,-20
    21d8:	dcc00315 	stw	r19,12(sp)
    21dc:	dc800215 	stw	r18,8(sp)
    21e0:	dc400115 	stw	r17,4(sp)
    21e4:	dc000015 	stw	r16,0(sp)
    21e8:	dfc00415 	stw	ra,16(sp)
    21ec:	10c0400c 	andi	r3,r2,256
    21f0:	2821883a 	mov	r16,r5
    21f4:	2023883a 	mov	r17,r4
    21f8:	3025883a 	mov	r18,r6
    21fc:	3827883a 	mov	r19,r7
    2200:	18000526 	beq	r3,zero,2218 <__swrite+0x48>
    2204:	2940038f 	ldh	r5,14(r5)
    2208:	01c00084 	movi	r7,2
    220c:	000d883a 	mov	r6,zero
    2210:	0002c980 	call	2c98 <_lseek_r>
    2214:	8080030b 	ldhu	r2,12(r16)
    2218:	8140038f 	ldh	r5,14(r16)
    221c:	10bbffcc 	andi	r2,r2,61439
    2220:	980f883a 	mov	r7,r19
    2224:	900d883a 	mov	r6,r18
    2228:	8809883a 	mov	r4,r17
    222c:	8080030d 	sth	r2,12(r16)
    2230:	dfc00417 	ldw	ra,16(sp)
    2234:	dcc00317 	ldw	r19,12(sp)
    2238:	dc800217 	ldw	r18,8(sp)
    223c:	dc400117 	ldw	r17,4(sp)
    2240:	dc000017 	ldw	r16,0(sp)
    2244:	dec00504 	addi	sp,sp,20
    2248:	00022b01 	jmpi	22b0 <_write_r>

0000224c <__sseek>:
    224c:	defffe04 	addi	sp,sp,-8
    2250:	dc000015 	stw	r16,0(sp)
    2254:	2821883a 	mov	r16,r5
    2258:	2940038f 	ldh	r5,14(r5)
    225c:	dfc00115 	stw	ra,4(sp)
    2260:	0002c980 	call	2c98 <_lseek_r>
    2264:	00ffffc4 	movi	r3,-1
    2268:	10c00826 	beq	r2,r3,228c <__sseek+0x40>
    226c:	80c0030b 	ldhu	r3,12(r16)
    2270:	80801415 	stw	r2,80(r16)
    2274:	18c40014 	ori	r3,r3,4096
    2278:	80c0030d 	sth	r3,12(r16)
    227c:	dfc00117 	ldw	ra,4(sp)
    2280:	dc000017 	ldw	r16,0(sp)
    2284:	dec00204 	addi	sp,sp,8
    2288:	f800283a 	ret
    228c:	80c0030b 	ldhu	r3,12(r16)
    2290:	18fbffcc 	andi	r3,r3,61439
    2294:	80c0030d 	sth	r3,12(r16)
    2298:	dfc00117 	ldw	ra,4(sp)
    229c:	dc000017 	ldw	r16,0(sp)
    22a0:	dec00204 	addi	sp,sp,8
    22a4:	f800283a 	ret

000022a8 <__sclose>:
    22a8:	2940038f 	ldh	r5,14(r5)
    22ac:	00024641 	jmpi	2464 <_close_r>

000022b0 <_write_r>:
    22b0:	defffd04 	addi	sp,sp,-12
    22b4:	2805883a 	mov	r2,r5
    22b8:	dc000015 	stw	r16,0(sp)
    22bc:	04000074 	movhi	r16,1
    22c0:	dc400115 	stw	r17,4(sp)
    22c4:	300b883a 	mov	r5,r6
    22c8:	84077e04 	addi	r16,r16,7672
    22cc:	2023883a 	mov	r17,r4
    22d0:	380d883a 	mov	r6,r7
    22d4:	1009883a 	mov	r4,r2
    22d8:	dfc00215 	stw	ra,8(sp)
    22dc:	80000015 	stw	zero,0(r16)
    22e0:	0003a500 	call	3a50 <write>
    22e4:	00ffffc4 	movi	r3,-1
    22e8:	10c00526 	beq	r2,r3,2300 <_write_r+0x50>
    22ec:	dfc00217 	ldw	ra,8(sp)
    22f0:	dc400117 	ldw	r17,4(sp)
    22f4:	dc000017 	ldw	r16,0(sp)
    22f8:	dec00304 	addi	sp,sp,12
    22fc:	f800283a 	ret
    2300:	80c00017 	ldw	r3,0(r16)
    2304:	183ff926 	beq	r3,zero,22ec <_write_r+0x3c>
    2308:	88c00015 	stw	r3,0(r17)
    230c:	003ff706 	br	22ec <_write_r+0x3c>

00002310 <__swsetup_r>:
    2310:	00800074 	movhi	r2,1
    2314:	defffd04 	addi	sp,sp,-12
    2318:	10809204 	addi	r2,r2,584
    231c:	dc400115 	stw	r17,4(sp)
    2320:	2023883a 	mov	r17,r4
    2324:	11000017 	ldw	r4,0(r2)
    2328:	dc000015 	stw	r16,0(sp)
    232c:	dfc00215 	stw	ra,8(sp)
    2330:	2821883a 	mov	r16,r5
    2334:	20000226 	beq	r4,zero,2340 <__swsetup_r+0x30>
    2338:	20800e17 	ldw	r2,56(r4)
    233c:	10003126 	beq	r2,zero,2404 <__swsetup_r+0xf4>
    2340:	8080030b 	ldhu	r2,12(r16)
    2344:	10c0020c 	andi	r3,r2,8
    2348:	1009883a 	mov	r4,r2
    234c:	18000f26 	beq	r3,zero,238c <__swsetup_r+0x7c>
    2350:	80c00417 	ldw	r3,16(r16)
    2354:	18001526 	beq	r3,zero,23ac <__swsetup_r+0x9c>
    2358:	1100004c 	andi	r4,r2,1
    235c:	20001c1e 	bne	r4,zero,23d0 <__swsetup_r+0xc0>
    2360:	1080008c 	andi	r2,r2,2
    2364:	1000291e 	bne	r2,zero,240c <__swsetup_r+0xfc>
    2368:	80800517 	ldw	r2,20(r16)
    236c:	80800215 	stw	r2,8(r16)
    2370:	18001c26 	beq	r3,zero,23e4 <__swsetup_r+0xd4>
    2374:	0005883a 	mov	r2,zero
    2378:	dfc00217 	ldw	ra,8(sp)
    237c:	dc400117 	ldw	r17,4(sp)
    2380:	dc000017 	ldw	r16,0(sp)
    2384:	dec00304 	addi	sp,sp,12
    2388:	f800283a 	ret
    238c:	2080040c 	andi	r2,r4,16
    2390:	10002e26 	beq	r2,zero,244c <__swsetup_r+0x13c>
    2394:	2080010c 	andi	r2,r4,4
    2398:	10001e1e 	bne	r2,zero,2414 <__swsetup_r+0x104>
    239c:	80c00417 	ldw	r3,16(r16)
    23a0:	20800214 	ori	r2,r4,8
    23a4:	8080030d 	sth	r2,12(r16)
    23a8:	183feb1e 	bne	r3,zero,2358 <__swsetup_r+0x48>
    23ac:	1100a00c 	andi	r4,r2,640
    23b0:	01408004 	movi	r5,512
    23b4:	217fe826 	beq	r4,r5,2358 <__swsetup_r+0x48>
    23b8:	800b883a 	mov	r5,r16
    23bc:	8809883a 	mov	r4,r17
    23c0:	0002cf80 	call	2cf8 <__smakebuf_r>
    23c4:	8080030b 	ldhu	r2,12(r16)
    23c8:	80c00417 	ldw	r3,16(r16)
    23cc:	003fe206 	br	2358 <__swsetup_r+0x48>
    23d0:	80800517 	ldw	r2,20(r16)
    23d4:	80000215 	stw	zero,8(r16)
    23d8:	0085c83a 	sub	r2,zero,r2
    23dc:	80800615 	stw	r2,24(r16)
    23e0:	183fe41e 	bne	r3,zero,2374 <__swsetup_r+0x64>
    23e4:	80c0030b 	ldhu	r3,12(r16)
    23e8:	0005883a 	mov	r2,zero
    23ec:	1900200c 	andi	r4,r3,128
    23f0:	203fe126 	beq	r4,zero,2378 <__swsetup_r+0x68>
    23f4:	18c01014 	ori	r3,r3,64
    23f8:	80c0030d 	sth	r3,12(r16)
    23fc:	00bfffc4 	movi	r2,-1
    2400:	003fdd06 	br	2378 <__swsetup_r+0x68>
    2404:	000086c0 	call	86c <__sinit>
    2408:	003fcd06 	br	2340 <__swsetup_r+0x30>
    240c:	0005883a 	mov	r2,zero
    2410:	003fd606 	br	236c <__swsetup_r+0x5c>
    2414:	81400c17 	ldw	r5,48(r16)
    2418:	28000626 	beq	r5,zero,2434 <__swsetup_r+0x124>
    241c:	80801004 	addi	r2,r16,64
    2420:	28800326 	beq	r5,r2,2430 <__swsetup_r+0x120>
    2424:	8809883a 	mov	r4,r17
    2428:	00029880 	call	2988 <_free_r>
    242c:	8100030b 	ldhu	r4,12(r16)
    2430:	80000c15 	stw	zero,48(r16)
    2434:	80c00417 	ldw	r3,16(r16)
    2438:	00bff6c4 	movi	r2,-37
    243c:	1108703a 	and	r4,r2,r4
    2440:	80000115 	stw	zero,4(r16)
    2444:	80c00015 	stw	r3,0(r16)
    2448:	003fd506 	br	23a0 <__swsetup_r+0x90>
    244c:	00800244 	movi	r2,9
    2450:	88800015 	stw	r2,0(r17)
    2454:	20801014 	ori	r2,r4,64
    2458:	8080030d 	sth	r2,12(r16)
    245c:	00bfffc4 	movi	r2,-1
    2460:	003fc506 	br	2378 <__swsetup_r+0x68>

00002464 <_close_r>:
    2464:	defffd04 	addi	sp,sp,-12
    2468:	dc000015 	stw	r16,0(sp)
    246c:	04000074 	movhi	r16,1
    2470:	dc400115 	stw	r17,4(sp)
    2474:	84077e04 	addi	r16,r16,7672
    2478:	2023883a 	mov	r17,r4
    247c:	2809883a 	mov	r4,r5
    2480:	dfc00215 	stw	ra,8(sp)
    2484:	80000015 	stw	zero,0(r16)
    2488:	00031c80 	call	31c8 <close>
    248c:	00ffffc4 	movi	r3,-1
    2490:	10c00526 	beq	r2,r3,24a8 <_close_r+0x44>
    2494:	dfc00217 	ldw	ra,8(sp)
    2498:	dc400117 	ldw	r17,4(sp)
    249c:	dc000017 	ldw	r16,0(sp)
    24a0:	dec00304 	addi	sp,sp,12
    24a4:	f800283a 	ret
    24a8:	80c00017 	ldw	r3,0(r16)
    24ac:	183ff926 	beq	r3,zero,2494 <_close_r+0x30>
    24b0:	88c00015 	stw	r3,0(r17)
    24b4:	003ff706 	br	2494 <_close_r+0x30>

000024b8 <_fclose_r>:
    24b8:	28003926 	beq	r5,zero,25a0 <_fclose_r+0xe8>
    24bc:	defffc04 	addi	sp,sp,-16
    24c0:	dc400115 	stw	r17,4(sp)
    24c4:	dc000015 	stw	r16,0(sp)
    24c8:	dfc00315 	stw	ra,12(sp)
    24cc:	dc800215 	stw	r18,8(sp)
    24d0:	2023883a 	mov	r17,r4
    24d4:	2821883a 	mov	r16,r5
    24d8:	20000226 	beq	r4,zero,24e4 <_fclose_r+0x2c>
    24dc:	20800e17 	ldw	r2,56(r4)
    24e0:	10002726 	beq	r2,zero,2580 <_fclose_r+0xc8>
    24e4:	8080030f 	ldh	r2,12(r16)
    24e8:	1000071e 	bne	r2,zero,2508 <_fclose_r+0x50>
    24ec:	0005883a 	mov	r2,zero
    24f0:	dfc00317 	ldw	ra,12(sp)
    24f4:	dc800217 	ldw	r18,8(sp)
    24f8:	dc400117 	ldw	r17,4(sp)
    24fc:	dc000017 	ldw	r16,0(sp)
    2500:	dec00404 	addi	sp,sp,16
    2504:	f800283a 	ret
    2508:	800b883a 	mov	r5,r16
    250c:	8809883a 	mov	r4,r17
    2510:	00025bc0 	call	25bc <__sflush_r>
    2514:	1025883a 	mov	r18,r2
    2518:	80800b17 	ldw	r2,44(r16)
    251c:	10000426 	beq	r2,zero,2530 <_fclose_r+0x78>
    2520:	81400717 	ldw	r5,28(r16)
    2524:	8809883a 	mov	r4,r17
    2528:	103ee83a 	callr	r2
    252c:	10001616 	blt	r2,zero,2588 <_fclose_r+0xd0>
    2530:	8080030b 	ldhu	r2,12(r16)
    2534:	1080200c 	andi	r2,r2,128
    2538:	1000151e 	bne	r2,zero,2590 <_fclose_r+0xd8>
    253c:	81400c17 	ldw	r5,48(r16)
    2540:	28000526 	beq	r5,zero,2558 <_fclose_r+0xa0>
    2544:	80801004 	addi	r2,r16,64
    2548:	28800226 	beq	r5,r2,2554 <_fclose_r+0x9c>
    254c:	8809883a 	mov	r4,r17
    2550:	00029880 	call	2988 <_free_r>
    2554:	80000c15 	stw	zero,48(r16)
    2558:	81401117 	ldw	r5,68(r16)
    255c:	28000326 	beq	r5,zero,256c <_fclose_r+0xb4>
    2560:	8809883a 	mov	r4,r17
    2564:	00029880 	call	2988 <_free_r>
    2568:	80001115 	stw	zero,68(r16)
    256c:	000087c0 	call	87c <__sfp_lock_acquire>
    2570:	8000030d 	sth	zero,12(r16)
    2574:	00008800 	call	880 <__sfp_lock_release>
    2578:	9005883a 	mov	r2,r18
    257c:	003fdc06 	br	24f0 <_fclose_r+0x38>
    2580:	000086c0 	call	86c <__sinit>
    2584:	003fd706 	br	24e4 <_fclose_r+0x2c>
    2588:	04bfffc4 	movi	r18,-1
    258c:	003fe806 	br	2530 <_fclose_r+0x78>
    2590:	81400417 	ldw	r5,16(r16)
    2594:	8809883a 	mov	r4,r17
    2598:	00029880 	call	2988 <_free_r>
    259c:	003fe706 	br	253c <_fclose_r+0x84>
    25a0:	0005883a 	mov	r2,zero
    25a4:	f800283a 	ret

000025a8 <fclose>:
    25a8:	00800074 	movhi	r2,1
    25ac:	10809204 	addi	r2,r2,584
    25b0:	200b883a 	mov	r5,r4
    25b4:	11000017 	ldw	r4,0(r2)
    25b8:	00024b81 	jmpi	24b8 <_fclose_r>

000025bc <__sflush_r>:
    25bc:	2880030b 	ldhu	r2,12(r5)
    25c0:	defffb04 	addi	sp,sp,-20
    25c4:	dcc00315 	stw	r19,12(sp)
    25c8:	dc400115 	stw	r17,4(sp)
    25cc:	dfc00415 	stw	ra,16(sp)
    25d0:	dc800215 	stw	r18,8(sp)
    25d4:	dc000015 	stw	r16,0(sp)
    25d8:	10c0020c 	andi	r3,r2,8
    25dc:	2823883a 	mov	r17,r5
    25e0:	2027883a 	mov	r19,r4
    25e4:	1800311e 	bne	r3,zero,26ac <__sflush_r+0xf0>
    25e8:	28c00117 	ldw	r3,4(r5)
    25ec:	10820014 	ori	r2,r2,2048
    25f0:	2880030d 	sth	r2,12(r5)
    25f4:	00c04b0e 	bge	zero,r3,2724 <__sflush_r+0x168>
    25f8:	8a000a17 	ldw	r8,40(r17)
    25fc:	40002326 	beq	r8,zero,268c <__sflush_r+0xd0>
    2600:	9c000017 	ldw	r16,0(r19)
    2604:	10c4000c 	andi	r3,r2,4096
    2608:	98000015 	stw	zero,0(r19)
    260c:	18004826 	beq	r3,zero,2730 <__sflush_r+0x174>
    2610:	89801417 	ldw	r6,80(r17)
    2614:	10c0010c 	andi	r3,r2,4
    2618:	18000626 	beq	r3,zero,2634 <__sflush_r+0x78>
    261c:	88c00117 	ldw	r3,4(r17)
    2620:	88800c17 	ldw	r2,48(r17)
    2624:	30cdc83a 	sub	r6,r6,r3
    2628:	10000226 	beq	r2,zero,2634 <__sflush_r+0x78>
    262c:	88800f17 	ldw	r2,60(r17)
    2630:	308dc83a 	sub	r6,r6,r2
    2634:	89400717 	ldw	r5,28(r17)
    2638:	000f883a 	mov	r7,zero
    263c:	9809883a 	mov	r4,r19
    2640:	403ee83a 	callr	r8
    2644:	00ffffc4 	movi	r3,-1
    2648:	10c04426 	beq	r2,r3,275c <__sflush_r+0x1a0>
    264c:	88c0030b 	ldhu	r3,12(r17)
    2650:	89000417 	ldw	r4,16(r17)
    2654:	88000115 	stw	zero,4(r17)
    2658:	197dffcc 	andi	r5,r3,63487
    265c:	8940030d 	sth	r5,12(r17)
    2660:	89000015 	stw	r4,0(r17)
    2664:	18c4000c 	andi	r3,r3,4096
    2668:	18002c1e 	bne	r3,zero,271c <__sflush_r+0x160>
    266c:	89400c17 	ldw	r5,48(r17)
    2670:	9c000015 	stw	r16,0(r19)
    2674:	28000526 	beq	r5,zero,268c <__sflush_r+0xd0>
    2678:	88801004 	addi	r2,r17,64
    267c:	28800226 	beq	r5,r2,2688 <__sflush_r+0xcc>
    2680:	9809883a 	mov	r4,r19
    2684:	00029880 	call	2988 <_free_r>
    2688:	88000c15 	stw	zero,48(r17)
    268c:	0005883a 	mov	r2,zero
    2690:	dfc00417 	ldw	ra,16(sp)
    2694:	dcc00317 	ldw	r19,12(sp)
    2698:	dc800217 	ldw	r18,8(sp)
    269c:	dc400117 	ldw	r17,4(sp)
    26a0:	dc000017 	ldw	r16,0(sp)
    26a4:	dec00504 	addi	sp,sp,20
    26a8:	f800283a 	ret
    26ac:	2c800417 	ldw	r18,16(r5)
    26b0:	903ff626 	beq	r18,zero,268c <__sflush_r+0xd0>
    26b4:	2c000017 	ldw	r16,0(r5)
    26b8:	108000cc 	andi	r2,r2,3
    26bc:	2c800015 	stw	r18,0(r5)
    26c0:	84a1c83a 	sub	r16,r16,r18
    26c4:	1000131e 	bne	r2,zero,2714 <__sflush_r+0x158>
    26c8:	28800517 	ldw	r2,20(r5)
    26cc:	88800215 	stw	r2,8(r17)
    26d0:	04000316 	blt	zero,r16,26e0 <__sflush_r+0x124>
    26d4:	003fed06 	br	268c <__sflush_r+0xd0>
    26d8:	90a5883a 	add	r18,r18,r2
    26dc:	043feb0e 	bge	zero,r16,268c <__sflush_r+0xd0>
    26e0:	88800917 	ldw	r2,36(r17)
    26e4:	89400717 	ldw	r5,28(r17)
    26e8:	800f883a 	mov	r7,r16
    26ec:	900d883a 	mov	r6,r18
    26f0:	9809883a 	mov	r4,r19
    26f4:	103ee83a 	callr	r2
    26f8:	80a1c83a 	sub	r16,r16,r2
    26fc:	00bff616 	blt	zero,r2,26d8 <__sflush_r+0x11c>
    2700:	88c0030b 	ldhu	r3,12(r17)
    2704:	00bfffc4 	movi	r2,-1
    2708:	18c01014 	ori	r3,r3,64
    270c:	88c0030d 	sth	r3,12(r17)
    2710:	003fdf06 	br	2690 <__sflush_r+0xd4>
    2714:	0005883a 	mov	r2,zero
    2718:	003fec06 	br	26cc <__sflush_r+0x110>
    271c:	88801415 	stw	r2,80(r17)
    2720:	003fd206 	br	266c <__sflush_r+0xb0>
    2724:	28c00f17 	ldw	r3,60(r5)
    2728:	00ffb316 	blt	zero,r3,25f8 <__sflush_r+0x3c>
    272c:	003fd706 	br	268c <__sflush_r+0xd0>
    2730:	89400717 	ldw	r5,28(r17)
    2734:	000d883a 	mov	r6,zero
    2738:	01c00044 	movi	r7,1
    273c:	9809883a 	mov	r4,r19
    2740:	403ee83a 	callr	r8
    2744:	100d883a 	mov	r6,r2
    2748:	00bfffc4 	movi	r2,-1
    274c:	30801426 	beq	r6,r2,27a0 <__sflush_r+0x1e4>
    2750:	8880030b 	ldhu	r2,12(r17)
    2754:	8a000a17 	ldw	r8,40(r17)
    2758:	003fae06 	br	2614 <__sflush_r+0x58>
    275c:	98c00017 	ldw	r3,0(r19)
    2760:	183fba26 	beq	r3,zero,264c <__sflush_r+0x90>
    2764:	01000744 	movi	r4,29
    2768:	19000626 	beq	r3,r4,2784 <__sflush_r+0x1c8>
    276c:	01000584 	movi	r4,22
    2770:	19000426 	beq	r3,r4,2784 <__sflush_r+0x1c8>
    2774:	88c0030b 	ldhu	r3,12(r17)
    2778:	18c01014 	ori	r3,r3,64
    277c:	88c0030d 	sth	r3,12(r17)
    2780:	003fc306 	br	2690 <__sflush_r+0xd4>
    2784:	8880030b 	ldhu	r2,12(r17)
    2788:	88c00417 	ldw	r3,16(r17)
    278c:	88000115 	stw	zero,4(r17)
    2790:	10bdffcc 	andi	r2,r2,63487
    2794:	8880030d 	sth	r2,12(r17)
    2798:	88c00015 	stw	r3,0(r17)
    279c:	003fb306 	br	266c <__sflush_r+0xb0>
    27a0:	98800017 	ldw	r2,0(r19)
    27a4:	103fea26 	beq	r2,zero,2750 <__sflush_r+0x194>
    27a8:	00c00744 	movi	r3,29
    27ac:	10c00226 	beq	r2,r3,27b8 <__sflush_r+0x1fc>
    27b0:	00c00584 	movi	r3,22
    27b4:	10c0031e 	bne	r2,r3,27c4 <__sflush_r+0x208>
    27b8:	9c000015 	stw	r16,0(r19)
    27bc:	0005883a 	mov	r2,zero
    27c0:	003fb306 	br	2690 <__sflush_r+0xd4>
    27c4:	88c0030b 	ldhu	r3,12(r17)
    27c8:	3005883a 	mov	r2,r6
    27cc:	18c01014 	ori	r3,r3,64
    27d0:	88c0030d 	sth	r3,12(r17)
    27d4:	003fae06 	br	2690 <__sflush_r+0xd4>

000027d8 <_fflush_r>:
    27d8:	defffd04 	addi	sp,sp,-12
    27dc:	dc000115 	stw	r16,4(sp)
    27e0:	dfc00215 	stw	ra,8(sp)
    27e4:	2021883a 	mov	r16,r4
    27e8:	20000226 	beq	r4,zero,27f4 <_fflush_r+0x1c>
    27ec:	20800e17 	ldw	r2,56(r4)
    27f0:	10000c26 	beq	r2,zero,2824 <_fflush_r+0x4c>
    27f4:	2880030f 	ldh	r2,12(r5)
    27f8:	1000051e 	bne	r2,zero,2810 <_fflush_r+0x38>
    27fc:	0005883a 	mov	r2,zero
    2800:	dfc00217 	ldw	ra,8(sp)
    2804:	dc000117 	ldw	r16,4(sp)
    2808:	dec00304 	addi	sp,sp,12
    280c:	f800283a 	ret
    2810:	8009883a 	mov	r4,r16
    2814:	dfc00217 	ldw	ra,8(sp)
    2818:	dc000117 	ldw	r16,4(sp)
    281c:	dec00304 	addi	sp,sp,12
    2820:	00025bc1 	jmpi	25bc <__sflush_r>
    2824:	d9400015 	stw	r5,0(sp)
    2828:	000086c0 	call	86c <__sinit>
    282c:	d9400017 	ldw	r5,0(sp)
    2830:	003ff006 	br	27f4 <_fflush_r+0x1c>

00002834 <fflush>:
    2834:	20000526 	beq	r4,zero,284c <fflush+0x18>
    2838:	00800074 	movhi	r2,1
    283c:	10809204 	addi	r2,r2,584
    2840:	200b883a 	mov	r5,r4
    2844:	11000017 	ldw	r4,0(r2)
    2848:	00027d81 	jmpi	27d8 <_fflush_r>
    284c:	00800074 	movhi	r2,1
    2850:	10809104 	addi	r2,r2,580
    2854:	11000017 	ldw	r4,0(r2)
    2858:	01400034 	movhi	r5,0
    285c:	2949f604 	addi	r5,r5,10200
    2860:	0000e3c1 	jmpi	e3c <_fwalk_reent>

00002864 <_malloc_trim_r>:
    2864:	defffb04 	addi	sp,sp,-20
    2868:	dcc00315 	stw	r19,12(sp)
    286c:	04c00074 	movhi	r19,1
    2870:	dc800215 	stw	r18,8(sp)
    2874:	dc400115 	stw	r17,4(sp)
    2878:	dc000015 	stw	r16,0(sp)
    287c:	dfc00415 	stw	ra,16(sp)
    2880:	2821883a 	mov	r16,r5
    2884:	9cfb0a04 	addi	r19,r19,-5080
    2888:	2025883a 	mov	r18,r4
    288c:	0003c840 	call	3c84 <__malloc_lock>
    2890:	98800217 	ldw	r2,8(r19)
    2894:	14400117 	ldw	r17,4(r2)
    2898:	00bfff04 	movi	r2,-4
    289c:	88a2703a 	and	r17,r17,r2
    28a0:	8c21c83a 	sub	r16,r17,r16
    28a4:	8403fbc4 	addi	r16,r16,4079
    28a8:	8020d33a 	srli	r16,r16,12
    28ac:	0083ffc4 	movi	r2,4095
    28b0:	843fffc4 	addi	r16,r16,-1
    28b4:	8020933a 	slli	r16,r16,12
    28b8:	1400060e 	bge	r2,r16,28d4 <_malloc_trim_r+0x70>
    28bc:	000b883a 	mov	r5,zero
    28c0:	9009883a 	mov	r4,r18
    28c4:	00021200 	call	2120 <_sbrk_r>
    28c8:	98c00217 	ldw	r3,8(r19)
    28cc:	1c47883a 	add	r3,r3,r17
    28d0:	10c00a26 	beq	r2,r3,28fc <_malloc_trim_r+0x98>
    28d4:	9009883a 	mov	r4,r18
    28d8:	0003dbc0 	call	3dbc <__malloc_unlock>
    28dc:	0005883a 	mov	r2,zero
    28e0:	dfc00417 	ldw	ra,16(sp)
    28e4:	dcc00317 	ldw	r19,12(sp)
    28e8:	dc800217 	ldw	r18,8(sp)
    28ec:	dc400117 	ldw	r17,4(sp)
    28f0:	dc000017 	ldw	r16,0(sp)
    28f4:	dec00504 	addi	sp,sp,20
    28f8:	f800283a 	ret
    28fc:	040bc83a 	sub	r5,zero,r16
    2900:	9009883a 	mov	r4,r18
    2904:	00021200 	call	2120 <_sbrk_r>
    2908:	00ffffc4 	movi	r3,-1
    290c:	10c00d26 	beq	r2,r3,2944 <_malloc_trim_r+0xe0>
    2910:	00c00074 	movhi	r3,1
    2914:	18c79f04 	addi	r3,r3,7804
    2918:	18800017 	ldw	r2,0(r3)
    291c:	99000217 	ldw	r4,8(r19)
    2920:	8c23c83a 	sub	r17,r17,r16
    2924:	8c400054 	ori	r17,r17,1
    2928:	1421c83a 	sub	r16,r2,r16
    292c:	24400115 	stw	r17,4(r4)
    2930:	9009883a 	mov	r4,r18
    2934:	1c000015 	stw	r16,0(r3)
    2938:	0003dbc0 	call	3dbc <__malloc_unlock>
    293c:	00800044 	movi	r2,1
    2940:	003fe706 	br	28e0 <_malloc_trim_r+0x7c>
    2944:	000b883a 	mov	r5,zero
    2948:	9009883a 	mov	r4,r18
    294c:	00021200 	call	2120 <_sbrk_r>
    2950:	99000217 	ldw	r4,8(r19)
    2954:	014003c4 	movi	r5,15
    2958:	1107c83a 	sub	r3,r2,r4
    295c:	28ffdd0e 	bge	r5,r3,28d4 <_malloc_trim_r+0x70>
    2960:	01400074 	movhi	r5,1
    2964:	29409304 	addi	r5,r5,588
    2968:	29400017 	ldw	r5,0(r5)
    296c:	18c00054 	ori	r3,r3,1
    2970:	20c00115 	stw	r3,4(r4)
    2974:	00c00074 	movhi	r3,1
    2978:	1145c83a 	sub	r2,r2,r5
    297c:	18c79f04 	addi	r3,r3,7804
    2980:	18800015 	stw	r2,0(r3)
    2984:	003fd306 	br	28d4 <_malloc_trim_r+0x70>

00002988 <_free_r>:
    2988:	28004126 	beq	r5,zero,2a90 <_free_r+0x108>
    298c:	defffd04 	addi	sp,sp,-12
    2990:	dc400115 	stw	r17,4(sp)
    2994:	dc000015 	stw	r16,0(sp)
    2998:	2023883a 	mov	r17,r4
    299c:	2821883a 	mov	r16,r5
    29a0:	dfc00215 	stw	ra,8(sp)
    29a4:	0003c840 	call	3c84 <__malloc_lock>
    29a8:	81ffff17 	ldw	r7,-4(r16)
    29ac:	00bfff84 	movi	r2,-2
    29b0:	01000074 	movhi	r4,1
    29b4:	81bffe04 	addi	r6,r16,-8
    29b8:	3884703a 	and	r2,r7,r2
    29bc:	213b0a04 	addi	r4,r4,-5080
    29c0:	308b883a 	add	r5,r6,r2
    29c4:	2a400117 	ldw	r9,4(r5)
    29c8:	22000217 	ldw	r8,8(r4)
    29cc:	00ffff04 	movi	r3,-4
    29d0:	48c6703a 	and	r3,r9,r3
    29d4:	2a005726 	beq	r5,r8,2b34 <_free_r+0x1ac>
    29d8:	28c00115 	stw	r3,4(r5)
    29dc:	39c0004c 	andi	r7,r7,1
    29e0:	3800091e 	bne	r7,zero,2a08 <_free_r+0x80>
    29e4:	823ffe17 	ldw	r8,-8(r16)
    29e8:	22400204 	addi	r9,r4,8
    29ec:	320dc83a 	sub	r6,r6,r8
    29f0:	31c00217 	ldw	r7,8(r6)
    29f4:	1205883a 	add	r2,r2,r8
    29f8:	3a406526 	beq	r7,r9,2b90 <_free_r+0x208>
    29fc:	32000317 	ldw	r8,12(r6)
    2a00:	3a000315 	stw	r8,12(r7)
    2a04:	41c00215 	stw	r7,8(r8)
    2a08:	28cf883a 	add	r7,r5,r3
    2a0c:	39c00117 	ldw	r7,4(r7)
    2a10:	39c0004c 	andi	r7,r7,1
    2a14:	38003a26 	beq	r7,zero,2b00 <_free_r+0x178>
    2a18:	10c00054 	ori	r3,r2,1
    2a1c:	30c00115 	stw	r3,4(r6)
    2a20:	3087883a 	add	r3,r6,r2
    2a24:	18800015 	stw	r2,0(r3)
    2a28:	00c07fc4 	movi	r3,511
    2a2c:	18801936 	bltu	r3,r2,2a94 <_free_r+0x10c>
    2a30:	1004d0fa 	srli	r2,r2,3
    2a34:	01c00044 	movi	r7,1
    2a38:	21400117 	ldw	r5,4(r4)
    2a3c:	10c00044 	addi	r3,r2,1
    2a40:	18c7883a 	add	r3,r3,r3
    2a44:	1005d0ba 	srai	r2,r2,2
    2a48:	18c7883a 	add	r3,r3,r3
    2a4c:	18c7883a 	add	r3,r3,r3
    2a50:	1907883a 	add	r3,r3,r4
    2a54:	3884983a 	sll	r2,r7,r2
    2a58:	19c00017 	ldw	r7,0(r3)
    2a5c:	1a3ffe04 	addi	r8,r3,-8
    2a60:	1144b03a 	or	r2,r2,r5
    2a64:	32000315 	stw	r8,12(r6)
    2a68:	31c00215 	stw	r7,8(r6)
    2a6c:	20800115 	stw	r2,4(r4)
    2a70:	19800015 	stw	r6,0(r3)
    2a74:	39800315 	stw	r6,12(r7)
    2a78:	8809883a 	mov	r4,r17
    2a7c:	dfc00217 	ldw	ra,8(sp)
    2a80:	dc400117 	ldw	r17,4(sp)
    2a84:	dc000017 	ldw	r16,0(sp)
    2a88:	dec00304 	addi	sp,sp,12
    2a8c:	0003dbc1 	jmpi	3dbc <__malloc_unlock>
    2a90:	f800283a 	ret
    2a94:	100ad27a 	srli	r5,r2,9
    2a98:	00c00104 	movi	r3,4
    2a9c:	19404a36 	bltu	r3,r5,2bc8 <_free_r+0x240>
    2aa0:	100ad1ba 	srli	r5,r2,6
    2aa4:	28c00e44 	addi	r3,r5,57
    2aa8:	18c7883a 	add	r3,r3,r3
    2aac:	29400e04 	addi	r5,r5,56
    2ab0:	18c7883a 	add	r3,r3,r3
    2ab4:	18c7883a 	add	r3,r3,r3
    2ab8:	1909883a 	add	r4,r3,r4
    2abc:	20c00017 	ldw	r3,0(r4)
    2ac0:	01c00074 	movhi	r7,1
    2ac4:	213ffe04 	addi	r4,r4,-8
    2ac8:	39fb0a04 	addi	r7,r7,-5080
    2acc:	20c04426 	beq	r4,r3,2be0 <_free_r+0x258>
    2ad0:	01ffff04 	movi	r7,-4
    2ad4:	19400117 	ldw	r5,4(r3)
    2ad8:	29ca703a 	and	r5,r5,r7
    2adc:	1140022e 	bgeu	r2,r5,2ae8 <_free_r+0x160>
    2ae0:	18c00217 	ldw	r3,8(r3)
    2ae4:	20fffb1e 	bne	r4,r3,2ad4 <_free_r+0x14c>
    2ae8:	19000317 	ldw	r4,12(r3)
    2aec:	31000315 	stw	r4,12(r6)
    2af0:	30c00215 	stw	r3,8(r6)
    2af4:	21800215 	stw	r6,8(r4)
    2af8:	19800315 	stw	r6,12(r3)
    2afc:	003fde06 	br	2a78 <_free_r+0xf0>
    2b00:	29c00217 	ldw	r7,8(r5)
    2b04:	10c5883a 	add	r2,r2,r3
    2b08:	00c00074 	movhi	r3,1
    2b0c:	18fb0c04 	addi	r3,r3,-5072
    2b10:	38c03b26 	beq	r7,r3,2c00 <_free_r+0x278>
    2b14:	2a000317 	ldw	r8,12(r5)
    2b18:	11400054 	ori	r5,r2,1
    2b1c:	3087883a 	add	r3,r6,r2
    2b20:	3a000315 	stw	r8,12(r7)
    2b24:	41c00215 	stw	r7,8(r8)
    2b28:	31400115 	stw	r5,4(r6)
    2b2c:	18800015 	stw	r2,0(r3)
    2b30:	003fbd06 	br	2a28 <_free_r+0xa0>
    2b34:	39c0004c 	andi	r7,r7,1
    2b38:	10c5883a 	add	r2,r2,r3
    2b3c:	3800071e 	bne	r7,zero,2b5c <_free_r+0x1d4>
    2b40:	81fffe17 	ldw	r7,-8(r16)
    2b44:	31cdc83a 	sub	r6,r6,r7
    2b48:	30c00317 	ldw	r3,12(r6)
    2b4c:	31400217 	ldw	r5,8(r6)
    2b50:	11c5883a 	add	r2,r2,r7
    2b54:	28c00315 	stw	r3,12(r5)
    2b58:	19400215 	stw	r5,8(r3)
    2b5c:	10c00054 	ori	r3,r2,1
    2b60:	30c00115 	stw	r3,4(r6)
    2b64:	00c00074 	movhi	r3,1
    2b68:	18c09404 	addi	r3,r3,592
    2b6c:	18c00017 	ldw	r3,0(r3)
    2b70:	21800215 	stw	r6,8(r4)
    2b74:	10ffc036 	bltu	r2,r3,2a78 <_free_r+0xf0>
    2b78:	00800074 	movhi	r2,1
    2b7c:	10877d04 	addi	r2,r2,7668
    2b80:	11400017 	ldw	r5,0(r2)
    2b84:	8809883a 	mov	r4,r17
    2b88:	00028640 	call	2864 <_malloc_trim_r>
    2b8c:	003fba06 	br	2a78 <_free_r+0xf0>
    2b90:	28c9883a 	add	r4,r5,r3
    2b94:	21000117 	ldw	r4,4(r4)
    2b98:	2100004c 	andi	r4,r4,1
    2b9c:	2000391e 	bne	r4,zero,2c84 <_free_r+0x2fc>
    2ba0:	29c00217 	ldw	r7,8(r5)
    2ba4:	29000317 	ldw	r4,12(r5)
    2ba8:	1885883a 	add	r2,r3,r2
    2bac:	10c00054 	ori	r3,r2,1
    2bb0:	39000315 	stw	r4,12(r7)
    2bb4:	21c00215 	stw	r7,8(r4)
    2bb8:	30c00115 	stw	r3,4(r6)
    2bbc:	308d883a 	add	r6,r6,r2
    2bc0:	30800015 	stw	r2,0(r6)
    2bc4:	003fac06 	br	2a78 <_free_r+0xf0>
    2bc8:	00c00504 	movi	r3,20
    2bcc:	19401536 	bltu	r3,r5,2c24 <_free_r+0x29c>
    2bd0:	28c01704 	addi	r3,r5,92
    2bd4:	18c7883a 	add	r3,r3,r3
    2bd8:	294016c4 	addi	r5,r5,91
    2bdc:	003fb406 	br	2ab0 <_free_r+0x128>
    2be0:	280bd0ba 	srai	r5,r5,2
    2be4:	00c00044 	movi	r3,1
    2be8:	38800117 	ldw	r2,4(r7)
    2bec:	194a983a 	sll	r5,r3,r5
    2bf0:	2007883a 	mov	r3,r4
    2bf4:	2884b03a 	or	r2,r5,r2
    2bf8:	38800115 	stw	r2,4(r7)
    2bfc:	003fbb06 	br	2aec <_free_r+0x164>
    2c00:	21800515 	stw	r6,20(r4)
    2c04:	21800415 	stw	r6,16(r4)
    2c08:	10c00054 	ori	r3,r2,1
    2c0c:	31c00315 	stw	r7,12(r6)
    2c10:	31c00215 	stw	r7,8(r6)
    2c14:	30c00115 	stw	r3,4(r6)
    2c18:	308d883a 	add	r6,r6,r2
    2c1c:	30800015 	stw	r2,0(r6)
    2c20:	003f9506 	br	2a78 <_free_r+0xf0>
    2c24:	00c01504 	movi	r3,84
    2c28:	19400536 	bltu	r3,r5,2c40 <_free_r+0x2b8>
    2c2c:	100ad33a 	srli	r5,r2,12
    2c30:	28c01bc4 	addi	r3,r5,111
    2c34:	18c7883a 	add	r3,r3,r3
    2c38:	29401b84 	addi	r5,r5,110
    2c3c:	003f9c06 	br	2ab0 <_free_r+0x128>
    2c40:	00c05504 	movi	r3,340
    2c44:	19400536 	bltu	r3,r5,2c5c <_free_r+0x2d4>
    2c48:	100ad3fa 	srli	r5,r2,15
    2c4c:	28c01e04 	addi	r3,r5,120
    2c50:	18c7883a 	add	r3,r3,r3
    2c54:	29401dc4 	addi	r5,r5,119
    2c58:	003f9506 	br	2ab0 <_free_r+0x128>
    2c5c:	00c15504 	movi	r3,1364
    2c60:	19400536 	bltu	r3,r5,2c78 <_free_r+0x2f0>
    2c64:	100ad4ba 	srli	r5,r2,18
    2c68:	28c01f44 	addi	r3,r5,125
    2c6c:	18c7883a 	add	r3,r3,r3
    2c70:	29401f04 	addi	r5,r5,124
    2c74:	003f8e06 	br	2ab0 <_free_r+0x128>
    2c78:	00c03f84 	movi	r3,254
    2c7c:	01401f84 	movi	r5,126
    2c80:	003f8b06 	br	2ab0 <_free_r+0x128>
    2c84:	10c00054 	ori	r3,r2,1
    2c88:	30c00115 	stw	r3,4(r6)
    2c8c:	308d883a 	add	r6,r6,r2
    2c90:	30800015 	stw	r2,0(r6)
    2c94:	003f7806 	br	2a78 <_free_r+0xf0>

00002c98 <_lseek_r>:
    2c98:	defffd04 	addi	sp,sp,-12
    2c9c:	2805883a 	mov	r2,r5
    2ca0:	dc000015 	stw	r16,0(sp)
    2ca4:	04000074 	movhi	r16,1
    2ca8:	dc400115 	stw	r17,4(sp)
    2cac:	300b883a 	mov	r5,r6
    2cb0:	84077e04 	addi	r16,r16,7672
    2cb4:	2023883a 	mov	r17,r4
    2cb8:	380d883a 	mov	r6,r7
    2cbc:	1009883a 	mov	r4,r2
    2cc0:	dfc00215 	stw	ra,8(sp)
    2cc4:	80000015 	stw	zero,0(r16)
    2cc8:	00035f40 	call	35f4 <lseek>
    2ccc:	00ffffc4 	movi	r3,-1
    2cd0:	10c00526 	beq	r2,r3,2ce8 <_lseek_r+0x50>
    2cd4:	dfc00217 	ldw	ra,8(sp)
    2cd8:	dc400117 	ldw	r17,4(sp)
    2cdc:	dc000017 	ldw	r16,0(sp)
    2ce0:	dec00304 	addi	sp,sp,12
    2ce4:	f800283a 	ret
    2ce8:	80c00017 	ldw	r3,0(r16)
    2cec:	183ff926 	beq	r3,zero,2cd4 <_lseek_r+0x3c>
    2cf0:	88c00015 	stw	r3,0(r17)
    2cf4:	003ff706 	br	2cd4 <_lseek_r+0x3c>

00002cf8 <__smakebuf_r>:
    2cf8:	2880030b 	ldhu	r2,12(r5)
    2cfc:	10c0008c 	andi	r3,r2,2
    2d00:	1800411e 	bne	r3,zero,2e08 <__smakebuf_r+0x110>
    2d04:	deffec04 	addi	sp,sp,-80
    2d08:	dc000f15 	stw	r16,60(sp)
    2d0c:	2821883a 	mov	r16,r5
    2d10:	2940038f 	ldh	r5,14(r5)
    2d14:	dc401015 	stw	r17,64(sp)
    2d18:	dfc01315 	stw	ra,76(sp)
    2d1c:	dcc01215 	stw	r19,72(sp)
    2d20:	dc801115 	stw	r18,68(sp)
    2d24:	2023883a 	mov	r17,r4
    2d28:	28001c16 	blt	r5,zero,2d9c <__smakebuf_r+0xa4>
    2d2c:	d80d883a 	mov	r6,sp
    2d30:	0002f140 	call	2f14 <_fstat_r>
    2d34:	10001816 	blt	r2,zero,2d98 <__smakebuf_r+0xa0>
    2d38:	d8800117 	ldw	r2,4(sp)
    2d3c:	00e00014 	movui	r3,32768
    2d40:	10bc000c 	andi	r2,r2,61440
    2d44:	14c80020 	cmpeqi	r19,r2,8192
    2d48:	10c03726 	beq	r2,r3,2e28 <__smakebuf_r+0x130>
    2d4c:	80c0030b 	ldhu	r3,12(r16)
    2d50:	18c20014 	ori	r3,r3,2048
    2d54:	80c0030d 	sth	r3,12(r16)
    2d58:	00c80004 	movi	r3,8192
    2d5c:	10c0521e 	bne	r2,r3,2ea8 <__smakebuf_r+0x1b0>
    2d60:	8140038f 	ldh	r5,14(r16)
    2d64:	8809883a 	mov	r4,r17
    2d68:	0002f700 	call	2f70 <_isatty_r>
    2d6c:	10004c26 	beq	r2,zero,2ea0 <__smakebuf_r+0x1a8>
    2d70:	8080030b 	ldhu	r2,12(r16)
    2d74:	80c010c4 	addi	r3,r16,67
    2d78:	80c00015 	stw	r3,0(r16)
    2d7c:	10800054 	ori	r2,r2,1
    2d80:	8080030d 	sth	r2,12(r16)
    2d84:	00800044 	movi	r2,1
    2d88:	80c00415 	stw	r3,16(r16)
    2d8c:	80800515 	stw	r2,20(r16)
    2d90:	04810004 	movi	r18,1024
    2d94:	00000706 	br	2db4 <__smakebuf_r+0xbc>
    2d98:	8080030b 	ldhu	r2,12(r16)
    2d9c:	10c0200c 	andi	r3,r2,128
    2da0:	18001f1e 	bne	r3,zero,2e20 <__smakebuf_r+0x128>
    2da4:	04810004 	movi	r18,1024
    2da8:	10820014 	ori	r2,r2,2048
    2dac:	8080030d 	sth	r2,12(r16)
    2db0:	0027883a 	mov	r19,zero
    2db4:	900b883a 	mov	r5,r18
    2db8:	8809883a 	mov	r4,r17
    2dbc:	0000f000 	call	f00 <_malloc_r>
    2dc0:	10002c26 	beq	r2,zero,2e74 <__smakebuf_r+0x17c>
    2dc4:	80c0030b 	ldhu	r3,12(r16)
    2dc8:	01000034 	movhi	r4,0
    2dcc:	21014904 	addi	r4,r4,1316
    2dd0:	89000f15 	stw	r4,60(r17)
    2dd4:	18c02014 	ori	r3,r3,128
    2dd8:	80c0030d 	sth	r3,12(r16)
    2ddc:	80800015 	stw	r2,0(r16)
    2de0:	80800415 	stw	r2,16(r16)
    2de4:	84800515 	stw	r18,20(r16)
    2de8:	98001a1e 	bne	r19,zero,2e54 <__smakebuf_r+0x15c>
    2dec:	dfc01317 	ldw	ra,76(sp)
    2df0:	dcc01217 	ldw	r19,72(sp)
    2df4:	dc801117 	ldw	r18,68(sp)
    2df8:	dc401017 	ldw	r17,64(sp)
    2dfc:	dc000f17 	ldw	r16,60(sp)
    2e00:	dec01404 	addi	sp,sp,80
    2e04:	f800283a 	ret
    2e08:	288010c4 	addi	r2,r5,67
    2e0c:	28800015 	stw	r2,0(r5)
    2e10:	28800415 	stw	r2,16(r5)
    2e14:	00800044 	movi	r2,1
    2e18:	28800515 	stw	r2,20(r5)
    2e1c:	f800283a 	ret
    2e20:	04801004 	movi	r18,64
    2e24:	003fe006 	br	2da8 <__smakebuf_r+0xb0>
    2e28:	81000a17 	ldw	r4,40(r16)
    2e2c:	00c00034 	movhi	r3,0
    2e30:	18c89304 	addi	r3,r3,8780
    2e34:	20ffc51e 	bne	r4,r3,2d4c <__smakebuf_r+0x54>
    2e38:	8080030b 	ldhu	r2,12(r16)
    2e3c:	04810004 	movi	r18,1024
    2e40:	84801315 	stw	r18,76(r16)
    2e44:	1484b03a 	or	r2,r2,r18
    2e48:	8080030d 	sth	r2,12(r16)
    2e4c:	0027883a 	mov	r19,zero
    2e50:	003fd806 	br	2db4 <__smakebuf_r+0xbc>
    2e54:	8140038f 	ldh	r5,14(r16)
    2e58:	8809883a 	mov	r4,r17
    2e5c:	0002f700 	call	2f70 <_isatty_r>
    2e60:	103fe226 	beq	r2,zero,2dec <__smakebuf_r+0xf4>
    2e64:	8080030b 	ldhu	r2,12(r16)
    2e68:	10800054 	ori	r2,r2,1
    2e6c:	8080030d 	sth	r2,12(r16)
    2e70:	003fde06 	br	2dec <__smakebuf_r+0xf4>
    2e74:	8080030b 	ldhu	r2,12(r16)
    2e78:	10c0800c 	andi	r3,r2,512
    2e7c:	183fdb1e 	bne	r3,zero,2dec <__smakebuf_r+0xf4>
    2e80:	10800094 	ori	r2,r2,2
    2e84:	80c010c4 	addi	r3,r16,67
    2e88:	8080030d 	sth	r2,12(r16)
    2e8c:	00800044 	movi	r2,1
    2e90:	80c00015 	stw	r3,0(r16)
    2e94:	80c00415 	stw	r3,16(r16)
    2e98:	80800515 	stw	r2,20(r16)
    2e9c:	003fd306 	br	2dec <__smakebuf_r+0xf4>
    2ea0:	04810004 	movi	r18,1024
    2ea4:	003fc306 	br	2db4 <__smakebuf_r+0xbc>
    2ea8:	0027883a 	mov	r19,zero
    2eac:	04810004 	movi	r18,1024
    2eb0:	003fc006 	br	2db4 <__smakebuf_r+0xbc>

00002eb4 <_read_r>:
    2eb4:	defffd04 	addi	sp,sp,-12
    2eb8:	2805883a 	mov	r2,r5
    2ebc:	dc000015 	stw	r16,0(sp)
    2ec0:	04000074 	movhi	r16,1
    2ec4:	dc400115 	stw	r17,4(sp)
    2ec8:	300b883a 	mov	r5,r6
    2ecc:	84077e04 	addi	r16,r16,7672
    2ed0:	2023883a 	mov	r17,r4
    2ed4:	380d883a 	mov	r6,r7
    2ed8:	1009883a 	mov	r4,r2
    2edc:	dfc00215 	stw	ra,8(sp)
    2ee0:	80000015 	stw	zero,0(r16)
    2ee4:	00037f00 	call	37f0 <read>
    2ee8:	00ffffc4 	movi	r3,-1
    2eec:	10c00526 	beq	r2,r3,2f04 <_read_r+0x50>
    2ef0:	dfc00217 	ldw	ra,8(sp)
    2ef4:	dc400117 	ldw	r17,4(sp)
    2ef8:	dc000017 	ldw	r16,0(sp)
    2efc:	dec00304 	addi	sp,sp,12
    2f00:	f800283a 	ret
    2f04:	80c00017 	ldw	r3,0(r16)
    2f08:	183ff926 	beq	r3,zero,2ef0 <_read_r+0x3c>
    2f0c:	88c00015 	stw	r3,0(r17)
    2f10:	003ff706 	br	2ef0 <_read_r+0x3c>

00002f14 <_fstat_r>:
    2f14:	defffd04 	addi	sp,sp,-12
    2f18:	2805883a 	mov	r2,r5
    2f1c:	dc000015 	stw	r16,0(sp)
    2f20:	04000074 	movhi	r16,1
    2f24:	dc400115 	stw	r17,4(sp)
    2f28:	84077e04 	addi	r16,r16,7672
    2f2c:	2023883a 	mov	r17,r4
    2f30:	300b883a 	mov	r5,r6
    2f34:	1009883a 	mov	r4,r2
    2f38:	dfc00215 	stw	ra,8(sp)
    2f3c:	80000015 	stw	zero,0(r16)
    2f40:	00033140 	call	3314 <fstat>
    2f44:	00ffffc4 	movi	r3,-1
    2f48:	10c00526 	beq	r2,r3,2f60 <_fstat_r+0x4c>
    2f4c:	dfc00217 	ldw	ra,8(sp)
    2f50:	dc400117 	ldw	r17,4(sp)
    2f54:	dc000017 	ldw	r16,0(sp)
    2f58:	dec00304 	addi	sp,sp,12
    2f5c:	f800283a 	ret
    2f60:	80c00017 	ldw	r3,0(r16)
    2f64:	183ff926 	beq	r3,zero,2f4c <_fstat_r+0x38>
    2f68:	88c00015 	stw	r3,0(r17)
    2f6c:	003ff706 	br	2f4c <_fstat_r+0x38>

00002f70 <_isatty_r>:
    2f70:	defffd04 	addi	sp,sp,-12
    2f74:	dc000015 	stw	r16,0(sp)
    2f78:	04000074 	movhi	r16,1
    2f7c:	dc400115 	stw	r17,4(sp)
    2f80:	84077e04 	addi	r16,r16,7672
    2f84:	2023883a 	mov	r17,r4
    2f88:	2809883a 	mov	r4,r5
    2f8c:	dfc00215 	stw	ra,8(sp)
    2f90:	80000015 	stw	zero,0(r16)
    2f94:	00034140 	call	3414 <isatty>
    2f98:	00ffffc4 	movi	r3,-1
    2f9c:	10c00526 	beq	r2,r3,2fb4 <_isatty_r+0x44>
    2fa0:	dfc00217 	ldw	ra,8(sp)
    2fa4:	dc400117 	ldw	r17,4(sp)
    2fa8:	dc000017 	ldw	r16,0(sp)
    2fac:	dec00304 	addi	sp,sp,12
    2fb0:	f800283a 	ret
    2fb4:	80c00017 	ldw	r3,0(r16)
    2fb8:	183ff926 	beq	r3,zero,2fa0 <_isatty_r+0x30>
    2fbc:	88c00015 	stw	r3,0(r17)
    2fc0:	003ff706 	br	2fa0 <_isatty_r+0x30>

00002fc4 <__divsi3>:
    2fc4:	20001b16 	blt	r4,zero,3034 <__divsi3+0x70>
    2fc8:	000f883a 	mov	r7,zero
    2fcc:	28001616 	blt	r5,zero,3028 <__divsi3+0x64>
    2fd0:	200d883a 	mov	r6,r4
    2fd4:	29001a2e 	bgeu	r5,r4,3040 <__divsi3+0x7c>
    2fd8:	00800804 	movi	r2,32
    2fdc:	00c00044 	movi	r3,1
    2fe0:	00000106 	br	2fe8 <__divsi3+0x24>
    2fe4:	10000d26 	beq	r2,zero,301c <__divsi3+0x58>
    2fe8:	294b883a 	add	r5,r5,r5
    2fec:	10bfffc4 	addi	r2,r2,-1
    2ff0:	18c7883a 	add	r3,r3,r3
    2ff4:	293ffb36 	bltu	r5,r4,2fe4 <__divsi3+0x20>
    2ff8:	0005883a 	mov	r2,zero
    2ffc:	18000726 	beq	r3,zero,301c <__divsi3+0x58>
    3000:	0005883a 	mov	r2,zero
    3004:	31400236 	bltu	r6,r5,3010 <__divsi3+0x4c>
    3008:	314dc83a 	sub	r6,r6,r5
    300c:	10c4b03a 	or	r2,r2,r3
    3010:	1806d07a 	srli	r3,r3,1
    3014:	280ad07a 	srli	r5,r5,1
    3018:	183ffa1e 	bne	r3,zero,3004 <__divsi3+0x40>
    301c:	38000126 	beq	r7,zero,3024 <__divsi3+0x60>
    3020:	0085c83a 	sub	r2,zero,r2
    3024:	f800283a 	ret
    3028:	014bc83a 	sub	r5,zero,r5
    302c:	39c0005c 	xori	r7,r7,1
    3030:	003fe706 	br	2fd0 <__divsi3+0xc>
    3034:	0109c83a 	sub	r4,zero,r4
    3038:	01c00044 	movi	r7,1
    303c:	003fe306 	br	2fcc <__divsi3+0x8>
    3040:	00c00044 	movi	r3,1
    3044:	003fee06 	br	3000 <__divsi3+0x3c>

00003048 <__modsi3>:
    3048:	20001716 	blt	r4,zero,30a8 <__modsi3+0x60>
    304c:	000f883a 	mov	r7,zero
    3050:	2005883a 	mov	r2,r4
    3054:	28001216 	blt	r5,zero,30a0 <__modsi3+0x58>
    3058:	2900162e 	bgeu	r5,r4,30b4 <__modsi3+0x6c>
    305c:	01800804 	movi	r6,32
    3060:	00c00044 	movi	r3,1
    3064:	00000106 	br	306c <__modsi3+0x24>
    3068:	30000a26 	beq	r6,zero,3094 <__modsi3+0x4c>
    306c:	294b883a 	add	r5,r5,r5
    3070:	31bfffc4 	addi	r6,r6,-1
    3074:	18c7883a 	add	r3,r3,r3
    3078:	293ffb36 	bltu	r5,r4,3068 <__modsi3+0x20>
    307c:	18000526 	beq	r3,zero,3094 <__modsi3+0x4c>
    3080:	1806d07a 	srli	r3,r3,1
    3084:	11400136 	bltu	r2,r5,308c <__modsi3+0x44>
    3088:	1145c83a 	sub	r2,r2,r5
    308c:	280ad07a 	srli	r5,r5,1
    3090:	183ffb1e 	bne	r3,zero,3080 <__modsi3+0x38>
    3094:	38000126 	beq	r7,zero,309c <__modsi3+0x54>
    3098:	0085c83a 	sub	r2,zero,r2
    309c:	f800283a 	ret
    30a0:	014bc83a 	sub	r5,zero,r5
    30a4:	003fec06 	br	3058 <__modsi3+0x10>
    30a8:	0109c83a 	sub	r4,zero,r4
    30ac:	01c00044 	movi	r7,1
    30b0:	003fe706 	br	3050 <__modsi3+0x8>
    30b4:	00c00044 	movi	r3,1
    30b8:	003ff106 	br	3080 <__modsi3+0x38>

000030bc <__udivsi3>:
    30bc:	200d883a 	mov	r6,r4
    30c0:	2900152e 	bgeu	r5,r4,3118 <__udivsi3+0x5c>
    30c4:	28001416 	blt	r5,zero,3118 <__udivsi3+0x5c>
    30c8:	00800804 	movi	r2,32
    30cc:	00c00044 	movi	r3,1
    30d0:	00000206 	br	30dc <__udivsi3+0x20>
    30d4:	10000e26 	beq	r2,zero,3110 <__udivsi3+0x54>
    30d8:	28000516 	blt	r5,zero,30f0 <__udivsi3+0x34>
    30dc:	294b883a 	add	r5,r5,r5
    30e0:	10bfffc4 	addi	r2,r2,-1
    30e4:	18c7883a 	add	r3,r3,r3
    30e8:	293ffa36 	bltu	r5,r4,30d4 <__udivsi3+0x18>
    30ec:	18000826 	beq	r3,zero,3110 <__udivsi3+0x54>
    30f0:	0005883a 	mov	r2,zero
    30f4:	31400236 	bltu	r6,r5,3100 <__udivsi3+0x44>
    30f8:	314dc83a 	sub	r6,r6,r5
    30fc:	10c4b03a 	or	r2,r2,r3
    3100:	1806d07a 	srli	r3,r3,1
    3104:	280ad07a 	srli	r5,r5,1
    3108:	183ffa1e 	bne	r3,zero,30f4 <__udivsi3+0x38>
    310c:	f800283a 	ret
    3110:	0005883a 	mov	r2,zero
    3114:	f800283a 	ret
    3118:	00c00044 	movi	r3,1
    311c:	003ff406 	br	30f0 <__udivsi3+0x34>

00003120 <__umodsi3>:
    3120:	2005883a 	mov	r2,r4
    3124:	2900122e 	bgeu	r5,r4,3170 <__umodsi3+0x50>
    3128:	28001116 	blt	r5,zero,3170 <__umodsi3+0x50>
    312c:	01800804 	movi	r6,32
    3130:	00c00044 	movi	r3,1
    3134:	00000206 	br	3140 <__umodsi3+0x20>
    3138:	30000c26 	beq	r6,zero,316c <__umodsi3+0x4c>
    313c:	28000516 	blt	r5,zero,3154 <__umodsi3+0x34>
    3140:	294b883a 	add	r5,r5,r5
    3144:	31bfffc4 	addi	r6,r6,-1
    3148:	18c7883a 	add	r3,r3,r3
    314c:	293ffa36 	bltu	r5,r4,3138 <__umodsi3+0x18>
    3150:	18000626 	beq	r3,zero,316c <__umodsi3+0x4c>
    3154:	1806d07a 	srli	r3,r3,1
    3158:	11400136 	bltu	r2,r5,3160 <__umodsi3+0x40>
    315c:	1145c83a 	sub	r2,r2,r5
    3160:	280ad07a 	srli	r5,r5,1
    3164:	183ffb1e 	bne	r3,zero,3154 <__umodsi3+0x34>
    3168:	f800283a 	ret
    316c:	f800283a 	ret
    3170:	00c00044 	movi	r3,1
    3174:	003ff706 	br	3154 <__umodsi3+0x34>

00003178 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3178:	defffe04 	addi	sp,sp,-8
    317c:	dfc00115 	stw	ra,4(sp)
    3180:	df000015 	stw	fp,0(sp)
    3184:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3188:	00800074 	movhi	r2,1
    318c:	10809a04 	addi	r2,r2,616
    3190:	10800017 	ldw	r2,0(r2)
    3194:	10000526 	beq	r2,zero,31ac <alt_get_errno+0x34>
    3198:	00800074 	movhi	r2,1
    319c:	10809a04 	addi	r2,r2,616
    31a0:	10800017 	ldw	r2,0(r2)
    31a4:	103ee83a 	callr	r2
    31a8:	00000206 	br	31b4 <alt_get_errno+0x3c>
    31ac:	00800074 	movhi	r2,1
    31b0:	10877e04 	addi	r2,r2,7672
}
    31b4:	e037883a 	mov	sp,fp
    31b8:	dfc00117 	ldw	ra,4(sp)
    31bc:	df000017 	ldw	fp,0(sp)
    31c0:	dec00204 	addi	sp,sp,8
    31c4:	f800283a 	ret

000031c8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    31c8:	defffb04 	addi	sp,sp,-20
    31cc:	dfc00415 	stw	ra,16(sp)
    31d0:	df000315 	stw	fp,12(sp)
    31d4:	df000304 	addi	fp,sp,12
    31d8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    31dc:	e0bfff17 	ldw	r2,-4(fp)
    31e0:	10000616 	blt	r2,zero,31fc <close+0x34>
    31e4:	e0bfff17 	ldw	r2,-4(fp)
    31e8:	10c00324 	muli	r3,r2,12
    31ec:	00800074 	movhi	r2,1
    31f0:	10bc1604 	addi	r2,r2,-4008
    31f4:	1885883a 	add	r2,r3,r2
    31f8:	00000106 	br	3200 <close+0x38>
    31fc:	0005883a 	mov	r2,zero
    3200:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    3204:	e0bffd17 	ldw	r2,-12(fp)
    3208:	10001926 	beq	r2,zero,3270 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    320c:	e0bffd17 	ldw	r2,-12(fp)
    3210:	10800017 	ldw	r2,0(r2)
    3214:	10800417 	ldw	r2,16(r2)
    3218:	10000626 	beq	r2,zero,3234 <close+0x6c>
    321c:	e0bffd17 	ldw	r2,-12(fp)
    3220:	10800017 	ldw	r2,0(r2)
    3224:	10800417 	ldw	r2,16(r2)
    3228:	e13ffd17 	ldw	r4,-12(fp)
    322c:	103ee83a 	callr	r2
    3230:	00000106 	br	3238 <close+0x70>
    3234:	0005883a 	mov	r2,zero
    3238:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    323c:	e13fff17 	ldw	r4,-4(fp)
    3240:	00038ec0 	call	38ec <alt_release_fd>
    if (rval < 0)
    3244:	e0bffe17 	ldw	r2,-8(fp)
    3248:	1000070e 	bge	r2,zero,3268 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    324c:	00031780 	call	3178 <alt_get_errno>
    3250:	1007883a 	mov	r3,r2
    3254:	e0bffe17 	ldw	r2,-8(fp)
    3258:	0085c83a 	sub	r2,zero,r2
    325c:	18800015 	stw	r2,0(r3)
      return -1;
    3260:	00bfffc4 	movi	r2,-1
    3264:	00000706 	br	3284 <close+0xbc>
    }
    return 0;
    3268:	0005883a 	mov	r2,zero
    326c:	00000506 	br	3284 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3270:	00031780 	call	3178 <alt_get_errno>
    3274:	1007883a 	mov	r3,r2
    3278:	00801444 	movi	r2,81
    327c:	18800015 	stw	r2,0(r3)
    return -1;
    3280:	00bfffc4 	movi	r2,-1
  }
}
    3284:	e037883a 	mov	sp,fp
    3288:	dfc00117 	ldw	ra,4(sp)
    328c:	df000017 	ldw	fp,0(sp)
    3290:	dec00204 	addi	sp,sp,8
    3294:	f800283a 	ret

00003298 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    3298:	defffc04 	addi	sp,sp,-16
    329c:	df000315 	stw	fp,12(sp)
    32a0:	df000304 	addi	fp,sp,12
    32a4:	e13ffd15 	stw	r4,-12(fp)
    32a8:	e17ffe15 	stw	r5,-8(fp)
    32ac:	e1bfff15 	stw	r6,-4(fp)
  return len;
    32b0:	e0bfff17 	ldw	r2,-4(fp)
}
    32b4:	e037883a 	mov	sp,fp
    32b8:	df000017 	ldw	fp,0(sp)
    32bc:	dec00104 	addi	sp,sp,4
    32c0:	f800283a 	ret

000032c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    32c4:	defffe04 	addi	sp,sp,-8
    32c8:	dfc00115 	stw	ra,4(sp)
    32cc:	df000015 	stw	fp,0(sp)
    32d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    32d4:	00800074 	movhi	r2,1
    32d8:	10809a04 	addi	r2,r2,616
    32dc:	10800017 	ldw	r2,0(r2)
    32e0:	10000526 	beq	r2,zero,32f8 <alt_get_errno+0x34>
    32e4:	00800074 	movhi	r2,1
    32e8:	10809a04 	addi	r2,r2,616
    32ec:	10800017 	ldw	r2,0(r2)
    32f0:	103ee83a 	callr	r2
    32f4:	00000206 	br	3300 <alt_get_errno+0x3c>
    32f8:	00800074 	movhi	r2,1
    32fc:	10877e04 	addi	r2,r2,7672
}
    3300:	e037883a 	mov	sp,fp
    3304:	dfc00117 	ldw	ra,4(sp)
    3308:	df000017 	ldw	fp,0(sp)
    330c:	dec00204 	addi	sp,sp,8
    3310:	f800283a 	ret

00003314 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    3314:	defffb04 	addi	sp,sp,-20
    3318:	dfc00415 	stw	ra,16(sp)
    331c:	df000315 	stw	fp,12(sp)
    3320:	df000304 	addi	fp,sp,12
    3324:	e13ffe15 	stw	r4,-8(fp)
    3328:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    332c:	e0bffe17 	ldw	r2,-8(fp)
    3330:	10000616 	blt	r2,zero,334c <fstat+0x38>
    3334:	e0bffe17 	ldw	r2,-8(fp)
    3338:	10c00324 	muli	r3,r2,12
    333c:	00800074 	movhi	r2,1
    3340:	10bc1604 	addi	r2,r2,-4008
    3344:	1885883a 	add	r2,r3,r2
    3348:	00000106 	br	3350 <fstat+0x3c>
    334c:	0005883a 	mov	r2,zero
    3350:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    3354:	e0bffd17 	ldw	r2,-12(fp)
    3358:	10001026 	beq	r2,zero,339c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    335c:	e0bffd17 	ldw	r2,-12(fp)
    3360:	10800017 	ldw	r2,0(r2)
    3364:	10800817 	ldw	r2,32(r2)
    3368:	10000726 	beq	r2,zero,3388 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    336c:	e0bffd17 	ldw	r2,-12(fp)
    3370:	10800017 	ldw	r2,0(r2)
    3374:	10800817 	ldw	r2,32(r2)
    3378:	e17fff17 	ldw	r5,-4(fp)
    337c:	e13ffd17 	ldw	r4,-12(fp)
    3380:	103ee83a 	callr	r2
    3384:	00000a06 	br	33b0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    3388:	e0bfff17 	ldw	r2,-4(fp)
    338c:	00c80004 	movi	r3,8192
    3390:	10c00115 	stw	r3,4(r2)
      return 0;
    3394:	0005883a 	mov	r2,zero
    3398:	00000506 	br	33b0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    339c:	00032c40 	call	32c4 <alt_get_errno>
    33a0:	1007883a 	mov	r3,r2
    33a4:	00801444 	movi	r2,81
    33a8:	18800015 	stw	r2,0(r3)
    return -1;
    33ac:	00bfffc4 	movi	r2,-1
  }
}
    33b0:	e037883a 	mov	sp,fp
    33b4:	dfc00117 	ldw	ra,4(sp)
    33b8:	df000017 	ldw	fp,0(sp)
    33bc:	dec00204 	addi	sp,sp,8
    33c0:	f800283a 	ret

000033c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    33c4:	defffe04 	addi	sp,sp,-8
    33c8:	dfc00115 	stw	ra,4(sp)
    33cc:	df000015 	stw	fp,0(sp)
    33d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    33d4:	00800074 	movhi	r2,1
    33d8:	10809a04 	addi	r2,r2,616
    33dc:	10800017 	ldw	r2,0(r2)
    33e0:	10000526 	beq	r2,zero,33f8 <alt_get_errno+0x34>
    33e4:	00800074 	movhi	r2,1
    33e8:	10809a04 	addi	r2,r2,616
    33ec:	10800017 	ldw	r2,0(r2)
    33f0:	103ee83a 	callr	r2
    33f4:	00000206 	br	3400 <alt_get_errno+0x3c>
    33f8:	00800074 	movhi	r2,1
    33fc:	10877e04 	addi	r2,r2,7672
}
    3400:	e037883a 	mov	sp,fp
    3404:	dfc00117 	ldw	ra,4(sp)
    3408:	df000017 	ldw	fp,0(sp)
    340c:	dec00204 	addi	sp,sp,8
    3410:	f800283a 	ret

00003414 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    3414:	deffed04 	addi	sp,sp,-76
    3418:	dfc01215 	stw	ra,72(sp)
    341c:	df001115 	stw	fp,68(sp)
    3420:	df001104 	addi	fp,sp,68
    3424:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3428:	e0bfff17 	ldw	r2,-4(fp)
    342c:	10000616 	blt	r2,zero,3448 <isatty+0x34>
    3430:	e0bfff17 	ldw	r2,-4(fp)
    3434:	10c00324 	muli	r3,r2,12
    3438:	00800074 	movhi	r2,1
    343c:	10bc1604 	addi	r2,r2,-4008
    3440:	1885883a 	add	r2,r3,r2
    3444:	00000106 	br	344c <isatty+0x38>
    3448:	0005883a 	mov	r2,zero
    344c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    3450:	e0bfef17 	ldw	r2,-68(fp)
    3454:	10000e26 	beq	r2,zero,3490 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    3458:	e0bfef17 	ldw	r2,-68(fp)
    345c:	10800017 	ldw	r2,0(r2)
    3460:	10800817 	ldw	r2,32(r2)
    3464:	1000021e 	bne	r2,zero,3470 <isatty+0x5c>
    {
      return 1;
    3468:	00800044 	movi	r2,1
    346c:	00000d06 	br	34a4 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    3470:	e0bff004 	addi	r2,fp,-64
    3474:	100b883a 	mov	r5,r2
    3478:	e13fff17 	ldw	r4,-4(fp)
    347c:	00033140 	call	3314 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    3480:	e0bff117 	ldw	r2,-60(fp)
    3484:	10880020 	cmpeqi	r2,r2,8192
    3488:	10803fcc 	andi	r2,r2,255
    348c:	00000506 	br	34a4 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3490:	00033c40 	call	33c4 <alt_get_errno>
    3494:	1007883a 	mov	r3,r2
    3498:	00801444 	movi	r2,81
    349c:	18800015 	stw	r2,0(r3)
    return 0;
    34a0:	0005883a 	mov	r2,zero
  }
}
    34a4:	e037883a 	mov	sp,fp
    34a8:	dfc00117 	ldw	ra,4(sp)
    34ac:	df000017 	ldw	fp,0(sp)
    34b0:	dec00204 	addi	sp,sp,8
    34b4:	f800283a 	ret

000034b8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    34b8:	defffc04 	addi	sp,sp,-16
    34bc:	df000315 	stw	fp,12(sp)
    34c0:	df000304 	addi	fp,sp,12
    34c4:	e13ffd15 	stw	r4,-12(fp)
    34c8:	e17ffe15 	stw	r5,-8(fp)
    34cc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    34d0:	e0fffe17 	ldw	r3,-8(fp)
    34d4:	e0bffd17 	ldw	r2,-12(fp)
    34d8:	18800c26 	beq	r3,r2,350c <alt_load_section+0x54>
  {
    while( to != end )
    34dc:	00000806 	br	3500 <alt_load_section+0x48>
    {
      *to++ = *from++;
    34e0:	e0bffe17 	ldw	r2,-8(fp)
    34e4:	10c00104 	addi	r3,r2,4
    34e8:	e0fffe15 	stw	r3,-8(fp)
    34ec:	e0fffd17 	ldw	r3,-12(fp)
    34f0:	19000104 	addi	r4,r3,4
    34f4:	e13ffd15 	stw	r4,-12(fp)
    34f8:	18c00017 	ldw	r3,0(r3)
    34fc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    3500:	e0fffe17 	ldw	r3,-8(fp)
    3504:	e0bfff17 	ldw	r2,-4(fp)
    3508:	18bff51e 	bne	r3,r2,34e0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    350c:	0001883a 	nop
    3510:	e037883a 	mov	sp,fp
    3514:	df000017 	ldw	fp,0(sp)
    3518:	dec00104 	addi	sp,sp,4
    351c:	f800283a 	ret

00003520 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    3520:	defffe04 	addi	sp,sp,-8
    3524:	dfc00115 	stw	ra,4(sp)
    3528:	df000015 	stw	fp,0(sp)
    352c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    3530:	01800074 	movhi	r6,1
    3534:	3180be04 	addi	r6,r6,760
    3538:	01400074 	movhi	r5,1
    353c:	297a0104 	addi	r5,r5,-6140
    3540:	01000074 	movhi	r4,1
    3544:	2100be04 	addi	r4,r4,760
    3548:	00034b80 	call	34b8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    354c:	01800034 	movhi	r6,0
    3550:	31809104 	addi	r6,r6,580
    3554:	01400034 	movhi	r5,0
    3558:	29400804 	addi	r5,r5,32
    355c:	01000034 	movhi	r4,0
    3560:	21000804 	addi	r4,r4,32
    3564:	00034b80 	call	34b8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    3568:	01800074 	movhi	r6,1
    356c:	31ba0104 	addi	r6,r6,-6140
    3570:	01400074 	movhi	r5,1
    3574:	2979a304 	addi	r5,r5,-6516
    3578:	01000074 	movhi	r4,1
    357c:	2139a304 	addi	r4,r4,-6516
    3580:	00034b80 	call	34b8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    3584:	000d1500 	call	d150 <alt_dcache_flush_all>
  alt_icache_flush_all();
    3588:	000d34c0 	call	d34c <alt_icache_flush_all>
}
    358c:	0001883a 	nop
    3590:	e037883a 	mov	sp,fp
    3594:	dfc00117 	ldw	ra,4(sp)
    3598:	df000017 	ldw	fp,0(sp)
    359c:	dec00204 	addi	sp,sp,8
    35a0:	f800283a 	ret

000035a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    35a4:	defffe04 	addi	sp,sp,-8
    35a8:	dfc00115 	stw	ra,4(sp)
    35ac:	df000015 	stw	fp,0(sp)
    35b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    35b4:	00800074 	movhi	r2,1
    35b8:	10809a04 	addi	r2,r2,616
    35bc:	10800017 	ldw	r2,0(r2)
    35c0:	10000526 	beq	r2,zero,35d8 <alt_get_errno+0x34>
    35c4:	00800074 	movhi	r2,1
    35c8:	10809a04 	addi	r2,r2,616
    35cc:	10800017 	ldw	r2,0(r2)
    35d0:	103ee83a 	callr	r2
    35d4:	00000206 	br	35e0 <alt_get_errno+0x3c>
    35d8:	00800074 	movhi	r2,1
    35dc:	10877e04 	addi	r2,r2,7672
}
    35e0:	e037883a 	mov	sp,fp
    35e4:	dfc00117 	ldw	ra,4(sp)
    35e8:	df000017 	ldw	fp,0(sp)
    35ec:	dec00204 	addi	sp,sp,8
    35f0:	f800283a 	ret

000035f4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    35f4:	defff904 	addi	sp,sp,-28
    35f8:	dfc00615 	stw	ra,24(sp)
    35fc:	df000515 	stw	fp,20(sp)
    3600:	df000504 	addi	fp,sp,20
    3604:	e13ffd15 	stw	r4,-12(fp)
    3608:	e17ffe15 	stw	r5,-8(fp)
    360c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    3610:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3614:	e0bffd17 	ldw	r2,-12(fp)
    3618:	10000616 	blt	r2,zero,3634 <lseek+0x40>
    361c:	e0bffd17 	ldw	r2,-12(fp)
    3620:	10c00324 	muli	r3,r2,12
    3624:	00800074 	movhi	r2,1
    3628:	10bc1604 	addi	r2,r2,-4008
    362c:	1885883a 	add	r2,r3,r2
    3630:	00000106 	br	3638 <lseek+0x44>
    3634:	0005883a 	mov	r2,zero
    3638:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    363c:	e0bffc17 	ldw	r2,-16(fp)
    3640:	10001026 	beq	r2,zero,3684 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    3644:	e0bffc17 	ldw	r2,-16(fp)
    3648:	10800017 	ldw	r2,0(r2)
    364c:	10800717 	ldw	r2,28(r2)
    3650:	10000926 	beq	r2,zero,3678 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    3654:	e0bffc17 	ldw	r2,-16(fp)
    3658:	10800017 	ldw	r2,0(r2)
    365c:	10800717 	ldw	r2,28(r2)
    3660:	e1bfff17 	ldw	r6,-4(fp)
    3664:	e17ffe17 	ldw	r5,-8(fp)
    3668:	e13ffc17 	ldw	r4,-16(fp)
    366c:	103ee83a 	callr	r2
    3670:	e0bffb15 	stw	r2,-20(fp)
    3674:	00000506 	br	368c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    3678:	00bfde84 	movi	r2,-134
    367c:	e0bffb15 	stw	r2,-20(fp)
    3680:	00000206 	br	368c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    3684:	00bfebc4 	movi	r2,-81
    3688:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    368c:	e0bffb17 	ldw	r2,-20(fp)
    3690:	1000070e 	bge	r2,zero,36b0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    3694:	00035a40 	call	35a4 <alt_get_errno>
    3698:	1007883a 	mov	r3,r2
    369c:	e0bffb17 	ldw	r2,-20(fp)
    36a0:	0085c83a 	sub	r2,zero,r2
    36a4:	18800015 	stw	r2,0(r3)
    rc = -1;
    36a8:	00bfffc4 	movi	r2,-1
    36ac:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    36b0:	e0bffb17 	ldw	r2,-20(fp)
}
    36b4:	e037883a 	mov	sp,fp
    36b8:	dfc00117 	ldw	ra,4(sp)
    36bc:	df000017 	ldw	fp,0(sp)
    36c0:	dec00204 	addi	sp,sp,8
    36c4:	f800283a 	ret

000036c8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    36c8:	defff904 	addi	sp,sp,-28
    36cc:	dfc00615 	stw	ra,24(sp)
    36d0:	df000515 	stw	fp,20(sp)
    36d4:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    36d8:	0009883a 	mov	r4,zero
    36dc:	000c0fc0 	call	c0fc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    36e0:	00047a80 	call	47a8 <OSInit>
    36e4:	01000044 	movi	r4,1
    36e8:	00097fc0 	call	97fc <OSSemCreate>
    36ec:	1007883a 	mov	r3,r2
    36f0:	00800074 	movhi	r2,1
    36f4:	10878404 	addi	r2,r2,7696
    36f8:	10c00015 	stw	r3,0(r2)
    36fc:	01000044 	movi	r4,1
    3700:	00097fc0 	call	97fc <OSSemCreate>
    3704:	1007883a 	mov	r3,r2
    3708:	00800074 	movhi	r2,1
    370c:	10878604 	addi	r2,r2,7704
    3710:	10c00015 	stw	r3,0(r2)
    3714:	00800074 	movhi	r2,1
    3718:	10877f04 	addi	r2,r2,7676
    371c:	e0bffc15 	stw	r2,-16(fp)
    3720:	00800044 	movi	r2,1
    3724:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    3728:	e0bffd0b 	ldhu	r2,-12(fp)
    372c:	1009883a 	mov	r4,r2
    3730:	00097fc0 	call	97fc <OSSemCreate>
    3734:	1007883a 	mov	r3,r2
    3738:	e0bffc17 	ldw	r2,-16(fp)
    373c:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    3740:	000c1340 	call	c134 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    3744:	01800074 	movhi	r6,1
    3748:	31b9b204 	addi	r6,r6,-6456
    374c:	01400074 	movhi	r5,1
    3750:	2979b204 	addi	r5,r5,-6456
    3754:	01000074 	movhi	r4,1
    3758:	2139b204 	addi	r4,r4,-6456
    375c:	000d7140 	call	d714 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    3760:	000d28c0 	call	d28c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    3764:	01000074 	movhi	r4,1
    3768:	2134bb04 	addi	r4,r4,-11540
    376c:	000e2f00 	call	e2f0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    3770:	d0a6ef17 	ldw	r2,-25668(gp)
    3774:	d0e6f017 	ldw	r3,-25664(gp)
    3778:	d126f117 	ldw	r4,-25660(gp)
    377c:	200d883a 	mov	r6,r4
    3780:	180b883a 	mov	r5,r3
    3784:	1009883a 	mov	r4,r2
    3788:	00003000 	call	300 <main>
    378c:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    3790:	01000044 	movi	r4,1
    3794:	00031c80 	call	31c8 <close>
  exit (result);
    3798:	e13ffb17 	ldw	r4,-20(fp)
    379c:	000e3040 	call	e304 <exit>

000037a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    37a0:	defffe04 	addi	sp,sp,-8
    37a4:	dfc00115 	stw	ra,4(sp)
    37a8:	df000015 	stw	fp,0(sp)
    37ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    37b0:	00800074 	movhi	r2,1
    37b4:	10809a04 	addi	r2,r2,616
    37b8:	10800017 	ldw	r2,0(r2)
    37bc:	10000526 	beq	r2,zero,37d4 <alt_get_errno+0x34>
    37c0:	00800074 	movhi	r2,1
    37c4:	10809a04 	addi	r2,r2,616
    37c8:	10800017 	ldw	r2,0(r2)
    37cc:	103ee83a 	callr	r2
    37d0:	00000206 	br	37dc <alt_get_errno+0x3c>
    37d4:	00800074 	movhi	r2,1
    37d8:	10877e04 	addi	r2,r2,7672
}
    37dc:	e037883a 	mov	sp,fp
    37e0:	dfc00117 	ldw	ra,4(sp)
    37e4:	df000017 	ldw	fp,0(sp)
    37e8:	dec00204 	addi	sp,sp,8
    37ec:	f800283a 	ret

000037f0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    37f0:	defff904 	addi	sp,sp,-28
    37f4:	dfc00615 	stw	ra,24(sp)
    37f8:	df000515 	stw	fp,20(sp)
    37fc:	df000504 	addi	fp,sp,20
    3800:	e13ffd15 	stw	r4,-12(fp)
    3804:	e17ffe15 	stw	r5,-8(fp)
    3808:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    380c:	e0bffd17 	ldw	r2,-12(fp)
    3810:	10000616 	blt	r2,zero,382c <read+0x3c>
    3814:	e0bffd17 	ldw	r2,-12(fp)
    3818:	10c00324 	muli	r3,r2,12
    381c:	00800074 	movhi	r2,1
    3820:	10bc1604 	addi	r2,r2,-4008
    3824:	1885883a 	add	r2,r3,r2
    3828:	00000106 	br	3830 <read+0x40>
    382c:	0005883a 	mov	r2,zero
    3830:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    3834:	e0bffb17 	ldw	r2,-20(fp)
    3838:	10002226 	beq	r2,zero,38c4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    383c:	e0bffb17 	ldw	r2,-20(fp)
    3840:	10800217 	ldw	r2,8(r2)
    3844:	108000cc 	andi	r2,r2,3
    3848:	10800060 	cmpeqi	r2,r2,1
    384c:	1000181e 	bne	r2,zero,38b0 <read+0xc0>
        (fd->dev->read))
    3850:	e0bffb17 	ldw	r2,-20(fp)
    3854:	10800017 	ldw	r2,0(r2)
    3858:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    385c:	10001426 	beq	r2,zero,38b0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    3860:	e0bffb17 	ldw	r2,-20(fp)
    3864:	10800017 	ldw	r2,0(r2)
    3868:	10800517 	ldw	r2,20(r2)
    386c:	e0ffff17 	ldw	r3,-4(fp)
    3870:	180d883a 	mov	r6,r3
    3874:	e17ffe17 	ldw	r5,-8(fp)
    3878:	e13ffb17 	ldw	r4,-20(fp)
    387c:	103ee83a 	callr	r2
    3880:	e0bffc15 	stw	r2,-16(fp)
    3884:	e0bffc17 	ldw	r2,-16(fp)
    3888:	1000070e 	bge	r2,zero,38a8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    388c:	00037a00 	call	37a0 <alt_get_errno>
    3890:	1007883a 	mov	r3,r2
    3894:	e0bffc17 	ldw	r2,-16(fp)
    3898:	0085c83a 	sub	r2,zero,r2
    389c:	18800015 	stw	r2,0(r3)
          return -1;
    38a0:	00bfffc4 	movi	r2,-1
    38a4:	00000c06 	br	38d8 <read+0xe8>
        }
        return rval;
    38a8:	e0bffc17 	ldw	r2,-16(fp)
    38ac:	00000a06 	br	38d8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    38b0:	00037a00 	call	37a0 <alt_get_errno>
    38b4:	1007883a 	mov	r3,r2
    38b8:	00800344 	movi	r2,13
    38bc:	18800015 	stw	r2,0(r3)
    38c0:	00000406 	br	38d4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    38c4:	00037a00 	call	37a0 <alt_get_errno>
    38c8:	1007883a 	mov	r3,r2
    38cc:	00801444 	movi	r2,81
    38d0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    38d4:	00bfffc4 	movi	r2,-1
}
    38d8:	e037883a 	mov	sp,fp
    38dc:	dfc00117 	ldw	ra,4(sp)
    38e0:	df000017 	ldw	fp,0(sp)
    38e4:	dec00204 	addi	sp,sp,8
    38e8:	f800283a 	ret

000038ec <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    38ec:	defffe04 	addi	sp,sp,-8
    38f0:	df000115 	stw	fp,4(sp)
    38f4:	df000104 	addi	fp,sp,4
    38f8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    38fc:	e0bfff17 	ldw	r2,-4(fp)
    3900:	108000d0 	cmplti	r2,r2,3
    3904:	10000d1e 	bne	r2,zero,393c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    3908:	00800074 	movhi	r2,1
    390c:	10bc1604 	addi	r2,r2,-4008
    3910:	e0ffff17 	ldw	r3,-4(fp)
    3914:	18c00324 	muli	r3,r3,12
    3918:	10c5883a 	add	r2,r2,r3
    391c:	10800204 	addi	r2,r2,8
    3920:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    3924:	00800074 	movhi	r2,1
    3928:	10bc1604 	addi	r2,r2,-4008
    392c:	e0ffff17 	ldw	r3,-4(fp)
    3930:	18c00324 	muli	r3,r3,12
    3934:	10c5883a 	add	r2,r2,r3
    3938:	10000015 	stw	zero,0(r2)
  }
}
    393c:	0001883a 	nop
    3940:	e037883a 	mov	sp,fp
    3944:	df000017 	ldw	fp,0(sp)
    3948:	dec00104 	addi	sp,sp,4
    394c:	f800283a 	ret

00003950 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    3950:	defff904 	addi	sp,sp,-28
    3954:	df000615 	stw	fp,24(sp)
    3958:	df000604 	addi	fp,sp,24
    395c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3960:	0005303a 	rdctl	r2,status
    3964:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3968:	e0fffe17 	ldw	r3,-8(fp)
    396c:	00bfff84 	movi	r2,-2
    3970:	1884703a 	and	r2,r3,r2
    3974:	1001703a 	wrctl	status,r2
  
  return context;
    3978:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    397c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    3980:	d0a00a17 	ldw	r2,-32728(gp)
    3984:	10c000c4 	addi	r3,r2,3
    3988:	00bfff04 	movi	r2,-4
    398c:	1884703a 	and	r2,r3,r2
    3990:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    3994:	d0e00a17 	ldw	r3,-32728(gp)
    3998:	e0bfff17 	ldw	r2,-4(fp)
    399c:	1887883a 	add	r3,r3,r2
    39a0:	00810034 	movhi	r2,1024
    39a4:	10800004 	addi	r2,r2,0
    39a8:	10c0062e 	bgeu	r2,r3,39c4 <sbrk+0x74>
    39ac:	e0bffb17 	ldw	r2,-20(fp)
    39b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    39b4:	e0bffa17 	ldw	r2,-24(fp)
    39b8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    39bc:	00bfffc4 	movi	r2,-1
    39c0:	00000b06 	br	39f0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    39c4:	d0a00a17 	ldw	r2,-32728(gp)
    39c8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    39cc:	d0e00a17 	ldw	r3,-32728(gp)
    39d0:	e0bfff17 	ldw	r2,-4(fp)
    39d4:	1885883a 	add	r2,r3,r2
    39d8:	d0a00a15 	stw	r2,-32728(gp)
    39dc:	e0bffb17 	ldw	r2,-20(fp)
    39e0:	e0bffc15 	stw	r2,-16(fp)
    39e4:	e0bffc17 	ldw	r2,-16(fp)
    39e8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    39ec:	e0bffd17 	ldw	r2,-12(fp)
} 
    39f0:	e037883a 	mov	sp,fp
    39f4:	df000017 	ldw	fp,0(sp)
    39f8:	dec00104 	addi	sp,sp,4
    39fc:	f800283a 	ret

00003a00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3a00:	defffe04 	addi	sp,sp,-8
    3a04:	dfc00115 	stw	ra,4(sp)
    3a08:	df000015 	stw	fp,0(sp)
    3a0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3a10:	00800074 	movhi	r2,1
    3a14:	10809a04 	addi	r2,r2,616
    3a18:	10800017 	ldw	r2,0(r2)
    3a1c:	10000526 	beq	r2,zero,3a34 <alt_get_errno+0x34>
    3a20:	00800074 	movhi	r2,1
    3a24:	10809a04 	addi	r2,r2,616
    3a28:	10800017 	ldw	r2,0(r2)
    3a2c:	103ee83a 	callr	r2
    3a30:	00000206 	br	3a3c <alt_get_errno+0x3c>
    3a34:	00800074 	movhi	r2,1
    3a38:	10877e04 	addi	r2,r2,7672
}
    3a3c:	e037883a 	mov	sp,fp
    3a40:	dfc00117 	ldw	ra,4(sp)
    3a44:	df000017 	ldw	fp,0(sp)
    3a48:	dec00204 	addi	sp,sp,8
    3a4c:	f800283a 	ret

00003a50 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    3a50:	defff904 	addi	sp,sp,-28
    3a54:	dfc00615 	stw	ra,24(sp)
    3a58:	df000515 	stw	fp,20(sp)
    3a5c:	df000504 	addi	fp,sp,20
    3a60:	e13ffd15 	stw	r4,-12(fp)
    3a64:	e17ffe15 	stw	r5,-8(fp)
    3a68:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3a6c:	e0bffd17 	ldw	r2,-12(fp)
    3a70:	10000616 	blt	r2,zero,3a8c <write+0x3c>
    3a74:	e0bffd17 	ldw	r2,-12(fp)
    3a78:	10c00324 	muli	r3,r2,12
    3a7c:	00800074 	movhi	r2,1
    3a80:	10bc1604 	addi	r2,r2,-4008
    3a84:	1885883a 	add	r2,r3,r2
    3a88:	00000106 	br	3a90 <write+0x40>
    3a8c:	0005883a 	mov	r2,zero
    3a90:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    3a94:	e0bffb17 	ldw	r2,-20(fp)
    3a98:	10002126 	beq	r2,zero,3b20 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    3a9c:	e0bffb17 	ldw	r2,-20(fp)
    3aa0:	10800217 	ldw	r2,8(r2)
    3aa4:	108000cc 	andi	r2,r2,3
    3aa8:	10001826 	beq	r2,zero,3b0c <write+0xbc>
    3aac:	e0bffb17 	ldw	r2,-20(fp)
    3ab0:	10800017 	ldw	r2,0(r2)
    3ab4:	10800617 	ldw	r2,24(r2)
    3ab8:	10001426 	beq	r2,zero,3b0c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    3abc:	e0bffb17 	ldw	r2,-20(fp)
    3ac0:	10800017 	ldw	r2,0(r2)
    3ac4:	10800617 	ldw	r2,24(r2)
    3ac8:	e0ffff17 	ldw	r3,-4(fp)
    3acc:	180d883a 	mov	r6,r3
    3ad0:	e17ffe17 	ldw	r5,-8(fp)
    3ad4:	e13ffb17 	ldw	r4,-20(fp)
    3ad8:	103ee83a 	callr	r2
    3adc:	e0bffc15 	stw	r2,-16(fp)
    3ae0:	e0bffc17 	ldw	r2,-16(fp)
    3ae4:	1000070e 	bge	r2,zero,3b04 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    3ae8:	0003a000 	call	3a00 <alt_get_errno>
    3aec:	1007883a 	mov	r3,r2
    3af0:	e0bffc17 	ldw	r2,-16(fp)
    3af4:	0085c83a 	sub	r2,zero,r2
    3af8:	18800015 	stw	r2,0(r3)
        return -1;
    3afc:	00bfffc4 	movi	r2,-1
    3b00:	00000c06 	br	3b34 <write+0xe4>
      }
      return rval;
    3b04:	e0bffc17 	ldw	r2,-16(fp)
    3b08:	00000a06 	br	3b34 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    3b0c:	0003a000 	call	3a00 <alt_get_errno>
    3b10:	1007883a 	mov	r3,r2
    3b14:	00800344 	movi	r2,13
    3b18:	18800015 	stw	r2,0(r3)
    3b1c:	00000406 	br	3b30 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    3b20:	0003a000 	call	3a00 <alt_get_errno>
    3b24:	1007883a 	mov	r3,r2
    3b28:	00801444 	movi	r2,81
    3b2c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    3b30:	00bfffc4 	movi	r2,-1
}
    3b34:	e037883a 	mov	sp,fp
    3b38:	dfc00117 	ldw	ra,4(sp)
    3b3c:	df000017 	ldw	fp,0(sp)
    3b40:	dec00204 	addi	sp,sp,8
    3b44:	f800283a 	ret

00003b48 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    3b48:	deffdf04 	addi	sp,sp,-132
    3b4c:	dfc02015 	stw	ra,128(sp)
    3b50:	df001f15 	stw	fp,124(sp)
    3b54:	df001f04 	addi	fp,sp,124
    3b58:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    3b5c:	e0bfe204 	addi	r2,fp,-120
    3b60:	100b883a 	mov	r5,r2
    3b64:	01003fc4 	movi	r4,255
    3b68:	000b9c40 	call	b9c4 <OSTaskQuery>
    3b6c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    3b70:	e0bffe83 	ldbu	r2,-6(fp)
    3b74:	10803fcc 	andi	r2,r2,255
    3b78:	1000221e 	bne	r2,zero,3c04 <__env_lock+0xbc>
    return;

  id = tcb.OSTCBPrio;
    3b7c:	e0bfee83 	ldbu	r2,-70(fp)
    3b80:	10803fcc 	andi	r2,r2,255
    3b84:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    3b88:	00800074 	movhi	r2,1
    3b8c:	10878404 	addi	r2,r2,7696
    3b90:	10800017 	ldw	r2,0(r2)
    3b94:	e0fffd04 	addi	r3,fp,-12
    3b98:	180b883a 	mov	r5,r3
    3b9c:	1009883a 	mov	r4,r2
    3ba0:	000a04c0 	call	a04c <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    3ba4:	e0bffe43 	ldbu	r2,-7(fp)
    3ba8:	10803fcc 	andi	r2,r2,255
    3bac:	10000726 	beq	r2,zero,3bcc <__env_lock+0x84>
    3bb0:	d0a00b17 	ldw	r2,-32724(gp)
    3bb4:	e0ffe117 	ldw	r3,-124(fp)
    3bb8:	1880041e 	bne	r3,r2,3bcc <__env_lock+0x84>
  {
    /* we do; just count the recursion */

    locks++;
    3bbc:	d0a6f217 	ldw	r2,-25656(gp)
    3bc0:	10800044 	addi	r2,r2,1
    3bc4:	d0a6f215 	stw	r2,-25656(gp)
    3bc8:	00000c06 	br	3bfc <__env_lock+0xb4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    3bcc:	00800074 	movhi	r2,1
    3bd0:	10878404 	addi	r2,r2,7696
    3bd4:	10800017 	ldw	r2,0(r2)
    3bd8:	e0fffe84 	addi	r3,fp,-6
    3bdc:	180d883a 	mov	r6,r3
    3be0:	000b883a 	mov	r5,zero
    3be4:	1009883a 	mov	r4,r2
    3be8:	0009b640 	call	9b64 <OSSemPend>
    locks  = 1;
    3bec:	00800044 	movi	r2,1
    3bf0:	d0a6f215 	stw	r2,-25656(gp)
    lockid = id;
    3bf4:	e0bfe117 	ldw	r2,-124(fp)
    3bf8:	d0a00b15 	stw	r2,-32724(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    3bfc:	0001883a 	nop
    3c00:	00000106 	br	3c08 <__env_lock+0xc0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    3c04:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    3c08:	e037883a 	mov	sp,fp
    3c0c:	dfc00117 	ldw	ra,4(sp)
    3c10:	df000017 	ldw	fp,0(sp)
    3c14:	dec00204 	addi	sp,sp,8
    3c18:	f800283a 	ret

00003c1c <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    3c1c:	defffd04 	addi	sp,sp,-12
    3c20:	dfc00215 	stw	ra,8(sp)
    3c24:	df000115 	stw	fp,4(sp)
    3c28:	df000104 	addi	fp,sp,4
    3c2c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    3c30:	d0a6f217 	ldw	r2,-25656(gp)
    3c34:	10000d26 	beq	r2,zero,3c6c <__env_unlock+0x50>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    3c38:	d0a6f217 	ldw	r2,-25656(gp)
    3c3c:	10bfffc4 	addi	r2,r2,-1
    3c40:	d0a6f215 	stw	r2,-25656(gp)
    3c44:	d0a6f217 	ldw	r2,-25656(gp)
    3c48:	1000091e 	bne	r2,zero,3c70 <__env_unlock+0x54>
  {
    lockid = -1;
    3c4c:	00bfffc4 	movi	r2,-1
    3c50:	d0a00b15 	stw	r2,-32724(gp)
    OSSemPost( alt_envsem );
    3c54:	00800074 	movhi	r2,1
    3c58:	10878404 	addi	r2,r2,7696
    3c5c:	10800017 	ldw	r2,0(r2)
    3c60:	1009883a 	mov	r4,r2
    3c64:	0009f3c0 	call	9f3c <OSSemPost>
    3c68:	00000106 	br	3c70 <__env_unlock+0x54>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
    3c6c:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    3c70:	e037883a 	mov	sp,fp
    3c74:	dfc00117 	ldw	ra,4(sp)
    3c78:	df000017 	ldw	fp,0(sp)
    3c7c:	dec00204 	addi	sp,sp,8
    3c80:	f800283a 	ret

00003c84 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    3c84:	deffdb04 	addi	sp,sp,-148
    3c88:	dfc02415 	stw	ra,144(sp)
    3c8c:	df002315 	stw	fp,140(sp)
    3c90:	df002304 	addi	fp,sp,140
    3c94:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3c98:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    3c9c:	00800074 	movhi	r2,1
    3ca0:	10878744 	addi	r2,r2,7709
    3ca4:	10800003 	ldbu	r2,0(r2)
    3ca8:	10803fcc 	andi	r2,r2,255
    3cac:	10800060 	cmpeqi	r2,r2,1
    3cb0:	10003a26 	beq	r2,zero,3d9c <__malloc_lock+0x118>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    3cb4:	e0bfe204 	addi	r2,fp,-120
    3cb8:	100b883a 	mov	r5,r2
    3cbc:	01003fc4 	movi	r4,255
    3cc0:	000b9c40 	call	b9c4 <OSTaskQuery>
    3cc4:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    3cc8:	e0bffe83 	ldbu	r2,-6(fp)
    3ccc:	10803fcc 	andi	r2,r2,255
    3cd0:	1000341e 	bne	r2,zero,3da4 <__malloc_lock+0x120>
    return;

  id = tcb.OSTCBPrio;
    3cd4:	e0bfee83 	ldbu	r2,-70(fp)
    3cd8:	10803fcc 	andi	r2,r2,255
    3cdc:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    3ce0:	00800074 	movhi	r2,1
    3ce4:	10878604 	addi	r2,r2,7704
    3ce8:	10800017 	ldw	r2,0(r2)
    3cec:	e0fffd04 	addi	r3,fp,-12
    3cf0:	180b883a 	mov	r5,r3
    3cf4:	1009883a 	mov	r4,r2
    3cf8:	000a04c0 	call	a04c <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3cfc:	0005303a 	rdctl	r2,status
    3d00:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3d04:	e0ffe117 	ldw	r3,-124(fp)
    3d08:	00bfff84 	movi	r2,-2
    3d0c:	1884703a 	and	r2,r3,r2
    3d10:	1001703a 	wrctl	status,r2
  
  return context;
    3d14:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
    3d18:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
    3d1c:	e0bffd0b 	ldhu	r2,-12(fp)
    3d20:	10bfffcc 	andi	r2,r2,65535
    3d24:	10000b1e 	bne	r2,zero,3d54 <__malloc_lock+0xd0>
    3d28:	d0a00c17 	ldw	r2,-32720(gp)
    3d2c:	e0ffde17 	ldw	r3,-136(fp)
    3d30:	1880081e 	bne	r3,r2,3d54 <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
    3d34:	d0a6f417 	ldw	r2,-25648(gp)
    3d38:	10800044 	addi	r2,r2,1
    3d3c:	d0a6f415 	stw	r2,-25648(gp)
    3d40:	e0bfdd17 	ldw	r2,-140(fp)
    3d44:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3d48:	e0bfdf17 	ldw	r2,-132(fp)
    3d4c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    3d50:	00001006 	br	3d94 <__malloc_lock+0x110>
    3d54:	e0bfdd17 	ldw	r2,-140(fp)
    3d58:	e0bfe015 	stw	r2,-128(fp)
    3d5c:	e0bfe017 	ldw	r2,-128(fp)
    3d60:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    3d64:	00800074 	movhi	r2,1
    3d68:	10878604 	addi	r2,r2,7704
    3d6c:	10800017 	ldw	r2,0(r2)
    3d70:	e0fffe84 	addi	r3,fp,-6
    3d74:	180d883a 	mov	r6,r3
    3d78:	000b883a 	mov	r5,zero
    3d7c:	1009883a 	mov	r4,r2
    3d80:	0009b640 	call	9b64 <OSSemPend>
    locks  = 1;
    3d84:	00800044 	movi	r2,1
    3d88:	d0a6f415 	stw	r2,-25648(gp)
    lockid = id;
    3d8c:	e0bfde17 	ldw	r2,-136(fp)
    3d90:	d0a00c15 	stw	r2,-32720(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    3d94:	0001883a 	nop
    3d98:	00000306 	br	3da8 <__malloc_lock+0x124>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
    3d9c:	0001883a 	nop
    3da0:	00000106 	br	3da8 <__malloc_lock+0x124>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    3da4:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    3da8:	e037883a 	mov	sp,fp
    3dac:	dfc00117 	ldw	ra,4(sp)
    3db0:	df000017 	ldw	fp,0(sp)
    3db4:	dec00204 	addi	sp,sp,8
    3db8:	f800283a 	ret

00003dbc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    3dbc:	defff804 	addi	sp,sp,-32
    3dc0:	dfc00715 	stw	ra,28(sp)
    3dc4:	df000615 	stw	fp,24(sp)
    3dc8:	df000604 	addi	fp,sp,24
    3dcc:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3dd0:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
    3dd4:	00800074 	movhi	r2,1
    3dd8:	10878744 	addi	r2,r2,7709
    3ddc:	10800003 	ldbu	r2,0(r2)
    3de0:	10803fcc 	andi	r2,r2,255
    3de4:	10800060 	cmpeqi	r2,r2,1
    3de8:	10002526 	beq	r2,zero,3e80 <__malloc_unlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3dec:	0005303a 	rdctl	r2,status
    3df0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3df4:	e0fffe17 	ldw	r3,-8(fp)
    3df8:	00bfff84 	movi	r2,-2
    3dfc:	1884703a 	and	r2,r3,r2
    3e00:	1001703a 	wrctl	status,r2
  
  return context;
    3e04:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
    3e08:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
    3e0c:	d0a6f417 	ldw	r2,-25648(gp)
    3e10:	1000051e 	bne	r2,zero,3e28 <__malloc_unlock+0x6c>
    3e14:	e0bffa17 	ldw	r2,-24(fp)
    3e18:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3e1c:	e0bffb17 	ldw	r2,-20(fp)
    3e20:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    3e24:	00001706 	br	3e84 <__malloc_unlock+0xc8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    3e28:	d0a6f417 	ldw	r2,-25648(gp)
    3e2c:	10bfffc4 	addi	r2,r2,-1
    3e30:	d0a6f415 	stw	r2,-25648(gp)
    3e34:	d0a6f417 	ldw	r2,-25648(gp)
    3e38:	10000c1e 	bne	r2,zero,3e6c <__malloc_unlock+0xb0>
  {
    lockid = -1;
    3e3c:	00bfffc4 	movi	r2,-1
    3e40:	d0a00c15 	stw	r2,-32720(gp)
    3e44:	e0bffa17 	ldw	r2,-24(fp)
    3e48:	e0bffc15 	stw	r2,-16(fp)
    3e4c:	e0bffc17 	ldw	r2,-16(fp)
    3e50:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    3e54:	00800074 	movhi	r2,1
    3e58:	10878604 	addi	r2,r2,7704
    3e5c:	10800017 	ldw	r2,0(r2)
    3e60:	1009883a 	mov	r4,r2
    3e64:	0009f3c0 	call	9f3c <OSSemPost>
    3e68:	00000606 	br	3e84 <__malloc_unlock+0xc8>
    3e6c:	e0bffa17 	ldw	r2,-24(fp)
    3e70:	e0bffd15 	stw	r2,-12(fp)
    3e74:	e0bffd17 	ldw	r2,-12(fp)
    3e78:	1001703a 	wrctl	status,r2
    3e7c:	00000106 	br	3e84 <__malloc_unlock+0xc8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
    3e80:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    3e84:	e037883a 	mov	sp,fp
    3e88:	dfc00117 	ldw	ra,4(sp)
    3e8c:	df000017 	ldw	fp,0(sp)
    3e90:	dec00204 	addi	sp,sp,8
    3e94:	f800283a 	ret

00003e98 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    3e98:	defff704 	addi	sp,sp,-36
    3e9c:	dfc00815 	stw	ra,32(sp)
    3ea0:	df000715 	stw	fp,28(sp)
    3ea4:	df000704 	addi	fp,sp,28
    3ea8:	e13ffd15 	stw	r4,-12(fp)
    3eac:	e17ffe15 	stw	r5,-8(fp)
    3eb0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3eb4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    3eb8:	e0bfff17 	ldw	r2,-4(fp)
    3ebc:	1000021e 	bne	r2,zero,3ec8 <OSEventNameGet+0x30>
        return (0);
    3ec0:	0005883a 	mov	r2,zero
    3ec4:	00003906 	br	3fac <OSEventNameGet+0x114>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    3ec8:	e0bffd17 	ldw	r2,-12(fp)
    3ecc:	1000051e 	bne	r2,zero,3ee4 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    3ed0:	e0bfff17 	ldw	r2,-4(fp)
    3ed4:	00c00104 	movi	r3,4
    3ed8:	10c00005 	stb	r3,0(r2)
        return (0);
    3edc:	0005883a 	mov	r2,zero
    3ee0:	00003206 	br	3fac <OSEventNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    3ee4:	e0bffe17 	ldw	r2,-8(fp)
    3ee8:	1000051e 	bne	r2,zero,3f00 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    3eec:	e0bfff17 	ldw	r2,-4(fp)
    3ef0:	00c00304 	movi	r3,12
    3ef4:	10c00005 	stb	r3,0(r2)
        return (0);
    3ef8:	0005883a 	mov	r2,zero
    3efc:	00002b06 	br	3fac <OSEventNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    3f00:	00800074 	movhi	r2,1
    3f04:	10879504 	addi	r2,r2,7764
    3f08:	10800003 	ldbu	r2,0(r2)
    3f0c:	10803fcc 	andi	r2,r2,255
    3f10:	10000526 	beq	r2,zero,3f28 <OSEventNameGet+0x90>
        *perr  = OS_ERR_NAME_GET_ISR;
    3f14:	e0bfff17 	ldw	r2,-4(fp)
    3f18:	00c00444 	movi	r3,17
    3f1c:	10c00005 	stb	r3,0(r2)
        return (0);
    3f20:	0005883a 	mov	r2,zero
    3f24:	00002106 	br	3fac <OSEventNameGet+0x114>
    }
    switch (pevent->OSEventType) {
    3f28:	e0bffd17 	ldw	r2,-12(fp)
    3f2c:	10800003 	ldbu	r2,0(r2)
    3f30:	10803fcc 	andi	r2,r2,255
    3f34:	10bfffc4 	addi	r2,r2,-1
    3f38:	10800128 	cmpgeui	r2,r2,4
    3f3c:	10000526 	beq	r2,zero,3f54 <OSEventNameGet+0xbc>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    3f40:	e0bfff17 	ldw	r2,-4(fp)
    3f44:	00c00044 	movi	r3,1
    3f48:	10c00005 	stb	r3,0(r2)
             return (0);
    3f4c:	0005883a 	mov	r2,zero
    3f50:	00001606 	br	3fac <OSEventNameGet+0x114>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    3f54:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3f58:	0005303a 	rdctl	r2,status
    3f5c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3f60:	e0fffb17 	ldw	r3,-20(fp)
    3f64:	00bfff84 	movi	r2,-2
    3f68:	1884703a 	and	r2,r3,r2
    3f6c:	1001703a 	wrctl	status,r2
  
  return context;
    3f70:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    3f74:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    3f78:	e0bffd17 	ldw	r2,-12(fp)
    3f7c:	10800384 	addi	r2,r2,14
    3f80:	100b883a 	mov	r5,r2
    3f84:	e13ffe17 	ldw	r4,-8(fp)
    3f88:	0005d640 	call	5d64 <OS_StrCopy>
    3f8c:	e0bffa05 	stb	r2,-24(fp)
    3f90:	e0bff917 	ldw	r2,-28(fp)
    3f94:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3f98:	e0bffc17 	ldw	r2,-16(fp)
    3f9c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    3fa0:	e0bfff17 	ldw	r2,-4(fp)
    3fa4:	10000005 	stb	zero,0(r2)
    return (len);
    3fa8:	e0bffa03 	ldbu	r2,-24(fp)
}
    3fac:	e037883a 	mov	sp,fp
    3fb0:	dfc00117 	ldw	ra,4(sp)
    3fb4:	df000017 	ldw	fp,0(sp)
    3fb8:	dec00204 	addi	sp,sp,8
    3fbc:	f800283a 	ret

00003fc0 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    3fc0:	defff604 	addi	sp,sp,-40
    3fc4:	dfc00915 	stw	ra,36(sp)
    3fc8:	df000815 	stw	fp,32(sp)
    3fcc:	df000804 	addi	fp,sp,32
    3fd0:	e13ffd15 	stw	r4,-12(fp)
    3fd4:	e17ffe15 	stw	r5,-8(fp)
    3fd8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3fdc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    3fe0:	e0bfff17 	ldw	r2,-4(fp)
    3fe4:	10004226 	beq	r2,zero,40f0 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    3fe8:	e0bffd17 	ldw	r2,-12(fp)
    3fec:	1000041e 	bne	r2,zero,4000 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    3ff0:	e0bfff17 	ldw	r2,-4(fp)
    3ff4:	00c00104 	movi	r3,4
    3ff8:	10c00005 	stb	r3,0(r2)
        return;
    3ffc:	00003d06 	br	40f4 <OSEventNameSet+0x134>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    4000:	e0bffe17 	ldw	r2,-8(fp)
    4004:	1000041e 	bne	r2,zero,4018 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    4008:	e0bfff17 	ldw	r2,-4(fp)
    400c:	00c00304 	movi	r3,12
    4010:	10c00005 	stb	r3,0(r2)
        return;
    4014:	00003706 	br	40f4 <OSEventNameSet+0x134>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    4018:	00800074 	movhi	r2,1
    401c:	10879504 	addi	r2,r2,7764
    4020:	10800003 	ldbu	r2,0(r2)
    4024:	10803fcc 	andi	r2,r2,255
    4028:	10000426 	beq	r2,zero,403c <OSEventNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
    402c:	e0bfff17 	ldw	r2,-4(fp)
    4030:	00c00484 	movi	r3,18
    4034:	10c00005 	stb	r3,0(r2)
        return;
    4038:	00002e06 	br	40f4 <OSEventNameSet+0x134>
    }
    switch (pevent->OSEventType) {
    403c:	e0bffd17 	ldw	r2,-12(fp)
    4040:	10800003 	ldbu	r2,0(r2)
    4044:	10803fcc 	andi	r2,r2,255
    4048:	10bfffc4 	addi	r2,r2,-1
    404c:	10800128 	cmpgeui	r2,r2,4
    4050:	10000426 	beq	r2,zero,4064 <OSEventNameSet+0xa4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    4054:	e0bfff17 	ldw	r2,-4(fp)
    4058:	00c00044 	movi	r3,1
    405c:	10c00005 	stb	r3,0(r2)
             return;
    4060:	00002406 	br	40f4 <OSEventNameSet+0x134>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    4064:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4068:	0005303a 	rdctl	r2,status
    406c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4070:	e0fffc17 	ldw	r3,-16(fp)
    4074:	00bfff84 	movi	r2,-2
    4078:	1884703a 	and	r2,r3,r2
    407c:	1001703a 	wrctl	status,r2
  
  return context;
    4080:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    4084:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    4088:	e13ffe17 	ldw	r4,-8(fp)
    408c:	0005dd80 	call	5dd8 <OS_StrLen>
    4090:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    4094:	e0bffa03 	ldbu	r2,-24(fp)
    4098:	10800830 	cmpltui	r2,r2,32
    409c:	1000081e 	bne	r2,zero,40c0 <OSEventNameSet+0x100>
    40a0:	e0bff817 	ldw	r2,-32(fp)
    40a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    40a8:	e0bff917 	ldw	r2,-28(fp)
    40ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    40b0:	e0bfff17 	ldw	r2,-4(fp)
    40b4:	00c002c4 	movi	r3,11
    40b8:	10c00005 	stb	r3,0(r2)
        return;
    40bc:	00000d06 	br	40f4 <OSEventNameSet+0x134>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    40c0:	e0bffd17 	ldw	r2,-12(fp)
    40c4:	10800384 	addi	r2,r2,14
    40c8:	e17ffe17 	ldw	r5,-8(fp)
    40cc:	1009883a 	mov	r4,r2
    40d0:	0005d640 	call	5d64 <OS_StrCopy>
    40d4:	e0bff817 	ldw	r2,-32(fp)
    40d8:	e0bffb15 	stw	r2,-20(fp)
    40dc:	e0bffb17 	ldw	r2,-20(fp)
    40e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    40e4:	e0bfff17 	ldw	r2,-4(fp)
    40e8:	10000005 	stb	zero,0(r2)
    40ec:	00000106 	br	40f4 <OSEventNameSet+0x134>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    40f0:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    40f4:	e037883a 	mov	sp,fp
    40f8:	dfc00117 	ldw	ra,4(sp)
    40fc:	df000017 	ldw	fp,0(sp)
    4100:	dec00204 	addi	sp,sp,8
    4104:	f800283a 	ret

00004108 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    4108:	deffed04 	addi	sp,sp,-76
    410c:	dfc01215 	stw	ra,72(sp)
    4110:	df001115 	stw	fp,68(sp)
    4114:	df001104 	addi	fp,sp,68
    4118:	e13ffc15 	stw	r4,-16(fp)
    411c:	e17ffd15 	stw	r5,-12(fp)
    4120:	e1bffe15 	stw	r6,-8(fp)
    4124:	3805883a 	mov	r2,r7
    4128:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    412c:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    4130:	e0800217 	ldw	r2,8(fp)
    4134:	1000021e 	bne	r2,zero,4140 <OSEventPendMulti+0x38>
        return (0);
    4138:	0005883a 	mov	r2,zero
    413c:	00019506 	br	4794 <OSEventPendMulti+0x68c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    4140:	e0bffc17 	ldw	r2,-16(fp)
    4144:	1000051e 	bne	r2,zero,415c <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    4148:	e0800217 	ldw	r2,8(fp)
    414c:	00c00104 	movi	r3,4
    4150:	10c00005 	stb	r3,0(r2)
        return (0);
    4154:	0005883a 	mov	r2,zero
    4158:	00018e06 	br	4794 <OSEventPendMulti+0x68c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    415c:	e0bffd17 	ldw	r2,-12(fp)
    4160:	1000051e 	bne	r2,zero,4178 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    4164:	e0800217 	ldw	r2,8(fp)
    4168:	00c00104 	movi	r3,4
    416c:	10c00005 	stb	r3,0(r2)
        return (0);
    4170:	0005883a 	mov	r2,zero
    4174:	00018706 	br	4794 <OSEventPendMulti+0x68c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    4178:	e0bffe17 	ldw	r2,-8(fp)
    417c:	1000051e 	bne	r2,zero,4194 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    4180:	e0800217 	ldw	r2,8(fp)
    4184:	00c00104 	movi	r3,4
    4188:	10c00005 	stb	r3,0(r2)
        return (0);
    418c:	0005883a 	mov	r2,zero
    4190:	00018006 	br	4794 <OSEventPendMulti+0x68c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    4194:	e0bffd17 	ldw	r2,-12(fp)
    4198:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    419c:	e0bffc17 	ldw	r2,-16(fp)
    41a0:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
    41a4:	e0bfef17 	ldw	r2,-68(fp)
    41a8:	10800017 	ldw	r2,0(r2)
    41ac:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
    41b0:	00001906 	br	4218 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    41b4:	e0bff017 	ldw	r2,-64(fp)
    41b8:	10800003 	ldbu	r2,0(r2)
    41bc:	10803fcc 	andi	r2,r2,255
    41c0:	10c000a0 	cmpeqi	r3,r2,2
    41c4:	1800091e 	bne	r3,zero,41ec <OSEventPendMulti+0xe4>
    41c8:	10c000e0 	cmpeqi	r3,r2,3
    41cc:	1800091e 	bne	r3,zero,41f4 <OSEventPendMulti+0xec>
    41d0:	10800060 	cmpeqi	r2,r2,1
    41d4:	1000091e 	bne	r2,zero,41fc <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    41d8:	e0800217 	ldw	r2,8(fp)
    41dc:	00c00044 	movi	r3,1
    41e0:	10c00005 	stb	r3,0(r2)
                 return (0);
    41e4:	0005883a 	mov	r2,zero
    41e8:	00016a06 	br	4794 <OSEventPendMulti+0x68c>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
    41ec:	0001883a 	nop
    41f0:	00000306 	br	4200 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
    41f4:	0001883a 	nop
    41f8:	00000106 	br	4200 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
    41fc:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
    4200:	e0bfef17 	ldw	r2,-68(fp)
    4204:	10800104 	addi	r2,r2,4
    4208:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    420c:	e0bfef17 	ldw	r2,-68(fp)
    4210:	10800017 	ldw	r2,0(r2)
    4214:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    4218:	e0bff017 	ldw	r2,-64(fp)
    421c:	103fe51e 	bne	r2,zero,41b4 <OSEventPendMulti+0xac>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    4220:	00800074 	movhi	r2,1
    4224:	10879504 	addi	r2,r2,7764
    4228:	10800003 	ldbu	r2,0(r2)
    422c:	10803fcc 	andi	r2,r2,255
    4230:	10000526 	beq	r2,zero,4248 <OSEventPendMulti+0x140>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    4234:	e0800217 	ldw	r2,8(fp)
    4238:	00c00084 	movi	r3,2
    423c:	10c00005 	stb	r3,0(r2)
        return (0);
    4240:	0005883a 	mov	r2,zero
    4244:	00015306 	br	4794 <OSEventPendMulti+0x68c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    4248:	00800074 	movhi	r2,1
    424c:	10878704 	addi	r2,r2,7708
    4250:	10800003 	ldbu	r2,0(r2)
    4254:	10803fcc 	andi	r2,r2,255
    4258:	10000526 	beq	r2,zero,4270 <OSEventPendMulti+0x168>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    425c:	e0800217 	ldw	r2,8(fp)
    4260:	00c00344 	movi	r3,13
    4264:	10c00005 	stb	r3,0(r2)
        return (0);
    4268:	0005883a 	mov	r2,zero
    426c:	00014906 	br	4794 <OSEventPendMulti+0x68c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4270:	0005303a 	rdctl	r2,status
    4274:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4278:	e0fffb17 	ldw	r3,-20(fp)
    427c:	00bfff84 	movi	r2,-2
    4280:	1884703a 	and	r2,r3,r2
    4284:	1001703a 	wrctl	status,r2
  
  return context;
    4288:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    428c:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
    4290:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
    4294:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
    4298:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
    429c:	e0bffc17 	ldw	r2,-16(fp)
    42a0:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
    42a4:	e0bfef17 	ldw	r2,-68(fp)
    42a8:	10800017 	ldw	r2,0(r2)
    42ac:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    42b0:	00008106 	br	44b8 <OSEventPendMulti+0x3b0>
        switch (pevent->OSEventType) {
    42b4:	e0bff017 	ldw	r2,-64(fp)
    42b8:	10800003 	ldbu	r2,0(r2)
    42bc:	10803fcc 	andi	r2,r2,255
    42c0:	10c000a0 	cmpeqi	r3,r2,2
    42c4:	18003c1e 	bne	r3,zero,43b8 <OSEventPendMulti+0x2b0>
    42c8:	10c000e0 	cmpeqi	r3,r2,3
    42cc:	1800031e 	bne	r3,zero,42dc <OSEventPendMulti+0x1d4>
    42d0:	10800060 	cmpeqi	r2,r2,1
    42d4:	10001e1e 	bne	r2,zero,4350 <OSEventPendMulti+0x248>
    42d8:	00006606 	br	4474 <OSEventPendMulti+0x36c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    42dc:	e0bff017 	ldw	r2,-64(fp)
    42e0:	1080020b 	ldhu	r2,8(r2)
    42e4:	10bfffcc 	andi	r2,r2,65535
    42e8:	10001526 	beq	r2,zero,4340 <OSEventPendMulti+0x238>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    42ec:	e0bff017 	ldw	r2,-64(fp)
    42f0:	1080020b 	ldhu	r2,8(r2)
    42f4:	10bfffc4 	addi	r2,r2,-1
    42f8:	1007883a 	mov	r3,r2
    42fc:	e0bff017 	ldw	r2,-64(fp)
    4300:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    4304:	e0bffd17 	ldw	r2,-12(fp)
    4308:	10c00104 	addi	r3,r2,4
    430c:	e0fffd15 	stw	r3,-12(fp)
    4310:	e0fff017 	ldw	r3,-64(fp)
    4314:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    4318:	00800044 	movi	r2,1
    431c:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    4320:	e0bffe17 	ldw	r2,-8(fp)
    4324:	10c00104 	addi	r3,r2,4
    4328:	e0fffe15 	stw	r3,-8(fp)
    432c:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    4330:	e0bff18b 	ldhu	r2,-58(fp)
    4334:	10800044 	addi	r2,r2,1
    4338:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    433c:	00005806 	br	44a0 <OSEventPendMulti+0x398>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    4340:	e0bff203 	ldbu	r2,-56(fp)
    4344:	10800054 	ori	r2,r2,1
    4348:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    434c:	00005406 	br	44a0 <OSEventPendMulti+0x398>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    4350:	e0bff017 	ldw	r2,-64(fp)
    4354:	10800117 	ldw	r2,4(r2)
    4358:	10001326 	beq	r2,zero,43a8 <OSEventPendMulti+0x2a0>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    435c:	e0bffe17 	ldw	r2,-8(fp)
    4360:	10c00104 	addi	r3,r2,4
    4364:	e0fffe15 	stw	r3,-8(fp)
    4368:	e0fff017 	ldw	r3,-64(fp)
    436c:	18c00117 	ldw	r3,4(r3)
    4370:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
    4374:	e0bff017 	ldw	r2,-64(fp)
    4378:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    437c:	e0bffd17 	ldw	r2,-12(fp)
    4380:	10c00104 	addi	r3,r2,4
    4384:	e0fffd15 	stw	r3,-12(fp)
    4388:	e0fff017 	ldw	r3,-64(fp)
    438c:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
    4390:	00800044 	movi	r2,1
    4394:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    4398:	e0bff18b 	ldhu	r2,-58(fp)
    439c:	10800044 	addi	r2,r2,1
    43a0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    43a4:	00003e06 	br	44a0 <OSEventPendMulti+0x398>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    43a8:	e0bff203 	ldbu	r2,-56(fp)
    43ac:	10800094 	ori	r2,r2,2
    43b0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    43b4:	00003a06 	br	44a0 <OSEventPendMulti+0x398>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    43b8:	e0bff017 	ldw	r2,-64(fp)
    43bc:	10800117 	ldw	r2,4(r2)
    43c0:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    43c4:	e0bff517 	ldw	r2,-44(fp)
    43c8:	1080058b 	ldhu	r2,22(r2)
    43cc:	10bfffcc 	andi	r2,r2,65535
    43d0:	10002426 	beq	r2,zero,4464 <OSEventPendMulti+0x35c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    43d4:	e0bffe17 	ldw	r2,-8(fp)
    43d8:	10c00104 	addi	r3,r2,4
    43dc:	e0fffe15 	stw	r3,-8(fp)
    43e0:	e0fff517 	ldw	r3,-44(fp)
    43e4:	18c00417 	ldw	r3,16(r3)
    43e8:	19400104 	addi	r5,r3,4
    43ec:	e13ff517 	ldw	r4,-44(fp)
    43f0:	21400415 	stw	r5,16(r4)
    43f4:	18c00017 	ldw	r3,0(r3)
    43f8:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    43fc:	e0bff517 	ldw	r2,-44(fp)
    4400:	10c00417 	ldw	r3,16(r2)
    4404:	e0bff517 	ldw	r2,-44(fp)
    4408:	10800217 	ldw	r2,8(r2)
    440c:	1880041e 	bne	r3,r2,4420 <OSEventPendMulti+0x318>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    4410:	e0bff517 	ldw	r2,-44(fp)
    4414:	10c00117 	ldw	r3,4(r2)
    4418:	e0bff517 	ldw	r2,-44(fp)
    441c:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    4420:	e0bff517 	ldw	r2,-44(fp)
    4424:	1080058b 	ldhu	r2,22(r2)
    4428:	10bfffc4 	addi	r2,r2,-1
    442c:	1007883a 	mov	r3,r2
    4430:	e0bff517 	ldw	r2,-44(fp)
    4434:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    4438:	e0bffd17 	ldw	r2,-12(fp)
    443c:	10c00104 	addi	r3,r2,4
    4440:	e0fffd15 	stw	r3,-12(fp)
    4444:	e0fff017 	ldw	r3,-64(fp)
    4448:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    444c:	00800044 	movi	r2,1
    4450:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    4454:	e0bff18b 	ldhu	r2,-58(fp)
    4458:	10800044 	addi	r2,r2,1
    445c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    4460:	00000f06 	br	44a0 <OSEventPendMulti+0x398>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    4464:	e0bff203 	ldbu	r2,-56(fp)
    4468:	10800114 	ori	r2,r2,4
    446c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    4470:	00000b06 	br	44a0 <OSEventPendMulti+0x398>
    4474:	e0bff317 	ldw	r2,-52(fp)
    4478:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    447c:	e0bff417 	ldw	r2,-48(fp)
    4480:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    4484:	e0bffd17 	ldw	r2,-12(fp)
    4488:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    448c:	e0800217 	ldw	r2,8(fp)
    4490:	00c00044 	movi	r3,1
    4494:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    4498:	e0bff18b 	ldhu	r2,-58(fp)
    449c:	0000bd06 	br	4794 <OSEventPendMulti+0x68c>
        }
        pevents++;
    44a0:	e0bfef17 	ldw	r2,-68(fp)
    44a4:	10800104 	addi	r2,r2,4
    44a8:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    44ac:	e0bfef17 	ldw	r2,-68(fp)
    44b0:	10800017 	ldw	r2,0(r2)
    44b4:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    44b8:	e0bff017 	ldw	r2,-64(fp)
    44bc:	103f7d1e 	bne	r2,zero,42b4 <OSEventPendMulti+0x1ac>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    44c0:	e0bff103 	ldbu	r2,-60(fp)
    44c4:	10800058 	cmpnei	r2,r2,1
    44c8:	10000a1e 	bne	r2,zero,44f4 <OSEventPendMulti+0x3ec>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    44cc:	e0bffd17 	ldw	r2,-12(fp)
    44d0:	10000015 	stw	zero,0(r2)
    44d4:	e0bff317 	ldw	r2,-52(fp)
    44d8:	e0bff615 	stw	r2,-40(fp)
    44dc:	e0bff617 	ldw	r2,-40(fp)
    44e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    44e4:	e0800217 	ldw	r2,8(fp)
    44e8:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    44ec:	e0bff18b 	ldhu	r2,-58(fp)
    44f0:	0000a806 	br	4794 <OSEventPendMulti+0x68c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    44f4:	00800074 	movhi	r2,1
    44f8:	10879604 	addi	r2,r2,7768
    44fc:	10c00017 	ldw	r3,0(r2)
    4500:	00800074 	movhi	r2,1
    4504:	10879604 	addi	r2,r2,7768
    4508:	10800017 	ldw	r2,0(r2)
    450c:	11000c03 	ldbu	r4,48(r2)
    4510:	e0bff203 	ldbu	r2,-56(fp)
    4514:	2084b03a 	or	r2,r4,r2
    4518:	1009883a 	mov	r4,r2
    451c:	00bfe004 	movi	r2,-128
    4520:	2084b03a 	or	r2,r4,r2
    4524:	18800c05 	stb	r2,48(r3)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    4528:	00800074 	movhi	r2,1
    452c:	10879604 	addi	r2,r2,7768
    4530:	10800017 	ldw	r2,0(r2)
    4534:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    4538:	00800074 	movhi	r2,1
    453c:	10879604 	addi	r2,r2,7768
    4540:	10800017 	ldw	r2,0(r2)
    4544:	e0ffff0b 	ldhu	r3,-4(fp)
    4548:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    454c:	e13ffc17 	ldw	r4,-16(fp)
    4550:	00053200 	call	5320 <OS_EventTaskWaitMulti>
    4554:	e0bff317 	ldw	r2,-52(fp)
    4558:	e0bff915 	stw	r2,-28(fp)
    455c:	e0bff917 	ldw	r2,-28(fp)
    4560:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    4564:	0005bc00 	call	5bc0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4568:	0005303a 	rdctl	r2,status
    456c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4570:	e0fff717 	ldw	r3,-36(fp)
    4574:	00bfff84 	movi	r2,-2
    4578:	1884703a 	and	r2,r3,r2
    457c:	1001703a 	wrctl	status,r2
  
  return context;
    4580:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
    4584:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    4588:	00800074 	movhi	r2,1
    458c:	10879604 	addi	r2,r2,7768
    4590:	10800017 	ldw	r2,0(r2)
    4594:	10800c43 	ldbu	r2,49(r2)
    4598:	10803fcc 	andi	r2,r2,255
    459c:	10000226 	beq	r2,zero,45a8 <OSEventPendMulti+0x4a0>
    45a0:	108000a0 	cmpeqi	r2,r2,2
    45a4:	10001e26 	beq	r2,zero,4620 <OSEventPendMulti+0x518>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    45a8:	00800074 	movhi	r2,1
    45ac:	10879604 	addi	r2,r2,7768
    45b0:	10800017 	ldw	r2,0(r2)
    45b4:	10800717 	ldw	r2,28(r2)
    45b8:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    45bc:	e0bff017 	ldw	r2,-64(fp)
    45c0:	10000b26 	beq	r2,zero,45f0 <OSEventPendMulti+0x4e8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    45c4:	e0bffd17 	ldw	r2,-12(fp)
    45c8:	10c00104 	addi	r3,r2,4
    45cc:	e0fffd15 	stw	r3,-12(fp)
    45d0:	e0fff017 	ldw	r3,-64(fp)
    45d4:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    45d8:	e0bffd17 	ldw	r2,-12(fp)
    45dc:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    45e0:	e0bff18b 	ldhu	r2,-58(fp)
    45e4:	10800044 	addi	r2,r2,1
    45e8:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    45ec:	00001306 	br	463c <OSEventPendMulti+0x534>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    45f0:	00800074 	movhi	r2,1
    45f4:	10879604 	addi	r2,r2,7768
    45f8:	10800017 	ldw	r2,0(r2)
    45fc:	00c00044 	movi	r3,1
    4600:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    4604:	00800074 	movhi	r2,1
    4608:	10879604 	addi	r2,r2,7768
    460c:	10800017 	ldw	r2,0(r2)
    4610:	e17ffc17 	ldw	r5,-16(fp)
    4614:	1009883a 	mov	r4,r2
    4618:	00055900 	call	5590 <OS_EventTaskRemoveMulti>
             }
			 break;
    461c:	00000706 	br	463c <OSEventPendMulti+0x534>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    4620:	00800074 	movhi	r2,1
    4624:	10879604 	addi	r2,r2,7768
    4628:	10800017 	ldw	r2,0(r2)
    462c:	e17ffc17 	ldw	r5,-16(fp)
    4630:	1009883a 	mov	r4,r2
    4634:	00055900 	call	5590 <OS_EventTaskRemoveMulti>
             break;
    4638:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    463c:	00800074 	movhi	r2,1
    4640:	10879604 	addi	r2,r2,7768
    4644:	10800017 	ldw	r2,0(r2)
    4648:	10800c43 	ldbu	r2,49(r2)
    464c:	10803fcc 	andi	r2,r2,255
    4650:	10000326 	beq	r2,zero,4660 <OSEventPendMulti+0x558>
    4654:	108000a0 	cmpeqi	r2,r2,2
    4658:	1000251e 	bne	r2,zero,46f0 <OSEventPendMulti+0x5e8>
    465c:	00002c06 	br	4710 <OSEventPendMulti+0x608>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    4660:	e0bff017 	ldw	r2,-64(fp)
    4664:	10800003 	ldbu	r2,0(r2)
    4668:	10803fcc 	andi	r2,r2,255
    466c:	0080120e 	bge	zero,r2,46b8 <OSEventPendMulti+0x5b0>
    4670:	10c000d0 	cmplti	r3,r2,3
    4674:	1800071e 	bne	r3,zero,4694 <OSEventPendMulti+0x58c>
    4678:	108000e0 	cmpeqi	r2,r2,3
    467c:	10000e26 	beq	r2,zero,46b8 <OSEventPendMulti+0x5b0>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    4680:	e0bffe17 	ldw	r2,-8(fp)
    4684:	10c00104 	addi	r3,r2,4
    4688:	e0fffe15 	stw	r3,-8(fp)
    468c:	10000015 	stw	zero,0(r2)
                      break;
    4690:	00001406 	br	46e4 <OSEventPendMulti+0x5dc>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    4694:	e0fffe17 	ldw	r3,-8(fp)
    4698:	18800104 	addi	r2,r3,4
    469c:	e0bffe15 	stw	r2,-8(fp)
    46a0:	00800074 	movhi	r2,1
    46a4:	10879604 	addi	r2,r2,7768
    46a8:	10800017 	ldw	r2,0(r2)
    46ac:	10800917 	ldw	r2,36(r2)
    46b0:	18800015 	stw	r2,0(r3)
                      break;
    46b4:	00000b06 	br	46e4 <OSEventPendMulti+0x5dc>
    46b8:	e0bff317 	ldw	r2,-52(fp)
    46bc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    46c0:	e0bff817 	ldw	r2,-32(fp)
    46c4:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    46c8:	e0bffd17 	ldw	r2,-12(fp)
    46cc:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    46d0:	e0800217 	ldw	r2,8(fp)
    46d4:	00c00044 	movi	r3,1
    46d8:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    46dc:	e0bff18b 	ldhu	r2,-58(fp)
    46e0:	00002c06 	br	4794 <OSEventPendMulti+0x68c>
             }
            *perr = OS_ERR_NONE;
    46e4:	e0800217 	ldw	r2,8(fp)
    46e8:	10000005 	stb	zero,0(r2)
             break;
    46ec:	00001006 	br	4730 <OSEventPendMulti+0x628>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    46f0:	e0bffe17 	ldw	r2,-8(fp)
    46f4:	10c00104 	addi	r3,r2,4
    46f8:	e0fffe15 	stw	r3,-8(fp)
    46fc:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    4700:	e0800217 	ldw	r2,8(fp)
    4704:	00c00384 	movi	r3,14
    4708:	10c00005 	stb	r3,0(r2)
             break;
    470c:	00000806 	br	4730 <OSEventPendMulti+0x628>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    4710:	e0bffe17 	ldw	r2,-8(fp)
    4714:	10c00104 	addi	r3,r2,4
    4718:	e0fffe15 	stw	r3,-8(fp)
    471c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    4720:	e0800217 	ldw	r2,8(fp)
    4724:	00c00284 	movi	r3,10
    4728:	10c00005 	stb	r3,0(r2)
             break;
    472c:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    4730:	00800074 	movhi	r2,1
    4734:	10879604 	addi	r2,r2,7768
    4738:	10800017 	ldw	r2,0(r2)
    473c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    4740:	00800074 	movhi	r2,1
    4744:	10879604 	addi	r2,r2,7768
    4748:	10800017 	ldw	r2,0(r2)
    474c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    4750:	00800074 	movhi	r2,1
    4754:	10879604 	addi	r2,r2,7768
    4758:	10800017 	ldw	r2,0(r2)
    475c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    4760:	00800074 	movhi	r2,1
    4764:	10879604 	addi	r2,r2,7768
    4768:	10800017 	ldw	r2,0(r2)
    476c:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    4770:	00800074 	movhi	r2,1
    4774:	10879604 	addi	r2,r2,7768
    4778:	10800017 	ldw	r2,0(r2)
    477c:	10000915 	stw	zero,36(r2)
    4780:	e0bff317 	ldw	r2,-52(fp)
    4784:	e0bffa15 	stw	r2,-24(fp)
    4788:	e0bffa17 	ldw	r2,-24(fp)
    478c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    4790:	e0bff18b 	ldhu	r2,-58(fp)
}
    4794:	e037883a 	mov	sp,fp
    4798:	dfc00117 	ldw	ra,4(sp)
    479c:	df000017 	ldw	fp,0(sp)
    47a0:	dec00204 	addi	sp,sp,8
    47a4:	f800283a 	ret

000047a8 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    47a8:	defffe04 	addi	sp,sp,-8
    47ac:	dfc00115 	stw	ra,4(sp)
    47b0:	df000015 	stw	fp,0(sp)
    47b4:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    47b8:	000dea00 	call	dea0 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    47bc:	00057e00 	call	57e0 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    47c0:	00058780 	call	5878 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    47c4:	0005a100 	call	5a10 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    47c8:	00056f80 	call	56f8 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    47cc:	0007b100 	call	7b10 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    47d0:	00084640 	call	8464 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    47d4:	000969c0 	call	969c <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    47d8:	00059100 	call	5910 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    47dc:	00059900 	call	5990 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    47e0:	000dec00 	call	dec0 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    47e4:	00063c40 	call	63c4 <OSDebugInit>
#endif
}
    47e8:	0001883a 	nop
    47ec:	e037883a 	mov	sp,fp
    47f0:	dfc00117 	ldw	ra,4(sp)
    47f4:	df000017 	ldw	fp,0(sp)
    47f8:	dec00204 	addi	sp,sp,8
    47fc:	f800283a 	ret

00004800 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    4800:	defffc04 	addi	sp,sp,-16
    4804:	df000315 	stw	fp,12(sp)
    4808:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    480c:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
    4810:	00800074 	movhi	r2,1
    4814:	10878744 	addi	r2,r2,7709
    4818:	10800003 	ldbu	r2,0(r2)
    481c:	10803fcc 	andi	r2,r2,255
    4820:	10800058 	cmpnei	r2,r2,1
    4824:	10001a1e 	bne	r2,zero,4890 <OSIntEnter+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4828:	0005303a 	rdctl	r2,status
    482c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4830:	e0ffff17 	ldw	r3,-4(fp)
    4834:	00bfff84 	movi	r2,-2
    4838:	1884703a 	and	r2,r3,r2
    483c:	1001703a 	wrctl	status,r2
  
  return context;
    4840:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    4844:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
    4848:	00800074 	movhi	r2,1
    484c:	10879504 	addi	r2,r2,7764
    4850:	10800003 	ldbu	r2,0(r2)
    4854:	10803fcc 	andi	r2,r2,255
    4858:	10803fe0 	cmpeqi	r2,r2,255
    485c:	1000081e 	bne	r2,zero,4880 <OSIntEnter+0x80>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    4860:	00800074 	movhi	r2,1
    4864:	10879504 	addi	r2,r2,7764
    4868:	10800003 	ldbu	r2,0(r2)
    486c:	10800044 	addi	r2,r2,1
    4870:	1007883a 	mov	r3,r2
    4874:	00800074 	movhi	r2,1
    4878:	10879504 	addi	r2,r2,7764
    487c:	10c00005 	stb	r3,0(r2)
    4880:	e0bffd17 	ldw	r2,-12(fp)
    4884:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4888:	e0bffe17 	ldw	r2,-8(fp)
    488c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
    4890:	0001883a 	nop
    4894:	e037883a 	mov	sp,fp
    4898:	df000017 	ldw	fp,0(sp)
    489c:	dec00104 	addi	sp,sp,4
    48a0:	f800283a 	ret

000048a4 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    48a4:	defffb04 	addi	sp,sp,-20
    48a8:	dfc00415 	stw	ra,16(sp)
    48ac:	df000315 	stw	fp,12(sp)
    48b0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    48b4:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
    48b8:	00800074 	movhi	r2,1
    48bc:	10878744 	addi	r2,r2,7709
    48c0:	10800003 	ldbu	r2,0(r2)
    48c4:	10803fcc 	andi	r2,r2,255
    48c8:	10800058 	cmpnei	r2,r2,1
    48cc:	1000481e 	bne	r2,zero,49f0 <OSIntExit+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    48d0:	0005303a 	rdctl	r2,status
    48d4:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    48d8:	e0ffff17 	ldw	r3,-4(fp)
    48dc:	00bfff84 	movi	r2,-2
    48e0:	1884703a 	and	r2,r3,r2
    48e4:	1001703a 	wrctl	status,r2
  
  return context;
    48e8:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    48ec:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    48f0:	00800074 	movhi	r2,1
    48f4:	10879504 	addi	r2,r2,7764
    48f8:	10800003 	ldbu	r2,0(r2)
    48fc:	10803fcc 	andi	r2,r2,255
    4900:	10000826 	beq	r2,zero,4924 <OSIntExit+0x80>
            OSIntNesting--;
    4904:	00800074 	movhi	r2,1
    4908:	10879504 	addi	r2,r2,7764
    490c:	10800003 	ldbu	r2,0(r2)
    4910:	10bfffc4 	addi	r2,r2,-1
    4914:	1007883a 	mov	r3,r2
    4918:	00800074 	movhi	r2,1
    491c:	10879504 	addi	r2,r2,7764
    4920:	10c00005 	stb	r3,0(r2)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    4924:	00800074 	movhi	r2,1
    4928:	10879504 	addi	r2,r2,7764
    492c:	10800003 	ldbu	r2,0(r2)
    4930:	10803fcc 	andi	r2,r2,255
    4934:	10002a1e 	bne	r2,zero,49e0 <OSIntExit+0x13c>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    4938:	00800074 	movhi	r2,1
    493c:	10878704 	addi	r2,r2,7708
    4940:	10800003 	ldbu	r2,0(r2)
    4944:	10803fcc 	andi	r2,r2,255
    4948:	1000251e 	bne	r2,zero,49e0 <OSIntExit+0x13c>
                OS_SchedNew();
    494c:	0005cd80 	call	5cd8 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    4950:	00800074 	movhi	r2,1
    4954:	10878904 	addi	r2,r2,7716
    4958:	10c00003 	ldbu	r3,0(r2)
    495c:	00800074 	movhi	r2,1
    4960:	10878944 	addi	r2,r2,7717
    4964:	10800003 	ldbu	r2,0(r2)
    4968:	18c03fcc 	andi	r3,r3,255
    496c:	10803fcc 	andi	r2,r2,255
    4970:	18801b26 	beq	r3,r2,49e0 <OSIntExit+0x13c>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    4974:	00800074 	movhi	r2,1
    4978:	10878904 	addi	r2,r2,7716
    497c:	10800003 	ldbu	r2,0(r2)
    4980:	10c03fcc 	andi	r3,r2,255
    4984:	008000b4 	movhi	r2,2
    4988:	10a41d04 	addi	r2,r2,-28556
    498c:	18c7883a 	add	r3,r3,r3
    4990:	18c7883a 	add	r3,r3,r3
    4994:	10c5883a 	add	r2,r2,r3
    4998:	10c00017 	ldw	r3,0(r2)
    499c:	00800074 	movhi	r2,1
    49a0:	10879104 	addi	r2,r2,7748
    49a4:	10c00015 	stw	r3,0(r2)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    49a8:	00800074 	movhi	r2,1
    49ac:	10879104 	addi	r2,r2,7748
    49b0:	10800017 	ldw	r2,0(r2)
    49b4:	10c00e17 	ldw	r3,56(r2)
    49b8:	18c00044 	addi	r3,r3,1
    49bc:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    49c0:	00800074 	movhi	r2,1
    49c4:	10878c04 	addi	r2,r2,7728
    49c8:	10800017 	ldw	r2,0(r2)
    49cc:	10c00044 	addi	r3,r2,1
    49d0:	00800074 	movhi	r2,1
    49d4:	10878c04 	addi	r2,r2,7728
    49d8:	10c00015 	stw	r3,0(r2)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    49dc:	000dbcc0 	call	dbcc <OSCtxSw>
    49e0:	e0bffd17 	ldw	r2,-12(fp)
    49e4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    49e8:	e0bffe17 	ldw	r2,-8(fp)
    49ec:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    49f0:	0001883a 	nop
    49f4:	e037883a 	mov	sp,fp
    49f8:	dfc00117 	ldw	ra,4(sp)
    49fc:	df000017 	ldw	fp,0(sp)
    4a00:	dec00204 	addi	sp,sp,8
    4a04:	f800283a 	ret

00004a08 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    4a08:	defffc04 	addi	sp,sp,-16
    4a0c:	df000315 	stw	fp,12(sp)
    4a10:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4a14:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    4a18:	00800074 	movhi	r2,1
    4a1c:	10878744 	addi	r2,r2,7709
    4a20:	10800003 	ldbu	r2,0(r2)
    4a24:	10803fcc 	andi	r2,r2,255
    4a28:	10800058 	cmpnei	r2,r2,1
    4a2c:	10001f1e 	bne	r2,zero,4aac <OSSchedLock+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4a30:	0005303a 	rdctl	r2,status
    4a34:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4a38:	e0ffff17 	ldw	r3,-4(fp)
    4a3c:	00bfff84 	movi	r2,-2
    4a40:	1884703a 	and	r2,r3,r2
    4a44:	1001703a 	wrctl	status,r2
  
  return context;
    4a48:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    4a4c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    4a50:	00800074 	movhi	r2,1
    4a54:	10879504 	addi	r2,r2,7764
    4a58:	10800003 	ldbu	r2,0(r2)
    4a5c:	10803fcc 	andi	r2,r2,255
    4a60:	10000e1e 	bne	r2,zero,4a9c <OSSchedLock+0x94>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    4a64:	00800074 	movhi	r2,1
    4a68:	10878704 	addi	r2,r2,7708
    4a6c:	10800003 	ldbu	r2,0(r2)
    4a70:	10803fcc 	andi	r2,r2,255
    4a74:	10803fe0 	cmpeqi	r2,r2,255
    4a78:	1000081e 	bne	r2,zero,4a9c <OSSchedLock+0x94>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    4a7c:	00800074 	movhi	r2,1
    4a80:	10878704 	addi	r2,r2,7708
    4a84:	10800003 	ldbu	r2,0(r2)
    4a88:	10800044 	addi	r2,r2,1
    4a8c:	1007883a 	mov	r3,r2
    4a90:	00800074 	movhi	r2,1
    4a94:	10878704 	addi	r2,r2,7708
    4a98:	10c00005 	stb	r3,0(r2)
    4a9c:	e0bffd17 	ldw	r2,-12(fp)
    4aa0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4aa4:	e0bffe17 	ldw	r2,-8(fp)
    4aa8:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    4aac:	0001883a 	nop
    4ab0:	e037883a 	mov	sp,fp
    4ab4:	df000017 	ldw	fp,0(sp)
    4ab8:	dec00104 	addi	sp,sp,4
    4abc:	f800283a 	ret

00004ac0 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    4ac0:	defff804 	addi	sp,sp,-32
    4ac4:	dfc00715 	stw	ra,28(sp)
    4ac8:	df000615 	stw	fp,24(sp)
    4acc:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    4ad0:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    4ad4:	00800074 	movhi	r2,1
    4ad8:	10878744 	addi	r2,r2,7709
    4adc:	10800003 	ldbu	r2,0(r2)
    4ae0:	10803fcc 	andi	r2,r2,255
    4ae4:	10800058 	cmpnei	r2,r2,1
    4ae8:	1000331e 	bne	r2,zero,4bb8 <OSSchedUnlock+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4aec:	0005303a 	rdctl	r2,status
    4af0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4af4:	e0ffff17 	ldw	r3,-4(fp)
    4af8:	00bfff84 	movi	r2,-2
    4afc:	1884703a 	and	r2,r3,r2
    4b00:	1001703a 	wrctl	status,r2
  
  return context;
    4b04:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    4b08:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    4b0c:	00800074 	movhi	r2,1
    4b10:	10878704 	addi	r2,r2,7708
    4b14:	10800003 	ldbu	r2,0(r2)
    4b18:	10803fcc 	andi	r2,r2,255
    4b1c:	10002226 	beq	r2,zero,4ba8 <OSSchedUnlock+0xe8>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    4b20:	00800074 	movhi	r2,1
    4b24:	10878704 	addi	r2,r2,7708
    4b28:	10800003 	ldbu	r2,0(r2)
    4b2c:	10bfffc4 	addi	r2,r2,-1
    4b30:	1007883a 	mov	r3,r2
    4b34:	00800074 	movhi	r2,1
    4b38:	10878704 	addi	r2,r2,7708
    4b3c:	10c00005 	stb	r3,0(r2)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    4b40:	00800074 	movhi	r2,1
    4b44:	10878704 	addi	r2,r2,7708
    4b48:	10800003 	ldbu	r2,0(r2)
    4b4c:	10803fcc 	andi	r2,r2,255
    4b50:	1000101e 	bne	r2,zero,4b94 <OSSchedUnlock+0xd4>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    4b54:	00800074 	movhi	r2,1
    4b58:	10879504 	addi	r2,r2,7764
    4b5c:	10800003 	ldbu	r2,0(r2)
    4b60:	10803fcc 	andi	r2,r2,255
    4b64:	1000061e 	bne	r2,zero,4b80 <OSSchedUnlock+0xc0>
    4b68:	e0bffa17 	ldw	r2,-24(fp)
    4b6c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4b70:	e0bffb17 	ldw	r2,-20(fp)
    4b74:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    4b78:	0005bc00 	call	5bc0 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    4b7c:	00000e06 	br	4bb8 <OSSchedUnlock+0xf8>
    4b80:	e0bffa17 	ldw	r2,-24(fp)
    4b84:	e0bffc15 	stw	r2,-16(fp)
    4b88:	e0bffc17 	ldw	r2,-16(fp)
    4b8c:	1001703a 	wrctl	status,r2
    4b90:	00000906 	br	4bb8 <OSSchedUnlock+0xf8>
    4b94:	e0bffa17 	ldw	r2,-24(fp)
    4b98:	e0bffd15 	stw	r2,-12(fp)
    4b9c:	e0bffd17 	ldw	r2,-12(fp)
    4ba0:	1001703a 	wrctl	status,r2
    4ba4:	00000406 	br	4bb8 <OSSchedUnlock+0xf8>
    4ba8:	e0bffa17 	ldw	r2,-24(fp)
    4bac:	e0bffe15 	stw	r2,-8(fp)
    4bb0:	e0bffe17 	ldw	r2,-8(fp)
    4bb4:	1001703a 	wrctl	status,r2
    4bb8:	0001883a 	nop
    4bbc:	e037883a 	mov	sp,fp
    4bc0:	dfc00117 	ldw	ra,4(sp)
    4bc4:	df000017 	ldw	fp,0(sp)
    4bc8:	dec00204 	addi	sp,sp,8
    4bcc:	f800283a 	ret

00004bd0 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    4bd0:	defffe04 	addi	sp,sp,-8
    4bd4:	dfc00115 	stw	ra,4(sp)
    4bd8:	df000015 	stw	fp,0(sp)
    4bdc:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    4be0:	00800074 	movhi	r2,1
    4be4:	10878744 	addi	r2,r2,7709
    4be8:	10800003 	ldbu	r2,0(r2)
    4bec:	10803fcc 	andi	r2,r2,255
    4bf0:	10001b1e 	bne	r2,zero,4c60 <OSStart+0x90>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    4bf4:	0005cd80 	call	5cd8 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    4bf8:	00800074 	movhi	r2,1
    4bfc:	10878904 	addi	r2,r2,7716
    4c00:	10c00003 	ldbu	r3,0(r2)
    4c04:	00800074 	movhi	r2,1
    4c08:	10878944 	addi	r2,r2,7717
    4c0c:	10c00005 	stb	r3,0(r2)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    4c10:	00800074 	movhi	r2,1
    4c14:	10878904 	addi	r2,r2,7716
    4c18:	10800003 	ldbu	r2,0(r2)
    4c1c:	10c03fcc 	andi	r3,r2,255
    4c20:	008000b4 	movhi	r2,2
    4c24:	10a41d04 	addi	r2,r2,-28556
    4c28:	18c7883a 	add	r3,r3,r3
    4c2c:	18c7883a 	add	r3,r3,r3
    4c30:	10c5883a 	add	r2,r2,r3
    4c34:	10c00017 	ldw	r3,0(r2)
    4c38:	00800074 	movhi	r2,1
    4c3c:	10879104 	addi	r2,r2,7748
    4c40:	10c00015 	stw	r3,0(r2)
        OSTCBCur      = OSTCBHighRdy;
    4c44:	00800074 	movhi	r2,1
    4c48:	10879104 	addi	r2,r2,7748
    4c4c:	10c00017 	ldw	r3,0(r2)
    4c50:	00800074 	movhi	r2,1
    4c54:	10879604 	addi	r2,r2,7768
    4c58:	10c00015 	stw	r3,0(r2)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    4c5c:	000dc580 	call	dc58 <OSStartHighRdy>
    }
}
    4c60:	0001883a 	nop
    4c64:	e037883a 	mov	sp,fp
    4c68:	dfc00117 	ldw	ra,4(sp)
    4c6c:	df000017 	ldw	fp,0(sp)
    4c70:	dec00204 	addi	sp,sp,8
    4c74:	f800283a 	ret

00004c78 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    4c78:	defff904 	addi	sp,sp,-28
    4c7c:	dfc00615 	stw	ra,24(sp)
    4c80:	df000515 	stw	fp,20(sp)
    4c84:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4c88:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    4c8c:	01000084 	movi	r4,2
    4c90:	000bb600 	call	bb60 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4c94:	0005303a 	rdctl	r2,status
    4c98:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4c9c:	e0fffc17 	ldw	r3,-16(fp)
    4ca0:	00bfff84 	movi	r2,-2
    4ca4:	1884703a 	and	r2,r3,r2
    4ca8:	1001703a 	wrctl	status,r2
  
  return context;
    4cac:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    4cb0:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    4cb4:	00800074 	movhi	r2,1
    4cb8:	10878804 	addi	r2,r2,7712
    4cbc:	10000015 	stw	zero,0(r2)
    4cc0:	e0bffb17 	ldw	r2,-20(fp)
    4cc4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4cc8:	e0bffd17 	ldw	r2,-12(fp)
    4ccc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    4cd0:	01001904 	movi	r4,100
    4cd4:	000bb600 	call	bb60 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4cd8:	0005303a 	rdctl	r2,status
    4cdc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4ce0:	e0fffe17 	ldw	r3,-8(fp)
    4ce4:	00bfff84 	movi	r2,-2
    4ce8:	1884703a 	and	r2,r3,r2
    4cec:	1001703a 	wrctl	status,r2
  
  return context;
    4cf0:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    4cf4:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    4cf8:	00800074 	movhi	r2,1
    4cfc:	10878804 	addi	r2,r2,7712
    4d00:	10c00017 	ldw	r3,0(r2)
    4d04:	00800074 	movhi	r2,1
    4d08:	10878d04 	addi	r2,r2,7732
    4d0c:	10c00015 	stw	r3,0(r2)
    OSStatRdy    = OS_TRUE;
    4d10:	00800074 	movhi	r2,1
    4d14:	10879904 	addi	r2,r2,7780
    4d18:	00c00044 	movi	r3,1
    4d1c:	10c00005 	stb	r3,0(r2)
    4d20:	e0bffb17 	ldw	r2,-20(fp)
    4d24:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4d28:	e0bfff17 	ldw	r2,-4(fp)
    4d2c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    4d30:	0001883a 	nop
    4d34:	e037883a 	mov	sp,fp
    4d38:	dfc00117 	ldw	ra,4(sp)
    4d3c:	df000017 	ldw	fp,0(sp)
    4d40:	dec00204 	addi	sp,sp,8
    4d44:	f800283a 	ret

00004d48 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    4d48:	defff704 	addi	sp,sp,-36
    4d4c:	dfc00815 	stw	ra,32(sp)
    4d50:	df000715 	stw	fp,28(sp)
    4d54:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    4d58:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    4d5c:	000de800 	call	de80 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4d60:	0005303a 	rdctl	r2,status
    4d64:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4d68:	e0fffd17 	ldw	r3,-12(fp)
    4d6c:	00bfff84 	movi	r2,-2
    4d70:	1884703a 	and	r2,r3,r2
    4d74:	1001703a 	wrctl	status,r2
  
  return context;
    4d78:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    4d7c:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
    4d80:	00800074 	movhi	r2,1
    4d84:	10879704 	addi	r2,r2,7772
    4d88:	10800017 	ldw	r2,0(r2)
    4d8c:	10c00044 	addi	r3,r2,1
    4d90:	00800074 	movhi	r2,1
    4d94:	10879704 	addi	r2,r2,7772
    4d98:	10c00015 	stw	r3,0(r2)
    4d9c:	e0bffb17 	ldw	r2,-20(fp)
    4da0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4da4:	e0bfff17 	ldw	r2,-4(fp)
    4da8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    4dac:	00800074 	movhi	r2,1
    4db0:	10878744 	addi	r2,r2,7709
    4db4:	10800003 	ldbu	r2,0(r2)
    4db8:	10803fcc 	andi	r2,r2,255
    4dbc:	10800058 	cmpnei	r2,r2,1
    4dc0:	1000791e 	bne	r2,zero,4fa8 <OSTimeTick+0x260>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    4dc4:	00800074 	movhi	r2,1
    4dc8:	10878b04 	addi	r2,r2,7724
    4dcc:	10800003 	ldbu	r2,0(r2)
    4dd0:	10803fcc 	andi	r2,r2,255
    4dd4:	10c00060 	cmpeqi	r3,r2,1
    4dd8:	1800061e 	bne	r3,zero,4df4 <OSTimeTick+0xac>
    4ddc:	10c000a0 	cmpeqi	r3,r2,2
    4de0:	1800061e 	bne	r3,zero,4dfc <OSTimeTick+0xb4>
    4de4:	10000c1e 	bne	r2,zero,4e18 <OSTimeTick+0xd0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    4de8:	00800044 	movi	r2,1
    4dec:	e0bffa05 	stb	r2,-24(fp)
                 break;
    4df0:	00000f06 	br	4e30 <OSTimeTick+0xe8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    4df4:	e03ffa05 	stb	zero,-24(fp)
                 break;
    4df8:	00000d06 	br	4e30 <OSTimeTick+0xe8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    4dfc:	00800044 	movi	r2,1
    4e00:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    4e04:	00800074 	movhi	r2,1
    4e08:	10878b04 	addi	r2,r2,7724
    4e0c:	00c00044 	movi	r3,1
    4e10:	10c00005 	stb	r3,0(r2)
                 break;
    4e14:	00000606 	br	4e30 <OSTimeTick+0xe8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    4e18:	00800044 	movi	r2,1
    4e1c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    4e20:	00800074 	movhi	r2,1
    4e24:	10878b04 	addi	r2,r2,7724
    4e28:	10000005 	stb	zero,0(r2)
                 break;
    4e2c:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    4e30:	e0bffa03 	ldbu	r2,-24(fp)
    4e34:	10005b26 	beq	r2,zero,4fa4 <OSTimeTick+0x25c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    4e38:	00800074 	movhi	r2,1
    4e3c:	10878a04 	addi	r2,r2,7720
    4e40:	10800017 	ldw	r2,0(r2)
    4e44:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    4e48:	00005006 	br	4f8c <OSTimeTick+0x244>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4e4c:	0005303a 	rdctl	r2,status
    4e50:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4e54:	e0fffc17 	ldw	r3,-16(fp)
    4e58:	00bfff84 	movi	r2,-2
    4e5c:	1884703a 	and	r2,r3,r2
    4e60:	1001703a 	wrctl	status,r2
  
  return context;
    4e64:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
    4e68:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    4e6c:	e0bff917 	ldw	r2,-28(fp)
    4e70:	10800b8b 	ldhu	r2,46(r2)
    4e74:	10bfffcc 	andi	r2,r2,65535
    4e78:	10003d26 	beq	r2,zero,4f70 <OSTimeTick+0x228>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    4e7c:	e0bff917 	ldw	r2,-28(fp)
    4e80:	10800b8b 	ldhu	r2,46(r2)
    4e84:	10bfffc4 	addi	r2,r2,-1
    4e88:	1007883a 	mov	r3,r2
    4e8c:	e0bff917 	ldw	r2,-28(fp)
    4e90:	10c00b8d 	sth	r3,46(r2)
    4e94:	e0bff917 	ldw	r2,-28(fp)
    4e98:	10800b8b 	ldhu	r2,46(r2)
    4e9c:	10bfffcc 	andi	r2,r2,65535
    4ea0:	1000331e 	bne	r2,zero,4f70 <OSTimeTick+0x228>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    4ea4:	e0bff917 	ldw	r2,-28(fp)
    4ea8:	10800c03 	ldbu	r2,48(r2)
    4eac:	10803fcc 	andi	r2,r2,255
    4eb0:	10800dcc 	andi	r2,r2,55
    4eb4:	10000b26 	beq	r2,zero,4ee4 <OSTimeTick+0x19c>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    4eb8:	e0bff917 	ldw	r2,-28(fp)
    4ebc:	10c00c03 	ldbu	r3,48(r2)
    4ec0:	00bff204 	movi	r2,-56
    4ec4:	1884703a 	and	r2,r3,r2
    4ec8:	1007883a 	mov	r3,r2
    4ecc:	e0bff917 	ldw	r2,-28(fp)
    4ed0:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    4ed4:	e0bff917 	ldw	r2,-28(fp)
    4ed8:	00c00044 	movi	r3,1
    4edc:	10c00c45 	stb	r3,49(r2)
    4ee0:	00000206 	br	4eec <OSTimeTick+0x1a4>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    4ee4:	e0bff917 	ldw	r2,-28(fp)
    4ee8:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    4eec:	e0bff917 	ldw	r2,-28(fp)
    4ef0:	10800c03 	ldbu	r2,48(r2)
    4ef4:	10803fcc 	andi	r2,r2,255
    4ef8:	1080020c 	andi	r2,r2,8
    4efc:	10001c1e 	bne	r2,zero,4f70 <OSTimeTick+0x228>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    4f00:	e0bff917 	ldw	r2,-28(fp)
    4f04:	10c00d83 	ldbu	r3,54(r2)
    4f08:	00800074 	movhi	r2,1
    4f0c:	10879304 	addi	r2,r2,7756
    4f10:	10800003 	ldbu	r2,0(r2)
    4f14:	1884b03a 	or	r2,r3,r2
    4f18:	1007883a 	mov	r3,r2
    4f1c:	00800074 	movhi	r2,1
    4f20:	10879304 	addi	r2,r2,7756
    4f24:	10c00005 	stb	r3,0(r2)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    4f28:	e0bff917 	ldw	r2,-28(fp)
    4f2c:	10800d03 	ldbu	r2,52(r2)
    4f30:	10c03fcc 	andi	r3,r2,255
    4f34:	e0bff917 	ldw	r2,-28(fp)
    4f38:	10800d03 	ldbu	r2,52(r2)
    4f3c:	11003fcc 	andi	r4,r2,255
    4f40:	00800074 	movhi	r2,1
    4f44:	10879344 	addi	r2,r2,7757
    4f48:	1105883a 	add	r2,r2,r4
    4f4c:	11000003 	ldbu	r4,0(r2)
    4f50:	e0bff917 	ldw	r2,-28(fp)
    4f54:	10800d43 	ldbu	r2,53(r2)
    4f58:	2084b03a 	or	r2,r4,r2
    4f5c:	1009883a 	mov	r4,r2
    4f60:	00800074 	movhi	r2,1
    4f64:	10879344 	addi	r2,r2,7757
    4f68:	10c5883a 	add	r2,r2,r3
    4f6c:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    4f70:	e0bff917 	ldw	r2,-28(fp)
    4f74:	10800517 	ldw	r2,20(r2)
    4f78:	e0bff915 	stw	r2,-28(fp)
    4f7c:	e0bffb17 	ldw	r2,-20(fp)
    4f80:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4f84:	e0bffe17 	ldw	r2,-8(fp)
    4f88:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    4f8c:	e0bff917 	ldw	r2,-28(fp)
    4f90:	10800c83 	ldbu	r2,50(r2)
    4f94:	10803fcc 	andi	r2,r2,255
    4f98:	10800518 	cmpnei	r2,r2,20
    4f9c:	103fab1e 	bne	r2,zero,4e4c <OSTimeTick+0x104>
    4fa0:	00000106 	br	4fa8 <OSTimeTick+0x260>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
    4fa4:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    4fa8:	e037883a 	mov	sp,fp
    4fac:	dfc00117 	ldw	ra,4(sp)
    4fb0:	df000017 	ldw	fp,0(sp)
    4fb4:	dec00204 	addi	sp,sp,8
    4fb8:	f800283a 	ret

00004fbc <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    4fbc:	deffff04 	addi	sp,sp,-4
    4fc0:	df000015 	stw	fp,0(sp)
    4fc4:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    4fc8:	00804784 	movi	r2,286
}
    4fcc:	e037883a 	mov	sp,fp
    4fd0:	df000017 	ldw	fp,0(sp)
    4fd4:	dec00104 	addi	sp,sp,4
    4fd8:	f800283a 	ret

00004fdc <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    4fdc:	deffff04 	addi	sp,sp,-4
    4fe0:	df000015 	stw	fp,0(sp)
    4fe4:	d839883a 	mov	fp,sp
}
    4fe8:	0001883a 	nop
    4fec:	e037883a 	mov	sp,fp
    4ff0:	df000017 	ldw	fp,0(sp)
    4ff4:	dec00104 	addi	sp,sp,4
    4ff8:	f800283a 	ret

00004ffc <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    4ffc:	defff804 	addi	sp,sp,-32
    5000:	dfc00715 	stw	ra,28(sp)
    5004:	df000615 	stw	fp,24(sp)
    5008:	df000604 	addi	fp,sp,24
    500c:	e13ffc15 	stw	r4,-16(fp)
    5010:	e17ffd15 	stw	r5,-12(fp)
    5014:	3007883a 	mov	r3,r6
    5018:	3805883a 	mov	r2,r7
    501c:	e0fffe05 	stb	r3,-8(fp)
    5020:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    5024:	e0bffc17 	ldw	r2,-16(fp)
    5028:	10800283 	ldbu	r2,10(r2)
    502c:	10c03fcc 	andi	r3,r2,255
    5030:	00800074 	movhi	r2,1
    5034:	10b9b504 	addi	r2,r2,-6444
    5038:	10c5883a 	add	r2,r2,r3
    503c:	10800003 	ldbu	r2,0(r2)
    5040:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    5044:	e0bffa03 	ldbu	r2,-24(fp)
    5048:	e0fffc17 	ldw	r3,-16(fp)
    504c:	1885883a 	add	r2,r3,r2
    5050:	108002c4 	addi	r2,r2,11
    5054:	10800003 	ldbu	r2,0(r2)
    5058:	10c03fcc 	andi	r3,r2,255
    505c:	00800074 	movhi	r2,1
    5060:	10b9b504 	addi	r2,r2,-6444
    5064:	10c5883a 	add	r2,r2,r3
    5068:	10800003 	ldbu	r2,0(r2)
    506c:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    5070:	e0bffa03 	ldbu	r2,-24(fp)
    5074:	100490fa 	slli	r2,r2,3
    5078:	1007883a 	mov	r3,r2
    507c:	e0bffa43 	ldbu	r2,-23(fp)
    5080:	1885883a 	add	r2,r3,r2
    5084:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    5088:	e0fffa83 	ldbu	r3,-22(fp)
    508c:	008000b4 	movhi	r2,2
    5090:	10a41d04 	addi	r2,r2,-28556
    5094:	18c7883a 	add	r3,r3,r3
    5098:	18c7883a 	add	r3,r3,r3
    509c:	10c5883a 	add	r2,r2,r3
    50a0:	10800017 	ldw	r2,0(r2)
    50a4:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    50a8:	e0bffb17 	ldw	r2,-20(fp)
    50ac:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    50b0:	e0bffb17 	ldw	r2,-20(fp)
    50b4:	e0fffd17 	ldw	r3,-12(fp)
    50b8:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    50bc:	e0bffb17 	ldw	r2,-20(fp)
    50c0:	10800c03 	ldbu	r2,48(r2)
    50c4:	1007883a 	mov	r3,r2
    50c8:	e0bffe03 	ldbu	r2,-8(fp)
    50cc:	0084303a 	nor	r2,zero,r2
    50d0:	1884703a 	and	r2,r3,r2
    50d4:	1007883a 	mov	r3,r2
    50d8:	e0bffb17 	ldw	r2,-20(fp)
    50dc:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    50e0:	e0bffb17 	ldw	r2,-20(fp)
    50e4:	e0ffff03 	ldbu	r3,-4(fp)
    50e8:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    50ec:	e0bffb17 	ldw	r2,-20(fp)
    50f0:	10800c03 	ldbu	r2,48(r2)
    50f4:	10803fcc 	andi	r2,r2,255
    50f8:	1080020c 	andi	r2,r2,8
    50fc:	1000181e 	bne	r2,zero,5160 <OS_EventTaskRdy+0x164>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    5100:	e0bffb17 	ldw	r2,-20(fp)
    5104:	10c00d83 	ldbu	r3,54(r2)
    5108:	00800074 	movhi	r2,1
    510c:	10879304 	addi	r2,r2,7756
    5110:	10800003 	ldbu	r2,0(r2)
    5114:	1884b03a 	or	r2,r3,r2
    5118:	1007883a 	mov	r3,r2
    511c:	00800074 	movhi	r2,1
    5120:	10879304 	addi	r2,r2,7756
    5124:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    5128:	e0fffa03 	ldbu	r3,-24(fp)
    512c:	e13ffa03 	ldbu	r4,-24(fp)
    5130:	00800074 	movhi	r2,1
    5134:	10879344 	addi	r2,r2,7757
    5138:	1105883a 	add	r2,r2,r4
    513c:	11000003 	ldbu	r4,0(r2)
    5140:	e0bffb17 	ldw	r2,-20(fp)
    5144:	10800d43 	ldbu	r2,53(r2)
    5148:	2084b03a 	or	r2,r4,r2
    514c:	1009883a 	mov	r4,r2
    5150:	00800074 	movhi	r2,1
    5154:	10879344 	addi	r2,r2,7757
    5158:	10c5883a 	add	r2,r2,r3
    515c:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    5160:	e17ffc17 	ldw	r5,-16(fp)
    5164:	e13ffb17 	ldw	r4,-20(fp)
    5168:	00054d80 	call	54d8 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    516c:	e0bffb17 	ldw	r2,-20(fp)
    5170:	10800817 	ldw	r2,32(r2)
    5174:	10000826 	beq	r2,zero,5198 <OS_EventTaskRdy+0x19c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    5178:	e0bffb17 	ldw	r2,-20(fp)
    517c:	10800817 	ldw	r2,32(r2)
    5180:	100b883a 	mov	r5,r2
    5184:	e13ffb17 	ldw	r4,-20(fp)
    5188:	00055900 	call	5590 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    518c:	e0bffb17 	ldw	r2,-20(fp)
    5190:	e0fffc17 	ldw	r3,-16(fp)
    5194:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
    5198:	e0bffa83 	ldbu	r2,-22(fp)
}
    519c:	e037883a 	mov	sp,fp
    51a0:	dfc00117 	ldw	ra,4(sp)
    51a4:	df000017 	ldw	fp,0(sp)
    51a8:	dec00204 	addi	sp,sp,8
    51ac:	f800283a 	ret

000051b0 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    51b0:	defffd04 	addi	sp,sp,-12
    51b4:	df000215 	stw	fp,8(sp)
    51b8:	df000204 	addi	fp,sp,8
    51bc:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    51c0:	00800074 	movhi	r2,1
    51c4:	10879604 	addi	r2,r2,7768
    51c8:	10800017 	ldw	r2,0(r2)
    51cc:	e0ffff17 	ldw	r3,-4(fp)
    51d0:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    51d4:	00800074 	movhi	r2,1
    51d8:	10879604 	addi	r2,r2,7768
    51dc:	10800017 	ldw	r2,0(r2)
    51e0:	10800d03 	ldbu	r2,52(r2)
    51e4:	10c03fcc 	andi	r3,r2,255
    51e8:	00800074 	movhi	r2,1
    51ec:	10879604 	addi	r2,r2,7768
    51f0:	10800017 	ldw	r2,0(r2)
    51f4:	10800d03 	ldbu	r2,52(r2)
    51f8:	10803fcc 	andi	r2,r2,255
    51fc:	e13fff17 	ldw	r4,-4(fp)
    5200:	2085883a 	add	r2,r4,r2
    5204:	108002c4 	addi	r2,r2,11
    5208:	11000003 	ldbu	r4,0(r2)
    520c:	00800074 	movhi	r2,1
    5210:	10879604 	addi	r2,r2,7768
    5214:	10800017 	ldw	r2,0(r2)
    5218:	10800d43 	ldbu	r2,53(r2)
    521c:	2084b03a 	or	r2,r4,r2
    5220:	1009883a 	mov	r4,r2
    5224:	e0bfff17 	ldw	r2,-4(fp)
    5228:	10c5883a 	add	r2,r2,r3
    522c:	108002c4 	addi	r2,r2,11
    5230:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    5234:	e0bfff17 	ldw	r2,-4(fp)
    5238:	10c00283 	ldbu	r3,10(r2)
    523c:	00800074 	movhi	r2,1
    5240:	10879604 	addi	r2,r2,7768
    5244:	10800017 	ldw	r2,0(r2)
    5248:	10800d83 	ldbu	r2,54(r2)
    524c:	1884b03a 	or	r2,r3,r2
    5250:	1007883a 	mov	r3,r2
    5254:	e0bfff17 	ldw	r2,-4(fp)
    5258:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    525c:	00800074 	movhi	r2,1
    5260:	10879604 	addi	r2,r2,7768
    5264:	10800017 	ldw	r2,0(r2)
    5268:	10800d03 	ldbu	r2,52(r2)
    526c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    5270:	e0fffe03 	ldbu	r3,-8(fp)
    5274:	e13ffe03 	ldbu	r4,-8(fp)
    5278:	00800074 	movhi	r2,1
    527c:	10879344 	addi	r2,r2,7757
    5280:	1105883a 	add	r2,r2,r4
    5284:	10800003 	ldbu	r2,0(r2)
    5288:	1009883a 	mov	r4,r2
    528c:	00800074 	movhi	r2,1
    5290:	10879604 	addi	r2,r2,7768
    5294:	10800017 	ldw	r2,0(r2)
    5298:	10800d43 	ldbu	r2,53(r2)
    529c:	0084303a 	nor	r2,zero,r2
    52a0:	2084703a 	and	r2,r4,r2
    52a4:	1009883a 	mov	r4,r2
    52a8:	00800074 	movhi	r2,1
    52ac:	10879344 	addi	r2,r2,7757
    52b0:	10c5883a 	add	r2,r2,r3
    52b4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    52b8:	e0fffe03 	ldbu	r3,-8(fp)
    52bc:	00800074 	movhi	r2,1
    52c0:	10879344 	addi	r2,r2,7757
    52c4:	10c5883a 	add	r2,r2,r3
    52c8:	10800003 	ldbu	r2,0(r2)
    52cc:	10803fcc 	andi	r2,r2,255
    52d0:	10000e1e 	bne	r2,zero,530c <OS_EventTaskWait+0x15c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    52d4:	00800074 	movhi	r2,1
    52d8:	10879604 	addi	r2,r2,7768
    52dc:	10800017 	ldw	r2,0(r2)
    52e0:	10800d83 	ldbu	r2,54(r2)
    52e4:	0084303a 	nor	r2,zero,r2
    52e8:	1007883a 	mov	r3,r2
    52ec:	00800074 	movhi	r2,1
    52f0:	10879304 	addi	r2,r2,7756
    52f4:	10800003 	ldbu	r2,0(r2)
    52f8:	1884703a 	and	r2,r3,r2
    52fc:	1007883a 	mov	r3,r2
    5300:	00800074 	movhi	r2,1
    5304:	10879304 	addi	r2,r2,7756
    5308:	10c00005 	stb	r3,0(r2)
    }
}
    530c:	0001883a 	nop
    5310:	e037883a 	mov	sp,fp
    5314:	df000017 	ldw	fp,0(sp)
    5318:	dec00104 	addi	sp,sp,4
    531c:	f800283a 	ret

00005320 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    5320:	defffb04 	addi	sp,sp,-20
    5324:	df000415 	stw	fp,16(sp)
    5328:	df000404 	addi	fp,sp,16
    532c:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    5330:	00800074 	movhi	r2,1
    5334:	10879604 	addi	r2,r2,7768
    5338:	10800017 	ldw	r2,0(r2)
    533c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    5340:	00800074 	movhi	r2,1
    5344:	10879604 	addi	r2,r2,7768
    5348:	10800017 	ldw	r2,0(r2)
    534c:	e0ffff17 	ldw	r3,-4(fp)
    5350:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
    5354:	e0bfff17 	ldw	r2,-4(fp)
    5358:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
    535c:	e0bffc17 	ldw	r2,-16(fp)
    5360:	10800017 	ldw	r2,0(r2)
    5364:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    5368:	00002806 	br	540c <OS_EventTaskWaitMulti+0xec>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    536c:	00800074 	movhi	r2,1
    5370:	10879604 	addi	r2,r2,7768
    5374:	10800017 	ldw	r2,0(r2)
    5378:	10800d03 	ldbu	r2,52(r2)
    537c:	10c03fcc 	andi	r3,r2,255
    5380:	00800074 	movhi	r2,1
    5384:	10879604 	addi	r2,r2,7768
    5388:	10800017 	ldw	r2,0(r2)
    538c:	10800d03 	ldbu	r2,52(r2)
    5390:	10803fcc 	andi	r2,r2,255
    5394:	e13ffd17 	ldw	r4,-12(fp)
    5398:	2085883a 	add	r2,r4,r2
    539c:	108002c4 	addi	r2,r2,11
    53a0:	11000003 	ldbu	r4,0(r2)
    53a4:	00800074 	movhi	r2,1
    53a8:	10879604 	addi	r2,r2,7768
    53ac:	10800017 	ldw	r2,0(r2)
    53b0:	10800d43 	ldbu	r2,53(r2)
    53b4:	2084b03a 	or	r2,r4,r2
    53b8:	1009883a 	mov	r4,r2
    53bc:	e0bffd17 	ldw	r2,-12(fp)
    53c0:	10c5883a 	add	r2,r2,r3
    53c4:	108002c4 	addi	r2,r2,11
    53c8:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    53cc:	e0bffd17 	ldw	r2,-12(fp)
    53d0:	10c00283 	ldbu	r3,10(r2)
    53d4:	00800074 	movhi	r2,1
    53d8:	10879604 	addi	r2,r2,7768
    53dc:	10800017 	ldw	r2,0(r2)
    53e0:	10800d83 	ldbu	r2,54(r2)
    53e4:	1884b03a 	or	r2,r3,r2
    53e8:	1007883a 	mov	r3,r2
    53ec:	e0bffd17 	ldw	r2,-12(fp)
    53f0:	10c00285 	stb	r3,10(r2)
        pevents++;
    53f4:	e0bffc17 	ldw	r2,-16(fp)
    53f8:	10800104 	addi	r2,r2,4
    53fc:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
    5400:	e0bffc17 	ldw	r2,-16(fp)
    5404:	10800017 	ldw	r2,0(r2)
    5408:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    540c:	e0bffd17 	ldw	r2,-12(fp)
    5410:	103fd61e 	bne	r2,zero,536c <OS_EventTaskWaitMulti+0x4c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    5414:	00800074 	movhi	r2,1
    5418:	10879604 	addi	r2,r2,7768
    541c:	10800017 	ldw	r2,0(r2)
    5420:	10800d03 	ldbu	r2,52(r2)
    5424:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    5428:	e0fffe03 	ldbu	r3,-8(fp)
    542c:	e13ffe03 	ldbu	r4,-8(fp)
    5430:	00800074 	movhi	r2,1
    5434:	10879344 	addi	r2,r2,7757
    5438:	1105883a 	add	r2,r2,r4
    543c:	10800003 	ldbu	r2,0(r2)
    5440:	1009883a 	mov	r4,r2
    5444:	00800074 	movhi	r2,1
    5448:	10879604 	addi	r2,r2,7768
    544c:	10800017 	ldw	r2,0(r2)
    5450:	10800d43 	ldbu	r2,53(r2)
    5454:	0084303a 	nor	r2,zero,r2
    5458:	2084703a 	and	r2,r4,r2
    545c:	1009883a 	mov	r4,r2
    5460:	00800074 	movhi	r2,1
    5464:	10879344 	addi	r2,r2,7757
    5468:	10c5883a 	add	r2,r2,r3
    546c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    5470:	e0fffe03 	ldbu	r3,-8(fp)
    5474:	00800074 	movhi	r2,1
    5478:	10879344 	addi	r2,r2,7757
    547c:	10c5883a 	add	r2,r2,r3
    5480:	10800003 	ldbu	r2,0(r2)
    5484:	10803fcc 	andi	r2,r2,255
    5488:	10000e1e 	bne	r2,zero,54c4 <OS_EventTaskWaitMulti+0x1a4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    548c:	00800074 	movhi	r2,1
    5490:	10879604 	addi	r2,r2,7768
    5494:	10800017 	ldw	r2,0(r2)
    5498:	10800d83 	ldbu	r2,54(r2)
    549c:	0084303a 	nor	r2,zero,r2
    54a0:	1007883a 	mov	r3,r2
    54a4:	00800074 	movhi	r2,1
    54a8:	10879304 	addi	r2,r2,7756
    54ac:	10800003 	ldbu	r2,0(r2)
    54b0:	1884703a 	and	r2,r3,r2
    54b4:	1007883a 	mov	r3,r2
    54b8:	00800074 	movhi	r2,1
    54bc:	10879304 	addi	r2,r2,7756
    54c0:	10c00005 	stb	r3,0(r2)
    }
}
    54c4:	0001883a 	nop
    54c8:	e037883a 	mov	sp,fp
    54cc:	df000017 	ldw	fp,0(sp)
    54d0:	dec00104 	addi	sp,sp,4
    54d4:	f800283a 	ret

000054d8 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    54d8:	defffc04 	addi	sp,sp,-16
    54dc:	df000315 	stw	fp,12(sp)
    54e0:	df000304 	addi	fp,sp,12
    54e4:	e13ffe15 	stw	r4,-8(fp)
    54e8:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    54ec:	e0bffe17 	ldw	r2,-8(fp)
    54f0:	10800d03 	ldbu	r2,52(r2)
    54f4:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    54f8:	e0bffd03 	ldbu	r2,-12(fp)
    54fc:	e0fffd03 	ldbu	r3,-12(fp)
    5500:	e13fff17 	ldw	r4,-4(fp)
    5504:	20c7883a 	add	r3,r4,r3
    5508:	18c002c4 	addi	r3,r3,11
    550c:	18c00003 	ldbu	r3,0(r3)
    5510:	1809883a 	mov	r4,r3
    5514:	e0fffe17 	ldw	r3,-8(fp)
    5518:	18c00d43 	ldbu	r3,53(r3)
    551c:	00c6303a 	nor	r3,zero,r3
    5520:	20c6703a 	and	r3,r4,r3
    5524:	1809883a 	mov	r4,r3
    5528:	e0ffff17 	ldw	r3,-4(fp)
    552c:	1885883a 	add	r2,r3,r2
    5530:	108002c4 	addi	r2,r2,11
    5534:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
    5538:	e0bffd03 	ldbu	r2,-12(fp)
    553c:	e0ffff17 	ldw	r3,-4(fp)
    5540:	1885883a 	add	r2,r3,r2
    5544:	108002c4 	addi	r2,r2,11
    5548:	10800003 	ldbu	r2,0(r2)
    554c:	10803fcc 	andi	r2,r2,255
    5550:	10000a1e 	bne	r2,zero,557c <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    5554:	e0bfff17 	ldw	r2,-4(fp)
    5558:	10800283 	ldbu	r2,10(r2)
    555c:	1007883a 	mov	r3,r2
    5560:	e0bffe17 	ldw	r2,-8(fp)
    5564:	10800d83 	ldbu	r2,54(r2)
    5568:	0084303a 	nor	r2,zero,r2
    556c:	1884703a 	and	r2,r3,r2
    5570:	1007883a 	mov	r3,r2
    5574:	e0bfff17 	ldw	r2,-4(fp)
    5578:	10c00285 	stb	r3,10(r2)
    }
}
    557c:	0001883a 	nop
    5580:	e037883a 	mov	sp,fp
    5584:	df000017 	ldw	fp,0(sp)
    5588:	dec00104 	addi	sp,sp,4
    558c:	f800283a 	ret

00005590 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    5590:	defffa04 	addi	sp,sp,-24
    5594:	df000515 	stw	fp,20(sp)
    5598:	df000504 	addi	fp,sp,20
    559c:	e13ffe15 	stw	r4,-8(fp)
    55a0:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    55a4:	e0bffe17 	ldw	r2,-8(fp)
    55a8:	10800d03 	ldbu	r2,52(r2)
    55ac:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
    55b0:	e0bffe17 	ldw	r2,-8(fp)
    55b4:	10800d83 	ldbu	r2,54(r2)
    55b8:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
    55bc:	e0bffe17 	ldw	r2,-8(fp)
    55c0:	10800d43 	ldbu	r2,53(r2)
    55c4:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
    55c8:	e0bfff17 	ldw	r2,-4(fp)
    55cc:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
    55d0:	e0bffb17 	ldw	r2,-20(fp)
    55d4:	10800017 	ldw	r2,0(r2)
    55d8:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    55dc:	00002506 	br	5674 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
    55e0:	e0bffd03 	ldbu	r2,-12(fp)
    55e4:	e0fffd03 	ldbu	r3,-12(fp)
    55e8:	e13ffc17 	ldw	r4,-16(fp)
    55ec:	20c7883a 	add	r3,r4,r3
    55f0:	18c002c4 	addi	r3,r3,11
    55f4:	18c00003 	ldbu	r3,0(r3)
    55f8:	1809883a 	mov	r4,r3
    55fc:	e0fffd83 	ldbu	r3,-10(fp)
    5600:	00c6303a 	nor	r3,zero,r3
    5604:	20c6703a 	and	r3,r4,r3
    5608:	1809883a 	mov	r4,r3
    560c:	e0fffc17 	ldw	r3,-16(fp)
    5610:	1885883a 	add	r2,r3,r2
    5614:	108002c4 	addi	r2,r2,11
    5618:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
    561c:	e0bffd03 	ldbu	r2,-12(fp)
    5620:	e0fffc17 	ldw	r3,-16(fp)
    5624:	1885883a 	add	r2,r3,r2
    5628:	108002c4 	addi	r2,r2,11
    562c:	10800003 	ldbu	r2,0(r2)
    5630:	10803fcc 	andi	r2,r2,255
    5634:	1000091e 	bne	r2,zero,565c <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
    5638:	e0bffc17 	ldw	r2,-16(fp)
    563c:	10800283 	ldbu	r2,10(r2)
    5640:	1007883a 	mov	r3,r2
    5644:	e0bffd43 	ldbu	r2,-11(fp)
    5648:	0084303a 	nor	r2,zero,r2
    564c:	1884703a 	and	r2,r3,r2
    5650:	1007883a 	mov	r3,r2
    5654:	e0bffc17 	ldw	r2,-16(fp)
    5658:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    565c:	e0bffb17 	ldw	r2,-20(fp)
    5660:	10800104 	addi	r2,r2,4
    5664:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
    5668:	e0bffb17 	ldw	r2,-20(fp)
    566c:	10800017 	ldw	r2,0(r2)
    5670:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    5674:	e0bffc17 	ldw	r2,-16(fp)
    5678:	103fd91e 	bne	r2,zero,55e0 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
    567c:	0001883a 	nop
    5680:	e037883a 	mov	sp,fp
    5684:	df000017 	ldw	fp,0(sp)
    5688:	dec00104 	addi	sp,sp,4
    568c:	f800283a 	ret

00005690 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    5690:	defffc04 	addi	sp,sp,-16
    5694:	df000315 	stw	fp,12(sp)
    5698:	df000304 	addi	fp,sp,12
    569c:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    56a0:	e0bfff17 	ldw	r2,-4(fp)
    56a4:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    56a8:	e0bfff17 	ldw	r2,-4(fp)
    56ac:	108002c4 	addi	r2,r2,11
    56b0:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    56b4:	e03ffe05 	stb	zero,-8(fp)
    56b8:	00000706 	br	56d8 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
    56bc:	e0bffd17 	ldw	r2,-12(fp)
    56c0:	10c00044 	addi	r3,r2,1
    56c4:	e0fffd15 	stw	r3,-12(fp)
    56c8:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    56cc:	e0bffe03 	ldbu	r2,-8(fp)
    56d0:	10800044 	addi	r2,r2,1
    56d4:	e0bffe05 	stb	r2,-8(fp)
    56d8:	e0bffe03 	ldbu	r2,-8(fp)
    56dc:	108000f0 	cmpltui	r2,r2,3
    56e0:	103ff61e 	bne	r2,zero,56bc <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
    56e4:	0001883a 	nop
    56e8:	e037883a 	mov	sp,fp
    56ec:	df000017 	ldw	fp,0(sp)
    56f0:	dec00104 	addi	sp,sp,4
    56f4:	f800283a 	ret

000056f8 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    56f8:	defffb04 	addi	sp,sp,-20
    56fc:	dfc00415 	stw	ra,16(sp)
    5700:	df000315 	stw	fp,12(sp)
    5704:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    5708:	0142d004 	movi	r5,2880
    570c:	010000b4 	movhi	r4,2
    5710:	21200904 	addi	r4,r4,-32732
    5714:	0005b040 	call	5b04 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    5718:	008000b4 	movhi	r2,2
    571c:	10a00904 	addi	r2,r2,-32732
    5720:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    5724:	008000b4 	movhi	r2,2
    5728:	10a01504 	addi	r2,r2,-32684
    572c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    5730:	e03ffd0d 	sth	zero,-12(fp)
    5734:	00001306 	br	5784 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    5738:	e0bffe17 	ldw	r2,-8(fp)
    573c:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    5740:	e0bffe17 	ldw	r2,-8(fp)
    5744:	e0ffff17 	ldw	r3,-4(fp)
    5748:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    574c:	e0bffe17 	ldw	r2,-8(fp)
    5750:	00c00fc4 	movi	r3,63
    5754:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    5758:	e0bffe17 	ldw	r2,-8(fp)
    575c:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
    5760:	e0bffe17 	ldw	r2,-8(fp)
    5764:	10800c04 	addi	r2,r2,48
    5768:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    576c:	e0bfff17 	ldw	r2,-4(fp)
    5770:	10800c04 	addi	r2,r2,48
    5774:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    5778:	e0bffd0b 	ldhu	r2,-12(fp)
    577c:	10800044 	addi	r2,r2,1
    5780:	e0bffd0d 	sth	r2,-12(fp)
    5784:	e0bffd0b 	ldhu	r2,-12(fp)
    5788:	10800ef0 	cmpltui	r2,r2,59
    578c:	103fea1e 	bne	r2,zero,5738 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    5790:	e0bffe17 	ldw	r2,-8(fp)
    5794:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    5798:	e0bffe17 	ldw	r2,-8(fp)
    579c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    57a0:	e0bffe17 	ldw	r2,-8(fp)
    57a4:	00c00fc4 	movi	r3,63
    57a8:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    57ac:	e0bffe17 	ldw	r2,-8(fp)
    57b0:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    57b4:	00800074 	movhi	r2,1
    57b8:	10879404 	addi	r2,r2,7760
    57bc:	00c000b4 	movhi	r3,2
    57c0:	18e00904 	addi	r3,r3,-32732
    57c4:	10c00015 	stw	r3,0(r2)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    57c8:	0001883a 	nop
    57cc:	e037883a 	mov	sp,fp
    57d0:	dfc00117 	ldw	ra,4(sp)
    57d4:	df000017 	ldw	fp,0(sp)
    57d8:	dec00204 	addi	sp,sp,8
    57dc:	f800283a 	ret

000057e0 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    57e0:	deffff04 	addi	sp,sp,-4
    57e4:	df000015 	stw	fp,0(sp)
    57e8:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    57ec:	00800074 	movhi	r2,1
    57f0:	10879704 	addi	r2,r2,7772
    57f4:	10000015 	stw	zero,0(r2)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    57f8:	00800074 	movhi	r2,1
    57fc:	10879504 	addi	r2,r2,7764
    5800:	10000005 	stb	zero,0(r2)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    5804:	00800074 	movhi	r2,1
    5808:	10878704 	addi	r2,r2,7708
    580c:	10000005 	stb	zero,0(r2)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    5810:	00800074 	movhi	r2,1
    5814:	10878f44 	addi	r2,r2,7741
    5818:	10000005 	stb	zero,0(r2)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    581c:	00800074 	movhi	r2,1
    5820:	10878744 	addi	r2,r2,7709
    5824:	10000005 	stb	zero,0(r2)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    5828:	00800074 	movhi	r2,1
    582c:	10878c04 	addi	r2,r2,7728
    5830:	10000015 	stw	zero,0(r2)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    5834:	00800074 	movhi	r2,1
    5838:	10878804 	addi	r2,r2,7712
    583c:	10000015 	stw	zero,0(r2)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    5840:	00800074 	movhi	r2,1
    5844:	10879a04 	addi	r2,r2,7784
    5848:	10000015 	stw	zero,0(r2)
    OSIdleCtrMax  = 0L;
    584c:	00800074 	movhi	r2,1
    5850:	10878d04 	addi	r2,r2,7732
    5854:	10000015 	stw	zero,0(r2)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    5858:	00800074 	movhi	r2,1
    585c:	10879904 	addi	r2,r2,7780
    5860:	10000005 	stb	zero,0(r2)
#endif
}
    5864:	0001883a 	nop
    5868:	e037883a 	mov	sp,fp
    586c:	df000017 	ldw	fp,0(sp)
    5870:	dec00104 	addi	sp,sp,4
    5874:	f800283a 	ret

00005878 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    5878:	defffd04 	addi	sp,sp,-12
    587c:	df000215 	stw	fp,8(sp)
    5880:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    5884:	00800074 	movhi	r2,1
    5888:	10879304 	addi	r2,r2,7756
    588c:	10000005 	stb	zero,0(r2)
    prdytbl       = &OSRdyTbl[0];
    5890:	00800074 	movhi	r2,1
    5894:	10879344 	addi	r2,r2,7757
    5898:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    589c:	e03ffe05 	stb	zero,-8(fp)
    58a0:	00000706 	br	58c0 <OS_InitRdyList+0x48>
        *prdytbl++ = 0;
    58a4:	e0bfff17 	ldw	r2,-4(fp)
    58a8:	10c00044 	addi	r3,r2,1
    58ac:	e0ffff15 	stw	r3,-4(fp)
    58b0:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    58b4:	e0bffe03 	ldbu	r2,-8(fp)
    58b8:	10800044 	addi	r2,r2,1
    58bc:	e0bffe05 	stb	r2,-8(fp)
    58c0:	e0bffe03 	ldbu	r2,-8(fp)
    58c4:	108000f0 	cmpltui	r2,r2,3
    58c8:	103ff61e 	bne	r2,zero,58a4 <OS_InitRdyList+0x2c>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    58cc:	00800074 	movhi	r2,1
    58d0:	10878944 	addi	r2,r2,7717
    58d4:	10000005 	stb	zero,0(r2)
    OSPrioHighRdy = 0;
    58d8:	00800074 	movhi	r2,1
    58dc:	10878904 	addi	r2,r2,7716
    58e0:	10000005 	stb	zero,0(r2)

    OSTCBHighRdy  = (OS_TCB *)0;
    58e4:	00800074 	movhi	r2,1
    58e8:	10879104 	addi	r2,r2,7748
    58ec:	10000015 	stw	zero,0(r2)
    OSTCBCur      = (OS_TCB *)0;
    58f0:	00800074 	movhi	r2,1
    58f4:	10879604 	addi	r2,r2,7768
    58f8:	10000015 	stw	zero,0(r2)
}
    58fc:	0001883a 	nop
    5900:	e037883a 	mov	sp,fp
    5904:	df000017 	ldw	fp,0(sp)
    5908:	dec00104 	addi	sp,sp,4
    590c:	f800283a 	ret

00005910 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    5910:	defff804 	addi	sp,sp,-32
    5914:	dfc00715 	stw	ra,28(sp)
    5918:	df000615 	stw	fp,24(sp)
    591c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    5920:	008000c4 	movi	r2,3
    5924:	d8800415 	stw	r2,16(sp)
    5928:	d8000315 	stw	zero,12(sp)
    592c:	00808004 	movi	r2,512
    5930:	d8800215 	stw	r2,8(sp)
    5934:	00800074 	movhi	r2,1
    5938:	109e0904 	addi	r2,r2,30756
    593c:	d8800115 	stw	r2,4(sp)
    5940:	00bfffd4 	movui	r2,65535
    5944:	d8800015 	stw	r2,0(sp)
    5948:	01c00504 	movi	r7,20
    594c:	018000b4 	movhi	r6,2
    5950:	31a00804 	addi	r6,r6,-32736
    5954:	000b883a 	mov	r5,zero
    5958:	01000034 	movhi	r4,0
    595c:	21178b04 	addi	r4,r4,24108
    5960:	000a9580 	call	a958 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    5964:	e1bfff04 	addi	r6,fp,-4
    5968:	01400074 	movhi	r5,1
    596c:	2979f504 	addi	r5,r5,-6188
    5970:	01000504 	movi	r4,20
    5974:	000b22c0 	call	b22c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    5978:	0001883a 	nop
    597c:	e037883a 	mov	sp,fp
    5980:	dfc00117 	ldw	ra,4(sp)
    5984:	df000017 	ldw	fp,0(sp)
    5988:	dec00204 	addi	sp,sp,8
    598c:	f800283a 	ret

00005990 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    5990:	defff804 	addi	sp,sp,-32
    5994:	dfc00715 	stw	ra,28(sp)
    5998:	df000615 	stw	fp,24(sp)
    599c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    59a0:	008000c4 	movi	r2,3
    59a4:	d8800415 	stw	r2,16(sp)
    59a8:	d8000315 	stw	zero,12(sp)
    59ac:	00808004 	movi	r2,512
    59b0:	d8800215 	stw	r2,8(sp)
    59b4:	00800074 	movhi	r2,1
    59b8:	109b9104 	addi	r2,r2,28228
    59bc:	d8800115 	stw	r2,4(sp)
    59c0:	00bfff94 	movui	r2,65534
    59c4:	d8800015 	stw	r2,0(sp)
    59c8:	01c004c4 	movi	r7,19
    59cc:	01800074 	movhi	r6,1
    59d0:	319d9004 	addi	r6,r6,30272
    59d4:	000b883a 	mov	r5,zero
    59d8:	01000034 	movhi	r4,0
    59dc:	2117a604 	addi	r4,r4,24216
    59e0:	000a9580 	call	a958 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    59e4:	e1bfff04 	addi	r6,fp,-4
    59e8:	01400074 	movhi	r5,1
    59ec:	2979f904 	addi	r5,r5,-6172
    59f0:	010004c4 	movi	r4,19
    59f4:	000b22c0 	call	b22c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    59f8:	0001883a 	nop
    59fc:	e037883a 	mov	sp,fp
    5a00:	dfc00117 	ldw	ra,4(sp)
    5a04:	df000017 	ldw	fp,0(sp)
    5a08:	dec00204 	addi	sp,sp,8
    5a0c:	f800283a 	ret

00005a10 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    5a10:	defffb04 	addi	sp,sp,-20
    5a14:	dfc00415 	stw	ra,16(sp)
    5a18:	df000315 	stw	fp,12(sp)
    5a1c:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    5a20:	01414404 	movi	r5,1296
    5a24:	010000b4 	movhi	r4,2
    5a28:	2122d904 	addi	r4,r4,-29852
    5a2c:	0005b040 	call	5b04 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    5a30:	01401504 	movi	r5,84
    5a34:	010000b4 	movhi	r4,2
    5a38:	21241d04 	addi	r4,r4,-28556
    5a3c:	0005b040 	call	5b04 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    5a40:	008000b4 	movhi	r2,2
    5a44:	10a2d904 	addi	r2,r2,-29852
    5a48:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    5a4c:	008000b4 	movhi	r2,2
    5a50:	10a2f404 	addi	r2,r2,-29744
    5a54:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    5a58:	e03ffd05 	stb	zero,-12(fp)
    5a5c:	00001106 	br	5aa4 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    5a60:	e0bffe17 	ldw	r2,-8(fp)
    5a64:	e0ffff17 	ldw	r3,-4(fp)
    5a68:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    5a6c:	e0bffe17 	ldw	r2,-8(fp)
    5a70:	00c00fc4 	movi	r3,63
    5a74:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    5a78:	e0bffe17 	ldw	r2,-8(fp)
    5a7c:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
    5a80:	e0bffe17 	ldw	r2,-8(fp)
    5a84:	10801b04 	addi	r2,r2,108
    5a88:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    5a8c:	e0bfff17 	ldw	r2,-4(fp)
    5a90:	10801b04 	addi	r2,r2,108
    5a94:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    5a98:	e0bffd03 	ldbu	r2,-12(fp)
    5a9c:	10800044 	addi	r2,r2,1
    5aa0:	e0bffd05 	stb	r2,-12(fp)
    5aa4:	e0bffd03 	ldbu	r2,-12(fp)
    5aa8:	108002f0 	cmpltui	r2,r2,11
    5aac:	103fec1e 	bne	r2,zero,5a60 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    5ab0:	e0bffe17 	ldw	r2,-8(fp)
    5ab4:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    5ab8:	e0bffe17 	ldw	r2,-8(fp)
    5abc:	00c00fc4 	movi	r3,63
    5ac0:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    5ac4:	e0bffe17 	ldw	r2,-8(fp)
    5ac8:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    5acc:	00800074 	movhi	r2,1
    5ad0:	10878a04 	addi	r2,r2,7720
    5ad4:	10000015 	stw	zero,0(r2)
    OSTCBFreeList           = &OSTCBTbl[0];
    5ad8:	00800074 	movhi	r2,1
    5adc:	10878e04 	addi	r2,r2,7736
    5ae0:	00c000b4 	movhi	r3,2
    5ae4:	18e2d904 	addi	r3,r3,-29852
    5ae8:	10c00015 	stw	r3,0(r2)
}
    5aec:	0001883a 	nop
    5af0:	e037883a 	mov	sp,fp
    5af4:	dfc00117 	ldw	ra,4(sp)
    5af8:	df000017 	ldw	fp,0(sp)
    5afc:	dec00204 	addi	sp,sp,8
    5b00:	f800283a 	ret

00005b04 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    5b04:	defffd04 	addi	sp,sp,-12
    5b08:	df000215 	stw	fp,8(sp)
    5b0c:	df000204 	addi	fp,sp,8
    5b10:	e13ffe15 	stw	r4,-8(fp)
    5b14:	2805883a 	mov	r2,r5
    5b18:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    5b1c:	00000706 	br	5b3c <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
    5b20:	e0bffe17 	ldw	r2,-8(fp)
    5b24:	10c00044 	addi	r3,r2,1
    5b28:	e0fffe15 	stw	r3,-8(fp)
    5b2c:	10000005 	stb	zero,0(r2)
        size--;
    5b30:	e0bfff0b 	ldhu	r2,-4(fp)
    5b34:	10bfffc4 	addi	r2,r2,-1
    5b38:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    5b3c:	e0bfff0b 	ldhu	r2,-4(fp)
    5b40:	103ff71e 	bne	r2,zero,5b20 <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    5b44:	0001883a 	nop
    5b48:	e037883a 	mov	sp,fp
    5b4c:	df000017 	ldw	fp,0(sp)
    5b50:	dec00104 	addi	sp,sp,4
    5b54:	f800283a 	ret

00005b58 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    5b58:	defffc04 	addi	sp,sp,-16
    5b5c:	df000315 	stw	fp,12(sp)
    5b60:	df000304 	addi	fp,sp,12
    5b64:	e13ffd15 	stw	r4,-12(fp)
    5b68:	e17ffe15 	stw	r5,-8(fp)
    5b6c:	3005883a 	mov	r2,r6
    5b70:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    5b74:	00000b06 	br	5ba4 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
    5b78:	e0bffd17 	ldw	r2,-12(fp)
    5b7c:	10c00044 	addi	r3,r2,1
    5b80:	e0fffd15 	stw	r3,-12(fp)
    5b84:	e0fffe17 	ldw	r3,-8(fp)
    5b88:	19000044 	addi	r4,r3,1
    5b8c:	e13ffe15 	stw	r4,-8(fp)
    5b90:	18c00003 	ldbu	r3,0(r3)
    5b94:	10c00005 	stb	r3,0(r2)
        size--;
    5b98:	e0bfff0b 	ldhu	r2,-4(fp)
    5b9c:	10bfffc4 	addi	r2,r2,-1
    5ba0:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    5ba4:	e0bfff0b 	ldhu	r2,-4(fp)
    5ba8:	103ff31e 	bne	r2,zero,5b78 <OS_MemCopy+0x20>
        *pdest++ = *psrc++;
        size--;
    }
}
    5bac:	0001883a 	nop
    5bb0:	e037883a 	mov	sp,fp
    5bb4:	df000017 	ldw	fp,0(sp)
    5bb8:	dec00104 	addi	sp,sp,4
    5bbc:	f800283a 	ret

00005bc0 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    5bc0:	defffb04 	addi	sp,sp,-20
    5bc4:	dfc00415 	stw	ra,16(sp)
    5bc8:	df000315 	stw	fp,12(sp)
    5bcc:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    5bd0:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5bd4:	0005303a 	rdctl	r2,status
    5bd8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5bdc:	e0ffff17 	ldw	r3,-4(fp)
    5be0:	00bfff84 	movi	r2,-2
    5be4:	1884703a 	and	r2,r3,r2
    5be8:	1001703a 	wrctl	status,r2
  
  return context;
    5bec:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
    5bf0:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    5bf4:	00800074 	movhi	r2,1
    5bf8:	10879504 	addi	r2,r2,7764
    5bfc:	10800003 	ldbu	r2,0(r2)
    5c00:	10803fcc 	andi	r2,r2,255
    5c04:	10002a1e 	bne	r2,zero,5cb0 <OS_Sched+0xf0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    5c08:	00800074 	movhi	r2,1
    5c0c:	10878704 	addi	r2,r2,7708
    5c10:	10800003 	ldbu	r2,0(r2)
    5c14:	10803fcc 	andi	r2,r2,255
    5c18:	1000251e 	bne	r2,zero,5cb0 <OS_Sched+0xf0>
            OS_SchedNew();
    5c1c:	0005cd80 	call	5cd8 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    5c20:	00800074 	movhi	r2,1
    5c24:	10878904 	addi	r2,r2,7716
    5c28:	10c00003 	ldbu	r3,0(r2)
    5c2c:	00800074 	movhi	r2,1
    5c30:	10878944 	addi	r2,r2,7717
    5c34:	10800003 	ldbu	r2,0(r2)
    5c38:	18c03fcc 	andi	r3,r3,255
    5c3c:	10803fcc 	andi	r2,r2,255
    5c40:	18801b26 	beq	r3,r2,5cb0 <OS_Sched+0xf0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    5c44:	00800074 	movhi	r2,1
    5c48:	10878904 	addi	r2,r2,7716
    5c4c:	10800003 	ldbu	r2,0(r2)
    5c50:	10c03fcc 	andi	r3,r2,255
    5c54:	008000b4 	movhi	r2,2
    5c58:	10a41d04 	addi	r2,r2,-28556
    5c5c:	18c7883a 	add	r3,r3,r3
    5c60:	18c7883a 	add	r3,r3,r3
    5c64:	10c5883a 	add	r2,r2,r3
    5c68:	10c00017 	ldw	r3,0(r2)
    5c6c:	00800074 	movhi	r2,1
    5c70:	10879104 	addi	r2,r2,7748
    5c74:	10c00015 	stw	r3,0(r2)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    5c78:	00800074 	movhi	r2,1
    5c7c:	10879104 	addi	r2,r2,7748
    5c80:	10800017 	ldw	r2,0(r2)
    5c84:	10c00e17 	ldw	r3,56(r2)
    5c88:	18c00044 	addi	r3,r3,1
    5c8c:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    5c90:	00800074 	movhi	r2,1
    5c94:	10878c04 	addi	r2,r2,7728
    5c98:	10800017 	ldw	r2,0(r2)
    5c9c:	10c00044 	addi	r3,r2,1
    5ca0:	00800074 	movhi	r2,1
    5ca4:	10878c04 	addi	r2,r2,7728
    5ca8:	10c00015 	stw	r3,0(r2)
                OS_TASK_SW();                          /* Perform a context switch                     */
    5cac:	000dbcc0 	call	dbcc <OSCtxSw>
    5cb0:	e0bffd17 	ldw	r2,-12(fp)
    5cb4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5cb8:	e0bffe17 	ldw	r2,-8(fp)
    5cbc:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    5cc0:	0001883a 	nop
    5cc4:	e037883a 	mov	sp,fp
    5cc8:	dfc00117 	ldw	ra,4(sp)
    5ccc:	df000017 	ldw	fp,0(sp)
    5cd0:	dec00204 	addi	sp,sp,8
    5cd4:	f800283a 	ret

00005cd8 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    5cd8:	defffe04 	addi	sp,sp,-8
    5cdc:	df000115 	stw	fp,4(sp)
    5ce0:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    5ce4:	00800074 	movhi	r2,1
    5ce8:	10879304 	addi	r2,r2,7756
    5cec:	10800003 	ldbu	r2,0(r2)
    5cf0:	10c03fcc 	andi	r3,r2,255
    5cf4:	00800074 	movhi	r2,1
    5cf8:	10b9b504 	addi	r2,r2,-6444
    5cfc:	10c5883a 	add	r2,r2,r3
    5d00:	10800003 	ldbu	r2,0(r2)
    5d04:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    5d08:	e0bfff03 	ldbu	r2,-4(fp)
    5d0c:	100490fa 	slli	r2,r2,3
    5d10:	1009883a 	mov	r4,r2
    5d14:	e0ffff03 	ldbu	r3,-4(fp)
    5d18:	00800074 	movhi	r2,1
    5d1c:	10879344 	addi	r2,r2,7757
    5d20:	10c5883a 	add	r2,r2,r3
    5d24:	10800003 	ldbu	r2,0(r2)
    5d28:	10c03fcc 	andi	r3,r2,255
    5d2c:	00800074 	movhi	r2,1
    5d30:	10b9b504 	addi	r2,r2,-6444
    5d34:	10c5883a 	add	r2,r2,r3
    5d38:	10800003 	ldbu	r2,0(r2)
    5d3c:	2085883a 	add	r2,r4,r2
    5d40:	1007883a 	mov	r3,r2
    5d44:	00800074 	movhi	r2,1
    5d48:	10878904 	addi	r2,r2,7716
    5d4c:	10c00005 	stb	r3,0(r2)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    5d50:	0001883a 	nop
    5d54:	e037883a 	mov	sp,fp
    5d58:	df000017 	ldw	fp,0(sp)
    5d5c:	dec00104 	addi	sp,sp,4
    5d60:	f800283a 	ret

00005d64 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    5d64:	defffc04 	addi	sp,sp,-16
    5d68:	df000315 	stw	fp,12(sp)
    5d6c:	df000304 	addi	fp,sp,12
    5d70:	e13ffe15 	stw	r4,-8(fp)
    5d74:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
    5d78:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
    5d7c:	00000b06 	br	5dac <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
    5d80:	e0bffe17 	ldw	r2,-8(fp)
    5d84:	10c00044 	addi	r3,r2,1
    5d88:	e0fffe15 	stw	r3,-8(fp)
    5d8c:	e0ffff17 	ldw	r3,-4(fp)
    5d90:	19000044 	addi	r4,r3,1
    5d94:	e13fff15 	stw	r4,-4(fp)
    5d98:	18c00003 	ldbu	r3,0(r3)
    5d9c:	10c00005 	stb	r3,0(r2)
        len++;
    5da0:	e0bffd03 	ldbu	r2,-12(fp)
    5da4:	10800044 	addi	r2,r2,1
    5da8:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    5dac:	e0bfff17 	ldw	r2,-4(fp)
    5db0:	10800003 	ldbu	r2,0(r2)
    5db4:	10803fcc 	andi	r2,r2,255
    5db8:	103ff11e 	bne	r2,zero,5d80 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
    5dbc:	e0bffe17 	ldw	r2,-8(fp)
    5dc0:	10000005 	stb	zero,0(r2)
    return (len);
    5dc4:	e0bffd03 	ldbu	r2,-12(fp)
}
    5dc8:	e037883a 	mov	sp,fp
    5dcc:	df000017 	ldw	fp,0(sp)
    5dd0:	dec00104 	addi	sp,sp,4
    5dd4:	f800283a 	ret

00005dd8 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    5dd8:	defffd04 	addi	sp,sp,-12
    5ddc:	df000215 	stw	fp,8(sp)
    5de0:	df000204 	addi	fp,sp,8
    5de4:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
    5de8:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
    5dec:	00000606 	br	5e08 <OS_StrLen+0x30>
        psrc++;
    5df0:	e0bfff17 	ldw	r2,-4(fp)
    5df4:	10800044 	addi	r2,r2,1
    5df8:	e0bfff15 	stw	r2,-4(fp)
        len++;
    5dfc:	e0bffe03 	ldbu	r2,-8(fp)
    5e00:	10800044 	addi	r2,r2,1
    5e04:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    5e08:	e0bfff17 	ldw	r2,-4(fp)
    5e0c:	10800003 	ldbu	r2,0(r2)
    5e10:	10803fcc 	andi	r2,r2,255
    5e14:	103ff61e 	bne	r2,zero,5df0 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
    5e18:	e0bffe03 	ldbu	r2,-8(fp)
}
    5e1c:	e037883a 	mov	sp,fp
    5e20:	df000017 	ldw	fp,0(sp)
    5e24:	dec00104 	addi	sp,sp,4
    5e28:	f800283a 	ret

00005e2c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    5e2c:	defffa04 	addi	sp,sp,-24
    5e30:	dfc00515 	stw	ra,20(sp)
    5e34:	df000415 	stw	fp,16(sp)
    5e38:	df000404 	addi	fp,sp,16
    5e3c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5e40:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5e44:	0005303a 	rdctl	r2,status
    5e48:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5e4c:	e0fffd17 	ldw	r3,-12(fp)
    5e50:	00bfff84 	movi	r2,-2
    5e54:	1884703a 	and	r2,r3,r2
    5e58:	1001703a 	wrctl	status,r2
  
  return context;
    5e5c:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    5e60:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
    5e64:	00800074 	movhi	r2,1
    5e68:	10878804 	addi	r2,r2,7712
    5e6c:	10800017 	ldw	r2,0(r2)
    5e70:	10c00044 	addi	r3,r2,1
    5e74:	00800074 	movhi	r2,1
    5e78:	10878804 	addi	r2,r2,7712
    5e7c:	10c00015 	stw	r3,0(r2)
    5e80:	e0bffc17 	ldw	r2,-16(fp)
    5e84:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5e88:	e0bffe17 	ldw	r2,-8(fp)
    5e8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    5e90:	000dee00 	call	dee0 <OSTaskIdleHook>
    }
    5e94:	003feb06 	br	5e44 <OS_TaskIdle+0x18>

00005e98 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
    5e98:	defffa04 	addi	sp,sp,-24
    5e9c:	dfc00515 	stw	ra,20(sp)
    5ea0:	df000415 	stw	fp,16(sp)
    5ea4:	df000404 	addi	fp,sp,16
    5ea8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5eac:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    5eb0:	00000206 	br	5ebc <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    5eb4:	01003204 	movi	r4,200
    5eb8:	000bb600 	call	bb60 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    5ebc:	00800074 	movhi	r2,1
    5ec0:	10879904 	addi	r2,r2,7780
    5ec4:	10800003 	ldbu	r2,0(r2)
    5ec8:	10803fcc 	andi	r2,r2,255
    5ecc:	103ff926 	beq	r2,zero,5eb4 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    5ed0:	00800074 	movhi	r2,1
    5ed4:	10878d04 	addi	r2,r2,7732
    5ed8:	10800017 	ldw	r2,0(r2)
    5edc:	01401904 	movi	r5,100
    5ee0:	1009883a 	mov	r4,r2
    5ee4:	00030bc0 	call	30bc <__udivsi3>
    5ee8:	1007883a 	mov	r3,r2
    5eec:	00800074 	movhi	r2,1
    5ef0:	10878d04 	addi	r2,r2,7732
    5ef4:	10c00015 	stw	r3,0(r2)
    if (OSIdleCtrMax == 0L) {
    5ef8:	00800074 	movhi	r2,1
    5efc:	10878d04 	addi	r2,r2,7732
    5f00:	10800017 	ldw	r2,0(r2)
    5f04:	1000051e 	bne	r2,zero,5f1c <OS_TaskStat+0x84>
        OSCPUUsage = 0;
    5f08:	00800074 	movhi	r2,1
    5f0c:	10878f04 	addi	r2,r2,7740
    5f10:	10000005 	stb	zero,0(r2)
        (void)OSTaskSuspend(OS_PRIO_SELF);
    5f14:	01003fc4 	movi	r4,255
    5f18:	000b7b00 	call	b7b0 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5f1c:	0005303a 	rdctl	r2,status
    5f20:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5f24:	e0fffd17 	ldw	r3,-12(fp)
    5f28:	00bfff84 	movi	r2,-2
    5f2c:	1884703a 	and	r2,r3,r2
    5f30:	1001703a 	wrctl	status,r2
  
  return context;
    5f34:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    5f38:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    5f3c:	00800074 	movhi	r2,1
    5f40:	10878804 	addi	r2,r2,7712
    5f44:	10c00017 	ldw	r3,0(r2)
    5f48:	00800074 	movhi	r2,1
    5f4c:	10879a04 	addi	r2,r2,7784
    5f50:	10c00015 	stw	r3,0(r2)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    5f54:	00800074 	movhi	r2,1
    5f58:	10878804 	addi	r2,r2,7712
    5f5c:	10000015 	stw	zero,0(r2)
    5f60:	e0bffc17 	ldw	r2,-16(fp)
    5f64:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5f68:	e0bffe17 	ldw	r2,-8(fp)
    5f6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    5f70:	00800074 	movhi	r2,1
    5f74:	10879a04 	addi	r2,r2,7784
    5f78:	10c00017 	ldw	r3,0(r2)
    5f7c:	00800074 	movhi	r2,1
    5f80:	10878d04 	addi	r2,r2,7732
    5f84:	10800017 	ldw	r2,0(r2)
    5f88:	100b883a 	mov	r5,r2
    5f8c:	1809883a 	mov	r4,r3
    5f90:	00030bc0 	call	30bc <__udivsi3>
    5f94:	1007883a 	mov	r3,r2
    5f98:	00801904 	movi	r2,100
    5f9c:	10c5c83a 	sub	r2,r2,r3
    5fa0:	1007883a 	mov	r3,r2
    5fa4:	00800074 	movhi	r2,1
    5fa8:	10878f04 	addi	r2,r2,7740
    5fac:	10c00005 	stb	r3,0(r2)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    5fb0:	000de600 	call	de60 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    5fb4:	0005fc40 	call	5fc4 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
    5fb8:	01001904 	movi	r4,100
    5fbc:	000bb600 	call	bb60 <OSTimeDly>
    }
    5fc0:	003fd606 	br	5f1c <OS_TaskStat+0x84>

00005fc4 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
    5fc4:	defffa04 	addi	sp,sp,-24
    5fc8:	dfc00515 	stw	ra,20(sp)
    5fcc:	df000415 	stw	fp,16(sp)
    5fd0:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    5fd4:	e03ffc05 	stb	zero,-16(fp)
    5fd8:	00002406 	br	606c <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
    5fdc:	e0bffc03 	ldbu	r2,-16(fp)
    5fe0:	e0fffe04 	addi	r3,fp,-8
    5fe4:	180b883a 	mov	r5,r3
    5fe8:	1009883a 	mov	r4,r2
    5fec:	000b5e80 	call	b5e8 <OSTaskStkChk>
    5ff0:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
    5ff4:	e0bffc43 	ldbu	r2,-15(fp)
    5ff8:	1000191e 	bne	r2,zero,6060 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
    5ffc:	e0fffc03 	ldbu	r3,-16(fp)
    6000:	008000b4 	movhi	r2,2
    6004:	10a41d04 	addi	r2,r2,-28556
    6008:	18c7883a 	add	r3,r3,r3
    600c:	18c7883a 	add	r3,r3,r3
    6010:	10c5883a 	add	r2,r2,r3
    6014:	10800017 	ldw	r2,0(r2)
    6018:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
    601c:	e0bffd17 	ldw	r2,-12(fp)
    6020:	10000f26 	beq	r2,zero,6060 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
    6024:	e0bffd17 	ldw	r2,-12(fp)
    6028:	10800060 	cmpeqi	r2,r2,1
    602c:	10000c1e 	bne	r2,zero,6060 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
    6030:	e0bffd17 	ldw	r2,-12(fp)
    6034:	10c00217 	ldw	r3,8(r2)
    6038:	e0bffd17 	ldw	r2,-12(fp)
    603c:	10800317 	ldw	r2,12(r2)
    6040:	1085883a 	add	r2,r2,r2
    6044:	1085883a 	add	r2,r2,r2
    6048:	1887883a 	add	r3,r3,r2
    604c:	e0bffd17 	ldw	r2,-12(fp)
    6050:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
    6054:	e0ffff17 	ldw	r3,-4(fp)
    6058:	e0bffd17 	ldw	r2,-12(fp)
    605c:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    6060:	e0bffc03 	ldbu	r2,-16(fp)
    6064:	10800044 	addi	r2,r2,1
    6068:	e0bffc05 	stb	r2,-16(fp)
    606c:	e0bffc03 	ldbu	r2,-16(fp)
    6070:	10800570 	cmpltui	r2,r2,21
    6074:	103fd91e 	bne	r2,zero,5fdc <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
    6078:	0001883a 	nop
    607c:	e037883a 	mov	sp,fp
    6080:	dfc00117 	ldw	ra,4(sp)
    6084:	df000017 	ldw	fp,0(sp)
    6088:	dec00204 	addi	sp,sp,8
    608c:	f800283a 	ret

00006090 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    6090:	defff204 	addi	sp,sp,-56
    6094:	dfc00d15 	stw	ra,52(sp)
    6098:	df000c15 	stw	fp,48(sp)
    609c:	df000c04 	addi	fp,sp,48
    60a0:	e17ffc15 	stw	r5,-16(fp)
    60a4:	e1bffd15 	stw	r6,-12(fp)
    60a8:	3807883a 	mov	r3,r7
    60ac:	e0800417 	ldw	r2,16(fp)
    60b0:	e13ffb05 	stb	r4,-20(fp)
    60b4:	e0fffe0d 	sth	r3,-8(fp)
    60b8:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    60bc:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    60c0:	0005303a 	rdctl	r2,status
    60c4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    60c8:	e0fffa17 	ldw	r3,-24(fp)
    60cc:	00bfff84 	movi	r2,-2
    60d0:	1884703a 	and	r2,r3,r2
    60d4:	1001703a 	wrctl	status,r2
  
  return context;
    60d8:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
    60dc:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    60e0:	00800074 	movhi	r2,1
    60e4:	10878e04 	addi	r2,r2,7736
    60e8:	10800017 	ldw	r2,0(r2)
    60ec:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
    60f0:	e0bff617 	ldw	r2,-40(fp)
    60f4:	1000a926 	beq	r2,zero,639c <OS_TCBInit+0x30c>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    60f8:	e0bff617 	ldw	r2,-40(fp)
    60fc:	10c00517 	ldw	r3,20(r2)
    6100:	00800074 	movhi	r2,1
    6104:	10878e04 	addi	r2,r2,7736
    6108:	10c00015 	stw	r3,0(r2)
    610c:	e0bff417 	ldw	r2,-48(fp)
    6110:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6114:	e0bff817 	ldw	r2,-32(fp)
    6118:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    611c:	e0bff617 	ldw	r2,-40(fp)
    6120:	e0fffc17 	ldw	r3,-16(fp)
    6124:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    6128:	e0bff617 	ldw	r2,-40(fp)
    612c:	e0fffb03 	ldbu	r3,-20(fp)
    6130:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    6134:	e0bff617 	ldw	r2,-40(fp)
    6138:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    613c:	e0bff617 	ldw	r2,-40(fp)
    6140:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    6144:	e0bff617 	ldw	r2,-40(fp)
    6148:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    614c:	e0bff617 	ldw	r2,-40(fp)
    6150:	e0c00317 	ldw	r3,12(fp)
    6154:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    6158:	e0bff617 	ldw	r2,-40(fp)
    615c:	e0c00217 	ldw	r3,8(fp)
    6160:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    6164:	e0bff617 	ldw	r2,-40(fp)
    6168:	e0fffd17 	ldw	r3,-12(fp)
    616c:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    6170:	e0bff617 	ldw	r2,-40(fp)
    6174:	e0ffff0b 	ldhu	r3,-4(fp)
    6178:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    617c:	e0bff617 	ldw	r2,-40(fp)
    6180:	e0fffe0b 	ldhu	r3,-8(fp)
    6184:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
    6188:	e0bff617 	ldw	r2,-40(fp)
    618c:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    6190:	e0bffb03 	ldbu	r2,-20(fp)
    6194:	1004d0fa 	srli	r2,r2,3
    6198:	1007883a 	mov	r3,r2
    619c:	e0bff617 	ldw	r2,-40(fp)
    61a0:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    61a4:	e0bffb03 	ldbu	r2,-20(fp)
    61a8:	108001cc 	andi	r2,r2,7
    61ac:	1007883a 	mov	r3,r2
    61b0:	e0bff617 	ldw	r2,-40(fp)
    61b4:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    61b8:	e0bff617 	ldw	r2,-40(fp)
    61bc:	10800d03 	ldbu	r2,52(r2)
    61c0:	10803fcc 	andi	r2,r2,255
    61c4:	00c00044 	movi	r3,1
    61c8:	1884983a 	sll	r2,r3,r2
    61cc:	1007883a 	mov	r3,r2
    61d0:	e0bff617 	ldw	r2,-40(fp)
    61d4:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    61d8:	e0bff617 	ldw	r2,-40(fp)
    61dc:	10800cc3 	ldbu	r2,51(r2)
    61e0:	10803fcc 	andi	r2,r2,255
    61e4:	00c00044 	movi	r3,1
    61e8:	1884983a 	sll	r2,r3,r2
    61ec:	1007883a 	mov	r3,r2
    61f0:	e0bff617 	ldw	r2,-40(fp)
    61f4:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    61f8:	e0bff617 	ldw	r2,-40(fp)
    61fc:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
    6200:	e0bff617 	ldw	r2,-40(fp)
    6204:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
    6208:	e0bff617 	ldw	r2,-40(fp)
    620c:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
    6210:	e0bff617 	ldw	r2,-40(fp)
    6214:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
    6218:	e0bff617 	ldw	r2,-40(fp)
    621c:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
    6220:	e0bff617 	ldw	r2,-40(fp)
    6224:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
    6228:	e0bff617 	ldw	r2,-40(fp)
    622c:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
    6230:	e0bff617 	ldw	r2,-40(fp)
    6234:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
    6238:	e0bff617 	ldw	r2,-40(fp)
    623c:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
    6240:	e0bff617 	ldw	r2,-40(fp)
    6244:	00c00fc4 	movi	r3,63
    6248:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    624c:	e0bff617 	ldw	r2,-40(fp)
    6250:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
    6254:	e13ff617 	ldw	r4,-40(fp)
    6258:	000df000 	call	df00 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    625c:	e13ff617 	ldw	r4,-40(fp)
    6260:	000ddf80 	call	ddf8 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6264:	0005303a 	rdctl	r2,status
    6268:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    626c:	e0fff517 	ldw	r3,-44(fp)
    6270:	00bfff84 	movi	r2,-2
    6274:	1884703a 	and	r2,r3,r2
    6278:	1001703a 	wrctl	status,r2
  
  return context;
    627c:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
    6280:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
    6284:	e0fffb03 	ldbu	r3,-20(fp)
    6288:	008000b4 	movhi	r2,2
    628c:	10a41d04 	addi	r2,r2,-28556
    6290:	18c7883a 	add	r3,r3,r3
    6294:	18c7883a 	add	r3,r3,r3
    6298:	10c5883a 	add	r2,r2,r3
    629c:	e0fff617 	ldw	r3,-40(fp)
    62a0:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    62a4:	00800074 	movhi	r2,1
    62a8:	10878a04 	addi	r2,r2,7720
    62ac:	10c00017 	ldw	r3,0(r2)
    62b0:	e0bff617 	ldw	r2,-40(fp)
    62b4:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    62b8:	e0bff617 	ldw	r2,-40(fp)
    62bc:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
    62c0:	00800074 	movhi	r2,1
    62c4:	10878a04 	addi	r2,r2,7720
    62c8:	10800017 	ldw	r2,0(r2)
    62cc:	10000526 	beq	r2,zero,62e4 <OS_TCBInit+0x254>
            OSTCBList->OSTCBPrev = ptcb;
    62d0:	00800074 	movhi	r2,1
    62d4:	10878a04 	addi	r2,r2,7720
    62d8:	10800017 	ldw	r2,0(r2)
    62dc:	e0fff617 	ldw	r3,-40(fp)
    62e0:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
    62e4:	00800074 	movhi	r2,1
    62e8:	10878a04 	addi	r2,r2,7720
    62ec:	e0fff617 	ldw	r3,-40(fp)
    62f0:	10c00015 	stw	r3,0(r2)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    62f4:	e0bff617 	ldw	r2,-40(fp)
    62f8:	10c00d83 	ldbu	r3,54(r2)
    62fc:	00800074 	movhi	r2,1
    6300:	10879304 	addi	r2,r2,7756
    6304:	10800003 	ldbu	r2,0(r2)
    6308:	1884b03a 	or	r2,r3,r2
    630c:	1007883a 	mov	r3,r2
    6310:	00800074 	movhi	r2,1
    6314:	10879304 	addi	r2,r2,7756
    6318:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    631c:	e0bff617 	ldw	r2,-40(fp)
    6320:	10800d03 	ldbu	r2,52(r2)
    6324:	10c03fcc 	andi	r3,r2,255
    6328:	e0bff617 	ldw	r2,-40(fp)
    632c:	10800d03 	ldbu	r2,52(r2)
    6330:	11003fcc 	andi	r4,r2,255
    6334:	00800074 	movhi	r2,1
    6338:	10879344 	addi	r2,r2,7757
    633c:	1105883a 	add	r2,r2,r4
    6340:	11000003 	ldbu	r4,0(r2)
    6344:	e0bff617 	ldw	r2,-40(fp)
    6348:	10800d43 	ldbu	r2,53(r2)
    634c:	2084b03a 	or	r2,r4,r2
    6350:	1009883a 	mov	r4,r2
    6354:	00800074 	movhi	r2,1
    6358:	10879344 	addi	r2,r2,7757
    635c:	10c5883a 	add	r2,r2,r3
    6360:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    6364:	00800074 	movhi	r2,1
    6368:	10878f44 	addi	r2,r2,7741
    636c:	10800003 	ldbu	r2,0(r2)
    6370:	10800044 	addi	r2,r2,1
    6374:	1007883a 	mov	r3,r2
    6378:	00800074 	movhi	r2,1
    637c:	10878f44 	addi	r2,r2,7741
    6380:	10c00005 	stb	r3,0(r2)
    6384:	e0bff417 	ldw	r2,-48(fp)
    6388:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    638c:	e0bff717 	ldw	r2,-36(fp)
    6390:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    6394:	0005883a 	mov	r2,zero
    6398:	00000506 	br	63b0 <OS_TCBInit+0x320>
    639c:	e0bff417 	ldw	r2,-48(fp)
    63a0:	e0bff915 	stw	r2,-28(fp)
    63a4:	e0bff917 	ldw	r2,-28(fp)
    63a8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
    63ac:	00801084 	movi	r2,66
}
    63b0:	e037883a 	mov	sp,fp
    63b4:	dfc00117 	ldw	ra,4(sp)
    63b8:	df000017 	ldw	fp,0(sp)
    63bc:	dec00204 	addi	sp,sp,8
    63c0:	f800283a 	ret

000063c4 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
    63c4:	defffe04 	addi	sp,sp,-8
    63c8:	df000115 	stw	fp,4(sp)
    63cc:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
    63d0:	d0a00d04 	addi	r2,gp,-32716
    63d4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
    63d8:	d0a00e04 	addi	r2,gp,-32712
    63dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
    63e0:	d0a00f84 	addi	r2,gp,-32706
    63e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
    63e8:	d0a01004 	addi	r2,gp,-32704
    63ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
    63f0:	d0a00f04 	addi	r2,gp,-32708
    63f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
    63f8:	d0a01084 	addi	r2,gp,-32702
    63fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
    6400:	d0a01104 	addi	r2,gp,-32700
    6404:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
    6408:	d0a01184 	addi	r2,gp,-32698
    640c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
    6410:	d0a01204 	addi	r2,gp,-32696
    6414:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
    6418:	d0a01284 	addi	r2,gp,-32694
    641c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
    6420:	d0a01304 	addi	r2,gp,-32692
    6424:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
    6428:	d0a01384 	addi	r2,gp,-32690
    642c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
    6430:	d0a01404 	addi	r2,gp,-32688
    6434:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
    6438:	d0a01484 	addi	r2,gp,-32686
    643c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
    6440:	d0a01504 	addi	r2,gp,-32684
    6444:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
    6448:	d0a01584 	addi	r2,gp,-32682
    644c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
    6450:	d0a01604 	addi	r2,gp,-32680
    6454:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
    6458:	d0a01684 	addi	r2,gp,-32678
    645c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
    6460:	d0a01704 	addi	r2,gp,-32676
    6464:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
    6468:	d0a01784 	addi	r2,gp,-32674
    646c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
    6470:	d0a01804 	addi	r2,gp,-32672
    6474:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
    6478:	d0a01884 	addi	r2,gp,-32670
    647c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
    6480:	d0a01904 	addi	r2,gp,-32668
    6484:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
    6488:	d0a01984 	addi	r2,gp,-32666
    648c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
    6490:	d0a01a04 	addi	r2,gp,-32664
    6494:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
    6498:	d0a01a84 	addi	r2,gp,-32662
    649c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
    64a0:	d0a01b04 	addi	r2,gp,-32660
    64a4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
    64a8:	d0a01b84 	addi	r2,gp,-32658
    64ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
    64b0:	d0a01c04 	addi	r2,gp,-32656
    64b4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
    64b8:	d0a01c84 	addi	r2,gp,-32654
    64bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
    64c0:	d0a01d04 	addi	r2,gp,-32652
    64c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
    64c8:	d0a01d84 	addi	r2,gp,-32650
    64cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
    64d0:	d0a01e04 	addi	r2,gp,-32648
    64d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
    64d8:	d0a01e84 	addi	r2,gp,-32646
    64dc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
    64e0:	d0a01f04 	addi	r2,gp,-32644
    64e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
    64e8:	d0a01f84 	addi	r2,gp,-32642
    64ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
    64f0:	d0a02004 	addi	r2,gp,-32640
    64f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
    64f8:	d0a02084 	addi	r2,gp,-32638
    64fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
    6500:	d0a02104 	addi	r2,gp,-32636
    6504:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
    6508:	d0a02184 	addi	r2,gp,-32634
    650c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
    6510:	d0a02204 	addi	r2,gp,-32632
    6514:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
    6518:	d0a02284 	addi	r2,gp,-32630
    651c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
    6520:	d0a02304 	addi	r2,gp,-32628
    6524:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
    6528:	d0a02384 	addi	r2,gp,-32626
    652c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
    6530:	d0a02404 	addi	r2,gp,-32624
    6534:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
    6538:	d0a02904 	addi	r2,gp,-32604
    653c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
    6540:	0001883a 	nop
    6544:	e037883a 	mov	sp,fp
    6548:	df000017 	ldw	fp,0(sp)
    654c:	dec00104 	addi	sp,sp,4
    6550:	f800283a 	ret

00006554 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
    6554:	defff204 	addi	sp,sp,-56
    6558:	df000d15 	stw	fp,52(sp)
    655c:	df000d04 	addi	fp,sp,52
    6560:	e13ffc15 	stw	r4,-16(fp)
    6564:	2807883a 	mov	r3,r5
    6568:	3005883a 	mov	r2,r6
    656c:	e1ffff15 	stw	r7,-4(fp)
    6570:	e0fffd0d 	sth	r3,-12(fp)
    6574:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    6578:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    657c:	e0bfff17 	ldw	r2,-4(fp)
    6580:	1000021e 	bne	r2,zero,658c <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
    6584:	0005883a 	mov	r2,zero
    6588:	0000b006 	br	684c <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    658c:	e0bffc17 	ldw	r2,-16(fp)
    6590:	1000051e 	bne	r2,zero,65a8 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    6594:	e0bfff17 	ldw	r2,-4(fp)
    6598:	00c01b84 	movi	r3,110
    659c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    65a0:	0005883a 	mov	r2,zero
    65a4:	0000a906 	br	684c <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    65a8:	e0bffc17 	ldw	r2,-16(fp)
    65ac:	10800003 	ldbu	r2,0(r2)
    65b0:	10803fcc 	andi	r2,r2,255
    65b4:	10800160 	cmpeqi	r2,r2,5
    65b8:	1000051e 	bne	r2,zero,65d0 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
    65bc:	e0bfff17 	ldw	r2,-4(fp)
    65c0:	00c00044 	movi	r3,1
    65c4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    65c8:	0005883a 	mov	r2,zero
    65cc:	00009f06 	br	684c <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    65d0:	e0fffe03 	ldbu	r3,-8(fp)
    65d4:	00bfe004 	movi	r2,-128
    65d8:	1884703a 	and	r2,r3,r2
    65dc:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
    65e0:	e0bff503 	ldbu	r2,-44(fp)
    65e4:	10000626 	beq	r2,zero,6600 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
    65e8:	e0bffe03 	ldbu	r2,-8(fp)
    65ec:	10801fcc 	andi	r2,r2,127
    65f0:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    65f4:	00800044 	movi	r2,1
    65f8:	e0bff385 	stb	r2,-50(fp)
    65fc:	00000106 	br	6604 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
    6600:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    6604:	e0bfff17 	ldw	r2,-4(fp)
    6608:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    660c:	0005303a 	rdctl	r2,status
    6610:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6614:	e0fffb17 	ldw	r3,-20(fp)
    6618:	00bfff84 	movi	r2,-2
    661c:	1884703a 	and	r2,r3,r2
    6620:	1001703a 	wrctl	status,r2
  
  return context;
    6624:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
    6628:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
    662c:	e0bffe03 	ldbu	r2,-8(fp)
    6630:	10c00060 	cmpeqi	r3,r2,1
    6634:	18005f1e 	bne	r3,zero,67b4 <OSFlagAccept+0x260>
    6638:	10c00088 	cmpgei	r3,r2,2
    663c:	1800021e 	bne	r3,zero,6648 <OSFlagAccept+0xf4>
    6640:	10003f26 	beq	r2,zero,6740 <OSFlagAccept+0x1ec>
    6644:	00007706 	br	6824 <OSFlagAccept+0x2d0>
    6648:	10c000a0 	cmpeqi	r3,r2,2
    664c:	1800031e 	bne	r3,zero,665c <OSFlagAccept+0x108>
    6650:	108000e0 	cmpeqi	r2,r2,3
    6654:	10001e1e 	bne	r2,zero,66d0 <OSFlagAccept+0x17c>
    6658:	00007206 	br	6824 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    665c:	e0bffc17 	ldw	r2,-16(fp)
    6660:	10c0020b 	ldhu	r3,8(r2)
    6664:	e0bffd0b 	ldhu	r2,-12(fp)
    6668:	1884703a 	and	r2,r3,r2
    666c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    6670:	e0fff30b 	ldhu	r3,-52(fp)
    6674:	e0bffd0b 	ldhu	r2,-12(fp)
    6678:	18800d1e 	bne	r3,r2,66b0 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    667c:	e0bff383 	ldbu	r2,-50(fp)
    6680:	10800058 	cmpnei	r2,r2,1
    6684:	10000d1e 	bne	r2,zero,66bc <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    6688:	e0bffc17 	ldw	r2,-16(fp)
    668c:	1080020b 	ldhu	r2,8(r2)
    6690:	1007883a 	mov	r3,r2
    6694:	e0bff30b 	ldhu	r2,-52(fp)
    6698:	0084303a 	nor	r2,zero,r2
    669c:	1884703a 	and	r2,r3,r2
    66a0:	1007883a 	mov	r3,r2
    66a4:	e0bffc17 	ldw	r2,-16(fp)
    66a8:	10c0020d 	sth	r3,8(r2)
    66ac:	00000306 	br	66bc <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    66b0:	e0bfff17 	ldw	r2,-4(fp)
    66b4:	00c01c04 	movi	r3,112
    66b8:	10c00005 	stb	r3,0(r2)
    66bc:	e0bff417 	ldw	r2,-48(fp)
    66c0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    66c4:	e0bff617 	ldw	r2,-40(fp)
    66c8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    66cc:	00005e06 	br	6848 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    66d0:	e0bffc17 	ldw	r2,-16(fp)
    66d4:	10c0020b 	ldhu	r3,8(r2)
    66d8:	e0bffd0b 	ldhu	r2,-12(fp)
    66dc:	1884703a 	and	r2,r3,r2
    66e0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    66e4:	e0bff30b 	ldhu	r2,-52(fp)
    66e8:	10000d26 	beq	r2,zero,6720 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    66ec:	e0bff383 	ldbu	r2,-50(fp)
    66f0:	10800058 	cmpnei	r2,r2,1
    66f4:	10000d1e 	bne	r2,zero,672c <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    66f8:	e0bffc17 	ldw	r2,-16(fp)
    66fc:	1080020b 	ldhu	r2,8(r2)
    6700:	1007883a 	mov	r3,r2
    6704:	e0bff30b 	ldhu	r2,-52(fp)
    6708:	0084303a 	nor	r2,zero,r2
    670c:	1884703a 	and	r2,r3,r2
    6710:	1007883a 	mov	r3,r2
    6714:	e0bffc17 	ldw	r2,-16(fp)
    6718:	10c0020d 	sth	r3,8(r2)
    671c:	00000306 	br	672c <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    6720:	e0bfff17 	ldw	r2,-4(fp)
    6724:	00c01c04 	movi	r3,112
    6728:	10c00005 	stb	r3,0(r2)
    672c:	e0bff417 	ldw	r2,-48(fp)
    6730:	e0bff715 	stw	r2,-36(fp)
    6734:	e0bff717 	ldw	r2,-36(fp)
    6738:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    673c:	00004206 	br	6848 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    6740:	e0bffc17 	ldw	r2,-16(fp)
    6744:	1080020b 	ldhu	r2,8(r2)
    6748:	0084303a 	nor	r2,zero,r2
    674c:	1007883a 	mov	r3,r2
    6750:	e0bffd0b 	ldhu	r2,-12(fp)
    6754:	1884703a 	and	r2,r3,r2
    6758:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    675c:	e0fff30b 	ldhu	r3,-52(fp)
    6760:	e0bffd0b 	ldhu	r2,-12(fp)
    6764:	18800b1e 	bne	r3,r2,6794 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    6768:	e0bff383 	ldbu	r2,-50(fp)
    676c:	10800058 	cmpnei	r2,r2,1
    6770:	10000b1e 	bne	r2,zero,67a0 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    6774:	e0bffc17 	ldw	r2,-16(fp)
    6778:	10c0020b 	ldhu	r3,8(r2)
    677c:	e0bff30b 	ldhu	r2,-52(fp)
    6780:	1884b03a 	or	r2,r3,r2
    6784:	1007883a 	mov	r3,r2
    6788:	e0bffc17 	ldw	r2,-16(fp)
    678c:	10c0020d 	sth	r3,8(r2)
    6790:	00000306 	br	67a0 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    6794:	e0bfff17 	ldw	r2,-4(fp)
    6798:	00c01c04 	movi	r3,112
    679c:	10c00005 	stb	r3,0(r2)
    67a0:	e0bff417 	ldw	r2,-48(fp)
    67a4:	e0bff815 	stw	r2,-32(fp)
    67a8:	e0bff817 	ldw	r2,-32(fp)
    67ac:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    67b0:	00002506 	br	6848 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    67b4:	e0bffc17 	ldw	r2,-16(fp)
    67b8:	1080020b 	ldhu	r2,8(r2)
    67bc:	0084303a 	nor	r2,zero,r2
    67c0:	1007883a 	mov	r3,r2
    67c4:	e0bffd0b 	ldhu	r2,-12(fp)
    67c8:	1884703a 	and	r2,r3,r2
    67cc:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    67d0:	e0bff30b 	ldhu	r2,-52(fp)
    67d4:	10000b26 	beq	r2,zero,6804 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    67d8:	e0bff383 	ldbu	r2,-50(fp)
    67dc:	10800058 	cmpnei	r2,r2,1
    67e0:	10000b1e 	bne	r2,zero,6810 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    67e4:	e0bffc17 	ldw	r2,-16(fp)
    67e8:	10c0020b 	ldhu	r3,8(r2)
    67ec:	e0bff30b 	ldhu	r2,-52(fp)
    67f0:	1884b03a 	or	r2,r3,r2
    67f4:	1007883a 	mov	r3,r2
    67f8:	e0bffc17 	ldw	r2,-16(fp)
    67fc:	10c0020d 	sth	r3,8(r2)
    6800:	00000306 	br	6810 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    6804:	e0bfff17 	ldw	r2,-4(fp)
    6808:	00c01c04 	movi	r3,112
    680c:	10c00005 	stb	r3,0(r2)
    6810:	e0bff417 	ldw	r2,-48(fp)
    6814:	e0bff915 	stw	r2,-28(fp)
    6818:	e0bff917 	ldw	r2,-28(fp)
    681c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    6820:	00000906 	br	6848 <OSFlagAccept+0x2f4>
    6824:	e0bff417 	ldw	r2,-48(fp)
    6828:	e0bffa15 	stw	r2,-24(fp)
    682c:	e0bffa17 	ldw	r2,-24(fp)
    6830:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    6834:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
    6838:	e0bfff17 	ldw	r2,-4(fp)
    683c:	00c01bc4 	movi	r3,111
    6840:	10c00005 	stb	r3,0(r2)
             break;
    6844:	0001883a 	nop
    }
    return (flags_rdy);
    6848:	e0bff30b 	ldhu	r2,-52(fp)
}
    684c:	e037883a 	mov	sp,fp
    6850:	df000017 	ldw	fp,0(sp)
    6854:	dec00104 	addi	sp,sp,4
    6858:	f800283a 	ret

0000685c <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
    685c:	defff804 	addi	sp,sp,-32
    6860:	df000715 	stw	fp,28(sp)
    6864:	df000704 	addi	fp,sp,28
    6868:	2005883a 	mov	r2,r4
    686c:	e17fff15 	stw	r5,-4(fp)
    6870:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
    6874:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
    6878:	e0bfff17 	ldw	r2,-4(fp)
    687c:	1000021e 	bne	r2,zero,6888 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
    6880:	0005883a 	mov	r2,zero
    6884:	00003b06 	br	6974 <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
    6888:	00800074 	movhi	r2,1
    688c:	10879504 	addi	r2,r2,7764
    6890:	10800003 	ldbu	r2,0(r2)
    6894:	10803fcc 	andi	r2,r2,255
    6898:	10000526 	beq	r2,zero,68b0 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
    689c:	e0bfff17 	ldw	r2,-4(fp)
    68a0:	00c00404 	movi	r3,16
    68a4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
    68a8:	0005883a 	mov	r2,zero
    68ac:	00003106 	br	6974 <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    68b0:	0005303a 	rdctl	r2,status
    68b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    68b8:	e0fffd17 	ldw	r3,-12(fp)
    68bc:	00bfff84 	movi	r2,-2
    68c0:	1884703a 	and	r2,r3,r2
    68c4:	1001703a 	wrctl	status,r2
  
  return context;
    68c8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    68cc:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
    68d0:	00800074 	movhi	r2,1
    68d4:	10879804 	addi	r2,r2,7776
    68d8:	10800017 	ldw	r2,0(r2)
    68dc:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
    68e0:	e0bffb17 	ldw	r2,-20(fp)
    68e4:	10001b26 	beq	r2,zero,6954 <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
    68e8:	00800074 	movhi	r2,1
    68ec:	10879804 	addi	r2,r2,7776
    68f0:	10800017 	ldw	r2,0(r2)
    68f4:	10c00117 	ldw	r3,4(r2)
    68f8:	00800074 	movhi	r2,1
    68fc:	10879804 	addi	r2,r2,7776
    6900:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
    6904:	e0bffb17 	ldw	r2,-20(fp)
    6908:	00c00144 	movi	r3,5
    690c:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
    6910:	e0bffb17 	ldw	r2,-20(fp)
    6914:	e0fffe0b 	ldhu	r3,-8(fp)
    6918:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
    691c:	e0bffb17 	ldw	r2,-20(fp)
    6920:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
    6924:	e0bffb17 	ldw	r2,-20(fp)
    6928:	00c00fc4 	movi	r3,63
    692c:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    6930:	e0bffb17 	ldw	r2,-20(fp)
    6934:	100002c5 	stb	zero,11(r2)
    6938:	e0bff917 	ldw	r2,-28(fp)
    693c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6940:	e0bffa17 	ldw	r2,-24(fp)
    6944:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
    6948:	e0bfff17 	ldw	r2,-4(fp)
    694c:	10000005 	stb	zero,0(r2)
    6950:	00000706 	br	6970 <OSFlagCreate+0x114>
    6954:	e0bff917 	ldw	r2,-28(fp)
    6958:	e0bffc15 	stw	r2,-16(fp)
    695c:	e0bffc17 	ldw	r2,-16(fp)
    6960:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
    6964:	e0bfff17 	ldw	r2,-4(fp)
    6968:	00c01c84 	movi	r3,114
    696c:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
    6970:	e0bffb17 	ldw	r2,-20(fp)
}
    6974:	e037883a 	mov	sp,fp
    6978:	df000017 	ldw	fp,0(sp)
    697c:	dec00104 	addi	sp,sp,4
    6980:	f800283a 	ret

00006984 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
    6984:	defff204 	addi	sp,sp,-56
    6988:	dfc00d15 	stw	ra,52(sp)
    698c:	df000c15 	stw	fp,48(sp)
    6990:	df000c04 	addi	fp,sp,48
    6994:	e13ffd15 	stw	r4,-12(fp)
    6998:	2805883a 	mov	r2,r5
    699c:	e1bfff15 	stw	r6,-4(fp)
    69a0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    69a4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    69a8:	e0bfff17 	ldw	r2,-4(fp)
    69ac:	1000021e 	bne	r2,zero,69b8 <OSFlagDel+0x34>
        return (pgrp);
    69b0:	e0bffd17 	ldw	r2,-12(fp)
    69b4:	00008a06 	br	6be0 <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    69b8:	e0bffd17 	ldw	r2,-12(fp)
    69bc:	1000051e 	bne	r2,zero,69d4 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    69c0:	e0bfff17 	ldw	r2,-4(fp)
    69c4:	00c01b84 	movi	r3,110
    69c8:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    69cc:	e0bffd17 	ldw	r2,-12(fp)
    69d0:	00008306 	br	6be0 <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    69d4:	00800074 	movhi	r2,1
    69d8:	10879504 	addi	r2,r2,7764
    69dc:	10800003 	ldbu	r2,0(r2)
    69e0:	10803fcc 	andi	r2,r2,255
    69e4:	10000526 	beq	r2,zero,69fc <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    69e8:	e0bfff17 	ldw	r2,-4(fp)
    69ec:	00c003c4 	movi	r3,15
    69f0:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    69f4:	e0bffd17 	ldw	r2,-12(fp)
    69f8:	00007906 	br	6be0 <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
    69fc:	e0bffd17 	ldw	r2,-12(fp)
    6a00:	10800003 	ldbu	r2,0(r2)
    6a04:	10803fcc 	andi	r2,r2,255
    6a08:	10800160 	cmpeqi	r2,r2,5
    6a0c:	1000051e 	bne	r2,zero,6a24 <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
    6a10:	e0bfff17 	ldw	r2,-4(fp)
    6a14:	00c00044 	movi	r3,1
    6a18:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    6a1c:	e0bffd17 	ldw	r2,-12(fp)
    6a20:	00006f06 	br	6be0 <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6a24:	0005303a 	rdctl	r2,status
    6a28:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6a2c:	e0fffc17 	ldw	r3,-16(fp)
    6a30:	00bfff84 	movi	r2,-2
    6a34:	1884703a 	and	r2,r3,r2
    6a38:	1001703a 	wrctl	status,r2
  
  return context;
    6a3c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    6a40:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
    6a44:	e0bffd17 	ldw	r2,-12(fp)
    6a48:	10800117 	ldw	r2,4(r2)
    6a4c:	10000326 	beq	r2,zero,6a5c <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    6a50:	00800044 	movi	r2,1
    6a54:	e0bff405 	stb	r2,-48(fp)
    6a58:	00000106 	br	6a60 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    6a5c:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
    6a60:	e0bffe03 	ldbu	r2,-8(fp)
    6a64:	10000326 	beq	r2,zero,6a74 <OSFlagDel+0xf0>
    6a68:	10800060 	cmpeqi	r2,r2,1
    6a6c:	1000271e 	bne	r2,zero,6b0c <OSFlagDel+0x188>
    6a70:	00005006 	br	6bb4 <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
    6a74:	e0bff403 	ldbu	r2,-48(fp)
    6a78:	10001a1e 	bne	r2,zero,6ae4 <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
    6a7c:	e0bffd17 	ldw	r2,-12(fp)
    6a80:	00c00fc4 	movi	r3,63
    6a84:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    6a88:	e0bffd17 	ldw	r2,-12(fp)
    6a8c:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    6a90:	e0bffd17 	ldw	r2,-12(fp)
    6a94:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
    6a98:	00800074 	movhi	r2,1
    6a9c:	10879804 	addi	r2,r2,7776
    6aa0:	10c00017 	ldw	r3,0(r2)
    6aa4:	e0bffd17 	ldw	r2,-12(fp)
    6aa8:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
    6aac:	e0bffd17 	ldw	r2,-12(fp)
    6ab0:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
    6ab4:	00800074 	movhi	r2,1
    6ab8:	10879804 	addi	r2,r2,7776
    6abc:	e0fffd17 	ldw	r3,-12(fp)
    6ac0:	10c00015 	stw	r3,0(r2)
    6ac4:	e0bff717 	ldw	r2,-36(fp)
    6ac8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6acc:	e0bff817 	ldw	r2,-32(fp)
    6ad0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
    6ad4:	e0bfff17 	ldw	r2,-4(fp)
    6ad8:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
    6adc:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
    6ae0:	00003e06 	br	6bdc <OSFlagDel+0x258>
    6ae4:	e0bff717 	ldw	r2,-36(fp)
    6ae8:	e0bff915 	stw	r2,-28(fp)
    6aec:	e0bff917 	ldw	r2,-28(fp)
    6af0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
    6af4:	e0bfff17 	ldw	r2,-4(fp)
    6af8:	00c01244 	movi	r3,73
    6afc:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
    6b00:	e0bffd17 	ldw	r2,-12(fp)
    6b04:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    6b08:	00003406 	br	6bdc <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    6b0c:	e0bffd17 	ldw	r2,-12(fp)
    6b10:	10800117 	ldw	r2,4(r2)
    6b14:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    6b18:	00000606 	br	6b34 <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
    6b1c:	000b883a 	mov	r5,zero
    6b20:	e13ff517 	ldw	r4,-44(fp)
    6b24:	0007bf80 	call	7bf8 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    6b28:	e0bff517 	ldw	r2,-44(fp)
    6b2c:	10800017 	ldw	r2,0(r2)
    6b30:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    6b34:	e0bff517 	ldw	r2,-44(fp)
    6b38:	103ff81e 	bne	r2,zero,6b1c <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
    6b3c:	e0bffd17 	ldw	r2,-12(fp)
    6b40:	00c00fc4 	movi	r3,63
    6b44:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    6b48:	e0bffd17 	ldw	r2,-12(fp)
    6b4c:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    6b50:	e0bffd17 	ldw	r2,-12(fp)
    6b54:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
    6b58:	00800074 	movhi	r2,1
    6b5c:	10879804 	addi	r2,r2,7776
    6b60:	10c00017 	ldw	r3,0(r2)
    6b64:	e0bffd17 	ldw	r2,-12(fp)
    6b68:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
    6b6c:	e0bffd17 	ldw	r2,-12(fp)
    6b70:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
    6b74:	00800074 	movhi	r2,1
    6b78:	10879804 	addi	r2,r2,7776
    6b7c:	e0fffd17 	ldw	r3,-12(fp)
    6b80:	10c00015 	stw	r3,0(r2)
    6b84:	e0bff717 	ldw	r2,-36(fp)
    6b88:	e0bffa15 	stw	r2,-24(fp)
    6b8c:	e0bffa17 	ldw	r2,-24(fp)
    6b90:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    6b94:	e0bff403 	ldbu	r2,-48(fp)
    6b98:	10800058 	cmpnei	r2,r2,1
    6b9c:	1000011e 	bne	r2,zero,6ba4 <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    6ba0:	0005bc00 	call	5bc0 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
    6ba4:	e0bfff17 	ldw	r2,-4(fp)
    6ba8:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
    6bac:	e03ff615 	stw	zero,-40(fp)
             break;
    6bb0:	00000a06 	br	6bdc <OSFlagDel+0x258>
    6bb4:	e0bff717 	ldw	r2,-36(fp)
    6bb8:	e0bffb15 	stw	r2,-20(fp)
    6bbc:	e0bffb17 	ldw	r2,-20(fp)
    6bc0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
    6bc4:	e0bfff17 	ldw	r2,-4(fp)
    6bc8:	00c001c4 	movi	r3,7
    6bcc:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
    6bd0:	e0bffd17 	ldw	r2,-12(fp)
    6bd4:	e0bff615 	stw	r2,-40(fp)
             break;
    6bd8:	0001883a 	nop
    }
    return (pgrp_return);
    6bdc:	e0bff617 	ldw	r2,-40(fp)
}
    6be0:	e037883a 	mov	sp,fp
    6be4:	dfc00117 	ldw	ra,4(sp)
    6be8:	df000017 	ldw	fp,0(sp)
    6bec:	dec00204 	addi	sp,sp,8
    6bf0:	f800283a 	ret

00006bf4 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    6bf4:	defff604 	addi	sp,sp,-40
    6bf8:	dfc00915 	stw	ra,36(sp)
    6bfc:	df000815 	stw	fp,32(sp)
    6c00:	df000804 	addi	fp,sp,32
    6c04:	e13ffd15 	stw	r4,-12(fp)
    6c08:	e17ffe15 	stw	r5,-8(fp)
    6c0c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    6c10:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    6c14:	e0bfff17 	ldw	r2,-4(fp)
    6c18:	1000021e 	bne	r2,zero,6c24 <OSFlagNameGet+0x30>
        return (0);
    6c1c:	0005883a 	mov	r2,zero
    6c20:	00003b06 	br	6d10 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    6c24:	e0bffd17 	ldw	r2,-12(fp)
    6c28:	1000051e 	bne	r2,zero,6c40 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    6c2c:	e0bfff17 	ldw	r2,-4(fp)
    6c30:	00c01b84 	movi	r3,110
    6c34:	10c00005 	stb	r3,0(r2)
        return (0);
    6c38:	0005883a 	mov	r2,zero
    6c3c:	00003406 	br	6d10 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    6c40:	e0bffe17 	ldw	r2,-8(fp)
    6c44:	1000051e 	bne	r2,zero,6c5c <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    6c48:	e0bfff17 	ldw	r2,-4(fp)
    6c4c:	00c00304 	movi	r3,12
    6c50:	10c00005 	stb	r3,0(r2)
        return (0);
    6c54:	0005883a 	mov	r2,zero
    6c58:	00002d06 	br	6d10 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    6c5c:	00800074 	movhi	r2,1
    6c60:	10879504 	addi	r2,r2,7764
    6c64:	10800003 	ldbu	r2,0(r2)
    6c68:	10803fcc 	andi	r2,r2,255
    6c6c:	10000526 	beq	r2,zero,6c84 <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
    6c70:	e0bfff17 	ldw	r2,-4(fp)
    6c74:	00c00444 	movi	r3,17
    6c78:	10c00005 	stb	r3,0(r2)
        return (0);
    6c7c:	0005883a 	mov	r2,zero
    6c80:	00002306 	br	6d10 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6c84:	0005303a 	rdctl	r2,status
    6c88:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6c8c:	e0fffc17 	ldw	r3,-16(fp)
    6c90:	00bfff84 	movi	r2,-2
    6c94:	1884703a 	and	r2,r3,r2
    6c98:	1001703a 	wrctl	status,r2
  
  return context;
    6c9c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    6ca0:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    6ca4:	e0bffd17 	ldw	r2,-12(fp)
    6ca8:	10800003 	ldbu	r2,0(r2)
    6cac:	10803fcc 	andi	r2,r2,255
    6cb0:	10800160 	cmpeqi	r2,r2,5
    6cb4:	1000091e 	bne	r2,zero,6cdc <OSFlagNameGet+0xe8>
    6cb8:	e0bff817 	ldw	r2,-32(fp)
    6cbc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6cc0:	e0bff917 	ldw	r2,-28(fp)
    6cc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    6cc8:	e0bfff17 	ldw	r2,-4(fp)
    6ccc:	00c00044 	movi	r3,1
    6cd0:	10c00005 	stb	r3,0(r2)
        return (0);
    6cd4:	0005883a 	mov	r2,zero
    6cd8:	00000d06 	br	6d10 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
    6cdc:	e0bffd17 	ldw	r2,-12(fp)
    6ce0:	10800284 	addi	r2,r2,10
    6ce4:	100b883a 	mov	r5,r2
    6ce8:	e13ffe17 	ldw	r4,-8(fp)
    6cec:	0005d640 	call	5d64 <OS_StrCopy>
    6cf0:	e0bffb05 	stb	r2,-20(fp)
    6cf4:	e0bff817 	ldw	r2,-32(fp)
    6cf8:	e0bffa15 	stw	r2,-24(fp)
    6cfc:	e0bffa17 	ldw	r2,-24(fp)
    6d00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    6d04:	e0bfff17 	ldw	r2,-4(fp)
    6d08:	10000005 	stb	zero,0(r2)
    return (len);
    6d0c:	e0bffb03 	ldbu	r2,-20(fp)
}
    6d10:	e037883a 	mov	sp,fp
    6d14:	dfc00117 	ldw	ra,4(sp)
    6d18:	df000017 	ldw	fp,0(sp)
    6d1c:	dec00204 	addi	sp,sp,8
    6d20:	f800283a 	ret

00006d24 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    6d24:	defff504 	addi	sp,sp,-44
    6d28:	dfc00a15 	stw	ra,40(sp)
    6d2c:	df000915 	stw	fp,36(sp)
    6d30:	df000904 	addi	fp,sp,36
    6d34:	e13ffd15 	stw	r4,-12(fp)
    6d38:	e17ffe15 	stw	r5,-8(fp)
    6d3c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    6d40:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    6d44:	e0bfff17 	ldw	r2,-4(fp)
    6d48:	10004526 	beq	r2,zero,6e60 <OSFlagNameSet+0x13c>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    6d4c:	e0bffd17 	ldw	r2,-12(fp)
    6d50:	1000041e 	bne	r2,zero,6d64 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    6d54:	e0bfff17 	ldw	r2,-4(fp)
    6d58:	00c01b84 	movi	r3,110
    6d5c:	10c00005 	stb	r3,0(r2)
        return;
    6d60:	00004006 	br	6e64 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    6d64:	e0bffe17 	ldw	r2,-8(fp)
    6d68:	1000041e 	bne	r2,zero,6d7c <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    6d6c:	e0bfff17 	ldw	r2,-4(fp)
    6d70:	00c00304 	movi	r3,12
    6d74:	10c00005 	stb	r3,0(r2)
        return;
    6d78:	00003a06 	br	6e64 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    6d7c:	00800074 	movhi	r2,1
    6d80:	10879504 	addi	r2,r2,7764
    6d84:	10800003 	ldbu	r2,0(r2)
    6d88:	10803fcc 	andi	r2,r2,255
    6d8c:	10000426 	beq	r2,zero,6da0 <OSFlagNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
    6d90:	e0bfff17 	ldw	r2,-4(fp)
    6d94:	00c00484 	movi	r3,18
    6d98:	10c00005 	stb	r3,0(r2)
        return;
    6d9c:	00003106 	br	6e64 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6da0:	0005303a 	rdctl	r2,status
    6da4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6da8:	e0fffc17 	ldw	r3,-16(fp)
    6dac:	00bfff84 	movi	r2,-2
    6db0:	1884703a 	and	r2,r3,r2
    6db4:	1001703a 	wrctl	status,r2
  
  return context;
    6db8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    6dbc:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    6dc0:	e0bffd17 	ldw	r2,-12(fp)
    6dc4:	10800003 	ldbu	r2,0(r2)
    6dc8:	10803fcc 	andi	r2,r2,255
    6dcc:	10800160 	cmpeqi	r2,r2,5
    6dd0:	1000081e 	bne	r2,zero,6df4 <OSFlagNameSet+0xd0>
    6dd4:	e0bff717 	ldw	r2,-36(fp)
    6dd8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6ddc:	e0bff817 	ldw	r2,-32(fp)
    6de0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    6de4:	e0bfff17 	ldw	r2,-4(fp)
    6de8:	00c00044 	movi	r3,1
    6dec:	10c00005 	stb	r3,0(r2)
        return;
    6df0:	00001c06 	br	6e64 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    6df4:	e13ffe17 	ldw	r4,-8(fp)
    6df8:	0005dd80 	call	5dd8 <OS_StrLen>
    6dfc:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
    6e00:	e0bffa03 	ldbu	r2,-24(fp)
    6e04:	10800830 	cmpltui	r2,r2,32
    6e08:	1000081e 	bne	r2,zero,6e2c <OSFlagNameSet+0x108>
    6e0c:	e0bff717 	ldw	r2,-36(fp)
    6e10:	e0bff915 	stw	r2,-28(fp)
    6e14:	e0bff917 	ldw	r2,-28(fp)
    6e18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
    6e1c:	e0bfff17 	ldw	r2,-4(fp)
    6e20:	00c01cc4 	movi	r3,115
    6e24:	10c00005 	stb	r3,0(r2)
        return;
    6e28:	00000e06 	br	6e64 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    6e2c:	e0bffd17 	ldw	r2,-12(fp)
    6e30:	10800284 	addi	r2,r2,10
    6e34:	e17ffe17 	ldw	r5,-8(fp)
    6e38:	1009883a 	mov	r4,r2
    6e3c:	0005d640 	call	5d64 <OS_StrCopy>
    6e40:	e0bff717 	ldw	r2,-36(fp)
    6e44:	e0bffb15 	stw	r2,-20(fp)
    6e48:	e0bffb17 	ldw	r2,-20(fp)
    6e4c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    6e50:	e0bfff17 	ldw	r2,-4(fp)
    6e54:	10000005 	stb	zero,0(r2)
    return;
    6e58:	0001883a 	nop
    6e5c:	00000106 	br	6e64 <OSFlagNameSet+0x140>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    6e60:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
    6e64:	e037883a 	mov	sp,fp
    6e68:	dfc00117 	ldw	ra,4(sp)
    6e6c:	df000017 	ldw	fp,0(sp)
    6e70:	dec00204 	addi	sp,sp,8
    6e74:	f800283a 	ret

00006e78 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
    6e78:	deffe104 	addi	sp,sp,-124
    6e7c:	dfc01e15 	stw	ra,120(sp)
    6e80:	df001d15 	stw	fp,116(sp)
    6e84:	df001d04 	addi	fp,sp,116
    6e88:	e13ffc15 	stw	r4,-16(fp)
    6e8c:	2809883a 	mov	r4,r5
    6e90:	3007883a 	mov	r3,r6
    6e94:	3805883a 	mov	r2,r7
    6e98:	e13ffd0d 	sth	r4,-12(fp)
    6e9c:	e0fffe05 	stb	r3,-8(fp)
    6ea0:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    6ea4:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    6ea8:	e0800217 	ldw	r2,8(fp)
    6eac:	1000021e 	bne	r2,zero,6eb8 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
    6eb0:	0005883a 	mov	r2,zero
    6eb4:	00016f06 	br	7474 <OSFlagPend+0x5fc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    6eb8:	e0bffc17 	ldw	r2,-16(fp)
    6ebc:	1000051e 	bne	r2,zero,6ed4 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    6ec0:	e0800217 	ldw	r2,8(fp)
    6ec4:	00c01b84 	movi	r3,110
    6ec8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6ecc:	0005883a 	mov	r2,zero
    6ed0:	00016806 	br	7474 <OSFlagPend+0x5fc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    6ed4:	00800074 	movhi	r2,1
    6ed8:	10879504 	addi	r2,r2,7764
    6edc:	10800003 	ldbu	r2,0(r2)
    6ee0:	10803fcc 	andi	r2,r2,255
    6ee4:	10000526 	beq	r2,zero,6efc <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
    6ee8:	e0800217 	ldw	r2,8(fp)
    6eec:	00c00084 	movi	r3,2
    6ef0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6ef4:	0005883a 	mov	r2,zero
    6ef8:	00015e06 	br	7474 <OSFlagPend+0x5fc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
    6efc:	00800074 	movhi	r2,1
    6f00:	10878704 	addi	r2,r2,7708
    6f04:	10800003 	ldbu	r2,0(r2)
    6f08:	10803fcc 	andi	r2,r2,255
    6f0c:	10000526 	beq	r2,zero,6f24 <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
    6f10:	e0800217 	ldw	r2,8(fp)
    6f14:	00c00344 	movi	r3,13
    6f18:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6f1c:	0005883a 	mov	r2,zero
    6f20:	00015406 	br	7474 <OSFlagPend+0x5fc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    6f24:	e0bffc17 	ldw	r2,-16(fp)
    6f28:	10800003 	ldbu	r2,0(r2)
    6f2c:	10803fcc 	andi	r2,r2,255
    6f30:	10800160 	cmpeqi	r2,r2,5
    6f34:	1000051e 	bne	r2,zero,6f4c <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
    6f38:	e0800217 	ldw	r2,8(fp)
    6f3c:	00c00044 	movi	r3,1
    6f40:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6f44:	0005883a 	mov	r2,zero
    6f48:	00014a06 	br	7474 <OSFlagPend+0x5fc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    6f4c:	e0fffe03 	ldbu	r3,-8(fp)
    6f50:	00bfe004 	movi	r2,-128
    6f54:	1884703a 	and	r2,r3,r2
    6f58:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
    6f5c:	e0bfe603 	ldbu	r2,-104(fp)
    6f60:	10000626 	beq	r2,zero,6f7c <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
    6f64:	e0bffe03 	ldbu	r2,-8(fp)
    6f68:	10801fcc 	andi	r2,r2,127
    6f6c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    6f70:	00800044 	movi	r2,1
    6f74:	e0bfe405 	stb	r2,-112(fp)
    6f78:	00000106 	br	6f80 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
    6f7c:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6f80:	0005303a 	rdctl	r2,status
    6f84:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6f88:	e0fff617 	ldw	r3,-40(fp)
    6f8c:	00bfff84 	movi	r2,-2
    6f90:	1884703a 	and	r2,r3,r2
    6f94:	1001703a 	wrctl	status,r2
  
  return context;
    6f98:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    6f9c:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
    6fa0:	e0bffe03 	ldbu	r2,-8(fp)
    6fa4:	10c00060 	cmpeqi	r3,r2,1
    6fa8:	1800981e 	bne	r3,zero,720c <OSFlagPend+0x394>
    6fac:	10c00088 	cmpgei	r3,r2,2
    6fb0:	1800021e 	bne	r3,zero,6fbc <OSFlagPend+0x144>
    6fb4:	10006526 	beq	r2,zero,714c <OSFlagPend+0x2d4>
    6fb8:	0000c306 	br	72c8 <OSFlagPend+0x450>
    6fbc:	10c000a0 	cmpeqi	r3,r2,2
    6fc0:	1800031e 	bne	r3,zero,6fd0 <OSFlagPend+0x158>
    6fc4:	108000e0 	cmpeqi	r2,r2,3
    6fc8:	1000311e 	bne	r2,zero,7090 <OSFlagPend+0x218>
    6fcc:	0000be06 	br	72c8 <OSFlagPend+0x450>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
    6fd0:	e0bffc17 	ldw	r2,-16(fp)
    6fd4:	10c0020b 	ldhu	r3,8(r2)
    6fd8:	e0bffd0b 	ldhu	r2,-12(fp)
    6fdc:	1884703a 	and	r2,r3,r2
    6fe0:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    6fe4:	e0ffe80b 	ldhu	r3,-96(fp)
    6fe8:	e0bffd0b 	ldhu	r2,-12(fp)
    6fec:	1880191e 	bne	r3,r2,7054 <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    6ff0:	e0bfe403 	ldbu	r2,-112(fp)
    6ff4:	10800058 	cmpnei	r2,r2,1
    6ff8:	1000091e 	bne	r2,zero,7020 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    6ffc:	e0bffc17 	ldw	r2,-16(fp)
    7000:	1080020b 	ldhu	r2,8(r2)
    7004:	1007883a 	mov	r3,r2
    7008:	e0bfe80b 	ldhu	r2,-96(fp)
    700c:	0084303a 	nor	r2,zero,r2
    7010:	1884703a 	and	r2,r3,r2
    7014:	1007883a 	mov	r3,r2
    7018:	e0bffc17 	ldw	r2,-16(fp)
    701c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    7020:	00800074 	movhi	r2,1
    7024:	10879604 	addi	r2,r2,7768
    7028:	10800017 	ldw	r2,0(r2)
    702c:	e0ffe80b 	ldhu	r3,-96(fp)
    7030:	10c00b0d 	sth	r3,44(r2)
    7034:	e0bfe517 	ldw	r2,-108(fp)
    7038:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    703c:	e0bfe717 	ldw	r2,-100(fp)
    7040:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    7044:	e0800217 	ldw	r2,8(fp)
    7048:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    704c:	e0bfe80b 	ldhu	r2,-96(fp)
    7050:	00010806 	br	7474 <OSFlagPend+0x5fc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    7054:	e13ffd0b 	ldhu	r4,-12(fp)
    7058:	e17ffe03 	ldbu	r5,-8(fp)
    705c:	e0bfff0b 	ldhu	r2,-4(fp)
    7060:	e0fff704 	addi	r3,fp,-36
    7064:	d8800015 	stw	r2,0(sp)
    7068:	280f883a 	mov	r7,r5
    706c:	200d883a 	mov	r6,r4
    7070:	180b883a 	mov	r5,r3
    7074:	e13ffc17 	ldw	r4,-16(fp)
    7078:	00079480 	call	7948 <OS_FlagBlock>
    707c:	e0bfe517 	ldw	r2,-108(fp)
    7080:	e0bfe915 	stw	r2,-92(fp)
    7084:	e0bfe917 	ldw	r2,-92(fp)
    7088:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    708c:	00009806 	br	72f0 <OSFlagPend+0x478>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
    7090:	e0bffc17 	ldw	r2,-16(fp)
    7094:	10c0020b 	ldhu	r3,8(r2)
    7098:	e0bffd0b 	ldhu	r2,-12(fp)
    709c:	1884703a 	and	r2,r3,r2
    70a0:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    70a4:	e0bfe80b 	ldhu	r2,-96(fp)
    70a8:	10001926 	beq	r2,zero,7110 <OSFlagPend+0x298>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    70ac:	e0bfe403 	ldbu	r2,-112(fp)
    70b0:	10800058 	cmpnei	r2,r2,1
    70b4:	1000091e 	bne	r2,zero,70dc <OSFlagPend+0x264>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    70b8:	e0bffc17 	ldw	r2,-16(fp)
    70bc:	1080020b 	ldhu	r2,8(r2)
    70c0:	1007883a 	mov	r3,r2
    70c4:	e0bfe80b 	ldhu	r2,-96(fp)
    70c8:	0084303a 	nor	r2,zero,r2
    70cc:	1884703a 	and	r2,r3,r2
    70d0:	1007883a 	mov	r3,r2
    70d4:	e0bffc17 	ldw	r2,-16(fp)
    70d8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    70dc:	00800074 	movhi	r2,1
    70e0:	10879604 	addi	r2,r2,7768
    70e4:	10800017 	ldw	r2,0(r2)
    70e8:	e0ffe80b 	ldhu	r3,-96(fp)
    70ec:	10c00b0d 	sth	r3,44(r2)
    70f0:	e0bfe517 	ldw	r2,-108(fp)
    70f4:	e0bfea15 	stw	r2,-88(fp)
    70f8:	e0bfea17 	ldw	r2,-88(fp)
    70fc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    7100:	e0800217 	ldw	r2,8(fp)
    7104:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    7108:	e0bfe80b 	ldhu	r2,-96(fp)
    710c:	0000d906 	br	7474 <OSFlagPend+0x5fc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    7110:	e13ffd0b 	ldhu	r4,-12(fp)
    7114:	e17ffe03 	ldbu	r5,-8(fp)
    7118:	e0bfff0b 	ldhu	r2,-4(fp)
    711c:	e0fff704 	addi	r3,fp,-36
    7120:	d8800015 	stw	r2,0(sp)
    7124:	280f883a 	mov	r7,r5
    7128:	200d883a 	mov	r6,r4
    712c:	180b883a 	mov	r5,r3
    7130:	e13ffc17 	ldw	r4,-16(fp)
    7134:	00079480 	call	7948 <OS_FlagBlock>
    7138:	e0bfe517 	ldw	r2,-108(fp)
    713c:	e0bfeb15 	stw	r2,-84(fp)
    7140:	e0bfeb17 	ldw	r2,-84(fp)
    7144:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    7148:	00006906 	br	72f0 <OSFlagPend+0x478>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    714c:	e0bffc17 	ldw	r2,-16(fp)
    7150:	1080020b 	ldhu	r2,8(r2)
    7154:	0084303a 	nor	r2,zero,r2
    7158:	1007883a 	mov	r3,r2
    715c:	e0bffd0b 	ldhu	r2,-12(fp)
    7160:	1884703a 	and	r2,r3,r2
    7164:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    7168:	e0ffe80b 	ldhu	r3,-96(fp)
    716c:	e0bffd0b 	ldhu	r2,-12(fp)
    7170:	1880171e 	bne	r3,r2,71d0 <OSFlagPend+0x358>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    7174:	e0bfe403 	ldbu	r2,-112(fp)
    7178:	10800058 	cmpnei	r2,r2,1
    717c:	1000071e 	bne	r2,zero,719c <OSFlagPend+0x324>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    7180:	e0bffc17 	ldw	r2,-16(fp)
    7184:	10c0020b 	ldhu	r3,8(r2)
    7188:	e0bfe80b 	ldhu	r2,-96(fp)
    718c:	1884b03a 	or	r2,r3,r2
    7190:	1007883a 	mov	r3,r2
    7194:	e0bffc17 	ldw	r2,-16(fp)
    7198:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    719c:	00800074 	movhi	r2,1
    71a0:	10879604 	addi	r2,r2,7768
    71a4:	10800017 	ldw	r2,0(r2)
    71a8:	e0ffe80b 	ldhu	r3,-96(fp)
    71ac:	10c00b0d 	sth	r3,44(r2)
    71b0:	e0bfe517 	ldw	r2,-108(fp)
    71b4:	e0bfec15 	stw	r2,-80(fp)
    71b8:	e0bfec17 	ldw	r2,-80(fp)
    71bc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    71c0:	e0800217 	ldw	r2,8(fp)
    71c4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    71c8:	e0bfe80b 	ldhu	r2,-96(fp)
    71cc:	0000a906 	br	7474 <OSFlagPend+0x5fc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    71d0:	e13ffd0b 	ldhu	r4,-12(fp)
    71d4:	e17ffe03 	ldbu	r5,-8(fp)
    71d8:	e0bfff0b 	ldhu	r2,-4(fp)
    71dc:	e0fff704 	addi	r3,fp,-36
    71e0:	d8800015 	stw	r2,0(sp)
    71e4:	280f883a 	mov	r7,r5
    71e8:	200d883a 	mov	r6,r4
    71ec:	180b883a 	mov	r5,r3
    71f0:	e13ffc17 	ldw	r4,-16(fp)
    71f4:	00079480 	call	7948 <OS_FlagBlock>
    71f8:	e0bfe517 	ldw	r2,-108(fp)
    71fc:	e0bfed15 	stw	r2,-76(fp)
    7200:	e0bfed17 	ldw	r2,-76(fp)
    7204:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    7208:	00003906 	br	72f0 <OSFlagPend+0x478>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    720c:	e0bffc17 	ldw	r2,-16(fp)
    7210:	1080020b 	ldhu	r2,8(r2)
    7214:	0084303a 	nor	r2,zero,r2
    7218:	1007883a 	mov	r3,r2
    721c:	e0bffd0b 	ldhu	r2,-12(fp)
    7220:	1884703a 	and	r2,r3,r2
    7224:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    7228:	e0bfe80b 	ldhu	r2,-96(fp)
    722c:	10001726 	beq	r2,zero,728c <OSFlagPend+0x414>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    7230:	e0bfe403 	ldbu	r2,-112(fp)
    7234:	10800058 	cmpnei	r2,r2,1
    7238:	1000071e 	bne	r2,zero,7258 <OSFlagPend+0x3e0>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    723c:	e0bffc17 	ldw	r2,-16(fp)
    7240:	10c0020b 	ldhu	r3,8(r2)
    7244:	e0bfe80b 	ldhu	r2,-96(fp)
    7248:	1884b03a 	or	r2,r3,r2
    724c:	1007883a 	mov	r3,r2
    7250:	e0bffc17 	ldw	r2,-16(fp)
    7254:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    7258:	00800074 	movhi	r2,1
    725c:	10879604 	addi	r2,r2,7768
    7260:	10800017 	ldw	r2,0(r2)
    7264:	e0ffe80b 	ldhu	r3,-96(fp)
    7268:	10c00b0d 	sth	r3,44(r2)
    726c:	e0bfe517 	ldw	r2,-108(fp)
    7270:	e0bfee15 	stw	r2,-72(fp)
    7274:	e0bfee17 	ldw	r2,-72(fp)
    7278:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    727c:	e0800217 	ldw	r2,8(fp)
    7280:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    7284:	e0bfe80b 	ldhu	r2,-96(fp)
    7288:	00007a06 	br	7474 <OSFlagPend+0x5fc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    728c:	e13ffd0b 	ldhu	r4,-12(fp)
    7290:	e17ffe03 	ldbu	r5,-8(fp)
    7294:	e0bfff0b 	ldhu	r2,-4(fp)
    7298:	e0fff704 	addi	r3,fp,-36
    729c:	d8800015 	stw	r2,0(sp)
    72a0:	280f883a 	mov	r7,r5
    72a4:	200d883a 	mov	r6,r4
    72a8:	180b883a 	mov	r5,r3
    72ac:	e13ffc17 	ldw	r4,-16(fp)
    72b0:	00079480 	call	7948 <OS_FlagBlock>
    72b4:	e0bfe517 	ldw	r2,-108(fp)
    72b8:	e0bfef15 	stw	r2,-68(fp)
    72bc:	e0bfef17 	ldw	r2,-68(fp)
    72c0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    72c4:	00000a06 	br	72f0 <OSFlagPend+0x478>
    72c8:	e0bfe517 	ldw	r2,-108(fp)
    72cc:	e0bff015 	stw	r2,-64(fp)
    72d0:	e0bff017 	ldw	r2,-64(fp)
    72d4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    72d8:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
    72dc:	e0800217 	ldw	r2,8(fp)
    72e0:	00c01bc4 	movi	r3,111
    72e4:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
    72e8:	e0bfe80b 	ldhu	r2,-96(fp)
    72ec:	00006106 	br	7474 <OSFlagPend+0x5fc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
    72f0:	0005bc00 	call	5bc0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    72f4:	0005303a 	rdctl	r2,status
    72f8:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    72fc:	e0fff117 	ldw	r3,-60(fp)
    7300:	00bfff84 	movi	r2,-2
    7304:	1884703a 	and	r2,r3,r2
    7308:	1001703a 	wrctl	status,r2
  
  return context;
    730c:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
    7310:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
    7314:	00800074 	movhi	r2,1
    7318:	10879604 	addi	r2,r2,7768
    731c:	10800017 	ldw	r2,0(r2)
    7320:	10800c43 	ldbu	r2,49(r2)
    7324:	10803fcc 	andi	r2,r2,255
    7328:	10002226 	beq	r2,zero,73b4 <OSFlagPend+0x53c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
    732c:	00800074 	movhi	r2,1
    7330:	10879604 	addi	r2,r2,7768
    7334:	10800017 	ldw	r2,0(r2)
    7338:	10800c43 	ldbu	r2,49(r2)
    733c:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    7340:	00800074 	movhi	r2,1
    7344:	10879604 	addi	r2,r2,7768
    7348:	10800017 	ldw	r2,0(r2)
    734c:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
    7350:	e0bff704 	addi	r2,fp,-36
    7354:	1009883a 	mov	r4,r2
    7358:	0007d080 	call	7d08 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
    735c:	00800074 	movhi	r2,1
    7360:	10879604 	addi	r2,r2,7768
    7364:	10800017 	ldw	r2,0(r2)
    7368:	10000c05 	stb	zero,48(r2)
    736c:	e0bfe517 	ldw	r2,-108(fp)
    7370:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7374:	e0bff217 	ldw	r2,-56(fp)
    7378:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
    737c:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
    7380:	e0bff303 	ldbu	r2,-52(fp)
    7384:	108000a0 	cmpeqi	r2,r2,2
    7388:	10000426 	beq	r2,zero,739c <OSFlagPend+0x524>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
    738c:	e0800217 	ldw	r2,8(fp)
    7390:	00c00384 	movi	r3,14
    7394:	10c00005 	stb	r3,0(r2)
                 break;
    7398:	00000406 	br	73ac <OSFlagPend+0x534>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
    739c:	e0800217 	ldw	r2,8(fp)
    73a0:	00c00284 	movi	r3,10
    73a4:	10c00005 	stb	r3,0(r2)
                 break;
    73a8:	0001883a 	nop
        }
        return (flags_rdy);
    73ac:	e0bfe80b 	ldhu	r2,-96(fp)
    73b0:	00003006 	br	7474 <OSFlagPend+0x5fc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
    73b4:	00800074 	movhi	r2,1
    73b8:	10879604 	addi	r2,r2,7768
    73bc:	10800017 	ldw	r2,0(r2)
    73c0:	10800b0b 	ldhu	r2,44(r2)
    73c4:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
    73c8:	e0bfe403 	ldbu	r2,-112(fp)
    73cc:	10800058 	cmpnei	r2,r2,1
    73d0:	1000211e 	bne	r2,zero,7458 <OSFlagPend+0x5e0>
        switch (wait_type) {
    73d4:	e0bffe03 	ldbu	r2,-8(fp)
    73d8:	10001616 	blt	r2,zero,7434 <OSFlagPend+0x5bc>
    73dc:	10c00090 	cmplti	r3,r2,2
    73e0:	18000c1e 	bne	r3,zero,7414 <OSFlagPend+0x59c>
    73e4:	10800108 	cmpgei	r2,r2,4
    73e8:	1000121e 	bne	r2,zero,7434 <OSFlagPend+0x5bc>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
    73ec:	e0bffc17 	ldw	r2,-16(fp)
    73f0:	1080020b 	ldhu	r2,8(r2)
    73f4:	1007883a 	mov	r3,r2
    73f8:	e0bfe80b 	ldhu	r2,-96(fp)
    73fc:	0084303a 	nor	r2,zero,r2
    7400:	1884703a 	and	r2,r3,r2
    7404:	1007883a 	mov	r3,r2
    7408:	e0bffc17 	ldw	r2,-16(fp)
    740c:	10c0020d 	sth	r3,8(r2)
                 break;
    7410:	00001106 	br	7458 <OSFlagPend+0x5e0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
    7414:	e0bffc17 	ldw	r2,-16(fp)
    7418:	10c0020b 	ldhu	r3,8(r2)
    741c:	e0bfe80b 	ldhu	r2,-96(fp)
    7420:	1884b03a 	or	r2,r3,r2
    7424:	1007883a 	mov	r3,r2
    7428:	e0bffc17 	ldw	r2,-16(fp)
    742c:	10c0020d 	sth	r3,8(r2)
                 break;
    7430:	00000906 	br	7458 <OSFlagPend+0x5e0>
    7434:	e0bfe517 	ldw	r2,-108(fp)
    7438:	e0bff415 	stw	r2,-48(fp)
    743c:	e0bff417 	ldw	r2,-48(fp)
    7440:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    7444:	e0800217 	ldw	r2,8(fp)
    7448:	00c01bc4 	movi	r3,111
    744c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    7450:	0005883a 	mov	r2,zero
    7454:	00000706 	br	7474 <OSFlagPend+0x5fc>
    7458:	e0bfe517 	ldw	r2,-108(fp)
    745c:	e0bff515 	stw	r2,-44(fp)
    7460:	e0bff517 	ldw	r2,-44(fp)
    7464:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
    7468:	e0800217 	ldw	r2,8(fp)
    746c:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
    7470:	e0bfe80b 	ldhu	r2,-96(fp)
}
    7474:	e037883a 	mov	sp,fp
    7478:	dfc00117 	ldw	ra,4(sp)
    747c:	df000017 	ldw	fp,0(sp)
    7480:	dec00204 	addi	sp,sp,8
    7484:	f800283a 	ret

00007488 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
    7488:	defffb04 	addi	sp,sp,-20
    748c:	df000415 	stw	fp,16(sp)
    7490:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    7494:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7498:	0005303a 	rdctl	r2,status
    749c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    74a0:	e0fffe17 	ldw	r3,-8(fp)
    74a4:	00bfff84 	movi	r2,-2
    74a8:	1884703a 	and	r2,r3,r2
    74ac:	1001703a 	wrctl	status,r2
  
  return context;
    74b0:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    74b4:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
    74b8:	00800074 	movhi	r2,1
    74bc:	10879604 	addi	r2,r2,7768
    74c0:	10800017 	ldw	r2,0(r2)
    74c4:	10800b0b 	ldhu	r2,44(r2)
    74c8:	e0bffd0d 	sth	r2,-12(fp)
    74cc:	e0bffc17 	ldw	r2,-16(fp)
    74d0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    74d4:	e0bfff17 	ldw	r2,-4(fp)
    74d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
    74dc:	e0bffd0b 	ldhu	r2,-12(fp)
}
    74e0:	e037883a 	mov	sp,fp
    74e4:	df000017 	ldw	fp,0(sp)
    74e8:	dec00104 	addi	sp,sp,4
    74ec:	f800283a 	ret

000074f0 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
    74f0:	deffef04 	addi	sp,sp,-68
    74f4:	dfc01015 	stw	ra,64(sp)
    74f8:	df000f15 	stw	fp,60(sp)
    74fc:	df000f04 	addi	fp,sp,60
    7500:	e13ffc15 	stw	r4,-16(fp)
    7504:	2807883a 	mov	r3,r5
    7508:	3005883a 	mov	r2,r6
    750c:	e1ffff15 	stw	r7,-4(fp)
    7510:	e0fffd0d 	sth	r3,-12(fp)
    7514:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
    7518:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    751c:	e0bfff17 	ldw	r2,-4(fp)
    7520:	1000021e 	bne	r2,zero,752c <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
    7524:	0005883a 	mov	r2,zero
    7528:	0000d106 	br	7870 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
    752c:	e0bffc17 	ldw	r2,-16(fp)
    7530:	1000051e 	bne	r2,zero,7548 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    7534:	e0bfff17 	ldw	r2,-4(fp)
    7538:	00c01b84 	movi	r3,110
    753c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    7540:	0005883a 	mov	r2,zero
    7544:	0000ca06 	br	7870 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
    7548:	e0bffc17 	ldw	r2,-16(fp)
    754c:	10800003 	ldbu	r2,0(r2)
    7550:	10803fcc 	andi	r2,r2,255
    7554:	10800160 	cmpeqi	r2,r2,5
    7558:	1000051e 	bne	r2,zero,7570 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
    755c:	e0bfff17 	ldw	r2,-4(fp)
    7560:	00c00044 	movi	r3,1
    7564:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    7568:	0005883a 	mov	r2,zero
    756c:	0000c006 	br	7870 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7570:	0005303a 	rdctl	r2,status
    7574:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7578:	e0fffb17 	ldw	r3,-20(fp)
    757c:	00bfff84 	movi	r2,-2
    7580:	1884703a 	and	r2,r3,r2
    7584:	1001703a 	wrctl	status,r2
  
  return context;
    7588:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    758c:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
    7590:	e0bffe03 	ldbu	r2,-8(fp)
    7594:	10000326 	beq	r2,zero,75a4 <OSFlagPost+0xb4>
    7598:	10800060 	cmpeqi	r2,r2,1
    759c:	10000b1e 	bne	r2,zero,75cc <OSFlagPost+0xdc>
    75a0:	00001206 	br	75ec <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
    75a4:	e0bffc17 	ldw	r2,-16(fp)
    75a8:	1080020b 	ldhu	r2,8(r2)
    75ac:	1007883a 	mov	r3,r2
    75b0:	e0bffd0b 	ldhu	r2,-12(fp)
    75b4:	0084303a 	nor	r2,zero,r2
    75b8:	1884703a 	and	r2,r3,r2
    75bc:	1007883a 	mov	r3,r2
    75c0:	e0bffc17 	ldw	r2,-16(fp)
    75c4:	10c0020d 	sth	r3,8(r2)
             break;
    75c8:	00001106 	br	7610 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
    75cc:	e0bffc17 	ldw	r2,-16(fp)
    75d0:	10c0020b 	ldhu	r3,8(r2)
    75d4:	e0bffd0b 	ldhu	r2,-12(fp)
    75d8:	1884b03a 	or	r2,r3,r2
    75dc:	1007883a 	mov	r3,r2
    75e0:	e0bffc17 	ldw	r2,-16(fp)
    75e4:	10c0020d 	sth	r3,8(r2)
             break;
    75e8:	00000906 	br	7610 <OSFlagPost+0x120>
    75ec:	e0bff317 	ldw	r2,-52(fp)
    75f0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    75f4:	e0bff417 	ldw	r2,-48(fp)
    75f8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
    75fc:	e0bfff17 	ldw	r2,-4(fp)
    7600:	00c01c44 	movi	r3,113
    7604:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
    7608:	0005883a 	mov	r2,zero
    760c:	00009806 	br	7870 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    7610:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    7614:	e0bffc17 	ldw	r2,-16(fp)
    7618:	10800117 	ldw	r2,4(r2)
    761c:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    7620:	00007706 	br	7800 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
    7624:	e0bff117 	ldw	r2,-60(fp)
    7628:	10800483 	ldbu	r2,18(r2)
    762c:	10803fcc 	andi	r2,r2,255
    7630:	10c00060 	cmpeqi	r3,r2,1
    7634:	18004a1e 	bne	r3,zero,7760 <OSFlagPost+0x270>
    7638:	10c00088 	cmpgei	r3,r2,2
    763c:	1800021e 	bne	r3,zero,7648 <OSFlagPost+0x158>
    7640:	10002f26 	beq	r2,zero,7700 <OSFlagPost+0x210>
    7644:	00005b06 	br	77b4 <OSFlagPost+0x2c4>
    7648:	10c000a0 	cmpeqi	r3,r2,2
    764c:	1800031e 	bne	r3,zero,765c <OSFlagPost+0x16c>
    7650:	108000e0 	cmpeqi	r2,r2,3
    7654:	1000171e 	bne	r2,zero,76b4 <OSFlagPost+0x1c4>
    7658:	00005606 	br	77b4 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    765c:	e0bffc17 	ldw	r2,-16(fp)
    7660:	10c0020b 	ldhu	r3,8(r2)
    7664:	e0bff117 	ldw	r2,-60(fp)
    7668:	1080040b 	ldhu	r2,16(r2)
    766c:	1884703a 	and	r2,r3,r2
    7670:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    7674:	e0bff117 	ldw	r2,-60(fp)
    7678:	1080040b 	ldhu	r2,16(r2)
    767c:	10ffffcc 	andi	r3,r2,65535
    7680:	e0bff60b 	ldhu	r2,-40(fp)
    7684:	1880541e 	bne	r3,r2,77d8 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    7688:	e0bff60b 	ldhu	r2,-40(fp)
    768c:	100b883a 	mov	r5,r2
    7690:	e13ff117 	ldw	r4,-60(fp)
    7694:	0007bf80 	call	7bf8 <OS_FlagTaskRdy>
    7698:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
    769c:	e0bff683 	ldbu	r2,-38(fp)
    76a0:	10800058 	cmpnei	r2,r2,1
    76a4:	10004c1e 	bne	r2,zero,77d8 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    76a8:	00800044 	movi	r2,1
    76ac:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    76b0:	00004906 	br	77d8 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    76b4:	e0bffc17 	ldw	r2,-16(fp)
    76b8:	10c0020b 	ldhu	r3,8(r2)
    76bc:	e0bff117 	ldw	r2,-60(fp)
    76c0:	1080040b 	ldhu	r2,16(r2)
    76c4:	1884703a 	and	r2,r3,r2
    76c8:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    76cc:	e0bff60b 	ldhu	r2,-40(fp)
    76d0:	10004326 	beq	r2,zero,77e0 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    76d4:	e0bff60b 	ldhu	r2,-40(fp)
    76d8:	100b883a 	mov	r5,r2
    76dc:	e13ff117 	ldw	r4,-60(fp)
    76e0:	0007bf80 	call	7bf8 <OS_FlagTaskRdy>
    76e4:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
    76e8:	e0bff683 	ldbu	r2,-38(fp)
    76ec:	10800058 	cmpnei	r2,r2,1
    76f0:	10003b1e 	bne	r2,zero,77e0 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    76f4:	00800044 	movi	r2,1
    76f8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    76fc:	00003806 	br	77e0 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    7700:	e0bffc17 	ldw	r2,-16(fp)
    7704:	1080020b 	ldhu	r2,8(r2)
    7708:	0084303a 	nor	r2,zero,r2
    770c:	1007883a 	mov	r3,r2
    7710:	e0bff117 	ldw	r2,-60(fp)
    7714:	1080040b 	ldhu	r2,16(r2)
    7718:	1884703a 	and	r2,r3,r2
    771c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    7720:	e0bff117 	ldw	r2,-60(fp)
    7724:	1080040b 	ldhu	r2,16(r2)
    7728:	10ffffcc 	andi	r3,r2,65535
    772c:	e0bff60b 	ldhu	r2,-40(fp)
    7730:	18802d1e 	bne	r3,r2,77e8 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    7734:	e0bff60b 	ldhu	r2,-40(fp)
    7738:	100b883a 	mov	r5,r2
    773c:	e13ff117 	ldw	r4,-60(fp)
    7740:	0007bf80 	call	7bf8 <OS_FlagTaskRdy>
    7744:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
    7748:	e0bff683 	ldbu	r2,-38(fp)
    774c:	10800058 	cmpnei	r2,r2,1
    7750:	1000251e 	bne	r2,zero,77e8 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    7754:	00800044 	movi	r2,1
    7758:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    775c:	00002206 	br	77e8 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    7760:	e0bffc17 	ldw	r2,-16(fp)
    7764:	1080020b 	ldhu	r2,8(r2)
    7768:	0084303a 	nor	r2,zero,r2
    776c:	1007883a 	mov	r3,r2
    7770:	e0bff117 	ldw	r2,-60(fp)
    7774:	1080040b 	ldhu	r2,16(r2)
    7778:	1884703a 	and	r2,r3,r2
    777c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    7780:	e0bff60b 	ldhu	r2,-40(fp)
    7784:	10001a26 	beq	r2,zero,77f0 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    7788:	e0bff60b 	ldhu	r2,-40(fp)
    778c:	100b883a 	mov	r5,r2
    7790:	e13ff117 	ldw	r4,-60(fp)
    7794:	0007bf80 	call	7bf8 <OS_FlagTaskRdy>
    7798:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
    779c:	e0bff683 	ldbu	r2,-38(fp)
    77a0:	10800058 	cmpnei	r2,r2,1
    77a4:	1000121e 	bne	r2,zero,77f0 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    77a8:	00800044 	movi	r2,1
    77ac:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    77b0:	00000f06 	br	77f0 <OSFlagPost+0x300>
    77b4:	e0bff317 	ldw	r2,-52(fp)
    77b8:	e0bff515 	stw	r2,-44(fp)
    77bc:	e0bff517 	ldw	r2,-44(fp)
    77c0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    77c4:	e0bfff17 	ldw	r2,-4(fp)
    77c8:	00c01bc4 	movi	r3,111
    77cc:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    77d0:	0005883a 	mov	r2,zero
    77d4:	00002606 	br	7870 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    77d8:	0001883a 	nop
    77dc:	00000506 	br	77f4 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    77e0:	0001883a 	nop
    77e4:	00000306 	br	77f4 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    77e8:	0001883a 	nop
    77ec:	00000106 	br	77f4 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    77f0:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    77f4:	e0bff117 	ldw	r2,-60(fp)
    77f8:	10800017 	ldw	r2,0(r2)
    77fc:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    7800:	e0bff117 	ldw	r2,-60(fp)
    7804:	103f871e 	bne	r2,zero,7624 <OSFlagPost+0x134>
    7808:	e0bff317 	ldw	r2,-52(fp)
    780c:	e0bff715 	stw	r2,-36(fp)
    7810:	e0bff717 	ldw	r2,-36(fp)
    7814:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
    7818:	e0bff203 	ldbu	r2,-56(fp)
    781c:	10800058 	cmpnei	r2,r2,1
    7820:	1000011e 	bne	r2,zero,7828 <OSFlagPost+0x338>
        OS_Sched();
    7824:	0005bc00 	call	5bc0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7828:	0005303a 	rdctl	r2,status
    782c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7830:	e0fffa17 	ldw	r3,-24(fp)
    7834:	00bfff84 	movi	r2,-2
    7838:	1884703a 	and	r2,r3,r2
    783c:	1001703a 	wrctl	status,r2
  
  return context;
    7840:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    7844:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
    7848:	e0bffc17 	ldw	r2,-16(fp)
    784c:	1080020b 	ldhu	r2,8(r2)
    7850:	e0bff90d 	sth	r2,-28(fp)
    7854:	e0bff317 	ldw	r2,-52(fp)
    7858:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    785c:	e0bff817 	ldw	r2,-32(fp)
    7860:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
    7864:	e0bfff17 	ldw	r2,-4(fp)
    7868:	10000005 	stb	zero,0(r2)
    return (flags_cur);
    786c:	e0bff90b 	ldhu	r2,-28(fp)
}
    7870:	e037883a 	mov	sp,fp
    7874:	dfc00117 	ldw	ra,4(sp)
    7878:	df000017 	ldw	fp,0(sp)
    787c:	dec00204 	addi	sp,sp,8
    7880:	f800283a 	ret

00007884 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
    7884:	defff904 	addi	sp,sp,-28
    7888:	df000615 	stw	fp,24(sp)
    788c:	df000604 	addi	fp,sp,24
    7890:	e13ffe15 	stw	r4,-8(fp)
    7894:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
    7898:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
    789c:	e0bfff17 	ldw	r2,-4(fp)
    78a0:	1000021e 	bne	r2,zero,78ac <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
    78a4:	0005883a 	mov	r2,zero
    78a8:	00002306 	br	7938 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
    78ac:	e0bffe17 	ldw	r2,-8(fp)
    78b0:	1000051e 	bne	r2,zero,78c8 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    78b4:	e0bfff17 	ldw	r2,-4(fp)
    78b8:	00c01b84 	movi	r3,110
    78bc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    78c0:	0005883a 	mov	r2,zero
    78c4:	00001c06 	br	7938 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
    78c8:	e0bffe17 	ldw	r2,-8(fp)
    78cc:	10800003 	ldbu	r2,0(r2)
    78d0:	10803fcc 	andi	r2,r2,255
    78d4:	10800160 	cmpeqi	r2,r2,5
    78d8:	1000051e 	bne	r2,zero,78f0 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    78dc:	e0bfff17 	ldw	r2,-4(fp)
    78e0:	00c00044 	movi	r3,1
    78e4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    78e8:	0005883a 	mov	r2,zero
    78ec:	00001206 	br	7938 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    78f0:	0005303a 	rdctl	r2,status
    78f4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    78f8:	e0fffc17 	ldw	r3,-16(fp)
    78fc:	00bfff84 	movi	r2,-2
    7900:	1884703a 	and	r2,r3,r2
    7904:	1001703a 	wrctl	status,r2
  
  return context;
    7908:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    790c:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
    7910:	e0bffe17 	ldw	r2,-8(fp)
    7914:	1080020b 	ldhu	r2,8(r2)
    7918:	e0bffb0d 	sth	r2,-20(fp)
    791c:	e0bffa17 	ldw	r2,-24(fp)
    7920:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7924:	e0bffd17 	ldw	r2,-12(fp)
    7928:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    792c:	e0bfff17 	ldw	r2,-4(fp)
    7930:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
    7934:	e0bffb0b 	ldhu	r2,-20(fp)
}
    7938:	e037883a 	mov	sp,fp
    793c:	df000017 	ldw	fp,0(sp)
    7940:	dec00104 	addi	sp,sp,4
    7944:	f800283a 	ret

00007948 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
    7948:	defff804 	addi	sp,sp,-32
    794c:	df000715 	stw	fp,28(sp)
    7950:	df000704 	addi	fp,sp,28
    7954:	e13ffb15 	stw	r4,-20(fp)
    7958:	e17ffc15 	stw	r5,-16(fp)
    795c:	3009883a 	mov	r4,r6
    7960:	3807883a 	mov	r3,r7
    7964:	e0800117 	ldw	r2,4(fp)
    7968:	e13ffd0d 	sth	r4,-12(fp)
    796c:	e0fffe05 	stb	r3,-8(fp)
    7970:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
    7974:	00800074 	movhi	r2,1
    7978:	10879604 	addi	r2,r2,7768
    797c:	10c00017 	ldw	r3,0(r2)
    7980:	00800074 	movhi	r2,1
    7984:	10879604 	addi	r2,r2,7768
    7988:	10800017 	ldw	r2,0(r2)
    798c:	10800c03 	ldbu	r2,48(r2)
    7990:	10800814 	ori	r2,r2,32
    7994:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
    7998:	00800074 	movhi	r2,1
    799c:	10879604 	addi	r2,r2,7768
    79a0:	10800017 	ldw	r2,0(r2)
    79a4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
    79a8:	00800074 	movhi	r2,1
    79ac:	10879604 	addi	r2,r2,7768
    79b0:	10800017 	ldw	r2,0(r2)
    79b4:	e0ffff0b 	ldhu	r3,-4(fp)
    79b8:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
    79bc:	00800074 	movhi	r2,1
    79c0:	10879604 	addi	r2,r2,7768
    79c4:	10800017 	ldw	r2,0(r2)
    79c8:	e0fffc17 	ldw	r3,-16(fp)
    79cc:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
    79d0:	e0bffc17 	ldw	r2,-16(fp)
    79d4:	e0fffd0b 	ldhu	r3,-12(fp)
    79d8:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
    79dc:	e0bffc17 	ldw	r2,-16(fp)
    79e0:	e0fffe03 	ldbu	r3,-8(fp)
    79e4:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
    79e8:	00800074 	movhi	r2,1
    79ec:	10879604 	addi	r2,r2,7768
    79f0:	10c00017 	ldw	r3,0(r2)
    79f4:	e0bffc17 	ldw	r2,-16(fp)
    79f8:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
    79fc:	e0bffb17 	ldw	r2,-20(fp)
    7a00:	10c00117 	ldw	r3,4(r2)
    7a04:	e0bffc17 	ldw	r2,-16(fp)
    7a08:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
    7a0c:	e0bffc17 	ldw	r2,-16(fp)
    7a10:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
    7a14:	e0bffc17 	ldw	r2,-16(fp)
    7a18:	e0fffb17 	ldw	r3,-20(fp)
    7a1c:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    7a20:	e0bffb17 	ldw	r2,-20(fp)
    7a24:	10800117 	ldw	r2,4(r2)
    7a28:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
    7a2c:	e0bff917 	ldw	r2,-28(fp)
    7a30:	10000326 	beq	r2,zero,7a40 <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
    7a34:	e0bff917 	ldw	r2,-28(fp)
    7a38:	e0fffc17 	ldw	r3,-16(fp)
    7a3c:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
    7a40:	e0bffb17 	ldw	r2,-20(fp)
    7a44:	e0fffc17 	ldw	r3,-16(fp)
    7a48:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
    7a4c:	00800074 	movhi	r2,1
    7a50:	10879604 	addi	r2,r2,7768
    7a54:	10800017 	ldw	r2,0(r2)
    7a58:	10800d03 	ldbu	r2,52(r2)
    7a5c:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    7a60:	e0fffa03 	ldbu	r3,-24(fp)
    7a64:	e13ffa03 	ldbu	r4,-24(fp)
    7a68:	00800074 	movhi	r2,1
    7a6c:	10879344 	addi	r2,r2,7757
    7a70:	1105883a 	add	r2,r2,r4
    7a74:	10800003 	ldbu	r2,0(r2)
    7a78:	1009883a 	mov	r4,r2
    7a7c:	00800074 	movhi	r2,1
    7a80:	10879604 	addi	r2,r2,7768
    7a84:	10800017 	ldw	r2,0(r2)
    7a88:	10800d43 	ldbu	r2,53(r2)
    7a8c:	0084303a 	nor	r2,zero,r2
    7a90:	2084703a 	and	r2,r4,r2
    7a94:	1009883a 	mov	r4,r2
    7a98:	00800074 	movhi	r2,1
    7a9c:	10879344 	addi	r2,r2,7757
    7aa0:	10c5883a 	add	r2,r2,r3
    7aa4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
    7aa8:	e0fffa03 	ldbu	r3,-24(fp)
    7aac:	00800074 	movhi	r2,1
    7ab0:	10879344 	addi	r2,r2,7757
    7ab4:	10c5883a 	add	r2,r2,r3
    7ab8:	10800003 	ldbu	r2,0(r2)
    7abc:	10803fcc 	andi	r2,r2,255
    7ac0:	10000e1e 	bne	r2,zero,7afc <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    7ac4:	00800074 	movhi	r2,1
    7ac8:	10879604 	addi	r2,r2,7768
    7acc:	10800017 	ldw	r2,0(r2)
    7ad0:	10800d83 	ldbu	r2,54(r2)
    7ad4:	0084303a 	nor	r2,zero,r2
    7ad8:	1007883a 	mov	r3,r2
    7adc:	00800074 	movhi	r2,1
    7ae0:	10879304 	addi	r2,r2,7756
    7ae4:	10800003 	ldbu	r2,0(r2)
    7ae8:	1884703a 	and	r2,r3,r2
    7aec:	1007883a 	mov	r3,r2
    7af0:	00800074 	movhi	r2,1
    7af4:	10879304 	addi	r2,r2,7756
    7af8:	10c00005 	stb	r3,0(r2)
    }
}
    7afc:	0001883a 	nop
    7b00:	e037883a 	mov	sp,fp
    7b04:	df000017 	ldw	fp,0(sp)
    7b08:	dec00104 	addi	sp,sp,4
    7b0c:	f800283a 	ret

00007b10 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
    7b10:	defffb04 	addi	sp,sp,-20
    7b14:	dfc00415 	stw	ra,16(sp)
    7b18:	df000315 	stw	fp,12(sp)
    7b1c:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    7b20:	0140dc04 	movi	r5,880
    7b24:	01000074 	movhi	r4,1
    7b28:	2117a904 	addi	r4,r4,24228
    7b2c:	0005b040 	call	5b04 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
    7b30:	00800074 	movhi	r2,1
    7b34:	1097a904 	addi	r2,r2,24228
    7b38:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
    7b3c:	00800074 	movhi	r2,1
    7b40:	1097b404 	addi	r2,r2,24272
    7b44:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    7b48:	e03ffd0d 	sth	zero,-12(fp)
    7b4c:	00001306 	br	7b9c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    7b50:	e0bffe17 	ldw	r2,-8(fp)
    7b54:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
    7b58:	e0bffe17 	ldw	r2,-8(fp)
    7b5c:	e0ffff17 	ldw	r3,-4(fp)
    7b60:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
    7b64:	e0bffe17 	ldw	r2,-8(fp)
    7b68:	00c00fc4 	movi	r3,63
    7b6c:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    7b70:	e0bffe17 	ldw	r2,-8(fp)
    7b74:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
    7b78:	e0bffe17 	ldw	r2,-8(fp)
    7b7c:	10800b04 	addi	r2,r2,44
    7b80:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
    7b84:	e0bfff17 	ldw	r2,-4(fp)
    7b88:	10800b04 	addi	r2,r2,44
    7b8c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    7b90:	e0bffd0b 	ldhu	r2,-12(fp)
    7b94:	10800044 	addi	r2,r2,1
    7b98:	e0bffd0d 	sth	r2,-12(fp)
    7b9c:	e0bffd0b 	ldhu	r2,-12(fp)
    7ba0:	108004f0 	cmpltui	r2,r2,19
    7ba4:	103fea1e 	bne	r2,zero,7b50 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    7ba8:	e0bffe17 	ldw	r2,-8(fp)
    7bac:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
    7bb0:	e0bffe17 	ldw	r2,-8(fp)
    7bb4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
    7bb8:	e0bffe17 	ldw	r2,-8(fp)
    7bbc:	00c00fc4 	movi	r3,63
    7bc0:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    7bc4:	e0bffe17 	ldw	r2,-8(fp)
    7bc8:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
    7bcc:	00800074 	movhi	r2,1
    7bd0:	10879804 	addi	r2,r2,7776
    7bd4:	00c00074 	movhi	r3,1
    7bd8:	18d7a904 	addi	r3,r3,24228
    7bdc:	10c00015 	stw	r3,0(r2)
#endif
}
    7be0:	0001883a 	nop
    7be4:	e037883a 	mov	sp,fp
    7be8:	dfc00117 	ldw	ra,4(sp)
    7bec:	df000017 	ldw	fp,0(sp)
    7bf0:	dec00204 	addi	sp,sp,8
    7bf4:	f800283a 	ret

00007bf8 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
    7bf8:	defffa04 	addi	sp,sp,-24
    7bfc:	dfc00515 	stw	ra,20(sp)
    7c00:	df000415 	stw	fp,16(sp)
    7c04:	df000404 	addi	fp,sp,16
    7c08:	e13ffe15 	stw	r4,-8(fp)
    7c0c:	2805883a 	mov	r2,r5
    7c10:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    7c14:	e0bffe17 	ldw	r2,-8(fp)
    7c18:	10800217 	ldw	r2,8(r2)
    7c1c:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
    7c20:	e0bffd17 	ldw	r2,-12(fp)
    7c24:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    7c28:	e0bffd17 	ldw	r2,-12(fp)
    7c2c:	e0ffff0b 	ldhu	r3,-4(fp)
    7c30:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
    7c34:	e0bffd17 	ldw	r2,-12(fp)
    7c38:	10c00c03 	ldbu	r3,48(r2)
    7c3c:	00bff7c4 	movi	r2,-33
    7c40:	1884703a 	and	r2,r3,r2
    7c44:	1007883a 	mov	r3,r2
    7c48:	e0bffd17 	ldw	r2,-12(fp)
    7c4c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
    7c50:	e0bffd17 	ldw	r2,-12(fp)
    7c54:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
    7c58:	e0bffd17 	ldw	r2,-12(fp)
    7c5c:	10800c03 	ldbu	r2,48(r2)
    7c60:	10803fcc 	andi	r2,r2,255
    7c64:	10001f1e 	bne	r2,zero,7ce4 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
    7c68:	e0bffd17 	ldw	r2,-12(fp)
    7c6c:	10c00d83 	ldbu	r3,54(r2)
    7c70:	00800074 	movhi	r2,1
    7c74:	10879304 	addi	r2,r2,7756
    7c78:	10800003 	ldbu	r2,0(r2)
    7c7c:	1884b03a 	or	r2,r3,r2
    7c80:	1007883a 	mov	r3,r2
    7c84:	00800074 	movhi	r2,1
    7c88:	10879304 	addi	r2,r2,7756
    7c8c:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    7c90:	e0bffd17 	ldw	r2,-12(fp)
    7c94:	10800d03 	ldbu	r2,52(r2)
    7c98:	10c03fcc 	andi	r3,r2,255
    7c9c:	e0bffd17 	ldw	r2,-12(fp)
    7ca0:	10800d03 	ldbu	r2,52(r2)
    7ca4:	11003fcc 	andi	r4,r2,255
    7ca8:	00800074 	movhi	r2,1
    7cac:	10879344 	addi	r2,r2,7757
    7cb0:	1105883a 	add	r2,r2,r4
    7cb4:	11000003 	ldbu	r4,0(r2)
    7cb8:	e0bffd17 	ldw	r2,-12(fp)
    7cbc:	10800d43 	ldbu	r2,53(r2)
    7cc0:	2084b03a 	or	r2,r4,r2
    7cc4:	1009883a 	mov	r4,r2
    7cc8:	00800074 	movhi	r2,1
    7ccc:	10879344 	addi	r2,r2,7757
    7cd0:	10c5883a 	add	r2,r2,r3
    7cd4:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
    7cd8:	00800044 	movi	r2,1
    7cdc:	e0bffc05 	stb	r2,-16(fp)
    7ce0:	00000106 	br	7ce8 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
    7ce4:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
    7ce8:	e13ffe17 	ldw	r4,-8(fp)
    7cec:	0007d080 	call	7d08 <OS_FlagUnlink>
    return (sched);
    7cf0:	e0bffc03 	ldbu	r2,-16(fp)
}
    7cf4:	e037883a 	mov	sp,fp
    7cf8:	dfc00117 	ldw	ra,4(sp)
    7cfc:	df000017 	ldw	fp,0(sp)
    7d00:	dec00204 	addi	sp,sp,8
    7d04:	f800283a 	ret

00007d08 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
    7d08:	defffa04 	addi	sp,sp,-24
    7d0c:	df000515 	stw	fp,20(sp)
    7d10:	df000504 	addi	fp,sp,20
    7d14:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
    7d18:	e0bfff17 	ldw	r2,-4(fp)
    7d1c:	10800117 	ldw	r2,4(r2)
    7d20:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    7d24:	e0bfff17 	ldw	r2,-4(fp)
    7d28:	10800017 	ldw	r2,0(r2)
    7d2c:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
    7d30:	e0bffb17 	ldw	r2,-20(fp)
    7d34:	10000b1e 	bne	r2,zero,7d64 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
    7d38:	e0bfff17 	ldw	r2,-4(fp)
    7d3c:	10800317 	ldw	r2,12(r2)
    7d40:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
    7d44:	e0bffd17 	ldw	r2,-12(fp)
    7d48:	e0fffc17 	ldw	r3,-16(fp)
    7d4c:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
    7d50:	e0bffc17 	ldw	r2,-16(fp)
    7d54:	10000b26 	beq	r2,zero,7d84 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
    7d58:	e0bffc17 	ldw	r2,-16(fp)
    7d5c:	10000115 	stw	zero,4(r2)
    7d60:	00000806 	br	7d84 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
    7d64:	e0bffb17 	ldw	r2,-20(fp)
    7d68:	e0fffc17 	ldw	r3,-16(fp)
    7d6c:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
    7d70:	e0bffc17 	ldw	r2,-16(fp)
    7d74:	10000326 	beq	r2,zero,7d84 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
    7d78:	e0bffc17 	ldw	r2,-16(fp)
    7d7c:	e0fffb17 	ldw	r3,-20(fp)
    7d80:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
    7d84:	e0bfff17 	ldw	r2,-4(fp)
    7d88:	10800217 	ldw	r2,8(r2)
    7d8c:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
    7d90:	e0bffe17 	ldw	r2,-8(fp)
    7d94:	10000a15 	stw	zero,40(r2)
#endif
}
    7d98:	0001883a 	nop
    7d9c:	e037883a 	mov	sp,fp
    7da0:	df000017 	ldw	fp,0(sp)
    7da4:	dec00104 	addi	sp,sp,4
    7da8:	f800283a 	ret

00007dac <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
    7dac:	defff404 	addi	sp,sp,-48
    7db0:	df000b15 	stw	fp,44(sp)
    7db4:	df000b04 	addi	fp,sp,44
    7db8:	e13ffc15 	stw	r4,-16(fp)
    7dbc:	e17ffd15 	stw	r5,-12(fp)
    7dc0:	e1bffe15 	stw	r6,-8(fp)
    7dc4:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    7dc8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    7dcc:	e0bfff17 	ldw	r2,-4(fp)
    7dd0:	1000021e 	bne	r2,zero,7ddc <OSMemCreate+0x30>
        return ((OS_MEM *)0);
    7dd4:	0005883a 	mov	r2,zero
    7dd8:	00006d06 	br	7f90 <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
    7ddc:	e0bffc17 	ldw	r2,-16(fp)
    7de0:	1000051e 	bne	r2,zero,7df8 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    7de4:	e0bfff17 	ldw	r2,-4(fp)
    7de8:	00c01884 	movi	r3,98
    7dec:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    7df0:	0005883a 	mov	r2,zero
    7df4:	00006606 	br	7f90 <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
    7df8:	e0bffc17 	ldw	r2,-16(fp)
    7dfc:	108000cc 	andi	r2,r2,3
    7e00:	10000526 	beq	r2,zero,7e18 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    7e04:	e0bfff17 	ldw	r2,-4(fp)
    7e08:	00c01884 	movi	r3,98
    7e0c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    7e10:	0005883a 	mov	r2,zero
    7e14:	00005e06 	br	7f90 <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
    7e18:	e0bffd17 	ldw	r2,-12(fp)
    7e1c:	108000a8 	cmpgeui	r2,r2,2
    7e20:	1000051e 	bne	r2,zero,7e38 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
    7e24:	e0bfff17 	ldw	r2,-4(fp)
    7e28:	00c016c4 	movi	r3,91
    7e2c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    7e30:	0005883a 	mov	r2,zero
    7e34:	00005606 	br	7f90 <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
    7e38:	e0bffe17 	ldw	r2,-8(fp)
    7e3c:	10800128 	cmpgeui	r2,r2,4
    7e40:	1000051e 	bne	r2,zero,7e58 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
    7e44:	e0bfff17 	ldw	r2,-4(fp)
    7e48:	00c01704 	movi	r3,92
    7e4c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    7e50:	0005883a 	mov	r2,zero
    7e54:	00004e06 	br	7f90 <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7e58:	0005303a 	rdctl	r2,status
    7e5c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7e60:	e0fffb17 	ldw	r3,-20(fp)
    7e64:	00bfff84 	movi	r2,-2
    7e68:	1884703a 	and	r2,r3,r2
    7e6c:	1001703a 	wrctl	status,r2
  
  return context;
    7e70:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    7e74:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
    7e78:	00800074 	movhi	r2,1
    7e7c:	10879004 	addi	r2,r2,7744
    7e80:	10800017 	ldw	r2,0(r2)
    7e84:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
    7e88:	00800074 	movhi	r2,1
    7e8c:	10879004 	addi	r2,r2,7744
    7e90:	10800017 	ldw	r2,0(r2)
    7e94:	10000726 	beq	r2,zero,7eb4 <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
    7e98:	00800074 	movhi	r2,1
    7e9c:	10879004 	addi	r2,r2,7744
    7ea0:	10800017 	ldw	r2,0(r2)
    7ea4:	10c00117 	ldw	r3,4(r2)
    7ea8:	00800074 	movhi	r2,1
    7eac:	10879004 	addi	r2,r2,7744
    7eb0:	10c00015 	stw	r3,0(r2)
    7eb4:	e0bff817 	ldw	r2,-32(fp)
    7eb8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7ebc:	e0bff917 	ldw	r2,-28(fp)
    7ec0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
    7ec4:	e0bffa17 	ldw	r2,-24(fp)
    7ec8:	1000051e 	bne	r2,zero,7ee0 <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
    7ecc:	e0bfff17 	ldw	r2,-4(fp)
    7ed0:	00c01684 	movi	r3,90
    7ed4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    7ed8:	0005883a 	mov	r2,zero
    7edc:	00002c06 	br	7f90 <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    7ee0:	e0bffc17 	ldw	r2,-16(fp)
    7ee4:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
    7ee8:	e0fffc17 	ldw	r3,-16(fp)
    7eec:	e0bffe17 	ldw	r2,-8(fp)
    7ef0:	1885883a 	add	r2,r3,r2
    7ef4:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
    7ef8:	e03ff715 	stw	zero,-36(fp)
    7efc:	00000c06 	br	7f30 <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
    7f00:	e0bff617 	ldw	r2,-40(fp)
    7f04:	e0fff517 	ldw	r3,-44(fp)
    7f08:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
    7f0c:	e0bff517 	ldw	r2,-44(fp)
    7f10:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    7f14:	e0fff517 	ldw	r3,-44(fp)
    7f18:	e0bffe17 	ldw	r2,-8(fp)
    7f1c:	1885883a 	add	r2,r3,r2
    7f20:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
    7f24:	e0bff717 	ldw	r2,-36(fp)
    7f28:	10800044 	addi	r2,r2,1
    7f2c:	e0bff715 	stw	r2,-36(fp)
    7f30:	e0bffd17 	ldw	r2,-12(fp)
    7f34:	10bfffc4 	addi	r2,r2,-1
    7f38:	e0fff717 	ldw	r3,-36(fp)
    7f3c:	18bff036 	bltu	r3,r2,7f00 <OSMemCreate+0x154>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
    7f40:	e0bff617 	ldw	r2,-40(fp)
    7f44:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
    7f48:	e0bffa17 	ldw	r2,-24(fp)
    7f4c:	e0fffc17 	ldw	r3,-16(fp)
    7f50:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
    7f54:	e0bffa17 	ldw	r2,-24(fp)
    7f58:	e0fffc17 	ldw	r3,-16(fp)
    7f5c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
    7f60:	e0bffa17 	ldw	r2,-24(fp)
    7f64:	e0fffd17 	ldw	r3,-12(fp)
    7f68:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
    7f6c:	e0bffa17 	ldw	r2,-24(fp)
    7f70:	e0fffd17 	ldw	r3,-12(fp)
    7f74:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
    7f78:	e0bffa17 	ldw	r2,-24(fp)
    7f7c:	e0fffe17 	ldw	r3,-8(fp)
    7f80:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
    7f84:	e0bfff17 	ldw	r2,-4(fp)
    7f88:	10000005 	stb	zero,0(r2)
    return (pmem);
    7f8c:	e0bffa17 	ldw	r2,-24(fp)
}
    7f90:	e037883a 	mov	sp,fp
    7f94:	df000017 	ldw	fp,0(sp)
    7f98:	dec00104 	addi	sp,sp,4
    7f9c:	f800283a 	ret

00007fa0 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
    7fa0:	defff804 	addi	sp,sp,-32
    7fa4:	df000715 	stw	fp,28(sp)
    7fa8:	df000704 	addi	fp,sp,28
    7fac:	e13ffe15 	stw	r4,-8(fp)
    7fb0:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    7fb4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    7fb8:	e0bfff17 	ldw	r2,-4(fp)
    7fbc:	1000021e 	bne	r2,zero,7fc8 <OSMemGet+0x28>
        return ((void *)0);
    7fc0:	0005883a 	mov	r2,zero
    7fc4:	00002e06 	br	8080 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
    7fc8:	e0bffe17 	ldw	r2,-8(fp)
    7fcc:	1000051e 	bne	r2,zero,7fe4 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    7fd0:	e0bfff17 	ldw	r2,-4(fp)
    7fd4:	00c01804 	movi	r3,96
    7fd8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    7fdc:	0005883a 	mov	r2,zero
    7fe0:	00002706 	br	8080 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7fe4:	0005303a 	rdctl	r2,status
    7fe8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7fec:	e0fffd17 	ldw	r3,-12(fp)
    7ff0:	00bfff84 	movi	r2,-2
    7ff4:	1884703a 	and	r2,r3,r2
    7ff8:	1001703a 	wrctl	status,r2
  
  return context;
    7ffc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    8000:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
    8004:	e0bffe17 	ldw	r2,-8(fp)
    8008:	10800417 	ldw	r2,16(r2)
    800c:	10001426 	beq	r2,zero,8060 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
    8010:	e0bffe17 	ldw	r2,-8(fp)
    8014:	10800117 	ldw	r2,4(r2)
    8018:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
    801c:	e0bffb17 	ldw	r2,-20(fp)
    8020:	10c00017 	ldw	r3,0(r2)
    8024:	e0bffe17 	ldw	r2,-8(fp)
    8028:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
    802c:	e0bffe17 	ldw	r2,-8(fp)
    8030:	10800417 	ldw	r2,16(r2)
    8034:	10ffffc4 	addi	r3,r2,-1
    8038:	e0bffe17 	ldw	r2,-8(fp)
    803c:	10c00415 	stw	r3,16(r2)
    8040:	e0bff917 	ldw	r2,-28(fp)
    8044:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8048:	e0bffa17 	ldw	r2,-24(fp)
    804c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
    8050:	e0bfff17 	ldw	r2,-4(fp)
    8054:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
    8058:	e0bffb17 	ldw	r2,-20(fp)
    805c:	00000806 	br	8080 <OSMemGet+0xe0>
    8060:	e0bff917 	ldw	r2,-28(fp)
    8064:	e0bffc15 	stw	r2,-16(fp)
    8068:	e0bffc17 	ldw	r2,-16(fp)
    806c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
    8070:	e0bfff17 	ldw	r2,-4(fp)
    8074:	00c01744 	movi	r3,93
    8078:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
    807c:	0005883a 	mov	r2,zero
}
    8080:	e037883a 	mov	sp,fp
    8084:	df000017 	ldw	fp,0(sp)
    8088:	dec00104 	addi	sp,sp,4
    808c:	f800283a 	ret

00008090 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    8090:	defff704 	addi	sp,sp,-36
    8094:	dfc00815 	stw	ra,32(sp)
    8098:	df000715 	stw	fp,28(sp)
    809c:	df000704 	addi	fp,sp,28
    80a0:	e13ffd15 	stw	r4,-12(fp)
    80a4:	e17ffe15 	stw	r5,-8(fp)
    80a8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    80ac:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    80b0:	e0bfff17 	ldw	r2,-4(fp)
    80b4:	1000021e 	bne	r2,zero,80c0 <OSMemNameGet+0x30>
        return (0);
    80b8:	0005883a 	mov	r2,zero
    80bc:	00002d06 	br	8174 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    80c0:	e0bffd17 	ldw	r2,-12(fp)
    80c4:	1000051e 	bne	r2,zero,80dc <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    80c8:	e0bfff17 	ldw	r2,-4(fp)
    80cc:	00c01804 	movi	r3,96
    80d0:	10c00005 	stb	r3,0(r2)
        return (0);
    80d4:	0005883a 	mov	r2,zero
    80d8:	00002606 	br	8174 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    80dc:	e0bffe17 	ldw	r2,-8(fp)
    80e0:	1000051e 	bne	r2,zero,80f8 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    80e4:	e0bfff17 	ldw	r2,-4(fp)
    80e8:	00c00304 	movi	r3,12
    80ec:	10c00005 	stb	r3,0(r2)
        return (0);
    80f0:	0005883a 	mov	r2,zero
    80f4:	00001f06 	br	8174 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    80f8:	00800074 	movhi	r2,1
    80fc:	10879504 	addi	r2,r2,7764
    8100:	10800003 	ldbu	r2,0(r2)
    8104:	10803fcc 	andi	r2,r2,255
    8108:	10000526 	beq	r2,zero,8120 <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
    810c:	e0bfff17 	ldw	r2,-4(fp)
    8110:	00c00444 	movi	r3,17
    8114:	10c00005 	stb	r3,0(r2)
        return (0);
    8118:	0005883a 	mov	r2,zero
    811c:	00001506 	br	8174 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8120:	0005303a 	rdctl	r2,status
    8124:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8128:	e0fffb17 	ldw	r3,-20(fp)
    812c:	00bfff84 	movi	r2,-2
    8130:	1884703a 	and	r2,r3,r2
    8134:	1001703a 	wrctl	status,r2
  
  return context;
    8138:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    813c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
    8140:	e0bffd17 	ldw	r2,-12(fp)
    8144:	10800504 	addi	r2,r2,20
    8148:	100b883a 	mov	r5,r2
    814c:	e13ffe17 	ldw	r4,-8(fp)
    8150:	0005d640 	call	5d64 <OS_StrCopy>
    8154:	e0bffa05 	stb	r2,-24(fp)
    8158:	e0bff917 	ldw	r2,-28(fp)
    815c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8160:	e0bffc17 	ldw	r2,-16(fp)
    8164:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    8168:	e0bfff17 	ldw	r2,-4(fp)
    816c:	10000005 	stb	zero,0(r2)
    return (len);
    8170:	e0bffa03 	ldbu	r2,-24(fp)
}
    8174:	e037883a 	mov	sp,fp
    8178:	dfc00117 	ldw	ra,4(sp)
    817c:	df000017 	ldw	fp,0(sp)
    8180:	dec00204 	addi	sp,sp,8
    8184:	f800283a 	ret

00008188 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    8188:	defff604 	addi	sp,sp,-40
    818c:	dfc00915 	stw	ra,36(sp)
    8190:	df000815 	stw	fp,32(sp)
    8194:	df000804 	addi	fp,sp,32
    8198:	e13ffd15 	stw	r4,-12(fp)
    819c:	e17ffe15 	stw	r5,-8(fp)
    81a0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    81a4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    81a8:	e0bfff17 	ldw	r2,-4(fp)
    81ac:	10003726 	beq	r2,zero,828c <OSMemNameSet+0x104>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    81b0:	e0bffd17 	ldw	r2,-12(fp)
    81b4:	1000041e 	bne	r2,zero,81c8 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    81b8:	e0bfff17 	ldw	r2,-4(fp)
    81bc:	00c01804 	movi	r3,96
    81c0:	10c00005 	stb	r3,0(r2)
        return;
    81c4:	00003206 	br	8290 <OSMemNameSet+0x108>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    81c8:	e0bffe17 	ldw	r2,-8(fp)
    81cc:	1000041e 	bne	r2,zero,81e0 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    81d0:	e0bfff17 	ldw	r2,-4(fp)
    81d4:	00c00304 	movi	r3,12
    81d8:	10c00005 	stb	r3,0(r2)
        return;
    81dc:	00002c06 	br	8290 <OSMemNameSet+0x108>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    81e0:	00800074 	movhi	r2,1
    81e4:	10879504 	addi	r2,r2,7764
    81e8:	10800003 	ldbu	r2,0(r2)
    81ec:	10803fcc 	andi	r2,r2,255
    81f0:	10000426 	beq	r2,zero,8204 <OSMemNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
    81f4:	e0bfff17 	ldw	r2,-4(fp)
    81f8:	00c00484 	movi	r3,18
    81fc:	10c00005 	stb	r3,0(r2)
        return;
    8200:	00002306 	br	8290 <OSMemNameSet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8204:	0005303a 	rdctl	r2,status
    8208:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    820c:	e0fffc17 	ldw	r3,-16(fp)
    8210:	00bfff84 	movi	r2,-2
    8214:	1884703a 	and	r2,r3,r2
    8218:	1001703a 	wrctl	status,r2
  
  return context;
    821c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    8220:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    8224:	e13ffe17 	ldw	r4,-8(fp)
    8228:	0005dd80 	call	5dd8 <OS_StrLen>
    822c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
    8230:	e0bffa03 	ldbu	r2,-24(fp)
    8234:	10800830 	cmpltui	r2,r2,32
    8238:	1000081e 	bne	r2,zero,825c <OSMemNameSet+0xd4>
    823c:	e0bff817 	ldw	r2,-32(fp)
    8240:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8244:	e0bff917 	ldw	r2,-28(fp)
    8248:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
    824c:	e0bfff17 	ldw	r2,-4(fp)
    8250:	00c018c4 	movi	r3,99
    8254:	10c00005 	stb	r3,0(r2)
        return;
    8258:	00000d06 	br	8290 <OSMemNameSet+0x108>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    825c:	e0bffd17 	ldw	r2,-12(fp)
    8260:	10800504 	addi	r2,r2,20
    8264:	e17ffe17 	ldw	r5,-8(fp)
    8268:	1009883a 	mov	r4,r2
    826c:	0005d640 	call	5d64 <OS_StrCopy>
    8270:	e0bff817 	ldw	r2,-32(fp)
    8274:	e0bffb15 	stw	r2,-20(fp)
    8278:	e0bffb17 	ldw	r2,-20(fp)
    827c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    8280:	e0bfff17 	ldw	r2,-4(fp)
    8284:	10000005 	stb	zero,0(r2)
    8288:	00000106 	br	8290 <OSMemNameSet+0x108>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    828c:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    8290:	e037883a 	mov	sp,fp
    8294:	dfc00117 	ldw	ra,4(sp)
    8298:	df000017 	ldw	fp,0(sp)
    829c:	dec00204 	addi	sp,sp,8
    82a0:	f800283a 	ret

000082a4 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
    82a4:	defff904 	addi	sp,sp,-28
    82a8:	df000615 	stw	fp,24(sp)
    82ac:	df000604 	addi	fp,sp,24
    82b0:	e13ffe15 	stw	r4,-8(fp)
    82b4:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    82b8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    82bc:	e0bffe17 	ldw	r2,-8(fp)
    82c0:	1000021e 	bne	r2,zero,82cc <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    82c4:	00801804 	movi	r2,96
    82c8:	00002806 	br	836c <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
    82cc:	e0bfff17 	ldw	r2,-4(fp)
    82d0:	1000021e 	bne	r2,zero,82dc <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
    82d4:	008017c4 	movi	r2,95
    82d8:	00002406 	br	836c <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    82dc:	0005303a 	rdctl	r2,status
    82e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    82e4:	e0fffd17 	ldw	r3,-12(fp)
    82e8:	00bfff84 	movi	r2,-2
    82ec:	1884703a 	and	r2,r3,r2
    82f0:	1001703a 	wrctl	status,r2
  
  return context;
    82f4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    82f8:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
    82fc:	e0bffe17 	ldw	r2,-8(fp)
    8300:	10c00417 	ldw	r3,16(r2)
    8304:	e0bffe17 	ldw	r2,-8(fp)
    8308:	10800317 	ldw	r2,12(r2)
    830c:	18800636 	bltu	r3,r2,8328 <OSMemPut+0x84>
    8310:	e0bffa17 	ldw	r2,-24(fp)
    8314:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8318:	e0bffb17 	ldw	r2,-20(fp)
    831c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
    8320:	00801784 	movi	r2,94
    8324:	00001106 	br	836c <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
    8328:	e0bffe17 	ldw	r2,-8(fp)
    832c:	10c00117 	ldw	r3,4(r2)
    8330:	e0bfff17 	ldw	r2,-4(fp)
    8334:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
    8338:	e0bffe17 	ldw	r2,-8(fp)
    833c:	e0ffff17 	ldw	r3,-4(fp)
    8340:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
    8344:	e0bffe17 	ldw	r2,-8(fp)
    8348:	10800417 	ldw	r2,16(r2)
    834c:	10c00044 	addi	r3,r2,1
    8350:	e0bffe17 	ldw	r2,-8(fp)
    8354:	10c00415 	stw	r3,16(r2)
    8358:	e0bffa17 	ldw	r2,-24(fp)
    835c:	e0bffc15 	stw	r2,-16(fp)
    8360:	e0bffc17 	ldw	r2,-16(fp)
    8364:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
    8368:	0005883a 	mov	r2,zero
}
    836c:	e037883a 	mov	sp,fp
    8370:	df000017 	ldw	fp,0(sp)
    8374:	dec00104 	addi	sp,sp,4
    8378:	f800283a 	ret

0000837c <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
    837c:	defffa04 	addi	sp,sp,-24
    8380:	df000515 	stw	fp,20(sp)
    8384:	df000504 	addi	fp,sp,20
    8388:	e13ffe15 	stw	r4,-8(fp)
    838c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    8390:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    8394:	e0bffe17 	ldw	r2,-8(fp)
    8398:	1000021e 	bne	r2,zero,83a4 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    839c:	00801804 	movi	r2,96
    83a0:	00002c06 	br	8454 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
    83a4:	e0bfff17 	ldw	r2,-4(fp)
    83a8:	1000021e 	bne	r2,zero,83b4 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
    83ac:	00801844 	movi	r2,97
    83b0:	00002806 	br	8454 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    83b4:	0005303a 	rdctl	r2,status
    83b8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    83bc:	e0fffc17 	ldw	r3,-16(fp)
    83c0:	00bfff84 	movi	r2,-2
    83c4:	1884703a 	and	r2,r3,r2
    83c8:	1001703a 	wrctl	status,r2
  
  return context;
    83cc:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    83d0:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
    83d4:	e0bffe17 	ldw	r2,-8(fp)
    83d8:	10c00017 	ldw	r3,0(r2)
    83dc:	e0bfff17 	ldw	r2,-4(fp)
    83e0:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
    83e4:	e0bffe17 	ldw	r2,-8(fp)
    83e8:	10c00117 	ldw	r3,4(r2)
    83ec:	e0bfff17 	ldw	r2,-4(fp)
    83f0:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
    83f4:	e0bffe17 	ldw	r2,-8(fp)
    83f8:	10c00217 	ldw	r3,8(r2)
    83fc:	e0bfff17 	ldw	r2,-4(fp)
    8400:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
    8404:	e0bffe17 	ldw	r2,-8(fp)
    8408:	10c00317 	ldw	r3,12(r2)
    840c:	e0bfff17 	ldw	r2,-4(fp)
    8410:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
    8414:	e0bffe17 	ldw	r2,-8(fp)
    8418:	10c00417 	ldw	r3,16(r2)
    841c:	e0bfff17 	ldw	r2,-4(fp)
    8420:	10c00415 	stw	r3,16(r2)
    8424:	e0bffb17 	ldw	r2,-20(fp)
    8428:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    842c:	e0bffd17 	ldw	r2,-12(fp)
    8430:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
    8434:	e0bfff17 	ldw	r2,-4(fp)
    8438:	10c00317 	ldw	r3,12(r2)
    843c:	e0bfff17 	ldw	r2,-4(fp)
    8440:	10800417 	ldw	r2,16(r2)
    8444:	1887c83a 	sub	r3,r3,r2
    8448:	e0bfff17 	ldw	r2,-4(fp)
    844c:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
    8450:	0005883a 	mov	r2,zero
}
    8454:	e037883a 	mov	sp,fp
    8458:	df000017 	ldw	fp,0(sp)
    845c:	dec00104 	addi	sp,sp,4
    8460:	f800283a 	ret

00008464 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
    8464:	defffc04 	addi	sp,sp,-16
    8468:	dfc00315 	stw	ra,12(sp)
    846c:	df000215 	stw	fp,8(sp)
    8470:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    8474:	01430c04 	movi	r5,3120
    8478:	01000074 	movhi	r4,1
    847c:	21188504 	addi	r4,r4,25108
    8480:	0005b040 	call	5b04 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    8484:	00800074 	movhi	r2,1
    8488:	10988504 	addi	r2,r2,25108
    848c:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    8490:	e03fff0d 	sth	zero,-4(fp)
    8494:	00001306 	br	84e4 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
    8498:	e0bfff0b 	ldhu	r2,-4(fp)
    849c:	10800044 	addi	r2,r2,1
    84a0:	10c00d24 	muli	r3,r2,52
    84a4:	00800074 	movhi	r2,1
    84a8:	10988504 	addi	r2,r2,25108
    84ac:	1887883a 	add	r3,r3,r2
    84b0:	e0bffe17 	ldw	r2,-8(fp)
    84b4:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
    84b8:	e0bffe17 	ldw	r2,-8(fp)
    84bc:	00c00fc4 	movi	r3,63
    84c0:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
    84c4:	e0bffe17 	ldw	r2,-8(fp)
    84c8:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
    84cc:	e0bffe17 	ldw	r2,-8(fp)
    84d0:	10800d04 	addi	r2,r2,52
    84d4:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    84d8:	e0bfff0b 	ldhu	r2,-4(fp)
    84dc:	10800044 	addi	r2,r2,1
    84e0:	e0bfff0d 	sth	r2,-4(fp)
    84e4:	e0bfff0b 	ldhu	r2,-4(fp)
    84e8:	10800ef0 	cmpltui	r2,r2,59
    84ec:	103fea1e 	bne	r2,zero,8498 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
    84f0:	e0bffe17 	ldw	r2,-8(fp)
    84f4:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
    84f8:	e0bffe17 	ldw	r2,-8(fp)
    84fc:	00c00fc4 	movi	r3,63
    8500:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
    8504:	e0bffe17 	ldw	r2,-8(fp)
    8508:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
    850c:	00800074 	movhi	r2,1
    8510:	10879004 	addi	r2,r2,7744
    8514:	00c00074 	movhi	r3,1
    8518:	18d88504 	addi	r3,r3,25108
    851c:	10c00015 	stw	r3,0(r2)
#endif
}
    8520:	0001883a 	nop
    8524:	e037883a 	mov	sp,fp
    8528:	dfc00117 	ldw	ra,4(sp)
    852c:	df000017 	ldw	fp,0(sp)
    8530:	dec00204 	addi	sp,sp,8
    8534:	f800283a 	ret

00008538 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
    8538:	defff804 	addi	sp,sp,-32
    853c:	df000715 	stw	fp,28(sp)
    8540:	df000704 	addi	fp,sp,28
    8544:	e13ffe15 	stw	r4,-8(fp)
    8548:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    854c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    8550:	e0bfff17 	ldw	r2,-4(fp)
    8554:	1000021e 	bne	r2,zero,8560 <OSQAccept+0x28>
        return ((void *)0);
    8558:	0005883a 	mov	r2,zero
    855c:	00004206 	br	8668 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    8560:	e0bffe17 	ldw	r2,-8(fp)
    8564:	1000051e 	bne	r2,zero,857c <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    8568:	e0bfff17 	ldw	r2,-4(fp)
    856c:	00c00104 	movi	r3,4
    8570:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    8574:	0005883a 	mov	r2,zero
    8578:	00003b06 	br	8668 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    857c:	e0bffe17 	ldw	r2,-8(fp)
    8580:	10800003 	ldbu	r2,0(r2)
    8584:	10803fcc 	andi	r2,r2,255
    8588:	108000a0 	cmpeqi	r2,r2,2
    858c:	1000051e 	bne	r2,zero,85a4 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    8590:	e0bfff17 	ldw	r2,-4(fp)
    8594:	00c00044 	movi	r3,1
    8598:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    859c:	0005883a 	mov	r2,zero
    85a0:	00003106 	br	8668 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    85a4:	0005303a 	rdctl	r2,status
    85a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    85ac:	e0fffd17 	ldw	r3,-12(fp)
    85b0:	00bfff84 	movi	r2,-2
    85b4:	1884703a 	and	r2,r3,r2
    85b8:	1001703a 	wrctl	status,r2
  
  return context;
    85bc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    85c0:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    85c4:	e0bffe17 	ldw	r2,-8(fp)
    85c8:	10800117 	ldw	r2,4(r2)
    85cc:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    85d0:	e0bffc17 	ldw	r2,-16(fp)
    85d4:	1080058b 	ldhu	r2,22(r2)
    85d8:	10bfffcc 	andi	r2,r2,65535
    85dc:	10001926 	beq	r2,zero,8644 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    85e0:	e0bffc17 	ldw	r2,-16(fp)
    85e4:	10800417 	ldw	r2,16(r2)
    85e8:	11000104 	addi	r4,r2,4
    85ec:	e0fffc17 	ldw	r3,-16(fp)
    85f0:	19000415 	stw	r4,16(r3)
    85f4:	10800017 	ldw	r2,0(r2)
    85f8:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    85fc:	e0bffc17 	ldw	r2,-16(fp)
    8600:	1080058b 	ldhu	r2,22(r2)
    8604:	10bfffc4 	addi	r2,r2,-1
    8608:	1007883a 	mov	r3,r2
    860c:	e0bffc17 	ldw	r2,-16(fp)
    8610:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    8614:	e0bffc17 	ldw	r2,-16(fp)
    8618:	10c00417 	ldw	r3,16(r2)
    861c:	e0bffc17 	ldw	r2,-16(fp)
    8620:	10800217 	ldw	r2,8(r2)
    8624:	1880041e 	bne	r3,r2,8638 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
    8628:	e0bffc17 	ldw	r2,-16(fp)
    862c:	10c00117 	ldw	r3,4(r2)
    8630:	e0bffc17 	ldw	r2,-16(fp)
    8634:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
    8638:	e0bfff17 	ldw	r2,-4(fp)
    863c:	10000005 	stb	zero,0(r2)
    8640:	00000406 	br	8654 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
    8644:	e0bfff17 	ldw	r2,-4(fp)
    8648:	00c007c4 	movi	r3,31
    864c:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
    8650:	e03ff915 	stw	zero,-28(fp)
    8654:	e0bffa17 	ldw	r2,-24(fp)
    8658:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    865c:	e0bffb17 	ldw	r2,-20(fp)
    8660:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
    8664:	e0bff917 	ldw	r2,-28(fp)
}
    8668:	e037883a 	mov	sp,fp
    866c:	df000017 	ldw	fp,0(sp)
    8670:	dec00104 	addi	sp,sp,4
    8674:	f800283a 	ret

00008678 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
    8678:	defff404 	addi	sp,sp,-48
    867c:	dfc00b15 	stw	ra,44(sp)
    8680:	df000a15 	stw	fp,40(sp)
    8684:	df000a04 	addi	fp,sp,40
    8688:	e13ffe15 	stw	r4,-8(fp)
    868c:	2805883a 	mov	r2,r5
    8690:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    8694:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    8698:	00800074 	movhi	r2,1
    869c:	10879504 	addi	r2,r2,7764
    86a0:	10800003 	ldbu	r2,0(r2)
    86a4:	10803fcc 	andi	r2,r2,255
    86a8:	10000226 	beq	r2,zero,86b4 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
    86ac:	0005883a 	mov	r2,zero
    86b0:	00006b06 	br	8860 <OSQCreate+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    86b4:	0005303a 	rdctl	r2,status
    86b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    86bc:	e0fffd17 	ldw	r3,-12(fp)
    86c0:	00bfff84 	movi	r2,-2
    86c4:	1884703a 	and	r2,r3,r2
    86c8:	1001703a 	wrctl	status,r2
  
  return context;
    86cc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    86d0:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
    86d4:	00800074 	movhi	r2,1
    86d8:	10879404 	addi	r2,r2,7760
    86dc:	10800017 	ldw	r2,0(r2)
    86e0:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
    86e4:	00800074 	movhi	r2,1
    86e8:	10879404 	addi	r2,r2,7760
    86ec:	10800017 	ldw	r2,0(r2)
    86f0:	10000726 	beq	r2,zero,8710 <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    86f4:	00800074 	movhi	r2,1
    86f8:	10879404 	addi	r2,r2,7760
    86fc:	10800017 	ldw	r2,0(r2)
    8700:	10c00117 	ldw	r3,4(r2)
    8704:	00800074 	movhi	r2,1
    8708:	10879404 	addi	r2,r2,7760
    870c:	10c00015 	stw	r3,0(r2)
    8710:	e0bff717 	ldw	r2,-36(fp)
    8714:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8718:	e0bff817 	ldw	r2,-32(fp)
    871c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
    8720:	e0bff617 	ldw	r2,-40(fp)
    8724:	10004d26 	beq	r2,zero,885c <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8728:	0005303a 	rdctl	r2,status
    872c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8730:	e0fff917 	ldw	r3,-28(fp)
    8734:	00bfff84 	movi	r2,-2
    8738:	1884703a 	and	r2,r3,r2
    873c:	1001703a 	wrctl	status,r2
  
  return context;
    8740:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
    8744:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
    8748:	00800074 	movhi	r2,1
    874c:	10879204 	addi	r2,r2,7752
    8750:	10800017 	ldw	r2,0(r2)
    8754:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
    8758:	e0bffb17 	ldw	r2,-20(fp)
    875c:	10003126 	beq	r2,zero,8824 <OSQCreate+0x1ac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
    8760:	00800074 	movhi	r2,1
    8764:	10879204 	addi	r2,r2,7752
    8768:	10800017 	ldw	r2,0(r2)
    876c:	10c00017 	ldw	r3,0(r2)
    8770:	00800074 	movhi	r2,1
    8774:	10879204 	addi	r2,r2,7752
    8778:	10c00015 	stw	r3,0(r2)
    877c:	e0bff717 	ldw	r2,-36(fp)
    8780:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8784:	e0bffa17 	ldw	r2,-24(fp)
    8788:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
    878c:	e0bffb17 	ldw	r2,-20(fp)
    8790:	e0fffe17 	ldw	r3,-8(fp)
    8794:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
    8798:	e0bfff0b 	ldhu	r2,-4(fp)
    879c:	1085883a 	add	r2,r2,r2
    87a0:	1085883a 	add	r2,r2,r2
    87a4:	1007883a 	mov	r3,r2
    87a8:	e0bffe17 	ldw	r2,-8(fp)
    87ac:	10c7883a 	add	r3,r2,r3
    87b0:	e0bffb17 	ldw	r2,-20(fp)
    87b4:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
    87b8:	e0bffb17 	ldw	r2,-20(fp)
    87bc:	e0fffe17 	ldw	r3,-8(fp)
    87c0:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
    87c4:	e0bffb17 	ldw	r2,-20(fp)
    87c8:	e0fffe17 	ldw	r3,-8(fp)
    87cc:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
    87d0:	e0bffb17 	ldw	r2,-20(fp)
    87d4:	e0ffff0b 	ldhu	r3,-4(fp)
    87d8:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
    87dc:	e0bffb17 	ldw	r2,-20(fp)
    87e0:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
    87e4:	e0bff617 	ldw	r2,-40(fp)
    87e8:	00c00084 	movi	r3,2
    87ec:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
    87f0:	e0bff617 	ldw	r2,-40(fp)
    87f4:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
    87f8:	e0bff617 	ldw	r2,-40(fp)
    87fc:	e0fffb17 	ldw	r3,-20(fp)
    8800:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
    8804:	e0bff617 	ldw	r2,-40(fp)
    8808:	00c00fc4 	movi	r3,63
    880c:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
    8810:	e0bff617 	ldw	r2,-40(fp)
    8814:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
    8818:	e13ff617 	ldw	r4,-40(fp)
    881c:	00056900 	call	5690 <OS_EventWaitListInit>
    8820:	00000e06 	br	885c <OSQCreate+0x1e4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
    8824:	00800074 	movhi	r2,1
    8828:	10879404 	addi	r2,r2,7760
    882c:	10c00017 	ldw	r3,0(r2)
    8830:	e0bff617 	ldw	r2,-40(fp)
    8834:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
    8838:	00800074 	movhi	r2,1
    883c:	10879404 	addi	r2,r2,7760
    8840:	e0fff617 	ldw	r3,-40(fp)
    8844:	10c00015 	stw	r3,0(r2)
    8848:	e0bff717 	ldw	r2,-36(fp)
    884c:	e0bffc15 	stw	r2,-16(fp)
    8850:	e0bffc17 	ldw	r2,-16(fp)
    8854:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
    8858:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
    885c:	e0bff617 	ldw	r2,-40(fp)
}
    8860:	e037883a 	mov	sp,fp
    8864:	dfc00117 	ldw	ra,4(sp)
    8868:	df000017 	ldw	fp,0(sp)
    886c:	dec00204 	addi	sp,sp,8
    8870:	f800283a 	ret

00008874 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    8874:	defff204 	addi	sp,sp,-56
    8878:	dfc00d15 	stw	ra,52(sp)
    887c:	df000c15 	stw	fp,48(sp)
    8880:	df000c04 	addi	fp,sp,48
    8884:	e13ffd15 	stw	r4,-12(fp)
    8888:	2805883a 	mov	r2,r5
    888c:	e1bfff15 	stw	r6,-4(fp)
    8890:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    8894:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    8898:	e0bfff17 	ldw	r2,-4(fp)
    889c:	1000021e 	bne	r2,zero,88a8 <OSQDel+0x34>
        return (pevent);
    88a0:	e0bffd17 	ldw	r2,-12(fp)
    88a4:	0000a006 	br	8b28 <OSQDel+0x2b4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    88a8:	e0bffd17 	ldw	r2,-12(fp)
    88ac:	1000051e 	bne	r2,zero,88c4 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    88b0:	e0bfff17 	ldw	r2,-4(fp)
    88b4:	00c00104 	movi	r3,4
    88b8:	10c00005 	stb	r3,0(r2)
        return (pevent);
    88bc:	e0bffd17 	ldw	r2,-12(fp)
    88c0:	00009906 	br	8b28 <OSQDel+0x2b4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    88c4:	e0bffd17 	ldw	r2,-12(fp)
    88c8:	10800003 	ldbu	r2,0(r2)
    88cc:	10803fcc 	andi	r2,r2,255
    88d0:	108000a0 	cmpeqi	r2,r2,2
    88d4:	1000051e 	bne	r2,zero,88ec <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    88d8:	e0bfff17 	ldw	r2,-4(fp)
    88dc:	00c00044 	movi	r3,1
    88e0:	10c00005 	stb	r3,0(r2)
        return (pevent);
    88e4:	e0bffd17 	ldw	r2,-12(fp)
    88e8:	00008f06 	br	8b28 <OSQDel+0x2b4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    88ec:	00800074 	movhi	r2,1
    88f0:	10879504 	addi	r2,r2,7764
    88f4:	10800003 	ldbu	r2,0(r2)
    88f8:	10803fcc 	andi	r2,r2,255
    88fc:	10000526 	beq	r2,zero,8914 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    8900:	e0bfff17 	ldw	r2,-4(fp)
    8904:	00c003c4 	movi	r3,15
    8908:	10c00005 	stb	r3,0(r2)
        return (pevent);
    890c:	e0bffd17 	ldw	r2,-12(fp)
    8910:	00008506 	br	8b28 <OSQDel+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8914:	0005303a 	rdctl	r2,status
    8918:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    891c:	e0fffc17 	ldw	r3,-16(fp)
    8920:	00bfff84 	movi	r2,-2
    8924:	1884703a 	and	r2,r3,r2
    8928:	1001703a 	wrctl	status,r2
  
  return context;
    892c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    8930:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
    8934:	e0bffd17 	ldw	r2,-12(fp)
    8938:	10800283 	ldbu	r2,10(r2)
    893c:	10803fcc 	andi	r2,r2,255
    8940:	10000326 	beq	r2,zero,8950 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    8944:	00800044 	movi	r2,1
    8948:	e0bff405 	stb	r2,-48(fp)
    894c:	00000106 	br	8954 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    8950:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
    8954:	e0bffe03 	ldbu	r2,-8(fp)
    8958:	10000326 	beq	r2,zero,8968 <OSQDel+0xf4>
    895c:	10800060 	cmpeqi	r2,r2,1
    8960:	1000381e 	bne	r2,zero,8a44 <OSQDel+0x1d0>
    8964:	00006506 	br	8afc <OSQDel+0x288>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
    8968:	e0bff403 	ldbu	r2,-48(fp)
    896c:	1000261e 	bne	r2,zero,8a08 <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    8970:	e0bffd17 	ldw	r2,-12(fp)
    8974:	00c00fc4 	movi	r3,63
    8978:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    897c:	e0bffd17 	ldw	r2,-12(fp)
    8980:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
    8984:	e0bffd17 	ldw	r2,-12(fp)
    8988:	10800117 	ldw	r2,4(r2)
    898c:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
    8990:	00800074 	movhi	r2,1
    8994:	10879204 	addi	r2,r2,7752
    8998:	10c00017 	ldw	r3,0(r2)
    899c:	e0bff817 	ldw	r2,-32(fp)
    89a0:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
    89a4:	00800074 	movhi	r2,1
    89a8:	10879204 	addi	r2,r2,7752
    89ac:	e0fff817 	ldw	r3,-32(fp)
    89b0:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    89b4:	e0bffd17 	ldw	r2,-12(fp)
    89b8:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    89bc:	00800074 	movhi	r2,1
    89c0:	10879404 	addi	r2,r2,7760
    89c4:	10c00017 	ldw	r3,0(r2)
    89c8:	e0bffd17 	ldw	r2,-12(fp)
    89cc:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    89d0:	e0bffd17 	ldw	r2,-12(fp)
    89d4:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    89d8:	00800074 	movhi	r2,1
    89dc:	10879404 	addi	r2,r2,7760
    89e0:	e0fffd17 	ldw	r3,-12(fp)
    89e4:	10c00015 	stw	r3,0(r2)
    89e8:	e0bff617 	ldw	r2,-40(fp)
    89ec:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    89f0:	e0bff717 	ldw	r2,-36(fp)
    89f4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    89f8:	e0bfff17 	ldw	r2,-4(fp)
    89fc:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
    8a00:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    8a04:	00004706 	br	8b24 <OSQDel+0x2b0>
    8a08:	e0bff617 	ldw	r2,-40(fp)
    8a0c:	e0bff915 	stw	r2,-28(fp)
    8a10:	e0bff917 	ldw	r2,-28(fp)
    8a14:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
    8a18:	e0bfff17 	ldw	r2,-4(fp)
    8a1c:	00c01244 	movi	r3,73
    8a20:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    8a24:	e0bffd17 	ldw	r2,-12(fp)
    8a28:	e0bff515 	stw	r2,-44(fp)
             }
             break;
    8a2c:	00003d06 	br	8b24 <OSQDel+0x2b0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
    8a30:	000f883a 	mov	r7,zero
    8a34:	01800104 	movi	r6,4
    8a38:	000b883a 	mov	r5,zero
    8a3c:	e13ffd17 	ldw	r4,-12(fp)
    8a40:	0004ffc0 	call	4ffc <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
    8a44:	e0bffd17 	ldw	r2,-12(fp)
    8a48:	10800283 	ldbu	r2,10(r2)
    8a4c:	10803fcc 	andi	r2,r2,255
    8a50:	103ff71e 	bne	r2,zero,8a30 <OSQDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    8a54:	e0bffd17 	ldw	r2,-12(fp)
    8a58:	00c00fc4 	movi	r3,63
    8a5c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    8a60:	e0bffd17 	ldw	r2,-12(fp)
    8a64:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
    8a68:	e0bffd17 	ldw	r2,-12(fp)
    8a6c:	10800117 	ldw	r2,4(r2)
    8a70:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
    8a74:	00800074 	movhi	r2,1
    8a78:	10879204 	addi	r2,r2,7752
    8a7c:	10c00017 	ldw	r3,0(r2)
    8a80:	e0bff817 	ldw	r2,-32(fp)
    8a84:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
    8a88:	00800074 	movhi	r2,1
    8a8c:	10879204 	addi	r2,r2,7752
    8a90:	e0fff817 	ldw	r3,-32(fp)
    8a94:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    8a98:	e0bffd17 	ldw	r2,-12(fp)
    8a9c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    8aa0:	00800074 	movhi	r2,1
    8aa4:	10879404 	addi	r2,r2,7760
    8aa8:	10c00017 	ldw	r3,0(r2)
    8aac:	e0bffd17 	ldw	r2,-12(fp)
    8ab0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    8ab4:	e0bffd17 	ldw	r2,-12(fp)
    8ab8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    8abc:	00800074 	movhi	r2,1
    8ac0:	10879404 	addi	r2,r2,7760
    8ac4:	e0fffd17 	ldw	r3,-12(fp)
    8ac8:	10c00015 	stw	r3,0(r2)
    8acc:	e0bff617 	ldw	r2,-40(fp)
    8ad0:	e0bffa15 	stw	r2,-24(fp)
    8ad4:	e0bffa17 	ldw	r2,-24(fp)
    8ad8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    8adc:	e0bff403 	ldbu	r2,-48(fp)
    8ae0:	10800058 	cmpnei	r2,r2,1
    8ae4:	1000011e 	bne	r2,zero,8aec <OSQDel+0x278>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    8ae8:	0005bc00 	call	5bc0 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    8aec:	e0bfff17 	ldw	r2,-4(fp)
    8af0:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
    8af4:	e03ff515 	stw	zero,-44(fp)
             break;
    8af8:	00000a06 	br	8b24 <OSQDel+0x2b0>
    8afc:	e0bff617 	ldw	r2,-40(fp)
    8b00:	e0bffb15 	stw	r2,-20(fp)
    8b04:	e0bffb17 	ldw	r2,-20(fp)
    8b08:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    8b0c:	e0bfff17 	ldw	r2,-4(fp)
    8b10:	00c001c4 	movi	r3,7
    8b14:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    8b18:	e0bffd17 	ldw	r2,-12(fp)
    8b1c:	e0bff515 	stw	r2,-44(fp)
             break;
    8b20:	0001883a 	nop
    }
    return (pevent_return);
    8b24:	e0bff517 	ldw	r2,-44(fp)
}
    8b28:	e037883a 	mov	sp,fp
    8b2c:	dfc00117 	ldw	ra,4(sp)
    8b30:	df000017 	ldw	fp,0(sp)
    8b34:	dec00204 	addi	sp,sp,8
    8b38:	f800283a 	ret

00008b3c <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
    8b3c:	defffa04 	addi	sp,sp,-24
    8b40:	df000515 	stw	fp,20(sp)
    8b44:	df000504 	addi	fp,sp,20
    8b48:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    8b4c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    8b50:	e0bfff17 	ldw	r2,-4(fp)
    8b54:	1000021e 	bne	r2,zero,8b60 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
    8b58:	00800104 	movi	r2,4
    8b5c:	00002106 	br	8be4 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    8b60:	e0bfff17 	ldw	r2,-4(fp)
    8b64:	10800003 	ldbu	r2,0(r2)
    8b68:	10803fcc 	andi	r2,r2,255
    8b6c:	108000a0 	cmpeqi	r2,r2,2
    8b70:	1000021e 	bne	r2,zero,8b7c <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
    8b74:	00800044 	movi	r2,1
    8b78:	00001a06 	br	8be4 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8b7c:	0005303a 	rdctl	r2,status
    8b80:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8b84:	e0fffd17 	ldw	r3,-12(fp)
    8b88:	00bfff84 	movi	r2,-2
    8b8c:	1884703a 	and	r2,r3,r2
    8b90:	1001703a 	wrctl	status,r2
  
  return context;
    8b94:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    8b98:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
    8b9c:	e0bfff17 	ldw	r2,-4(fp)
    8ba0:	10800117 	ldw	r2,4(r2)
    8ba4:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
    8ba8:	e0bffc17 	ldw	r2,-16(fp)
    8bac:	10c00117 	ldw	r3,4(r2)
    8bb0:	e0bffc17 	ldw	r2,-16(fp)
    8bb4:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
    8bb8:	e0bffc17 	ldw	r2,-16(fp)
    8bbc:	10c00117 	ldw	r3,4(r2)
    8bc0:	e0bffc17 	ldw	r2,-16(fp)
    8bc4:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
    8bc8:	e0bffc17 	ldw	r2,-16(fp)
    8bcc:	1000058d 	sth	zero,22(r2)
    8bd0:	e0bffb17 	ldw	r2,-20(fp)
    8bd4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8bd8:	e0bffe17 	ldw	r2,-8(fp)
    8bdc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    8be0:	0005883a 	mov	r2,zero
}
    8be4:	e037883a 	mov	sp,fp
    8be8:	df000017 	ldw	fp,0(sp)
    8bec:	dec00104 	addi	sp,sp,4
    8bf0:	f800283a 	ret

00008bf4 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    8bf4:	defff304 	addi	sp,sp,-52
    8bf8:	dfc00c15 	stw	ra,48(sp)
    8bfc:	df000b15 	stw	fp,44(sp)
    8c00:	df000b04 	addi	fp,sp,44
    8c04:	e13ffd15 	stw	r4,-12(fp)
    8c08:	2805883a 	mov	r2,r5
    8c0c:	e1bfff15 	stw	r6,-4(fp)
    8c10:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    8c14:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    8c18:	e0bfff17 	ldw	r2,-4(fp)
    8c1c:	1000021e 	bne	r2,zero,8c28 <OSQPend+0x34>
        return ((void *)0);
    8c20:	0005883a 	mov	r2,zero
    8c24:	0000ad06 	br	8edc <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    8c28:	e0bffd17 	ldw	r2,-12(fp)
    8c2c:	1000051e 	bne	r2,zero,8c44 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    8c30:	e0bfff17 	ldw	r2,-4(fp)
    8c34:	00c00104 	movi	r3,4
    8c38:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    8c3c:	0005883a 	mov	r2,zero
    8c40:	0000a606 	br	8edc <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    8c44:	e0bffd17 	ldw	r2,-12(fp)
    8c48:	10800003 	ldbu	r2,0(r2)
    8c4c:	10803fcc 	andi	r2,r2,255
    8c50:	108000a0 	cmpeqi	r2,r2,2
    8c54:	1000051e 	bne	r2,zero,8c6c <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    8c58:	e0bfff17 	ldw	r2,-4(fp)
    8c5c:	00c00044 	movi	r3,1
    8c60:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    8c64:	0005883a 	mov	r2,zero
    8c68:	00009c06 	br	8edc <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    8c6c:	00800074 	movhi	r2,1
    8c70:	10879504 	addi	r2,r2,7764
    8c74:	10800003 	ldbu	r2,0(r2)
    8c78:	10803fcc 	andi	r2,r2,255
    8c7c:	10000526 	beq	r2,zero,8c94 <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
    8c80:	e0bfff17 	ldw	r2,-4(fp)
    8c84:	00c00084 	movi	r3,2
    8c88:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    8c8c:	0005883a 	mov	r2,zero
    8c90:	00009206 	br	8edc <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
    8c94:	00800074 	movhi	r2,1
    8c98:	10878704 	addi	r2,r2,7708
    8c9c:	10800003 	ldbu	r2,0(r2)
    8ca0:	10803fcc 	andi	r2,r2,255
    8ca4:	10000526 	beq	r2,zero,8cbc <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
    8ca8:	e0bfff17 	ldw	r2,-4(fp)
    8cac:	00c00344 	movi	r3,13
    8cb0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    8cb4:	0005883a 	mov	r2,zero
    8cb8:	00008806 	br	8edc <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8cbc:	0005303a 	rdctl	r2,status
    8cc0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8cc4:	e0fffc17 	ldw	r3,-16(fp)
    8cc8:	00bfff84 	movi	r2,-2
    8ccc:	1884703a 	and	r2,r3,r2
    8cd0:	1001703a 	wrctl	status,r2
  
  return context;
    8cd4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    8cd8:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    8cdc:	e0bffd17 	ldw	r2,-12(fp)
    8ce0:	10800117 	ldw	r2,4(r2)
    8ce4:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    8ce8:	e0bff817 	ldw	r2,-32(fp)
    8cec:	1080058b 	ldhu	r2,22(r2)
    8cf0:	10bfffcc 	andi	r2,r2,65535
    8cf4:	10001e26 	beq	r2,zero,8d70 <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    8cf8:	e0bff817 	ldw	r2,-32(fp)
    8cfc:	10800417 	ldw	r2,16(r2)
    8d00:	11000104 	addi	r4,r2,4
    8d04:	e0fff817 	ldw	r3,-32(fp)
    8d08:	19000415 	stw	r4,16(r3)
    8d0c:	10800017 	ldw	r2,0(r2)
    8d10:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    8d14:	e0bff817 	ldw	r2,-32(fp)
    8d18:	1080058b 	ldhu	r2,22(r2)
    8d1c:	10bfffc4 	addi	r2,r2,-1
    8d20:	1007883a 	mov	r3,r2
    8d24:	e0bff817 	ldw	r2,-32(fp)
    8d28:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    8d2c:	e0bff817 	ldw	r2,-32(fp)
    8d30:	10c00417 	ldw	r3,16(r2)
    8d34:	e0bff817 	ldw	r2,-32(fp)
    8d38:	10800217 	ldw	r2,8(r2)
    8d3c:	1880041e 	bne	r3,r2,8d50 <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
    8d40:	e0bff817 	ldw	r2,-32(fp)
    8d44:	10c00117 	ldw	r3,4(r2)
    8d48:	e0bff817 	ldw	r2,-32(fp)
    8d4c:	10c00415 	stw	r3,16(r2)
    8d50:	e0bff617 	ldw	r2,-40(fp)
    8d54:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8d58:	e0bff717 	ldw	r2,-36(fp)
    8d5c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    8d60:	e0bfff17 	ldw	r2,-4(fp)
    8d64:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
    8d68:	e0bff517 	ldw	r2,-44(fp)
    8d6c:	00005b06 	br	8edc <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
    8d70:	00800074 	movhi	r2,1
    8d74:	10879604 	addi	r2,r2,7768
    8d78:	10c00017 	ldw	r3,0(r2)
    8d7c:	00800074 	movhi	r2,1
    8d80:	10879604 	addi	r2,r2,7768
    8d84:	10800017 	ldw	r2,0(r2)
    8d88:	10800c03 	ldbu	r2,48(r2)
    8d8c:	10800114 	ori	r2,r2,4
    8d90:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    8d94:	00800074 	movhi	r2,1
    8d98:	10879604 	addi	r2,r2,7768
    8d9c:	10800017 	ldw	r2,0(r2)
    8da0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
    8da4:	00800074 	movhi	r2,1
    8da8:	10879604 	addi	r2,r2,7768
    8dac:	10800017 	ldw	r2,0(r2)
    8db0:	e0fffe0b 	ldhu	r3,-8(fp)
    8db4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
    8db8:	e13ffd17 	ldw	r4,-12(fp)
    8dbc:	00051b00 	call	51b0 <OS_EventTaskWait>
    8dc0:	e0bff617 	ldw	r2,-40(fp)
    8dc4:	e0bffb15 	stw	r2,-20(fp)
    8dc8:	e0bffb17 	ldw	r2,-20(fp)
    8dcc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
    8dd0:	0005bc00 	call	5bc0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8dd4:	0005303a 	rdctl	r2,status
    8dd8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8ddc:	e0fff917 	ldw	r3,-28(fp)
    8de0:	00bfff84 	movi	r2,-2
    8de4:	1884703a 	and	r2,r3,r2
    8de8:	1001703a 	wrctl	status,r2
  
  return context;
    8dec:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    8df0:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    8df4:	00800074 	movhi	r2,1
    8df8:	10879604 	addi	r2,r2,7768
    8dfc:	10800017 	ldw	r2,0(r2)
    8e00:	10800c43 	ldbu	r2,49(r2)
    8e04:	10803fcc 	andi	r2,r2,255
    8e08:	10000326 	beq	r2,zero,8e18 <OSQPend+0x224>
    8e0c:	108000a0 	cmpeqi	r2,r2,2
    8e10:	1000091e 	bne	r2,zero,8e38 <OSQPend+0x244>
    8e14:	00000d06 	br	8e4c <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
    8e18:	00800074 	movhi	r2,1
    8e1c:	10879604 	addi	r2,r2,7768
    8e20:	10800017 	ldw	r2,0(r2)
    8e24:	10800917 	ldw	r2,36(r2)
    8e28:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
    8e2c:	e0bfff17 	ldw	r2,-4(fp)
    8e30:	10000005 	stb	zero,0(r2)
             break;
    8e34:	00001006 	br	8e78 <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
    8e38:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    8e3c:	e0bfff17 	ldw	r2,-4(fp)
    8e40:	00c00384 	movi	r3,14
    8e44:	10c00005 	stb	r3,0(r2)
             break;
    8e48:	00000b06 	br	8e78 <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
    8e4c:	00800074 	movhi	r2,1
    8e50:	10879604 	addi	r2,r2,7768
    8e54:	10800017 	ldw	r2,0(r2)
    8e58:	e17ffd17 	ldw	r5,-12(fp)
    8e5c:	1009883a 	mov	r4,r2
    8e60:	00054d80 	call	54d8 <OS_EventTaskRemove>
             pmsg = (void *)0;
    8e64:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    8e68:	e0bfff17 	ldw	r2,-4(fp)
    8e6c:	00c00284 	movi	r3,10
    8e70:	10c00005 	stb	r3,0(r2)
             break;
    8e74:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    8e78:	00800074 	movhi	r2,1
    8e7c:	10879604 	addi	r2,r2,7768
    8e80:	10800017 	ldw	r2,0(r2)
    8e84:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    8e88:	00800074 	movhi	r2,1
    8e8c:	10879604 	addi	r2,r2,7768
    8e90:	10800017 	ldw	r2,0(r2)
    8e94:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    8e98:	00800074 	movhi	r2,1
    8e9c:	10879604 	addi	r2,r2,7768
    8ea0:	10800017 	ldw	r2,0(r2)
    8ea4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    8ea8:	00800074 	movhi	r2,1
    8eac:	10879604 	addi	r2,r2,7768
    8eb0:	10800017 	ldw	r2,0(r2)
    8eb4:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
    8eb8:	00800074 	movhi	r2,1
    8ebc:	10879604 	addi	r2,r2,7768
    8ec0:	10800017 	ldw	r2,0(r2)
    8ec4:	10000915 	stw	zero,36(r2)
    8ec8:	e0bff617 	ldw	r2,-40(fp)
    8ecc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8ed0:	e0bffa17 	ldw	r2,-24(fp)
    8ed4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
    8ed8:	e0bff517 	ldw	r2,-44(fp)
}
    8edc:	e037883a 	mov	sp,fp
    8ee0:	dfc00117 	ldw	ra,4(sp)
    8ee4:	df000017 	ldw	fp,0(sp)
    8ee8:	dec00204 	addi	sp,sp,8
    8eec:	f800283a 	ret

00008ef0 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    8ef0:	defff604 	addi	sp,sp,-40
    8ef4:	dfc00915 	stw	ra,36(sp)
    8ef8:	df000815 	stw	fp,32(sp)
    8efc:	df000804 	addi	fp,sp,32
    8f00:	e13ffd15 	stw	r4,-12(fp)
    8f04:	2805883a 	mov	r2,r5
    8f08:	e1bfff15 	stw	r6,-4(fp)
    8f0c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    8f10:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    8f14:	e0bfff17 	ldw	r2,-4(fp)
    8f18:	1000021e 	bne	r2,zero,8f24 <OSQPendAbort+0x34>
        return (0);
    8f1c:	0005883a 	mov	r2,zero
    8f20:	00004906 	br	9048 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    8f24:	e0bffd17 	ldw	r2,-12(fp)
    8f28:	1000051e 	bne	r2,zero,8f40 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    8f2c:	e0bfff17 	ldw	r2,-4(fp)
    8f30:	00c00104 	movi	r3,4
    8f34:	10c00005 	stb	r3,0(r2)
        return (0);
    8f38:	0005883a 	mov	r2,zero
    8f3c:	00004206 	br	9048 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    8f40:	e0bffd17 	ldw	r2,-12(fp)
    8f44:	10800003 	ldbu	r2,0(r2)
    8f48:	10803fcc 	andi	r2,r2,255
    8f4c:	108000a0 	cmpeqi	r2,r2,2
    8f50:	1000051e 	bne	r2,zero,8f68 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    8f54:	e0bfff17 	ldw	r2,-4(fp)
    8f58:	00c00044 	movi	r3,1
    8f5c:	10c00005 	stb	r3,0(r2)
        return (0);
    8f60:	0005883a 	mov	r2,zero
    8f64:	00003806 	br	9048 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8f68:	0005303a 	rdctl	r2,status
    8f6c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8f70:	e0fffc17 	ldw	r3,-16(fp)
    8f74:	00bfff84 	movi	r2,-2
    8f78:	1884703a 	and	r2,r3,r2
    8f7c:	1001703a 	wrctl	status,r2
  
  return context;
    8f80:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    8f84:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
    8f88:	e0bffd17 	ldw	r2,-12(fp)
    8f8c:	10800283 	ldbu	r2,10(r2)
    8f90:	10803fcc 	andi	r2,r2,255
    8f94:	10002526 	beq	r2,zero,902c <OSQPendAbort+0x13c>
        nbr_tasks = 0;
    8f98:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
    8f9c:	e0bffe03 	ldbu	r2,-8(fp)
    8fa0:	10800060 	cmpeqi	r2,r2,1
    8fa4:	10000e26 	beq	r2,zero,8fe0 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    8fa8:	00000806 	br	8fcc <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    8fac:	01c00084 	movi	r7,2
    8fb0:	01800104 	movi	r6,4
    8fb4:	000b883a 	mov	r5,zero
    8fb8:	e13ffd17 	ldw	r4,-12(fp)
    8fbc:	0004ffc0 	call	4ffc <OS_EventTaskRdy>
                     nbr_tasks++;
    8fc0:	e0bff803 	ldbu	r2,-32(fp)
    8fc4:	10800044 	addi	r2,r2,1
    8fc8:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    8fcc:	e0bffd17 	ldw	r2,-12(fp)
    8fd0:	10800283 	ldbu	r2,10(r2)
    8fd4:	10803fcc 	andi	r2,r2,255
    8fd8:	103ff41e 	bne	r2,zero,8fac <OSQPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    8fdc:	00000906 	br	9004 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    8fe0:	01c00084 	movi	r7,2
    8fe4:	01800104 	movi	r6,4
    8fe8:	000b883a 	mov	r5,zero
    8fec:	e13ffd17 	ldw	r4,-12(fp)
    8ff0:	0004ffc0 	call	4ffc <OS_EventTaskRdy>
                 nbr_tasks++;
    8ff4:	e0bff803 	ldbu	r2,-32(fp)
    8ff8:	10800044 	addi	r2,r2,1
    8ffc:	e0bff805 	stb	r2,-32(fp)
                 break;
    9000:	0001883a 	nop
    9004:	e0bff917 	ldw	r2,-28(fp)
    9008:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    900c:	e0bffa17 	ldw	r2,-24(fp)
    9010:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
    9014:	0005bc00 	call	5bc0 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    9018:	e0bfff17 	ldw	r2,-4(fp)
    901c:	00c00384 	movi	r3,14
    9020:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    9024:	e0bff803 	ldbu	r2,-32(fp)
    9028:	00000706 	br	9048 <OSQPendAbort+0x158>
    902c:	e0bff917 	ldw	r2,-28(fp)
    9030:	e0bffb15 	stw	r2,-20(fp)
    9034:	e0bffb17 	ldw	r2,-20(fp)
    9038:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    903c:	e0bfff17 	ldw	r2,-4(fp)
    9040:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
    9044:	0005883a 	mov	r2,zero
}
    9048:	e037883a 	mov	sp,fp
    904c:	dfc00117 	ldw	ra,4(sp)
    9050:	df000017 	ldw	fp,0(sp)
    9054:	dec00204 	addi	sp,sp,8
    9058:	f800283a 	ret

0000905c <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
    905c:	defff604 	addi	sp,sp,-40
    9060:	dfc00915 	stw	ra,36(sp)
    9064:	df000815 	stw	fp,32(sp)
    9068:	df000804 	addi	fp,sp,32
    906c:	e13ffe15 	stw	r4,-8(fp)
    9070:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    9074:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    9078:	e0bffe17 	ldw	r2,-8(fp)
    907c:	1000021e 	bne	r2,zero,9088 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
    9080:	00800104 	movi	r2,4
    9084:	00004a06 	br	91b0 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    9088:	e0bffe17 	ldw	r2,-8(fp)
    908c:	10800003 	ldbu	r2,0(r2)
    9090:	10803fcc 	andi	r2,r2,255
    9094:	108000a0 	cmpeqi	r2,r2,2
    9098:	1000021e 	bne	r2,zero,90a4 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
    909c:	00800044 	movi	r2,1
    90a0:	00004306 	br	91b0 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    90a4:	0005303a 	rdctl	r2,status
    90a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    90ac:	e0fffd17 	ldw	r3,-12(fp)
    90b0:	00bfff84 	movi	r2,-2
    90b4:	1884703a 	and	r2,r3,r2
    90b8:	1001703a 	wrctl	status,r2
  
  return context;
    90bc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    90c0:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
    90c4:	e0bffe17 	ldw	r2,-8(fp)
    90c8:	10800283 	ldbu	r2,10(r2)
    90cc:	10803fcc 	andi	r2,r2,255
    90d0:	10000c26 	beq	r2,zero,9104 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    90d4:	000f883a 	mov	r7,zero
    90d8:	01800104 	movi	r6,4
    90dc:	e17fff17 	ldw	r5,-4(fp)
    90e0:	e13ffe17 	ldw	r4,-8(fp)
    90e4:	0004ffc0 	call	4ffc <OS_EventTaskRdy>
    90e8:	e0bff817 	ldw	r2,-32(fp)
    90ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    90f0:	e0bff917 	ldw	r2,-28(fp)
    90f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
    90f8:	0005bc00 	call	5bc0 <OS_Sched>
        return (OS_ERR_NONE);
    90fc:	0005883a 	mov	r2,zero
    9100:	00002b06 	br	91b0 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
    9104:	e0bffe17 	ldw	r2,-8(fp)
    9108:	10800117 	ldw	r2,4(r2)
    910c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
    9110:	e0bffb17 	ldw	r2,-20(fp)
    9114:	10c0058b 	ldhu	r3,22(r2)
    9118:	e0bffb17 	ldw	r2,-20(fp)
    911c:	1080050b 	ldhu	r2,20(r2)
    9120:	18ffffcc 	andi	r3,r3,65535
    9124:	10bfffcc 	andi	r2,r2,65535
    9128:	18800636 	bltu	r3,r2,9144 <OSQPost+0xe8>
    912c:	e0bff817 	ldw	r2,-32(fp)
    9130:	e0bffa15 	stw	r2,-24(fp)
    9134:	e0bffa17 	ldw	r2,-24(fp)
    9138:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    913c:	00800784 	movi	r2,30
    9140:	00001b06 	br	91b0 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
    9144:	e0bffb17 	ldw	r2,-20(fp)
    9148:	10800317 	ldw	r2,12(r2)
    914c:	11000104 	addi	r4,r2,4
    9150:	e0fffb17 	ldw	r3,-20(fp)
    9154:	19000315 	stw	r4,12(r3)
    9158:	e0ffff17 	ldw	r3,-4(fp)
    915c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
    9160:	e0bffb17 	ldw	r2,-20(fp)
    9164:	1080058b 	ldhu	r2,22(r2)
    9168:	10800044 	addi	r2,r2,1
    916c:	1007883a 	mov	r3,r2
    9170:	e0bffb17 	ldw	r2,-20(fp)
    9174:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
    9178:	e0bffb17 	ldw	r2,-20(fp)
    917c:	10c00317 	ldw	r3,12(r2)
    9180:	e0bffb17 	ldw	r2,-20(fp)
    9184:	10800217 	ldw	r2,8(r2)
    9188:	1880041e 	bne	r3,r2,919c <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
    918c:	e0bffb17 	ldw	r2,-20(fp)
    9190:	10c00117 	ldw	r3,4(r2)
    9194:	e0bffb17 	ldw	r2,-20(fp)
    9198:	10c00315 	stw	r3,12(r2)
    919c:	e0bff817 	ldw	r2,-32(fp)
    91a0:	e0bffc15 	stw	r2,-16(fp)
    91a4:	e0bffc17 	ldw	r2,-16(fp)
    91a8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    91ac:	0005883a 	mov	r2,zero
}
    91b0:	e037883a 	mov	sp,fp
    91b4:	dfc00117 	ldw	ra,4(sp)
    91b8:	df000017 	ldw	fp,0(sp)
    91bc:	dec00204 	addi	sp,sp,8
    91c0:	f800283a 	ret

000091c4 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
    91c4:	defff604 	addi	sp,sp,-40
    91c8:	dfc00915 	stw	ra,36(sp)
    91cc:	df000815 	stw	fp,32(sp)
    91d0:	df000804 	addi	fp,sp,32
    91d4:	e13ffe15 	stw	r4,-8(fp)
    91d8:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    91dc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    91e0:	e0bffe17 	ldw	r2,-8(fp)
    91e4:	1000021e 	bne	r2,zero,91f0 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
    91e8:	00800104 	movi	r2,4
    91ec:	00004c06 	br	9320 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    91f0:	e0bffe17 	ldw	r2,-8(fp)
    91f4:	10800003 	ldbu	r2,0(r2)
    91f8:	10803fcc 	andi	r2,r2,255
    91fc:	108000a0 	cmpeqi	r2,r2,2
    9200:	1000021e 	bne	r2,zero,920c <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
    9204:	00800044 	movi	r2,1
    9208:	00004506 	br	9320 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    920c:	0005303a 	rdctl	r2,status
    9210:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9214:	e0fffd17 	ldw	r3,-12(fp)
    9218:	00bfff84 	movi	r2,-2
    921c:	1884703a 	and	r2,r3,r2
    9220:	1001703a 	wrctl	status,r2
  
  return context;
    9224:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    9228:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
    922c:	e0bffe17 	ldw	r2,-8(fp)
    9230:	10800283 	ldbu	r2,10(r2)
    9234:	10803fcc 	andi	r2,r2,255
    9238:	10000c26 	beq	r2,zero,926c <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    923c:	000f883a 	mov	r7,zero
    9240:	01800104 	movi	r6,4
    9244:	e17fff17 	ldw	r5,-4(fp)
    9248:	e13ffe17 	ldw	r4,-8(fp)
    924c:	0004ffc0 	call	4ffc <OS_EventTaskRdy>
    9250:	e0bff817 	ldw	r2,-32(fp)
    9254:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9258:	e0bff917 	ldw	r2,-28(fp)
    925c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
    9260:	0005bc00 	call	5bc0 <OS_Sched>
        return (OS_ERR_NONE);
    9264:	0005883a 	mov	r2,zero
    9268:	00002d06 	br	9320 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    926c:	e0bffe17 	ldw	r2,-8(fp)
    9270:	10800117 	ldw	r2,4(r2)
    9274:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    9278:	e0bffb17 	ldw	r2,-20(fp)
    927c:	10c0058b 	ldhu	r3,22(r2)
    9280:	e0bffb17 	ldw	r2,-20(fp)
    9284:	1080050b 	ldhu	r2,20(r2)
    9288:	18ffffcc 	andi	r3,r3,65535
    928c:	10bfffcc 	andi	r2,r2,65535
    9290:	18800636 	bltu	r3,r2,92ac <OSQPostFront+0xe8>
    9294:	e0bff817 	ldw	r2,-32(fp)
    9298:	e0bffa15 	stw	r2,-24(fp)
    929c:	e0bffa17 	ldw	r2,-24(fp)
    92a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    92a4:	00800784 	movi	r2,30
    92a8:	00001d06 	br	9320 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
    92ac:	e0bffb17 	ldw	r2,-20(fp)
    92b0:	10c00417 	ldw	r3,16(r2)
    92b4:	e0bffb17 	ldw	r2,-20(fp)
    92b8:	10800117 	ldw	r2,4(r2)
    92bc:	1880041e 	bne	r3,r2,92d0 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
    92c0:	e0bffb17 	ldw	r2,-20(fp)
    92c4:	10c00217 	ldw	r3,8(r2)
    92c8:	e0bffb17 	ldw	r2,-20(fp)
    92cc:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
    92d0:	e0bffb17 	ldw	r2,-20(fp)
    92d4:	10800417 	ldw	r2,16(r2)
    92d8:	10ffff04 	addi	r3,r2,-4
    92dc:	e0bffb17 	ldw	r2,-20(fp)
    92e0:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
    92e4:	e0bffb17 	ldw	r2,-20(fp)
    92e8:	10800417 	ldw	r2,16(r2)
    92ec:	e0ffff17 	ldw	r3,-4(fp)
    92f0:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    92f4:	e0bffb17 	ldw	r2,-20(fp)
    92f8:	1080058b 	ldhu	r2,22(r2)
    92fc:	10800044 	addi	r2,r2,1
    9300:	1007883a 	mov	r3,r2
    9304:	e0bffb17 	ldw	r2,-20(fp)
    9308:	10c0058d 	sth	r3,22(r2)
    930c:	e0bff817 	ldw	r2,-32(fp)
    9310:	e0bffc15 	stw	r2,-16(fp)
    9314:	e0bffc17 	ldw	r2,-16(fp)
    9318:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    931c:	0005883a 	mov	r2,zero
}
    9320:	e037883a 	mov	sp,fp
    9324:	dfc00117 	ldw	ra,4(sp)
    9328:	df000017 	ldw	fp,0(sp)
    932c:	dec00204 	addi	sp,sp,8
    9330:	f800283a 	ret

00009334 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
    9334:	defff504 	addi	sp,sp,-44
    9338:	dfc00a15 	stw	ra,40(sp)
    933c:	df000915 	stw	fp,36(sp)
    9340:	df000904 	addi	fp,sp,36
    9344:	e13ffd15 	stw	r4,-12(fp)
    9348:	e17ffe15 	stw	r5,-8(fp)
    934c:	3005883a 	mov	r2,r6
    9350:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    9354:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    9358:	e0bffd17 	ldw	r2,-12(fp)
    935c:	1000021e 	bne	r2,zero,9368 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
    9360:	00800104 	movi	r2,4
    9364:	00007106 	br	952c <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    9368:	e0bffd17 	ldw	r2,-12(fp)
    936c:	10800003 	ldbu	r2,0(r2)
    9370:	10803fcc 	andi	r2,r2,255
    9374:	108000a0 	cmpeqi	r2,r2,2
    9378:	1000021e 	bne	r2,zero,9384 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
    937c:	00800044 	movi	r2,1
    9380:	00006a06 	br	952c <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9384:	0005303a 	rdctl	r2,status
    9388:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    938c:	e0fffc17 	ldw	r3,-16(fp)
    9390:	00bfff84 	movi	r2,-2
    9394:	1884703a 	and	r2,r3,r2
    9398:	1001703a 	wrctl	status,r2
  
  return context;
    939c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    93a0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
    93a4:	e0bffd17 	ldw	r2,-12(fp)
    93a8:	10800283 	ldbu	r2,10(r2)
    93ac:	10803fcc 	andi	r2,r2,255
    93b0:	10001d26 	beq	r2,zero,9428 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
    93b4:	e0bfff03 	ldbu	r2,-4(fp)
    93b8:	1080004c 	andi	r2,r2,1
    93bc:	10000b26 	beq	r2,zero,93ec <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    93c0:	00000506 	br	93d8 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    93c4:	000f883a 	mov	r7,zero
    93c8:	01800104 	movi	r6,4
    93cc:	e17ffe17 	ldw	r5,-8(fp)
    93d0:	e13ffd17 	ldw	r4,-12(fp)
    93d4:	0004ffc0 	call	4ffc <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    93d8:	e0bffd17 	ldw	r2,-12(fp)
    93dc:	10800283 	ldbu	r2,10(r2)
    93e0:	10803fcc 	andi	r2,r2,255
    93e4:	103ff71e 	bne	r2,zero,93c4 <OSQPostOpt+0x90>
    93e8:	00000506 	br	9400 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    93ec:	000f883a 	mov	r7,zero
    93f0:	01800104 	movi	r6,4
    93f4:	e17ffe17 	ldw	r5,-8(fp)
    93f8:	e13ffd17 	ldw	r4,-12(fp)
    93fc:	0004ffc0 	call	4ffc <OS_EventTaskRdy>
    9400:	e0bff717 	ldw	r2,-36(fp)
    9404:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9408:	e0bff817 	ldw	r2,-32(fp)
    940c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
    9410:	e0bfff03 	ldbu	r2,-4(fp)
    9414:	1080010c 	andi	r2,r2,4
    9418:	1000011e 	bne	r2,zero,9420 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
    941c:	0005bc00 	call	5bc0 <OS_Sched>
        }
        return (OS_ERR_NONE);
    9420:	0005883a 	mov	r2,zero
    9424:	00004106 	br	952c <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    9428:	e0bffd17 	ldw	r2,-12(fp)
    942c:	10800117 	ldw	r2,4(r2)
    9430:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    9434:	e0bffa17 	ldw	r2,-24(fp)
    9438:	10c0058b 	ldhu	r3,22(r2)
    943c:	e0bffa17 	ldw	r2,-24(fp)
    9440:	1080050b 	ldhu	r2,20(r2)
    9444:	18ffffcc 	andi	r3,r3,65535
    9448:	10bfffcc 	andi	r2,r2,65535
    944c:	18800636 	bltu	r3,r2,9468 <OSQPostOpt+0x134>
    9450:	e0bff717 	ldw	r2,-36(fp)
    9454:	e0bff915 	stw	r2,-28(fp)
    9458:	e0bff917 	ldw	r2,-28(fp)
    945c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    9460:	00800784 	movi	r2,30
    9464:	00003106 	br	952c <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
    9468:	e0bfff03 	ldbu	r2,-4(fp)
    946c:	1080008c 	andi	r2,r2,2
    9470:	10001326 	beq	r2,zero,94c0 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
    9474:	e0bffa17 	ldw	r2,-24(fp)
    9478:	10c00417 	ldw	r3,16(r2)
    947c:	e0bffa17 	ldw	r2,-24(fp)
    9480:	10800117 	ldw	r2,4(r2)
    9484:	1880041e 	bne	r3,r2,9498 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
    9488:	e0bffa17 	ldw	r2,-24(fp)
    948c:	10c00217 	ldw	r3,8(r2)
    9490:	e0bffa17 	ldw	r2,-24(fp)
    9494:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
    9498:	e0bffa17 	ldw	r2,-24(fp)
    949c:	10800417 	ldw	r2,16(r2)
    94a0:	10ffff04 	addi	r3,r2,-4
    94a4:	e0bffa17 	ldw	r2,-24(fp)
    94a8:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
    94ac:	e0bffa17 	ldw	r2,-24(fp)
    94b0:	10800417 	ldw	r2,16(r2)
    94b4:	e0fffe17 	ldw	r3,-8(fp)
    94b8:	10c00015 	stw	r3,0(r2)
    94bc:	00001006 	br	9500 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
    94c0:	e0bffa17 	ldw	r2,-24(fp)
    94c4:	10800317 	ldw	r2,12(r2)
    94c8:	11000104 	addi	r4,r2,4
    94cc:	e0fffa17 	ldw	r3,-24(fp)
    94d0:	19000315 	stw	r4,12(r3)
    94d4:	e0fffe17 	ldw	r3,-8(fp)
    94d8:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
    94dc:	e0bffa17 	ldw	r2,-24(fp)
    94e0:	10c00317 	ldw	r3,12(r2)
    94e4:	e0bffa17 	ldw	r2,-24(fp)
    94e8:	10800217 	ldw	r2,8(r2)
    94ec:	1880041e 	bne	r3,r2,9500 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
    94f0:	e0bffa17 	ldw	r2,-24(fp)
    94f4:	10c00117 	ldw	r3,4(r2)
    94f8:	e0bffa17 	ldw	r2,-24(fp)
    94fc:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    9500:	e0bffa17 	ldw	r2,-24(fp)
    9504:	1080058b 	ldhu	r2,22(r2)
    9508:	10800044 	addi	r2,r2,1
    950c:	1007883a 	mov	r3,r2
    9510:	e0bffa17 	ldw	r2,-24(fp)
    9514:	10c0058d 	sth	r3,22(r2)
    9518:	e0bff717 	ldw	r2,-36(fp)
    951c:	e0bffb15 	stw	r2,-20(fp)
    9520:	e0bffb17 	ldw	r2,-20(fp)
    9524:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    9528:	0005883a 	mov	r2,zero
}
    952c:	e037883a 	mov	sp,fp
    9530:	dfc00117 	ldw	ra,4(sp)
    9534:	df000017 	ldw	fp,0(sp)
    9538:	dec00204 	addi	sp,sp,8
    953c:	f800283a 	ret

00009540 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
    9540:	defff604 	addi	sp,sp,-40
    9544:	df000915 	stw	fp,36(sp)
    9548:	df000904 	addi	fp,sp,36
    954c:	e13ffe15 	stw	r4,-8(fp)
    9550:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    9554:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    9558:	e0bffe17 	ldw	r2,-8(fp)
    955c:	1000021e 	bne	r2,zero,9568 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    9560:	00800104 	movi	r2,4
    9564:	00004906 	br	968c <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
    9568:	e0bfff17 	ldw	r2,-4(fp)
    956c:	1000021e 	bne	r2,zero,9578 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    9570:	00800244 	movi	r2,9
    9574:	00004506 	br	968c <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    9578:	e0bffe17 	ldw	r2,-8(fp)
    957c:	10800003 	ldbu	r2,0(r2)
    9580:	10803fcc 	andi	r2,r2,255
    9584:	108000a0 	cmpeqi	r2,r2,2
    9588:	1000021e 	bne	r2,zero,9594 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    958c:	00800044 	movi	r2,1
    9590:	00003e06 	br	968c <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9594:	0005303a 	rdctl	r2,status
    9598:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    959c:	e0fffd17 	ldw	r3,-12(fp)
    95a0:	00bfff84 	movi	r2,-2
    95a4:	1884703a 	and	r2,r3,r2
    95a8:	1001703a 	wrctl	status,r2
  
  return context;
    95ac:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    95b0:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    95b4:	e0bffe17 	ldw	r2,-8(fp)
    95b8:	10c00283 	ldbu	r3,10(r2)
    95bc:	e0bfff17 	ldw	r2,-4(fp)
    95c0:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
    95c4:	e0bffe17 	ldw	r2,-8(fp)
    95c8:	108002c4 	addi	r2,r2,11
    95cc:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
    95d0:	e0bfff17 	ldw	r2,-4(fp)
    95d4:	10800204 	addi	r2,r2,8
    95d8:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    95dc:	e03ff705 	stb	zero,-36(fp)
    95e0:	00000b06 	br	9610 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
    95e4:	e0bff917 	ldw	r2,-28(fp)
    95e8:	10c00044 	addi	r3,r2,1
    95ec:	e0fff915 	stw	r3,-28(fp)
    95f0:	e0fff817 	ldw	r3,-32(fp)
    95f4:	19000044 	addi	r4,r3,1
    95f8:	e13ff815 	stw	r4,-32(fp)
    95fc:	18c00003 	ldbu	r3,0(r3)
    9600:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    9604:	e0bff703 	ldbu	r2,-36(fp)
    9608:	10800044 	addi	r2,r2,1
    960c:	e0bff705 	stb	r2,-36(fp)
    9610:	e0bff703 	ldbu	r2,-36(fp)
    9614:	108000f0 	cmpltui	r2,r2,3
    9618:	103ff21e 	bne	r2,zero,95e4 <OSQQuery+0xa4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
    961c:	e0bffe17 	ldw	r2,-8(fp)
    9620:	10800117 	ldw	r2,4(r2)
    9624:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
    9628:	e0bffc17 	ldw	r2,-16(fp)
    962c:	1080058b 	ldhu	r2,22(r2)
    9630:	10bfffcc 	andi	r2,r2,65535
    9634:	10000626 	beq	r2,zero,9650 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
    9638:	e0bffc17 	ldw	r2,-16(fp)
    963c:	10800417 	ldw	r2,16(r2)
    9640:	10c00017 	ldw	r3,0(r2)
    9644:	e0bfff17 	ldw	r2,-4(fp)
    9648:	10c00015 	stw	r3,0(r2)
    964c:	00000206 	br	9658 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
    9650:	e0bfff17 	ldw	r2,-4(fp)
    9654:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
    9658:	e0bffc17 	ldw	r2,-16(fp)
    965c:	10c0058b 	ldhu	r3,22(r2)
    9660:	e0bfff17 	ldw	r2,-4(fp)
    9664:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
    9668:	e0bffc17 	ldw	r2,-16(fp)
    966c:	10c0050b 	ldhu	r3,20(r2)
    9670:	e0bfff17 	ldw	r2,-4(fp)
    9674:	10c0018d 	sth	r3,6(r2)
    9678:	e0bffa17 	ldw	r2,-24(fp)
    967c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9680:	e0bffb17 	ldw	r2,-20(fp)
    9684:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    9688:	0005883a 	mov	r2,zero
}
    968c:	e037883a 	mov	sp,fp
    9690:	df000017 	ldw	fp,0(sp)
    9694:	dec00104 	addi	sp,sp,4
    9698:	f800283a 	ret

0000969c <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
    969c:	defffb04 	addi	sp,sp,-20
    96a0:	dfc00415 	stw	ra,16(sp)
    96a4:	df000315 	stw	fp,12(sp)
    96a8:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    96ac:	01407804 	movi	r5,480
    96b0:	01000074 	movhi	r4,1
    96b4:	211d9104 	addi	r4,r4,30276
    96b8:	0005b040 	call	5b04 <OS_MemClr>
    pq1 = &OSQTbl[0];
    96bc:	00800074 	movhi	r2,1
    96c0:	109d9104 	addi	r2,r2,30276
    96c4:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
    96c8:	00800074 	movhi	r2,1
    96cc:	109d9704 	addi	r2,r2,30300
    96d0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    96d4:	e03ffd0d 	sth	zero,-12(fp)
    96d8:	00000c06 	br	970c <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
    96dc:	e0bffe17 	ldw	r2,-8(fp)
    96e0:	e0ffff17 	ldw	r3,-4(fp)
    96e4:	10c00015 	stw	r3,0(r2)
        pq1++;
    96e8:	e0bffe17 	ldw	r2,-8(fp)
    96ec:	10800604 	addi	r2,r2,24
    96f0:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
    96f4:	e0bfff17 	ldw	r2,-4(fp)
    96f8:	10800604 	addi	r2,r2,24
    96fc:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    9700:	e0bffd0b 	ldhu	r2,-12(fp)
    9704:	10800044 	addi	r2,r2,1
    9708:	e0bffd0d 	sth	r2,-12(fp)
    970c:	e0bffd0b 	ldhu	r2,-12(fp)
    9710:	108004f0 	cmpltui	r2,r2,19
    9714:	103ff11e 	bne	r2,zero,96dc <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
    9718:	e0bffe17 	ldw	r2,-8(fp)
    971c:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
    9720:	00800074 	movhi	r2,1
    9724:	10879204 	addi	r2,r2,7752
    9728:	00c00074 	movhi	r3,1
    972c:	18dd9104 	addi	r3,r3,30276
    9730:	10c00015 	stw	r3,0(r2)
#endif
}
    9734:	0001883a 	nop
    9738:	e037883a 	mov	sp,fp
    973c:	dfc00117 	ldw	ra,4(sp)
    9740:	df000017 	ldw	fp,0(sp)
    9744:	dec00204 	addi	sp,sp,8
    9748:	f800283a 	ret

0000974c <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
    974c:	defffa04 	addi	sp,sp,-24
    9750:	df000515 	stw	fp,20(sp)
    9754:	df000504 	addi	fp,sp,20
    9758:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    975c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    9760:	e0bfff17 	ldw	r2,-4(fp)
    9764:	1000021e 	bne	r2,zero,9770 <OSSemAccept+0x24>
        return (0);
    9768:	0005883a 	mov	r2,zero
    976c:	00001f06 	br	97ec <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    9770:	e0bfff17 	ldw	r2,-4(fp)
    9774:	10800003 	ldbu	r2,0(r2)
    9778:	10803fcc 	andi	r2,r2,255
    977c:	108000e0 	cmpeqi	r2,r2,3
    9780:	1000021e 	bne	r2,zero,978c <OSSemAccept+0x40>
        return (0);
    9784:	0005883a 	mov	r2,zero
    9788:	00001806 	br	97ec <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    978c:	0005303a 	rdctl	r2,status
    9790:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9794:	e0fffe17 	ldw	r3,-8(fp)
    9798:	00bfff84 	movi	r2,-2
    979c:	1884703a 	and	r2,r3,r2
    97a0:	1001703a 	wrctl	status,r2
  
  return context;
    97a4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    97a8:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
    97ac:	e0bfff17 	ldw	r2,-4(fp)
    97b0:	1080020b 	ldhu	r2,8(r2)
    97b4:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
    97b8:	e0bffd0b 	ldhu	r2,-12(fp)
    97bc:	10000626 	beq	r2,zero,97d8 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
    97c0:	e0bfff17 	ldw	r2,-4(fp)
    97c4:	1080020b 	ldhu	r2,8(r2)
    97c8:	10bfffc4 	addi	r2,r2,-1
    97cc:	1007883a 	mov	r3,r2
    97d0:	e0bfff17 	ldw	r2,-4(fp)
    97d4:	10c0020d 	sth	r3,8(r2)
    97d8:	e0bffb17 	ldw	r2,-20(fp)
    97dc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    97e0:	e0bffc17 	ldw	r2,-16(fp)
    97e4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
    97e8:	e0bffd0b 	ldhu	r2,-12(fp)
}
    97ec:	e037883a 	mov	sp,fp
    97f0:	df000017 	ldw	fp,0(sp)
    97f4:	dec00104 	addi	sp,sp,4
    97f8:	f800283a 	ret

000097fc <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
    97fc:	defff904 	addi	sp,sp,-28
    9800:	dfc00615 	stw	ra,24(sp)
    9804:	df000515 	stw	fp,20(sp)
    9808:	df000504 	addi	fp,sp,20
    980c:	2005883a 	mov	r2,r4
    9810:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    9814:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    9818:	00800074 	movhi	r2,1
    981c:	10879504 	addi	r2,r2,7764
    9820:	10800003 	ldbu	r2,0(r2)
    9824:	10803fcc 	andi	r2,r2,255
    9828:	10000226 	beq	r2,zero,9834 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
    982c:	0005883a 	mov	r2,zero
    9830:	00002d06 	br	98e8 <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9834:	0005303a 	rdctl	r2,status
    9838:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    983c:	e0fffe17 	ldw	r3,-8(fp)
    9840:	00bfff84 	movi	r2,-2
    9844:	1884703a 	and	r2,r3,r2
    9848:	1001703a 	wrctl	status,r2
  
  return context;
    984c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    9850:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
    9854:	00800074 	movhi	r2,1
    9858:	10879404 	addi	r2,r2,7760
    985c:	10800017 	ldw	r2,0(r2)
    9860:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
    9864:	00800074 	movhi	r2,1
    9868:	10879404 	addi	r2,r2,7760
    986c:	10800017 	ldw	r2,0(r2)
    9870:	10000726 	beq	r2,zero,9890 <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    9874:	00800074 	movhi	r2,1
    9878:	10879404 	addi	r2,r2,7760
    987c:	10800017 	ldw	r2,0(r2)
    9880:	10c00117 	ldw	r3,4(r2)
    9884:	00800074 	movhi	r2,1
    9888:	10879404 	addi	r2,r2,7760
    988c:	10c00015 	stw	r3,0(r2)
    9890:	e0bffb17 	ldw	r2,-20(fp)
    9894:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9898:	e0bffc17 	ldw	r2,-16(fp)
    989c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
    98a0:	e0bffd17 	ldw	r2,-12(fp)
    98a4:	10000f26 	beq	r2,zero,98e4 <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
    98a8:	e0bffd17 	ldw	r2,-12(fp)
    98ac:	00c000c4 	movi	r3,3
    98b0:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
    98b4:	e0bffd17 	ldw	r2,-12(fp)
    98b8:	e0ffff0b 	ldhu	r3,-4(fp)
    98bc:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
    98c0:	e0bffd17 	ldw	r2,-12(fp)
    98c4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
    98c8:	e0bffd17 	ldw	r2,-12(fp)
    98cc:	00c00fc4 	movi	r3,63
    98d0:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
    98d4:	e0bffd17 	ldw	r2,-12(fp)
    98d8:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
    98dc:	e13ffd17 	ldw	r4,-12(fp)
    98e0:	00056900 	call	5690 <OS_EventWaitListInit>
    }
    return (pevent);
    98e4:	e0bffd17 	ldw	r2,-12(fp)
}
    98e8:	e037883a 	mov	sp,fp
    98ec:	dfc00117 	ldw	ra,4(sp)
    98f0:	df000017 	ldw	fp,0(sp)
    98f4:	dec00204 	addi	sp,sp,8
    98f8:	f800283a 	ret

000098fc <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    98fc:	defff304 	addi	sp,sp,-52
    9900:	dfc00c15 	stw	ra,48(sp)
    9904:	df000b15 	stw	fp,44(sp)
    9908:	df000b04 	addi	fp,sp,44
    990c:	e13ffd15 	stw	r4,-12(fp)
    9910:	2805883a 	mov	r2,r5
    9914:	e1bfff15 	stw	r6,-4(fp)
    9918:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    991c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    9920:	e0bfff17 	ldw	r2,-4(fp)
    9924:	1000021e 	bne	r2,zero,9930 <OSSemDel+0x34>
        return (pevent);
    9928:	e0bffd17 	ldw	r2,-12(fp)
    992c:	00008806 	br	9b50 <OSSemDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    9930:	e0bffd17 	ldw	r2,-12(fp)
    9934:	1000051e 	bne	r2,zero,994c <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    9938:	e0bfff17 	ldw	r2,-4(fp)
    993c:	00c00104 	movi	r3,4
    9940:	10c00005 	stb	r3,0(r2)
        return (pevent);
    9944:	e0bffd17 	ldw	r2,-12(fp)
    9948:	00008106 	br	9b50 <OSSemDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    994c:	e0bffd17 	ldw	r2,-12(fp)
    9950:	10800003 	ldbu	r2,0(r2)
    9954:	10803fcc 	andi	r2,r2,255
    9958:	108000e0 	cmpeqi	r2,r2,3
    995c:	1000051e 	bne	r2,zero,9974 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    9960:	e0bfff17 	ldw	r2,-4(fp)
    9964:	00c00044 	movi	r3,1
    9968:	10c00005 	stb	r3,0(r2)
        return (pevent);
    996c:	e0bffd17 	ldw	r2,-12(fp)
    9970:	00007706 	br	9b50 <OSSemDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    9974:	00800074 	movhi	r2,1
    9978:	10879504 	addi	r2,r2,7764
    997c:	10800003 	ldbu	r2,0(r2)
    9980:	10803fcc 	andi	r2,r2,255
    9984:	10000526 	beq	r2,zero,999c <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
    9988:	e0bfff17 	ldw	r2,-4(fp)
    998c:	00c003c4 	movi	r3,15
    9990:	10c00005 	stb	r3,0(r2)
        return (pevent);
    9994:	e0bffd17 	ldw	r2,-12(fp)
    9998:	00006d06 	br	9b50 <OSSemDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    999c:	0005303a 	rdctl	r2,status
    99a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    99a4:	e0fffc17 	ldw	r3,-16(fp)
    99a8:	00bfff84 	movi	r2,-2
    99ac:	1884703a 	and	r2,r3,r2
    99b0:	1001703a 	wrctl	status,r2
  
  return context;
    99b4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    99b8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
    99bc:	e0bffd17 	ldw	r2,-12(fp)
    99c0:	10800283 	ldbu	r2,10(r2)
    99c4:	10803fcc 	andi	r2,r2,255
    99c8:	10000326 	beq	r2,zero,99d8 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    99cc:	00800044 	movi	r2,1
    99d0:	e0bff505 	stb	r2,-44(fp)
    99d4:	00000106 	br	99dc <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    99d8:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
    99dc:	e0bffe03 	ldbu	r2,-8(fp)
    99e0:	10000326 	beq	r2,zero,99f0 <OSSemDel+0xf4>
    99e4:	10800060 	cmpeqi	r2,r2,1
    99e8:	10002c1e 	bne	r2,zero,9a9c <OSSemDel+0x1a0>
    99ec:	00004d06 	br	9b24 <OSSemDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
    99f0:	e0bff503 	ldbu	r2,-44(fp)
    99f4:	10001a1e 	bne	r2,zero,9a60 <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    99f8:	e0bffd17 	ldw	r2,-12(fp)
    99fc:	00c00fc4 	movi	r3,63
    9a00:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    9a04:	e0bffd17 	ldw	r2,-12(fp)
    9a08:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    9a0c:	e0bffd17 	ldw	r2,-12(fp)
    9a10:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    9a14:	00800074 	movhi	r2,1
    9a18:	10879404 	addi	r2,r2,7760
    9a1c:	10c00017 	ldw	r3,0(r2)
    9a20:	e0bffd17 	ldw	r2,-12(fp)
    9a24:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    9a28:	e0bffd17 	ldw	r2,-12(fp)
    9a2c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    9a30:	00800074 	movhi	r2,1
    9a34:	10879404 	addi	r2,r2,7760
    9a38:	e0fffd17 	ldw	r3,-12(fp)
    9a3c:	10c00015 	stw	r3,0(r2)
    9a40:	e0bff717 	ldw	r2,-36(fp)
    9a44:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9a48:	e0bff817 	ldw	r2,-32(fp)
    9a4c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    9a50:	e0bfff17 	ldw	r2,-4(fp)
    9a54:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
    9a58:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    9a5c:	00003b06 	br	9b4c <OSSemDel+0x250>
    9a60:	e0bff717 	ldw	r2,-36(fp)
    9a64:	e0bff915 	stw	r2,-28(fp)
    9a68:	e0bff917 	ldw	r2,-28(fp)
    9a6c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
    9a70:	e0bfff17 	ldw	r2,-4(fp)
    9a74:	00c01244 	movi	r3,73
    9a78:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    9a7c:	e0bffd17 	ldw	r2,-12(fp)
    9a80:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    9a84:	00003106 	br	9b4c <OSSemDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    9a88:	000f883a 	mov	r7,zero
    9a8c:	01800044 	movi	r6,1
    9a90:	000b883a 	mov	r5,zero
    9a94:	e13ffd17 	ldw	r4,-12(fp)
    9a98:	0004ffc0 	call	4ffc <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
    9a9c:	e0bffd17 	ldw	r2,-12(fp)
    9aa0:	10800283 	ldbu	r2,10(r2)
    9aa4:	10803fcc 	andi	r2,r2,255
    9aa8:	103ff71e 	bne	r2,zero,9a88 <OSSemDel+0x18c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    9aac:	e0bffd17 	ldw	r2,-12(fp)
    9ab0:	00c00fc4 	movi	r3,63
    9ab4:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    9ab8:	e0bffd17 	ldw	r2,-12(fp)
    9abc:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    9ac0:	e0bffd17 	ldw	r2,-12(fp)
    9ac4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    9ac8:	00800074 	movhi	r2,1
    9acc:	10879404 	addi	r2,r2,7760
    9ad0:	10c00017 	ldw	r3,0(r2)
    9ad4:	e0bffd17 	ldw	r2,-12(fp)
    9ad8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    9adc:	e0bffd17 	ldw	r2,-12(fp)
    9ae0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    9ae4:	00800074 	movhi	r2,1
    9ae8:	10879404 	addi	r2,r2,7760
    9aec:	e0fffd17 	ldw	r3,-12(fp)
    9af0:	10c00015 	stw	r3,0(r2)
    9af4:	e0bff717 	ldw	r2,-36(fp)
    9af8:	e0bffa15 	stw	r2,-24(fp)
    9afc:	e0bffa17 	ldw	r2,-24(fp)
    9b00:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    9b04:	e0bff503 	ldbu	r2,-44(fp)
    9b08:	10800058 	cmpnei	r2,r2,1
    9b0c:	1000011e 	bne	r2,zero,9b14 <OSSemDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    9b10:	0005bc00 	call	5bc0 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    9b14:	e0bfff17 	ldw	r2,-4(fp)
    9b18:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
    9b1c:	e03ff615 	stw	zero,-40(fp)
             break;
    9b20:	00000a06 	br	9b4c <OSSemDel+0x250>
    9b24:	e0bff717 	ldw	r2,-36(fp)
    9b28:	e0bffb15 	stw	r2,-20(fp)
    9b2c:	e0bffb17 	ldw	r2,-20(fp)
    9b30:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    9b34:	e0bfff17 	ldw	r2,-4(fp)
    9b38:	00c001c4 	movi	r3,7
    9b3c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    9b40:	e0bffd17 	ldw	r2,-12(fp)
    9b44:	e0bff615 	stw	r2,-40(fp)
             break;
    9b48:	0001883a 	nop
    }
    return (pevent_return);
    9b4c:	e0bff617 	ldw	r2,-40(fp)
}
    9b50:	e037883a 	mov	sp,fp
    9b54:	dfc00117 	ldw	ra,4(sp)
    9b58:	df000017 	ldw	fp,0(sp)
    9b5c:	dec00204 	addi	sp,sp,8
    9b60:	f800283a 	ret

00009b64 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    9b64:	defff504 	addi	sp,sp,-44
    9b68:	dfc00a15 	stw	ra,40(sp)
    9b6c:	df000915 	stw	fp,36(sp)
    9b70:	df000904 	addi	fp,sp,36
    9b74:	e13ffd15 	stw	r4,-12(fp)
    9b78:	2805883a 	mov	r2,r5
    9b7c:	e1bfff15 	stw	r6,-4(fp)
    9b80:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    9b84:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    9b88:	e0bfff17 	ldw	r2,-4(fp)
    9b8c:	10008a26 	beq	r2,zero,9db8 <OSSemPend+0x254>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    9b90:	e0bffd17 	ldw	r2,-12(fp)
    9b94:	1000041e 	bne	r2,zero,9ba8 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    9b98:	e0bfff17 	ldw	r2,-4(fp)
    9b9c:	00c00104 	movi	r3,4
    9ba0:	10c00005 	stb	r3,0(r2)
        return;
    9ba4:	00008506 	br	9dbc <OSSemPend+0x258>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    9ba8:	e0bffd17 	ldw	r2,-12(fp)
    9bac:	10800003 	ldbu	r2,0(r2)
    9bb0:	10803fcc 	andi	r2,r2,255
    9bb4:	108000e0 	cmpeqi	r2,r2,3
    9bb8:	1000041e 	bne	r2,zero,9bcc <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
    9bbc:	e0bfff17 	ldw	r2,-4(fp)
    9bc0:	00c00044 	movi	r3,1
    9bc4:	10c00005 	stb	r3,0(r2)
        return;
    9bc8:	00007c06 	br	9dbc <OSSemPend+0x258>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
    9bcc:	00800074 	movhi	r2,1
    9bd0:	10879504 	addi	r2,r2,7764
    9bd4:	10800003 	ldbu	r2,0(r2)
    9bd8:	10803fcc 	andi	r2,r2,255
    9bdc:	10000426 	beq	r2,zero,9bf0 <OSSemPend+0x8c>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
    9be0:	e0bfff17 	ldw	r2,-4(fp)
    9be4:	00c00084 	movi	r3,2
    9be8:	10c00005 	stb	r3,0(r2)
        return;
    9bec:	00007306 	br	9dbc <OSSemPend+0x258>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
    9bf0:	00800074 	movhi	r2,1
    9bf4:	10878704 	addi	r2,r2,7708
    9bf8:	10800003 	ldbu	r2,0(r2)
    9bfc:	10803fcc 	andi	r2,r2,255
    9c00:	10000426 	beq	r2,zero,9c14 <OSSemPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
    9c04:	e0bfff17 	ldw	r2,-4(fp)
    9c08:	00c00344 	movi	r3,13
    9c0c:	10c00005 	stb	r3,0(r2)
        return;
    9c10:	00006a06 	br	9dbc <OSSemPend+0x258>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9c14:	0005303a 	rdctl	r2,status
    9c18:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9c1c:	e0fffc17 	ldw	r3,-16(fp)
    9c20:	00bfff84 	movi	r2,-2
    9c24:	1884703a 	and	r2,r3,r2
    9c28:	1001703a 	wrctl	status,r2
  
  return context;
    9c2c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    9c30:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
    9c34:	e0bffd17 	ldw	r2,-12(fp)
    9c38:	1080020b 	ldhu	r2,8(r2)
    9c3c:	10bfffcc 	andi	r2,r2,65535
    9c40:	10000d26 	beq	r2,zero,9c78 <OSSemPend+0x114>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
    9c44:	e0bffd17 	ldw	r2,-12(fp)
    9c48:	1080020b 	ldhu	r2,8(r2)
    9c4c:	10bfffc4 	addi	r2,r2,-1
    9c50:	1007883a 	mov	r3,r2
    9c54:	e0bffd17 	ldw	r2,-12(fp)
    9c58:	10c0020d 	sth	r3,8(r2)
    9c5c:	e0bff717 	ldw	r2,-36(fp)
    9c60:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9c64:	e0bff817 	ldw	r2,-32(fp)
    9c68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    9c6c:	e0bfff17 	ldw	r2,-4(fp)
    9c70:	10000005 	stb	zero,0(r2)
        return;
    9c74:	00005106 	br	9dbc <OSSemPend+0x258>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
    9c78:	00800074 	movhi	r2,1
    9c7c:	10879604 	addi	r2,r2,7768
    9c80:	10c00017 	ldw	r3,0(r2)
    9c84:	00800074 	movhi	r2,1
    9c88:	10879604 	addi	r2,r2,7768
    9c8c:	10800017 	ldw	r2,0(r2)
    9c90:	10800c03 	ldbu	r2,48(r2)
    9c94:	10800054 	ori	r2,r2,1
    9c98:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    9c9c:	00800074 	movhi	r2,1
    9ca0:	10879604 	addi	r2,r2,7768
    9ca4:	10800017 	ldw	r2,0(r2)
    9ca8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
    9cac:	00800074 	movhi	r2,1
    9cb0:	10879604 	addi	r2,r2,7768
    9cb4:	10800017 	ldw	r2,0(r2)
    9cb8:	e0fffe0b 	ldhu	r3,-8(fp)
    9cbc:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    9cc0:	e13ffd17 	ldw	r4,-12(fp)
    9cc4:	00051b00 	call	51b0 <OS_EventTaskWait>
    9cc8:	e0bff717 	ldw	r2,-36(fp)
    9ccc:	e0bffb15 	stw	r2,-20(fp)
    9cd0:	e0bffb17 	ldw	r2,-20(fp)
    9cd4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
    9cd8:	0005bc00 	call	5bc0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9cdc:	0005303a 	rdctl	r2,status
    9ce0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9ce4:	e0fff917 	ldw	r3,-28(fp)
    9ce8:	00bfff84 	movi	r2,-2
    9cec:	1884703a 	and	r2,r3,r2
    9cf0:	1001703a 	wrctl	status,r2
  
  return context;
    9cf4:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    9cf8:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    9cfc:	00800074 	movhi	r2,1
    9d00:	10879604 	addi	r2,r2,7768
    9d04:	10800017 	ldw	r2,0(r2)
    9d08:	10800c43 	ldbu	r2,49(r2)
    9d0c:	10803fcc 	andi	r2,r2,255
    9d10:	10000326 	beq	r2,zero,9d20 <OSSemPend+0x1bc>
    9d14:	108000a0 	cmpeqi	r2,r2,2
    9d18:	1000041e 	bne	r2,zero,9d2c <OSSemPend+0x1c8>
    9d1c:	00000706 	br	9d3c <OSSemPend+0x1d8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
    9d20:	e0bfff17 	ldw	r2,-4(fp)
    9d24:	10000005 	stb	zero,0(r2)
             break;
    9d28:	00000e06 	br	9d64 <OSSemPend+0x200>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    9d2c:	e0bfff17 	ldw	r2,-4(fp)
    9d30:	00c00384 	movi	r3,14
    9d34:	10c00005 	stb	r3,0(r2)
             break;
    9d38:	00000a06 	br	9d64 <OSSemPend+0x200>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
    9d3c:	00800074 	movhi	r2,1
    9d40:	10879604 	addi	r2,r2,7768
    9d44:	10800017 	ldw	r2,0(r2)
    9d48:	e17ffd17 	ldw	r5,-12(fp)
    9d4c:	1009883a 	mov	r4,r2
    9d50:	00054d80 	call	54d8 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    9d54:	e0bfff17 	ldw	r2,-4(fp)
    9d58:	00c00284 	movi	r3,10
    9d5c:	10c00005 	stb	r3,0(r2)
             break;
    9d60:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    9d64:	00800074 	movhi	r2,1
    9d68:	10879604 	addi	r2,r2,7768
    9d6c:	10800017 	ldw	r2,0(r2)
    9d70:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    9d74:	00800074 	movhi	r2,1
    9d78:	10879604 	addi	r2,r2,7768
    9d7c:	10800017 	ldw	r2,0(r2)
    9d80:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    9d84:	00800074 	movhi	r2,1
    9d88:	10879604 	addi	r2,r2,7768
    9d8c:	10800017 	ldw	r2,0(r2)
    9d90:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    9d94:	00800074 	movhi	r2,1
    9d98:	10879604 	addi	r2,r2,7768
    9d9c:	10800017 	ldw	r2,0(r2)
    9da0:	10000815 	stw	zero,32(r2)
    9da4:	e0bff717 	ldw	r2,-36(fp)
    9da8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9dac:	e0bffa17 	ldw	r2,-24(fp)
    9db0:	1001703a 	wrctl	status,r2
    9db4:	00000106 	br	9dbc <OSSemPend+0x258>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
    9db8:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
    9dbc:	e037883a 	mov	sp,fp
    9dc0:	dfc00117 	ldw	ra,4(sp)
    9dc4:	df000017 	ldw	fp,0(sp)
    9dc8:	dec00204 	addi	sp,sp,8
    9dcc:	f800283a 	ret

00009dd0 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    9dd0:	defff604 	addi	sp,sp,-40
    9dd4:	dfc00915 	stw	ra,36(sp)
    9dd8:	df000815 	stw	fp,32(sp)
    9ddc:	df000804 	addi	fp,sp,32
    9de0:	e13ffd15 	stw	r4,-12(fp)
    9de4:	2805883a 	mov	r2,r5
    9de8:	e1bfff15 	stw	r6,-4(fp)
    9dec:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    9df0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    9df4:	e0bfff17 	ldw	r2,-4(fp)
    9df8:	1000021e 	bne	r2,zero,9e04 <OSSemPendAbort+0x34>
        return (0);
    9dfc:	0005883a 	mov	r2,zero
    9e00:	00004906 	br	9f28 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    9e04:	e0bffd17 	ldw	r2,-12(fp)
    9e08:	1000051e 	bne	r2,zero,9e20 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    9e0c:	e0bfff17 	ldw	r2,-4(fp)
    9e10:	00c00104 	movi	r3,4
    9e14:	10c00005 	stb	r3,0(r2)
        return (0);
    9e18:	0005883a 	mov	r2,zero
    9e1c:	00004206 	br	9f28 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    9e20:	e0bffd17 	ldw	r2,-12(fp)
    9e24:	10800003 	ldbu	r2,0(r2)
    9e28:	10803fcc 	andi	r2,r2,255
    9e2c:	108000e0 	cmpeqi	r2,r2,3
    9e30:	1000051e 	bne	r2,zero,9e48 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    9e34:	e0bfff17 	ldw	r2,-4(fp)
    9e38:	00c00044 	movi	r3,1
    9e3c:	10c00005 	stb	r3,0(r2)
        return (0);
    9e40:	0005883a 	mov	r2,zero
    9e44:	00003806 	br	9f28 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9e48:	0005303a 	rdctl	r2,status
    9e4c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9e50:	e0fffc17 	ldw	r3,-16(fp)
    9e54:	00bfff84 	movi	r2,-2
    9e58:	1884703a 	and	r2,r3,r2
    9e5c:	1001703a 	wrctl	status,r2
  
  return context;
    9e60:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    9e64:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
    9e68:	e0bffd17 	ldw	r2,-12(fp)
    9e6c:	10800283 	ldbu	r2,10(r2)
    9e70:	10803fcc 	andi	r2,r2,255
    9e74:	10002526 	beq	r2,zero,9f0c <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
    9e78:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
    9e7c:	e0bffe03 	ldbu	r2,-8(fp)
    9e80:	10800060 	cmpeqi	r2,r2,1
    9e84:	10000e26 	beq	r2,zero,9ec0 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    9e88:	00000806 	br	9eac <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    9e8c:	01c00084 	movi	r7,2
    9e90:	01800044 	movi	r6,1
    9e94:	000b883a 	mov	r5,zero
    9e98:	e13ffd17 	ldw	r4,-12(fp)
    9e9c:	0004ffc0 	call	4ffc <OS_EventTaskRdy>
                     nbr_tasks++;
    9ea0:	e0bff803 	ldbu	r2,-32(fp)
    9ea4:	10800044 	addi	r2,r2,1
    9ea8:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    9eac:	e0bffd17 	ldw	r2,-12(fp)
    9eb0:	10800283 	ldbu	r2,10(r2)
    9eb4:	10803fcc 	andi	r2,r2,255
    9eb8:	103ff41e 	bne	r2,zero,9e8c <OSSemPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    9ebc:	00000906 	br	9ee4 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    9ec0:	01c00084 	movi	r7,2
    9ec4:	01800044 	movi	r6,1
    9ec8:	000b883a 	mov	r5,zero
    9ecc:	e13ffd17 	ldw	r4,-12(fp)
    9ed0:	0004ffc0 	call	4ffc <OS_EventTaskRdy>
                 nbr_tasks++;
    9ed4:	e0bff803 	ldbu	r2,-32(fp)
    9ed8:	10800044 	addi	r2,r2,1
    9edc:	e0bff805 	stb	r2,-32(fp)
                 break;
    9ee0:	0001883a 	nop
    9ee4:	e0bff917 	ldw	r2,-28(fp)
    9ee8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9eec:	e0bffa17 	ldw	r2,-24(fp)
    9ef0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    9ef4:	0005bc00 	call	5bc0 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    9ef8:	e0bfff17 	ldw	r2,-4(fp)
    9efc:	00c00384 	movi	r3,14
    9f00:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    9f04:	e0bff803 	ldbu	r2,-32(fp)
    9f08:	00000706 	br	9f28 <OSSemPendAbort+0x158>
    9f0c:	e0bff917 	ldw	r2,-28(fp)
    9f10:	e0bffb15 	stw	r2,-20(fp)
    9f14:	e0bffb17 	ldw	r2,-20(fp)
    9f18:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    9f1c:	e0bfff17 	ldw	r2,-4(fp)
    9f20:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
    9f24:	0005883a 	mov	r2,zero
}
    9f28:	e037883a 	mov	sp,fp
    9f2c:	dfc00117 	ldw	ra,4(sp)
    9f30:	df000017 	ldw	fp,0(sp)
    9f34:	dec00204 	addi	sp,sp,8
    9f38:	f800283a 	ret

00009f3c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
    9f3c:	defff804 	addi	sp,sp,-32
    9f40:	dfc00715 	stw	ra,28(sp)
    9f44:	df000615 	stw	fp,24(sp)
    9f48:	df000604 	addi	fp,sp,24
    9f4c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    9f50:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    9f54:	e0bfff17 	ldw	r2,-4(fp)
    9f58:	1000021e 	bne	r2,zero,9f64 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
    9f5c:	00800104 	movi	r2,4
    9f60:	00003506 	br	a038 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    9f64:	e0bfff17 	ldw	r2,-4(fp)
    9f68:	10800003 	ldbu	r2,0(r2)
    9f6c:	10803fcc 	andi	r2,r2,255
    9f70:	108000e0 	cmpeqi	r2,r2,3
    9f74:	1000021e 	bne	r2,zero,9f80 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
    9f78:	00800044 	movi	r2,1
    9f7c:	00002e06 	br	a038 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9f80:	0005303a 	rdctl	r2,status
    9f84:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9f88:	e0fffe17 	ldw	r3,-8(fp)
    9f8c:	00bfff84 	movi	r2,-2
    9f90:	1884703a 	and	r2,r3,r2
    9f94:	1001703a 	wrctl	status,r2
  
  return context;
    9f98:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    9f9c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
    9fa0:	e0bfff17 	ldw	r2,-4(fp)
    9fa4:	10800283 	ldbu	r2,10(r2)
    9fa8:	10803fcc 	andi	r2,r2,255
    9fac:	10000c26 	beq	r2,zero,9fe0 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    9fb0:	000f883a 	mov	r7,zero
    9fb4:	01800044 	movi	r6,1
    9fb8:	000b883a 	mov	r5,zero
    9fbc:	e13fff17 	ldw	r4,-4(fp)
    9fc0:	0004ffc0 	call	4ffc <OS_EventTaskRdy>
    9fc4:	e0bffa17 	ldw	r2,-24(fp)
    9fc8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9fcc:	e0bffb17 	ldw	r2,-20(fp)
    9fd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    9fd4:	0005bc00 	call	5bc0 <OS_Sched>
        return (OS_ERR_NONE);
    9fd8:	0005883a 	mov	r2,zero
    9fdc:	00001606 	br	a038 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
    9fe0:	e0bfff17 	ldw	r2,-4(fp)
    9fe4:	1080020b 	ldhu	r2,8(r2)
    9fe8:	10ffffcc 	andi	r3,r2,65535
    9fec:	00bfffd4 	movui	r2,65535
    9ff0:	18800c26 	beq	r3,r2,a024 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
    9ff4:	e0bfff17 	ldw	r2,-4(fp)
    9ff8:	1080020b 	ldhu	r2,8(r2)
    9ffc:	10800044 	addi	r2,r2,1
    a000:	1007883a 	mov	r3,r2
    a004:	e0bfff17 	ldw	r2,-4(fp)
    a008:	10c0020d 	sth	r3,8(r2)
    a00c:	e0bffa17 	ldw	r2,-24(fp)
    a010:	e0bffc15 	stw	r2,-16(fp)
    a014:	e0bffc17 	ldw	r2,-16(fp)
    a018:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    a01c:	0005883a 	mov	r2,zero
    a020:	00000506 	br	a038 <OSSemPost+0xfc>
    a024:	e0bffa17 	ldw	r2,-24(fp)
    a028:	e0bffd15 	stw	r2,-12(fp)
    a02c:	e0bffd17 	ldw	r2,-12(fp)
    a030:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
    a034:	00800c84 	movi	r2,50
}
    a038:	e037883a 	mov	sp,fp
    a03c:	dfc00117 	ldw	ra,4(sp)
    a040:	df000017 	ldw	fp,0(sp)
    a044:	dec00204 	addi	sp,sp,8
    a048:	f800283a 	ret

0000a04c <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
    a04c:	defff704 	addi	sp,sp,-36
    a050:	df000815 	stw	fp,32(sp)
    a054:	df000804 	addi	fp,sp,32
    a058:	e13ffe15 	stw	r4,-8(fp)
    a05c:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    a060:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    a064:	e0bffe17 	ldw	r2,-8(fp)
    a068:	1000021e 	bne	r2,zero,a074 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    a06c:	00800104 	movi	r2,4
    a070:	00003606 	br	a14c <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
    a074:	e0bfff17 	ldw	r2,-4(fp)
    a078:	1000021e 	bne	r2,zero,a084 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    a07c:	00800244 	movi	r2,9
    a080:	00003206 	br	a14c <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    a084:	e0bffe17 	ldw	r2,-8(fp)
    a088:	10800003 	ldbu	r2,0(r2)
    a08c:	10803fcc 	andi	r2,r2,255
    a090:	108000e0 	cmpeqi	r2,r2,3
    a094:	1000021e 	bne	r2,zero,a0a0 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    a098:	00800044 	movi	r2,1
    a09c:	00002b06 	br	a14c <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a0a0:	0005303a 	rdctl	r2,status
    a0a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a0a8:	e0fffd17 	ldw	r3,-12(fp)
    a0ac:	00bfff84 	movi	r2,-2
    a0b0:	1884703a 	and	r2,r3,r2
    a0b4:	1001703a 	wrctl	status,r2
  
  return context;
    a0b8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    a0bc:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    a0c0:	e0bffe17 	ldw	r2,-8(fp)
    a0c4:	10c00283 	ldbu	r3,10(r2)
    a0c8:	e0bfff17 	ldw	r2,-4(fp)
    a0cc:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
    a0d0:	e0bffe17 	ldw	r2,-8(fp)
    a0d4:	108002c4 	addi	r2,r2,11
    a0d8:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
    a0dc:	e0bfff17 	ldw	r2,-4(fp)
    a0e0:	10800084 	addi	r2,r2,2
    a0e4:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    a0e8:	e03ffa05 	stb	zero,-24(fp)
    a0ec:	00000b06 	br	a11c <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
    a0f0:	e0bff917 	ldw	r2,-28(fp)
    a0f4:	10c00044 	addi	r3,r2,1
    a0f8:	e0fff915 	stw	r3,-28(fp)
    a0fc:	e0fff817 	ldw	r3,-32(fp)
    a100:	19000044 	addi	r4,r3,1
    a104:	e13ff815 	stw	r4,-32(fp)
    a108:	18c00003 	ldbu	r3,0(r3)
    a10c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    a110:	e0bffa03 	ldbu	r2,-24(fp)
    a114:	10800044 	addi	r2,r2,1
    a118:	e0bffa05 	stb	r2,-24(fp)
    a11c:	e0bffa03 	ldbu	r2,-24(fp)
    a120:	108000f0 	cmpltui	r2,r2,3
    a124:	103ff21e 	bne	r2,zero,a0f0 <OSSemQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
    a128:	e0bffe17 	ldw	r2,-8(fp)
    a12c:	10c0020b 	ldhu	r3,8(r2)
    a130:	e0bfff17 	ldw	r2,-4(fp)
    a134:	10c0000d 	sth	r3,0(r2)
    a138:	e0bffb17 	ldw	r2,-20(fp)
    a13c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a140:	e0bffc17 	ldw	r2,-16(fp)
    a144:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    a148:	0005883a 	mov	r2,zero
}
    a14c:	e037883a 	mov	sp,fp
    a150:	df000017 	ldw	fp,0(sp)
    a154:	dec00104 	addi	sp,sp,4
    a158:	f800283a 	ret

0000a15c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
    a15c:	defff904 	addi	sp,sp,-28
    a160:	df000615 	stw	fp,24(sp)
    a164:	df000604 	addi	fp,sp,24
    a168:	e13ffd15 	stw	r4,-12(fp)
    a16c:	2805883a 	mov	r2,r5
    a170:	e1bfff15 	stw	r6,-4(fp)
    a174:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    a178:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    a17c:	e0bfff17 	ldw	r2,-4(fp)
    a180:	10003126 	beq	r2,zero,a248 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    a184:	e0bffd17 	ldw	r2,-12(fp)
    a188:	1000041e 	bne	r2,zero,a19c <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    a18c:	e0bfff17 	ldw	r2,-4(fp)
    a190:	00c00104 	movi	r3,4
    a194:	10c00005 	stb	r3,0(r2)
        return;
    a198:	00002c06 	br	a24c <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    a19c:	e0bffd17 	ldw	r2,-12(fp)
    a1a0:	10800003 	ldbu	r2,0(r2)
    a1a4:	10803fcc 	andi	r2,r2,255
    a1a8:	108000e0 	cmpeqi	r2,r2,3
    a1ac:	1000041e 	bne	r2,zero,a1c0 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
    a1b0:	e0bfff17 	ldw	r2,-4(fp)
    a1b4:	00c00044 	movi	r3,1
    a1b8:	10c00005 	stb	r3,0(r2)
        return;
    a1bc:	00002306 	br	a24c <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a1c0:	0005303a 	rdctl	r2,status
    a1c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a1c8:	e0fffc17 	ldw	r3,-16(fp)
    a1cc:	00bfff84 	movi	r2,-2
    a1d0:	1884703a 	and	r2,r3,r2
    a1d4:	1001703a 	wrctl	status,r2
  
  return context;
    a1d8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    a1dc:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
    a1e0:	e0bfff17 	ldw	r2,-4(fp)
    a1e4:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
    a1e8:	e0bffd17 	ldw	r2,-12(fp)
    a1ec:	1080020b 	ldhu	r2,8(r2)
    a1f0:	10bfffcc 	andi	r2,r2,65535
    a1f4:	10000426 	beq	r2,zero,a208 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
    a1f8:	e0bffd17 	ldw	r2,-12(fp)
    a1fc:	e0fffe0b 	ldhu	r3,-8(fp)
    a200:	10c0020d 	sth	r3,8(r2)
    a204:	00000b06 	br	a234 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
    a208:	e0bffd17 	ldw	r2,-12(fp)
    a20c:	10800283 	ldbu	r2,10(r2)
    a210:	10803fcc 	andi	r2,r2,255
    a214:	1000041e 	bne	r2,zero,a228 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
    a218:	e0bffd17 	ldw	r2,-12(fp)
    a21c:	e0fffe0b 	ldhu	r3,-8(fp)
    a220:	10c0020d 	sth	r3,8(r2)
    a224:	00000306 	br	a234 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
    a228:	e0bfff17 	ldw	r2,-4(fp)
    a22c:	00c01244 	movi	r3,73
    a230:	10c00005 	stb	r3,0(r2)
    a234:	e0bffa17 	ldw	r2,-24(fp)
    a238:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a23c:	e0bffb17 	ldw	r2,-20(fp)
    a240:	1001703a 	wrctl	status,r2
    a244:	00000106 	br	a24c <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
    a248:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
    a24c:	e037883a 	mov	sp,fp
    a250:	df000017 	ldw	fp,0(sp)
    a254:	dec00104 	addi	sp,sp,4
    a258:	f800283a 	ret

0000a25c <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
    a25c:	defff104 	addi	sp,sp,-60
    a260:	dfc00e15 	stw	ra,56(sp)
    a264:	df000d15 	stw	fp,52(sp)
    a268:	df000d04 	addi	fp,sp,52
    a26c:	2007883a 	mov	r3,r4
    a270:	2805883a 	mov	r2,r5
    a274:	e0fffe05 	stb	r3,-8(fp)
    a278:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
    a27c:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
    a280:	e0bffe03 	ldbu	r2,-8(fp)
    a284:	10800530 	cmpltui	r2,r2,20
    a288:	1000051e 	bne	r2,zero,a2a0 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
    a28c:	e0bffe03 	ldbu	r2,-8(fp)
    a290:	10803fe0 	cmpeqi	r2,r2,255
    a294:	1000021e 	bne	r2,zero,a2a0 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
    a298:	00800a84 	movi	r2,42
    a29c:	00013a06 	br	a788 <OSTaskChangePrio+0x52c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
    a2a0:	e0bfff03 	ldbu	r2,-4(fp)
    a2a4:	10800530 	cmpltui	r2,r2,20
    a2a8:	1000021e 	bne	r2,zero,a2b4 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
    a2ac:	00800a84 	movi	r2,42
    a2b0:	00013506 	br	a788 <OSTaskChangePrio+0x52c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a2b4:	0005303a 	rdctl	r2,status
    a2b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a2bc:	e0fffd17 	ldw	r3,-12(fp)
    a2c0:	00bfff84 	movi	r2,-2
    a2c4:	1884703a 	and	r2,r3,r2
    a2c8:	1001703a 	wrctl	status,r2
  
  return context;
    a2cc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    a2d0:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
    a2d4:	e0ffff03 	ldbu	r3,-4(fp)
    a2d8:	008000b4 	movhi	r2,2
    a2dc:	10a41d04 	addi	r2,r2,-28556
    a2e0:	18c7883a 	add	r3,r3,r3
    a2e4:	18c7883a 	add	r3,r3,r3
    a2e8:	10c5883a 	add	r2,r2,r3
    a2ec:	10800017 	ldw	r2,0(r2)
    a2f0:	10000626 	beq	r2,zero,a30c <OSTaskChangePrio+0xb0>
    a2f4:	e0bff517 	ldw	r2,-44(fp)
    a2f8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a2fc:	e0bff617 	ldw	r2,-40(fp)
    a300:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
    a304:	00800a04 	movi	r2,40
    a308:	00011f06 	br	a788 <OSTaskChangePrio+0x52c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
    a30c:	e0bffe03 	ldbu	r2,-8(fp)
    a310:	10803fd8 	cmpnei	r2,r2,255
    a314:	1000051e 	bne	r2,zero,a32c <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
    a318:	00800074 	movhi	r2,1
    a31c:	10879604 	addi	r2,r2,7768
    a320:	10800017 	ldw	r2,0(r2)
    a324:	10800c83 	ldbu	r2,50(r2)
    a328:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
    a32c:	e0fffe03 	ldbu	r3,-8(fp)
    a330:	008000b4 	movhi	r2,2
    a334:	10a41d04 	addi	r2,r2,-28556
    a338:	18c7883a 	add	r3,r3,r3
    a33c:	18c7883a 	add	r3,r3,r3
    a340:	10c5883a 	add	r2,r2,r3
    a344:	10800017 	ldw	r2,0(r2)
    a348:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
    a34c:	e0bff817 	ldw	r2,-32(fp)
    a350:	1000061e 	bne	r2,zero,a36c <OSTaskChangePrio+0x110>
    a354:	e0bff517 	ldw	r2,-44(fp)
    a358:	e0bff715 	stw	r2,-36(fp)
    a35c:	e0bff717 	ldw	r2,-36(fp)
    a360:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
    a364:	00800a44 	movi	r2,41
    a368:	00010706 	br	a788 <OSTaskChangePrio+0x52c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
    a36c:	e0bff817 	ldw	r2,-32(fp)
    a370:	10800058 	cmpnei	r2,r2,1
    a374:	1000061e 	bne	r2,zero,a390 <OSTaskChangePrio+0x134>
    a378:	e0bff517 	ldw	r2,-44(fp)
    a37c:	e0bff915 	stw	r2,-28(fp)
    a380:	e0bff917 	ldw	r2,-28(fp)
    a384:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
    a388:	008010c4 	movi	r2,67
    a38c:	0000fe06 	br	a788 <OSTaskChangePrio+0x52c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
    a390:	e0bfff03 	ldbu	r2,-4(fp)
    a394:	1004d0fa 	srli	r2,r2,3
    a398:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
    a39c:	e0bfff03 	ldbu	r2,-4(fp)
    a3a0:	108001cc 	andi	r2,r2,7
    a3a4:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
    a3a8:	e0bffb03 	ldbu	r2,-20(fp)
    a3ac:	00c00044 	movi	r3,1
    a3b0:	1884983a 	sll	r2,r3,r2
    a3b4:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
    a3b8:	e0bffb43 	ldbu	r2,-19(fp)
    a3bc:	00c00044 	movi	r3,1
    a3c0:	1884983a 	sll	r2,r3,r2
    a3c4:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
    a3c8:	e0fffe03 	ldbu	r3,-8(fp)
    a3cc:	008000b4 	movhi	r2,2
    a3d0:	10a41d04 	addi	r2,r2,-28556
    a3d4:	18c7883a 	add	r3,r3,r3
    a3d8:	18c7883a 	add	r3,r3,r3
    a3dc:	10c5883a 	add	r2,r2,r3
    a3e0:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
    a3e4:	e0ffff03 	ldbu	r3,-4(fp)
    a3e8:	008000b4 	movhi	r2,2
    a3ec:	10a41d04 	addi	r2,r2,-28556
    a3f0:	18c7883a 	add	r3,r3,r3
    a3f4:	18c7883a 	add	r3,r3,r3
    a3f8:	10c5883a 	add	r2,r2,r3
    a3fc:	e0fff817 	ldw	r3,-32(fp)
    a400:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
    a404:	e0bff817 	ldw	r2,-32(fp)
    a408:	10800d03 	ldbu	r2,52(r2)
    a40c:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
    a410:	e0bff817 	ldw	r2,-32(fp)
    a414:	10800d83 	ldbu	r2,54(r2)
    a418:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
    a41c:	e0bff817 	ldw	r2,-32(fp)
    a420:	10800d43 	ldbu	r2,53(r2)
    a424:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
    a428:	e0fffc03 	ldbu	r3,-16(fp)
    a42c:	00800074 	movhi	r2,1
    a430:	10879344 	addi	r2,r2,7757
    a434:	10c5883a 	add	r2,r2,r3
    a438:	10c00003 	ldbu	r3,0(r2)
    a43c:	e0bffc83 	ldbu	r2,-14(fp)
    a440:	1884703a 	and	r2,r3,r2
    a444:	10803fcc 	andi	r2,r2,255
    a448:	10003726 	beq	r2,zero,a528 <OSTaskChangePrio+0x2cc>
         OSRdyTbl[y_old] &= ~bitx_old;
    a44c:	e0fffc03 	ldbu	r3,-16(fp)
    a450:	e13ffc03 	ldbu	r4,-16(fp)
    a454:	00800074 	movhi	r2,1
    a458:	10879344 	addi	r2,r2,7757
    a45c:	1105883a 	add	r2,r2,r4
    a460:	10800003 	ldbu	r2,0(r2)
    a464:	1009883a 	mov	r4,r2
    a468:	e0bffc83 	ldbu	r2,-14(fp)
    a46c:	0084303a 	nor	r2,zero,r2
    a470:	2084703a 	and	r2,r4,r2
    a474:	1009883a 	mov	r4,r2
    a478:	00800074 	movhi	r2,1
    a47c:	10879344 	addi	r2,r2,7757
    a480:	10c5883a 	add	r2,r2,r3
    a484:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
    a488:	e0fffc03 	ldbu	r3,-16(fp)
    a48c:	00800074 	movhi	r2,1
    a490:	10879344 	addi	r2,r2,7757
    a494:	10c5883a 	add	r2,r2,r3
    a498:	10800003 	ldbu	r2,0(r2)
    a49c:	10803fcc 	andi	r2,r2,255
    a4a0:	10000b1e 	bne	r2,zero,a4d0 <OSTaskChangePrio+0x274>
             OSRdyGrp &= ~bity_old;
    a4a4:	e0bffc43 	ldbu	r2,-15(fp)
    a4a8:	0084303a 	nor	r2,zero,r2
    a4ac:	1007883a 	mov	r3,r2
    a4b0:	00800074 	movhi	r2,1
    a4b4:	10879304 	addi	r2,r2,7756
    a4b8:	10800003 	ldbu	r2,0(r2)
    a4bc:	1884703a 	and	r2,r3,r2
    a4c0:	1007883a 	mov	r3,r2
    a4c4:	00800074 	movhi	r2,1
    a4c8:	10879304 	addi	r2,r2,7756
    a4cc:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
    a4d0:	00800074 	movhi	r2,1
    a4d4:	10879304 	addi	r2,r2,7756
    a4d8:	10c00003 	ldbu	r3,0(r2)
    a4dc:	e0bffb83 	ldbu	r2,-18(fp)
    a4e0:	1884b03a 	or	r2,r3,r2
    a4e4:	1007883a 	mov	r3,r2
    a4e8:	00800074 	movhi	r2,1
    a4ec:	10879304 	addi	r2,r2,7756
    a4f0:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
    a4f4:	e0fffb03 	ldbu	r3,-20(fp)
    a4f8:	e13ffb03 	ldbu	r4,-20(fp)
    a4fc:	00800074 	movhi	r2,1
    a500:	10879344 	addi	r2,r2,7757
    a504:	1105883a 	add	r2,r2,r4
    a508:	11000003 	ldbu	r4,0(r2)
    a50c:	e0bffbc3 	ldbu	r2,-17(fp)
    a510:	2084b03a 	or	r2,r4,r2
    a514:	1009883a 	mov	r4,r2
    a518:	00800074 	movhi	r2,1
    a51c:	10879344 	addi	r2,r2,7757
    a520:	10c5883a 	add	r2,r2,r3
    a524:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
    a528:	e0bff817 	ldw	r2,-32(fp)
    a52c:	10800717 	ldw	r2,28(r2)
    a530:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
    a534:	e0bff317 	ldw	r2,-52(fp)
    a538:	10003326 	beq	r2,zero,a608 <OSTaskChangePrio+0x3ac>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
    a53c:	e0bffc03 	ldbu	r2,-16(fp)
    a540:	e0fffc03 	ldbu	r3,-16(fp)
    a544:	e13ff317 	ldw	r4,-52(fp)
    a548:	20c7883a 	add	r3,r4,r3
    a54c:	18c002c4 	addi	r3,r3,11
    a550:	18c00003 	ldbu	r3,0(r3)
    a554:	1809883a 	mov	r4,r3
    a558:	e0fffc83 	ldbu	r3,-14(fp)
    a55c:	00c6303a 	nor	r3,zero,r3
    a560:	20c6703a 	and	r3,r4,r3
    a564:	1809883a 	mov	r4,r3
    a568:	e0fff317 	ldw	r3,-52(fp)
    a56c:	1885883a 	add	r2,r3,r2
    a570:	108002c4 	addi	r2,r2,11
    a574:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
    a578:	e0bffc03 	ldbu	r2,-16(fp)
    a57c:	e0fff317 	ldw	r3,-52(fp)
    a580:	1885883a 	add	r2,r3,r2
    a584:	108002c4 	addi	r2,r2,11
    a588:	10800003 	ldbu	r2,0(r2)
    a58c:	10803fcc 	andi	r2,r2,255
    a590:	1000091e 	bne	r2,zero,a5b8 <OSTaskChangePrio+0x35c>
            pevent->OSEventGrp    &= ~bity_old;
    a594:	e0bff317 	ldw	r2,-52(fp)
    a598:	10800283 	ldbu	r2,10(r2)
    a59c:	1007883a 	mov	r3,r2
    a5a0:	e0bffc43 	ldbu	r2,-15(fp)
    a5a4:	0084303a 	nor	r2,zero,r2
    a5a8:	1884703a 	and	r2,r3,r2
    a5ac:	1007883a 	mov	r3,r2
    a5b0:	e0bff317 	ldw	r2,-52(fp)
    a5b4:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
    a5b8:	e0bff317 	ldw	r2,-52(fp)
    a5bc:	10c00283 	ldbu	r3,10(r2)
    a5c0:	e0bffb83 	ldbu	r2,-18(fp)
    a5c4:	1884b03a 	or	r2,r3,r2
    a5c8:	1007883a 	mov	r3,r2
    a5cc:	e0bff317 	ldw	r2,-52(fp)
    a5d0:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
    a5d4:	e0bffb03 	ldbu	r2,-20(fp)
    a5d8:	e0fffb03 	ldbu	r3,-20(fp)
    a5dc:	e13ff317 	ldw	r4,-52(fp)
    a5e0:	20c7883a 	add	r3,r4,r3
    a5e4:	18c002c4 	addi	r3,r3,11
    a5e8:	19000003 	ldbu	r4,0(r3)
    a5ec:	e0fffbc3 	ldbu	r3,-17(fp)
    a5f0:	20c6b03a 	or	r3,r4,r3
    a5f4:	1809883a 	mov	r4,r3
    a5f8:	e0fff317 	ldw	r3,-52(fp)
    a5fc:	1885883a 	add	r2,r3,r2
    a600:	108002c4 	addi	r2,r2,11
    a604:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
    a608:	e0bff817 	ldw	r2,-32(fp)
    a60c:	10800817 	ldw	r2,32(r2)
    a610:	10004226 	beq	r2,zero,a71c <OSTaskChangePrio+0x4c0>
        pevents =  ptcb->OSTCBEventMultiPtr;
    a614:	e0bff817 	ldw	r2,-32(fp)
    a618:	10800817 	ldw	r2,32(r2)
    a61c:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
    a620:	e0bff417 	ldw	r2,-48(fp)
    a624:	10800017 	ldw	r2,0(r2)
    a628:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
    a62c:	00003906 	br	a714 <OSTaskChangePrio+0x4b8>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
    a630:	e0bffc03 	ldbu	r2,-16(fp)
    a634:	e0fffc03 	ldbu	r3,-16(fp)
    a638:	e13ff317 	ldw	r4,-52(fp)
    a63c:	20c7883a 	add	r3,r4,r3
    a640:	18c002c4 	addi	r3,r3,11
    a644:	18c00003 	ldbu	r3,0(r3)
    a648:	1809883a 	mov	r4,r3
    a64c:	e0fffc83 	ldbu	r3,-14(fp)
    a650:	00c6303a 	nor	r3,zero,r3
    a654:	20c6703a 	and	r3,r4,r3
    a658:	1809883a 	mov	r4,r3
    a65c:	e0fff317 	ldw	r3,-52(fp)
    a660:	1885883a 	add	r2,r3,r2
    a664:	108002c4 	addi	r2,r2,11
    a668:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
    a66c:	e0bffc03 	ldbu	r2,-16(fp)
    a670:	e0fff317 	ldw	r3,-52(fp)
    a674:	1885883a 	add	r2,r3,r2
    a678:	108002c4 	addi	r2,r2,11
    a67c:	10800003 	ldbu	r2,0(r2)
    a680:	10803fcc 	andi	r2,r2,255
    a684:	1000091e 	bne	r2,zero,a6ac <OSTaskChangePrio+0x450>
                pevent->OSEventGrp    &= ~bity_old;
    a688:	e0bff317 	ldw	r2,-52(fp)
    a68c:	10800283 	ldbu	r2,10(r2)
    a690:	1007883a 	mov	r3,r2
    a694:	e0bffc43 	ldbu	r2,-15(fp)
    a698:	0084303a 	nor	r2,zero,r2
    a69c:	1884703a 	and	r2,r3,r2
    a6a0:	1007883a 	mov	r3,r2
    a6a4:	e0bff317 	ldw	r2,-52(fp)
    a6a8:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
    a6ac:	e0bff317 	ldw	r2,-52(fp)
    a6b0:	10c00283 	ldbu	r3,10(r2)
    a6b4:	e0bffb83 	ldbu	r2,-18(fp)
    a6b8:	1884b03a 	or	r2,r3,r2
    a6bc:	1007883a 	mov	r3,r2
    a6c0:	e0bff317 	ldw	r2,-52(fp)
    a6c4:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
    a6c8:	e0bffb03 	ldbu	r2,-20(fp)
    a6cc:	e0fffb03 	ldbu	r3,-20(fp)
    a6d0:	e13ff317 	ldw	r4,-52(fp)
    a6d4:	20c7883a 	add	r3,r4,r3
    a6d8:	18c002c4 	addi	r3,r3,11
    a6dc:	19000003 	ldbu	r4,0(r3)
    a6e0:	e0fffbc3 	ldbu	r3,-17(fp)
    a6e4:	20c6b03a 	or	r3,r4,r3
    a6e8:	1809883a 	mov	r4,r3
    a6ec:	e0fff317 	ldw	r3,-52(fp)
    a6f0:	1885883a 	add	r2,r3,r2
    a6f4:	108002c4 	addi	r2,r2,11
    a6f8:	11000005 	stb	r4,0(r2)
            pevents++;
    a6fc:	e0bff417 	ldw	r2,-48(fp)
    a700:	10800104 	addi	r2,r2,4
    a704:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
    a708:	e0bff417 	ldw	r2,-48(fp)
    a70c:	10800017 	ldw	r2,0(r2)
    a710:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
    a714:	e0bff317 	ldw	r2,-52(fp)
    a718:	103fc51e 	bne	r2,zero,a630 <OSTaskChangePrio+0x3d4>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
    a71c:	e0bff817 	ldw	r2,-32(fp)
    a720:	e0ffff03 	ldbu	r3,-4(fp)
    a724:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
    a728:	e0bff817 	ldw	r2,-32(fp)
    a72c:	e0fffb03 	ldbu	r3,-20(fp)
    a730:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
    a734:	e0bff817 	ldw	r2,-32(fp)
    a738:	e0fffb43 	ldbu	r3,-19(fp)
    a73c:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
    a740:	e0bff817 	ldw	r2,-32(fp)
    a744:	e0fffb83 	ldbu	r3,-18(fp)
    a748:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
    a74c:	e0bff817 	ldw	r2,-32(fp)
    a750:	e0fffbc3 	ldbu	r3,-17(fp)
    a754:	10c00d45 	stb	r3,53(r2)
    a758:	e0bff517 	ldw	r2,-44(fp)
    a75c:	e0bffa15 	stw	r2,-24(fp)
    a760:	e0bffa17 	ldw	r2,-24(fp)
    a764:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    a768:	00800074 	movhi	r2,1
    a76c:	10878744 	addi	r2,r2,7709
    a770:	10800003 	ldbu	r2,0(r2)
    a774:	10803fcc 	andi	r2,r2,255
    a778:	10800058 	cmpnei	r2,r2,1
    a77c:	1000011e 	bne	r2,zero,a784 <OSTaskChangePrio+0x528>
        OS_Sched();                                         /* Find new highest priority task          */
    a780:	0005bc00 	call	5bc0 <OS_Sched>
    }
    return (OS_ERR_NONE);
    a784:	0005883a 	mov	r2,zero
}
    a788:	e037883a 	mov	sp,fp
    a78c:	dfc00117 	ldw	ra,4(sp)
    a790:	df000017 	ldw	fp,0(sp)
    a794:	dec00204 	addi	sp,sp,8
    a798:	f800283a 	ret

0000a79c <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
    a79c:	deffee04 	addi	sp,sp,-72
    a7a0:	dfc01115 	stw	ra,68(sp)
    a7a4:	df001015 	stw	fp,64(sp)
    a7a8:	df001004 	addi	fp,sp,64
    a7ac:	e13ffc15 	stw	r4,-16(fp)
    a7b0:	e17ffd15 	stw	r5,-12(fp)
    a7b4:	e1bffe15 	stw	r6,-8(fp)
    a7b8:	3805883a 	mov	r2,r7
    a7bc:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    a7c0:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    a7c4:	e0bfff03 	ldbu	r2,-4(fp)
    a7c8:	10800570 	cmpltui	r2,r2,21
    a7cc:	1000021e 	bne	r2,zero,a7d8 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
    a7d0:	00800a84 	movi	r2,42
    a7d4:	00005b06 	br	a944 <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a7d8:	0005303a 	rdctl	r2,status
    a7dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a7e0:	e0fffb17 	ldw	r3,-20(fp)
    a7e4:	00bfff84 	movi	r2,-2
    a7e8:	1884703a 	and	r2,r3,r2
    a7ec:	1001703a 	wrctl	status,r2
  
  return context;
    a7f0:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    a7f4:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    a7f8:	00800074 	movhi	r2,1
    a7fc:	10879504 	addi	r2,r2,7764
    a800:	10800003 	ldbu	r2,0(r2)
    a804:	10803fcc 	andi	r2,r2,255
    a808:	10000626 	beq	r2,zero,a824 <OSTaskCreate+0x88>
    a80c:	e0bff317 	ldw	r2,-52(fp)
    a810:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a814:	e0bff417 	ldw	r2,-48(fp)
    a818:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    a81c:	00800f04 	movi	r2,60
    a820:	00004806 	br	a944 <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    a824:	e0ffff03 	ldbu	r3,-4(fp)
    a828:	008000b4 	movhi	r2,2
    a82c:	10a41d04 	addi	r2,r2,-28556
    a830:	18c7883a 	add	r3,r3,r3
    a834:	18c7883a 	add	r3,r3,r3
    a838:	10c5883a 	add	r2,r2,r3
    a83c:	10800017 	ldw	r2,0(r2)
    a840:	10003b1e 	bne	r2,zero,a930 <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    a844:	e0ffff03 	ldbu	r3,-4(fp)
    a848:	008000b4 	movhi	r2,2
    a84c:	10a41d04 	addi	r2,r2,-28556
    a850:	18c7883a 	add	r3,r3,r3
    a854:	18c7883a 	add	r3,r3,r3
    a858:	10c5883a 	add	r2,r2,r3
    a85c:	00c00044 	movi	r3,1
    a860:	10c00015 	stw	r3,0(r2)
    a864:	e0bff317 	ldw	r2,-52(fp)
    a868:	e0bff515 	stw	r2,-44(fp)
    a86c:	e0bff517 	ldw	r2,-44(fp)
    a870:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
    a874:	000f883a 	mov	r7,zero
    a878:	e1bffe17 	ldw	r6,-8(fp)
    a87c:	e17ffd17 	ldw	r5,-12(fp)
    a880:	e13ffc17 	ldw	r4,-16(fp)
    a884:	000dc9c0 	call	dc9c <OSTaskStkInit>
    a888:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
    a88c:	e0bfff03 	ldbu	r2,-4(fp)
    a890:	d8000215 	stw	zero,8(sp)
    a894:	d8000115 	stw	zero,4(sp)
    a898:	d8000015 	stw	zero,0(sp)
    a89c:	000f883a 	mov	r7,zero
    a8a0:	000d883a 	mov	r6,zero
    a8a4:	e17ff717 	ldw	r5,-36(fp)
    a8a8:	1009883a 	mov	r4,r2
    a8ac:	00060900 	call	6090 <OS_TCBInit>
    a8b0:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
    a8b4:	e0bff803 	ldbu	r2,-32(fp)
    a8b8:	1000081e 	bne	r2,zero,a8dc <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
    a8bc:	00800074 	movhi	r2,1
    a8c0:	10878744 	addi	r2,r2,7709
    a8c4:	10800003 	ldbu	r2,0(r2)
    a8c8:	10803fcc 	andi	r2,r2,255
    a8cc:	10800058 	cmpnei	r2,r2,1
    a8d0:	1000151e 	bne	r2,zero,a928 <OSTaskCreate+0x18c>
                OS_Sched();
    a8d4:	0005bc00 	call	5bc0 <OS_Sched>
    a8d8:	00001306 	br	a928 <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a8dc:	0005303a 	rdctl	r2,status
    a8e0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a8e4:	e0fffa17 	ldw	r3,-24(fp)
    a8e8:	00bfff84 	movi	r2,-2
    a8ec:	1884703a 	and	r2,r3,r2
    a8f0:	1001703a 	wrctl	status,r2
  
  return context;
    a8f4:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    a8f8:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
    a8fc:	e0ffff03 	ldbu	r3,-4(fp)
    a900:	008000b4 	movhi	r2,2
    a904:	10a41d04 	addi	r2,r2,-28556
    a908:	18c7883a 	add	r3,r3,r3
    a90c:	18c7883a 	add	r3,r3,r3
    a910:	10c5883a 	add	r2,r2,r3
    a914:	10000015 	stw	zero,0(r2)
    a918:	e0bff317 	ldw	r2,-52(fp)
    a91c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a920:	e0bff617 	ldw	r2,-40(fp)
    a924:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
    a928:	e0bff803 	ldbu	r2,-32(fp)
    a92c:	00000506 	br	a944 <OSTaskCreate+0x1a8>
    a930:	e0bff317 	ldw	r2,-52(fp)
    a934:	e0bff915 	stw	r2,-28(fp)
    a938:	e0bff917 	ldw	r2,-28(fp)
    a93c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    a940:	00800a04 	movi	r2,40
}
    a944:	e037883a 	mov	sp,fp
    a948:	dfc00117 	ldw	ra,4(sp)
    a94c:	df000017 	ldw	fp,0(sp)
    a950:	dec00204 	addi	sp,sp,8
    a954:	f800283a 	ret

0000a958 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
    a958:	deffec04 	addi	sp,sp,-80
    a95c:	dfc01315 	stw	ra,76(sp)
    a960:	df001215 	stw	fp,72(sp)
    a964:	df001204 	addi	fp,sp,72
    a968:	e13ffa15 	stw	r4,-24(fp)
    a96c:	e17ffb15 	stw	r5,-20(fp)
    a970:	e1bffc15 	stw	r6,-16(fp)
    a974:	3809883a 	mov	r4,r7
    a978:	e0c00217 	ldw	r3,8(fp)
    a97c:	e0800617 	ldw	r2,24(fp)
    a980:	e13ffd05 	stb	r4,-12(fp)
    a984:	e0fffe0d 	sth	r3,-8(fp)
    a988:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    a98c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    a990:	e0bffd03 	ldbu	r2,-12(fp)
    a994:	10800570 	cmpltui	r2,r2,21
    a998:	1000021e 	bne	r2,zero,a9a4 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
    a99c:	00800a84 	movi	r2,42
    a9a0:	00006506 	br	ab38 <OSTaskCreateExt+0x1e0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a9a4:	0005303a 	rdctl	r2,status
    a9a8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a9ac:	e0fff917 	ldw	r3,-28(fp)
    a9b0:	00bfff84 	movi	r2,-2
    a9b4:	1884703a 	and	r2,r3,r2
    a9b8:	1001703a 	wrctl	status,r2
  
  return context;
    a9bc:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    a9c0:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    a9c4:	00800074 	movhi	r2,1
    a9c8:	10879504 	addi	r2,r2,7764
    a9cc:	10800003 	ldbu	r2,0(r2)
    a9d0:	10803fcc 	andi	r2,r2,255
    a9d4:	10000626 	beq	r2,zero,a9f0 <OSTaskCreateExt+0x98>
    a9d8:	e0bff117 	ldw	r2,-60(fp)
    a9dc:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a9e0:	e0bff217 	ldw	r2,-56(fp)
    a9e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    a9e8:	00800f04 	movi	r2,60
    a9ec:	00005206 	br	ab38 <OSTaskCreateExt+0x1e0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    a9f0:	e0fffd03 	ldbu	r3,-12(fp)
    a9f4:	008000b4 	movhi	r2,2
    a9f8:	10a41d04 	addi	r2,r2,-28556
    a9fc:	18c7883a 	add	r3,r3,r3
    aa00:	18c7883a 	add	r3,r3,r3
    aa04:	10c5883a 	add	r2,r2,r3
    aa08:	10800017 	ldw	r2,0(r2)
    aa0c:	1000451e 	bne	r2,zero,ab24 <OSTaskCreateExt+0x1cc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    aa10:	e0fffd03 	ldbu	r3,-12(fp)
    aa14:	008000b4 	movhi	r2,2
    aa18:	10a41d04 	addi	r2,r2,-28556
    aa1c:	18c7883a 	add	r3,r3,r3
    aa20:	18c7883a 	add	r3,r3,r3
    aa24:	10c5883a 	add	r2,r2,r3
    aa28:	00c00044 	movi	r3,1
    aa2c:	10c00015 	stw	r3,0(r2)
    aa30:	e0bff117 	ldw	r2,-60(fp)
    aa34:	e0bff315 	stw	r2,-52(fp)
    aa38:	e0bff317 	ldw	r2,-52(fp)
    aa3c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
    aa40:	e0bfff0b 	ldhu	r2,-4(fp)
    aa44:	100d883a 	mov	r6,r2
    aa48:	e1400417 	ldw	r5,16(fp)
    aa4c:	e1000317 	ldw	r4,12(fp)
    aa50:	000baf00 	call	baf0 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
    aa54:	e0bfff0b 	ldhu	r2,-4(fp)
    aa58:	100f883a 	mov	r7,r2
    aa5c:	e1bffc17 	ldw	r6,-16(fp)
    aa60:	e17ffb17 	ldw	r5,-20(fp)
    aa64:	e13ffa17 	ldw	r4,-24(fp)
    aa68:	000dc9c0 	call	dc9c <OSTaskStkInit>
    aa6c:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
    aa70:	e0fffd03 	ldbu	r3,-12(fp)
    aa74:	e13ffe0b 	ldhu	r4,-8(fp)
    aa78:	e0bfff0b 	ldhu	r2,-4(fp)
    aa7c:	d8800215 	stw	r2,8(sp)
    aa80:	e0800517 	ldw	r2,20(fp)
    aa84:	d8800115 	stw	r2,4(sp)
    aa88:	e0800417 	ldw	r2,16(fp)
    aa8c:	d8800015 	stw	r2,0(sp)
    aa90:	200f883a 	mov	r7,r4
    aa94:	e1800317 	ldw	r6,12(fp)
    aa98:	e17ff517 	ldw	r5,-44(fp)
    aa9c:	1809883a 	mov	r4,r3
    aaa0:	00060900 	call	6090 <OS_TCBInit>
    aaa4:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
    aaa8:	e0bff603 	ldbu	r2,-40(fp)
    aaac:	1000081e 	bne	r2,zero,aad0 <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
    aab0:	00800074 	movhi	r2,1
    aab4:	10878744 	addi	r2,r2,7709
    aab8:	10800003 	ldbu	r2,0(r2)
    aabc:	10803fcc 	andi	r2,r2,255
    aac0:	10800058 	cmpnei	r2,r2,1
    aac4:	1000151e 	bne	r2,zero,ab1c <OSTaskCreateExt+0x1c4>
                OS_Sched();
    aac8:	0005bc00 	call	5bc0 <OS_Sched>
    aacc:	00001306 	br	ab1c <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    aad0:	0005303a 	rdctl	r2,status
    aad4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    aad8:	e0fff817 	ldw	r3,-32(fp)
    aadc:	00bfff84 	movi	r2,-2
    aae0:	1884703a 	and	r2,r3,r2
    aae4:	1001703a 	wrctl	status,r2
  
  return context;
    aae8:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    aaec:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
    aaf0:	e0fffd03 	ldbu	r3,-12(fp)
    aaf4:	008000b4 	movhi	r2,2
    aaf8:	10a41d04 	addi	r2,r2,-28556
    aafc:	18c7883a 	add	r3,r3,r3
    ab00:	18c7883a 	add	r3,r3,r3
    ab04:	10c5883a 	add	r2,r2,r3
    ab08:	10000015 	stw	zero,0(r2)
    ab0c:	e0bff117 	ldw	r2,-60(fp)
    ab10:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ab14:	e0bff417 	ldw	r2,-48(fp)
    ab18:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
    ab1c:	e0bff603 	ldbu	r2,-40(fp)
    ab20:	00000506 	br	ab38 <OSTaskCreateExt+0x1e0>
    ab24:	e0bff117 	ldw	r2,-60(fp)
    ab28:	e0bff715 	stw	r2,-36(fp)
    ab2c:	e0bff717 	ldw	r2,-36(fp)
    ab30:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    ab34:	00800a04 	movi	r2,40
}
    ab38:	e037883a 	mov	sp,fp
    ab3c:	dfc00117 	ldw	ra,4(sp)
    ab40:	df000017 	ldw	fp,0(sp)
    ab44:	dec00204 	addi	sp,sp,8
    ab48:	f800283a 	ret

0000ab4c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
    ab4c:	defff404 	addi	sp,sp,-48
    ab50:	dfc00b15 	stw	ra,44(sp)
    ab54:	df000a15 	stw	fp,40(sp)
    ab58:	df000a04 	addi	fp,sp,40
    ab5c:	2005883a 	mov	r2,r4
    ab60:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
    ab64:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
    ab68:	00800074 	movhi	r2,1
    ab6c:	10879504 	addi	r2,r2,7764
    ab70:	10800003 	ldbu	r2,0(r2)
    ab74:	10803fcc 	andi	r2,r2,255
    ab78:	10000226 	beq	r2,zero,ab84 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
    ab7c:	00801004 	movi	r2,64
    ab80:	0000e506 	br	af18 <OSTaskDel+0x3cc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
    ab84:	e0bfff03 	ldbu	r2,-4(fp)
    ab88:	10800518 	cmpnei	r2,r2,20
    ab8c:	1000021e 	bne	r2,zero,ab98 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
    ab90:	00800f84 	movi	r2,62
    ab94:	0000e006 	br	af18 <OSTaskDel+0x3cc>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
    ab98:	e0bfff03 	ldbu	r2,-4(fp)
    ab9c:	10800530 	cmpltui	r2,r2,20
    aba0:	1000051e 	bne	r2,zero,abb8 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
    aba4:	e0bfff03 	ldbu	r2,-4(fp)
    aba8:	10803fe0 	cmpeqi	r2,r2,255
    abac:	1000021e 	bne	r2,zero,abb8 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
    abb0:	00800a84 	movi	r2,42
    abb4:	0000d806 	br	af18 <OSTaskDel+0x3cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    abb8:	0005303a 	rdctl	r2,status
    abbc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    abc0:	e0fffe17 	ldw	r3,-8(fp)
    abc4:	00bfff84 	movi	r2,-2
    abc8:	1884703a 	and	r2,r3,r2
    abcc:	1001703a 	wrctl	status,r2
  
  return context;
    abd0:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
    abd4:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
    abd8:	e0bfff03 	ldbu	r2,-4(fp)
    abdc:	10803fd8 	cmpnei	r2,r2,255
    abe0:	1000051e 	bne	r2,zero,abf8 <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
    abe4:	00800074 	movhi	r2,1
    abe8:	10879604 	addi	r2,r2,7768
    abec:	10800017 	ldw	r2,0(r2)
    abf0:	10800c83 	ldbu	r2,50(r2)
    abf4:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    abf8:	e0ffff03 	ldbu	r3,-4(fp)
    abfc:	008000b4 	movhi	r2,2
    ac00:	10a41d04 	addi	r2,r2,-28556
    ac04:	18c7883a 	add	r3,r3,r3
    ac08:	18c7883a 	add	r3,r3,r3
    ac0c:	10c5883a 	add	r2,r2,r3
    ac10:	10800017 	ldw	r2,0(r2)
    ac14:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
    ac18:	e0bff817 	ldw	r2,-32(fp)
    ac1c:	1000061e 	bne	r2,zero,ac38 <OSTaskDel+0xec>
    ac20:	e0bff617 	ldw	r2,-40(fp)
    ac24:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ac28:	e0bff717 	ldw	r2,-36(fp)
    ac2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    ac30:	008010c4 	movi	r2,67
    ac34:	0000b806 	br	af18 <OSTaskDel+0x3cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
    ac38:	e0bff817 	ldw	r2,-32(fp)
    ac3c:	10800058 	cmpnei	r2,r2,1
    ac40:	1000061e 	bne	r2,zero,ac5c <OSTaskDel+0x110>
    ac44:	e0bff617 	ldw	r2,-40(fp)
    ac48:	e0bff915 	stw	r2,-28(fp)
    ac4c:	e0bff917 	ldw	r2,-28(fp)
    ac50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    ac54:	00800f44 	movi	r2,61
    ac58:	0000af06 	br	af18 <OSTaskDel+0x3cc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
    ac5c:	e0bff817 	ldw	r2,-32(fp)
    ac60:	10800d03 	ldbu	r2,52(r2)
    ac64:	10c03fcc 	andi	r3,r2,255
    ac68:	e0bff817 	ldw	r2,-32(fp)
    ac6c:	10800d03 	ldbu	r2,52(r2)
    ac70:	11003fcc 	andi	r4,r2,255
    ac74:	00800074 	movhi	r2,1
    ac78:	10879344 	addi	r2,r2,7757
    ac7c:	1105883a 	add	r2,r2,r4
    ac80:	10800003 	ldbu	r2,0(r2)
    ac84:	1009883a 	mov	r4,r2
    ac88:	e0bff817 	ldw	r2,-32(fp)
    ac8c:	10800d43 	ldbu	r2,53(r2)
    ac90:	0084303a 	nor	r2,zero,r2
    ac94:	2084703a 	and	r2,r4,r2
    ac98:	1009883a 	mov	r4,r2
    ac9c:	00800074 	movhi	r2,1
    aca0:	10879344 	addi	r2,r2,7757
    aca4:	10c5883a 	add	r2,r2,r3
    aca8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
    acac:	e0bff817 	ldw	r2,-32(fp)
    acb0:	10800d03 	ldbu	r2,52(r2)
    acb4:	10c03fcc 	andi	r3,r2,255
    acb8:	00800074 	movhi	r2,1
    acbc:	10879344 	addi	r2,r2,7757
    acc0:	10c5883a 	add	r2,r2,r3
    acc4:	10800003 	ldbu	r2,0(r2)
    acc8:	10803fcc 	andi	r2,r2,255
    accc:	10000c1e 	bne	r2,zero,ad00 <OSTaskDel+0x1b4>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
    acd0:	e0bff817 	ldw	r2,-32(fp)
    acd4:	10800d83 	ldbu	r2,54(r2)
    acd8:	0084303a 	nor	r2,zero,r2
    acdc:	1007883a 	mov	r3,r2
    ace0:	00800074 	movhi	r2,1
    ace4:	10879304 	addi	r2,r2,7756
    ace8:	10800003 	ldbu	r2,0(r2)
    acec:	1884703a 	and	r2,r3,r2
    acf0:	1007883a 	mov	r3,r2
    acf4:	00800074 	movhi	r2,1
    acf8:	10879304 	addi	r2,r2,7756
    acfc:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
    ad00:	e0bff817 	ldw	r2,-32(fp)
    ad04:	10800717 	ldw	r2,28(r2)
    ad08:	10000526 	beq	r2,zero,ad20 <OSTaskDel+0x1d4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
    ad0c:	e0bff817 	ldw	r2,-32(fp)
    ad10:	10800717 	ldw	r2,28(r2)
    ad14:	100b883a 	mov	r5,r2
    ad18:	e13ff817 	ldw	r4,-32(fp)
    ad1c:	00054d80 	call	54d8 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
    ad20:	e0bff817 	ldw	r2,-32(fp)
    ad24:	10800817 	ldw	r2,32(r2)
    ad28:	10000526 	beq	r2,zero,ad40 <OSTaskDel+0x1f4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    ad2c:	e0bff817 	ldw	r2,-32(fp)
    ad30:	10800817 	ldw	r2,32(r2)
    ad34:	100b883a 	mov	r5,r2
    ad38:	e13ff817 	ldw	r4,-32(fp)
    ad3c:	00055900 	call	5590 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
    ad40:	e0bff817 	ldw	r2,-32(fp)
    ad44:	10800a17 	ldw	r2,40(r2)
    ad48:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
    ad4c:	e0bffb17 	ldw	r2,-20(fp)
    ad50:	10000226 	beq	r2,zero,ad5c <OSTaskDel+0x210>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
    ad54:	e13ffb17 	ldw	r4,-20(fp)
    ad58:	0007d080 	call	7d08 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
    ad5c:	e0bff817 	ldw	r2,-32(fp)
    ad60:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
    ad64:	e0bff817 	ldw	r2,-32(fp)
    ad68:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    ad6c:	e0bff817 	ldw	r2,-32(fp)
    ad70:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
    ad74:	00800074 	movhi	r2,1
    ad78:	10878704 	addi	r2,r2,7708
    ad7c:	10800003 	ldbu	r2,0(r2)
    ad80:	10803fcc 	andi	r2,r2,255
    ad84:	10803fe0 	cmpeqi	r2,r2,255
    ad88:	1000081e 	bne	r2,zero,adac <OSTaskDel+0x260>
        OSLockNesting++;
    ad8c:	00800074 	movhi	r2,1
    ad90:	10878704 	addi	r2,r2,7708
    ad94:	10800003 	ldbu	r2,0(r2)
    ad98:	10800044 	addi	r2,r2,1
    ad9c:	1007883a 	mov	r3,r2
    ada0:	00800074 	movhi	r2,1
    ada4:	10878704 	addi	r2,r2,7708
    ada8:	10c00005 	stb	r3,0(r2)
    adac:	e0bff617 	ldw	r2,-40(fp)
    adb0:	e0bffd15 	stw	r2,-12(fp)
    adb4:	e0bffd17 	ldw	r2,-12(fp)
    adb8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
    adbc:	0004fdc0 	call	4fdc <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    adc0:	0005303a 	rdctl	r2,status
    adc4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    adc8:	e0fffa17 	ldw	r3,-24(fp)
    adcc:	00bfff84 	movi	r2,-2
    add0:	1884703a 	and	r2,r3,r2
    add4:	1001703a 	wrctl	status,r2
  
  return context;
    add8:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
    addc:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
    ade0:	00800074 	movhi	r2,1
    ade4:	10878704 	addi	r2,r2,7708
    ade8:	10800003 	ldbu	r2,0(r2)
    adec:	10803fcc 	andi	r2,r2,255
    adf0:	10000826 	beq	r2,zero,ae14 <OSTaskDel+0x2c8>
        OSLockNesting--;
    adf4:	00800074 	movhi	r2,1
    adf8:	10878704 	addi	r2,r2,7708
    adfc:	10800003 	ldbu	r2,0(r2)
    ae00:	10bfffc4 	addi	r2,r2,-1
    ae04:	1007883a 	mov	r3,r2
    ae08:	00800074 	movhi	r2,1
    ae0c:	10878704 	addi	r2,r2,7708
    ae10:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
    ae14:	e13ff817 	ldw	r4,-32(fp)
    ae18:	000de1c0 	call	de1c <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
    ae1c:	00800074 	movhi	r2,1
    ae20:	10878f44 	addi	r2,r2,7741
    ae24:	10800003 	ldbu	r2,0(r2)
    ae28:	10bfffc4 	addi	r2,r2,-1
    ae2c:	1007883a 	mov	r3,r2
    ae30:	00800074 	movhi	r2,1
    ae34:	10878f44 	addi	r2,r2,7741
    ae38:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
    ae3c:	e0ffff03 	ldbu	r3,-4(fp)
    ae40:	008000b4 	movhi	r2,2
    ae44:	10a41d04 	addi	r2,r2,-28556
    ae48:	18c7883a 	add	r3,r3,r3
    ae4c:	18c7883a 	add	r3,r3,r3
    ae50:	10c5883a 	add	r2,r2,r3
    ae54:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
    ae58:	e0bff817 	ldw	r2,-32(fp)
    ae5c:	10800617 	ldw	r2,24(r2)
    ae60:	1000091e 	bne	r2,zero,ae88 <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
    ae64:	e0bff817 	ldw	r2,-32(fp)
    ae68:	10800517 	ldw	r2,20(r2)
    ae6c:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
    ae70:	e0bff817 	ldw	r2,-32(fp)
    ae74:	10c00517 	ldw	r3,20(r2)
    ae78:	00800074 	movhi	r2,1
    ae7c:	10878a04 	addi	r2,r2,7720
    ae80:	10c00015 	stw	r3,0(r2)
    ae84:	00000a06 	br	aeb0 <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
    ae88:	e0bff817 	ldw	r2,-32(fp)
    ae8c:	10800617 	ldw	r2,24(r2)
    ae90:	e0fff817 	ldw	r3,-32(fp)
    ae94:	18c00517 	ldw	r3,20(r3)
    ae98:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
    ae9c:	e0bff817 	ldw	r2,-32(fp)
    aea0:	10800517 	ldw	r2,20(r2)
    aea4:	e0fff817 	ldw	r3,-32(fp)
    aea8:	18c00617 	ldw	r3,24(r3)
    aeac:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
    aeb0:	00800074 	movhi	r2,1
    aeb4:	10878e04 	addi	r2,r2,7736
    aeb8:	10c00017 	ldw	r3,0(r2)
    aebc:	e0bff817 	ldw	r2,-32(fp)
    aec0:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
    aec4:	00800074 	movhi	r2,1
    aec8:	10878e04 	addi	r2,r2,7736
    aecc:	e0fff817 	ldw	r3,-32(fp)
    aed0:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
    aed4:	e0bff817 	ldw	r2,-32(fp)
    aed8:	00c00fc4 	movi	r3,63
    aedc:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    aee0:	e0bff817 	ldw	r2,-32(fp)
    aee4:	10001345 	stb	zero,77(r2)
    aee8:	e0bff617 	ldw	r2,-40(fp)
    aeec:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    aef0:	e0bffc17 	ldw	r2,-16(fp)
    aef4:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    aef8:	00800074 	movhi	r2,1
    aefc:	10878744 	addi	r2,r2,7709
    af00:	10800003 	ldbu	r2,0(r2)
    af04:	10803fcc 	andi	r2,r2,255
    af08:	10800058 	cmpnei	r2,r2,1
    af0c:	1000011e 	bne	r2,zero,af14 <OSTaskDel+0x3c8>
        OS_Sched();                                     /* Find new highest priority task              */
    af10:	0005bc00 	call	5bc0 <OS_Sched>
    }
    return (OS_ERR_NONE);
    af14:	0005883a 	mov	r2,zero
}
    af18:	e037883a 	mov	sp,fp
    af1c:	dfc00117 	ldw	ra,4(sp)
    af20:	df000017 	ldw	fp,0(sp)
    af24:	dec00204 	addi	sp,sp,8
    af28:	f800283a 	ret

0000af2c <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
    af2c:	defff504 	addi	sp,sp,-44
    af30:	df000a15 	stw	fp,40(sp)
    af34:	df000a04 	addi	fp,sp,40
    af38:	2005883a 	mov	r2,r4
    af3c:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    af40:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
    af44:	e0bfff03 	ldbu	r2,-4(fp)
    af48:	10800518 	cmpnei	r2,r2,20
    af4c:	1000021e 	bne	r2,zero,af58 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
    af50:	00800f84 	movi	r2,62
    af54:	00004706 	br	b074 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    af58:	e0bfff03 	ldbu	r2,-4(fp)
    af5c:	10800530 	cmpltui	r2,r2,20
    af60:	1000051e 	bne	r2,zero,af78 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
    af64:	e0bfff03 	ldbu	r2,-4(fp)
    af68:	10803fe0 	cmpeqi	r2,r2,255
    af6c:	1000021e 	bne	r2,zero,af78 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
    af70:	00800a84 	movi	r2,42
    af74:	00003f06 	br	b074 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
    af78:	e0bfff03 	ldbu	r2,-4(fp)
    af7c:	10803fd8 	cmpnei	r2,r2,255
    af80:	1000131e 	bne	r2,zero,afd0 <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    af84:	0005303a 	rdctl	r2,status
    af88:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    af8c:	e0fff917 	ldw	r3,-28(fp)
    af90:	00bfff84 	movi	r2,-2
    af94:	1884703a 	and	r2,r3,r2
    af98:	1001703a 	wrctl	status,r2
  
  return context;
    af9c:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
    afa0:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
    afa4:	00800074 	movhi	r2,1
    afa8:	10879604 	addi	r2,r2,7768
    afac:	10800017 	ldw	r2,0(r2)
    afb0:	10800dc3 	ldbu	r2,55(r2)
    afb4:	e0bff805 	stb	r2,-32(fp)
    afb8:	e0bff617 	ldw	r2,-40(fp)
    afbc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    afc0:	e0bffe17 	ldw	r2,-8(fp)
    afc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
    afc8:	e0bff803 	ldbu	r2,-32(fp)
    afcc:	00002906 	br	b074 <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    afd0:	0005303a 	rdctl	r2,status
    afd4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    afd8:	e0fff717 	ldw	r3,-36(fp)
    afdc:	00bfff84 	movi	r2,-2
    afe0:	1884703a 	and	r2,r3,r2
    afe4:	1001703a 	wrctl	status,r2
  
  return context;
    afe8:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
    afec:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
    aff0:	e0ffff03 	ldbu	r3,-4(fp)
    aff4:	008000b4 	movhi	r2,2
    aff8:	10a41d04 	addi	r2,r2,-28556
    affc:	18c7883a 	add	r3,r3,r3
    b000:	18c7883a 	add	r3,r3,r3
    b004:	10c5883a 	add	r2,r2,r3
    b008:	10800017 	ldw	r2,0(r2)
    b00c:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
    b010:	e0bffb17 	ldw	r2,-20(fp)
    b014:	1000061e 	bne	r2,zero,b030 <OSTaskDelReq+0x104>
    b018:	e0bff617 	ldw	r2,-40(fp)
    b01c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b020:	e0bffa17 	ldw	r2,-24(fp)
    b024:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
    b028:	008010c4 	movi	r2,67
    b02c:	00001106 	br	b074 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
    b030:	e0bffb17 	ldw	r2,-20(fp)
    b034:	10800058 	cmpnei	r2,r2,1
    b038:	1000061e 	bne	r2,zero,b054 <OSTaskDelReq+0x128>
    b03c:	e0bff617 	ldw	r2,-40(fp)
    b040:	e0bffc15 	stw	r2,-16(fp)
    b044:	e0bffc17 	ldw	r2,-16(fp)
    b048:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    b04c:	00800f44 	movi	r2,61
    b050:	00000806 	br	b074 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
    b054:	e0bffb17 	ldw	r2,-20(fp)
    b058:	00c00fc4 	movi	r3,63
    b05c:	10c00dc5 	stb	r3,55(r2)
    b060:	e0bff617 	ldw	r2,-40(fp)
    b064:	e0bffd15 	stw	r2,-12(fp)
    b068:	e0bffd17 	ldw	r2,-12(fp)
    b06c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    b070:	0005883a 	mov	r2,zero
}
    b074:	e037883a 	mov	sp,fp
    b078:	df000017 	ldw	fp,0(sp)
    b07c:	dec00104 	addi	sp,sp,4
    b080:	f800283a 	ret

0000b084 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
    b084:	defff404 	addi	sp,sp,-48
    b088:	dfc00b15 	stw	ra,44(sp)
    b08c:	df000a15 	stw	fp,40(sp)
    b090:	df000a04 	addi	fp,sp,40
    b094:	2005883a 	mov	r2,r4
    b098:	e17ffe15 	stw	r5,-8(fp)
    b09c:	e1bfff15 	stw	r6,-4(fp)
    b0a0:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
    b0a4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
    b0a8:	e0bfff17 	ldw	r2,-4(fp)
    b0ac:	1000021e 	bne	r2,zero,b0b8 <OSTaskNameGet+0x34>
        return (0);
    b0b0:	0005883a 	mov	r2,zero
    b0b4:	00005806 	br	b218 <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
    b0b8:	e0bffd03 	ldbu	r2,-12(fp)
    b0bc:	10800570 	cmpltui	r2,r2,21
    b0c0:	1000081e 	bne	r2,zero,b0e4 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
    b0c4:	e0bffd03 	ldbu	r2,-12(fp)
    b0c8:	10803fe0 	cmpeqi	r2,r2,255
    b0cc:	1000051e 	bne	r2,zero,b0e4 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
    b0d0:	e0bfff17 	ldw	r2,-4(fp)
    b0d4:	00c00a84 	movi	r3,42
    b0d8:	10c00005 	stb	r3,0(r2)
            return (0);
    b0dc:	0005883a 	mov	r2,zero
    b0e0:	00004d06 	br	b218 <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
    b0e4:	e0bffe17 	ldw	r2,-8(fp)
    b0e8:	1000051e 	bne	r2,zero,b100 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
    b0ec:	e0bfff17 	ldw	r2,-4(fp)
    b0f0:	00c00304 	movi	r3,12
    b0f4:	10c00005 	stb	r3,0(r2)
        return (0);
    b0f8:	0005883a 	mov	r2,zero
    b0fc:	00004606 	br	b218 <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
    b100:	00800074 	movhi	r2,1
    b104:	10879504 	addi	r2,r2,7764
    b108:	10800003 	ldbu	r2,0(r2)
    b10c:	10803fcc 	andi	r2,r2,255
    b110:	10000526 	beq	r2,zero,b128 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
    b114:	e0bfff17 	ldw	r2,-4(fp)
    b118:	00c00444 	movi	r3,17
    b11c:	10c00005 	stb	r3,0(r2)
        return (0);
    b120:	0005883a 	mov	r2,zero
    b124:	00003c06 	br	b218 <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b128:	0005303a 	rdctl	r2,status
    b12c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b130:	e0fffc17 	ldw	r3,-16(fp)
    b134:	00bfff84 	movi	r2,-2
    b138:	1884703a 	and	r2,r3,r2
    b13c:	1001703a 	wrctl	status,r2
  
  return context;
    b140:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    b144:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
    b148:	e0bffd03 	ldbu	r2,-12(fp)
    b14c:	10803fd8 	cmpnei	r2,r2,255
    b150:	1000051e 	bne	r2,zero,b168 <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
    b154:	00800074 	movhi	r2,1
    b158:	10879604 	addi	r2,r2,7768
    b15c:	10800017 	ldw	r2,0(r2)
    b160:	10800c83 	ldbu	r2,50(r2)
    b164:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    b168:	e0fffd03 	ldbu	r3,-12(fp)
    b16c:	008000b4 	movhi	r2,2
    b170:	10a41d04 	addi	r2,r2,-28556
    b174:	18c7883a 	add	r3,r3,r3
    b178:	18c7883a 	add	r3,r3,r3
    b17c:	10c5883a 	add	r2,r2,r3
    b180:	10800017 	ldw	r2,0(r2)
    b184:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
    b188:	e0bff817 	ldw	r2,-32(fp)
    b18c:	1000091e 	bne	r2,zero,b1b4 <OSTaskNameGet+0x130>
    b190:	e0bff617 	ldw	r2,-40(fp)
    b194:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b198:	e0bff717 	ldw	r2,-36(fp)
    b19c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
    b1a0:	e0bfff17 	ldw	r2,-4(fp)
    b1a4:	00c010c4 	movi	r3,67
    b1a8:	10c00005 	stb	r3,0(r2)
        return (0);
    b1ac:	0005883a 	mov	r2,zero
    b1b0:	00001906 	br	b218 <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
    b1b4:	e0bff817 	ldw	r2,-32(fp)
    b1b8:	10800058 	cmpnei	r2,r2,1
    b1bc:	1000091e 	bne	r2,zero,b1e4 <OSTaskNameGet+0x160>
    b1c0:	e0bff617 	ldw	r2,-40(fp)
    b1c4:	e0bff915 	stw	r2,-28(fp)
    b1c8:	e0bff917 	ldw	r2,-28(fp)
    b1cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
    b1d0:	e0bfff17 	ldw	r2,-4(fp)
    b1d4:	00c010c4 	movi	r3,67
    b1d8:	10c00005 	stb	r3,0(r2)
        return (0);
    b1dc:	0005883a 	mov	r2,zero
    b1e0:	00000d06 	br	b218 <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
    b1e4:	e0bff817 	ldw	r2,-32(fp)
    b1e8:	10801304 	addi	r2,r2,76
    b1ec:	100b883a 	mov	r5,r2
    b1f0:	e13ffe17 	ldw	r4,-8(fp)
    b1f4:	0005d640 	call	5d64 <OS_StrCopy>
    b1f8:	e0bffb05 	stb	r2,-20(fp)
    b1fc:	e0bff617 	ldw	r2,-40(fp)
    b200:	e0bffa15 	stw	r2,-24(fp)
    b204:	e0bffa17 	ldw	r2,-24(fp)
    b208:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    b20c:	e0bfff17 	ldw	r2,-4(fp)
    b210:	10000005 	stb	zero,0(r2)
    return (len);
    b214:	e0bffb03 	ldbu	r2,-20(fp)
}
    b218:	e037883a 	mov	sp,fp
    b21c:	dfc00117 	ldw	ra,4(sp)
    b220:	df000017 	ldw	fp,0(sp)
    b224:	dec00204 	addi	sp,sp,8
    b228:	f800283a 	ret

0000b22c <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
    b22c:	defff304 	addi	sp,sp,-52
    b230:	dfc00c15 	stw	ra,48(sp)
    b234:	df000b15 	stw	fp,44(sp)
    b238:	df000b04 	addi	fp,sp,44
    b23c:	2005883a 	mov	r2,r4
    b240:	e17ffe15 	stw	r5,-8(fp)
    b244:	e1bfff15 	stw	r6,-4(fp)
    b248:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    b24c:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    b250:	e0bfff17 	ldw	r2,-4(fp)
    b254:	10006026 	beq	r2,zero,b3d8 <OSTaskNameSet+0x1ac>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
    b258:	e0bffd03 	ldbu	r2,-12(fp)
    b25c:	10800570 	cmpltui	r2,r2,21
    b260:	1000071e 	bne	r2,zero,b280 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
    b264:	e0bffd03 	ldbu	r2,-12(fp)
    b268:	10803fe0 	cmpeqi	r2,r2,255
    b26c:	1000041e 	bne	r2,zero,b280 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
    b270:	e0bfff17 	ldw	r2,-4(fp)
    b274:	00c00a84 	movi	r3,42
    b278:	10c00005 	stb	r3,0(r2)
            return;
    b27c:	00005706 	br	b3dc <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
    b280:	e0bffe17 	ldw	r2,-8(fp)
    b284:	1000041e 	bne	r2,zero,b298 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
    b288:	e0bfff17 	ldw	r2,-4(fp)
    b28c:	00c00304 	movi	r3,12
    b290:	10c00005 	stb	r3,0(r2)
        return;
    b294:	00005106 	br	b3dc <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
    b298:	00800074 	movhi	r2,1
    b29c:	10879504 	addi	r2,r2,7764
    b2a0:	10800003 	ldbu	r2,0(r2)
    b2a4:	10803fcc 	andi	r2,r2,255
    b2a8:	10000426 	beq	r2,zero,b2bc <OSTaskNameSet+0x90>
        *perr = OS_ERR_NAME_SET_ISR;
    b2ac:	e0bfff17 	ldw	r2,-4(fp)
    b2b0:	00c00484 	movi	r3,18
    b2b4:	10c00005 	stb	r3,0(r2)
        return;
    b2b8:	00004806 	br	b3dc <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b2bc:	0005303a 	rdctl	r2,status
    b2c0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b2c4:	e0fffc17 	ldw	r3,-16(fp)
    b2c8:	00bfff84 	movi	r2,-2
    b2cc:	1884703a 	and	r2,r3,r2
    b2d0:	1001703a 	wrctl	status,r2
  
  return context;
    b2d4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    b2d8:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
    b2dc:	e0bffd03 	ldbu	r2,-12(fp)
    b2e0:	10803fd8 	cmpnei	r2,r2,255
    b2e4:	1000051e 	bne	r2,zero,b2fc <OSTaskNameSet+0xd0>
        prio = OSTCBCur->OSTCBPrio;
    b2e8:	00800074 	movhi	r2,1
    b2ec:	10879604 	addi	r2,r2,7768
    b2f0:	10800017 	ldw	r2,0(r2)
    b2f4:	10800c83 	ldbu	r2,50(r2)
    b2f8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    b2fc:	e0fffd03 	ldbu	r3,-12(fp)
    b300:	008000b4 	movhi	r2,2
    b304:	10a41d04 	addi	r2,r2,-28556
    b308:	18c7883a 	add	r3,r3,r3
    b30c:	18c7883a 	add	r3,r3,r3
    b310:	10c5883a 	add	r2,r2,r3
    b314:	10800017 	ldw	r2,0(r2)
    b318:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
    b31c:	e0bff717 	ldw	r2,-36(fp)
    b320:	1000081e 	bne	r2,zero,b344 <OSTaskNameSet+0x118>
    b324:	e0bff517 	ldw	r2,-44(fp)
    b328:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b32c:	e0bff617 	ldw	r2,-40(fp)
    b330:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
    b334:	e0bfff17 	ldw	r2,-4(fp)
    b338:	00c010c4 	movi	r3,67
    b33c:	10c00005 	stb	r3,0(r2)
        return;
    b340:	00002606 	br	b3dc <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
    b344:	e0bff717 	ldw	r2,-36(fp)
    b348:	10800058 	cmpnei	r2,r2,1
    b34c:	1000081e 	bne	r2,zero,b370 <OSTaskNameSet+0x144>
    b350:	e0bff517 	ldw	r2,-44(fp)
    b354:	e0bff815 	stw	r2,-32(fp)
    b358:	e0bff817 	ldw	r2,-32(fp)
    b35c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
    b360:	e0bfff17 	ldw	r2,-4(fp)
    b364:	00c010c4 	movi	r3,67
    b368:	10c00005 	stb	r3,0(r2)
        return;
    b36c:	00001b06 	br	b3dc <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
    b370:	e13ffe17 	ldw	r4,-8(fp)
    b374:	0005dd80 	call	5dd8 <OS_StrLen>
    b378:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
    b37c:	e0bffa03 	ldbu	r2,-24(fp)
    b380:	10800830 	cmpltui	r2,r2,32
    b384:	1000081e 	bne	r2,zero,b3a8 <OSTaskNameSet+0x17c>
    b388:	e0bff517 	ldw	r2,-44(fp)
    b38c:	e0bff915 	stw	r2,-28(fp)
    b390:	e0bff917 	ldw	r2,-28(fp)
    b394:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
    b398:	e0bfff17 	ldw	r2,-4(fp)
    b39c:	00c01044 	movi	r3,65
    b3a0:	10c00005 	stb	r3,0(r2)
        return;
    b3a4:	00000d06 	br	b3dc <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    b3a8:	e0bff717 	ldw	r2,-36(fp)
    b3ac:	10801304 	addi	r2,r2,76
    b3b0:	e17ffe17 	ldw	r5,-8(fp)
    b3b4:	1009883a 	mov	r4,r2
    b3b8:	0005d640 	call	5d64 <OS_StrCopy>
    b3bc:	e0bff517 	ldw	r2,-44(fp)
    b3c0:	e0bffb15 	stw	r2,-20(fp)
    b3c4:	e0bffb17 	ldw	r2,-20(fp)
    b3c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    b3cc:	e0bfff17 	ldw	r2,-4(fp)
    b3d0:	10000005 	stb	zero,0(r2)
    b3d4:	00000106 	br	b3dc <OSTaskNameSet+0x1b0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
    b3d8:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    b3dc:	e037883a 	mov	sp,fp
    b3e0:	dfc00117 	ldw	ra,4(sp)
    b3e4:	df000017 	ldw	fp,0(sp)
    b3e8:	dec00204 	addi	sp,sp,8
    b3ec:	f800283a 	ret

0000b3f0 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
    b3f0:	defff404 	addi	sp,sp,-48
    b3f4:	dfc00b15 	stw	ra,44(sp)
    b3f8:	df000a15 	stw	fp,40(sp)
    b3fc:	df000a04 	addi	fp,sp,40
    b400:	2005883a 	mov	r2,r4
    b404:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    b408:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
    b40c:	e0bfff03 	ldbu	r2,-4(fp)
    b410:	10800530 	cmpltui	r2,r2,20
    b414:	1000021e 	bne	r2,zero,b420 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    b418:	00800a84 	movi	r2,42
    b41c:	00006d06 	br	b5d4 <OSTaskResume+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b420:	0005303a 	rdctl	r2,status
    b424:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b428:	e0fffe17 	ldw	r3,-8(fp)
    b42c:	00bfff84 	movi	r2,-2
    b430:	1884703a 	and	r2,r3,r2
    b434:	1001703a 	wrctl	status,r2
  
  return context;
    b438:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    b43c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
    b440:	e0ffff03 	ldbu	r3,-4(fp)
    b444:	008000b4 	movhi	r2,2
    b448:	10a41d04 	addi	r2,r2,-28556
    b44c:	18c7883a 	add	r3,r3,r3
    b450:	18c7883a 	add	r3,r3,r3
    b454:	10c5883a 	add	r2,r2,r3
    b458:	10800017 	ldw	r2,0(r2)
    b45c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
    b460:	e0bff817 	ldw	r2,-32(fp)
    b464:	1000061e 	bne	r2,zero,b480 <OSTaskResume+0x90>
    b468:	e0bff617 	ldw	r2,-40(fp)
    b46c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b470:	e0bff717 	ldw	r2,-36(fp)
    b474:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
    b478:	00801184 	movi	r2,70
    b47c:	00005506 	br	b5d4 <OSTaskResume+0x1e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
    b480:	e0bff817 	ldw	r2,-32(fp)
    b484:	10800058 	cmpnei	r2,r2,1
    b488:	1000061e 	bne	r2,zero,b4a4 <OSTaskResume+0xb4>
    b48c:	e0bff617 	ldw	r2,-40(fp)
    b490:	e0bff915 	stw	r2,-28(fp)
    b494:	e0bff917 	ldw	r2,-28(fp)
    b498:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    b49c:	008010c4 	movi	r2,67
    b4a0:	00004c06 	br	b5d4 <OSTaskResume+0x1e4>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
    b4a4:	e0bff817 	ldw	r2,-32(fp)
    b4a8:	10800c03 	ldbu	r2,48(r2)
    b4ac:	10803fcc 	andi	r2,r2,255
    b4b0:	1080020c 	andi	r2,r2,8
    b4b4:	10004226 	beq	r2,zero,b5c0 <OSTaskResume+0x1d0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
    b4b8:	e0bff817 	ldw	r2,-32(fp)
    b4bc:	10c00c03 	ldbu	r3,48(r2)
    b4c0:	00bffdc4 	movi	r2,-9
    b4c4:	1884703a 	and	r2,r3,r2
    b4c8:	1007883a 	mov	r3,r2
    b4cc:	e0bff817 	ldw	r2,-32(fp)
    b4d0:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
    b4d4:	e0bff817 	ldw	r2,-32(fp)
    b4d8:	10800c03 	ldbu	r2,48(r2)
    b4dc:	10803fcc 	andi	r2,r2,255
    b4e0:	1000311e 	bne	r2,zero,b5a8 <OSTaskResume+0x1b8>
            if (ptcb->OSTCBDly == 0) {
    b4e4:	e0bff817 	ldw	r2,-32(fp)
    b4e8:	10800b8b 	ldhu	r2,46(r2)
    b4ec:	10bfffcc 	andi	r2,r2,65535
    b4f0:	1000281e 	bne	r2,zero,b594 <OSTaskResume+0x1a4>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
    b4f4:	e0bff817 	ldw	r2,-32(fp)
    b4f8:	10c00d83 	ldbu	r3,54(r2)
    b4fc:	00800074 	movhi	r2,1
    b500:	10879304 	addi	r2,r2,7756
    b504:	10800003 	ldbu	r2,0(r2)
    b508:	1884b03a 	or	r2,r3,r2
    b50c:	1007883a 	mov	r3,r2
    b510:	00800074 	movhi	r2,1
    b514:	10879304 	addi	r2,r2,7756
    b518:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    b51c:	e0bff817 	ldw	r2,-32(fp)
    b520:	10800d03 	ldbu	r2,52(r2)
    b524:	10c03fcc 	andi	r3,r2,255
    b528:	e0bff817 	ldw	r2,-32(fp)
    b52c:	10800d03 	ldbu	r2,52(r2)
    b530:	11003fcc 	andi	r4,r2,255
    b534:	00800074 	movhi	r2,1
    b538:	10879344 	addi	r2,r2,7757
    b53c:	1105883a 	add	r2,r2,r4
    b540:	11000003 	ldbu	r4,0(r2)
    b544:	e0bff817 	ldw	r2,-32(fp)
    b548:	10800d43 	ldbu	r2,53(r2)
    b54c:	2084b03a 	or	r2,r4,r2
    b550:	1009883a 	mov	r4,r2
    b554:	00800074 	movhi	r2,1
    b558:	10879344 	addi	r2,r2,7757
    b55c:	10c5883a 	add	r2,r2,r3
    b560:	11000005 	stb	r4,0(r2)
    b564:	e0bff617 	ldw	r2,-40(fp)
    b568:	e0bffa15 	stw	r2,-24(fp)
    b56c:	e0bffa17 	ldw	r2,-24(fp)
    b570:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
    b574:	00800074 	movhi	r2,1
    b578:	10878744 	addi	r2,r2,7709
    b57c:	10800003 	ldbu	r2,0(r2)
    b580:	10803fcc 	andi	r2,r2,255
    b584:	10800058 	cmpnei	r2,r2,1
    b588:	10000b1e 	bne	r2,zero,b5b8 <OSTaskResume+0x1c8>
                    OS_Sched();                               /* Find new highest priority task        */
    b58c:	0005bc00 	call	5bc0 <OS_Sched>
    b590:	00000906 	br	b5b8 <OSTaskResume+0x1c8>
    b594:	e0bff617 	ldw	r2,-40(fp)
    b598:	e0bffb15 	stw	r2,-20(fp)
    b59c:	e0bffb17 	ldw	r2,-20(fp)
    b5a0:	1001703a 	wrctl	status,r2
    b5a4:	00000406 	br	b5b8 <OSTaskResume+0x1c8>
    b5a8:	e0bff617 	ldw	r2,-40(fp)
    b5ac:	e0bffc15 	stw	r2,-16(fp)
    b5b0:	e0bffc17 	ldw	r2,-16(fp)
    b5b4:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
    b5b8:	0005883a 	mov	r2,zero
    b5bc:	00000506 	br	b5d4 <OSTaskResume+0x1e4>
    b5c0:	e0bff617 	ldw	r2,-40(fp)
    b5c4:	e0bffd15 	stw	r2,-12(fp)
    b5c8:	e0bffd17 	ldw	r2,-12(fp)
    b5cc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
    b5d0:	00801104 	movi	r2,68
}
    b5d4:	e037883a 	mov	sp,fp
    b5d8:	dfc00117 	ldw	ra,4(sp)
    b5dc:	df000017 	ldw	fp,0(sp)
    b5e0:	dec00204 	addi	sp,sp,8
    b5e4:	f800283a 	ret

0000b5e8 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
    b5e8:	defff304 	addi	sp,sp,-52
    b5ec:	df000c15 	stw	fp,48(sp)
    b5f0:	df000c04 	addi	fp,sp,48
    b5f4:	2005883a 	mov	r2,r4
    b5f8:	e17fff15 	stw	r5,-4(fp)
    b5fc:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    b600:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
    b604:	e0bffe03 	ldbu	r2,-8(fp)
    b608:	10800570 	cmpltui	r2,r2,21
    b60c:	1000051e 	bne	r2,zero,b624 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
    b610:	e0bffe03 	ldbu	r2,-8(fp)
    b614:	10803fe0 	cmpeqi	r2,r2,255
    b618:	1000021e 	bne	r2,zero,b624 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
    b61c:	00800a84 	movi	r2,42
    b620:	00005f06 	br	b7a0 <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
    b624:	e0bfff17 	ldw	r2,-4(fp)
    b628:	1000021e 	bne	r2,zero,b634 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
    b62c:	00800244 	movi	r2,9
    b630:	00005b06 	br	b7a0 <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
    b634:	e0bfff17 	ldw	r2,-4(fp)
    b638:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
    b63c:	e0bfff17 	ldw	r2,-4(fp)
    b640:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b644:	0005303a 	rdctl	r2,status
    b648:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b64c:	e0fffd17 	ldw	r3,-12(fp)
    b650:	00bfff84 	movi	r2,-2
    b654:	1884703a 	and	r2,r3,r2
    b658:	1001703a 	wrctl	status,r2
  
  return context;
    b65c:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
    b660:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
    b664:	e0bffe03 	ldbu	r2,-8(fp)
    b668:	10803fd8 	cmpnei	r2,r2,255
    b66c:	1000051e 	bne	r2,zero,b684 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
    b670:	00800074 	movhi	r2,1
    b674:	10879604 	addi	r2,r2,7768
    b678:	10800017 	ldw	r2,0(r2)
    b67c:	10800c83 	ldbu	r2,50(r2)
    b680:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    b684:	e0fffe03 	ldbu	r3,-8(fp)
    b688:	008000b4 	movhi	r2,2
    b68c:	10a41d04 	addi	r2,r2,-28556
    b690:	18c7883a 	add	r3,r3,r3
    b694:	18c7883a 	add	r3,r3,r3
    b698:	10c5883a 	add	r2,r2,r3
    b69c:	10800017 	ldw	r2,0(r2)
    b6a0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
    b6a4:	e0bff817 	ldw	r2,-32(fp)
    b6a8:	1000061e 	bne	r2,zero,b6c4 <OSTaskStkChk+0xdc>
    b6ac:	e0bff617 	ldw	r2,-40(fp)
    b6b0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b6b4:	e0bff717 	ldw	r2,-36(fp)
    b6b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    b6bc:	008010c4 	movi	r2,67
    b6c0:	00003706 	br	b7a0 <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
    b6c4:	e0bff817 	ldw	r2,-32(fp)
    b6c8:	10800058 	cmpnei	r2,r2,1
    b6cc:	1000061e 	bne	r2,zero,b6e8 <OSTaskStkChk+0x100>
    b6d0:	e0bff617 	ldw	r2,-40(fp)
    b6d4:	e0bff915 	stw	r2,-28(fp)
    b6d8:	e0bff917 	ldw	r2,-28(fp)
    b6dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    b6e0:	008010c4 	movi	r2,67
    b6e4:	00002e06 	br	b7a0 <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
    b6e8:	e0bff817 	ldw	r2,-32(fp)
    b6ec:	1080040b 	ldhu	r2,16(r2)
    b6f0:	10bfffcc 	andi	r2,r2,65535
    b6f4:	1080004c 	andi	r2,r2,1
    b6f8:	1000061e 	bne	r2,zero,b714 <OSTaskStkChk+0x12c>
    b6fc:	e0bff617 	ldw	r2,-40(fp)
    b700:	e0bffa15 	stw	r2,-24(fp)
    b704:	e0bffa17 	ldw	r2,-24(fp)
    b708:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
    b70c:	00801144 	movi	r2,69
    b710:	00002306 	br	b7a0 <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
    b714:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
    b718:	e0bff817 	ldw	r2,-32(fp)
    b71c:	10800317 	ldw	r2,12(r2)
    b720:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
    b724:	e0bff817 	ldw	r2,-32(fp)
    b728:	10800217 	ldw	r2,8(r2)
    b72c:	e0bff415 	stw	r2,-48(fp)
    b730:	e0bff617 	ldw	r2,-40(fp)
    b734:	e0bffb15 	stw	r2,-20(fp)
    b738:	e0bffb17 	ldw	r2,-20(fp)
    b73c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    b740:	00000306 	br	b750 <OSTaskStkChk+0x168>
        nfree++;
    b744:	e0bff517 	ldw	r2,-44(fp)
    b748:	10800044 	addi	r2,r2,1
    b74c:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    b750:	e0bff417 	ldw	r2,-48(fp)
    b754:	10c00104 	addi	r3,r2,4
    b758:	e0fff415 	stw	r3,-48(fp)
    b75c:	10800017 	ldw	r2,0(r2)
    b760:	103ff826 	beq	r2,zero,b744 <OSTaskStkChk+0x15c>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
    b764:	e0bff517 	ldw	r2,-44(fp)
    b768:	1085883a 	add	r2,r2,r2
    b76c:	1085883a 	add	r2,r2,r2
    b770:	1007883a 	mov	r3,r2
    b774:	e0bfff17 	ldw	r2,-4(fp)
    b778:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
    b77c:	e0fffc17 	ldw	r3,-16(fp)
    b780:	e0bff517 	ldw	r2,-44(fp)
    b784:	1885c83a 	sub	r2,r3,r2
    b788:	1085883a 	add	r2,r2,r2
    b78c:	1085883a 	add	r2,r2,r2
    b790:	1007883a 	mov	r3,r2
    b794:	e0bfff17 	ldw	r2,-4(fp)
    b798:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
    b79c:	0005883a 	mov	r2,zero
}
    b7a0:	e037883a 	mov	sp,fp
    b7a4:	df000017 	ldw	fp,0(sp)
    b7a8:	dec00104 	addi	sp,sp,4
    b7ac:	f800283a 	ret

0000b7b0 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
    b7b0:	defff504 	addi	sp,sp,-44
    b7b4:	dfc00a15 	stw	ra,40(sp)
    b7b8:	df000915 	stw	fp,36(sp)
    b7bc:	df000904 	addi	fp,sp,36
    b7c0:	2005883a 	mov	r2,r4
    b7c4:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    b7c8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
    b7cc:	e0bfff03 	ldbu	r2,-4(fp)
    b7d0:	10800518 	cmpnei	r2,r2,20
    b7d4:	1000021e 	bne	r2,zero,b7e0 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
    b7d8:	008011c4 	movi	r2,71
    b7dc:	00007406 	br	b9b0 <OSTaskSuspend+0x200>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    b7e0:	e0bfff03 	ldbu	r2,-4(fp)
    b7e4:	10800530 	cmpltui	r2,r2,20
    b7e8:	1000051e 	bne	r2,zero,b800 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
    b7ec:	e0bfff03 	ldbu	r2,-4(fp)
    b7f0:	10803fe0 	cmpeqi	r2,r2,255
    b7f4:	1000021e 	bne	r2,zero,b800 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
    b7f8:	00800a84 	movi	r2,42
    b7fc:	00006c06 	br	b9b0 <OSTaskSuspend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b800:	0005303a 	rdctl	r2,status
    b804:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b808:	e0fffe17 	ldw	r3,-8(fp)
    b80c:	00bfff84 	movi	r2,-2
    b810:	1884703a 	and	r2,r3,r2
    b814:	1001703a 	wrctl	status,r2
  
  return context;
    b818:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
    b81c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
    b820:	e0bfff03 	ldbu	r2,-4(fp)
    b824:	10803fd8 	cmpnei	r2,r2,255
    b828:	1000081e 	bne	r2,zero,b84c <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
    b82c:	00800074 	movhi	r2,1
    b830:	10879604 	addi	r2,r2,7768
    b834:	10800017 	ldw	r2,0(r2)
    b838:	10800c83 	ldbu	r2,50(r2)
    b83c:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
    b840:	00800044 	movi	r2,1
    b844:	e0bff705 	stb	r2,-36(fp)
    b848:	00000b06 	br	b878 <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
    b84c:	00800074 	movhi	r2,1
    b850:	10879604 	addi	r2,r2,7768
    b854:	10800017 	ldw	r2,0(r2)
    b858:	10800c83 	ldbu	r2,50(r2)
    b85c:	10c03fcc 	andi	r3,r2,255
    b860:	e0bfff03 	ldbu	r2,-4(fp)
    b864:	1880031e 	bne	r3,r2,b874 <OSTaskSuspend+0xc4>
        self = OS_TRUE;
    b868:	00800044 	movi	r2,1
    b86c:	e0bff705 	stb	r2,-36(fp)
    b870:	00000106 	br	b878 <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
    b874:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    b878:	e0ffff03 	ldbu	r3,-4(fp)
    b87c:	008000b4 	movhi	r2,2
    b880:	10a41d04 	addi	r2,r2,-28556
    b884:	18c7883a 	add	r3,r3,r3
    b888:	18c7883a 	add	r3,r3,r3
    b88c:	10c5883a 	add	r2,r2,r3
    b890:	10800017 	ldw	r2,0(r2)
    b894:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
    b898:	e0bffa17 	ldw	r2,-24(fp)
    b89c:	1000061e 	bne	r2,zero,b8b8 <OSTaskSuspend+0x108>
    b8a0:	e0bff817 	ldw	r2,-32(fp)
    b8a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b8a8:	e0bff917 	ldw	r2,-28(fp)
    b8ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
    b8b0:	00801204 	movi	r2,72
    b8b4:	00003e06 	br	b9b0 <OSTaskSuspend+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
    b8b8:	e0bffa17 	ldw	r2,-24(fp)
    b8bc:	10800058 	cmpnei	r2,r2,1
    b8c0:	1000061e 	bne	r2,zero,b8dc <OSTaskSuspend+0x12c>
    b8c4:	e0bff817 	ldw	r2,-32(fp)
    b8c8:	e0bffb15 	stw	r2,-20(fp)
    b8cc:	e0bffb17 	ldw	r2,-20(fp)
    b8d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    b8d4:	008010c4 	movi	r2,67
    b8d8:	00003506 	br	b9b0 <OSTaskSuspend+0x200>
    }
    y            = ptcb->OSTCBY;
    b8dc:	e0bffa17 	ldw	r2,-24(fp)
    b8e0:	10800d03 	ldbu	r2,52(r2)
    b8e4:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
    b8e8:	e0fffd03 	ldbu	r3,-12(fp)
    b8ec:	e13ffd03 	ldbu	r4,-12(fp)
    b8f0:	00800074 	movhi	r2,1
    b8f4:	10879344 	addi	r2,r2,7757
    b8f8:	1105883a 	add	r2,r2,r4
    b8fc:	10800003 	ldbu	r2,0(r2)
    b900:	1009883a 	mov	r4,r2
    b904:	e0bffa17 	ldw	r2,-24(fp)
    b908:	10800d43 	ldbu	r2,53(r2)
    b90c:	0084303a 	nor	r2,zero,r2
    b910:	2084703a 	and	r2,r4,r2
    b914:	1009883a 	mov	r4,r2
    b918:	00800074 	movhi	r2,1
    b91c:	10879344 	addi	r2,r2,7757
    b920:	10c5883a 	add	r2,r2,r3
    b924:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    b928:	e0fffd03 	ldbu	r3,-12(fp)
    b92c:	00800074 	movhi	r2,1
    b930:	10879344 	addi	r2,r2,7757
    b934:	10c5883a 	add	r2,r2,r3
    b938:	10800003 	ldbu	r2,0(r2)
    b93c:	10803fcc 	andi	r2,r2,255
    b940:	10000c1e 	bne	r2,zero,b974 <OSTaskSuspend+0x1c4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
    b944:	e0bffa17 	ldw	r2,-24(fp)
    b948:	10800d83 	ldbu	r2,54(r2)
    b94c:	0084303a 	nor	r2,zero,r2
    b950:	1007883a 	mov	r3,r2
    b954:	00800074 	movhi	r2,1
    b958:	10879304 	addi	r2,r2,7756
    b95c:	10800003 	ldbu	r2,0(r2)
    b960:	1884703a 	and	r2,r3,r2
    b964:	1007883a 	mov	r3,r2
    b968:	00800074 	movhi	r2,1
    b96c:	10879304 	addi	r2,r2,7756
    b970:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
    b974:	e0bffa17 	ldw	r2,-24(fp)
    b978:	10800c03 	ldbu	r2,48(r2)
    b97c:	10800214 	ori	r2,r2,8
    b980:	1007883a 	mov	r3,r2
    b984:	e0bffa17 	ldw	r2,-24(fp)
    b988:	10c00c05 	stb	r3,48(r2)
    b98c:	e0bff817 	ldw	r2,-32(fp)
    b990:	e0bffc15 	stw	r2,-16(fp)
    b994:	e0bffc17 	ldw	r2,-16(fp)
    b998:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
    b99c:	e0bff703 	ldbu	r2,-36(fp)
    b9a0:	10800058 	cmpnei	r2,r2,1
    b9a4:	1000011e 	bne	r2,zero,b9ac <OSTaskSuspend+0x1fc>
        OS_Sched();                                             /* Find new highest priority task      */
    b9a8:	0005bc00 	call	5bc0 <OS_Sched>
    }
    return (OS_ERR_NONE);
    b9ac:	0005883a 	mov	r2,zero
}
    b9b0:	e037883a 	mov	sp,fp
    b9b4:	dfc00117 	ldw	ra,4(sp)
    b9b8:	df000017 	ldw	fp,0(sp)
    b9bc:	dec00204 	addi	sp,sp,8
    b9c0:	f800283a 	ret

0000b9c4 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
    b9c4:	defff604 	addi	sp,sp,-40
    b9c8:	dfc00915 	stw	ra,36(sp)
    b9cc:	df000815 	stw	fp,32(sp)
    b9d0:	df000804 	addi	fp,sp,32
    b9d4:	2005883a 	mov	r2,r4
    b9d8:	e17fff15 	stw	r5,-4(fp)
    b9dc:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    b9e0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
    b9e4:	e0bffe03 	ldbu	r2,-8(fp)
    b9e8:	10800570 	cmpltui	r2,r2,21
    b9ec:	1000051e 	bne	r2,zero,ba04 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
    b9f0:	e0bffe03 	ldbu	r2,-8(fp)
    b9f4:	10803fe0 	cmpeqi	r2,r2,255
    b9f8:	1000021e 	bne	r2,zero,ba04 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
    b9fc:	00800a84 	movi	r2,42
    ba00:	00003606 	br	badc <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
    ba04:	e0bfff17 	ldw	r2,-4(fp)
    ba08:	1000021e 	bne	r2,zero,ba14 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
    ba0c:	00800244 	movi	r2,9
    ba10:	00003206 	br	badc <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ba14:	0005303a 	rdctl	r2,status
    ba18:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ba1c:	e0fffd17 	ldw	r3,-12(fp)
    ba20:	00bfff84 	movi	r2,-2
    ba24:	1884703a 	and	r2,r3,r2
    ba28:	1001703a 	wrctl	status,r2
  
  return context;
    ba2c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    ba30:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
    ba34:	e0bffe03 	ldbu	r2,-8(fp)
    ba38:	10803fd8 	cmpnei	r2,r2,255
    ba3c:	1000051e 	bne	r2,zero,ba54 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
    ba40:	00800074 	movhi	r2,1
    ba44:	10879604 	addi	r2,r2,7768
    ba48:	10800017 	ldw	r2,0(r2)
    ba4c:	10800c83 	ldbu	r2,50(r2)
    ba50:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    ba54:	e0fffe03 	ldbu	r3,-8(fp)
    ba58:	008000b4 	movhi	r2,2
    ba5c:	10a41d04 	addi	r2,r2,-28556
    ba60:	18c7883a 	add	r3,r3,r3
    ba64:	18c7883a 	add	r3,r3,r3
    ba68:	10c5883a 	add	r2,r2,r3
    ba6c:	10800017 	ldw	r2,0(r2)
    ba70:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
    ba74:	e0bffa17 	ldw	r2,-24(fp)
    ba78:	1000061e 	bne	r2,zero,ba94 <OSTaskQuery+0xd0>
    ba7c:	e0bff817 	ldw	r2,-32(fp)
    ba80:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ba84:	e0bff917 	ldw	r2,-28(fp)
    ba88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
    ba8c:	00800a44 	movi	r2,41
    ba90:	00001206 	br	badc <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
    ba94:	e0bffa17 	ldw	r2,-24(fp)
    ba98:	10800058 	cmpnei	r2,r2,1
    ba9c:	1000061e 	bne	r2,zero,bab8 <OSTaskQuery+0xf4>
    baa0:	e0bff817 	ldw	r2,-32(fp)
    baa4:	e0bffb15 	stw	r2,-20(fp)
    baa8:	e0bffb17 	ldw	r2,-20(fp)
    baac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    bab0:	008010c4 	movi	r2,67
    bab4:	00000906 	br	badc <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
    bab8:	01801b04 	movi	r6,108
    babc:	e17ffa17 	ldw	r5,-24(fp)
    bac0:	e13fff17 	ldw	r4,-4(fp)
    bac4:	0005b580 	call	5b58 <OS_MemCopy>
    bac8:	e0bff817 	ldw	r2,-32(fp)
    bacc:	e0bffc15 	stw	r2,-16(fp)
    bad0:	e0bffc17 	ldw	r2,-16(fp)
    bad4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    bad8:	0005883a 	mov	r2,zero
}
    badc:	e037883a 	mov	sp,fp
    bae0:	dfc00117 	ldw	ra,4(sp)
    bae4:	df000017 	ldw	fp,0(sp)
    bae8:	dec00204 	addi	sp,sp,8
    baec:	f800283a 	ret

0000baf0 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    baf0:	defffc04 	addi	sp,sp,-16
    baf4:	df000315 	stw	fp,12(sp)
    baf8:	df000304 	addi	fp,sp,12
    bafc:	e13ffd15 	stw	r4,-12(fp)
    bb00:	e17ffe15 	stw	r5,-8(fp)
    bb04:	3005883a 	mov	r2,r6
    bb08:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
    bb0c:	e0bfff0b 	ldhu	r2,-4(fp)
    bb10:	1080004c 	andi	r2,r2,1
    bb14:	10000d26 	beq	r2,zero,bb4c <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
    bb18:	e0bfff0b 	ldhu	r2,-4(fp)
    bb1c:	1080008c 	andi	r2,r2,2
    bb20:	10000a26 	beq	r2,zero,bb4c <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    bb24:	00000706 	br	bb44 <OS_TaskStkClr+0x54>
                size--;
    bb28:	e0bffe17 	ldw	r2,-8(fp)
    bb2c:	10bfffc4 	addi	r2,r2,-1
    bb30:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
    bb34:	e0bffd17 	ldw	r2,-12(fp)
    bb38:	10c00104 	addi	r3,r2,4
    bb3c:	e0fffd15 	stw	r3,-12(fp)
    bb40:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    bb44:	e0bffe17 	ldw	r2,-8(fp)
    bb48:	103ff71e 	bne	r2,zero,bb28 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
    bb4c:	0001883a 	nop
    bb50:	e037883a 	mov	sp,fp
    bb54:	df000017 	ldw	fp,0(sp)
    bb58:	dec00104 	addi	sp,sp,4
    bb5c:	f800283a 	ret

0000bb60 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
    bb60:	defff904 	addi	sp,sp,-28
    bb64:	dfc00615 	stw	ra,24(sp)
    bb68:	df000515 	stw	fp,20(sp)
    bb6c:	df000504 	addi	fp,sp,20
    bb70:	2005883a 	mov	r2,r4
    bb74:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    bb78:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    bb7c:	00800074 	movhi	r2,1
    bb80:	10879504 	addi	r2,r2,7764
    bb84:	10800003 	ldbu	r2,0(r2)
    bb88:	10803fcc 	andi	r2,r2,255
    bb8c:	1000411e 	bne	r2,zero,bc94 <OSTimeDly+0x134>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
    bb90:	e0bfff0b 	ldhu	r2,-4(fp)
    bb94:	10004026 	beq	r2,zero,bc98 <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bb98:	0005303a 	rdctl	r2,status
    bb9c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bba0:	e0fffe17 	ldw	r3,-8(fp)
    bba4:	00bfff84 	movi	r2,-2
    bba8:	1884703a 	and	r2,r3,r2
    bbac:	1001703a 	wrctl	status,r2
  
  return context;
    bbb0:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    bbb4:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
    bbb8:	00800074 	movhi	r2,1
    bbbc:	10879604 	addi	r2,r2,7768
    bbc0:	10800017 	ldw	r2,0(r2)
    bbc4:	10800d03 	ldbu	r2,52(r2)
    bbc8:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    bbcc:	e0fffd03 	ldbu	r3,-12(fp)
    bbd0:	e13ffd03 	ldbu	r4,-12(fp)
    bbd4:	00800074 	movhi	r2,1
    bbd8:	10879344 	addi	r2,r2,7757
    bbdc:	1105883a 	add	r2,r2,r4
    bbe0:	10800003 	ldbu	r2,0(r2)
    bbe4:	1009883a 	mov	r4,r2
    bbe8:	00800074 	movhi	r2,1
    bbec:	10879604 	addi	r2,r2,7768
    bbf0:	10800017 	ldw	r2,0(r2)
    bbf4:	10800d43 	ldbu	r2,53(r2)
    bbf8:	0084303a 	nor	r2,zero,r2
    bbfc:	2084703a 	and	r2,r4,r2
    bc00:	1009883a 	mov	r4,r2
    bc04:	00800074 	movhi	r2,1
    bc08:	10879344 	addi	r2,r2,7757
    bc0c:	10c5883a 	add	r2,r2,r3
    bc10:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
    bc14:	e0fffd03 	ldbu	r3,-12(fp)
    bc18:	00800074 	movhi	r2,1
    bc1c:	10879344 	addi	r2,r2,7757
    bc20:	10c5883a 	add	r2,r2,r3
    bc24:	10800003 	ldbu	r2,0(r2)
    bc28:	10803fcc 	andi	r2,r2,255
    bc2c:	10000e1e 	bne	r2,zero,bc68 <OSTimeDly+0x108>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    bc30:	00800074 	movhi	r2,1
    bc34:	10879604 	addi	r2,r2,7768
    bc38:	10800017 	ldw	r2,0(r2)
    bc3c:	10800d83 	ldbu	r2,54(r2)
    bc40:	0084303a 	nor	r2,zero,r2
    bc44:	1007883a 	mov	r3,r2
    bc48:	00800074 	movhi	r2,1
    bc4c:	10879304 	addi	r2,r2,7756
    bc50:	10800003 	ldbu	r2,0(r2)
    bc54:	1884703a 	and	r2,r3,r2
    bc58:	1007883a 	mov	r3,r2
    bc5c:	00800074 	movhi	r2,1
    bc60:	10879304 	addi	r2,r2,7756
    bc64:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
    bc68:	00800074 	movhi	r2,1
    bc6c:	10879604 	addi	r2,r2,7768
    bc70:	10800017 	ldw	r2,0(r2)
    bc74:	e0ffff0b 	ldhu	r3,-4(fp)
    bc78:	10c00b8d 	sth	r3,46(r2)
    bc7c:	e0bffb17 	ldw	r2,-20(fp)
    bc80:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bc84:	e0bffc17 	ldw	r2,-16(fp)
    bc88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    bc8c:	0005bc00 	call	5bc0 <OS_Sched>
    bc90:	00000106 	br	bc98 <OSTimeDly+0x138>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
    bc94:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
    bc98:	e037883a 	mov	sp,fp
    bc9c:	dfc00117 	ldw	ra,4(sp)
    bca0:	df000017 	ldw	fp,0(sp)
    bca4:	dec00204 	addi	sp,sp,8
    bca8:	f800283a 	ret

0000bcac <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
    bcac:	defff704 	addi	sp,sp,-36
    bcb0:	dfc00815 	stw	ra,32(sp)
    bcb4:	df000715 	stw	fp,28(sp)
    bcb8:	dc000615 	stw	r16,24(sp)
    bcbc:	df000704 	addi	fp,sp,28
    bcc0:	2011883a 	mov	r8,r4
    bcc4:	2809883a 	mov	r4,r5
    bcc8:	3007883a 	mov	r3,r6
    bccc:	3805883a 	mov	r2,r7
    bcd0:	e23ffb05 	stb	r8,-20(fp)
    bcd4:	e13ffc05 	stb	r4,-16(fp)
    bcd8:	e0fffd05 	stb	r3,-12(fp)
    bcdc:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    bce0:	00800074 	movhi	r2,1
    bce4:	10879504 	addi	r2,r2,7764
    bce8:	10800003 	ldbu	r2,0(r2)
    bcec:	10803fcc 	andi	r2,r2,255
    bcf0:	10000226 	beq	r2,zero,bcfc <OSTimeDlyHMSM+0x50>
        return (OS_ERR_TIME_DLY_ISR);
    bcf4:	00801544 	movi	r2,85
    bcf8:	00003d06 	br	bdf0 <OSTimeDlyHMSM+0x144>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
    bcfc:	e0bffb03 	ldbu	r2,-20(fp)
    bd00:	1000081e 	bne	r2,zero,bd24 <OSTimeDlyHMSM+0x78>
        if (minutes == 0) {
    bd04:	e0bffc03 	ldbu	r2,-16(fp)
    bd08:	1000061e 	bne	r2,zero,bd24 <OSTimeDlyHMSM+0x78>
            if (seconds == 0) {
    bd0c:	e0bffd03 	ldbu	r2,-12(fp)
    bd10:	1000041e 	bne	r2,zero,bd24 <OSTimeDlyHMSM+0x78>
                if (ms == 0) {
    bd14:	e0bffe0b 	ldhu	r2,-8(fp)
    bd18:	1000021e 	bne	r2,zero,bd24 <OSTimeDlyHMSM+0x78>
                    return (OS_ERR_TIME_ZERO_DLY);
    bd1c:	00801504 	movi	r2,84
    bd20:	00003306 	br	bdf0 <OSTimeDlyHMSM+0x144>
                }
            }
        }
    }
    if (minutes > 59) {
    bd24:	e0bffc03 	ldbu	r2,-16(fp)
    bd28:	10800f30 	cmpltui	r2,r2,60
    bd2c:	1000021e 	bne	r2,zero,bd38 <OSTimeDlyHMSM+0x8c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
    bd30:	00801444 	movi	r2,81
    bd34:	00002e06 	br	bdf0 <OSTimeDlyHMSM+0x144>
    }
    if (seconds > 59) {
    bd38:	e0bffd03 	ldbu	r2,-12(fp)
    bd3c:	10800f30 	cmpltui	r2,r2,60
    bd40:	1000021e 	bne	r2,zero,bd4c <OSTimeDlyHMSM+0xa0>
        return (OS_ERR_TIME_INVALID_SECONDS);
    bd44:	00801484 	movi	r2,82
    bd48:	00002906 	br	bdf0 <OSTimeDlyHMSM+0x144>
    }
    if (ms > 999) {
    bd4c:	e0bffe0b 	ldhu	r2,-8(fp)
    bd50:	1080fa30 	cmpltui	r2,r2,1000
    bd54:	1000021e 	bne	r2,zero,bd60 <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_MS);
    bd58:	008014c4 	movi	r2,83
    bd5c:	00002406 	br	bdf0 <OSTimeDlyHMSM+0x144>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    bd60:	e0bffb03 	ldbu	r2,-20(fp)
    bd64:	10c38424 	muli	r3,r2,3600
    bd68:	e0bffc03 	ldbu	r2,-16(fp)
    bd6c:	10800f24 	muli	r2,r2,60
    bd70:	1887883a 	add	r3,r3,r2
    bd74:	e0bffd03 	ldbu	r2,-12(fp)
    bd78:	1885883a 	add	r2,r3,r2
    bd7c:	1400fa24 	muli	r16,r2,1000
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    bd80:	e0bffe0b 	ldhu	r2,-8(fp)
    bd84:	1080fa24 	muli	r2,r2,1000
    bd88:	0140fa04 	movi	r5,1000
    bd8c:	1009883a 	mov	r4,r2
    bd90:	00030bc0 	call	30bc <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    bd94:	8085883a 	add	r2,r16,r2
    bd98:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    bd9c:	e0bffa17 	ldw	r2,-24(fp)
    bda0:	1004d43a 	srli	r2,r2,16
    bda4:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    bda8:	e0bffa17 	ldw	r2,-24(fp)
    bdac:	10bfffcc 	andi	r2,r2,65535
    bdb0:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
    bdb4:	e0bffa17 	ldw	r2,-24(fp)
    bdb8:	10bfffcc 	andi	r2,r2,65535
    bdbc:	1009883a 	mov	r4,r2
    bdc0:	000bb600 	call	bb60 <OSTimeDly>
    while (loops > 0) {
    bdc4:	00000706 	br	bde4 <OSTimeDlyHMSM+0x138>
        OSTimeDly((INT16U)32768u);
    bdc8:	01200014 	movui	r4,32768
    bdcc:	000bb600 	call	bb60 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
    bdd0:	01200014 	movui	r4,32768
    bdd4:	000bb600 	call	bb60 <OSTimeDly>
        loops--;
    bdd8:	e0bff90b 	ldhu	r2,-28(fp)
    bddc:	10bfffc4 	addi	r2,r2,-1
    bde0:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
    bde4:	e0bff90b 	ldhu	r2,-28(fp)
    bde8:	103ff71e 	bne	r2,zero,bdc8 <OSTimeDlyHMSM+0x11c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
    bdec:	0005883a 	mov	r2,zero
}
    bdf0:	e6ffff04 	addi	sp,fp,-4
    bdf4:	dfc00217 	ldw	ra,8(sp)
    bdf8:	df000117 	ldw	fp,4(sp)
    bdfc:	dc000017 	ldw	r16,0(sp)
    be00:	dec00304 	addi	sp,sp,12
    be04:	f800283a 	ret

0000be08 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
    be08:	defff504 	addi	sp,sp,-44
    be0c:	dfc00a15 	stw	ra,40(sp)
    be10:	df000915 	stw	fp,36(sp)
    be14:	df000904 	addi	fp,sp,36
    be18:	2005883a 	mov	r2,r4
    be1c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    be20:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
    be24:	e0bfff03 	ldbu	r2,-4(fp)
    be28:	10800530 	cmpltui	r2,r2,20
    be2c:	1000021e 	bne	r2,zero,be38 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    be30:	00800a84 	movi	r2,42
    be34:	00006b06 	br	bfe4 <OSTimeDlyResume+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    be38:	0005303a 	rdctl	r2,status
    be3c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    be40:	e0fffe17 	ldw	r3,-8(fp)
    be44:	00bfff84 	movi	r2,-2
    be48:	1884703a 	and	r2,r3,r2
    be4c:	1001703a 	wrctl	status,r2
  
  return context;
    be50:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    be54:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
    be58:	e0ffff03 	ldbu	r3,-4(fp)
    be5c:	008000b4 	movhi	r2,2
    be60:	10a41d04 	addi	r2,r2,-28556
    be64:	18c7883a 	add	r3,r3,r3
    be68:	18c7883a 	add	r3,r3,r3
    be6c:	10c5883a 	add	r2,r2,r3
    be70:	10800017 	ldw	r2,0(r2)
    be74:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
    be78:	e0bff917 	ldw	r2,-28(fp)
    be7c:	1000061e 	bne	r2,zero,be98 <OSTimeDlyResume+0x90>
    be80:	e0bff717 	ldw	r2,-36(fp)
    be84:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    be88:	e0bff817 	ldw	r2,-32(fp)
    be8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    be90:	008010c4 	movi	r2,67
    be94:	00005306 	br	bfe4 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb == OS_TCB_RESERVED) {
    be98:	e0bff917 	ldw	r2,-28(fp)
    be9c:	10800058 	cmpnei	r2,r2,1
    bea0:	1000061e 	bne	r2,zero,bebc <OSTimeDlyResume+0xb4>
    bea4:	e0bff717 	ldw	r2,-36(fp)
    bea8:	e0bffa15 	stw	r2,-24(fp)
    beac:	e0bffa17 	ldw	r2,-24(fp)
    beb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    beb4:	008010c4 	movi	r2,67
    beb8:	00004a06 	br	bfe4 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
    bebc:	e0bff917 	ldw	r2,-28(fp)
    bec0:	10800b8b 	ldhu	r2,46(r2)
    bec4:	10bfffcc 	andi	r2,r2,65535
    bec8:	1000061e 	bne	r2,zero,bee4 <OSTimeDlyResume+0xdc>
    becc:	e0bff717 	ldw	r2,-36(fp)
    bed0:	e0bffb15 	stw	r2,-20(fp)
    bed4:	e0bffb17 	ldw	r2,-20(fp)
    bed8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
    bedc:	00801404 	movi	r2,80
    bee0:	00004006 	br	bfe4 <OSTimeDlyResume+0x1dc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
    bee4:	e0bff917 	ldw	r2,-28(fp)
    bee8:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    beec:	e0bff917 	ldw	r2,-28(fp)
    bef0:	10800c03 	ldbu	r2,48(r2)
    bef4:	10803fcc 	andi	r2,r2,255
    bef8:	10800dcc 	andi	r2,r2,55
    befc:	10000b26 	beq	r2,zero,bf2c <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
    bf00:	e0bff917 	ldw	r2,-28(fp)
    bf04:	10c00c03 	ldbu	r3,48(r2)
    bf08:	00bff204 	movi	r2,-56
    bf0c:	1884703a 	and	r2,r3,r2
    bf10:	1007883a 	mov	r3,r2
    bf14:	e0bff917 	ldw	r2,-28(fp)
    bf18:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
    bf1c:	e0bff917 	ldw	r2,-28(fp)
    bf20:	00c00044 	movi	r3,1
    bf24:	10c00c45 	stb	r3,49(r2)
    bf28:	00000206 	br	bf34 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
    bf2c:	e0bff917 	ldw	r2,-28(fp)
    bf30:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
    bf34:	e0bff917 	ldw	r2,-28(fp)
    bf38:	10800c03 	ldbu	r2,48(r2)
    bf3c:	10803fcc 	andi	r2,r2,255
    bf40:	1080020c 	andi	r2,r2,8
    bf44:	1000221e 	bne	r2,zero,bfd0 <OSTimeDlyResume+0x1c8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
    bf48:	e0bff917 	ldw	r2,-28(fp)
    bf4c:	10c00d83 	ldbu	r3,54(r2)
    bf50:	00800074 	movhi	r2,1
    bf54:	10879304 	addi	r2,r2,7756
    bf58:	10800003 	ldbu	r2,0(r2)
    bf5c:	1884b03a 	or	r2,r3,r2
    bf60:	1007883a 	mov	r3,r2
    bf64:	00800074 	movhi	r2,1
    bf68:	10879304 	addi	r2,r2,7756
    bf6c:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    bf70:	e0bff917 	ldw	r2,-28(fp)
    bf74:	10800d03 	ldbu	r2,52(r2)
    bf78:	10c03fcc 	andi	r3,r2,255
    bf7c:	e0bff917 	ldw	r2,-28(fp)
    bf80:	10800d03 	ldbu	r2,52(r2)
    bf84:	11003fcc 	andi	r4,r2,255
    bf88:	00800074 	movhi	r2,1
    bf8c:	10879344 	addi	r2,r2,7757
    bf90:	1105883a 	add	r2,r2,r4
    bf94:	11000003 	ldbu	r4,0(r2)
    bf98:	e0bff917 	ldw	r2,-28(fp)
    bf9c:	10800d43 	ldbu	r2,53(r2)
    bfa0:	2084b03a 	or	r2,r4,r2
    bfa4:	1009883a 	mov	r4,r2
    bfa8:	00800074 	movhi	r2,1
    bfac:	10879344 	addi	r2,r2,7757
    bfb0:	10c5883a 	add	r2,r2,r3
    bfb4:	11000005 	stb	r4,0(r2)
    bfb8:	e0bff717 	ldw	r2,-36(fp)
    bfbc:	e0bffc15 	stw	r2,-16(fp)
    bfc0:	e0bffc17 	ldw	r2,-16(fp)
    bfc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
    bfc8:	0005bc00 	call	5bc0 <OS_Sched>
    bfcc:	00000406 	br	bfe0 <OSTimeDlyResume+0x1d8>
    bfd0:	e0bff717 	ldw	r2,-36(fp)
    bfd4:	e0bffd15 	stw	r2,-12(fp)
    bfd8:	e0bffd17 	ldw	r2,-12(fp)
    bfdc:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
    bfe0:	0005883a 	mov	r2,zero
}
    bfe4:	e037883a 	mov	sp,fp
    bfe8:	dfc00117 	ldw	ra,4(sp)
    bfec:	df000017 	ldw	fp,0(sp)
    bff0:	dec00204 	addi	sp,sp,8
    bff4:	f800283a 	ret

0000bff8 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
    bff8:	defffb04 	addi	sp,sp,-20
    bffc:	df000415 	stw	fp,16(sp)
    c000:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    c004:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c008:	0005303a 	rdctl	r2,status
    c00c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c010:	e0fffe17 	ldw	r3,-8(fp)
    c014:	00bfff84 	movi	r2,-2
    c018:	1884703a 	and	r2,r3,r2
    c01c:	1001703a 	wrctl	status,r2
  
  return context;
    c020:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    c024:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
    c028:	00800074 	movhi	r2,1
    c02c:	10879704 	addi	r2,r2,7772
    c030:	10800017 	ldw	r2,0(r2)
    c034:	e0bffd15 	stw	r2,-12(fp)
    c038:	e0bffc17 	ldw	r2,-16(fp)
    c03c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c040:	e0bfff17 	ldw	r2,-4(fp)
    c044:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
    c048:	e0bffd17 	ldw	r2,-12(fp)
}
    c04c:	e037883a 	mov	sp,fp
    c050:	df000017 	ldw	fp,0(sp)
    c054:	dec00104 	addi	sp,sp,4
    c058:	f800283a 	ret

0000c05c <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
    c05c:	defffb04 	addi	sp,sp,-20
    c060:	df000415 	stw	fp,16(sp)
    c064:	df000404 	addi	fp,sp,16
    c068:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    c06c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c070:	0005303a 	rdctl	r2,status
    c074:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c078:	e0fffd17 	ldw	r3,-12(fp)
    c07c:	00bfff84 	movi	r2,-2
    c080:	1884703a 	and	r2,r3,r2
    c084:	1001703a 	wrctl	status,r2
  
  return context;
    c088:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
    c08c:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
    c090:	00800074 	movhi	r2,1
    c094:	10879704 	addi	r2,r2,7772
    c098:	e0ffff17 	ldw	r3,-4(fp)
    c09c:	10c00015 	stw	r3,0(r2)
    c0a0:	e0bffc17 	ldw	r2,-16(fp)
    c0a4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c0a8:	e0bffe17 	ldw	r2,-8(fp)
    c0ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    c0b0:	0001883a 	nop
    c0b4:	e037883a 	mov	sp,fp
    c0b8:	df000017 	ldw	fp,0(sp)
    c0bc:	dec00104 	addi	sp,sp,4
    c0c0:	f800283a 	ret

0000c0c4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    c0c4:	defffd04 	addi	sp,sp,-12
    c0c8:	dfc00215 	stw	ra,8(sp)
    c0cc:	df000115 	stw	fp,4(sp)
    c0d0:	df000104 	addi	fp,sp,4
    c0d4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    c0d8:	01400074 	movhi	r5,1
    c0dc:	29409704 	addi	r5,r5,604
    c0e0:	e13fff17 	ldw	r4,-4(fp)
    c0e4:	000d1e80 	call	d1e8 <alt_dev_llist_insert>
}
    c0e8:	e037883a 	mov	sp,fp
    c0ec:	dfc00117 	ldw	ra,4(sp)
    c0f0:	df000017 	ldw	fp,0(sp)
    c0f4:	dec00204 	addi	sp,sp,8
    c0f8:	f800283a 	ret

0000c0fc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    c0fc:	defffd04 	addi	sp,sp,-12
    c100:	dfc00215 	stw	ra,8(sp)
    c104:	df000115 	stw	fp,4(sp)
    c108:	df000104 	addi	fp,sp,4
    c10c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOSII_CORE, niosII_core);
    c110:	000dba80 	call	dba8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    c114:	00800044 	movi	r2,1
    c118:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    c11c:	0001883a 	nop
    c120:	e037883a 	mov	sp,fp
    c124:	dfc00117 	ldw	ra,4(sp)
    c128:	df000017 	ldw	fp,0(sp)
    c12c:	dec00204 	addi	sp,sp,8
    c130:	f800283a 	ret

0000c134 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    c134:	defffe04 	addi	sp,sp,-8
    c138:	dfc00115 	stw	ra,4(sp)
    c13c:	df000015 	stw	fp,0(sp)
    c140:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_TIMER, Sys_Timer);
    c144:	01c0fa04 	movi	r7,1000
    c148:	01800044 	movi	r6,1
    c14c:	000b883a 	mov	r5,zero
    c150:	01010134 	movhi	r4,1028
    c154:	21060004 	addi	r4,r4,6144
    c158:	000cf840 	call	cf84 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, JTAG);
    c15c:	000d883a 	mov	r6,zero
    c160:	000b883a 	mov	r5,zero
    c164:	01000074 	movhi	r4,1
    c168:	213c8004 	addi	r4,r4,-3584
    c16c:	000c2fc0 	call	c2fc <altera_avalon_jtag_uart_init>
    c170:	01000074 	movhi	r4,1
    c174:	213c7604 	addi	r4,r4,-3624
    c178:	000c0c40 	call	c0c4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSTEMID, SystemID);
    c17c:	0001883a 	nop
}
    c180:	0001883a 	nop
    c184:	e037883a 	mov	sp,fp
    c188:	dfc00117 	ldw	ra,4(sp)
    c18c:	df000017 	ldw	fp,0(sp)
    c190:	dec00204 	addi	sp,sp,8
    c194:	f800283a 	ret

0000c198 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    c198:	defffa04 	addi	sp,sp,-24
    c19c:	dfc00515 	stw	ra,20(sp)
    c1a0:	df000415 	stw	fp,16(sp)
    c1a4:	df000404 	addi	fp,sp,16
    c1a8:	e13ffd15 	stw	r4,-12(fp)
    c1ac:	e17ffe15 	stw	r5,-8(fp)
    c1b0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    c1b4:	e0bffd17 	ldw	r2,-12(fp)
    c1b8:	10800017 	ldw	r2,0(r2)
    c1bc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    c1c0:	e0bffc17 	ldw	r2,-16(fp)
    c1c4:	10c00a04 	addi	r3,r2,40
    c1c8:	e0bffd17 	ldw	r2,-12(fp)
    c1cc:	10800217 	ldw	r2,8(r2)
    c1d0:	100f883a 	mov	r7,r2
    c1d4:	e1bfff17 	ldw	r6,-4(fp)
    c1d8:	e17ffe17 	ldw	r5,-8(fp)
    c1dc:	1809883a 	mov	r4,r3
    c1e0:	000c96c0 	call	c96c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    c1e4:	e037883a 	mov	sp,fp
    c1e8:	dfc00117 	ldw	ra,4(sp)
    c1ec:	df000017 	ldw	fp,0(sp)
    c1f0:	dec00204 	addi	sp,sp,8
    c1f4:	f800283a 	ret

0000c1f8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    c1f8:	defffa04 	addi	sp,sp,-24
    c1fc:	dfc00515 	stw	ra,20(sp)
    c200:	df000415 	stw	fp,16(sp)
    c204:	df000404 	addi	fp,sp,16
    c208:	e13ffd15 	stw	r4,-12(fp)
    c20c:	e17ffe15 	stw	r5,-8(fp)
    c210:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    c214:	e0bffd17 	ldw	r2,-12(fp)
    c218:	10800017 	ldw	r2,0(r2)
    c21c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    c220:	e0bffc17 	ldw	r2,-16(fp)
    c224:	10c00a04 	addi	r3,r2,40
    c228:	e0bffd17 	ldw	r2,-12(fp)
    c22c:	10800217 	ldw	r2,8(r2)
    c230:	100f883a 	mov	r7,r2
    c234:	e1bfff17 	ldw	r6,-4(fp)
    c238:	e17ffe17 	ldw	r5,-8(fp)
    c23c:	1809883a 	mov	r4,r3
    c240:	000cc380 	call	cc38 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    c244:	e037883a 	mov	sp,fp
    c248:	dfc00117 	ldw	ra,4(sp)
    c24c:	df000017 	ldw	fp,0(sp)
    c250:	dec00204 	addi	sp,sp,8
    c254:	f800283a 	ret

0000c258 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    c258:	defffc04 	addi	sp,sp,-16
    c25c:	dfc00315 	stw	ra,12(sp)
    c260:	df000215 	stw	fp,8(sp)
    c264:	df000204 	addi	fp,sp,8
    c268:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    c26c:	e0bfff17 	ldw	r2,-4(fp)
    c270:	10800017 	ldw	r2,0(r2)
    c274:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    c278:	e0bffe17 	ldw	r2,-8(fp)
    c27c:	10c00a04 	addi	r3,r2,40
    c280:	e0bfff17 	ldw	r2,-4(fp)
    c284:	10800217 	ldw	r2,8(r2)
    c288:	100b883a 	mov	r5,r2
    c28c:	1809883a 	mov	r4,r3
    c290:	000c8140 	call	c814 <altera_avalon_jtag_uart_close>
}
    c294:	e037883a 	mov	sp,fp
    c298:	dfc00117 	ldw	ra,4(sp)
    c29c:	df000017 	ldw	fp,0(sp)
    c2a0:	dec00204 	addi	sp,sp,8
    c2a4:	f800283a 	ret

0000c2a8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    c2a8:	defffa04 	addi	sp,sp,-24
    c2ac:	dfc00515 	stw	ra,20(sp)
    c2b0:	df000415 	stw	fp,16(sp)
    c2b4:	df000404 	addi	fp,sp,16
    c2b8:	e13ffd15 	stw	r4,-12(fp)
    c2bc:	e17ffe15 	stw	r5,-8(fp)
    c2c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    c2c4:	e0bffd17 	ldw	r2,-12(fp)
    c2c8:	10800017 	ldw	r2,0(r2)
    c2cc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    c2d0:	e0bffc17 	ldw	r2,-16(fp)
    c2d4:	10800a04 	addi	r2,r2,40
    c2d8:	e1bfff17 	ldw	r6,-4(fp)
    c2dc:	e17ffe17 	ldw	r5,-8(fp)
    c2e0:	1009883a 	mov	r4,r2
    c2e4:	000c87c0 	call	c87c <altera_avalon_jtag_uart_ioctl>
}
    c2e8:	e037883a 	mov	sp,fp
    c2ec:	dfc00117 	ldw	ra,4(sp)
    c2f0:	df000017 	ldw	fp,0(sp)
    c2f4:	dec00204 	addi	sp,sp,8
    c2f8:	f800283a 	ret

0000c2fc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    c2fc:	defff104 	addi	sp,sp,-60
    c300:	dfc00e15 	stw	ra,56(sp)
    c304:	df000d15 	stw	fp,52(sp)
    c308:	df000d04 	addi	fp,sp,52
    c30c:	e13ff915 	stw	r4,-28(fp)
    c310:	e17ffa15 	stw	r5,-24(fp)
    c314:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
    c318:	e0bff917 	ldw	r2,-28(fp)
    c31c:	10800c04 	addi	r2,r2,48
    c320:	e0bff415 	stw	r2,-48(fp)
    c324:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
    c328:	e0bff80b 	ldhu	r2,-32(fp)
    c32c:	e0fff884 	addi	r3,fp,-30
    c330:	180b883a 	mov	r5,r3
    c334:	1009883a 	mov	r4,r2
    c338:	000685c0 	call	685c <OSFlagCreate>
    c33c:	1007883a 	mov	r3,r2
    c340:	e0bff417 	ldw	r2,-48(fp)
    c344:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
    c348:	e0bff917 	ldw	r2,-28(fp)
    c34c:	10800a04 	addi	r2,r2,40
    c350:	e0bff515 	stw	r2,-44(fp)
    c354:	00800044 	movi	r2,1
    c358:	e0bff78d 	sth	r2,-34(fp)
    c35c:	e0bff78b 	ldhu	r2,-34(fp)
    c360:	1009883a 	mov	r4,r2
    c364:	00097fc0 	call	97fc <OSSemCreate>
    c368:	1007883a 	mov	r3,r2
    c36c:	e0bff517 	ldw	r2,-44(fp)
    c370:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
    c374:	e0bff917 	ldw	r2,-28(fp)
    c378:	10800b04 	addi	r2,r2,44
    c37c:	e0bff615 	stw	r2,-40(fp)
    c380:	00800044 	movi	r2,1
    c384:	e0bff70d 	sth	r2,-36(fp)
    c388:	e0bff70b 	ldhu	r2,-36(fp)
    c38c:	1009883a 	mov	r4,r2
    c390:	00097fc0 	call	97fc <OSSemCreate>
    c394:	1007883a 	mov	r3,r2
    c398:	e0bff617 	ldw	r2,-40(fp)
    c39c:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c3a0:	e0bff917 	ldw	r2,-28(fp)
    c3a4:	00c00044 	movi	r3,1
    c3a8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    c3ac:	e0bff917 	ldw	r2,-28(fp)
    c3b0:	10800017 	ldw	r2,0(r2)
    c3b4:	10800104 	addi	r2,r2,4
    c3b8:	1007883a 	mov	r3,r2
    c3bc:	e0bff917 	ldw	r2,-28(fp)
    c3c0:	10800817 	ldw	r2,32(r2)
    c3c4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    c3c8:	e0bffa17 	ldw	r2,-24(fp)
    c3cc:	e0fffb17 	ldw	r3,-20(fp)
    c3d0:	d8000015 	stw	zero,0(sp)
    c3d4:	e1fff917 	ldw	r7,-28(fp)
    c3d8:	01800074 	movhi	r6,1
    c3dc:	31b11304 	addi	r6,r6,-15284
    c3e0:	180b883a 	mov	r5,r3
    c3e4:	1009883a 	mov	r4,r2
    c3e8:	000d3800 	call	d380 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    c3ec:	e0bff917 	ldw	r2,-28(fp)
    c3f0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    c3f4:	e0bff917 	ldw	r2,-28(fp)
    c3f8:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    c3fc:	00800074 	movhi	r2,1
    c400:	10879c04 	addi	r2,r2,7792
    c404:	10800017 	ldw	r2,0(r2)
    c408:	e1fff917 	ldw	r7,-28(fp)
    c40c:	01800074 	movhi	r6,1
    c410:	31b1c004 	addi	r6,r6,-14592
    c414:	100b883a 	mov	r5,r2
    c418:	1809883a 	mov	r4,r3
    c41c:	000d0100 	call	d010 <alt_alarm_start>
    c420:	1000040e 	bge	r2,zero,c434 <altera_avalon_jtag_uart_init+0x138>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    c424:	e0fff917 	ldw	r3,-28(fp)
    c428:	00a00034 	movhi	r2,32768
    c42c:	10bfffc4 	addi	r2,r2,-1
    c430:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    c434:	0001883a 	nop
    c438:	e037883a 	mov	sp,fp
    c43c:	dfc00117 	ldw	ra,4(sp)
    c440:	df000017 	ldw	fp,0(sp)
    c444:	dec00204 	addi	sp,sp,8
    c448:	f800283a 	ret

0000c44c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    c44c:	defff204 	addi	sp,sp,-56
    c450:	dfc00d15 	stw	ra,52(sp)
    c454:	df000c15 	stw	fp,48(sp)
    c458:	df000c04 	addi	fp,sp,48
    c45c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    c460:	e0bfff17 	ldw	r2,-4(fp)
    c464:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
    c468:	e0bff617 	ldw	r2,-40(fp)
    c46c:	10800017 	ldw	r2,0(r2)
    c470:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c474:	e0bff717 	ldw	r2,-36(fp)
    c478:	10800104 	addi	r2,r2,4
    c47c:	10800037 	ldwio	r2,0(r2)
    c480:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    c484:	e0bff817 	ldw	r2,-32(fp)
    c488:	1080c00c 	andi	r2,r2,768
    c48c:	10009526 	beq	r2,zero,c6e4 <altera_avalon_jtag_uart_irq+0x298>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    c490:	e0bff817 	ldw	r2,-32(fp)
    c494:	1080400c 	andi	r2,r2,256
    c498:	10004926 	beq	r2,zero,c5c0 <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    c49c:	00800074 	movhi	r2,1
    c4a0:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c4a4:	e0bff617 	ldw	r2,-40(fp)
    c4a8:	10800d17 	ldw	r2,52(r2)
    c4ac:	10800044 	addi	r2,r2,1
    c4b0:	1081ffcc 	andi	r2,r2,2047
    c4b4:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
    c4b8:	e0bff617 	ldw	r2,-40(fp)
    c4bc:	10c00e17 	ldw	r3,56(r2)
    c4c0:	e0bff917 	ldw	r2,-28(fp)
    c4c4:	18802926 	beq	r3,r2,c56c <altera_avalon_jtag_uart_irq+0x120>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    c4c8:	e0bff717 	ldw	r2,-36(fp)
    c4cc:	10800037 	ldwio	r2,0(r2)
    c4d0:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    c4d4:	e0bff417 	ldw	r2,-48(fp)
    c4d8:	10a0000c 	andi	r2,r2,32768
    c4dc:	10002526 	beq	r2,zero,c574 <altera_avalon_jtag_uart_irq+0x128>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    c4e0:	e0bff617 	ldw	r2,-40(fp)
    c4e4:	10800d17 	ldw	r2,52(r2)
    c4e8:	e0fff417 	ldw	r3,-48(fp)
    c4ec:	1809883a 	mov	r4,r3
    c4f0:	e0fff617 	ldw	r3,-40(fp)
    c4f4:	1885883a 	add	r2,r3,r2
    c4f8:	10801104 	addi	r2,r2,68
    c4fc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c500:	e0bff617 	ldw	r2,-40(fp)
    c504:	10800d17 	ldw	r2,52(r2)
    c508:	10800044 	addi	r2,r2,1
    c50c:	10c1ffcc 	andi	r3,r2,2047
    c510:	e0bff617 	ldw	r2,-40(fp)
    c514:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
    c518:	e0bff617 	ldw	r2,-40(fp)
    c51c:	10800c17 	ldw	r2,48(r2)
    c520:	e0bffb15 	stw	r2,-20(fp)
    c524:	00800044 	movi	r2,1
    c528:	e0bffc0d 	sth	r2,-16(fp)
    c52c:	00800044 	movi	r2,1
    c530:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    c534:	00800074 	movhi	r2,1
    c538:	10878744 	addi	r2,r2,7709
    c53c:	10800003 	ldbu	r2,0(r2)
    c540:	10803fcc 	andi	r2,r2,255
    c544:	103fd726 	beq	r2,zero,c4a4 <altera_avalon_jtag_uart_irq+0x58>
  {
    OSFlagPost (group, flags, opt, &err);
    c548:	e0bffc0b 	ldhu	r2,-16(fp)
    c54c:	e0fffc83 	ldbu	r3,-14(fp)
    c550:	e13ffdc4 	addi	r4,fp,-9
    c554:	200f883a 	mov	r7,r4
    c558:	180d883a 	mov	r6,r3
    c55c:	100b883a 	mov	r5,r2
    c560:	e13ffb17 	ldw	r4,-20(fp)
    c564:	00074f00 	call	74f0 <OSFlagPost>
      }
    c568:	003fce06 	br	c4a4 <altera_avalon_jtag_uart_irq+0x58>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    c56c:	0001883a 	nop
    c570:	00000106 	br	c578 <altera_avalon_jtag_uart_irq+0x12c>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    c574:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    c578:	e0bff417 	ldw	r2,-48(fp)
    c57c:	10bfffec 	andhi	r2,r2,65535
    c580:	10000f26 	beq	r2,zero,c5c0 <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c584:	e0bff617 	ldw	r2,-40(fp)
    c588:	10c00817 	ldw	r3,32(r2)
    c58c:	00bfff84 	movi	r2,-2
    c590:	1886703a 	and	r3,r3,r2
    c594:	e0bff617 	ldw	r2,-40(fp)
    c598:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    c59c:	e0bff717 	ldw	r2,-36(fp)
    c5a0:	10800104 	addi	r2,r2,4
    c5a4:	1007883a 	mov	r3,r2
    c5a8:	e0bff617 	ldw	r2,-40(fp)
    c5ac:	10800817 	ldw	r2,32(r2)
    c5b0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c5b4:	e0bff717 	ldw	r2,-36(fp)
    c5b8:	10800104 	addi	r2,r2,4
    c5bc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    c5c0:	e0bff817 	ldw	r2,-32(fp)
    c5c4:	1080800c 	andi	r2,r2,512
    c5c8:	103faa26 	beq	r2,zero,c474 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    c5cc:	e0bff817 	ldw	r2,-32(fp)
    c5d0:	1004d43a 	srli	r2,r2,16
    c5d4:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    c5d8:	00002806 	br	c67c <altera_avalon_jtag_uart_irq+0x230>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    c5dc:	e0bff717 	ldw	r2,-36(fp)
    c5e0:	e0fff617 	ldw	r3,-40(fp)
    c5e4:	18c01017 	ldw	r3,64(r3)
    c5e8:	e13ff617 	ldw	r4,-40(fp)
    c5ec:	20c7883a 	add	r3,r4,r3
    c5f0:	18c21104 	addi	r3,r3,2116
    c5f4:	18c00003 	ldbu	r3,0(r3)
    c5f8:	18c03fcc 	andi	r3,r3,255
    c5fc:	18c0201c 	xori	r3,r3,128
    c600:	18ffe004 	addi	r3,r3,-128
    c604:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c608:	e0bff617 	ldw	r2,-40(fp)
    c60c:	10801017 	ldw	r2,64(r2)
    c610:	10800044 	addi	r2,r2,1
    c614:	10c1ffcc 	andi	r3,r2,2047
    c618:	e0bff617 	ldw	r2,-40(fp)
    c61c:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
    c620:	e0bff617 	ldw	r2,-40(fp)
    c624:	10800c17 	ldw	r2,48(r2)
    c628:	e0bffa15 	stw	r2,-24(fp)
    c62c:	00800084 	movi	r2,2
    c630:	e0bffd0d 	sth	r2,-12(fp)
    c634:	00800044 	movi	r2,1
    c638:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    c63c:	00800074 	movhi	r2,1
    c640:	10878744 	addi	r2,r2,7709
    c644:	10800003 	ldbu	r2,0(r2)
    c648:	10803fcc 	andi	r2,r2,255
    c64c:	10000826 	beq	r2,zero,c670 <altera_avalon_jtag_uart_irq+0x224>
  {
    OSFlagPost (group, flags, opt, &err);
    c650:	e0bffd0b 	ldhu	r2,-12(fp)
    c654:	e0fffd83 	ldbu	r3,-10(fp)
    c658:	e13ffe04 	addi	r4,fp,-8
    c65c:	200f883a 	mov	r7,r4
    c660:	180d883a 	mov	r6,r3
    c664:	100b883a 	mov	r5,r2
    c668:	e13ffa17 	ldw	r4,-24(fp)
    c66c:	00074f00 	call	74f0 <OSFlagPost>

        space--;
    c670:	e0bff517 	ldw	r2,-44(fp)
    c674:	10bfffc4 	addi	r2,r2,-1
    c678:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    c67c:	e0bff517 	ldw	r2,-44(fp)
    c680:	10000526 	beq	r2,zero,c698 <altera_avalon_jtag_uart_irq+0x24c>
    c684:	e0bff617 	ldw	r2,-40(fp)
    c688:	10c01017 	ldw	r3,64(r2)
    c68c:	e0bff617 	ldw	r2,-40(fp)
    c690:	10800f17 	ldw	r2,60(r2)
    c694:	18bfd11e 	bne	r3,r2,c5dc <altera_avalon_jtag_uart_irq+0x190>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    c698:	e0bff517 	ldw	r2,-44(fp)
    c69c:	103f7526 	beq	r2,zero,c474 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c6a0:	e0bff617 	ldw	r2,-40(fp)
    c6a4:	10c00817 	ldw	r3,32(r2)
    c6a8:	00bfff44 	movi	r2,-3
    c6ac:	1886703a 	and	r3,r3,r2
    c6b0:	e0bff617 	ldw	r2,-40(fp)
    c6b4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c6b8:	e0bff617 	ldw	r2,-40(fp)
    c6bc:	10800017 	ldw	r2,0(r2)
    c6c0:	10800104 	addi	r2,r2,4
    c6c4:	1007883a 	mov	r3,r2
    c6c8:	e0bff617 	ldw	r2,-40(fp)
    c6cc:	10800817 	ldw	r2,32(r2)
    c6d0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c6d4:	e0bff717 	ldw	r2,-36(fp)
    c6d8:	10800104 	addi	r2,r2,4
    c6dc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    c6e0:	003f6406 	br	c474 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    c6e4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    c6e8:	0001883a 	nop
    c6ec:	e037883a 	mov	sp,fp
    c6f0:	dfc00117 	ldw	ra,4(sp)
    c6f4:	df000017 	ldw	fp,0(sp)
    c6f8:	dec00204 	addi	sp,sp,8
    c6fc:	f800283a 	ret

0000c700 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    c700:	defff904 	addi	sp,sp,-28
    c704:	dfc00615 	stw	ra,24(sp)
    c708:	df000515 	stw	fp,20(sp)
    c70c:	df000504 	addi	fp,sp,20
    c710:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    c714:	e0bfff17 	ldw	r2,-4(fp)
    c718:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    c71c:	e0bffb17 	ldw	r2,-20(fp)
    c720:	10800017 	ldw	r2,0(r2)
    c724:	10800104 	addi	r2,r2,4
    c728:	10800037 	ldwio	r2,0(r2)
    c72c:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    c730:	e0bffc17 	ldw	r2,-16(fp)
    c734:	1081000c 	andi	r2,r2,1024
    c738:	10000b26 	beq	r2,zero,c768 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    c73c:	e0bffb17 	ldw	r2,-20(fp)
    c740:	10800017 	ldw	r2,0(r2)
    c744:	10800104 	addi	r2,r2,4
    c748:	1007883a 	mov	r3,r2
    c74c:	e0bffb17 	ldw	r2,-20(fp)
    c750:	10800817 	ldw	r2,32(r2)
    c754:	10810014 	ori	r2,r2,1024
    c758:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    c75c:	e0bffb17 	ldw	r2,-20(fp)
    c760:	10000915 	stw	zero,36(r2)
    c764:	00002306 	br	c7f4 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    c768:	e0bffb17 	ldw	r2,-20(fp)
    c76c:	10c00917 	ldw	r3,36(r2)
    c770:	00a00034 	movhi	r2,32768
    c774:	10bfff04 	addi	r2,r2,-4
    c778:	10c01e36 	bltu	r2,r3,c7f4 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
    c77c:	e0bffb17 	ldw	r2,-20(fp)
    c780:	10800917 	ldw	r2,36(r2)
    c784:	10c00044 	addi	r3,r2,1
    c788:	e0bffb17 	ldw	r2,-20(fp)
    c78c:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
    c790:	e0bffb17 	ldw	r2,-20(fp)
    c794:	10c00917 	ldw	r3,36(r2)
    c798:	e0bffb17 	ldw	r2,-20(fp)
    c79c:	10800117 	ldw	r2,4(r2)
    c7a0:	18801436 	bltu	r3,r2,c7f4 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    c7a4:	e0bffb17 	ldw	r2,-20(fp)
    c7a8:	10800c17 	ldw	r2,48(r2)
    c7ac:	e0bffd15 	stw	r2,-12(fp)
    c7b0:	00800104 	movi	r2,4
    c7b4:	e0bffe0d 	sth	r2,-8(fp)
    c7b8:	00800044 	movi	r2,1
    c7bc:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    c7c0:	00800074 	movhi	r2,1
    c7c4:	10878744 	addi	r2,r2,7709
    c7c8:	10800003 	ldbu	r2,0(r2)
    c7cc:	10803fcc 	andi	r2,r2,255
    c7d0:	10000826 	beq	r2,zero,c7f4 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
    c7d4:	e0bffe0b 	ldhu	r2,-8(fp)
    c7d8:	e0fffe83 	ldbu	r3,-6(fp)
    c7dc:	e13ffec4 	addi	r4,fp,-5
    c7e0:	200f883a 	mov	r7,r4
    c7e4:	180d883a 	mov	r6,r3
    c7e8:	100b883a 	mov	r5,r2
    c7ec:	e13ffd17 	ldw	r4,-12(fp)
    c7f0:	00074f00 	call	74f0 <OSFlagPost>
    c7f4:	00800074 	movhi	r2,1
    c7f8:	10879c04 	addi	r2,r2,7792
    c7fc:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
    c800:	e037883a 	mov	sp,fp
    c804:	dfc00117 	ldw	ra,4(sp)
    c808:	df000017 	ldw	fp,0(sp)
    c80c:	dec00204 	addi	sp,sp,8
    c810:	f800283a 	ret

0000c814 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    c814:	defffd04 	addi	sp,sp,-12
    c818:	df000215 	stw	fp,8(sp)
    c81c:	df000204 	addi	fp,sp,8
    c820:	e13ffe15 	stw	r4,-8(fp)
    c824:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    c828:	00000506 	br	c840 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    c82c:	e0bfff17 	ldw	r2,-4(fp)
    c830:	1090000c 	andi	r2,r2,16384
    c834:	10000226 	beq	r2,zero,c840 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    c838:	00bffd44 	movi	r2,-11
    c83c:	00000b06 	br	c86c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    c840:	e0bffe17 	ldw	r2,-8(fp)
    c844:	10c01017 	ldw	r3,64(r2)
    c848:	e0bffe17 	ldw	r2,-8(fp)
    c84c:	10800f17 	ldw	r2,60(r2)
    c850:	18800526 	beq	r3,r2,c868 <altera_avalon_jtag_uart_close+0x54>
    c854:	e0bffe17 	ldw	r2,-8(fp)
    c858:	10c00917 	ldw	r3,36(r2)
    c85c:	e0bffe17 	ldw	r2,-8(fp)
    c860:	10800117 	ldw	r2,4(r2)
    c864:	18bff136 	bltu	r3,r2,c82c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    c868:	0005883a 	mov	r2,zero
}
    c86c:	e037883a 	mov	sp,fp
    c870:	df000017 	ldw	fp,0(sp)
    c874:	dec00104 	addi	sp,sp,4
    c878:	f800283a 	ret

0000c87c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    c87c:	defffa04 	addi	sp,sp,-24
    c880:	df000515 	stw	fp,20(sp)
    c884:	df000504 	addi	fp,sp,20
    c888:	e13ffd15 	stw	r4,-12(fp)
    c88c:	e17ffe15 	stw	r5,-8(fp)
    c890:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    c894:	00bff9c4 	movi	r2,-25
    c898:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    c89c:	e0bffe17 	ldw	r2,-8(fp)
    c8a0:	10da8060 	cmpeqi	r3,r2,27137
    c8a4:	1800031e 	bne	r3,zero,c8b4 <altera_avalon_jtag_uart_ioctl+0x38>
    c8a8:	109a80a0 	cmpeqi	r2,r2,27138
    c8ac:	1000181e 	bne	r2,zero,c910 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    c8b0:	00002906 	br	c958 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    c8b4:	e0bffd17 	ldw	r2,-12(fp)
    c8b8:	10c00117 	ldw	r3,4(r2)
    c8bc:	00a00034 	movhi	r2,32768
    c8c0:	10bfffc4 	addi	r2,r2,-1
    c8c4:	18802126 	beq	r3,r2,c94c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    c8c8:	e0bfff17 	ldw	r2,-4(fp)
    c8cc:	10800017 	ldw	r2,0(r2)
    c8d0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    c8d4:	e0bffc17 	ldw	r2,-16(fp)
    c8d8:	10800090 	cmplti	r2,r2,2
    c8dc:	1000061e 	bne	r2,zero,c8f8 <altera_avalon_jtag_uart_ioctl+0x7c>
    c8e0:	e0fffc17 	ldw	r3,-16(fp)
    c8e4:	00a00034 	movhi	r2,32768
    c8e8:	10bfffc4 	addi	r2,r2,-1
    c8ec:	18800226 	beq	r3,r2,c8f8 <altera_avalon_jtag_uart_ioctl+0x7c>
    c8f0:	e0bffc17 	ldw	r2,-16(fp)
    c8f4:	00000206 	br	c900 <altera_avalon_jtag_uart_ioctl+0x84>
    c8f8:	00a00034 	movhi	r2,32768
    c8fc:	10bfff84 	addi	r2,r2,-2
    c900:	e0fffd17 	ldw	r3,-12(fp)
    c904:	18800115 	stw	r2,4(r3)
      rc = 0;
    c908:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    c90c:	00000f06 	br	c94c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    c910:	e0bffd17 	ldw	r2,-12(fp)
    c914:	10c00117 	ldw	r3,4(r2)
    c918:	00a00034 	movhi	r2,32768
    c91c:	10bfffc4 	addi	r2,r2,-1
    c920:	18800c26 	beq	r3,r2,c954 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    c924:	e0bffd17 	ldw	r2,-12(fp)
    c928:	10c00917 	ldw	r3,36(r2)
    c92c:	e0bffd17 	ldw	r2,-12(fp)
    c930:	10800117 	ldw	r2,4(r2)
    c934:	1885803a 	cmpltu	r2,r3,r2
    c938:	10c03fcc 	andi	r3,r2,255
    c93c:	e0bfff17 	ldw	r2,-4(fp)
    c940:	10c00015 	stw	r3,0(r2)
      rc = 0;
    c944:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    c948:	00000206 	br	c954 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    c94c:	0001883a 	nop
    c950:	00000106 	br	c958 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    c954:	0001883a 	nop

  default:
    break;
  }

  return rc;
    c958:	e0bffb17 	ldw	r2,-20(fp)
}
    c95c:	e037883a 	mov	sp,fp
    c960:	df000017 	ldw	fp,0(sp)
    c964:	dec00104 	addi	sp,sp,4
    c968:	f800283a 	ret

0000c96c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    c96c:	deffed04 	addi	sp,sp,-76
    c970:	dfc01215 	stw	ra,72(sp)
    c974:	df001115 	stw	fp,68(sp)
    c978:	df001104 	addi	fp,sp,68
    c97c:	e13ffc15 	stw	r4,-16(fp)
    c980:	e17ffd15 	stw	r5,-12(fp)
    c984:	e1bffe15 	stw	r6,-8(fp)
    c988:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    c98c:	e0bffd17 	ldw	r2,-12(fp)
    c990:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
    c994:	e0bffc17 	ldw	r2,-16(fp)
    c998:	10800a17 	ldw	r2,40(r2)
    c99c:	e0bff815 	stw	r2,-32(fp)
    c9a0:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
    c9a4:	e0bff90b 	ldhu	r2,-28(fp)
    c9a8:	e0fffb04 	addi	r3,fp,-20
    c9ac:	180d883a 	mov	r6,r3
    c9b0:	100b883a 	mov	r5,r2
    c9b4:	e13ff817 	ldw	r4,-32(fp)
    c9b8:	0009b640 	call	9b64 <OSSemPend>

  while (space > 0)
    c9bc:	00006506 	br	cb54 <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    c9c0:	e0bffc17 	ldw	r2,-16(fp)
    c9c4:	10800d17 	ldw	r2,52(r2)
    c9c8:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
    c9cc:	e0bffc17 	ldw	r2,-16(fp)
    c9d0:	10800e17 	ldw	r2,56(r2)
    c9d4:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
    c9d8:	e0fff317 	ldw	r3,-52(fp)
    c9dc:	e0bff417 	ldw	r2,-48(fp)
    c9e0:	18800536 	bltu	r3,r2,c9f8 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
    c9e4:	e0fff317 	ldw	r3,-52(fp)
    c9e8:	e0bff417 	ldw	r2,-48(fp)
    c9ec:	1885c83a 	sub	r2,r3,r2
    c9f0:	e0bff115 	stw	r2,-60(fp)
    c9f4:	00000406 	br	ca08 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    c9f8:	00c20004 	movi	r3,2048
    c9fc:	e0bff417 	ldw	r2,-48(fp)
    ca00:	1885c83a 	sub	r2,r3,r2
    ca04:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
    ca08:	e0bff117 	ldw	r2,-60(fp)
    ca0c:	10001e26 	beq	r2,zero,ca88 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
    ca10:	e0fffe17 	ldw	r3,-8(fp)
    ca14:	e0bff117 	ldw	r2,-60(fp)
    ca18:	1880022e 	bgeu	r3,r2,ca24 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
    ca1c:	e0bffe17 	ldw	r2,-8(fp)
    ca20:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    ca24:	e0bffc17 	ldw	r2,-16(fp)
    ca28:	10c01104 	addi	r3,r2,68
    ca2c:	e0bff417 	ldw	r2,-48(fp)
    ca30:	1885883a 	add	r2,r3,r2
    ca34:	e1bff117 	ldw	r6,-60(fp)
    ca38:	100b883a 	mov	r5,r2
    ca3c:	e13ff017 	ldw	r4,-64(fp)
    ca40:	00017f00 	call	17f0 <memcpy>
      ptr   += n;
    ca44:	e0fff017 	ldw	r3,-64(fp)
    ca48:	e0bff117 	ldw	r2,-60(fp)
    ca4c:	1885883a 	add	r2,r3,r2
    ca50:	e0bff015 	stw	r2,-64(fp)
      space -= n;
    ca54:	e0fffe17 	ldw	r3,-8(fp)
    ca58:	e0bff117 	ldw	r2,-60(fp)
    ca5c:	1885c83a 	sub	r2,r3,r2
    ca60:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ca64:	e0fff417 	ldw	r3,-48(fp)
    ca68:	e0bff117 	ldw	r2,-60(fp)
    ca6c:	1885883a 	add	r2,r3,r2
    ca70:	10c1ffcc 	andi	r3,r2,2047
    ca74:	e0bffc17 	ldw	r2,-16(fp)
    ca78:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
    ca7c:	e0bffe17 	ldw	r2,-8(fp)
    ca80:	00bfcf16 	blt	zero,r2,c9c0 <altera_avalon_jtag_uart_read+0x54>
    ca84:	00000106 	br	ca8c <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    ca88:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    ca8c:	e0fff017 	ldw	r3,-64(fp)
    ca90:	e0bffd17 	ldw	r2,-12(fp)
    ca94:	1880321e 	bne	r3,r2,cb60 <altera_avalon_jtag_uart_read+0x1f4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    ca98:	e0bfff17 	ldw	r2,-4(fp)
    ca9c:	1090000c 	andi	r2,r2,16384
    caa0:	1000311e 	bne	r2,zero,cb68 <altera_avalon_jtag_uart_read+0x1fc>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
    caa4:	00800074 	movhi	r2,1
    caa8:	10878744 	addi	r2,r2,7709
    caac:	10800003 	ldbu	r2,0(r2)
    cab0:	10803fcc 	andi	r2,r2,255
    cab4:	10800058 	cmpnei	r2,r2,1
    cab8:	1000181e 	bne	r2,zero,cb1c <altera_avalon_jtag_uart_read+0x1b0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
    cabc:	e0bffc17 	ldw	r2,-16(fp)
    cac0:	10800c17 	ldw	r2,48(r2)
    cac4:	e0bff215 	stw	r2,-56(fp)
    cac8:	00800144 	movi	r2,5
    cacc:	e0bff98d 	sth	r2,-26(fp)
    cad0:	00bfe0c4 	movi	r2,-125
    cad4:	e0bffa05 	stb	r2,-24(fp)
    cad8:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    cadc:	00800074 	movhi	r2,1
    cae0:	10878744 	addi	r2,r2,7709
    cae4:	10800003 	ldbu	r2,0(r2)
    cae8:	10803fcc 	andi	r2,r2,255
    caec:	10001526 	beq	r2,zero,cb44 <altera_avalon_jtag_uart_read+0x1d8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    caf0:	e0fff98b 	ldhu	r3,-26(fp)
    caf4:	e13ffa03 	ldbu	r4,-24(fp)
    caf8:	e17ffa8b 	ldhu	r5,-22(fp)
    cafc:	e0bffb44 	addi	r2,fp,-19
    cb00:	d8800015 	stw	r2,0(sp)
    cb04:	280f883a 	mov	r7,r5
    cb08:	200d883a 	mov	r6,r4
    cb0c:	180b883a 	mov	r5,r3
    cb10:	e13ff217 	ldw	r4,-56(fp)
    cb14:	0006e780 	call	6e78 <OSFlagPend>
    cb18:	00000a06 	br	cb44 <altera_avalon_jtag_uart_read+0x1d8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    cb1c:	0001883a 	nop
    cb20:	e0bffc17 	ldw	r2,-16(fp)
    cb24:	10c00d17 	ldw	r3,52(r2)
    cb28:	e0bff317 	ldw	r2,-52(fp)
    cb2c:	1880051e 	bne	r3,r2,cb44 <altera_avalon_jtag_uart_read+0x1d8>
    cb30:	e0bffc17 	ldw	r2,-16(fp)
    cb34:	10c00917 	ldw	r3,36(r2)
    cb38:	e0bffc17 	ldw	r2,-16(fp)
    cb3c:	10800117 	ldw	r2,4(r2)
    cb40:	18bff736 	bltu	r3,r2,cb20 <altera_avalon_jtag_uart_read+0x1b4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    cb44:	e0bffc17 	ldw	r2,-16(fp)
    cb48:	10c00d17 	ldw	r3,52(r2)
    cb4c:	e0bff317 	ldw	r2,-52(fp)
    cb50:	18800726 	beq	r3,r2,cb70 <altera_avalon_jtag_uart_read+0x204>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    cb54:	e0bffe17 	ldw	r2,-8(fp)
    cb58:	00bf9916 	blt	zero,r2,c9c0 <altera_avalon_jtag_uart_read+0x54>
    cb5c:	00000506 	br	cb74 <altera_avalon_jtag_uart_read+0x208>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    cb60:	0001883a 	nop
    cb64:	00000306 	br	cb74 <altera_avalon_jtag_uart_read+0x208>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    cb68:	0001883a 	nop
    cb6c:	00000106 	br	cb74 <altera_avalon_jtag_uart_read+0x208>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    cb70:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
    cb74:	e0bffc17 	ldw	r2,-16(fp)
    cb78:	10800a17 	ldw	r2,40(r2)
    cb7c:	1009883a 	mov	r4,r2
    cb80:	0009f3c0 	call	9f3c <OSSemPost>

  if (ptr != buffer)
    cb84:	e0fff017 	ldw	r3,-64(fp)
    cb88:	e0bffd17 	ldw	r2,-12(fp)
    cb8c:	18801826 	beq	r3,r2,cbf0 <altera_avalon_jtag_uart_read+0x284>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cb90:	0005303a 	rdctl	r2,status
    cb94:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cb98:	e0fff717 	ldw	r3,-36(fp)
    cb9c:	00bfff84 	movi	r2,-2
    cba0:	1884703a 	and	r2,r3,r2
    cba4:	1001703a 	wrctl	status,r2
  
  return context;
    cba8:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    cbac:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    cbb0:	e0bffc17 	ldw	r2,-16(fp)
    cbb4:	10800817 	ldw	r2,32(r2)
    cbb8:	10c00054 	ori	r3,r2,1
    cbbc:	e0bffc17 	ldw	r2,-16(fp)
    cbc0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    cbc4:	e0bffc17 	ldw	r2,-16(fp)
    cbc8:	10800017 	ldw	r2,0(r2)
    cbcc:	10800104 	addi	r2,r2,4
    cbd0:	1007883a 	mov	r3,r2
    cbd4:	e0bffc17 	ldw	r2,-16(fp)
    cbd8:	10800817 	ldw	r2,32(r2)
    cbdc:	18800035 	stwio	r2,0(r3)
    cbe0:	e0bff617 	ldw	r2,-40(fp)
    cbe4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cbe8:	e0bff517 	ldw	r2,-44(fp)
    cbec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    cbf0:	e0fff017 	ldw	r3,-64(fp)
    cbf4:	e0bffd17 	ldw	r2,-12(fp)
    cbf8:	18800426 	beq	r3,r2,cc0c <altera_avalon_jtag_uart_read+0x2a0>
    return ptr - buffer;
    cbfc:	e0fff017 	ldw	r3,-64(fp)
    cc00:	e0bffd17 	ldw	r2,-12(fp)
    cc04:	1885c83a 	sub	r2,r3,r2
    cc08:	00000606 	br	cc24 <altera_avalon_jtag_uart_read+0x2b8>
  else if (flags & O_NONBLOCK)
    cc0c:	e0bfff17 	ldw	r2,-4(fp)
    cc10:	1090000c 	andi	r2,r2,16384
    cc14:	10000226 	beq	r2,zero,cc20 <altera_avalon_jtag_uart_read+0x2b4>
    return -EWOULDBLOCK;
    cc18:	00bffd44 	movi	r2,-11
    cc1c:	00000106 	br	cc24 <altera_avalon_jtag_uart_read+0x2b8>
  else
    return -EIO;
    cc20:	00bffec4 	movi	r2,-5
}
    cc24:	e037883a 	mov	sp,fp
    cc28:	dfc00117 	ldw	ra,4(sp)
    cc2c:	df000017 	ldw	fp,0(sp)
    cc30:	dec00204 	addi	sp,sp,8
    cc34:	f800283a 	ret

0000cc38 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    cc38:	deffed04 	addi	sp,sp,-76
    cc3c:	dfc01215 	stw	ra,72(sp)
    cc40:	df001115 	stw	fp,68(sp)
    cc44:	df001104 	addi	fp,sp,68
    cc48:	e13ffc15 	stw	r4,-16(fp)
    cc4c:	e17ffd15 	stw	r5,-12(fp)
    cc50:	e1bffe15 	stw	r6,-8(fp)
    cc54:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    cc58:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    cc5c:	e0bffd17 	ldw	r2,-12(fp)
    cc60:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
    cc64:	e0bffc17 	ldw	r2,-16(fp)
    cc68:	10800b17 	ldw	r2,44(r2)
    cc6c:	e0bff815 	stw	r2,-32(fp)
    cc70:	e03ff90d 	sth	zero,-28(fp)
    cc74:	e0bff90b 	ldhu	r2,-28(fp)
    cc78:	e0fffb44 	addi	r3,fp,-19
    cc7c:	180d883a 	mov	r6,r3
    cc80:	100b883a 	mov	r5,r2
    cc84:	e13ff817 	ldw	r4,-32(fp)
    cc88:	0009b640 	call	9b64 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    cc8c:	00003706 	br	cd6c <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    cc90:	e0bffc17 	ldw	r2,-16(fp)
    cc94:	10800f17 	ldw	r2,60(r2)
    cc98:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
    cc9c:	e0bffc17 	ldw	r2,-16(fp)
    cca0:	10801017 	ldw	r2,64(r2)
    cca4:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
    cca8:	e0fff417 	ldw	r3,-48(fp)
    ccac:	e0bff017 	ldw	r2,-64(fp)
    ccb0:	1880062e 	bgeu	r3,r2,cccc <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
    ccb4:	e0fff017 	ldw	r3,-64(fp)
    ccb8:	e0bff417 	ldw	r2,-48(fp)
    ccbc:	1885c83a 	sub	r2,r3,r2
    ccc0:	10bfffc4 	addi	r2,r2,-1
    ccc4:	e0bff115 	stw	r2,-60(fp)
    ccc8:	00000b06 	br	ccf8 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
    cccc:	e0bff017 	ldw	r2,-64(fp)
    ccd0:	10000526 	beq	r2,zero,cce8 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    ccd4:	00c20004 	movi	r3,2048
    ccd8:	e0bff417 	ldw	r2,-48(fp)
    ccdc:	1885c83a 	sub	r2,r3,r2
    cce0:	e0bff115 	stw	r2,-60(fp)
    cce4:	00000406 	br	ccf8 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    cce8:	00c1ffc4 	movi	r3,2047
    ccec:	e0bff417 	ldw	r2,-48(fp)
    ccf0:	1885c83a 	sub	r2,r3,r2
    ccf4:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
    ccf8:	e0bff117 	ldw	r2,-60(fp)
    ccfc:	10001e26 	beq	r2,zero,cd78 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
    cd00:	e0fffe17 	ldw	r3,-8(fp)
    cd04:	e0bff117 	ldw	r2,-60(fp)
    cd08:	1880022e 	bgeu	r3,r2,cd14 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
    cd0c:	e0bffe17 	ldw	r2,-8(fp)
    cd10:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    cd14:	e0bffc17 	ldw	r2,-16(fp)
    cd18:	10c21104 	addi	r3,r2,2116
    cd1c:	e0bff417 	ldw	r2,-48(fp)
    cd20:	1885883a 	add	r2,r3,r2
    cd24:	e1bff117 	ldw	r6,-60(fp)
    cd28:	e17ffd17 	ldw	r5,-12(fp)
    cd2c:	1009883a 	mov	r4,r2
    cd30:	00017f00 	call	17f0 <memcpy>
      ptr   += n;
    cd34:	e0fffd17 	ldw	r3,-12(fp)
    cd38:	e0bff117 	ldw	r2,-60(fp)
    cd3c:	1885883a 	add	r2,r3,r2
    cd40:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    cd44:	e0fffe17 	ldw	r3,-8(fp)
    cd48:	e0bff117 	ldw	r2,-60(fp)
    cd4c:	1885c83a 	sub	r2,r3,r2
    cd50:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    cd54:	e0fff417 	ldw	r3,-48(fp)
    cd58:	e0bff117 	ldw	r2,-60(fp)
    cd5c:	1885883a 	add	r2,r3,r2
    cd60:	10c1ffcc 	andi	r3,r2,2047
    cd64:	e0bffc17 	ldw	r2,-16(fp)
    cd68:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    cd6c:	e0bffe17 	ldw	r2,-8(fp)
    cd70:	00bfc716 	blt	zero,r2,cc90 <altera_avalon_jtag_uart_write+0x58>
    cd74:	00000106 	br	cd7c <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    cd78:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cd7c:	0005303a 	rdctl	r2,status
    cd80:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cd84:	e0fff717 	ldw	r3,-36(fp)
    cd88:	00bfff84 	movi	r2,-2
    cd8c:	1884703a 	and	r2,r3,r2
    cd90:	1001703a 	wrctl	status,r2
  
  return context;
    cd94:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    cd98:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    cd9c:	e0bffc17 	ldw	r2,-16(fp)
    cda0:	10800817 	ldw	r2,32(r2)
    cda4:	10c00094 	ori	r3,r2,2
    cda8:	e0bffc17 	ldw	r2,-16(fp)
    cdac:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    cdb0:	e0bffc17 	ldw	r2,-16(fp)
    cdb4:	10800017 	ldw	r2,0(r2)
    cdb8:	10800104 	addi	r2,r2,4
    cdbc:	1007883a 	mov	r3,r2
    cdc0:	e0bffc17 	ldw	r2,-16(fp)
    cdc4:	10800817 	ldw	r2,32(r2)
    cdc8:	18800035 	stwio	r2,0(r3)
    cdcc:	e0bff617 	ldw	r2,-40(fp)
    cdd0:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cdd4:	e0bff317 	ldw	r2,-52(fp)
    cdd8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    cddc:	e0bffe17 	ldw	r2,-8(fp)
    cde0:	00802e0e 	bge	zero,r2,ce9c <altera_avalon_jtag_uart_write+0x264>
    {
      if (flags & O_NONBLOCK)
    cde4:	e0bfff17 	ldw	r2,-4(fp)
    cde8:	1090000c 	andi	r2,r2,16384
    cdec:	10002e1e 	bne	r2,zero,cea8 <altera_avalon_jtag_uart_write+0x270>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
    cdf0:	00800074 	movhi	r2,1
    cdf4:	10878744 	addi	r2,r2,7709
    cdf8:	10800003 	ldbu	r2,0(r2)
    cdfc:	10803fcc 	andi	r2,r2,255
    ce00:	10800058 	cmpnei	r2,r2,1
    ce04:	1000181e 	bne	r2,zero,ce68 <altera_avalon_jtag_uart_write+0x230>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
    ce08:	e0bffc17 	ldw	r2,-16(fp)
    ce0c:	10800c17 	ldw	r2,48(r2)
    ce10:	e0bff515 	stw	r2,-44(fp)
    ce14:	00800184 	movi	r2,6
    ce18:	e0bff98d 	sth	r2,-26(fp)
    ce1c:	00bfe0c4 	movi	r2,-125
    ce20:	e0bffa05 	stb	r2,-24(fp)
    ce24:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    ce28:	00800074 	movhi	r2,1
    ce2c:	10878744 	addi	r2,r2,7709
    ce30:	10800003 	ldbu	r2,0(r2)
    ce34:	10803fcc 	andi	r2,r2,255
    ce38:	10001526 	beq	r2,zero,ce90 <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    ce3c:	e0fff98b 	ldhu	r3,-26(fp)
    ce40:	e13ffa03 	ldbu	r4,-24(fp)
    ce44:	e17ffa8b 	ldhu	r5,-22(fp)
    ce48:	e0bffb04 	addi	r2,fp,-20
    ce4c:	d8800015 	stw	r2,0(sp)
    ce50:	280f883a 	mov	r7,r5
    ce54:	200d883a 	mov	r6,r4
    ce58:	180b883a 	mov	r5,r3
    ce5c:	e13ff517 	ldw	r4,-44(fp)
    ce60:	0006e780 	call	6e78 <OSFlagPend>
    ce64:	00000a06 	br	ce90 <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    ce68:	0001883a 	nop
    ce6c:	e0bffc17 	ldw	r2,-16(fp)
    ce70:	10c01017 	ldw	r3,64(r2)
    ce74:	e0bff017 	ldw	r2,-64(fp)
    ce78:	1880051e 	bne	r3,r2,ce90 <altera_avalon_jtag_uart_write+0x258>
    ce7c:	e0bffc17 	ldw	r2,-16(fp)
    ce80:	10c00917 	ldw	r3,36(r2)
    ce84:	e0bffc17 	ldw	r2,-16(fp)
    ce88:	10800117 	ldw	r2,4(r2)
    ce8c:	18bff736 	bltu	r3,r2,ce6c <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    ce90:	e0bffc17 	ldw	r2,-16(fp)
    ce94:	10800917 	ldw	r2,36(r2)
    ce98:	1000051e 	bne	r2,zero,ceb0 <altera_avalon_jtag_uart_write+0x278>
         break;
    }
  }
  while (count > 0);
    ce9c:	e0bffe17 	ldw	r2,-8(fp)
    cea0:	00bfb216 	blt	zero,r2,cd6c <altera_avalon_jtag_uart_write+0x134>
    cea4:	00000306 	br	ceb4 <altera_avalon_jtag_uart_write+0x27c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    cea8:	0001883a 	nop
    ceac:	00000106 	br	ceb4 <altera_avalon_jtag_uart_write+0x27c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    ceb0:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
    ceb4:	e0bffc17 	ldw	r2,-16(fp)
    ceb8:	10800b17 	ldw	r2,44(r2)
    cebc:	1009883a 	mov	r4,r2
    cec0:	0009f3c0 	call	9f3c <OSSemPost>

  if (ptr != start)
    cec4:	e0fffd17 	ldw	r3,-12(fp)
    cec8:	e0bff217 	ldw	r2,-56(fp)
    cecc:	18800426 	beq	r3,r2,cee0 <altera_avalon_jtag_uart_write+0x2a8>
    return ptr - start;
    ced0:	e0fffd17 	ldw	r3,-12(fp)
    ced4:	e0bff217 	ldw	r2,-56(fp)
    ced8:	1885c83a 	sub	r2,r3,r2
    cedc:	00000606 	br	cef8 <altera_avalon_jtag_uart_write+0x2c0>
  else if (flags & O_NONBLOCK)
    cee0:	e0bfff17 	ldw	r2,-4(fp)
    cee4:	1090000c 	andi	r2,r2,16384
    cee8:	10000226 	beq	r2,zero,cef4 <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
    ceec:	00bffd44 	movi	r2,-11
    cef0:	00000106 	br	cef8 <altera_avalon_jtag_uart_write+0x2c0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    cef4:	00bffec4 	movi	r2,-5
}
    cef8:	e037883a 	mov	sp,fp
    cefc:	dfc00117 	ldw	ra,4(sp)
    cf00:	df000017 	ldw	fp,0(sp)
    cf04:	dec00204 	addi	sp,sp,8
    cf08:	f800283a 	ret

0000cf0c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    cf0c:	defffa04 	addi	sp,sp,-24
    cf10:	dfc00515 	stw	ra,20(sp)
    cf14:	df000415 	stw	fp,16(sp)
    cf18:	df000404 	addi	fp,sp,16
    cf1c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    cf20:	0007883a 	mov	r3,zero
    cf24:	e0bfff17 	ldw	r2,-4(fp)
    cf28:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    cf2c:	e0bfff17 	ldw	r2,-4(fp)
    cf30:	10800104 	addi	r2,r2,4
    cf34:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cf38:	0005303a 	rdctl	r2,status
    cf3c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cf40:	e0fffd17 	ldw	r3,-12(fp)
    cf44:	00bfff84 	movi	r2,-2
    cf48:	1884703a 	and	r2,r3,r2
    cf4c:	1001703a 	wrctl	status,r2
  
  return context;
    cf50:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    cf54:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    cf58:	000daa00 	call	daa0 <alt_tick>
    cf5c:	e0bffc17 	ldw	r2,-16(fp)
    cf60:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cf64:	e0bffe17 	ldw	r2,-8(fp)
    cf68:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    cf6c:	0001883a 	nop
    cf70:	e037883a 	mov	sp,fp
    cf74:	dfc00117 	ldw	ra,4(sp)
    cf78:	df000017 	ldw	fp,0(sp)
    cf7c:	dec00204 	addi	sp,sp,8
    cf80:	f800283a 	ret

0000cf84 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    cf84:	defff804 	addi	sp,sp,-32
    cf88:	dfc00715 	stw	ra,28(sp)
    cf8c:	df000615 	stw	fp,24(sp)
    cf90:	df000604 	addi	fp,sp,24
    cf94:	e13ffc15 	stw	r4,-16(fp)
    cf98:	e17ffd15 	stw	r5,-12(fp)
    cf9c:	e1bffe15 	stw	r6,-8(fp)
    cfa0:	e1ffff15 	stw	r7,-4(fp)
    cfa4:	e0bfff17 	ldw	r2,-4(fp)
    cfa8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    cfac:	00800074 	movhi	r2,1
    cfb0:	10879c04 	addi	r2,r2,7792
    cfb4:	10800017 	ldw	r2,0(r2)
    cfb8:	1000041e 	bne	r2,zero,cfcc <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    cfbc:	00800074 	movhi	r2,1
    cfc0:	10879c04 	addi	r2,r2,7792
    cfc4:	e0fffb17 	ldw	r3,-20(fp)
    cfc8:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    cfcc:	e0bffc17 	ldw	r2,-16(fp)
    cfd0:	10800104 	addi	r2,r2,4
    cfd4:	00c001c4 	movi	r3,7
    cfd8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    cfdc:	d8000015 	stw	zero,0(sp)
    cfe0:	e1fffc17 	ldw	r7,-16(fp)
    cfe4:	01800074 	movhi	r6,1
    cfe8:	31b3c304 	addi	r6,r6,-12532
    cfec:	e17ffe17 	ldw	r5,-8(fp)
    cff0:	e13ffd17 	ldw	r4,-12(fp)
    cff4:	000d3800 	call	d380 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    cff8:	0001883a 	nop
    cffc:	e037883a 	mov	sp,fp
    d000:	dfc00117 	ldw	ra,4(sp)
    d004:	df000017 	ldw	fp,0(sp)
    d008:	dec00204 	addi	sp,sp,8
    d00c:	f800283a 	ret

0000d010 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    d010:	defff504 	addi	sp,sp,-44
    d014:	df000a15 	stw	fp,40(sp)
    d018:	df000a04 	addi	fp,sp,40
    d01c:	e13ffc15 	stw	r4,-16(fp)
    d020:	e17ffd15 	stw	r5,-12(fp)
    d024:	e1bffe15 	stw	r6,-8(fp)
    d028:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    d02c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    d030:	00800074 	movhi	r2,1
    d034:	10879c04 	addi	r2,r2,7792
    d038:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    d03c:	10003f26 	beq	r2,zero,d13c <alt_alarm_start+0x12c>
  {
    if (alarm)
    d040:	e0bffc17 	ldw	r2,-16(fp)
    d044:	10003b26 	beq	r2,zero,d134 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    d048:	e0bffc17 	ldw	r2,-16(fp)
    d04c:	e0fffe17 	ldw	r3,-8(fp)
    d050:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    d054:	e0bffc17 	ldw	r2,-16(fp)
    d058:	e0ffff17 	ldw	r3,-4(fp)
    d05c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d060:	0005303a 	rdctl	r2,status
    d064:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d068:	e0fff917 	ldw	r3,-28(fp)
    d06c:	00bfff84 	movi	r2,-2
    d070:	1884703a 	and	r2,r3,r2
    d074:	1001703a 	wrctl	status,r2
  
  return context;
    d078:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    d07c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    d080:	00800074 	movhi	r2,1
    d084:	10879d04 	addi	r2,r2,7796
    d088:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    d08c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    d090:	e0fffd17 	ldw	r3,-12(fp)
    d094:	e0bff617 	ldw	r2,-40(fp)
    d098:	1885883a 	add	r2,r3,r2
    d09c:	10c00044 	addi	r3,r2,1
    d0a0:	e0bffc17 	ldw	r2,-16(fp)
    d0a4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    d0a8:	e0bffc17 	ldw	r2,-16(fp)
    d0ac:	10c00217 	ldw	r3,8(r2)
    d0b0:	e0bff617 	ldw	r2,-40(fp)
    d0b4:	1880042e 	bgeu	r3,r2,d0c8 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    d0b8:	e0bffc17 	ldw	r2,-16(fp)
    d0bc:	00c00044 	movi	r3,1
    d0c0:	10c00405 	stb	r3,16(r2)
    d0c4:	00000206 	br	d0d0 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    d0c8:	e0bffc17 	ldw	r2,-16(fp)
    d0cc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    d0d0:	e0fffc17 	ldw	r3,-16(fp)
    d0d4:	00800074 	movhi	r2,1
    d0d8:	1080bc04 	addi	r2,r2,752
    d0dc:	e0bffa15 	stw	r2,-24(fp)
    d0e0:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    d0e4:	e0bffb17 	ldw	r2,-20(fp)
    d0e8:	e0fffa17 	ldw	r3,-24(fp)
    d0ec:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    d0f0:	e0bffa17 	ldw	r2,-24(fp)
    d0f4:	10c00017 	ldw	r3,0(r2)
    d0f8:	e0bffb17 	ldw	r2,-20(fp)
    d0fc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    d100:	e0bffa17 	ldw	r2,-24(fp)
    d104:	10800017 	ldw	r2,0(r2)
    d108:	e0fffb17 	ldw	r3,-20(fp)
    d10c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    d110:	e0bffa17 	ldw	r2,-24(fp)
    d114:	e0fffb17 	ldw	r3,-20(fp)
    d118:	10c00015 	stw	r3,0(r2)
    d11c:	e0bff817 	ldw	r2,-32(fp)
    d120:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d124:	e0bff717 	ldw	r2,-36(fp)
    d128:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    d12c:	0005883a 	mov	r2,zero
    d130:	00000306 	br	d140 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    d134:	00bffa84 	movi	r2,-22
    d138:	00000106 	br	d140 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    d13c:	00bfde84 	movi	r2,-134
  }
}
    d140:	e037883a 	mov	sp,fp
    d144:	df000017 	ldw	fp,0(sp)
    d148:	dec00104 	addi	sp,sp,4
    d14c:	f800283a 	ret

0000d150 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    d150:	defffe04 	addi	sp,sp,-8
    d154:	df000115 	stw	fp,4(sp)
    d158:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    d15c:	e03fff15 	stw	zero,-4(fp)
    d160:	00000506 	br	d178 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    d164:	e0bfff17 	ldw	r2,-4(fp)
    d168:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    d16c:	e0bfff17 	ldw	r2,-4(fp)
    d170:	10800804 	addi	r2,r2,32
    d174:	e0bfff15 	stw	r2,-4(fp)
    d178:	e0bfff17 	ldw	r2,-4(fp)
    d17c:	10820030 	cmpltui	r2,r2,2048
    d180:	103ff81e 	bne	r2,zero,d164 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    d184:	0001883a 	nop
    d188:	e037883a 	mov	sp,fp
    d18c:	df000017 	ldw	fp,0(sp)
    d190:	dec00104 	addi	sp,sp,4
    d194:	f800283a 	ret

0000d198 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d198:	defffe04 	addi	sp,sp,-8
    d19c:	dfc00115 	stw	ra,4(sp)
    d1a0:	df000015 	stw	fp,0(sp)
    d1a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d1a8:	00800074 	movhi	r2,1
    d1ac:	10809a04 	addi	r2,r2,616
    d1b0:	10800017 	ldw	r2,0(r2)
    d1b4:	10000526 	beq	r2,zero,d1cc <alt_get_errno+0x34>
    d1b8:	00800074 	movhi	r2,1
    d1bc:	10809a04 	addi	r2,r2,616
    d1c0:	10800017 	ldw	r2,0(r2)
    d1c4:	103ee83a 	callr	r2
    d1c8:	00000206 	br	d1d4 <alt_get_errno+0x3c>
    d1cc:	00800074 	movhi	r2,1
    d1d0:	10877e04 	addi	r2,r2,7672
}
    d1d4:	e037883a 	mov	sp,fp
    d1d8:	dfc00117 	ldw	ra,4(sp)
    d1dc:	df000017 	ldw	fp,0(sp)
    d1e0:	dec00204 	addi	sp,sp,8
    d1e4:	f800283a 	ret

0000d1e8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    d1e8:	defffa04 	addi	sp,sp,-24
    d1ec:	dfc00515 	stw	ra,20(sp)
    d1f0:	df000415 	stw	fp,16(sp)
    d1f4:	df000404 	addi	fp,sp,16
    d1f8:	e13ffe15 	stw	r4,-8(fp)
    d1fc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    d200:	e0bffe17 	ldw	r2,-8(fp)
    d204:	10000326 	beq	r2,zero,d214 <alt_dev_llist_insert+0x2c>
    d208:	e0bffe17 	ldw	r2,-8(fp)
    d20c:	10800217 	ldw	r2,8(r2)
    d210:	1000061e 	bne	r2,zero,d22c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    d214:	000d1980 	call	d198 <alt_get_errno>
    d218:	1007883a 	mov	r3,r2
    d21c:	00800584 	movi	r2,22
    d220:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    d224:	00bffa84 	movi	r2,-22
    d228:	00001306 	br	d278 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    d22c:	e0bffe17 	ldw	r2,-8(fp)
    d230:	e0ffff17 	ldw	r3,-4(fp)
    d234:	e0fffc15 	stw	r3,-16(fp)
    d238:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    d23c:	e0bffd17 	ldw	r2,-12(fp)
    d240:	e0fffc17 	ldw	r3,-16(fp)
    d244:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    d248:	e0bffc17 	ldw	r2,-16(fp)
    d24c:	10c00017 	ldw	r3,0(r2)
    d250:	e0bffd17 	ldw	r2,-12(fp)
    d254:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    d258:	e0bffc17 	ldw	r2,-16(fp)
    d25c:	10800017 	ldw	r2,0(r2)
    d260:	e0fffd17 	ldw	r3,-12(fp)
    d264:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    d268:	e0bffc17 	ldw	r2,-16(fp)
    d26c:	e0fffd17 	ldw	r3,-12(fp)
    d270:	10c00015 	stw	r3,0(r2)

  return 0;  
    d274:	0005883a 	mov	r2,zero
}
    d278:	e037883a 	mov	sp,fp
    d27c:	dfc00117 	ldw	ra,4(sp)
    d280:	df000017 	ldw	fp,0(sp)
    d284:	dec00204 	addi	sp,sp,8
    d288:	f800283a 	ret

0000d28c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    d28c:	defffd04 	addi	sp,sp,-12
    d290:	dfc00215 	stw	ra,8(sp)
    d294:	df000115 	stw	fp,4(sp)
    d298:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    d29c:	00800074 	movhi	r2,1
    d2a0:	10b9a204 	addi	r2,r2,-6520
    d2a4:	e0bfff15 	stw	r2,-4(fp)
    d2a8:	00000606 	br	d2c4 <_do_ctors+0x38>
        (*ctor) (); 
    d2ac:	e0bfff17 	ldw	r2,-4(fp)
    d2b0:	10800017 	ldw	r2,0(r2)
    d2b4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    d2b8:	e0bfff17 	ldw	r2,-4(fp)
    d2bc:	10bfff04 	addi	r2,r2,-4
    d2c0:	e0bfff15 	stw	r2,-4(fp)
    d2c4:	e0ffff17 	ldw	r3,-4(fp)
    d2c8:	00800074 	movhi	r2,1
    d2cc:	10b9a304 	addi	r2,r2,-6516
    d2d0:	18bff62e 	bgeu	r3,r2,d2ac <_do_ctors+0x20>
        (*ctor) (); 
}
    d2d4:	0001883a 	nop
    d2d8:	e037883a 	mov	sp,fp
    d2dc:	dfc00117 	ldw	ra,4(sp)
    d2e0:	df000017 	ldw	fp,0(sp)
    d2e4:	dec00204 	addi	sp,sp,8
    d2e8:	f800283a 	ret

0000d2ec <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    d2ec:	defffd04 	addi	sp,sp,-12
    d2f0:	dfc00215 	stw	ra,8(sp)
    d2f4:	df000115 	stw	fp,4(sp)
    d2f8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    d2fc:	00800074 	movhi	r2,1
    d300:	10b9a204 	addi	r2,r2,-6520
    d304:	e0bfff15 	stw	r2,-4(fp)
    d308:	00000606 	br	d324 <_do_dtors+0x38>
        (*dtor) (); 
    d30c:	e0bfff17 	ldw	r2,-4(fp)
    d310:	10800017 	ldw	r2,0(r2)
    d314:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    d318:	e0bfff17 	ldw	r2,-4(fp)
    d31c:	10bfff04 	addi	r2,r2,-4
    d320:	e0bfff15 	stw	r2,-4(fp)
    d324:	e0ffff17 	ldw	r3,-4(fp)
    d328:	00800074 	movhi	r2,1
    d32c:	10b9a304 	addi	r2,r2,-6516
    d330:	18bff62e 	bgeu	r3,r2,d30c <_do_dtors+0x20>
        (*dtor) (); 
}
    d334:	0001883a 	nop
    d338:	e037883a 	mov	sp,fp
    d33c:	dfc00117 	ldw	ra,4(sp)
    d340:	df000017 	ldw	fp,0(sp)
    d344:	dec00204 	addi	sp,sp,8
    d348:	f800283a 	ret

0000d34c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    d34c:	defffe04 	addi	sp,sp,-8
    d350:	dfc00115 	stw	ra,4(sp)
    d354:	df000015 	stw	fp,0(sp)
    d358:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    d35c:	01440004 	movi	r5,4096
    d360:	0009883a 	mov	r4,zero
    d364:	000e1c40 	call	e1c4 <alt_icache_flush>
#endif
}
    d368:	0001883a 	nop
    d36c:	e037883a 	mov	sp,fp
    d370:	dfc00117 	ldw	ra,4(sp)
    d374:	df000017 	ldw	fp,0(sp)
    d378:	dec00204 	addi	sp,sp,8
    d37c:	f800283a 	ret

0000d380 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    d380:	defff904 	addi	sp,sp,-28
    d384:	dfc00615 	stw	ra,24(sp)
    d388:	df000515 	stw	fp,20(sp)
    d38c:	df000504 	addi	fp,sp,20
    d390:	e13ffc15 	stw	r4,-16(fp)
    d394:	e17ffd15 	stw	r5,-12(fp)
    d398:	e1bffe15 	stw	r6,-8(fp)
    d39c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    d3a0:	e0800217 	ldw	r2,8(fp)
    d3a4:	d8800015 	stw	r2,0(sp)
    d3a8:	e1ffff17 	ldw	r7,-4(fp)
    d3ac:	e1bffe17 	ldw	r6,-8(fp)
    d3b0:	e17ffd17 	ldw	r5,-12(fp)
    d3b4:	e13ffc17 	ldw	r4,-16(fp)
    d3b8:	000d5600 	call	d560 <alt_iic_isr_register>
}  
    d3bc:	e037883a 	mov	sp,fp
    d3c0:	dfc00117 	ldw	ra,4(sp)
    d3c4:	df000017 	ldw	fp,0(sp)
    d3c8:	dec00204 	addi	sp,sp,8
    d3cc:	f800283a 	ret

0000d3d0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    d3d0:	defff904 	addi	sp,sp,-28
    d3d4:	df000615 	stw	fp,24(sp)
    d3d8:	df000604 	addi	fp,sp,24
    d3dc:	e13ffe15 	stw	r4,-8(fp)
    d3e0:	e17fff15 	stw	r5,-4(fp)
    d3e4:	e0bfff17 	ldw	r2,-4(fp)
    d3e8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d3ec:	0005303a 	rdctl	r2,status
    d3f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d3f4:	e0fffb17 	ldw	r3,-20(fp)
    d3f8:	00bfff84 	movi	r2,-2
    d3fc:	1884703a 	and	r2,r3,r2
    d400:	1001703a 	wrctl	status,r2
  
  return context;
    d404:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    d408:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    d40c:	00c00044 	movi	r3,1
    d410:	e0bffa17 	ldw	r2,-24(fp)
    d414:	1884983a 	sll	r2,r3,r2
    d418:	1007883a 	mov	r3,r2
    d41c:	00800074 	movhi	r2,1
    d420:	10879b04 	addi	r2,r2,7788
    d424:	10800017 	ldw	r2,0(r2)
    d428:	1886b03a 	or	r3,r3,r2
    d42c:	00800074 	movhi	r2,1
    d430:	10879b04 	addi	r2,r2,7788
    d434:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    d438:	00800074 	movhi	r2,1
    d43c:	10879b04 	addi	r2,r2,7788
    d440:	10800017 	ldw	r2,0(r2)
    d444:	100170fa 	wrctl	ienable,r2
    d448:	e0bffc17 	ldw	r2,-16(fp)
    d44c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d450:	e0bffd17 	ldw	r2,-12(fp)
    d454:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    d458:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    d45c:	0001883a 	nop
}
    d460:	e037883a 	mov	sp,fp
    d464:	df000017 	ldw	fp,0(sp)
    d468:	dec00104 	addi	sp,sp,4
    d46c:	f800283a 	ret

0000d470 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    d470:	defff904 	addi	sp,sp,-28
    d474:	df000615 	stw	fp,24(sp)
    d478:	df000604 	addi	fp,sp,24
    d47c:	e13ffe15 	stw	r4,-8(fp)
    d480:	e17fff15 	stw	r5,-4(fp)
    d484:	e0bfff17 	ldw	r2,-4(fp)
    d488:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d48c:	0005303a 	rdctl	r2,status
    d490:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d494:	e0fffb17 	ldw	r3,-20(fp)
    d498:	00bfff84 	movi	r2,-2
    d49c:	1884703a 	and	r2,r3,r2
    d4a0:	1001703a 	wrctl	status,r2
  
  return context;
    d4a4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    d4a8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    d4ac:	00c00044 	movi	r3,1
    d4b0:	e0bffa17 	ldw	r2,-24(fp)
    d4b4:	1884983a 	sll	r2,r3,r2
    d4b8:	0084303a 	nor	r2,zero,r2
    d4bc:	1007883a 	mov	r3,r2
    d4c0:	00800074 	movhi	r2,1
    d4c4:	10879b04 	addi	r2,r2,7788
    d4c8:	10800017 	ldw	r2,0(r2)
    d4cc:	1886703a 	and	r3,r3,r2
    d4d0:	00800074 	movhi	r2,1
    d4d4:	10879b04 	addi	r2,r2,7788
    d4d8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    d4dc:	00800074 	movhi	r2,1
    d4e0:	10879b04 	addi	r2,r2,7788
    d4e4:	10800017 	ldw	r2,0(r2)
    d4e8:	100170fa 	wrctl	ienable,r2
    d4ec:	e0bffc17 	ldw	r2,-16(fp)
    d4f0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d4f4:	e0bffd17 	ldw	r2,-12(fp)
    d4f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    d4fc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    d500:	0001883a 	nop
}
    d504:	e037883a 	mov	sp,fp
    d508:	df000017 	ldw	fp,0(sp)
    d50c:	dec00104 	addi	sp,sp,4
    d510:	f800283a 	ret

0000d514 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    d514:	defffc04 	addi	sp,sp,-16
    d518:	df000315 	stw	fp,12(sp)
    d51c:	df000304 	addi	fp,sp,12
    d520:	e13ffe15 	stw	r4,-8(fp)
    d524:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    d528:	000530fa 	rdctl	r2,ienable
    d52c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    d530:	00c00044 	movi	r3,1
    d534:	e0bfff17 	ldw	r2,-4(fp)
    d538:	1884983a 	sll	r2,r3,r2
    d53c:	1007883a 	mov	r3,r2
    d540:	e0bffd17 	ldw	r2,-12(fp)
    d544:	1884703a 	and	r2,r3,r2
    d548:	1004c03a 	cmpne	r2,r2,zero
    d54c:	10803fcc 	andi	r2,r2,255
}
    d550:	e037883a 	mov	sp,fp
    d554:	df000017 	ldw	fp,0(sp)
    d558:	dec00104 	addi	sp,sp,4
    d55c:	f800283a 	ret

0000d560 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    d560:	defff504 	addi	sp,sp,-44
    d564:	dfc00a15 	stw	ra,40(sp)
    d568:	df000915 	stw	fp,36(sp)
    d56c:	df000904 	addi	fp,sp,36
    d570:	e13ffc15 	stw	r4,-16(fp)
    d574:	e17ffd15 	stw	r5,-12(fp)
    d578:	e1bffe15 	stw	r6,-8(fp)
    d57c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    d580:	00bffa84 	movi	r2,-22
    d584:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    d588:	e0bffd17 	ldw	r2,-12(fp)
    d58c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    d590:	e0bff817 	ldw	r2,-32(fp)
    d594:	10800808 	cmpgei	r2,r2,32
    d598:	1000271e 	bne	r2,zero,d638 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d59c:	0005303a 	rdctl	r2,status
    d5a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d5a4:	e0fffb17 	ldw	r3,-20(fp)
    d5a8:	00bfff84 	movi	r2,-2
    d5ac:	1884703a 	and	r2,r3,r2
    d5b0:	1001703a 	wrctl	status,r2
  
  return context;
    d5b4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    d5b8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    d5bc:	008000b4 	movhi	r2,2
    d5c0:	10a43204 	addi	r2,r2,-28472
    d5c4:	e0fff817 	ldw	r3,-32(fp)
    d5c8:	180690fa 	slli	r3,r3,3
    d5cc:	10c5883a 	add	r2,r2,r3
    d5d0:	e0fffe17 	ldw	r3,-8(fp)
    d5d4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    d5d8:	008000b4 	movhi	r2,2
    d5dc:	10a43204 	addi	r2,r2,-28472
    d5e0:	e0fff817 	ldw	r3,-32(fp)
    d5e4:	180690fa 	slli	r3,r3,3
    d5e8:	10c5883a 	add	r2,r2,r3
    d5ec:	10800104 	addi	r2,r2,4
    d5f0:	e0ffff17 	ldw	r3,-4(fp)
    d5f4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    d5f8:	e0bffe17 	ldw	r2,-8(fp)
    d5fc:	10000526 	beq	r2,zero,d614 <alt_iic_isr_register+0xb4>
    d600:	e0bff817 	ldw	r2,-32(fp)
    d604:	100b883a 	mov	r5,r2
    d608:	e13ffc17 	ldw	r4,-16(fp)
    d60c:	000d3d00 	call	d3d0 <alt_ic_irq_enable>
    d610:	00000406 	br	d624 <alt_iic_isr_register+0xc4>
    d614:	e0bff817 	ldw	r2,-32(fp)
    d618:	100b883a 	mov	r5,r2
    d61c:	e13ffc17 	ldw	r4,-16(fp)
    d620:	000d4700 	call	d470 <alt_ic_irq_disable>
    d624:	e0bff715 	stw	r2,-36(fp)
    d628:	e0bffa17 	ldw	r2,-24(fp)
    d62c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d630:	e0bff917 	ldw	r2,-28(fp)
    d634:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    d638:	e0bff717 	ldw	r2,-36(fp)
}
    d63c:	e037883a 	mov	sp,fp
    d640:	dfc00117 	ldw	ra,4(sp)
    d644:	df000017 	ldw	fp,0(sp)
    d648:	dec00204 	addi	sp,sp,8
    d64c:	f800283a 	ret

0000d650 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    d650:	defff904 	addi	sp,sp,-28
    d654:	dfc00615 	stw	ra,24(sp)
    d658:	df000515 	stw	fp,20(sp)
    d65c:	df000504 	addi	fp,sp,20
    d660:	e13ffc15 	stw	r4,-16(fp)
    d664:	e17ffd15 	stw	r5,-12(fp)
    d668:	e1bffe15 	stw	r6,-8(fp)
    d66c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    d670:	e1bfff17 	ldw	r6,-4(fp)
    d674:	e17ffe17 	ldw	r5,-8(fp)
    d678:	e13ffd17 	ldw	r4,-12(fp)
    d67c:	000d8ac0 	call	d8ac <open>
    d680:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    d684:	e0bffb17 	ldw	r2,-20(fp)
    d688:	10001c16 	blt	r2,zero,d6fc <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    d68c:	00800074 	movhi	r2,1
    d690:	10bc1604 	addi	r2,r2,-4008
    d694:	e0fffb17 	ldw	r3,-20(fp)
    d698:	18c00324 	muli	r3,r3,12
    d69c:	10c5883a 	add	r2,r2,r3
    d6a0:	10c00017 	ldw	r3,0(r2)
    d6a4:	e0bffc17 	ldw	r2,-16(fp)
    d6a8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    d6ac:	00800074 	movhi	r2,1
    d6b0:	10bc1604 	addi	r2,r2,-4008
    d6b4:	e0fffb17 	ldw	r3,-20(fp)
    d6b8:	18c00324 	muli	r3,r3,12
    d6bc:	10c5883a 	add	r2,r2,r3
    d6c0:	10800104 	addi	r2,r2,4
    d6c4:	10c00017 	ldw	r3,0(r2)
    d6c8:	e0bffc17 	ldw	r2,-16(fp)
    d6cc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    d6d0:	00800074 	movhi	r2,1
    d6d4:	10bc1604 	addi	r2,r2,-4008
    d6d8:	e0fffb17 	ldw	r3,-20(fp)
    d6dc:	18c00324 	muli	r3,r3,12
    d6e0:	10c5883a 	add	r2,r2,r3
    d6e4:	10800204 	addi	r2,r2,8
    d6e8:	10c00017 	ldw	r3,0(r2)
    d6ec:	e0bffc17 	ldw	r2,-16(fp)
    d6f0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    d6f4:	e13ffb17 	ldw	r4,-20(fp)
    d6f8:	00038ec0 	call	38ec <alt_release_fd>
  }
} 
    d6fc:	0001883a 	nop
    d700:	e037883a 	mov	sp,fp
    d704:	dfc00117 	ldw	ra,4(sp)
    d708:	df000017 	ldw	fp,0(sp)
    d70c:	dec00204 	addi	sp,sp,8
    d710:	f800283a 	ret

0000d714 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    d714:	defffb04 	addi	sp,sp,-20
    d718:	dfc00415 	stw	ra,16(sp)
    d71c:	df000315 	stw	fp,12(sp)
    d720:	df000304 	addi	fp,sp,12
    d724:	e13ffd15 	stw	r4,-12(fp)
    d728:	e17ffe15 	stw	r5,-8(fp)
    d72c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    d730:	01c07fc4 	movi	r7,511
    d734:	01800044 	movi	r6,1
    d738:	e17ffd17 	ldw	r5,-12(fp)
    d73c:	01000074 	movhi	r4,1
    d740:	213c1904 	addi	r4,r4,-3996
    d744:	000d6500 	call	d650 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    d748:	01c07fc4 	movi	r7,511
    d74c:	000d883a 	mov	r6,zero
    d750:	e17ffe17 	ldw	r5,-8(fp)
    d754:	01000074 	movhi	r4,1
    d758:	213c1604 	addi	r4,r4,-4008
    d75c:	000d6500 	call	d650 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    d760:	01c07fc4 	movi	r7,511
    d764:	01800044 	movi	r6,1
    d768:	e17fff17 	ldw	r5,-4(fp)
    d76c:	01000074 	movhi	r4,1
    d770:	213c1c04 	addi	r4,r4,-3984
    d774:	000d6500 	call	d650 <alt_open_fd>
}  
    d778:	0001883a 	nop
    d77c:	e037883a 	mov	sp,fp
    d780:	dfc00117 	ldw	ra,4(sp)
    d784:	df000017 	ldw	fp,0(sp)
    d788:	dec00204 	addi	sp,sp,8
    d78c:	f800283a 	ret

0000d790 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d790:	defffe04 	addi	sp,sp,-8
    d794:	dfc00115 	stw	ra,4(sp)
    d798:	df000015 	stw	fp,0(sp)
    d79c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d7a0:	00800074 	movhi	r2,1
    d7a4:	10809a04 	addi	r2,r2,616
    d7a8:	10800017 	ldw	r2,0(r2)
    d7ac:	10000526 	beq	r2,zero,d7c4 <alt_get_errno+0x34>
    d7b0:	00800074 	movhi	r2,1
    d7b4:	10809a04 	addi	r2,r2,616
    d7b8:	10800017 	ldw	r2,0(r2)
    d7bc:	103ee83a 	callr	r2
    d7c0:	00000206 	br	d7cc <alt_get_errno+0x3c>
    d7c4:	00800074 	movhi	r2,1
    d7c8:	10877e04 	addi	r2,r2,7672
}
    d7cc:	e037883a 	mov	sp,fp
    d7d0:	dfc00117 	ldw	ra,4(sp)
    d7d4:	df000017 	ldw	fp,0(sp)
    d7d8:	dec00204 	addi	sp,sp,8
    d7dc:	f800283a 	ret

0000d7e0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    d7e0:	defffd04 	addi	sp,sp,-12
    d7e4:	df000215 	stw	fp,8(sp)
    d7e8:	df000204 	addi	fp,sp,8
    d7ec:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    d7f0:	e0bfff17 	ldw	r2,-4(fp)
    d7f4:	10800217 	ldw	r2,8(r2)
    d7f8:	10d00034 	orhi	r3,r2,16384
    d7fc:	e0bfff17 	ldw	r2,-4(fp)
    d800:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    d804:	e03ffe15 	stw	zero,-8(fp)
    d808:	00001d06 	br	d880 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    d80c:	00800074 	movhi	r2,1
    d810:	10bc1604 	addi	r2,r2,-4008
    d814:	e0fffe17 	ldw	r3,-8(fp)
    d818:	18c00324 	muli	r3,r3,12
    d81c:	10c5883a 	add	r2,r2,r3
    d820:	10c00017 	ldw	r3,0(r2)
    d824:	e0bfff17 	ldw	r2,-4(fp)
    d828:	10800017 	ldw	r2,0(r2)
    d82c:	1880111e 	bne	r3,r2,d874 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    d830:	00800074 	movhi	r2,1
    d834:	10bc1604 	addi	r2,r2,-4008
    d838:	e0fffe17 	ldw	r3,-8(fp)
    d83c:	18c00324 	muli	r3,r3,12
    d840:	10c5883a 	add	r2,r2,r3
    d844:	10800204 	addi	r2,r2,8
    d848:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    d84c:	1000090e 	bge	r2,zero,d874 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    d850:	e0bffe17 	ldw	r2,-8(fp)
    d854:	10c00324 	muli	r3,r2,12
    d858:	00800074 	movhi	r2,1
    d85c:	10bc1604 	addi	r2,r2,-4008
    d860:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    d864:	e0bfff17 	ldw	r2,-4(fp)
    d868:	18800226 	beq	r3,r2,d874 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    d86c:	00bffcc4 	movi	r2,-13
    d870:	00000a06 	br	d89c <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    d874:	e0bffe17 	ldw	r2,-8(fp)
    d878:	10800044 	addi	r2,r2,1
    d87c:	e0bffe15 	stw	r2,-8(fp)
    d880:	00800074 	movhi	r2,1
    d884:	10809904 	addi	r2,r2,612
    d888:	10800017 	ldw	r2,0(r2)
    d88c:	1007883a 	mov	r3,r2
    d890:	e0bffe17 	ldw	r2,-8(fp)
    d894:	18bfdd2e 	bgeu	r3,r2,d80c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    d898:	0005883a 	mov	r2,zero
}
    d89c:	e037883a 	mov	sp,fp
    d8a0:	df000017 	ldw	fp,0(sp)
    d8a4:	dec00104 	addi	sp,sp,4
    d8a8:	f800283a 	ret

0000d8ac <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    d8ac:	defff604 	addi	sp,sp,-40
    d8b0:	dfc00915 	stw	ra,36(sp)
    d8b4:	df000815 	stw	fp,32(sp)
    d8b8:	df000804 	addi	fp,sp,32
    d8bc:	e13ffd15 	stw	r4,-12(fp)
    d8c0:	e17ffe15 	stw	r5,-8(fp)
    d8c4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    d8c8:	00bfffc4 	movi	r2,-1
    d8cc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    d8d0:	00bffb44 	movi	r2,-19
    d8d4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    d8d8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    d8dc:	01400074 	movhi	r5,1
    d8e0:	29409704 	addi	r5,r5,604
    d8e4:	e13ffd17 	ldw	r4,-12(fp)
    d8e8:	000df240 	call	df24 <alt_find_dev>
    d8ec:	e0bff815 	stw	r2,-32(fp)
    d8f0:	e0bff817 	ldw	r2,-32(fp)
    d8f4:	1000051e 	bne	r2,zero,d90c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    d8f8:	e13ffd17 	ldw	r4,-12(fp)
    d8fc:	000dfb40 	call	dfb4 <alt_find_file>
    d900:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    d904:	00800044 	movi	r2,1
    d908:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    d90c:	e0bff817 	ldw	r2,-32(fp)
    d910:	10002926 	beq	r2,zero,d9b8 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    d914:	e13ff817 	ldw	r4,-32(fp)
    d918:	000e0c80 	call	e0c8 <alt_get_fd>
    d91c:	e0bff915 	stw	r2,-28(fp)
    d920:	e0bff917 	ldw	r2,-28(fp)
    d924:	1000030e 	bge	r2,zero,d934 <open+0x88>
    {
      status = index;
    d928:	e0bff917 	ldw	r2,-28(fp)
    d92c:	e0bffa15 	stw	r2,-24(fp)
    d930:	00002306 	br	d9c0 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
    d934:	e0bff917 	ldw	r2,-28(fp)
    d938:	10c00324 	muli	r3,r2,12
    d93c:	00800074 	movhi	r2,1
    d940:	10bc1604 	addi	r2,r2,-4008
    d944:	1885883a 	add	r2,r3,r2
    d948:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    d94c:	e0fffe17 	ldw	r3,-8(fp)
    d950:	00900034 	movhi	r2,16384
    d954:	10bfffc4 	addi	r2,r2,-1
    d958:	1886703a 	and	r3,r3,r2
    d95c:	e0bffc17 	ldw	r2,-16(fp)
    d960:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    d964:	e0bffb17 	ldw	r2,-20(fp)
    d968:	1000051e 	bne	r2,zero,d980 <open+0xd4>
    d96c:	e13ffc17 	ldw	r4,-16(fp)
    d970:	000d7e00 	call	d7e0 <alt_file_locked>
    d974:	e0bffa15 	stw	r2,-24(fp)
    d978:	e0bffa17 	ldw	r2,-24(fp)
    d97c:	10001016 	blt	r2,zero,d9c0 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    d980:	e0bff817 	ldw	r2,-32(fp)
    d984:	10800317 	ldw	r2,12(r2)
    d988:	10000826 	beq	r2,zero,d9ac <open+0x100>
    d98c:	e0bff817 	ldw	r2,-32(fp)
    d990:	10800317 	ldw	r2,12(r2)
    d994:	e1ffff17 	ldw	r7,-4(fp)
    d998:	e1bffe17 	ldw	r6,-8(fp)
    d99c:	e17ffd17 	ldw	r5,-12(fp)
    d9a0:	e13ffc17 	ldw	r4,-16(fp)
    d9a4:	103ee83a 	callr	r2
    d9a8:	00000106 	br	d9b0 <open+0x104>
    d9ac:	0005883a 	mov	r2,zero
    d9b0:	e0bffa15 	stw	r2,-24(fp)
    d9b4:	00000206 	br	d9c0 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
    d9b8:	00bffb44 	movi	r2,-19
    d9bc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    d9c0:	e0bffa17 	ldw	r2,-24(fp)
    d9c4:	1000090e 	bge	r2,zero,d9ec <open+0x140>
  {
    alt_release_fd (index);  
    d9c8:	e13ff917 	ldw	r4,-28(fp)
    d9cc:	00038ec0 	call	38ec <alt_release_fd>
    ALT_ERRNO = -status;
    d9d0:	000d7900 	call	d790 <alt_get_errno>
    d9d4:	1007883a 	mov	r3,r2
    d9d8:	e0bffa17 	ldw	r2,-24(fp)
    d9dc:	0085c83a 	sub	r2,zero,r2
    d9e0:	18800015 	stw	r2,0(r3)
    return -1;
    d9e4:	00bfffc4 	movi	r2,-1
    d9e8:	00000106 	br	d9f0 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    d9ec:	e0bff917 	ldw	r2,-28(fp)
}
    d9f0:	e037883a 	mov	sp,fp
    d9f4:	dfc00117 	ldw	ra,4(sp)
    d9f8:	df000017 	ldw	fp,0(sp)
    d9fc:	dec00204 	addi	sp,sp,8
    da00:	f800283a 	ret

0000da04 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    da04:	defffa04 	addi	sp,sp,-24
    da08:	df000515 	stw	fp,20(sp)
    da0c:	df000504 	addi	fp,sp,20
    da10:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    da14:	0005303a 	rdctl	r2,status
    da18:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    da1c:	e0fffc17 	ldw	r3,-16(fp)
    da20:	00bfff84 	movi	r2,-2
    da24:	1884703a 	and	r2,r3,r2
    da28:	1001703a 	wrctl	status,r2
  
  return context;
    da2c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    da30:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    da34:	e0bfff17 	ldw	r2,-4(fp)
    da38:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    da3c:	e0bffd17 	ldw	r2,-12(fp)
    da40:	10800017 	ldw	r2,0(r2)
    da44:	e0fffd17 	ldw	r3,-12(fp)
    da48:	18c00117 	ldw	r3,4(r3)
    da4c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    da50:	e0bffd17 	ldw	r2,-12(fp)
    da54:	10800117 	ldw	r2,4(r2)
    da58:	e0fffd17 	ldw	r3,-12(fp)
    da5c:	18c00017 	ldw	r3,0(r3)
    da60:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    da64:	e0bffd17 	ldw	r2,-12(fp)
    da68:	e0fffd17 	ldw	r3,-12(fp)
    da6c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    da70:	e0bffd17 	ldw	r2,-12(fp)
    da74:	e0fffd17 	ldw	r3,-12(fp)
    da78:	10c00015 	stw	r3,0(r2)
    da7c:	e0bffb17 	ldw	r2,-20(fp)
    da80:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    da84:	e0bffe17 	ldw	r2,-8(fp)
    da88:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    da8c:	0001883a 	nop
    da90:	e037883a 	mov	sp,fp
    da94:	df000017 	ldw	fp,0(sp)
    da98:	dec00104 	addi	sp,sp,4
    da9c:	f800283a 	ret

0000daa0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    daa0:	defffb04 	addi	sp,sp,-20
    daa4:	dfc00415 	stw	ra,16(sp)
    daa8:	df000315 	stw	fp,12(sp)
    daac:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    dab0:	d0a02b17 	ldw	r2,-32596(gp)
    dab4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    dab8:	d0a70c17 	ldw	r2,-25552(gp)
    dabc:	10800044 	addi	r2,r2,1
    dac0:	d0a70c15 	stw	r2,-25552(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    dac4:	00002e06 	br	db80 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    dac8:	e0bffd17 	ldw	r2,-12(fp)
    dacc:	10800017 	ldw	r2,0(r2)
    dad0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    dad4:	e0bffd17 	ldw	r2,-12(fp)
    dad8:	10800403 	ldbu	r2,16(r2)
    dadc:	10803fcc 	andi	r2,r2,255
    dae0:	10000426 	beq	r2,zero,daf4 <alt_tick+0x54>
    dae4:	d0a70c17 	ldw	r2,-25552(gp)
    dae8:	1000021e 	bne	r2,zero,daf4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    daec:	e0bffd17 	ldw	r2,-12(fp)
    daf0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    daf4:	e0bffd17 	ldw	r2,-12(fp)
    daf8:	10800217 	ldw	r2,8(r2)
    dafc:	d0e70c17 	ldw	r3,-25552(gp)
    db00:	18801d36 	bltu	r3,r2,db78 <alt_tick+0xd8>
    db04:	e0bffd17 	ldw	r2,-12(fp)
    db08:	10800403 	ldbu	r2,16(r2)
    db0c:	10803fcc 	andi	r2,r2,255
    db10:	1000191e 	bne	r2,zero,db78 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    db14:	e0bffd17 	ldw	r2,-12(fp)
    db18:	10800317 	ldw	r2,12(r2)
    db1c:	e0fffd17 	ldw	r3,-12(fp)
    db20:	18c00517 	ldw	r3,20(r3)
    db24:	1809883a 	mov	r4,r3
    db28:	103ee83a 	callr	r2
    db2c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    db30:	e0bfff17 	ldw	r2,-4(fp)
    db34:	1000031e 	bne	r2,zero,db44 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    db38:	e13ffd17 	ldw	r4,-12(fp)
    db3c:	000da040 	call	da04 <alt_alarm_stop>
    db40:	00000d06 	br	db78 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    db44:	e0bffd17 	ldw	r2,-12(fp)
    db48:	10c00217 	ldw	r3,8(r2)
    db4c:	e0bfff17 	ldw	r2,-4(fp)
    db50:	1887883a 	add	r3,r3,r2
    db54:	e0bffd17 	ldw	r2,-12(fp)
    db58:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    db5c:	e0bffd17 	ldw	r2,-12(fp)
    db60:	10c00217 	ldw	r3,8(r2)
    db64:	d0a70c17 	ldw	r2,-25552(gp)
    db68:	1880032e 	bgeu	r3,r2,db78 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    db6c:	e0bffd17 	ldw	r2,-12(fp)
    db70:	00c00044 	movi	r3,1
    db74:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    db78:	e0bffe17 	ldw	r2,-8(fp)
    db7c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    db80:	e0fffd17 	ldw	r3,-12(fp)
    db84:	d0a02b04 	addi	r2,gp,-32596
    db88:	18bfcf1e 	bne	r3,r2,dac8 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    db8c:	0004d480 	call	4d48 <OSTimeTick>
}
    db90:	0001883a 	nop
    db94:	e037883a 	mov	sp,fp
    db98:	dfc00117 	ldw	ra,4(sp)
    db9c:	df000017 	ldw	fp,0(sp)
    dba0:	dec00204 	addi	sp,sp,8
    dba4:	f800283a 	ret

0000dba8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    dba8:	deffff04 	addi	sp,sp,-4
    dbac:	df000015 	stw	fp,0(sp)
    dbb0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    dbb4:	000170fa 	wrctl	ienable,zero
}
    dbb8:	0001883a 	nop
    dbbc:	e037883a 	mov	sp,fp
    dbc0:	df000017 	ldw	fp,0(sp)
    dbc4:	dec00104 	addi	sp,sp,4
    dbc8:	f800283a 	ret

0000dbcc <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
    dbcc:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
    dbd0:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
    dbd4:	d1270517 	ldw	r4,-25580(gp)

      stw ra,  0(sp)
    dbd8:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
    dbdc:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
    dbe0:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
    dbe4:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
    dbe8:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
    dbec:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
    dbf0:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
    dbf4:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
    dbf8:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
    dbfc:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
    dc00:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
    dc04:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
    dc08:	000de400 	call	de40 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
    dc0c:	d1270017 	ldw	r4,-25600(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
    dc10:	d166f807 	ldb	r5,-25632(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
    dc14:	d1270515 	stw	r4,-25580(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
    dc18:	d166f845 	stb	r5,-25631(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
    dc1c:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
    dc20:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
    dc24:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
    dc28:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
    dc2c:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
    dc30:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
    dc34:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
    dc38:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
    dc3c:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
    dc40:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
    dc44:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
    dc48:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
    dc4c:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
    dc50:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
    dc54:	f800283a 	ret

0000dc58 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
    dc58:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
    dc5c:	047fff84 	movi	r17,-2
      and   r18, r18, r17
    dc60:	9464703a 	and	r18,r18,r17
      wrctl status, r18
    dc64:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
    dc68:	000de400 	call	de40 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
    dc6c:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
    dc70:	d4a6f645 	stb	r18,-25639(gp)

      /*
       * start execution of the new task.
       */

      br 9b
    dc74:	003fe506 	br	dc0c <OSCtxSw+0x40>

0000dc78 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
    dc78:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
    dc7c:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
    dc80:	10800054 	ori	r2,r2,1
      wrctl status, r2
    dc84:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
    dc88:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
    dc8c:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
    dc90:	dec00204 	addi	sp,sp,8

      callr r2
    dc94:	103ee83a 	callr	r2

      nop
    dc98:	0001883a 	nop

0000dc9c <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
    dc9c:	defff704 	addi	sp,sp,-36
    dca0:	dfc00815 	stw	ra,32(sp)
    dca4:	df000715 	stw	fp,28(sp)
    dca8:	df000704 	addi	fp,sp,28
    dcac:	e13ffc15 	stw	r4,-16(fp)
    dcb0:	e17ffd15 	stw	r5,-12(fp)
    dcb4:	e1bffe15 	stw	r6,-8(fp)
    dcb8:	3805883a 	mov	r2,r7
    dcbc:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
    dcc0:	e0fffe17 	ldw	r3,-8(fp)
    dcc4:	00bfff04 	movi	r2,-4
    dcc8:	1884703a 	and	r2,r3,r2
    dccc:	10bef704 	addi	r2,r2,-1060
    dcd0:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
    dcd4:	01810904 	movi	r6,1060
    dcd8:	000b883a 	mov	r5,zero
    dcdc:	e13ff917 	ldw	r4,-28(fp)
    dce0:	0001a940 	call	1a94 <memset>
    dce4:	e0bff917 	ldw	r2,-28(fp)
    dce8:	10c0bb04 	addi	r3,r2,748
    dcec:	e0bff917 	ldw	r2,-28(fp)
    dcf0:	10c00115 	stw	r3,4(r2)
    dcf4:	e0bff917 	ldw	r2,-28(fp)
    dcf8:	10c0d504 	addi	r3,r2,852
    dcfc:	e0bff917 	ldw	r2,-28(fp)
    dd00:	10c00215 	stw	r3,8(r2)
    dd04:	e0bff917 	ldw	r2,-28(fp)
    dd08:	10c0ef04 	addi	r3,r2,956
    dd0c:	e0bff917 	ldw	r2,-28(fp)
    dd10:	10c00315 	stw	r3,12(r2)
    dd14:	e0fff917 	ldw	r3,-28(fp)
    dd18:	00800074 	movhi	r2,1
    dd1c:	10ba0004 	addi	r2,r2,-6144
    dd20:	18800d15 	stw	r2,52(r3)
    dd24:	e0bff917 	ldw	r2,-28(fp)
    dd28:	00c00044 	movi	r3,1
    dd2c:	10c02915 	stw	r3,164(r2)
    dd30:	10002a15 	stw	zero,168(r2)
    dd34:	e0bff917 	ldw	r2,-28(fp)
    dd38:	00ccc384 	movi	r3,13070
    dd3c:	10c02b0d 	sth	r3,172(r2)
    dd40:	e0bff917 	ldw	r2,-28(fp)
    dd44:	00eaf344 	movi	r3,-21555
    dd48:	10c02b8d 	sth	r3,174(r2)
    dd4c:	e0bff917 	ldw	r2,-28(fp)
    dd50:	00c48d04 	movi	r3,4660
    dd54:	10c02c0d 	sth	r3,176(r2)
    dd58:	e0bff917 	ldw	r2,-28(fp)
    dd5c:	00f99b44 	movi	r3,-6547
    dd60:	10c02c8d 	sth	r3,178(r2)
    dd64:	e0bff917 	ldw	r2,-28(fp)
    dd68:	00f7bb04 	movi	r3,-8468
    dd6c:	10c02d0d 	sth	r3,180(r2)
    dd70:	e0bff917 	ldw	r2,-28(fp)
    dd74:	00c00144 	movi	r3,5
    dd78:	10c02d8d 	sth	r3,182(r2)
    dd7c:	e0bff917 	ldw	r2,-28(fp)
    dd80:	00c002c4 	movi	r3,11
    dd84:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
    dd88:	e0bff917 	ldw	r2,-28(fp)
    dd8c:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
    dd90:	e0bffa17 	ldw	r2,-24(fp)
    dd94:	10bff304 	addi	r2,r2,-52
    dd98:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
    dd9c:	e0bffb17 	ldw	r2,-20(fp)
    dda0:	10800c04 	addi	r2,r2,48
    dda4:	e0fffc17 	ldw	r3,-16(fp)
    dda8:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
    ddac:	e0bffb17 	ldw	r2,-20(fp)
    ddb0:	10800b04 	addi	r2,r2,44
    ddb4:	e0fffd17 	ldw	r3,-12(fp)
    ddb8:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
    ddbc:	e0bffb17 	ldw	r2,-20(fp)
    ddc0:	10800a04 	addi	r2,r2,40
    ddc4:	e0fff917 	ldw	r3,-28(fp)
    ddc8:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
    ddcc:	00800074 	movhi	r2,1
    ddd0:	10b71e04 	addi	r2,r2,-9096
    ddd4:	10c00104 	addi	r3,r2,4
    ddd8:	e0bffb17 	ldw	r2,-20(fp)
    dddc:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
    dde0:	e0bffb17 	ldw	r2,-20(fp)
}
    dde4:	e037883a 	mov	sp,fp
    dde8:	dfc00117 	ldw	ra,4(sp)
    ddec:	df000017 	ldw	fp,0(sp)
    ddf0:	dec00204 	addi	sp,sp,8
    ddf4:	f800283a 	ret

0000ddf8 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
    ddf8:	defffe04 	addi	sp,sp,-8
    ddfc:	df000115 	stw	fp,4(sp)
    de00:	df000104 	addi	fp,sp,4
    de04:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
    de08:	0001883a 	nop
    de0c:	e037883a 	mov	sp,fp
    de10:	df000017 	ldw	fp,0(sp)
    de14:	dec00104 	addi	sp,sp,4
    de18:	f800283a 	ret

0000de1c <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
    de1c:	defffe04 	addi	sp,sp,-8
    de20:	df000115 	stw	fp,4(sp)
    de24:	df000104 	addi	fp,sp,4
    de28:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
    de2c:	0001883a 	nop
    de30:	e037883a 	mov	sp,fp
    de34:	df000017 	ldw	fp,0(sp)
    de38:	dec00104 	addi	sp,sp,4
    de3c:	f800283a 	ret

0000de40 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
    de40:	deffff04 	addi	sp,sp,-4
    de44:	df000015 	stw	fp,0(sp)
    de48:	d839883a 	mov	fp,sp
}
    de4c:	0001883a 	nop
    de50:	e037883a 	mov	sp,fp
    de54:	df000017 	ldw	fp,0(sp)
    de58:	dec00104 	addi	sp,sp,4
    de5c:	f800283a 	ret

0000de60 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
    de60:	deffff04 	addi	sp,sp,-4
    de64:	df000015 	stw	fp,0(sp)
    de68:	d839883a 	mov	fp,sp
}
    de6c:	0001883a 	nop
    de70:	e037883a 	mov	sp,fp
    de74:	df000017 	ldw	fp,0(sp)
    de78:	dec00104 	addi	sp,sp,4
    de7c:	f800283a 	ret

0000de80 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
    de80:	deffff04 	addi	sp,sp,-4
    de84:	df000015 	stw	fp,0(sp)
    de88:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
    de8c:	0001883a 	nop
    de90:	e037883a 	mov	sp,fp
    de94:	df000017 	ldw	fp,0(sp)
    de98:	dec00104 	addi	sp,sp,4
    de9c:	f800283a 	ret

0000dea0 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
    dea0:	deffff04 	addi	sp,sp,-4
    dea4:	df000015 	stw	fp,0(sp)
    dea8:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
    deac:	0001883a 	nop
    deb0:	e037883a 	mov	sp,fp
    deb4:	df000017 	ldw	fp,0(sp)
    deb8:	dec00104 	addi	sp,sp,4
    debc:	f800283a 	ret

0000dec0 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
    dec0:	deffff04 	addi	sp,sp,-4
    dec4:	df000015 	stw	fp,0(sp)
    dec8:	d839883a 	mov	fp,sp
}
    decc:	0001883a 	nop
    ded0:	e037883a 	mov	sp,fp
    ded4:	df000017 	ldw	fp,0(sp)
    ded8:	dec00104 	addi	sp,sp,4
    dedc:	f800283a 	ret

0000dee0 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
    dee0:	deffff04 	addi	sp,sp,-4
    dee4:	df000015 	stw	fp,0(sp)
    dee8:	d839883a 	mov	fp,sp
}
    deec:	0001883a 	nop
    def0:	e037883a 	mov	sp,fp
    def4:	df000017 	ldw	fp,0(sp)
    def8:	dec00104 	addi	sp,sp,4
    defc:	f800283a 	ret

0000df00 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
    df00:	defffe04 	addi	sp,sp,-8
    df04:	df000115 	stw	fp,4(sp)
    df08:	df000104 	addi	fp,sp,4
    df0c:	e13fff15 	stw	r4,-4(fp)
}
    df10:	0001883a 	nop
    df14:	e037883a 	mov	sp,fp
    df18:	df000017 	ldw	fp,0(sp)
    df1c:	dec00104 	addi	sp,sp,4
    df20:	f800283a 	ret

0000df24 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    df24:	defffa04 	addi	sp,sp,-24
    df28:	dfc00515 	stw	ra,20(sp)
    df2c:	df000415 	stw	fp,16(sp)
    df30:	df000404 	addi	fp,sp,16
    df34:	e13ffe15 	stw	r4,-8(fp)
    df38:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    df3c:	e0bfff17 	ldw	r2,-4(fp)
    df40:	10800017 	ldw	r2,0(r2)
    df44:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    df48:	e13ffe17 	ldw	r4,-8(fp)
    df4c:	00004840 	call	484 <strlen>
    df50:	10800044 	addi	r2,r2,1
    df54:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    df58:	00000d06 	br	df90 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    df5c:	e0bffc17 	ldw	r2,-16(fp)
    df60:	10800217 	ldw	r2,8(r2)
    df64:	e0fffd17 	ldw	r3,-12(fp)
    df68:	180d883a 	mov	r6,r3
    df6c:	e17ffe17 	ldw	r5,-8(fp)
    df70:	1009883a 	mov	r4,r2
    df74:	000e33c0 	call	e33c <memcmp>
    df78:	1000021e 	bne	r2,zero,df84 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    df7c:	e0bffc17 	ldw	r2,-16(fp)
    df80:	00000706 	br	dfa0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    df84:	e0bffc17 	ldw	r2,-16(fp)
    df88:	10800017 	ldw	r2,0(r2)
    df8c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    df90:	e0fffc17 	ldw	r3,-16(fp)
    df94:	e0bfff17 	ldw	r2,-4(fp)
    df98:	18bff01e 	bne	r3,r2,df5c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    df9c:	0005883a 	mov	r2,zero
}
    dfa0:	e037883a 	mov	sp,fp
    dfa4:	dfc00117 	ldw	ra,4(sp)
    dfa8:	df000017 	ldw	fp,0(sp)
    dfac:	dec00204 	addi	sp,sp,8
    dfb0:	f800283a 	ret

0000dfb4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    dfb4:	defffb04 	addi	sp,sp,-20
    dfb8:	dfc00415 	stw	ra,16(sp)
    dfbc:	df000315 	stw	fp,12(sp)
    dfc0:	df000304 	addi	fp,sp,12
    dfc4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    dfc8:	00800074 	movhi	r2,1
    dfcc:	10809504 	addi	r2,r2,596
    dfd0:	10800017 	ldw	r2,0(r2)
    dfd4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    dfd8:	00003106 	br	e0a0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    dfdc:	e0bffd17 	ldw	r2,-12(fp)
    dfe0:	10800217 	ldw	r2,8(r2)
    dfe4:	1009883a 	mov	r4,r2
    dfe8:	00004840 	call	484 <strlen>
    dfec:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    dff0:	e0bffd17 	ldw	r2,-12(fp)
    dff4:	10c00217 	ldw	r3,8(r2)
    dff8:	e0bffe17 	ldw	r2,-8(fp)
    dffc:	10bfffc4 	addi	r2,r2,-1
    e000:	1885883a 	add	r2,r3,r2
    e004:	10800003 	ldbu	r2,0(r2)
    e008:	10803fcc 	andi	r2,r2,255
    e00c:	1080201c 	xori	r2,r2,128
    e010:	10bfe004 	addi	r2,r2,-128
    e014:	10800bd8 	cmpnei	r2,r2,47
    e018:	1000031e 	bne	r2,zero,e028 <alt_find_file+0x74>
    {
      len -= 1;
    e01c:	e0bffe17 	ldw	r2,-8(fp)
    e020:	10bfffc4 	addi	r2,r2,-1
    e024:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    e028:	e0bffe17 	ldw	r2,-8(fp)
    e02c:	e0ffff17 	ldw	r3,-4(fp)
    e030:	1885883a 	add	r2,r3,r2
    e034:	10800003 	ldbu	r2,0(r2)
    e038:	10803fcc 	andi	r2,r2,255
    e03c:	1080201c 	xori	r2,r2,128
    e040:	10bfe004 	addi	r2,r2,-128
    e044:	10800be0 	cmpeqi	r2,r2,47
    e048:	1000081e 	bne	r2,zero,e06c <alt_find_file+0xb8>
    e04c:	e0bffe17 	ldw	r2,-8(fp)
    e050:	e0ffff17 	ldw	r3,-4(fp)
    e054:	1885883a 	add	r2,r3,r2
    e058:	10800003 	ldbu	r2,0(r2)
    e05c:	10803fcc 	andi	r2,r2,255
    e060:	1080201c 	xori	r2,r2,128
    e064:	10bfe004 	addi	r2,r2,-128
    e068:	10000a1e 	bne	r2,zero,e094 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    e06c:	e0bffd17 	ldw	r2,-12(fp)
    e070:	10800217 	ldw	r2,8(r2)
    e074:	e0fffe17 	ldw	r3,-8(fp)
    e078:	180d883a 	mov	r6,r3
    e07c:	e17fff17 	ldw	r5,-4(fp)
    e080:	1009883a 	mov	r4,r2
    e084:	000e33c0 	call	e33c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    e088:	1000021e 	bne	r2,zero,e094 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    e08c:	e0bffd17 	ldw	r2,-12(fp)
    e090:	00000806 	br	e0b4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    e094:	e0bffd17 	ldw	r2,-12(fp)
    e098:	10800017 	ldw	r2,0(r2)
    e09c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    e0a0:	e0fffd17 	ldw	r3,-12(fp)
    e0a4:	00800074 	movhi	r2,1
    e0a8:	10809504 	addi	r2,r2,596
    e0ac:	18bfcb1e 	bne	r3,r2,dfdc <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    e0b0:	0005883a 	mov	r2,zero
}
    e0b4:	e037883a 	mov	sp,fp
    e0b8:	dfc00117 	ldw	ra,4(sp)
    e0bc:	df000017 	ldw	fp,0(sp)
    e0c0:	dec00204 	addi	sp,sp,8
    e0c4:	f800283a 	ret

0000e0c8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    e0c8:	defff904 	addi	sp,sp,-28
    e0cc:	dfc00615 	stw	ra,24(sp)
    e0d0:	df000515 	stw	fp,20(sp)
    e0d4:	df000504 	addi	fp,sp,20
    e0d8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    e0dc:	00bffa04 	movi	r2,-24
    e0e0:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
    e0e4:	00800074 	movhi	r2,1
    e0e8:	10877f04 	addi	r2,r2,7676
    e0ec:	10800017 	ldw	r2,0(r2)
    e0f0:	e0bffd15 	stw	r2,-12(fp)
    e0f4:	e03ffe0d 	sth	zero,-8(fp)
    e0f8:	e0bffe0b 	ldhu	r2,-8(fp)
    e0fc:	e0fffe84 	addi	r3,fp,-6
    e100:	180d883a 	mov	r6,r3
    e104:	100b883a 	mov	r5,r2
    e108:	e13ffd17 	ldw	r4,-12(fp)
    e10c:	0009b640 	call	9b64 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    e110:	e03ffb15 	stw	zero,-20(fp)
    e114:	00001d06 	br	e18c <alt_get_fd+0xc4>
  {
    if (!alt_fd_list[i].dev)
    e118:	00800074 	movhi	r2,1
    e11c:	10bc1604 	addi	r2,r2,-4008
    e120:	e0fffb17 	ldw	r3,-20(fp)
    e124:	18c00324 	muli	r3,r3,12
    e128:	10c5883a 	add	r2,r2,r3
    e12c:	10800017 	ldw	r2,0(r2)
    e130:	1000131e 	bne	r2,zero,e180 <alt_get_fd+0xb8>
    {
      alt_fd_list[i].dev = dev;
    e134:	00800074 	movhi	r2,1
    e138:	10bc1604 	addi	r2,r2,-4008
    e13c:	e0fffb17 	ldw	r3,-20(fp)
    e140:	18c00324 	muli	r3,r3,12
    e144:	10c5883a 	add	r2,r2,r3
    e148:	e0ffff17 	ldw	r3,-4(fp)
    e14c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    e150:	00800074 	movhi	r2,1
    e154:	10809904 	addi	r2,r2,612
    e158:	10c00017 	ldw	r3,0(r2)
    e15c:	e0bffb17 	ldw	r2,-20(fp)
    e160:	1880040e 	bge	r3,r2,e174 <alt_get_fd+0xac>
      {
        alt_max_fd = i;
    e164:	00800074 	movhi	r2,1
    e168:	10809904 	addi	r2,r2,612
    e16c:	e0fffb17 	ldw	r3,-20(fp)
    e170:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    e174:	e0bffb17 	ldw	r2,-20(fp)
    e178:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
    e17c:	00000606 	br	e198 <alt_get_fd+0xd0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    e180:	e0bffb17 	ldw	r2,-20(fp)
    e184:	10800044 	addi	r2,r2,1
    e188:	e0bffb15 	stw	r2,-20(fp)
    e18c:	e0bffb17 	ldw	r2,-20(fp)
    e190:	10800810 	cmplti	r2,r2,32
    e194:	103fe01e 	bne	r2,zero,e118 <alt_get_fd+0x50>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
    e198:	00800074 	movhi	r2,1
    e19c:	10877f04 	addi	r2,r2,7676
    e1a0:	10800017 	ldw	r2,0(r2)
    e1a4:	1009883a 	mov	r4,r2
    e1a8:	0009f3c0 	call	9f3c <OSSemPost>

  return rc;
    e1ac:	e0bffc17 	ldw	r2,-16(fp)
}
    e1b0:	e037883a 	mov	sp,fp
    e1b4:	dfc00117 	ldw	ra,4(sp)
    e1b8:	df000017 	ldw	fp,0(sp)
    e1bc:	dec00204 	addi	sp,sp,8
    e1c0:	f800283a 	ret

0000e1c4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    e1c4:	defffb04 	addi	sp,sp,-20
    e1c8:	df000415 	stw	fp,16(sp)
    e1cc:	df000404 	addi	fp,sp,16
    e1d0:	e13ffe15 	stw	r4,-8(fp)
    e1d4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    e1d8:	e0bfff17 	ldw	r2,-4(fp)
    e1dc:	10840070 	cmpltui	r2,r2,4097
    e1e0:	1000021e 	bne	r2,zero,e1ec <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    e1e4:	00840004 	movi	r2,4096
    e1e8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    e1ec:	e0fffe17 	ldw	r3,-8(fp)
    e1f0:	e0bfff17 	ldw	r2,-4(fp)
    e1f4:	1885883a 	add	r2,r3,r2
    e1f8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    e1fc:	e0bffe17 	ldw	r2,-8(fp)
    e200:	e0bffc15 	stw	r2,-16(fp)
    e204:	00000506 	br	e21c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    e208:	e0bffc17 	ldw	r2,-16(fp)
    e20c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    e210:	e0bffc17 	ldw	r2,-16(fp)
    e214:	10800804 	addi	r2,r2,32
    e218:	e0bffc15 	stw	r2,-16(fp)
    e21c:	e0fffc17 	ldw	r3,-16(fp)
    e220:	e0bffd17 	ldw	r2,-12(fp)
    e224:	18bff836 	bltu	r3,r2,e208 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    e228:	e0bffe17 	ldw	r2,-8(fp)
    e22c:	108007cc 	andi	r2,r2,31
    e230:	10000226 	beq	r2,zero,e23c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    e234:	e0bffc17 	ldw	r2,-16(fp)
    e238:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    e23c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    e240:	0001883a 	nop
    e244:	e037883a 	mov	sp,fp
    e248:	df000017 	ldw	fp,0(sp)
    e24c:	dec00104 	addi	sp,sp,4
    e250:	f800283a 	ret

0000e254 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    e254:	defffe04 	addi	sp,sp,-8
    e258:	df000115 	stw	fp,4(sp)
    e25c:	df000104 	addi	fp,sp,4
    e260:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    e264:	e0bfff17 	ldw	r2,-4(fp)
    e268:	10bffe84 	addi	r2,r2,-6
    e26c:	10c00428 	cmpgeui	r3,r2,16
    e270:	18001a1e 	bne	r3,zero,e2dc <alt_exception_cause_generated_bad_addr+0x88>
    e274:	100690ba 	slli	r3,r2,2
    e278:	00800074 	movhi	r2,1
    e27c:	10b8a304 	addi	r2,r2,-7540
    e280:	1885883a 	add	r2,r3,r2
    e284:	10800017 	ldw	r2,0(r2)
    e288:	1000683a 	jmp	r2
    e28c:	0000e2cc 	andi	zero,zero,907
    e290:	0000e2cc 	andi	zero,zero,907
    e294:	0000e2dc 	xori	zero,zero,907
    e298:	0000e2dc 	xori	zero,zero,907
    e29c:	0000e2dc 	xori	zero,zero,907
    e2a0:	0000e2cc 	andi	zero,zero,907
    e2a4:	0000e2d4 	movui	zero,907
    e2a8:	0000e2dc 	xori	zero,zero,907
    e2ac:	0000e2cc 	andi	zero,zero,907
    e2b0:	0000e2cc 	andi	zero,zero,907
    e2b4:	0000e2dc 	xori	zero,zero,907
    e2b8:	0000e2cc 	andi	zero,zero,907
    e2bc:	0000e2d4 	movui	zero,907
    e2c0:	0000e2dc 	xori	zero,zero,907
    e2c4:	0000e2dc 	xori	zero,zero,907
    e2c8:	0000e2cc 	andi	zero,zero,907
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    e2cc:	00800044 	movi	r2,1
    e2d0:	00000306 	br	e2e0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    e2d4:	0005883a 	mov	r2,zero
    e2d8:	00000106 	br	e2e0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    e2dc:	0005883a 	mov	r2,zero
  }
}
    e2e0:	e037883a 	mov	sp,fp
    e2e4:	df000017 	ldw	fp,0(sp)
    e2e8:	dec00104 	addi	sp,sp,4
    e2ec:	f800283a 	ret

0000e2f0 <atexit>:
    e2f0:	200b883a 	mov	r5,r4
    e2f4:	000f883a 	mov	r7,zero
    e2f8:	000d883a 	mov	r6,zero
    e2fc:	0009883a 	mov	r4,zero
    e300:	000e3b81 	jmpi	e3b8 <__register_exitproc>

0000e304 <exit>:
    e304:	defffe04 	addi	sp,sp,-8
    e308:	000b883a 	mov	r5,zero
    e30c:	dc000015 	stw	r16,0(sp)
    e310:	dfc00115 	stw	ra,4(sp)
    e314:	2021883a 	mov	r16,r4
    e318:	000e4d00 	call	e4d0 <__call_exitprocs>
    e31c:	00800074 	movhi	r2,1
    e320:	10809104 	addi	r2,r2,580
    e324:	11000017 	ldw	r4,0(r2)
    e328:	20800f17 	ldw	r2,60(r4)
    e32c:	10000126 	beq	r2,zero,e334 <exit+0x30>
    e330:	103ee83a 	callr	r2
    e334:	8009883a 	mov	r4,r16
    e338:	000e6500 	call	e650 <_exit>

0000e33c <memcmp>:
    e33c:	01c000c4 	movi	r7,3
    e340:	3980192e 	bgeu	r7,r6,e3a8 <memcmp+0x6c>
    e344:	2144b03a 	or	r2,r4,r5
    e348:	11c4703a 	and	r2,r2,r7
    e34c:	10000f26 	beq	r2,zero,e38c <memcmp+0x50>
    e350:	20800003 	ldbu	r2,0(r4)
    e354:	28c00003 	ldbu	r3,0(r5)
    e358:	10c0151e 	bne	r2,r3,e3b0 <memcmp+0x74>
    e35c:	31bfff84 	addi	r6,r6,-2
    e360:	01ffffc4 	movi	r7,-1
    e364:	00000406 	br	e378 <memcmp+0x3c>
    e368:	20800003 	ldbu	r2,0(r4)
    e36c:	28c00003 	ldbu	r3,0(r5)
    e370:	31bfffc4 	addi	r6,r6,-1
    e374:	10c00e1e 	bne	r2,r3,e3b0 <memcmp+0x74>
    e378:	21000044 	addi	r4,r4,1
    e37c:	29400044 	addi	r5,r5,1
    e380:	31fff91e 	bne	r6,r7,e368 <memcmp+0x2c>
    e384:	0005883a 	mov	r2,zero
    e388:	f800283a 	ret
    e38c:	20c00017 	ldw	r3,0(r4)
    e390:	28800017 	ldw	r2,0(r5)
    e394:	18bfee1e 	bne	r3,r2,e350 <memcmp+0x14>
    e398:	31bfff04 	addi	r6,r6,-4
    e39c:	21000104 	addi	r4,r4,4
    e3a0:	29400104 	addi	r5,r5,4
    e3a4:	39bff936 	bltu	r7,r6,e38c <memcmp+0x50>
    e3a8:	303fe91e 	bne	r6,zero,e350 <memcmp+0x14>
    e3ac:	003ff506 	br	e384 <memcmp+0x48>
    e3b0:	10c5c83a 	sub	r2,r2,r3
    e3b4:	f800283a 	ret

0000e3b8 <__register_exitproc>:
    e3b8:	defffa04 	addi	sp,sp,-24
    e3bc:	dc000315 	stw	r16,12(sp)
    e3c0:	04000074 	movhi	r16,1
    e3c4:	84009104 	addi	r16,r16,580
    e3c8:	80c00017 	ldw	r3,0(r16)
    e3cc:	dc400415 	stw	r17,16(sp)
    e3d0:	dfc00515 	stw	ra,20(sp)
    e3d4:	18805217 	ldw	r2,328(r3)
    e3d8:	2023883a 	mov	r17,r4
    e3dc:	10003726 	beq	r2,zero,e4bc <__register_exitproc+0x104>
    e3e0:	10c00117 	ldw	r3,4(r2)
    e3e4:	010007c4 	movi	r4,31
    e3e8:	20c00e16 	blt	r4,r3,e424 <__register_exitproc+0x6c>
    e3ec:	1a000044 	addi	r8,r3,1
    e3f0:	8800221e 	bne	r17,zero,e47c <__register_exitproc+0xc4>
    e3f4:	18c00084 	addi	r3,r3,2
    e3f8:	18c7883a 	add	r3,r3,r3
    e3fc:	18c7883a 	add	r3,r3,r3
    e400:	12000115 	stw	r8,4(r2)
    e404:	10c7883a 	add	r3,r2,r3
    e408:	19400015 	stw	r5,0(r3)
    e40c:	0005883a 	mov	r2,zero
    e410:	dfc00517 	ldw	ra,20(sp)
    e414:	dc400417 	ldw	r17,16(sp)
    e418:	dc000317 	ldw	r16,12(sp)
    e41c:	dec00604 	addi	sp,sp,24
    e420:	f800283a 	ret
    e424:	00800034 	movhi	r2,0
    e428:	10800004 	addi	r2,r2,0
    e42c:	10002626 	beq	r2,zero,e4c8 <__register_exitproc+0x110>
    e430:	01006404 	movi	r4,400
    e434:	d9400015 	stw	r5,0(sp)
    e438:	d9800115 	stw	r6,4(sp)
    e43c:	d9c00215 	stw	r7,8(sp)
    e440:	00000000 	call	0 <__alt_mem_SDRAM>
    e444:	d9400017 	ldw	r5,0(sp)
    e448:	d9800117 	ldw	r6,4(sp)
    e44c:	d9c00217 	ldw	r7,8(sp)
    e450:	10001d26 	beq	r2,zero,e4c8 <__register_exitproc+0x110>
    e454:	81000017 	ldw	r4,0(r16)
    e458:	10000115 	stw	zero,4(r2)
    e45c:	02000044 	movi	r8,1
    e460:	22405217 	ldw	r9,328(r4)
    e464:	0007883a 	mov	r3,zero
    e468:	12400015 	stw	r9,0(r2)
    e46c:	20805215 	stw	r2,328(r4)
    e470:	10006215 	stw	zero,392(r2)
    e474:	10006315 	stw	zero,396(r2)
    e478:	883fde26 	beq	r17,zero,e3f4 <__register_exitproc+0x3c>
    e47c:	18c9883a 	add	r4,r3,r3
    e480:	2109883a 	add	r4,r4,r4
    e484:	1109883a 	add	r4,r2,r4
    e488:	21802215 	stw	r6,136(r4)
    e48c:	01800044 	movi	r6,1
    e490:	12406217 	ldw	r9,392(r2)
    e494:	30cc983a 	sll	r6,r6,r3
    e498:	4992b03a 	or	r9,r9,r6
    e49c:	12406215 	stw	r9,392(r2)
    e4a0:	21c04215 	stw	r7,264(r4)
    e4a4:	01000084 	movi	r4,2
    e4a8:	893fd21e 	bne	r17,r4,e3f4 <__register_exitproc+0x3c>
    e4ac:	11006317 	ldw	r4,396(r2)
    e4b0:	218cb03a 	or	r6,r4,r6
    e4b4:	11806315 	stw	r6,396(r2)
    e4b8:	003fce06 	br	e3f4 <__register_exitproc+0x3c>
    e4bc:	18805304 	addi	r2,r3,332
    e4c0:	18805215 	stw	r2,328(r3)
    e4c4:	003fc606 	br	e3e0 <__register_exitproc+0x28>
    e4c8:	00bfffc4 	movi	r2,-1
    e4cc:	003fd006 	br	e410 <__register_exitproc+0x58>

0000e4d0 <__call_exitprocs>:
    e4d0:	defff504 	addi	sp,sp,-44
    e4d4:	df000915 	stw	fp,36(sp)
    e4d8:	dd400615 	stw	r21,24(sp)
    e4dc:	dc800315 	stw	r18,12(sp)
    e4e0:	dfc00a15 	stw	ra,40(sp)
    e4e4:	ddc00815 	stw	r23,32(sp)
    e4e8:	dd800715 	stw	r22,28(sp)
    e4ec:	dd000515 	stw	r20,20(sp)
    e4f0:	dcc00415 	stw	r19,16(sp)
    e4f4:	dc400215 	stw	r17,8(sp)
    e4f8:	dc000115 	stw	r16,4(sp)
    e4fc:	d9000015 	stw	r4,0(sp)
    e500:	2839883a 	mov	fp,r5
    e504:	04800044 	movi	r18,1
    e508:	057fffc4 	movi	r21,-1
    e50c:	00800074 	movhi	r2,1
    e510:	10809104 	addi	r2,r2,580
    e514:	12000017 	ldw	r8,0(r2)
    e518:	45005217 	ldw	r20,328(r8)
    e51c:	44c05204 	addi	r19,r8,328
    e520:	a0001c26 	beq	r20,zero,e594 <__call_exitprocs+0xc4>
    e524:	a0800117 	ldw	r2,4(r20)
    e528:	15ffffc4 	addi	r23,r2,-1
    e52c:	b8000d16 	blt	r23,zero,e564 <__call_exitprocs+0x94>
    e530:	14000044 	addi	r16,r2,1
    e534:	8421883a 	add	r16,r16,r16
    e538:	8421883a 	add	r16,r16,r16
    e53c:	84402004 	addi	r17,r16,128
    e540:	a463883a 	add	r17,r20,r17
    e544:	a421883a 	add	r16,r20,r16
    e548:	e0001e26 	beq	fp,zero,e5c4 <__call_exitprocs+0xf4>
    e54c:	80804017 	ldw	r2,256(r16)
    e550:	e0801c26 	beq	fp,r2,e5c4 <__call_exitprocs+0xf4>
    e554:	bdffffc4 	addi	r23,r23,-1
    e558:	843fff04 	addi	r16,r16,-4
    e55c:	8c7fff04 	addi	r17,r17,-4
    e560:	bd7ff91e 	bne	r23,r21,e548 <__call_exitprocs+0x78>
    e564:	00800034 	movhi	r2,0
    e568:	10800004 	addi	r2,r2,0
    e56c:	10000926 	beq	r2,zero,e594 <__call_exitprocs+0xc4>
    e570:	a0800117 	ldw	r2,4(r20)
    e574:	1000301e 	bne	r2,zero,e638 <__call_exitprocs+0x168>
    e578:	a0800017 	ldw	r2,0(r20)
    e57c:	10003226 	beq	r2,zero,e648 <__call_exitprocs+0x178>
    e580:	a009883a 	mov	r4,r20
    e584:	98800015 	stw	r2,0(r19)
    e588:	00000000 	call	0 <__alt_mem_SDRAM>
    e58c:	9d000017 	ldw	r20,0(r19)
    e590:	a03fe41e 	bne	r20,zero,e524 <__call_exitprocs+0x54>
    e594:	dfc00a17 	ldw	ra,40(sp)
    e598:	df000917 	ldw	fp,36(sp)
    e59c:	ddc00817 	ldw	r23,32(sp)
    e5a0:	dd800717 	ldw	r22,28(sp)
    e5a4:	dd400617 	ldw	r21,24(sp)
    e5a8:	dd000517 	ldw	r20,20(sp)
    e5ac:	dcc00417 	ldw	r19,16(sp)
    e5b0:	dc800317 	ldw	r18,12(sp)
    e5b4:	dc400217 	ldw	r17,8(sp)
    e5b8:	dc000117 	ldw	r16,4(sp)
    e5bc:	dec00b04 	addi	sp,sp,44
    e5c0:	f800283a 	ret
    e5c4:	a0800117 	ldw	r2,4(r20)
    e5c8:	80c00017 	ldw	r3,0(r16)
    e5cc:	10bfffc4 	addi	r2,r2,-1
    e5d0:	15c01426 	beq	r2,r23,e624 <__call_exitprocs+0x154>
    e5d4:	80000015 	stw	zero,0(r16)
    e5d8:	183fde26 	beq	r3,zero,e554 <__call_exitprocs+0x84>
    e5dc:	95c8983a 	sll	r4,r18,r23
    e5e0:	a0806217 	ldw	r2,392(r20)
    e5e4:	a5800117 	ldw	r22,4(r20)
    e5e8:	2084703a 	and	r2,r4,r2
    e5ec:	10000b26 	beq	r2,zero,e61c <__call_exitprocs+0x14c>
    e5f0:	a0806317 	ldw	r2,396(r20)
    e5f4:	2088703a 	and	r4,r4,r2
    e5f8:	20000c1e 	bne	r4,zero,e62c <__call_exitprocs+0x15c>
    e5fc:	89400017 	ldw	r5,0(r17)
    e600:	d9000017 	ldw	r4,0(sp)
    e604:	183ee83a 	callr	r3
    e608:	a0800117 	ldw	r2,4(r20)
    e60c:	15bfbf1e 	bne	r2,r22,e50c <__call_exitprocs+0x3c>
    e610:	98800017 	ldw	r2,0(r19)
    e614:	153fcf26 	beq	r2,r20,e554 <__call_exitprocs+0x84>
    e618:	003fbc06 	br	e50c <__call_exitprocs+0x3c>
    e61c:	183ee83a 	callr	r3
    e620:	003ff906 	br	e608 <__call_exitprocs+0x138>
    e624:	a5c00115 	stw	r23,4(r20)
    e628:	003feb06 	br	e5d8 <__call_exitprocs+0x108>
    e62c:	89000017 	ldw	r4,0(r17)
    e630:	183ee83a 	callr	r3
    e634:	003ff406 	br	e608 <__call_exitprocs+0x138>
    e638:	a0800017 	ldw	r2,0(r20)
    e63c:	a027883a 	mov	r19,r20
    e640:	1029883a 	mov	r20,r2
    e644:	003fb606 	br	e520 <__call_exitprocs+0x50>
    e648:	0005883a 	mov	r2,zero
    e64c:	003ffb06 	br	e63c <__call_exitprocs+0x16c>

0000e650 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    e650:	defffd04 	addi	sp,sp,-12
    e654:	df000215 	stw	fp,8(sp)
    e658:	df000204 	addi	fp,sp,8
    e65c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    e660:	00800074 	movhi	r2,1
    e664:	10878744 	addi	r2,r2,7709
    e668:	10000005 	stb	zero,0(r2)
    e66c:	e0bfff17 	ldw	r2,-4(fp)
    e670:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    e674:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    e678:	10000226 	beq	r2,zero,e684 <_exit+0x34>
    ALT_SIM_FAIL();
    e67c:	002af070 	cmpltui	zero,zero,43969
    e680:	00000106 	br	e688 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
    e684:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    e688:	003fff06 	br	e688 <_exit+0x38>
