
sw_design.elf:     file format elf32-littlenios2
sw_design.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00005a2c memsz 0x00005a2c flags r-x
    LOAD off    0x00006a4c vaddr 0x00005a4c paddr 0x000074b8 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00008f24 vaddr 0x00008f24 paddr 0x00008f24 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000057b4  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000054  000059f8  000059f8  000069f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  00005a4c  000074b8  00006a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00008f24  00008f24  00008f24  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00009078  00009078  000084b8  2**0
                  CONTENTS
  7 .SRAM         00000000  04020000  04020000  000084b8  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000084b8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000a30  00000000  00000000  000084e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00016528  00000000  00000000  00008f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000060a7  00000000  00000000  0001f438  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006a03  00000000  00000000  000254df  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001590  00000000  00000000  0002bee4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000274c  00000000  00000000  0002d474  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000049c3  00000000  00000000  0002fbc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00034584  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000680  00000000  00000000  000345b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000371d9  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000b  00000000  00000000  000371dc  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000371e7  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000371e8  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000371e9  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000371ed  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000371f1  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000004  00000000  00000000  000371f5  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000004  00000000  00000000  000371f9  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000004  00000000  00000000  000371fd  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000a  00000000  00000000  00037201  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001b  00000000  00000000  0003720b  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0005d209  00000000  00000000  00037226  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
000059f8 l    d  .rodata	00000000 .rodata
00005a4c l    d  .rwdata	00000000 .rwdata
00008f24 l    d  .bss	00000000 .bss
00009078 l    d  .SDRAM	00000000 .SDRAM
04020000 l    d  .SRAM	00000000 .SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../sw_design_bsp//obj/HAL/src/crt0.o
0000028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
000004bc l     F .text	00000008 __fp_unlock
000004d0 l     F .text	0000019c __sinit.part.1
0000066c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00005a4c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
00003118 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00003238 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00003264 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00003364 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00003458 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00003544 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000372c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000074a8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000398c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00003ad4 l     F .text	00000038 alt_dev_reg
00006420 l     O .rwdata	00001060 JTAG
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00003dd4 l     F .text	0000020c altera_avalon_jtag_uart_irq
00003fe0 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00004620 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000048ac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00004d64 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00004ea4 l     F .text	00000050 alt_get_errno
00004ef4 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00008f4c g     O .bss	00000004 alt_instruction_exception_handler
00002f10 g     F .text	00000054 _isatty_r
00003668 g     F .text	0000007c alt_main
00000350 g     F .text	000000c0 _puts_r
00008f78 g     O .bss	00000100 alt_irq
00002c38 g     F .text	00000060 _lseek_r
000074b8 g       *ABS*	00000000 __flash_rwdata_start
00009078 g       *ABS*	00000000 __alt_heap_start
000021ec g     F .text	0000005c __sseek
0000080c g     F .text	00000010 __sinit
00000674 g     F .text	00000068 __sfmoreglue
00003708 g     F .text	00000024 __malloc_unlock
000018d8 g     F .text	0000015c memmove
000007f4 g     F .text	00000018 _cleanup
000052bc g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00002eb4 g     F .text	0000005c _fstat_r
00008f30 g     O .bss	00000004 errno
00002168 g     F .text	00000008 __seofread
00008f38 g     O .bss	00000004 alt_argv
0000f480 g       *ABS*	00000000 _gp
000062a0 g     O .rwdata	00000180 alt_fd_list
000052e0 g     F .text	00000090 alt_find_dev
00001790 g     F .text	00000148 memcpy
000004c4 g     F .text	0000000c _cleanup_r
00004e28 g     F .text	0000007c alt_io_redirect
000059f8 g       *ABS*	00000000 __DTOR_END__
00000410 g     F .text	00000014 puts
000055c8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000041e0 g     F .text	0000021c altera_avalon_jtag_uart_read
0000305c g     F .text	00000064 .hidden __udivsi3
000033b4 g     F .text	000000a4 isatty
00005538 g     F .text	00000090 alt_icache_flush
00008f2c g     O .bss	00000004 __malloc_top_pad
0000085c g     F .text	000004bc __sfvwrite_r
000020c0 g     F .text	00000054 _sbrk_r
00002e54 g     F .text	00000060 _read_r
000074a0 g     O .rwdata	00000004 alt_max_fd
00002458 g     F .text	000000f0 _fclose_r
000027d4 g     F .text	00000030 fflush
00008f28 g     O .bss	00000004 __malloc_max_sbrked_mem
00003594 g     F .text	000000d4 lseek
00007480 g     O .rwdata	00000004 _global_impure_ptr
00001b5c g     F .text	00000564 _realloc_r
00009078 g       *ABS*	00000000 __bss_end
00004c74 g     F .text	000000f0 alt_iic_isr_register
000051b4 g     F .text	00000108 alt_tick
0000082c g     F .text	00000018 __fp_lock_all
00004c28 g     F .text	0000004c alt_ic_irq_enabled
00005118 g     F .text	0000009c alt_alarm_stop
00008f40 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00006278 g     O .rwdata	00000028 alt_dev_null
00004864 g     F .text	00000048 alt_dcache_flush_all
000074b8 g       *ABS*	00000000 __ram_rwdata_end
00007498 g     O .rwdata	00000008 alt_dev_list
000039dc g     F .text	000000f8 write
00005a4c g       *ABS*	00000000 __ram_rodata_end
000032b4 g     F .text	000000b0 fstat
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
000030c0 g     F .text	00000058 .hidden __umodsi3
00009078 g       *ABS*	00000000 end
00003d0c g     F .text	000000c8 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
000059f8 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00004698 g     F .text	0000008c alt_avalon_timer_sc_init
000043fc g     F .text	00000224 altera_avalon_jtag_uart_write
0000081c g     F .text	00000004 __sfp_lock_acquire
000016ac g     F .text	000000e4 memchr
00002928 g     F .text	00000310 _free_r
00005844 g     F .text	00000180 __call_exitprocs
00007488 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000004c _start
00008f44 g     O .bss	00000004 _alt_tick_rate
00008f48 g     O .bss	00000004 _alt_nticks
0000377c g     F .text	000000fc read
00003b44 g     F .text	00000064 alt_sys_init
0000572c g     F .text	00000118 __register_exitproc
00004088 g     F .text	00000068 altera_avalon_jtag_uart_close
00005a4c g       *ABS*	00000000 __ram_rwdata_start
000059f8 g       *ABS*	00000000 __ram_rodata_start
00008f50 g     O .bss	00000028 __malloc_current_mallinfo
00003ba8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00005484 g     F .text	000000b4 alt_get_fd
00002404 g     F .text	00000054 _close_r
000056b0 g     F .text	0000007c memcmp
00003c68 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00009078 g       *ABS*	00000000 __alt_stack_base
00003cb8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000022b0 g     F .text	00000154 __swsetup_r
000006dc g     F .text	00000118 __sfp
00005e70 g     O .rwdata	00000408 __malloc_av_
00000828 g     F .text	00000004 __sinit_lock_release
00002114 g     F .text	00000054 __sread
00005370 g     F .text	00000114 alt_find_file
000048fc g     F .text	000000a4 alt_dev_llist_insert
000036e4 g     F .text	00000024 __malloc_lock
000038dc g     F .text	000000b0 sbrk
00002778 g     F .text	0000005c _fflush_r
00008f24 g       *ABS*	00000000 __bss_start
00001a34 g     F .text	00000128 memset
00000290 g     F .text	000000c0 main
00008f3c g     O .bss	00000004 alt_envp
00008f24 g     O .bss	00000004 __malloc_max_total_mem
00003c08 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00002248 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
00002548 g     F .text	00000014 fclose
00000ea0 g     F .text	0000080c _malloc_r
000074a4 g     O .rwdata	00000004 alt_errno
00000d18 g     F .text	000000c4 _fwalk
00002f64 g     F .text	00000084 .hidden __divsi3
00002804 g     F .text	00000124 _malloc_trim_r
000059f8 g       *ABS*	00000000 __CTOR_END__
000059f8 g       *ABS*	00000000 __flash_rodata_start
000059f8 g       *ABS*	00000000 __DTOR_LIST__
00003b0c g     F .text	00000038 alt_irq_init
00003878 g     F .text	00000064 alt_release_fd
00005664 g     F .text	00000014 atexit
00002250 g     F .text	00000060 _write_r
00007484 g     O .rwdata	00000004 _impure_ptr
00008f34 g     O .bss	00000004 alt_argc
0000255c g     F .text	0000021c __sflush_r
00004a00 g     F .text	00000060 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00000844 g     F .text	00000018 __fp_unlock_all
00007490 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00004a94 g     F .text	00000050 alt_ic_isr_register
000074b8 g       *ABS*	00000000 _edata
00009078 g       *ABS*	00000000 _end
00000244 g       *ABS*	00000000 __ram_exceptions_end
000040f0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00004b84 g     F .text	000000a4 alt_ic_irq_disable
00002170 g     F .text	0000007c __swrite
0000748c g     O .rwdata	00000004 __malloc_trim_threshold
00005678 g     F .text	00000038 exit
00000ddc g     F .text	000000c4 _fwalk_reent
00002fe8 g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000820 g     F .text	00000004 __sfp_lock_release
000059c4 g     F .text	00000034 _exit
00004724 g     F .text	00000140 alt_alarm_start
00002c98 g     F .text	000001bc __smakebuf_r
00000424 g     F .text	00000098 strlen
00004fc0 g     F .text	00000158 open
04020000 g       *ABS*	00000000 __alt_mem_SRAM
00004a60 g     F .text	00000034 alt_icache_flush_all
000074ac g     O .rwdata	00000004 alt_priority_mask
00004ae4 g     F .text	000000a0 alt_ic_irq_enable
000074b0 g     O .rwdata	00000008 alt_alarm_list
000049a0 g     F .text	00000060 _do_ctors
00003168 g     F .text	000000d0 close
000034c0 g     F .text	00000084 alt_load
00000824 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10a3de04 	addi	r2,r2,-28808
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10a3de04 	addi	r2,r2,-28808
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a6b317 	ldw	r2,-25908(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a6b317 	ldw	r2,-25908(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     24c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     250:	00bffd16 	blt	zero,r2,248 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     254:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     25c:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     260:	d6bd2014 	ori	gp,gp,62592
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     264:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     268:	10a3c914 	ori	r2,r2,36644

    movhi r3, %hi(__bss_end)
     26c:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     270:	18e41e14 	ori	r3,r3,36984

    beq r2, r3, 1f
     274:	10c00326 	beq	r2,r3,284 <_start+0x40>

0:
    stw zero, (r2)
     278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     27c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     280:	10fffd36 	bltu	r2,r3,278 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     284:	00034c00 	call	34c0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     288:	00036680 	call	3668 <alt_main>

0000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     28c:	003fff06 	br	28c <alt_after_alt_main>

00000290 <main>:
#include "string.h"



int main()
{
     290:	defffd04 	addi	sp,sp,-12
     294:	dfc00215 	stw	ra,8(sp)
     298:	df000115 	stw	fp,4(sp)
     29c:	df000104 	addi	fp,sp,4
  printf("Hello from Nios II, Begin to run....!\n");
     2a0:	01000034 	movhi	r4,0
     2a4:	21167e04 	addi	r4,r4,23032
     2a8:	00004100 	call	410 <puts>

	  while (counter < 5000000) {
		  counter++;
	  }*/

	  IOWR(0x04041000, 0x0, 1);
     2ac:	00c00044 	movi	r3,1
     2b0:	00810134 	movhi	r2,1028
     2b4:	10840004 	addi	r2,r2,4096
     2b8:	10c00035 	stwio	r3,0(r2)
	  IOWR(0x04041000, 0x1, 1);
     2bc:	00c00044 	movi	r3,1
     2c0:	00810134 	movhi	r2,1028
     2c4:	10840104 	addi	r2,r2,4100
     2c8:	10c00035 	stwio	r3,0(r2)
	  IOWR(0x04041000, 0x2, 1);
     2cc:	00c00044 	movi	r3,1
     2d0:	00810134 	movhi	r2,1028
     2d4:	10840204 	addi	r2,r2,4104
     2d8:	10c00035 	stwio	r3,0(r2)
	  IOWR(0x04041000, 0x3, 1);
     2dc:	00c00044 	movi	r3,1
     2e0:	00810134 	movhi	r2,1028
     2e4:	10840304 	addi	r2,r2,4108
     2e8:	10c00035 	stwio	r3,0(r2)
	  IOWR(0x04041000, 0x4, 1);
     2ec:	00c00044 	movi	r3,1
     2f0:	00810134 	movhi	r2,1028
     2f4:	10840404 	addi	r2,r2,4112
     2f8:	10c00035 	stwio	r3,0(r2)
	  IOWR(0x04041000, 0x5, 1);
     2fc:	00c00044 	movi	r3,1
     300:	00810134 	movhi	r2,1028
     304:	10840504 	addi	r2,r2,4116
     308:	10c00035 	stwio	r3,0(r2)
	  IOWR(0x04041000, 0x6, 1);
     30c:	00c00044 	movi	r3,1
     310:	00810134 	movhi	r2,1028
     314:	10840604 	addi	r2,r2,4120
     318:	10c00035 	stwio	r3,0(r2)
	  IOWR(0x04041000, 0x7, 1);
     31c:	00c00044 	movi	r3,1
     320:	00810134 	movhi	r2,1028
     324:	10840704 	addi	r2,r2,4124
     328:	10c00035 	stwio	r3,0(r2)
	  IOWR(0x04041000, 0x8, 1);
     32c:	00c00044 	movi	r3,1
     330:	00810134 	movhi	r2,1028
     334:	10840804 	addi	r2,r2,4128
     338:	10c00035 	stwio	r3,0(r2)
	  //printf ("read done\n");
	  unsigned int ret = IORD(0x04041000, 0x9);
     33c:	00810134 	movhi	r2,1028
     340:	10840904 	addi	r2,r2,4132
     344:	10800037 	ldwio	r2,0(r2)
     348:	e0bfff15 	stw	r2,-4(fp)
	  //printf ("return value:[%d]\n", ret);
  }
     34c:	003fd706 	br	2ac <main+0x1c>

00000350 <_puts_r>:
     350:	defff604 	addi	sp,sp,-40
     354:	dc000715 	stw	r16,28(sp)
     358:	2021883a 	mov	r16,r4
     35c:	2809883a 	mov	r4,r5
     360:	dc400815 	stw	r17,32(sp)
     364:	dfc00915 	stw	ra,36(sp)
     368:	2823883a 	mov	r17,r5
     36c:	00004240 	call	424 <strlen>
     370:	10c00044 	addi	r3,r2,1
     374:	d8800115 	stw	r2,4(sp)
     378:	00800034 	movhi	r2,0
     37c:	10968804 	addi	r2,r2,23072
     380:	d8800215 	stw	r2,8(sp)
     384:	00800044 	movi	r2,1
     388:	d8800315 	stw	r2,12(sp)
     38c:	00800084 	movi	r2,2
     390:	dc400015 	stw	r17,0(sp)
     394:	d8c00615 	stw	r3,24(sp)
     398:	dec00415 	stw	sp,16(sp)
     39c:	d8800515 	stw	r2,20(sp)
     3a0:	80000226 	beq	r16,zero,3ac <_puts_r+0x5c>
     3a4:	80800e17 	ldw	r2,56(r16)
     3a8:	10001426 	beq	r2,zero,3fc <_puts_r+0xac>
     3ac:	81400217 	ldw	r5,8(r16)
     3b0:	2880030b 	ldhu	r2,12(r5)
     3b4:	10c8000c 	andi	r3,r2,8192
     3b8:	1800061e 	bne	r3,zero,3d4 <_puts_r+0x84>
     3bc:	29001917 	ldw	r4,100(r5)
     3c0:	00f7ffc4 	movi	r3,-8193
     3c4:	10880014 	ori	r2,r2,8192
     3c8:	20c6703a 	and	r3,r4,r3
     3cc:	2880030d 	sth	r2,12(r5)
     3d0:	28c01915 	stw	r3,100(r5)
     3d4:	d9800404 	addi	r6,sp,16
     3d8:	8009883a 	mov	r4,r16
     3dc:	000085c0 	call	85c <__sfvwrite_r>
     3e0:	1000091e 	bne	r2,zero,408 <_puts_r+0xb8>
     3e4:	00800284 	movi	r2,10
     3e8:	dfc00917 	ldw	ra,36(sp)
     3ec:	dc400817 	ldw	r17,32(sp)
     3f0:	dc000717 	ldw	r16,28(sp)
     3f4:	dec00a04 	addi	sp,sp,40
     3f8:	f800283a 	ret
     3fc:	8009883a 	mov	r4,r16
     400:	000080c0 	call	80c <__sinit>
     404:	003fe906 	br	3ac <_puts_r+0x5c>
     408:	00bfffc4 	movi	r2,-1
     40c:	003ff606 	br	3e8 <_puts_r+0x98>

00000410 <puts>:
     410:	00800034 	movhi	r2,0
     414:	109d2104 	addi	r2,r2,29828
     418:	200b883a 	mov	r5,r4
     41c:	11000017 	ldw	r4,0(r2)
     420:	00003501 	jmpi	350 <_puts_r>

00000424 <strlen>:
     424:	208000cc 	andi	r2,r4,3
     428:	10002026 	beq	r2,zero,4ac <strlen+0x88>
     42c:	20800007 	ldb	r2,0(r4)
     430:	10002026 	beq	r2,zero,4b4 <strlen+0x90>
     434:	2005883a 	mov	r2,r4
     438:	00000206 	br	444 <strlen+0x20>
     43c:	10c00007 	ldb	r3,0(r2)
     440:	18001826 	beq	r3,zero,4a4 <strlen+0x80>
     444:	10800044 	addi	r2,r2,1
     448:	10c000cc 	andi	r3,r2,3
     44c:	183ffb1e 	bne	r3,zero,43c <strlen+0x18>
     450:	10c00017 	ldw	r3,0(r2)
     454:	01ffbff4 	movhi	r7,65279
     458:	39ffbfc4 	addi	r7,r7,-257
     45c:	00ca303a 	nor	r5,zero,r3
     460:	01a02074 	movhi	r6,32897
     464:	19c7883a 	add	r3,r3,r7
     468:	31a02004 	addi	r6,r6,-32640
     46c:	1946703a 	and	r3,r3,r5
     470:	1986703a 	and	r3,r3,r6
     474:	1800091e 	bne	r3,zero,49c <strlen+0x78>
     478:	10800104 	addi	r2,r2,4
     47c:	10c00017 	ldw	r3,0(r2)
     480:	19cb883a 	add	r5,r3,r7
     484:	00c6303a 	nor	r3,zero,r3
     488:	28c6703a 	and	r3,r5,r3
     48c:	1986703a 	and	r3,r3,r6
     490:	183ff926 	beq	r3,zero,478 <strlen+0x54>
     494:	00000106 	br	49c <strlen+0x78>
     498:	10800044 	addi	r2,r2,1
     49c:	10c00007 	ldb	r3,0(r2)
     4a0:	183ffd1e 	bne	r3,zero,498 <strlen+0x74>
     4a4:	1105c83a 	sub	r2,r2,r4
     4a8:	f800283a 	ret
     4ac:	2005883a 	mov	r2,r4
     4b0:	003fe706 	br	450 <strlen+0x2c>
     4b4:	0005883a 	mov	r2,zero
     4b8:	f800283a 	ret

000004bc <__fp_unlock>:
     4bc:	0005883a 	mov	r2,zero
     4c0:	f800283a 	ret

000004c4 <_cleanup_r>:
     4c4:	01400034 	movhi	r5,0
     4c8:	29491604 	addi	r5,r5,9304
     4cc:	0000ddc1 	jmpi	ddc <_fwalk_reent>

000004d0 <__sinit.part.1>:
     4d0:	defff704 	addi	sp,sp,-36
     4d4:	00c00034 	movhi	r3,0
     4d8:	dfc00815 	stw	ra,32(sp)
     4dc:	ddc00715 	stw	r23,28(sp)
     4e0:	dd800615 	stw	r22,24(sp)
     4e4:	dd400515 	stw	r21,20(sp)
     4e8:	dd000415 	stw	r20,16(sp)
     4ec:	dcc00315 	stw	r19,12(sp)
     4f0:	dc800215 	stw	r18,8(sp)
     4f4:	dc400115 	stw	r17,4(sp)
     4f8:	dc000015 	stw	r16,0(sp)
     4fc:	18c13104 	addi	r3,r3,1220
     500:	24000117 	ldw	r16,4(r4)
     504:	20c00f15 	stw	r3,60(r4)
     508:	2080bb04 	addi	r2,r4,748
     50c:	00c000c4 	movi	r3,3
     510:	20c0b915 	stw	r3,740(r4)
     514:	2080ba15 	stw	r2,744(r4)
     518:	2000b815 	stw	zero,736(r4)
     51c:	05c00204 	movi	r23,8
     520:	00800104 	movi	r2,4
     524:	2025883a 	mov	r18,r4
     528:	b80d883a 	mov	r6,r23
     52c:	81001704 	addi	r4,r16,92
     530:	000b883a 	mov	r5,zero
     534:	80000015 	stw	zero,0(r16)
     538:	80000115 	stw	zero,4(r16)
     53c:	80000215 	stw	zero,8(r16)
     540:	8080030d 	sth	r2,12(r16)
     544:	80001915 	stw	zero,100(r16)
     548:	8000038d 	sth	zero,14(r16)
     54c:	80000415 	stw	zero,16(r16)
     550:	80000515 	stw	zero,20(r16)
     554:	80000615 	stw	zero,24(r16)
     558:	0001a340 	call	1a34 <memset>
     55c:	05800034 	movhi	r22,0
     560:	94400217 	ldw	r17,8(r18)
     564:	05400034 	movhi	r21,0
     568:	05000034 	movhi	r20,0
     56c:	04c00034 	movhi	r19,0
     570:	b5884504 	addi	r22,r22,8468
     574:	ad485c04 	addi	r21,r21,8560
     578:	a5087b04 	addi	r20,r20,8684
     57c:	9cc89204 	addi	r19,r19,8776
     580:	85800815 	stw	r22,32(r16)
     584:	85400915 	stw	r21,36(r16)
     588:	85000a15 	stw	r20,40(r16)
     58c:	84c00b15 	stw	r19,44(r16)
     590:	84000715 	stw	r16,28(r16)
     594:	00800284 	movi	r2,10
     598:	8880030d 	sth	r2,12(r17)
     59c:	00800044 	movi	r2,1
     5a0:	b80d883a 	mov	r6,r23
     5a4:	89001704 	addi	r4,r17,92
     5a8:	000b883a 	mov	r5,zero
     5ac:	88000015 	stw	zero,0(r17)
     5b0:	88000115 	stw	zero,4(r17)
     5b4:	88000215 	stw	zero,8(r17)
     5b8:	88001915 	stw	zero,100(r17)
     5bc:	8880038d 	sth	r2,14(r17)
     5c0:	88000415 	stw	zero,16(r17)
     5c4:	88000515 	stw	zero,20(r17)
     5c8:	88000615 	stw	zero,24(r17)
     5cc:	0001a340 	call	1a34 <memset>
     5d0:	94000317 	ldw	r16,12(r18)
     5d4:	00800484 	movi	r2,18
     5d8:	8c400715 	stw	r17,28(r17)
     5dc:	8d800815 	stw	r22,32(r17)
     5e0:	8d400915 	stw	r21,36(r17)
     5e4:	8d000a15 	stw	r20,40(r17)
     5e8:	8cc00b15 	stw	r19,44(r17)
     5ec:	8080030d 	sth	r2,12(r16)
     5f0:	00800084 	movi	r2,2
     5f4:	80000015 	stw	zero,0(r16)
     5f8:	80000115 	stw	zero,4(r16)
     5fc:	80000215 	stw	zero,8(r16)
     600:	80001915 	stw	zero,100(r16)
     604:	8080038d 	sth	r2,14(r16)
     608:	80000415 	stw	zero,16(r16)
     60c:	80000515 	stw	zero,20(r16)
     610:	80000615 	stw	zero,24(r16)
     614:	b80d883a 	mov	r6,r23
     618:	000b883a 	mov	r5,zero
     61c:	81001704 	addi	r4,r16,92
     620:	0001a340 	call	1a34 <memset>
     624:	00800044 	movi	r2,1
     628:	84000715 	stw	r16,28(r16)
     62c:	85800815 	stw	r22,32(r16)
     630:	85400915 	stw	r21,36(r16)
     634:	85000a15 	stw	r20,40(r16)
     638:	84c00b15 	stw	r19,44(r16)
     63c:	90800e15 	stw	r2,56(r18)
     640:	dfc00817 	ldw	ra,32(sp)
     644:	ddc00717 	ldw	r23,28(sp)
     648:	dd800617 	ldw	r22,24(sp)
     64c:	dd400517 	ldw	r21,20(sp)
     650:	dd000417 	ldw	r20,16(sp)
     654:	dcc00317 	ldw	r19,12(sp)
     658:	dc800217 	ldw	r18,8(sp)
     65c:	dc400117 	ldw	r17,4(sp)
     660:	dc000017 	ldw	r16,0(sp)
     664:	dec00904 	addi	sp,sp,36
     668:	f800283a 	ret

0000066c <__fp_lock>:
     66c:	0005883a 	mov	r2,zero
     670:	f800283a 	ret

00000674 <__sfmoreglue>:
     674:	defffc04 	addi	sp,sp,-16
     678:	dc400115 	stw	r17,4(sp)
     67c:	2c7fffc4 	addi	r17,r5,-1
     680:	8c401a24 	muli	r17,r17,104
     684:	dc800215 	stw	r18,8(sp)
     688:	2825883a 	mov	r18,r5
     68c:	89401d04 	addi	r5,r17,116
     690:	dc000015 	stw	r16,0(sp)
     694:	dfc00315 	stw	ra,12(sp)
     698:	0000ea00 	call	ea0 <_malloc_r>
     69c:	1021883a 	mov	r16,r2
     6a0:	10000726 	beq	r2,zero,6c0 <__sfmoreglue+0x4c>
     6a4:	11000304 	addi	r4,r2,12
     6a8:	10000015 	stw	zero,0(r2)
     6ac:	14800115 	stw	r18,4(r2)
     6b0:	11000215 	stw	r4,8(r2)
     6b4:	89801a04 	addi	r6,r17,104
     6b8:	000b883a 	mov	r5,zero
     6bc:	0001a340 	call	1a34 <memset>
     6c0:	8005883a 	mov	r2,r16
     6c4:	dfc00317 	ldw	ra,12(sp)
     6c8:	dc800217 	ldw	r18,8(sp)
     6cc:	dc400117 	ldw	r17,4(sp)
     6d0:	dc000017 	ldw	r16,0(sp)
     6d4:	dec00404 	addi	sp,sp,16
     6d8:	f800283a 	ret

000006dc <__sfp>:
     6dc:	defffb04 	addi	sp,sp,-20
     6e0:	dc000015 	stw	r16,0(sp)
     6e4:	04000034 	movhi	r16,0
     6e8:	841d2004 	addi	r16,r16,29824
     6ec:	dcc00315 	stw	r19,12(sp)
     6f0:	2027883a 	mov	r19,r4
     6f4:	81000017 	ldw	r4,0(r16)
     6f8:	dfc00415 	stw	ra,16(sp)
     6fc:	dc800215 	stw	r18,8(sp)
     700:	20800e17 	ldw	r2,56(r4)
     704:	dc400115 	stw	r17,4(sp)
     708:	1000021e 	bne	r2,zero,714 <__sfp+0x38>
     70c:	00004d00 	call	4d0 <__sinit.part.1>
     710:	81000017 	ldw	r4,0(r16)
     714:	2480b804 	addi	r18,r4,736
     718:	047fffc4 	movi	r17,-1
     71c:	91000117 	ldw	r4,4(r18)
     720:	94000217 	ldw	r16,8(r18)
     724:	213fffc4 	addi	r4,r4,-1
     728:	20000a16 	blt	r4,zero,754 <__sfp+0x78>
     72c:	8080030f 	ldh	r2,12(r16)
     730:	10000c26 	beq	r2,zero,764 <__sfp+0x88>
     734:	80c01d04 	addi	r3,r16,116
     738:	00000206 	br	744 <__sfp+0x68>
     73c:	18bfe60f 	ldh	r2,-104(r3)
     740:	10000826 	beq	r2,zero,764 <__sfp+0x88>
     744:	213fffc4 	addi	r4,r4,-1
     748:	1c3ffd04 	addi	r16,r3,-12
     74c:	18c01a04 	addi	r3,r3,104
     750:	247ffa1e 	bne	r4,r17,73c <__sfp+0x60>
     754:	90800017 	ldw	r2,0(r18)
     758:	10001d26 	beq	r2,zero,7d0 <__sfp+0xf4>
     75c:	1025883a 	mov	r18,r2
     760:	003fee06 	br	71c <__sfp+0x40>
     764:	00bfffc4 	movi	r2,-1
     768:	8080038d 	sth	r2,14(r16)
     76c:	00800044 	movi	r2,1
     770:	8080030d 	sth	r2,12(r16)
     774:	80001915 	stw	zero,100(r16)
     778:	80000015 	stw	zero,0(r16)
     77c:	80000215 	stw	zero,8(r16)
     780:	80000115 	stw	zero,4(r16)
     784:	80000415 	stw	zero,16(r16)
     788:	80000515 	stw	zero,20(r16)
     78c:	80000615 	stw	zero,24(r16)
     790:	01800204 	movi	r6,8
     794:	000b883a 	mov	r5,zero
     798:	81001704 	addi	r4,r16,92
     79c:	0001a340 	call	1a34 <memset>
     7a0:	8005883a 	mov	r2,r16
     7a4:	80000c15 	stw	zero,48(r16)
     7a8:	80000d15 	stw	zero,52(r16)
     7ac:	80001115 	stw	zero,68(r16)
     7b0:	80001215 	stw	zero,72(r16)
     7b4:	dfc00417 	ldw	ra,16(sp)
     7b8:	dcc00317 	ldw	r19,12(sp)
     7bc:	dc800217 	ldw	r18,8(sp)
     7c0:	dc400117 	ldw	r17,4(sp)
     7c4:	dc000017 	ldw	r16,0(sp)
     7c8:	dec00504 	addi	sp,sp,20
     7cc:	f800283a 	ret
     7d0:	01400104 	movi	r5,4
     7d4:	9809883a 	mov	r4,r19
     7d8:	00006740 	call	674 <__sfmoreglue>
     7dc:	90800015 	stw	r2,0(r18)
     7e0:	103fde1e 	bne	r2,zero,75c <__sfp+0x80>
     7e4:	00800304 	movi	r2,12
     7e8:	98800015 	stw	r2,0(r19)
     7ec:	0005883a 	mov	r2,zero
     7f0:	003ff006 	br	7b4 <__sfp+0xd8>

000007f4 <_cleanup>:
     7f4:	00800034 	movhi	r2,0
     7f8:	109d2004 	addi	r2,r2,29824
     7fc:	11000017 	ldw	r4,0(r2)
     800:	01400034 	movhi	r5,0
     804:	29491604 	addi	r5,r5,9304
     808:	0000ddc1 	jmpi	ddc <_fwalk_reent>

0000080c <__sinit>:
     80c:	20800e17 	ldw	r2,56(r4)
     810:	10000126 	beq	r2,zero,818 <__sinit+0xc>
     814:	f800283a 	ret
     818:	00004d01 	jmpi	4d0 <__sinit.part.1>

0000081c <__sfp_lock_acquire>:
     81c:	f800283a 	ret

00000820 <__sfp_lock_release>:
     820:	f800283a 	ret

00000824 <__sinit_lock_acquire>:
     824:	f800283a 	ret

00000828 <__sinit_lock_release>:
     828:	f800283a 	ret

0000082c <__fp_lock_all>:
     82c:	00800034 	movhi	r2,0
     830:	109d2104 	addi	r2,r2,29828
     834:	11000017 	ldw	r4,0(r2)
     838:	01400034 	movhi	r5,0
     83c:	29419b04 	addi	r5,r5,1644
     840:	0000d181 	jmpi	d18 <_fwalk>

00000844 <__fp_unlock_all>:
     844:	00800034 	movhi	r2,0
     848:	109d2104 	addi	r2,r2,29828
     84c:	11000017 	ldw	r4,0(r2)
     850:	01400034 	movhi	r5,0
     854:	29412f04 	addi	r5,r5,1212
     858:	0000d181 	jmpi	d18 <_fwalk>

0000085c <__sfvwrite_r>:
     85c:	30800217 	ldw	r2,8(r6)
     860:	10006726 	beq	r2,zero,a00 <__sfvwrite_r+0x1a4>
     864:	28c0030b 	ldhu	r3,12(r5)
     868:	defff404 	addi	sp,sp,-48
     86c:	dd400715 	stw	r21,28(sp)
     870:	dd000615 	stw	r20,24(sp)
     874:	dc000215 	stw	r16,8(sp)
     878:	dfc00b15 	stw	ra,44(sp)
     87c:	df000a15 	stw	fp,40(sp)
     880:	ddc00915 	stw	r23,36(sp)
     884:	dd800815 	stw	r22,32(sp)
     888:	dcc00515 	stw	r19,20(sp)
     88c:	dc800415 	stw	r18,16(sp)
     890:	dc400315 	stw	r17,12(sp)
     894:	1880020c 	andi	r2,r3,8
     898:	2821883a 	mov	r16,r5
     89c:	202b883a 	mov	r21,r4
     8a0:	3029883a 	mov	r20,r6
     8a4:	10002726 	beq	r2,zero,944 <__sfvwrite_r+0xe8>
     8a8:	28800417 	ldw	r2,16(r5)
     8ac:	10002526 	beq	r2,zero,944 <__sfvwrite_r+0xe8>
     8b0:	1880008c 	andi	r2,r3,2
     8b4:	a4400017 	ldw	r17,0(r20)
     8b8:	10002a26 	beq	r2,zero,964 <__sfvwrite_r+0x108>
     8bc:	05a00034 	movhi	r22,32768
     8c0:	0027883a 	mov	r19,zero
     8c4:	0025883a 	mov	r18,zero
     8c8:	b5bf0004 	addi	r22,r22,-1024
     8cc:	980d883a 	mov	r6,r19
     8d0:	a809883a 	mov	r4,r21
     8d4:	90004626 	beq	r18,zero,9f0 <__sfvwrite_r+0x194>
     8d8:	900f883a 	mov	r7,r18
     8dc:	b480022e 	bgeu	r22,r18,8e8 <__sfvwrite_r+0x8c>
     8e0:	01e00034 	movhi	r7,32768
     8e4:	39ff0004 	addi	r7,r7,-1024
     8e8:	80800917 	ldw	r2,36(r16)
     8ec:	81400717 	ldw	r5,28(r16)
     8f0:	103ee83a 	callr	r2
     8f4:	0080570e 	bge	zero,r2,a54 <__sfvwrite_r+0x1f8>
     8f8:	a0c00217 	ldw	r3,8(r20)
     8fc:	98a7883a 	add	r19,r19,r2
     900:	90a5c83a 	sub	r18,r18,r2
     904:	1885c83a 	sub	r2,r3,r2
     908:	a0800215 	stw	r2,8(r20)
     90c:	103fef1e 	bne	r2,zero,8cc <__sfvwrite_r+0x70>
     910:	0005883a 	mov	r2,zero
     914:	dfc00b17 	ldw	ra,44(sp)
     918:	df000a17 	ldw	fp,40(sp)
     91c:	ddc00917 	ldw	r23,36(sp)
     920:	dd800817 	ldw	r22,32(sp)
     924:	dd400717 	ldw	r21,28(sp)
     928:	dd000617 	ldw	r20,24(sp)
     92c:	dcc00517 	ldw	r19,20(sp)
     930:	dc800417 	ldw	r18,16(sp)
     934:	dc400317 	ldw	r17,12(sp)
     938:	dc000217 	ldw	r16,8(sp)
     93c:	dec00c04 	addi	sp,sp,48
     940:	f800283a 	ret
     944:	800b883a 	mov	r5,r16
     948:	a809883a 	mov	r4,r21
     94c:	00022b00 	call	22b0 <__swsetup_r>
     950:	1000eb1e 	bne	r2,zero,d00 <__sfvwrite_r+0x4a4>
     954:	80c0030b 	ldhu	r3,12(r16)
     958:	a4400017 	ldw	r17,0(r20)
     95c:	1880008c 	andi	r2,r3,2
     960:	103fd61e 	bne	r2,zero,8bc <__sfvwrite_r+0x60>
     964:	1880004c 	andi	r2,r3,1
     968:	10003f1e 	bne	r2,zero,a68 <__sfvwrite_r+0x20c>
     96c:	0039883a 	mov	fp,zero
     970:	0025883a 	mov	r18,zero
     974:	90001a26 	beq	r18,zero,9e0 <__sfvwrite_r+0x184>
     978:	1880800c 	andi	r2,r3,512
     97c:	84c00217 	ldw	r19,8(r16)
     980:	10002126 	beq	r2,zero,a08 <__sfvwrite_r+0x1ac>
     984:	982f883a 	mov	r23,r19
     988:	94c09336 	bltu	r18,r19,bd8 <__sfvwrite_r+0x37c>
     98c:	1881200c 	andi	r2,r3,1152
     990:	10009e1e 	bne	r2,zero,c0c <__sfvwrite_r+0x3b0>
     994:	81000017 	ldw	r4,0(r16)
     998:	b80d883a 	mov	r6,r23
     99c:	e00b883a 	mov	r5,fp
     9a0:	00018d80 	call	18d8 <memmove>
     9a4:	80c00217 	ldw	r3,8(r16)
     9a8:	81000017 	ldw	r4,0(r16)
     9ac:	9005883a 	mov	r2,r18
     9b0:	1ce7c83a 	sub	r19,r3,r19
     9b4:	25cf883a 	add	r7,r4,r23
     9b8:	84c00215 	stw	r19,8(r16)
     9bc:	81c00015 	stw	r7,0(r16)
     9c0:	a0c00217 	ldw	r3,8(r20)
     9c4:	e0b9883a 	add	fp,fp,r2
     9c8:	90a5c83a 	sub	r18,r18,r2
     9cc:	18a7c83a 	sub	r19,r3,r2
     9d0:	a4c00215 	stw	r19,8(r20)
     9d4:	983fce26 	beq	r19,zero,910 <__sfvwrite_r+0xb4>
     9d8:	80c0030b 	ldhu	r3,12(r16)
     9dc:	903fe61e 	bne	r18,zero,978 <__sfvwrite_r+0x11c>
     9e0:	8f000017 	ldw	fp,0(r17)
     9e4:	8c800117 	ldw	r18,4(r17)
     9e8:	8c400204 	addi	r17,r17,8
     9ec:	003fe106 	br	974 <__sfvwrite_r+0x118>
     9f0:	8cc00017 	ldw	r19,0(r17)
     9f4:	8c800117 	ldw	r18,4(r17)
     9f8:	8c400204 	addi	r17,r17,8
     9fc:	003fb306 	br	8cc <__sfvwrite_r+0x70>
     a00:	0005883a 	mov	r2,zero
     a04:	f800283a 	ret
     a08:	81000017 	ldw	r4,0(r16)
     a0c:	80800417 	ldw	r2,16(r16)
     a10:	11005736 	bltu	r2,r4,b70 <__sfvwrite_r+0x314>
     a14:	85c00517 	ldw	r23,20(r16)
     a18:	95c05536 	bltu	r18,r23,b70 <__sfvwrite_r+0x314>
     a1c:	00a00034 	movhi	r2,32768
     a20:	10bfffc4 	addi	r2,r2,-1
     a24:	9009883a 	mov	r4,r18
     a28:	1480012e 	bgeu	r2,r18,a30 <__sfvwrite_r+0x1d4>
     a2c:	1009883a 	mov	r4,r2
     a30:	b80b883a 	mov	r5,r23
     a34:	0002f640 	call	2f64 <__divsi3>
     a38:	15cf383a 	mul	r7,r2,r23
     a3c:	81400717 	ldw	r5,28(r16)
     a40:	80800917 	ldw	r2,36(r16)
     a44:	e00d883a 	mov	r6,fp
     a48:	a809883a 	mov	r4,r21
     a4c:	103ee83a 	callr	r2
     a50:	00bfdb16 	blt	zero,r2,9c0 <__sfvwrite_r+0x164>
     a54:	8080030b 	ldhu	r2,12(r16)
     a58:	10801014 	ori	r2,r2,64
     a5c:	8080030d 	sth	r2,12(r16)
     a60:	00bfffc4 	movi	r2,-1
     a64:	003fab06 	br	914 <__sfvwrite_r+0xb8>
     a68:	0027883a 	mov	r19,zero
     a6c:	0011883a 	mov	r8,zero
     a70:	0039883a 	mov	fp,zero
     a74:	0025883a 	mov	r18,zero
     a78:	90001f26 	beq	r18,zero,af8 <__sfvwrite_r+0x29c>
     a7c:	40005a26 	beq	r8,zero,be8 <__sfvwrite_r+0x38c>
     a80:	982d883a 	mov	r22,r19
     a84:	94c0012e 	bgeu	r18,r19,a8c <__sfvwrite_r+0x230>
     a88:	902d883a 	mov	r22,r18
     a8c:	81000017 	ldw	r4,0(r16)
     a90:	80800417 	ldw	r2,16(r16)
     a94:	b02f883a 	mov	r23,r22
     a98:	81c00517 	ldw	r7,20(r16)
     a9c:	1100032e 	bgeu	r2,r4,aac <__sfvwrite_r+0x250>
     aa0:	80c00217 	ldw	r3,8(r16)
     aa4:	38c7883a 	add	r3,r7,r3
     aa8:	1d801816 	blt	r3,r22,b0c <__sfvwrite_r+0x2b0>
     aac:	b1c03e16 	blt	r22,r7,ba8 <__sfvwrite_r+0x34c>
     ab0:	80800917 	ldw	r2,36(r16)
     ab4:	81400717 	ldw	r5,28(r16)
     ab8:	e00d883a 	mov	r6,fp
     abc:	da000115 	stw	r8,4(sp)
     ac0:	a809883a 	mov	r4,r21
     ac4:	103ee83a 	callr	r2
     ac8:	102f883a 	mov	r23,r2
     acc:	da000117 	ldw	r8,4(sp)
     ad0:	00bfe00e 	bge	zero,r2,a54 <__sfvwrite_r+0x1f8>
     ad4:	9de7c83a 	sub	r19,r19,r23
     ad8:	98001f26 	beq	r19,zero,b58 <__sfvwrite_r+0x2fc>
     adc:	a0800217 	ldw	r2,8(r20)
     ae0:	e5f9883a 	add	fp,fp,r23
     ae4:	95e5c83a 	sub	r18,r18,r23
     ae8:	15efc83a 	sub	r23,r2,r23
     aec:	a5c00215 	stw	r23,8(r20)
     af0:	b83f8726 	beq	r23,zero,910 <__sfvwrite_r+0xb4>
     af4:	903fe11e 	bne	r18,zero,a7c <__sfvwrite_r+0x220>
     af8:	8f000017 	ldw	fp,0(r17)
     afc:	8c800117 	ldw	r18,4(r17)
     b00:	0011883a 	mov	r8,zero
     b04:	8c400204 	addi	r17,r17,8
     b08:	003fdb06 	br	a78 <__sfvwrite_r+0x21c>
     b0c:	180d883a 	mov	r6,r3
     b10:	e00b883a 	mov	r5,fp
     b14:	da000115 	stw	r8,4(sp)
     b18:	d8c00015 	stw	r3,0(sp)
     b1c:	00018d80 	call	18d8 <memmove>
     b20:	d8c00017 	ldw	r3,0(sp)
     b24:	80800017 	ldw	r2,0(r16)
     b28:	800b883a 	mov	r5,r16
     b2c:	a809883a 	mov	r4,r21
     b30:	10c5883a 	add	r2,r2,r3
     b34:	80800015 	stw	r2,0(r16)
     b38:	d8c00015 	stw	r3,0(sp)
     b3c:	00027780 	call	2778 <_fflush_r>
     b40:	d8c00017 	ldw	r3,0(sp)
     b44:	da000117 	ldw	r8,4(sp)
     b48:	103fc21e 	bne	r2,zero,a54 <__sfvwrite_r+0x1f8>
     b4c:	182f883a 	mov	r23,r3
     b50:	9de7c83a 	sub	r19,r19,r23
     b54:	983fe11e 	bne	r19,zero,adc <__sfvwrite_r+0x280>
     b58:	800b883a 	mov	r5,r16
     b5c:	a809883a 	mov	r4,r21
     b60:	00027780 	call	2778 <_fflush_r>
     b64:	103fbb1e 	bne	r2,zero,a54 <__sfvwrite_r+0x1f8>
     b68:	0011883a 	mov	r8,zero
     b6c:	003fdb06 	br	adc <__sfvwrite_r+0x280>
     b70:	94c0012e 	bgeu	r18,r19,b78 <__sfvwrite_r+0x31c>
     b74:	9027883a 	mov	r19,r18
     b78:	980d883a 	mov	r6,r19
     b7c:	e00b883a 	mov	r5,fp
     b80:	00018d80 	call	18d8 <memmove>
     b84:	80800217 	ldw	r2,8(r16)
     b88:	80c00017 	ldw	r3,0(r16)
     b8c:	14c5c83a 	sub	r2,r2,r19
     b90:	1cc7883a 	add	r3,r3,r19
     b94:	80800215 	stw	r2,8(r16)
     b98:	80c00015 	stw	r3,0(r16)
     b9c:	10004326 	beq	r2,zero,cac <__sfvwrite_r+0x450>
     ba0:	9805883a 	mov	r2,r19
     ba4:	003f8606 	br	9c0 <__sfvwrite_r+0x164>
     ba8:	b00d883a 	mov	r6,r22
     bac:	e00b883a 	mov	r5,fp
     bb0:	da000115 	stw	r8,4(sp)
     bb4:	00018d80 	call	18d8 <memmove>
     bb8:	80800217 	ldw	r2,8(r16)
     bbc:	80c00017 	ldw	r3,0(r16)
     bc0:	da000117 	ldw	r8,4(sp)
     bc4:	1585c83a 	sub	r2,r2,r22
     bc8:	1dad883a 	add	r22,r3,r22
     bcc:	80800215 	stw	r2,8(r16)
     bd0:	85800015 	stw	r22,0(r16)
     bd4:	003fbf06 	br	ad4 <__sfvwrite_r+0x278>
     bd8:	81000017 	ldw	r4,0(r16)
     bdc:	9027883a 	mov	r19,r18
     be0:	902f883a 	mov	r23,r18
     be4:	003f6c06 	br	998 <__sfvwrite_r+0x13c>
     be8:	900d883a 	mov	r6,r18
     bec:	01400284 	movi	r5,10
     bf0:	e009883a 	mov	r4,fp
     bf4:	00016ac0 	call	16ac <memchr>
     bf8:	10003e26 	beq	r2,zero,cf4 <__sfvwrite_r+0x498>
     bfc:	10800044 	addi	r2,r2,1
     c00:	1727c83a 	sub	r19,r2,fp
     c04:	02000044 	movi	r8,1
     c08:	003f9d06 	br	a80 <__sfvwrite_r+0x224>
     c0c:	80800517 	ldw	r2,20(r16)
     c10:	81400417 	ldw	r5,16(r16)
     c14:	81c00017 	ldw	r7,0(r16)
     c18:	10a7883a 	add	r19,r2,r2
     c1c:	9885883a 	add	r2,r19,r2
     c20:	1026d7fa 	srli	r19,r2,31
     c24:	396dc83a 	sub	r22,r7,r5
     c28:	b1000044 	addi	r4,r22,1
     c2c:	9885883a 	add	r2,r19,r2
     c30:	1027d07a 	srai	r19,r2,1
     c34:	2485883a 	add	r2,r4,r18
     c38:	980d883a 	mov	r6,r19
     c3c:	9880022e 	bgeu	r19,r2,c48 <__sfvwrite_r+0x3ec>
     c40:	1027883a 	mov	r19,r2
     c44:	100d883a 	mov	r6,r2
     c48:	18c1000c 	andi	r3,r3,1024
     c4c:	18001c26 	beq	r3,zero,cc0 <__sfvwrite_r+0x464>
     c50:	300b883a 	mov	r5,r6
     c54:	a809883a 	mov	r4,r21
     c58:	0000ea00 	call	ea0 <_malloc_r>
     c5c:	102f883a 	mov	r23,r2
     c60:	10002926 	beq	r2,zero,d08 <__sfvwrite_r+0x4ac>
     c64:	81400417 	ldw	r5,16(r16)
     c68:	b00d883a 	mov	r6,r22
     c6c:	1009883a 	mov	r4,r2
     c70:	00017900 	call	1790 <memcpy>
     c74:	8080030b 	ldhu	r2,12(r16)
     c78:	00fedfc4 	movi	r3,-1153
     c7c:	10c4703a 	and	r2,r2,r3
     c80:	10802014 	ori	r2,r2,128
     c84:	8080030d 	sth	r2,12(r16)
     c88:	bd89883a 	add	r4,r23,r22
     c8c:	9d8fc83a 	sub	r7,r19,r22
     c90:	85c00415 	stw	r23,16(r16)
     c94:	84c00515 	stw	r19,20(r16)
     c98:	81000015 	stw	r4,0(r16)
     c9c:	9027883a 	mov	r19,r18
     ca0:	81c00215 	stw	r7,8(r16)
     ca4:	902f883a 	mov	r23,r18
     ca8:	003f3b06 	br	998 <__sfvwrite_r+0x13c>
     cac:	800b883a 	mov	r5,r16
     cb0:	a809883a 	mov	r4,r21
     cb4:	00027780 	call	2778 <_fflush_r>
     cb8:	103fb926 	beq	r2,zero,ba0 <__sfvwrite_r+0x344>
     cbc:	003f6506 	br	a54 <__sfvwrite_r+0x1f8>
     cc0:	a809883a 	mov	r4,r21
     cc4:	0001b5c0 	call	1b5c <_realloc_r>
     cc8:	102f883a 	mov	r23,r2
     ccc:	103fee1e 	bne	r2,zero,c88 <__sfvwrite_r+0x42c>
     cd0:	81400417 	ldw	r5,16(r16)
     cd4:	a809883a 	mov	r4,r21
     cd8:	00029280 	call	2928 <_free_r>
     cdc:	8080030b 	ldhu	r2,12(r16)
     ce0:	00ffdfc4 	movi	r3,-129
     ce4:	1884703a 	and	r2,r3,r2
     ce8:	00c00304 	movi	r3,12
     cec:	a8c00015 	stw	r3,0(r21)
     cf0:	003f5906 	br	a58 <__sfvwrite_r+0x1fc>
     cf4:	94c00044 	addi	r19,r18,1
     cf8:	02000044 	movi	r8,1
     cfc:	003f6006 	br	a80 <__sfvwrite_r+0x224>
     d00:	00bfffc4 	movi	r2,-1
     d04:	003f0306 	br	914 <__sfvwrite_r+0xb8>
     d08:	00800304 	movi	r2,12
     d0c:	a8800015 	stw	r2,0(r21)
     d10:	8080030b 	ldhu	r2,12(r16)
     d14:	003f5006 	br	a58 <__sfvwrite_r+0x1fc>

00000d18 <_fwalk>:
     d18:	defff704 	addi	sp,sp,-36
     d1c:	dd000415 	stw	r20,16(sp)
     d20:	dfc00815 	stw	ra,32(sp)
     d24:	ddc00715 	stw	r23,28(sp)
     d28:	dd800615 	stw	r22,24(sp)
     d2c:	dd400515 	stw	r21,20(sp)
     d30:	dcc00315 	stw	r19,12(sp)
     d34:	dc800215 	stw	r18,8(sp)
     d38:	dc400115 	stw	r17,4(sp)
     d3c:	dc000015 	stw	r16,0(sp)
     d40:	2500b804 	addi	r20,r4,736
     d44:	a0002326 	beq	r20,zero,dd4 <_fwalk+0xbc>
     d48:	282b883a 	mov	r21,r5
     d4c:	002f883a 	mov	r23,zero
     d50:	05800044 	movi	r22,1
     d54:	04ffffc4 	movi	r19,-1
     d58:	a4400117 	ldw	r17,4(r20)
     d5c:	a4800217 	ldw	r18,8(r20)
     d60:	8c7fffc4 	addi	r17,r17,-1
     d64:	88000d16 	blt	r17,zero,d9c <_fwalk+0x84>
     d68:	94000304 	addi	r16,r18,12
     d6c:	94800384 	addi	r18,r18,14
     d70:	8080000b 	ldhu	r2,0(r16)
     d74:	8c7fffc4 	addi	r17,r17,-1
     d78:	813ffd04 	addi	r4,r16,-12
     d7c:	b080042e 	bgeu	r22,r2,d90 <_fwalk+0x78>
     d80:	9080000f 	ldh	r2,0(r18)
     d84:	14c00226 	beq	r2,r19,d90 <_fwalk+0x78>
     d88:	a83ee83a 	callr	r21
     d8c:	b8aeb03a 	or	r23,r23,r2
     d90:	84001a04 	addi	r16,r16,104
     d94:	94801a04 	addi	r18,r18,104
     d98:	8cfff51e 	bne	r17,r19,d70 <_fwalk+0x58>
     d9c:	a5000017 	ldw	r20,0(r20)
     da0:	a03fed1e 	bne	r20,zero,d58 <_fwalk+0x40>
     da4:	b805883a 	mov	r2,r23
     da8:	dfc00817 	ldw	ra,32(sp)
     dac:	ddc00717 	ldw	r23,28(sp)
     db0:	dd800617 	ldw	r22,24(sp)
     db4:	dd400517 	ldw	r21,20(sp)
     db8:	dd000417 	ldw	r20,16(sp)
     dbc:	dcc00317 	ldw	r19,12(sp)
     dc0:	dc800217 	ldw	r18,8(sp)
     dc4:	dc400117 	ldw	r17,4(sp)
     dc8:	dc000017 	ldw	r16,0(sp)
     dcc:	dec00904 	addi	sp,sp,36
     dd0:	f800283a 	ret
     dd4:	002f883a 	mov	r23,zero
     dd8:	003ff206 	br	da4 <_fwalk+0x8c>

00000ddc <_fwalk_reent>:
     ddc:	defff704 	addi	sp,sp,-36
     de0:	dd000415 	stw	r20,16(sp)
     de4:	dfc00815 	stw	ra,32(sp)
     de8:	ddc00715 	stw	r23,28(sp)
     dec:	dd800615 	stw	r22,24(sp)
     df0:	dd400515 	stw	r21,20(sp)
     df4:	dcc00315 	stw	r19,12(sp)
     df8:	dc800215 	stw	r18,8(sp)
     dfc:	dc400115 	stw	r17,4(sp)
     e00:	dc000015 	stw	r16,0(sp)
     e04:	2500b804 	addi	r20,r4,736
     e08:	a0002326 	beq	r20,zero,e98 <_fwalk_reent+0xbc>
     e0c:	282b883a 	mov	r21,r5
     e10:	2027883a 	mov	r19,r4
     e14:	002f883a 	mov	r23,zero
     e18:	05800044 	movi	r22,1
     e1c:	04bfffc4 	movi	r18,-1
     e20:	a4400117 	ldw	r17,4(r20)
     e24:	a4000217 	ldw	r16,8(r20)
     e28:	8c7fffc4 	addi	r17,r17,-1
     e2c:	88000c16 	blt	r17,zero,e60 <_fwalk_reent+0x84>
     e30:	84000304 	addi	r16,r16,12
     e34:	8080000b 	ldhu	r2,0(r16)
     e38:	8c7fffc4 	addi	r17,r17,-1
     e3c:	817ffd04 	addi	r5,r16,-12
     e40:	b080052e 	bgeu	r22,r2,e58 <_fwalk_reent+0x7c>
     e44:	8080008f 	ldh	r2,2(r16)
     e48:	9809883a 	mov	r4,r19
     e4c:	14800226 	beq	r2,r18,e58 <_fwalk_reent+0x7c>
     e50:	a83ee83a 	callr	r21
     e54:	b8aeb03a 	or	r23,r23,r2
     e58:	84001a04 	addi	r16,r16,104
     e5c:	8cbff51e 	bne	r17,r18,e34 <_fwalk_reent+0x58>
     e60:	a5000017 	ldw	r20,0(r20)
     e64:	a03fee1e 	bne	r20,zero,e20 <_fwalk_reent+0x44>
     e68:	b805883a 	mov	r2,r23
     e6c:	dfc00817 	ldw	ra,32(sp)
     e70:	ddc00717 	ldw	r23,28(sp)
     e74:	dd800617 	ldw	r22,24(sp)
     e78:	dd400517 	ldw	r21,20(sp)
     e7c:	dd000417 	ldw	r20,16(sp)
     e80:	dcc00317 	ldw	r19,12(sp)
     e84:	dc800217 	ldw	r18,8(sp)
     e88:	dc400117 	ldw	r17,4(sp)
     e8c:	dc000017 	ldw	r16,0(sp)
     e90:	dec00904 	addi	sp,sp,36
     e94:	f800283a 	ret
     e98:	002f883a 	mov	r23,zero
     e9c:	003ff206 	br	e68 <_fwalk_reent+0x8c>

00000ea0 <_malloc_r>:
     ea0:	defff504 	addi	sp,sp,-44
     ea4:	dc800315 	stw	r18,12(sp)
     ea8:	dfc00a15 	stw	ra,40(sp)
     eac:	df000915 	stw	fp,36(sp)
     eb0:	ddc00815 	stw	r23,32(sp)
     eb4:	dd800715 	stw	r22,28(sp)
     eb8:	dd400615 	stw	r21,24(sp)
     ebc:	dd000515 	stw	r20,20(sp)
     ec0:	dcc00415 	stw	r19,16(sp)
     ec4:	dc400215 	stw	r17,8(sp)
     ec8:	dc000115 	stw	r16,4(sp)
     ecc:	288002c4 	addi	r2,r5,11
     ed0:	00c00584 	movi	r3,22
     ed4:	2025883a 	mov	r18,r4
     ed8:	18807f2e 	bgeu	r3,r2,10d8 <_malloc_r+0x238>
     edc:	047ffe04 	movi	r17,-8
     ee0:	1462703a 	and	r17,r2,r17
     ee4:	8800a316 	blt	r17,zero,1174 <_malloc_r+0x2d4>
     ee8:	8940a236 	bltu	r17,r5,1174 <_malloc_r+0x2d4>
     eec:	00036e40 	call	36e4 <__malloc_lock>
     ef0:	00807dc4 	movi	r2,503
     ef4:	1441e92e 	bgeu	r2,r17,169c <_malloc_r+0x7fc>
     ef8:	8804d27a 	srli	r2,r17,9
     efc:	1000a126 	beq	r2,zero,1184 <_malloc_r+0x2e4>
     f00:	00c00104 	movi	r3,4
     f04:	18811e36 	bltu	r3,r2,1380 <_malloc_r+0x4e0>
     f08:	8804d1ba 	srli	r2,r17,6
     f0c:	12000e44 	addi	r8,r2,57
     f10:	11c00e04 	addi	r7,r2,56
     f14:	4209883a 	add	r4,r8,r8
     f18:	04c00034 	movhi	r19,0
     f1c:	2109883a 	add	r4,r4,r4
     f20:	9cd79c04 	addi	r19,r19,24176
     f24:	2109883a 	add	r4,r4,r4
     f28:	9909883a 	add	r4,r19,r4
     f2c:	24000117 	ldw	r16,4(r4)
     f30:	213ffe04 	addi	r4,r4,-8
     f34:	24009726 	beq	r4,r16,1194 <_malloc_r+0x2f4>
     f38:	80800117 	ldw	r2,4(r16)
     f3c:	01bfff04 	movi	r6,-4
     f40:	014003c4 	movi	r5,15
     f44:	1184703a 	and	r2,r2,r6
     f48:	1447c83a 	sub	r3,r2,r17
     f4c:	28c00716 	blt	r5,r3,f6c <_malloc_r+0xcc>
     f50:	1800920e 	bge	r3,zero,119c <_malloc_r+0x2fc>
     f54:	84000317 	ldw	r16,12(r16)
     f58:	24008e26 	beq	r4,r16,1194 <_malloc_r+0x2f4>
     f5c:	80800117 	ldw	r2,4(r16)
     f60:	1184703a 	and	r2,r2,r6
     f64:	1447c83a 	sub	r3,r2,r17
     f68:	28fff90e 	bge	r5,r3,f50 <_malloc_r+0xb0>
     f6c:	3809883a 	mov	r4,r7
     f70:	01800034 	movhi	r6,0
     f74:	9c000417 	ldw	r16,16(r19)
     f78:	31979c04 	addi	r6,r6,24176
     f7c:	32000204 	addi	r8,r6,8
     f80:	82013426 	beq	r16,r8,1454 <_malloc_r+0x5b4>
     f84:	80c00117 	ldw	r3,4(r16)
     f88:	00bfff04 	movi	r2,-4
     f8c:	188e703a 	and	r7,r3,r2
     f90:	3c45c83a 	sub	r2,r7,r17
     f94:	00c003c4 	movi	r3,15
     f98:	18811f16 	blt	r3,r2,1418 <_malloc_r+0x578>
     f9c:	32000515 	stw	r8,20(r6)
     fa0:	32000415 	stw	r8,16(r6)
     fa4:	10007f0e 	bge	r2,zero,11a4 <_malloc_r+0x304>
     fa8:	00807fc4 	movi	r2,511
     fac:	11c0fd36 	bltu	r2,r7,13a4 <_malloc_r+0x504>
     fb0:	3806d0fa 	srli	r3,r7,3
     fb4:	01c00044 	movi	r7,1
     fb8:	30800117 	ldw	r2,4(r6)
     fbc:	19400044 	addi	r5,r3,1
     fc0:	294b883a 	add	r5,r5,r5
     fc4:	1807d0ba 	srai	r3,r3,2
     fc8:	294b883a 	add	r5,r5,r5
     fcc:	294b883a 	add	r5,r5,r5
     fd0:	298b883a 	add	r5,r5,r6
     fd4:	38c6983a 	sll	r3,r7,r3
     fd8:	29c00017 	ldw	r7,0(r5)
     fdc:	2a7ffe04 	addi	r9,r5,-8
     fe0:	1886b03a 	or	r3,r3,r2
     fe4:	82400315 	stw	r9,12(r16)
     fe8:	81c00215 	stw	r7,8(r16)
     fec:	30c00115 	stw	r3,4(r6)
     ff0:	2c000015 	stw	r16,0(r5)
     ff4:	3c000315 	stw	r16,12(r7)
     ff8:	2005d0ba 	srai	r2,r4,2
     ffc:	01400044 	movi	r5,1
    1000:	288a983a 	sll	r5,r5,r2
    1004:	19406f36 	bltu	r3,r5,11c4 <_malloc_r+0x324>
    1008:	28c4703a 	and	r2,r5,r3
    100c:	10000a1e 	bne	r2,zero,1038 <_malloc_r+0x198>
    1010:	00bfff04 	movi	r2,-4
    1014:	294b883a 	add	r5,r5,r5
    1018:	2088703a 	and	r4,r4,r2
    101c:	28c4703a 	and	r2,r5,r3
    1020:	21000104 	addi	r4,r4,4
    1024:	1000041e 	bne	r2,zero,1038 <_malloc_r+0x198>
    1028:	294b883a 	add	r5,r5,r5
    102c:	28c4703a 	and	r2,r5,r3
    1030:	21000104 	addi	r4,r4,4
    1034:	103ffc26 	beq	r2,zero,1028 <_malloc_r+0x188>
    1038:	02bfff04 	movi	r10,-4
    103c:	024003c4 	movi	r9,15
    1040:	21800044 	addi	r6,r4,1
    1044:	318d883a 	add	r6,r6,r6
    1048:	318d883a 	add	r6,r6,r6
    104c:	318d883a 	add	r6,r6,r6
    1050:	998d883a 	add	r6,r19,r6
    1054:	333ffe04 	addi	r12,r6,-8
    1058:	2017883a 	mov	r11,r4
    105c:	31800104 	addi	r6,r6,4
    1060:	34000017 	ldw	r16,0(r6)
    1064:	31fffd04 	addi	r7,r6,-12
    1068:	81c0041e 	bne	r16,r7,107c <_malloc_r+0x1dc>
    106c:	0000fb06 	br	145c <_malloc_r+0x5bc>
    1070:	1801030e 	bge	r3,zero,1480 <_malloc_r+0x5e0>
    1074:	84000317 	ldw	r16,12(r16)
    1078:	81c0f826 	beq	r16,r7,145c <_malloc_r+0x5bc>
    107c:	80800117 	ldw	r2,4(r16)
    1080:	1284703a 	and	r2,r2,r10
    1084:	1447c83a 	sub	r3,r2,r17
    1088:	48fff90e 	bge	r9,r3,1070 <_malloc_r+0x1d0>
    108c:	80800317 	ldw	r2,12(r16)
    1090:	81000217 	ldw	r4,8(r16)
    1094:	89400054 	ori	r5,r17,1
    1098:	81400115 	stw	r5,4(r16)
    109c:	20800315 	stw	r2,12(r4)
    10a0:	11000215 	stw	r4,8(r2)
    10a4:	8463883a 	add	r17,r16,r17
    10a8:	9c400515 	stw	r17,20(r19)
    10ac:	9c400415 	stw	r17,16(r19)
    10b0:	18800054 	ori	r2,r3,1
    10b4:	88800115 	stw	r2,4(r17)
    10b8:	8a000315 	stw	r8,12(r17)
    10bc:	8a000215 	stw	r8,8(r17)
    10c0:	88e3883a 	add	r17,r17,r3
    10c4:	88c00015 	stw	r3,0(r17)
    10c8:	9009883a 	mov	r4,r18
    10cc:	00037080 	call	3708 <__malloc_unlock>
    10d0:	80800204 	addi	r2,r16,8
    10d4:	00001b06 	br	1144 <_malloc_r+0x2a4>
    10d8:	04400404 	movi	r17,16
    10dc:	89402536 	bltu	r17,r5,1174 <_malloc_r+0x2d4>
    10e0:	00036e40 	call	36e4 <__malloc_lock>
    10e4:	00800184 	movi	r2,6
    10e8:	01000084 	movi	r4,2
    10ec:	04c00034 	movhi	r19,0
    10f0:	1085883a 	add	r2,r2,r2
    10f4:	9cd79c04 	addi	r19,r19,24176
    10f8:	1085883a 	add	r2,r2,r2
    10fc:	9885883a 	add	r2,r19,r2
    1100:	14000117 	ldw	r16,4(r2)
    1104:	10fffe04 	addi	r3,r2,-8
    1108:	80c0d926 	beq	r16,r3,1470 <_malloc_r+0x5d0>
    110c:	80c00117 	ldw	r3,4(r16)
    1110:	81000317 	ldw	r4,12(r16)
    1114:	00bfff04 	movi	r2,-4
    1118:	1884703a 	and	r2,r3,r2
    111c:	81400217 	ldw	r5,8(r16)
    1120:	8085883a 	add	r2,r16,r2
    1124:	10c00117 	ldw	r3,4(r2)
    1128:	29000315 	stw	r4,12(r5)
    112c:	21400215 	stw	r5,8(r4)
    1130:	18c00054 	ori	r3,r3,1
    1134:	10c00115 	stw	r3,4(r2)
    1138:	9009883a 	mov	r4,r18
    113c:	00037080 	call	3708 <__malloc_unlock>
    1140:	80800204 	addi	r2,r16,8
    1144:	dfc00a17 	ldw	ra,40(sp)
    1148:	df000917 	ldw	fp,36(sp)
    114c:	ddc00817 	ldw	r23,32(sp)
    1150:	dd800717 	ldw	r22,28(sp)
    1154:	dd400617 	ldw	r21,24(sp)
    1158:	dd000517 	ldw	r20,20(sp)
    115c:	dcc00417 	ldw	r19,16(sp)
    1160:	dc800317 	ldw	r18,12(sp)
    1164:	dc400217 	ldw	r17,8(sp)
    1168:	dc000117 	ldw	r16,4(sp)
    116c:	dec00b04 	addi	sp,sp,44
    1170:	f800283a 	ret
    1174:	00800304 	movi	r2,12
    1178:	90800015 	stw	r2,0(r18)
    117c:	0005883a 	mov	r2,zero
    1180:	003ff006 	br	1144 <_malloc_r+0x2a4>
    1184:	01002004 	movi	r4,128
    1188:	02001004 	movi	r8,64
    118c:	01c00fc4 	movi	r7,63
    1190:	003f6106 	br	f18 <_malloc_r+0x78>
    1194:	4009883a 	mov	r4,r8
    1198:	003f7506 	br	f70 <_malloc_r+0xd0>
    119c:	81000317 	ldw	r4,12(r16)
    11a0:	003fde06 	br	111c <_malloc_r+0x27c>
    11a4:	81c5883a 	add	r2,r16,r7
    11a8:	11400117 	ldw	r5,4(r2)
    11ac:	9009883a 	mov	r4,r18
    11b0:	29400054 	ori	r5,r5,1
    11b4:	11400115 	stw	r5,4(r2)
    11b8:	00037080 	call	3708 <__malloc_unlock>
    11bc:	80800204 	addi	r2,r16,8
    11c0:	003fe006 	br	1144 <_malloc_r+0x2a4>
    11c4:	9c000217 	ldw	r16,8(r19)
    11c8:	00bfff04 	movi	r2,-4
    11cc:	85800117 	ldw	r22,4(r16)
    11d0:	b0ac703a 	and	r22,r22,r2
    11d4:	b4400336 	bltu	r22,r17,11e4 <_malloc_r+0x344>
    11d8:	b445c83a 	sub	r2,r22,r17
    11dc:	00c003c4 	movi	r3,15
    11e0:	18805d16 	blt	r3,r2,1358 <_malloc_r+0x4b8>
    11e4:	05c00034 	movhi	r23,0
    11e8:	00800074 	movhi	r2,1
    11ec:	10a3cb04 	addi	r2,r2,-28884
    11f0:	bddd2204 	addi	r23,r23,29832
    11f4:	15400017 	ldw	r21,0(r2)
    11f8:	b8c00017 	ldw	r3,0(r23)
    11fc:	00bfffc4 	movi	r2,-1
    1200:	858d883a 	add	r6,r16,r22
    1204:	8d6b883a 	add	r21,r17,r21
    1208:	1880ea26 	beq	r3,r2,15b4 <_malloc_r+0x714>
    120c:	ad4403c4 	addi	r21,r21,4111
    1210:	00bc0004 	movi	r2,-4096
    1214:	a8aa703a 	and	r21,r21,r2
    1218:	a80b883a 	mov	r5,r21
    121c:	9009883a 	mov	r4,r18
    1220:	d9800015 	stw	r6,0(sp)
    1224:	00020c00 	call	20c0 <_sbrk_r>
    1228:	1029883a 	mov	r20,r2
    122c:	00bfffc4 	movi	r2,-1
    1230:	d9800017 	ldw	r6,0(sp)
    1234:	a080e826 	beq	r20,r2,15d8 <_malloc_r+0x738>
    1238:	a180a636 	bltu	r20,r6,14d4 <_malloc_r+0x634>
    123c:	07000074 	movhi	fp,1
    1240:	e723d404 	addi	fp,fp,-28848
    1244:	e0800017 	ldw	r2,0(fp)
    1248:	a887883a 	add	r3,r21,r2
    124c:	e0c00015 	stw	r3,0(fp)
    1250:	3500e626 	beq	r6,r20,15ec <_malloc_r+0x74c>
    1254:	b9000017 	ldw	r4,0(r23)
    1258:	00bfffc4 	movi	r2,-1
    125c:	2080ee26 	beq	r4,r2,1618 <_malloc_r+0x778>
    1260:	a185c83a 	sub	r2,r20,r6
    1264:	10c5883a 	add	r2,r2,r3
    1268:	e0800015 	stw	r2,0(fp)
    126c:	a0c001cc 	andi	r3,r20,7
    1270:	1800bc26 	beq	r3,zero,1564 <_malloc_r+0x6c4>
    1274:	a0e9c83a 	sub	r20,r20,r3
    1278:	00840204 	movi	r2,4104
    127c:	a5000204 	addi	r20,r20,8
    1280:	10c7c83a 	sub	r3,r2,r3
    1284:	a545883a 	add	r2,r20,r21
    1288:	1083ffcc 	andi	r2,r2,4095
    128c:	18abc83a 	sub	r21,r3,r2
    1290:	a80b883a 	mov	r5,r21
    1294:	9009883a 	mov	r4,r18
    1298:	00020c00 	call	20c0 <_sbrk_r>
    129c:	00ffffc4 	movi	r3,-1
    12a0:	10c0e126 	beq	r2,r3,1628 <_malloc_r+0x788>
    12a4:	1505c83a 	sub	r2,r2,r20
    12a8:	1545883a 	add	r2,r2,r21
    12ac:	10800054 	ori	r2,r2,1
    12b0:	e0c00017 	ldw	r3,0(fp)
    12b4:	9d000215 	stw	r20,8(r19)
    12b8:	a0800115 	stw	r2,4(r20)
    12bc:	a8c7883a 	add	r3,r21,r3
    12c0:	e0c00015 	stw	r3,0(fp)
    12c4:	84c00e26 	beq	r16,r19,1300 <_malloc_r+0x460>
    12c8:	018003c4 	movi	r6,15
    12cc:	3580a72e 	bgeu	r6,r22,156c <_malloc_r+0x6cc>
    12d0:	81400117 	ldw	r5,4(r16)
    12d4:	013ffe04 	movi	r4,-8
    12d8:	b0bffd04 	addi	r2,r22,-12
    12dc:	1104703a 	and	r2,r2,r4
    12e0:	2900004c 	andi	r4,r5,1
    12e4:	2088b03a 	or	r4,r4,r2
    12e8:	81000115 	stw	r4,4(r16)
    12ec:	01400144 	movi	r5,5
    12f0:	8089883a 	add	r4,r16,r2
    12f4:	21400115 	stw	r5,4(r4)
    12f8:	21400215 	stw	r5,8(r4)
    12fc:	3080cd36 	bltu	r6,r2,1634 <_malloc_r+0x794>
    1300:	00800074 	movhi	r2,1
    1304:	10a3ca04 	addi	r2,r2,-28888
    1308:	11000017 	ldw	r4,0(r2)
    130c:	20c0012e 	bgeu	r4,r3,1314 <_malloc_r+0x474>
    1310:	10c00015 	stw	r3,0(r2)
    1314:	00800074 	movhi	r2,1
    1318:	10a3c904 	addi	r2,r2,-28892
    131c:	11000017 	ldw	r4,0(r2)
    1320:	9c000217 	ldw	r16,8(r19)
    1324:	20c0012e 	bgeu	r4,r3,132c <_malloc_r+0x48c>
    1328:	10c00015 	stw	r3,0(r2)
    132c:	80c00117 	ldw	r3,4(r16)
    1330:	00bfff04 	movi	r2,-4
    1334:	1886703a 	and	r3,r3,r2
    1338:	1c45c83a 	sub	r2,r3,r17
    133c:	1c400236 	bltu	r3,r17,1348 <_malloc_r+0x4a8>
    1340:	00c003c4 	movi	r3,15
    1344:	18800416 	blt	r3,r2,1358 <_malloc_r+0x4b8>
    1348:	9009883a 	mov	r4,r18
    134c:	00037080 	call	3708 <__malloc_unlock>
    1350:	0005883a 	mov	r2,zero
    1354:	003f7b06 	br	1144 <_malloc_r+0x2a4>
    1358:	88c00054 	ori	r3,r17,1
    135c:	80c00115 	stw	r3,4(r16)
    1360:	8463883a 	add	r17,r16,r17
    1364:	10800054 	ori	r2,r2,1
    1368:	9c400215 	stw	r17,8(r19)
    136c:	88800115 	stw	r2,4(r17)
    1370:	9009883a 	mov	r4,r18
    1374:	00037080 	call	3708 <__malloc_unlock>
    1378:	80800204 	addi	r2,r16,8
    137c:	003f7106 	br	1144 <_malloc_r+0x2a4>
    1380:	00c00504 	movi	r3,20
    1384:	18804a2e 	bgeu	r3,r2,14b0 <_malloc_r+0x610>
    1388:	00c01504 	movi	r3,84
    138c:	18806e36 	bltu	r3,r2,1548 <_malloc_r+0x6a8>
    1390:	8804d33a 	srli	r2,r17,12
    1394:	12001bc4 	addi	r8,r2,111
    1398:	11c01b84 	addi	r7,r2,110
    139c:	4209883a 	add	r4,r8,r8
    13a0:	003edd06 	br	f18 <_malloc_r+0x78>
    13a4:	3804d27a 	srli	r2,r7,9
    13a8:	00c00104 	movi	r3,4
    13ac:	1880442e 	bgeu	r3,r2,14c0 <_malloc_r+0x620>
    13b0:	00c00504 	movi	r3,20
    13b4:	18808136 	bltu	r3,r2,15bc <_malloc_r+0x71c>
    13b8:	11401704 	addi	r5,r2,92
    13bc:	10c016c4 	addi	r3,r2,91
    13c0:	294b883a 	add	r5,r5,r5
    13c4:	294b883a 	add	r5,r5,r5
    13c8:	294b883a 	add	r5,r5,r5
    13cc:	994b883a 	add	r5,r19,r5
    13d0:	28800017 	ldw	r2,0(r5)
    13d4:	01800034 	movhi	r6,0
    13d8:	297ffe04 	addi	r5,r5,-8
    13dc:	31979c04 	addi	r6,r6,24176
    13e0:	28806526 	beq	r5,r2,1578 <_malloc_r+0x6d8>
    13e4:	01bfff04 	movi	r6,-4
    13e8:	10c00117 	ldw	r3,4(r2)
    13ec:	1986703a 	and	r3,r3,r6
    13f0:	38c0022e 	bgeu	r7,r3,13fc <_malloc_r+0x55c>
    13f4:	10800217 	ldw	r2,8(r2)
    13f8:	28bffb1e 	bne	r5,r2,13e8 <_malloc_r+0x548>
    13fc:	11400317 	ldw	r5,12(r2)
    1400:	98c00117 	ldw	r3,4(r19)
    1404:	81400315 	stw	r5,12(r16)
    1408:	80800215 	stw	r2,8(r16)
    140c:	2c000215 	stw	r16,8(r5)
    1410:	14000315 	stw	r16,12(r2)
    1414:	003ef806 	br	ff8 <_malloc_r+0x158>
    1418:	88c00054 	ori	r3,r17,1
    141c:	80c00115 	stw	r3,4(r16)
    1420:	8463883a 	add	r17,r16,r17
    1424:	34400515 	stw	r17,20(r6)
    1428:	34400415 	stw	r17,16(r6)
    142c:	10c00054 	ori	r3,r2,1
    1430:	8a000315 	stw	r8,12(r17)
    1434:	8a000215 	stw	r8,8(r17)
    1438:	88c00115 	stw	r3,4(r17)
    143c:	88a3883a 	add	r17,r17,r2
    1440:	88800015 	stw	r2,0(r17)
    1444:	9009883a 	mov	r4,r18
    1448:	00037080 	call	3708 <__malloc_unlock>
    144c:	80800204 	addi	r2,r16,8
    1450:	003f3c06 	br	1144 <_malloc_r+0x2a4>
    1454:	30c00117 	ldw	r3,4(r6)
    1458:	003ee706 	br	ff8 <_malloc_r+0x158>
    145c:	5ac00044 	addi	r11,r11,1
    1460:	588000cc 	andi	r2,r11,3
    1464:	31800204 	addi	r6,r6,8
    1468:	103efd1e 	bne	r2,zero,1060 <_malloc_r+0x1c0>
    146c:	00002406 	br	1500 <_malloc_r+0x660>
    1470:	14000317 	ldw	r16,12(r2)
    1474:	143f251e 	bne	r2,r16,110c <_malloc_r+0x26c>
    1478:	21000084 	addi	r4,r4,2
    147c:	003ebc06 	br	f70 <_malloc_r+0xd0>
    1480:	8085883a 	add	r2,r16,r2
    1484:	10c00117 	ldw	r3,4(r2)
    1488:	81000317 	ldw	r4,12(r16)
    148c:	81400217 	ldw	r5,8(r16)
    1490:	18c00054 	ori	r3,r3,1
    1494:	10c00115 	stw	r3,4(r2)
    1498:	29000315 	stw	r4,12(r5)
    149c:	21400215 	stw	r5,8(r4)
    14a0:	9009883a 	mov	r4,r18
    14a4:	00037080 	call	3708 <__malloc_unlock>
    14a8:	80800204 	addi	r2,r16,8
    14ac:	003f2506 	br	1144 <_malloc_r+0x2a4>
    14b0:	12001704 	addi	r8,r2,92
    14b4:	11c016c4 	addi	r7,r2,91
    14b8:	4209883a 	add	r4,r8,r8
    14bc:	003e9606 	br	f18 <_malloc_r+0x78>
    14c0:	3804d1ba 	srli	r2,r7,6
    14c4:	11400e44 	addi	r5,r2,57
    14c8:	10c00e04 	addi	r3,r2,56
    14cc:	294b883a 	add	r5,r5,r5
    14d0:	003fbc06 	br	13c4 <_malloc_r+0x524>
    14d4:	84ff5926 	beq	r16,r19,123c <_malloc_r+0x39c>
    14d8:	00800034 	movhi	r2,0
    14dc:	10979c04 	addi	r2,r2,24176
    14e0:	14000217 	ldw	r16,8(r2)
    14e4:	00bfff04 	movi	r2,-4
    14e8:	80c00117 	ldw	r3,4(r16)
    14ec:	1886703a 	and	r3,r3,r2
    14f0:	003f9106 	br	1338 <_malloc_r+0x498>
    14f4:	60800217 	ldw	r2,8(r12)
    14f8:	213fffc4 	addi	r4,r4,-1
    14fc:	1300651e 	bne	r2,r12,1694 <_malloc_r+0x7f4>
    1500:	208000cc 	andi	r2,r4,3
    1504:	633ffe04 	addi	r12,r12,-8
    1508:	103ffa1e 	bne	r2,zero,14f4 <_malloc_r+0x654>
    150c:	98800117 	ldw	r2,4(r19)
    1510:	0146303a 	nor	r3,zero,r5
    1514:	1884703a 	and	r2,r3,r2
    1518:	98800115 	stw	r2,4(r19)
    151c:	294b883a 	add	r5,r5,r5
    1520:	117f2836 	bltu	r2,r5,11c4 <_malloc_r+0x324>
    1524:	283f2726 	beq	r5,zero,11c4 <_malloc_r+0x324>
    1528:	2886703a 	and	r3,r5,r2
    152c:	5809883a 	mov	r4,r11
    1530:	183ec31e 	bne	r3,zero,1040 <_malloc_r+0x1a0>
    1534:	294b883a 	add	r5,r5,r5
    1538:	2886703a 	and	r3,r5,r2
    153c:	21000104 	addi	r4,r4,4
    1540:	183ffc26 	beq	r3,zero,1534 <_malloc_r+0x694>
    1544:	003ebe06 	br	1040 <_malloc_r+0x1a0>
    1548:	00c05504 	movi	r3,340
    154c:	18801236 	bltu	r3,r2,1598 <_malloc_r+0x6f8>
    1550:	8804d3fa 	srli	r2,r17,15
    1554:	12001e04 	addi	r8,r2,120
    1558:	11c01dc4 	addi	r7,r2,119
    155c:	4209883a 	add	r4,r8,r8
    1560:	003e6d06 	br	f18 <_malloc_r+0x78>
    1564:	00c40004 	movi	r3,4096
    1568:	003f4606 	br	1284 <_malloc_r+0x3e4>
    156c:	00800044 	movi	r2,1
    1570:	a0800115 	stw	r2,4(r20)
    1574:	003f7406 	br	1348 <_malloc_r+0x4a8>
    1578:	1805d0ba 	srai	r2,r3,2
    157c:	01c00044 	movi	r7,1
    1580:	30c00117 	ldw	r3,4(r6)
    1584:	388e983a 	sll	r7,r7,r2
    1588:	2805883a 	mov	r2,r5
    158c:	38c6b03a 	or	r3,r7,r3
    1590:	30c00115 	stw	r3,4(r6)
    1594:	003f9b06 	br	1404 <_malloc_r+0x564>
    1598:	00c15504 	movi	r3,1364
    159c:	18801a36 	bltu	r3,r2,1608 <_malloc_r+0x768>
    15a0:	8804d4ba 	srli	r2,r17,18
    15a4:	12001f44 	addi	r8,r2,125
    15a8:	11c01f04 	addi	r7,r2,124
    15ac:	4209883a 	add	r4,r8,r8
    15b0:	003e5906 	br	f18 <_malloc_r+0x78>
    15b4:	ad400404 	addi	r21,r21,16
    15b8:	003f1706 	br	1218 <_malloc_r+0x378>
    15bc:	00c01504 	movi	r3,84
    15c0:	18802336 	bltu	r3,r2,1650 <_malloc_r+0x7b0>
    15c4:	3804d33a 	srli	r2,r7,12
    15c8:	11401bc4 	addi	r5,r2,111
    15cc:	10c01b84 	addi	r3,r2,110
    15d0:	294b883a 	add	r5,r5,r5
    15d4:	003f7b06 	br	13c4 <_malloc_r+0x524>
    15d8:	9c000217 	ldw	r16,8(r19)
    15dc:	00bfff04 	movi	r2,-4
    15e0:	80c00117 	ldw	r3,4(r16)
    15e4:	1886703a 	and	r3,r3,r2
    15e8:	003f5306 	br	1338 <_malloc_r+0x498>
    15ec:	3083ffcc 	andi	r2,r6,4095
    15f0:	103f181e 	bne	r2,zero,1254 <_malloc_r+0x3b4>
    15f4:	99000217 	ldw	r4,8(r19)
    15f8:	b545883a 	add	r2,r22,r21
    15fc:	10800054 	ori	r2,r2,1
    1600:	20800115 	stw	r2,4(r4)
    1604:	003f3e06 	br	1300 <_malloc_r+0x460>
    1608:	01003f84 	movi	r4,254
    160c:	02001fc4 	movi	r8,127
    1610:	01c01f84 	movi	r7,126
    1614:	003e4006 	br	f18 <_malloc_r+0x78>
    1618:	00800034 	movhi	r2,0
    161c:	109d2204 	addi	r2,r2,29832
    1620:	15000015 	stw	r20,0(r2)
    1624:	003f1106 	br	126c <_malloc_r+0x3cc>
    1628:	00800044 	movi	r2,1
    162c:	002b883a 	mov	r21,zero
    1630:	003f1f06 	br	12b0 <_malloc_r+0x410>
    1634:	81400204 	addi	r5,r16,8
    1638:	9009883a 	mov	r4,r18
    163c:	00029280 	call	2928 <_free_r>
    1640:	00800074 	movhi	r2,1
    1644:	10a3d404 	addi	r2,r2,-28848
    1648:	10c00017 	ldw	r3,0(r2)
    164c:	003f2c06 	br	1300 <_malloc_r+0x460>
    1650:	00c05504 	movi	r3,340
    1654:	18800536 	bltu	r3,r2,166c <_malloc_r+0x7cc>
    1658:	3804d3fa 	srli	r2,r7,15
    165c:	11401e04 	addi	r5,r2,120
    1660:	10c01dc4 	addi	r3,r2,119
    1664:	294b883a 	add	r5,r5,r5
    1668:	003f5606 	br	13c4 <_malloc_r+0x524>
    166c:	00c15504 	movi	r3,1364
    1670:	18800536 	bltu	r3,r2,1688 <_malloc_r+0x7e8>
    1674:	3804d4ba 	srli	r2,r7,18
    1678:	11401f44 	addi	r5,r2,125
    167c:	10c01f04 	addi	r3,r2,124
    1680:	294b883a 	add	r5,r5,r5
    1684:	003f4f06 	br	13c4 <_malloc_r+0x524>
    1688:	01403f84 	movi	r5,254
    168c:	00c01f84 	movi	r3,126
    1690:	003f4c06 	br	13c4 <_malloc_r+0x524>
    1694:	98800117 	ldw	r2,4(r19)
    1698:	003fa006 	br	151c <_malloc_r+0x67c>
    169c:	8808d0fa 	srli	r4,r17,3
    16a0:	20800044 	addi	r2,r4,1
    16a4:	1085883a 	add	r2,r2,r2
    16a8:	003e9006 	br	10ec <_malloc_r+0x24c>

000016ac <memchr>:
    16ac:	208000cc 	andi	r2,r4,3
    16b0:	280f883a 	mov	r7,r5
    16b4:	10003426 	beq	r2,zero,1788 <memchr+0xdc>
    16b8:	30bfffc4 	addi	r2,r6,-1
    16bc:	30001a26 	beq	r6,zero,1728 <memchr+0x7c>
    16c0:	20c00003 	ldbu	r3,0(r4)
    16c4:	29803fcc 	andi	r6,r5,255
    16c8:	30c0051e 	bne	r6,r3,16e0 <memchr+0x34>
    16cc:	00001806 	br	1730 <memchr+0x84>
    16d0:	10001526 	beq	r2,zero,1728 <memchr+0x7c>
    16d4:	20c00003 	ldbu	r3,0(r4)
    16d8:	10bfffc4 	addi	r2,r2,-1
    16dc:	30c01426 	beq	r6,r3,1730 <memchr+0x84>
    16e0:	21000044 	addi	r4,r4,1
    16e4:	20c000cc 	andi	r3,r4,3
    16e8:	183ff91e 	bne	r3,zero,16d0 <memchr+0x24>
    16ec:	020000c4 	movi	r8,3
    16f0:	40801136 	bltu	r8,r2,1738 <memchr+0x8c>
    16f4:	10000c26 	beq	r2,zero,1728 <memchr+0x7c>
    16f8:	20c00003 	ldbu	r3,0(r4)
    16fc:	29403fcc 	andi	r5,r5,255
    1700:	28c00b26 	beq	r5,r3,1730 <memchr+0x84>
    1704:	20c00044 	addi	r3,r4,1
    1708:	39803fcc 	andi	r6,r7,255
    170c:	2089883a 	add	r4,r4,r2
    1710:	00000306 	br	1720 <memchr+0x74>
    1714:	18c00044 	addi	r3,r3,1
    1718:	197fffc3 	ldbu	r5,-1(r3)
    171c:	31400526 	beq	r6,r5,1734 <memchr+0x88>
    1720:	1805883a 	mov	r2,r3
    1724:	20fffb1e 	bne	r4,r3,1714 <memchr+0x68>
    1728:	0005883a 	mov	r2,zero
    172c:	f800283a 	ret
    1730:	2005883a 	mov	r2,r4
    1734:	f800283a 	ret
    1738:	28c03fcc 	andi	r3,r5,255
    173c:	1812923a 	slli	r9,r3,8
    1740:	02ffbff4 	movhi	r11,65279
    1744:	02a02074 	movhi	r10,32897
    1748:	48d2b03a 	or	r9,r9,r3
    174c:	4806943a 	slli	r3,r9,16
    1750:	5affbfc4 	addi	r11,r11,-257
    1754:	52a02004 	addi	r10,r10,-32640
    1758:	48d2b03a 	or	r9,r9,r3
    175c:	20c00017 	ldw	r3,0(r4)
    1760:	48c6f03a 	xor	r3,r9,r3
    1764:	1acd883a 	add	r6,r3,r11
    1768:	00c6303a 	nor	r3,zero,r3
    176c:	30c6703a 	and	r3,r6,r3
    1770:	1a86703a 	and	r3,r3,r10
    1774:	183fe01e 	bne	r3,zero,16f8 <memchr+0x4c>
    1778:	10bfff04 	addi	r2,r2,-4
    177c:	21000104 	addi	r4,r4,4
    1780:	40bff636 	bltu	r8,r2,175c <memchr+0xb0>
    1784:	003fdb06 	br	16f4 <memchr+0x48>
    1788:	3005883a 	mov	r2,r6
    178c:	003fd706 	br	16ec <memchr+0x40>

00001790 <memcpy>:
    1790:	defffd04 	addi	sp,sp,-12
    1794:	dfc00215 	stw	ra,8(sp)
    1798:	dc400115 	stw	r17,4(sp)
    179c:	dc000015 	stw	r16,0(sp)
    17a0:	00c003c4 	movi	r3,15
    17a4:	2005883a 	mov	r2,r4
    17a8:	1980452e 	bgeu	r3,r6,18c0 <memcpy+0x130>
    17ac:	2906b03a 	or	r3,r5,r4
    17b0:	18c000cc 	andi	r3,r3,3
    17b4:	1800441e 	bne	r3,zero,18c8 <memcpy+0x138>
    17b8:	347ffc04 	addi	r17,r6,-16
    17bc:	8822d13a 	srli	r17,r17,4
    17c0:	28c00104 	addi	r3,r5,4
    17c4:	23400104 	addi	r13,r4,4
    17c8:	8820913a 	slli	r16,r17,4
    17cc:	2b000204 	addi	r12,r5,8
    17d0:	22c00204 	addi	r11,r4,8
    17d4:	84000504 	addi	r16,r16,20
    17d8:	2a800304 	addi	r10,r5,12
    17dc:	22400304 	addi	r9,r4,12
    17e0:	2c21883a 	add	r16,r5,r16
    17e4:	2811883a 	mov	r8,r5
    17e8:	200f883a 	mov	r7,r4
    17ec:	41000017 	ldw	r4,0(r8)
    17f0:	1fc00017 	ldw	ra,0(r3)
    17f4:	63c00017 	ldw	r15,0(r12)
    17f8:	39000015 	stw	r4,0(r7)
    17fc:	53800017 	ldw	r14,0(r10)
    1800:	6fc00015 	stw	ra,0(r13)
    1804:	5bc00015 	stw	r15,0(r11)
    1808:	4b800015 	stw	r14,0(r9)
    180c:	18c00404 	addi	r3,r3,16
    1810:	39c00404 	addi	r7,r7,16
    1814:	42000404 	addi	r8,r8,16
    1818:	6b400404 	addi	r13,r13,16
    181c:	63000404 	addi	r12,r12,16
    1820:	5ac00404 	addi	r11,r11,16
    1824:	52800404 	addi	r10,r10,16
    1828:	4a400404 	addi	r9,r9,16
    182c:	1c3fef1e 	bne	r3,r16,17ec <memcpy+0x5c>
    1830:	89c00044 	addi	r7,r17,1
    1834:	380e913a 	slli	r7,r7,4
    1838:	310003cc 	andi	r4,r6,15
    183c:	02c000c4 	movi	r11,3
    1840:	11c7883a 	add	r3,r2,r7
    1844:	29cb883a 	add	r5,r5,r7
    1848:	5900212e 	bgeu	r11,r4,18d0 <memcpy+0x140>
    184c:	1813883a 	mov	r9,r3
    1850:	2811883a 	mov	r8,r5
    1854:	200f883a 	mov	r7,r4
    1858:	42800017 	ldw	r10,0(r8)
    185c:	4a400104 	addi	r9,r9,4
    1860:	39ffff04 	addi	r7,r7,-4
    1864:	4abfff15 	stw	r10,-4(r9)
    1868:	42000104 	addi	r8,r8,4
    186c:	59fffa36 	bltu	r11,r7,1858 <memcpy+0xc8>
    1870:	213fff04 	addi	r4,r4,-4
    1874:	2008d0ba 	srli	r4,r4,2
    1878:	318000cc 	andi	r6,r6,3
    187c:	21000044 	addi	r4,r4,1
    1880:	2109883a 	add	r4,r4,r4
    1884:	2109883a 	add	r4,r4,r4
    1888:	1907883a 	add	r3,r3,r4
    188c:	290b883a 	add	r5,r5,r4
    1890:	30000626 	beq	r6,zero,18ac <memcpy+0x11c>
    1894:	198d883a 	add	r6,r3,r6
    1898:	29c00003 	ldbu	r7,0(r5)
    189c:	18c00044 	addi	r3,r3,1
    18a0:	29400044 	addi	r5,r5,1
    18a4:	19ffffc5 	stb	r7,-1(r3)
    18a8:	19bffb1e 	bne	r3,r6,1898 <memcpy+0x108>
    18ac:	dfc00217 	ldw	ra,8(sp)
    18b0:	dc400117 	ldw	r17,4(sp)
    18b4:	dc000017 	ldw	r16,0(sp)
    18b8:	dec00304 	addi	sp,sp,12
    18bc:	f800283a 	ret
    18c0:	2007883a 	mov	r3,r4
    18c4:	003ff206 	br	1890 <memcpy+0x100>
    18c8:	2007883a 	mov	r3,r4
    18cc:	003ff106 	br	1894 <memcpy+0x104>
    18d0:	200d883a 	mov	r6,r4
    18d4:	003fee06 	br	1890 <memcpy+0x100>

000018d8 <memmove>:
    18d8:	2005883a 	mov	r2,r4
    18dc:	29000b2e 	bgeu	r5,r4,190c <memmove+0x34>
    18e0:	298f883a 	add	r7,r5,r6
    18e4:	21c0092e 	bgeu	r4,r7,190c <memmove+0x34>
    18e8:	2187883a 	add	r3,r4,r6
    18ec:	198bc83a 	sub	r5,r3,r6
    18f0:	30004826 	beq	r6,zero,1a14 <memmove+0x13c>
    18f4:	39ffffc4 	addi	r7,r7,-1
    18f8:	39000003 	ldbu	r4,0(r7)
    18fc:	18ffffc4 	addi	r3,r3,-1
    1900:	19000005 	stb	r4,0(r3)
    1904:	28fffb1e 	bne	r5,r3,18f4 <memmove+0x1c>
    1908:	f800283a 	ret
    190c:	00c003c4 	movi	r3,15
    1910:	1980412e 	bgeu	r3,r6,1a18 <memmove+0x140>
    1914:	2886b03a 	or	r3,r5,r2
    1918:	18c000cc 	andi	r3,r3,3
    191c:	1800401e 	bne	r3,zero,1a20 <memmove+0x148>
    1920:	33fffc04 	addi	r15,r6,-16
    1924:	781ed13a 	srli	r15,r15,4
    1928:	28c00104 	addi	r3,r5,4
    192c:	13400104 	addi	r13,r2,4
    1930:	781c913a 	slli	r14,r15,4
    1934:	2b000204 	addi	r12,r5,8
    1938:	12c00204 	addi	r11,r2,8
    193c:	73800504 	addi	r14,r14,20
    1940:	2a800304 	addi	r10,r5,12
    1944:	12400304 	addi	r9,r2,12
    1948:	2b9d883a 	add	r14,r5,r14
    194c:	2811883a 	mov	r8,r5
    1950:	100f883a 	mov	r7,r2
    1954:	41000017 	ldw	r4,0(r8)
    1958:	39c00404 	addi	r7,r7,16
    195c:	18c00404 	addi	r3,r3,16
    1960:	393ffc15 	stw	r4,-16(r7)
    1964:	193ffc17 	ldw	r4,-16(r3)
    1968:	6b400404 	addi	r13,r13,16
    196c:	5ac00404 	addi	r11,r11,16
    1970:	693ffc15 	stw	r4,-16(r13)
    1974:	61000017 	ldw	r4,0(r12)
    1978:	4a400404 	addi	r9,r9,16
    197c:	42000404 	addi	r8,r8,16
    1980:	593ffc15 	stw	r4,-16(r11)
    1984:	51000017 	ldw	r4,0(r10)
    1988:	63000404 	addi	r12,r12,16
    198c:	52800404 	addi	r10,r10,16
    1990:	493ffc15 	stw	r4,-16(r9)
    1994:	1bbfef1e 	bne	r3,r14,1954 <memmove+0x7c>
    1998:	79000044 	addi	r4,r15,1
    199c:	2008913a 	slli	r4,r4,4
    19a0:	328003cc 	andi	r10,r6,15
    19a4:	02c000c4 	movi	r11,3
    19a8:	1107883a 	add	r3,r2,r4
    19ac:	290b883a 	add	r5,r5,r4
    19b0:	5a801e2e 	bgeu	r11,r10,1a2c <memmove+0x154>
    19b4:	1813883a 	mov	r9,r3
    19b8:	2811883a 	mov	r8,r5
    19bc:	500f883a 	mov	r7,r10
    19c0:	41000017 	ldw	r4,0(r8)
    19c4:	4a400104 	addi	r9,r9,4
    19c8:	39ffff04 	addi	r7,r7,-4
    19cc:	493fff15 	stw	r4,-4(r9)
    19d0:	42000104 	addi	r8,r8,4
    19d4:	59fffa36 	bltu	r11,r7,19c0 <memmove+0xe8>
    19d8:	513fff04 	addi	r4,r10,-4
    19dc:	2008d0ba 	srli	r4,r4,2
    19e0:	318000cc 	andi	r6,r6,3
    19e4:	21000044 	addi	r4,r4,1
    19e8:	2109883a 	add	r4,r4,r4
    19ec:	2109883a 	add	r4,r4,r4
    19f0:	1907883a 	add	r3,r3,r4
    19f4:	290b883a 	add	r5,r5,r4
    19f8:	30000b26 	beq	r6,zero,1a28 <memmove+0x150>
    19fc:	198d883a 	add	r6,r3,r6
    1a00:	29c00003 	ldbu	r7,0(r5)
    1a04:	18c00044 	addi	r3,r3,1
    1a08:	29400044 	addi	r5,r5,1
    1a0c:	19ffffc5 	stb	r7,-1(r3)
    1a10:	19bffb1e 	bne	r3,r6,1a00 <memmove+0x128>
    1a14:	f800283a 	ret
    1a18:	1007883a 	mov	r3,r2
    1a1c:	003ff606 	br	19f8 <memmove+0x120>
    1a20:	1007883a 	mov	r3,r2
    1a24:	003ff506 	br	19fc <memmove+0x124>
    1a28:	f800283a 	ret
    1a2c:	500d883a 	mov	r6,r10
    1a30:	003ff106 	br	19f8 <memmove+0x120>

00001a34 <memset>:
    1a34:	20c000cc 	andi	r3,r4,3
    1a38:	2005883a 	mov	r2,r4
    1a3c:	18004426 	beq	r3,zero,1b50 <memset+0x11c>
    1a40:	31ffffc4 	addi	r7,r6,-1
    1a44:	30004026 	beq	r6,zero,1b48 <memset+0x114>
    1a48:	2813883a 	mov	r9,r5
    1a4c:	200d883a 	mov	r6,r4
    1a50:	2007883a 	mov	r3,r4
    1a54:	00000406 	br	1a68 <memset+0x34>
    1a58:	3a3fffc4 	addi	r8,r7,-1
    1a5c:	31800044 	addi	r6,r6,1
    1a60:	38003926 	beq	r7,zero,1b48 <memset+0x114>
    1a64:	400f883a 	mov	r7,r8
    1a68:	18c00044 	addi	r3,r3,1
    1a6c:	32400005 	stb	r9,0(r6)
    1a70:	1a0000cc 	andi	r8,r3,3
    1a74:	403ff81e 	bne	r8,zero,1a58 <memset+0x24>
    1a78:	010000c4 	movi	r4,3
    1a7c:	21c02d2e 	bgeu	r4,r7,1b34 <memset+0x100>
    1a80:	29003fcc 	andi	r4,r5,255
    1a84:	200c923a 	slli	r6,r4,8
    1a88:	3108b03a 	or	r4,r6,r4
    1a8c:	200c943a 	slli	r6,r4,16
    1a90:	218cb03a 	or	r6,r4,r6
    1a94:	010003c4 	movi	r4,15
    1a98:	21c0182e 	bgeu	r4,r7,1afc <memset+0xc8>
    1a9c:	3b3ffc04 	addi	r12,r7,-16
    1aa0:	6018d13a 	srli	r12,r12,4
    1aa4:	1a000104 	addi	r8,r3,4
    1aa8:	1ac00204 	addi	r11,r3,8
    1aac:	6008913a 	slli	r4,r12,4
    1ab0:	1a800304 	addi	r10,r3,12
    1ab4:	1813883a 	mov	r9,r3
    1ab8:	21000504 	addi	r4,r4,20
    1abc:	1909883a 	add	r4,r3,r4
    1ac0:	49800015 	stw	r6,0(r9)
    1ac4:	41800015 	stw	r6,0(r8)
    1ac8:	59800015 	stw	r6,0(r11)
    1acc:	51800015 	stw	r6,0(r10)
    1ad0:	42000404 	addi	r8,r8,16
    1ad4:	4a400404 	addi	r9,r9,16
    1ad8:	5ac00404 	addi	r11,r11,16
    1adc:	52800404 	addi	r10,r10,16
    1ae0:	413ff71e 	bne	r8,r4,1ac0 <memset+0x8c>
    1ae4:	63000044 	addi	r12,r12,1
    1ae8:	6018913a 	slli	r12,r12,4
    1aec:	39c003cc 	andi	r7,r7,15
    1af0:	010000c4 	movi	r4,3
    1af4:	1b07883a 	add	r3,r3,r12
    1af8:	21c00e2e 	bgeu	r4,r7,1b34 <memset+0x100>
    1afc:	1813883a 	mov	r9,r3
    1b00:	3811883a 	mov	r8,r7
    1b04:	010000c4 	movi	r4,3
    1b08:	49800015 	stw	r6,0(r9)
    1b0c:	423fff04 	addi	r8,r8,-4
    1b10:	4a400104 	addi	r9,r9,4
    1b14:	223ffc36 	bltu	r4,r8,1b08 <memset+0xd4>
    1b18:	393fff04 	addi	r4,r7,-4
    1b1c:	2008d0ba 	srli	r4,r4,2
    1b20:	39c000cc 	andi	r7,r7,3
    1b24:	21000044 	addi	r4,r4,1
    1b28:	2109883a 	add	r4,r4,r4
    1b2c:	2109883a 	add	r4,r4,r4
    1b30:	1907883a 	add	r3,r3,r4
    1b34:	38000526 	beq	r7,zero,1b4c <memset+0x118>
    1b38:	19cf883a 	add	r7,r3,r7
    1b3c:	19400005 	stb	r5,0(r3)
    1b40:	18c00044 	addi	r3,r3,1
    1b44:	38fffd1e 	bne	r7,r3,1b3c <memset+0x108>
    1b48:	f800283a 	ret
    1b4c:	f800283a 	ret
    1b50:	2007883a 	mov	r3,r4
    1b54:	300f883a 	mov	r7,r6
    1b58:	003fc706 	br	1a78 <memset+0x44>

00001b5c <_realloc_r>:
    1b5c:	defff604 	addi	sp,sp,-40
    1b60:	dc400115 	stw	r17,4(sp)
    1b64:	dfc00915 	stw	ra,36(sp)
    1b68:	df000815 	stw	fp,32(sp)
    1b6c:	ddc00715 	stw	r23,28(sp)
    1b70:	dd800615 	stw	r22,24(sp)
    1b74:	dd400515 	stw	r21,20(sp)
    1b78:	dd000415 	stw	r20,16(sp)
    1b7c:	dcc00315 	stw	r19,12(sp)
    1b80:	dc800215 	stw	r18,8(sp)
    1b84:	dc000015 	stw	r16,0(sp)
    1b88:	3023883a 	mov	r17,r6
    1b8c:	2800b626 	beq	r5,zero,1e68 <_realloc_r+0x30c>
    1b90:	2829883a 	mov	r20,r5
    1b94:	2025883a 	mov	r18,r4
    1b98:	00036e40 	call	36e4 <__malloc_lock>
    1b9c:	a0ffff17 	ldw	r3,-4(r20)
    1ba0:	043fff04 	movi	r16,-4
    1ba4:	888002c4 	addi	r2,r17,11
    1ba8:	01000584 	movi	r4,22
    1bac:	a57ffe04 	addi	r21,r20,-8
    1bb0:	1c20703a 	and	r16,r3,r16
    1bb4:	2080332e 	bgeu	r4,r2,1c84 <_realloc_r+0x128>
    1bb8:	05bffe04 	movi	r22,-8
    1bbc:	15ac703a 	and	r22,r2,r22
    1bc0:	b005883a 	mov	r2,r22
    1bc4:	b0005716 	blt	r22,zero,1d24 <_realloc_r+0x1c8>
    1bc8:	b4405636 	bltu	r22,r17,1d24 <_realloc_r+0x1c8>
    1bcc:	8080300e 	bge	r16,r2,1c90 <_realloc_r+0x134>
    1bd0:	07000034 	movhi	fp,0
    1bd4:	e7179c04 	addi	fp,fp,24176
    1bd8:	e2000217 	ldw	r8,8(fp)
    1bdc:	ac09883a 	add	r4,r21,r16
    1be0:	22006126 	beq	r4,r8,1d68 <_realloc_r+0x20c>
    1be4:	22400117 	ldw	r9,4(r4)
    1be8:	01ffff84 	movi	r7,-2
    1bec:	49ce703a 	and	r7,r9,r7
    1bf0:	21cf883a 	add	r7,r4,r7
    1bf4:	39800117 	ldw	r6,4(r7)
    1bf8:	3180004c 	andi	r6,r6,1
    1bfc:	30003e26 	beq	r6,zero,1cf8 <_realloc_r+0x19c>
    1c00:	18c0004c 	andi	r3,r3,1
    1c04:	18008126 	beq	r3,zero,1e0c <_realloc_r+0x2b0>
    1c08:	880b883a 	mov	r5,r17
    1c0c:	9009883a 	mov	r4,r18
    1c10:	0000ea00 	call	ea0 <_malloc_r>
    1c14:	1023883a 	mov	r17,r2
    1c18:	10011e26 	beq	r2,zero,2094 <_realloc_r+0x538>
    1c1c:	a0ffff17 	ldw	r3,-4(r20)
    1c20:	113ffe04 	addi	r4,r2,-8
    1c24:	00bfff84 	movi	r2,-2
    1c28:	1884703a 	and	r2,r3,r2
    1c2c:	a885883a 	add	r2,r21,r2
    1c30:	2080ee26 	beq	r4,r2,1fec <_realloc_r+0x490>
    1c34:	81bfff04 	addi	r6,r16,-4
    1c38:	00800904 	movi	r2,36
    1c3c:	1180b836 	bltu	r2,r6,1f20 <_realloc_r+0x3c4>
    1c40:	00c004c4 	movi	r3,19
    1c44:	19809536 	bltu	r3,r6,1e9c <_realloc_r+0x340>
    1c48:	8805883a 	mov	r2,r17
    1c4c:	a007883a 	mov	r3,r20
    1c50:	19000017 	ldw	r4,0(r3)
    1c54:	11000015 	stw	r4,0(r2)
    1c58:	19000117 	ldw	r4,4(r3)
    1c5c:	11000115 	stw	r4,4(r2)
    1c60:	18c00217 	ldw	r3,8(r3)
    1c64:	10c00215 	stw	r3,8(r2)
    1c68:	a00b883a 	mov	r5,r20
    1c6c:	9009883a 	mov	r4,r18
    1c70:	00029280 	call	2928 <_free_r>
    1c74:	9009883a 	mov	r4,r18
    1c78:	00037080 	call	3708 <__malloc_unlock>
    1c7c:	8805883a 	mov	r2,r17
    1c80:	00001106 	br	1cc8 <_realloc_r+0x16c>
    1c84:	00800404 	movi	r2,16
    1c88:	102d883a 	mov	r22,r2
    1c8c:	003fce06 	br	1bc8 <_realloc_r+0x6c>
    1c90:	a023883a 	mov	r17,r20
    1c94:	858fc83a 	sub	r7,r16,r22
    1c98:	008003c4 	movi	r2,15
    1c9c:	18c0004c 	andi	r3,r3,1
    1ca0:	11c02436 	bltu	r2,r7,1d34 <_realloc_r+0x1d8>
    1ca4:	1c06b03a 	or	r3,r3,r16
    1ca8:	a8c00115 	stw	r3,4(r21)
    1cac:	ac21883a 	add	r16,r21,r16
    1cb0:	80800117 	ldw	r2,4(r16)
    1cb4:	10800054 	ori	r2,r2,1
    1cb8:	80800115 	stw	r2,4(r16)
    1cbc:	9009883a 	mov	r4,r18
    1cc0:	00037080 	call	3708 <__malloc_unlock>
    1cc4:	8805883a 	mov	r2,r17
    1cc8:	dfc00917 	ldw	ra,36(sp)
    1ccc:	df000817 	ldw	fp,32(sp)
    1cd0:	ddc00717 	ldw	r23,28(sp)
    1cd4:	dd800617 	ldw	r22,24(sp)
    1cd8:	dd400517 	ldw	r21,20(sp)
    1cdc:	dd000417 	ldw	r20,16(sp)
    1ce0:	dcc00317 	ldw	r19,12(sp)
    1ce4:	dc800217 	ldw	r18,8(sp)
    1ce8:	dc400117 	ldw	r17,4(sp)
    1cec:	dc000017 	ldw	r16,0(sp)
    1cf0:	dec00a04 	addi	sp,sp,40
    1cf4:	f800283a 	ret
    1cf8:	017fff04 	movi	r5,-4
    1cfc:	494a703a 	and	r5,r9,r5
    1d00:	814d883a 	add	r6,r16,r5
    1d04:	30801e16 	blt	r6,r2,1d80 <_realloc_r+0x224>
    1d08:	20800317 	ldw	r2,12(r4)
    1d0c:	21000217 	ldw	r4,8(r4)
    1d10:	a023883a 	mov	r17,r20
    1d14:	3021883a 	mov	r16,r6
    1d18:	20800315 	stw	r2,12(r4)
    1d1c:	11000215 	stw	r4,8(r2)
    1d20:	003fdc06 	br	1c94 <_realloc_r+0x138>
    1d24:	00800304 	movi	r2,12
    1d28:	90800015 	stw	r2,0(r18)
    1d2c:	0005883a 	mov	r2,zero
    1d30:	003fe506 	br	1cc8 <_realloc_r+0x16c>
    1d34:	1d86b03a 	or	r3,r3,r22
    1d38:	a8c00115 	stw	r3,4(r21)
    1d3c:	ad8b883a 	add	r5,r21,r22
    1d40:	38c00054 	ori	r3,r7,1
    1d44:	28c00115 	stw	r3,4(r5)
    1d48:	29cf883a 	add	r7,r5,r7
    1d4c:	38c00117 	ldw	r3,4(r7)
    1d50:	29400204 	addi	r5,r5,8
    1d54:	9009883a 	mov	r4,r18
    1d58:	18800054 	ori	r2,r3,1
    1d5c:	38800115 	stw	r2,4(r7)
    1d60:	00029280 	call	2928 <_free_r>
    1d64:	003fd506 	br	1cbc <_realloc_r+0x160>
    1d68:	21c00117 	ldw	r7,4(r4)
    1d6c:	017fff04 	movi	r5,-4
    1d70:	b1800404 	addi	r6,r22,16
    1d74:	394a703a 	and	r5,r7,r5
    1d78:	814f883a 	add	r7,r16,r5
    1d7c:	39805b0e 	bge	r7,r6,1eec <_realloc_r+0x390>
    1d80:	18c0004c 	andi	r3,r3,1
    1d84:	183fa01e 	bne	r3,zero,1c08 <_realloc_r+0xac>
    1d88:	a4fffe17 	ldw	r19,-8(r20)
    1d8c:	00ffff04 	movi	r3,-4
    1d90:	ace7c83a 	sub	r19,r21,r19
    1d94:	99800117 	ldw	r6,4(r19)
    1d98:	30c6703a 	and	r3,r6,r3
    1d9c:	20002026 	beq	r4,zero,1e20 <_realloc_r+0x2c4>
    1da0:	80ef883a 	add	r23,r16,r3
    1da4:	b96f883a 	add	r23,r23,r5
    1da8:	22006126 	beq	r4,r8,1f30 <_realloc_r+0x3d4>
    1dac:	b8801c16 	blt	r23,r2,1e20 <_realloc_r+0x2c4>
    1db0:	20800317 	ldw	r2,12(r4)
    1db4:	20c00217 	ldw	r3,8(r4)
    1db8:	81bfff04 	addi	r6,r16,-4
    1dbc:	01000904 	movi	r4,36
    1dc0:	18800315 	stw	r2,12(r3)
    1dc4:	10c00215 	stw	r3,8(r2)
    1dc8:	98c00217 	ldw	r3,8(r19)
    1dcc:	98800317 	ldw	r2,12(r19)
    1dd0:	9c400204 	addi	r17,r19,8
    1dd4:	18800315 	stw	r2,12(r3)
    1dd8:	10c00215 	stw	r3,8(r2)
    1ddc:	21801b36 	bltu	r4,r6,1e4c <_realloc_r+0x2f0>
    1de0:	008004c4 	movi	r2,19
    1de4:	1180362e 	bgeu	r2,r6,1ec0 <_realloc_r+0x364>
    1de8:	a0800017 	ldw	r2,0(r20)
    1dec:	98800215 	stw	r2,8(r19)
    1df0:	a0800117 	ldw	r2,4(r20)
    1df4:	98800315 	stw	r2,12(r19)
    1df8:	008006c4 	movi	r2,27
    1dfc:	11808136 	bltu	r2,r6,2004 <_realloc_r+0x4a8>
    1e00:	98800404 	addi	r2,r19,16
    1e04:	a5000204 	addi	r20,r20,8
    1e08:	00002e06 	br	1ec4 <_realloc_r+0x368>
    1e0c:	a4fffe17 	ldw	r19,-8(r20)
    1e10:	00ffff04 	movi	r3,-4
    1e14:	ace7c83a 	sub	r19,r21,r19
    1e18:	99000117 	ldw	r4,4(r19)
    1e1c:	20c6703a 	and	r3,r4,r3
    1e20:	983f7926 	beq	r19,zero,1c08 <_realloc_r+0xac>
    1e24:	80ef883a 	add	r23,r16,r3
    1e28:	b8bf7716 	blt	r23,r2,1c08 <_realloc_r+0xac>
    1e2c:	98800317 	ldw	r2,12(r19)
    1e30:	98c00217 	ldw	r3,8(r19)
    1e34:	81bfff04 	addi	r6,r16,-4
    1e38:	01000904 	movi	r4,36
    1e3c:	18800315 	stw	r2,12(r3)
    1e40:	10c00215 	stw	r3,8(r2)
    1e44:	9c400204 	addi	r17,r19,8
    1e48:	21bfe52e 	bgeu	r4,r6,1de0 <_realloc_r+0x284>
    1e4c:	a00b883a 	mov	r5,r20
    1e50:	8809883a 	mov	r4,r17
    1e54:	00018d80 	call	18d8 <memmove>
    1e58:	98c00117 	ldw	r3,4(r19)
    1e5c:	b821883a 	mov	r16,r23
    1e60:	982b883a 	mov	r21,r19
    1e64:	003f8b06 	br	1c94 <_realloc_r+0x138>
    1e68:	300b883a 	mov	r5,r6
    1e6c:	dfc00917 	ldw	ra,36(sp)
    1e70:	df000817 	ldw	fp,32(sp)
    1e74:	ddc00717 	ldw	r23,28(sp)
    1e78:	dd800617 	ldw	r22,24(sp)
    1e7c:	dd400517 	ldw	r21,20(sp)
    1e80:	dd000417 	ldw	r20,16(sp)
    1e84:	dcc00317 	ldw	r19,12(sp)
    1e88:	dc800217 	ldw	r18,8(sp)
    1e8c:	dc400117 	ldw	r17,4(sp)
    1e90:	dc000017 	ldw	r16,0(sp)
    1e94:	dec00a04 	addi	sp,sp,40
    1e98:	0000ea01 	jmpi	ea0 <_malloc_r>
    1e9c:	a0c00017 	ldw	r3,0(r20)
    1ea0:	88c00015 	stw	r3,0(r17)
    1ea4:	a0c00117 	ldw	r3,4(r20)
    1ea8:	88c00115 	stw	r3,4(r17)
    1eac:	00c006c4 	movi	r3,27
    1eb0:	19804636 	bltu	r3,r6,1fcc <_realloc_r+0x470>
    1eb4:	88800204 	addi	r2,r17,8
    1eb8:	a0c00204 	addi	r3,r20,8
    1ebc:	003f6406 	br	1c50 <_realloc_r+0xf4>
    1ec0:	8805883a 	mov	r2,r17
    1ec4:	a0c00017 	ldw	r3,0(r20)
    1ec8:	b821883a 	mov	r16,r23
    1ecc:	982b883a 	mov	r21,r19
    1ed0:	10c00015 	stw	r3,0(r2)
    1ed4:	a0c00117 	ldw	r3,4(r20)
    1ed8:	10c00115 	stw	r3,4(r2)
    1edc:	a0c00217 	ldw	r3,8(r20)
    1ee0:	10c00215 	stw	r3,8(r2)
    1ee4:	98c00117 	ldw	r3,4(r19)
    1ee8:	003f6a06 	br	1c94 <_realloc_r+0x138>
    1eec:	adab883a 	add	r21,r21,r22
    1ef0:	3d85c83a 	sub	r2,r7,r22
    1ef4:	e5400215 	stw	r21,8(fp)
    1ef8:	10800054 	ori	r2,r2,1
    1efc:	a8800115 	stw	r2,4(r21)
    1f00:	a0bfff17 	ldw	r2,-4(r20)
    1f04:	9009883a 	mov	r4,r18
    1f08:	1080004c 	andi	r2,r2,1
    1f0c:	1584b03a 	or	r2,r2,r22
    1f10:	a0bfff15 	stw	r2,-4(r20)
    1f14:	00037080 	call	3708 <__malloc_unlock>
    1f18:	a005883a 	mov	r2,r20
    1f1c:	003f6a06 	br	1cc8 <_realloc_r+0x16c>
    1f20:	a00b883a 	mov	r5,r20
    1f24:	8809883a 	mov	r4,r17
    1f28:	00018d80 	call	18d8 <memmove>
    1f2c:	003f4e06 	br	1c68 <_realloc_r+0x10c>
    1f30:	b1000404 	addi	r4,r22,16
    1f34:	b93fba16 	blt	r23,r4,1e20 <_realloc_r+0x2c4>
    1f38:	98800317 	ldw	r2,12(r19)
    1f3c:	98c00217 	ldw	r3,8(r19)
    1f40:	81bfff04 	addi	r6,r16,-4
    1f44:	01000904 	movi	r4,36
    1f48:	18800315 	stw	r2,12(r3)
    1f4c:	10c00215 	stw	r3,8(r2)
    1f50:	9c400204 	addi	r17,r19,8
    1f54:	21804336 	bltu	r4,r6,2064 <_realloc_r+0x508>
    1f58:	008004c4 	movi	r2,19
    1f5c:	11803f2e 	bgeu	r2,r6,205c <_realloc_r+0x500>
    1f60:	a0800017 	ldw	r2,0(r20)
    1f64:	98800215 	stw	r2,8(r19)
    1f68:	a0800117 	ldw	r2,4(r20)
    1f6c:	98800315 	stw	r2,12(r19)
    1f70:	008006c4 	movi	r2,27
    1f74:	11803f36 	bltu	r2,r6,2074 <_realloc_r+0x518>
    1f78:	98800404 	addi	r2,r19,16
    1f7c:	a5000204 	addi	r20,r20,8
    1f80:	a0c00017 	ldw	r3,0(r20)
    1f84:	10c00015 	stw	r3,0(r2)
    1f88:	a0c00117 	ldw	r3,4(r20)
    1f8c:	10c00115 	stw	r3,4(r2)
    1f90:	a0c00217 	ldw	r3,8(r20)
    1f94:	10c00215 	stw	r3,8(r2)
    1f98:	9d87883a 	add	r3,r19,r22
    1f9c:	bd85c83a 	sub	r2,r23,r22
    1fa0:	e0c00215 	stw	r3,8(fp)
    1fa4:	10800054 	ori	r2,r2,1
    1fa8:	18800115 	stw	r2,4(r3)
    1fac:	98800117 	ldw	r2,4(r19)
    1fb0:	9009883a 	mov	r4,r18
    1fb4:	1080004c 	andi	r2,r2,1
    1fb8:	1584b03a 	or	r2,r2,r22
    1fbc:	98800115 	stw	r2,4(r19)
    1fc0:	00037080 	call	3708 <__malloc_unlock>
    1fc4:	8805883a 	mov	r2,r17
    1fc8:	003f3f06 	br	1cc8 <_realloc_r+0x16c>
    1fcc:	a0c00217 	ldw	r3,8(r20)
    1fd0:	88c00215 	stw	r3,8(r17)
    1fd4:	a0c00317 	ldw	r3,12(r20)
    1fd8:	88c00315 	stw	r3,12(r17)
    1fdc:	30801126 	beq	r6,r2,2024 <_realloc_r+0x4c8>
    1fe0:	88800404 	addi	r2,r17,16
    1fe4:	a0c00404 	addi	r3,r20,16
    1fe8:	003f1906 	br	1c50 <_realloc_r+0xf4>
    1fec:	893fff17 	ldw	r4,-4(r17)
    1ff0:	00bfff04 	movi	r2,-4
    1ff4:	a023883a 	mov	r17,r20
    1ff8:	2084703a 	and	r2,r4,r2
    1ffc:	80a1883a 	add	r16,r16,r2
    2000:	003f2406 	br	1c94 <_realloc_r+0x138>
    2004:	a0800217 	ldw	r2,8(r20)
    2008:	98800415 	stw	r2,16(r19)
    200c:	a0800317 	ldw	r2,12(r20)
    2010:	98800515 	stw	r2,20(r19)
    2014:	31000a26 	beq	r6,r4,2040 <_realloc_r+0x4e4>
    2018:	98800604 	addi	r2,r19,24
    201c:	a5000404 	addi	r20,r20,16
    2020:	003fa806 	br	1ec4 <_realloc_r+0x368>
    2024:	a1000417 	ldw	r4,16(r20)
    2028:	88800604 	addi	r2,r17,24
    202c:	a0c00604 	addi	r3,r20,24
    2030:	89000415 	stw	r4,16(r17)
    2034:	a1000517 	ldw	r4,20(r20)
    2038:	89000515 	stw	r4,20(r17)
    203c:	003f0406 	br	1c50 <_realloc_r+0xf4>
    2040:	a0c00417 	ldw	r3,16(r20)
    2044:	a5000604 	addi	r20,r20,24
    2048:	98800804 	addi	r2,r19,32
    204c:	98c00615 	stw	r3,24(r19)
    2050:	a0ffff17 	ldw	r3,-4(r20)
    2054:	98c00715 	stw	r3,28(r19)
    2058:	003f9a06 	br	1ec4 <_realloc_r+0x368>
    205c:	8805883a 	mov	r2,r17
    2060:	003fc706 	br	1f80 <_realloc_r+0x424>
    2064:	a00b883a 	mov	r5,r20
    2068:	8809883a 	mov	r4,r17
    206c:	00018d80 	call	18d8 <memmove>
    2070:	003fc906 	br	1f98 <_realloc_r+0x43c>
    2074:	a0800217 	ldw	r2,8(r20)
    2078:	98800415 	stw	r2,16(r19)
    207c:	a0800317 	ldw	r2,12(r20)
    2080:	98800515 	stw	r2,20(r19)
    2084:	31000726 	beq	r6,r4,20a4 <_realloc_r+0x548>
    2088:	98800604 	addi	r2,r19,24
    208c:	a5000404 	addi	r20,r20,16
    2090:	003fbb06 	br	1f80 <_realloc_r+0x424>
    2094:	9009883a 	mov	r4,r18
    2098:	00037080 	call	3708 <__malloc_unlock>
    209c:	0005883a 	mov	r2,zero
    20a0:	003f0906 	br	1cc8 <_realloc_r+0x16c>
    20a4:	a0c00417 	ldw	r3,16(r20)
    20a8:	a5000604 	addi	r20,r20,24
    20ac:	98800804 	addi	r2,r19,32
    20b0:	98c00615 	stw	r3,24(r19)
    20b4:	a0ffff17 	ldw	r3,-4(r20)
    20b8:	98c00715 	stw	r3,28(r19)
    20bc:	003fb006 	br	1f80 <_realloc_r+0x424>

000020c0 <_sbrk_r>:
    20c0:	defffd04 	addi	sp,sp,-12
    20c4:	dc000015 	stw	r16,0(sp)
    20c8:	04000074 	movhi	r16,1
    20cc:	dc400115 	stw	r17,4(sp)
    20d0:	8423cc04 	addi	r16,r16,-28880
    20d4:	2023883a 	mov	r17,r4
    20d8:	2809883a 	mov	r4,r5
    20dc:	dfc00215 	stw	ra,8(sp)
    20e0:	80000015 	stw	zero,0(r16)
    20e4:	00038dc0 	call	38dc <sbrk>
    20e8:	00ffffc4 	movi	r3,-1
    20ec:	10c00526 	beq	r2,r3,2104 <_sbrk_r+0x44>
    20f0:	dfc00217 	ldw	ra,8(sp)
    20f4:	dc400117 	ldw	r17,4(sp)
    20f8:	dc000017 	ldw	r16,0(sp)
    20fc:	dec00304 	addi	sp,sp,12
    2100:	f800283a 	ret
    2104:	80c00017 	ldw	r3,0(r16)
    2108:	183ff926 	beq	r3,zero,20f0 <_sbrk_r+0x30>
    210c:	88c00015 	stw	r3,0(r17)
    2110:	003ff706 	br	20f0 <_sbrk_r+0x30>

00002114 <__sread>:
    2114:	defffe04 	addi	sp,sp,-8
    2118:	dc000015 	stw	r16,0(sp)
    211c:	2821883a 	mov	r16,r5
    2120:	2940038f 	ldh	r5,14(r5)
    2124:	dfc00115 	stw	ra,4(sp)
    2128:	0002e540 	call	2e54 <_read_r>
    212c:	10000716 	blt	r2,zero,214c <__sread+0x38>
    2130:	80c01417 	ldw	r3,80(r16)
    2134:	1887883a 	add	r3,r3,r2
    2138:	80c01415 	stw	r3,80(r16)
    213c:	dfc00117 	ldw	ra,4(sp)
    2140:	dc000017 	ldw	r16,0(sp)
    2144:	dec00204 	addi	sp,sp,8
    2148:	f800283a 	ret
    214c:	80c0030b 	ldhu	r3,12(r16)
    2150:	18fbffcc 	andi	r3,r3,61439
    2154:	80c0030d 	sth	r3,12(r16)
    2158:	dfc00117 	ldw	ra,4(sp)
    215c:	dc000017 	ldw	r16,0(sp)
    2160:	dec00204 	addi	sp,sp,8
    2164:	f800283a 	ret

00002168 <__seofread>:
    2168:	0005883a 	mov	r2,zero
    216c:	f800283a 	ret

00002170 <__swrite>:
    2170:	2880030b 	ldhu	r2,12(r5)
    2174:	defffb04 	addi	sp,sp,-20
    2178:	dcc00315 	stw	r19,12(sp)
    217c:	dc800215 	stw	r18,8(sp)
    2180:	dc400115 	stw	r17,4(sp)
    2184:	dc000015 	stw	r16,0(sp)
    2188:	dfc00415 	stw	ra,16(sp)
    218c:	10c0400c 	andi	r3,r2,256
    2190:	2821883a 	mov	r16,r5
    2194:	2023883a 	mov	r17,r4
    2198:	3025883a 	mov	r18,r6
    219c:	3827883a 	mov	r19,r7
    21a0:	18000526 	beq	r3,zero,21b8 <__swrite+0x48>
    21a4:	2940038f 	ldh	r5,14(r5)
    21a8:	01c00084 	movi	r7,2
    21ac:	000d883a 	mov	r6,zero
    21b0:	0002c380 	call	2c38 <_lseek_r>
    21b4:	8080030b 	ldhu	r2,12(r16)
    21b8:	8140038f 	ldh	r5,14(r16)
    21bc:	10bbffcc 	andi	r2,r2,61439
    21c0:	980f883a 	mov	r7,r19
    21c4:	900d883a 	mov	r6,r18
    21c8:	8809883a 	mov	r4,r17
    21cc:	8080030d 	sth	r2,12(r16)
    21d0:	dfc00417 	ldw	ra,16(sp)
    21d4:	dcc00317 	ldw	r19,12(sp)
    21d8:	dc800217 	ldw	r18,8(sp)
    21dc:	dc400117 	ldw	r17,4(sp)
    21e0:	dc000017 	ldw	r16,0(sp)
    21e4:	dec00504 	addi	sp,sp,20
    21e8:	00022501 	jmpi	2250 <_write_r>

000021ec <__sseek>:
    21ec:	defffe04 	addi	sp,sp,-8
    21f0:	dc000015 	stw	r16,0(sp)
    21f4:	2821883a 	mov	r16,r5
    21f8:	2940038f 	ldh	r5,14(r5)
    21fc:	dfc00115 	stw	ra,4(sp)
    2200:	0002c380 	call	2c38 <_lseek_r>
    2204:	00ffffc4 	movi	r3,-1
    2208:	10c00826 	beq	r2,r3,222c <__sseek+0x40>
    220c:	80c0030b 	ldhu	r3,12(r16)
    2210:	80801415 	stw	r2,80(r16)
    2214:	18c40014 	ori	r3,r3,4096
    2218:	80c0030d 	sth	r3,12(r16)
    221c:	dfc00117 	ldw	ra,4(sp)
    2220:	dc000017 	ldw	r16,0(sp)
    2224:	dec00204 	addi	sp,sp,8
    2228:	f800283a 	ret
    222c:	80c0030b 	ldhu	r3,12(r16)
    2230:	18fbffcc 	andi	r3,r3,61439
    2234:	80c0030d 	sth	r3,12(r16)
    2238:	dfc00117 	ldw	ra,4(sp)
    223c:	dc000017 	ldw	r16,0(sp)
    2240:	dec00204 	addi	sp,sp,8
    2244:	f800283a 	ret

00002248 <__sclose>:
    2248:	2940038f 	ldh	r5,14(r5)
    224c:	00024041 	jmpi	2404 <_close_r>

00002250 <_write_r>:
    2250:	defffd04 	addi	sp,sp,-12
    2254:	2805883a 	mov	r2,r5
    2258:	dc000015 	stw	r16,0(sp)
    225c:	04000074 	movhi	r16,1
    2260:	dc400115 	stw	r17,4(sp)
    2264:	300b883a 	mov	r5,r6
    2268:	8423cc04 	addi	r16,r16,-28880
    226c:	2023883a 	mov	r17,r4
    2270:	380d883a 	mov	r6,r7
    2274:	1009883a 	mov	r4,r2
    2278:	dfc00215 	stw	ra,8(sp)
    227c:	80000015 	stw	zero,0(r16)
    2280:	00039dc0 	call	39dc <write>
    2284:	00ffffc4 	movi	r3,-1
    2288:	10c00526 	beq	r2,r3,22a0 <_write_r+0x50>
    228c:	dfc00217 	ldw	ra,8(sp)
    2290:	dc400117 	ldw	r17,4(sp)
    2294:	dc000017 	ldw	r16,0(sp)
    2298:	dec00304 	addi	sp,sp,12
    229c:	f800283a 	ret
    22a0:	80c00017 	ldw	r3,0(r16)
    22a4:	183ff926 	beq	r3,zero,228c <_write_r+0x3c>
    22a8:	88c00015 	stw	r3,0(r17)
    22ac:	003ff706 	br	228c <_write_r+0x3c>

000022b0 <__swsetup_r>:
    22b0:	00800034 	movhi	r2,0
    22b4:	defffd04 	addi	sp,sp,-12
    22b8:	109d2104 	addi	r2,r2,29828
    22bc:	dc400115 	stw	r17,4(sp)
    22c0:	2023883a 	mov	r17,r4
    22c4:	11000017 	ldw	r4,0(r2)
    22c8:	dc000015 	stw	r16,0(sp)
    22cc:	dfc00215 	stw	ra,8(sp)
    22d0:	2821883a 	mov	r16,r5
    22d4:	20000226 	beq	r4,zero,22e0 <__swsetup_r+0x30>
    22d8:	20800e17 	ldw	r2,56(r4)
    22dc:	10003126 	beq	r2,zero,23a4 <__swsetup_r+0xf4>
    22e0:	8080030b 	ldhu	r2,12(r16)
    22e4:	10c0020c 	andi	r3,r2,8
    22e8:	1009883a 	mov	r4,r2
    22ec:	18000f26 	beq	r3,zero,232c <__swsetup_r+0x7c>
    22f0:	80c00417 	ldw	r3,16(r16)
    22f4:	18001526 	beq	r3,zero,234c <__swsetup_r+0x9c>
    22f8:	1100004c 	andi	r4,r2,1
    22fc:	20001c1e 	bne	r4,zero,2370 <__swsetup_r+0xc0>
    2300:	1080008c 	andi	r2,r2,2
    2304:	1000291e 	bne	r2,zero,23ac <__swsetup_r+0xfc>
    2308:	80800517 	ldw	r2,20(r16)
    230c:	80800215 	stw	r2,8(r16)
    2310:	18001c26 	beq	r3,zero,2384 <__swsetup_r+0xd4>
    2314:	0005883a 	mov	r2,zero
    2318:	dfc00217 	ldw	ra,8(sp)
    231c:	dc400117 	ldw	r17,4(sp)
    2320:	dc000017 	ldw	r16,0(sp)
    2324:	dec00304 	addi	sp,sp,12
    2328:	f800283a 	ret
    232c:	2080040c 	andi	r2,r4,16
    2330:	10002e26 	beq	r2,zero,23ec <__swsetup_r+0x13c>
    2334:	2080010c 	andi	r2,r4,4
    2338:	10001e1e 	bne	r2,zero,23b4 <__swsetup_r+0x104>
    233c:	80c00417 	ldw	r3,16(r16)
    2340:	20800214 	ori	r2,r4,8
    2344:	8080030d 	sth	r2,12(r16)
    2348:	183feb1e 	bne	r3,zero,22f8 <__swsetup_r+0x48>
    234c:	1100a00c 	andi	r4,r2,640
    2350:	01408004 	movi	r5,512
    2354:	217fe826 	beq	r4,r5,22f8 <__swsetup_r+0x48>
    2358:	800b883a 	mov	r5,r16
    235c:	8809883a 	mov	r4,r17
    2360:	0002c980 	call	2c98 <__smakebuf_r>
    2364:	8080030b 	ldhu	r2,12(r16)
    2368:	80c00417 	ldw	r3,16(r16)
    236c:	003fe206 	br	22f8 <__swsetup_r+0x48>
    2370:	80800517 	ldw	r2,20(r16)
    2374:	80000215 	stw	zero,8(r16)
    2378:	0085c83a 	sub	r2,zero,r2
    237c:	80800615 	stw	r2,24(r16)
    2380:	183fe41e 	bne	r3,zero,2314 <__swsetup_r+0x64>
    2384:	80c0030b 	ldhu	r3,12(r16)
    2388:	0005883a 	mov	r2,zero
    238c:	1900200c 	andi	r4,r3,128
    2390:	203fe126 	beq	r4,zero,2318 <__swsetup_r+0x68>
    2394:	18c01014 	ori	r3,r3,64
    2398:	80c0030d 	sth	r3,12(r16)
    239c:	00bfffc4 	movi	r2,-1
    23a0:	003fdd06 	br	2318 <__swsetup_r+0x68>
    23a4:	000080c0 	call	80c <__sinit>
    23a8:	003fcd06 	br	22e0 <__swsetup_r+0x30>
    23ac:	0005883a 	mov	r2,zero
    23b0:	003fd606 	br	230c <__swsetup_r+0x5c>
    23b4:	81400c17 	ldw	r5,48(r16)
    23b8:	28000626 	beq	r5,zero,23d4 <__swsetup_r+0x124>
    23bc:	80801004 	addi	r2,r16,64
    23c0:	28800326 	beq	r5,r2,23d0 <__swsetup_r+0x120>
    23c4:	8809883a 	mov	r4,r17
    23c8:	00029280 	call	2928 <_free_r>
    23cc:	8100030b 	ldhu	r4,12(r16)
    23d0:	80000c15 	stw	zero,48(r16)
    23d4:	80c00417 	ldw	r3,16(r16)
    23d8:	00bff6c4 	movi	r2,-37
    23dc:	1108703a 	and	r4,r2,r4
    23e0:	80000115 	stw	zero,4(r16)
    23e4:	80c00015 	stw	r3,0(r16)
    23e8:	003fd506 	br	2340 <__swsetup_r+0x90>
    23ec:	00800244 	movi	r2,9
    23f0:	88800015 	stw	r2,0(r17)
    23f4:	20801014 	ori	r2,r4,64
    23f8:	8080030d 	sth	r2,12(r16)
    23fc:	00bfffc4 	movi	r2,-1
    2400:	003fc506 	br	2318 <__swsetup_r+0x68>

00002404 <_close_r>:
    2404:	defffd04 	addi	sp,sp,-12
    2408:	dc000015 	stw	r16,0(sp)
    240c:	04000074 	movhi	r16,1
    2410:	dc400115 	stw	r17,4(sp)
    2414:	8423cc04 	addi	r16,r16,-28880
    2418:	2023883a 	mov	r17,r4
    241c:	2809883a 	mov	r4,r5
    2420:	dfc00215 	stw	ra,8(sp)
    2424:	80000015 	stw	zero,0(r16)
    2428:	00031680 	call	3168 <close>
    242c:	00ffffc4 	movi	r3,-1
    2430:	10c00526 	beq	r2,r3,2448 <_close_r+0x44>
    2434:	dfc00217 	ldw	ra,8(sp)
    2438:	dc400117 	ldw	r17,4(sp)
    243c:	dc000017 	ldw	r16,0(sp)
    2440:	dec00304 	addi	sp,sp,12
    2444:	f800283a 	ret
    2448:	80c00017 	ldw	r3,0(r16)
    244c:	183ff926 	beq	r3,zero,2434 <_close_r+0x30>
    2450:	88c00015 	stw	r3,0(r17)
    2454:	003ff706 	br	2434 <_close_r+0x30>

00002458 <_fclose_r>:
    2458:	28003926 	beq	r5,zero,2540 <_fclose_r+0xe8>
    245c:	defffc04 	addi	sp,sp,-16
    2460:	dc400115 	stw	r17,4(sp)
    2464:	dc000015 	stw	r16,0(sp)
    2468:	dfc00315 	stw	ra,12(sp)
    246c:	dc800215 	stw	r18,8(sp)
    2470:	2023883a 	mov	r17,r4
    2474:	2821883a 	mov	r16,r5
    2478:	20000226 	beq	r4,zero,2484 <_fclose_r+0x2c>
    247c:	20800e17 	ldw	r2,56(r4)
    2480:	10002726 	beq	r2,zero,2520 <_fclose_r+0xc8>
    2484:	8080030f 	ldh	r2,12(r16)
    2488:	1000071e 	bne	r2,zero,24a8 <_fclose_r+0x50>
    248c:	0005883a 	mov	r2,zero
    2490:	dfc00317 	ldw	ra,12(sp)
    2494:	dc800217 	ldw	r18,8(sp)
    2498:	dc400117 	ldw	r17,4(sp)
    249c:	dc000017 	ldw	r16,0(sp)
    24a0:	dec00404 	addi	sp,sp,16
    24a4:	f800283a 	ret
    24a8:	800b883a 	mov	r5,r16
    24ac:	8809883a 	mov	r4,r17
    24b0:	000255c0 	call	255c <__sflush_r>
    24b4:	1025883a 	mov	r18,r2
    24b8:	80800b17 	ldw	r2,44(r16)
    24bc:	10000426 	beq	r2,zero,24d0 <_fclose_r+0x78>
    24c0:	81400717 	ldw	r5,28(r16)
    24c4:	8809883a 	mov	r4,r17
    24c8:	103ee83a 	callr	r2
    24cc:	10001616 	blt	r2,zero,2528 <_fclose_r+0xd0>
    24d0:	8080030b 	ldhu	r2,12(r16)
    24d4:	1080200c 	andi	r2,r2,128
    24d8:	1000151e 	bne	r2,zero,2530 <_fclose_r+0xd8>
    24dc:	81400c17 	ldw	r5,48(r16)
    24e0:	28000526 	beq	r5,zero,24f8 <_fclose_r+0xa0>
    24e4:	80801004 	addi	r2,r16,64
    24e8:	28800226 	beq	r5,r2,24f4 <_fclose_r+0x9c>
    24ec:	8809883a 	mov	r4,r17
    24f0:	00029280 	call	2928 <_free_r>
    24f4:	80000c15 	stw	zero,48(r16)
    24f8:	81401117 	ldw	r5,68(r16)
    24fc:	28000326 	beq	r5,zero,250c <_fclose_r+0xb4>
    2500:	8809883a 	mov	r4,r17
    2504:	00029280 	call	2928 <_free_r>
    2508:	80001115 	stw	zero,68(r16)
    250c:	000081c0 	call	81c <__sfp_lock_acquire>
    2510:	8000030d 	sth	zero,12(r16)
    2514:	00008200 	call	820 <__sfp_lock_release>
    2518:	9005883a 	mov	r2,r18
    251c:	003fdc06 	br	2490 <_fclose_r+0x38>
    2520:	000080c0 	call	80c <__sinit>
    2524:	003fd706 	br	2484 <_fclose_r+0x2c>
    2528:	04bfffc4 	movi	r18,-1
    252c:	003fe806 	br	24d0 <_fclose_r+0x78>
    2530:	81400417 	ldw	r5,16(r16)
    2534:	8809883a 	mov	r4,r17
    2538:	00029280 	call	2928 <_free_r>
    253c:	003fe706 	br	24dc <_fclose_r+0x84>
    2540:	0005883a 	mov	r2,zero
    2544:	f800283a 	ret

00002548 <fclose>:
    2548:	00800034 	movhi	r2,0
    254c:	109d2104 	addi	r2,r2,29828
    2550:	200b883a 	mov	r5,r4
    2554:	11000017 	ldw	r4,0(r2)
    2558:	00024581 	jmpi	2458 <_fclose_r>

0000255c <__sflush_r>:
    255c:	2880030b 	ldhu	r2,12(r5)
    2560:	defffb04 	addi	sp,sp,-20
    2564:	dcc00315 	stw	r19,12(sp)
    2568:	dc400115 	stw	r17,4(sp)
    256c:	dfc00415 	stw	ra,16(sp)
    2570:	dc800215 	stw	r18,8(sp)
    2574:	dc000015 	stw	r16,0(sp)
    2578:	10c0020c 	andi	r3,r2,8
    257c:	2823883a 	mov	r17,r5
    2580:	2027883a 	mov	r19,r4
    2584:	1800311e 	bne	r3,zero,264c <__sflush_r+0xf0>
    2588:	28c00117 	ldw	r3,4(r5)
    258c:	10820014 	ori	r2,r2,2048
    2590:	2880030d 	sth	r2,12(r5)
    2594:	00c04b0e 	bge	zero,r3,26c4 <__sflush_r+0x168>
    2598:	8a000a17 	ldw	r8,40(r17)
    259c:	40002326 	beq	r8,zero,262c <__sflush_r+0xd0>
    25a0:	9c000017 	ldw	r16,0(r19)
    25a4:	10c4000c 	andi	r3,r2,4096
    25a8:	98000015 	stw	zero,0(r19)
    25ac:	18004826 	beq	r3,zero,26d0 <__sflush_r+0x174>
    25b0:	89801417 	ldw	r6,80(r17)
    25b4:	10c0010c 	andi	r3,r2,4
    25b8:	18000626 	beq	r3,zero,25d4 <__sflush_r+0x78>
    25bc:	88c00117 	ldw	r3,4(r17)
    25c0:	88800c17 	ldw	r2,48(r17)
    25c4:	30cdc83a 	sub	r6,r6,r3
    25c8:	10000226 	beq	r2,zero,25d4 <__sflush_r+0x78>
    25cc:	88800f17 	ldw	r2,60(r17)
    25d0:	308dc83a 	sub	r6,r6,r2
    25d4:	89400717 	ldw	r5,28(r17)
    25d8:	000f883a 	mov	r7,zero
    25dc:	9809883a 	mov	r4,r19
    25e0:	403ee83a 	callr	r8
    25e4:	00ffffc4 	movi	r3,-1
    25e8:	10c04426 	beq	r2,r3,26fc <__sflush_r+0x1a0>
    25ec:	88c0030b 	ldhu	r3,12(r17)
    25f0:	89000417 	ldw	r4,16(r17)
    25f4:	88000115 	stw	zero,4(r17)
    25f8:	197dffcc 	andi	r5,r3,63487
    25fc:	8940030d 	sth	r5,12(r17)
    2600:	89000015 	stw	r4,0(r17)
    2604:	18c4000c 	andi	r3,r3,4096
    2608:	18002c1e 	bne	r3,zero,26bc <__sflush_r+0x160>
    260c:	89400c17 	ldw	r5,48(r17)
    2610:	9c000015 	stw	r16,0(r19)
    2614:	28000526 	beq	r5,zero,262c <__sflush_r+0xd0>
    2618:	88801004 	addi	r2,r17,64
    261c:	28800226 	beq	r5,r2,2628 <__sflush_r+0xcc>
    2620:	9809883a 	mov	r4,r19
    2624:	00029280 	call	2928 <_free_r>
    2628:	88000c15 	stw	zero,48(r17)
    262c:	0005883a 	mov	r2,zero
    2630:	dfc00417 	ldw	ra,16(sp)
    2634:	dcc00317 	ldw	r19,12(sp)
    2638:	dc800217 	ldw	r18,8(sp)
    263c:	dc400117 	ldw	r17,4(sp)
    2640:	dc000017 	ldw	r16,0(sp)
    2644:	dec00504 	addi	sp,sp,20
    2648:	f800283a 	ret
    264c:	2c800417 	ldw	r18,16(r5)
    2650:	903ff626 	beq	r18,zero,262c <__sflush_r+0xd0>
    2654:	2c000017 	ldw	r16,0(r5)
    2658:	108000cc 	andi	r2,r2,3
    265c:	2c800015 	stw	r18,0(r5)
    2660:	84a1c83a 	sub	r16,r16,r18
    2664:	1000131e 	bne	r2,zero,26b4 <__sflush_r+0x158>
    2668:	28800517 	ldw	r2,20(r5)
    266c:	88800215 	stw	r2,8(r17)
    2670:	04000316 	blt	zero,r16,2680 <__sflush_r+0x124>
    2674:	003fed06 	br	262c <__sflush_r+0xd0>
    2678:	90a5883a 	add	r18,r18,r2
    267c:	043feb0e 	bge	zero,r16,262c <__sflush_r+0xd0>
    2680:	88800917 	ldw	r2,36(r17)
    2684:	89400717 	ldw	r5,28(r17)
    2688:	800f883a 	mov	r7,r16
    268c:	900d883a 	mov	r6,r18
    2690:	9809883a 	mov	r4,r19
    2694:	103ee83a 	callr	r2
    2698:	80a1c83a 	sub	r16,r16,r2
    269c:	00bff616 	blt	zero,r2,2678 <__sflush_r+0x11c>
    26a0:	88c0030b 	ldhu	r3,12(r17)
    26a4:	00bfffc4 	movi	r2,-1
    26a8:	18c01014 	ori	r3,r3,64
    26ac:	88c0030d 	sth	r3,12(r17)
    26b0:	003fdf06 	br	2630 <__sflush_r+0xd4>
    26b4:	0005883a 	mov	r2,zero
    26b8:	003fec06 	br	266c <__sflush_r+0x110>
    26bc:	88801415 	stw	r2,80(r17)
    26c0:	003fd206 	br	260c <__sflush_r+0xb0>
    26c4:	28c00f17 	ldw	r3,60(r5)
    26c8:	00ffb316 	blt	zero,r3,2598 <__sflush_r+0x3c>
    26cc:	003fd706 	br	262c <__sflush_r+0xd0>
    26d0:	89400717 	ldw	r5,28(r17)
    26d4:	000d883a 	mov	r6,zero
    26d8:	01c00044 	movi	r7,1
    26dc:	9809883a 	mov	r4,r19
    26e0:	403ee83a 	callr	r8
    26e4:	100d883a 	mov	r6,r2
    26e8:	00bfffc4 	movi	r2,-1
    26ec:	30801426 	beq	r6,r2,2740 <__sflush_r+0x1e4>
    26f0:	8880030b 	ldhu	r2,12(r17)
    26f4:	8a000a17 	ldw	r8,40(r17)
    26f8:	003fae06 	br	25b4 <__sflush_r+0x58>
    26fc:	98c00017 	ldw	r3,0(r19)
    2700:	183fba26 	beq	r3,zero,25ec <__sflush_r+0x90>
    2704:	01000744 	movi	r4,29
    2708:	19000626 	beq	r3,r4,2724 <__sflush_r+0x1c8>
    270c:	01000584 	movi	r4,22
    2710:	19000426 	beq	r3,r4,2724 <__sflush_r+0x1c8>
    2714:	88c0030b 	ldhu	r3,12(r17)
    2718:	18c01014 	ori	r3,r3,64
    271c:	88c0030d 	sth	r3,12(r17)
    2720:	003fc306 	br	2630 <__sflush_r+0xd4>
    2724:	8880030b 	ldhu	r2,12(r17)
    2728:	88c00417 	ldw	r3,16(r17)
    272c:	88000115 	stw	zero,4(r17)
    2730:	10bdffcc 	andi	r2,r2,63487
    2734:	8880030d 	sth	r2,12(r17)
    2738:	88c00015 	stw	r3,0(r17)
    273c:	003fb306 	br	260c <__sflush_r+0xb0>
    2740:	98800017 	ldw	r2,0(r19)
    2744:	103fea26 	beq	r2,zero,26f0 <__sflush_r+0x194>
    2748:	00c00744 	movi	r3,29
    274c:	10c00226 	beq	r2,r3,2758 <__sflush_r+0x1fc>
    2750:	00c00584 	movi	r3,22
    2754:	10c0031e 	bne	r2,r3,2764 <__sflush_r+0x208>
    2758:	9c000015 	stw	r16,0(r19)
    275c:	0005883a 	mov	r2,zero
    2760:	003fb306 	br	2630 <__sflush_r+0xd4>
    2764:	88c0030b 	ldhu	r3,12(r17)
    2768:	3005883a 	mov	r2,r6
    276c:	18c01014 	ori	r3,r3,64
    2770:	88c0030d 	sth	r3,12(r17)
    2774:	003fae06 	br	2630 <__sflush_r+0xd4>

00002778 <_fflush_r>:
    2778:	defffd04 	addi	sp,sp,-12
    277c:	dc000115 	stw	r16,4(sp)
    2780:	dfc00215 	stw	ra,8(sp)
    2784:	2021883a 	mov	r16,r4
    2788:	20000226 	beq	r4,zero,2794 <_fflush_r+0x1c>
    278c:	20800e17 	ldw	r2,56(r4)
    2790:	10000c26 	beq	r2,zero,27c4 <_fflush_r+0x4c>
    2794:	2880030f 	ldh	r2,12(r5)
    2798:	1000051e 	bne	r2,zero,27b0 <_fflush_r+0x38>
    279c:	0005883a 	mov	r2,zero
    27a0:	dfc00217 	ldw	ra,8(sp)
    27a4:	dc000117 	ldw	r16,4(sp)
    27a8:	dec00304 	addi	sp,sp,12
    27ac:	f800283a 	ret
    27b0:	8009883a 	mov	r4,r16
    27b4:	dfc00217 	ldw	ra,8(sp)
    27b8:	dc000117 	ldw	r16,4(sp)
    27bc:	dec00304 	addi	sp,sp,12
    27c0:	000255c1 	jmpi	255c <__sflush_r>
    27c4:	d9400015 	stw	r5,0(sp)
    27c8:	000080c0 	call	80c <__sinit>
    27cc:	d9400017 	ldw	r5,0(sp)
    27d0:	003ff006 	br	2794 <_fflush_r+0x1c>

000027d4 <fflush>:
    27d4:	20000526 	beq	r4,zero,27ec <fflush+0x18>
    27d8:	00800034 	movhi	r2,0
    27dc:	109d2104 	addi	r2,r2,29828
    27e0:	200b883a 	mov	r5,r4
    27e4:	11000017 	ldw	r4,0(r2)
    27e8:	00027781 	jmpi	2778 <_fflush_r>
    27ec:	00800034 	movhi	r2,0
    27f0:	109d2004 	addi	r2,r2,29824
    27f4:	11000017 	ldw	r4,0(r2)
    27f8:	01400034 	movhi	r5,0
    27fc:	2949de04 	addi	r5,r5,10104
    2800:	0000ddc1 	jmpi	ddc <_fwalk_reent>

00002804 <_malloc_trim_r>:
    2804:	defffb04 	addi	sp,sp,-20
    2808:	dcc00315 	stw	r19,12(sp)
    280c:	04c00034 	movhi	r19,0
    2810:	dc800215 	stw	r18,8(sp)
    2814:	dc400115 	stw	r17,4(sp)
    2818:	dc000015 	stw	r16,0(sp)
    281c:	dfc00415 	stw	ra,16(sp)
    2820:	2821883a 	mov	r16,r5
    2824:	9cd79c04 	addi	r19,r19,24176
    2828:	2025883a 	mov	r18,r4
    282c:	00036e40 	call	36e4 <__malloc_lock>
    2830:	98800217 	ldw	r2,8(r19)
    2834:	14400117 	ldw	r17,4(r2)
    2838:	00bfff04 	movi	r2,-4
    283c:	88a2703a 	and	r17,r17,r2
    2840:	8c21c83a 	sub	r16,r17,r16
    2844:	8403fbc4 	addi	r16,r16,4079
    2848:	8020d33a 	srli	r16,r16,12
    284c:	0083ffc4 	movi	r2,4095
    2850:	843fffc4 	addi	r16,r16,-1
    2854:	8020933a 	slli	r16,r16,12
    2858:	1400060e 	bge	r2,r16,2874 <_malloc_trim_r+0x70>
    285c:	000b883a 	mov	r5,zero
    2860:	9009883a 	mov	r4,r18
    2864:	00020c00 	call	20c0 <_sbrk_r>
    2868:	98c00217 	ldw	r3,8(r19)
    286c:	1c47883a 	add	r3,r3,r17
    2870:	10c00a26 	beq	r2,r3,289c <_malloc_trim_r+0x98>
    2874:	9009883a 	mov	r4,r18
    2878:	00037080 	call	3708 <__malloc_unlock>
    287c:	0005883a 	mov	r2,zero
    2880:	dfc00417 	ldw	ra,16(sp)
    2884:	dcc00317 	ldw	r19,12(sp)
    2888:	dc800217 	ldw	r18,8(sp)
    288c:	dc400117 	ldw	r17,4(sp)
    2890:	dc000017 	ldw	r16,0(sp)
    2894:	dec00504 	addi	sp,sp,20
    2898:	f800283a 	ret
    289c:	040bc83a 	sub	r5,zero,r16
    28a0:	9009883a 	mov	r4,r18
    28a4:	00020c00 	call	20c0 <_sbrk_r>
    28a8:	00ffffc4 	movi	r3,-1
    28ac:	10c00d26 	beq	r2,r3,28e4 <_malloc_trim_r+0xe0>
    28b0:	00c00074 	movhi	r3,1
    28b4:	18e3d404 	addi	r3,r3,-28848
    28b8:	18800017 	ldw	r2,0(r3)
    28bc:	99000217 	ldw	r4,8(r19)
    28c0:	8c23c83a 	sub	r17,r17,r16
    28c4:	8c400054 	ori	r17,r17,1
    28c8:	1421c83a 	sub	r16,r2,r16
    28cc:	24400115 	stw	r17,4(r4)
    28d0:	9009883a 	mov	r4,r18
    28d4:	1c000015 	stw	r16,0(r3)
    28d8:	00037080 	call	3708 <__malloc_unlock>
    28dc:	00800044 	movi	r2,1
    28e0:	003fe706 	br	2880 <_malloc_trim_r+0x7c>
    28e4:	000b883a 	mov	r5,zero
    28e8:	9009883a 	mov	r4,r18
    28ec:	00020c00 	call	20c0 <_sbrk_r>
    28f0:	99000217 	ldw	r4,8(r19)
    28f4:	014003c4 	movi	r5,15
    28f8:	1107c83a 	sub	r3,r2,r4
    28fc:	28ffdd0e 	bge	r5,r3,2874 <_malloc_trim_r+0x70>
    2900:	01400034 	movhi	r5,0
    2904:	295d2204 	addi	r5,r5,29832
    2908:	29400017 	ldw	r5,0(r5)
    290c:	18c00054 	ori	r3,r3,1
    2910:	20c00115 	stw	r3,4(r4)
    2914:	00c00074 	movhi	r3,1
    2918:	1145c83a 	sub	r2,r2,r5
    291c:	18e3d404 	addi	r3,r3,-28848
    2920:	18800015 	stw	r2,0(r3)
    2924:	003fd306 	br	2874 <_malloc_trim_r+0x70>

00002928 <_free_r>:
    2928:	28004126 	beq	r5,zero,2a30 <_free_r+0x108>
    292c:	defffd04 	addi	sp,sp,-12
    2930:	dc400115 	stw	r17,4(sp)
    2934:	dc000015 	stw	r16,0(sp)
    2938:	2023883a 	mov	r17,r4
    293c:	2821883a 	mov	r16,r5
    2940:	dfc00215 	stw	ra,8(sp)
    2944:	00036e40 	call	36e4 <__malloc_lock>
    2948:	81ffff17 	ldw	r7,-4(r16)
    294c:	00bfff84 	movi	r2,-2
    2950:	01000034 	movhi	r4,0
    2954:	81bffe04 	addi	r6,r16,-8
    2958:	3884703a 	and	r2,r7,r2
    295c:	21179c04 	addi	r4,r4,24176
    2960:	308b883a 	add	r5,r6,r2
    2964:	2a400117 	ldw	r9,4(r5)
    2968:	22000217 	ldw	r8,8(r4)
    296c:	00ffff04 	movi	r3,-4
    2970:	48c6703a 	and	r3,r9,r3
    2974:	2a005726 	beq	r5,r8,2ad4 <_free_r+0x1ac>
    2978:	28c00115 	stw	r3,4(r5)
    297c:	39c0004c 	andi	r7,r7,1
    2980:	3800091e 	bne	r7,zero,29a8 <_free_r+0x80>
    2984:	823ffe17 	ldw	r8,-8(r16)
    2988:	22400204 	addi	r9,r4,8
    298c:	320dc83a 	sub	r6,r6,r8
    2990:	31c00217 	ldw	r7,8(r6)
    2994:	1205883a 	add	r2,r2,r8
    2998:	3a406526 	beq	r7,r9,2b30 <_free_r+0x208>
    299c:	32000317 	ldw	r8,12(r6)
    29a0:	3a000315 	stw	r8,12(r7)
    29a4:	41c00215 	stw	r7,8(r8)
    29a8:	28cf883a 	add	r7,r5,r3
    29ac:	39c00117 	ldw	r7,4(r7)
    29b0:	39c0004c 	andi	r7,r7,1
    29b4:	38003a26 	beq	r7,zero,2aa0 <_free_r+0x178>
    29b8:	10c00054 	ori	r3,r2,1
    29bc:	30c00115 	stw	r3,4(r6)
    29c0:	3087883a 	add	r3,r6,r2
    29c4:	18800015 	stw	r2,0(r3)
    29c8:	00c07fc4 	movi	r3,511
    29cc:	18801936 	bltu	r3,r2,2a34 <_free_r+0x10c>
    29d0:	1004d0fa 	srli	r2,r2,3
    29d4:	01c00044 	movi	r7,1
    29d8:	21400117 	ldw	r5,4(r4)
    29dc:	10c00044 	addi	r3,r2,1
    29e0:	18c7883a 	add	r3,r3,r3
    29e4:	1005d0ba 	srai	r2,r2,2
    29e8:	18c7883a 	add	r3,r3,r3
    29ec:	18c7883a 	add	r3,r3,r3
    29f0:	1907883a 	add	r3,r3,r4
    29f4:	3884983a 	sll	r2,r7,r2
    29f8:	19c00017 	ldw	r7,0(r3)
    29fc:	1a3ffe04 	addi	r8,r3,-8
    2a00:	1144b03a 	or	r2,r2,r5
    2a04:	32000315 	stw	r8,12(r6)
    2a08:	31c00215 	stw	r7,8(r6)
    2a0c:	20800115 	stw	r2,4(r4)
    2a10:	19800015 	stw	r6,0(r3)
    2a14:	39800315 	stw	r6,12(r7)
    2a18:	8809883a 	mov	r4,r17
    2a1c:	dfc00217 	ldw	ra,8(sp)
    2a20:	dc400117 	ldw	r17,4(sp)
    2a24:	dc000017 	ldw	r16,0(sp)
    2a28:	dec00304 	addi	sp,sp,12
    2a2c:	00037081 	jmpi	3708 <__malloc_unlock>
    2a30:	f800283a 	ret
    2a34:	100ad27a 	srli	r5,r2,9
    2a38:	00c00104 	movi	r3,4
    2a3c:	19404a36 	bltu	r3,r5,2b68 <_free_r+0x240>
    2a40:	100ad1ba 	srli	r5,r2,6
    2a44:	28c00e44 	addi	r3,r5,57
    2a48:	18c7883a 	add	r3,r3,r3
    2a4c:	29400e04 	addi	r5,r5,56
    2a50:	18c7883a 	add	r3,r3,r3
    2a54:	18c7883a 	add	r3,r3,r3
    2a58:	1909883a 	add	r4,r3,r4
    2a5c:	20c00017 	ldw	r3,0(r4)
    2a60:	01c00034 	movhi	r7,0
    2a64:	213ffe04 	addi	r4,r4,-8
    2a68:	39d79c04 	addi	r7,r7,24176
    2a6c:	20c04426 	beq	r4,r3,2b80 <_free_r+0x258>
    2a70:	01ffff04 	movi	r7,-4
    2a74:	19400117 	ldw	r5,4(r3)
    2a78:	29ca703a 	and	r5,r5,r7
    2a7c:	1140022e 	bgeu	r2,r5,2a88 <_free_r+0x160>
    2a80:	18c00217 	ldw	r3,8(r3)
    2a84:	20fffb1e 	bne	r4,r3,2a74 <_free_r+0x14c>
    2a88:	19000317 	ldw	r4,12(r3)
    2a8c:	31000315 	stw	r4,12(r6)
    2a90:	30c00215 	stw	r3,8(r6)
    2a94:	21800215 	stw	r6,8(r4)
    2a98:	19800315 	stw	r6,12(r3)
    2a9c:	003fde06 	br	2a18 <_free_r+0xf0>
    2aa0:	29c00217 	ldw	r7,8(r5)
    2aa4:	10c5883a 	add	r2,r2,r3
    2aa8:	00c00034 	movhi	r3,0
    2aac:	18d79e04 	addi	r3,r3,24184
    2ab0:	38c03b26 	beq	r7,r3,2ba0 <_free_r+0x278>
    2ab4:	2a000317 	ldw	r8,12(r5)
    2ab8:	11400054 	ori	r5,r2,1
    2abc:	3087883a 	add	r3,r6,r2
    2ac0:	3a000315 	stw	r8,12(r7)
    2ac4:	41c00215 	stw	r7,8(r8)
    2ac8:	31400115 	stw	r5,4(r6)
    2acc:	18800015 	stw	r2,0(r3)
    2ad0:	003fbd06 	br	29c8 <_free_r+0xa0>
    2ad4:	39c0004c 	andi	r7,r7,1
    2ad8:	10c5883a 	add	r2,r2,r3
    2adc:	3800071e 	bne	r7,zero,2afc <_free_r+0x1d4>
    2ae0:	81fffe17 	ldw	r7,-8(r16)
    2ae4:	31cdc83a 	sub	r6,r6,r7
    2ae8:	30c00317 	ldw	r3,12(r6)
    2aec:	31400217 	ldw	r5,8(r6)
    2af0:	11c5883a 	add	r2,r2,r7
    2af4:	28c00315 	stw	r3,12(r5)
    2af8:	19400215 	stw	r5,8(r3)
    2afc:	10c00054 	ori	r3,r2,1
    2b00:	30c00115 	stw	r3,4(r6)
    2b04:	00c00034 	movhi	r3,0
    2b08:	18dd2304 	addi	r3,r3,29836
    2b0c:	18c00017 	ldw	r3,0(r3)
    2b10:	21800215 	stw	r6,8(r4)
    2b14:	10ffc036 	bltu	r2,r3,2a18 <_free_r+0xf0>
    2b18:	00800074 	movhi	r2,1
    2b1c:	10a3cb04 	addi	r2,r2,-28884
    2b20:	11400017 	ldw	r5,0(r2)
    2b24:	8809883a 	mov	r4,r17
    2b28:	00028040 	call	2804 <_malloc_trim_r>
    2b2c:	003fba06 	br	2a18 <_free_r+0xf0>
    2b30:	28c9883a 	add	r4,r5,r3
    2b34:	21000117 	ldw	r4,4(r4)
    2b38:	2100004c 	andi	r4,r4,1
    2b3c:	2000391e 	bne	r4,zero,2c24 <_free_r+0x2fc>
    2b40:	29c00217 	ldw	r7,8(r5)
    2b44:	29000317 	ldw	r4,12(r5)
    2b48:	1885883a 	add	r2,r3,r2
    2b4c:	10c00054 	ori	r3,r2,1
    2b50:	39000315 	stw	r4,12(r7)
    2b54:	21c00215 	stw	r7,8(r4)
    2b58:	30c00115 	stw	r3,4(r6)
    2b5c:	308d883a 	add	r6,r6,r2
    2b60:	30800015 	stw	r2,0(r6)
    2b64:	003fac06 	br	2a18 <_free_r+0xf0>
    2b68:	00c00504 	movi	r3,20
    2b6c:	19401536 	bltu	r3,r5,2bc4 <_free_r+0x29c>
    2b70:	28c01704 	addi	r3,r5,92
    2b74:	18c7883a 	add	r3,r3,r3
    2b78:	294016c4 	addi	r5,r5,91
    2b7c:	003fb406 	br	2a50 <_free_r+0x128>
    2b80:	280bd0ba 	srai	r5,r5,2
    2b84:	00c00044 	movi	r3,1
    2b88:	38800117 	ldw	r2,4(r7)
    2b8c:	194a983a 	sll	r5,r3,r5
    2b90:	2007883a 	mov	r3,r4
    2b94:	2884b03a 	or	r2,r5,r2
    2b98:	38800115 	stw	r2,4(r7)
    2b9c:	003fbb06 	br	2a8c <_free_r+0x164>
    2ba0:	21800515 	stw	r6,20(r4)
    2ba4:	21800415 	stw	r6,16(r4)
    2ba8:	10c00054 	ori	r3,r2,1
    2bac:	31c00315 	stw	r7,12(r6)
    2bb0:	31c00215 	stw	r7,8(r6)
    2bb4:	30c00115 	stw	r3,4(r6)
    2bb8:	308d883a 	add	r6,r6,r2
    2bbc:	30800015 	stw	r2,0(r6)
    2bc0:	003f9506 	br	2a18 <_free_r+0xf0>
    2bc4:	00c01504 	movi	r3,84
    2bc8:	19400536 	bltu	r3,r5,2be0 <_free_r+0x2b8>
    2bcc:	100ad33a 	srli	r5,r2,12
    2bd0:	28c01bc4 	addi	r3,r5,111
    2bd4:	18c7883a 	add	r3,r3,r3
    2bd8:	29401b84 	addi	r5,r5,110
    2bdc:	003f9c06 	br	2a50 <_free_r+0x128>
    2be0:	00c05504 	movi	r3,340
    2be4:	19400536 	bltu	r3,r5,2bfc <_free_r+0x2d4>
    2be8:	100ad3fa 	srli	r5,r2,15
    2bec:	28c01e04 	addi	r3,r5,120
    2bf0:	18c7883a 	add	r3,r3,r3
    2bf4:	29401dc4 	addi	r5,r5,119
    2bf8:	003f9506 	br	2a50 <_free_r+0x128>
    2bfc:	00c15504 	movi	r3,1364
    2c00:	19400536 	bltu	r3,r5,2c18 <_free_r+0x2f0>
    2c04:	100ad4ba 	srli	r5,r2,18
    2c08:	28c01f44 	addi	r3,r5,125
    2c0c:	18c7883a 	add	r3,r3,r3
    2c10:	29401f04 	addi	r5,r5,124
    2c14:	003f8e06 	br	2a50 <_free_r+0x128>
    2c18:	00c03f84 	movi	r3,254
    2c1c:	01401f84 	movi	r5,126
    2c20:	003f8b06 	br	2a50 <_free_r+0x128>
    2c24:	10c00054 	ori	r3,r2,1
    2c28:	30c00115 	stw	r3,4(r6)
    2c2c:	308d883a 	add	r6,r6,r2
    2c30:	30800015 	stw	r2,0(r6)
    2c34:	003f7806 	br	2a18 <_free_r+0xf0>

00002c38 <_lseek_r>:
    2c38:	defffd04 	addi	sp,sp,-12
    2c3c:	2805883a 	mov	r2,r5
    2c40:	dc000015 	stw	r16,0(sp)
    2c44:	04000074 	movhi	r16,1
    2c48:	dc400115 	stw	r17,4(sp)
    2c4c:	300b883a 	mov	r5,r6
    2c50:	8423cc04 	addi	r16,r16,-28880
    2c54:	2023883a 	mov	r17,r4
    2c58:	380d883a 	mov	r6,r7
    2c5c:	1009883a 	mov	r4,r2
    2c60:	dfc00215 	stw	ra,8(sp)
    2c64:	80000015 	stw	zero,0(r16)
    2c68:	00035940 	call	3594 <lseek>
    2c6c:	00ffffc4 	movi	r3,-1
    2c70:	10c00526 	beq	r2,r3,2c88 <_lseek_r+0x50>
    2c74:	dfc00217 	ldw	ra,8(sp)
    2c78:	dc400117 	ldw	r17,4(sp)
    2c7c:	dc000017 	ldw	r16,0(sp)
    2c80:	dec00304 	addi	sp,sp,12
    2c84:	f800283a 	ret
    2c88:	80c00017 	ldw	r3,0(r16)
    2c8c:	183ff926 	beq	r3,zero,2c74 <_lseek_r+0x3c>
    2c90:	88c00015 	stw	r3,0(r17)
    2c94:	003ff706 	br	2c74 <_lseek_r+0x3c>

00002c98 <__smakebuf_r>:
    2c98:	2880030b 	ldhu	r2,12(r5)
    2c9c:	10c0008c 	andi	r3,r2,2
    2ca0:	1800411e 	bne	r3,zero,2da8 <__smakebuf_r+0x110>
    2ca4:	deffec04 	addi	sp,sp,-80
    2ca8:	dc000f15 	stw	r16,60(sp)
    2cac:	2821883a 	mov	r16,r5
    2cb0:	2940038f 	ldh	r5,14(r5)
    2cb4:	dc401015 	stw	r17,64(sp)
    2cb8:	dfc01315 	stw	ra,76(sp)
    2cbc:	dcc01215 	stw	r19,72(sp)
    2cc0:	dc801115 	stw	r18,68(sp)
    2cc4:	2023883a 	mov	r17,r4
    2cc8:	28001c16 	blt	r5,zero,2d3c <__smakebuf_r+0xa4>
    2ccc:	d80d883a 	mov	r6,sp
    2cd0:	0002eb40 	call	2eb4 <_fstat_r>
    2cd4:	10001816 	blt	r2,zero,2d38 <__smakebuf_r+0xa0>
    2cd8:	d8800117 	ldw	r2,4(sp)
    2cdc:	00e00014 	movui	r3,32768
    2ce0:	10bc000c 	andi	r2,r2,61440
    2ce4:	14c80020 	cmpeqi	r19,r2,8192
    2ce8:	10c03726 	beq	r2,r3,2dc8 <__smakebuf_r+0x130>
    2cec:	80c0030b 	ldhu	r3,12(r16)
    2cf0:	18c20014 	ori	r3,r3,2048
    2cf4:	80c0030d 	sth	r3,12(r16)
    2cf8:	00c80004 	movi	r3,8192
    2cfc:	10c0521e 	bne	r2,r3,2e48 <__smakebuf_r+0x1b0>
    2d00:	8140038f 	ldh	r5,14(r16)
    2d04:	8809883a 	mov	r4,r17
    2d08:	0002f100 	call	2f10 <_isatty_r>
    2d0c:	10004c26 	beq	r2,zero,2e40 <__smakebuf_r+0x1a8>
    2d10:	8080030b 	ldhu	r2,12(r16)
    2d14:	80c010c4 	addi	r3,r16,67
    2d18:	80c00015 	stw	r3,0(r16)
    2d1c:	10800054 	ori	r2,r2,1
    2d20:	8080030d 	sth	r2,12(r16)
    2d24:	00800044 	movi	r2,1
    2d28:	80c00415 	stw	r3,16(r16)
    2d2c:	80800515 	stw	r2,20(r16)
    2d30:	04810004 	movi	r18,1024
    2d34:	00000706 	br	2d54 <__smakebuf_r+0xbc>
    2d38:	8080030b 	ldhu	r2,12(r16)
    2d3c:	10c0200c 	andi	r3,r2,128
    2d40:	18001f1e 	bne	r3,zero,2dc0 <__smakebuf_r+0x128>
    2d44:	04810004 	movi	r18,1024
    2d48:	10820014 	ori	r2,r2,2048
    2d4c:	8080030d 	sth	r2,12(r16)
    2d50:	0027883a 	mov	r19,zero
    2d54:	900b883a 	mov	r5,r18
    2d58:	8809883a 	mov	r4,r17
    2d5c:	0000ea00 	call	ea0 <_malloc_r>
    2d60:	10002c26 	beq	r2,zero,2e14 <__smakebuf_r+0x17c>
    2d64:	80c0030b 	ldhu	r3,12(r16)
    2d68:	01000034 	movhi	r4,0
    2d6c:	21013104 	addi	r4,r4,1220
    2d70:	89000f15 	stw	r4,60(r17)
    2d74:	18c02014 	ori	r3,r3,128
    2d78:	80c0030d 	sth	r3,12(r16)
    2d7c:	80800015 	stw	r2,0(r16)
    2d80:	80800415 	stw	r2,16(r16)
    2d84:	84800515 	stw	r18,20(r16)
    2d88:	98001a1e 	bne	r19,zero,2df4 <__smakebuf_r+0x15c>
    2d8c:	dfc01317 	ldw	ra,76(sp)
    2d90:	dcc01217 	ldw	r19,72(sp)
    2d94:	dc801117 	ldw	r18,68(sp)
    2d98:	dc401017 	ldw	r17,64(sp)
    2d9c:	dc000f17 	ldw	r16,60(sp)
    2da0:	dec01404 	addi	sp,sp,80
    2da4:	f800283a 	ret
    2da8:	288010c4 	addi	r2,r5,67
    2dac:	28800015 	stw	r2,0(r5)
    2db0:	28800415 	stw	r2,16(r5)
    2db4:	00800044 	movi	r2,1
    2db8:	28800515 	stw	r2,20(r5)
    2dbc:	f800283a 	ret
    2dc0:	04801004 	movi	r18,64
    2dc4:	003fe006 	br	2d48 <__smakebuf_r+0xb0>
    2dc8:	81000a17 	ldw	r4,40(r16)
    2dcc:	00c00034 	movhi	r3,0
    2dd0:	18c87b04 	addi	r3,r3,8684
    2dd4:	20ffc51e 	bne	r4,r3,2cec <__smakebuf_r+0x54>
    2dd8:	8080030b 	ldhu	r2,12(r16)
    2ddc:	04810004 	movi	r18,1024
    2de0:	84801315 	stw	r18,76(r16)
    2de4:	1484b03a 	or	r2,r2,r18
    2de8:	8080030d 	sth	r2,12(r16)
    2dec:	0027883a 	mov	r19,zero
    2df0:	003fd806 	br	2d54 <__smakebuf_r+0xbc>
    2df4:	8140038f 	ldh	r5,14(r16)
    2df8:	8809883a 	mov	r4,r17
    2dfc:	0002f100 	call	2f10 <_isatty_r>
    2e00:	103fe226 	beq	r2,zero,2d8c <__smakebuf_r+0xf4>
    2e04:	8080030b 	ldhu	r2,12(r16)
    2e08:	10800054 	ori	r2,r2,1
    2e0c:	8080030d 	sth	r2,12(r16)
    2e10:	003fde06 	br	2d8c <__smakebuf_r+0xf4>
    2e14:	8080030b 	ldhu	r2,12(r16)
    2e18:	10c0800c 	andi	r3,r2,512
    2e1c:	183fdb1e 	bne	r3,zero,2d8c <__smakebuf_r+0xf4>
    2e20:	10800094 	ori	r2,r2,2
    2e24:	80c010c4 	addi	r3,r16,67
    2e28:	8080030d 	sth	r2,12(r16)
    2e2c:	00800044 	movi	r2,1
    2e30:	80c00015 	stw	r3,0(r16)
    2e34:	80c00415 	stw	r3,16(r16)
    2e38:	80800515 	stw	r2,20(r16)
    2e3c:	003fd306 	br	2d8c <__smakebuf_r+0xf4>
    2e40:	04810004 	movi	r18,1024
    2e44:	003fc306 	br	2d54 <__smakebuf_r+0xbc>
    2e48:	0027883a 	mov	r19,zero
    2e4c:	04810004 	movi	r18,1024
    2e50:	003fc006 	br	2d54 <__smakebuf_r+0xbc>

00002e54 <_read_r>:
    2e54:	defffd04 	addi	sp,sp,-12
    2e58:	2805883a 	mov	r2,r5
    2e5c:	dc000015 	stw	r16,0(sp)
    2e60:	04000074 	movhi	r16,1
    2e64:	dc400115 	stw	r17,4(sp)
    2e68:	300b883a 	mov	r5,r6
    2e6c:	8423cc04 	addi	r16,r16,-28880
    2e70:	2023883a 	mov	r17,r4
    2e74:	380d883a 	mov	r6,r7
    2e78:	1009883a 	mov	r4,r2
    2e7c:	dfc00215 	stw	ra,8(sp)
    2e80:	80000015 	stw	zero,0(r16)
    2e84:	000377c0 	call	377c <read>
    2e88:	00ffffc4 	movi	r3,-1
    2e8c:	10c00526 	beq	r2,r3,2ea4 <_read_r+0x50>
    2e90:	dfc00217 	ldw	ra,8(sp)
    2e94:	dc400117 	ldw	r17,4(sp)
    2e98:	dc000017 	ldw	r16,0(sp)
    2e9c:	dec00304 	addi	sp,sp,12
    2ea0:	f800283a 	ret
    2ea4:	80c00017 	ldw	r3,0(r16)
    2ea8:	183ff926 	beq	r3,zero,2e90 <_read_r+0x3c>
    2eac:	88c00015 	stw	r3,0(r17)
    2eb0:	003ff706 	br	2e90 <_read_r+0x3c>

00002eb4 <_fstat_r>:
    2eb4:	defffd04 	addi	sp,sp,-12
    2eb8:	2805883a 	mov	r2,r5
    2ebc:	dc000015 	stw	r16,0(sp)
    2ec0:	04000074 	movhi	r16,1
    2ec4:	dc400115 	stw	r17,4(sp)
    2ec8:	8423cc04 	addi	r16,r16,-28880
    2ecc:	2023883a 	mov	r17,r4
    2ed0:	300b883a 	mov	r5,r6
    2ed4:	1009883a 	mov	r4,r2
    2ed8:	dfc00215 	stw	ra,8(sp)
    2edc:	80000015 	stw	zero,0(r16)
    2ee0:	00032b40 	call	32b4 <fstat>
    2ee4:	00ffffc4 	movi	r3,-1
    2ee8:	10c00526 	beq	r2,r3,2f00 <_fstat_r+0x4c>
    2eec:	dfc00217 	ldw	ra,8(sp)
    2ef0:	dc400117 	ldw	r17,4(sp)
    2ef4:	dc000017 	ldw	r16,0(sp)
    2ef8:	dec00304 	addi	sp,sp,12
    2efc:	f800283a 	ret
    2f00:	80c00017 	ldw	r3,0(r16)
    2f04:	183ff926 	beq	r3,zero,2eec <_fstat_r+0x38>
    2f08:	88c00015 	stw	r3,0(r17)
    2f0c:	003ff706 	br	2eec <_fstat_r+0x38>

00002f10 <_isatty_r>:
    2f10:	defffd04 	addi	sp,sp,-12
    2f14:	dc000015 	stw	r16,0(sp)
    2f18:	04000074 	movhi	r16,1
    2f1c:	dc400115 	stw	r17,4(sp)
    2f20:	8423cc04 	addi	r16,r16,-28880
    2f24:	2023883a 	mov	r17,r4
    2f28:	2809883a 	mov	r4,r5
    2f2c:	dfc00215 	stw	ra,8(sp)
    2f30:	80000015 	stw	zero,0(r16)
    2f34:	00033b40 	call	33b4 <isatty>
    2f38:	00ffffc4 	movi	r3,-1
    2f3c:	10c00526 	beq	r2,r3,2f54 <_isatty_r+0x44>
    2f40:	dfc00217 	ldw	ra,8(sp)
    2f44:	dc400117 	ldw	r17,4(sp)
    2f48:	dc000017 	ldw	r16,0(sp)
    2f4c:	dec00304 	addi	sp,sp,12
    2f50:	f800283a 	ret
    2f54:	80c00017 	ldw	r3,0(r16)
    2f58:	183ff926 	beq	r3,zero,2f40 <_isatty_r+0x30>
    2f5c:	88c00015 	stw	r3,0(r17)
    2f60:	003ff706 	br	2f40 <_isatty_r+0x30>

00002f64 <__divsi3>:
    2f64:	20001b16 	blt	r4,zero,2fd4 <__divsi3+0x70>
    2f68:	000f883a 	mov	r7,zero
    2f6c:	28001616 	blt	r5,zero,2fc8 <__divsi3+0x64>
    2f70:	200d883a 	mov	r6,r4
    2f74:	29001a2e 	bgeu	r5,r4,2fe0 <__divsi3+0x7c>
    2f78:	00800804 	movi	r2,32
    2f7c:	00c00044 	movi	r3,1
    2f80:	00000106 	br	2f88 <__divsi3+0x24>
    2f84:	10000d26 	beq	r2,zero,2fbc <__divsi3+0x58>
    2f88:	294b883a 	add	r5,r5,r5
    2f8c:	10bfffc4 	addi	r2,r2,-1
    2f90:	18c7883a 	add	r3,r3,r3
    2f94:	293ffb36 	bltu	r5,r4,2f84 <__divsi3+0x20>
    2f98:	0005883a 	mov	r2,zero
    2f9c:	18000726 	beq	r3,zero,2fbc <__divsi3+0x58>
    2fa0:	0005883a 	mov	r2,zero
    2fa4:	31400236 	bltu	r6,r5,2fb0 <__divsi3+0x4c>
    2fa8:	314dc83a 	sub	r6,r6,r5
    2fac:	10c4b03a 	or	r2,r2,r3
    2fb0:	1806d07a 	srli	r3,r3,1
    2fb4:	280ad07a 	srli	r5,r5,1
    2fb8:	183ffa1e 	bne	r3,zero,2fa4 <__divsi3+0x40>
    2fbc:	38000126 	beq	r7,zero,2fc4 <__divsi3+0x60>
    2fc0:	0085c83a 	sub	r2,zero,r2
    2fc4:	f800283a 	ret
    2fc8:	014bc83a 	sub	r5,zero,r5
    2fcc:	39c0005c 	xori	r7,r7,1
    2fd0:	003fe706 	br	2f70 <__divsi3+0xc>
    2fd4:	0109c83a 	sub	r4,zero,r4
    2fd8:	01c00044 	movi	r7,1
    2fdc:	003fe306 	br	2f6c <__divsi3+0x8>
    2fe0:	00c00044 	movi	r3,1
    2fe4:	003fee06 	br	2fa0 <__divsi3+0x3c>

00002fe8 <__modsi3>:
    2fe8:	20001716 	blt	r4,zero,3048 <__modsi3+0x60>
    2fec:	000f883a 	mov	r7,zero
    2ff0:	2005883a 	mov	r2,r4
    2ff4:	28001216 	blt	r5,zero,3040 <__modsi3+0x58>
    2ff8:	2900162e 	bgeu	r5,r4,3054 <__modsi3+0x6c>
    2ffc:	01800804 	movi	r6,32
    3000:	00c00044 	movi	r3,1
    3004:	00000106 	br	300c <__modsi3+0x24>
    3008:	30000a26 	beq	r6,zero,3034 <__modsi3+0x4c>
    300c:	294b883a 	add	r5,r5,r5
    3010:	31bfffc4 	addi	r6,r6,-1
    3014:	18c7883a 	add	r3,r3,r3
    3018:	293ffb36 	bltu	r5,r4,3008 <__modsi3+0x20>
    301c:	18000526 	beq	r3,zero,3034 <__modsi3+0x4c>
    3020:	1806d07a 	srli	r3,r3,1
    3024:	11400136 	bltu	r2,r5,302c <__modsi3+0x44>
    3028:	1145c83a 	sub	r2,r2,r5
    302c:	280ad07a 	srli	r5,r5,1
    3030:	183ffb1e 	bne	r3,zero,3020 <__modsi3+0x38>
    3034:	38000126 	beq	r7,zero,303c <__modsi3+0x54>
    3038:	0085c83a 	sub	r2,zero,r2
    303c:	f800283a 	ret
    3040:	014bc83a 	sub	r5,zero,r5
    3044:	003fec06 	br	2ff8 <__modsi3+0x10>
    3048:	0109c83a 	sub	r4,zero,r4
    304c:	01c00044 	movi	r7,1
    3050:	003fe706 	br	2ff0 <__modsi3+0x8>
    3054:	00c00044 	movi	r3,1
    3058:	003ff106 	br	3020 <__modsi3+0x38>

0000305c <__udivsi3>:
    305c:	200d883a 	mov	r6,r4
    3060:	2900152e 	bgeu	r5,r4,30b8 <__udivsi3+0x5c>
    3064:	28001416 	blt	r5,zero,30b8 <__udivsi3+0x5c>
    3068:	00800804 	movi	r2,32
    306c:	00c00044 	movi	r3,1
    3070:	00000206 	br	307c <__udivsi3+0x20>
    3074:	10000e26 	beq	r2,zero,30b0 <__udivsi3+0x54>
    3078:	28000516 	blt	r5,zero,3090 <__udivsi3+0x34>
    307c:	294b883a 	add	r5,r5,r5
    3080:	10bfffc4 	addi	r2,r2,-1
    3084:	18c7883a 	add	r3,r3,r3
    3088:	293ffa36 	bltu	r5,r4,3074 <__udivsi3+0x18>
    308c:	18000826 	beq	r3,zero,30b0 <__udivsi3+0x54>
    3090:	0005883a 	mov	r2,zero
    3094:	31400236 	bltu	r6,r5,30a0 <__udivsi3+0x44>
    3098:	314dc83a 	sub	r6,r6,r5
    309c:	10c4b03a 	or	r2,r2,r3
    30a0:	1806d07a 	srli	r3,r3,1
    30a4:	280ad07a 	srli	r5,r5,1
    30a8:	183ffa1e 	bne	r3,zero,3094 <__udivsi3+0x38>
    30ac:	f800283a 	ret
    30b0:	0005883a 	mov	r2,zero
    30b4:	f800283a 	ret
    30b8:	00c00044 	movi	r3,1
    30bc:	003ff406 	br	3090 <__udivsi3+0x34>

000030c0 <__umodsi3>:
    30c0:	2005883a 	mov	r2,r4
    30c4:	2900122e 	bgeu	r5,r4,3110 <__umodsi3+0x50>
    30c8:	28001116 	blt	r5,zero,3110 <__umodsi3+0x50>
    30cc:	01800804 	movi	r6,32
    30d0:	00c00044 	movi	r3,1
    30d4:	00000206 	br	30e0 <__umodsi3+0x20>
    30d8:	30000c26 	beq	r6,zero,310c <__umodsi3+0x4c>
    30dc:	28000516 	blt	r5,zero,30f4 <__umodsi3+0x34>
    30e0:	294b883a 	add	r5,r5,r5
    30e4:	31bfffc4 	addi	r6,r6,-1
    30e8:	18c7883a 	add	r3,r3,r3
    30ec:	293ffa36 	bltu	r5,r4,30d8 <__umodsi3+0x18>
    30f0:	18000626 	beq	r3,zero,310c <__umodsi3+0x4c>
    30f4:	1806d07a 	srli	r3,r3,1
    30f8:	11400136 	bltu	r2,r5,3100 <__umodsi3+0x40>
    30fc:	1145c83a 	sub	r2,r2,r5
    3100:	280ad07a 	srli	r5,r5,1
    3104:	183ffb1e 	bne	r3,zero,30f4 <__umodsi3+0x34>
    3108:	f800283a 	ret
    310c:	f800283a 	ret
    3110:	00c00044 	movi	r3,1
    3114:	003ff706 	br	30f4 <__umodsi3+0x34>

00003118 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3118:	defffe04 	addi	sp,sp,-8
    311c:	dfc00115 	stw	ra,4(sp)
    3120:	df000015 	stw	fp,0(sp)
    3124:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3128:	00800034 	movhi	r2,0
    312c:	109d2904 	addi	r2,r2,29860
    3130:	10800017 	ldw	r2,0(r2)
    3134:	10000526 	beq	r2,zero,314c <alt_get_errno+0x34>
    3138:	00800034 	movhi	r2,0
    313c:	109d2904 	addi	r2,r2,29860
    3140:	10800017 	ldw	r2,0(r2)
    3144:	103ee83a 	callr	r2
    3148:	00000206 	br	3154 <alt_get_errno+0x3c>
    314c:	00800074 	movhi	r2,1
    3150:	10a3cc04 	addi	r2,r2,-28880
}
    3154:	e037883a 	mov	sp,fp
    3158:	dfc00117 	ldw	ra,4(sp)
    315c:	df000017 	ldw	fp,0(sp)
    3160:	dec00204 	addi	sp,sp,8
    3164:	f800283a 	ret

00003168 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    3168:	defffb04 	addi	sp,sp,-20
    316c:	dfc00415 	stw	ra,16(sp)
    3170:	df000315 	stw	fp,12(sp)
    3174:	df000304 	addi	fp,sp,12
    3178:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    317c:	e0bfff17 	ldw	r2,-4(fp)
    3180:	10000616 	blt	r2,zero,319c <close+0x34>
    3184:	e0bfff17 	ldw	r2,-4(fp)
    3188:	10c00324 	muli	r3,r2,12
    318c:	00800034 	movhi	r2,0
    3190:	1098a804 	addi	r2,r2,25248
    3194:	1885883a 	add	r2,r3,r2
    3198:	00000106 	br	31a0 <close+0x38>
    319c:	0005883a 	mov	r2,zero
    31a0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    31a4:	e0bffd17 	ldw	r2,-12(fp)
    31a8:	10001926 	beq	r2,zero,3210 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    31ac:	e0bffd17 	ldw	r2,-12(fp)
    31b0:	10800017 	ldw	r2,0(r2)
    31b4:	10800417 	ldw	r2,16(r2)
    31b8:	10000626 	beq	r2,zero,31d4 <close+0x6c>
    31bc:	e0bffd17 	ldw	r2,-12(fp)
    31c0:	10800017 	ldw	r2,0(r2)
    31c4:	10800417 	ldw	r2,16(r2)
    31c8:	e13ffd17 	ldw	r4,-12(fp)
    31cc:	103ee83a 	callr	r2
    31d0:	00000106 	br	31d8 <close+0x70>
    31d4:	0005883a 	mov	r2,zero
    31d8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    31dc:	e13fff17 	ldw	r4,-4(fp)
    31e0:	00038780 	call	3878 <alt_release_fd>
    if (rval < 0)
    31e4:	e0bffe17 	ldw	r2,-8(fp)
    31e8:	1000070e 	bge	r2,zero,3208 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    31ec:	00031180 	call	3118 <alt_get_errno>
    31f0:	1007883a 	mov	r3,r2
    31f4:	e0bffe17 	ldw	r2,-8(fp)
    31f8:	0085c83a 	sub	r2,zero,r2
    31fc:	18800015 	stw	r2,0(r3)
      return -1;
    3200:	00bfffc4 	movi	r2,-1
    3204:	00000706 	br	3224 <close+0xbc>
    }
    return 0;
    3208:	0005883a 	mov	r2,zero
    320c:	00000506 	br	3224 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3210:	00031180 	call	3118 <alt_get_errno>
    3214:	1007883a 	mov	r3,r2
    3218:	00801444 	movi	r2,81
    321c:	18800015 	stw	r2,0(r3)
    return -1;
    3220:	00bfffc4 	movi	r2,-1
  }
}
    3224:	e037883a 	mov	sp,fp
    3228:	dfc00117 	ldw	ra,4(sp)
    322c:	df000017 	ldw	fp,0(sp)
    3230:	dec00204 	addi	sp,sp,8
    3234:	f800283a 	ret

00003238 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    3238:	defffc04 	addi	sp,sp,-16
    323c:	df000315 	stw	fp,12(sp)
    3240:	df000304 	addi	fp,sp,12
    3244:	e13ffd15 	stw	r4,-12(fp)
    3248:	e17ffe15 	stw	r5,-8(fp)
    324c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    3250:	e0bfff17 	ldw	r2,-4(fp)
}
    3254:	e037883a 	mov	sp,fp
    3258:	df000017 	ldw	fp,0(sp)
    325c:	dec00104 	addi	sp,sp,4
    3260:	f800283a 	ret

00003264 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3264:	defffe04 	addi	sp,sp,-8
    3268:	dfc00115 	stw	ra,4(sp)
    326c:	df000015 	stw	fp,0(sp)
    3270:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3274:	00800034 	movhi	r2,0
    3278:	109d2904 	addi	r2,r2,29860
    327c:	10800017 	ldw	r2,0(r2)
    3280:	10000526 	beq	r2,zero,3298 <alt_get_errno+0x34>
    3284:	00800034 	movhi	r2,0
    3288:	109d2904 	addi	r2,r2,29860
    328c:	10800017 	ldw	r2,0(r2)
    3290:	103ee83a 	callr	r2
    3294:	00000206 	br	32a0 <alt_get_errno+0x3c>
    3298:	00800074 	movhi	r2,1
    329c:	10a3cc04 	addi	r2,r2,-28880
}
    32a0:	e037883a 	mov	sp,fp
    32a4:	dfc00117 	ldw	ra,4(sp)
    32a8:	df000017 	ldw	fp,0(sp)
    32ac:	dec00204 	addi	sp,sp,8
    32b0:	f800283a 	ret

000032b4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    32b4:	defffb04 	addi	sp,sp,-20
    32b8:	dfc00415 	stw	ra,16(sp)
    32bc:	df000315 	stw	fp,12(sp)
    32c0:	df000304 	addi	fp,sp,12
    32c4:	e13ffe15 	stw	r4,-8(fp)
    32c8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    32cc:	e0bffe17 	ldw	r2,-8(fp)
    32d0:	10000616 	blt	r2,zero,32ec <fstat+0x38>
    32d4:	e0bffe17 	ldw	r2,-8(fp)
    32d8:	10c00324 	muli	r3,r2,12
    32dc:	00800034 	movhi	r2,0
    32e0:	1098a804 	addi	r2,r2,25248
    32e4:	1885883a 	add	r2,r3,r2
    32e8:	00000106 	br	32f0 <fstat+0x3c>
    32ec:	0005883a 	mov	r2,zero
    32f0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    32f4:	e0bffd17 	ldw	r2,-12(fp)
    32f8:	10001026 	beq	r2,zero,333c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    32fc:	e0bffd17 	ldw	r2,-12(fp)
    3300:	10800017 	ldw	r2,0(r2)
    3304:	10800817 	ldw	r2,32(r2)
    3308:	10000726 	beq	r2,zero,3328 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    330c:	e0bffd17 	ldw	r2,-12(fp)
    3310:	10800017 	ldw	r2,0(r2)
    3314:	10800817 	ldw	r2,32(r2)
    3318:	e17fff17 	ldw	r5,-4(fp)
    331c:	e13ffd17 	ldw	r4,-12(fp)
    3320:	103ee83a 	callr	r2
    3324:	00000a06 	br	3350 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    3328:	e0bfff17 	ldw	r2,-4(fp)
    332c:	00c80004 	movi	r3,8192
    3330:	10c00115 	stw	r3,4(r2)
      return 0;
    3334:	0005883a 	mov	r2,zero
    3338:	00000506 	br	3350 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    333c:	00032640 	call	3264 <alt_get_errno>
    3340:	1007883a 	mov	r3,r2
    3344:	00801444 	movi	r2,81
    3348:	18800015 	stw	r2,0(r3)
    return -1;
    334c:	00bfffc4 	movi	r2,-1
  }
}
    3350:	e037883a 	mov	sp,fp
    3354:	dfc00117 	ldw	ra,4(sp)
    3358:	df000017 	ldw	fp,0(sp)
    335c:	dec00204 	addi	sp,sp,8
    3360:	f800283a 	ret

00003364 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3364:	defffe04 	addi	sp,sp,-8
    3368:	dfc00115 	stw	ra,4(sp)
    336c:	df000015 	stw	fp,0(sp)
    3370:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3374:	00800034 	movhi	r2,0
    3378:	109d2904 	addi	r2,r2,29860
    337c:	10800017 	ldw	r2,0(r2)
    3380:	10000526 	beq	r2,zero,3398 <alt_get_errno+0x34>
    3384:	00800034 	movhi	r2,0
    3388:	109d2904 	addi	r2,r2,29860
    338c:	10800017 	ldw	r2,0(r2)
    3390:	103ee83a 	callr	r2
    3394:	00000206 	br	33a0 <alt_get_errno+0x3c>
    3398:	00800074 	movhi	r2,1
    339c:	10a3cc04 	addi	r2,r2,-28880
}
    33a0:	e037883a 	mov	sp,fp
    33a4:	dfc00117 	ldw	ra,4(sp)
    33a8:	df000017 	ldw	fp,0(sp)
    33ac:	dec00204 	addi	sp,sp,8
    33b0:	f800283a 	ret

000033b4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    33b4:	deffed04 	addi	sp,sp,-76
    33b8:	dfc01215 	stw	ra,72(sp)
    33bc:	df001115 	stw	fp,68(sp)
    33c0:	df001104 	addi	fp,sp,68
    33c4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    33c8:	e0bfff17 	ldw	r2,-4(fp)
    33cc:	10000616 	blt	r2,zero,33e8 <isatty+0x34>
    33d0:	e0bfff17 	ldw	r2,-4(fp)
    33d4:	10c00324 	muli	r3,r2,12
    33d8:	00800034 	movhi	r2,0
    33dc:	1098a804 	addi	r2,r2,25248
    33e0:	1885883a 	add	r2,r3,r2
    33e4:	00000106 	br	33ec <isatty+0x38>
    33e8:	0005883a 	mov	r2,zero
    33ec:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    33f0:	e0bfef17 	ldw	r2,-68(fp)
    33f4:	10000e26 	beq	r2,zero,3430 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    33f8:	e0bfef17 	ldw	r2,-68(fp)
    33fc:	10800017 	ldw	r2,0(r2)
    3400:	10800817 	ldw	r2,32(r2)
    3404:	1000021e 	bne	r2,zero,3410 <isatty+0x5c>
    {
      return 1;
    3408:	00800044 	movi	r2,1
    340c:	00000d06 	br	3444 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    3410:	e0bff004 	addi	r2,fp,-64
    3414:	100b883a 	mov	r5,r2
    3418:	e13fff17 	ldw	r4,-4(fp)
    341c:	00032b40 	call	32b4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    3420:	e0bff117 	ldw	r2,-60(fp)
    3424:	10880020 	cmpeqi	r2,r2,8192
    3428:	10803fcc 	andi	r2,r2,255
    342c:	00000506 	br	3444 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3430:	00033640 	call	3364 <alt_get_errno>
    3434:	1007883a 	mov	r3,r2
    3438:	00801444 	movi	r2,81
    343c:	18800015 	stw	r2,0(r3)
    return 0;
    3440:	0005883a 	mov	r2,zero
  }
}
    3444:	e037883a 	mov	sp,fp
    3448:	dfc00117 	ldw	ra,4(sp)
    344c:	df000017 	ldw	fp,0(sp)
    3450:	dec00204 	addi	sp,sp,8
    3454:	f800283a 	ret

00003458 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    3458:	defffc04 	addi	sp,sp,-16
    345c:	df000315 	stw	fp,12(sp)
    3460:	df000304 	addi	fp,sp,12
    3464:	e13ffd15 	stw	r4,-12(fp)
    3468:	e17ffe15 	stw	r5,-8(fp)
    346c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    3470:	e0fffe17 	ldw	r3,-8(fp)
    3474:	e0bffd17 	ldw	r2,-12(fp)
    3478:	18800c26 	beq	r3,r2,34ac <alt_load_section+0x54>
  {
    while( to != end )
    347c:	00000806 	br	34a0 <alt_load_section+0x48>
    {
      *to++ = *from++;
    3480:	e0bffe17 	ldw	r2,-8(fp)
    3484:	10c00104 	addi	r3,r2,4
    3488:	e0fffe15 	stw	r3,-8(fp)
    348c:	e0fffd17 	ldw	r3,-12(fp)
    3490:	19000104 	addi	r4,r3,4
    3494:	e13ffd15 	stw	r4,-12(fp)
    3498:	18c00017 	ldw	r3,0(r3)
    349c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    34a0:	e0fffe17 	ldw	r3,-8(fp)
    34a4:	e0bfff17 	ldw	r2,-4(fp)
    34a8:	18bff51e 	bne	r3,r2,3480 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    34ac:	0001883a 	nop
    34b0:	e037883a 	mov	sp,fp
    34b4:	df000017 	ldw	fp,0(sp)
    34b8:	dec00104 	addi	sp,sp,4
    34bc:	f800283a 	ret

000034c0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    34c0:	defffe04 	addi	sp,sp,-8
    34c4:	dfc00115 	stw	ra,4(sp)
    34c8:	df000015 	stw	fp,0(sp)
    34cc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    34d0:	01800034 	movhi	r6,0
    34d4:	319d2e04 	addi	r6,r6,29880
    34d8:	01400034 	movhi	r5,0
    34dc:	29569304 	addi	r5,r5,23116
    34e0:	01000034 	movhi	r4,0
    34e4:	211d2e04 	addi	r4,r4,29880
    34e8:	00034580 	call	3458 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    34ec:	01800034 	movhi	r6,0
    34f0:	31809104 	addi	r6,r6,580
    34f4:	01400034 	movhi	r5,0
    34f8:	29400804 	addi	r5,r5,32
    34fc:	01000034 	movhi	r4,0
    3500:	21000804 	addi	r4,r4,32
    3504:	00034580 	call	3458 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    3508:	01800034 	movhi	r6,0
    350c:	31969304 	addi	r6,r6,23116
    3510:	01400034 	movhi	r5,0
    3514:	29567e04 	addi	r5,r5,23032
    3518:	01000034 	movhi	r4,0
    351c:	21167e04 	addi	r4,r4,23032
    3520:	00034580 	call	3458 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    3524:	00048640 	call	4864 <alt_dcache_flush_all>
  alt_icache_flush_all();
    3528:	0004a600 	call	4a60 <alt_icache_flush_all>
}
    352c:	0001883a 	nop
    3530:	e037883a 	mov	sp,fp
    3534:	dfc00117 	ldw	ra,4(sp)
    3538:	df000017 	ldw	fp,0(sp)
    353c:	dec00204 	addi	sp,sp,8
    3540:	f800283a 	ret

00003544 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3544:	defffe04 	addi	sp,sp,-8
    3548:	dfc00115 	stw	ra,4(sp)
    354c:	df000015 	stw	fp,0(sp)
    3550:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3554:	00800034 	movhi	r2,0
    3558:	109d2904 	addi	r2,r2,29860
    355c:	10800017 	ldw	r2,0(r2)
    3560:	10000526 	beq	r2,zero,3578 <alt_get_errno+0x34>
    3564:	00800034 	movhi	r2,0
    3568:	109d2904 	addi	r2,r2,29860
    356c:	10800017 	ldw	r2,0(r2)
    3570:	103ee83a 	callr	r2
    3574:	00000206 	br	3580 <alt_get_errno+0x3c>
    3578:	00800074 	movhi	r2,1
    357c:	10a3cc04 	addi	r2,r2,-28880
}
    3580:	e037883a 	mov	sp,fp
    3584:	dfc00117 	ldw	ra,4(sp)
    3588:	df000017 	ldw	fp,0(sp)
    358c:	dec00204 	addi	sp,sp,8
    3590:	f800283a 	ret

00003594 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    3594:	defff904 	addi	sp,sp,-28
    3598:	dfc00615 	stw	ra,24(sp)
    359c:	df000515 	stw	fp,20(sp)
    35a0:	df000504 	addi	fp,sp,20
    35a4:	e13ffd15 	stw	r4,-12(fp)
    35a8:	e17ffe15 	stw	r5,-8(fp)
    35ac:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    35b0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    35b4:	e0bffd17 	ldw	r2,-12(fp)
    35b8:	10000616 	blt	r2,zero,35d4 <lseek+0x40>
    35bc:	e0bffd17 	ldw	r2,-12(fp)
    35c0:	10c00324 	muli	r3,r2,12
    35c4:	00800034 	movhi	r2,0
    35c8:	1098a804 	addi	r2,r2,25248
    35cc:	1885883a 	add	r2,r3,r2
    35d0:	00000106 	br	35d8 <lseek+0x44>
    35d4:	0005883a 	mov	r2,zero
    35d8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    35dc:	e0bffc17 	ldw	r2,-16(fp)
    35e0:	10001026 	beq	r2,zero,3624 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    35e4:	e0bffc17 	ldw	r2,-16(fp)
    35e8:	10800017 	ldw	r2,0(r2)
    35ec:	10800717 	ldw	r2,28(r2)
    35f0:	10000926 	beq	r2,zero,3618 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    35f4:	e0bffc17 	ldw	r2,-16(fp)
    35f8:	10800017 	ldw	r2,0(r2)
    35fc:	10800717 	ldw	r2,28(r2)
    3600:	e1bfff17 	ldw	r6,-4(fp)
    3604:	e17ffe17 	ldw	r5,-8(fp)
    3608:	e13ffc17 	ldw	r4,-16(fp)
    360c:	103ee83a 	callr	r2
    3610:	e0bffb15 	stw	r2,-20(fp)
    3614:	00000506 	br	362c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    3618:	00bfde84 	movi	r2,-134
    361c:	e0bffb15 	stw	r2,-20(fp)
    3620:	00000206 	br	362c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    3624:	00bfebc4 	movi	r2,-81
    3628:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    362c:	e0bffb17 	ldw	r2,-20(fp)
    3630:	1000070e 	bge	r2,zero,3650 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    3634:	00035440 	call	3544 <alt_get_errno>
    3638:	1007883a 	mov	r3,r2
    363c:	e0bffb17 	ldw	r2,-20(fp)
    3640:	0085c83a 	sub	r2,zero,r2
    3644:	18800015 	stw	r2,0(r3)
    rc = -1;
    3648:	00bfffc4 	movi	r2,-1
    364c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    3650:	e0bffb17 	ldw	r2,-20(fp)
}
    3654:	e037883a 	mov	sp,fp
    3658:	dfc00117 	ldw	ra,4(sp)
    365c:	df000017 	ldw	fp,0(sp)
    3660:	dec00204 	addi	sp,sp,8
    3664:	f800283a 	ret

00003668 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    3668:	defffd04 	addi	sp,sp,-12
    366c:	dfc00215 	stw	ra,8(sp)
    3670:	df000115 	stw	fp,4(sp)
    3674:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    3678:	0009883a 	mov	r4,zero
    367c:	0003b0c0 	call	3b0c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    3680:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    3684:	0003b440 	call	3b44 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    3688:	01800034 	movhi	r6,0
    368c:	31968d04 	addi	r6,r6,23092
    3690:	01400034 	movhi	r5,0
    3694:	29568d04 	addi	r5,r5,23092
    3698:	01000034 	movhi	r4,0
    369c:	21168d04 	addi	r4,r4,23092
    36a0:	0004e280 	call	4e28 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    36a4:	00049a00 	call	49a0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    36a8:	01000034 	movhi	r4,0
    36ac:	21128004 	addi	r4,r4,18944
    36b0:	00056640 	call	5664 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    36b4:	d0a6ad17 	ldw	r2,-25932(gp)
    36b8:	d0e6ae17 	ldw	r3,-25928(gp)
    36bc:	d126af17 	ldw	r4,-25924(gp)
    36c0:	200d883a 	mov	r6,r4
    36c4:	180b883a 	mov	r5,r3
    36c8:	1009883a 	mov	r4,r2
    36cc:	00002900 	call	290 <main>
    36d0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    36d4:	01000044 	movi	r4,1
    36d8:	00031680 	call	3168 <close>
  exit (result);
    36dc:	e13fff17 	ldw	r4,-4(fp)
    36e0:	00056780 	call	5678 <exit>

000036e4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    36e4:	defffe04 	addi	sp,sp,-8
    36e8:	df000115 	stw	fp,4(sp)
    36ec:	df000104 	addi	fp,sp,4
    36f0:	e13fff15 	stw	r4,-4(fp)
}
    36f4:	0001883a 	nop
    36f8:	e037883a 	mov	sp,fp
    36fc:	df000017 	ldw	fp,0(sp)
    3700:	dec00104 	addi	sp,sp,4
    3704:	f800283a 	ret

00003708 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    3708:	defffe04 	addi	sp,sp,-8
    370c:	df000115 	stw	fp,4(sp)
    3710:	df000104 	addi	fp,sp,4
    3714:	e13fff15 	stw	r4,-4(fp)
}
    3718:	0001883a 	nop
    371c:	e037883a 	mov	sp,fp
    3720:	df000017 	ldw	fp,0(sp)
    3724:	dec00104 	addi	sp,sp,4
    3728:	f800283a 	ret

0000372c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    372c:	defffe04 	addi	sp,sp,-8
    3730:	dfc00115 	stw	ra,4(sp)
    3734:	df000015 	stw	fp,0(sp)
    3738:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    373c:	00800034 	movhi	r2,0
    3740:	109d2904 	addi	r2,r2,29860
    3744:	10800017 	ldw	r2,0(r2)
    3748:	10000526 	beq	r2,zero,3760 <alt_get_errno+0x34>
    374c:	00800034 	movhi	r2,0
    3750:	109d2904 	addi	r2,r2,29860
    3754:	10800017 	ldw	r2,0(r2)
    3758:	103ee83a 	callr	r2
    375c:	00000206 	br	3768 <alt_get_errno+0x3c>
    3760:	00800074 	movhi	r2,1
    3764:	10a3cc04 	addi	r2,r2,-28880
}
    3768:	e037883a 	mov	sp,fp
    376c:	dfc00117 	ldw	ra,4(sp)
    3770:	df000017 	ldw	fp,0(sp)
    3774:	dec00204 	addi	sp,sp,8
    3778:	f800283a 	ret

0000377c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    377c:	defff904 	addi	sp,sp,-28
    3780:	dfc00615 	stw	ra,24(sp)
    3784:	df000515 	stw	fp,20(sp)
    3788:	df000504 	addi	fp,sp,20
    378c:	e13ffd15 	stw	r4,-12(fp)
    3790:	e17ffe15 	stw	r5,-8(fp)
    3794:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3798:	e0bffd17 	ldw	r2,-12(fp)
    379c:	10000616 	blt	r2,zero,37b8 <read+0x3c>
    37a0:	e0bffd17 	ldw	r2,-12(fp)
    37a4:	10c00324 	muli	r3,r2,12
    37a8:	00800034 	movhi	r2,0
    37ac:	1098a804 	addi	r2,r2,25248
    37b0:	1885883a 	add	r2,r3,r2
    37b4:	00000106 	br	37bc <read+0x40>
    37b8:	0005883a 	mov	r2,zero
    37bc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    37c0:	e0bffb17 	ldw	r2,-20(fp)
    37c4:	10002226 	beq	r2,zero,3850 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    37c8:	e0bffb17 	ldw	r2,-20(fp)
    37cc:	10800217 	ldw	r2,8(r2)
    37d0:	108000cc 	andi	r2,r2,3
    37d4:	10800060 	cmpeqi	r2,r2,1
    37d8:	1000181e 	bne	r2,zero,383c <read+0xc0>
        (fd->dev->read))
    37dc:	e0bffb17 	ldw	r2,-20(fp)
    37e0:	10800017 	ldw	r2,0(r2)
    37e4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    37e8:	10001426 	beq	r2,zero,383c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    37ec:	e0bffb17 	ldw	r2,-20(fp)
    37f0:	10800017 	ldw	r2,0(r2)
    37f4:	10800517 	ldw	r2,20(r2)
    37f8:	e0ffff17 	ldw	r3,-4(fp)
    37fc:	180d883a 	mov	r6,r3
    3800:	e17ffe17 	ldw	r5,-8(fp)
    3804:	e13ffb17 	ldw	r4,-20(fp)
    3808:	103ee83a 	callr	r2
    380c:	e0bffc15 	stw	r2,-16(fp)
    3810:	e0bffc17 	ldw	r2,-16(fp)
    3814:	1000070e 	bge	r2,zero,3834 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    3818:	000372c0 	call	372c <alt_get_errno>
    381c:	1007883a 	mov	r3,r2
    3820:	e0bffc17 	ldw	r2,-16(fp)
    3824:	0085c83a 	sub	r2,zero,r2
    3828:	18800015 	stw	r2,0(r3)
          return -1;
    382c:	00bfffc4 	movi	r2,-1
    3830:	00000c06 	br	3864 <read+0xe8>
        }
        return rval;
    3834:	e0bffc17 	ldw	r2,-16(fp)
    3838:	00000a06 	br	3864 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    383c:	000372c0 	call	372c <alt_get_errno>
    3840:	1007883a 	mov	r3,r2
    3844:	00800344 	movi	r2,13
    3848:	18800015 	stw	r2,0(r3)
    384c:	00000406 	br	3860 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    3850:	000372c0 	call	372c <alt_get_errno>
    3854:	1007883a 	mov	r3,r2
    3858:	00801444 	movi	r2,81
    385c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    3860:	00bfffc4 	movi	r2,-1
}
    3864:	e037883a 	mov	sp,fp
    3868:	dfc00117 	ldw	ra,4(sp)
    386c:	df000017 	ldw	fp,0(sp)
    3870:	dec00204 	addi	sp,sp,8
    3874:	f800283a 	ret

00003878 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    3878:	defffe04 	addi	sp,sp,-8
    387c:	df000115 	stw	fp,4(sp)
    3880:	df000104 	addi	fp,sp,4
    3884:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    3888:	e0bfff17 	ldw	r2,-4(fp)
    388c:	108000d0 	cmplti	r2,r2,3
    3890:	10000d1e 	bne	r2,zero,38c8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    3894:	00800034 	movhi	r2,0
    3898:	1098a804 	addi	r2,r2,25248
    389c:	e0ffff17 	ldw	r3,-4(fp)
    38a0:	18c00324 	muli	r3,r3,12
    38a4:	10c5883a 	add	r2,r2,r3
    38a8:	10800204 	addi	r2,r2,8
    38ac:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    38b0:	00800034 	movhi	r2,0
    38b4:	1098a804 	addi	r2,r2,25248
    38b8:	e0ffff17 	ldw	r3,-4(fp)
    38bc:	18c00324 	muli	r3,r3,12
    38c0:	10c5883a 	add	r2,r2,r3
    38c4:	10000015 	stw	zero,0(r2)
  }
}
    38c8:	0001883a 	nop
    38cc:	e037883a 	mov	sp,fp
    38d0:	df000017 	ldw	fp,0(sp)
    38d4:	dec00104 	addi	sp,sp,4
    38d8:	f800283a 	ret

000038dc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    38dc:	defff904 	addi	sp,sp,-28
    38e0:	df000615 	stw	fp,24(sp)
    38e4:	df000604 	addi	fp,sp,24
    38e8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    38ec:	0005303a 	rdctl	r2,status
    38f0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    38f4:	e0fffe17 	ldw	r3,-8(fp)
    38f8:	00bfff84 	movi	r2,-2
    38fc:	1884703a 	and	r2,r3,r2
    3900:	1001703a 	wrctl	status,r2
  
  return context;
    3904:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    3908:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    390c:	d0a00a17 	ldw	r2,-32728(gp)
    3910:	10c000c4 	addi	r3,r2,3
    3914:	00bfff04 	movi	r2,-4
    3918:	1884703a 	and	r2,r3,r2
    391c:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    3920:	d0e00a17 	ldw	r3,-32728(gp)
    3924:	e0bfff17 	ldw	r2,-4(fp)
    3928:	1887883a 	add	r3,r3,r2
    392c:	00810034 	movhi	r2,1024
    3930:	10800004 	addi	r2,r2,0
    3934:	10c0062e 	bgeu	r2,r3,3950 <sbrk+0x74>
    3938:	e0bffb17 	ldw	r2,-20(fp)
    393c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3940:	e0bffa17 	ldw	r2,-24(fp)
    3944:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    3948:	00bfffc4 	movi	r2,-1
    394c:	00000b06 	br	397c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    3950:	d0a00a17 	ldw	r2,-32728(gp)
    3954:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    3958:	d0e00a17 	ldw	r3,-32728(gp)
    395c:	e0bfff17 	ldw	r2,-4(fp)
    3960:	1885883a 	add	r2,r3,r2
    3964:	d0a00a15 	stw	r2,-32728(gp)
    3968:	e0bffb17 	ldw	r2,-20(fp)
    396c:	e0bffc15 	stw	r2,-16(fp)
    3970:	e0bffc17 	ldw	r2,-16(fp)
    3974:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    3978:	e0bffd17 	ldw	r2,-12(fp)
} 
    397c:	e037883a 	mov	sp,fp
    3980:	df000017 	ldw	fp,0(sp)
    3984:	dec00104 	addi	sp,sp,4
    3988:	f800283a 	ret

0000398c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    398c:	defffe04 	addi	sp,sp,-8
    3990:	dfc00115 	stw	ra,4(sp)
    3994:	df000015 	stw	fp,0(sp)
    3998:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    399c:	00800034 	movhi	r2,0
    39a0:	109d2904 	addi	r2,r2,29860
    39a4:	10800017 	ldw	r2,0(r2)
    39a8:	10000526 	beq	r2,zero,39c0 <alt_get_errno+0x34>
    39ac:	00800034 	movhi	r2,0
    39b0:	109d2904 	addi	r2,r2,29860
    39b4:	10800017 	ldw	r2,0(r2)
    39b8:	103ee83a 	callr	r2
    39bc:	00000206 	br	39c8 <alt_get_errno+0x3c>
    39c0:	00800074 	movhi	r2,1
    39c4:	10a3cc04 	addi	r2,r2,-28880
}
    39c8:	e037883a 	mov	sp,fp
    39cc:	dfc00117 	ldw	ra,4(sp)
    39d0:	df000017 	ldw	fp,0(sp)
    39d4:	dec00204 	addi	sp,sp,8
    39d8:	f800283a 	ret

000039dc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    39dc:	defff904 	addi	sp,sp,-28
    39e0:	dfc00615 	stw	ra,24(sp)
    39e4:	df000515 	stw	fp,20(sp)
    39e8:	df000504 	addi	fp,sp,20
    39ec:	e13ffd15 	stw	r4,-12(fp)
    39f0:	e17ffe15 	stw	r5,-8(fp)
    39f4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    39f8:	e0bffd17 	ldw	r2,-12(fp)
    39fc:	10000616 	blt	r2,zero,3a18 <write+0x3c>
    3a00:	e0bffd17 	ldw	r2,-12(fp)
    3a04:	10c00324 	muli	r3,r2,12
    3a08:	00800034 	movhi	r2,0
    3a0c:	1098a804 	addi	r2,r2,25248
    3a10:	1885883a 	add	r2,r3,r2
    3a14:	00000106 	br	3a1c <write+0x40>
    3a18:	0005883a 	mov	r2,zero
    3a1c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    3a20:	e0bffb17 	ldw	r2,-20(fp)
    3a24:	10002126 	beq	r2,zero,3aac <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    3a28:	e0bffb17 	ldw	r2,-20(fp)
    3a2c:	10800217 	ldw	r2,8(r2)
    3a30:	108000cc 	andi	r2,r2,3
    3a34:	10001826 	beq	r2,zero,3a98 <write+0xbc>
    3a38:	e0bffb17 	ldw	r2,-20(fp)
    3a3c:	10800017 	ldw	r2,0(r2)
    3a40:	10800617 	ldw	r2,24(r2)
    3a44:	10001426 	beq	r2,zero,3a98 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    3a48:	e0bffb17 	ldw	r2,-20(fp)
    3a4c:	10800017 	ldw	r2,0(r2)
    3a50:	10800617 	ldw	r2,24(r2)
    3a54:	e0ffff17 	ldw	r3,-4(fp)
    3a58:	180d883a 	mov	r6,r3
    3a5c:	e17ffe17 	ldw	r5,-8(fp)
    3a60:	e13ffb17 	ldw	r4,-20(fp)
    3a64:	103ee83a 	callr	r2
    3a68:	e0bffc15 	stw	r2,-16(fp)
    3a6c:	e0bffc17 	ldw	r2,-16(fp)
    3a70:	1000070e 	bge	r2,zero,3a90 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    3a74:	000398c0 	call	398c <alt_get_errno>
    3a78:	1007883a 	mov	r3,r2
    3a7c:	e0bffc17 	ldw	r2,-16(fp)
    3a80:	0085c83a 	sub	r2,zero,r2
    3a84:	18800015 	stw	r2,0(r3)
        return -1;
    3a88:	00bfffc4 	movi	r2,-1
    3a8c:	00000c06 	br	3ac0 <write+0xe4>
      }
      return rval;
    3a90:	e0bffc17 	ldw	r2,-16(fp)
    3a94:	00000a06 	br	3ac0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    3a98:	000398c0 	call	398c <alt_get_errno>
    3a9c:	1007883a 	mov	r3,r2
    3aa0:	00800344 	movi	r2,13
    3aa4:	18800015 	stw	r2,0(r3)
    3aa8:	00000406 	br	3abc <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    3aac:	000398c0 	call	398c <alt_get_errno>
    3ab0:	1007883a 	mov	r3,r2
    3ab4:	00801444 	movi	r2,81
    3ab8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    3abc:	00bfffc4 	movi	r2,-1
}
    3ac0:	e037883a 	mov	sp,fp
    3ac4:	dfc00117 	ldw	ra,4(sp)
    3ac8:	df000017 	ldw	fp,0(sp)
    3acc:	dec00204 	addi	sp,sp,8
    3ad0:	f800283a 	ret

00003ad4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    3ad4:	defffd04 	addi	sp,sp,-12
    3ad8:	dfc00215 	stw	ra,8(sp)
    3adc:	df000115 	stw	fp,4(sp)
    3ae0:	df000104 	addi	fp,sp,4
    3ae4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    3ae8:	01400034 	movhi	r5,0
    3aec:	295d2604 	addi	r5,r5,29848
    3af0:	e13fff17 	ldw	r4,-4(fp)
    3af4:	00048fc0 	call	48fc <alt_dev_llist_insert>
}
    3af8:	e037883a 	mov	sp,fp
    3afc:	dfc00117 	ldw	ra,4(sp)
    3b00:	df000017 	ldw	fp,0(sp)
    3b04:	dec00204 	addi	sp,sp,8
    3b08:	f800283a 	ret

00003b0c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    3b0c:	defffd04 	addi	sp,sp,-12
    3b10:	dfc00215 	stw	ra,8(sp)
    3b14:	df000115 	stw	fp,4(sp)
    3b18:	df000104 	addi	fp,sp,4
    3b1c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOSII_CORE, niosII_core);
    3b20:	00052bc0 	call	52bc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    3b24:	00800044 	movi	r2,1
    3b28:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    3b2c:	0001883a 	nop
    3b30:	e037883a 	mov	sp,fp
    3b34:	dfc00117 	ldw	ra,4(sp)
    3b38:	df000017 	ldw	fp,0(sp)
    3b3c:	dec00204 	addi	sp,sp,8
    3b40:	f800283a 	ret

00003b44 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    3b44:	defffe04 	addi	sp,sp,-8
    3b48:	dfc00115 	stw	ra,4(sp)
    3b4c:	df000015 	stw	fp,0(sp)
    3b50:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_TIMER, Sys_Timer);
    3b54:	01c0fa04 	movi	r7,1000
    3b58:	01800044 	movi	r6,1
    3b5c:	000b883a 	mov	r5,zero
    3b60:	01010134 	movhi	r4,1028
    3b64:	21060004 	addi	r4,r4,6144
    3b68:	00046980 	call	4698 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, JTAG);
    3b6c:	000d883a 	mov	r6,zero
    3b70:	000b883a 	mov	r5,zero
    3b74:	01000034 	movhi	r4,0
    3b78:	21191204 	addi	r4,r4,25672
    3b7c:	0003d0c0 	call	3d0c <altera_avalon_jtag_uart_init>
    3b80:	01000034 	movhi	r4,0
    3b84:	21190804 	addi	r4,r4,25632
    3b88:	0003ad40 	call	3ad4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSTEMID, SystemID);
    3b8c:	0001883a 	nop
}
    3b90:	0001883a 	nop
    3b94:	e037883a 	mov	sp,fp
    3b98:	dfc00117 	ldw	ra,4(sp)
    3b9c:	df000017 	ldw	fp,0(sp)
    3ba0:	dec00204 	addi	sp,sp,8
    3ba4:	f800283a 	ret

00003ba8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    3ba8:	defffa04 	addi	sp,sp,-24
    3bac:	dfc00515 	stw	ra,20(sp)
    3bb0:	df000415 	stw	fp,16(sp)
    3bb4:	df000404 	addi	fp,sp,16
    3bb8:	e13ffd15 	stw	r4,-12(fp)
    3bbc:	e17ffe15 	stw	r5,-8(fp)
    3bc0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3bc4:	e0bffd17 	ldw	r2,-12(fp)
    3bc8:	10800017 	ldw	r2,0(r2)
    3bcc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    3bd0:	e0bffc17 	ldw	r2,-16(fp)
    3bd4:	10c00a04 	addi	r3,r2,40
    3bd8:	e0bffd17 	ldw	r2,-12(fp)
    3bdc:	10800217 	ldw	r2,8(r2)
    3be0:	100f883a 	mov	r7,r2
    3be4:	e1bfff17 	ldw	r6,-4(fp)
    3be8:	e17ffe17 	ldw	r5,-8(fp)
    3bec:	1809883a 	mov	r4,r3
    3bf0:	00041e00 	call	41e0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    3bf4:	e037883a 	mov	sp,fp
    3bf8:	dfc00117 	ldw	ra,4(sp)
    3bfc:	df000017 	ldw	fp,0(sp)
    3c00:	dec00204 	addi	sp,sp,8
    3c04:	f800283a 	ret

00003c08 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    3c08:	defffa04 	addi	sp,sp,-24
    3c0c:	dfc00515 	stw	ra,20(sp)
    3c10:	df000415 	stw	fp,16(sp)
    3c14:	df000404 	addi	fp,sp,16
    3c18:	e13ffd15 	stw	r4,-12(fp)
    3c1c:	e17ffe15 	stw	r5,-8(fp)
    3c20:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3c24:	e0bffd17 	ldw	r2,-12(fp)
    3c28:	10800017 	ldw	r2,0(r2)
    3c2c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    3c30:	e0bffc17 	ldw	r2,-16(fp)
    3c34:	10c00a04 	addi	r3,r2,40
    3c38:	e0bffd17 	ldw	r2,-12(fp)
    3c3c:	10800217 	ldw	r2,8(r2)
    3c40:	100f883a 	mov	r7,r2
    3c44:	e1bfff17 	ldw	r6,-4(fp)
    3c48:	e17ffe17 	ldw	r5,-8(fp)
    3c4c:	1809883a 	mov	r4,r3
    3c50:	00043fc0 	call	43fc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    3c54:	e037883a 	mov	sp,fp
    3c58:	dfc00117 	ldw	ra,4(sp)
    3c5c:	df000017 	ldw	fp,0(sp)
    3c60:	dec00204 	addi	sp,sp,8
    3c64:	f800283a 	ret

00003c68 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    3c68:	defffc04 	addi	sp,sp,-16
    3c6c:	dfc00315 	stw	ra,12(sp)
    3c70:	df000215 	stw	fp,8(sp)
    3c74:	df000204 	addi	fp,sp,8
    3c78:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3c7c:	e0bfff17 	ldw	r2,-4(fp)
    3c80:	10800017 	ldw	r2,0(r2)
    3c84:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    3c88:	e0bffe17 	ldw	r2,-8(fp)
    3c8c:	10c00a04 	addi	r3,r2,40
    3c90:	e0bfff17 	ldw	r2,-4(fp)
    3c94:	10800217 	ldw	r2,8(r2)
    3c98:	100b883a 	mov	r5,r2
    3c9c:	1809883a 	mov	r4,r3
    3ca0:	00040880 	call	4088 <altera_avalon_jtag_uart_close>
}
    3ca4:	e037883a 	mov	sp,fp
    3ca8:	dfc00117 	ldw	ra,4(sp)
    3cac:	df000017 	ldw	fp,0(sp)
    3cb0:	dec00204 	addi	sp,sp,8
    3cb4:	f800283a 	ret

00003cb8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    3cb8:	defffa04 	addi	sp,sp,-24
    3cbc:	dfc00515 	stw	ra,20(sp)
    3cc0:	df000415 	stw	fp,16(sp)
    3cc4:	df000404 	addi	fp,sp,16
    3cc8:	e13ffd15 	stw	r4,-12(fp)
    3ccc:	e17ffe15 	stw	r5,-8(fp)
    3cd0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    3cd4:	e0bffd17 	ldw	r2,-12(fp)
    3cd8:	10800017 	ldw	r2,0(r2)
    3cdc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    3ce0:	e0bffc17 	ldw	r2,-16(fp)
    3ce4:	10800a04 	addi	r2,r2,40
    3ce8:	e1bfff17 	ldw	r6,-4(fp)
    3cec:	e17ffe17 	ldw	r5,-8(fp)
    3cf0:	1009883a 	mov	r4,r2
    3cf4:	00040f00 	call	40f0 <altera_avalon_jtag_uart_ioctl>
}
    3cf8:	e037883a 	mov	sp,fp
    3cfc:	dfc00117 	ldw	ra,4(sp)
    3d00:	df000017 	ldw	fp,0(sp)
    3d04:	dec00204 	addi	sp,sp,8
    3d08:	f800283a 	ret

00003d0c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    3d0c:	defffa04 	addi	sp,sp,-24
    3d10:	dfc00515 	stw	ra,20(sp)
    3d14:	df000415 	stw	fp,16(sp)
    3d18:	df000404 	addi	fp,sp,16
    3d1c:	e13ffd15 	stw	r4,-12(fp)
    3d20:	e17ffe15 	stw	r5,-8(fp)
    3d24:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    3d28:	e0bffd17 	ldw	r2,-12(fp)
    3d2c:	00c00044 	movi	r3,1
    3d30:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    3d34:	e0bffd17 	ldw	r2,-12(fp)
    3d38:	10800017 	ldw	r2,0(r2)
    3d3c:	10800104 	addi	r2,r2,4
    3d40:	1007883a 	mov	r3,r2
    3d44:	e0bffd17 	ldw	r2,-12(fp)
    3d48:	10800817 	ldw	r2,32(r2)
    3d4c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    3d50:	e0bffe17 	ldw	r2,-8(fp)
    3d54:	e0ffff17 	ldw	r3,-4(fp)
    3d58:	d8000015 	stw	zero,0(sp)
    3d5c:	e1fffd17 	ldw	r7,-12(fp)
    3d60:	01800034 	movhi	r6,0
    3d64:	318f7504 	addi	r6,r6,15828
    3d68:	180b883a 	mov	r5,r3
    3d6c:	1009883a 	mov	r4,r2
    3d70:	0004a940 	call	4a94 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    3d74:	e0bffd17 	ldw	r2,-12(fp)
    3d78:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    3d7c:	e0bffd17 	ldw	r2,-12(fp)
    3d80:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    3d84:	00800074 	movhi	r2,1
    3d88:	10a3d104 	addi	r2,r2,-28860
    3d8c:	10800017 	ldw	r2,0(r2)
    3d90:	e1fffd17 	ldw	r7,-12(fp)
    3d94:	01800034 	movhi	r6,0
    3d98:	318ff804 	addi	r6,r6,16352
    3d9c:	100b883a 	mov	r5,r2
    3da0:	1809883a 	mov	r4,r3
    3da4:	00047240 	call	4724 <alt_alarm_start>
    3da8:	1000040e 	bge	r2,zero,3dbc <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    3dac:	e0fffd17 	ldw	r3,-12(fp)
    3db0:	00a00034 	movhi	r2,32768
    3db4:	10bfffc4 	addi	r2,r2,-1
    3db8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    3dbc:	0001883a 	nop
    3dc0:	e037883a 	mov	sp,fp
    3dc4:	dfc00117 	ldw	ra,4(sp)
    3dc8:	df000017 	ldw	fp,0(sp)
    3dcc:	dec00204 	addi	sp,sp,8
    3dd0:	f800283a 	ret

00003dd4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    3dd4:	defff804 	addi	sp,sp,-32
    3dd8:	df000715 	stw	fp,28(sp)
    3ddc:	df000704 	addi	fp,sp,28
    3de0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    3de4:	e0bfff17 	ldw	r2,-4(fp)
    3de8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    3dec:	e0bffb17 	ldw	r2,-20(fp)
    3df0:	10800017 	ldw	r2,0(r2)
    3df4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    3df8:	e0bffc17 	ldw	r2,-16(fp)
    3dfc:	10800104 	addi	r2,r2,4
    3e00:	10800037 	ldwio	r2,0(r2)
    3e04:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    3e08:	e0bffd17 	ldw	r2,-12(fp)
    3e0c:	1080c00c 	andi	r2,r2,768
    3e10:	10006d26 	beq	r2,zero,3fc8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    3e14:	e0bffd17 	ldw	r2,-12(fp)
    3e18:	1080400c 	andi	r2,r2,256
    3e1c:	10003526 	beq	r2,zero,3ef4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    3e20:	00800074 	movhi	r2,1
    3e24:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    3e28:	e0bffb17 	ldw	r2,-20(fp)
    3e2c:	10800a17 	ldw	r2,40(r2)
    3e30:	10800044 	addi	r2,r2,1
    3e34:	1081ffcc 	andi	r2,r2,2047
    3e38:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    3e3c:	e0bffb17 	ldw	r2,-20(fp)
    3e40:	10c00b17 	ldw	r3,44(r2)
    3e44:	e0bffe17 	ldw	r2,-8(fp)
    3e48:	18801526 	beq	r3,r2,3ea0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    3e4c:	e0bffc17 	ldw	r2,-16(fp)
    3e50:	10800037 	ldwio	r2,0(r2)
    3e54:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    3e58:	e0bff917 	ldw	r2,-28(fp)
    3e5c:	10a0000c 	andi	r2,r2,32768
    3e60:	10001126 	beq	r2,zero,3ea8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    3e64:	e0bffb17 	ldw	r2,-20(fp)
    3e68:	10800a17 	ldw	r2,40(r2)
    3e6c:	e0fff917 	ldw	r3,-28(fp)
    3e70:	1809883a 	mov	r4,r3
    3e74:	e0fffb17 	ldw	r3,-20(fp)
    3e78:	1885883a 	add	r2,r3,r2
    3e7c:	10800e04 	addi	r2,r2,56
    3e80:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    3e84:	e0bffb17 	ldw	r2,-20(fp)
    3e88:	10800a17 	ldw	r2,40(r2)
    3e8c:	10800044 	addi	r2,r2,1
    3e90:	10c1ffcc 	andi	r3,r2,2047
    3e94:	e0bffb17 	ldw	r2,-20(fp)
    3e98:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    3e9c:	003fe206 	br	3e28 <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    3ea0:	0001883a 	nop
    3ea4:	00000106 	br	3eac <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    3ea8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    3eac:	e0bff917 	ldw	r2,-28(fp)
    3eb0:	10bfffec 	andhi	r2,r2,65535
    3eb4:	10000f26 	beq	r2,zero,3ef4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    3eb8:	e0bffb17 	ldw	r2,-20(fp)
    3ebc:	10c00817 	ldw	r3,32(r2)
    3ec0:	00bfff84 	movi	r2,-2
    3ec4:	1886703a 	and	r3,r3,r2
    3ec8:	e0bffb17 	ldw	r2,-20(fp)
    3ecc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    3ed0:	e0bffc17 	ldw	r2,-16(fp)
    3ed4:	10800104 	addi	r2,r2,4
    3ed8:	1007883a 	mov	r3,r2
    3edc:	e0bffb17 	ldw	r2,-20(fp)
    3ee0:	10800817 	ldw	r2,32(r2)
    3ee4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    3ee8:	e0bffc17 	ldw	r2,-16(fp)
    3eec:	10800104 	addi	r2,r2,4
    3ef0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    3ef4:	e0bffd17 	ldw	r2,-12(fp)
    3ef8:	1080800c 	andi	r2,r2,512
    3efc:	103fbe26 	beq	r2,zero,3df8 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    3f00:	e0bffd17 	ldw	r2,-12(fp)
    3f04:	1004d43a 	srli	r2,r2,16
    3f08:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    3f0c:	00001406 	br	3f60 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    3f10:	e0bffc17 	ldw	r2,-16(fp)
    3f14:	e0fffb17 	ldw	r3,-20(fp)
    3f18:	18c00d17 	ldw	r3,52(r3)
    3f1c:	e13ffb17 	ldw	r4,-20(fp)
    3f20:	20c7883a 	add	r3,r4,r3
    3f24:	18c20e04 	addi	r3,r3,2104
    3f28:	18c00003 	ldbu	r3,0(r3)
    3f2c:	18c03fcc 	andi	r3,r3,255
    3f30:	18c0201c 	xori	r3,r3,128
    3f34:	18ffe004 	addi	r3,r3,-128
    3f38:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    3f3c:	e0bffb17 	ldw	r2,-20(fp)
    3f40:	10800d17 	ldw	r2,52(r2)
    3f44:	10800044 	addi	r2,r2,1
    3f48:	10c1ffcc 	andi	r3,r2,2047
    3f4c:	e0bffb17 	ldw	r2,-20(fp)
    3f50:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    3f54:	e0bffa17 	ldw	r2,-24(fp)
    3f58:	10bfffc4 	addi	r2,r2,-1
    3f5c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    3f60:	e0bffa17 	ldw	r2,-24(fp)
    3f64:	10000526 	beq	r2,zero,3f7c <altera_avalon_jtag_uart_irq+0x1a8>
    3f68:	e0bffb17 	ldw	r2,-20(fp)
    3f6c:	10c00d17 	ldw	r3,52(r2)
    3f70:	e0bffb17 	ldw	r2,-20(fp)
    3f74:	10800c17 	ldw	r2,48(r2)
    3f78:	18bfe51e 	bne	r3,r2,3f10 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    3f7c:	e0bffa17 	ldw	r2,-24(fp)
    3f80:	103f9d26 	beq	r2,zero,3df8 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    3f84:	e0bffb17 	ldw	r2,-20(fp)
    3f88:	10c00817 	ldw	r3,32(r2)
    3f8c:	00bfff44 	movi	r2,-3
    3f90:	1886703a 	and	r3,r3,r2
    3f94:	e0bffb17 	ldw	r2,-20(fp)
    3f98:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    3f9c:	e0bffb17 	ldw	r2,-20(fp)
    3fa0:	10800017 	ldw	r2,0(r2)
    3fa4:	10800104 	addi	r2,r2,4
    3fa8:	1007883a 	mov	r3,r2
    3fac:	e0bffb17 	ldw	r2,-20(fp)
    3fb0:	10800817 	ldw	r2,32(r2)
    3fb4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    3fb8:	e0bffc17 	ldw	r2,-16(fp)
    3fbc:	10800104 	addi	r2,r2,4
    3fc0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    3fc4:	003f8c06 	br	3df8 <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    3fc8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    3fcc:	0001883a 	nop
    3fd0:	e037883a 	mov	sp,fp
    3fd4:	df000017 	ldw	fp,0(sp)
    3fd8:	dec00104 	addi	sp,sp,4
    3fdc:	f800283a 	ret

00003fe0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    3fe0:	defff804 	addi	sp,sp,-32
    3fe4:	df000715 	stw	fp,28(sp)
    3fe8:	df000704 	addi	fp,sp,28
    3fec:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    3ff0:	e0bffb17 	ldw	r2,-20(fp)
    3ff4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    3ff8:	e0bff917 	ldw	r2,-28(fp)
    3ffc:	10800017 	ldw	r2,0(r2)
    4000:	10800104 	addi	r2,r2,4
    4004:	10800037 	ldwio	r2,0(r2)
    4008:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    400c:	e0bffa17 	ldw	r2,-24(fp)
    4010:	1081000c 	andi	r2,r2,1024
    4014:	10000b26 	beq	r2,zero,4044 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    4018:	e0bff917 	ldw	r2,-28(fp)
    401c:	10800017 	ldw	r2,0(r2)
    4020:	10800104 	addi	r2,r2,4
    4024:	1007883a 	mov	r3,r2
    4028:	e0bff917 	ldw	r2,-28(fp)
    402c:	10800817 	ldw	r2,32(r2)
    4030:	10810014 	ori	r2,r2,1024
    4034:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    4038:	e0bff917 	ldw	r2,-28(fp)
    403c:	10000915 	stw	zero,36(r2)
    4040:	00000a06 	br	406c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    4044:	e0bff917 	ldw	r2,-28(fp)
    4048:	10c00917 	ldw	r3,36(r2)
    404c:	00a00034 	movhi	r2,32768
    4050:	10bfff04 	addi	r2,r2,-4
    4054:	10c00536 	bltu	r2,r3,406c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    4058:	e0bff917 	ldw	r2,-28(fp)
    405c:	10800917 	ldw	r2,36(r2)
    4060:	10c00044 	addi	r3,r2,1
    4064:	e0bff917 	ldw	r2,-28(fp)
    4068:	10c00915 	stw	r3,36(r2)
    406c:	00800074 	movhi	r2,1
    4070:	10a3d104 	addi	r2,r2,-28860
    4074:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    4078:	e037883a 	mov	sp,fp
    407c:	df000017 	ldw	fp,0(sp)
    4080:	dec00104 	addi	sp,sp,4
    4084:	f800283a 	ret

00004088 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    4088:	defffd04 	addi	sp,sp,-12
    408c:	df000215 	stw	fp,8(sp)
    4090:	df000204 	addi	fp,sp,8
    4094:	e13ffe15 	stw	r4,-8(fp)
    4098:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    409c:	00000506 	br	40b4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    40a0:	e0bfff17 	ldw	r2,-4(fp)
    40a4:	1090000c 	andi	r2,r2,16384
    40a8:	10000226 	beq	r2,zero,40b4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    40ac:	00bffd44 	movi	r2,-11
    40b0:	00000b06 	br	40e0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    40b4:	e0bffe17 	ldw	r2,-8(fp)
    40b8:	10c00d17 	ldw	r3,52(r2)
    40bc:	e0bffe17 	ldw	r2,-8(fp)
    40c0:	10800c17 	ldw	r2,48(r2)
    40c4:	18800526 	beq	r3,r2,40dc <altera_avalon_jtag_uart_close+0x54>
    40c8:	e0bffe17 	ldw	r2,-8(fp)
    40cc:	10c00917 	ldw	r3,36(r2)
    40d0:	e0bffe17 	ldw	r2,-8(fp)
    40d4:	10800117 	ldw	r2,4(r2)
    40d8:	18bff136 	bltu	r3,r2,40a0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    40dc:	0005883a 	mov	r2,zero
}
    40e0:	e037883a 	mov	sp,fp
    40e4:	df000017 	ldw	fp,0(sp)
    40e8:	dec00104 	addi	sp,sp,4
    40ec:	f800283a 	ret

000040f0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    40f0:	defffa04 	addi	sp,sp,-24
    40f4:	df000515 	stw	fp,20(sp)
    40f8:	df000504 	addi	fp,sp,20
    40fc:	e13ffd15 	stw	r4,-12(fp)
    4100:	e17ffe15 	stw	r5,-8(fp)
    4104:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    4108:	00bff9c4 	movi	r2,-25
    410c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    4110:	e0bffe17 	ldw	r2,-8(fp)
    4114:	10da8060 	cmpeqi	r3,r2,27137
    4118:	1800031e 	bne	r3,zero,4128 <altera_avalon_jtag_uart_ioctl+0x38>
    411c:	109a80a0 	cmpeqi	r2,r2,27138
    4120:	1000181e 	bne	r2,zero,4184 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    4124:	00002906 	br	41cc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    4128:	e0bffd17 	ldw	r2,-12(fp)
    412c:	10c00117 	ldw	r3,4(r2)
    4130:	00a00034 	movhi	r2,32768
    4134:	10bfffc4 	addi	r2,r2,-1
    4138:	18802126 	beq	r3,r2,41c0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    413c:	e0bfff17 	ldw	r2,-4(fp)
    4140:	10800017 	ldw	r2,0(r2)
    4144:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    4148:	e0bffc17 	ldw	r2,-16(fp)
    414c:	10800090 	cmplti	r2,r2,2
    4150:	1000061e 	bne	r2,zero,416c <altera_avalon_jtag_uart_ioctl+0x7c>
    4154:	e0fffc17 	ldw	r3,-16(fp)
    4158:	00a00034 	movhi	r2,32768
    415c:	10bfffc4 	addi	r2,r2,-1
    4160:	18800226 	beq	r3,r2,416c <altera_avalon_jtag_uart_ioctl+0x7c>
    4164:	e0bffc17 	ldw	r2,-16(fp)
    4168:	00000206 	br	4174 <altera_avalon_jtag_uart_ioctl+0x84>
    416c:	00a00034 	movhi	r2,32768
    4170:	10bfff84 	addi	r2,r2,-2
    4174:	e0fffd17 	ldw	r3,-12(fp)
    4178:	18800115 	stw	r2,4(r3)
      rc = 0;
    417c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    4180:	00000f06 	br	41c0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    4184:	e0bffd17 	ldw	r2,-12(fp)
    4188:	10c00117 	ldw	r3,4(r2)
    418c:	00a00034 	movhi	r2,32768
    4190:	10bfffc4 	addi	r2,r2,-1
    4194:	18800c26 	beq	r3,r2,41c8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    4198:	e0bffd17 	ldw	r2,-12(fp)
    419c:	10c00917 	ldw	r3,36(r2)
    41a0:	e0bffd17 	ldw	r2,-12(fp)
    41a4:	10800117 	ldw	r2,4(r2)
    41a8:	1885803a 	cmpltu	r2,r3,r2
    41ac:	10c03fcc 	andi	r3,r2,255
    41b0:	e0bfff17 	ldw	r2,-4(fp)
    41b4:	10c00015 	stw	r3,0(r2)
      rc = 0;
    41b8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    41bc:	00000206 	br	41c8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    41c0:	0001883a 	nop
    41c4:	00000106 	br	41cc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    41c8:	0001883a 	nop

  default:
    break;
  }

  return rc;
    41cc:	e0bffb17 	ldw	r2,-20(fp)
}
    41d0:	e037883a 	mov	sp,fp
    41d4:	df000017 	ldw	fp,0(sp)
    41d8:	dec00104 	addi	sp,sp,4
    41dc:	f800283a 	ret

000041e0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    41e0:	defff304 	addi	sp,sp,-52
    41e4:	dfc00c15 	stw	ra,48(sp)
    41e8:	df000b15 	stw	fp,44(sp)
    41ec:	df000b04 	addi	fp,sp,44
    41f0:	e13ffc15 	stw	r4,-16(fp)
    41f4:	e17ffd15 	stw	r5,-12(fp)
    41f8:	e1bffe15 	stw	r6,-8(fp)
    41fc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    4200:	e0bffd17 	ldw	r2,-12(fp)
    4204:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    4208:	00004706 	br	4328 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    420c:	e0bffc17 	ldw	r2,-16(fp)
    4210:	10800a17 	ldw	r2,40(r2)
    4214:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    4218:	e0bffc17 	ldw	r2,-16(fp)
    421c:	10800b17 	ldw	r2,44(r2)
    4220:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    4224:	e0fff717 	ldw	r3,-36(fp)
    4228:	e0bff817 	ldw	r2,-32(fp)
    422c:	18800536 	bltu	r3,r2,4244 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    4230:	e0fff717 	ldw	r3,-36(fp)
    4234:	e0bff817 	ldw	r2,-32(fp)
    4238:	1885c83a 	sub	r2,r3,r2
    423c:	e0bff615 	stw	r2,-40(fp)
    4240:	00000406 	br	4254 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    4244:	00c20004 	movi	r3,2048
    4248:	e0bff817 	ldw	r2,-32(fp)
    424c:	1885c83a 	sub	r2,r3,r2
    4250:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    4254:	e0bff617 	ldw	r2,-40(fp)
    4258:	10001e26 	beq	r2,zero,42d4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    425c:	e0fffe17 	ldw	r3,-8(fp)
    4260:	e0bff617 	ldw	r2,-40(fp)
    4264:	1880022e 	bgeu	r3,r2,4270 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    4268:	e0bffe17 	ldw	r2,-8(fp)
    426c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    4270:	e0bffc17 	ldw	r2,-16(fp)
    4274:	10c00e04 	addi	r3,r2,56
    4278:	e0bff817 	ldw	r2,-32(fp)
    427c:	1885883a 	add	r2,r3,r2
    4280:	e1bff617 	ldw	r6,-40(fp)
    4284:	100b883a 	mov	r5,r2
    4288:	e13ff517 	ldw	r4,-44(fp)
    428c:	00017900 	call	1790 <memcpy>
      ptr   += n;
    4290:	e0fff517 	ldw	r3,-44(fp)
    4294:	e0bff617 	ldw	r2,-40(fp)
    4298:	1885883a 	add	r2,r3,r2
    429c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    42a0:	e0fffe17 	ldw	r3,-8(fp)
    42a4:	e0bff617 	ldw	r2,-40(fp)
    42a8:	1885c83a 	sub	r2,r3,r2
    42ac:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    42b0:	e0fff817 	ldw	r3,-32(fp)
    42b4:	e0bff617 	ldw	r2,-40(fp)
    42b8:	1885883a 	add	r2,r3,r2
    42bc:	10c1ffcc 	andi	r3,r2,2047
    42c0:	e0bffc17 	ldw	r2,-16(fp)
    42c4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    42c8:	e0bffe17 	ldw	r2,-8(fp)
    42cc:	00bfcf16 	blt	zero,r2,420c <altera_avalon_jtag_uart_read+0x2c>
    42d0:	00000106 	br	42d8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    42d4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    42d8:	e0fff517 	ldw	r3,-44(fp)
    42dc:	e0bffd17 	ldw	r2,-12(fp)
    42e0:	1880141e 	bne	r3,r2,4334 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    42e4:	e0bfff17 	ldw	r2,-4(fp)
    42e8:	1090000c 	andi	r2,r2,16384
    42ec:	1000131e 	bne	r2,zero,433c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    42f0:	0001883a 	nop
    42f4:	e0bffc17 	ldw	r2,-16(fp)
    42f8:	10c00a17 	ldw	r3,40(r2)
    42fc:	e0bff717 	ldw	r2,-36(fp)
    4300:	1880051e 	bne	r3,r2,4318 <altera_avalon_jtag_uart_read+0x138>
    4304:	e0bffc17 	ldw	r2,-16(fp)
    4308:	10c00917 	ldw	r3,36(r2)
    430c:	e0bffc17 	ldw	r2,-16(fp)
    4310:	10800117 	ldw	r2,4(r2)
    4314:	18bff736 	bltu	r3,r2,42f4 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    4318:	e0bffc17 	ldw	r2,-16(fp)
    431c:	10c00a17 	ldw	r3,40(r2)
    4320:	e0bff717 	ldw	r2,-36(fp)
    4324:	18800726 	beq	r3,r2,4344 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    4328:	e0bffe17 	ldw	r2,-8(fp)
    432c:	00bfb716 	blt	zero,r2,420c <altera_avalon_jtag_uart_read+0x2c>
    4330:	00000506 	br	4348 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    4334:	0001883a 	nop
    4338:	00000306 	br	4348 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    433c:	0001883a 	nop
    4340:	00000106 	br	4348 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    4344:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    4348:	e0fff517 	ldw	r3,-44(fp)
    434c:	e0bffd17 	ldw	r2,-12(fp)
    4350:	18801826 	beq	r3,r2,43b4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4354:	0005303a 	rdctl	r2,status
    4358:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    435c:	e0fffb17 	ldw	r3,-20(fp)
    4360:	00bfff84 	movi	r2,-2
    4364:	1884703a 	and	r2,r3,r2
    4368:	1001703a 	wrctl	status,r2
  
  return context;
    436c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    4370:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    4374:	e0bffc17 	ldw	r2,-16(fp)
    4378:	10800817 	ldw	r2,32(r2)
    437c:	10c00054 	ori	r3,r2,1
    4380:	e0bffc17 	ldw	r2,-16(fp)
    4384:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    4388:	e0bffc17 	ldw	r2,-16(fp)
    438c:	10800017 	ldw	r2,0(r2)
    4390:	10800104 	addi	r2,r2,4
    4394:	1007883a 	mov	r3,r2
    4398:	e0bffc17 	ldw	r2,-16(fp)
    439c:	10800817 	ldw	r2,32(r2)
    43a0:	18800035 	stwio	r2,0(r3)
    43a4:	e0bffa17 	ldw	r2,-24(fp)
    43a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    43ac:	e0bff917 	ldw	r2,-28(fp)
    43b0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    43b4:	e0fff517 	ldw	r3,-44(fp)
    43b8:	e0bffd17 	ldw	r2,-12(fp)
    43bc:	18800426 	beq	r3,r2,43d0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    43c0:	e0fff517 	ldw	r3,-44(fp)
    43c4:	e0bffd17 	ldw	r2,-12(fp)
    43c8:	1885c83a 	sub	r2,r3,r2
    43cc:	00000606 	br	43e8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    43d0:	e0bfff17 	ldw	r2,-4(fp)
    43d4:	1090000c 	andi	r2,r2,16384
    43d8:	10000226 	beq	r2,zero,43e4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    43dc:	00bffd44 	movi	r2,-11
    43e0:	00000106 	br	43e8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    43e4:	00bffec4 	movi	r2,-5
}
    43e8:	e037883a 	mov	sp,fp
    43ec:	dfc00117 	ldw	ra,4(sp)
    43f0:	df000017 	ldw	fp,0(sp)
    43f4:	dec00204 	addi	sp,sp,8
    43f8:	f800283a 	ret

000043fc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    43fc:	defff304 	addi	sp,sp,-52
    4400:	dfc00c15 	stw	ra,48(sp)
    4404:	df000b15 	stw	fp,44(sp)
    4408:	df000b04 	addi	fp,sp,44
    440c:	e13ffc15 	stw	r4,-16(fp)
    4410:	e17ffd15 	stw	r5,-12(fp)
    4414:	e1bffe15 	stw	r6,-8(fp)
    4418:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    441c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    4420:	e0bffd17 	ldw	r2,-12(fp)
    4424:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    4428:	00003706 	br	4508 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    442c:	e0bffc17 	ldw	r2,-16(fp)
    4430:	10800c17 	ldw	r2,48(r2)
    4434:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    4438:	e0bffc17 	ldw	r2,-16(fp)
    443c:	10800d17 	ldw	r2,52(r2)
    4440:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    4444:	e0fff917 	ldw	r3,-28(fp)
    4448:	e0bff517 	ldw	r2,-44(fp)
    444c:	1880062e 	bgeu	r3,r2,4468 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    4450:	e0fff517 	ldw	r3,-44(fp)
    4454:	e0bff917 	ldw	r2,-28(fp)
    4458:	1885c83a 	sub	r2,r3,r2
    445c:	10bfffc4 	addi	r2,r2,-1
    4460:	e0bff615 	stw	r2,-40(fp)
    4464:	00000b06 	br	4494 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    4468:	e0bff517 	ldw	r2,-44(fp)
    446c:	10000526 	beq	r2,zero,4484 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    4470:	00c20004 	movi	r3,2048
    4474:	e0bff917 	ldw	r2,-28(fp)
    4478:	1885c83a 	sub	r2,r3,r2
    447c:	e0bff615 	stw	r2,-40(fp)
    4480:	00000406 	br	4494 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    4484:	00c1ffc4 	movi	r3,2047
    4488:	e0bff917 	ldw	r2,-28(fp)
    448c:	1885c83a 	sub	r2,r3,r2
    4490:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    4494:	e0bff617 	ldw	r2,-40(fp)
    4498:	10001e26 	beq	r2,zero,4514 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    449c:	e0fffe17 	ldw	r3,-8(fp)
    44a0:	e0bff617 	ldw	r2,-40(fp)
    44a4:	1880022e 	bgeu	r3,r2,44b0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    44a8:	e0bffe17 	ldw	r2,-8(fp)
    44ac:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    44b0:	e0bffc17 	ldw	r2,-16(fp)
    44b4:	10c20e04 	addi	r3,r2,2104
    44b8:	e0bff917 	ldw	r2,-28(fp)
    44bc:	1885883a 	add	r2,r3,r2
    44c0:	e1bff617 	ldw	r6,-40(fp)
    44c4:	e17ffd17 	ldw	r5,-12(fp)
    44c8:	1009883a 	mov	r4,r2
    44cc:	00017900 	call	1790 <memcpy>
      ptr   += n;
    44d0:	e0fffd17 	ldw	r3,-12(fp)
    44d4:	e0bff617 	ldw	r2,-40(fp)
    44d8:	1885883a 	add	r2,r3,r2
    44dc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    44e0:	e0fffe17 	ldw	r3,-8(fp)
    44e4:	e0bff617 	ldw	r2,-40(fp)
    44e8:	1885c83a 	sub	r2,r3,r2
    44ec:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    44f0:	e0fff917 	ldw	r3,-28(fp)
    44f4:	e0bff617 	ldw	r2,-40(fp)
    44f8:	1885883a 	add	r2,r3,r2
    44fc:	10c1ffcc 	andi	r3,r2,2047
    4500:	e0bffc17 	ldw	r2,-16(fp)
    4504:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    4508:	e0bffe17 	ldw	r2,-8(fp)
    450c:	00bfc716 	blt	zero,r2,442c <altera_avalon_jtag_uart_write+0x30>
    4510:	00000106 	br	4518 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    4514:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4518:	0005303a 	rdctl	r2,status
    451c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4520:	e0fffb17 	ldw	r3,-20(fp)
    4524:	00bfff84 	movi	r2,-2
    4528:	1884703a 	and	r2,r3,r2
    452c:	1001703a 	wrctl	status,r2
  
  return context;
    4530:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    4534:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    4538:	e0bffc17 	ldw	r2,-16(fp)
    453c:	10800817 	ldw	r2,32(r2)
    4540:	10c00094 	ori	r3,r2,2
    4544:	e0bffc17 	ldw	r2,-16(fp)
    4548:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    454c:	e0bffc17 	ldw	r2,-16(fp)
    4550:	10800017 	ldw	r2,0(r2)
    4554:	10800104 	addi	r2,r2,4
    4558:	1007883a 	mov	r3,r2
    455c:	e0bffc17 	ldw	r2,-16(fp)
    4560:	10800817 	ldw	r2,32(r2)
    4564:	18800035 	stwio	r2,0(r3)
    4568:	e0bffa17 	ldw	r2,-24(fp)
    456c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4570:	e0bff817 	ldw	r2,-32(fp)
    4574:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    4578:	e0bffe17 	ldw	r2,-8(fp)
    457c:	0080100e 	bge	zero,r2,45c0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    4580:	e0bfff17 	ldw	r2,-4(fp)
    4584:	1090000c 	andi	r2,r2,16384
    4588:	1000101e 	bne	r2,zero,45cc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    458c:	0001883a 	nop
    4590:	e0bffc17 	ldw	r2,-16(fp)
    4594:	10c00d17 	ldw	r3,52(r2)
    4598:	e0bff517 	ldw	r2,-44(fp)
    459c:	1880051e 	bne	r3,r2,45b4 <altera_avalon_jtag_uart_write+0x1b8>
    45a0:	e0bffc17 	ldw	r2,-16(fp)
    45a4:	10c00917 	ldw	r3,36(r2)
    45a8:	e0bffc17 	ldw	r2,-16(fp)
    45ac:	10800117 	ldw	r2,4(r2)
    45b0:	18bff736 	bltu	r3,r2,4590 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    45b4:	e0bffc17 	ldw	r2,-16(fp)
    45b8:	10800917 	ldw	r2,36(r2)
    45bc:	1000051e 	bne	r2,zero,45d4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    45c0:	e0bffe17 	ldw	r2,-8(fp)
    45c4:	00bfd016 	blt	zero,r2,4508 <altera_avalon_jtag_uart_write+0x10c>
    45c8:	00000306 	br	45d8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    45cc:	0001883a 	nop
    45d0:	00000106 	br	45d8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    45d4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    45d8:	e0fffd17 	ldw	r3,-12(fp)
    45dc:	e0bff717 	ldw	r2,-36(fp)
    45e0:	18800426 	beq	r3,r2,45f4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    45e4:	e0fffd17 	ldw	r3,-12(fp)
    45e8:	e0bff717 	ldw	r2,-36(fp)
    45ec:	1885c83a 	sub	r2,r3,r2
    45f0:	00000606 	br	460c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    45f4:	e0bfff17 	ldw	r2,-4(fp)
    45f8:	1090000c 	andi	r2,r2,16384
    45fc:	10000226 	beq	r2,zero,4608 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    4600:	00bffd44 	movi	r2,-11
    4604:	00000106 	br	460c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    4608:	00bffec4 	movi	r2,-5
}
    460c:	e037883a 	mov	sp,fp
    4610:	dfc00117 	ldw	ra,4(sp)
    4614:	df000017 	ldw	fp,0(sp)
    4618:	dec00204 	addi	sp,sp,8
    461c:	f800283a 	ret

00004620 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    4620:	defffa04 	addi	sp,sp,-24
    4624:	dfc00515 	stw	ra,20(sp)
    4628:	df000415 	stw	fp,16(sp)
    462c:	df000404 	addi	fp,sp,16
    4630:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    4634:	0007883a 	mov	r3,zero
    4638:	e0bfff17 	ldw	r2,-4(fp)
    463c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    4640:	e0bfff17 	ldw	r2,-4(fp)
    4644:	10800104 	addi	r2,r2,4
    4648:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    464c:	0005303a 	rdctl	r2,status
    4650:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4654:	e0fffd17 	ldw	r3,-12(fp)
    4658:	00bfff84 	movi	r2,-2
    465c:	1884703a 	and	r2,r3,r2
    4660:	1001703a 	wrctl	status,r2
  
  return context;
    4664:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    4668:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    466c:	00051b40 	call	51b4 <alt_tick>
    4670:	e0bffc17 	ldw	r2,-16(fp)
    4674:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4678:	e0bffe17 	ldw	r2,-8(fp)
    467c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    4680:	0001883a 	nop
    4684:	e037883a 	mov	sp,fp
    4688:	dfc00117 	ldw	ra,4(sp)
    468c:	df000017 	ldw	fp,0(sp)
    4690:	dec00204 	addi	sp,sp,8
    4694:	f800283a 	ret

00004698 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    4698:	defff804 	addi	sp,sp,-32
    469c:	dfc00715 	stw	ra,28(sp)
    46a0:	df000615 	stw	fp,24(sp)
    46a4:	df000604 	addi	fp,sp,24
    46a8:	e13ffc15 	stw	r4,-16(fp)
    46ac:	e17ffd15 	stw	r5,-12(fp)
    46b0:	e1bffe15 	stw	r6,-8(fp)
    46b4:	e1ffff15 	stw	r7,-4(fp)
    46b8:	e0bfff17 	ldw	r2,-4(fp)
    46bc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    46c0:	00800074 	movhi	r2,1
    46c4:	10a3d104 	addi	r2,r2,-28860
    46c8:	10800017 	ldw	r2,0(r2)
    46cc:	1000041e 	bne	r2,zero,46e0 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    46d0:	00800074 	movhi	r2,1
    46d4:	10a3d104 	addi	r2,r2,-28860
    46d8:	e0fffb17 	ldw	r3,-20(fp)
    46dc:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    46e0:	e0bffc17 	ldw	r2,-16(fp)
    46e4:	10800104 	addi	r2,r2,4
    46e8:	00c001c4 	movi	r3,7
    46ec:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    46f0:	d8000015 	stw	zero,0(sp)
    46f4:	e1fffc17 	ldw	r7,-16(fp)
    46f8:	01800034 	movhi	r6,0
    46fc:	31918804 	addi	r6,r6,17952
    4700:	e17ffe17 	ldw	r5,-8(fp)
    4704:	e13ffd17 	ldw	r4,-12(fp)
    4708:	0004a940 	call	4a94 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    470c:	0001883a 	nop
    4710:	e037883a 	mov	sp,fp
    4714:	dfc00117 	ldw	ra,4(sp)
    4718:	df000017 	ldw	fp,0(sp)
    471c:	dec00204 	addi	sp,sp,8
    4720:	f800283a 	ret

00004724 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    4724:	defff504 	addi	sp,sp,-44
    4728:	df000a15 	stw	fp,40(sp)
    472c:	df000a04 	addi	fp,sp,40
    4730:	e13ffc15 	stw	r4,-16(fp)
    4734:	e17ffd15 	stw	r5,-12(fp)
    4738:	e1bffe15 	stw	r6,-8(fp)
    473c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    4740:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    4744:	00800074 	movhi	r2,1
    4748:	10a3d104 	addi	r2,r2,-28860
    474c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    4750:	10003f26 	beq	r2,zero,4850 <alt_alarm_start+0x12c>
  {
    if (alarm)
    4754:	e0bffc17 	ldw	r2,-16(fp)
    4758:	10003b26 	beq	r2,zero,4848 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    475c:	e0bffc17 	ldw	r2,-16(fp)
    4760:	e0fffe17 	ldw	r3,-8(fp)
    4764:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    4768:	e0bffc17 	ldw	r2,-16(fp)
    476c:	e0ffff17 	ldw	r3,-4(fp)
    4770:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4774:	0005303a 	rdctl	r2,status
    4778:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    477c:	e0fff917 	ldw	r3,-28(fp)
    4780:	00bfff84 	movi	r2,-2
    4784:	1884703a 	and	r2,r3,r2
    4788:	1001703a 	wrctl	status,r2
  
  return context;
    478c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    4790:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    4794:	00800074 	movhi	r2,1
    4798:	10a3d204 	addi	r2,r2,-28856
    479c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    47a0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    47a4:	e0fffd17 	ldw	r3,-12(fp)
    47a8:	e0bff617 	ldw	r2,-40(fp)
    47ac:	1885883a 	add	r2,r3,r2
    47b0:	10c00044 	addi	r3,r2,1
    47b4:	e0bffc17 	ldw	r2,-16(fp)
    47b8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    47bc:	e0bffc17 	ldw	r2,-16(fp)
    47c0:	10c00217 	ldw	r3,8(r2)
    47c4:	e0bff617 	ldw	r2,-40(fp)
    47c8:	1880042e 	bgeu	r3,r2,47dc <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    47cc:	e0bffc17 	ldw	r2,-16(fp)
    47d0:	00c00044 	movi	r3,1
    47d4:	10c00405 	stb	r3,16(r2)
    47d8:	00000206 	br	47e4 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    47dc:	e0bffc17 	ldw	r2,-16(fp)
    47e0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    47e4:	e0fffc17 	ldw	r3,-16(fp)
    47e8:	00800034 	movhi	r2,0
    47ec:	109d2c04 	addi	r2,r2,29872
    47f0:	e0bffa15 	stw	r2,-24(fp)
    47f4:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    47f8:	e0bffb17 	ldw	r2,-20(fp)
    47fc:	e0fffa17 	ldw	r3,-24(fp)
    4800:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    4804:	e0bffa17 	ldw	r2,-24(fp)
    4808:	10c00017 	ldw	r3,0(r2)
    480c:	e0bffb17 	ldw	r2,-20(fp)
    4810:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    4814:	e0bffa17 	ldw	r2,-24(fp)
    4818:	10800017 	ldw	r2,0(r2)
    481c:	e0fffb17 	ldw	r3,-20(fp)
    4820:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    4824:	e0bffa17 	ldw	r2,-24(fp)
    4828:	e0fffb17 	ldw	r3,-20(fp)
    482c:	10c00015 	stw	r3,0(r2)
    4830:	e0bff817 	ldw	r2,-32(fp)
    4834:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4838:	e0bff717 	ldw	r2,-36(fp)
    483c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    4840:	0005883a 	mov	r2,zero
    4844:	00000306 	br	4854 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    4848:	00bffa84 	movi	r2,-22
    484c:	00000106 	br	4854 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    4850:	00bfde84 	movi	r2,-134
  }
}
    4854:	e037883a 	mov	sp,fp
    4858:	df000017 	ldw	fp,0(sp)
    485c:	dec00104 	addi	sp,sp,4
    4860:	f800283a 	ret

00004864 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    4864:	defffe04 	addi	sp,sp,-8
    4868:	df000115 	stw	fp,4(sp)
    486c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    4870:	e03fff15 	stw	zero,-4(fp)
    4874:	00000506 	br	488c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    4878:	e0bfff17 	ldw	r2,-4(fp)
    487c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    4880:	e0bfff17 	ldw	r2,-4(fp)
    4884:	10800804 	addi	r2,r2,32
    4888:	e0bfff15 	stw	r2,-4(fp)
    488c:	e0bfff17 	ldw	r2,-4(fp)
    4890:	10820030 	cmpltui	r2,r2,2048
    4894:	103ff81e 	bne	r2,zero,4878 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    4898:	0001883a 	nop
    489c:	e037883a 	mov	sp,fp
    48a0:	df000017 	ldw	fp,0(sp)
    48a4:	dec00104 	addi	sp,sp,4
    48a8:	f800283a 	ret

000048ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    48ac:	defffe04 	addi	sp,sp,-8
    48b0:	dfc00115 	stw	ra,4(sp)
    48b4:	df000015 	stw	fp,0(sp)
    48b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    48bc:	00800034 	movhi	r2,0
    48c0:	109d2904 	addi	r2,r2,29860
    48c4:	10800017 	ldw	r2,0(r2)
    48c8:	10000526 	beq	r2,zero,48e0 <alt_get_errno+0x34>
    48cc:	00800034 	movhi	r2,0
    48d0:	109d2904 	addi	r2,r2,29860
    48d4:	10800017 	ldw	r2,0(r2)
    48d8:	103ee83a 	callr	r2
    48dc:	00000206 	br	48e8 <alt_get_errno+0x3c>
    48e0:	00800074 	movhi	r2,1
    48e4:	10a3cc04 	addi	r2,r2,-28880
}
    48e8:	e037883a 	mov	sp,fp
    48ec:	dfc00117 	ldw	ra,4(sp)
    48f0:	df000017 	ldw	fp,0(sp)
    48f4:	dec00204 	addi	sp,sp,8
    48f8:	f800283a 	ret

000048fc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    48fc:	defffa04 	addi	sp,sp,-24
    4900:	dfc00515 	stw	ra,20(sp)
    4904:	df000415 	stw	fp,16(sp)
    4908:	df000404 	addi	fp,sp,16
    490c:	e13ffe15 	stw	r4,-8(fp)
    4910:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    4914:	e0bffe17 	ldw	r2,-8(fp)
    4918:	10000326 	beq	r2,zero,4928 <alt_dev_llist_insert+0x2c>
    491c:	e0bffe17 	ldw	r2,-8(fp)
    4920:	10800217 	ldw	r2,8(r2)
    4924:	1000061e 	bne	r2,zero,4940 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    4928:	00048ac0 	call	48ac <alt_get_errno>
    492c:	1007883a 	mov	r3,r2
    4930:	00800584 	movi	r2,22
    4934:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    4938:	00bffa84 	movi	r2,-22
    493c:	00001306 	br	498c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    4940:	e0bffe17 	ldw	r2,-8(fp)
    4944:	e0ffff17 	ldw	r3,-4(fp)
    4948:	e0fffc15 	stw	r3,-16(fp)
    494c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    4950:	e0bffd17 	ldw	r2,-12(fp)
    4954:	e0fffc17 	ldw	r3,-16(fp)
    4958:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    495c:	e0bffc17 	ldw	r2,-16(fp)
    4960:	10c00017 	ldw	r3,0(r2)
    4964:	e0bffd17 	ldw	r2,-12(fp)
    4968:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    496c:	e0bffc17 	ldw	r2,-16(fp)
    4970:	10800017 	ldw	r2,0(r2)
    4974:	e0fffd17 	ldw	r3,-12(fp)
    4978:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    497c:	e0bffc17 	ldw	r2,-16(fp)
    4980:	e0fffd17 	ldw	r3,-12(fp)
    4984:	10c00015 	stw	r3,0(r2)

  return 0;  
    4988:	0005883a 	mov	r2,zero
}
    498c:	e037883a 	mov	sp,fp
    4990:	dfc00117 	ldw	ra,4(sp)
    4994:	df000017 	ldw	fp,0(sp)
    4998:	dec00204 	addi	sp,sp,8
    499c:	f800283a 	ret

000049a0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    49a0:	defffd04 	addi	sp,sp,-12
    49a4:	dfc00215 	stw	ra,8(sp)
    49a8:	df000115 	stw	fp,4(sp)
    49ac:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    49b0:	00800034 	movhi	r2,0
    49b4:	10967d04 	addi	r2,r2,23028
    49b8:	e0bfff15 	stw	r2,-4(fp)
    49bc:	00000606 	br	49d8 <_do_ctors+0x38>
        (*ctor) (); 
    49c0:	e0bfff17 	ldw	r2,-4(fp)
    49c4:	10800017 	ldw	r2,0(r2)
    49c8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    49cc:	e0bfff17 	ldw	r2,-4(fp)
    49d0:	10bfff04 	addi	r2,r2,-4
    49d4:	e0bfff15 	stw	r2,-4(fp)
    49d8:	e0ffff17 	ldw	r3,-4(fp)
    49dc:	00800034 	movhi	r2,0
    49e0:	10967e04 	addi	r2,r2,23032
    49e4:	18bff62e 	bgeu	r3,r2,49c0 <_do_ctors+0x20>
        (*ctor) (); 
}
    49e8:	0001883a 	nop
    49ec:	e037883a 	mov	sp,fp
    49f0:	dfc00117 	ldw	ra,4(sp)
    49f4:	df000017 	ldw	fp,0(sp)
    49f8:	dec00204 	addi	sp,sp,8
    49fc:	f800283a 	ret

00004a00 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    4a00:	defffd04 	addi	sp,sp,-12
    4a04:	dfc00215 	stw	ra,8(sp)
    4a08:	df000115 	stw	fp,4(sp)
    4a0c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    4a10:	00800034 	movhi	r2,0
    4a14:	10967d04 	addi	r2,r2,23028
    4a18:	e0bfff15 	stw	r2,-4(fp)
    4a1c:	00000606 	br	4a38 <_do_dtors+0x38>
        (*dtor) (); 
    4a20:	e0bfff17 	ldw	r2,-4(fp)
    4a24:	10800017 	ldw	r2,0(r2)
    4a28:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    4a2c:	e0bfff17 	ldw	r2,-4(fp)
    4a30:	10bfff04 	addi	r2,r2,-4
    4a34:	e0bfff15 	stw	r2,-4(fp)
    4a38:	e0ffff17 	ldw	r3,-4(fp)
    4a3c:	00800034 	movhi	r2,0
    4a40:	10967e04 	addi	r2,r2,23032
    4a44:	18bff62e 	bgeu	r3,r2,4a20 <_do_dtors+0x20>
        (*dtor) (); 
}
    4a48:	0001883a 	nop
    4a4c:	e037883a 	mov	sp,fp
    4a50:	dfc00117 	ldw	ra,4(sp)
    4a54:	df000017 	ldw	fp,0(sp)
    4a58:	dec00204 	addi	sp,sp,8
    4a5c:	f800283a 	ret

00004a60 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    4a60:	defffe04 	addi	sp,sp,-8
    4a64:	dfc00115 	stw	ra,4(sp)
    4a68:	df000015 	stw	fp,0(sp)
    4a6c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    4a70:	01440004 	movi	r5,4096
    4a74:	0009883a 	mov	r4,zero
    4a78:	00055380 	call	5538 <alt_icache_flush>
#endif
}
    4a7c:	0001883a 	nop
    4a80:	e037883a 	mov	sp,fp
    4a84:	dfc00117 	ldw	ra,4(sp)
    4a88:	df000017 	ldw	fp,0(sp)
    4a8c:	dec00204 	addi	sp,sp,8
    4a90:	f800283a 	ret

00004a94 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    4a94:	defff904 	addi	sp,sp,-28
    4a98:	dfc00615 	stw	ra,24(sp)
    4a9c:	df000515 	stw	fp,20(sp)
    4aa0:	df000504 	addi	fp,sp,20
    4aa4:	e13ffc15 	stw	r4,-16(fp)
    4aa8:	e17ffd15 	stw	r5,-12(fp)
    4aac:	e1bffe15 	stw	r6,-8(fp)
    4ab0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    4ab4:	e0800217 	ldw	r2,8(fp)
    4ab8:	d8800015 	stw	r2,0(sp)
    4abc:	e1ffff17 	ldw	r7,-4(fp)
    4ac0:	e1bffe17 	ldw	r6,-8(fp)
    4ac4:	e17ffd17 	ldw	r5,-12(fp)
    4ac8:	e13ffc17 	ldw	r4,-16(fp)
    4acc:	0004c740 	call	4c74 <alt_iic_isr_register>
}  
    4ad0:	e037883a 	mov	sp,fp
    4ad4:	dfc00117 	ldw	ra,4(sp)
    4ad8:	df000017 	ldw	fp,0(sp)
    4adc:	dec00204 	addi	sp,sp,8
    4ae0:	f800283a 	ret

00004ae4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    4ae4:	defff904 	addi	sp,sp,-28
    4ae8:	df000615 	stw	fp,24(sp)
    4aec:	df000604 	addi	fp,sp,24
    4af0:	e13ffe15 	stw	r4,-8(fp)
    4af4:	e17fff15 	stw	r5,-4(fp)
    4af8:	e0bfff17 	ldw	r2,-4(fp)
    4afc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4b00:	0005303a 	rdctl	r2,status
    4b04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4b08:	e0fffb17 	ldw	r3,-20(fp)
    4b0c:	00bfff84 	movi	r2,-2
    4b10:	1884703a 	and	r2,r3,r2
    4b14:	1001703a 	wrctl	status,r2
  
  return context;
    4b18:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    4b1c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    4b20:	00c00044 	movi	r3,1
    4b24:	e0bffa17 	ldw	r2,-24(fp)
    4b28:	1884983a 	sll	r2,r3,r2
    4b2c:	1007883a 	mov	r3,r2
    4b30:	00800074 	movhi	r2,1
    4b34:	10a3d004 	addi	r2,r2,-28864
    4b38:	10800017 	ldw	r2,0(r2)
    4b3c:	1886b03a 	or	r3,r3,r2
    4b40:	00800074 	movhi	r2,1
    4b44:	10a3d004 	addi	r2,r2,-28864
    4b48:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    4b4c:	00800074 	movhi	r2,1
    4b50:	10a3d004 	addi	r2,r2,-28864
    4b54:	10800017 	ldw	r2,0(r2)
    4b58:	100170fa 	wrctl	ienable,r2
    4b5c:	e0bffc17 	ldw	r2,-16(fp)
    4b60:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4b64:	e0bffd17 	ldw	r2,-12(fp)
    4b68:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    4b6c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    4b70:	0001883a 	nop
}
    4b74:	e037883a 	mov	sp,fp
    4b78:	df000017 	ldw	fp,0(sp)
    4b7c:	dec00104 	addi	sp,sp,4
    4b80:	f800283a 	ret

00004b84 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    4b84:	defff904 	addi	sp,sp,-28
    4b88:	df000615 	stw	fp,24(sp)
    4b8c:	df000604 	addi	fp,sp,24
    4b90:	e13ffe15 	stw	r4,-8(fp)
    4b94:	e17fff15 	stw	r5,-4(fp)
    4b98:	e0bfff17 	ldw	r2,-4(fp)
    4b9c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4ba0:	0005303a 	rdctl	r2,status
    4ba4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4ba8:	e0fffb17 	ldw	r3,-20(fp)
    4bac:	00bfff84 	movi	r2,-2
    4bb0:	1884703a 	and	r2,r3,r2
    4bb4:	1001703a 	wrctl	status,r2
  
  return context;
    4bb8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    4bbc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    4bc0:	00c00044 	movi	r3,1
    4bc4:	e0bffa17 	ldw	r2,-24(fp)
    4bc8:	1884983a 	sll	r2,r3,r2
    4bcc:	0084303a 	nor	r2,zero,r2
    4bd0:	1007883a 	mov	r3,r2
    4bd4:	00800074 	movhi	r2,1
    4bd8:	10a3d004 	addi	r2,r2,-28864
    4bdc:	10800017 	ldw	r2,0(r2)
    4be0:	1886703a 	and	r3,r3,r2
    4be4:	00800074 	movhi	r2,1
    4be8:	10a3d004 	addi	r2,r2,-28864
    4bec:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    4bf0:	00800074 	movhi	r2,1
    4bf4:	10a3d004 	addi	r2,r2,-28864
    4bf8:	10800017 	ldw	r2,0(r2)
    4bfc:	100170fa 	wrctl	ienable,r2
    4c00:	e0bffc17 	ldw	r2,-16(fp)
    4c04:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4c08:	e0bffd17 	ldw	r2,-12(fp)
    4c0c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    4c10:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    4c14:	0001883a 	nop
}
    4c18:	e037883a 	mov	sp,fp
    4c1c:	df000017 	ldw	fp,0(sp)
    4c20:	dec00104 	addi	sp,sp,4
    4c24:	f800283a 	ret

00004c28 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    4c28:	defffc04 	addi	sp,sp,-16
    4c2c:	df000315 	stw	fp,12(sp)
    4c30:	df000304 	addi	fp,sp,12
    4c34:	e13ffe15 	stw	r4,-8(fp)
    4c38:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    4c3c:	000530fa 	rdctl	r2,ienable
    4c40:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    4c44:	00c00044 	movi	r3,1
    4c48:	e0bfff17 	ldw	r2,-4(fp)
    4c4c:	1884983a 	sll	r2,r3,r2
    4c50:	1007883a 	mov	r3,r2
    4c54:	e0bffd17 	ldw	r2,-12(fp)
    4c58:	1884703a 	and	r2,r3,r2
    4c5c:	1004c03a 	cmpne	r2,r2,zero
    4c60:	10803fcc 	andi	r2,r2,255
}
    4c64:	e037883a 	mov	sp,fp
    4c68:	df000017 	ldw	fp,0(sp)
    4c6c:	dec00104 	addi	sp,sp,4
    4c70:	f800283a 	ret

00004c74 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    4c74:	defff504 	addi	sp,sp,-44
    4c78:	dfc00a15 	stw	ra,40(sp)
    4c7c:	df000915 	stw	fp,36(sp)
    4c80:	df000904 	addi	fp,sp,36
    4c84:	e13ffc15 	stw	r4,-16(fp)
    4c88:	e17ffd15 	stw	r5,-12(fp)
    4c8c:	e1bffe15 	stw	r6,-8(fp)
    4c90:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    4c94:	00bffa84 	movi	r2,-22
    4c98:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    4c9c:	e0bffd17 	ldw	r2,-12(fp)
    4ca0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    4ca4:	e0bff817 	ldw	r2,-32(fp)
    4ca8:	10800808 	cmpgei	r2,r2,32
    4cac:	1000271e 	bne	r2,zero,4d4c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4cb0:	0005303a 	rdctl	r2,status
    4cb4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4cb8:	e0fffb17 	ldw	r3,-20(fp)
    4cbc:	00bfff84 	movi	r2,-2
    4cc0:	1884703a 	and	r2,r3,r2
    4cc4:	1001703a 	wrctl	status,r2
  
  return context;
    4cc8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    4ccc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    4cd0:	00800074 	movhi	r2,1
    4cd4:	10a3de04 	addi	r2,r2,-28808
    4cd8:	e0fff817 	ldw	r3,-32(fp)
    4cdc:	180690fa 	slli	r3,r3,3
    4ce0:	10c5883a 	add	r2,r2,r3
    4ce4:	e0fffe17 	ldw	r3,-8(fp)
    4ce8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    4cec:	00800074 	movhi	r2,1
    4cf0:	10a3de04 	addi	r2,r2,-28808
    4cf4:	e0fff817 	ldw	r3,-32(fp)
    4cf8:	180690fa 	slli	r3,r3,3
    4cfc:	10c5883a 	add	r2,r2,r3
    4d00:	10800104 	addi	r2,r2,4
    4d04:	e0ffff17 	ldw	r3,-4(fp)
    4d08:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    4d0c:	e0bffe17 	ldw	r2,-8(fp)
    4d10:	10000526 	beq	r2,zero,4d28 <alt_iic_isr_register+0xb4>
    4d14:	e0bff817 	ldw	r2,-32(fp)
    4d18:	100b883a 	mov	r5,r2
    4d1c:	e13ffc17 	ldw	r4,-16(fp)
    4d20:	0004ae40 	call	4ae4 <alt_ic_irq_enable>
    4d24:	00000406 	br	4d38 <alt_iic_isr_register+0xc4>
    4d28:	e0bff817 	ldw	r2,-32(fp)
    4d2c:	100b883a 	mov	r5,r2
    4d30:	e13ffc17 	ldw	r4,-16(fp)
    4d34:	0004b840 	call	4b84 <alt_ic_irq_disable>
    4d38:	e0bff715 	stw	r2,-36(fp)
    4d3c:	e0bffa17 	ldw	r2,-24(fp)
    4d40:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4d44:	e0bff917 	ldw	r2,-28(fp)
    4d48:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    4d4c:	e0bff717 	ldw	r2,-36(fp)
}
    4d50:	e037883a 	mov	sp,fp
    4d54:	dfc00117 	ldw	ra,4(sp)
    4d58:	df000017 	ldw	fp,0(sp)
    4d5c:	dec00204 	addi	sp,sp,8
    4d60:	f800283a 	ret

00004d64 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    4d64:	defff904 	addi	sp,sp,-28
    4d68:	dfc00615 	stw	ra,24(sp)
    4d6c:	df000515 	stw	fp,20(sp)
    4d70:	df000504 	addi	fp,sp,20
    4d74:	e13ffc15 	stw	r4,-16(fp)
    4d78:	e17ffd15 	stw	r5,-12(fp)
    4d7c:	e1bffe15 	stw	r6,-8(fp)
    4d80:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    4d84:	e1bfff17 	ldw	r6,-4(fp)
    4d88:	e17ffe17 	ldw	r5,-8(fp)
    4d8c:	e13ffd17 	ldw	r4,-12(fp)
    4d90:	0004fc00 	call	4fc0 <open>
    4d94:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    4d98:	e0bffb17 	ldw	r2,-20(fp)
    4d9c:	10001c16 	blt	r2,zero,4e10 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    4da0:	00800034 	movhi	r2,0
    4da4:	1098a804 	addi	r2,r2,25248
    4da8:	e0fffb17 	ldw	r3,-20(fp)
    4dac:	18c00324 	muli	r3,r3,12
    4db0:	10c5883a 	add	r2,r2,r3
    4db4:	10c00017 	ldw	r3,0(r2)
    4db8:	e0bffc17 	ldw	r2,-16(fp)
    4dbc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    4dc0:	00800034 	movhi	r2,0
    4dc4:	1098a804 	addi	r2,r2,25248
    4dc8:	e0fffb17 	ldw	r3,-20(fp)
    4dcc:	18c00324 	muli	r3,r3,12
    4dd0:	10c5883a 	add	r2,r2,r3
    4dd4:	10800104 	addi	r2,r2,4
    4dd8:	10c00017 	ldw	r3,0(r2)
    4ddc:	e0bffc17 	ldw	r2,-16(fp)
    4de0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    4de4:	00800034 	movhi	r2,0
    4de8:	1098a804 	addi	r2,r2,25248
    4dec:	e0fffb17 	ldw	r3,-20(fp)
    4df0:	18c00324 	muli	r3,r3,12
    4df4:	10c5883a 	add	r2,r2,r3
    4df8:	10800204 	addi	r2,r2,8
    4dfc:	10c00017 	ldw	r3,0(r2)
    4e00:	e0bffc17 	ldw	r2,-16(fp)
    4e04:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    4e08:	e13ffb17 	ldw	r4,-20(fp)
    4e0c:	00038780 	call	3878 <alt_release_fd>
  }
} 
    4e10:	0001883a 	nop
    4e14:	e037883a 	mov	sp,fp
    4e18:	dfc00117 	ldw	ra,4(sp)
    4e1c:	df000017 	ldw	fp,0(sp)
    4e20:	dec00204 	addi	sp,sp,8
    4e24:	f800283a 	ret

00004e28 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    4e28:	defffb04 	addi	sp,sp,-20
    4e2c:	dfc00415 	stw	ra,16(sp)
    4e30:	df000315 	stw	fp,12(sp)
    4e34:	df000304 	addi	fp,sp,12
    4e38:	e13ffd15 	stw	r4,-12(fp)
    4e3c:	e17ffe15 	stw	r5,-8(fp)
    4e40:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    4e44:	01c07fc4 	movi	r7,511
    4e48:	01800044 	movi	r6,1
    4e4c:	e17ffd17 	ldw	r5,-12(fp)
    4e50:	01000034 	movhi	r4,0
    4e54:	2118ab04 	addi	r4,r4,25260
    4e58:	0004d640 	call	4d64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    4e5c:	01c07fc4 	movi	r7,511
    4e60:	000d883a 	mov	r6,zero
    4e64:	e17ffe17 	ldw	r5,-8(fp)
    4e68:	01000034 	movhi	r4,0
    4e6c:	2118a804 	addi	r4,r4,25248
    4e70:	0004d640 	call	4d64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    4e74:	01c07fc4 	movi	r7,511
    4e78:	01800044 	movi	r6,1
    4e7c:	e17fff17 	ldw	r5,-4(fp)
    4e80:	01000034 	movhi	r4,0
    4e84:	2118ae04 	addi	r4,r4,25272
    4e88:	0004d640 	call	4d64 <alt_open_fd>
}  
    4e8c:	0001883a 	nop
    4e90:	e037883a 	mov	sp,fp
    4e94:	dfc00117 	ldw	ra,4(sp)
    4e98:	df000017 	ldw	fp,0(sp)
    4e9c:	dec00204 	addi	sp,sp,8
    4ea0:	f800283a 	ret

00004ea4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4ea4:	defffe04 	addi	sp,sp,-8
    4ea8:	dfc00115 	stw	ra,4(sp)
    4eac:	df000015 	stw	fp,0(sp)
    4eb0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4eb4:	00800034 	movhi	r2,0
    4eb8:	109d2904 	addi	r2,r2,29860
    4ebc:	10800017 	ldw	r2,0(r2)
    4ec0:	10000526 	beq	r2,zero,4ed8 <alt_get_errno+0x34>
    4ec4:	00800034 	movhi	r2,0
    4ec8:	109d2904 	addi	r2,r2,29860
    4ecc:	10800017 	ldw	r2,0(r2)
    4ed0:	103ee83a 	callr	r2
    4ed4:	00000206 	br	4ee0 <alt_get_errno+0x3c>
    4ed8:	00800074 	movhi	r2,1
    4edc:	10a3cc04 	addi	r2,r2,-28880
}
    4ee0:	e037883a 	mov	sp,fp
    4ee4:	dfc00117 	ldw	ra,4(sp)
    4ee8:	df000017 	ldw	fp,0(sp)
    4eec:	dec00204 	addi	sp,sp,8
    4ef0:	f800283a 	ret

00004ef4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    4ef4:	defffd04 	addi	sp,sp,-12
    4ef8:	df000215 	stw	fp,8(sp)
    4efc:	df000204 	addi	fp,sp,8
    4f00:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    4f04:	e0bfff17 	ldw	r2,-4(fp)
    4f08:	10800217 	ldw	r2,8(r2)
    4f0c:	10d00034 	orhi	r3,r2,16384
    4f10:	e0bfff17 	ldw	r2,-4(fp)
    4f14:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    4f18:	e03ffe15 	stw	zero,-8(fp)
    4f1c:	00001d06 	br	4f94 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    4f20:	00800034 	movhi	r2,0
    4f24:	1098a804 	addi	r2,r2,25248
    4f28:	e0fffe17 	ldw	r3,-8(fp)
    4f2c:	18c00324 	muli	r3,r3,12
    4f30:	10c5883a 	add	r2,r2,r3
    4f34:	10c00017 	ldw	r3,0(r2)
    4f38:	e0bfff17 	ldw	r2,-4(fp)
    4f3c:	10800017 	ldw	r2,0(r2)
    4f40:	1880111e 	bne	r3,r2,4f88 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    4f44:	00800034 	movhi	r2,0
    4f48:	1098a804 	addi	r2,r2,25248
    4f4c:	e0fffe17 	ldw	r3,-8(fp)
    4f50:	18c00324 	muli	r3,r3,12
    4f54:	10c5883a 	add	r2,r2,r3
    4f58:	10800204 	addi	r2,r2,8
    4f5c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    4f60:	1000090e 	bge	r2,zero,4f88 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    4f64:	e0bffe17 	ldw	r2,-8(fp)
    4f68:	10c00324 	muli	r3,r2,12
    4f6c:	00800034 	movhi	r2,0
    4f70:	1098a804 	addi	r2,r2,25248
    4f74:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    4f78:	e0bfff17 	ldw	r2,-4(fp)
    4f7c:	18800226 	beq	r3,r2,4f88 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    4f80:	00bffcc4 	movi	r2,-13
    4f84:	00000a06 	br	4fb0 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    4f88:	e0bffe17 	ldw	r2,-8(fp)
    4f8c:	10800044 	addi	r2,r2,1
    4f90:	e0bffe15 	stw	r2,-8(fp)
    4f94:	00800034 	movhi	r2,0
    4f98:	109d2804 	addi	r2,r2,29856
    4f9c:	10800017 	ldw	r2,0(r2)
    4fa0:	1007883a 	mov	r3,r2
    4fa4:	e0bffe17 	ldw	r2,-8(fp)
    4fa8:	18bfdd2e 	bgeu	r3,r2,4f20 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    4fac:	0005883a 	mov	r2,zero
}
    4fb0:	e037883a 	mov	sp,fp
    4fb4:	df000017 	ldw	fp,0(sp)
    4fb8:	dec00104 	addi	sp,sp,4
    4fbc:	f800283a 	ret

00004fc0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    4fc0:	defff604 	addi	sp,sp,-40
    4fc4:	dfc00915 	stw	ra,36(sp)
    4fc8:	df000815 	stw	fp,32(sp)
    4fcc:	df000804 	addi	fp,sp,32
    4fd0:	e13ffd15 	stw	r4,-12(fp)
    4fd4:	e17ffe15 	stw	r5,-8(fp)
    4fd8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    4fdc:	00bfffc4 	movi	r2,-1
    4fe0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    4fe4:	00bffb44 	movi	r2,-19
    4fe8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    4fec:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    4ff0:	01400034 	movhi	r5,0
    4ff4:	295d2604 	addi	r5,r5,29848
    4ff8:	e13ffd17 	ldw	r4,-12(fp)
    4ffc:	00052e00 	call	52e0 <alt_find_dev>
    5000:	e0bff815 	stw	r2,-32(fp)
    5004:	e0bff817 	ldw	r2,-32(fp)
    5008:	1000051e 	bne	r2,zero,5020 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    500c:	e13ffd17 	ldw	r4,-12(fp)
    5010:	00053700 	call	5370 <alt_find_file>
    5014:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    5018:	00800044 	movi	r2,1
    501c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    5020:	e0bff817 	ldw	r2,-32(fp)
    5024:	10002926 	beq	r2,zero,50cc <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    5028:	e13ff817 	ldw	r4,-32(fp)
    502c:	00054840 	call	5484 <alt_get_fd>
    5030:	e0bff915 	stw	r2,-28(fp)
    5034:	e0bff917 	ldw	r2,-28(fp)
    5038:	1000030e 	bge	r2,zero,5048 <open+0x88>
    {
      status = index;
    503c:	e0bff917 	ldw	r2,-28(fp)
    5040:	e0bffa15 	stw	r2,-24(fp)
    5044:	00002306 	br	50d4 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
    5048:	e0bff917 	ldw	r2,-28(fp)
    504c:	10c00324 	muli	r3,r2,12
    5050:	00800034 	movhi	r2,0
    5054:	1098a804 	addi	r2,r2,25248
    5058:	1885883a 	add	r2,r3,r2
    505c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    5060:	e0fffe17 	ldw	r3,-8(fp)
    5064:	00900034 	movhi	r2,16384
    5068:	10bfffc4 	addi	r2,r2,-1
    506c:	1886703a 	and	r3,r3,r2
    5070:	e0bffc17 	ldw	r2,-16(fp)
    5074:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    5078:	e0bffb17 	ldw	r2,-20(fp)
    507c:	1000051e 	bne	r2,zero,5094 <open+0xd4>
    5080:	e13ffc17 	ldw	r4,-16(fp)
    5084:	0004ef40 	call	4ef4 <alt_file_locked>
    5088:	e0bffa15 	stw	r2,-24(fp)
    508c:	e0bffa17 	ldw	r2,-24(fp)
    5090:	10001016 	blt	r2,zero,50d4 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    5094:	e0bff817 	ldw	r2,-32(fp)
    5098:	10800317 	ldw	r2,12(r2)
    509c:	10000826 	beq	r2,zero,50c0 <open+0x100>
    50a0:	e0bff817 	ldw	r2,-32(fp)
    50a4:	10800317 	ldw	r2,12(r2)
    50a8:	e1ffff17 	ldw	r7,-4(fp)
    50ac:	e1bffe17 	ldw	r6,-8(fp)
    50b0:	e17ffd17 	ldw	r5,-12(fp)
    50b4:	e13ffc17 	ldw	r4,-16(fp)
    50b8:	103ee83a 	callr	r2
    50bc:	00000106 	br	50c4 <open+0x104>
    50c0:	0005883a 	mov	r2,zero
    50c4:	e0bffa15 	stw	r2,-24(fp)
    50c8:	00000206 	br	50d4 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
    50cc:	00bffb44 	movi	r2,-19
    50d0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    50d4:	e0bffa17 	ldw	r2,-24(fp)
    50d8:	1000090e 	bge	r2,zero,5100 <open+0x140>
  {
    alt_release_fd (index);  
    50dc:	e13ff917 	ldw	r4,-28(fp)
    50e0:	00038780 	call	3878 <alt_release_fd>
    ALT_ERRNO = -status;
    50e4:	0004ea40 	call	4ea4 <alt_get_errno>
    50e8:	1007883a 	mov	r3,r2
    50ec:	e0bffa17 	ldw	r2,-24(fp)
    50f0:	0085c83a 	sub	r2,zero,r2
    50f4:	18800015 	stw	r2,0(r3)
    return -1;
    50f8:	00bfffc4 	movi	r2,-1
    50fc:	00000106 	br	5104 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    5100:	e0bff917 	ldw	r2,-28(fp)
}
    5104:	e037883a 	mov	sp,fp
    5108:	dfc00117 	ldw	ra,4(sp)
    510c:	df000017 	ldw	fp,0(sp)
    5110:	dec00204 	addi	sp,sp,8
    5114:	f800283a 	ret

00005118 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    5118:	defffa04 	addi	sp,sp,-24
    511c:	df000515 	stw	fp,20(sp)
    5120:	df000504 	addi	fp,sp,20
    5124:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5128:	0005303a 	rdctl	r2,status
    512c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5130:	e0fffc17 	ldw	r3,-16(fp)
    5134:	00bfff84 	movi	r2,-2
    5138:	1884703a 	and	r2,r3,r2
    513c:	1001703a 	wrctl	status,r2
  
  return context;
    5140:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    5144:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    5148:	e0bfff17 	ldw	r2,-4(fp)
    514c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    5150:	e0bffd17 	ldw	r2,-12(fp)
    5154:	10800017 	ldw	r2,0(r2)
    5158:	e0fffd17 	ldw	r3,-12(fp)
    515c:	18c00117 	ldw	r3,4(r3)
    5160:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    5164:	e0bffd17 	ldw	r2,-12(fp)
    5168:	10800117 	ldw	r2,4(r2)
    516c:	e0fffd17 	ldw	r3,-12(fp)
    5170:	18c00017 	ldw	r3,0(r3)
    5174:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    5178:	e0bffd17 	ldw	r2,-12(fp)
    517c:	e0fffd17 	ldw	r3,-12(fp)
    5180:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    5184:	e0bffd17 	ldw	r2,-12(fp)
    5188:	e0fffd17 	ldw	r3,-12(fp)
    518c:	10c00015 	stw	r3,0(r2)
    5190:	e0bffb17 	ldw	r2,-20(fp)
    5194:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5198:	e0bffe17 	ldw	r2,-8(fp)
    519c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    51a0:	0001883a 	nop
    51a4:	e037883a 	mov	sp,fp
    51a8:	df000017 	ldw	fp,0(sp)
    51ac:	dec00104 	addi	sp,sp,4
    51b0:	f800283a 	ret

000051b4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    51b4:	defffb04 	addi	sp,sp,-20
    51b8:	dfc00415 	stw	ra,16(sp)
    51bc:	df000315 	stw	fp,12(sp)
    51c0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    51c4:	d0a00c17 	ldw	r2,-32720(gp)
    51c8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    51cc:	d0a6b217 	ldw	r2,-25912(gp)
    51d0:	10800044 	addi	r2,r2,1
    51d4:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    51d8:	00002e06 	br	5294 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    51dc:	e0bffd17 	ldw	r2,-12(fp)
    51e0:	10800017 	ldw	r2,0(r2)
    51e4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    51e8:	e0bffd17 	ldw	r2,-12(fp)
    51ec:	10800403 	ldbu	r2,16(r2)
    51f0:	10803fcc 	andi	r2,r2,255
    51f4:	10000426 	beq	r2,zero,5208 <alt_tick+0x54>
    51f8:	d0a6b217 	ldw	r2,-25912(gp)
    51fc:	1000021e 	bne	r2,zero,5208 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    5200:	e0bffd17 	ldw	r2,-12(fp)
    5204:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    5208:	e0bffd17 	ldw	r2,-12(fp)
    520c:	10800217 	ldw	r2,8(r2)
    5210:	d0e6b217 	ldw	r3,-25912(gp)
    5214:	18801d36 	bltu	r3,r2,528c <alt_tick+0xd8>
    5218:	e0bffd17 	ldw	r2,-12(fp)
    521c:	10800403 	ldbu	r2,16(r2)
    5220:	10803fcc 	andi	r2,r2,255
    5224:	1000191e 	bne	r2,zero,528c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    5228:	e0bffd17 	ldw	r2,-12(fp)
    522c:	10800317 	ldw	r2,12(r2)
    5230:	e0fffd17 	ldw	r3,-12(fp)
    5234:	18c00517 	ldw	r3,20(r3)
    5238:	1809883a 	mov	r4,r3
    523c:	103ee83a 	callr	r2
    5240:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    5244:	e0bfff17 	ldw	r2,-4(fp)
    5248:	1000031e 	bne	r2,zero,5258 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    524c:	e13ffd17 	ldw	r4,-12(fp)
    5250:	00051180 	call	5118 <alt_alarm_stop>
    5254:	00000d06 	br	528c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    5258:	e0bffd17 	ldw	r2,-12(fp)
    525c:	10c00217 	ldw	r3,8(r2)
    5260:	e0bfff17 	ldw	r2,-4(fp)
    5264:	1887883a 	add	r3,r3,r2
    5268:	e0bffd17 	ldw	r2,-12(fp)
    526c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    5270:	e0bffd17 	ldw	r2,-12(fp)
    5274:	10c00217 	ldw	r3,8(r2)
    5278:	d0a6b217 	ldw	r2,-25912(gp)
    527c:	1880032e 	bgeu	r3,r2,528c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    5280:	e0bffd17 	ldw	r2,-12(fp)
    5284:	00c00044 	movi	r3,1
    5288:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    528c:	e0bffe17 	ldw	r2,-8(fp)
    5290:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    5294:	e0fffd17 	ldw	r3,-12(fp)
    5298:	d0a00c04 	addi	r2,gp,-32720
    529c:	18bfcf1e 	bne	r3,r2,51dc <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    52a0:	0001883a 	nop
}
    52a4:	0001883a 	nop
    52a8:	e037883a 	mov	sp,fp
    52ac:	dfc00117 	ldw	ra,4(sp)
    52b0:	df000017 	ldw	fp,0(sp)
    52b4:	dec00204 	addi	sp,sp,8
    52b8:	f800283a 	ret

000052bc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    52bc:	deffff04 	addi	sp,sp,-4
    52c0:	df000015 	stw	fp,0(sp)
    52c4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    52c8:	000170fa 	wrctl	ienable,zero
}
    52cc:	0001883a 	nop
    52d0:	e037883a 	mov	sp,fp
    52d4:	df000017 	ldw	fp,0(sp)
    52d8:	dec00104 	addi	sp,sp,4
    52dc:	f800283a 	ret

000052e0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    52e0:	defffa04 	addi	sp,sp,-24
    52e4:	dfc00515 	stw	ra,20(sp)
    52e8:	df000415 	stw	fp,16(sp)
    52ec:	df000404 	addi	fp,sp,16
    52f0:	e13ffe15 	stw	r4,-8(fp)
    52f4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    52f8:	e0bfff17 	ldw	r2,-4(fp)
    52fc:	10800017 	ldw	r2,0(r2)
    5300:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    5304:	e13ffe17 	ldw	r4,-8(fp)
    5308:	00004240 	call	424 <strlen>
    530c:	10800044 	addi	r2,r2,1
    5310:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    5314:	00000d06 	br	534c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    5318:	e0bffc17 	ldw	r2,-16(fp)
    531c:	10800217 	ldw	r2,8(r2)
    5320:	e0fffd17 	ldw	r3,-12(fp)
    5324:	180d883a 	mov	r6,r3
    5328:	e17ffe17 	ldw	r5,-8(fp)
    532c:	1009883a 	mov	r4,r2
    5330:	00056b00 	call	56b0 <memcmp>
    5334:	1000021e 	bne	r2,zero,5340 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    5338:	e0bffc17 	ldw	r2,-16(fp)
    533c:	00000706 	br	535c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    5340:	e0bffc17 	ldw	r2,-16(fp)
    5344:	10800017 	ldw	r2,0(r2)
    5348:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    534c:	e0fffc17 	ldw	r3,-16(fp)
    5350:	e0bfff17 	ldw	r2,-4(fp)
    5354:	18bff01e 	bne	r3,r2,5318 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    5358:	0005883a 	mov	r2,zero
}
    535c:	e037883a 	mov	sp,fp
    5360:	dfc00117 	ldw	ra,4(sp)
    5364:	df000017 	ldw	fp,0(sp)
    5368:	dec00204 	addi	sp,sp,8
    536c:	f800283a 	ret

00005370 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    5370:	defffb04 	addi	sp,sp,-20
    5374:	dfc00415 	stw	ra,16(sp)
    5378:	df000315 	stw	fp,12(sp)
    537c:	df000304 	addi	fp,sp,12
    5380:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    5384:	00800034 	movhi	r2,0
    5388:	109d2404 	addi	r2,r2,29840
    538c:	10800017 	ldw	r2,0(r2)
    5390:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    5394:	00003106 	br	545c <alt_find_file+0xec>
  {
    len = strlen(next->name);
    5398:	e0bffd17 	ldw	r2,-12(fp)
    539c:	10800217 	ldw	r2,8(r2)
    53a0:	1009883a 	mov	r4,r2
    53a4:	00004240 	call	424 <strlen>
    53a8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    53ac:	e0bffd17 	ldw	r2,-12(fp)
    53b0:	10c00217 	ldw	r3,8(r2)
    53b4:	e0bffe17 	ldw	r2,-8(fp)
    53b8:	10bfffc4 	addi	r2,r2,-1
    53bc:	1885883a 	add	r2,r3,r2
    53c0:	10800003 	ldbu	r2,0(r2)
    53c4:	10803fcc 	andi	r2,r2,255
    53c8:	1080201c 	xori	r2,r2,128
    53cc:	10bfe004 	addi	r2,r2,-128
    53d0:	10800bd8 	cmpnei	r2,r2,47
    53d4:	1000031e 	bne	r2,zero,53e4 <alt_find_file+0x74>
    {
      len -= 1;
    53d8:	e0bffe17 	ldw	r2,-8(fp)
    53dc:	10bfffc4 	addi	r2,r2,-1
    53e0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    53e4:	e0bffe17 	ldw	r2,-8(fp)
    53e8:	e0ffff17 	ldw	r3,-4(fp)
    53ec:	1885883a 	add	r2,r3,r2
    53f0:	10800003 	ldbu	r2,0(r2)
    53f4:	10803fcc 	andi	r2,r2,255
    53f8:	1080201c 	xori	r2,r2,128
    53fc:	10bfe004 	addi	r2,r2,-128
    5400:	10800be0 	cmpeqi	r2,r2,47
    5404:	1000081e 	bne	r2,zero,5428 <alt_find_file+0xb8>
    5408:	e0bffe17 	ldw	r2,-8(fp)
    540c:	e0ffff17 	ldw	r3,-4(fp)
    5410:	1885883a 	add	r2,r3,r2
    5414:	10800003 	ldbu	r2,0(r2)
    5418:	10803fcc 	andi	r2,r2,255
    541c:	1080201c 	xori	r2,r2,128
    5420:	10bfe004 	addi	r2,r2,-128
    5424:	10000a1e 	bne	r2,zero,5450 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    5428:	e0bffd17 	ldw	r2,-12(fp)
    542c:	10800217 	ldw	r2,8(r2)
    5430:	e0fffe17 	ldw	r3,-8(fp)
    5434:	180d883a 	mov	r6,r3
    5438:	e17fff17 	ldw	r5,-4(fp)
    543c:	1009883a 	mov	r4,r2
    5440:	00056b00 	call	56b0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    5444:	1000021e 	bne	r2,zero,5450 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    5448:	e0bffd17 	ldw	r2,-12(fp)
    544c:	00000806 	br	5470 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    5450:	e0bffd17 	ldw	r2,-12(fp)
    5454:	10800017 	ldw	r2,0(r2)
    5458:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    545c:	e0fffd17 	ldw	r3,-12(fp)
    5460:	00800034 	movhi	r2,0
    5464:	109d2404 	addi	r2,r2,29840
    5468:	18bfcb1e 	bne	r3,r2,5398 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    546c:	0005883a 	mov	r2,zero
}
    5470:	e037883a 	mov	sp,fp
    5474:	dfc00117 	ldw	ra,4(sp)
    5478:	df000017 	ldw	fp,0(sp)
    547c:	dec00204 	addi	sp,sp,8
    5480:	f800283a 	ret

00005484 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    5484:	defffc04 	addi	sp,sp,-16
    5488:	df000315 	stw	fp,12(sp)
    548c:	df000304 	addi	fp,sp,12
    5490:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    5494:	00bffa04 	movi	r2,-24
    5498:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    549c:	e03ffd15 	stw	zero,-12(fp)
    54a0:	00001d06 	br	5518 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    54a4:	00800034 	movhi	r2,0
    54a8:	1098a804 	addi	r2,r2,25248
    54ac:	e0fffd17 	ldw	r3,-12(fp)
    54b0:	18c00324 	muli	r3,r3,12
    54b4:	10c5883a 	add	r2,r2,r3
    54b8:	10800017 	ldw	r2,0(r2)
    54bc:	1000131e 	bne	r2,zero,550c <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    54c0:	00800034 	movhi	r2,0
    54c4:	1098a804 	addi	r2,r2,25248
    54c8:	e0fffd17 	ldw	r3,-12(fp)
    54cc:	18c00324 	muli	r3,r3,12
    54d0:	10c5883a 	add	r2,r2,r3
    54d4:	e0ffff17 	ldw	r3,-4(fp)
    54d8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    54dc:	00800034 	movhi	r2,0
    54e0:	109d2804 	addi	r2,r2,29856
    54e4:	10c00017 	ldw	r3,0(r2)
    54e8:	e0bffd17 	ldw	r2,-12(fp)
    54ec:	1880040e 	bge	r3,r2,5500 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    54f0:	00800034 	movhi	r2,0
    54f4:	109d2804 	addi	r2,r2,29856
    54f8:	e0fffd17 	ldw	r3,-12(fp)
    54fc:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    5500:	e0bffd17 	ldw	r2,-12(fp)
    5504:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    5508:	00000606 	br	5524 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    550c:	e0bffd17 	ldw	r2,-12(fp)
    5510:	10800044 	addi	r2,r2,1
    5514:	e0bffd15 	stw	r2,-12(fp)
    5518:	e0bffd17 	ldw	r2,-12(fp)
    551c:	10800810 	cmplti	r2,r2,32
    5520:	103fe01e 	bne	r2,zero,54a4 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    5524:	e0bffe17 	ldw	r2,-8(fp)
}
    5528:	e037883a 	mov	sp,fp
    552c:	df000017 	ldw	fp,0(sp)
    5530:	dec00104 	addi	sp,sp,4
    5534:	f800283a 	ret

00005538 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    5538:	defffb04 	addi	sp,sp,-20
    553c:	df000415 	stw	fp,16(sp)
    5540:	df000404 	addi	fp,sp,16
    5544:	e13ffe15 	stw	r4,-8(fp)
    5548:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    554c:	e0bfff17 	ldw	r2,-4(fp)
    5550:	10840070 	cmpltui	r2,r2,4097
    5554:	1000021e 	bne	r2,zero,5560 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    5558:	00840004 	movi	r2,4096
    555c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    5560:	e0fffe17 	ldw	r3,-8(fp)
    5564:	e0bfff17 	ldw	r2,-4(fp)
    5568:	1885883a 	add	r2,r3,r2
    556c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    5570:	e0bffe17 	ldw	r2,-8(fp)
    5574:	e0bffc15 	stw	r2,-16(fp)
    5578:	00000506 	br	5590 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    557c:	e0bffc17 	ldw	r2,-16(fp)
    5580:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    5584:	e0bffc17 	ldw	r2,-16(fp)
    5588:	10800804 	addi	r2,r2,32
    558c:	e0bffc15 	stw	r2,-16(fp)
    5590:	e0fffc17 	ldw	r3,-16(fp)
    5594:	e0bffd17 	ldw	r2,-12(fp)
    5598:	18bff836 	bltu	r3,r2,557c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    559c:	e0bffe17 	ldw	r2,-8(fp)
    55a0:	108007cc 	andi	r2,r2,31
    55a4:	10000226 	beq	r2,zero,55b0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    55a8:	e0bffc17 	ldw	r2,-16(fp)
    55ac:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    55b0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    55b4:	0001883a 	nop
    55b8:	e037883a 	mov	sp,fp
    55bc:	df000017 	ldw	fp,0(sp)
    55c0:	dec00104 	addi	sp,sp,4
    55c4:	f800283a 	ret

000055c8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    55c8:	defffe04 	addi	sp,sp,-8
    55cc:	df000115 	stw	fp,4(sp)
    55d0:	df000104 	addi	fp,sp,4
    55d4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    55d8:	e0bfff17 	ldw	r2,-4(fp)
    55dc:	10bffe84 	addi	r2,r2,-6
    55e0:	10c00428 	cmpgeui	r3,r2,16
    55e4:	18001a1e 	bne	r3,zero,5650 <alt_exception_cause_generated_bad_addr+0x88>
    55e8:	100690ba 	slli	r3,r2,2
    55ec:	00800034 	movhi	r2,0
    55f0:	10958004 	addi	r2,r2,22016
    55f4:	1885883a 	add	r2,r3,r2
    55f8:	10800017 	ldw	r2,0(r2)
    55fc:	1000683a 	jmp	r2
    5600:	00005640 	call	564 <__sinit.part.1+0x94>
    5604:	00005640 	call	564 <__sinit.part.1+0x94>
    5608:	00005650 	cmplti	zero,zero,345
    560c:	00005650 	cmplti	zero,zero,345
    5610:	00005650 	cmplti	zero,zero,345
    5614:	00005640 	call	564 <__sinit.part.1+0x94>
    5618:	00005648 	cmpgei	zero,zero,345
    561c:	00005650 	cmplti	zero,zero,345
    5620:	00005640 	call	564 <__sinit.part.1+0x94>
    5624:	00005640 	call	564 <__sinit.part.1+0x94>
    5628:	00005650 	cmplti	zero,zero,345
    562c:	00005640 	call	564 <__sinit.part.1+0x94>
    5630:	00005648 	cmpgei	zero,zero,345
    5634:	00005650 	cmplti	zero,zero,345
    5638:	00005650 	cmplti	zero,zero,345
    563c:	00005640 	call	564 <__sinit.part.1+0x94>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    5640:	00800044 	movi	r2,1
    5644:	00000306 	br	5654 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    5648:	0005883a 	mov	r2,zero
    564c:	00000106 	br	5654 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    5650:	0005883a 	mov	r2,zero
  }
}
    5654:	e037883a 	mov	sp,fp
    5658:	df000017 	ldw	fp,0(sp)
    565c:	dec00104 	addi	sp,sp,4
    5660:	f800283a 	ret

00005664 <atexit>:
    5664:	200b883a 	mov	r5,r4
    5668:	000f883a 	mov	r7,zero
    566c:	000d883a 	mov	r6,zero
    5670:	0009883a 	mov	r4,zero
    5674:	000572c1 	jmpi	572c <__register_exitproc>

00005678 <exit>:
    5678:	defffe04 	addi	sp,sp,-8
    567c:	000b883a 	mov	r5,zero
    5680:	dc000015 	stw	r16,0(sp)
    5684:	dfc00115 	stw	ra,4(sp)
    5688:	2021883a 	mov	r16,r4
    568c:	00058440 	call	5844 <__call_exitprocs>
    5690:	00800034 	movhi	r2,0
    5694:	109d2004 	addi	r2,r2,29824
    5698:	11000017 	ldw	r4,0(r2)
    569c:	20800f17 	ldw	r2,60(r4)
    56a0:	10000126 	beq	r2,zero,56a8 <exit+0x30>
    56a4:	103ee83a 	callr	r2
    56a8:	8009883a 	mov	r4,r16
    56ac:	00059c40 	call	59c4 <_exit>

000056b0 <memcmp>:
    56b0:	01c000c4 	movi	r7,3
    56b4:	3980192e 	bgeu	r7,r6,571c <memcmp+0x6c>
    56b8:	2144b03a 	or	r2,r4,r5
    56bc:	11c4703a 	and	r2,r2,r7
    56c0:	10000f26 	beq	r2,zero,5700 <memcmp+0x50>
    56c4:	20800003 	ldbu	r2,0(r4)
    56c8:	28c00003 	ldbu	r3,0(r5)
    56cc:	10c0151e 	bne	r2,r3,5724 <memcmp+0x74>
    56d0:	31bfff84 	addi	r6,r6,-2
    56d4:	01ffffc4 	movi	r7,-1
    56d8:	00000406 	br	56ec <memcmp+0x3c>
    56dc:	20800003 	ldbu	r2,0(r4)
    56e0:	28c00003 	ldbu	r3,0(r5)
    56e4:	31bfffc4 	addi	r6,r6,-1
    56e8:	10c00e1e 	bne	r2,r3,5724 <memcmp+0x74>
    56ec:	21000044 	addi	r4,r4,1
    56f0:	29400044 	addi	r5,r5,1
    56f4:	31fff91e 	bne	r6,r7,56dc <memcmp+0x2c>
    56f8:	0005883a 	mov	r2,zero
    56fc:	f800283a 	ret
    5700:	20c00017 	ldw	r3,0(r4)
    5704:	28800017 	ldw	r2,0(r5)
    5708:	18bfee1e 	bne	r3,r2,56c4 <memcmp+0x14>
    570c:	31bfff04 	addi	r6,r6,-4
    5710:	21000104 	addi	r4,r4,4
    5714:	29400104 	addi	r5,r5,4
    5718:	39bff936 	bltu	r7,r6,5700 <memcmp+0x50>
    571c:	303fe91e 	bne	r6,zero,56c4 <memcmp+0x14>
    5720:	003ff506 	br	56f8 <memcmp+0x48>
    5724:	10c5c83a 	sub	r2,r2,r3
    5728:	f800283a 	ret

0000572c <__register_exitproc>:
    572c:	defffa04 	addi	sp,sp,-24
    5730:	dc000315 	stw	r16,12(sp)
    5734:	04000034 	movhi	r16,0
    5738:	841d2004 	addi	r16,r16,29824
    573c:	80c00017 	ldw	r3,0(r16)
    5740:	dc400415 	stw	r17,16(sp)
    5744:	dfc00515 	stw	ra,20(sp)
    5748:	18805217 	ldw	r2,328(r3)
    574c:	2023883a 	mov	r17,r4
    5750:	10003726 	beq	r2,zero,5830 <__register_exitproc+0x104>
    5754:	10c00117 	ldw	r3,4(r2)
    5758:	010007c4 	movi	r4,31
    575c:	20c00e16 	blt	r4,r3,5798 <__register_exitproc+0x6c>
    5760:	1a000044 	addi	r8,r3,1
    5764:	8800221e 	bne	r17,zero,57f0 <__register_exitproc+0xc4>
    5768:	18c00084 	addi	r3,r3,2
    576c:	18c7883a 	add	r3,r3,r3
    5770:	18c7883a 	add	r3,r3,r3
    5774:	12000115 	stw	r8,4(r2)
    5778:	10c7883a 	add	r3,r2,r3
    577c:	19400015 	stw	r5,0(r3)
    5780:	0005883a 	mov	r2,zero
    5784:	dfc00517 	ldw	ra,20(sp)
    5788:	dc400417 	ldw	r17,16(sp)
    578c:	dc000317 	ldw	r16,12(sp)
    5790:	dec00604 	addi	sp,sp,24
    5794:	f800283a 	ret
    5798:	00800034 	movhi	r2,0
    579c:	10800004 	addi	r2,r2,0
    57a0:	10002626 	beq	r2,zero,583c <__register_exitproc+0x110>
    57a4:	01006404 	movi	r4,400
    57a8:	d9400015 	stw	r5,0(sp)
    57ac:	d9800115 	stw	r6,4(sp)
    57b0:	d9c00215 	stw	r7,8(sp)
    57b4:	00000000 	call	0 <__alt_mem_SDRAM>
    57b8:	d9400017 	ldw	r5,0(sp)
    57bc:	d9800117 	ldw	r6,4(sp)
    57c0:	d9c00217 	ldw	r7,8(sp)
    57c4:	10001d26 	beq	r2,zero,583c <__register_exitproc+0x110>
    57c8:	81000017 	ldw	r4,0(r16)
    57cc:	10000115 	stw	zero,4(r2)
    57d0:	02000044 	movi	r8,1
    57d4:	22405217 	ldw	r9,328(r4)
    57d8:	0007883a 	mov	r3,zero
    57dc:	12400015 	stw	r9,0(r2)
    57e0:	20805215 	stw	r2,328(r4)
    57e4:	10006215 	stw	zero,392(r2)
    57e8:	10006315 	stw	zero,396(r2)
    57ec:	883fde26 	beq	r17,zero,5768 <__register_exitproc+0x3c>
    57f0:	18c9883a 	add	r4,r3,r3
    57f4:	2109883a 	add	r4,r4,r4
    57f8:	1109883a 	add	r4,r2,r4
    57fc:	21802215 	stw	r6,136(r4)
    5800:	01800044 	movi	r6,1
    5804:	12406217 	ldw	r9,392(r2)
    5808:	30cc983a 	sll	r6,r6,r3
    580c:	4992b03a 	or	r9,r9,r6
    5810:	12406215 	stw	r9,392(r2)
    5814:	21c04215 	stw	r7,264(r4)
    5818:	01000084 	movi	r4,2
    581c:	893fd21e 	bne	r17,r4,5768 <__register_exitproc+0x3c>
    5820:	11006317 	ldw	r4,396(r2)
    5824:	218cb03a 	or	r6,r4,r6
    5828:	11806315 	stw	r6,396(r2)
    582c:	003fce06 	br	5768 <__register_exitproc+0x3c>
    5830:	18805304 	addi	r2,r3,332
    5834:	18805215 	stw	r2,328(r3)
    5838:	003fc606 	br	5754 <__register_exitproc+0x28>
    583c:	00bfffc4 	movi	r2,-1
    5840:	003fd006 	br	5784 <__register_exitproc+0x58>

00005844 <__call_exitprocs>:
    5844:	defff504 	addi	sp,sp,-44
    5848:	df000915 	stw	fp,36(sp)
    584c:	dd400615 	stw	r21,24(sp)
    5850:	dc800315 	stw	r18,12(sp)
    5854:	dfc00a15 	stw	ra,40(sp)
    5858:	ddc00815 	stw	r23,32(sp)
    585c:	dd800715 	stw	r22,28(sp)
    5860:	dd000515 	stw	r20,20(sp)
    5864:	dcc00415 	stw	r19,16(sp)
    5868:	dc400215 	stw	r17,8(sp)
    586c:	dc000115 	stw	r16,4(sp)
    5870:	d9000015 	stw	r4,0(sp)
    5874:	2839883a 	mov	fp,r5
    5878:	04800044 	movi	r18,1
    587c:	057fffc4 	movi	r21,-1
    5880:	00800034 	movhi	r2,0
    5884:	109d2004 	addi	r2,r2,29824
    5888:	12000017 	ldw	r8,0(r2)
    588c:	45005217 	ldw	r20,328(r8)
    5890:	44c05204 	addi	r19,r8,328
    5894:	a0001c26 	beq	r20,zero,5908 <__call_exitprocs+0xc4>
    5898:	a0800117 	ldw	r2,4(r20)
    589c:	15ffffc4 	addi	r23,r2,-1
    58a0:	b8000d16 	blt	r23,zero,58d8 <__call_exitprocs+0x94>
    58a4:	14000044 	addi	r16,r2,1
    58a8:	8421883a 	add	r16,r16,r16
    58ac:	8421883a 	add	r16,r16,r16
    58b0:	84402004 	addi	r17,r16,128
    58b4:	a463883a 	add	r17,r20,r17
    58b8:	a421883a 	add	r16,r20,r16
    58bc:	e0001e26 	beq	fp,zero,5938 <__call_exitprocs+0xf4>
    58c0:	80804017 	ldw	r2,256(r16)
    58c4:	e0801c26 	beq	fp,r2,5938 <__call_exitprocs+0xf4>
    58c8:	bdffffc4 	addi	r23,r23,-1
    58cc:	843fff04 	addi	r16,r16,-4
    58d0:	8c7fff04 	addi	r17,r17,-4
    58d4:	bd7ff91e 	bne	r23,r21,58bc <__call_exitprocs+0x78>
    58d8:	00800034 	movhi	r2,0
    58dc:	10800004 	addi	r2,r2,0
    58e0:	10000926 	beq	r2,zero,5908 <__call_exitprocs+0xc4>
    58e4:	a0800117 	ldw	r2,4(r20)
    58e8:	1000301e 	bne	r2,zero,59ac <__call_exitprocs+0x168>
    58ec:	a0800017 	ldw	r2,0(r20)
    58f0:	10003226 	beq	r2,zero,59bc <__call_exitprocs+0x178>
    58f4:	a009883a 	mov	r4,r20
    58f8:	98800015 	stw	r2,0(r19)
    58fc:	00000000 	call	0 <__alt_mem_SDRAM>
    5900:	9d000017 	ldw	r20,0(r19)
    5904:	a03fe41e 	bne	r20,zero,5898 <__call_exitprocs+0x54>
    5908:	dfc00a17 	ldw	ra,40(sp)
    590c:	df000917 	ldw	fp,36(sp)
    5910:	ddc00817 	ldw	r23,32(sp)
    5914:	dd800717 	ldw	r22,28(sp)
    5918:	dd400617 	ldw	r21,24(sp)
    591c:	dd000517 	ldw	r20,20(sp)
    5920:	dcc00417 	ldw	r19,16(sp)
    5924:	dc800317 	ldw	r18,12(sp)
    5928:	dc400217 	ldw	r17,8(sp)
    592c:	dc000117 	ldw	r16,4(sp)
    5930:	dec00b04 	addi	sp,sp,44
    5934:	f800283a 	ret
    5938:	a0800117 	ldw	r2,4(r20)
    593c:	80c00017 	ldw	r3,0(r16)
    5940:	10bfffc4 	addi	r2,r2,-1
    5944:	15c01426 	beq	r2,r23,5998 <__call_exitprocs+0x154>
    5948:	80000015 	stw	zero,0(r16)
    594c:	183fde26 	beq	r3,zero,58c8 <__call_exitprocs+0x84>
    5950:	95c8983a 	sll	r4,r18,r23
    5954:	a0806217 	ldw	r2,392(r20)
    5958:	a5800117 	ldw	r22,4(r20)
    595c:	2084703a 	and	r2,r4,r2
    5960:	10000b26 	beq	r2,zero,5990 <__call_exitprocs+0x14c>
    5964:	a0806317 	ldw	r2,396(r20)
    5968:	2088703a 	and	r4,r4,r2
    596c:	20000c1e 	bne	r4,zero,59a0 <__call_exitprocs+0x15c>
    5970:	89400017 	ldw	r5,0(r17)
    5974:	d9000017 	ldw	r4,0(sp)
    5978:	183ee83a 	callr	r3
    597c:	a0800117 	ldw	r2,4(r20)
    5980:	15bfbf1e 	bne	r2,r22,5880 <__call_exitprocs+0x3c>
    5984:	98800017 	ldw	r2,0(r19)
    5988:	153fcf26 	beq	r2,r20,58c8 <__call_exitprocs+0x84>
    598c:	003fbc06 	br	5880 <__call_exitprocs+0x3c>
    5990:	183ee83a 	callr	r3
    5994:	003ff906 	br	597c <__call_exitprocs+0x138>
    5998:	a5c00115 	stw	r23,4(r20)
    599c:	003feb06 	br	594c <__call_exitprocs+0x108>
    59a0:	89000017 	ldw	r4,0(r17)
    59a4:	183ee83a 	callr	r3
    59a8:	003ff406 	br	597c <__call_exitprocs+0x138>
    59ac:	a0800017 	ldw	r2,0(r20)
    59b0:	a027883a 	mov	r19,r20
    59b4:	1029883a 	mov	r20,r2
    59b8:	003fb606 	br	5894 <__call_exitprocs+0x50>
    59bc:	0005883a 	mov	r2,zero
    59c0:	003ffb06 	br	59b0 <__call_exitprocs+0x16c>

000059c4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    59c4:	defffd04 	addi	sp,sp,-12
    59c8:	df000215 	stw	fp,8(sp)
    59cc:	df000204 	addi	fp,sp,8
    59d0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    59d4:	0001883a 	nop
    59d8:	e0bfff17 	ldw	r2,-4(fp)
    59dc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    59e0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    59e4:	10000226 	beq	r2,zero,59f0 <_exit+0x2c>
    ALT_SIM_FAIL();
    59e8:	002af070 	cmpltui	zero,zero,43969
    59ec:	00000106 	br	59f4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    59f0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    59f4:	003fff06 	br	59f4 <_exit+0x30>
