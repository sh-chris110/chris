
sw_design.elf:     file format elf32-littlenios2
sw_design.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00010bb8 memsz 0x00010bb8 flags r-x
    LOAD off    0x00011bd8 vaddr 0x00010bd8 paddr 0x000127dc align 2**12
         filesz 0x00001c04 memsz 0x00001c04 flags rw-
    LOAD off    0x000143e0 vaddr 0x000143e0 paddr 0x000143e0 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010598  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003f8  000107e0  000107e0  000117e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c04  00010bd8  000127dc  00011bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  000143e0  000143e0  000143e0  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00014540  00014540  000137dc  2**0
                  CONTENTS
  7 .SRAM         00000000  04020000  04020000  000137dc  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000137dc  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f58  00000000  00000000  00013800  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00025019  00000000  00000000  00014758  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000968a  00000000  00000000  00039771  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000bce6  00000000  00000000  00042dfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000024a0  00000000  00000000  0004eae4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003d00  00000000  00000000  00050f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017b46  00000000  00000000  00054c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0006c7cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018c0  00000000  00000000  0006c830  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007174d  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000b  00000000  00000000  00071750  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007175b  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007175c  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007175d  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00071761  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00071765  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000004  00000000  00000000  00071769  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000004  00000000  00000000  0007176d  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000004  00000000  00000000  00071771  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000a  00000000  00000000  00071775  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001b  00000000  00000000  0007177f  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0006e737  00000000  00000000  0007179a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
000107e0 l    d  .rodata	00000000 .rodata
00010bd8 l    d  .rwdata	00000000 .rwdata
000143e0 l    d  .bss	00000000 .bss
00014540 l    d  .SDRAM	00000000 .SDRAM
04020000 l    d  .SRAM	00000000 .SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../sw_design_bsp//obj/HAL/src/crt0.o
00000290 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001090a l     O .rodata	00000010 zeroes.4404
00002a4c l     F .text	000000bc __sbprintf
0001091a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00002c5c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000478c l     F .text	00000008 __fp_unlock
000047a0 l     F .text	0000019c __sinit.part.1
0000493c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00010bd8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0001101c l     O .rwdata	00000020 lc_ctype_charset
00010ffc l     O .rwdata	00000020 lc_message_charset
0001103c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0001094c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00007d38 l     F .text	000000fc __sprint_r.part.0
00010a80 l     O .rodata	00000010 blanks.4348
00010a70 l     O .rodata	00000010 zeroes.4349
000092c4 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000cdcc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000ceec l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dma_rxchan_open.c
0000cf18 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dma_txchan_open.c
0000cfbc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000d0f0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000d1f0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000d2e4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000d3d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000d5b8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000127cc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000d848 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000d990 l     F .text	00000038 alt_dev_reg
00011624 l     O .rwdata	000000a4 General_DMA_priv
000116c8 l     O .rwdata	0000001c General_DMA_tx
000116e4 l     O .rwdata	0000001c General_DMA_rx
00011700 l     O .rwdata	00001060 JTAG
00012760 l     O .rwdata	0000002c UART_COM
00000000 l    df *ABS*	00000000 altera_avalon_dma.c
0000da98 l     F .text	00000038 alt_dma_txchan_reg
0000dad0 l     F .text	00000038 alt_dma_rxchan_reg
0000dc00 l     F .text	0000009c alt_avalon_dma_launch_txonly
0000dc9c l     F .text	0000009c alt_avalon_dma_launch_rxonly
0000dd38 l     F .text	00000344 alt_avalon_dma_ioctl
0000e3f0 l     F .text	000001c4 alt_avalon_dma_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000e880 l     F .text	00000210 altera_avalon_jtag_uart_irq
0000ea90 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000f0d0 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000f844 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000fa2c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000fd1c l     F .text	00000050 alt_get_errno
0000fd6c l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00014414 g     O .bss	00000004 alt_instruction_exception_handler
0000737c g     F .text	00000074 _mprec_log10
00007468 g     F .text	0000008c __any_on
00009860 g     F .text	00000054 _isatty_r
00010958 g     O .rodata	00000028 __mprec_tinytens
0000d4f4 g     F .text	0000007c alt_main
000006cc g     F .text	000000c0 _puts_r
00014440 g     O .bss	00000100 alt_irq
000098b4 g     F .text	00000060 _lseek_r
000127dc g       *ABS*	00000000 __flash_rwdata_start
0000b8f8 g     F .text	00000088 .hidden __eqdf2
00014540 g       *ABS*	00000000 __alt_heap_start
00000690 g     F .text	0000003c printf
00009acc g     F .text	0000009c _wcrtomb_r
00007bf8 g     F .text	0000005c __sseek
00004adc g     F .text	00000010 __sinit
0000e5b4 g     F .text	000000ac alt_avalon_dma_init
00009974 g     F .text	00000140 __swbuf_r
000055a4 g     F .text	0000007c _setlocale_r
00004944 g     F .text	00000068 __sfmoreglue
0000d594 g     F .text	00000024 __malloc_unlock
0000f400 g     F .text	00000090 alt_up_rs232_read_fd
00006274 g     F .text	0000015c memmove
00004ac4 g     F .text	00000018 _cleanup
000064f8 g     F .text	000000a8 _Balloc
0000b980 g     F .text	000000dc .hidden __gtdf2
00010134 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00009804 g     F .text	0000005c _fstat_r
000143f8 g     O .bss	00000004 errno
00007b74 g     F .text	00000008 __seofread
00014400 g     O .bss	00000004 alt_argv
0001a78c g       *ABS*	00000000 _gp
0000d818 g     F .text	00000030 usleep
0000d00c g     F .text	00000054 alt_dma_txchan_open
000114a4 g     O .rwdata	00000180 alt_fd_list
0000d060 g     F .text	00000090 alt_find_dev
0000612c g     F .text	00000148 memcpy
00004794 g     F .text	0000000c _cleanup_r
0000cbe4 g     F .text	000000dc .hidden __floatsidf
0000faf0 g     F .text	0000007c alt_io_redirect
0000ba5c g     F .text	000000f4 .hidden __ltdf2
000107e0 g       *ABS*	00000000 __DTOR_END__
0000f38c g     F .text	00000074 alt_up_rs232_read_data
0000078c g     F .text	00000014 puts
000103b0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00007a58 g     F .text	00000074 __fpclassifyd
000072d8 g     F .text	000000a4 __ratio
000092a8 g     F .text	0000001c __vfiprintf_internal
0000ec90 g     F .text	0000021c altera_avalon_jtag_uart_read
00000660 g     F .text	00000030 _printf_r
000005a4 g     F .text	00000064 .hidden __udivsi3
0000d240 g     F .text	000000a4 isatty
000109a8 g     O .rodata	000000c8 __mprec_tens
00005620 g     F .text	0000000c __locale_charset
00010320 g     F .text	00000090 alt_icache_flush
000143f4 g     O .bss	00000004 __malloc_top_pad
00012794 g     O .rwdata	00000004 __mb_cur_max
00005650 g     F .text	0000000c _localeconv_r
00006904 g     F .text	0000003c __i2b
00004f60 g     F .text	000004bc __sfvwrite_r
00007acc g     F .text	00000054 _sbrk_r
00009914 g     F .text	00000060 _read_r
000127b4 g     O .rwdata	00000004 alt_max_fd
0000f308 g     F .text	00000044 alt_up_rs232_check_parity
000094f8 g     F .text	000000f0 _fclose_r
0000475c g     F .text	00000030 fflush
000143f0 g     O .bss	00000004 __malloc_max_sbrked_mem
0000fb6c g     F .text	000001b0 alt_irq_register
0000a764 g     F .text	000008ac .hidden __adddf3
0000db08 g     F .text	000000f8 alt_avalon_dma_launch_bidir
00007080 g     F .text	0000010c __b2d
0000a22c g     F .text	00000538 .hidden __umoddi3
0000cf68 g     F .text	00000054 alt_dma_rxchan_open
0000d420 g     F .text	000000d4 lseek
0001278c g     O .rwdata	00000004 _global_impure_ptr
000074f4 g     F .text	00000564 _realloc_r
00014540 g       *ABS*	00000000 __bss_end
0001002c g     F .text	00000108 alt_tick
00009cb4 g     F .text	00000578 .hidden __udivdi3
00009760 g     F .text	00000024 _fputwc_r
00010980 g     O .rodata	00000028 __mprec_bigtens
000066e8 g     F .text	00000104 __s2b
0000ccc0 g     F .text	000000a8 .hidden __floatunsidf
00006dc0 g     F .text	00000060 __mcmp
00004afc g     F .text	00000018 __fp_lock_all
0000ff90 g     F .text	0000009c alt_alarm_stop
00014408 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d8 alt_irq_handler
0001147c g     O .rwdata	00000028 alt_dev_null
0000f7fc g     F .text	00000048 alt_dcache_flush_all
000067ec g     F .text	00000068 __hi0bits
0000cb64 g     F .text	00000080 .hidden __fixdfsi
000127dc g       *ABS*	00000000 __ram_rwdata_end
000127ac g     O .rwdata	00000008 alt_dev_list
0000e244 g     F .text	00000074 alt_avalon_dma_space
0000d898 g     F .text	000000f8 write
00010bd8 g       *ABS*	00000000 __ram_rodata_end
0000d140 g     F .text	000000b0 fstat
0000f490 g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000ba5c g     F .text	000000f4 .hidden __ledf2
00006b38 g     F .text	00000140 __pow5mult
00007e4c g     F .text	0000145c ___vfiprintf_internal_r
000143e8 g     O .bss	00000004 __nlocale_changed
00000608 g     F .text	00000058 .hidden __umodsi3
00014540 g       *ABS*	00000000 end
0000e7c4 g     F .text	000000bc altera_avalon_jtag_uart_init
000001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
000107e0 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0000f14c g     F .text	00000084 alt_avalon_timer_sc_init
0000cd68 g     F .text	00000064 .hidden __clzsi2
0000eeac g     F .text	00000224 altera_avalon_jtag_uart_write
00004aec g     F .text	00000004 __sfp_lock_acquire
00006048 g     F .text	000000e4 memchr
00000838 g     F .text	000021f8 ___vfprintf_internal_r
00004c50 g     F .text	00000310 _free_r
0000562c g     F .text	00000010 __locale_mb_cur_max
0000e2b8 g     F .text	00000138 alt_avalon_dma_send
0001062c g     F .text	00000180 __call_exitprocs
000127c0 g     O .rwdata	00000008 alt_dma_txchan_list
000143e4 g     O .bss	00000004 __mlocale_changed
00012798 g     O .rwdata	00000004 __malloc_sbrk_base
00000248 g     F .text	0000004c _start
0001440c g     O .bss	00000004 _alt_tick_rate
00006c78 g     F .text	00000148 __lshift
00014410 g     O .bss	00000004 _alt_nticks
0000d608 g     F .text	000000fc read
0000da00 g     F .text	00000098 alt_sys_init
00010514 g     F .text	00000118 __register_exitproc
0000f2cc g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00006940 g     F .text	000001f8 __multiply
0000eb38 g     F .text	00000068 altera_avalon_jtag_uart_close
00010bd8 g       *ABS*	00000000 __ram_rwdata_start
000107e0 g       *ABS*	00000000 __ram_rodata_start
00014418 g     O .bss	00000028 __malloc_current_mallinfo
0000718c g     F .text	0000014c __d2b
0000e660 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001026c g     F .text	000000b4 alt_get_fd
0000f6a4 g     F .text	00000158 alt_busy_sleep
000093e0 g     F .text	00000054 _close_r
00010498 g     F .text	0000007c memcmp
0000e720 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00014540 g       *ABS*	00000000 __alt_stack_base
0000e770 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00002b08 g     F .text	00000154 __swsetup_r
0000b010 g     F .text	000008e8 .hidden __divdf3
000049ac g     F .text	00000118 __sfp
000073f0 g     F .text	00000078 __copybits
00011074 g     O .rwdata	00000408 __malloc_av_
00004af8 g     F .text	00000004 __sinit_lock_release
0000bb50 g     F .text	00000718 .hidden __muldf3
00007b20 g     F .text	00000054 __sread
0000f22c g     F .text	00000060 alt_up_rs232_disable_read_interrupt
00010158 g     F .text	00000114 alt_find_file
0000f894 g     F .text	000000a4 alt_dev_llist_insert
0000d570 g     F .text	00000024 __malloc_lock
0000d768 g     F .text	000000b0 sbrk
00004700 g     F .text	0000005c _fflush_r
00009434 g     F .text	000000c4 _calloc_r
000143e0 g       *ABS*	00000000 __bss_start
000063d0 g     F .text	00000128 memset
000002b8 g     F .text	000001f4 main
0000e0c4 g     F .text	00000048 alt_avalon_dma_rx_ioctl
00014404 g     O .bss	00000004 alt_envp
000143ec g     O .bss	00000004 __malloc_max_total_mem
0000e6c0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00009ab4 g     F .text	00000018 __swbuf
00007c54 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
000095e8 g     F .text	00000014 fclose
00002e5c g     F .text	00001688 _dtoa_r
0000583c g     F .text	0000080c _malloc_r
00009c28 g     F .text	00000030 __ascii_wctomb
000127c8 g     O .rwdata	00000004 alt_errno
0000541c g     F .text	000000c4 _fwalk
000004ac g     F .text	00000084 .hidden __divsi3
00004b2c g     F .text	00000124 _malloc_trim_r
000107e0 g       *ABS*	00000000 __CTOR_END__
00007c5c g     F .text	000000dc strcmp
000107e0 g       *ABS*	00000000 __flash_rodata_start
000107e0 g       *ABS*	00000000 __DTOR_LIST__
0000f524 g     F .text	00000040 alt_up_rs232_open_dev
0000b8f8 g     F .text	00000088 .hidden __nedf2
0000d9c8 g     F .text	00000038 alt_irq_init
0000d704 g     F .text	00000064 alt_release_fd
00010a90 g     O .rodata	00000100 .hidden __clz_tab
000143e0 g     O .bss	00000004 _PathLocale
00000294 g     F .text	00000024 caculate_convolution
0001044c g     F .text	00000014 atexit
00009380 g     F .text	00000060 _write_r
0000565c g     F .text	00000018 setlocale
00012790 g     O .rwdata	00000004 _impure_ptr
000143fc g     O .bss	00000004 alt_argc
000044e4 g     F .text	0000021c __sflush_r
0000f998 g     F .text	00000060 _do_dtors
00005648 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
0000701c g     F .text	00000064 __ulp
00004b14 g     F .text	00000018 __fp_unlock_all
000127a4 g     O .rwdata	00000008 alt_fs_list
0000f1d0 g     F .text	0000005c alt_up_rs232_enable_read_interrupt
0000f34c g     F .text	00000040 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
00005674 g     F .text	0000000c localeconv
000127dc g       *ABS*	00000000 _edata
00014540 g       *ABS*	00000000 _end
000095fc g     F .text	00000164 __fputwc
00000248 g       *ABS*	00000000 __ram_exceptions_end
0000eba0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00007b7c g     F .text	0000007c __swrite
0001279c g     O .rwdata	00000004 __malloc_trim_threshold
0000563c g     F .text	0000000c __locale_msgcharset
00010460 g     F .text	00000038 exit
000054e0 g     F .text	000000c4 _fwalk_reent
00006e20 g     F .text	000001fc __mdiff
00000530 g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004af0 g     F .text	00000004 __sfp_lock_release
000107ac g     F .text	00000034 _exit
0000f564 g     F .text	00000140 alt_alarm_start
00005680 g     F .text	000001bc __smakebuf_r
000007a0 g     F .text	00000098 strlen
0000fe38 g     F .text	00000158 open
0000b980 g     F .text	000000dc .hidden __gedf2
000127a0 g     O .rwdata	00000004 __wctomb
04020000 g       *ABS*	00000000 __alt_mem_SRAM
00007e34 g     F .text	00000018 __sprint_r
0000f9f8 g     F .text	00000034 alt_icache_flush_all
000127d0 g     O .rwdata	00000004 alt_priority_mask
00002a30 g     F .text	0000001c __vfprintf_internal
00009c58 g     F .text	0000005c _wctomb_r
0000e10c g     F .text	00000138 alt_avalon_dma_prepare
0000c268 g     F .text	000008fc .hidden __subdf3
000127b8 g     O .rwdata	00000008 alt_dma_rxchan_list
00006854 g     F .text	000000b0 __lo0bits
000127d4 g     O .rwdata	00000008 alt_alarm_list
0000f938 g     F .text	00000060 _do_ctors
0000f28c g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
00009b68 g     F .text	000000c0 wcrtomb
0000ce1c g     F .text	000000d0 close
0000d34c g     F .text	00000084 alt_load
0000e07c g     F .text	00000048 alt_avalon_dma_tx_ioctl
00009784 g     F .text	00000080 fputwc
00004af4 g     F .text	00000004 __sinit_lock_acquire
000065c8 g     F .text	00000120 __multadd
000065a0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409214 	ori	at,at,584
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d40 	call	1d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	00800074 	movhi	r2,1
 140:	10911004 	addi	r2,r2,17472
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10911004 	addi	r2,r2,17472
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	e17ffd17 	ldw	r5,-12(fp)
 174:	1009883a 	mov	r4,r2
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	0001883a 	nop
}
 1bc:	0001883a 	nop
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

000001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d4:	defffb04 	addi	sp,sp,-20
 1d8:	dfc00415 	stw	ra,16(sp)
 1dc:	df000315 	stw	fp,12(sp)
 1e0:	df000304 	addi	fp,sp,12
 1e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e8:	000531fa 	rdctl	r2,exception
 1ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1f0:	e0bffd17 	ldw	r2,-12(fp)
 1f4:	10801f0c 	andi	r2,r2,124
 1f8:	1004d0ba 	srli	r2,r2,2
 1fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 200:	0005333a 	rdctl	r2,badaddr
 204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 208:	d0a72217 	ldw	r2,-25464(gp)
 20c:	10000726 	beq	r2,zero,22c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 210:	d0a72217 	ldw	r2,-25464(gp)
 214:	e0fffd17 	ldw	r3,-12(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	e17fff17 	ldw	r5,-4(fp)
 220:	1809883a 	mov	r4,r3
 224:	103ee83a 	callr	r2
 228:	00000206 	br	234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 22c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 230:	0005883a 	mov	r2,zero
}
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     248:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     24c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     250:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     254:	00bffd16 	blt	zero,r2,24c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     258:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     25c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     260:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     264:	d6a9e314 	ori	gp,gp,42892
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     268:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     26c:	1090f814 	ori	r2,r2,17376

    movhi r3, %hi(__bss_end)
     270:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     274:	18d15014 	ori	r3,r3,17728

    beq r2, r3, 1f
     278:	10c00326 	beq	r2,r3,288 <_start+0x40>

0:
    stw zero, (r2)
     27c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     280:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     284:	10fffd36 	bltu	r2,r3,27c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     288:	000d34c0 	call	d34c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     28c:	000d4f40 	call	d4f4 <alt_main>

00000290 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     290:	003fff06 	br	290 <alt_after_alt_main>

00000294 <caculate_convolution>:

	return ret;
}
#endif

unsigned int caculate_convolution(){
     294:	defffe04 	addi	sp,sp,-8
     298:	df000115 	stw	fp,4(sp)
     29c:	df000104 	addi	fp,sp,4
	int ret = 0;
     2a0:	e03fff15 	stw	zero,-4(fp)
	return ret;
     2a4:	e0bfff17 	ldw	r2,-4(fp)
}
     2a8:	e037883a 	mov	sp,fp
     2ac:	df000017 	ldw	fp,0(sp)
     2b0:	dec00104 	addi	sp,sp,4
     2b4:	f800283a 	ret

000002b8 <main>:

int main()
{
     2b8:	defff304 	addi	sp,sp,-52
     2bc:	dfc00c15 	stw	ra,48(sp)
     2c0:	df000b15 	stw	fp,44(sp)
     2c4:	df000b04 	addi	fp,sp,44
  printf("Hello from Nios II, Begin to run....!\n");
     2c8:	01000074 	movhi	r4,1
     2cc:	2101f804 	addi	r4,r4,2016
     2d0:	000078c0 	call	78c <puts>

  // Test DMA

 //  unsigned int general_dma = (unsigned int) 0x4041800;

   char *img_original = (void *)0x2000000;
     2d4:	00808034 	movhi	r2,512
     2d8:	e0bff615 	stw	r2,-40(fp)
   char *img_original_rd = (void *)0x2000000;
     2dc:	00808034 	movhi	r2,512
     2e0:	e0bff915 	stw	r2,-28(fp)
   char *img_copy = (void *)0x30000000;
     2e4:	008c0034 	movhi	r2,12288
     2e8:	e0bffa15 	stw	r2,-24(fp)

   int n_width = 800;
     2ec:	0080c804 	movi	r2,800
     2f0:	e0bffb15 	stw	r2,-20(fp)
   int n_heigth = 600;
     2f4:	00809604 	movi	r2,600
     2f8:	e0bffc15 	stw	r2,-16(fp)
   int n_size = n_width * n_heigth;
     2fc:	e0fffb17 	ldw	r3,-20(fp)
     300:	e0bffc17 	ldw	r2,-16(fp)
     304:	1885383a 	mul	r2,r3,r2
     308:	e0bffd15 	stw	r2,-12(fp)

   for (int i=0; i < n_size; i++) {
     30c:	e03ff715 	stw	zero,-36(fp)
     310:	00000d06 	br	348 <main+0x90>
 	   *img_original = i%255;
     314:	e0bff717 	ldw	r2,-36(fp)
     318:	01403fc4 	movi	r5,255
     31c:	1009883a 	mov	r4,r2
     320:	00005300 	call	530 <__modsi3>
     324:	1007883a 	mov	r3,r2
     328:	e0bff617 	ldw	r2,-40(fp)
     32c:	10c00005 	stb	r3,0(r2)
 	   img_original++;
     330:	e0bff617 	ldw	r2,-40(fp)
     334:	10800044 	addi	r2,r2,1
     338:	e0bff615 	stw	r2,-40(fp)

   int n_width = 800;
   int n_heigth = 600;
   int n_size = n_width * n_heigth;

   for (int i=0; i < n_size; i++) {
     33c:	e0bff717 	ldw	r2,-36(fp)
     340:	10800044 	addi	r2,r2,1
     344:	e0bff715 	stw	r2,-36(fp)
     348:	e0fff717 	ldw	r3,-36(fp)
     34c:	e0bffd17 	ldw	r2,-12(fp)
     350:	18bff016 	blt	r3,r2,314 <main+0x5c>
 	   *img_original = i%255;
 	   img_original++;
   }
   printf ("Construct data done..\n");
     354:	01000074 	movhi	r4,1
     358:	21020204 	addi	r4,r4,2056
     35c:	000078c0 	call	78c <puts>

 alt_dma_txchan tx;
   tx = alt_dma_txchan_open(GENERAL_DMA_NAME);   //open tx channel
     360:	01000074 	movhi	r4,1
     364:	21020804 	addi	r4,r4,2080
     368:	000d00c0 	call	d00c <alt_dma_txchan_open>
     36c:	e0bffe15 	stw	r2,-8(fp)

   if (tx != NULL ) {
     370:	e0bffe17 	ldw	r2,-8(fp)
     374:	10001026 	beq	r2,zero,3b8 <main+0x100>
	   alt_avalon_dma_tx_ioctl(tx,ALT_DMA_SET_MODE_8,NULL); // set it to 8 bits
     378:	000d883a 	mov	r6,zero
     37c:	01400144 	movi	r5,5
     380:	e13ffe17 	ldw	r4,-8(fp)
     384:	000e07c0 	call	e07c <alt_avalon_dma_tx_ioctl>
	   if(alt_avalon_dma_send(tx, img_original, n_size, NULL, NULL)   < 0) {
     388:	e0bffd17 	ldw	r2,-12(fp)
     38c:	d8000015 	stw	zero,0(sp)
     390:	000f883a 	mov	r7,zero
     394:	100d883a 	mov	r6,r2
     398:	e17ff617 	ldw	r5,-40(fp)
     39c:	e13ffe17 	ldw	r4,-8(fp)
     3a0:	000e2b80 	call	e2b8 <alt_avalon_dma_send>
     3a4:	1000070e 	bge	r2,zero,3c4 <main+0x10c>
		   printf ("Failure to post dma transtre\n");
     3a8:	01000074 	movhi	r4,1
     3ac:	21020d04 	addi	r4,r4,2100
     3b0:	000078c0 	call	78c <puts>
     3b4:	00000306 	br	3c4 <main+0x10c>
	   }
	  //alt_dma_txchan_close(tx);   //close channel;
	  //IOWR_ALTERA_AVALON_DMA_CONTROL (DMA_0_BASE, 0);//
   } else {
	   printf ("open tx channel failed..\n");
     3b8:	01000074 	movhi	r4,1
     3bc:	21021504 	addi	r4,r4,2132
     3c0:	000078c0 	call	78c <puts>
   }

   alt_dma_rxchan rx;
   rx = alt_dma_rxchan_open(GENERAL_DMA_NAME); //open rx channel
     3c4:	01000074 	movhi	r4,1
     3c8:	21020804 	addi	r4,r4,2080
     3cc:	000cf680 	call	cf68 <alt_dma_rxchan_open>
     3d0:	e0bfff15 	stw	r2,-4(fp)
   if(rx!=NULL) {
     3d4:	e0bfff17 	ldw	r2,-4(fp)
     3d8:	10001026 	beq	r2,zero,41c <main+0x164>
	   alt_avalon_dma_rx_ioctl(rx,ALT_DMA_SET_MODE_8,NULL);
     3dc:	000d883a 	mov	r6,zero
     3e0:	01400144 	movi	r5,5
     3e4:	e13fff17 	ldw	r4,-4(fp)
     3e8:	000e0c40 	call	e0c4 <alt_avalon_dma_rx_ioctl>
	   if(alt_avalon_dma_prepare(rx, img_copy, n_size, NULL, NULL)   <0) {
     3ec:	e0bffd17 	ldw	r2,-12(fp)
     3f0:	d8000015 	stw	zero,0(sp)
     3f4:	000f883a 	mov	r7,zero
     3f8:	100d883a 	mov	r6,r2
     3fc:	e17ffa17 	ldw	r5,-24(fp)
     400:	e13fff17 	ldw	r4,-4(fp)
     404:	000e10c0 	call	e10c <alt_avalon_dma_prepare>
     408:	1000070e 	bge	r2,zero,428 <main+0x170>
		   printf("Failure to post receive..\n");
     40c:	01000074 	movhi	r4,1
     410:	21021c04 	addi	r4,r4,2160
     414:	000078c0 	call	78c <puts>
     418:	00000306 	br	428 <main+0x170>
	   }
   } else {
	   printf ("open rx channel failed..\n");
     41c:	01000074 	movhi	r4,1
     420:	21022304 	addi	r4,r4,2188
     424:	000078c0 	call	78c <puts>
   }

   printf ("DMA transfer Done..");
     428:	01000074 	movhi	r4,1
     42c:	21022a04 	addi	r4,r4,2216
     430:	00006900 	call	690 <printf>

   for (int i=0; i < n_size; i++) {
     434:	e03ff815 	stw	zero,-32(fp)
     438:	00001606 	br	494 <main+0x1dc>
 	  printf ("%d-%d\n", *(img_original_rd + i), *(img_original_rd+i));
     43c:	e0bff817 	ldw	r2,-32(fp)
     440:	e0fff917 	ldw	r3,-28(fp)
     444:	1885883a 	add	r2,r3,r2
     448:	10800003 	ldbu	r2,0(r2)
     44c:	11003fcc 	andi	r4,r2,255
     450:	2100201c 	xori	r4,r4,128
     454:	213fe004 	addi	r4,r4,-128
     458:	e0bff817 	ldw	r2,-32(fp)
     45c:	e0fff917 	ldw	r3,-28(fp)
     460:	1885883a 	add	r2,r3,r2
     464:	10800003 	ldbu	r2,0(r2)
     468:	10803fcc 	andi	r2,r2,255
     46c:	1080201c 	xori	r2,r2,128
     470:	10bfe004 	addi	r2,r2,-128
     474:	100d883a 	mov	r6,r2
     478:	200b883a 	mov	r5,r4
     47c:	01000074 	movhi	r4,1
     480:	21022f04 	addi	r4,r4,2236
     484:	00006900 	call	690 <printf>
	   printf ("open rx channel failed..\n");
   }

   printf ("DMA transfer Done..");

   for (int i=0; i < n_size; i++) {
     488:	e0bff817 	ldw	r2,-32(fp)
     48c:	10800044 	addi	r2,r2,1
     490:	e0bff815 	stw	r2,-32(fp)
     494:	e0fff817 	ldw	r3,-32(fp)
     498:	e0bffd17 	ldw	r2,-12(fp)
     49c:	18bfe716 	blt	r3,r2,43c <main+0x184>
 	  printf ("%d-%d\n", *(img_original_rd + i), *(img_original_rd+i));

   }
   while(1) {
	   usleep(2);
     4a0:	01000084 	movi	r4,2
     4a4:	000d8180 	call	d818 <usleep>
	   //printf ("running\n");
   }
     4a8:	003ffd06 	br	4a0 <main+0x1e8>

000004ac <__divsi3>:
     4ac:	20001b16 	blt	r4,zero,51c <__divsi3+0x70>
     4b0:	000f883a 	mov	r7,zero
     4b4:	28001616 	blt	r5,zero,510 <__divsi3+0x64>
     4b8:	200d883a 	mov	r6,r4
     4bc:	29001a2e 	bgeu	r5,r4,528 <__divsi3+0x7c>
     4c0:	00800804 	movi	r2,32
     4c4:	00c00044 	movi	r3,1
     4c8:	00000106 	br	4d0 <__divsi3+0x24>
     4cc:	10000d26 	beq	r2,zero,504 <__divsi3+0x58>
     4d0:	294b883a 	add	r5,r5,r5
     4d4:	10bfffc4 	addi	r2,r2,-1
     4d8:	18c7883a 	add	r3,r3,r3
     4dc:	293ffb36 	bltu	r5,r4,4cc <__divsi3+0x20>
     4e0:	0005883a 	mov	r2,zero
     4e4:	18000726 	beq	r3,zero,504 <__divsi3+0x58>
     4e8:	0005883a 	mov	r2,zero
     4ec:	31400236 	bltu	r6,r5,4f8 <__divsi3+0x4c>
     4f0:	314dc83a 	sub	r6,r6,r5
     4f4:	10c4b03a 	or	r2,r2,r3
     4f8:	1806d07a 	srli	r3,r3,1
     4fc:	280ad07a 	srli	r5,r5,1
     500:	183ffa1e 	bne	r3,zero,4ec <__divsi3+0x40>
     504:	38000126 	beq	r7,zero,50c <__divsi3+0x60>
     508:	0085c83a 	sub	r2,zero,r2
     50c:	f800283a 	ret
     510:	014bc83a 	sub	r5,zero,r5
     514:	39c0005c 	xori	r7,r7,1
     518:	003fe706 	br	4b8 <__divsi3+0xc>
     51c:	0109c83a 	sub	r4,zero,r4
     520:	01c00044 	movi	r7,1
     524:	003fe306 	br	4b4 <__divsi3+0x8>
     528:	00c00044 	movi	r3,1
     52c:	003fee06 	br	4e8 <__divsi3+0x3c>

00000530 <__modsi3>:
     530:	20001716 	blt	r4,zero,590 <__modsi3+0x60>
     534:	000f883a 	mov	r7,zero
     538:	2005883a 	mov	r2,r4
     53c:	28001216 	blt	r5,zero,588 <__modsi3+0x58>
     540:	2900162e 	bgeu	r5,r4,59c <__modsi3+0x6c>
     544:	01800804 	movi	r6,32
     548:	00c00044 	movi	r3,1
     54c:	00000106 	br	554 <__modsi3+0x24>
     550:	30000a26 	beq	r6,zero,57c <__modsi3+0x4c>
     554:	294b883a 	add	r5,r5,r5
     558:	31bfffc4 	addi	r6,r6,-1
     55c:	18c7883a 	add	r3,r3,r3
     560:	293ffb36 	bltu	r5,r4,550 <__modsi3+0x20>
     564:	18000526 	beq	r3,zero,57c <__modsi3+0x4c>
     568:	1806d07a 	srli	r3,r3,1
     56c:	11400136 	bltu	r2,r5,574 <__modsi3+0x44>
     570:	1145c83a 	sub	r2,r2,r5
     574:	280ad07a 	srli	r5,r5,1
     578:	183ffb1e 	bne	r3,zero,568 <__modsi3+0x38>
     57c:	38000126 	beq	r7,zero,584 <__modsi3+0x54>
     580:	0085c83a 	sub	r2,zero,r2
     584:	f800283a 	ret
     588:	014bc83a 	sub	r5,zero,r5
     58c:	003fec06 	br	540 <__modsi3+0x10>
     590:	0109c83a 	sub	r4,zero,r4
     594:	01c00044 	movi	r7,1
     598:	003fe706 	br	538 <__modsi3+0x8>
     59c:	00c00044 	movi	r3,1
     5a0:	003ff106 	br	568 <__modsi3+0x38>

000005a4 <__udivsi3>:
     5a4:	200d883a 	mov	r6,r4
     5a8:	2900152e 	bgeu	r5,r4,600 <__udivsi3+0x5c>
     5ac:	28001416 	blt	r5,zero,600 <__udivsi3+0x5c>
     5b0:	00800804 	movi	r2,32
     5b4:	00c00044 	movi	r3,1
     5b8:	00000206 	br	5c4 <__udivsi3+0x20>
     5bc:	10000e26 	beq	r2,zero,5f8 <__udivsi3+0x54>
     5c0:	28000516 	blt	r5,zero,5d8 <__udivsi3+0x34>
     5c4:	294b883a 	add	r5,r5,r5
     5c8:	10bfffc4 	addi	r2,r2,-1
     5cc:	18c7883a 	add	r3,r3,r3
     5d0:	293ffa36 	bltu	r5,r4,5bc <__udivsi3+0x18>
     5d4:	18000826 	beq	r3,zero,5f8 <__udivsi3+0x54>
     5d8:	0005883a 	mov	r2,zero
     5dc:	31400236 	bltu	r6,r5,5e8 <__udivsi3+0x44>
     5e0:	314dc83a 	sub	r6,r6,r5
     5e4:	10c4b03a 	or	r2,r2,r3
     5e8:	1806d07a 	srli	r3,r3,1
     5ec:	280ad07a 	srli	r5,r5,1
     5f0:	183ffa1e 	bne	r3,zero,5dc <__udivsi3+0x38>
     5f4:	f800283a 	ret
     5f8:	0005883a 	mov	r2,zero
     5fc:	f800283a 	ret
     600:	00c00044 	movi	r3,1
     604:	003ff406 	br	5d8 <__udivsi3+0x34>

00000608 <__umodsi3>:
     608:	2005883a 	mov	r2,r4
     60c:	2900122e 	bgeu	r5,r4,658 <__umodsi3+0x50>
     610:	28001116 	blt	r5,zero,658 <__umodsi3+0x50>
     614:	01800804 	movi	r6,32
     618:	00c00044 	movi	r3,1
     61c:	00000206 	br	628 <__umodsi3+0x20>
     620:	30000c26 	beq	r6,zero,654 <__umodsi3+0x4c>
     624:	28000516 	blt	r5,zero,63c <__umodsi3+0x34>
     628:	294b883a 	add	r5,r5,r5
     62c:	31bfffc4 	addi	r6,r6,-1
     630:	18c7883a 	add	r3,r3,r3
     634:	293ffa36 	bltu	r5,r4,620 <__umodsi3+0x18>
     638:	18000626 	beq	r3,zero,654 <__umodsi3+0x4c>
     63c:	1806d07a 	srli	r3,r3,1
     640:	11400136 	bltu	r2,r5,648 <__umodsi3+0x40>
     644:	1145c83a 	sub	r2,r2,r5
     648:	280ad07a 	srli	r5,r5,1
     64c:	183ffb1e 	bne	r3,zero,63c <__umodsi3+0x34>
     650:	f800283a 	ret
     654:	f800283a 	ret
     658:	00c00044 	movi	r3,1
     65c:	003ff706 	br	63c <__umodsi3+0x34>

00000660 <_printf_r>:
     660:	defffd04 	addi	sp,sp,-12
     664:	2805883a 	mov	r2,r5
     668:	dfc00015 	stw	ra,0(sp)
     66c:	d9800115 	stw	r6,4(sp)
     670:	d9c00215 	stw	r7,8(sp)
     674:	21400217 	ldw	r5,8(r4)
     678:	d9c00104 	addi	r7,sp,4
     67c:	100d883a 	mov	r6,r2
     680:	00008380 	call	838 <___vfprintf_internal_r>
     684:	dfc00017 	ldw	ra,0(sp)
     688:	dec00304 	addi	sp,sp,12
     68c:	f800283a 	ret

00000690 <printf>:
     690:	defffc04 	addi	sp,sp,-16
     694:	dfc00015 	stw	ra,0(sp)
     698:	d9400115 	stw	r5,4(sp)
     69c:	d9800215 	stw	r6,8(sp)
     6a0:	d9c00315 	stw	r7,12(sp)
     6a4:	00800074 	movhi	r2,1
     6a8:	1089e404 	addi	r2,r2,10128
     6ac:	10800017 	ldw	r2,0(r2)
     6b0:	200b883a 	mov	r5,r4
     6b4:	d9800104 	addi	r6,sp,4
     6b8:	11000217 	ldw	r4,8(r2)
     6bc:	0002a300 	call	2a30 <__vfprintf_internal>
     6c0:	dfc00017 	ldw	ra,0(sp)
     6c4:	dec00404 	addi	sp,sp,16
     6c8:	f800283a 	ret

000006cc <_puts_r>:
     6cc:	defff604 	addi	sp,sp,-40
     6d0:	dc000715 	stw	r16,28(sp)
     6d4:	2021883a 	mov	r16,r4
     6d8:	2809883a 	mov	r4,r5
     6dc:	dc400815 	stw	r17,32(sp)
     6e0:	dfc00915 	stw	ra,36(sp)
     6e4:	2823883a 	mov	r17,r5
     6e8:	00007a00 	call	7a0 <strlen>
     6ec:	10c00044 	addi	r3,r2,1
     6f0:	d8800115 	stw	r2,4(sp)
     6f4:	00800074 	movhi	r2,1
     6f8:	10823104 	addi	r2,r2,2244
     6fc:	d8800215 	stw	r2,8(sp)
     700:	00800044 	movi	r2,1
     704:	d8800315 	stw	r2,12(sp)
     708:	00800084 	movi	r2,2
     70c:	dc400015 	stw	r17,0(sp)
     710:	d8c00615 	stw	r3,24(sp)
     714:	dec00415 	stw	sp,16(sp)
     718:	d8800515 	stw	r2,20(sp)
     71c:	80000226 	beq	r16,zero,728 <_puts_r+0x5c>
     720:	80800e17 	ldw	r2,56(r16)
     724:	10001426 	beq	r2,zero,778 <_puts_r+0xac>
     728:	81400217 	ldw	r5,8(r16)
     72c:	2880030b 	ldhu	r2,12(r5)
     730:	10c8000c 	andi	r3,r2,8192
     734:	1800061e 	bne	r3,zero,750 <_puts_r+0x84>
     738:	29001917 	ldw	r4,100(r5)
     73c:	00f7ffc4 	movi	r3,-8193
     740:	10880014 	ori	r2,r2,8192
     744:	20c6703a 	and	r3,r4,r3
     748:	2880030d 	sth	r2,12(r5)
     74c:	28c01915 	stw	r3,100(r5)
     750:	d9800404 	addi	r6,sp,16
     754:	8009883a 	mov	r4,r16
     758:	0004f600 	call	4f60 <__sfvwrite_r>
     75c:	1000091e 	bne	r2,zero,784 <_puts_r+0xb8>
     760:	00800284 	movi	r2,10
     764:	dfc00917 	ldw	ra,36(sp)
     768:	dc400817 	ldw	r17,32(sp)
     76c:	dc000717 	ldw	r16,28(sp)
     770:	dec00a04 	addi	sp,sp,40
     774:	f800283a 	ret
     778:	8009883a 	mov	r4,r16
     77c:	0004adc0 	call	4adc <__sinit>
     780:	003fe906 	br	728 <_puts_r+0x5c>
     784:	00bfffc4 	movi	r2,-1
     788:	003ff606 	br	764 <_puts_r+0x98>

0000078c <puts>:
     78c:	00800074 	movhi	r2,1
     790:	1089e404 	addi	r2,r2,10128
     794:	200b883a 	mov	r5,r4
     798:	11000017 	ldw	r4,0(r2)
     79c:	00006cc1 	jmpi	6cc <_puts_r>

000007a0 <strlen>:
     7a0:	208000cc 	andi	r2,r4,3
     7a4:	10002026 	beq	r2,zero,828 <strlen+0x88>
     7a8:	20800007 	ldb	r2,0(r4)
     7ac:	10002026 	beq	r2,zero,830 <strlen+0x90>
     7b0:	2005883a 	mov	r2,r4
     7b4:	00000206 	br	7c0 <strlen+0x20>
     7b8:	10c00007 	ldb	r3,0(r2)
     7bc:	18001826 	beq	r3,zero,820 <strlen+0x80>
     7c0:	10800044 	addi	r2,r2,1
     7c4:	10c000cc 	andi	r3,r2,3
     7c8:	183ffb1e 	bne	r3,zero,7b8 <strlen+0x18>
     7cc:	10c00017 	ldw	r3,0(r2)
     7d0:	01ffbff4 	movhi	r7,65279
     7d4:	39ffbfc4 	addi	r7,r7,-257
     7d8:	00ca303a 	nor	r5,zero,r3
     7dc:	01a02074 	movhi	r6,32897
     7e0:	19c7883a 	add	r3,r3,r7
     7e4:	31a02004 	addi	r6,r6,-32640
     7e8:	1946703a 	and	r3,r3,r5
     7ec:	1986703a 	and	r3,r3,r6
     7f0:	1800091e 	bne	r3,zero,818 <strlen+0x78>
     7f4:	10800104 	addi	r2,r2,4
     7f8:	10c00017 	ldw	r3,0(r2)
     7fc:	19cb883a 	add	r5,r3,r7
     800:	00c6303a 	nor	r3,zero,r3
     804:	28c6703a 	and	r3,r5,r3
     808:	1986703a 	and	r3,r3,r6
     80c:	183ff926 	beq	r3,zero,7f4 <strlen+0x54>
     810:	00000106 	br	818 <strlen+0x78>
     814:	10800044 	addi	r2,r2,1
     818:	10c00007 	ldb	r3,0(r2)
     81c:	183ffd1e 	bne	r3,zero,814 <strlen+0x74>
     820:	1105c83a 	sub	r2,r2,r4
     824:	f800283a 	ret
     828:	2005883a 	mov	r2,r4
     82c:	003fe706 	br	7cc <strlen+0x2c>
     830:	0005883a 	mov	r2,zero
     834:	f800283a 	ret

00000838 <___vfprintf_internal_r>:
     838:	deffb804 	addi	sp,sp,-288
     83c:	dfc04715 	stw	ra,284(sp)
     840:	ddc04515 	stw	r23,276(sp)
     844:	dd404315 	stw	r21,268(sp)
     848:	d9002c15 	stw	r4,176(sp)
     84c:	282f883a 	mov	r23,r5
     850:	302b883a 	mov	r21,r6
     854:	d9c02d15 	stw	r7,180(sp)
     858:	df004615 	stw	fp,280(sp)
     85c:	dd804415 	stw	r22,272(sp)
     860:	dd004215 	stw	r20,264(sp)
     864:	dcc04115 	stw	r19,260(sp)
     868:	dc804015 	stw	r18,256(sp)
     86c:	dc403f15 	stw	r17,252(sp)
     870:	dc003e15 	stw	r16,248(sp)
     874:	00056500 	call	5650 <_localeconv_r>
     878:	10800017 	ldw	r2,0(r2)
     87c:	1009883a 	mov	r4,r2
     880:	d8803415 	stw	r2,208(sp)
     884:	00007a00 	call	7a0 <strlen>
     888:	d8803715 	stw	r2,220(sp)
     88c:	d8802c17 	ldw	r2,176(sp)
     890:	10000226 	beq	r2,zero,89c <___vfprintf_internal_r+0x64>
     894:	10800e17 	ldw	r2,56(r2)
     898:	1000f926 	beq	r2,zero,c80 <___vfprintf_internal_r+0x448>
     89c:	b880030b 	ldhu	r2,12(r23)
     8a0:	10c8000c 	andi	r3,r2,8192
     8a4:	1800061e 	bne	r3,zero,8c0 <___vfprintf_internal_r+0x88>
     8a8:	b9001917 	ldw	r4,100(r23)
     8ac:	00f7ffc4 	movi	r3,-8193
     8b0:	10880014 	ori	r2,r2,8192
     8b4:	20c6703a 	and	r3,r4,r3
     8b8:	b880030d 	sth	r2,12(r23)
     8bc:	b8c01915 	stw	r3,100(r23)
     8c0:	10c0020c 	andi	r3,r2,8
     8c4:	1800c126 	beq	r3,zero,bcc <___vfprintf_internal_r+0x394>
     8c8:	b8c00417 	ldw	r3,16(r23)
     8cc:	1800bf26 	beq	r3,zero,bcc <___vfprintf_internal_r+0x394>
     8d0:	1080068c 	andi	r2,r2,26
     8d4:	00c00284 	movi	r3,10
     8d8:	10c0c426 	beq	r2,r3,bec <___vfprintf_internal_r+0x3b4>
     8dc:	d8c00404 	addi	r3,sp,16
     8e0:	05000074 	movhi	r20,1
     8e4:	d9001e04 	addi	r4,sp,120
     8e8:	a5024284 	addi	r20,r20,2314
     8ec:	d8c01e15 	stw	r3,120(sp)
     8f0:	d8002015 	stw	zero,128(sp)
     8f4:	d8001f15 	stw	zero,124(sp)
     8f8:	d8003315 	stw	zero,204(sp)
     8fc:	d8003615 	stw	zero,216(sp)
     900:	d8003815 	stw	zero,224(sp)
     904:	1811883a 	mov	r8,r3
     908:	d8003915 	stw	zero,228(sp)
     90c:	d8003a15 	stw	zero,232(sp)
     910:	d8002f15 	stw	zero,188(sp)
     914:	d9002815 	stw	r4,160(sp)
     918:	a8800007 	ldb	r2,0(r21)
     91c:	10027b26 	beq	r2,zero,130c <___vfprintf_internal_r+0xad4>
     920:	00c00944 	movi	r3,37
     924:	a821883a 	mov	r16,r21
     928:	10c0021e 	bne	r2,r3,934 <___vfprintf_internal_r+0xfc>
     92c:	00001406 	br	980 <___vfprintf_internal_r+0x148>
     930:	10c00326 	beq	r2,r3,940 <___vfprintf_internal_r+0x108>
     934:	84000044 	addi	r16,r16,1
     938:	80800007 	ldb	r2,0(r16)
     93c:	103ffc1e 	bne	r2,zero,930 <___vfprintf_internal_r+0xf8>
     940:	8563c83a 	sub	r17,r16,r21
     944:	88000e26 	beq	r17,zero,980 <___vfprintf_internal_r+0x148>
     948:	d8c02017 	ldw	r3,128(sp)
     94c:	d8801f17 	ldw	r2,124(sp)
     950:	45400015 	stw	r21,0(r8)
     954:	1c47883a 	add	r3,r3,r17
     958:	10800044 	addi	r2,r2,1
     95c:	d8c02015 	stw	r3,128(sp)
     960:	44400115 	stw	r17,4(r8)
     964:	d8801f15 	stw	r2,124(sp)
     968:	00c001c4 	movi	r3,7
     96c:	1880a716 	blt	r3,r2,c0c <___vfprintf_internal_r+0x3d4>
     970:	42000204 	addi	r8,r8,8
     974:	d9402f17 	ldw	r5,188(sp)
     978:	2c4b883a 	add	r5,r5,r17
     97c:	d9402f15 	stw	r5,188(sp)
     980:	80800007 	ldb	r2,0(r16)
     984:	1000a826 	beq	r2,zero,c28 <___vfprintf_internal_r+0x3f0>
     988:	84400047 	ldb	r17,1(r16)
     98c:	00bfffc4 	movi	r2,-1
     990:	85400044 	addi	r21,r16,1
     994:	d8002785 	stb	zero,158(sp)
     998:	0007883a 	mov	r3,zero
     99c:	000f883a 	mov	r7,zero
     9a0:	d8802915 	stw	r2,164(sp)
     9a4:	d8003115 	stw	zero,196(sp)
     9a8:	0025883a 	mov	r18,zero
     9ac:	01401604 	movi	r5,88
     9b0:	01800244 	movi	r6,9
     9b4:	02800a84 	movi	r10,42
     9b8:	02401b04 	movi	r9,108
     9bc:	ad400044 	addi	r21,r21,1
     9c0:	88bff804 	addi	r2,r17,-32
     9c4:	28830436 	bltu	r5,r2,15d8 <___vfprintf_internal_r+0xda0>
     9c8:	100490ba 	slli	r2,r2,2
     9cc:	01000034 	movhi	r4,0
     9d0:	21027804 	addi	r4,r4,2528
     9d4:	1105883a 	add	r2,r2,r4
     9d8:	10800017 	ldw	r2,0(r2)
     9dc:	1000683a 	jmp	r2
     9e0:	000014f8 	rdprs	zero,zero,83
     9e4:	000015d8 	cmpnei	zero,zero,87
     9e8:	000015d8 	cmpnei	zero,zero,87
     9ec:	00001518 	cmpnei	zero,zero,84
     9f0:	000015d8 	cmpnei	zero,zero,87
     9f4:	000015d8 	cmpnei	zero,zero,87
     9f8:	000015d8 	cmpnei	zero,zero,87
     9fc:	000015d8 	cmpnei	zero,zero,87
     a00:	000015d8 	cmpnei	zero,zero,87
     a04:	000015d8 	cmpnei	zero,zero,87
     a08:	00000c8c 	andi	zero,zero,50
     a0c:	00001434 	movhi	zero,80
     a10:	000015d8 	cmpnei	zero,zero,87
     a14:	00000b54 	movui	zero,45
     a18:	00000cb4 	movhi	zero,50
     a1c:	000015d8 	cmpnei	zero,zero,87
     a20:	00000cf4 	movhi	zero,51
     a24:	00000d00 	call	d0 <__flash_exceptions_start+0xb0>
     a28:	00000d00 	call	d0 <__flash_exceptions_start+0xb0>
     a2c:	00000d00 	call	d0 <__flash_exceptions_start+0xb0>
     a30:	00000d00 	call	d0 <__flash_exceptions_start+0xb0>
     a34:	00000d00 	call	d0 <__flash_exceptions_start+0xb0>
     a38:	00000d00 	call	d0 <__flash_exceptions_start+0xb0>
     a3c:	00000d00 	call	d0 <__flash_exceptions_start+0xb0>
     a40:	00000d00 	call	d0 <__flash_exceptions_start+0xb0>
     a44:	00000d00 	call	d0 <__flash_exceptions_start+0xb0>
     a48:	000015d8 	cmpnei	zero,zero,87
     a4c:	000015d8 	cmpnei	zero,zero,87
     a50:	000015d8 	cmpnei	zero,zero,87
     a54:	000015d8 	cmpnei	zero,zero,87
     a58:	000015d8 	cmpnei	zero,zero,87
     a5c:	000015d8 	cmpnei	zero,zero,87
     a60:	000015d8 	cmpnei	zero,zero,87
     a64:	000015d8 	cmpnei	zero,zero,87
     a68:	000015d8 	cmpnei	zero,zero,87
     a6c:	000015d8 	cmpnei	zero,zero,87
     a70:	00000d34 	movhi	zero,52
     a74:	00000df0 	cmpltui	zero,zero,55
     a78:	000015d8 	cmpnei	zero,zero,87
     a7c:	00000df0 	cmpltui	zero,zero,55
     a80:	000015d8 	cmpnei	zero,zero,87
     a84:	000015d8 	cmpnei	zero,zero,87
     a88:	000015d8 	cmpnei	zero,zero,87
     a8c:	000015d8 	cmpnei	zero,zero,87
     a90:	00000e90 	cmplti	zero,zero,58
     a94:	000015d8 	cmpnei	zero,zero,87
     a98:	000015d8 	cmpnei	zero,zero,87
     a9c:	00000e9c 	xori	zero,zero,58
     aa0:	000015d8 	cmpnei	zero,zero,87
     aa4:	000015d8 	cmpnei	zero,zero,87
     aa8:	000015d8 	cmpnei	zero,zero,87
     aac:	000015d8 	cmpnei	zero,zero,87
     ab0:	000015d8 	cmpnei	zero,zero,87
     ab4:	00001314 	movui	zero,76
     ab8:	000015d8 	cmpnei	zero,zero,87
     abc:	000015d8 	cmpnei	zero,zero,87
     ac0:	00001374 	movhi	zero,77
     ac4:	000015d8 	cmpnei	zero,zero,87
     ac8:	000015d8 	cmpnei	zero,zero,87
     acc:	000015d8 	cmpnei	zero,zero,87
     ad0:	000015d8 	cmpnei	zero,zero,87
     ad4:	000015d8 	cmpnei	zero,zero,87
     ad8:	000015d8 	cmpnei	zero,zero,87
     adc:	000015d8 	cmpnei	zero,zero,87
     ae0:	000015d8 	cmpnei	zero,zero,87
     ae4:	000015d8 	cmpnei	zero,zero,87
     ae8:	000015d8 	cmpnei	zero,zero,87
     aec:	00001584 	movi	zero,86
     af0:	00001524 	muli	zero,zero,84
     af4:	00000df0 	cmpltui	zero,zero,55
     af8:	00000df0 	cmpltui	zero,zero,55
     afc:	00000df0 	cmpltui	zero,zero,55
     b00:	00001534 	movhi	zero,84
     b04:	00001524 	muli	zero,zero,84
     b08:	000015d8 	cmpnei	zero,zero,87
     b0c:	000015d8 	cmpnei	zero,zero,87
     b10:	00001540 	call	154 <alt_irq_handler+0x58>
     b14:	000015d8 	cmpnei	zero,zero,87
     b18:	00001550 	cmplti	zero,zero,85
     b1c:	00001424 	muli	zero,zero,80
     b20:	00000b60 	cmpeqi	zero,zero,45
     b24:	00001444 	movi	zero,81
     b28:	000015d8 	cmpnei	zero,zero,87
     b2c:	00001450 	cmplti	zero,zero,81
     b30:	000015d8 	cmpnei	zero,zero,87
     b34:	000014ac 	andhi	zero,zero,82
     b38:	000015d8 	cmpnei	zero,zero,87
     b3c:	000015d8 	cmpnei	zero,zero,87
     b40:	000014bc 	xorhi	zero,zero,82
     b44:	d9003117 	ldw	r4,196(sp)
     b48:	d8802d15 	stw	r2,180(sp)
     b4c:	0109c83a 	sub	r4,zero,r4
     b50:	d9003115 	stw	r4,196(sp)
     b54:	94800114 	ori	r18,r18,4
     b58:	ac400007 	ldb	r17,0(r21)
     b5c:	003f9706 	br	9bc <___vfprintf_internal_r+0x184>
     b60:	00800c04 	movi	r2,48
     b64:	d9002d17 	ldw	r4,180(sp)
     b68:	d9402917 	ldw	r5,164(sp)
     b6c:	d8802705 	stb	r2,156(sp)
     b70:	00801e04 	movi	r2,120
     b74:	d8802745 	stb	r2,157(sp)
     b78:	d8002785 	stb	zero,158(sp)
     b7c:	20c00104 	addi	r3,r4,4
     b80:	24c00017 	ldw	r19,0(r4)
     b84:	002d883a 	mov	r22,zero
     b88:	90800094 	ori	r2,r18,2
     b8c:	28029a16 	blt	r5,zero,15f8 <___vfprintf_internal_r+0xdc0>
     b90:	00bfdfc4 	movi	r2,-129
     b94:	90a4703a 	and	r18,r18,r2
     b98:	d8c02d15 	stw	r3,180(sp)
     b9c:	94800094 	ori	r18,r18,2
     ba0:	9802871e 	bne	r19,zero,15c0 <___vfprintf_internal_r+0xd88>
     ba4:	00800074 	movhi	r2,1
     ba8:	10823b04 	addi	r2,r2,2284
     bac:	d8803915 	stw	r2,228(sp)
     bb0:	04401e04 	movi	r17,120
     bb4:	d8802917 	ldw	r2,164(sp)
     bb8:	0039883a 	mov	fp,zero
     bbc:	1001e926 	beq	r2,zero,1364 <___vfprintf_internal_r+0xb2c>
     bc0:	0027883a 	mov	r19,zero
     bc4:	002d883a 	mov	r22,zero
     bc8:	00020506 	br	13e0 <___vfprintf_internal_r+0xba8>
     bcc:	d9002c17 	ldw	r4,176(sp)
     bd0:	b80b883a 	mov	r5,r23
     bd4:	0002b080 	call	2b08 <__swsetup_r>
     bd8:	1005ac1e 	bne	r2,zero,228c <___vfprintf_internal_r+0x1a54>
     bdc:	b880030b 	ldhu	r2,12(r23)
     be0:	00c00284 	movi	r3,10
     be4:	1080068c 	andi	r2,r2,26
     be8:	10ff3c1e 	bne	r2,r3,8dc <___vfprintf_internal_r+0xa4>
     bec:	b880038f 	ldh	r2,14(r23)
     bf0:	103f3a16 	blt	r2,zero,8dc <___vfprintf_internal_r+0xa4>
     bf4:	d9c02d17 	ldw	r7,180(sp)
     bf8:	d9002c17 	ldw	r4,176(sp)
     bfc:	a80d883a 	mov	r6,r21
     c00:	b80b883a 	mov	r5,r23
     c04:	0002a4c0 	call	2a4c <__sbprintf>
     c08:	00001106 	br	c50 <___vfprintf_internal_r+0x418>
     c0c:	d9002c17 	ldw	r4,176(sp)
     c10:	d9801e04 	addi	r6,sp,120
     c14:	b80b883a 	mov	r5,r23
     c18:	0007e340 	call	7e34 <__sprint_r>
     c1c:	1000081e 	bne	r2,zero,c40 <___vfprintf_internal_r+0x408>
     c20:	da000404 	addi	r8,sp,16
     c24:	003f5306 	br	974 <___vfprintf_internal_r+0x13c>
     c28:	d8802017 	ldw	r2,128(sp)
     c2c:	10000426 	beq	r2,zero,c40 <___vfprintf_internal_r+0x408>
     c30:	d9002c17 	ldw	r4,176(sp)
     c34:	d9801e04 	addi	r6,sp,120
     c38:	b80b883a 	mov	r5,r23
     c3c:	0007e340 	call	7e34 <__sprint_r>
     c40:	b880030b 	ldhu	r2,12(r23)
     c44:	1080100c 	andi	r2,r2,64
     c48:	1005901e 	bne	r2,zero,228c <___vfprintf_internal_r+0x1a54>
     c4c:	d8802f17 	ldw	r2,188(sp)
     c50:	dfc04717 	ldw	ra,284(sp)
     c54:	df004617 	ldw	fp,280(sp)
     c58:	ddc04517 	ldw	r23,276(sp)
     c5c:	dd804417 	ldw	r22,272(sp)
     c60:	dd404317 	ldw	r21,268(sp)
     c64:	dd004217 	ldw	r20,264(sp)
     c68:	dcc04117 	ldw	r19,260(sp)
     c6c:	dc804017 	ldw	r18,256(sp)
     c70:	dc403f17 	ldw	r17,252(sp)
     c74:	dc003e17 	ldw	r16,248(sp)
     c78:	dec04804 	addi	sp,sp,288
     c7c:	f800283a 	ret
     c80:	d9002c17 	ldw	r4,176(sp)
     c84:	0004adc0 	call	4adc <__sinit>
     c88:	003f0406 	br	89c <___vfprintf_internal_r+0x64>
     c8c:	d8802d17 	ldw	r2,180(sp)
     c90:	d9002d17 	ldw	r4,180(sp)
     c94:	10800017 	ldw	r2,0(r2)
     c98:	d8803115 	stw	r2,196(sp)
     c9c:	20800104 	addi	r2,r4,4
     ca0:	d9003117 	ldw	r4,196(sp)
     ca4:	203fa716 	blt	r4,zero,b44 <___vfprintf_internal_r+0x30c>
     ca8:	d8802d15 	stw	r2,180(sp)
     cac:	ac400007 	ldb	r17,0(r21)
     cb0:	003f4206 	br	9bc <___vfprintf_internal_r+0x184>
     cb4:	ac400007 	ldb	r17,0(r21)
     cb8:	aac00044 	addi	r11,r21,1
     cbc:	8a872826 	beq	r17,r10,2960 <___vfprintf_internal_r+0x2128>
     cc0:	88bff404 	addi	r2,r17,-48
     cc4:	0009883a 	mov	r4,zero
     cc8:	30867d36 	bltu	r6,r2,26c0 <___vfprintf_internal_r+0x1e88>
     ccc:	5c400007 	ldb	r17,0(r11)
     cd0:	210002a4 	muli	r4,r4,10
     cd4:	5d400044 	addi	r21,r11,1
     cd8:	a817883a 	mov	r11,r21
     cdc:	2089883a 	add	r4,r4,r2
     ce0:	88bff404 	addi	r2,r17,-48
     ce4:	30bff92e 	bgeu	r6,r2,ccc <___vfprintf_internal_r+0x494>
     ce8:	2005c916 	blt	r4,zero,2410 <___vfprintf_internal_r+0x1bd8>
     cec:	d9002915 	stw	r4,164(sp)
     cf0:	003f3306 	br	9c0 <___vfprintf_internal_r+0x188>
     cf4:	94802014 	ori	r18,r18,128
     cf8:	ac400007 	ldb	r17,0(r21)
     cfc:	003f2f06 	br	9bc <___vfprintf_internal_r+0x184>
     d00:	a809883a 	mov	r4,r21
     d04:	d8003115 	stw	zero,196(sp)
     d08:	88bff404 	addi	r2,r17,-48
     d0c:	0017883a 	mov	r11,zero
     d10:	24400007 	ldb	r17,0(r4)
     d14:	5ac002a4 	muli	r11,r11,10
     d18:	ad400044 	addi	r21,r21,1
     d1c:	a809883a 	mov	r4,r21
     d20:	12d7883a 	add	r11,r2,r11
     d24:	88bff404 	addi	r2,r17,-48
     d28:	30bff92e 	bgeu	r6,r2,d10 <___vfprintf_internal_r+0x4d8>
     d2c:	dac03115 	stw	r11,196(sp)
     d30:	003f2306 	br	9c0 <___vfprintf_internal_r+0x188>
     d34:	18c03fcc 	andi	r3,r3,255
     d38:	18072b1e 	bne	r3,zero,29e8 <___vfprintf_internal_r+0x21b0>
     d3c:	94800414 	ori	r18,r18,16
     d40:	9080080c 	andi	r2,r18,32
     d44:	10037b26 	beq	r2,zero,1b34 <___vfprintf_internal_r+0x12fc>
     d48:	d9402d17 	ldw	r5,180(sp)
     d4c:	28800117 	ldw	r2,4(r5)
     d50:	2cc00017 	ldw	r19,0(r5)
     d54:	29400204 	addi	r5,r5,8
     d58:	d9402d15 	stw	r5,180(sp)
     d5c:	102d883a 	mov	r22,r2
     d60:	10044b16 	blt	r2,zero,1e90 <___vfprintf_internal_r+0x1658>
     d64:	d9402917 	ldw	r5,164(sp)
     d68:	df002783 	ldbu	fp,158(sp)
     d6c:	2803bc16 	blt	r5,zero,1c60 <___vfprintf_internal_r+0x1428>
     d70:	00ffdfc4 	movi	r3,-129
     d74:	9d84b03a 	or	r2,r19,r22
     d78:	90e4703a 	and	r18,r18,r3
     d7c:	10017726 	beq	r2,zero,135c <___vfprintf_internal_r+0xb24>
     d80:	b0038326 	beq	r22,zero,1b90 <___vfprintf_internal_r+0x1358>
     d84:	dc402a15 	stw	r17,168(sp)
     d88:	dc001e04 	addi	r16,sp,120
     d8c:	b023883a 	mov	r17,r22
     d90:	402d883a 	mov	r22,r8
     d94:	9809883a 	mov	r4,r19
     d98:	880b883a 	mov	r5,r17
     d9c:	01800284 	movi	r6,10
     da0:	000f883a 	mov	r7,zero
     da4:	000a22c0 	call	a22c <__umoddi3>
     da8:	10800c04 	addi	r2,r2,48
     dac:	843fffc4 	addi	r16,r16,-1
     db0:	9809883a 	mov	r4,r19
     db4:	880b883a 	mov	r5,r17
     db8:	80800005 	stb	r2,0(r16)
     dbc:	01800284 	movi	r6,10
     dc0:	000f883a 	mov	r7,zero
     dc4:	0009cb40 	call	9cb4 <__udivdi3>
     dc8:	1027883a 	mov	r19,r2
     dcc:	10c4b03a 	or	r2,r2,r3
     dd0:	1823883a 	mov	r17,r3
     dd4:	103fef1e 	bne	r2,zero,d94 <___vfprintf_internal_r+0x55c>
     dd8:	d8c02817 	ldw	r3,160(sp)
     ddc:	dc402a17 	ldw	r17,168(sp)
     de0:	b011883a 	mov	r8,r22
     de4:	1c07c83a 	sub	r3,r3,r16
     de8:	d8c02e15 	stw	r3,184(sp)
     dec:	00005906 	br	f54 <___vfprintf_internal_r+0x71c>
     df0:	18c03fcc 	andi	r3,r3,255
     df4:	1806fa1e 	bne	r3,zero,29e0 <___vfprintf_internal_r+0x21a8>
     df8:	9080020c 	andi	r2,r18,8
     dfc:	10048a26 	beq	r2,zero,2028 <___vfprintf_internal_r+0x17f0>
     e00:	d8c02d17 	ldw	r3,180(sp)
     e04:	d9002d17 	ldw	r4,180(sp)
     e08:	d9402d17 	ldw	r5,180(sp)
     e0c:	18c00017 	ldw	r3,0(r3)
     e10:	21000117 	ldw	r4,4(r4)
     e14:	29400204 	addi	r5,r5,8
     e18:	d8c03615 	stw	r3,216(sp)
     e1c:	d9003815 	stw	r4,224(sp)
     e20:	d9402d15 	stw	r5,180(sp)
     e24:	d9003617 	ldw	r4,216(sp)
     e28:	d9403817 	ldw	r5,224(sp)
     e2c:	da003d15 	stw	r8,244(sp)
     e30:	04000044 	movi	r16,1
     e34:	0007a580 	call	7a58 <__fpclassifyd>
     e38:	da003d17 	ldw	r8,244(sp)
     e3c:	14041f1e 	bne	r2,r16,1ebc <___vfprintf_internal_r+0x1684>
     e40:	d9003617 	ldw	r4,216(sp)
     e44:	d9403817 	ldw	r5,224(sp)
     e48:	000d883a 	mov	r6,zero
     e4c:	000f883a 	mov	r7,zero
     e50:	000ba5c0 	call	ba5c <__ledf2>
     e54:	da003d17 	ldw	r8,244(sp)
     e58:	1005be16 	blt	r2,zero,2554 <___vfprintf_internal_r+0x1d1c>
     e5c:	df002783 	ldbu	fp,158(sp)
     e60:	008011c4 	movi	r2,71
     e64:	1445330e 	bge	r2,r17,2334 <___vfprintf_internal_r+0x1afc>
     e68:	04000074 	movhi	r16,1
     e6c:	84023304 	addi	r16,r16,2252
     e70:	00c000c4 	movi	r3,3
     e74:	00bfdfc4 	movi	r2,-129
     e78:	d8c02a15 	stw	r3,168(sp)
     e7c:	90a4703a 	and	r18,r18,r2
     e80:	d8c02e15 	stw	r3,184(sp)
     e84:	d8002915 	stw	zero,164(sp)
     e88:	d8003215 	stw	zero,200(sp)
     e8c:	00003706 	br	f6c <___vfprintf_internal_r+0x734>
     e90:	94800214 	ori	r18,r18,8
     e94:	ac400007 	ldb	r17,0(r21)
     e98:	003ec806 	br	9bc <___vfprintf_internal_r+0x184>
     e9c:	18c03fcc 	andi	r3,r3,255
     ea0:	1806db1e 	bne	r3,zero,2a10 <___vfprintf_internal_r+0x21d8>
     ea4:	94800414 	ori	r18,r18,16
     ea8:	9080080c 	andi	r2,r18,32
     eac:	1002d826 	beq	r2,zero,1a10 <___vfprintf_internal_r+0x11d8>
     eb0:	d9402d17 	ldw	r5,180(sp)
     eb4:	d8c02917 	ldw	r3,164(sp)
     eb8:	d8002785 	stb	zero,158(sp)
     ebc:	28800204 	addi	r2,r5,8
     ec0:	2cc00017 	ldw	r19,0(r5)
     ec4:	2d800117 	ldw	r22,4(r5)
     ec8:	18048f16 	blt	r3,zero,2108 <___vfprintf_internal_r+0x18d0>
     ecc:	013fdfc4 	movi	r4,-129
     ed0:	9d86b03a 	or	r3,r19,r22
     ed4:	d8802d15 	stw	r2,180(sp)
     ed8:	9124703a 	and	r18,r18,r4
     edc:	1802d91e 	bne	r3,zero,1a44 <___vfprintf_internal_r+0x120c>
     ee0:	d8c02917 	ldw	r3,164(sp)
     ee4:	0039883a 	mov	fp,zero
     ee8:	1805c326 	beq	r3,zero,25f8 <___vfprintf_internal_r+0x1dc0>
     eec:	0027883a 	mov	r19,zero
     ef0:	002d883a 	mov	r22,zero
     ef4:	dc001e04 	addi	r16,sp,120
     ef8:	9806d0fa 	srli	r3,r19,3
     efc:	b008977a 	slli	r4,r22,29
     f00:	b02cd0fa 	srli	r22,r22,3
     f04:	9cc001cc 	andi	r19,r19,7
     f08:	98800c04 	addi	r2,r19,48
     f0c:	843fffc4 	addi	r16,r16,-1
     f10:	20e6b03a 	or	r19,r4,r3
     f14:	80800005 	stb	r2,0(r16)
     f18:	9d86b03a 	or	r3,r19,r22
     f1c:	183ff61e 	bne	r3,zero,ef8 <___vfprintf_internal_r+0x6c0>
     f20:	90c0004c 	andi	r3,r18,1
     f24:	18013b26 	beq	r3,zero,1414 <___vfprintf_internal_r+0xbdc>
     f28:	10803fcc 	andi	r2,r2,255
     f2c:	1080201c 	xori	r2,r2,128
     f30:	10bfe004 	addi	r2,r2,-128
     f34:	00c00c04 	movi	r3,48
     f38:	10c13626 	beq	r2,r3,1414 <___vfprintf_internal_r+0xbdc>
     f3c:	80ffffc5 	stb	r3,-1(r16)
     f40:	d8c02817 	ldw	r3,160(sp)
     f44:	80bfffc4 	addi	r2,r16,-1
     f48:	1021883a 	mov	r16,r2
     f4c:	1887c83a 	sub	r3,r3,r2
     f50:	d8c02e15 	stw	r3,184(sp)
     f54:	d8802e17 	ldw	r2,184(sp)
     f58:	d9002917 	ldw	r4,164(sp)
     f5c:	1100010e 	bge	r2,r4,f64 <___vfprintf_internal_r+0x72c>
     f60:	2005883a 	mov	r2,r4
     f64:	d8802a15 	stw	r2,168(sp)
     f68:	d8003215 	stw	zero,200(sp)
     f6c:	e7003fcc 	andi	fp,fp,255
     f70:	e700201c 	xori	fp,fp,128
     f74:	e73fe004 	addi	fp,fp,-128
     f78:	e0000326 	beq	fp,zero,f88 <___vfprintf_internal_r+0x750>
     f7c:	d8c02a17 	ldw	r3,168(sp)
     f80:	18c00044 	addi	r3,r3,1
     f84:	d8c02a15 	stw	r3,168(sp)
     f88:	90c0008c 	andi	r3,r18,2
     f8c:	d8c02b15 	stw	r3,172(sp)
     f90:	18000326 	beq	r3,zero,fa0 <___vfprintf_internal_r+0x768>
     f94:	d8c02a17 	ldw	r3,168(sp)
     f98:	18c00084 	addi	r3,r3,2
     f9c:	d8c02a15 	stw	r3,168(sp)
     fa0:	90c0210c 	andi	r3,r18,132
     fa4:	d8c03015 	stw	r3,192(sp)
     fa8:	1801a31e 	bne	r3,zero,1638 <___vfprintf_internal_r+0xe00>
     fac:	d9003117 	ldw	r4,196(sp)
     fb0:	d8c02a17 	ldw	r3,168(sp)
     fb4:	20e7c83a 	sub	r19,r4,r3
     fb8:	04c19f0e 	bge	zero,r19,1638 <___vfprintf_internal_r+0xe00>
     fbc:	02400404 	movi	r9,16
     fc0:	d8c02017 	ldw	r3,128(sp)
     fc4:	d8801f17 	ldw	r2,124(sp)
     fc8:	4cc50d0e 	bge	r9,r19,2400 <___vfprintf_internal_r+0x1bc8>
     fcc:	01400074 	movhi	r5,1
     fd0:	29424684 	addi	r5,r5,2330
     fd4:	dc403b15 	stw	r17,236(sp)
     fd8:	d9403515 	stw	r5,212(sp)
     fdc:	9823883a 	mov	r17,r19
     fe0:	482d883a 	mov	r22,r9
     fe4:	9027883a 	mov	r19,r18
     fe8:	070001c4 	movi	fp,7
     fec:	8025883a 	mov	r18,r16
     ff0:	dc002c17 	ldw	r16,176(sp)
     ff4:	00000306 	br	1004 <___vfprintf_internal_r+0x7cc>
     ff8:	8c7ffc04 	addi	r17,r17,-16
     ffc:	42000204 	addi	r8,r8,8
    1000:	b440130e 	bge	r22,r17,1050 <___vfprintf_internal_r+0x818>
    1004:	01000074 	movhi	r4,1
    1008:	18c00404 	addi	r3,r3,16
    100c:	10800044 	addi	r2,r2,1
    1010:	21024684 	addi	r4,r4,2330
    1014:	41000015 	stw	r4,0(r8)
    1018:	45800115 	stw	r22,4(r8)
    101c:	d8c02015 	stw	r3,128(sp)
    1020:	d8801f15 	stw	r2,124(sp)
    1024:	e0bff40e 	bge	fp,r2,ff8 <___vfprintf_internal_r+0x7c0>
    1028:	d9801e04 	addi	r6,sp,120
    102c:	b80b883a 	mov	r5,r23
    1030:	8009883a 	mov	r4,r16
    1034:	0007e340 	call	7e34 <__sprint_r>
    1038:	103f011e 	bne	r2,zero,c40 <___vfprintf_internal_r+0x408>
    103c:	8c7ffc04 	addi	r17,r17,-16
    1040:	d8c02017 	ldw	r3,128(sp)
    1044:	d8801f17 	ldw	r2,124(sp)
    1048:	da000404 	addi	r8,sp,16
    104c:	b47fed16 	blt	r22,r17,1004 <___vfprintf_internal_r+0x7cc>
    1050:	9021883a 	mov	r16,r18
    1054:	9825883a 	mov	r18,r19
    1058:	8827883a 	mov	r19,r17
    105c:	dc403b17 	ldw	r17,236(sp)
    1060:	d9403517 	ldw	r5,212(sp)
    1064:	98c7883a 	add	r3,r19,r3
    1068:	10800044 	addi	r2,r2,1
    106c:	41400015 	stw	r5,0(r8)
    1070:	44c00115 	stw	r19,4(r8)
    1074:	d8c02015 	stw	r3,128(sp)
    1078:	d8801f15 	stw	r2,124(sp)
    107c:	010001c4 	movi	r4,7
    1080:	2082a316 	blt	r4,r2,1b10 <___vfprintf_internal_r+0x12d8>
    1084:	df002787 	ldb	fp,158(sp)
    1088:	42000204 	addi	r8,r8,8
    108c:	e0000c26 	beq	fp,zero,10c0 <___vfprintf_internal_r+0x888>
    1090:	d8801f17 	ldw	r2,124(sp)
    1094:	d9002784 	addi	r4,sp,158
    1098:	18c00044 	addi	r3,r3,1
    109c:	10800044 	addi	r2,r2,1
    10a0:	41000015 	stw	r4,0(r8)
    10a4:	01000044 	movi	r4,1
    10a8:	41000115 	stw	r4,4(r8)
    10ac:	d8c02015 	stw	r3,128(sp)
    10b0:	d8801f15 	stw	r2,124(sp)
    10b4:	010001c4 	movi	r4,7
    10b8:	20823c16 	blt	r4,r2,19ac <___vfprintf_internal_r+0x1174>
    10bc:	42000204 	addi	r8,r8,8
    10c0:	d8802b17 	ldw	r2,172(sp)
    10c4:	10000c26 	beq	r2,zero,10f8 <___vfprintf_internal_r+0x8c0>
    10c8:	d8801f17 	ldw	r2,124(sp)
    10cc:	d9002704 	addi	r4,sp,156
    10d0:	18c00084 	addi	r3,r3,2
    10d4:	10800044 	addi	r2,r2,1
    10d8:	41000015 	stw	r4,0(r8)
    10dc:	01000084 	movi	r4,2
    10e0:	41000115 	stw	r4,4(r8)
    10e4:	d8c02015 	stw	r3,128(sp)
    10e8:	d8801f15 	stw	r2,124(sp)
    10ec:	010001c4 	movi	r4,7
    10f0:	20823616 	blt	r4,r2,19cc <___vfprintf_internal_r+0x1194>
    10f4:	42000204 	addi	r8,r8,8
    10f8:	d9003017 	ldw	r4,192(sp)
    10fc:	00802004 	movi	r2,128
    1100:	20819926 	beq	r4,r2,1768 <___vfprintf_internal_r+0xf30>
    1104:	d9402917 	ldw	r5,164(sp)
    1108:	d8802e17 	ldw	r2,184(sp)
    110c:	28adc83a 	sub	r22,r5,r2
    1110:	0580310e 	bge	zero,r22,11d8 <___vfprintf_internal_r+0x9a0>
    1114:	07000404 	movi	fp,16
    1118:	d8801f17 	ldw	r2,124(sp)
    111c:	e584140e 	bge	fp,r22,2170 <___vfprintf_internal_r+0x1938>
    1120:	01400074 	movhi	r5,1
    1124:	29424284 	addi	r5,r5,2314
    1128:	dc402915 	stw	r17,164(sp)
    112c:	d9402b15 	stw	r5,172(sp)
    1130:	b023883a 	mov	r17,r22
    1134:	04c001c4 	movi	r19,7
    1138:	a82d883a 	mov	r22,r21
    113c:	902b883a 	mov	r21,r18
    1140:	8025883a 	mov	r18,r16
    1144:	dc002c17 	ldw	r16,176(sp)
    1148:	00000306 	br	1158 <___vfprintf_internal_r+0x920>
    114c:	8c7ffc04 	addi	r17,r17,-16
    1150:	42000204 	addi	r8,r8,8
    1154:	e440110e 	bge	fp,r17,119c <___vfprintf_internal_r+0x964>
    1158:	18c00404 	addi	r3,r3,16
    115c:	10800044 	addi	r2,r2,1
    1160:	45000015 	stw	r20,0(r8)
    1164:	47000115 	stw	fp,4(r8)
    1168:	d8c02015 	stw	r3,128(sp)
    116c:	d8801f15 	stw	r2,124(sp)
    1170:	98bff60e 	bge	r19,r2,114c <___vfprintf_internal_r+0x914>
    1174:	d9801e04 	addi	r6,sp,120
    1178:	b80b883a 	mov	r5,r23
    117c:	8009883a 	mov	r4,r16
    1180:	0007e340 	call	7e34 <__sprint_r>
    1184:	103eae1e 	bne	r2,zero,c40 <___vfprintf_internal_r+0x408>
    1188:	8c7ffc04 	addi	r17,r17,-16
    118c:	d8c02017 	ldw	r3,128(sp)
    1190:	d8801f17 	ldw	r2,124(sp)
    1194:	da000404 	addi	r8,sp,16
    1198:	e47fef16 	blt	fp,r17,1158 <___vfprintf_internal_r+0x920>
    119c:	9021883a 	mov	r16,r18
    11a0:	a825883a 	mov	r18,r21
    11a4:	b02b883a 	mov	r21,r22
    11a8:	882d883a 	mov	r22,r17
    11ac:	dc402917 	ldw	r17,164(sp)
    11b0:	d9002b17 	ldw	r4,172(sp)
    11b4:	1d87883a 	add	r3,r3,r22
    11b8:	10800044 	addi	r2,r2,1
    11bc:	41000015 	stw	r4,0(r8)
    11c0:	45800115 	stw	r22,4(r8)
    11c4:	d8c02015 	stw	r3,128(sp)
    11c8:	d8801f15 	stw	r2,124(sp)
    11cc:	010001c4 	movi	r4,7
    11d0:	2081ee16 	blt	r4,r2,198c <___vfprintf_internal_r+0x1154>
    11d4:	42000204 	addi	r8,r8,8
    11d8:	9080400c 	andi	r2,r18,256
    11dc:	1001181e 	bne	r2,zero,1640 <___vfprintf_internal_r+0xe08>
    11e0:	d9402e17 	ldw	r5,184(sp)
    11e4:	d8801f17 	ldw	r2,124(sp)
    11e8:	44000015 	stw	r16,0(r8)
    11ec:	1947883a 	add	r3,r3,r5
    11f0:	10800044 	addi	r2,r2,1
    11f4:	41400115 	stw	r5,4(r8)
    11f8:	d8c02015 	stw	r3,128(sp)
    11fc:	d8801f15 	stw	r2,124(sp)
    1200:	010001c4 	movi	r4,7
    1204:	2081d316 	blt	r4,r2,1954 <___vfprintf_internal_r+0x111c>
    1208:	42000204 	addi	r8,r8,8
    120c:	9480010c 	andi	r18,r18,4
    1210:	90003226 	beq	r18,zero,12dc <___vfprintf_internal_r+0xaa4>
    1214:	d9403117 	ldw	r5,196(sp)
    1218:	d8802a17 	ldw	r2,168(sp)
    121c:	28a1c83a 	sub	r16,r5,r2
    1220:	04002e0e 	bge	zero,r16,12dc <___vfprintf_internal_r+0xaa4>
    1224:	04400404 	movi	r17,16
    1228:	d8801f17 	ldw	r2,124(sp)
    122c:	8c04a20e 	bge	r17,r16,24b8 <___vfprintf_internal_r+0x1c80>
    1230:	01400074 	movhi	r5,1
    1234:	29424684 	addi	r5,r5,2330
    1238:	d9403515 	stw	r5,212(sp)
    123c:	048001c4 	movi	r18,7
    1240:	dcc02c17 	ldw	r19,176(sp)
    1244:	00000306 	br	1254 <___vfprintf_internal_r+0xa1c>
    1248:	843ffc04 	addi	r16,r16,-16
    124c:	42000204 	addi	r8,r8,8
    1250:	8c00130e 	bge	r17,r16,12a0 <___vfprintf_internal_r+0xa68>
    1254:	01000074 	movhi	r4,1
    1258:	18c00404 	addi	r3,r3,16
    125c:	10800044 	addi	r2,r2,1
    1260:	21024684 	addi	r4,r4,2330
    1264:	41000015 	stw	r4,0(r8)
    1268:	44400115 	stw	r17,4(r8)
    126c:	d8c02015 	stw	r3,128(sp)
    1270:	d8801f15 	stw	r2,124(sp)
    1274:	90bff40e 	bge	r18,r2,1248 <___vfprintf_internal_r+0xa10>
    1278:	d9801e04 	addi	r6,sp,120
    127c:	b80b883a 	mov	r5,r23
    1280:	9809883a 	mov	r4,r19
    1284:	0007e340 	call	7e34 <__sprint_r>
    1288:	103e6d1e 	bne	r2,zero,c40 <___vfprintf_internal_r+0x408>
    128c:	843ffc04 	addi	r16,r16,-16
    1290:	d8c02017 	ldw	r3,128(sp)
    1294:	d8801f17 	ldw	r2,124(sp)
    1298:	da000404 	addi	r8,sp,16
    129c:	8c3fed16 	blt	r17,r16,1254 <___vfprintf_internal_r+0xa1c>
    12a0:	d9403517 	ldw	r5,212(sp)
    12a4:	1c07883a 	add	r3,r3,r16
    12a8:	10800044 	addi	r2,r2,1
    12ac:	41400015 	stw	r5,0(r8)
    12b0:	44000115 	stw	r16,4(r8)
    12b4:	d8c02015 	stw	r3,128(sp)
    12b8:	d8801f15 	stw	r2,124(sp)
    12bc:	010001c4 	movi	r4,7
    12c0:	2080060e 	bge	r4,r2,12dc <___vfprintf_internal_r+0xaa4>
    12c4:	d9002c17 	ldw	r4,176(sp)
    12c8:	d9801e04 	addi	r6,sp,120
    12cc:	b80b883a 	mov	r5,r23
    12d0:	0007e340 	call	7e34 <__sprint_r>
    12d4:	103e5a1e 	bne	r2,zero,c40 <___vfprintf_internal_r+0x408>
    12d8:	d8c02017 	ldw	r3,128(sp)
    12dc:	d8803117 	ldw	r2,196(sp)
    12e0:	d9002a17 	ldw	r4,168(sp)
    12e4:	1100010e 	bge	r2,r4,12ec <___vfprintf_internal_r+0xab4>
    12e8:	2005883a 	mov	r2,r4
    12ec:	d9402f17 	ldw	r5,188(sp)
    12f0:	288b883a 	add	r5,r5,r2
    12f4:	d9402f15 	stw	r5,188(sp)
    12f8:	18019e1e 	bne	r3,zero,1974 <___vfprintf_internal_r+0x113c>
    12fc:	a8800007 	ldb	r2,0(r21)
    1300:	d8001f15 	stw	zero,124(sp)
    1304:	da000404 	addi	r8,sp,16
    1308:	103d851e 	bne	r2,zero,920 <___vfprintf_internal_r+0xe8>
    130c:	a821883a 	mov	r16,r21
    1310:	003d9b06 	br	980 <___vfprintf_internal_r+0x148>
    1314:	18c03fcc 	andi	r3,r3,255
    1318:	1805c11e 	bne	r3,zero,2a20 <___vfprintf_internal_r+0x21e8>
    131c:	94800414 	ori	r18,r18,16
    1320:	9080080c 	andi	r2,r18,32
    1324:	10020c26 	beq	r2,zero,1b58 <___vfprintf_internal_r+0x1320>
    1328:	d8802d17 	ldw	r2,180(sp)
    132c:	d9002917 	ldw	r4,164(sp)
    1330:	d8002785 	stb	zero,158(sp)
    1334:	10c00204 	addi	r3,r2,8
    1338:	14c00017 	ldw	r19,0(r2)
    133c:	15800117 	ldw	r22,4(r2)
    1340:	20040f16 	blt	r4,zero,2380 <___vfprintf_internal_r+0x1b48>
    1344:	013fdfc4 	movi	r4,-129
    1348:	9d84b03a 	or	r2,r19,r22
    134c:	d8c02d15 	stw	r3,180(sp)
    1350:	9124703a 	and	r18,r18,r4
    1354:	0039883a 	mov	fp,zero
    1358:	103e891e 	bne	r2,zero,d80 <___vfprintf_internal_r+0x548>
    135c:	d9002917 	ldw	r4,164(sp)
    1360:	2002c11e 	bne	r4,zero,1e68 <___vfprintf_internal_r+0x1630>
    1364:	d8002915 	stw	zero,164(sp)
    1368:	d8002e15 	stw	zero,184(sp)
    136c:	dc001e04 	addi	r16,sp,120
    1370:	003ef806 	br	f54 <___vfprintf_internal_r+0x71c>
    1374:	18c03fcc 	andi	r3,r3,255
    1378:	18059d1e 	bne	r3,zero,29f0 <___vfprintf_internal_r+0x21b8>
    137c:	01400074 	movhi	r5,1
    1380:	29423604 	addi	r5,r5,2264
    1384:	d9403915 	stw	r5,228(sp)
    1388:	9080080c 	andi	r2,r18,32
    138c:	10005226 	beq	r2,zero,14d8 <___vfprintf_internal_r+0xca0>
    1390:	d8802d17 	ldw	r2,180(sp)
    1394:	14c00017 	ldw	r19,0(r2)
    1398:	15800117 	ldw	r22,4(r2)
    139c:	10800204 	addi	r2,r2,8
    13a0:	d8802d15 	stw	r2,180(sp)
    13a4:	9080004c 	andi	r2,r18,1
    13a8:	10019026 	beq	r2,zero,19ec <___vfprintf_internal_r+0x11b4>
    13ac:	9d84b03a 	or	r2,r19,r22
    13b0:	10036926 	beq	r2,zero,2158 <___vfprintf_internal_r+0x1920>
    13b4:	d8c02917 	ldw	r3,164(sp)
    13b8:	00800c04 	movi	r2,48
    13bc:	d8802705 	stb	r2,156(sp)
    13c0:	dc402745 	stb	r17,157(sp)
    13c4:	d8002785 	stb	zero,158(sp)
    13c8:	90800094 	ori	r2,r18,2
    13cc:	18045d16 	blt	r3,zero,2544 <___vfprintf_internal_r+0x1d0c>
    13d0:	00bfdfc4 	movi	r2,-129
    13d4:	90a4703a 	and	r18,r18,r2
    13d8:	94800094 	ori	r18,r18,2
    13dc:	0039883a 	mov	fp,zero
    13e0:	d9003917 	ldw	r4,228(sp)
    13e4:	dc001e04 	addi	r16,sp,120
    13e8:	988003cc 	andi	r2,r19,15
    13ec:	b006973a 	slli	r3,r22,28
    13f0:	2085883a 	add	r2,r4,r2
    13f4:	9826d13a 	srli	r19,r19,4
    13f8:	10800003 	ldbu	r2,0(r2)
    13fc:	b02cd13a 	srli	r22,r22,4
    1400:	843fffc4 	addi	r16,r16,-1
    1404:	1ce6b03a 	or	r19,r3,r19
    1408:	80800005 	stb	r2,0(r16)
    140c:	9d84b03a 	or	r2,r19,r22
    1410:	103ff51e 	bne	r2,zero,13e8 <___vfprintf_internal_r+0xbb0>
    1414:	d8c02817 	ldw	r3,160(sp)
    1418:	1c07c83a 	sub	r3,r3,r16
    141c:	d8c02e15 	stw	r3,184(sp)
    1420:	003ecc06 	br	f54 <___vfprintf_internal_r+0x71c>
    1424:	18c03fcc 	andi	r3,r3,255
    1428:	183e9f26 	beq	r3,zero,ea8 <___vfprintf_internal_r+0x670>
    142c:	d9c02785 	stb	r7,158(sp)
    1430:	003e9d06 	br	ea8 <___vfprintf_internal_r+0x670>
    1434:	00c00044 	movi	r3,1
    1438:	01c00ac4 	movi	r7,43
    143c:	ac400007 	ldb	r17,0(r21)
    1440:	003d5e06 	br	9bc <___vfprintf_internal_r+0x184>
    1444:	94800814 	ori	r18,r18,32
    1448:	ac400007 	ldb	r17,0(r21)
    144c:	003d5b06 	br	9bc <___vfprintf_internal_r+0x184>
    1450:	d8c02d17 	ldw	r3,180(sp)
    1454:	d8002785 	stb	zero,158(sp)
    1458:	1c000017 	ldw	r16,0(r3)
    145c:	1cc00104 	addi	r19,r3,4
    1460:	80041926 	beq	r16,zero,24c8 <___vfprintf_internal_r+0x1c90>
    1464:	d9002917 	ldw	r4,164(sp)
    1468:	2003d016 	blt	r4,zero,23ac <___vfprintf_internal_r+0x1b74>
    146c:	200d883a 	mov	r6,r4
    1470:	000b883a 	mov	r5,zero
    1474:	8009883a 	mov	r4,r16
    1478:	da003d15 	stw	r8,244(sp)
    147c:	00060480 	call	6048 <memchr>
    1480:	da003d17 	ldw	r8,244(sp)
    1484:	10045426 	beq	r2,zero,25d8 <___vfprintf_internal_r+0x1da0>
    1488:	1405c83a 	sub	r2,r2,r16
    148c:	d8802e15 	stw	r2,184(sp)
    1490:	1003cc16 	blt	r2,zero,23c4 <___vfprintf_internal_r+0x1b8c>
    1494:	df002783 	ldbu	fp,158(sp)
    1498:	d8802a15 	stw	r2,168(sp)
    149c:	dcc02d15 	stw	r19,180(sp)
    14a0:	d8002915 	stw	zero,164(sp)
    14a4:	d8003215 	stw	zero,200(sp)
    14a8:	003eb006 	br	f6c <___vfprintf_internal_r+0x734>
    14ac:	18c03fcc 	andi	r3,r3,255
    14b0:	183f9b26 	beq	r3,zero,1320 <___vfprintf_internal_r+0xae8>
    14b4:	d9c02785 	stb	r7,158(sp)
    14b8:	003f9906 	br	1320 <___vfprintf_internal_r+0xae8>
    14bc:	18c03fcc 	andi	r3,r3,255
    14c0:	1805551e 	bne	r3,zero,2a18 <___vfprintf_internal_r+0x21e0>
    14c4:	01400074 	movhi	r5,1
    14c8:	29423b04 	addi	r5,r5,2284
    14cc:	d9403915 	stw	r5,228(sp)
    14d0:	9080080c 	andi	r2,r18,32
    14d4:	103fae1e 	bne	r2,zero,1390 <___vfprintf_internal_r+0xb58>
    14d8:	9080040c 	andi	r2,r18,16
    14dc:	1002de26 	beq	r2,zero,2058 <___vfprintf_internal_r+0x1820>
    14e0:	d8c02d17 	ldw	r3,180(sp)
    14e4:	002d883a 	mov	r22,zero
    14e8:	1cc00017 	ldw	r19,0(r3)
    14ec:	18c00104 	addi	r3,r3,4
    14f0:	d8c02d15 	stw	r3,180(sp)
    14f4:	003fab06 	br	13a4 <___vfprintf_internal_r+0xb6c>
    14f8:	38803fcc 	andi	r2,r7,255
    14fc:	1080201c 	xori	r2,r2,128
    1500:	10bfe004 	addi	r2,r2,-128
    1504:	1002d21e 	bne	r2,zero,2050 <___vfprintf_internal_r+0x1818>
    1508:	00c00044 	movi	r3,1
    150c:	01c00804 	movi	r7,32
    1510:	ac400007 	ldb	r17,0(r21)
    1514:	003d2906 	br	9bc <___vfprintf_internal_r+0x184>
    1518:	94800054 	ori	r18,r18,1
    151c:	ac400007 	ldb	r17,0(r21)
    1520:	003d2606 	br	9bc <___vfprintf_internal_r+0x184>
    1524:	18c03fcc 	andi	r3,r3,255
    1528:	183e0526 	beq	r3,zero,d40 <___vfprintf_internal_r+0x508>
    152c:	d9c02785 	stb	r7,158(sp)
    1530:	003e0306 	br	d40 <___vfprintf_internal_r+0x508>
    1534:	94801014 	ori	r18,r18,64
    1538:	ac400007 	ldb	r17,0(r21)
    153c:	003d1f06 	br	9bc <___vfprintf_internal_r+0x184>
    1540:	ac400007 	ldb	r17,0(r21)
    1544:	8a438726 	beq	r17,r9,2364 <___vfprintf_internal_r+0x1b2c>
    1548:	94800414 	ori	r18,r18,16
    154c:	003d1b06 	br	9bc <___vfprintf_internal_r+0x184>
    1550:	18c03fcc 	andi	r3,r3,255
    1554:	1805341e 	bne	r3,zero,2a28 <___vfprintf_internal_r+0x21f0>
    1558:	9080080c 	andi	r2,r18,32
    155c:	1002cd26 	beq	r2,zero,2094 <___vfprintf_internal_r+0x185c>
    1560:	d9402d17 	ldw	r5,180(sp)
    1564:	d9002f17 	ldw	r4,188(sp)
    1568:	28800017 	ldw	r2,0(r5)
    156c:	2007d7fa 	srai	r3,r4,31
    1570:	29400104 	addi	r5,r5,4
    1574:	d9402d15 	stw	r5,180(sp)
    1578:	11000015 	stw	r4,0(r2)
    157c:	10c00115 	stw	r3,4(r2)
    1580:	003ce506 	br	918 <___vfprintf_internal_r+0xe0>
    1584:	d8c02d17 	ldw	r3,180(sp)
    1588:	d9002d17 	ldw	r4,180(sp)
    158c:	d8002785 	stb	zero,158(sp)
    1590:	18800017 	ldw	r2,0(r3)
    1594:	21000104 	addi	r4,r4,4
    1598:	00c00044 	movi	r3,1
    159c:	d8c02a15 	stw	r3,168(sp)
    15a0:	d8801405 	stb	r2,80(sp)
    15a4:	d9002d15 	stw	r4,180(sp)
    15a8:	d8c02e15 	stw	r3,184(sp)
    15ac:	d8002915 	stw	zero,164(sp)
    15b0:	d8003215 	stw	zero,200(sp)
    15b4:	dc001404 	addi	r16,sp,80
    15b8:	0039883a 	mov	fp,zero
    15bc:	003e7206 	br	f88 <___vfprintf_internal_r+0x750>
    15c0:	01000074 	movhi	r4,1
    15c4:	21023b04 	addi	r4,r4,2284
    15c8:	0039883a 	mov	fp,zero
    15cc:	d9003915 	stw	r4,228(sp)
    15d0:	04401e04 	movi	r17,120
    15d4:	003f8206 	br	13e0 <___vfprintf_internal_r+0xba8>
    15d8:	18c03fcc 	andi	r3,r3,255
    15dc:	1805061e 	bne	r3,zero,29f8 <___vfprintf_internal_r+0x21c0>
    15e0:	883d9126 	beq	r17,zero,c28 <___vfprintf_internal_r+0x3f0>
    15e4:	00c00044 	movi	r3,1
    15e8:	d8c02a15 	stw	r3,168(sp)
    15ec:	dc401405 	stb	r17,80(sp)
    15f0:	d8002785 	stb	zero,158(sp)
    15f4:	003fec06 	br	15a8 <___vfprintf_internal_r+0xd70>
    15f8:	01400074 	movhi	r5,1
    15fc:	29423b04 	addi	r5,r5,2284
    1600:	d9403915 	stw	r5,228(sp)
    1604:	d8c02d15 	stw	r3,180(sp)
    1608:	1025883a 	mov	r18,r2
    160c:	04401e04 	movi	r17,120
    1610:	9d84b03a 	or	r2,r19,r22
    1614:	1000fc1e 	bne	r2,zero,1a08 <___vfprintf_internal_r+0x11d0>
    1618:	0039883a 	mov	fp,zero
    161c:	00800084 	movi	r2,2
    1620:	10803fcc 	andi	r2,r2,255
    1624:	00c00044 	movi	r3,1
    1628:	10c20f26 	beq	r2,r3,1e68 <___vfprintf_internal_r+0x1630>
    162c:	00c00084 	movi	r3,2
    1630:	10fd6326 	beq	r2,r3,bc0 <___vfprintf_internal_r+0x388>
    1634:	003e2d06 	br	eec <___vfprintf_internal_r+0x6b4>
    1638:	d8c02017 	ldw	r3,128(sp)
    163c:	003e9306 	br	108c <___vfprintf_internal_r+0x854>
    1640:	00801944 	movi	r2,101
    1644:	14407e0e 	bge	r2,r17,1840 <___vfprintf_internal_r+0x1008>
    1648:	d9003617 	ldw	r4,216(sp)
    164c:	d9403817 	ldw	r5,224(sp)
    1650:	000d883a 	mov	r6,zero
    1654:	000f883a 	mov	r7,zero
    1658:	d8c03c15 	stw	r3,240(sp)
    165c:	da003d15 	stw	r8,244(sp)
    1660:	000b8f80 	call	b8f8 <__eqdf2>
    1664:	d8c03c17 	ldw	r3,240(sp)
    1668:	da003d17 	ldw	r8,244(sp)
    166c:	1000f71e 	bne	r2,zero,1a4c <___vfprintf_internal_r+0x1214>
    1670:	d8801f17 	ldw	r2,124(sp)
    1674:	01000074 	movhi	r4,1
    1678:	21024204 	addi	r4,r4,2312
    167c:	18c00044 	addi	r3,r3,1
    1680:	10800044 	addi	r2,r2,1
    1684:	41000015 	stw	r4,0(r8)
    1688:	01000044 	movi	r4,1
    168c:	41000115 	stw	r4,4(r8)
    1690:	d8c02015 	stw	r3,128(sp)
    1694:	d8801f15 	stw	r2,124(sp)
    1698:	010001c4 	movi	r4,7
    169c:	2082b816 	blt	r4,r2,2180 <___vfprintf_internal_r+0x1948>
    16a0:	42000204 	addi	r8,r8,8
    16a4:	d8802617 	ldw	r2,152(sp)
    16a8:	d9403317 	ldw	r5,204(sp)
    16ac:	11400216 	blt	r2,r5,16b8 <___vfprintf_internal_r+0xe80>
    16b0:	9080004c 	andi	r2,r18,1
    16b4:	103ed526 	beq	r2,zero,120c <___vfprintf_internal_r+0x9d4>
    16b8:	d8803717 	ldw	r2,220(sp)
    16bc:	d9003417 	ldw	r4,208(sp)
    16c0:	d9403717 	ldw	r5,220(sp)
    16c4:	1887883a 	add	r3,r3,r2
    16c8:	d8801f17 	ldw	r2,124(sp)
    16cc:	41000015 	stw	r4,0(r8)
    16d0:	41400115 	stw	r5,4(r8)
    16d4:	10800044 	addi	r2,r2,1
    16d8:	d8c02015 	stw	r3,128(sp)
    16dc:	d8801f15 	stw	r2,124(sp)
    16e0:	010001c4 	movi	r4,7
    16e4:	20832916 	blt	r4,r2,238c <___vfprintf_internal_r+0x1b54>
    16e8:	42000204 	addi	r8,r8,8
    16ec:	d8803317 	ldw	r2,204(sp)
    16f0:	143fffc4 	addi	r16,r2,-1
    16f4:	043ec50e 	bge	zero,r16,120c <___vfprintf_internal_r+0x9d4>
    16f8:	04400404 	movi	r17,16
    16fc:	d8801f17 	ldw	r2,124(sp)
    1700:	8c00880e 	bge	r17,r16,1924 <___vfprintf_internal_r+0x10ec>
    1704:	01400074 	movhi	r5,1
    1708:	29424284 	addi	r5,r5,2314
    170c:	d9402b15 	stw	r5,172(sp)
    1710:	058001c4 	movi	r22,7
    1714:	dcc02c17 	ldw	r19,176(sp)
    1718:	00000306 	br	1728 <___vfprintf_internal_r+0xef0>
    171c:	42000204 	addi	r8,r8,8
    1720:	843ffc04 	addi	r16,r16,-16
    1724:	8c00820e 	bge	r17,r16,1930 <___vfprintf_internal_r+0x10f8>
    1728:	18c00404 	addi	r3,r3,16
    172c:	10800044 	addi	r2,r2,1
    1730:	45000015 	stw	r20,0(r8)
    1734:	44400115 	stw	r17,4(r8)
    1738:	d8c02015 	stw	r3,128(sp)
    173c:	d8801f15 	stw	r2,124(sp)
    1740:	b0bff60e 	bge	r22,r2,171c <___vfprintf_internal_r+0xee4>
    1744:	d9801e04 	addi	r6,sp,120
    1748:	b80b883a 	mov	r5,r23
    174c:	9809883a 	mov	r4,r19
    1750:	0007e340 	call	7e34 <__sprint_r>
    1754:	103d3a1e 	bne	r2,zero,c40 <___vfprintf_internal_r+0x408>
    1758:	d8c02017 	ldw	r3,128(sp)
    175c:	d8801f17 	ldw	r2,124(sp)
    1760:	da000404 	addi	r8,sp,16
    1764:	003fee06 	br	1720 <___vfprintf_internal_r+0xee8>
    1768:	d9403117 	ldw	r5,196(sp)
    176c:	d8802a17 	ldw	r2,168(sp)
    1770:	28adc83a 	sub	r22,r5,r2
    1774:	05be630e 	bge	zero,r22,1104 <___vfprintf_internal_r+0x8cc>
    1778:	07000404 	movi	fp,16
    177c:	d8801f17 	ldw	r2,124(sp)
    1780:	e5838f0e 	bge	fp,r22,25c0 <___vfprintf_internal_r+0x1d88>
    1784:	01400074 	movhi	r5,1
    1788:	29424284 	addi	r5,r5,2314
    178c:	dc403015 	stw	r17,192(sp)
    1790:	d9402b15 	stw	r5,172(sp)
    1794:	b023883a 	mov	r17,r22
    1798:	04c001c4 	movi	r19,7
    179c:	a82d883a 	mov	r22,r21
    17a0:	902b883a 	mov	r21,r18
    17a4:	8025883a 	mov	r18,r16
    17a8:	dc002c17 	ldw	r16,176(sp)
    17ac:	00000306 	br	17bc <___vfprintf_internal_r+0xf84>
    17b0:	8c7ffc04 	addi	r17,r17,-16
    17b4:	42000204 	addi	r8,r8,8
    17b8:	e440110e 	bge	fp,r17,1800 <___vfprintf_internal_r+0xfc8>
    17bc:	18c00404 	addi	r3,r3,16
    17c0:	10800044 	addi	r2,r2,1
    17c4:	45000015 	stw	r20,0(r8)
    17c8:	47000115 	stw	fp,4(r8)
    17cc:	d8c02015 	stw	r3,128(sp)
    17d0:	d8801f15 	stw	r2,124(sp)
    17d4:	98bff60e 	bge	r19,r2,17b0 <___vfprintf_internal_r+0xf78>
    17d8:	d9801e04 	addi	r6,sp,120
    17dc:	b80b883a 	mov	r5,r23
    17e0:	8009883a 	mov	r4,r16
    17e4:	0007e340 	call	7e34 <__sprint_r>
    17e8:	103d151e 	bne	r2,zero,c40 <___vfprintf_internal_r+0x408>
    17ec:	8c7ffc04 	addi	r17,r17,-16
    17f0:	d8c02017 	ldw	r3,128(sp)
    17f4:	d8801f17 	ldw	r2,124(sp)
    17f8:	da000404 	addi	r8,sp,16
    17fc:	e47fef16 	blt	fp,r17,17bc <___vfprintf_internal_r+0xf84>
    1800:	9021883a 	mov	r16,r18
    1804:	a825883a 	mov	r18,r21
    1808:	b02b883a 	mov	r21,r22
    180c:	882d883a 	mov	r22,r17
    1810:	dc403017 	ldw	r17,192(sp)
    1814:	d9002b17 	ldw	r4,172(sp)
    1818:	1d87883a 	add	r3,r3,r22
    181c:	10800044 	addi	r2,r2,1
    1820:	41000015 	stw	r4,0(r8)
    1824:	45800115 	stw	r22,4(r8)
    1828:	d8c02015 	stw	r3,128(sp)
    182c:	d8801f15 	stw	r2,124(sp)
    1830:	010001c4 	movi	r4,7
    1834:	20818e16 	blt	r4,r2,1e70 <___vfprintf_internal_r+0x1638>
    1838:	42000204 	addi	r8,r8,8
    183c:	003e3106 	br	1104 <___vfprintf_internal_r+0x8cc>
    1840:	d9403317 	ldw	r5,204(sp)
    1844:	00800044 	movi	r2,1
    1848:	18c00044 	addi	r3,r3,1
    184c:	1141530e 	bge	r2,r5,1d9c <___vfprintf_internal_r+0x1564>
    1850:	dc401f17 	ldw	r17,124(sp)
    1854:	00800044 	movi	r2,1
    1858:	40800115 	stw	r2,4(r8)
    185c:	8c400044 	addi	r17,r17,1
    1860:	44000015 	stw	r16,0(r8)
    1864:	d8c02015 	stw	r3,128(sp)
    1868:	dc401f15 	stw	r17,124(sp)
    186c:	008001c4 	movi	r2,7
    1870:	14416b16 	blt	r2,r17,1e20 <___vfprintf_internal_r+0x15e8>
    1874:	42000204 	addi	r8,r8,8
    1878:	d8803717 	ldw	r2,220(sp)
    187c:	d9003417 	ldw	r4,208(sp)
    1880:	8c400044 	addi	r17,r17,1
    1884:	10c7883a 	add	r3,r2,r3
    1888:	40800115 	stw	r2,4(r8)
    188c:	41000015 	stw	r4,0(r8)
    1890:	d8c02015 	stw	r3,128(sp)
    1894:	dc401f15 	stw	r17,124(sp)
    1898:	008001c4 	movi	r2,7
    189c:	14416916 	blt	r2,r17,1e44 <___vfprintf_internal_r+0x160c>
    18a0:	45800204 	addi	r22,r8,8
    18a4:	d9003617 	ldw	r4,216(sp)
    18a8:	d9403817 	ldw	r5,224(sp)
    18ac:	000d883a 	mov	r6,zero
    18b0:	000f883a 	mov	r7,zero
    18b4:	d8c03c15 	stw	r3,240(sp)
    18b8:	000b8f80 	call	b8f8 <__eqdf2>
    18bc:	d8c03c17 	ldw	r3,240(sp)
    18c0:	1000bc26 	beq	r2,zero,1bb4 <___vfprintf_internal_r+0x137c>
    18c4:	d9403317 	ldw	r5,204(sp)
    18c8:	84000044 	addi	r16,r16,1
    18cc:	8c400044 	addi	r17,r17,1
    18d0:	28bfffc4 	addi	r2,r5,-1
    18d4:	1887883a 	add	r3,r3,r2
    18d8:	b0800115 	stw	r2,4(r22)
    18dc:	b4000015 	stw	r16,0(r22)
    18e0:	d8c02015 	stw	r3,128(sp)
    18e4:	dc401f15 	stw	r17,124(sp)
    18e8:	008001c4 	movi	r2,7
    18ec:	14414316 	blt	r2,r17,1dfc <___vfprintf_internal_r+0x15c4>
    18f0:	b5800204 	addi	r22,r22,8
    18f4:	d9003a17 	ldw	r4,232(sp)
    18f8:	df0022c4 	addi	fp,sp,139
    18fc:	8c400044 	addi	r17,r17,1
    1900:	20c7883a 	add	r3,r4,r3
    1904:	b7000015 	stw	fp,0(r22)
    1908:	b1000115 	stw	r4,4(r22)
    190c:	d8c02015 	stw	r3,128(sp)
    1910:	dc401f15 	stw	r17,124(sp)
    1914:	008001c4 	movi	r2,7
    1918:	14400e16 	blt	r2,r17,1954 <___vfprintf_internal_r+0x111c>
    191c:	b2000204 	addi	r8,r22,8
    1920:	003e3a06 	br	120c <___vfprintf_internal_r+0x9d4>
    1924:	01000074 	movhi	r4,1
    1928:	21024284 	addi	r4,r4,2314
    192c:	d9002b15 	stw	r4,172(sp)
    1930:	d9002b17 	ldw	r4,172(sp)
    1934:	1c07883a 	add	r3,r3,r16
    1938:	44000115 	stw	r16,4(r8)
    193c:	41000015 	stw	r4,0(r8)
    1940:	10800044 	addi	r2,r2,1
    1944:	d8c02015 	stw	r3,128(sp)
    1948:	d8801f15 	stw	r2,124(sp)
    194c:	010001c4 	movi	r4,7
    1950:	20be2d0e 	bge	r4,r2,1208 <___vfprintf_internal_r+0x9d0>
    1954:	d9002c17 	ldw	r4,176(sp)
    1958:	d9801e04 	addi	r6,sp,120
    195c:	b80b883a 	mov	r5,r23
    1960:	0007e340 	call	7e34 <__sprint_r>
    1964:	103cb61e 	bne	r2,zero,c40 <___vfprintf_internal_r+0x408>
    1968:	d8c02017 	ldw	r3,128(sp)
    196c:	da000404 	addi	r8,sp,16
    1970:	003e2606 	br	120c <___vfprintf_internal_r+0x9d4>
    1974:	d9002c17 	ldw	r4,176(sp)
    1978:	d9801e04 	addi	r6,sp,120
    197c:	b80b883a 	mov	r5,r23
    1980:	0007e340 	call	7e34 <__sprint_r>
    1984:	103e5d26 	beq	r2,zero,12fc <___vfprintf_internal_r+0xac4>
    1988:	003cad06 	br	c40 <___vfprintf_internal_r+0x408>
    198c:	d9002c17 	ldw	r4,176(sp)
    1990:	d9801e04 	addi	r6,sp,120
    1994:	b80b883a 	mov	r5,r23
    1998:	0007e340 	call	7e34 <__sprint_r>
    199c:	103ca81e 	bne	r2,zero,c40 <___vfprintf_internal_r+0x408>
    19a0:	d8c02017 	ldw	r3,128(sp)
    19a4:	da000404 	addi	r8,sp,16
    19a8:	003e0b06 	br	11d8 <___vfprintf_internal_r+0x9a0>
    19ac:	d9002c17 	ldw	r4,176(sp)
    19b0:	d9801e04 	addi	r6,sp,120
    19b4:	b80b883a 	mov	r5,r23
    19b8:	0007e340 	call	7e34 <__sprint_r>
    19bc:	103ca01e 	bne	r2,zero,c40 <___vfprintf_internal_r+0x408>
    19c0:	d8c02017 	ldw	r3,128(sp)
    19c4:	da000404 	addi	r8,sp,16
    19c8:	003dbd06 	br	10c0 <___vfprintf_internal_r+0x888>
    19cc:	d9002c17 	ldw	r4,176(sp)
    19d0:	d9801e04 	addi	r6,sp,120
    19d4:	b80b883a 	mov	r5,r23
    19d8:	0007e340 	call	7e34 <__sprint_r>
    19dc:	103c981e 	bne	r2,zero,c40 <___vfprintf_internal_r+0x408>
    19e0:	d8c02017 	ldw	r3,128(sp)
    19e4:	da000404 	addi	r8,sp,16
    19e8:	003dc306 	br	10f8 <___vfprintf_internal_r+0x8c0>
    19ec:	d8802917 	ldw	r2,164(sp)
    19f0:	d8002785 	stb	zero,158(sp)
    19f4:	103f0616 	blt	r2,zero,1610 <___vfprintf_internal_r+0xdd8>
    19f8:	00ffdfc4 	movi	r3,-129
    19fc:	9d84b03a 	or	r2,r19,r22
    1a00:	90e4703a 	and	r18,r18,r3
    1a04:	103c6b26 	beq	r2,zero,bb4 <___vfprintf_internal_r+0x37c>
    1a08:	0039883a 	mov	fp,zero
    1a0c:	003e7406 	br	13e0 <___vfprintf_internal_r+0xba8>
    1a10:	9080040c 	andi	r2,r18,16
    1a14:	1001b326 	beq	r2,zero,20e4 <___vfprintf_internal_r+0x18ac>
    1a18:	d9002d17 	ldw	r4,180(sp)
    1a1c:	d9402917 	ldw	r5,164(sp)
    1a20:	d8002785 	stb	zero,158(sp)
    1a24:	20800104 	addi	r2,r4,4
    1a28:	24c00017 	ldw	r19,0(r4)
    1a2c:	002d883a 	mov	r22,zero
    1a30:	2801b516 	blt	r5,zero,2108 <___vfprintf_internal_r+0x18d0>
    1a34:	00ffdfc4 	movi	r3,-129
    1a38:	d8802d15 	stw	r2,180(sp)
    1a3c:	90e4703a 	and	r18,r18,r3
    1a40:	983d2726 	beq	r19,zero,ee0 <___vfprintf_internal_r+0x6a8>
    1a44:	0039883a 	mov	fp,zero
    1a48:	003d2a06 	br	ef4 <___vfprintf_internal_r+0x6bc>
    1a4c:	dc402617 	ldw	r17,152(sp)
    1a50:	0441d30e 	bge	zero,r17,21a0 <___vfprintf_internal_r+0x1968>
    1a54:	dc403217 	ldw	r17,200(sp)
    1a58:	d8803317 	ldw	r2,204(sp)
    1a5c:	1440010e 	bge	r2,r17,1a64 <___vfprintf_internal_r+0x122c>
    1a60:	1023883a 	mov	r17,r2
    1a64:	04400a0e 	bge	zero,r17,1a90 <___vfprintf_internal_r+0x1258>
    1a68:	d8801f17 	ldw	r2,124(sp)
    1a6c:	1c47883a 	add	r3,r3,r17
    1a70:	44000015 	stw	r16,0(r8)
    1a74:	10800044 	addi	r2,r2,1
    1a78:	44400115 	stw	r17,4(r8)
    1a7c:	d8c02015 	stw	r3,128(sp)
    1a80:	d8801f15 	stw	r2,124(sp)
    1a84:	010001c4 	movi	r4,7
    1a88:	20826516 	blt	r4,r2,2420 <___vfprintf_internal_r+0x1be8>
    1a8c:	42000204 	addi	r8,r8,8
    1a90:	88026116 	blt	r17,zero,2418 <___vfprintf_internal_r+0x1be0>
    1a94:	d9003217 	ldw	r4,200(sp)
    1a98:	2463c83a 	sub	r17,r4,r17
    1a9c:	04407b0e 	bge	zero,r17,1c8c <___vfprintf_internal_r+0x1454>
    1aa0:	05800404 	movi	r22,16
    1aa4:	d8801f17 	ldw	r2,124(sp)
    1aa8:	b4419d0e 	bge	r22,r17,2120 <___vfprintf_internal_r+0x18e8>
    1aac:	01000074 	movhi	r4,1
    1ab0:	21024284 	addi	r4,r4,2314
    1ab4:	d9002b15 	stw	r4,172(sp)
    1ab8:	070001c4 	movi	fp,7
    1abc:	dcc02c17 	ldw	r19,176(sp)
    1ac0:	00000306 	br	1ad0 <___vfprintf_internal_r+0x1298>
    1ac4:	42000204 	addi	r8,r8,8
    1ac8:	8c7ffc04 	addi	r17,r17,-16
    1acc:	b441970e 	bge	r22,r17,212c <___vfprintf_internal_r+0x18f4>
    1ad0:	18c00404 	addi	r3,r3,16
    1ad4:	10800044 	addi	r2,r2,1
    1ad8:	45000015 	stw	r20,0(r8)
    1adc:	45800115 	stw	r22,4(r8)
    1ae0:	d8c02015 	stw	r3,128(sp)
    1ae4:	d8801f15 	stw	r2,124(sp)
    1ae8:	e0bff60e 	bge	fp,r2,1ac4 <___vfprintf_internal_r+0x128c>
    1aec:	d9801e04 	addi	r6,sp,120
    1af0:	b80b883a 	mov	r5,r23
    1af4:	9809883a 	mov	r4,r19
    1af8:	0007e340 	call	7e34 <__sprint_r>
    1afc:	103c501e 	bne	r2,zero,c40 <___vfprintf_internal_r+0x408>
    1b00:	d8c02017 	ldw	r3,128(sp)
    1b04:	d8801f17 	ldw	r2,124(sp)
    1b08:	da000404 	addi	r8,sp,16
    1b0c:	003fee06 	br	1ac8 <___vfprintf_internal_r+0x1290>
    1b10:	d9002c17 	ldw	r4,176(sp)
    1b14:	d9801e04 	addi	r6,sp,120
    1b18:	b80b883a 	mov	r5,r23
    1b1c:	0007e340 	call	7e34 <__sprint_r>
    1b20:	103c471e 	bne	r2,zero,c40 <___vfprintf_internal_r+0x408>
    1b24:	d8c02017 	ldw	r3,128(sp)
    1b28:	df002787 	ldb	fp,158(sp)
    1b2c:	da000404 	addi	r8,sp,16
    1b30:	003d5606 	br	108c <___vfprintf_internal_r+0x854>
    1b34:	9080040c 	andi	r2,r18,16
    1b38:	10016126 	beq	r2,zero,20c0 <___vfprintf_internal_r+0x1888>
    1b3c:	d8802d17 	ldw	r2,180(sp)
    1b40:	14c00017 	ldw	r19,0(r2)
    1b44:	10800104 	addi	r2,r2,4
    1b48:	d8802d15 	stw	r2,180(sp)
    1b4c:	982dd7fa 	srai	r22,r19,31
    1b50:	b005883a 	mov	r2,r22
    1b54:	003c8206 	br	d60 <___vfprintf_internal_r+0x528>
    1b58:	9080040c 	andi	r2,r18,16
    1b5c:	10003526 	beq	r2,zero,1c34 <___vfprintf_internal_r+0x13fc>
    1b60:	d9402d17 	ldw	r5,180(sp)
    1b64:	d8c02917 	ldw	r3,164(sp)
    1b68:	d8002785 	stb	zero,158(sp)
    1b6c:	28800104 	addi	r2,r5,4
    1b70:	2cc00017 	ldw	r19,0(r5)
    1b74:	002d883a 	mov	r22,zero
    1b78:	18003716 	blt	r3,zero,1c58 <___vfprintf_internal_r+0x1420>
    1b7c:	00ffdfc4 	movi	r3,-129
    1b80:	d8802d15 	stw	r2,180(sp)
    1b84:	90e4703a 	and	r18,r18,r3
    1b88:	0039883a 	mov	fp,zero
    1b8c:	983df326 	beq	r19,zero,135c <___vfprintf_internal_r+0xb24>
    1b90:	00800244 	movi	r2,9
    1b94:	14fc7b36 	bltu	r2,r19,d84 <___vfprintf_internal_r+0x54c>
    1b98:	d8c02817 	ldw	r3,160(sp)
    1b9c:	dc001dc4 	addi	r16,sp,119
    1ba0:	9cc00c04 	addi	r19,r19,48
    1ba4:	1c07c83a 	sub	r3,r3,r16
    1ba8:	dcc01dc5 	stb	r19,119(sp)
    1bac:	d8c02e15 	stw	r3,184(sp)
    1bb0:	003ce806 	br	f54 <___vfprintf_internal_r+0x71c>
    1bb4:	d8803317 	ldw	r2,204(sp)
    1bb8:	143fffc4 	addi	r16,r2,-1
    1bbc:	043f4d0e 	bge	zero,r16,18f4 <___vfprintf_internal_r+0x10bc>
    1bc0:	07000404 	movi	fp,16
    1bc4:	e400810e 	bge	fp,r16,1dcc <___vfprintf_internal_r+0x1594>
    1bc8:	01400074 	movhi	r5,1
    1bcc:	29424284 	addi	r5,r5,2314
    1bd0:	d9402b15 	stw	r5,172(sp)
    1bd4:	01c001c4 	movi	r7,7
    1bd8:	dcc02c17 	ldw	r19,176(sp)
    1bdc:	00000306 	br	1bec <___vfprintf_internal_r+0x13b4>
    1be0:	b5800204 	addi	r22,r22,8
    1be4:	843ffc04 	addi	r16,r16,-16
    1be8:	e4007b0e 	bge	fp,r16,1dd8 <___vfprintf_internal_r+0x15a0>
    1bec:	18c00404 	addi	r3,r3,16
    1bf0:	8c400044 	addi	r17,r17,1
    1bf4:	b5000015 	stw	r20,0(r22)
    1bf8:	b7000115 	stw	fp,4(r22)
    1bfc:	d8c02015 	stw	r3,128(sp)
    1c00:	dc401f15 	stw	r17,124(sp)
    1c04:	3c7ff60e 	bge	r7,r17,1be0 <___vfprintf_internal_r+0x13a8>
    1c08:	d9801e04 	addi	r6,sp,120
    1c0c:	b80b883a 	mov	r5,r23
    1c10:	9809883a 	mov	r4,r19
    1c14:	d9c03c15 	stw	r7,240(sp)
    1c18:	0007e340 	call	7e34 <__sprint_r>
    1c1c:	d9c03c17 	ldw	r7,240(sp)
    1c20:	103c071e 	bne	r2,zero,c40 <___vfprintf_internal_r+0x408>
    1c24:	d8c02017 	ldw	r3,128(sp)
    1c28:	dc401f17 	ldw	r17,124(sp)
    1c2c:	dd800404 	addi	r22,sp,16
    1c30:	003fec06 	br	1be4 <___vfprintf_internal_r+0x13ac>
    1c34:	9080100c 	andi	r2,r18,64
    1c38:	d8002785 	stb	zero,158(sp)
    1c3c:	10010e26 	beq	r2,zero,2078 <___vfprintf_internal_r+0x1840>
    1c40:	d9002d17 	ldw	r4,180(sp)
    1c44:	d9402917 	ldw	r5,164(sp)
    1c48:	002d883a 	mov	r22,zero
    1c4c:	20800104 	addi	r2,r4,4
    1c50:	24c0000b 	ldhu	r19,0(r4)
    1c54:	283fc90e 	bge	r5,zero,1b7c <___vfprintf_internal_r+0x1344>
    1c58:	d8802d15 	stw	r2,180(sp)
    1c5c:	0039883a 	mov	fp,zero
    1c60:	9d84b03a 	or	r2,r19,r22
    1c64:	103c461e 	bne	r2,zero,d80 <___vfprintf_internal_r+0x548>
    1c68:	00800044 	movi	r2,1
    1c6c:	003e6c06 	br	1620 <___vfprintf_internal_r+0xde8>
    1c70:	d9002c17 	ldw	r4,176(sp)
    1c74:	d9801e04 	addi	r6,sp,120
    1c78:	b80b883a 	mov	r5,r23
    1c7c:	0007e340 	call	7e34 <__sprint_r>
    1c80:	103bef1e 	bne	r2,zero,c40 <___vfprintf_internal_r+0x408>
    1c84:	d8c02017 	ldw	r3,128(sp)
    1c88:	da000404 	addi	r8,sp,16
    1c8c:	d9003217 	ldw	r4,200(sp)
    1c90:	d8802617 	ldw	r2,152(sp)
    1c94:	d9403317 	ldw	r5,204(sp)
    1c98:	8123883a 	add	r17,r16,r4
    1c9c:	11400216 	blt	r2,r5,1ca8 <___vfprintf_internal_r+0x1470>
    1ca0:	9100004c 	andi	r4,r18,1
    1ca4:	20000d26 	beq	r4,zero,1cdc <___vfprintf_internal_r+0x14a4>
    1ca8:	d9003717 	ldw	r4,220(sp)
    1cac:	d9403417 	ldw	r5,208(sp)
    1cb0:	1907883a 	add	r3,r3,r4
    1cb4:	d9001f17 	ldw	r4,124(sp)
    1cb8:	41400015 	stw	r5,0(r8)
    1cbc:	d9403717 	ldw	r5,220(sp)
    1cc0:	21000044 	addi	r4,r4,1
    1cc4:	d8c02015 	stw	r3,128(sp)
    1cc8:	41400115 	stw	r5,4(r8)
    1ccc:	d9001f15 	stw	r4,124(sp)
    1cd0:	014001c4 	movi	r5,7
    1cd4:	2901e816 	blt	r5,r4,2478 <___vfprintf_internal_r+0x1c40>
    1cd8:	42000204 	addi	r8,r8,8
    1cdc:	d9003317 	ldw	r4,204(sp)
    1ce0:	8121883a 	add	r16,r16,r4
    1ce4:	2085c83a 	sub	r2,r4,r2
    1ce8:	8461c83a 	sub	r16,r16,r17
    1cec:	1400010e 	bge	r2,r16,1cf4 <___vfprintf_internal_r+0x14bc>
    1cf0:	1021883a 	mov	r16,r2
    1cf4:	04000a0e 	bge	zero,r16,1d20 <___vfprintf_internal_r+0x14e8>
    1cf8:	d9001f17 	ldw	r4,124(sp)
    1cfc:	1c07883a 	add	r3,r3,r16
    1d00:	44400015 	stw	r17,0(r8)
    1d04:	21000044 	addi	r4,r4,1
    1d08:	44000115 	stw	r16,4(r8)
    1d0c:	d8c02015 	stw	r3,128(sp)
    1d10:	d9001f15 	stw	r4,124(sp)
    1d14:	014001c4 	movi	r5,7
    1d18:	2901fb16 	blt	r5,r4,2508 <___vfprintf_internal_r+0x1cd0>
    1d1c:	42000204 	addi	r8,r8,8
    1d20:	8001f716 	blt	r16,zero,2500 <___vfprintf_internal_r+0x1cc8>
    1d24:	1421c83a 	sub	r16,r2,r16
    1d28:	043d380e 	bge	zero,r16,120c <___vfprintf_internal_r+0x9d4>
    1d2c:	04400404 	movi	r17,16
    1d30:	d8801f17 	ldw	r2,124(sp)
    1d34:	8c3efb0e 	bge	r17,r16,1924 <___vfprintf_internal_r+0x10ec>
    1d38:	01400074 	movhi	r5,1
    1d3c:	29424284 	addi	r5,r5,2314
    1d40:	d9402b15 	stw	r5,172(sp)
    1d44:	058001c4 	movi	r22,7
    1d48:	dcc02c17 	ldw	r19,176(sp)
    1d4c:	00000306 	br	1d5c <___vfprintf_internal_r+0x1524>
    1d50:	42000204 	addi	r8,r8,8
    1d54:	843ffc04 	addi	r16,r16,-16
    1d58:	8c3ef50e 	bge	r17,r16,1930 <___vfprintf_internal_r+0x10f8>
    1d5c:	18c00404 	addi	r3,r3,16
    1d60:	10800044 	addi	r2,r2,1
    1d64:	45000015 	stw	r20,0(r8)
    1d68:	44400115 	stw	r17,4(r8)
    1d6c:	d8c02015 	stw	r3,128(sp)
    1d70:	d8801f15 	stw	r2,124(sp)
    1d74:	b0bff60e 	bge	r22,r2,1d50 <___vfprintf_internal_r+0x1518>
    1d78:	d9801e04 	addi	r6,sp,120
    1d7c:	b80b883a 	mov	r5,r23
    1d80:	9809883a 	mov	r4,r19
    1d84:	0007e340 	call	7e34 <__sprint_r>
    1d88:	103bad1e 	bne	r2,zero,c40 <___vfprintf_internal_r+0x408>
    1d8c:	d8c02017 	ldw	r3,128(sp)
    1d90:	d8801f17 	ldw	r2,124(sp)
    1d94:	da000404 	addi	r8,sp,16
    1d98:	003fee06 	br	1d54 <___vfprintf_internal_r+0x151c>
    1d9c:	9088703a 	and	r4,r18,r2
    1da0:	203eab1e 	bne	r4,zero,1850 <___vfprintf_internal_r+0x1018>
    1da4:	dc401f17 	ldw	r17,124(sp)
    1da8:	40800115 	stw	r2,4(r8)
    1dac:	44000015 	stw	r16,0(r8)
    1db0:	8c400044 	addi	r17,r17,1
    1db4:	d8c02015 	stw	r3,128(sp)
    1db8:	dc401f15 	stw	r17,124(sp)
    1dbc:	008001c4 	movi	r2,7
    1dc0:	14400e16 	blt	r2,r17,1dfc <___vfprintf_internal_r+0x15c4>
    1dc4:	45800204 	addi	r22,r8,8
    1dc8:	003eca06 	br	18f4 <___vfprintf_internal_r+0x10bc>
    1dcc:	01000074 	movhi	r4,1
    1dd0:	21024284 	addi	r4,r4,2314
    1dd4:	d9002b15 	stw	r4,172(sp)
    1dd8:	d8802b17 	ldw	r2,172(sp)
    1ddc:	1c07883a 	add	r3,r3,r16
    1de0:	8c400044 	addi	r17,r17,1
    1de4:	b0800015 	stw	r2,0(r22)
    1de8:	b4000115 	stw	r16,4(r22)
    1dec:	d8c02015 	stw	r3,128(sp)
    1df0:	dc401f15 	stw	r17,124(sp)
    1df4:	008001c4 	movi	r2,7
    1df8:	147ebd0e 	bge	r2,r17,18f0 <___vfprintf_internal_r+0x10b8>
    1dfc:	d9002c17 	ldw	r4,176(sp)
    1e00:	d9801e04 	addi	r6,sp,120
    1e04:	b80b883a 	mov	r5,r23
    1e08:	0007e340 	call	7e34 <__sprint_r>
    1e0c:	103b8c1e 	bne	r2,zero,c40 <___vfprintf_internal_r+0x408>
    1e10:	d8c02017 	ldw	r3,128(sp)
    1e14:	dc401f17 	ldw	r17,124(sp)
    1e18:	dd800404 	addi	r22,sp,16
    1e1c:	003eb506 	br	18f4 <___vfprintf_internal_r+0x10bc>
    1e20:	d9002c17 	ldw	r4,176(sp)
    1e24:	d9801e04 	addi	r6,sp,120
    1e28:	b80b883a 	mov	r5,r23
    1e2c:	0007e340 	call	7e34 <__sprint_r>
    1e30:	103b831e 	bne	r2,zero,c40 <___vfprintf_internal_r+0x408>
    1e34:	d8c02017 	ldw	r3,128(sp)
    1e38:	dc401f17 	ldw	r17,124(sp)
    1e3c:	da000404 	addi	r8,sp,16
    1e40:	003e8d06 	br	1878 <___vfprintf_internal_r+0x1040>
    1e44:	d9002c17 	ldw	r4,176(sp)
    1e48:	d9801e04 	addi	r6,sp,120
    1e4c:	b80b883a 	mov	r5,r23
    1e50:	0007e340 	call	7e34 <__sprint_r>
    1e54:	103b7a1e 	bne	r2,zero,c40 <___vfprintf_internal_r+0x408>
    1e58:	d8c02017 	ldw	r3,128(sp)
    1e5c:	dc401f17 	ldw	r17,124(sp)
    1e60:	dd800404 	addi	r22,sp,16
    1e64:	003e8f06 	br	18a4 <___vfprintf_internal_r+0x106c>
    1e68:	0027883a 	mov	r19,zero
    1e6c:	003f4a06 	br	1b98 <___vfprintf_internal_r+0x1360>
    1e70:	d9002c17 	ldw	r4,176(sp)
    1e74:	d9801e04 	addi	r6,sp,120
    1e78:	b80b883a 	mov	r5,r23
    1e7c:	0007e340 	call	7e34 <__sprint_r>
    1e80:	103b6f1e 	bne	r2,zero,c40 <___vfprintf_internal_r+0x408>
    1e84:	d8c02017 	ldw	r3,128(sp)
    1e88:	da000404 	addi	r8,sp,16
    1e8c:	003c9d06 	br	1104 <___vfprintf_internal_r+0x8cc>
    1e90:	04e7c83a 	sub	r19,zero,r19
    1e94:	9804c03a 	cmpne	r2,r19,zero
    1e98:	05adc83a 	sub	r22,zero,r22
    1e9c:	b0adc83a 	sub	r22,r22,r2
    1ea0:	d8802917 	ldw	r2,164(sp)
    1ea4:	07000b44 	movi	fp,45
    1ea8:	df002785 	stb	fp,158(sp)
    1eac:	10017b16 	blt	r2,zero,249c <___vfprintf_internal_r+0x1c64>
    1eb0:	00bfdfc4 	movi	r2,-129
    1eb4:	90a4703a 	and	r18,r18,r2
    1eb8:	003bb106 	br	d80 <___vfprintf_internal_r+0x548>
    1ebc:	d9003617 	ldw	r4,216(sp)
    1ec0:	d9403817 	ldw	r5,224(sp)
    1ec4:	da003d15 	stw	r8,244(sp)
    1ec8:	0007a580 	call	7a58 <__fpclassifyd>
    1ecc:	da003d17 	ldw	r8,244(sp)
    1ed0:	1000f026 	beq	r2,zero,2294 <___vfprintf_internal_r+0x1a5c>
    1ed4:	d9002917 	ldw	r4,164(sp)
    1ed8:	05bff7c4 	movi	r22,-33
    1edc:	00bfffc4 	movi	r2,-1
    1ee0:	8dac703a 	and	r22,r17,r22
    1ee4:	20820026 	beq	r4,r2,26e8 <___vfprintf_internal_r+0x1eb0>
    1ee8:	008011c4 	movi	r2,71
    1eec:	b081f726 	beq	r22,r2,26cc <___vfprintf_internal_r+0x1e94>
    1ef0:	d9003817 	ldw	r4,224(sp)
    1ef4:	90c04014 	ori	r3,r18,256
    1ef8:	d8c02b15 	stw	r3,172(sp)
    1efc:	20021516 	blt	r4,zero,2754 <___vfprintf_internal_r+0x1f1c>
    1f00:	dcc03817 	ldw	r19,224(sp)
    1f04:	d8002a05 	stb	zero,168(sp)
    1f08:	00801984 	movi	r2,102
    1f0c:	8881f926 	beq	r17,r2,26f4 <___vfprintf_internal_r+0x1ebc>
    1f10:	00801184 	movi	r2,70
    1f14:	88821c26 	beq	r17,r2,2788 <___vfprintf_internal_r+0x1f50>
    1f18:	00801144 	movi	r2,69
    1f1c:	b081ef26 	beq	r22,r2,26dc <___vfprintf_internal_r+0x1ea4>
    1f20:	d8c02917 	ldw	r3,164(sp)
    1f24:	d8802104 	addi	r2,sp,132
    1f28:	d8800315 	stw	r2,12(sp)
    1f2c:	d9403617 	ldw	r5,216(sp)
    1f30:	d8802504 	addi	r2,sp,148
    1f34:	d9002c17 	ldw	r4,176(sp)
    1f38:	d8800215 	stw	r2,8(sp)
    1f3c:	d8802604 	addi	r2,sp,152
    1f40:	d8c00015 	stw	r3,0(sp)
    1f44:	d8800115 	stw	r2,4(sp)
    1f48:	01c00084 	movi	r7,2
    1f4c:	980d883a 	mov	r6,r19
    1f50:	d8c03c15 	stw	r3,240(sp)
    1f54:	da003d15 	stw	r8,244(sp)
    1f58:	0002e5c0 	call	2e5c <_dtoa_r>
    1f5c:	1021883a 	mov	r16,r2
    1f60:	008019c4 	movi	r2,103
    1f64:	d8c03c17 	ldw	r3,240(sp)
    1f68:	da003d17 	ldw	r8,244(sp)
    1f6c:	88817126 	beq	r17,r2,2534 <___vfprintf_internal_r+0x1cfc>
    1f70:	008011c4 	movi	r2,71
    1f74:	88829226 	beq	r17,r2,29c0 <___vfprintf_internal_r+0x2188>
    1f78:	80f9883a 	add	fp,r16,r3
    1f7c:	d9003617 	ldw	r4,216(sp)
    1f80:	000d883a 	mov	r6,zero
    1f84:	000f883a 	mov	r7,zero
    1f88:	980b883a 	mov	r5,r19
    1f8c:	da003d15 	stw	r8,244(sp)
    1f90:	000b8f80 	call	b8f8 <__eqdf2>
    1f94:	da003d17 	ldw	r8,244(sp)
    1f98:	10018d26 	beq	r2,zero,25d0 <___vfprintf_internal_r+0x1d98>
    1f9c:	d8802117 	ldw	r2,132(sp)
    1fa0:	1700062e 	bgeu	r2,fp,1fbc <___vfprintf_internal_r+0x1784>
    1fa4:	01000c04 	movi	r4,48
    1fa8:	10c00044 	addi	r3,r2,1
    1fac:	d8c02115 	stw	r3,132(sp)
    1fb0:	11000005 	stb	r4,0(r2)
    1fb4:	d8802117 	ldw	r2,132(sp)
    1fb8:	173ffb36 	bltu	r2,fp,1fa8 <___vfprintf_internal_r+0x1770>
    1fbc:	1405c83a 	sub	r2,r2,r16
    1fc0:	d8803315 	stw	r2,204(sp)
    1fc4:	008011c4 	movi	r2,71
    1fc8:	b0817626 	beq	r22,r2,25a4 <___vfprintf_internal_r+0x1d6c>
    1fcc:	00801944 	movi	r2,101
    1fd0:	1442810e 	bge	r2,r17,29d8 <___vfprintf_internal_r+0x21a0>
    1fd4:	d8c02617 	ldw	r3,152(sp)
    1fd8:	00801984 	movi	r2,102
    1fdc:	d8c03215 	stw	r3,200(sp)
    1fe0:	8881fe26 	beq	r17,r2,27dc <___vfprintf_internal_r+0x1fa4>
    1fe4:	d8c03217 	ldw	r3,200(sp)
    1fe8:	d9003317 	ldw	r4,204(sp)
    1fec:	1901dd16 	blt	r3,r4,2764 <___vfprintf_internal_r+0x1f2c>
    1ff0:	9480004c 	andi	r18,r18,1
    1ff4:	90022b1e 	bne	r18,zero,28a4 <___vfprintf_internal_r+0x206c>
    1ff8:	1805883a 	mov	r2,r3
    1ffc:	18028016 	blt	r3,zero,2a00 <___vfprintf_internal_r+0x21c8>
    2000:	d8c03217 	ldw	r3,200(sp)
    2004:	044019c4 	movi	r17,103
    2008:	d8c02e15 	stw	r3,184(sp)
    200c:	df002a07 	ldb	fp,168(sp)
    2010:	e001531e 	bne	fp,zero,2560 <___vfprintf_internal_r+0x1d28>
    2014:	df002783 	ldbu	fp,158(sp)
    2018:	d8802a15 	stw	r2,168(sp)
    201c:	dc802b17 	ldw	r18,172(sp)
    2020:	d8002915 	stw	zero,164(sp)
    2024:	003bd106 	br	f6c <___vfprintf_internal_r+0x734>
    2028:	d8802d17 	ldw	r2,180(sp)
    202c:	d8c02d17 	ldw	r3,180(sp)
    2030:	d9002d17 	ldw	r4,180(sp)
    2034:	10800017 	ldw	r2,0(r2)
    2038:	18c00117 	ldw	r3,4(r3)
    203c:	21000204 	addi	r4,r4,8
    2040:	d8803615 	stw	r2,216(sp)
    2044:	d8c03815 	stw	r3,224(sp)
    2048:	d9002d15 	stw	r4,180(sp)
    204c:	003b7506 	br	e24 <___vfprintf_internal_r+0x5ec>
    2050:	ac400007 	ldb	r17,0(r21)
    2054:	003a5906 	br	9bc <___vfprintf_internal_r+0x184>
    2058:	9080100c 	andi	r2,r18,64
    205c:	1000a826 	beq	r2,zero,2300 <___vfprintf_internal_r+0x1ac8>
    2060:	d9002d17 	ldw	r4,180(sp)
    2064:	002d883a 	mov	r22,zero
    2068:	24c0000b 	ldhu	r19,0(r4)
    206c:	21000104 	addi	r4,r4,4
    2070:	d9002d15 	stw	r4,180(sp)
    2074:	003ccb06 	br	13a4 <___vfprintf_internal_r+0xb6c>
    2078:	d8c02d17 	ldw	r3,180(sp)
    207c:	d9002917 	ldw	r4,164(sp)
    2080:	002d883a 	mov	r22,zero
    2084:	18800104 	addi	r2,r3,4
    2088:	1cc00017 	ldw	r19,0(r3)
    208c:	203ebb0e 	bge	r4,zero,1b7c <___vfprintf_internal_r+0x1344>
    2090:	003ef106 	br	1c58 <___vfprintf_internal_r+0x1420>
    2094:	9080040c 	andi	r2,r18,16
    2098:	1000921e 	bne	r2,zero,22e4 <___vfprintf_internal_r+0x1aac>
    209c:	9480100c 	andi	r18,r18,64
    20a0:	90013926 	beq	r18,zero,2588 <___vfprintf_internal_r+0x1d50>
    20a4:	d9002d17 	ldw	r4,180(sp)
    20a8:	d9402f17 	ldw	r5,188(sp)
    20ac:	20800017 	ldw	r2,0(r4)
    20b0:	21000104 	addi	r4,r4,4
    20b4:	d9002d15 	stw	r4,180(sp)
    20b8:	1140000d 	sth	r5,0(r2)
    20bc:	003a1606 	br	918 <___vfprintf_internal_r+0xe0>
    20c0:	9080100c 	andi	r2,r18,64
    20c4:	10008026 	beq	r2,zero,22c8 <___vfprintf_internal_r+0x1a90>
    20c8:	d8c02d17 	ldw	r3,180(sp)
    20cc:	1cc0000f 	ldh	r19,0(r3)
    20d0:	18c00104 	addi	r3,r3,4
    20d4:	d8c02d15 	stw	r3,180(sp)
    20d8:	982dd7fa 	srai	r22,r19,31
    20dc:	b005883a 	mov	r2,r22
    20e0:	003b1f06 	br	d60 <___vfprintf_internal_r+0x528>
    20e4:	9080100c 	andi	r2,r18,64
    20e8:	d8002785 	stb	zero,158(sp)
    20ec:	10008a1e 	bne	r2,zero,2318 <___vfprintf_internal_r+0x1ae0>
    20f0:	d9402d17 	ldw	r5,180(sp)
    20f4:	d8c02917 	ldw	r3,164(sp)
    20f8:	002d883a 	mov	r22,zero
    20fc:	28800104 	addi	r2,r5,4
    2100:	2cc00017 	ldw	r19,0(r5)
    2104:	183e4b0e 	bge	r3,zero,1a34 <___vfprintf_internal_r+0x11fc>
    2108:	9d86b03a 	or	r3,r19,r22
    210c:	d8802d15 	stw	r2,180(sp)
    2110:	183e4c1e 	bne	r3,zero,1a44 <___vfprintf_internal_r+0x120c>
    2114:	0039883a 	mov	fp,zero
    2118:	0005883a 	mov	r2,zero
    211c:	003d4006 	br	1620 <___vfprintf_internal_r+0xde8>
    2120:	01400074 	movhi	r5,1
    2124:	29424284 	addi	r5,r5,2314
    2128:	d9402b15 	stw	r5,172(sp)
    212c:	d9402b17 	ldw	r5,172(sp)
    2130:	1c47883a 	add	r3,r3,r17
    2134:	10800044 	addi	r2,r2,1
    2138:	41400015 	stw	r5,0(r8)
    213c:	44400115 	stw	r17,4(r8)
    2140:	d8c02015 	stw	r3,128(sp)
    2144:	d8801f15 	stw	r2,124(sp)
    2148:	010001c4 	movi	r4,7
    214c:	20bec816 	blt	r4,r2,1c70 <___vfprintf_internal_r+0x1438>
    2150:	42000204 	addi	r8,r8,8
    2154:	003ecd06 	br	1c8c <___vfprintf_internal_r+0x1454>
    2158:	d9002917 	ldw	r4,164(sp)
    215c:	d8002785 	stb	zero,158(sp)
    2160:	203d2d16 	blt	r4,zero,1618 <___vfprintf_internal_r+0xde0>
    2164:	00bfdfc4 	movi	r2,-129
    2168:	90a4703a 	and	r18,r18,r2
    216c:	003a9106 	br	bb4 <___vfprintf_internal_r+0x37c>
    2170:	01000074 	movhi	r4,1
    2174:	21024284 	addi	r4,r4,2314
    2178:	d9002b15 	stw	r4,172(sp)
    217c:	003c0c06 	br	11b0 <___vfprintf_internal_r+0x978>
    2180:	d9002c17 	ldw	r4,176(sp)
    2184:	d9801e04 	addi	r6,sp,120
    2188:	b80b883a 	mov	r5,r23
    218c:	0007e340 	call	7e34 <__sprint_r>
    2190:	103aab1e 	bne	r2,zero,c40 <___vfprintf_internal_r+0x408>
    2194:	d8c02017 	ldw	r3,128(sp)
    2198:	da000404 	addi	r8,sp,16
    219c:	003d4106 	br	16a4 <___vfprintf_internal_r+0xe6c>
    21a0:	d8801f17 	ldw	r2,124(sp)
    21a4:	01400074 	movhi	r5,1
    21a8:	01000044 	movi	r4,1
    21ac:	18c00044 	addi	r3,r3,1
    21b0:	10800044 	addi	r2,r2,1
    21b4:	29424204 	addi	r5,r5,2312
    21b8:	41000115 	stw	r4,4(r8)
    21bc:	41400015 	stw	r5,0(r8)
    21c0:	d8c02015 	stw	r3,128(sp)
    21c4:	d8801f15 	stw	r2,124(sp)
    21c8:	010001c4 	movi	r4,7
    21cc:	20805c16 	blt	r4,r2,2340 <___vfprintf_internal_r+0x1b08>
    21d0:	42000204 	addi	r8,r8,8
    21d4:	8800041e 	bne	r17,zero,21e8 <___vfprintf_internal_r+0x19b0>
    21d8:	d8803317 	ldw	r2,204(sp)
    21dc:	1000021e 	bne	r2,zero,21e8 <___vfprintf_internal_r+0x19b0>
    21e0:	9080004c 	andi	r2,r18,1
    21e4:	103c0926 	beq	r2,zero,120c <___vfprintf_internal_r+0x9d4>
    21e8:	d9003717 	ldw	r4,220(sp)
    21ec:	d8801f17 	ldw	r2,124(sp)
    21f0:	d9403417 	ldw	r5,208(sp)
    21f4:	20c7883a 	add	r3,r4,r3
    21f8:	10800044 	addi	r2,r2,1
    21fc:	41000115 	stw	r4,4(r8)
    2200:	41400015 	stw	r5,0(r8)
    2204:	d8c02015 	stw	r3,128(sp)
    2208:	d8801f15 	stw	r2,124(sp)
    220c:	010001c4 	movi	r4,7
    2210:	20812116 	blt	r4,r2,2698 <___vfprintf_internal_r+0x1e60>
    2214:	42000204 	addi	r8,r8,8
    2218:	0463c83a 	sub	r17,zero,r17
    221c:	0440730e 	bge	zero,r17,23ec <___vfprintf_internal_r+0x1bb4>
    2220:	05800404 	movi	r22,16
    2224:	b440860e 	bge	r22,r17,2440 <___vfprintf_internal_r+0x1c08>
    2228:	01400074 	movhi	r5,1
    222c:	29424284 	addi	r5,r5,2314
    2230:	d9402b15 	stw	r5,172(sp)
    2234:	070001c4 	movi	fp,7
    2238:	dcc02c17 	ldw	r19,176(sp)
    223c:	00000306 	br	224c <___vfprintf_internal_r+0x1a14>
    2240:	42000204 	addi	r8,r8,8
    2244:	8c7ffc04 	addi	r17,r17,-16
    2248:	b440800e 	bge	r22,r17,244c <___vfprintf_internal_r+0x1c14>
    224c:	18c00404 	addi	r3,r3,16
    2250:	10800044 	addi	r2,r2,1
    2254:	45000015 	stw	r20,0(r8)
    2258:	45800115 	stw	r22,4(r8)
    225c:	d8c02015 	stw	r3,128(sp)
    2260:	d8801f15 	stw	r2,124(sp)
    2264:	e0bff60e 	bge	fp,r2,2240 <___vfprintf_internal_r+0x1a08>
    2268:	d9801e04 	addi	r6,sp,120
    226c:	b80b883a 	mov	r5,r23
    2270:	9809883a 	mov	r4,r19
    2274:	0007e340 	call	7e34 <__sprint_r>
    2278:	103a711e 	bne	r2,zero,c40 <___vfprintf_internal_r+0x408>
    227c:	d8c02017 	ldw	r3,128(sp)
    2280:	d8801f17 	ldw	r2,124(sp)
    2284:	da000404 	addi	r8,sp,16
    2288:	003fee06 	br	2244 <___vfprintf_internal_r+0x1a0c>
    228c:	00bfffc4 	movi	r2,-1
    2290:	003a6f06 	br	c50 <___vfprintf_internal_r+0x418>
    2294:	008011c4 	movi	r2,71
    2298:	1440b816 	blt	r2,r17,257c <___vfprintf_internal_r+0x1d44>
    229c:	04000074 	movhi	r16,1
    22a0:	84023404 	addi	r16,r16,2256
    22a4:	00c000c4 	movi	r3,3
    22a8:	00bfdfc4 	movi	r2,-129
    22ac:	d8c02a15 	stw	r3,168(sp)
    22b0:	90a4703a 	and	r18,r18,r2
    22b4:	df002783 	ldbu	fp,158(sp)
    22b8:	d8c02e15 	stw	r3,184(sp)
    22bc:	d8002915 	stw	zero,164(sp)
    22c0:	d8003215 	stw	zero,200(sp)
    22c4:	003b2906 	br	f6c <___vfprintf_internal_r+0x734>
    22c8:	d9002d17 	ldw	r4,180(sp)
    22cc:	24c00017 	ldw	r19,0(r4)
    22d0:	21000104 	addi	r4,r4,4
    22d4:	d9002d15 	stw	r4,180(sp)
    22d8:	982dd7fa 	srai	r22,r19,31
    22dc:	b005883a 	mov	r2,r22
    22e0:	003a9f06 	br	d60 <___vfprintf_internal_r+0x528>
    22e4:	d9402d17 	ldw	r5,180(sp)
    22e8:	d8c02f17 	ldw	r3,188(sp)
    22ec:	28800017 	ldw	r2,0(r5)
    22f0:	29400104 	addi	r5,r5,4
    22f4:	d9402d15 	stw	r5,180(sp)
    22f8:	10c00015 	stw	r3,0(r2)
    22fc:	00398606 	br	918 <___vfprintf_internal_r+0xe0>
    2300:	d9402d17 	ldw	r5,180(sp)
    2304:	002d883a 	mov	r22,zero
    2308:	2cc00017 	ldw	r19,0(r5)
    230c:	29400104 	addi	r5,r5,4
    2310:	d9402d15 	stw	r5,180(sp)
    2314:	003c2306 	br	13a4 <___vfprintf_internal_r+0xb6c>
    2318:	d8c02d17 	ldw	r3,180(sp)
    231c:	d9002917 	ldw	r4,164(sp)
    2320:	002d883a 	mov	r22,zero
    2324:	18800104 	addi	r2,r3,4
    2328:	1cc0000b 	ldhu	r19,0(r3)
    232c:	203dc10e 	bge	r4,zero,1a34 <___vfprintf_internal_r+0x11fc>
    2330:	003f7506 	br	2108 <___vfprintf_internal_r+0x18d0>
    2334:	04000074 	movhi	r16,1
    2338:	84023204 	addi	r16,r16,2248
    233c:	003acc06 	br	e70 <___vfprintf_internal_r+0x638>
    2340:	d9002c17 	ldw	r4,176(sp)
    2344:	d9801e04 	addi	r6,sp,120
    2348:	b80b883a 	mov	r5,r23
    234c:	0007e340 	call	7e34 <__sprint_r>
    2350:	103a3b1e 	bne	r2,zero,c40 <___vfprintf_internal_r+0x408>
    2354:	dc402617 	ldw	r17,152(sp)
    2358:	d8c02017 	ldw	r3,128(sp)
    235c:	da000404 	addi	r8,sp,16
    2360:	003f9c06 	br	21d4 <___vfprintf_internal_r+0x199c>
    2364:	ac400043 	ldbu	r17,1(r21)
    2368:	94800814 	ori	r18,r18,32
    236c:	ad400044 	addi	r21,r21,1
    2370:	8c403fcc 	andi	r17,r17,255
    2374:	8c40201c 	xori	r17,r17,128
    2378:	8c7fe004 	addi	r17,r17,-128
    237c:	00398f06 	br	9bc <___vfprintf_internal_r+0x184>
    2380:	d8c02d15 	stw	r3,180(sp)
    2384:	0039883a 	mov	fp,zero
    2388:	003e3506 	br	1c60 <___vfprintf_internal_r+0x1428>
    238c:	d9002c17 	ldw	r4,176(sp)
    2390:	d9801e04 	addi	r6,sp,120
    2394:	b80b883a 	mov	r5,r23
    2398:	0007e340 	call	7e34 <__sprint_r>
    239c:	103a281e 	bne	r2,zero,c40 <___vfprintf_internal_r+0x408>
    23a0:	d8c02017 	ldw	r3,128(sp)
    23a4:	da000404 	addi	r8,sp,16
    23a8:	003cd006 	br	16ec <___vfprintf_internal_r+0xeb4>
    23ac:	8009883a 	mov	r4,r16
    23b0:	da003d15 	stw	r8,244(sp)
    23b4:	00007a00 	call	7a0 <strlen>
    23b8:	d8802e15 	stw	r2,184(sp)
    23bc:	da003d17 	ldw	r8,244(sp)
    23c0:	103c340e 	bge	r2,zero,1494 <___vfprintf_internal_r+0xc5c>
    23c4:	0005883a 	mov	r2,zero
    23c8:	003c3206 	br	1494 <___vfprintf_internal_r+0xc5c>
    23cc:	d9002c17 	ldw	r4,176(sp)
    23d0:	d9801e04 	addi	r6,sp,120
    23d4:	b80b883a 	mov	r5,r23
    23d8:	0007e340 	call	7e34 <__sprint_r>
    23dc:	103a181e 	bne	r2,zero,c40 <___vfprintf_internal_r+0x408>
    23e0:	d8c02017 	ldw	r3,128(sp)
    23e4:	d8801f17 	ldw	r2,124(sp)
    23e8:	da000404 	addi	r8,sp,16
    23ec:	d9403317 	ldw	r5,204(sp)
    23f0:	10800044 	addi	r2,r2,1
    23f4:	44000015 	stw	r16,0(r8)
    23f8:	28c7883a 	add	r3,r5,r3
    23fc:	003b7d06 	br	11f4 <___vfprintf_internal_r+0x9bc>
    2400:	01000074 	movhi	r4,1
    2404:	21024684 	addi	r4,r4,2330
    2408:	d9003515 	stw	r4,212(sp)
    240c:	003b1406 	br	1060 <___vfprintf_internal_r+0x828>
    2410:	013fffc4 	movi	r4,-1
    2414:	003a3506 	br	cec <___vfprintf_internal_r+0x4b4>
    2418:	0023883a 	mov	r17,zero
    241c:	003d9d06 	br	1a94 <___vfprintf_internal_r+0x125c>
    2420:	d9002c17 	ldw	r4,176(sp)
    2424:	d9801e04 	addi	r6,sp,120
    2428:	b80b883a 	mov	r5,r23
    242c:	0007e340 	call	7e34 <__sprint_r>
    2430:	103a031e 	bne	r2,zero,c40 <___vfprintf_internal_r+0x408>
    2434:	d8c02017 	ldw	r3,128(sp)
    2438:	da000404 	addi	r8,sp,16
    243c:	003d9406 	br	1a90 <___vfprintf_internal_r+0x1258>
    2440:	01000074 	movhi	r4,1
    2444:	21024284 	addi	r4,r4,2314
    2448:	d9002b15 	stw	r4,172(sp)
    244c:	d9002b17 	ldw	r4,172(sp)
    2450:	1c47883a 	add	r3,r3,r17
    2454:	10800044 	addi	r2,r2,1
    2458:	41000015 	stw	r4,0(r8)
    245c:	44400115 	stw	r17,4(r8)
    2460:	d8c02015 	stw	r3,128(sp)
    2464:	d8801f15 	stw	r2,124(sp)
    2468:	010001c4 	movi	r4,7
    246c:	20bfd716 	blt	r4,r2,23cc <___vfprintf_internal_r+0x1b94>
    2470:	42000204 	addi	r8,r8,8
    2474:	003fdd06 	br	23ec <___vfprintf_internal_r+0x1bb4>
    2478:	d9002c17 	ldw	r4,176(sp)
    247c:	d9801e04 	addi	r6,sp,120
    2480:	b80b883a 	mov	r5,r23
    2484:	0007e340 	call	7e34 <__sprint_r>
    2488:	1039ed1e 	bne	r2,zero,c40 <___vfprintf_internal_r+0x408>
    248c:	d8802617 	ldw	r2,152(sp)
    2490:	d8c02017 	ldw	r3,128(sp)
    2494:	da000404 	addi	r8,sp,16
    2498:	003e1006 	br	1cdc <___vfprintf_internal_r+0x14a4>
    249c:	00800044 	movi	r2,1
    24a0:	10803fcc 	andi	r2,r2,255
    24a4:	00c00044 	movi	r3,1
    24a8:	10fa3526 	beq	r2,r3,d80 <___vfprintf_internal_r+0x548>
    24ac:	00c00084 	movi	r3,2
    24b0:	10fbcb26 	beq	r2,r3,13e0 <___vfprintf_internal_r+0xba8>
    24b4:	003a8f06 	br	ef4 <___vfprintf_internal_r+0x6bc>
    24b8:	01000074 	movhi	r4,1
    24bc:	21024684 	addi	r4,r4,2330
    24c0:	d9003515 	stw	r4,212(sp)
    24c4:	003b7606 	br	12a0 <___vfprintf_internal_r+0xa68>
    24c8:	d8802917 	ldw	r2,164(sp)
    24cc:	00c00184 	movi	r3,6
    24d0:	1880012e 	bgeu	r3,r2,24d8 <___vfprintf_internal_r+0x1ca0>
    24d4:	1805883a 	mov	r2,r3
    24d8:	d8802e15 	stw	r2,184(sp)
    24dc:	1000ef16 	blt	r2,zero,289c <___vfprintf_internal_r+0x2064>
    24e0:	04000074 	movhi	r16,1
    24e4:	d8802a15 	stw	r2,168(sp)
    24e8:	dcc02d15 	stw	r19,180(sp)
    24ec:	d8002915 	stw	zero,164(sp)
    24f0:	d8003215 	stw	zero,200(sp)
    24f4:	84024004 	addi	r16,r16,2304
    24f8:	0039883a 	mov	fp,zero
    24fc:	003aa206 	br	f88 <___vfprintf_internal_r+0x750>
    2500:	0021883a 	mov	r16,zero
    2504:	003e0706 	br	1d24 <___vfprintf_internal_r+0x14ec>
    2508:	d9002c17 	ldw	r4,176(sp)
    250c:	d9801e04 	addi	r6,sp,120
    2510:	b80b883a 	mov	r5,r23
    2514:	0007e340 	call	7e34 <__sprint_r>
    2518:	1039c91e 	bne	r2,zero,c40 <___vfprintf_internal_r+0x408>
    251c:	d8802617 	ldw	r2,152(sp)
    2520:	d9403317 	ldw	r5,204(sp)
    2524:	d8c02017 	ldw	r3,128(sp)
    2528:	da000404 	addi	r8,sp,16
    252c:	2885c83a 	sub	r2,r5,r2
    2530:	003dfb06 	br	1d20 <___vfprintf_internal_r+0x14e8>
    2534:	9080004c 	andi	r2,r18,1
    2538:	103e8f1e 	bne	r2,zero,1f78 <___vfprintf_internal_r+0x1740>
    253c:	d8802117 	ldw	r2,132(sp)
    2540:	003e9e06 	br	1fbc <___vfprintf_internal_r+0x1784>
    2544:	1025883a 	mov	r18,r2
    2548:	0039883a 	mov	fp,zero
    254c:	00800084 	movi	r2,2
    2550:	003fd306 	br	24a0 <___vfprintf_internal_r+0x1c68>
    2554:	07000b44 	movi	fp,45
    2558:	df002785 	stb	fp,158(sp)
    255c:	003a4006 	br	e60 <___vfprintf_internal_r+0x628>
    2560:	00c00b44 	movi	r3,45
    2564:	d8c02785 	stb	r3,158(sp)
    2568:	d8802a15 	stw	r2,168(sp)
    256c:	dc802b17 	ldw	r18,172(sp)
    2570:	d8002915 	stw	zero,164(sp)
    2574:	07000b44 	movi	fp,45
    2578:	003a8006 	br	f7c <___vfprintf_internal_r+0x744>
    257c:	04000074 	movhi	r16,1
    2580:	84023504 	addi	r16,r16,2260
    2584:	003f4706 	br	22a4 <___vfprintf_internal_r+0x1a6c>
    2588:	d8c02d17 	ldw	r3,180(sp)
    258c:	d9002f17 	ldw	r4,188(sp)
    2590:	18800017 	ldw	r2,0(r3)
    2594:	18c00104 	addi	r3,r3,4
    2598:	d8c02d15 	stw	r3,180(sp)
    259c:	11000015 	stw	r4,0(r2)
    25a0:	0038dd06 	br	918 <___vfprintf_internal_r+0xe0>
    25a4:	dd802617 	ldw	r22,152(sp)
    25a8:	00bfff44 	movi	r2,-3
    25ac:	b0801c16 	blt	r22,r2,2620 <___vfprintf_internal_r+0x1de8>
    25b0:	d9402917 	ldw	r5,164(sp)
    25b4:	2d801a16 	blt	r5,r22,2620 <___vfprintf_internal_r+0x1de8>
    25b8:	dd803215 	stw	r22,200(sp)
    25bc:	003e8906 	br	1fe4 <___vfprintf_internal_r+0x17ac>
    25c0:	01000074 	movhi	r4,1
    25c4:	21024284 	addi	r4,r4,2314
    25c8:	d9002b15 	stw	r4,172(sp)
    25cc:	003c9106 	br	1814 <___vfprintf_internal_r+0xfdc>
    25d0:	e005883a 	mov	r2,fp
    25d4:	003e7906 	br	1fbc <___vfprintf_internal_r+0x1784>
    25d8:	d9402917 	ldw	r5,164(sp)
    25dc:	df002783 	ldbu	fp,158(sp)
    25e0:	dcc02d15 	stw	r19,180(sp)
    25e4:	d9402a15 	stw	r5,168(sp)
    25e8:	d9402e15 	stw	r5,184(sp)
    25ec:	d8002915 	stw	zero,164(sp)
    25f0:	d8003215 	stw	zero,200(sp)
    25f4:	003a5d06 	br	f6c <___vfprintf_internal_r+0x734>
    25f8:	9080004c 	andi	r2,r18,1
    25fc:	0039883a 	mov	fp,zero
    2600:	10000426 	beq	r2,zero,2614 <___vfprintf_internal_r+0x1ddc>
    2604:	00800c04 	movi	r2,48
    2608:	dc001dc4 	addi	r16,sp,119
    260c:	d8801dc5 	stb	r2,119(sp)
    2610:	003b8006 	br	1414 <___vfprintf_internal_r+0xbdc>
    2614:	d8002e15 	stw	zero,184(sp)
    2618:	dc001e04 	addi	r16,sp,120
    261c:	003a4d06 	br	f54 <___vfprintf_internal_r+0x71c>
    2620:	8c7fff84 	addi	r17,r17,-2
    2624:	b5bfffc4 	addi	r22,r22,-1
    2628:	dd802615 	stw	r22,152(sp)
    262c:	dc4022c5 	stb	r17,139(sp)
    2630:	b000bf16 	blt	r22,zero,2930 <___vfprintf_internal_r+0x20f8>
    2634:	00800ac4 	movi	r2,43
    2638:	d8802305 	stb	r2,140(sp)
    263c:	00800244 	movi	r2,9
    2640:	15807016 	blt	r2,r22,2804 <___vfprintf_internal_r+0x1fcc>
    2644:	00800c04 	movi	r2,48
    2648:	b5800c04 	addi	r22,r22,48
    264c:	d8802345 	stb	r2,141(sp)
    2650:	dd802385 	stb	r22,142(sp)
    2654:	d88023c4 	addi	r2,sp,143
    2658:	df0022c4 	addi	fp,sp,139
    265c:	d8c03317 	ldw	r3,204(sp)
    2660:	1739c83a 	sub	fp,r2,fp
    2664:	d9003317 	ldw	r4,204(sp)
    2668:	e0c7883a 	add	r3,fp,r3
    266c:	df003a15 	stw	fp,232(sp)
    2670:	d8c02e15 	stw	r3,184(sp)
    2674:	00800044 	movi	r2,1
    2678:	1100b30e 	bge	r2,r4,2948 <___vfprintf_internal_r+0x2110>
    267c:	d8c02e17 	ldw	r3,184(sp)
    2680:	18c00044 	addi	r3,r3,1
    2684:	d8c02e15 	stw	r3,184(sp)
    2688:	1805883a 	mov	r2,r3
    268c:	1800ac16 	blt	r3,zero,2940 <___vfprintf_internal_r+0x2108>
    2690:	d8003215 	stw	zero,200(sp)
    2694:	003e5d06 	br	200c <___vfprintf_internal_r+0x17d4>
    2698:	d9002c17 	ldw	r4,176(sp)
    269c:	d9801e04 	addi	r6,sp,120
    26a0:	b80b883a 	mov	r5,r23
    26a4:	0007e340 	call	7e34 <__sprint_r>
    26a8:	1039651e 	bne	r2,zero,c40 <___vfprintf_internal_r+0x408>
    26ac:	dc402617 	ldw	r17,152(sp)
    26b0:	d8c02017 	ldw	r3,128(sp)
    26b4:	d8801f17 	ldw	r2,124(sp)
    26b8:	da000404 	addi	r8,sp,16
    26bc:	003ed606 	br	2218 <___vfprintf_internal_r+0x19e0>
    26c0:	582b883a 	mov	r21,r11
    26c4:	d8002915 	stw	zero,164(sp)
    26c8:	0038bd06 	br	9c0 <___vfprintf_internal_r+0x188>
    26cc:	d8802917 	ldw	r2,164(sp)
    26d0:	103e071e 	bne	r2,zero,1ef0 <___vfprintf_internal_r+0x16b8>
    26d4:	dc002915 	stw	r16,164(sp)
    26d8:	003e0506 	br	1ef0 <___vfprintf_internal_r+0x16b8>
    26dc:	d9002917 	ldw	r4,164(sp)
    26e0:	20c00044 	addi	r3,r4,1
    26e4:	003e0f06 	br	1f24 <___vfprintf_internal_r+0x16ec>
    26e8:	01400184 	movi	r5,6
    26ec:	d9402915 	stw	r5,164(sp)
    26f0:	003dff06 	br	1ef0 <___vfprintf_internal_r+0x16b8>
    26f4:	d8802104 	addi	r2,sp,132
    26f8:	d8800315 	stw	r2,12(sp)
    26fc:	d8802504 	addi	r2,sp,148
    2700:	d8800215 	stw	r2,8(sp)
    2704:	d8802604 	addi	r2,sp,152
    2708:	d8800115 	stw	r2,4(sp)
    270c:	d8802917 	ldw	r2,164(sp)
    2710:	d9403617 	ldw	r5,216(sp)
    2714:	d9002c17 	ldw	r4,176(sp)
    2718:	d8800015 	stw	r2,0(sp)
    271c:	01c000c4 	movi	r7,3
    2720:	980d883a 	mov	r6,r19
    2724:	da003d15 	stw	r8,244(sp)
    2728:	0002e5c0 	call	2e5c <_dtoa_r>
    272c:	d8c02917 	ldw	r3,164(sp)
    2730:	da003d17 	ldw	r8,244(sp)
    2734:	1021883a 	mov	r16,r2
    2738:	10f9883a 	add	fp,r2,r3
    273c:	81000007 	ldb	r4,0(r16)
    2740:	00800c04 	movi	r2,48
    2744:	20805e26 	beq	r4,r2,28c0 <___vfprintf_internal_r+0x2088>
    2748:	d8c02617 	ldw	r3,152(sp)
    274c:	e0f9883a 	add	fp,fp,r3
    2750:	003e0a06 	br	1f7c <___vfprintf_internal_r+0x1744>
    2754:	00c00b44 	movi	r3,45
    2758:	24e0003c 	xorhi	r19,r4,32768
    275c:	d8c02a05 	stb	r3,168(sp)
    2760:	003de906 	br	1f08 <___vfprintf_internal_r+0x16d0>
    2764:	d8c03217 	ldw	r3,200(sp)
    2768:	00c07a0e 	bge	zero,r3,2954 <___vfprintf_internal_r+0x211c>
    276c:	00800044 	movi	r2,1
    2770:	d9003317 	ldw	r4,204(sp)
    2774:	1105883a 	add	r2,r2,r4
    2778:	d8802e15 	stw	r2,184(sp)
    277c:	10004e16 	blt	r2,zero,28b8 <___vfprintf_internal_r+0x2080>
    2780:	044019c4 	movi	r17,103
    2784:	003e2106 	br	200c <___vfprintf_internal_r+0x17d4>
    2788:	d9002917 	ldw	r4,164(sp)
    278c:	d8802104 	addi	r2,sp,132
    2790:	d8800315 	stw	r2,12(sp)
    2794:	d9000015 	stw	r4,0(sp)
    2798:	d8802504 	addi	r2,sp,148
    279c:	d9403617 	ldw	r5,216(sp)
    27a0:	d9002c17 	ldw	r4,176(sp)
    27a4:	d8800215 	stw	r2,8(sp)
    27a8:	d8802604 	addi	r2,sp,152
    27ac:	d8800115 	stw	r2,4(sp)
    27b0:	01c000c4 	movi	r7,3
    27b4:	980d883a 	mov	r6,r19
    27b8:	da003d15 	stw	r8,244(sp)
    27bc:	0002e5c0 	call	2e5c <_dtoa_r>
    27c0:	d8c02917 	ldw	r3,164(sp)
    27c4:	da003d17 	ldw	r8,244(sp)
    27c8:	1021883a 	mov	r16,r2
    27cc:	00801184 	movi	r2,70
    27d0:	80f9883a 	add	fp,r16,r3
    27d4:	88bfd926 	beq	r17,r2,273c <___vfprintf_internal_r+0x1f04>
    27d8:	003de806 	br	1f7c <___vfprintf_internal_r+0x1744>
    27dc:	d9002917 	ldw	r4,164(sp)
    27e0:	00c04d0e 	bge	zero,r3,2918 <___vfprintf_internal_r+0x20e0>
    27e4:	2000441e 	bne	r4,zero,28f8 <___vfprintf_internal_r+0x20c0>
    27e8:	9480004c 	andi	r18,r18,1
    27ec:	9000421e 	bne	r18,zero,28f8 <___vfprintf_internal_r+0x20c0>
    27f0:	1805883a 	mov	r2,r3
    27f4:	18007016 	blt	r3,zero,29b8 <___vfprintf_internal_r+0x2180>
    27f8:	d8c03217 	ldw	r3,200(sp)
    27fc:	d8c02e15 	stw	r3,184(sp)
    2800:	003e0206 	br	200c <___vfprintf_internal_r+0x17d4>
    2804:	df0022c4 	addi	fp,sp,139
    2808:	dc002915 	stw	r16,164(sp)
    280c:	4027883a 	mov	r19,r8
    2810:	e021883a 	mov	r16,fp
    2814:	b009883a 	mov	r4,r22
    2818:	01400284 	movi	r5,10
    281c:	00005300 	call	530 <__modsi3>
    2820:	10800c04 	addi	r2,r2,48
    2824:	843fffc4 	addi	r16,r16,-1
    2828:	b009883a 	mov	r4,r22
    282c:	01400284 	movi	r5,10
    2830:	80800005 	stb	r2,0(r16)
    2834:	00004ac0 	call	4ac <__divsi3>
    2838:	102d883a 	mov	r22,r2
    283c:	00800244 	movi	r2,9
    2840:	15bff416 	blt	r2,r22,2814 <___vfprintf_internal_r+0x1fdc>
    2844:	9811883a 	mov	r8,r19
    2848:	b0800c04 	addi	r2,r22,48
    284c:	8027883a 	mov	r19,r16
    2850:	997fffc4 	addi	r5,r19,-1
    2854:	98bfffc5 	stb	r2,-1(r19)
    2858:	dc002917 	ldw	r16,164(sp)
    285c:	2f006a2e 	bgeu	r5,fp,2a08 <___vfprintf_internal_r+0x21d0>
    2860:	d9c02384 	addi	r7,sp,142
    2864:	3ccfc83a 	sub	r7,r7,r19
    2868:	d9002344 	addi	r4,sp,141
    286c:	e1cf883a 	add	r7,fp,r7
    2870:	00000106 	br	2878 <___vfprintf_internal_r+0x2040>
    2874:	28800003 	ldbu	r2,0(r5)
    2878:	20800005 	stb	r2,0(r4)
    287c:	21000044 	addi	r4,r4,1
    2880:	29400044 	addi	r5,r5,1
    2884:	393ffb1e 	bne	r7,r4,2874 <___vfprintf_internal_r+0x203c>
    2888:	d8802304 	addi	r2,sp,140
    288c:	14c5c83a 	sub	r2,r2,r19
    2890:	d8c02344 	addi	r3,sp,141
    2894:	1885883a 	add	r2,r3,r2
    2898:	003f7006 	br	265c <___vfprintf_internal_r+0x1e24>
    289c:	0005883a 	mov	r2,zero
    28a0:	003f0f06 	br	24e0 <___vfprintf_internal_r+0x1ca8>
    28a4:	d8c03217 	ldw	r3,200(sp)
    28a8:	18c00044 	addi	r3,r3,1
    28ac:	d8c02e15 	stw	r3,184(sp)
    28b0:	1805883a 	mov	r2,r3
    28b4:	183fb20e 	bge	r3,zero,2780 <___vfprintf_internal_r+0x1f48>
    28b8:	0005883a 	mov	r2,zero
    28bc:	003fb006 	br	2780 <___vfprintf_internal_r+0x1f48>
    28c0:	d9003617 	ldw	r4,216(sp)
    28c4:	000d883a 	mov	r6,zero
    28c8:	000f883a 	mov	r7,zero
    28cc:	980b883a 	mov	r5,r19
    28d0:	d8c03c15 	stw	r3,240(sp)
    28d4:	da003d15 	stw	r8,244(sp)
    28d8:	000b8f80 	call	b8f8 <__eqdf2>
    28dc:	d8c03c17 	ldw	r3,240(sp)
    28e0:	da003d17 	ldw	r8,244(sp)
    28e4:	103f9826 	beq	r2,zero,2748 <___vfprintf_internal_r+0x1f10>
    28e8:	00800044 	movi	r2,1
    28ec:	10c7c83a 	sub	r3,r2,r3
    28f0:	d8c02615 	stw	r3,152(sp)
    28f4:	003f9506 	br	274c <___vfprintf_internal_r+0x1f14>
    28f8:	d9002917 	ldw	r4,164(sp)
    28fc:	d8c03217 	ldw	r3,200(sp)
    2900:	20800044 	addi	r2,r4,1
    2904:	1885883a 	add	r2,r3,r2
    2908:	d8802e15 	stw	r2,184(sp)
    290c:	103dbf0e 	bge	r2,zero,200c <___vfprintf_internal_r+0x17d4>
    2910:	0005883a 	mov	r2,zero
    2914:	003dbd06 	br	200c <___vfprintf_internal_r+0x17d4>
    2918:	2000211e 	bne	r4,zero,29a0 <___vfprintf_internal_r+0x2168>
    291c:	9480004c 	andi	r18,r18,1
    2920:	90001f1e 	bne	r18,zero,29a0 <___vfprintf_internal_r+0x2168>
    2924:	00800044 	movi	r2,1
    2928:	d8802e15 	stw	r2,184(sp)
    292c:	003db706 	br	200c <___vfprintf_internal_r+0x17d4>
    2930:	00800b44 	movi	r2,45
    2934:	05adc83a 	sub	r22,zero,r22
    2938:	d8802305 	stb	r2,140(sp)
    293c:	003f3f06 	br	263c <___vfprintf_internal_r+0x1e04>
    2940:	0005883a 	mov	r2,zero
    2944:	003f5206 	br	2690 <___vfprintf_internal_r+0x1e58>
    2948:	90a4703a 	and	r18,r18,r2
    294c:	903f4e26 	beq	r18,zero,2688 <___vfprintf_internal_r+0x1e50>
    2950:	003f4a06 	br	267c <___vfprintf_internal_r+0x1e44>
    2954:	00800084 	movi	r2,2
    2958:	10c5c83a 	sub	r2,r2,r3
    295c:	003f8406 	br	2770 <___vfprintf_internal_r+0x1f38>
    2960:	d8802d17 	ldw	r2,180(sp)
    2964:	d9002d17 	ldw	r4,180(sp)
    2968:	ac400043 	ldbu	r17,1(r21)
    296c:	10800017 	ldw	r2,0(r2)
    2970:	582b883a 	mov	r21,r11
    2974:	d8802915 	stw	r2,164(sp)
    2978:	20800104 	addi	r2,r4,4
    297c:	d9002917 	ldw	r4,164(sp)
    2980:	d8802d15 	stw	r2,180(sp)
    2984:	203e7a0e 	bge	r4,zero,2370 <___vfprintf_internal_r+0x1b38>
    2988:	8c403fcc 	andi	r17,r17,255
    298c:	00bfffc4 	movi	r2,-1
    2990:	8c40201c 	xori	r17,r17,128
    2994:	d8802915 	stw	r2,164(sp)
    2998:	8c7fe004 	addi	r17,r17,-128
    299c:	00380706 	br	9bc <___vfprintf_internal_r+0x184>
    29a0:	d8c02917 	ldw	r3,164(sp)
    29a4:	18c00084 	addi	r3,r3,2
    29a8:	d8c02e15 	stw	r3,184(sp)
    29ac:	1805883a 	mov	r2,r3
    29b0:	183d960e 	bge	r3,zero,200c <___vfprintf_internal_r+0x17d4>
    29b4:	003fd606 	br	2910 <___vfprintf_internal_r+0x20d8>
    29b8:	0005883a 	mov	r2,zero
    29bc:	003f8e06 	br	27f8 <___vfprintf_internal_r+0x1fc0>
    29c0:	9080004c 	andi	r2,r18,1
    29c4:	103f811e 	bne	r2,zero,27cc <___vfprintf_internal_r+0x1f94>
    29c8:	d8802117 	ldw	r2,132(sp)
    29cc:	1405c83a 	sub	r2,r2,r16
    29d0:	d8803315 	stw	r2,204(sp)
    29d4:	b47ef326 	beq	r22,r17,25a4 <___vfprintf_internal_r+0x1d6c>
    29d8:	dd802617 	ldw	r22,152(sp)
    29dc:	003f1106 	br	2624 <___vfprintf_internal_r+0x1dec>
    29e0:	d9c02785 	stb	r7,158(sp)
    29e4:	00390406 	br	df8 <___vfprintf_internal_r+0x5c0>
    29e8:	d9c02785 	stb	r7,158(sp)
    29ec:	0038d306 	br	d3c <___vfprintf_internal_r+0x504>
    29f0:	d9c02785 	stb	r7,158(sp)
    29f4:	003a6106 	br	137c <___vfprintf_internal_r+0xb44>
    29f8:	d9c02785 	stb	r7,158(sp)
    29fc:	003af806 	br	15e0 <___vfprintf_internal_r+0xda8>
    2a00:	0005883a 	mov	r2,zero
    2a04:	003d7e06 	br	2000 <___vfprintf_internal_r+0x17c8>
    2a08:	d8802344 	addi	r2,sp,141
    2a0c:	003f1306 	br	265c <___vfprintf_internal_r+0x1e24>
    2a10:	d9c02785 	stb	r7,158(sp)
    2a14:	00392306 	br	ea4 <___vfprintf_internal_r+0x66c>
    2a18:	d9c02785 	stb	r7,158(sp)
    2a1c:	003aa906 	br	14c4 <___vfprintf_internal_r+0xc8c>
    2a20:	d9c02785 	stb	r7,158(sp)
    2a24:	003a3d06 	br	131c <___vfprintf_internal_r+0xae4>
    2a28:	d9c02785 	stb	r7,158(sp)
    2a2c:	003aca06 	br	1558 <___vfprintf_internal_r+0xd20>

00002a30 <__vfprintf_internal>:
    2a30:	00800074 	movhi	r2,1
    2a34:	1089e404 	addi	r2,r2,10128
    2a38:	300f883a 	mov	r7,r6
    2a3c:	280d883a 	mov	r6,r5
    2a40:	200b883a 	mov	r5,r4
    2a44:	11000017 	ldw	r4,0(r2)
    2a48:	00008381 	jmpi	838 <___vfprintf_internal_r>

00002a4c <__sbprintf>:
    2a4c:	2880030b 	ldhu	r2,12(r5)
    2a50:	2ac01917 	ldw	r11,100(r5)
    2a54:	2a80038b 	ldhu	r10,14(r5)
    2a58:	2a400717 	ldw	r9,28(r5)
    2a5c:	2a000917 	ldw	r8,36(r5)
    2a60:	defee204 	addi	sp,sp,-1144
    2a64:	00c10004 	movi	r3,1024
    2a68:	dc011a15 	stw	r16,1128(sp)
    2a6c:	10bfff4c 	andi	r2,r2,65533
    2a70:	2821883a 	mov	r16,r5
    2a74:	d8cb883a 	add	r5,sp,r3
    2a78:	dc811c15 	stw	r18,1136(sp)
    2a7c:	dc411b15 	stw	r17,1132(sp)
    2a80:	dfc11d15 	stw	ra,1140(sp)
    2a84:	2025883a 	mov	r18,r4
    2a88:	d881030d 	sth	r2,1036(sp)
    2a8c:	dac11915 	stw	r11,1124(sp)
    2a90:	da81038d 	sth	r10,1038(sp)
    2a94:	da410715 	stw	r9,1052(sp)
    2a98:	da010915 	stw	r8,1060(sp)
    2a9c:	dec10015 	stw	sp,1024(sp)
    2aa0:	dec10415 	stw	sp,1040(sp)
    2aa4:	d8c10215 	stw	r3,1032(sp)
    2aa8:	d8c10515 	stw	r3,1044(sp)
    2aac:	d8010615 	stw	zero,1048(sp)
    2ab0:	00008380 	call	838 <___vfprintf_internal_r>
    2ab4:	1023883a 	mov	r17,r2
    2ab8:	10000416 	blt	r2,zero,2acc <__sbprintf+0x80>
    2abc:	d9410004 	addi	r5,sp,1024
    2ac0:	9009883a 	mov	r4,r18
    2ac4:	00047000 	call	4700 <_fflush_r>
    2ac8:	10000d1e 	bne	r2,zero,2b00 <__sbprintf+0xb4>
    2acc:	d881030b 	ldhu	r2,1036(sp)
    2ad0:	1080100c 	andi	r2,r2,64
    2ad4:	10000326 	beq	r2,zero,2ae4 <__sbprintf+0x98>
    2ad8:	8080030b 	ldhu	r2,12(r16)
    2adc:	10801014 	ori	r2,r2,64
    2ae0:	8080030d 	sth	r2,12(r16)
    2ae4:	8805883a 	mov	r2,r17
    2ae8:	dfc11d17 	ldw	ra,1140(sp)
    2aec:	dc811c17 	ldw	r18,1136(sp)
    2af0:	dc411b17 	ldw	r17,1132(sp)
    2af4:	dc011a17 	ldw	r16,1128(sp)
    2af8:	dec11e04 	addi	sp,sp,1144
    2afc:	f800283a 	ret
    2b00:	047fffc4 	movi	r17,-1
    2b04:	003ff106 	br	2acc <__sbprintf+0x80>

00002b08 <__swsetup_r>:
    2b08:	00800074 	movhi	r2,1
    2b0c:	defffd04 	addi	sp,sp,-12
    2b10:	1089e404 	addi	r2,r2,10128
    2b14:	dc400115 	stw	r17,4(sp)
    2b18:	2023883a 	mov	r17,r4
    2b1c:	11000017 	ldw	r4,0(r2)
    2b20:	dc000015 	stw	r16,0(sp)
    2b24:	dfc00215 	stw	ra,8(sp)
    2b28:	2821883a 	mov	r16,r5
    2b2c:	20000226 	beq	r4,zero,2b38 <__swsetup_r+0x30>
    2b30:	20800e17 	ldw	r2,56(r4)
    2b34:	10003126 	beq	r2,zero,2bfc <__swsetup_r+0xf4>
    2b38:	8080030b 	ldhu	r2,12(r16)
    2b3c:	10c0020c 	andi	r3,r2,8
    2b40:	1009883a 	mov	r4,r2
    2b44:	18000f26 	beq	r3,zero,2b84 <__swsetup_r+0x7c>
    2b48:	80c00417 	ldw	r3,16(r16)
    2b4c:	18001526 	beq	r3,zero,2ba4 <__swsetup_r+0x9c>
    2b50:	1100004c 	andi	r4,r2,1
    2b54:	20001c1e 	bne	r4,zero,2bc8 <__swsetup_r+0xc0>
    2b58:	1080008c 	andi	r2,r2,2
    2b5c:	1000291e 	bne	r2,zero,2c04 <__swsetup_r+0xfc>
    2b60:	80800517 	ldw	r2,20(r16)
    2b64:	80800215 	stw	r2,8(r16)
    2b68:	18001c26 	beq	r3,zero,2bdc <__swsetup_r+0xd4>
    2b6c:	0005883a 	mov	r2,zero
    2b70:	dfc00217 	ldw	ra,8(sp)
    2b74:	dc400117 	ldw	r17,4(sp)
    2b78:	dc000017 	ldw	r16,0(sp)
    2b7c:	dec00304 	addi	sp,sp,12
    2b80:	f800283a 	ret
    2b84:	2080040c 	andi	r2,r4,16
    2b88:	10002e26 	beq	r2,zero,2c44 <__swsetup_r+0x13c>
    2b8c:	2080010c 	andi	r2,r4,4
    2b90:	10001e1e 	bne	r2,zero,2c0c <__swsetup_r+0x104>
    2b94:	80c00417 	ldw	r3,16(r16)
    2b98:	20800214 	ori	r2,r4,8
    2b9c:	8080030d 	sth	r2,12(r16)
    2ba0:	183feb1e 	bne	r3,zero,2b50 <__swsetup_r+0x48>
    2ba4:	1100a00c 	andi	r4,r2,640
    2ba8:	01408004 	movi	r5,512
    2bac:	217fe826 	beq	r4,r5,2b50 <__swsetup_r+0x48>
    2bb0:	800b883a 	mov	r5,r16
    2bb4:	8809883a 	mov	r4,r17
    2bb8:	00056800 	call	5680 <__smakebuf_r>
    2bbc:	8080030b 	ldhu	r2,12(r16)
    2bc0:	80c00417 	ldw	r3,16(r16)
    2bc4:	003fe206 	br	2b50 <__swsetup_r+0x48>
    2bc8:	80800517 	ldw	r2,20(r16)
    2bcc:	80000215 	stw	zero,8(r16)
    2bd0:	0085c83a 	sub	r2,zero,r2
    2bd4:	80800615 	stw	r2,24(r16)
    2bd8:	183fe41e 	bne	r3,zero,2b6c <__swsetup_r+0x64>
    2bdc:	80c0030b 	ldhu	r3,12(r16)
    2be0:	0005883a 	mov	r2,zero
    2be4:	1900200c 	andi	r4,r3,128
    2be8:	203fe126 	beq	r4,zero,2b70 <__swsetup_r+0x68>
    2bec:	18c01014 	ori	r3,r3,64
    2bf0:	80c0030d 	sth	r3,12(r16)
    2bf4:	00bfffc4 	movi	r2,-1
    2bf8:	003fdd06 	br	2b70 <__swsetup_r+0x68>
    2bfc:	0004adc0 	call	4adc <__sinit>
    2c00:	003fcd06 	br	2b38 <__swsetup_r+0x30>
    2c04:	0005883a 	mov	r2,zero
    2c08:	003fd606 	br	2b64 <__swsetup_r+0x5c>
    2c0c:	81400c17 	ldw	r5,48(r16)
    2c10:	28000626 	beq	r5,zero,2c2c <__swsetup_r+0x124>
    2c14:	80801004 	addi	r2,r16,64
    2c18:	28800326 	beq	r5,r2,2c28 <__swsetup_r+0x120>
    2c1c:	8809883a 	mov	r4,r17
    2c20:	0004c500 	call	4c50 <_free_r>
    2c24:	8100030b 	ldhu	r4,12(r16)
    2c28:	80000c15 	stw	zero,48(r16)
    2c2c:	80c00417 	ldw	r3,16(r16)
    2c30:	00bff6c4 	movi	r2,-37
    2c34:	1108703a 	and	r4,r2,r4
    2c38:	80000115 	stw	zero,4(r16)
    2c3c:	80c00015 	stw	r3,0(r16)
    2c40:	003fd506 	br	2b98 <__swsetup_r+0x90>
    2c44:	00800244 	movi	r2,9
    2c48:	88800015 	stw	r2,0(r17)
    2c4c:	20801014 	ori	r2,r4,64
    2c50:	8080030d 	sth	r2,12(r16)
    2c54:	00bfffc4 	movi	r2,-1
    2c58:	003fc506 	br	2b70 <__swsetup_r+0x68>

00002c5c <quorem>:
    2c5c:	defff704 	addi	sp,sp,-36
    2c60:	dc800215 	stw	r18,8(sp)
    2c64:	20800417 	ldw	r2,16(r4)
    2c68:	2c800417 	ldw	r18,16(r5)
    2c6c:	dfc00815 	stw	ra,32(sp)
    2c70:	ddc00715 	stw	r23,28(sp)
    2c74:	dd800615 	stw	r22,24(sp)
    2c78:	dd400515 	stw	r21,20(sp)
    2c7c:	dd000415 	stw	r20,16(sp)
    2c80:	dcc00315 	stw	r19,12(sp)
    2c84:	dc400115 	stw	r17,4(sp)
    2c88:	dc000015 	stw	r16,0(sp)
    2c8c:	14807116 	blt	r2,r18,2e54 <quorem+0x1f8>
    2c90:	94bfffc4 	addi	r18,r18,-1
    2c94:	94ad883a 	add	r22,r18,r18
    2c98:	b5ad883a 	add	r22,r22,r22
    2c9c:	2c400504 	addi	r17,r5,20
    2ca0:	8da9883a 	add	r20,r17,r22
    2ca4:	25400504 	addi	r21,r4,20
    2ca8:	282f883a 	mov	r23,r5
    2cac:	adad883a 	add	r22,r21,r22
    2cb0:	a1400017 	ldw	r5,0(r20)
    2cb4:	2021883a 	mov	r16,r4
    2cb8:	b1000017 	ldw	r4,0(r22)
    2cbc:	29400044 	addi	r5,r5,1
    2cc0:	00005a40 	call	5a4 <__udivsi3>
    2cc4:	1027883a 	mov	r19,r2
    2cc8:	10002c26 	beq	r2,zero,2d7c <quorem+0x120>
    2ccc:	a813883a 	mov	r9,r21
    2cd0:	880b883a 	mov	r5,r17
    2cd4:	0009883a 	mov	r4,zero
    2cd8:	000d883a 	mov	r6,zero
    2cdc:	2a000017 	ldw	r8,0(r5)
    2ce0:	49c00017 	ldw	r7,0(r9)
    2ce4:	29400104 	addi	r5,r5,4
    2ce8:	40bfffcc 	andi	r2,r8,65535
    2cec:	14c5383a 	mul	r2,r2,r19
    2cf0:	4010d43a 	srli	r8,r8,16
    2cf4:	38ffffcc 	andi	r3,r7,65535
    2cf8:	1105883a 	add	r2,r2,r4
    2cfc:	1008d43a 	srli	r4,r2,16
    2d00:	44d1383a 	mul	r8,r8,r19
    2d04:	198d883a 	add	r6,r3,r6
    2d08:	10ffffcc 	andi	r3,r2,65535
    2d0c:	30c7c83a 	sub	r3,r6,r3
    2d10:	380ed43a 	srli	r7,r7,16
    2d14:	4105883a 	add	r2,r8,r4
    2d18:	180dd43a 	srai	r6,r3,16
    2d1c:	113fffcc 	andi	r4,r2,65535
    2d20:	390fc83a 	sub	r7,r7,r4
    2d24:	398d883a 	add	r6,r7,r6
    2d28:	300e943a 	slli	r7,r6,16
    2d2c:	18ffffcc 	andi	r3,r3,65535
    2d30:	1008d43a 	srli	r4,r2,16
    2d34:	38ceb03a 	or	r7,r7,r3
    2d38:	49c00015 	stw	r7,0(r9)
    2d3c:	300dd43a 	srai	r6,r6,16
    2d40:	4a400104 	addi	r9,r9,4
    2d44:	a17fe52e 	bgeu	r20,r5,2cdc <quorem+0x80>
    2d48:	b0800017 	ldw	r2,0(r22)
    2d4c:	10000b1e 	bne	r2,zero,2d7c <quorem+0x120>
    2d50:	b0bfff04 	addi	r2,r22,-4
    2d54:	a880082e 	bgeu	r21,r2,2d78 <quorem+0x11c>
    2d58:	b0ffff17 	ldw	r3,-4(r22)
    2d5c:	18000326 	beq	r3,zero,2d6c <quorem+0x110>
    2d60:	00000506 	br	2d78 <quorem+0x11c>
    2d64:	10c00017 	ldw	r3,0(r2)
    2d68:	1800031e 	bne	r3,zero,2d78 <quorem+0x11c>
    2d6c:	10bfff04 	addi	r2,r2,-4
    2d70:	94bfffc4 	addi	r18,r18,-1
    2d74:	a8bffb36 	bltu	r21,r2,2d64 <quorem+0x108>
    2d78:	84800415 	stw	r18,16(r16)
    2d7c:	b80b883a 	mov	r5,r23
    2d80:	8009883a 	mov	r4,r16
    2d84:	0006dc00 	call	6dc0 <__mcmp>
    2d88:	10002616 	blt	r2,zero,2e24 <quorem+0x1c8>
    2d8c:	9cc00044 	addi	r19,r19,1
    2d90:	a805883a 	mov	r2,r21
    2d94:	000b883a 	mov	r5,zero
    2d98:	11000017 	ldw	r4,0(r2)
    2d9c:	89800017 	ldw	r6,0(r17)
    2da0:	10800104 	addi	r2,r2,4
    2da4:	20ffffcc 	andi	r3,r4,65535
    2da8:	194b883a 	add	r5,r3,r5
    2dac:	30ffffcc 	andi	r3,r6,65535
    2db0:	28c7c83a 	sub	r3,r5,r3
    2db4:	300cd43a 	srli	r6,r6,16
    2db8:	2008d43a 	srli	r4,r4,16
    2dbc:	180bd43a 	srai	r5,r3,16
    2dc0:	18ffffcc 	andi	r3,r3,65535
    2dc4:	2189c83a 	sub	r4,r4,r6
    2dc8:	2149883a 	add	r4,r4,r5
    2dcc:	200c943a 	slli	r6,r4,16
    2dd0:	8c400104 	addi	r17,r17,4
    2dd4:	200bd43a 	srai	r5,r4,16
    2dd8:	30c6b03a 	or	r3,r6,r3
    2ddc:	10ffff15 	stw	r3,-4(r2)
    2de0:	a47fed2e 	bgeu	r20,r17,2d98 <quorem+0x13c>
    2de4:	9485883a 	add	r2,r18,r18
    2de8:	1085883a 	add	r2,r2,r2
    2dec:	a887883a 	add	r3,r21,r2
    2df0:	18800017 	ldw	r2,0(r3)
    2df4:	10000b1e 	bne	r2,zero,2e24 <quorem+0x1c8>
    2df8:	18bfff04 	addi	r2,r3,-4
    2dfc:	a880082e 	bgeu	r21,r2,2e20 <quorem+0x1c4>
    2e00:	18ffff17 	ldw	r3,-4(r3)
    2e04:	18000326 	beq	r3,zero,2e14 <quorem+0x1b8>
    2e08:	00000506 	br	2e20 <quorem+0x1c4>
    2e0c:	10c00017 	ldw	r3,0(r2)
    2e10:	1800031e 	bne	r3,zero,2e20 <quorem+0x1c4>
    2e14:	10bfff04 	addi	r2,r2,-4
    2e18:	94bfffc4 	addi	r18,r18,-1
    2e1c:	a8bffb36 	bltu	r21,r2,2e0c <quorem+0x1b0>
    2e20:	84800415 	stw	r18,16(r16)
    2e24:	9805883a 	mov	r2,r19
    2e28:	dfc00817 	ldw	ra,32(sp)
    2e2c:	ddc00717 	ldw	r23,28(sp)
    2e30:	dd800617 	ldw	r22,24(sp)
    2e34:	dd400517 	ldw	r21,20(sp)
    2e38:	dd000417 	ldw	r20,16(sp)
    2e3c:	dcc00317 	ldw	r19,12(sp)
    2e40:	dc800217 	ldw	r18,8(sp)
    2e44:	dc400117 	ldw	r17,4(sp)
    2e48:	dc000017 	ldw	r16,0(sp)
    2e4c:	dec00904 	addi	sp,sp,36
    2e50:	f800283a 	ret
    2e54:	0005883a 	mov	r2,zero
    2e58:	003ff306 	br	2e28 <quorem+0x1cc>

00002e5c <_dtoa_r>:
    2e5c:	20801017 	ldw	r2,64(r4)
    2e60:	deffde04 	addi	sp,sp,-136
    2e64:	df002015 	stw	fp,128(sp)
    2e68:	dcc01b15 	stw	r19,108(sp)
    2e6c:	dc801a15 	stw	r18,104(sp)
    2e70:	dc401915 	stw	r17,100(sp)
    2e74:	dc001815 	stw	r16,96(sp)
    2e78:	dfc02115 	stw	ra,132(sp)
    2e7c:	ddc01f15 	stw	r23,124(sp)
    2e80:	dd801e15 	stw	r22,120(sp)
    2e84:	dd401d15 	stw	r21,116(sp)
    2e88:	dd001c15 	stw	r20,112(sp)
    2e8c:	d9c00315 	stw	r7,12(sp)
    2e90:	2039883a 	mov	fp,r4
    2e94:	3023883a 	mov	r17,r6
    2e98:	2825883a 	mov	r18,r5
    2e9c:	dc002417 	ldw	r16,144(sp)
    2ea0:	3027883a 	mov	r19,r6
    2ea4:	10000826 	beq	r2,zero,2ec8 <_dtoa_r+0x6c>
    2ea8:	21801117 	ldw	r6,68(r4)
    2eac:	00c00044 	movi	r3,1
    2eb0:	100b883a 	mov	r5,r2
    2eb4:	1986983a 	sll	r3,r3,r6
    2eb8:	11800115 	stw	r6,4(r2)
    2ebc:	10c00215 	stw	r3,8(r2)
    2ec0:	00065a00 	call	65a0 <_Bfree>
    2ec4:	e0001015 	stw	zero,64(fp)
    2ec8:	88002e16 	blt	r17,zero,2f84 <_dtoa_r+0x128>
    2ecc:	80000015 	stw	zero,0(r16)
    2ed0:	889ffc2c 	andhi	r2,r17,32752
    2ed4:	00dffc34 	movhi	r3,32752
    2ed8:	10c01c26 	beq	r2,r3,2f4c <_dtoa_r+0xf0>
    2edc:	000d883a 	mov	r6,zero
    2ee0:	000f883a 	mov	r7,zero
    2ee4:	9009883a 	mov	r4,r18
    2ee8:	980b883a 	mov	r5,r19
    2eec:	000b8f80 	call	b8f8 <__eqdf2>
    2ef0:	10002b1e 	bne	r2,zero,2fa0 <_dtoa_r+0x144>
    2ef4:	d9c02317 	ldw	r7,140(sp)
    2ef8:	00800044 	movi	r2,1
    2efc:	38800015 	stw	r2,0(r7)
    2f00:	d8802517 	ldw	r2,148(sp)
    2f04:	10019e26 	beq	r2,zero,3580 <_dtoa_r+0x724>
    2f08:	d8c02517 	ldw	r3,148(sp)
    2f0c:	00800074 	movhi	r2,1
    2f10:	10824244 	addi	r2,r2,2313
    2f14:	18800015 	stw	r2,0(r3)
    2f18:	10bfffc4 	addi	r2,r2,-1
    2f1c:	dfc02117 	ldw	ra,132(sp)
    2f20:	df002017 	ldw	fp,128(sp)
    2f24:	ddc01f17 	ldw	r23,124(sp)
    2f28:	dd801e17 	ldw	r22,120(sp)
    2f2c:	dd401d17 	ldw	r21,116(sp)
    2f30:	dd001c17 	ldw	r20,112(sp)
    2f34:	dcc01b17 	ldw	r19,108(sp)
    2f38:	dc801a17 	ldw	r18,104(sp)
    2f3c:	dc401917 	ldw	r17,100(sp)
    2f40:	dc001817 	ldw	r16,96(sp)
    2f44:	dec02204 	addi	sp,sp,136
    2f48:	f800283a 	ret
    2f4c:	d8c02317 	ldw	r3,140(sp)
    2f50:	0089c3c4 	movi	r2,9999
    2f54:	18800015 	stw	r2,0(r3)
    2f58:	90017726 	beq	r18,zero,3538 <_dtoa_r+0x6dc>
    2f5c:	00800074 	movhi	r2,1
    2f60:	10824e04 	addi	r2,r2,2360
    2f64:	d9002517 	ldw	r4,148(sp)
    2f68:	203fec26 	beq	r4,zero,2f1c <_dtoa_r+0xc0>
    2f6c:	10c000c7 	ldb	r3,3(r2)
    2f70:	1801781e 	bne	r3,zero,3554 <_dtoa_r+0x6f8>
    2f74:	10c000c4 	addi	r3,r2,3
    2f78:	d9802517 	ldw	r6,148(sp)
    2f7c:	30c00015 	stw	r3,0(r6)
    2f80:	003fe606 	br	2f1c <_dtoa_r+0xc0>
    2f84:	04e00034 	movhi	r19,32768
    2f88:	9cffffc4 	addi	r19,r19,-1
    2f8c:	00800044 	movi	r2,1
    2f90:	8ce6703a 	and	r19,r17,r19
    2f94:	80800015 	stw	r2,0(r16)
    2f98:	9823883a 	mov	r17,r19
    2f9c:	003fcc06 	br	2ed0 <_dtoa_r+0x74>
    2fa0:	d8800204 	addi	r2,sp,8
    2fa4:	d8800015 	stw	r2,0(sp)
    2fa8:	d9c00104 	addi	r7,sp,4
    2fac:	900b883a 	mov	r5,r18
    2fb0:	980d883a 	mov	r6,r19
    2fb4:	e009883a 	mov	r4,fp
    2fb8:	8820d53a 	srli	r16,r17,20
    2fbc:	000718c0 	call	718c <__d2b>
    2fc0:	d8800915 	stw	r2,36(sp)
    2fc4:	8001651e 	bne	r16,zero,355c <_dtoa_r+0x700>
    2fc8:	dd800217 	ldw	r22,8(sp)
    2fcc:	dc000117 	ldw	r16,4(sp)
    2fd0:	00800804 	movi	r2,32
    2fd4:	b421883a 	add	r16,r22,r16
    2fd8:	80c10c84 	addi	r3,r16,1074
    2fdc:	10c2d10e 	bge	r2,r3,3b24 <_dtoa_r+0xcc8>
    2fe0:	00801004 	movi	r2,64
    2fe4:	81010484 	addi	r4,r16,1042
    2fe8:	10c7c83a 	sub	r3,r2,r3
    2fec:	9108d83a 	srl	r4,r18,r4
    2ff0:	88e2983a 	sll	r17,r17,r3
    2ff4:	2448b03a 	or	r4,r4,r17
    2ff8:	000ccc00 	call	ccc0 <__floatunsidf>
    2ffc:	017f8434 	movhi	r5,65040
    3000:	01800044 	movi	r6,1
    3004:	1009883a 	mov	r4,r2
    3008:	194b883a 	add	r5,r3,r5
    300c:	843fffc4 	addi	r16,r16,-1
    3010:	d9801115 	stw	r6,68(sp)
    3014:	000d883a 	mov	r6,zero
    3018:	01cffe34 	movhi	r7,16376
    301c:	000c2680 	call	c268 <__subdf3>
    3020:	0198dbf4 	movhi	r6,25455
    3024:	01cff4f4 	movhi	r7,16339
    3028:	3190d844 	addi	r6,r6,17249
    302c:	39e1e9c4 	addi	r7,r7,-30809
    3030:	1009883a 	mov	r4,r2
    3034:	180b883a 	mov	r5,r3
    3038:	000bb500 	call	bb50 <__muldf3>
    303c:	01a2d874 	movhi	r6,35681
    3040:	01cff1f4 	movhi	r7,16327
    3044:	31b22cc4 	addi	r6,r6,-14157
    3048:	39e28a04 	addi	r7,r7,-30168
    304c:	180b883a 	mov	r5,r3
    3050:	1009883a 	mov	r4,r2
    3054:	000a7640 	call	a764 <__adddf3>
    3058:	8009883a 	mov	r4,r16
    305c:	1029883a 	mov	r20,r2
    3060:	1823883a 	mov	r17,r3
    3064:	000cbe40 	call	cbe4 <__floatsidf>
    3068:	019427f4 	movhi	r6,20639
    306c:	01cff4f4 	movhi	r7,16339
    3070:	319e7ec4 	addi	r6,r6,31227
    3074:	39d104c4 	addi	r7,r7,17427
    3078:	1009883a 	mov	r4,r2
    307c:	180b883a 	mov	r5,r3
    3080:	000bb500 	call	bb50 <__muldf3>
    3084:	100d883a 	mov	r6,r2
    3088:	180f883a 	mov	r7,r3
    308c:	a009883a 	mov	r4,r20
    3090:	880b883a 	mov	r5,r17
    3094:	000a7640 	call	a764 <__adddf3>
    3098:	1009883a 	mov	r4,r2
    309c:	180b883a 	mov	r5,r3
    30a0:	1029883a 	mov	r20,r2
    30a4:	1823883a 	mov	r17,r3
    30a8:	000cb640 	call	cb64 <__fixdfsi>
    30ac:	000d883a 	mov	r6,zero
    30b0:	000f883a 	mov	r7,zero
    30b4:	a009883a 	mov	r4,r20
    30b8:	880b883a 	mov	r5,r17
    30bc:	d8800515 	stw	r2,20(sp)
    30c0:	000ba5c0 	call	ba5c <__ledf2>
    30c4:	10028716 	blt	r2,zero,3ae4 <_dtoa_r+0xc88>
    30c8:	d8c00517 	ldw	r3,20(sp)
    30cc:	00800584 	movi	r2,22
    30d0:	10c27536 	bltu	r2,r3,3aa8 <_dtoa_r+0xc4c>
    30d4:	180490fa 	slli	r2,r3,3
    30d8:	00c00074 	movhi	r3,1
    30dc:	18c26a04 	addi	r3,r3,2472
    30e0:	1885883a 	add	r2,r3,r2
    30e4:	11000017 	ldw	r4,0(r2)
    30e8:	11400117 	ldw	r5,4(r2)
    30ec:	900d883a 	mov	r6,r18
    30f0:	980f883a 	mov	r7,r19
    30f4:	000b9800 	call	b980 <__gedf2>
    30f8:	00828d0e 	bge	zero,r2,3b30 <_dtoa_r+0xcd4>
    30fc:	d9000517 	ldw	r4,20(sp)
    3100:	d8000e15 	stw	zero,56(sp)
    3104:	213fffc4 	addi	r4,r4,-1
    3108:	d9000515 	stw	r4,20(sp)
    310c:	b42dc83a 	sub	r22,r22,r16
    3110:	b5bfffc4 	addi	r22,r22,-1
    3114:	b0026f16 	blt	r22,zero,3ad4 <_dtoa_r+0xc78>
    3118:	d8000815 	stw	zero,32(sp)
    311c:	d9c00517 	ldw	r7,20(sp)
    3120:	38026416 	blt	r7,zero,3ab4 <_dtoa_r+0xc58>
    3124:	b1ed883a 	add	r22,r22,r7
    3128:	d9c00d15 	stw	r7,52(sp)
    312c:	d8000a15 	stw	zero,40(sp)
    3130:	d9800317 	ldw	r6,12(sp)
    3134:	00800244 	movi	r2,9
    3138:	11811436 	bltu	r2,r6,358c <_dtoa_r+0x730>
    313c:	00800144 	movi	r2,5
    3140:	1184e10e 	bge	r2,r6,44c8 <_dtoa_r+0x166c>
    3144:	31bfff04 	addi	r6,r6,-4
    3148:	d9800315 	stw	r6,12(sp)
    314c:	0023883a 	mov	r17,zero
    3150:	d9800317 	ldw	r6,12(sp)
    3154:	008000c4 	movi	r2,3
    3158:	30836726 	beq	r6,r2,3ef8 <_dtoa_r+0x109c>
    315c:	1183410e 	bge	r2,r6,3e64 <_dtoa_r+0x1008>
    3160:	d9c00317 	ldw	r7,12(sp)
    3164:	00800104 	movi	r2,4
    3168:	38827c26 	beq	r7,r2,3b5c <_dtoa_r+0xd00>
    316c:	00800144 	movi	r2,5
    3170:	3884c41e 	bne	r7,r2,4484 <_dtoa_r+0x1628>
    3174:	00800044 	movi	r2,1
    3178:	d8800b15 	stw	r2,44(sp)
    317c:	d8c00517 	ldw	r3,20(sp)
    3180:	d9002217 	ldw	r4,136(sp)
    3184:	1907883a 	add	r3,r3,r4
    3188:	19800044 	addi	r6,r3,1
    318c:	d8c00c15 	stw	r3,48(sp)
    3190:	d9800615 	stw	r6,24(sp)
    3194:	0183a40e 	bge	zero,r6,4028 <_dtoa_r+0x11cc>
    3198:	d9800617 	ldw	r6,24(sp)
    319c:	3021883a 	mov	r16,r6
    31a0:	e0001115 	stw	zero,68(fp)
    31a4:	008005c4 	movi	r2,23
    31a8:	1184c92e 	bgeu	r2,r6,44d0 <_dtoa_r+0x1674>
    31ac:	00c00044 	movi	r3,1
    31b0:	00800104 	movi	r2,4
    31b4:	1085883a 	add	r2,r2,r2
    31b8:	11000504 	addi	r4,r2,20
    31bc:	180b883a 	mov	r5,r3
    31c0:	18c00044 	addi	r3,r3,1
    31c4:	313ffb2e 	bgeu	r6,r4,31b4 <_dtoa_r+0x358>
    31c8:	e1401115 	stw	r5,68(fp)
    31cc:	e009883a 	mov	r4,fp
    31d0:	00064f80 	call	64f8 <_Balloc>
    31d4:	d8800715 	stw	r2,28(sp)
    31d8:	e0801015 	stw	r2,64(fp)
    31dc:	00800384 	movi	r2,14
    31e0:	1400f736 	bltu	r2,r16,35c0 <_dtoa_r+0x764>
    31e4:	8800f626 	beq	r17,zero,35c0 <_dtoa_r+0x764>
    31e8:	d9c00517 	ldw	r7,20(sp)
    31ec:	01c39a0e 	bge	zero,r7,4058 <_dtoa_r+0x11fc>
    31f0:	388003cc 	andi	r2,r7,15
    31f4:	100490fa 	slli	r2,r2,3
    31f8:	382bd13a 	srai	r21,r7,4
    31fc:	00c00074 	movhi	r3,1
    3200:	18c26a04 	addi	r3,r3,2472
    3204:	1885883a 	add	r2,r3,r2
    3208:	a8c0040c 	andi	r3,r21,16
    320c:	12400017 	ldw	r9,0(r2)
    3210:	12000117 	ldw	r8,4(r2)
    3214:	18037926 	beq	r3,zero,3ffc <_dtoa_r+0x11a0>
    3218:	00800074 	movhi	r2,1
    321c:	10826004 	addi	r2,r2,2432
    3220:	11800817 	ldw	r6,32(r2)
    3224:	11c00917 	ldw	r7,36(r2)
    3228:	9009883a 	mov	r4,r18
    322c:	980b883a 	mov	r5,r19
    3230:	da001715 	stw	r8,92(sp)
    3234:	da401615 	stw	r9,88(sp)
    3238:	000b0100 	call	b010 <__divdf3>
    323c:	da001717 	ldw	r8,92(sp)
    3240:	da401617 	ldw	r9,88(sp)
    3244:	ad4003cc 	andi	r21,r21,15
    3248:	040000c4 	movi	r16,3
    324c:	1023883a 	mov	r17,r2
    3250:	1829883a 	mov	r20,r3
    3254:	a8001126 	beq	r21,zero,329c <_dtoa_r+0x440>
    3258:	05c00074 	movhi	r23,1
    325c:	bdc26004 	addi	r23,r23,2432
    3260:	4805883a 	mov	r2,r9
    3264:	4007883a 	mov	r3,r8
    3268:	a980004c 	andi	r6,r21,1
    326c:	1009883a 	mov	r4,r2
    3270:	a82bd07a 	srai	r21,r21,1
    3274:	180b883a 	mov	r5,r3
    3278:	30000426 	beq	r6,zero,328c <_dtoa_r+0x430>
    327c:	b9800017 	ldw	r6,0(r23)
    3280:	b9c00117 	ldw	r7,4(r23)
    3284:	84000044 	addi	r16,r16,1
    3288:	000bb500 	call	bb50 <__muldf3>
    328c:	bdc00204 	addi	r23,r23,8
    3290:	a83ff51e 	bne	r21,zero,3268 <_dtoa_r+0x40c>
    3294:	1013883a 	mov	r9,r2
    3298:	1811883a 	mov	r8,r3
    329c:	480d883a 	mov	r6,r9
    32a0:	400f883a 	mov	r7,r8
    32a4:	8809883a 	mov	r4,r17
    32a8:	a00b883a 	mov	r5,r20
    32ac:	000b0100 	call	b010 <__divdf3>
    32b0:	d8800f15 	stw	r2,60(sp)
    32b4:	d8c01015 	stw	r3,64(sp)
    32b8:	d8c00e17 	ldw	r3,56(sp)
    32bc:	18000626 	beq	r3,zero,32d8 <_dtoa_r+0x47c>
    32c0:	d9000f17 	ldw	r4,60(sp)
    32c4:	d9401017 	ldw	r5,64(sp)
    32c8:	000d883a 	mov	r6,zero
    32cc:	01cffc34 	movhi	r7,16368
    32d0:	000ba5c0 	call	ba5c <__ledf2>
    32d4:	10040b16 	blt	r2,zero,4304 <_dtoa_r+0x14a8>
    32d8:	8009883a 	mov	r4,r16
    32dc:	000cbe40 	call	cbe4 <__floatsidf>
    32e0:	d9800f17 	ldw	r6,60(sp)
    32e4:	d9c01017 	ldw	r7,64(sp)
    32e8:	1009883a 	mov	r4,r2
    32ec:	180b883a 	mov	r5,r3
    32f0:	000bb500 	call	bb50 <__muldf3>
    32f4:	000d883a 	mov	r6,zero
    32f8:	01d00734 	movhi	r7,16412
    32fc:	1009883a 	mov	r4,r2
    3300:	180b883a 	mov	r5,r3
    3304:	000a7640 	call	a764 <__adddf3>
    3308:	1021883a 	mov	r16,r2
    330c:	d8800617 	ldw	r2,24(sp)
    3310:	047f3034 	movhi	r17,64704
    3314:	1c63883a 	add	r17,r3,r17
    3318:	10031826 	beq	r2,zero,3f7c <_dtoa_r+0x1120>
    331c:	d8c00517 	ldw	r3,20(sp)
    3320:	db000617 	ldw	r12,24(sp)
    3324:	d8c01315 	stw	r3,76(sp)
    3328:	d9000b17 	ldw	r4,44(sp)
    332c:	20038f26 	beq	r4,zero,416c <_dtoa_r+0x1310>
    3330:	60bfffc4 	addi	r2,r12,-1
    3334:	100490fa 	slli	r2,r2,3
    3338:	00c00074 	movhi	r3,1
    333c:	18c26a04 	addi	r3,r3,2472
    3340:	1885883a 	add	r2,r3,r2
    3344:	11800017 	ldw	r6,0(r2)
    3348:	11c00117 	ldw	r7,4(r2)
    334c:	d8800717 	ldw	r2,28(sp)
    3350:	0009883a 	mov	r4,zero
    3354:	014ff834 	movhi	r5,16352
    3358:	db001615 	stw	r12,88(sp)
    335c:	15c00044 	addi	r23,r2,1
    3360:	000b0100 	call	b010 <__divdf3>
    3364:	800d883a 	mov	r6,r16
    3368:	880f883a 	mov	r7,r17
    336c:	1009883a 	mov	r4,r2
    3370:	180b883a 	mov	r5,r3
    3374:	000c2680 	call	c268 <__subdf3>
    3378:	d9401017 	ldw	r5,64(sp)
    337c:	d9000f17 	ldw	r4,60(sp)
    3380:	102b883a 	mov	r21,r2
    3384:	d8c01215 	stw	r3,72(sp)
    3388:	000cb640 	call	cb64 <__fixdfsi>
    338c:	1009883a 	mov	r4,r2
    3390:	1029883a 	mov	r20,r2
    3394:	000cbe40 	call	cbe4 <__floatsidf>
    3398:	d9000f17 	ldw	r4,60(sp)
    339c:	d9401017 	ldw	r5,64(sp)
    33a0:	100d883a 	mov	r6,r2
    33a4:	180f883a 	mov	r7,r3
    33a8:	000c2680 	call	c268 <__subdf3>
    33ac:	1823883a 	mov	r17,r3
    33b0:	d8c00717 	ldw	r3,28(sp)
    33b4:	d9401217 	ldw	r5,72(sp)
    33b8:	a2000c04 	addi	r8,r20,48
    33bc:	1021883a 	mov	r16,r2
    33c0:	1a000005 	stb	r8,0(r3)
    33c4:	800d883a 	mov	r6,r16
    33c8:	880f883a 	mov	r7,r17
    33cc:	a809883a 	mov	r4,r21
    33d0:	4029883a 	mov	r20,r8
    33d4:	000b9800 	call	b980 <__gedf2>
    33d8:	00841d16 	blt	zero,r2,4450 <_dtoa_r+0x15f4>
    33dc:	800d883a 	mov	r6,r16
    33e0:	880f883a 	mov	r7,r17
    33e4:	0009883a 	mov	r4,zero
    33e8:	014ffc34 	movhi	r5,16368
    33ec:	000c2680 	call	c268 <__subdf3>
    33f0:	d9401217 	ldw	r5,72(sp)
    33f4:	100d883a 	mov	r6,r2
    33f8:	180f883a 	mov	r7,r3
    33fc:	a809883a 	mov	r4,r21
    3400:	000b9800 	call	b980 <__gedf2>
    3404:	db001617 	ldw	r12,88(sp)
    3408:	00840e16 	blt	zero,r2,4444 <_dtoa_r+0x15e8>
    340c:	00800044 	movi	r2,1
    3410:	13006b0e 	bge	r2,r12,35c0 <_dtoa_r+0x764>
    3414:	d9000717 	ldw	r4,28(sp)
    3418:	dd800f15 	stw	r22,60(sp)
    341c:	dcc01015 	stw	r19,64(sp)
    3420:	2319883a 	add	r12,r4,r12
    3424:	dcc01217 	ldw	r19,72(sp)
    3428:	602d883a 	mov	r22,r12
    342c:	dc801215 	stw	r18,72(sp)
    3430:	b825883a 	mov	r18,r23
    3434:	00000906 	br	345c <_dtoa_r+0x600>
    3438:	000c2680 	call	c268 <__subdf3>
    343c:	a80d883a 	mov	r6,r21
    3440:	980f883a 	mov	r7,r19
    3444:	1009883a 	mov	r4,r2
    3448:	180b883a 	mov	r5,r3
    344c:	000ba5c0 	call	ba5c <__ledf2>
    3450:	1003e816 	blt	r2,zero,43f4 <_dtoa_r+0x1598>
    3454:	b825883a 	mov	r18,r23
    3458:	bd83e926 	beq	r23,r22,4400 <_dtoa_r+0x15a4>
    345c:	a809883a 	mov	r4,r21
    3460:	980b883a 	mov	r5,r19
    3464:	000d883a 	mov	r6,zero
    3468:	01d00934 	movhi	r7,16420
    346c:	000bb500 	call	bb50 <__muldf3>
    3470:	000d883a 	mov	r6,zero
    3474:	01d00934 	movhi	r7,16420
    3478:	8009883a 	mov	r4,r16
    347c:	880b883a 	mov	r5,r17
    3480:	102b883a 	mov	r21,r2
    3484:	1827883a 	mov	r19,r3
    3488:	000bb500 	call	bb50 <__muldf3>
    348c:	180b883a 	mov	r5,r3
    3490:	1009883a 	mov	r4,r2
    3494:	1821883a 	mov	r16,r3
    3498:	1023883a 	mov	r17,r2
    349c:	000cb640 	call	cb64 <__fixdfsi>
    34a0:	1009883a 	mov	r4,r2
    34a4:	1029883a 	mov	r20,r2
    34a8:	000cbe40 	call	cbe4 <__floatsidf>
    34ac:	8809883a 	mov	r4,r17
    34b0:	800b883a 	mov	r5,r16
    34b4:	100d883a 	mov	r6,r2
    34b8:	180f883a 	mov	r7,r3
    34bc:	000c2680 	call	c268 <__subdf3>
    34c0:	a5000c04 	addi	r20,r20,48
    34c4:	a80d883a 	mov	r6,r21
    34c8:	980f883a 	mov	r7,r19
    34cc:	1009883a 	mov	r4,r2
    34d0:	180b883a 	mov	r5,r3
    34d4:	95000005 	stb	r20,0(r18)
    34d8:	1021883a 	mov	r16,r2
    34dc:	1823883a 	mov	r17,r3
    34e0:	000ba5c0 	call	ba5c <__ledf2>
    34e4:	bdc00044 	addi	r23,r23,1
    34e8:	800d883a 	mov	r6,r16
    34ec:	880f883a 	mov	r7,r17
    34f0:	0009883a 	mov	r4,zero
    34f4:	014ffc34 	movhi	r5,16368
    34f8:	103fcf0e 	bge	r2,zero,3438 <_dtoa_r+0x5dc>
    34fc:	d8c01317 	ldw	r3,76(sp)
    3500:	d8c00515 	stw	r3,20(sp)
    3504:	d9400917 	ldw	r5,36(sp)
    3508:	e009883a 	mov	r4,fp
    350c:	00065a00 	call	65a0 <_Bfree>
    3510:	d9000517 	ldw	r4,20(sp)
    3514:	d9802317 	ldw	r6,140(sp)
    3518:	d9c02517 	ldw	r7,148(sp)
    351c:	b8000005 	stb	zero,0(r23)
    3520:	20800044 	addi	r2,r4,1
    3524:	30800015 	stw	r2,0(r6)
    3528:	3802aa26 	beq	r7,zero,3fd4 <_dtoa_r+0x1178>
    352c:	3dc00015 	stw	r23,0(r7)
    3530:	d8800717 	ldw	r2,28(sp)
    3534:	003e7906 	br	2f1c <_dtoa_r+0xc0>
    3538:	00800434 	movhi	r2,16
    353c:	10bfffc4 	addi	r2,r2,-1
    3540:	88a2703a 	and	r17,r17,r2
    3544:	883e851e 	bne	r17,zero,2f5c <_dtoa_r+0x100>
    3548:	00800074 	movhi	r2,1
    354c:	10824b04 	addi	r2,r2,2348
    3550:	003e8406 	br	2f64 <_dtoa_r+0x108>
    3554:	10c00204 	addi	r3,r2,8
    3558:	003e8706 	br	2f78 <_dtoa_r+0x11c>
    355c:	01400434 	movhi	r5,16
    3560:	297fffc4 	addi	r5,r5,-1
    3564:	994a703a 	and	r5,r19,r5
    3568:	9009883a 	mov	r4,r18
    356c:	843f0044 	addi	r16,r16,-1023
    3570:	294ffc34 	orhi	r5,r5,16368
    3574:	dd800217 	ldw	r22,8(sp)
    3578:	d8001115 	stw	zero,68(sp)
    357c:	003ea506 	br	3014 <_dtoa_r+0x1b8>
    3580:	00800074 	movhi	r2,1
    3584:	10824204 	addi	r2,r2,2312
    3588:	003e6406 	br	2f1c <_dtoa_r+0xc0>
    358c:	e0001115 	stw	zero,68(fp)
    3590:	000b883a 	mov	r5,zero
    3594:	e009883a 	mov	r4,fp
    3598:	00064f80 	call	64f8 <_Balloc>
    359c:	01bfffc4 	movi	r6,-1
    35a0:	01c00044 	movi	r7,1
    35a4:	d8800715 	stw	r2,28(sp)
    35a8:	d9800c15 	stw	r6,48(sp)
    35ac:	e0801015 	stw	r2,64(fp)
    35b0:	d8000315 	stw	zero,12(sp)
    35b4:	d9c00b15 	stw	r7,44(sp)
    35b8:	d9800615 	stw	r6,24(sp)
    35bc:	d8002215 	stw	zero,136(sp)
    35c0:	d8800117 	ldw	r2,4(sp)
    35c4:	10008916 	blt	r2,zero,37ec <_dtoa_r+0x990>
    35c8:	d9000517 	ldw	r4,20(sp)
    35cc:	00c00384 	movi	r3,14
    35d0:	19008616 	blt	r3,r4,37ec <_dtoa_r+0x990>
    35d4:	200490fa 	slli	r2,r4,3
    35d8:	00c00074 	movhi	r3,1
    35dc:	d9802217 	ldw	r6,136(sp)
    35e0:	18c26a04 	addi	r3,r3,2472
    35e4:	1885883a 	add	r2,r3,r2
    35e8:	14000017 	ldw	r16,0(r2)
    35ec:	14400117 	ldw	r17,4(r2)
    35f0:	30016316 	blt	r6,zero,3b80 <_dtoa_r+0xd24>
    35f4:	800d883a 	mov	r6,r16
    35f8:	880f883a 	mov	r7,r17
    35fc:	9009883a 	mov	r4,r18
    3600:	980b883a 	mov	r5,r19
    3604:	000b0100 	call	b010 <__divdf3>
    3608:	180b883a 	mov	r5,r3
    360c:	1009883a 	mov	r4,r2
    3610:	000cb640 	call	cb64 <__fixdfsi>
    3614:	1009883a 	mov	r4,r2
    3618:	102b883a 	mov	r21,r2
    361c:	000cbe40 	call	cbe4 <__floatsidf>
    3620:	800d883a 	mov	r6,r16
    3624:	880f883a 	mov	r7,r17
    3628:	1009883a 	mov	r4,r2
    362c:	180b883a 	mov	r5,r3
    3630:	000bb500 	call	bb50 <__muldf3>
    3634:	100d883a 	mov	r6,r2
    3638:	180f883a 	mov	r7,r3
    363c:	9009883a 	mov	r4,r18
    3640:	980b883a 	mov	r5,r19
    3644:	000c2680 	call	c268 <__subdf3>
    3648:	d9c00717 	ldw	r7,28(sp)
    364c:	1009883a 	mov	r4,r2
    3650:	a8800c04 	addi	r2,r21,48
    3654:	38800005 	stb	r2,0(r7)
    3658:	3dc00044 	addi	r23,r7,1
    365c:	d9c00617 	ldw	r7,24(sp)
    3660:	01800044 	movi	r6,1
    3664:	180b883a 	mov	r5,r3
    3668:	2005883a 	mov	r2,r4
    366c:	39803826 	beq	r7,r6,3750 <_dtoa_r+0x8f4>
    3670:	000d883a 	mov	r6,zero
    3674:	01d00934 	movhi	r7,16420
    3678:	000bb500 	call	bb50 <__muldf3>
    367c:	000d883a 	mov	r6,zero
    3680:	000f883a 	mov	r7,zero
    3684:	1009883a 	mov	r4,r2
    3688:	180b883a 	mov	r5,r3
    368c:	1025883a 	mov	r18,r2
    3690:	1827883a 	mov	r19,r3
    3694:	000b8f80 	call	b8f8 <__eqdf2>
    3698:	103f9a26 	beq	r2,zero,3504 <_dtoa_r+0x6a8>
    369c:	d9c00617 	ldw	r7,24(sp)
    36a0:	d8c00717 	ldw	r3,28(sp)
    36a4:	b829883a 	mov	r20,r23
    36a8:	38bfffc4 	addi	r2,r7,-1
    36ac:	18ad883a 	add	r22,r3,r2
    36b0:	00000a06 	br	36dc <_dtoa_r+0x880>
    36b4:	000bb500 	call	bb50 <__muldf3>
    36b8:	000d883a 	mov	r6,zero
    36bc:	000f883a 	mov	r7,zero
    36c0:	1009883a 	mov	r4,r2
    36c4:	180b883a 	mov	r5,r3
    36c8:	1025883a 	mov	r18,r2
    36cc:	1827883a 	mov	r19,r3
    36d0:	b829883a 	mov	r20,r23
    36d4:	000b8f80 	call	b8f8 <__eqdf2>
    36d8:	103f8a26 	beq	r2,zero,3504 <_dtoa_r+0x6a8>
    36dc:	800d883a 	mov	r6,r16
    36e0:	880f883a 	mov	r7,r17
    36e4:	9009883a 	mov	r4,r18
    36e8:	980b883a 	mov	r5,r19
    36ec:	000b0100 	call	b010 <__divdf3>
    36f0:	180b883a 	mov	r5,r3
    36f4:	1009883a 	mov	r4,r2
    36f8:	000cb640 	call	cb64 <__fixdfsi>
    36fc:	1009883a 	mov	r4,r2
    3700:	102b883a 	mov	r21,r2
    3704:	000cbe40 	call	cbe4 <__floatsidf>
    3708:	800d883a 	mov	r6,r16
    370c:	880f883a 	mov	r7,r17
    3710:	1009883a 	mov	r4,r2
    3714:	180b883a 	mov	r5,r3
    3718:	000bb500 	call	bb50 <__muldf3>
    371c:	100d883a 	mov	r6,r2
    3720:	180f883a 	mov	r7,r3
    3724:	9009883a 	mov	r4,r18
    3728:	980b883a 	mov	r5,r19
    372c:	000c2680 	call	c268 <__subdf3>
    3730:	aa000c04 	addi	r8,r21,48
    3734:	a2000005 	stb	r8,0(r20)
    3738:	000d883a 	mov	r6,zero
    373c:	01d00934 	movhi	r7,16420
    3740:	1009883a 	mov	r4,r2
    3744:	180b883a 	mov	r5,r3
    3748:	a5c00044 	addi	r23,r20,1
    374c:	b53fd91e 	bne	r22,r20,36b4 <_dtoa_r+0x858>
    3750:	100d883a 	mov	r6,r2
    3754:	180f883a 	mov	r7,r3
    3758:	1009883a 	mov	r4,r2
    375c:	180b883a 	mov	r5,r3
    3760:	000a7640 	call	a764 <__adddf3>
    3764:	100d883a 	mov	r6,r2
    3768:	180f883a 	mov	r7,r3
    376c:	8009883a 	mov	r4,r16
    3770:	880b883a 	mov	r5,r17
    3774:	1027883a 	mov	r19,r2
    3778:	1825883a 	mov	r18,r3
    377c:	000ba5c0 	call	ba5c <__ledf2>
    3780:	10000816 	blt	r2,zero,37a4 <_dtoa_r+0x948>
    3784:	980d883a 	mov	r6,r19
    3788:	900f883a 	mov	r7,r18
    378c:	8009883a 	mov	r4,r16
    3790:	880b883a 	mov	r5,r17
    3794:	000b8f80 	call	b8f8 <__eqdf2>
    3798:	103f5a1e 	bne	r2,zero,3504 <_dtoa_r+0x6a8>
    379c:	ad40004c 	andi	r21,r21,1
    37a0:	a83f5826 	beq	r21,zero,3504 <_dtoa_r+0x6a8>
    37a4:	bd3fffc3 	ldbu	r20,-1(r23)
    37a8:	b8bfffc4 	addi	r2,r23,-1
    37ac:	1007883a 	mov	r3,r2
    37b0:	01400e44 	movi	r5,57
    37b4:	d9800717 	ldw	r6,28(sp)
    37b8:	00000506 	br	37d0 <_dtoa_r+0x974>
    37bc:	18ffffc4 	addi	r3,r3,-1
    37c0:	11824726 	beq	r2,r6,40e0 <_dtoa_r+0x1284>
    37c4:	1d000003 	ldbu	r20,0(r3)
    37c8:	102f883a 	mov	r23,r2
    37cc:	10bfffc4 	addi	r2,r2,-1
    37d0:	a1003fcc 	andi	r4,r20,255
    37d4:	2100201c 	xori	r4,r4,128
    37d8:	213fe004 	addi	r4,r4,-128
    37dc:	217ff726 	beq	r4,r5,37bc <_dtoa_r+0x960>
    37e0:	a2000044 	addi	r8,r20,1
    37e4:	12000005 	stb	r8,0(r2)
    37e8:	003f4606 	br	3504 <_dtoa_r+0x6a8>
    37ec:	d9000b17 	ldw	r4,44(sp)
    37f0:	2000c826 	beq	r4,zero,3b14 <_dtoa_r+0xcb8>
    37f4:	d9800317 	ldw	r6,12(sp)
    37f8:	00c00044 	movi	r3,1
    37fc:	1980f90e 	bge	r3,r6,3be4 <_dtoa_r+0xd88>
    3800:	d8800617 	ldw	r2,24(sp)
    3804:	d8c00a17 	ldw	r3,40(sp)
    3808:	157fffc4 	addi	r21,r2,-1
    380c:	1d41f316 	blt	r3,r21,3fdc <_dtoa_r+0x1180>
    3810:	1d6bc83a 	sub	r21,r3,r21
    3814:	d9c00617 	ldw	r7,24(sp)
    3818:	3802aa16 	blt	r7,zero,42c4 <_dtoa_r+0x1468>
    381c:	dd000817 	ldw	r20,32(sp)
    3820:	d8800617 	ldw	r2,24(sp)
    3824:	d8c00817 	ldw	r3,32(sp)
    3828:	01400044 	movi	r5,1
    382c:	e009883a 	mov	r4,fp
    3830:	1887883a 	add	r3,r3,r2
    3834:	d8c00815 	stw	r3,32(sp)
    3838:	b0ad883a 	add	r22,r22,r2
    383c:	00069040 	call	6904 <__i2b>
    3840:	1023883a 	mov	r17,r2
    3844:	a0000826 	beq	r20,zero,3868 <_dtoa_r+0xa0c>
    3848:	0580070e 	bge	zero,r22,3868 <_dtoa_r+0xa0c>
    384c:	a005883a 	mov	r2,r20
    3850:	b500b916 	blt	r22,r20,3b38 <_dtoa_r+0xcdc>
    3854:	d9000817 	ldw	r4,32(sp)
    3858:	a0a9c83a 	sub	r20,r20,r2
    385c:	b0adc83a 	sub	r22,r22,r2
    3860:	2089c83a 	sub	r4,r4,r2
    3864:	d9000815 	stw	r4,32(sp)
    3868:	d9800a17 	ldw	r6,40(sp)
    386c:	0181810e 	bge	zero,r6,3e74 <_dtoa_r+0x1018>
    3870:	d9c00b17 	ldw	r7,44(sp)
    3874:	3800b326 	beq	r7,zero,3b44 <_dtoa_r+0xce8>
    3878:	a800b226 	beq	r21,zero,3b44 <_dtoa_r+0xce8>
    387c:	880b883a 	mov	r5,r17
    3880:	a80d883a 	mov	r6,r21
    3884:	e009883a 	mov	r4,fp
    3888:	0006b380 	call	6b38 <__pow5mult>
    388c:	d9800917 	ldw	r6,36(sp)
    3890:	100b883a 	mov	r5,r2
    3894:	e009883a 	mov	r4,fp
    3898:	1023883a 	mov	r17,r2
    389c:	00069400 	call	6940 <__multiply>
    38a0:	1021883a 	mov	r16,r2
    38a4:	d8800a17 	ldw	r2,40(sp)
    38a8:	d9400917 	ldw	r5,36(sp)
    38ac:	e009883a 	mov	r4,fp
    38b0:	1545c83a 	sub	r2,r2,r21
    38b4:	d8800a15 	stw	r2,40(sp)
    38b8:	00065a00 	call	65a0 <_Bfree>
    38bc:	d8c00a17 	ldw	r3,40(sp)
    38c0:	18009f1e 	bne	r3,zero,3b40 <_dtoa_r+0xce4>
    38c4:	05c00044 	movi	r23,1
    38c8:	e009883a 	mov	r4,fp
    38cc:	b80b883a 	mov	r5,r23
    38d0:	00069040 	call	6904 <__i2b>
    38d4:	d9000d17 	ldw	r4,52(sp)
    38d8:	102b883a 	mov	r21,r2
    38dc:	2000ce26 	beq	r4,zero,3c18 <_dtoa_r+0xdbc>
    38e0:	200d883a 	mov	r6,r4
    38e4:	100b883a 	mov	r5,r2
    38e8:	e009883a 	mov	r4,fp
    38ec:	0006b380 	call	6b38 <__pow5mult>
    38f0:	d9800317 	ldw	r6,12(sp)
    38f4:	102b883a 	mov	r21,r2
    38f8:	b981810e 	bge	r23,r6,3f00 <_dtoa_r+0x10a4>
    38fc:	0027883a 	mov	r19,zero
    3900:	a8800417 	ldw	r2,16(r21)
    3904:	05c00804 	movi	r23,32
    3908:	10800104 	addi	r2,r2,4
    390c:	1085883a 	add	r2,r2,r2
    3910:	1085883a 	add	r2,r2,r2
    3914:	a885883a 	add	r2,r21,r2
    3918:	11000017 	ldw	r4,0(r2)
    391c:	00067ec0 	call	67ec <__hi0bits>
    3920:	b885c83a 	sub	r2,r23,r2
    3924:	1585883a 	add	r2,r2,r22
    3928:	108007cc 	andi	r2,r2,31
    392c:	1000b326 	beq	r2,zero,3bfc <_dtoa_r+0xda0>
    3930:	00c00804 	movi	r3,32
    3934:	1887c83a 	sub	r3,r3,r2
    3938:	01000104 	movi	r4,4
    393c:	20c2cd0e 	bge	r4,r3,4474 <_dtoa_r+0x1618>
    3940:	00c00704 	movi	r3,28
    3944:	1885c83a 	sub	r2,r3,r2
    3948:	d8c00817 	ldw	r3,32(sp)
    394c:	a0a9883a 	add	r20,r20,r2
    3950:	b0ad883a 	add	r22,r22,r2
    3954:	1887883a 	add	r3,r3,r2
    3958:	d8c00815 	stw	r3,32(sp)
    395c:	d9800817 	ldw	r6,32(sp)
    3960:	0180040e 	bge	zero,r6,3974 <_dtoa_r+0xb18>
    3964:	800b883a 	mov	r5,r16
    3968:	e009883a 	mov	r4,fp
    396c:	0006c780 	call	6c78 <__lshift>
    3970:	1021883a 	mov	r16,r2
    3974:	0580050e 	bge	zero,r22,398c <_dtoa_r+0xb30>
    3978:	a80b883a 	mov	r5,r21
    397c:	b00d883a 	mov	r6,r22
    3980:	e009883a 	mov	r4,fp
    3984:	0006c780 	call	6c78 <__lshift>
    3988:	102b883a 	mov	r21,r2
    398c:	d9c00e17 	ldw	r7,56(sp)
    3990:	3801211e 	bne	r7,zero,3e18 <_dtoa_r+0xfbc>
    3994:	d9800617 	ldw	r6,24(sp)
    3998:	0181380e 	bge	zero,r6,3e7c <_dtoa_r+0x1020>
    399c:	d8c00b17 	ldw	r3,44(sp)
    39a0:	1800ab1e 	bne	r3,zero,3c50 <_dtoa_r+0xdf4>
    39a4:	dc800717 	ldw	r18,28(sp)
    39a8:	dcc00617 	ldw	r19,24(sp)
    39ac:	9029883a 	mov	r20,r18
    39b0:	00000206 	br	39bc <_dtoa_r+0xb60>
    39b4:	00065c80 	call	65c8 <__multadd>
    39b8:	1021883a 	mov	r16,r2
    39bc:	a80b883a 	mov	r5,r21
    39c0:	8009883a 	mov	r4,r16
    39c4:	0002c5c0 	call	2c5c <quorem>
    39c8:	10800c04 	addi	r2,r2,48
    39cc:	90800005 	stb	r2,0(r18)
    39d0:	94800044 	addi	r18,r18,1
    39d4:	9507c83a 	sub	r3,r18,r20
    39d8:	000f883a 	mov	r7,zero
    39dc:	01800284 	movi	r6,10
    39e0:	800b883a 	mov	r5,r16
    39e4:	e009883a 	mov	r4,fp
    39e8:	1cfff216 	blt	r3,r19,39b4 <_dtoa_r+0xb58>
    39ec:	1011883a 	mov	r8,r2
    39f0:	d8800617 	ldw	r2,24(sp)
    39f4:	0082370e 	bge	zero,r2,42d4 <_dtoa_r+0x1478>
    39f8:	d9000717 	ldw	r4,28(sp)
    39fc:	0025883a 	mov	r18,zero
    3a00:	20af883a 	add	r23,r4,r2
    3a04:	01800044 	movi	r6,1
    3a08:	800b883a 	mov	r5,r16
    3a0c:	e009883a 	mov	r4,fp
    3a10:	da001715 	stw	r8,92(sp)
    3a14:	0006c780 	call	6c78 <__lshift>
    3a18:	a80b883a 	mov	r5,r21
    3a1c:	1009883a 	mov	r4,r2
    3a20:	d8800915 	stw	r2,36(sp)
    3a24:	0006dc00 	call	6dc0 <__mcmp>
    3a28:	da001717 	ldw	r8,92(sp)
    3a2c:	0081800e 	bge	zero,r2,4030 <_dtoa_r+0x11d4>
    3a30:	b93fffc3 	ldbu	r4,-1(r23)
    3a34:	b8bfffc4 	addi	r2,r23,-1
    3a38:	1007883a 	mov	r3,r2
    3a3c:	01800e44 	movi	r6,57
    3a40:	d9c00717 	ldw	r7,28(sp)
    3a44:	00000506 	br	3a5c <_dtoa_r+0xc00>
    3a48:	18ffffc4 	addi	r3,r3,-1
    3a4c:	11c12326 	beq	r2,r7,3edc <_dtoa_r+0x1080>
    3a50:	19000003 	ldbu	r4,0(r3)
    3a54:	102f883a 	mov	r23,r2
    3a58:	10bfffc4 	addi	r2,r2,-1
    3a5c:	21403fcc 	andi	r5,r4,255
    3a60:	2940201c 	xori	r5,r5,128
    3a64:	297fe004 	addi	r5,r5,-128
    3a68:	29bff726 	beq	r5,r6,3a48 <_dtoa_r+0xbec>
    3a6c:	21000044 	addi	r4,r4,1
    3a70:	11000005 	stb	r4,0(r2)
    3a74:	a80b883a 	mov	r5,r21
    3a78:	e009883a 	mov	r4,fp
    3a7c:	00065a00 	call	65a0 <_Bfree>
    3a80:	883ea026 	beq	r17,zero,3504 <_dtoa_r+0x6a8>
    3a84:	90000426 	beq	r18,zero,3a98 <_dtoa_r+0xc3c>
    3a88:	94400326 	beq	r18,r17,3a98 <_dtoa_r+0xc3c>
    3a8c:	900b883a 	mov	r5,r18
    3a90:	e009883a 	mov	r4,fp
    3a94:	00065a00 	call	65a0 <_Bfree>
    3a98:	880b883a 	mov	r5,r17
    3a9c:	e009883a 	mov	r4,fp
    3aa0:	00065a00 	call	65a0 <_Bfree>
    3aa4:	003e9706 	br	3504 <_dtoa_r+0x6a8>
    3aa8:	01800044 	movi	r6,1
    3aac:	d9800e15 	stw	r6,56(sp)
    3ab0:	003d9606 	br	310c <_dtoa_r+0x2b0>
    3ab4:	d8800817 	ldw	r2,32(sp)
    3ab8:	d8c00517 	ldw	r3,20(sp)
    3abc:	d8000d15 	stw	zero,52(sp)
    3ac0:	10c5c83a 	sub	r2,r2,r3
    3ac4:	00c9c83a 	sub	r4,zero,r3
    3ac8:	d8800815 	stw	r2,32(sp)
    3acc:	d9000a15 	stw	r4,40(sp)
    3ad0:	003d9706 	br	3130 <_dtoa_r+0x2d4>
    3ad4:	05adc83a 	sub	r22,zero,r22
    3ad8:	dd800815 	stw	r22,32(sp)
    3adc:	002d883a 	mov	r22,zero
    3ae0:	003d8e06 	br	311c <_dtoa_r+0x2c0>
    3ae4:	d9000517 	ldw	r4,20(sp)
    3ae8:	000cbe40 	call	cbe4 <__floatsidf>
    3aec:	100d883a 	mov	r6,r2
    3af0:	180f883a 	mov	r7,r3
    3af4:	a009883a 	mov	r4,r20
    3af8:	880b883a 	mov	r5,r17
    3afc:	000b8f80 	call	b8f8 <__eqdf2>
    3b00:	103d7126 	beq	r2,zero,30c8 <_dtoa_r+0x26c>
    3b04:	d9c00517 	ldw	r7,20(sp)
    3b08:	39ffffc4 	addi	r7,r7,-1
    3b0c:	d9c00515 	stw	r7,20(sp)
    3b10:	003d6d06 	br	30c8 <_dtoa_r+0x26c>
    3b14:	dd400a17 	ldw	r21,40(sp)
    3b18:	dd000817 	ldw	r20,32(sp)
    3b1c:	0023883a 	mov	r17,zero
    3b20:	003f4806 	br	3844 <_dtoa_r+0x9e8>
    3b24:	10e3c83a 	sub	r17,r2,r3
    3b28:	9448983a 	sll	r4,r18,r17
    3b2c:	003d3206 	br	2ff8 <_dtoa_r+0x19c>
    3b30:	d8000e15 	stw	zero,56(sp)
    3b34:	003d7506 	br	310c <_dtoa_r+0x2b0>
    3b38:	b005883a 	mov	r2,r22
    3b3c:	003f4506 	br	3854 <_dtoa_r+0x9f8>
    3b40:	dc000915 	stw	r16,36(sp)
    3b44:	d9800a17 	ldw	r6,40(sp)
    3b48:	d9400917 	ldw	r5,36(sp)
    3b4c:	e009883a 	mov	r4,fp
    3b50:	0006b380 	call	6b38 <__pow5mult>
    3b54:	1021883a 	mov	r16,r2
    3b58:	003f5a06 	br	38c4 <_dtoa_r+0xa68>
    3b5c:	01c00044 	movi	r7,1
    3b60:	d9c00b15 	stw	r7,44(sp)
    3b64:	d8802217 	ldw	r2,136(sp)
    3b68:	0081280e 	bge	zero,r2,400c <_dtoa_r+0x11b0>
    3b6c:	100d883a 	mov	r6,r2
    3b70:	1021883a 	mov	r16,r2
    3b74:	d8800c15 	stw	r2,48(sp)
    3b78:	d8800615 	stw	r2,24(sp)
    3b7c:	003d8806 	br	31a0 <_dtoa_r+0x344>
    3b80:	d8800617 	ldw	r2,24(sp)
    3b84:	00be9b16 	blt	zero,r2,35f4 <_dtoa_r+0x798>
    3b88:	10010f1e 	bne	r2,zero,3fc8 <_dtoa_r+0x116c>
    3b8c:	880b883a 	mov	r5,r17
    3b90:	000d883a 	mov	r6,zero
    3b94:	01d00534 	movhi	r7,16404
    3b98:	8009883a 	mov	r4,r16
    3b9c:	000bb500 	call	bb50 <__muldf3>
    3ba0:	900d883a 	mov	r6,r18
    3ba4:	980f883a 	mov	r7,r19
    3ba8:	1009883a 	mov	r4,r2
    3bac:	180b883a 	mov	r5,r3
    3bb0:	000b9800 	call	b980 <__gedf2>
    3bb4:	002b883a 	mov	r21,zero
    3bb8:	0023883a 	mov	r17,zero
    3bbc:	1000bf16 	blt	r2,zero,3ebc <_dtoa_r+0x1060>
    3bc0:	d9802217 	ldw	r6,136(sp)
    3bc4:	ddc00717 	ldw	r23,28(sp)
    3bc8:	018c303a 	nor	r6,zero,r6
    3bcc:	d9800515 	stw	r6,20(sp)
    3bd0:	a80b883a 	mov	r5,r21
    3bd4:	e009883a 	mov	r4,fp
    3bd8:	00065a00 	call	65a0 <_Bfree>
    3bdc:	883e4926 	beq	r17,zero,3504 <_dtoa_r+0x6a8>
    3be0:	003fad06 	br	3a98 <_dtoa_r+0xc3c>
    3be4:	d9c01117 	ldw	r7,68(sp)
    3be8:	3801bc26 	beq	r7,zero,42dc <_dtoa_r+0x1480>
    3bec:	10810cc4 	addi	r2,r2,1075
    3bf0:	dd400a17 	ldw	r21,40(sp)
    3bf4:	dd000817 	ldw	r20,32(sp)
    3bf8:	003f0a06 	br	3824 <_dtoa_r+0x9c8>
    3bfc:	00800704 	movi	r2,28
    3c00:	d9000817 	ldw	r4,32(sp)
    3c04:	a0a9883a 	add	r20,r20,r2
    3c08:	b0ad883a 	add	r22,r22,r2
    3c0c:	2089883a 	add	r4,r4,r2
    3c10:	d9000815 	stw	r4,32(sp)
    3c14:	003f5106 	br	395c <_dtoa_r+0xb00>
    3c18:	d8c00317 	ldw	r3,12(sp)
    3c1c:	b8c1fc0e 	bge	r23,r3,4410 <_dtoa_r+0x15b4>
    3c20:	0027883a 	mov	r19,zero
    3c24:	b805883a 	mov	r2,r23
    3c28:	003f3e06 	br	3924 <_dtoa_r+0xac8>
    3c2c:	880b883a 	mov	r5,r17
    3c30:	e009883a 	mov	r4,fp
    3c34:	000f883a 	mov	r7,zero
    3c38:	01800284 	movi	r6,10
    3c3c:	00065c80 	call	65c8 <__multadd>
    3c40:	d9000c17 	ldw	r4,48(sp)
    3c44:	1023883a 	mov	r17,r2
    3c48:	0102040e 	bge	zero,r4,445c <_dtoa_r+0x1600>
    3c4c:	d9000615 	stw	r4,24(sp)
    3c50:	0500050e 	bge	zero,r20,3c68 <_dtoa_r+0xe0c>
    3c54:	880b883a 	mov	r5,r17
    3c58:	a00d883a 	mov	r6,r20
    3c5c:	e009883a 	mov	r4,fp
    3c60:	0006c780 	call	6c78 <__lshift>
    3c64:	1023883a 	mov	r17,r2
    3c68:	9801241e 	bne	r19,zero,40fc <_dtoa_r+0x12a0>
    3c6c:	8829883a 	mov	r20,r17
    3c70:	d9000617 	ldw	r4,24(sp)
    3c74:	dcc00717 	ldw	r19,28(sp)
    3c78:	9480004c 	andi	r18,r18,1
    3c7c:	20bfffc4 	addi	r2,r4,-1
    3c80:	9885883a 	add	r2,r19,r2
    3c84:	d8800415 	stw	r2,16(sp)
    3c88:	dc800615 	stw	r18,24(sp)
    3c8c:	a80b883a 	mov	r5,r21
    3c90:	8009883a 	mov	r4,r16
    3c94:	0002c5c0 	call	2c5c <quorem>
    3c98:	880b883a 	mov	r5,r17
    3c9c:	8009883a 	mov	r4,r16
    3ca0:	102f883a 	mov	r23,r2
    3ca4:	0006dc00 	call	6dc0 <__mcmp>
    3ca8:	a80b883a 	mov	r5,r21
    3cac:	a00d883a 	mov	r6,r20
    3cb0:	e009883a 	mov	r4,fp
    3cb4:	102d883a 	mov	r22,r2
    3cb8:	0006e200 	call	6e20 <__mdiff>
    3cbc:	1007883a 	mov	r3,r2
    3cc0:	10800317 	ldw	r2,12(r2)
    3cc4:	bc800c04 	addi	r18,r23,48
    3cc8:	180b883a 	mov	r5,r3
    3ccc:	10004e1e 	bne	r2,zero,3e08 <_dtoa_r+0xfac>
    3cd0:	8009883a 	mov	r4,r16
    3cd4:	d8c01615 	stw	r3,88(sp)
    3cd8:	0006dc00 	call	6dc0 <__mcmp>
    3cdc:	d8c01617 	ldw	r3,88(sp)
    3ce0:	e009883a 	mov	r4,fp
    3ce4:	d8801615 	stw	r2,88(sp)
    3ce8:	180b883a 	mov	r5,r3
    3cec:	00065a00 	call	65a0 <_Bfree>
    3cf0:	d8801617 	ldw	r2,88(sp)
    3cf4:	1000041e 	bne	r2,zero,3d08 <_dtoa_r+0xeac>
    3cf8:	d9800317 	ldw	r6,12(sp)
    3cfc:	3000021e 	bne	r6,zero,3d08 <_dtoa_r+0xeac>
    3d00:	d8c00617 	ldw	r3,24(sp)
    3d04:	18003726 	beq	r3,zero,3de4 <_dtoa_r+0xf88>
    3d08:	b0002016 	blt	r22,zero,3d8c <_dtoa_r+0xf30>
    3d0c:	b000041e 	bne	r22,zero,3d20 <_dtoa_r+0xec4>
    3d10:	d9000317 	ldw	r4,12(sp)
    3d14:	2000021e 	bne	r4,zero,3d20 <_dtoa_r+0xec4>
    3d18:	d8c00617 	ldw	r3,24(sp)
    3d1c:	18001b26 	beq	r3,zero,3d8c <_dtoa_r+0xf30>
    3d20:	00810716 	blt	zero,r2,4140 <_dtoa_r+0x12e4>
    3d24:	d8c00417 	ldw	r3,16(sp)
    3d28:	9d800044 	addi	r22,r19,1
    3d2c:	9c800005 	stb	r18,0(r19)
    3d30:	b02f883a 	mov	r23,r22
    3d34:	98c10626 	beq	r19,r3,4150 <_dtoa_r+0x12f4>
    3d38:	800b883a 	mov	r5,r16
    3d3c:	000f883a 	mov	r7,zero
    3d40:	01800284 	movi	r6,10
    3d44:	e009883a 	mov	r4,fp
    3d48:	00065c80 	call	65c8 <__multadd>
    3d4c:	1021883a 	mov	r16,r2
    3d50:	000f883a 	mov	r7,zero
    3d54:	01800284 	movi	r6,10
    3d58:	880b883a 	mov	r5,r17
    3d5c:	e009883a 	mov	r4,fp
    3d60:	8d002526 	beq	r17,r20,3df8 <_dtoa_r+0xf9c>
    3d64:	00065c80 	call	65c8 <__multadd>
    3d68:	a00b883a 	mov	r5,r20
    3d6c:	000f883a 	mov	r7,zero
    3d70:	01800284 	movi	r6,10
    3d74:	e009883a 	mov	r4,fp
    3d78:	1023883a 	mov	r17,r2
    3d7c:	00065c80 	call	65c8 <__multadd>
    3d80:	1029883a 	mov	r20,r2
    3d84:	b027883a 	mov	r19,r22
    3d88:	003fc006 	br	3c8c <_dtoa_r+0xe30>
    3d8c:	9011883a 	mov	r8,r18
    3d90:	00800e0e 	bge	zero,r2,3dcc <_dtoa_r+0xf70>
    3d94:	800b883a 	mov	r5,r16
    3d98:	01800044 	movi	r6,1
    3d9c:	e009883a 	mov	r4,fp
    3da0:	da001715 	stw	r8,92(sp)
    3da4:	0006c780 	call	6c78 <__lshift>
    3da8:	a80b883a 	mov	r5,r21
    3dac:	1009883a 	mov	r4,r2
    3db0:	1021883a 	mov	r16,r2
    3db4:	0006dc00 	call	6dc0 <__mcmp>
    3db8:	da001717 	ldw	r8,92(sp)
    3dbc:	0081960e 	bge	zero,r2,4418 <_dtoa_r+0x15bc>
    3dc0:	00800e44 	movi	r2,57
    3dc4:	40817026 	beq	r8,r2,4388 <_dtoa_r+0x152c>
    3dc8:	ba000c44 	addi	r8,r23,49
    3dcc:	8825883a 	mov	r18,r17
    3dd0:	9dc00044 	addi	r23,r19,1
    3dd4:	9a000005 	stb	r8,0(r19)
    3dd8:	a023883a 	mov	r17,r20
    3ddc:	dc000915 	stw	r16,36(sp)
    3de0:	003f2406 	br	3a74 <_dtoa_r+0xc18>
    3de4:	00800e44 	movi	r2,57
    3de8:	9011883a 	mov	r8,r18
    3dec:	90816626 	beq	r18,r2,4388 <_dtoa_r+0x152c>
    3df0:	05bff516 	blt	zero,r22,3dc8 <_dtoa_r+0xf6c>
    3df4:	003ff506 	br	3dcc <_dtoa_r+0xf70>
    3df8:	00065c80 	call	65c8 <__multadd>
    3dfc:	1023883a 	mov	r17,r2
    3e00:	1029883a 	mov	r20,r2
    3e04:	003fdf06 	br	3d84 <_dtoa_r+0xf28>
    3e08:	e009883a 	mov	r4,fp
    3e0c:	00065a00 	call	65a0 <_Bfree>
    3e10:	00800044 	movi	r2,1
    3e14:	003fbc06 	br	3d08 <_dtoa_r+0xeac>
    3e18:	a80b883a 	mov	r5,r21
    3e1c:	8009883a 	mov	r4,r16
    3e20:	0006dc00 	call	6dc0 <__mcmp>
    3e24:	103edb0e 	bge	r2,zero,3994 <_dtoa_r+0xb38>
    3e28:	800b883a 	mov	r5,r16
    3e2c:	000f883a 	mov	r7,zero
    3e30:	01800284 	movi	r6,10
    3e34:	e009883a 	mov	r4,fp
    3e38:	00065c80 	call	65c8 <__multadd>
    3e3c:	1021883a 	mov	r16,r2
    3e40:	d8800517 	ldw	r2,20(sp)
    3e44:	d8c00b17 	ldw	r3,44(sp)
    3e48:	10bfffc4 	addi	r2,r2,-1
    3e4c:	d8800515 	stw	r2,20(sp)
    3e50:	183f761e 	bne	r3,zero,3c2c <_dtoa_r+0xdd0>
    3e54:	d9000c17 	ldw	r4,48(sp)
    3e58:	0101730e 	bge	zero,r4,4428 <_dtoa_r+0x15cc>
    3e5c:	d9000615 	stw	r4,24(sp)
    3e60:	003ed006 	br	39a4 <_dtoa_r+0xb48>
    3e64:	00800084 	movi	r2,2
    3e68:	3081861e 	bne	r6,r2,4484 <_dtoa_r+0x1628>
    3e6c:	d8000b15 	stw	zero,44(sp)
    3e70:	003f3c06 	br	3b64 <_dtoa_r+0xd08>
    3e74:	dc000917 	ldw	r16,36(sp)
    3e78:	003e9206 	br	38c4 <_dtoa_r+0xa68>
    3e7c:	d9c00317 	ldw	r7,12(sp)
    3e80:	00800084 	movi	r2,2
    3e84:	11fec50e 	bge	r2,r7,399c <_dtoa_r+0xb40>
    3e88:	d9000617 	ldw	r4,24(sp)
    3e8c:	20013c1e 	bne	r4,zero,4380 <_dtoa_r+0x1524>
    3e90:	a80b883a 	mov	r5,r21
    3e94:	000f883a 	mov	r7,zero
    3e98:	01800144 	movi	r6,5
    3e9c:	e009883a 	mov	r4,fp
    3ea0:	00065c80 	call	65c8 <__multadd>
    3ea4:	100b883a 	mov	r5,r2
    3ea8:	8009883a 	mov	r4,r16
    3eac:	102b883a 	mov	r21,r2
    3eb0:	0006dc00 	call	6dc0 <__mcmp>
    3eb4:	dc000915 	stw	r16,36(sp)
    3eb8:	00bf410e 	bge	zero,r2,3bc0 <_dtoa_r+0xd64>
    3ebc:	d9c00717 	ldw	r7,28(sp)
    3ec0:	00800c44 	movi	r2,49
    3ec4:	38800005 	stb	r2,0(r7)
    3ec8:	d8800517 	ldw	r2,20(sp)
    3ecc:	3dc00044 	addi	r23,r7,1
    3ed0:	10800044 	addi	r2,r2,1
    3ed4:	d8800515 	stw	r2,20(sp)
    3ed8:	003f3d06 	br	3bd0 <_dtoa_r+0xd74>
    3edc:	d9800517 	ldw	r6,20(sp)
    3ee0:	d9c00717 	ldw	r7,28(sp)
    3ee4:	00800c44 	movi	r2,49
    3ee8:	31800044 	addi	r6,r6,1
    3eec:	d9800515 	stw	r6,20(sp)
    3ef0:	38800005 	stb	r2,0(r7)
    3ef4:	003edf06 	br	3a74 <_dtoa_r+0xc18>
    3ef8:	d8000b15 	stw	zero,44(sp)
    3efc:	003c9f06 	br	317c <_dtoa_r+0x320>
    3f00:	903e7e1e 	bne	r18,zero,38fc <_dtoa_r+0xaa0>
    3f04:	00800434 	movhi	r2,16
    3f08:	10bfffc4 	addi	r2,r2,-1
    3f0c:	9884703a 	and	r2,r19,r2
    3f10:	1000ea1e 	bne	r2,zero,42bc <_dtoa_r+0x1460>
    3f14:	9cdffc2c 	andhi	r19,r19,32752
    3f18:	9800e826 	beq	r19,zero,42bc <_dtoa_r+0x1460>
    3f1c:	d9c00817 	ldw	r7,32(sp)
    3f20:	b5800044 	addi	r22,r22,1
    3f24:	04c00044 	movi	r19,1
    3f28:	39c00044 	addi	r7,r7,1
    3f2c:	d9c00815 	stw	r7,32(sp)
    3f30:	d8800d17 	ldw	r2,52(sp)
    3f34:	103e721e 	bne	r2,zero,3900 <_dtoa_r+0xaa4>
    3f38:	00800044 	movi	r2,1
    3f3c:	003e7906 	br	3924 <_dtoa_r+0xac8>
    3f40:	8009883a 	mov	r4,r16
    3f44:	000cbe40 	call	cbe4 <__floatsidf>
    3f48:	d9800f17 	ldw	r6,60(sp)
    3f4c:	d9c01017 	ldw	r7,64(sp)
    3f50:	1009883a 	mov	r4,r2
    3f54:	180b883a 	mov	r5,r3
    3f58:	000bb500 	call	bb50 <__muldf3>
    3f5c:	000d883a 	mov	r6,zero
    3f60:	01d00734 	movhi	r7,16412
    3f64:	1009883a 	mov	r4,r2
    3f68:	180b883a 	mov	r5,r3
    3f6c:	000a7640 	call	a764 <__adddf3>
    3f70:	047f3034 	movhi	r17,64704
    3f74:	1021883a 	mov	r16,r2
    3f78:	1c63883a 	add	r17,r3,r17
    3f7c:	d9000f17 	ldw	r4,60(sp)
    3f80:	d9401017 	ldw	r5,64(sp)
    3f84:	000d883a 	mov	r6,zero
    3f88:	01d00534 	movhi	r7,16404
    3f8c:	000c2680 	call	c268 <__subdf3>
    3f90:	800d883a 	mov	r6,r16
    3f94:	880f883a 	mov	r7,r17
    3f98:	1009883a 	mov	r4,r2
    3f9c:	180b883a 	mov	r5,r3
    3fa0:	102b883a 	mov	r21,r2
    3fa4:	1829883a 	mov	r20,r3
    3fa8:	000b9800 	call	b980 <__gedf2>
    3fac:	00806c16 	blt	zero,r2,4160 <_dtoa_r+0x1304>
    3fb0:	89e0003c 	xorhi	r7,r17,32768
    3fb4:	800d883a 	mov	r6,r16
    3fb8:	a809883a 	mov	r4,r21
    3fbc:	a00b883a 	mov	r5,r20
    3fc0:	000ba5c0 	call	ba5c <__ledf2>
    3fc4:	103d7e0e 	bge	r2,zero,35c0 <_dtoa_r+0x764>
    3fc8:	002b883a 	mov	r21,zero
    3fcc:	0023883a 	mov	r17,zero
    3fd0:	003efb06 	br	3bc0 <_dtoa_r+0xd64>
    3fd4:	d8800717 	ldw	r2,28(sp)
    3fd8:	003bd006 	br	2f1c <_dtoa_r+0xc0>
    3fdc:	d9000a17 	ldw	r4,40(sp)
    3fe0:	d9800d17 	ldw	r6,52(sp)
    3fe4:	dd400a15 	stw	r21,40(sp)
    3fe8:	a905c83a 	sub	r2,r21,r4
    3fec:	308d883a 	add	r6,r6,r2
    3ff0:	d9800d15 	stw	r6,52(sp)
    3ff4:	002b883a 	mov	r21,zero
    3ff8:	003e0606 	br	3814 <_dtoa_r+0x9b8>
    3ffc:	9023883a 	mov	r17,r18
    4000:	9829883a 	mov	r20,r19
    4004:	04000084 	movi	r16,2
    4008:	003c9206 	br	3254 <_dtoa_r+0x3f8>
    400c:	04000044 	movi	r16,1
    4010:	dc000c15 	stw	r16,48(sp)
    4014:	dc000615 	stw	r16,24(sp)
    4018:	dc002215 	stw	r16,136(sp)
    401c:	e0001115 	stw	zero,68(fp)
    4020:	000b883a 	mov	r5,zero
    4024:	003c6906 	br	31cc <_dtoa_r+0x370>
    4028:	3021883a 	mov	r16,r6
    402c:	003ffb06 	br	401c <_dtoa_r+0x11c0>
    4030:	1000021e 	bne	r2,zero,403c <_dtoa_r+0x11e0>
    4034:	4200004c 	andi	r8,r8,1
    4038:	403e7d1e 	bne	r8,zero,3a30 <_dtoa_r+0xbd4>
    403c:	01000c04 	movi	r4,48
    4040:	00000106 	br	4048 <_dtoa_r+0x11ec>
    4044:	102f883a 	mov	r23,r2
    4048:	b8bfffc4 	addi	r2,r23,-1
    404c:	10c00007 	ldb	r3,0(r2)
    4050:	193ffc26 	beq	r3,r4,4044 <_dtoa_r+0x11e8>
    4054:	003e8706 	br	3a74 <_dtoa_r+0xc18>
    4058:	d8800517 	ldw	r2,20(sp)
    405c:	00a3c83a 	sub	r17,zero,r2
    4060:	8800a426 	beq	r17,zero,42f4 <_dtoa_r+0x1498>
    4064:	888003cc 	andi	r2,r17,15
    4068:	100490fa 	slli	r2,r2,3
    406c:	00c00074 	movhi	r3,1
    4070:	18c26a04 	addi	r3,r3,2472
    4074:	1885883a 	add	r2,r3,r2
    4078:	11800017 	ldw	r6,0(r2)
    407c:	11c00117 	ldw	r7,4(r2)
    4080:	9009883a 	mov	r4,r18
    4084:	980b883a 	mov	r5,r19
    4088:	8823d13a 	srai	r17,r17,4
    408c:	000bb500 	call	bb50 <__muldf3>
    4090:	d8800f15 	stw	r2,60(sp)
    4094:	d8c01015 	stw	r3,64(sp)
    4098:	8800e826 	beq	r17,zero,443c <_dtoa_r+0x15e0>
    409c:	05000074 	movhi	r20,1
    40a0:	a5026004 	addi	r20,r20,2432
    40a4:	04000084 	movi	r16,2
    40a8:	8980004c 	andi	r6,r17,1
    40ac:	1009883a 	mov	r4,r2
    40b0:	8823d07a 	srai	r17,r17,1
    40b4:	180b883a 	mov	r5,r3
    40b8:	30000426 	beq	r6,zero,40cc <_dtoa_r+0x1270>
    40bc:	a1800017 	ldw	r6,0(r20)
    40c0:	a1c00117 	ldw	r7,4(r20)
    40c4:	84000044 	addi	r16,r16,1
    40c8:	000bb500 	call	bb50 <__muldf3>
    40cc:	a5000204 	addi	r20,r20,8
    40d0:	883ff51e 	bne	r17,zero,40a8 <_dtoa_r+0x124c>
    40d4:	d8800f15 	stw	r2,60(sp)
    40d8:	d8c01015 	stw	r3,64(sp)
    40dc:	003c7606 	br	32b8 <_dtoa_r+0x45c>
    40e0:	00c00c04 	movi	r3,48
    40e4:	10c00005 	stb	r3,0(r2)
    40e8:	d8c00517 	ldw	r3,20(sp)
    40ec:	bd3fffc3 	ldbu	r20,-1(r23)
    40f0:	18c00044 	addi	r3,r3,1
    40f4:	d8c00515 	stw	r3,20(sp)
    40f8:	003db906 	br	37e0 <_dtoa_r+0x984>
    40fc:	89400117 	ldw	r5,4(r17)
    4100:	e009883a 	mov	r4,fp
    4104:	00064f80 	call	64f8 <_Balloc>
    4108:	89800417 	ldw	r6,16(r17)
    410c:	89400304 	addi	r5,r17,12
    4110:	11000304 	addi	r4,r2,12
    4114:	31800084 	addi	r6,r6,2
    4118:	318d883a 	add	r6,r6,r6
    411c:	318d883a 	add	r6,r6,r6
    4120:	1027883a 	mov	r19,r2
    4124:	000612c0 	call	612c <memcpy>
    4128:	01800044 	movi	r6,1
    412c:	980b883a 	mov	r5,r19
    4130:	e009883a 	mov	r4,fp
    4134:	0006c780 	call	6c78 <__lshift>
    4138:	1029883a 	mov	r20,r2
    413c:	003ecc06 	br	3c70 <_dtoa_r+0xe14>
    4140:	00800e44 	movi	r2,57
    4144:	90809026 	beq	r18,r2,4388 <_dtoa_r+0x152c>
    4148:	92000044 	addi	r8,r18,1
    414c:	003f1f06 	br	3dcc <_dtoa_r+0xf70>
    4150:	9011883a 	mov	r8,r18
    4154:	8825883a 	mov	r18,r17
    4158:	a023883a 	mov	r17,r20
    415c:	003e2906 	br	3a04 <_dtoa_r+0xba8>
    4160:	002b883a 	mov	r21,zero
    4164:	0023883a 	mov	r17,zero
    4168:	003f5406 	br	3ebc <_dtoa_r+0x1060>
    416c:	61bfffc4 	addi	r6,r12,-1
    4170:	300490fa 	slli	r2,r6,3
    4174:	00c00074 	movhi	r3,1
    4178:	18c26a04 	addi	r3,r3,2472
    417c:	1885883a 	add	r2,r3,r2
    4180:	11000017 	ldw	r4,0(r2)
    4184:	11400117 	ldw	r5,4(r2)
    4188:	d8800717 	ldw	r2,28(sp)
    418c:	880f883a 	mov	r7,r17
    4190:	d9801215 	stw	r6,72(sp)
    4194:	800d883a 	mov	r6,r16
    4198:	db001615 	stw	r12,88(sp)
    419c:	15c00044 	addi	r23,r2,1
    41a0:	000bb500 	call	bb50 <__muldf3>
    41a4:	d9401017 	ldw	r5,64(sp)
    41a8:	d9000f17 	ldw	r4,60(sp)
    41ac:	d8c01515 	stw	r3,84(sp)
    41b0:	d8801415 	stw	r2,80(sp)
    41b4:	000cb640 	call	cb64 <__fixdfsi>
    41b8:	1009883a 	mov	r4,r2
    41bc:	1021883a 	mov	r16,r2
    41c0:	000cbe40 	call	cbe4 <__floatsidf>
    41c4:	d9000f17 	ldw	r4,60(sp)
    41c8:	d9401017 	ldw	r5,64(sp)
    41cc:	100d883a 	mov	r6,r2
    41d0:	180f883a 	mov	r7,r3
    41d4:	000c2680 	call	c268 <__subdf3>
    41d8:	1829883a 	mov	r20,r3
    41dc:	d8c00717 	ldw	r3,28(sp)
    41e0:	84000c04 	addi	r16,r16,48
    41e4:	1023883a 	mov	r17,r2
    41e8:	1c000005 	stb	r16,0(r3)
    41ec:	db001617 	ldw	r12,88(sp)
    41f0:	00800044 	movi	r2,1
    41f4:	60802226 	beq	r12,r2,4280 <_dtoa_r+0x1424>
    41f8:	d9c00717 	ldw	r7,28(sp)
    41fc:	8805883a 	mov	r2,r17
    4200:	b82b883a 	mov	r21,r23
    4204:	3b19883a 	add	r12,r7,r12
    4208:	6023883a 	mov	r17,r12
    420c:	a007883a 	mov	r3,r20
    4210:	dc800f15 	stw	r18,60(sp)
    4214:	000d883a 	mov	r6,zero
    4218:	01d00934 	movhi	r7,16420
    421c:	1009883a 	mov	r4,r2
    4220:	180b883a 	mov	r5,r3
    4224:	000bb500 	call	bb50 <__muldf3>
    4228:	180b883a 	mov	r5,r3
    422c:	1009883a 	mov	r4,r2
    4230:	1829883a 	mov	r20,r3
    4234:	1025883a 	mov	r18,r2
    4238:	000cb640 	call	cb64 <__fixdfsi>
    423c:	1009883a 	mov	r4,r2
    4240:	1021883a 	mov	r16,r2
    4244:	000cbe40 	call	cbe4 <__floatsidf>
    4248:	100d883a 	mov	r6,r2
    424c:	180f883a 	mov	r7,r3
    4250:	9009883a 	mov	r4,r18
    4254:	a00b883a 	mov	r5,r20
    4258:	84000c04 	addi	r16,r16,48
    425c:	000c2680 	call	c268 <__subdf3>
    4260:	ad400044 	addi	r21,r21,1
    4264:	ac3fffc5 	stb	r16,-1(r21)
    4268:	ac7fea1e 	bne	r21,r17,4214 <_dtoa_r+0x13b8>
    426c:	1023883a 	mov	r17,r2
    4270:	d8801217 	ldw	r2,72(sp)
    4274:	dc800f17 	ldw	r18,60(sp)
    4278:	1829883a 	mov	r20,r3
    427c:	b8af883a 	add	r23,r23,r2
    4280:	d9001417 	ldw	r4,80(sp)
    4284:	d9401517 	ldw	r5,84(sp)
    4288:	000d883a 	mov	r6,zero
    428c:	01cff834 	movhi	r7,16352
    4290:	000a7640 	call	a764 <__adddf3>
    4294:	880d883a 	mov	r6,r17
    4298:	a00f883a 	mov	r7,r20
    429c:	1009883a 	mov	r4,r2
    42a0:	180b883a 	mov	r5,r3
    42a4:	000ba5c0 	call	ba5c <__ledf2>
    42a8:	10003e0e 	bge	r2,zero,43a4 <_dtoa_r+0x1548>
    42ac:	d9001317 	ldw	r4,76(sp)
    42b0:	bd3fffc3 	ldbu	r20,-1(r23)
    42b4:	d9000515 	stw	r4,20(sp)
    42b8:	003d3b06 	br	37a8 <_dtoa_r+0x94c>
    42bc:	0027883a 	mov	r19,zero
    42c0:	003f1b06 	br	3f30 <_dtoa_r+0x10d4>
    42c4:	d8800817 	ldw	r2,32(sp)
    42c8:	11e9c83a 	sub	r20,r2,r7
    42cc:	0005883a 	mov	r2,zero
    42d0:	003d5406 	br	3824 <_dtoa_r+0x9c8>
    42d4:	00800044 	movi	r2,1
    42d8:	003dc706 	br	39f8 <_dtoa_r+0xb9c>
    42dc:	d8c00217 	ldw	r3,8(sp)
    42e0:	00800d84 	movi	r2,54
    42e4:	dd400a17 	ldw	r21,40(sp)
    42e8:	10c5c83a 	sub	r2,r2,r3
    42ec:	dd000817 	ldw	r20,32(sp)
    42f0:	003d4c06 	br	3824 <_dtoa_r+0x9c8>
    42f4:	dc800f15 	stw	r18,60(sp)
    42f8:	dcc01015 	stw	r19,64(sp)
    42fc:	04000084 	movi	r16,2
    4300:	003bed06 	br	32b8 <_dtoa_r+0x45c>
    4304:	d9000617 	ldw	r4,24(sp)
    4308:	203f0d26 	beq	r4,zero,3f40 <_dtoa_r+0x10e4>
    430c:	d9800c17 	ldw	r6,48(sp)
    4310:	01bcab0e 	bge	zero,r6,35c0 <_dtoa_r+0x764>
    4314:	d9401017 	ldw	r5,64(sp)
    4318:	d9000f17 	ldw	r4,60(sp)
    431c:	000d883a 	mov	r6,zero
    4320:	01d00934 	movhi	r7,16420
    4324:	000bb500 	call	bb50 <__muldf3>
    4328:	81000044 	addi	r4,r16,1
    432c:	d8800f15 	stw	r2,60(sp)
    4330:	d8c01015 	stw	r3,64(sp)
    4334:	000cbe40 	call	cbe4 <__floatsidf>
    4338:	d9800f17 	ldw	r6,60(sp)
    433c:	d9c01017 	ldw	r7,64(sp)
    4340:	1009883a 	mov	r4,r2
    4344:	180b883a 	mov	r5,r3
    4348:	000bb500 	call	bb50 <__muldf3>
    434c:	01d00734 	movhi	r7,16412
    4350:	000d883a 	mov	r6,zero
    4354:	1009883a 	mov	r4,r2
    4358:	180b883a 	mov	r5,r3
    435c:	000a7640 	call	a764 <__adddf3>
    4360:	d9c00517 	ldw	r7,20(sp)
    4364:	047f3034 	movhi	r17,64704
    4368:	1021883a 	mov	r16,r2
    436c:	39ffffc4 	addi	r7,r7,-1
    4370:	d9c01315 	stw	r7,76(sp)
    4374:	1c63883a 	add	r17,r3,r17
    4378:	db000c17 	ldw	r12,48(sp)
    437c:	003bea06 	br	3328 <_dtoa_r+0x4cc>
    4380:	dc000915 	stw	r16,36(sp)
    4384:	003e0e06 	br	3bc0 <_dtoa_r+0xd64>
    4388:	01000e44 	movi	r4,57
    438c:	8825883a 	mov	r18,r17
    4390:	9dc00044 	addi	r23,r19,1
    4394:	99000005 	stb	r4,0(r19)
    4398:	a023883a 	mov	r17,r20
    439c:	dc000915 	stw	r16,36(sp)
    43a0:	003da406 	br	3a34 <_dtoa_r+0xbd8>
    43a4:	d9801417 	ldw	r6,80(sp)
    43a8:	d9c01517 	ldw	r7,84(sp)
    43ac:	0009883a 	mov	r4,zero
    43b0:	014ff834 	movhi	r5,16352
    43b4:	000c2680 	call	c268 <__subdf3>
    43b8:	880d883a 	mov	r6,r17
    43bc:	a00f883a 	mov	r7,r20
    43c0:	1009883a 	mov	r4,r2
    43c4:	180b883a 	mov	r5,r3
    43c8:	000b9800 	call	b980 <__gedf2>
    43cc:	00bc7c0e 	bge	zero,r2,35c0 <_dtoa_r+0x764>
    43d0:	01000c04 	movi	r4,48
    43d4:	00000106 	br	43dc <_dtoa_r+0x1580>
    43d8:	102f883a 	mov	r23,r2
    43dc:	b8bfffc4 	addi	r2,r23,-1
    43e0:	10c00007 	ldb	r3,0(r2)
    43e4:	193ffc26 	beq	r3,r4,43d8 <_dtoa_r+0x157c>
    43e8:	d9801317 	ldw	r6,76(sp)
    43ec:	d9800515 	stw	r6,20(sp)
    43f0:	003c4406 	br	3504 <_dtoa_r+0x6a8>
    43f4:	d9801317 	ldw	r6,76(sp)
    43f8:	d9800515 	stw	r6,20(sp)
    43fc:	003cea06 	br	37a8 <_dtoa_r+0x94c>
    4400:	dd800f17 	ldw	r22,60(sp)
    4404:	dcc01017 	ldw	r19,64(sp)
    4408:	dc801217 	ldw	r18,72(sp)
    440c:	003c6c06 	br	35c0 <_dtoa_r+0x764>
    4410:	903e031e 	bne	r18,zero,3c20 <_dtoa_r+0xdc4>
    4414:	003ebb06 	br	3f04 <_dtoa_r+0x10a8>
    4418:	103e6c1e 	bne	r2,zero,3dcc <_dtoa_r+0xf70>
    441c:	4080004c 	andi	r2,r8,1
    4420:	103e6a26 	beq	r2,zero,3dcc <_dtoa_r+0xf70>
    4424:	003e6606 	br	3dc0 <_dtoa_r+0xf64>
    4428:	d8c00317 	ldw	r3,12(sp)
    442c:	00800084 	movi	r2,2
    4430:	10c02916 	blt	r2,r3,44d8 <_dtoa_r+0x167c>
    4434:	d9000c17 	ldw	r4,48(sp)
    4438:	003e8806 	br	3e5c <_dtoa_r+0x1000>
    443c:	04000084 	movi	r16,2
    4440:	003b9d06 	br	32b8 <_dtoa_r+0x45c>
    4444:	d9001317 	ldw	r4,76(sp)
    4448:	d9000515 	stw	r4,20(sp)
    444c:	003cd606 	br	37a8 <_dtoa_r+0x94c>
    4450:	d8801317 	ldw	r2,76(sp)
    4454:	d8800515 	stw	r2,20(sp)
    4458:	003c2a06 	br	3504 <_dtoa_r+0x6a8>
    445c:	d9800317 	ldw	r6,12(sp)
    4460:	00800084 	movi	r2,2
    4464:	11801516 	blt	r2,r6,44bc <_dtoa_r+0x1660>
    4468:	d9c00c17 	ldw	r7,48(sp)
    446c:	d9c00615 	stw	r7,24(sp)
    4470:	003df706 	br	3c50 <_dtoa_r+0xdf4>
    4474:	193d3926 	beq	r3,r4,395c <_dtoa_r+0xb00>
    4478:	00c00f04 	movi	r3,60
    447c:	1885c83a 	sub	r2,r3,r2
    4480:	003ddf06 	br	3c00 <_dtoa_r+0xda4>
    4484:	e009883a 	mov	r4,fp
    4488:	e0001115 	stw	zero,68(fp)
    448c:	000b883a 	mov	r5,zero
    4490:	00064f80 	call	64f8 <_Balloc>
    4494:	d8800715 	stw	r2,28(sp)
    4498:	d8c00717 	ldw	r3,28(sp)
    449c:	00bfffc4 	movi	r2,-1
    44a0:	01000044 	movi	r4,1
    44a4:	d8800c15 	stw	r2,48(sp)
    44a8:	e0c01015 	stw	r3,64(fp)
    44ac:	d9000b15 	stw	r4,44(sp)
    44b0:	d8800615 	stw	r2,24(sp)
    44b4:	d8002215 	stw	zero,136(sp)
    44b8:	003c4106 	br	35c0 <_dtoa_r+0x764>
    44bc:	d8c00c17 	ldw	r3,48(sp)
    44c0:	d8c00615 	stw	r3,24(sp)
    44c4:	003e7006 	br	3e88 <_dtoa_r+0x102c>
    44c8:	04400044 	movi	r17,1
    44cc:	003b2006 	br	3150 <_dtoa_r+0x2f4>
    44d0:	000b883a 	mov	r5,zero
    44d4:	003b3d06 	br	31cc <_dtoa_r+0x370>
    44d8:	d8800c17 	ldw	r2,48(sp)
    44dc:	d8800615 	stw	r2,24(sp)
    44e0:	003e6906 	br	3e88 <_dtoa_r+0x102c>

000044e4 <__sflush_r>:
    44e4:	2880030b 	ldhu	r2,12(r5)
    44e8:	defffb04 	addi	sp,sp,-20
    44ec:	dcc00315 	stw	r19,12(sp)
    44f0:	dc400115 	stw	r17,4(sp)
    44f4:	dfc00415 	stw	ra,16(sp)
    44f8:	dc800215 	stw	r18,8(sp)
    44fc:	dc000015 	stw	r16,0(sp)
    4500:	10c0020c 	andi	r3,r2,8
    4504:	2823883a 	mov	r17,r5
    4508:	2027883a 	mov	r19,r4
    450c:	1800311e 	bne	r3,zero,45d4 <__sflush_r+0xf0>
    4510:	28c00117 	ldw	r3,4(r5)
    4514:	10820014 	ori	r2,r2,2048
    4518:	2880030d 	sth	r2,12(r5)
    451c:	00c04b0e 	bge	zero,r3,464c <__sflush_r+0x168>
    4520:	8a000a17 	ldw	r8,40(r17)
    4524:	40002326 	beq	r8,zero,45b4 <__sflush_r+0xd0>
    4528:	9c000017 	ldw	r16,0(r19)
    452c:	10c4000c 	andi	r3,r2,4096
    4530:	98000015 	stw	zero,0(r19)
    4534:	18004826 	beq	r3,zero,4658 <__sflush_r+0x174>
    4538:	89801417 	ldw	r6,80(r17)
    453c:	10c0010c 	andi	r3,r2,4
    4540:	18000626 	beq	r3,zero,455c <__sflush_r+0x78>
    4544:	88c00117 	ldw	r3,4(r17)
    4548:	88800c17 	ldw	r2,48(r17)
    454c:	30cdc83a 	sub	r6,r6,r3
    4550:	10000226 	beq	r2,zero,455c <__sflush_r+0x78>
    4554:	88800f17 	ldw	r2,60(r17)
    4558:	308dc83a 	sub	r6,r6,r2
    455c:	89400717 	ldw	r5,28(r17)
    4560:	000f883a 	mov	r7,zero
    4564:	9809883a 	mov	r4,r19
    4568:	403ee83a 	callr	r8
    456c:	00ffffc4 	movi	r3,-1
    4570:	10c04426 	beq	r2,r3,4684 <__sflush_r+0x1a0>
    4574:	88c0030b 	ldhu	r3,12(r17)
    4578:	89000417 	ldw	r4,16(r17)
    457c:	88000115 	stw	zero,4(r17)
    4580:	197dffcc 	andi	r5,r3,63487
    4584:	8940030d 	sth	r5,12(r17)
    4588:	89000015 	stw	r4,0(r17)
    458c:	18c4000c 	andi	r3,r3,4096
    4590:	18002c1e 	bne	r3,zero,4644 <__sflush_r+0x160>
    4594:	89400c17 	ldw	r5,48(r17)
    4598:	9c000015 	stw	r16,0(r19)
    459c:	28000526 	beq	r5,zero,45b4 <__sflush_r+0xd0>
    45a0:	88801004 	addi	r2,r17,64
    45a4:	28800226 	beq	r5,r2,45b0 <__sflush_r+0xcc>
    45a8:	9809883a 	mov	r4,r19
    45ac:	0004c500 	call	4c50 <_free_r>
    45b0:	88000c15 	stw	zero,48(r17)
    45b4:	0005883a 	mov	r2,zero
    45b8:	dfc00417 	ldw	ra,16(sp)
    45bc:	dcc00317 	ldw	r19,12(sp)
    45c0:	dc800217 	ldw	r18,8(sp)
    45c4:	dc400117 	ldw	r17,4(sp)
    45c8:	dc000017 	ldw	r16,0(sp)
    45cc:	dec00504 	addi	sp,sp,20
    45d0:	f800283a 	ret
    45d4:	2c800417 	ldw	r18,16(r5)
    45d8:	903ff626 	beq	r18,zero,45b4 <__sflush_r+0xd0>
    45dc:	2c000017 	ldw	r16,0(r5)
    45e0:	108000cc 	andi	r2,r2,3
    45e4:	2c800015 	stw	r18,0(r5)
    45e8:	84a1c83a 	sub	r16,r16,r18
    45ec:	1000131e 	bne	r2,zero,463c <__sflush_r+0x158>
    45f0:	28800517 	ldw	r2,20(r5)
    45f4:	88800215 	stw	r2,8(r17)
    45f8:	04000316 	blt	zero,r16,4608 <__sflush_r+0x124>
    45fc:	003fed06 	br	45b4 <__sflush_r+0xd0>
    4600:	90a5883a 	add	r18,r18,r2
    4604:	043feb0e 	bge	zero,r16,45b4 <__sflush_r+0xd0>
    4608:	88800917 	ldw	r2,36(r17)
    460c:	89400717 	ldw	r5,28(r17)
    4610:	800f883a 	mov	r7,r16
    4614:	900d883a 	mov	r6,r18
    4618:	9809883a 	mov	r4,r19
    461c:	103ee83a 	callr	r2
    4620:	80a1c83a 	sub	r16,r16,r2
    4624:	00bff616 	blt	zero,r2,4600 <__sflush_r+0x11c>
    4628:	88c0030b 	ldhu	r3,12(r17)
    462c:	00bfffc4 	movi	r2,-1
    4630:	18c01014 	ori	r3,r3,64
    4634:	88c0030d 	sth	r3,12(r17)
    4638:	003fdf06 	br	45b8 <__sflush_r+0xd4>
    463c:	0005883a 	mov	r2,zero
    4640:	003fec06 	br	45f4 <__sflush_r+0x110>
    4644:	88801415 	stw	r2,80(r17)
    4648:	003fd206 	br	4594 <__sflush_r+0xb0>
    464c:	28c00f17 	ldw	r3,60(r5)
    4650:	00ffb316 	blt	zero,r3,4520 <__sflush_r+0x3c>
    4654:	003fd706 	br	45b4 <__sflush_r+0xd0>
    4658:	89400717 	ldw	r5,28(r17)
    465c:	000d883a 	mov	r6,zero
    4660:	01c00044 	movi	r7,1
    4664:	9809883a 	mov	r4,r19
    4668:	403ee83a 	callr	r8
    466c:	100d883a 	mov	r6,r2
    4670:	00bfffc4 	movi	r2,-1
    4674:	30801426 	beq	r6,r2,46c8 <__sflush_r+0x1e4>
    4678:	8880030b 	ldhu	r2,12(r17)
    467c:	8a000a17 	ldw	r8,40(r17)
    4680:	003fae06 	br	453c <__sflush_r+0x58>
    4684:	98c00017 	ldw	r3,0(r19)
    4688:	183fba26 	beq	r3,zero,4574 <__sflush_r+0x90>
    468c:	01000744 	movi	r4,29
    4690:	19000626 	beq	r3,r4,46ac <__sflush_r+0x1c8>
    4694:	01000584 	movi	r4,22
    4698:	19000426 	beq	r3,r4,46ac <__sflush_r+0x1c8>
    469c:	88c0030b 	ldhu	r3,12(r17)
    46a0:	18c01014 	ori	r3,r3,64
    46a4:	88c0030d 	sth	r3,12(r17)
    46a8:	003fc306 	br	45b8 <__sflush_r+0xd4>
    46ac:	8880030b 	ldhu	r2,12(r17)
    46b0:	88c00417 	ldw	r3,16(r17)
    46b4:	88000115 	stw	zero,4(r17)
    46b8:	10bdffcc 	andi	r2,r2,63487
    46bc:	8880030d 	sth	r2,12(r17)
    46c0:	88c00015 	stw	r3,0(r17)
    46c4:	003fb306 	br	4594 <__sflush_r+0xb0>
    46c8:	98800017 	ldw	r2,0(r19)
    46cc:	103fea26 	beq	r2,zero,4678 <__sflush_r+0x194>
    46d0:	00c00744 	movi	r3,29
    46d4:	10c00226 	beq	r2,r3,46e0 <__sflush_r+0x1fc>
    46d8:	00c00584 	movi	r3,22
    46dc:	10c0031e 	bne	r2,r3,46ec <__sflush_r+0x208>
    46e0:	9c000015 	stw	r16,0(r19)
    46e4:	0005883a 	mov	r2,zero
    46e8:	003fb306 	br	45b8 <__sflush_r+0xd4>
    46ec:	88c0030b 	ldhu	r3,12(r17)
    46f0:	3005883a 	mov	r2,r6
    46f4:	18c01014 	ori	r3,r3,64
    46f8:	88c0030d 	sth	r3,12(r17)
    46fc:	003fae06 	br	45b8 <__sflush_r+0xd4>

00004700 <_fflush_r>:
    4700:	defffd04 	addi	sp,sp,-12
    4704:	dc000115 	stw	r16,4(sp)
    4708:	dfc00215 	stw	ra,8(sp)
    470c:	2021883a 	mov	r16,r4
    4710:	20000226 	beq	r4,zero,471c <_fflush_r+0x1c>
    4714:	20800e17 	ldw	r2,56(r4)
    4718:	10000c26 	beq	r2,zero,474c <_fflush_r+0x4c>
    471c:	2880030f 	ldh	r2,12(r5)
    4720:	1000051e 	bne	r2,zero,4738 <_fflush_r+0x38>
    4724:	0005883a 	mov	r2,zero
    4728:	dfc00217 	ldw	ra,8(sp)
    472c:	dc000117 	ldw	r16,4(sp)
    4730:	dec00304 	addi	sp,sp,12
    4734:	f800283a 	ret
    4738:	8009883a 	mov	r4,r16
    473c:	dfc00217 	ldw	ra,8(sp)
    4740:	dc000117 	ldw	r16,4(sp)
    4744:	dec00304 	addi	sp,sp,12
    4748:	00044e41 	jmpi	44e4 <__sflush_r>
    474c:	d9400015 	stw	r5,0(sp)
    4750:	0004adc0 	call	4adc <__sinit>
    4754:	d9400017 	ldw	r5,0(sp)
    4758:	003ff006 	br	471c <_fflush_r+0x1c>

0000475c <fflush>:
    475c:	20000526 	beq	r4,zero,4774 <fflush+0x18>
    4760:	00800074 	movhi	r2,1
    4764:	1089e404 	addi	r2,r2,10128
    4768:	200b883a 	mov	r5,r4
    476c:	11000017 	ldw	r4,0(r2)
    4770:	00047001 	jmpi	4700 <_fflush_r>
    4774:	00800074 	movhi	r2,1
    4778:	1089e304 	addi	r2,r2,10124
    477c:	11000017 	ldw	r4,0(r2)
    4780:	01400034 	movhi	r5,0
    4784:	2951c004 	addi	r5,r5,18176
    4788:	00054e01 	jmpi	54e0 <_fwalk_reent>

0000478c <__fp_unlock>:
    478c:	0005883a 	mov	r2,zero
    4790:	f800283a 	ret

00004794 <_cleanup_r>:
    4794:	01400074 	movhi	r5,1
    4798:	29653e04 	addi	r5,r5,-27400
    479c:	00054e01 	jmpi	54e0 <_fwalk_reent>

000047a0 <__sinit.part.1>:
    47a0:	defff704 	addi	sp,sp,-36
    47a4:	00c00034 	movhi	r3,0
    47a8:	dfc00815 	stw	ra,32(sp)
    47ac:	ddc00715 	stw	r23,28(sp)
    47b0:	dd800615 	stw	r22,24(sp)
    47b4:	dd400515 	stw	r21,20(sp)
    47b8:	dd000415 	stw	r20,16(sp)
    47bc:	dcc00315 	stw	r19,12(sp)
    47c0:	dc800215 	stw	r18,8(sp)
    47c4:	dc400115 	stw	r17,4(sp)
    47c8:	dc000015 	stw	r16,0(sp)
    47cc:	18d1e504 	addi	r3,r3,18324
    47d0:	24000117 	ldw	r16,4(r4)
    47d4:	20c00f15 	stw	r3,60(r4)
    47d8:	2080bb04 	addi	r2,r4,748
    47dc:	00c000c4 	movi	r3,3
    47e0:	20c0b915 	stw	r3,740(r4)
    47e4:	2080ba15 	stw	r2,744(r4)
    47e8:	2000b815 	stw	zero,736(r4)
    47ec:	05c00204 	movi	r23,8
    47f0:	00800104 	movi	r2,4
    47f4:	2025883a 	mov	r18,r4
    47f8:	b80d883a 	mov	r6,r23
    47fc:	81001704 	addi	r4,r16,92
    4800:	000b883a 	mov	r5,zero
    4804:	80000015 	stw	zero,0(r16)
    4808:	80000115 	stw	zero,4(r16)
    480c:	80000215 	stw	zero,8(r16)
    4810:	8080030d 	sth	r2,12(r16)
    4814:	80001915 	stw	zero,100(r16)
    4818:	8000038d 	sth	zero,14(r16)
    481c:	80000415 	stw	zero,16(r16)
    4820:	80000515 	stw	zero,20(r16)
    4824:	80000615 	stw	zero,24(r16)
    4828:	00063d00 	call	63d0 <memset>
    482c:	05800034 	movhi	r22,0
    4830:	94400217 	ldw	r17,8(r18)
    4834:	05400034 	movhi	r21,0
    4838:	05000034 	movhi	r20,0
    483c:	04c00034 	movhi	r19,0
    4840:	b59ec804 	addi	r22,r22,31520
    4844:	ad5edf04 	addi	r21,r21,31612
    4848:	a51efe04 	addi	r20,r20,31736
    484c:	9cdf1504 	addi	r19,r19,31828
    4850:	85800815 	stw	r22,32(r16)
    4854:	85400915 	stw	r21,36(r16)
    4858:	85000a15 	stw	r20,40(r16)
    485c:	84c00b15 	stw	r19,44(r16)
    4860:	84000715 	stw	r16,28(r16)
    4864:	00800284 	movi	r2,10
    4868:	8880030d 	sth	r2,12(r17)
    486c:	00800044 	movi	r2,1
    4870:	b80d883a 	mov	r6,r23
    4874:	89001704 	addi	r4,r17,92
    4878:	000b883a 	mov	r5,zero
    487c:	88000015 	stw	zero,0(r17)
    4880:	88000115 	stw	zero,4(r17)
    4884:	88000215 	stw	zero,8(r17)
    4888:	88001915 	stw	zero,100(r17)
    488c:	8880038d 	sth	r2,14(r17)
    4890:	88000415 	stw	zero,16(r17)
    4894:	88000515 	stw	zero,20(r17)
    4898:	88000615 	stw	zero,24(r17)
    489c:	00063d00 	call	63d0 <memset>
    48a0:	94000317 	ldw	r16,12(r18)
    48a4:	00800484 	movi	r2,18
    48a8:	8c400715 	stw	r17,28(r17)
    48ac:	8d800815 	stw	r22,32(r17)
    48b0:	8d400915 	stw	r21,36(r17)
    48b4:	8d000a15 	stw	r20,40(r17)
    48b8:	8cc00b15 	stw	r19,44(r17)
    48bc:	8080030d 	sth	r2,12(r16)
    48c0:	00800084 	movi	r2,2
    48c4:	80000015 	stw	zero,0(r16)
    48c8:	80000115 	stw	zero,4(r16)
    48cc:	80000215 	stw	zero,8(r16)
    48d0:	80001915 	stw	zero,100(r16)
    48d4:	8080038d 	sth	r2,14(r16)
    48d8:	80000415 	stw	zero,16(r16)
    48dc:	80000515 	stw	zero,20(r16)
    48e0:	80000615 	stw	zero,24(r16)
    48e4:	b80d883a 	mov	r6,r23
    48e8:	000b883a 	mov	r5,zero
    48ec:	81001704 	addi	r4,r16,92
    48f0:	00063d00 	call	63d0 <memset>
    48f4:	00800044 	movi	r2,1
    48f8:	84000715 	stw	r16,28(r16)
    48fc:	85800815 	stw	r22,32(r16)
    4900:	85400915 	stw	r21,36(r16)
    4904:	85000a15 	stw	r20,40(r16)
    4908:	84c00b15 	stw	r19,44(r16)
    490c:	90800e15 	stw	r2,56(r18)
    4910:	dfc00817 	ldw	ra,32(sp)
    4914:	ddc00717 	ldw	r23,28(sp)
    4918:	dd800617 	ldw	r22,24(sp)
    491c:	dd400517 	ldw	r21,20(sp)
    4920:	dd000417 	ldw	r20,16(sp)
    4924:	dcc00317 	ldw	r19,12(sp)
    4928:	dc800217 	ldw	r18,8(sp)
    492c:	dc400117 	ldw	r17,4(sp)
    4930:	dc000017 	ldw	r16,0(sp)
    4934:	dec00904 	addi	sp,sp,36
    4938:	f800283a 	ret

0000493c <__fp_lock>:
    493c:	0005883a 	mov	r2,zero
    4940:	f800283a 	ret

00004944 <__sfmoreglue>:
    4944:	defffc04 	addi	sp,sp,-16
    4948:	dc400115 	stw	r17,4(sp)
    494c:	2c7fffc4 	addi	r17,r5,-1
    4950:	8c401a24 	muli	r17,r17,104
    4954:	dc800215 	stw	r18,8(sp)
    4958:	2825883a 	mov	r18,r5
    495c:	89401d04 	addi	r5,r17,116
    4960:	dc000015 	stw	r16,0(sp)
    4964:	dfc00315 	stw	ra,12(sp)
    4968:	000583c0 	call	583c <_malloc_r>
    496c:	1021883a 	mov	r16,r2
    4970:	10000726 	beq	r2,zero,4990 <__sfmoreglue+0x4c>
    4974:	11000304 	addi	r4,r2,12
    4978:	10000015 	stw	zero,0(r2)
    497c:	14800115 	stw	r18,4(r2)
    4980:	11000215 	stw	r4,8(r2)
    4984:	89801a04 	addi	r6,r17,104
    4988:	000b883a 	mov	r5,zero
    498c:	00063d00 	call	63d0 <memset>
    4990:	8005883a 	mov	r2,r16
    4994:	dfc00317 	ldw	ra,12(sp)
    4998:	dc800217 	ldw	r18,8(sp)
    499c:	dc400117 	ldw	r17,4(sp)
    49a0:	dc000017 	ldw	r16,0(sp)
    49a4:	dec00404 	addi	sp,sp,16
    49a8:	f800283a 	ret

000049ac <__sfp>:
    49ac:	defffb04 	addi	sp,sp,-20
    49b0:	dc000015 	stw	r16,0(sp)
    49b4:	04000074 	movhi	r16,1
    49b8:	8409e304 	addi	r16,r16,10124
    49bc:	dcc00315 	stw	r19,12(sp)
    49c0:	2027883a 	mov	r19,r4
    49c4:	81000017 	ldw	r4,0(r16)
    49c8:	dfc00415 	stw	ra,16(sp)
    49cc:	dc800215 	stw	r18,8(sp)
    49d0:	20800e17 	ldw	r2,56(r4)
    49d4:	dc400115 	stw	r17,4(sp)
    49d8:	1000021e 	bne	r2,zero,49e4 <__sfp+0x38>
    49dc:	00047a00 	call	47a0 <__sinit.part.1>
    49e0:	81000017 	ldw	r4,0(r16)
    49e4:	2480b804 	addi	r18,r4,736
    49e8:	047fffc4 	movi	r17,-1
    49ec:	91000117 	ldw	r4,4(r18)
    49f0:	94000217 	ldw	r16,8(r18)
    49f4:	213fffc4 	addi	r4,r4,-1
    49f8:	20000a16 	blt	r4,zero,4a24 <__sfp+0x78>
    49fc:	8080030f 	ldh	r2,12(r16)
    4a00:	10000c26 	beq	r2,zero,4a34 <__sfp+0x88>
    4a04:	80c01d04 	addi	r3,r16,116
    4a08:	00000206 	br	4a14 <__sfp+0x68>
    4a0c:	18bfe60f 	ldh	r2,-104(r3)
    4a10:	10000826 	beq	r2,zero,4a34 <__sfp+0x88>
    4a14:	213fffc4 	addi	r4,r4,-1
    4a18:	1c3ffd04 	addi	r16,r3,-12
    4a1c:	18c01a04 	addi	r3,r3,104
    4a20:	247ffa1e 	bne	r4,r17,4a0c <__sfp+0x60>
    4a24:	90800017 	ldw	r2,0(r18)
    4a28:	10001d26 	beq	r2,zero,4aa0 <__sfp+0xf4>
    4a2c:	1025883a 	mov	r18,r2
    4a30:	003fee06 	br	49ec <__sfp+0x40>
    4a34:	00bfffc4 	movi	r2,-1
    4a38:	8080038d 	sth	r2,14(r16)
    4a3c:	00800044 	movi	r2,1
    4a40:	8080030d 	sth	r2,12(r16)
    4a44:	80001915 	stw	zero,100(r16)
    4a48:	80000015 	stw	zero,0(r16)
    4a4c:	80000215 	stw	zero,8(r16)
    4a50:	80000115 	stw	zero,4(r16)
    4a54:	80000415 	stw	zero,16(r16)
    4a58:	80000515 	stw	zero,20(r16)
    4a5c:	80000615 	stw	zero,24(r16)
    4a60:	01800204 	movi	r6,8
    4a64:	000b883a 	mov	r5,zero
    4a68:	81001704 	addi	r4,r16,92
    4a6c:	00063d00 	call	63d0 <memset>
    4a70:	8005883a 	mov	r2,r16
    4a74:	80000c15 	stw	zero,48(r16)
    4a78:	80000d15 	stw	zero,52(r16)
    4a7c:	80001115 	stw	zero,68(r16)
    4a80:	80001215 	stw	zero,72(r16)
    4a84:	dfc00417 	ldw	ra,16(sp)
    4a88:	dcc00317 	ldw	r19,12(sp)
    4a8c:	dc800217 	ldw	r18,8(sp)
    4a90:	dc400117 	ldw	r17,4(sp)
    4a94:	dc000017 	ldw	r16,0(sp)
    4a98:	dec00504 	addi	sp,sp,20
    4a9c:	f800283a 	ret
    4aa0:	01400104 	movi	r5,4
    4aa4:	9809883a 	mov	r4,r19
    4aa8:	00049440 	call	4944 <__sfmoreglue>
    4aac:	90800015 	stw	r2,0(r18)
    4ab0:	103fde1e 	bne	r2,zero,4a2c <__sfp+0x80>
    4ab4:	00800304 	movi	r2,12
    4ab8:	98800015 	stw	r2,0(r19)
    4abc:	0005883a 	mov	r2,zero
    4ac0:	003ff006 	br	4a84 <__sfp+0xd8>

00004ac4 <_cleanup>:
    4ac4:	00800074 	movhi	r2,1
    4ac8:	1089e304 	addi	r2,r2,10124
    4acc:	11000017 	ldw	r4,0(r2)
    4ad0:	01400074 	movhi	r5,1
    4ad4:	29653e04 	addi	r5,r5,-27400
    4ad8:	00054e01 	jmpi	54e0 <_fwalk_reent>

00004adc <__sinit>:
    4adc:	20800e17 	ldw	r2,56(r4)
    4ae0:	10000126 	beq	r2,zero,4ae8 <__sinit+0xc>
    4ae4:	f800283a 	ret
    4ae8:	00047a01 	jmpi	47a0 <__sinit.part.1>

00004aec <__sfp_lock_acquire>:
    4aec:	f800283a 	ret

00004af0 <__sfp_lock_release>:
    4af0:	f800283a 	ret

00004af4 <__sinit_lock_acquire>:
    4af4:	f800283a 	ret

00004af8 <__sinit_lock_release>:
    4af8:	f800283a 	ret

00004afc <__fp_lock_all>:
    4afc:	00800074 	movhi	r2,1
    4b00:	1089e404 	addi	r2,r2,10128
    4b04:	11000017 	ldw	r4,0(r2)
    4b08:	01400034 	movhi	r5,0
    4b0c:	29524f04 	addi	r5,r5,18748
    4b10:	000541c1 	jmpi	541c <_fwalk>

00004b14 <__fp_unlock_all>:
    4b14:	00800074 	movhi	r2,1
    4b18:	1089e404 	addi	r2,r2,10128
    4b1c:	11000017 	ldw	r4,0(r2)
    4b20:	01400034 	movhi	r5,0
    4b24:	2951e304 	addi	r5,r5,18316
    4b28:	000541c1 	jmpi	541c <_fwalk>

00004b2c <_malloc_trim_r>:
    4b2c:	defffb04 	addi	sp,sp,-20
    4b30:	dcc00315 	stw	r19,12(sp)
    4b34:	04c00074 	movhi	r19,1
    4b38:	dc800215 	stw	r18,8(sp)
    4b3c:	dc400115 	stw	r17,4(sp)
    4b40:	dc000015 	stw	r16,0(sp)
    4b44:	dfc00415 	stw	ra,16(sp)
    4b48:	2821883a 	mov	r16,r5
    4b4c:	9cc41d04 	addi	r19,r19,4212
    4b50:	2025883a 	mov	r18,r4
    4b54:	000d5700 	call	d570 <__malloc_lock>
    4b58:	98800217 	ldw	r2,8(r19)
    4b5c:	14400117 	ldw	r17,4(r2)
    4b60:	00bfff04 	movi	r2,-4
    4b64:	88a2703a 	and	r17,r17,r2
    4b68:	8c21c83a 	sub	r16,r17,r16
    4b6c:	8403fbc4 	addi	r16,r16,4079
    4b70:	8020d33a 	srli	r16,r16,12
    4b74:	0083ffc4 	movi	r2,4095
    4b78:	843fffc4 	addi	r16,r16,-1
    4b7c:	8020933a 	slli	r16,r16,12
    4b80:	1400060e 	bge	r2,r16,4b9c <_malloc_trim_r+0x70>
    4b84:	000b883a 	mov	r5,zero
    4b88:	9009883a 	mov	r4,r18
    4b8c:	0007acc0 	call	7acc <_sbrk_r>
    4b90:	98c00217 	ldw	r3,8(r19)
    4b94:	1c47883a 	add	r3,r3,r17
    4b98:	10c00a26 	beq	r2,r3,4bc4 <_malloc_trim_r+0x98>
    4b9c:	9009883a 	mov	r4,r18
    4ba0:	000d5940 	call	d594 <__malloc_unlock>
    4ba4:	0005883a 	mov	r2,zero
    4ba8:	dfc00417 	ldw	ra,16(sp)
    4bac:	dcc00317 	ldw	r19,12(sp)
    4bb0:	dc800217 	ldw	r18,8(sp)
    4bb4:	dc400117 	ldw	r17,4(sp)
    4bb8:	dc000017 	ldw	r16,0(sp)
    4bbc:	dec00504 	addi	sp,sp,20
    4bc0:	f800283a 	ret
    4bc4:	040bc83a 	sub	r5,zero,r16
    4bc8:	9009883a 	mov	r4,r18
    4bcc:	0007acc0 	call	7acc <_sbrk_r>
    4bd0:	00ffffc4 	movi	r3,-1
    4bd4:	10c00d26 	beq	r2,r3,4c0c <_malloc_trim_r+0xe0>
    4bd8:	00c00074 	movhi	r3,1
    4bdc:	18d10604 	addi	r3,r3,17432
    4be0:	18800017 	ldw	r2,0(r3)
    4be4:	99000217 	ldw	r4,8(r19)
    4be8:	8c23c83a 	sub	r17,r17,r16
    4bec:	8c400054 	ori	r17,r17,1
    4bf0:	1421c83a 	sub	r16,r2,r16
    4bf4:	24400115 	stw	r17,4(r4)
    4bf8:	9009883a 	mov	r4,r18
    4bfc:	1c000015 	stw	r16,0(r3)
    4c00:	000d5940 	call	d594 <__malloc_unlock>
    4c04:	00800044 	movi	r2,1
    4c08:	003fe706 	br	4ba8 <_malloc_trim_r+0x7c>
    4c0c:	000b883a 	mov	r5,zero
    4c10:	9009883a 	mov	r4,r18
    4c14:	0007acc0 	call	7acc <_sbrk_r>
    4c18:	99000217 	ldw	r4,8(r19)
    4c1c:	014003c4 	movi	r5,15
    4c20:	1107c83a 	sub	r3,r2,r4
    4c24:	28ffdd0e 	bge	r5,r3,4b9c <_malloc_trim_r+0x70>
    4c28:	01400074 	movhi	r5,1
    4c2c:	2949e604 	addi	r5,r5,10136
    4c30:	29400017 	ldw	r5,0(r5)
    4c34:	18c00054 	ori	r3,r3,1
    4c38:	20c00115 	stw	r3,4(r4)
    4c3c:	00c00074 	movhi	r3,1
    4c40:	1145c83a 	sub	r2,r2,r5
    4c44:	18d10604 	addi	r3,r3,17432
    4c48:	18800015 	stw	r2,0(r3)
    4c4c:	003fd306 	br	4b9c <_malloc_trim_r+0x70>

00004c50 <_free_r>:
    4c50:	28004126 	beq	r5,zero,4d58 <_free_r+0x108>
    4c54:	defffd04 	addi	sp,sp,-12
    4c58:	dc400115 	stw	r17,4(sp)
    4c5c:	dc000015 	stw	r16,0(sp)
    4c60:	2023883a 	mov	r17,r4
    4c64:	2821883a 	mov	r16,r5
    4c68:	dfc00215 	stw	ra,8(sp)
    4c6c:	000d5700 	call	d570 <__malloc_lock>
    4c70:	81ffff17 	ldw	r7,-4(r16)
    4c74:	00bfff84 	movi	r2,-2
    4c78:	01000074 	movhi	r4,1
    4c7c:	81bffe04 	addi	r6,r16,-8
    4c80:	3884703a 	and	r2,r7,r2
    4c84:	21041d04 	addi	r4,r4,4212
    4c88:	308b883a 	add	r5,r6,r2
    4c8c:	2a400117 	ldw	r9,4(r5)
    4c90:	22000217 	ldw	r8,8(r4)
    4c94:	00ffff04 	movi	r3,-4
    4c98:	48c6703a 	and	r3,r9,r3
    4c9c:	2a005726 	beq	r5,r8,4dfc <_free_r+0x1ac>
    4ca0:	28c00115 	stw	r3,4(r5)
    4ca4:	39c0004c 	andi	r7,r7,1
    4ca8:	3800091e 	bne	r7,zero,4cd0 <_free_r+0x80>
    4cac:	823ffe17 	ldw	r8,-8(r16)
    4cb0:	22400204 	addi	r9,r4,8
    4cb4:	320dc83a 	sub	r6,r6,r8
    4cb8:	31c00217 	ldw	r7,8(r6)
    4cbc:	1205883a 	add	r2,r2,r8
    4cc0:	3a406526 	beq	r7,r9,4e58 <_free_r+0x208>
    4cc4:	32000317 	ldw	r8,12(r6)
    4cc8:	3a000315 	stw	r8,12(r7)
    4ccc:	41c00215 	stw	r7,8(r8)
    4cd0:	28cf883a 	add	r7,r5,r3
    4cd4:	39c00117 	ldw	r7,4(r7)
    4cd8:	39c0004c 	andi	r7,r7,1
    4cdc:	38003a26 	beq	r7,zero,4dc8 <_free_r+0x178>
    4ce0:	10c00054 	ori	r3,r2,1
    4ce4:	30c00115 	stw	r3,4(r6)
    4ce8:	3087883a 	add	r3,r6,r2
    4cec:	18800015 	stw	r2,0(r3)
    4cf0:	00c07fc4 	movi	r3,511
    4cf4:	18801936 	bltu	r3,r2,4d5c <_free_r+0x10c>
    4cf8:	1004d0fa 	srli	r2,r2,3
    4cfc:	01c00044 	movi	r7,1
    4d00:	21400117 	ldw	r5,4(r4)
    4d04:	10c00044 	addi	r3,r2,1
    4d08:	18c7883a 	add	r3,r3,r3
    4d0c:	1005d0ba 	srai	r2,r2,2
    4d10:	18c7883a 	add	r3,r3,r3
    4d14:	18c7883a 	add	r3,r3,r3
    4d18:	1907883a 	add	r3,r3,r4
    4d1c:	3884983a 	sll	r2,r7,r2
    4d20:	19c00017 	ldw	r7,0(r3)
    4d24:	1a3ffe04 	addi	r8,r3,-8
    4d28:	1144b03a 	or	r2,r2,r5
    4d2c:	32000315 	stw	r8,12(r6)
    4d30:	31c00215 	stw	r7,8(r6)
    4d34:	20800115 	stw	r2,4(r4)
    4d38:	19800015 	stw	r6,0(r3)
    4d3c:	39800315 	stw	r6,12(r7)
    4d40:	8809883a 	mov	r4,r17
    4d44:	dfc00217 	ldw	ra,8(sp)
    4d48:	dc400117 	ldw	r17,4(sp)
    4d4c:	dc000017 	ldw	r16,0(sp)
    4d50:	dec00304 	addi	sp,sp,12
    4d54:	000d5941 	jmpi	d594 <__malloc_unlock>
    4d58:	f800283a 	ret
    4d5c:	100ad27a 	srli	r5,r2,9
    4d60:	00c00104 	movi	r3,4
    4d64:	19404a36 	bltu	r3,r5,4e90 <_free_r+0x240>
    4d68:	100ad1ba 	srli	r5,r2,6
    4d6c:	28c00e44 	addi	r3,r5,57
    4d70:	18c7883a 	add	r3,r3,r3
    4d74:	29400e04 	addi	r5,r5,56
    4d78:	18c7883a 	add	r3,r3,r3
    4d7c:	18c7883a 	add	r3,r3,r3
    4d80:	1909883a 	add	r4,r3,r4
    4d84:	20c00017 	ldw	r3,0(r4)
    4d88:	01c00074 	movhi	r7,1
    4d8c:	213ffe04 	addi	r4,r4,-8
    4d90:	39c41d04 	addi	r7,r7,4212
    4d94:	20c04426 	beq	r4,r3,4ea8 <_free_r+0x258>
    4d98:	01ffff04 	movi	r7,-4
    4d9c:	19400117 	ldw	r5,4(r3)
    4da0:	29ca703a 	and	r5,r5,r7
    4da4:	1140022e 	bgeu	r2,r5,4db0 <_free_r+0x160>
    4da8:	18c00217 	ldw	r3,8(r3)
    4dac:	20fffb1e 	bne	r4,r3,4d9c <_free_r+0x14c>
    4db0:	19000317 	ldw	r4,12(r3)
    4db4:	31000315 	stw	r4,12(r6)
    4db8:	30c00215 	stw	r3,8(r6)
    4dbc:	21800215 	stw	r6,8(r4)
    4dc0:	19800315 	stw	r6,12(r3)
    4dc4:	003fde06 	br	4d40 <_free_r+0xf0>
    4dc8:	29c00217 	ldw	r7,8(r5)
    4dcc:	10c5883a 	add	r2,r2,r3
    4dd0:	00c00074 	movhi	r3,1
    4dd4:	18c41f04 	addi	r3,r3,4220
    4dd8:	38c03b26 	beq	r7,r3,4ec8 <_free_r+0x278>
    4ddc:	2a000317 	ldw	r8,12(r5)
    4de0:	11400054 	ori	r5,r2,1
    4de4:	3087883a 	add	r3,r6,r2
    4de8:	3a000315 	stw	r8,12(r7)
    4dec:	41c00215 	stw	r7,8(r8)
    4df0:	31400115 	stw	r5,4(r6)
    4df4:	18800015 	stw	r2,0(r3)
    4df8:	003fbd06 	br	4cf0 <_free_r+0xa0>
    4dfc:	39c0004c 	andi	r7,r7,1
    4e00:	10c5883a 	add	r2,r2,r3
    4e04:	3800071e 	bne	r7,zero,4e24 <_free_r+0x1d4>
    4e08:	81fffe17 	ldw	r7,-8(r16)
    4e0c:	31cdc83a 	sub	r6,r6,r7
    4e10:	30c00317 	ldw	r3,12(r6)
    4e14:	31400217 	ldw	r5,8(r6)
    4e18:	11c5883a 	add	r2,r2,r7
    4e1c:	28c00315 	stw	r3,12(r5)
    4e20:	19400215 	stw	r5,8(r3)
    4e24:	10c00054 	ori	r3,r2,1
    4e28:	30c00115 	stw	r3,4(r6)
    4e2c:	00c00074 	movhi	r3,1
    4e30:	18c9e704 	addi	r3,r3,10140
    4e34:	18c00017 	ldw	r3,0(r3)
    4e38:	21800215 	stw	r6,8(r4)
    4e3c:	10ffc036 	bltu	r2,r3,4d40 <_free_r+0xf0>
    4e40:	00800074 	movhi	r2,1
    4e44:	1090fd04 	addi	r2,r2,17396
    4e48:	11400017 	ldw	r5,0(r2)
    4e4c:	8809883a 	mov	r4,r17
    4e50:	0004b2c0 	call	4b2c <_malloc_trim_r>
    4e54:	003fba06 	br	4d40 <_free_r+0xf0>
    4e58:	28c9883a 	add	r4,r5,r3
    4e5c:	21000117 	ldw	r4,4(r4)
    4e60:	2100004c 	andi	r4,r4,1
    4e64:	2000391e 	bne	r4,zero,4f4c <_free_r+0x2fc>
    4e68:	29c00217 	ldw	r7,8(r5)
    4e6c:	29000317 	ldw	r4,12(r5)
    4e70:	1885883a 	add	r2,r3,r2
    4e74:	10c00054 	ori	r3,r2,1
    4e78:	39000315 	stw	r4,12(r7)
    4e7c:	21c00215 	stw	r7,8(r4)
    4e80:	30c00115 	stw	r3,4(r6)
    4e84:	308d883a 	add	r6,r6,r2
    4e88:	30800015 	stw	r2,0(r6)
    4e8c:	003fac06 	br	4d40 <_free_r+0xf0>
    4e90:	00c00504 	movi	r3,20
    4e94:	19401536 	bltu	r3,r5,4eec <_free_r+0x29c>
    4e98:	28c01704 	addi	r3,r5,92
    4e9c:	18c7883a 	add	r3,r3,r3
    4ea0:	294016c4 	addi	r5,r5,91
    4ea4:	003fb406 	br	4d78 <_free_r+0x128>
    4ea8:	280bd0ba 	srai	r5,r5,2
    4eac:	00c00044 	movi	r3,1
    4eb0:	38800117 	ldw	r2,4(r7)
    4eb4:	194a983a 	sll	r5,r3,r5
    4eb8:	2007883a 	mov	r3,r4
    4ebc:	2884b03a 	or	r2,r5,r2
    4ec0:	38800115 	stw	r2,4(r7)
    4ec4:	003fbb06 	br	4db4 <_free_r+0x164>
    4ec8:	21800515 	stw	r6,20(r4)
    4ecc:	21800415 	stw	r6,16(r4)
    4ed0:	10c00054 	ori	r3,r2,1
    4ed4:	31c00315 	stw	r7,12(r6)
    4ed8:	31c00215 	stw	r7,8(r6)
    4edc:	30c00115 	stw	r3,4(r6)
    4ee0:	308d883a 	add	r6,r6,r2
    4ee4:	30800015 	stw	r2,0(r6)
    4ee8:	003f9506 	br	4d40 <_free_r+0xf0>
    4eec:	00c01504 	movi	r3,84
    4ef0:	19400536 	bltu	r3,r5,4f08 <_free_r+0x2b8>
    4ef4:	100ad33a 	srli	r5,r2,12
    4ef8:	28c01bc4 	addi	r3,r5,111
    4efc:	18c7883a 	add	r3,r3,r3
    4f00:	29401b84 	addi	r5,r5,110
    4f04:	003f9c06 	br	4d78 <_free_r+0x128>
    4f08:	00c05504 	movi	r3,340
    4f0c:	19400536 	bltu	r3,r5,4f24 <_free_r+0x2d4>
    4f10:	100ad3fa 	srli	r5,r2,15
    4f14:	28c01e04 	addi	r3,r5,120
    4f18:	18c7883a 	add	r3,r3,r3
    4f1c:	29401dc4 	addi	r5,r5,119
    4f20:	003f9506 	br	4d78 <_free_r+0x128>
    4f24:	00c15504 	movi	r3,1364
    4f28:	19400536 	bltu	r3,r5,4f40 <_free_r+0x2f0>
    4f2c:	100ad4ba 	srli	r5,r2,18
    4f30:	28c01f44 	addi	r3,r5,125
    4f34:	18c7883a 	add	r3,r3,r3
    4f38:	29401f04 	addi	r5,r5,124
    4f3c:	003f8e06 	br	4d78 <_free_r+0x128>
    4f40:	00c03f84 	movi	r3,254
    4f44:	01401f84 	movi	r5,126
    4f48:	003f8b06 	br	4d78 <_free_r+0x128>
    4f4c:	10c00054 	ori	r3,r2,1
    4f50:	30c00115 	stw	r3,4(r6)
    4f54:	308d883a 	add	r6,r6,r2
    4f58:	30800015 	stw	r2,0(r6)
    4f5c:	003f7806 	br	4d40 <_free_r+0xf0>

00004f60 <__sfvwrite_r>:
    4f60:	30800217 	ldw	r2,8(r6)
    4f64:	10006726 	beq	r2,zero,5104 <__sfvwrite_r+0x1a4>
    4f68:	28c0030b 	ldhu	r3,12(r5)
    4f6c:	defff404 	addi	sp,sp,-48
    4f70:	dd400715 	stw	r21,28(sp)
    4f74:	dd000615 	stw	r20,24(sp)
    4f78:	dc000215 	stw	r16,8(sp)
    4f7c:	dfc00b15 	stw	ra,44(sp)
    4f80:	df000a15 	stw	fp,40(sp)
    4f84:	ddc00915 	stw	r23,36(sp)
    4f88:	dd800815 	stw	r22,32(sp)
    4f8c:	dcc00515 	stw	r19,20(sp)
    4f90:	dc800415 	stw	r18,16(sp)
    4f94:	dc400315 	stw	r17,12(sp)
    4f98:	1880020c 	andi	r2,r3,8
    4f9c:	2821883a 	mov	r16,r5
    4fa0:	202b883a 	mov	r21,r4
    4fa4:	3029883a 	mov	r20,r6
    4fa8:	10002726 	beq	r2,zero,5048 <__sfvwrite_r+0xe8>
    4fac:	28800417 	ldw	r2,16(r5)
    4fb0:	10002526 	beq	r2,zero,5048 <__sfvwrite_r+0xe8>
    4fb4:	1880008c 	andi	r2,r3,2
    4fb8:	a4400017 	ldw	r17,0(r20)
    4fbc:	10002a26 	beq	r2,zero,5068 <__sfvwrite_r+0x108>
    4fc0:	05a00034 	movhi	r22,32768
    4fc4:	0027883a 	mov	r19,zero
    4fc8:	0025883a 	mov	r18,zero
    4fcc:	b5bf0004 	addi	r22,r22,-1024
    4fd0:	980d883a 	mov	r6,r19
    4fd4:	a809883a 	mov	r4,r21
    4fd8:	90004626 	beq	r18,zero,50f4 <__sfvwrite_r+0x194>
    4fdc:	900f883a 	mov	r7,r18
    4fe0:	b480022e 	bgeu	r22,r18,4fec <__sfvwrite_r+0x8c>
    4fe4:	01e00034 	movhi	r7,32768
    4fe8:	39ff0004 	addi	r7,r7,-1024
    4fec:	80800917 	ldw	r2,36(r16)
    4ff0:	81400717 	ldw	r5,28(r16)
    4ff4:	103ee83a 	callr	r2
    4ff8:	0080570e 	bge	zero,r2,5158 <__sfvwrite_r+0x1f8>
    4ffc:	a0c00217 	ldw	r3,8(r20)
    5000:	98a7883a 	add	r19,r19,r2
    5004:	90a5c83a 	sub	r18,r18,r2
    5008:	1885c83a 	sub	r2,r3,r2
    500c:	a0800215 	stw	r2,8(r20)
    5010:	103fef1e 	bne	r2,zero,4fd0 <__sfvwrite_r+0x70>
    5014:	0005883a 	mov	r2,zero
    5018:	dfc00b17 	ldw	ra,44(sp)
    501c:	df000a17 	ldw	fp,40(sp)
    5020:	ddc00917 	ldw	r23,36(sp)
    5024:	dd800817 	ldw	r22,32(sp)
    5028:	dd400717 	ldw	r21,28(sp)
    502c:	dd000617 	ldw	r20,24(sp)
    5030:	dcc00517 	ldw	r19,20(sp)
    5034:	dc800417 	ldw	r18,16(sp)
    5038:	dc400317 	ldw	r17,12(sp)
    503c:	dc000217 	ldw	r16,8(sp)
    5040:	dec00c04 	addi	sp,sp,48
    5044:	f800283a 	ret
    5048:	800b883a 	mov	r5,r16
    504c:	a809883a 	mov	r4,r21
    5050:	0002b080 	call	2b08 <__swsetup_r>
    5054:	1000eb1e 	bne	r2,zero,5404 <__sfvwrite_r+0x4a4>
    5058:	80c0030b 	ldhu	r3,12(r16)
    505c:	a4400017 	ldw	r17,0(r20)
    5060:	1880008c 	andi	r2,r3,2
    5064:	103fd61e 	bne	r2,zero,4fc0 <__sfvwrite_r+0x60>
    5068:	1880004c 	andi	r2,r3,1
    506c:	10003f1e 	bne	r2,zero,516c <__sfvwrite_r+0x20c>
    5070:	0039883a 	mov	fp,zero
    5074:	0025883a 	mov	r18,zero
    5078:	90001a26 	beq	r18,zero,50e4 <__sfvwrite_r+0x184>
    507c:	1880800c 	andi	r2,r3,512
    5080:	84c00217 	ldw	r19,8(r16)
    5084:	10002126 	beq	r2,zero,510c <__sfvwrite_r+0x1ac>
    5088:	982f883a 	mov	r23,r19
    508c:	94c09336 	bltu	r18,r19,52dc <__sfvwrite_r+0x37c>
    5090:	1881200c 	andi	r2,r3,1152
    5094:	10009e1e 	bne	r2,zero,5310 <__sfvwrite_r+0x3b0>
    5098:	81000017 	ldw	r4,0(r16)
    509c:	b80d883a 	mov	r6,r23
    50a0:	e00b883a 	mov	r5,fp
    50a4:	00062740 	call	6274 <memmove>
    50a8:	80c00217 	ldw	r3,8(r16)
    50ac:	81000017 	ldw	r4,0(r16)
    50b0:	9005883a 	mov	r2,r18
    50b4:	1ce7c83a 	sub	r19,r3,r19
    50b8:	25cf883a 	add	r7,r4,r23
    50bc:	84c00215 	stw	r19,8(r16)
    50c0:	81c00015 	stw	r7,0(r16)
    50c4:	a0c00217 	ldw	r3,8(r20)
    50c8:	e0b9883a 	add	fp,fp,r2
    50cc:	90a5c83a 	sub	r18,r18,r2
    50d0:	18a7c83a 	sub	r19,r3,r2
    50d4:	a4c00215 	stw	r19,8(r20)
    50d8:	983fce26 	beq	r19,zero,5014 <__sfvwrite_r+0xb4>
    50dc:	80c0030b 	ldhu	r3,12(r16)
    50e0:	903fe61e 	bne	r18,zero,507c <__sfvwrite_r+0x11c>
    50e4:	8f000017 	ldw	fp,0(r17)
    50e8:	8c800117 	ldw	r18,4(r17)
    50ec:	8c400204 	addi	r17,r17,8
    50f0:	003fe106 	br	5078 <__sfvwrite_r+0x118>
    50f4:	8cc00017 	ldw	r19,0(r17)
    50f8:	8c800117 	ldw	r18,4(r17)
    50fc:	8c400204 	addi	r17,r17,8
    5100:	003fb306 	br	4fd0 <__sfvwrite_r+0x70>
    5104:	0005883a 	mov	r2,zero
    5108:	f800283a 	ret
    510c:	81000017 	ldw	r4,0(r16)
    5110:	80800417 	ldw	r2,16(r16)
    5114:	11005736 	bltu	r2,r4,5274 <__sfvwrite_r+0x314>
    5118:	85c00517 	ldw	r23,20(r16)
    511c:	95c05536 	bltu	r18,r23,5274 <__sfvwrite_r+0x314>
    5120:	00a00034 	movhi	r2,32768
    5124:	10bfffc4 	addi	r2,r2,-1
    5128:	9009883a 	mov	r4,r18
    512c:	1480012e 	bgeu	r2,r18,5134 <__sfvwrite_r+0x1d4>
    5130:	1009883a 	mov	r4,r2
    5134:	b80b883a 	mov	r5,r23
    5138:	00004ac0 	call	4ac <__divsi3>
    513c:	15cf383a 	mul	r7,r2,r23
    5140:	81400717 	ldw	r5,28(r16)
    5144:	80800917 	ldw	r2,36(r16)
    5148:	e00d883a 	mov	r6,fp
    514c:	a809883a 	mov	r4,r21
    5150:	103ee83a 	callr	r2
    5154:	00bfdb16 	blt	zero,r2,50c4 <__sfvwrite_r+0x164>
    5158:	8080030b 	ldhu	r2,12(r16)
    515c:	10801014 	ori	r2,r2,64
    5160:	8080030d 	sth	r2,12(r16)
    5164:	00bfffc4 	movi	r2,-1
    5168:	003fab06 	br	5018 <__sfvwrite_r+0xb8>
    516c:	0027883a 	mov	r19,zero
    5170:	0011883a 	mov	r8,zero
    5174:	0039883a 	mov	fp,zero
    5178:	0025883a 	mov	r18,zero
    517c:	90001f26 	beq	r18,zero,51fc <__sfvwrite_r+0x29c>
    5180:	40005a26 	beq	r8,zero,52ec <__sfvwrite_r+0x38c>
    5184:	982d883a 	mov	r22,r19
    5188:	94c0012e 	bgeu	r18,r19,5190 <__sfvwrite_r+0x230>
    518c:	902d883a 	mov	r22,r18
    5190:	81000017 	ldw	r4,0(r16)
    5194:	80800417 	ldw	r2,16(r16)
    5198:	b02f883a 	mov	r23,r22
    519c:	81c00517 	ldw	r7,20(r16)
    51a0:	1100032e 	bgeu	r2,r4,51b0 <__sfvwrite_r+0x250>
    51a4:	80c00217 	ldw	r3,8(r16)
    51a8:	38c7883a 	add	r3,r7,r3
    51ac:	1d801816 	blt	r3,r22,5210 <__sfvwrite_r+0x2b0>
    51b0:	b1c03e16 	blt	r22,r7,52ac <__sfvwrite_r+0x34c>
    51b4:	80800917 	ldw	r2,36(r16)
    51b8:	81400717 	ldw	r5,28(r16)
    51bc:	e00d883a 	mov	r6,fp
    51c0:	da000115 	stw	r8,4(sp)
    51c4:	a809883a 	mov	r4,r21
    51c8:	103ee83a 	callr	r2
    51cc:	102f883a 	mov	r23,r2
    51d0:	da000117 	ldw	r8,4(sp)
    51d4:	00bfe00e 	bge	zero,r2,5158 <__sfvwrite_r+0x1f8>
    51d8:	9de7c83a 	sub	r19,r19,r23
    51dc:	98001f26 	beq	r19,zero,525c <__sfvwrite_r+0x2fc>
    51e0:	a0800217 	ldw	r2,8(r20)
    51e4:	e5f9883a 	add	fp,fp,r23
    51e8:	95e5c83a 	sub	r18,r18,r23
    51ec:	15efc83a 	sub	r23,r2,r23
    51f0:	a5c00215 	stw	r23,8(r20)
    51f4:	b83f8726 	beq	r23,zero,5014 <__sfvwrite_r+0xb4>
    51f8:	903fe11e 	bne	r18,zero,5180 <__sfvwrite_r+0x220>
    51fc:	8f000017 	ldw	fp,0(r17)
    5200:	8c800117 	ldw	r18,4(r17)
    5204:	0011883a 	mov	r8,zero
    5208:	8c400204 	addi	r17,r17,8
    520c:	003fdb06 	br	517c <__sfvwrite_r+0x21c>
    5210:	180d883a 	mov	r6,r3
    5214:	e00b883a 	mov	r5,fp
    5218:	da000115 	stw	r8,4(sp)
    521c:	d8c00015 	stw	r3,0(sp)
    5220:	00062740 	call	6274 <memmove>
    5224:	d8c00017 	ldw	r3,0(sp)
    5228:	80800017 	ldw	r2,0(r16)
    522c:	800b883a 	mov	r5,r16
    5230:	a809883a 	mov	r4,r21
    5234:	10c5883a 	add	r2,r2,r3
    5238:	80800015 	stw	r2,0(r16)
    523c:	d8c00015 	stw	r3,0(sp)
    5240:	00047000 	call	4700 <_fflush_r>
    5244:	d8c00017 	ldw	r3,0(sp)
    5248:	da000117 	ldw	r8,4(sp)
    524c:	103fc21e 	bne	r2,zero,5158 <__sfvwrite_r+0x1f8>
    5250:	182f883a 	mov	r23,r3
    5254:	9de7c83a 	sub	r19,r19,r23
    5258:	983fe11e 	bne	r19,zero,51e0 <__sfvwrite_r+0x280>
    525c:	800b883a 	mov	r5,r16
    5260:	a809883a 	mov	r4,r21
    5264:	00047000 	call	4700 <_fflush_r>
    5268:	103fbb1e 	bne	r2,zero,5158 <__sfvwrite_r+0x1f8>
    526c:	0011883a 	mov	r8,zero
    5270:	003fdb06 	br	51e0 <__sfvwrite_r+0x280>
    5274:	94c0012e 	bgeu	r18,r19,527c <__sfvwrite_r+0x31c>
    5278:	9027883a 	mov	r19,r18
    527c:	980d883a 	mov	r6,r19
    5280:	e00b883a 	mov	r5,fp
    5284:	00062740 	call	6274 <memmove>
    5288:	80800217 	ldw	r2,8(r16)
    528c:	80c00017 	ldw	r3,0(r16)
    5290:	14c5c83a 	sub	r2,r2,r19
    5294:	1cc7883a 	add	r3,r3,r19
    5298:	80800215 	stw	r2,8(r16)
    529c:	80c00015 	stw	r3,0(r16)
    52a0:	10004326 	beq	r2,zero,53b0 <__sfvwrite_r+0x450>
    52a4:	9805883a 	mov	r2,r19
    52a8:	003f8606 	br	50c4 <__sfvwrite_r+0x164>
    52ac:	b00d883a 	mov	r6,r22
    52b0:	e00b883a 	mov	r5,fp
    52b4:	da000115 	stw	r8,4(sp)
    52b8:	00062740 	call	6274 <memmove>
    52bc:	80800217 	ldw	r2,8(r16)
    52c0:	80c00017 	ldw	r3,0(r16)
    52c4:	da000117 	ldw	r8,4(sp)
    52c8:	1585c83a 	sub	r2,r2,r22
    52cc:	1dad883a 	add	r22,r3,r22
    52d0:	80800215 	stw	r2,8(r16)
    52d4:	85800015 	stw	r22,0(r16)
    52d8:	003fbf06 	br	51d8 <__sfvwrite_r+0x278>
    52dc:	81000017 	ldw	r4,0(r16)
    52e0:	9027883a 	mov	r19,r18
    52e4:	902f883a 	mov	r23,r18
    52e8:	003f6c06 	br	509c <__sfvwrite_r+0x13c>
    52ec:	900d883a 	mov	r6,r18
    52f0:	01400284 	movi	r5,10
    52f4:	e009883a 	mov	r4,fp
    52f8:	00060480 	call	6048 <memchr>
    52fc:	10003e26 	beq	r2,zero,53f8 <__sfvwrite_r+0x498>
    5300:	10800044 	addi	r2,r2,1
    5304:	1727c83a 	sub	r19,r2,fp
    5308:	02000044 	movi	r8,1
    530c:	003f9d06 	br	5184 <__sfvwrite_r+0x224>
    5310:	80800517 	ldw	r2,20(r16)
    5314:	81400417 	ldw	r5,16(r16)
    5318:	81c00017 	ldw	r7,0(r16)
    531c:	10a7883a 	add	r19,r2,r2
    5320:	9885883a 	add	r2,r19,r2
    5324:	1026d7fa 	srli	r19,r2,31
    5328:	396dc83a 	sub	r22,r7,r5
    532c:	b1000044 	addi	r4,r22,1
    5330:	9885883a 	add	r2,r19,r2
    5334:	1027d07a 	srai	r19,r2,1
    5338:	2485883a 	add	r2,r4,r18
    533c:	980d883a 	mov	r6,r19
    5340:	9880022e 	bgeu	r19,r2,534c <__sfvwrite_r+0x3ec>
    5344:	1027883a 	mov	r19,r2
    5348:	100d883a 	mov	r6,r2
    534c:	18c1000c 	andi	r3,r3,1024
    5350:	18001c26 	beq	r3,zero,53c4 <__sfvwrite_r+0x464>
    5354:	300b883a 	mov	r5,r6
    5358:	a809883a 	mov	r4,r21
    535c:	000583c0 	call	583c <_malloc_r>
    5360:	102f883a 	mov	r23,r2
    5364:	10002926 	beq	r2,zero,540c <__sfvwrite_r+0x4ac>
    5368:	81400417 	ldw	r5,16(r16)
    536c:	b00d883a 	mov	r6,r22
    5370:	1009883a 	mov	r4,r2
    5374:	000612c0 	call	612c <memcpy>
    5378:	8080030b 	ldhu	r2,12(r16)
    537c:	00fedfc4 	movi	r3,-1153
    5380:	10c4703a 	and	r2,r2,r3
    5384:	10802014 	ori	r2,r2,128
    5388:	8080030d 	sth	r2,12(r16)
    538c:	bd89883a 	add	r4,r23,r22
    5390:	9d8fc83a 	sub	r7,r19,r22
    5394:	85c00415 	stw	r23,16(r16)
    5398:	84c00515 	stw	r19,20(r16)
    539c:	81000015 	stw	r4,0(r16)
    53a0:	9027883a 	mov	r19,r18
    53a4:	81c00215 	stw	r7,8(r16)
    53a8:	902f883a 	mov	r23,r18
    53ac:	003f3b06 	br	509c <__sfvwrite_r+0x13c>
    53b0:	800b883a 	mov	r5,r16
    53b4:	a809883a 	mov	r4,r21
    53b8:	00047000 	call	4700 <_fflush_r>
    53bc:	103fb926 	beq	r2,zero,52a4 <__sfvwrite_r+0x344>
    53c0:	003f6506 	br	5158 <__sfvwrite_r+0x1f8>
    53c4:	a809883a 	mov	r4,r21
    53c8:	00074f40 	call	74f4 <_realloc_r>
    53cc:	102f883a 	mov	r23,r2
    53d0:	103fee1e 	bne	r2,zero,538c <__sfvwrite_r+0x42c>
    53d4:	81400417 	ldw	r5,16(r16)
    53d8:	a809883a 	mov	r4,r21
    53dc:	0004c500 	call	4c50 <_free_r>
    53e0:	8080030b 	ldhu	r2,12(r16)
    53e4:	00ffdfc4 	movi	r3,-129
    53e8:	1884703a 	and	r2,r3,r2
    53ec:	00c00304 	movi	r3,12
    53f0:	a8c00015 	stw	r3,0(r21)
    53f4:	003f5906 	br	515c <__sfvwrite_r+0x1fc>
    53f8:	94c00044 	addi	r19,r18,1
    53fc:	02000044 	movi	r8,1
    5400:	003f6006 	br	5184 <__sfvwrite_r+0x224>
    5404:	00bfffc4 	movi	r2,-1
    5408:	003f0306 	br	5018 <__sfvwrite_r+0xb8>
    540c:	00800304 	movi	r2,12
    5410:	a8800015 	stw	r2,0(r21)
    5414:	8080030b 	ldhu	r2,12(r16)
    5418:	003f5006 	br	515c <__sfvwrite_r+0x1fc>

0000541c <_fwalk>:
    541c:	defff704 	addi	sp,sp,-36
    5420:	dd000415 	stw	r20,16(sp)
    5424:	dfc00815 	stw	ra,32(sp)
    5428:	ddc00715 	stw	r23,28(sp)
    542c:	dd800615 	stw	r22,24(sp)
    5430:	dd400515 	stw	r21,20(sp)
    5434:	dcc00315 	stw	r19,12(sp)
    5438:	dc800215 	stw	r18,8(sp)
    543c:	dc400115 	stw	r17,4(sp)
    5440:	dc000015 	stw	r16,0(sp)
    5444:	2500b804 	addi	r20,r4,736
    5448:	a0002326 	beq	r20,zero,54d8 <_fwalk+0xbc>
    544c:	282b883a 	mov	r21,r5
    5450:	002f883a 	mov	r23,zero
    5454:	05800044 	movi	r22,1
    5458:	04ffffc4 	movi	r19,-1
    545c:	a4400117 	ldw	r17,4(r20)
    5460:	a4800217 	ldw	r18,8(r20)
    5464:	8c7fffc4 	addi	r17,r17,-1
    5468:	88000d16 	blt	r17,zero,54a0 <_fwalk+0x84>
    546c:	94000304 	addi	r16,r18,12
    5470:	94800384 	addi	r18,r18,14
    5474:	8080000b 	ldhu	r2,0(r16)
    5478:	8c7fffc4 	addi	r17,r17,-1
    547c:	813ffd04 	addi	r4,r16,-12
    5480:	b080042e 	bgeu	r22,r2,5494 <_fwalk+0x78>
    5484:	9080000f 	ldh	r2,0(r18)
    5488:	14c00226 	beq	r2,r19,5494 <_fwalk+0x78>
    548c:	a83ee83a 	callr	r21
    5490:	b8aeb03a 	or	r23,r23,r2
    5494:	84001a04 	addi	r16,r16,104
    5498:	94801a04 	addi	r18,r18,104
    549c:	8cfff51e 	bne	r17,r19,5474 <_fwalk+0x58>
    54a0:	a5000017 	ldw	r20,0(r20)
    54a4:	a03fed1e 	bne	r20,zero,545c <_fwalk+0x40>
    54a8:	b805883a 	mov	r2,r23
    54ac:	dfc00817 	ldw	ra,32(sp)
    54b0:	ddc00717 	ldw	r23,28(sp)
    54b4:	dd800617 	ldw	r22,24(sp)
    54b8:	dd400517 	ldw	r21,20(sp)
    54bc:	dd000417 	ldw	r20,16(sp)
    54c0:	dcc00317 	ldw	r19,12(sp)
    54c4:	dc800217 	ldw	r18,8(sp)
    54c8:	dc400117 	ldw	r17,4(sp)
    54cc:	dc000017 	ldw	r16,0(sp)
    54d0:	dec00904 	addi	sp,sp,36
    54d4:	f800283a 	ret
    54d8:	002f883a 	mov	r23,zero
    54dc:	003ff206 	br	54a8 <_fwalk+0x8c>

000054e0 <_fwalk_reent>:
    54e0:	defff704 	addi	sp,sp,-36
    54e4:	dd000415 	stw	r20,16(sp)
    54e8:	dfc00815 	stw	ra,32(sp)
    54ec:	ddc00715 	stw	r23,28(sp)
    54f0:	dd800615 	stw	r22,24(sp)
    54f4:	dd400515 	stw	r21,20(sp)
    54f8:	dcc00315 	stw	r19,12(sp)
    54fc:	dc800215 	stw	r18,8(sp)
    5500:	dc400115 	stw	r17,4(sp)
    5504:	dc000015 	stw	r16,0(sp)
    5508:	2500b804 	addi	r20,r4,736
    550c:	a0002326 	beq	r20,zero,559c <_fwalk_reent+0xbc>
    5510:	282b883a 	mov	r21,r5
    5514:	2027883a 	mov	r19,r4
    5518:	002f883a 	mov	r23,zero
    551c:	05800044 	movi	r22,1
    5520:	04bfffc4 	movi	r18,-1
    5524:	a4400117 	ldw	r17,4(r20)
    5528:	a4000217 	ldw	r16,8(r20)
    552c:	8c7fffc4 	addi	r17,r17,-1
    5530:	88000c16 	blt	r17,zero,5564 <_fwalk_reent+0x84>
    5534:	84000304 	addi	r16,r16,12
    5538:	8080000b 	ldhu	r2,0(r16)
    553c:	8c7fffc4 	addi	r17,r17,-1
    5540:	817ffd04 	addi	r5,r16,-12
    5544:	b080052e 	bgeu	r22,r2,555c <_fwalk_reent+0x7c>
    5548:	8080008f 	ldh	r2,2(r16)
    554c:	9809883a 	mov	r4,r19
    5550:	14800226 	beq	r2,r18,555c <_fwalk_reent+0x7c>
    5554:	a83ee83a 	callr	r21
    5558:	b8aeb03a 	or	r23,r23,r2
    555c:	84001a04 	addi	r16,r16,104
    5560:	8cbff51e 	bne	r17,r18,5538 <_fwalk_reent+0x58>
    5564:	a5000017 	ldw	r20,0(r20)
    5568:	a03fee1e 	bne	r20,zero,5524 <_fwalk_reent+0x44>
    556c:	b805883a 	mov	r2,r23
    5570:	dfc00817 	ldw	ra,32(sp)
    5574:	ddc00717 	ldw	r23,28(sp)
    5578:	dd800617 	ldw	r22,24(sp)
    557c:	dd400517 	ldw	r21,20(sp)
    5580:	dd000417 	ldw	r20,16(sp)
    5584:	dcc00317 	ldw	r19,12(sp)
    5588:	dc800217 	ldw	r18,8(sp)
    558c:	dc400117 	ldw	r17,4(sp)
    5590:	dc000017 	ldw	r16,0(sp)
    5594:	dec00904 	addi	sp,sp,36
    5598:	f800283a 	ret
    559c:	002f883a 	mov	r23,zero
    55a0:	003ff206 	br	556c <_fwalk_reent+0x8c>

000055a4 <_setlocale_r>:
    55a4:	30001b26 	beq	r6,zero,5614 <_setlocale_r+0x70>
    55a8:	01400074 	movhi	r5,1
    55ac:	defffe04 	addi	sp,sp,-8
    55b0:	29425004 	addi	r5,r5,2368
    55b4:	3009883a 	mov	r4,r6
    55b8:	dc000015 	stw	r16,0(sp)
    55bc:	dfc00115 	stw	ra,4(sp)
    55c0:	3021883a 	mov	r16,r6
    55c4:	0007c5c0 	call	7c5c <strcmp>
    55c8:	1000061e 	bne	r2,zero,55e4 <_setlocale_r+0x40>
    55cc:	00800074 	movhi	r2,1
    55d0:	10824f04 	addi	r2,r2,2364
    55d4:	dfc00117 	ldw	ra,4(sp)
    55d8:	dc000017 	ldw	r16,0(sp)
    55dc:	dec00204 	addi	sp,sp,8
    55e0:	f800283a 	ret
    55e4:	01400074 	movhi	r5,1
    55e8:	29424f04 	addi	r5,r5,2364
    55ec:	8009883a 	mov	r4,r16
    55f0:	0007c5c0 	call	7c5c <strcmp>
    55f4:	103ff526 	beq	r2,zero,55cc <_setlocale_r+0x28>
    55f8:	01400074 	movhi	r5,1
    55fc:	29423a04 	addi	r5,r5,2280
    5600:	8009883a 	mov	r4,r16
    5604:	0007c5c0 	call	7c5c <strcmp>
    5608:	103ff026 	beq	r2,zero,55cc <_setlocale_r+0x28>
    560c:	0005883a 	mov	r2,zero
    5610:	003ff006 	br	55d4 <_setlocale_r+0x30>
    5614:	00800074 	movhi	r2,1
    5618:	10824f04 	addi	r2,r2,2364
    561c:	f800283a 	ret

00005620 <__locale_charset>:
    5620:	00800074 	movhi	r2,1
    5624:	10840704 	addi	r2,r2,4124
    5628:	f800283a 	ret

0000562c <__locale_mb_cur_max>:
    562c:	00800074 	movhi	r2,1
    5630:	1089e504 	addi	r2,r2,10132
    5634:	10800017 	ldw	r2,0(r2)
    5638:	f800283a 	ret

0000563c <__locale_msgcharset>:
    563c:	00800074 	movhi	r2,1
    5640:	1083ff04 	addi	r2,r2,4092
    5644:	f800283a 	ret

00005648 <__locale_cjk_lang>:
    5648:	0005883a 	mov	r2,zero
    564c:	f800283a 	ret

00005650 <_localeconv_r>:
    5650:	00800074 	movhi	r2,1
    5654:	10840f04 	addi	r2,r2,4156
    5658:	f800283a 	ret

0000565c <setlocale>:
    565c:	00800074 	movhi	r2,1
    5660:	1089e404 	addi	r2,r2,10128
    5664:	280d883a 	mov	r6,r5
    5668:	200b883a 	mov	r5,r4
    566c:	11000017 	ldw	r4,0(r2)
    5670:	00055a41 	jmpi	55a4 <_setlocale_r>

00005674 <localeconv>:
    5674:	00800074 	movhi	r2,1
    5678:	10840f04 	addi	r2,r2,4156
    567c:	f800283a 	ret

00005680 <__smakebuf_r>:
    5680:	2880030b 	ldhu	r2,12(r5)
    5684:	10c0008c 	andi	r3,r2,2
    5688:	1800411e 	bne	r3,zero,5790 <__smakebuf_r+0x110>
    568c:	deffec04 	addi	sp,sp,-80
    5690:	dc000f15 	stw	r16,60(sp)
    5694:	2821883a 	mov	r16,r5
    5698:	2940038f 	ldh	r5,14(r5)
    569c:	dc401015 	stw	r17,64(sp)
    56a0:	dfc01315 	stw	ra,76(sp)
    56a4:	dcc01215 	stw	r19,72(sp)
    56a8:	dc801115 	stw	r18,68(sp)
    56ac:	2023883a 	mov	r17,r4
    56b0:	28001c16 	blt	r5,zero,5724 <__smakebuf_r+0xa4>
    56b4:	d80d883a 	mov	r6,sp
    56b8:	00098040 	call	9804 <_fstat_r>
    56bc:	10001816 	blt	r2,zero,5720 <__smakebuf_r+0xa0>
    56c0:	d8800117 	ldw	r2,4(sp)
    56c4:	00e00014 	movui	r3,32768
    56c8:	10bc000c 	andi	r2,r2,61440
    56cc:	14c80020 	cmpeqi	r19,r2,8192
    56d0:	10c03726 	beq	r2,r3,57b0 <__smakebuf_r+0x130>
    56d4:	80c0030b 	ldhu	r3,12(r16)
    56d8:	18c20014 	ori	r3,r3,2048
    56dc:	80c0030d 	sth	r3,12(r16)
    56e0:	00c80004 	movi	r3,8192
    56e4:	10c0521e 	bne	r2,r3,5830 <__smakebuf_r+0x1b0>
    56e8:	8140038f 	ldh	r5,14(r16)
    56ec:	8809883a 	mov	r4,r17
    56f0:	00098600 	call	9860 <_isatty_r>
    56f4:	10004c26 	beq	r2,zero,5828 <__smakebuf_r+0x1a8>
    56f8:	8080030b 	ldhu	r2,12(r16)
    56fc:	80c010c4 	addi	r3,r16,67
    5700:	80c00015 	stw	r3,0(r16)
    5704:	10800054 	ori	r2,r2,1
    5708:	8080030d 	sth	r2,12(r16)
    570c:	00800044 	movi	r2,1
    5710:	80c00415 	stw	r3,16(r16)
    5714:	80800515 	stw	r2,20(r16)
    5718:	04810004 	movi	r18,1024
    571c:	00000706 	br	573c <__smakebuf_r+0xbc>
    5720:	8080030b 	ldhu	r2,12(r16)
    5724:	10c0200c 	andi	r3,r2,128
    5728:	18001f1e 	bne	r3,zero,57a8 <__smakebuf_r+0x128>
    572c:	04810004 	movi	r18,1024
    5730:	10820014 	ori	r2,r2,2048
    5734:	8080030d 	sth	r2,12(r16)
    5738:	0027883a 	mov	r19,zero
    573c:	900b883a 	mov	r5,r18
    5740:	8809883a 	mov	r4,r17
    5744:	000583c0 	call	583c <_malloc_r>
    5748:	10002c26 	beq	r2,zero,57fc <__smakebuf_r+0x17c>
    574c:	80c0030b 	ldhu	r3,12(r16)
    5750:	01000034 	movhi	r4,0
    5754:	2111e504 	addi	r4,r4,18324
    5758:	89000f15 	stw	r4,60(r17)
    575c:	18c02014 	ori	r3,r3,128
    5760:	80c0030d 	sth	r3,12(r16)
    5764:	80800015 	stw	r2,0(r16)
    5768:	80800415 	stw	r2,16(r16)
    576c:	84800515 	stw	r18,20(r16)
    5770:	98001a1e 	bne	r19,zero,57dc <__smakebuf_r+0x15c>
    5774:	dfc01317 	ldw	ra,76(sp)
    5778:	dcc01217 	ldw	r19,72(sp)
    577c:	dc801117 	ldw	r18,68(sp)
    5780:	dc401017 	ldw	r17,64(sp)
    5784:	dc000f17 	ldw	r16,60(sp)
    5788:	dec01404 	addi	sp,sp,80
    578c:	f800283a 	ret
    5790:	288010c4 	addi	r2,r5,67
    5794:	28800015 	stw	r2,0(r5)
    5798:	28800415 	stw	r2,16(r5)
    579c:	00800044 	movi	r2,1
    57a0:	28800515 	stw	r2,20(r5)
    57a4:	f800283a 	ret
    57a8:	04801004 	movi	r18,64
    57ac:	003fe006 	br	5730 <__smakebuf_r+0xb0>
    57b0:	81000a17 	ldw	r4,40(r16)
    57b4:	00c00034 	movhi	r3,0
    57b8:	18defe04 	addi	r3,r3,31736
    57bc:	20ffc51e 	bne	r4,r3,56d4 <__smakebuf_r+0x54>
    57c0:	8080030b 	ldhu	r2,12(r16)
    57c4:	04810004 	movi	r18,1024
    57c8:	84801315 	stw	r18,76(r16)
    57cc:	1484b03a 	or	r2,r2,r18
    57d0:	8080030d 	sth	r2,12(r16)
    57d4:	0027883a 	mov	r19,zero
    57d8:	003fd806 	br	573c <__smakebuf_r+0xbc>
    57dc:	8140038f 	ldh	r5,14(r16)
    57e0:	8809883a 	mov	r4,r17
    57e4:	00098600 	call	9860 <_isatty_r>
    57e8:	103fe226 	beq	r2,zero,5774 <__smakebuf_r+0xf4>
    57ec:	8080030b 	ldhu	r2,12(r16)
    57f0:	10800054 	ori	r2,r2,1
    57f4:	8080030d 	sth	r2,12(r16)
    57f8:	003fde06 	br	5774 <__smakebuf_r+0xf4>
    57fc:	8080030b 	ldhu	r2,12(r16)
    5800:	10c0800c 	andi	r3,r2,512
    5804:	183fdb1e 	bne	r3,zero,5774 <__smakebuf_r+0xf4>
    5808:	10800094 	ori	r2,r2,2
    580c:	80c010c4 	addi	r3,r16,67
    5810:	8080030d 	sth	r2,12(r16)
    5814:	00800044 	movi	r2,1
    5818:	80c00015 	stw	r3,0(r16)
    581c:	80c00415 	stw	r3,16(r16)
    5820:	80800515 	stw	r2,20(r16)
    5824:	003fd306 	br	5774 <__smakebuf_r+0xf4>
    5828:	04810004 	movi	r18,1024
    582c:	003fc306 	br	573c <__smakebuf_r+0xbc>
    5830:	0027883a 	mov	r19,zero
    5834:	04810004 	movi	r18,1024
    5838:	003fc006 	br	573c <__smakebuf_r+0xbc>

0000583c <_malloc_r>:
    583c:	defff504 	addi	sp,sp,-44
    5840:	dc800315 	stw	r18,12(sp)
    5844:	dfc00a15 	stw	ra,40(sp)
    5848:	df000915 	stw	fp,36(sp)
    584c:	ddc00815 	stw	r23,32(sp)
    5850:	dd800715 	stw	r22,28(sp)
    5854:	dd400615 	stw	r21,24(sp)
    5858:	dd000515 	stw	r20,20(sp)
    585c:	dcc00415 	stw	r19,16(sp)
    5860:	dc400215 	stw	r17,8(sp)
    5864:	dc000115 	stw	r16,4(sp)
    5868:	288002c4 	addi	r2,r5,11
    586c:	00c00584 	movi	r3,22
    5870:	2025883a 	mov	r18,r4
    5874:	18807f2e 	bgeu	r3,r2,5a74 <_malloc_r+0x238>
    5878:	047ffe04 	movi	r17,-8
    587c:	1462703a 	and	r17,r2,r17
    5880:	8800a316 	blt	r17,zero,5b10 <_malloc_r+0x2d4>
    5884:	8940a236 	bltu	r17,r5,5b10 <_malloc_r+0x2d4>
    5888:	000d5700 	call	d570 <__malloc_lock>
    588c:	00807dc4 	movi	r2,503
    5890:	1441e92e 	bgeu	r2,r17,6038 <_malloc_r+0x7fc>
    5894:	8804d27a 	srli	r2,r17,9
    5898:	1000a126 	beq	r2,zero,5b20 <_malloc_r+0x2e4>
    589c:	00c00104 	movi	r3,4
    58a0:	18811e36 	bltu	r3,r2,5d1c <_malloc_r+0x4e0>
    58a4:	8804d1ba 	srli	r2,r17,6
    58a8:	12000e44 	addi	r8,r2,57
    58ac:	11c00e04 	addi	r7,r2,56
    58b0:	4209883a 	add	r4,r8,r8
    58b4:	04c00074 	movhi	r19,1
    58b8:	2109883a 	add	r4,r4,r4
    58bc:	9cc41d04 	addi	r19,r19,4212
    58c0:	2109883a 	add	r4,r4,r4
    58c4:	9909883a 	add	r4,r19,r4
    58c8:	24000117 	ldw	r16,4(r4)
    58cc:	213ffe04 	addi	r4,r4,-8
    58d0:	24009726 	beq	r4,r16,5b30 <_malloc_r+0x2f4>
    58d4:	80800117 	ldw	r2,4(r16)
    58d8:	01bfff04 	movi	r6,-4
    58dc:	014003c4 	movi	r5,15
    58e0:	1184703a 	and	r2,r2,r6
    58e4:	1447c83a 	sub	r3,r2,r17
    58e8:	28c00716 	blt	r5,r3,5908 <_malloc_r+0xcc>
    58ec:	1800920e 	bge	r3,zero,5b38 <_malloc_r+0x2fc>
    58f0:	84000317 	ldw	r16,12(r16)
    58f4:	24008e26 	beq	r4,r16,5b30 <_malloc_r+0x2f4>
    58f8:	80800117 	ldw	r2,4(r16)
    58fc:	1184703a 	and	r2,r2,r6
    5900:	1447c83a 	sub	r3,r2,r17
    5904:	28fff90e 	bge	r5,r3,58ec <_malloc_r+0xb0>
    5908:	3809883a 	mov	r4,r7
    590c:	01800074 	movhi	r6,1
    5910:	9c000417 	ldw	r16,16(r19)
    5914:	31841d04 	addi	r6,r6,4212
    5918:	32000204 	addi	r8,r6,8
    591c:	82013426 	beq	r16,r8,5df0 <_malloc_r+0x5b4>
    5920:	80c00117 	ldw	r3,4(r16)
    5924:	00bfff04 	movi	r2,-4
    5928:	188e703a 	and	r7,r3,r2
    592c:	3c45c83a 	sub	r2,r7,r17
    5930:	00c003c4 	movi	r3,15
    5934:	18811f16 	blt	r3,r2,5db4 <_malloc_r+0x578>
    5938:	32000515 	stw	r8,20(r6)
    593c:	32000415 	stw	r8,16(r6)
    5940:	10007f0e 	bge	r2,zero,5b40 <_malloc_r+0x304>
    5944:	00807fc4 	movi	r2,511
    5948:	11c0fd36 	bltu	r2,r7,5d40 <_malloc_r+0x504>
    594c:	3806d0fa 	srli	r3,r7,3
    5950:	01c00044 	movi	r7,1
    5954:	30800117 	ldw	r2,4(r6)
    5958:	19400044 	addi	r5,r3,1
    595c:	294b883a 	add	r5,r5,r5
    5960:	1807d0ba 	srai	r3,r3,2
    5964:	294b883a 	add	r5,r5,r5
    5968:	294b883a 	add	r5,r5,r5
    596c:	298b883a 	add	r5,r5,r6
    5970:	38c6983a 	sll	r3,r7,r3
    5974:	29c00017 	ldw	r7,0(r5)
    5978:	2a7ffe04 	addi	r9,r5,-8
    597c:	1886b03a 	or	r3,r3,r2
    5980:	82400315 	stw	r9,12(r16)
    5984:	81c00215 	stw	r7,8(r16)
    5988:	30c00115 	stw	r3,4(r6)
    598c:	2c000015 	stw	r16,0(r5)
    5990:	3c000315 	stw	r16,12(r7)
    5994:	2005d0ba 	srai	r2,r4,2
    5998:	01400044 	movi	r5,1
    599c:	288a983a 	sll	r5,r5,r2
    59a0:	19406f36 	bltu	r3,r5,5b60 <_malloc_r+0x324>
    59a4:	28c4703a 	and	r2,r5,r3
    59a8:	10000a1e 	bne	r2,zero,59d4 <_malloc_r+0x198>
    59ac:	00bfff04 	movi	r2,-4
    59b0:	294b883a 	add	r5,r5,r5
    59b4:	2088703a 	and	r4,r4,r2
    59b8:	28c4703a 	and	r2,r5,r3
    59bc:	21000104 	addi	r4,r4,4
    59c0:	1000041e 	bne	r2,zero,59d4 <_malloc_r+0x198>
    59c4:	294b883a 	add	r5,r5,r5
    59c8:	28c4703a 	and	r2,r5,r3
    59cc:	21000104 	addi	r4,r4,4
    59d0:	103ffc26 	beq	r2,zero,59c4 <_malloc_r+0x188>
    59d4:	02bfff04 	movi	r10,-4
    59d8:	024003c4 	movi	r9,15
    59dc:	21800044 	addi	r6,r4,1
    59e0:	318d883a 	add	r6,r6,r6
    59e4:	318d883a 	add	r6,r6,r6
    59e8:	318d883a 	add	r6,r6,r6
    59ec:	998d883a 	add	r6,r19,r6
    59f0:	333ffe04 	addi	r12,r6,-8
    59f4:	2017883a 	mov	r11,r4
    59f8:	31800104 	addi	r6,r6,4
    59fc:	34000017 	ldw	r16,0(r6)
    5a00:	31fffd04 	addi	r7,r6,-12
    5a04:	81c0041e 	bne	r16,r7,5a18 <_malloc_r+0x1dc>
    5a08:	0000fb06 	br	5df8 <_malloc_r+0x5bc>
    5a0c:	1801030e 	bge	r3,zero,5e1c <_malloc_r+0x5e0>
    5a10:	84000317 	ldw	r16,12(r16)
    5a14:	81c0f826 	beq	r16,r7,5df8 <_malloc_r+0x5bc>
    5a18:	80800117 	ldw	r2,4(r16)
    5a1c:	1284703a 	and	r2,r2,r10
    5a20:	1447c83a 	sub	r3,r2,r17
    5a24:	48fff90e 	bge	r9,r3,5a0c <_malloc_r+0x1d0>
    5a28:	80800317 	ldw	r2,12(r16)
    5a2c:	81000217 	ldw	r4,8(r16)
    5a30:	89400054 	ori	r5,r17,1
    5a34:	81400115 	stw	r5,4(r16)
    5a38:	20800315 	stw	r2,12(r4)
    5a3c:	11000215 	stw	r4,8(r2)
    5a40:	8463883a 	add	r17,r16,r17
    5a44:	9c400515 	stw	r17,20(r19)
    5a48:	9c400415 	stw	r17,16(r19)
    5a4c:	18800054 	ori	r2,r3,1
    5a50:	88800115 	stw	r2,4(r17)
    5a54:	8a000315 	stw	r8,12(r17)
    5a58:	8a000215 	stw	r8,8(r17)
    5a5c:	88e3883a 	add	r17,r17,r3
    5a60:	88c00015 	stw	r3,0(r17)
    5a64:	9009883a 	mov	r4,r18
    5a68:	000d5940 	call	d594 <__malloc_unlock>
    5a6c:	80800204 	addi	r2,r16,8
    5a70:	00001b06 	br	5ae0 <_malloc_r+0x2a4>
    5a74:	04400404 	movi	r17,16
    5a78:	89402536 	bltu	r17,r5,5b10 <_malloc_r+0x2d4>
    5a7c:	000d5700 	call	d570 <__malloc_lock>
    5a80:	00800184 	movi	r2,6
    5a84:	01000084 	movi	r4,2
    5a88:	04c00074 	movhi	r19,1
    5a8c:	1085883a 	add	r2,r2,r2
    5a90:	9cc41d04 	addi	r19,r19,4212
    5a94:	1085883a 	add	r2,r2,r2
    5a98:	9885883a 	add	r2,r19,r2
    5a9c:	14000117 	ldw	r16,4(r2)
    5aa0:	10fffe04 	addi	r3,r2,-8
    5aa4:	80c0d926 	beq	r16,r3,5e0c <_malloc_r+0x5d0>
    5aa8:	80c00117 	ldw	r3,4(r16)
    5aac:	81000317 	ldw	r4,12(r16)
    5ab0:	00bfff04 	movi	r2,-4
    5ab4:	1884703a 	and	r2,r3,r2
    5ab8:	81400217 	ldw	r5,8(r16)
    5abc:	8085883a 	add	r2,r16,r2
    5ac0:	10c00117 	ldw	r3,4(r2)
    5ac4:	29000315 	stw	r4,12(r5)
    5ac8:	21400215 	stw	r5,8(r4)
    5acc:	18c00054 	ori	r3,r3,1
    5ad0:	10c00115 	stw	r3,4(r2)
    5ad4:	9009883a 	mov	r4,r18
    5ad8:	000d5940 	call	d594 <__malloc_unlock>
    5adc:	80800204 	addi	r2,r16,8
    5ae0:	dfc00a17 	ldw	ra,40(sp)
    5ae4:	df000917 	ldw	fp,36(sp)
    5ae8:	ddc00817 	ldw	r23,32(sp)
    5aec:	dd800717 	ldw	r22,28(sp)
    5af0:	dd400617 	ldw	r21,24(sp)
    5af4:	dd000517 	ldw	r20,20(sp)
    5af8:	dcc00417 	ldw	r19,16(sp)
    5afc:	dc800317 	ldw	r18,12(sp)
    5b00:	dc400217 	ldw	r17,8(sp)
    5b04:	dc000117 	ldw	r16,4(sp)
    5b08:	dec00b04 	addi	sp,sp,44
    5b0c:	f800283a 	ret
    5b10:	00800304 	movi	r2,12
    5b14:	90800015 	stw	r2,0(r18)
    5b18:	0005883a 	mov	r2,zero
    5b1c:	003ff006 	br	5ae0 <_malloc_r+0x2a4>
    5b20:	01002004 	movi	r4,128
    5b24:	02001004 	movi	r8,64
    5b28:	01c00fc4 	movi	r7,63
    5b2c:	003f6106 	br	58b4 <_malloc_r+0x78>
    5b30:	4009883a 	mov	r4,r8
    5b34:	003f7506 	br	590c <_malloc_r+0xd0>
    5b38:	81000317 	ldw	r4,12(r16)
    5b3c:	003fde06 	br	5ab8 <_malloc_r+0x27c>
    5b40:	81c5883a 	add	r2,r16,r7
    5b44:	11400117 	ldw	r5,4(r2)
    5b48:	9009883a 	mov	r4,r18
    5b4c:	29400054 	ori	r5,r5,1
    5b50:	11400115 	stw	r5,4(r2)
    5b54:	000d5940 	call	d594 <__malloc_unlock>
    5b58:	80800204 	addi	r2,r16,8
    5b5c:	003fe006 	br	5ae0 <_malloc_r+0x2a4>
    5b60:	9c000217 	ldw	r16,8(r19)
    5b64:	00bfff04 	movi	r2,-4
    5b68:	85800117 	ldw	r22,4(r16)
    5b6c:	b0ac703a 	and	r22,r22,r2
    5b70:	b4400336 	bltu	r22,r17,5b80 <_malloc_r+0x344>
    5b74:	b445c83a 	sub	r2,r22,r17
    5b78:	00c003c4 	movi	r3,15
    5b7c:	18805d16 	blt	r3,r2,5cf4 <_malloc_r+0x4b8>
    5b80:	05c00074 	movhi	r23,1
    5b84:	00800074 	movhi	r2,1
    5b88:	1090fd04 	addi	r2,r2,17396
    5b8c:	bdc9e604 	addi	r23,r23,10136
    5b90:	15400017 	ldw	r21,0(r2)
    5b94:	b8c00017 	ldw	r3,0(r23)
    5b98:	00bfffc4 	movi	r2,-1
    5b9c:	858d883a 	add	r6,r16,r22
    5ba0:	8d6b883a 	add	r21,r17,r21
    5ba4:	1880ea26 	beq	r3,r2,5f50 <_malloc_r+0x714>
    5ba8:	ad4403c4 	addi	r21,r21,4111
    5bac:	00bc0004 	movi	r2,-4096
    5bb0:	a8aa703a 	and	r21,r21,r2
    5bb4:	a80b883a 	mov	r5,r21
    5bb8:	9009883a 	mov	r4,r18
    5bbc:	d9800015 	stw	r6,0(sp)
    5bc0:	0007acc0 	call	7acc <_sbrk_r>
    5bc4:	1029883a 	mov	r20,r2
    5bc8:	00bfffc4 	movi	r2,-1
    5bcc:	d9800017 	ldw	r6,0(sp)
    5bd0:	a080e826 	beq	r20,r2,5f74 <_malloc_r+0x738>
    5bd4:	a180a636 	bltu	r20,r6,5e70 <_malloc_r+0x634>
    5bd8:	07000074 	movhi	fp,1
    5bdc:	e7110604 	addi	fp,fp,17432
    5be0:	e0800017 	ldw	r2,0(fp)
    5be4:	a887883a 	add	r3,r21,r2
    5be8:	e0c00015 	stw	r3,0(fp)
    5bec:	3500e626 	beq	r6,r20,5f88 <_malloc_r+0x74c>
    5bf0:	b9000017 	ldw	r4,0(r23)
    5bf4:	00bfffc4 	movi	r2,-1
    5bf8:	2080ee26 	beq	r4,r2,5fb4 <_malloc_r+0x778>
    5bfc:	a185c83a 	sub	r2,r20,r6
    5c00:	10c5883a 	add	r2,r2,r3
    5c04:	e0800015 	stw	r2,0(fp)
    5c08:	a0c001cc 	andi	r3,r20,7
    5c0c:	1800bc26 	beq	r3,zero,5f00 <_malloc_r+0x6c4>
    5c10:	a0e9c83a 	sub	r20,r20,r3
    5c14:	00840204 	movi	r2,4104
    5c18:	a5000204 	addi	r20,r20,8
    5c1c:	10c7c83a 	sub	r3,r2,r3
    5c20:	a545883a 	add	r2,r20,r21
    5c24:	1083ffcc 	andi	r2,r2,4095
    5c28:	18abc83a 	sub	r21,r3,r2
    5c2c:	a80b883a 	mov	r5,r21
    5c30:	9009883a 	mov	r4,r18
    5c34:	0007acc0 	call	7acc <_sbrk_r>
    5c38:	00ffffc4 	movi	r3,-1
    5c3c:	10c0e126 	beq	r2,r3,5fc4 <_malloc_r+0x788>
    5c40:	1505c83a 	sub	r2,r2,r20
    5c44:	1545883a 	add	r2,r2,r21
    5c48:	10800054 	ori	r2,r2,1
    5c4c:	e0c00017 	ldw	r3,0(fp)
    5c50:	9d000215 	stw	r20,8(r19)
    5c54:	a0800115 	stw	r2,4(r20)
    5c58:	a8c7883a 	add	r3,r21,r3
    5c5c:	e0c00015 	stw	r3,0(fp)
    5c60:	84c00e26 	beq	r16,r19,5c9c <_malloc_r+0x460>
    5c64:	018003c4 	movi	r6,15
    5c68:	3580a72e 	bgeu	r6,r22,5f08 <_malloc_r+0x6cc>
    5c6c:	81400117 	ldw	r5,4(r16)
    5c70:	013ffe04 	movi	r4,-8
    5c74:	b0bffd04 	addi	r2,r22,-12
    5c78:	1104703a 	and	r2,r2,r4
    5c7c:	2900004c 	andi	r4,r5,1
    5c80:	2088b03a 	or	r4,r4,r2
    5c84:	81000115 	stw	r4,4(r16)
    5c88:	01400144 	movi	r5,5
    5c8c:	8089883a 	add	r4,r16,r2
    5c90:	21400115 	stw	r5,4(r4)
    5c94:	21400215 	stw	r5,8(r4)
    5c98:	3080cd36 	bltu	r6,r2,5fd0 <_malloc_r+0x794>
    5c9c:	00800074 	movhi	r2,1
    5ca0:	1090fc04 	addi	r2,r2,17392
    5ca4:	11000017 	ldw	r4,0(r2)
    5ca8:	20c0012e 	bgeu	r4,r3,5cb0 <_malloc_r+0x474>
    5cac:	10c00015 	stw	r3,0(r2)
    5cb0:	00800074 	movhi	r2,1
    5cb4:	1090fb04 	addi	r2,r2,17388
    5cb8:	11000017 	ldw	r4,0(r2)
    5cbc:	9c000217 	ldw	r16,8(r19)
    5cc0:	20c0012e 	bgeu	r4,r3,5cc8 <_malloc_r+0x48c>
    5cc4:	10c00015 	stw	r3,0(r2)
    5cc8:	80c00117 	ldw	r3,4(r16)
    5ccc:	00bfff04 	movi	r2,-4
    5cd0:	1886703a 	and	r3,r3,r2
    5cd4:	1c45c83a 	sub	r2,r3,r17
    5cd8:	1c400236 	bltu	r3,r17,5ce4 <_malloc_r+0x4a8>
    5cdc:	00c003c4 	movi	r3,15
    5ce0:	18800416 	blt	r3,r2,5cf4 <_malloc_r+0x4b8>
    5ce4:	9009883a 	mov	r4,r18
    5ce8:	000d5940 	call	d594 <__malloc_unlock>
    5cec:	0005883a 	mov	r2,zero
    5cf0:	003f7b06 	br	5ae0 <_malloc_r+0x2a4>
    5cf4:	88c00054 	ori	r3,r17,1
    5cf8:	80c00115 	stw	r3,4(r16)
    5cfc:	8463883a 	add	r17,r16,r17
    5d00:	10800054 	ori	r2,r2,1
    5d04:	9c400215 	stw	r17,8(r19)
    5d08:	88800115 	stw	r2,4(r17)
    5d0c:	9009883a 	mov	r4,r18
    5d10:	000d5940 	call	d594 <__malloc_unlock>
    5d14:	80800204 	addi	r2,r16,8
    5d18:	003f7106 	br	5ae0 <_malloc_r+0x2a4>
    5d1c:	00c00504 	movi	r3,20
    5d20:	18804a2e 	bgeu	r3,r2,5e4c <_malloc_r+0x610>
    5d24:	00c01504 	movi	r3,84
    5d28:	18806e36 	bltu	r3,r2,5ee4 <_malloc_r+0x6a8>
    5d2c:	8804d33a 	srli	r2,r17,12
    5d30:	12001bc4 	addi	r8,r2,111
    5d34:	11c01b84 	addi	r7,r2,110
    5d38:	4209883a 	add	r4,r8,r8
    5d3c:	003edd06 	br	58b4 <_malloc_r+0x78>
    5d40:	3804d27a 	srli	r2,r7,9
    5d44:	00c00104 	movi	r3,4
    5d48:	1880442e 	bgeu	r3,r2,5e5c <_malloc_r+0x620>
    5d4c:	00c00504 	movi	r3,20
    5d50:	18808136 	bltu	r3,r2,5f58 <_malloc_r+0x71c>
    5d54:	11401704 	addi	r5,r2,92
    5d58:	10c016c4 	addi	r3,r2,91
    5d5c:	294b883a 	add	r5,r5,r5
    5d60:	294b883a 	add	r5,r5,r5
    5d64:	294b883a 	add	r5,r5,r5
    5d68:	994b883a 	add	r5,r19,r5
    5d6c:	28800017 	ldw	r2,0(r5)
    5d70:	01800074 	movhi	r6,1
    5d74:	297ffe04 	addi	r5,r5,-8
    5d78:	31841d04 	addi	r6,r6,4212
    5d7c:	28806526 	beq	r5,r2,5f14 <_malloc_r+0x6d8>
    5d80:	01bfff04 	movi	r6,-4
    5d84:	10c00117 	ldw	r3,4(r2)
    5d88:	1986703a 	and	r3,r3,r6
    5d8c:	38c0022e 	bgeu	r7,r3,5d98 <_malloc_r+0x55c>
    5d90:	10800217 	ldw	r2,8(r2)
    5d94:	28bffb1e 	bne	r5,r2,5d84 <_malloc_r+0x548>
    5d98:	11400317 	ldw	r5,12(r2)
    5d9c:	98c00117 	ldw	r3,4(r19)
    5da0:	81400315 	stw	r5,12(r16)
    5da4:	80800215 	stw	r2,8(r16)
    5da8:	2c000215 	stw	r16,8(r5)
    5dac:	14000315 	stw	r16,12(r2)
    5db0:	003ef806 	br	5994 <_malloc_r+0x158>
    5db4:	88c00054 	ori	r3,r17,1
    5db8:	80c00115 	stw	r3,4(r16)
    5dbc:	8463883a 	add	r17,r16,r17
    5dc0:	34400515 	stw	r17,20(r6)
    5dc4:	34400415 	stw	r17,16(r6)
    5dc8:	10c00054 	ori	r3,r2,1
    5dcc:	8a000315 	stw	r8,12(r17)
    5dd0:	8a000215 	stw	r8,8(r17)
    5dd4:	88c00115 	stw	r3,4(r17)
    5dd8:	88a3883a 	add	r17,r17,r2
    5ddc:	88800015 	stw	r2,0(r17)
    5de0:	9009883a 	mov	r4,r18
    5de4:	000d5940 	call	d594 <__malloc_unlock>
    5de8:	80800204 	addi	r2,r16,8
    5dec:	003f3c06 	br	5ae0 <_malloc_r+0x2a4>
    5df0:	30c00117 	ldw	r3,4(r6)
    5df4:	003ee706 	br	5994 <_malloc_r+0x158>
    5df8:	5ac00044 	addi	r11,r11,1
    5dfc:	588000cc 	andi	r2,r11,3
    5e00:	31800204 	addi	r6,r6,8
    5e04:	103efd1e 	bne	r2,zero,59fc <_malloc_r+0x1c0>
    5e08:	00002406 	br	5e9c <_malloc_r+0x660>
    5e0c:	14000317 	ldw	r16,12(r2)
    5e10:	143f251e 	bne	r2,r16,5aa8 <_malloc_r+0x26c>
    5e14:	21000084 	addi	r4,r4,2
    5e18:	003ebc06 	br	590c <_malloc_r+0xd0>
    5e1c:	8085883a 	add	r2,r16,r2
    5e20:	10c00117 	ldw	r3,4(r2)
    5e24:	81000317 	ldw	r4,12(r16)
    5e28:	81400217 	ldw	r5,8(r16)
    5e2c:	18c00054 	ori	r3,r3,1
    5e30:	10c00115 	stw	r3,4(r2)
    5e34:	29000315 	stw	r4,12(r5)
    5e38:	21400215 	stw	r5,8(r4)
    5e3c:	9009883a 	mov	r4,r18
    5e40:	000d5940 	call	d594 <__malloc_unlock>
    5e44:	80800204 	addi	r2,r16,8
    5e48:	003f2506 	br	5ae0 <_malloc_r+0x2a4>
    5e4c:	12001704 	addi	r8,r2,92
    5e50:	11c016c4 	addi	r7,r2,91
    5e54:	4209883a 	add	r4,r8,r8
    5e58:	003e9606 	br	58b4 <_malloc_r+0x78>
    5e5c:	3804d1ba 	srli	r2,r7,6
    5e60:	11400e44 	addi	r5,r2,57
    5e64:	10c00e04 	addi	r3,r2,56
    5e68:	294b883a 	add	r5,r5,r5
    5e6c:	003fbc06 	br	5d60 <_malloc_r+0x524>
    5e70:	84ff5926 	beq	r16,r19,5bd8 <_malloc_r+0x39c>
    5e74:	00800074 	movhi	r2,1
    5e78:	10841d04 	addi	r2,r2,4212
    5e7c:	14000217 	ldw	r16,8(r2)
    5e80:	00bfff04 	movi	r2,-4
    5e84:	80c00117 	ldw	r3,4(r16)
    5e88:	1886703a 	and	r3,r3,r2
    5e8c:	003f9106 	br	5cd4 <_malloc_r+0x498>
    5e90:	60800217 	ldw	r2,8(r12)
    5e94:	213fffc4 	addi	r4,r4,-1
    5e98:	1300651e 	bne	r2,r12,6030 <_malloc_r+0x7f4>
    5e9c:	208000cc 	andi	r2,r4,3
    5ea0:	633ffe04 	addi	r12,r12,-8
    5ea4:	103ffa1e 	bne	r2,zero,5e90 <_malloc_r+0x654>
    5ea8:	98800117 	ldw	r2,4(r19)
    5eac:	0146303a 	nor	r3,zero,r5
    5eb0:	1884703a 	and	r2,r3,r2
    5eb4:	98800115 	stw	r2,4(r19)
    5eb8:	294b883a 	add	r5,r5,r5
    5ebc:	117f2836 	bltu	r2,r5,5b60 <_malloc_r+0x324>
    5ec0:	283f2726 	beq	r5,zero,5b60 <_malloc_r+0x324>
    5ec4:	2886703a 	and	r3,r5,r2
    5ec8:	5809883a 	mov	r4,r11
    5ecc:	183ec31e 	bne	r3,zero,59dc <_malloc_r+0x1a0>
    5ed0:	294b883a 	add	r5,r5,r5
    5ed4:	2886703a 	and	r3,r5,r2
    5ed8:	21000104 	addi	r4,r4,4
    5edc:	183ffc26 	beq	r3,zero,5ed0 <_malloc_r+0x694>
    5ee0:	003ebe06 	br	59dc <_malloc_r+0x1a0>
    5ee4:	00c05504 	movi	r3,340
    5ee8:	18801236 	bltu	r3,r2,5f34 <_malloc_r+0x6f8>
    5eec:	8804d3fa 	srli	r2,r17,15
    5ef0:	12001e04 	addi	r8,r2,120
    5ef4:	11c01dc4 	addi	r7,r2,119
    5ef8:	4209883a 	add	r4,r8,r8
    5efc:	003e6d06 	br	58b4 <_malloc_r+0x78>
    5f00:	00c40004 	movi	r3,4096
    5f04:	003f4606 	br	5c20 <_malloc_r+0x3e4>
    5f08:	00800044 	movi	r2,1
    5f0c:	a0800115 	stw	r2,4(r20)
    5f10:	003f7406 	br	5ce4 <_malloc_r+0x4a8>
    5f14:	1805d0ba 	srai	r2,r3,2
    5f18:	01c00044 	movi	r7,1
    5f1c:	30c00117 	ldw	r3,4(r6)
    5f20:	388e983a 	sll	r7,r7,r2
    5f24:	2805883a 	mov	r2,r5
    5f28:	38c6b03a 	or	r3,r7,r3
    5f2c:	30c00115 	stw	r3,4(r6)
    5f30:	003f9b06 	br	5da0 <_malloc_r+0x564>
    5f34:	00c15504 	movi	r3,1364
    5f38:	18801a36 	bltu	r3,r2,5fa4 <_malloc_r+0x768>
    5f3c:	8804d4ba 	srli	r2,r17,18
    5f40:	12001f44 	addi	r8,r2,125
    5f44:	11c01f04 	addi	r7,r2,124
    5f48:	4209883a 	add	r4,r8,r8
    5f4c:	003e5906 	br	58b4 <_malloc_r+0x78>
    5f50:	ad400404 	addi	r21,r21,16
    5f54:	003f1706 	br	5bb4 <_malloc_r+0x378>
    5f58:	00c01504 	movi	r3,84
    5f5c:	18802336 	bltu	r3,r2,5fec <_malloc_r+0x7b0>
    5f60:	3804d33a 	srli	r2,r7,12
    5f64:	11401bc4 	addi	r5,r2,111
    5f68:	10c01b84 	addi	r3,r2,110
    5f6c:	294b883a 	add	r5,r5,r5
    5f70:	003f7b06 	br	5d60 <_malloc_r+0x524>
    5f74:	9c000217 	ldw	r16,8(r19)
    5f78:	00bfff04 	movi	r2,-4
    5f7c:	80c00117 	ldw	r3,4(r16)
    5f80:	1886703a 	and	r3,r3,r2
    5f84:	003f5306 	br	5cd4 <_malloc_r+0x498>
    5f88:	3083ffcc 	andi	r2,r6,4095
    5f8c:	103f181e 	bne	r2,zero,5bf0 <_malloc_r+0x3b4>
    5f90:	99000217 	ldw	r4,8(r19)
    5f94:	b545883a 	add	r2,r22,r21
    5f98:	10800054 	ori	r2,r2,1
    5f9c:	20800115 	stw	r2,4(r4)
    5fa0:	003f3e06 	br	5c9c <_malloc_r+0x460>
    5fa4:	01003f84 	movi	r4,254
    5fa8:	02001fc4 	movi	r8,127
    5fac:	01c01f84 	movi	r7,126
    5fb0:	003e4006 	br	58b4 <_malloc_r+0x78>
    5fb4:	00800074 	movhi	r2,1
    5fb8:	1089e604 	addi	r2,r2,10136
    5fbc:	15000015 	stw	r20,0(r2)
    5fc0:	003f1106 	br	5c08 <_malloc_r+0x3cc>
    5fc4:	00800044 	movi	r2,1
    5fc8:	002b883a 	mov	r21,zero
    5fcc:	003f1f06 	br	5c4c <_malloc_r+0x410>
    5fd0:	81400204 	addi	r5,r16,8
    5fd4:	9009883a 	mov	r4,r18
    5fd8:	0004c500 	call	4c50 <_free_r>
    5fdc:	00800074 	movhi	r2,1
    5fe0:	10910604 	addi	r2,r2,17432
    5fe4:	10c00017 	ldw	r3,0(r2)
    5fe8:	003f2c06 	br	5c9c <_malloc_r+0x460>
    5fec:	00c05504 	movi	r3,340
    5ff0:	18800536 	bltu	r3,r2,6008 <_malloc_r+0x7cc>
    5ff4:	3804d3fa 	srli	r2,r7,15
    5ff8:	11401e04 	addi	r5,r2,120
    5ffc:	10c01dc4 	addi	r3,r2,119
    6000:	294b883a 	add	r5,r5,r5
    6004:	003f5606 	br	5d60 <_malloc_r+0x524>
    6008:	00c15504 	movi	r3,1364
    600c:	18800536 	bltu	r3,r2,6024 <_malloc_r+0x7e8>
    6010:	3804d4ba 	srli	r2,r7,18
    6014:	11401f44 	addi	r5,r2,125
    6018:	10c01f04 	addi	r3,r2,124
    601c:	294b883a 	add	r5,r5,r5
    6020:	003f4f06 	br	5d60 <_malloc_r+0x524>
    6024:	01403f84 	movi	r5,254
    6028:	00c01f84 	movi	r3,126
    602c:	003f4c06 	br	5d60 <_malloc_r+0x524>
    6030:	98800117 	ldw	r2,4(r19)
    6034:	003fa006 	br	5eb8 <_malloc_r+0x67c>
    6038:	8808d0fa 	srli	r4,r17,3
    603c:	20800044 	addi	r2,r4,1
    6040:	1085883a 	add	r2,r2,r2
    6044:	003e9006 	br	5a88 <_malloc_r+0x24c>

00006048 <memchr>:
    6048:	208000cc 	andi	r2,r4,3
    604c:	280f883a 	mov	r7,r5
    6050:	10003426 	beq	r2,zero,6124 <memchr+0xdc>
    6054:	30bfffc4 	addi	r2,r6,-1
    6058:	30001a26 	beq	r6,zero,60c4 <memchr+0x7c>
    605c:	20c00003 	ldbu	r3,0(r4)
    6060:	29803fcc 	andi	r6,r5,255
    6064:	30c0051e 	bne	r6,r3,607c <memchr+0x34>
    6068:	00001806 	br	60cc <memchr+0x84>
    606c:	10001526 	beq	r2,zero,60c4 <memchr+0x7c>
    6070:	20c00003 	ldbu	r3,0(r4)
    6074:	10bfffc4 	addi	r2,r2,-1
    6078:	30c01426 	beq	r6,r3,60cc <memchr+0x84>
    607c:	21000044 	addi	r4,r4,1
    6080:	20c000cc 	andi	r3,r4,3
    6084:	183ff91e 	bne	r3,zero,606c <memchr+0x24>
    6088:	020000c4 	movi	r8,3
    608c:	40801136 	bltu	r8,r2,60d4 <memchr+0x8c>
    6090:	10000c26 	beq	r2,zero,60c4 <memchr+0x7c>
    6094:	20c00003 	ldbu	r3,0(r4)
    6098:	29403fcc 	andi	r5,r5,255
    609c:	28c00b26 	beq	r5,r3,60cc <memchr+0x84>
    60a0:	20c00044 	addi	r3,r4,1
    60a4:	39803fcc 	andi	r6,r7,255
    60a8:	2089883a 	add	r4,r4,r2
    60ac:	00000306 	br	60bc <memchr+0x74>
    60b0:	18c00044 	addi	r3,r3,1
    60b4:	197fffc3 	ldbu	r5,-1(r3)
    60b8:	31400526 	beq	r6,r5,60d0 <memchr+0x88>
    60bc:	1805883a 	mov	r2,r3
    60c0:	20fffb1e 	bne	r4,r3,60b0 <memchr+0x68>
    60c4:	0005883a 	mov	r2,zero
    60c8:	f800283a 	ret
    60cc:	2005883a 	mov	r2,r4
    60d0:	f800283a 	ret
    60d4:	28c03fcc 	andi	r3,r5,255
    60d8:	1812923a 	slli	r9,r3,8
    60dc:	02ffbff4 	movhi	r11,65279
    60e0:	02a02074 	movhi	r10,32897
    60e4:	48d2b03a 	or	r9,r9,r3
    60e8:	4806943a 	slli	r3,r9,16
    60ec:	5affbfc4 	addi	r11,r11,-257
    60f0:	52a02004 	addi	r10,r10,-32640
    60f4:	48d2b03a 	or	r9,r9,r3
    60f8:	20c00017 	ldw	r3,0(r4)
    60fc:	48c6f03a 	xor	r3,r9,r3
    6100:	1acd883a 	add	r6,r3,r11
    6104:	00c6303a 	nor	r3,zero,r3
    6108:	30c6703a 	and	r3,r6,r3
    610c:	1a86703a 	and	r3,r3,r10
    6110:	183fe01e 	bne	r3,zero,6094 <memchr+0x4c>
    6114:	10bfff04 	addi	r2,r2,-4
    6118:	21000104 	addi	r4,r4,4
    611c:	40bff636 	bltu	r8,r2,60f8 <memchr+0xb0>
    6120:	003fdb06 	br	6090 <memchr+0x48>
    6124:	3005883a 	mov	r2,r6
    6128:	003fd706 	br	6088 <memchr+0x40>

0000612c <memcpy>:
    612c:	defffd04 	addi	sp,sp,-12
    6130:	dfc00215 	stw	ra,8(sp)
    6134:	dc400115 	stw	r17,4(sp)
    6138:	dc000015 	stw	r16,0(sp)
    613c:	00c003c4 	movi	r3,15
    6140:	2005883a 	mov	r2,r4
    6144:	1980452e 	bgeu	r3,r6,625c <memcpy+0x130>
    6148:	2906b03a 	or	r3,r5,r4
    614c:	18c000cc 	andi	r3,r3,3
    6150:	1800441e 	bne	r3,zero,6264 <memcpy+0x138>
    6154:	347ffc04 	addi	r17,r6,-16
    6158:	8822d13a 	srli	r17,r17,4
    615c:	28c00104 	addi	r3,r5,4
    6160:	23400104 	addi	r13,r4,4
    6164:	8820913a 	slli	r16,r17,4
    6168:	2b000204 	addi	r12,r5,8
    616c:	22c00204 	addi	r11,r4,8
    6170:	84000504 	addi	r16,r16,20
    6174:	2a800304 	addi	r10,r5,12
    6178:	22400304 	addi	r9,r4,12
    617c:	2c21883a 	add	r16,r5,r16
    6180:	2811883a 	mov	r8,r5
    6184:	200f883a 	mov	r7,r4
    6188:	41000017 	ldw	r4,0(r8)
    618c:	1fc00017 	ldw	ra,0(r3)
    6190:	63c00017 	ldw	r15,0(r12)
    6194:	39000015 	stw	r4,0(r7)
    6198:	53800017 	ldw	r14,0(r10)
    619c:	6fc00015 	stw	ra,0(r13)
    61a0:	5bc00015 	stw	r15,0(r11)
    61a4:	4b800015 	stw	r14,0(r9)
    61a8:	18c00404 	addi	r3,r3,16
    61ac:	39c00404 	addi	r7,r7,16
    61b0:	42000404 	addi	r8,r8,16
    61b4:	6b400404 	addi	r13,r13,16
    61b8:	63000404 	addi	r12,r12,16
    61bc:	5ac00404 	addi	r11,r11,16
    61c0:	52800404 	addi	r10,r10,16
    61c4:	4a400404 	addi	r9,r9,16
    61c8:	1c3fef1e 	bne	r3,r16,6188 <memcpy+0x5c>
    61cc:	89c00044 	addi	r7,r17,1
    61d0:	380e913a 	slli	r7,r7,4
    61d4:	310003cc 	andi	r4,r6,15
    61d8:	02c000c4 	movi	r11,3
    61dc:	11c7883a 	add	r3,r2,r7
    61e0:	29cb883a 	add	r5,r5,r7
    61e4:	5900212e 	bgeu	r11,r4,626c <memcpy+0x140>
    61e8:	1813883a 	mov	r9,r3
    61ec:	2811883a 	mov	r8,r5
    61f0:	200f883a 	mov	r7,r4
    61f4:	42800017 	ldw	r10,0(r8)
    61f8:	4a400104 	addi	r9,r9,4
    61fc:	39ffff04 	addi	r7,r7,-4
    6200:	4abfff15 	stw	r10,-4(r9)
    6204:	42000104 	addi	r8,r8,4
    6208:	59fffa36 	bltu	r11,r7,61f4 <memcpy+0xc8>
    620c:	213fff04 	addi	r4,r4,-4
    6210:	2008d0ba 	srli	r4,r4,2
    6214:	318000cc 	andi	r6,r6,3
    6218:	21000044 	addi	r4,r4,1
    621c:	2109883a 	add	r4,r4,r4
    6220:	2109883a 	add	r4,r4,r4
    6224:	1907883a 	add	r3,r3,r4
    6228:	290b883a 	add	r5,r5,r4
    622c:	30000626 	beq	r6,zero,6248 <memcpy+0x11c>
    6230:	198d883a 	add	r6,r3,r6
    6234:	29c00003 	ldbu	r7,0(r5)
    6238:	18c00044 	addi	r3,r3,1
    623c:	29400044 	addi	r5,r5,1
    6240:	19ffffc5 	stb	r7,-1(r3)
    6244:	19bffb1e 	bne	r3,r6,6234 <memcpy+0x108>
    6248:	dfc00217 	ldw	ra,8(sp)
    624c:	dc400117 	ldw	r17,4(sp)
    6250:	dc000017 	ldw	r16,0(sp)
    6254:	dec00304 	addi	sp,sp,12
    6258:	f800283a 	ret
    625c:	2007883a 	mov	r3,r4
    6260:	003ff206 	br	622c <memcpy+0x100>
    6264:	2007883a 	mov	r3,r4
    6268:	003ff106 	br	6230 <memcpy+0x104>
    626c:	200d883a 	mov	r6,r4
    6270:	003fee06 	br	622c <memcpy+0x100>

00006274 <memmove>:
    6274:	2005883a 	mov	r2,r4
    6278:	29000b2e 	bgeu	r5,r4,62a8 <memmove+0x34>
    627c:	298f883a 	add	r7,r5,r6
    6280:	21c0092e 	bgeu	r4,r7,62a8 <memmove+0x34>
    6284:	2187883a 	add	r3,r4,r6
    6288:	198bc83a 	sub	r5,r3,r6
    628c:	30004826 	beq	r6,zero,63b0 <memmove+0x13c>
    6290:	39ffffc4 	addi	r7,r7,-1
    6294:	39000003 	ldbu	r4,0(r7)
    6298:	18ffffc4 	addi	r3,r3,-1
    629c:	19000005 	stb	r4,0(r3)
    62a0:	28fffb1e 	bne	r5,r3,6290 <memmove+0x1c>
    62a4:	f800283a 	ret
    62a8:	00c003c4 	movi	r3,15
    62ac:	1980412e 	bgeu	r3,r6,63b4 <memmove+0x140>
    62b0:	2886b03a 	or	r3,r5,r2
    62b4:	18c000cc 	andi	r3,r3,3
    62b8:	1800401e 	bne	r3,zero,63bc <memmove+0x148>
    62bc:	33fffc04 	addi	r15,r6,-16
    62c0:	781ed13a 	srli	r15,r15,4
    62c4:	28c00104 	addi	r3,r5,4
    62c8:	13400104 	addi	r13,r2,4
    62cc:	781c913a 	slli	r14,r15,4
    62d0:	2b000204 	addi	r12,r5,8
    62d4:	12c00204 	addi	r11,r2,8
    62d8:	73800504 	addi	r14,r14,20
    62dc:	2a800304 	addi	r10,r5,12
    62e0:	12400304 	addi	r9,r2,12
    62e4:	2b9d883a 	add	r14,r5,r14
    62e8:	2811883a 	mov	r8,r5
    62ec:	100f883a 	mov	r7,r2
    62f0:	41000017 	ldw	r4,0(r8)
    62f4:	39c00404 	addi	r7,r7,16
    62f8:	18c00404 	addi	r3,r3,16
    62fc:	393ffc15 	stw	r4,-16(r7)
    6300:	193ffc17 	ldw	r4,-16(r3)
    6304:	6b400404 	addi	r13,r13,16
    6308:	5ac00404 	addi	r11,r11,16
    630c:	693ffc15 	stw	r4,-16(r13)
    6310:	61000017 	ldw	r4,0(r12)
    6314:	4a400404 	addi	r9,r9,16
    6318:	42000404 	addi	r8,r8,16
    631c:	593ffc15 	stw	r4,-16(r11)
    6320:	51000017 	ldw	r4,0(r10)
    6324:	63000404 	addi	r12,r12,16
    6328:	52800404 	addi	r10,r10,16
    632c:	493ffc15 	stw	r4,-16(r9)
    6330:	1bbfef1e 	bne	r3,r14,62f0 <memmove+0x7c>
    6334:	79000044 	addi	r4,r15,1
    6338:	2008913a 	slli	r4,r4,4
    633c:	328003cc 	andi	r10,r6,15
    6340:	02c000c4 	movi	r11,3
    6344:	1107883a 	add	r3,r2,r4
    6348:	290b883a 	add	r5,r5,r4
    634c:	5a801e2e 	bgeu	r11,r10,63c8 <memmove+0x154>
    6350:	1813883a 	mov	r9,r3
    6354:	2811883a 	mov	r8,r5
    6358:	500f883a 	mov	r7,r10
    635c:	41000017 	ldw	r4,0(r8)
    6360:	4a400104 	addi	r9,r9,4
    6364:	39ffff04 	addi	r7,r7,-4
    6368:	493fff15 	stw	r4,-4(r9)
    636c:	42000104 	addi	r8,r8,4
    6370:	59fffa36 	bltu	r11,r7,635c <memmove+0xe8>
    6374:	513fff04 	addi	r4,r10,-4
    6378:	2008d0ba 	srli	r4,r4,2
    637c:	318000cc 	andi	r6,r6,3
    6380:	21000044 	addi	r4,r4,1
    6384:	2109883a 	add	r4,r4,r4
    6388:	2109883a 	add	r4,r4,r4
    638c:	1907883a 	add	r3,r3,r4
    6390:	290b883a 	add	r5,r5,r4
    6394:	30000b26 	beq	r6,zero,63c4 <memmove+0x150>
    6398:	198d883a 	add	r6,r3,r6
    639c:	29c00003 	ldbu	r7,0(r5)
    63a0:	18c00044 	addi	r3,r3,1
    63a4:	29400044 	addi	r5,r5,1
    63a8:	19ffffc5 	stb	r7,-1(r3)
    63ac:	19bffb1e 	bne	r3,r6,639c <memmove+0x128>
    63b0:	f800283a 	ret
    63b4:	1007883a 	mov	r3,r2
    63b8:	003ff606 	br	6394 <memmove+0x120>
    63bc:	1007883a 	mov	r3,r2
    63c0:	003ff506 	br	6398 <memmove+0x124>
    63c4:	f800283a 	ret
    63c8:	500d883a 	mov	r6,r10
    63cc:	003ff106 	br	6394 <memmove+0x120>

000063d0 <memset>:
    63d0:	20c000cc 	andi	r3,r4,3
    63d4:	2005883a 	mov	r2,r4
    63d8:	18004426 	beq	r3,zero,64ec <memset+0x11c>
    63dc:	31ffffc4 	addi	r7,r6,-1
    63e0:	30004026 	beq	r6,zero,64e4 <memset+0x114>
    63e4:	2813883a 	mov	r9,r5
    63e8:	200d883a 	mov	r6,r4
    63ec:	2007883a 	mov	r3,r4
    63f0:	00000406 	br	6404 <memset+0x34>
    63f4:	3a3fffc4 	addi	r8,r7,-1
    63f8:	31800044 	addi	r6,r6,1
    63fc:	38003926 	beq	r7,zero,64e4 <memset+0x114>
    6400:	400f883a 	mov	r7,r8
    6404:	18c00044 	addi	r3,r3,1
    6408:	32400005 	stb	r9,0(r6)
    640c:	1a0000cc 	andi	r8,r3,3
    6410:	403ff81e 	bne	r8,zero,63f4 <memset+0x24>
    6414:	010000c4 	movi	r4,3
    6418:	21c02d2e 	bgeu	r4,r7,64d0 <memset+0x100>
    641c:	29003fcc 	andi	r4,r5,255
    6420:	200c923a 	slli	r6,r4,8
    6424:	3108b03a 	or	r4,r6,r4
    6428:	200c943a 	slli	r6,r4,16
    642c:	218cb03a 	or	r6,r4,r6
    6430:	010003c4 	movi	r4,15
    6434:	21c0182e 	bgeu	r4,r7,6498 <memset+0xc8>
    6438:	3b3ffc04 	addi	r12,r7,-16
    643c:	6018d13a 	srli	r12,r12,4
    6440:	1a000104 	addi	r8,r3,4
    6444:	1ac00204 	addi	r11,r3,8
    6448:	6008913a 	slli	r4,r12,4
    644c:	1a800304 	addi	r10,r3,12
    6450:	1813883a 	mov	r9,r3
    6454:	21000504 	addi	r4,r4,20
    6458:	1909883a 	add	r4,r3,r4
    645c:	49800015 	stw	r6,0(r9)
    6460:	41800015 	stw	r6,0(r8)
    6464:	59800015 	stw	r6,0(r11)
    6468:	51800015 	stw	r6,0(r10)
    646c:	42000404 	addi	r8,r8,16
    6470:	4a400404 	addi	r9,r9,16
    6474:	5ac00404 	addi	r11,r11,16
    6478:	52800404 	addi	r10,r10,16
    647c:	413ff71e 	bne	r8,r4,645c <memset+0x8c>
    6480:	63000044 	addi	r12,r12,1
    6484:	6018913a 	slli	r12,r12,4
    6488:	39c003cc 	andi	r7,r7,15
    648c:	010000c4 	movi	r4,3
    6490:	1b07883a 	add	r3,r3,r12
    6494:	21c00e2e 	bgeu	r4,r7,64d0 <memset+0x100>
    6498:	1813883a 	mov	r9,r3
    649c:	3811883a 	mov	r8,r7
    64a0:	010000c4 	movi	r4,3
    64a4:	49800015 	stw	r6,0(r9)
    64a8:	423fff04 	addi	r8,r8,-4
    64ac:	4a400104 	addi	r9,r9,4
    64b0:	223ffc36 	bltu	r4,r8,64a4 <memset+0xd4>
    64b4:	393fff04 	addi	r4,r7,-4
    64b8:	2008d0ba 	srli	r4,r4,2
    64bc:	39c000cc 	andi	r7,r7,3
    64c0:	21000044 	addi	r4,r4,1
    64c4:	2109883a 	add	r4,r4,r4
    64c8:	2109883a 	add	r4,r4,r4
    64cc:	1907883a 	add	r3,r3,r4
    64d0:	38000526 	beq	r7,zero,64e8 <memset+0x118>
    64d4:	19cf883a 	add	r7,r3,r7
    64d8:	19400005 	stb	r5,0(r3)
    64dc:	18c00044 	addi	r3,r3,1
    64e0:	38fffd1e 	bne	r7,r3,64d8 <memset+0x108>
    64e4:	f800283a 	ret
    64e8:	f800283a 	ret
    64ec:	2007883a 	mov	r3,r4
    64f0:	300f883a 	mov	r7,r6
    64f4:	003fc706 	br	6414 <memset+0x44>

000064f8 <_Balloc>:
    64f8:	20801317 	ldw	r2,76(r4)
    64fc:	defffc04 	addi	sp,sp,-16
    6500:	dc400115 	stw	r17,4(sp)
    6504:	dc000015 	stw	r16,0(sp)
    6508:	dfc00315 	stw	ra,12(sp)
    650c:	dc800215 	stw	r18,8(sp)
    6510:	2023883a 	mov	r17,r4
    6514:	2821883a 	mov	r16,r5
    6518:	10000f26 	beq	r2,zero,6558 <_Balloc+0x60>
    651c:	8407883a 	add	r3,r16,r16
    6520:	18c7883a 	add	r3,r3,r3
    6524:	10c7883a 	add	r3,r2,r3
    6528:	18800017 	ldw	r2,0(r3)
    652c:	10001126 	beq	r2,zero,6574 <_Balloc+0x7c>
    6530:	11000017 	ldw	r4,0(r2)
    6534:	19000015 	stw	r4,0(r3)
    6538:	10000415 	stw	zero,16(r2)
    653c:	10000315 	stw	zero,12(r2)
    6540:	dfc00317 	ldw	ra,12(sp)
    6544:	dc800217 	ldw	r18,8(sp)
    6548:	dc400117 	ldw	r17,4(sp)
    654c:	dc000017 	ldw	r16,0(sp)
    6550:	dec00404 	addi	sp,sp,16
    6554:	f800283a 	ret
    6558:	01800844 	movi	r6,33
    655c:	01400104 	movi	r5,4
    6560:	00094340 	call	9434 <_calloc_r>
    6564:	88801315 	stw	r2,76(r17)
    6568:	103fec1e 	bne	r2,zero,651c <_Balloc+0x24>
    656c:	0005883a 	mov	r2,zero
    6570:	003ff306 	br	6540 <_Balloc+0x48>
    6574:	01400044 	movi	r5,1
    6578:	2c24983a 	sll	r18,r5,r16
    657c:	8809883a 	mov	r4,r17
    6580:	91800144 	addi	r6,r18,5
    6584:	318d883a 	add	r6,r6,r6
    6588:	318d883a 	add	r6,r6,r6
    658c:	00094340 	call	9434 <_calloc_r>
    6590:	103ff626 	beq	r2,zero,656c <_Balloc+0x74>
    6594:	14000115 	stw	r16,4(r2)
    6598:	14800215 	stw	r18,8(r2)
    659c:	003fe606 	br	6538 <_Balloc+0x40>

000065a0 <_Bfree>:
    65a0:	28000826 	beq	r5,zero,65c4 <_Bfree+0x24>
    65a4:	28c00117 	ldw	r3,4(r5)
    65a8:	20801317 	ldw	r2,76(r4)
    65ac:	18c7883a 	add	r3,r3,r3
    65b0:	18c7883a 	add	r3,r3,r3
    65b4:	10c5883a 	add	r2,r2,r3
    65b8:	10c00017 	ldw	r3,0(r2)
    65bc:	28c00015 	stw	r3,0(r5)
    65c0:	11400015 	stw	r5,0(r2)
    65c4:	f800283a 	ret

000065c8 <__multadd>:
    65c8:	defffa04 	addi	sp,sp,-24
    65cc:	dc800315 	stw	r18,12(sp)
    65d0:	dc400215 	stw	r17,8(sp)
    65d4:	dc000115 	stw	r16,4(sp)
    65d8:	2823883a 	mov	r17,r5
    65dc:	2c000417 	ldw	r16,16(r5)
    65e0:	dfc00515 	stw	ra,20(sp)
    65e4:	dcc00415 	stw	r19,16(sp)
    65e8:	2025883a 	mov	r18,r4
    65ec:	29400504 	addi	r5,r5,20
    65f0:	0011883a 	mov	r8,zero
    65f4:	28c00017 	ldw	r3,0(r5)
    65f8:	29400104 	addi	r5,r5,4
    65fc:	42000044 	addi	r8,r8,1
    6600:	18bfffcc 	andi	r2,r3,65535
    6604:	1185383a 	mul	r2,r2,r6
    6608:	1806d43a 	srli	r3,r3,16
    660c:	11cf883a 	add	r7,r2,r7
    6610:	3808d43a 	srli	r4,r7,16
    6614:	1987383a 	mul	r3,r3,r6
    6618:	38bfffcc 	andi	r2,r7,65535
    661c:	1907883a 	add	r3,r3,r4
    6620:	1808943a 	slli	r4,r3,16
    6624:	180ed43a 	srli	r7,r3,16
    6628:	2085883a 	add	r2,r4,r2
    662c:	28bfff15 	stw	r2,-4(r5)
    6630:	443ff016 	blt	r8,r16,65f4 <__multadd+0x2c>
    6634:	38000926 	beq	r7,zero,665c <__multadd+0x94>
    6638:	88800217 	ldw	r2,8(r17)
    663c:	80800f0e 	bge	r16,r2,667c <__multadd+0xb4>
    6640:	80800144 	addi	r2,r16,5
    6644:	1085883a 	add	r2,r2,r2
    6648:	1085883a 	add	r2,r2,r2
    664c:	8885883a 	add	r2,r17,r2
    6650:	11c00015 	stw	r7,0(r2)
    6654:	84000044 	addi	r16,r16,1
    6658:	8c000415 	stw	r16,16(r17)
    665c:	8805883a 	mov	r2,r17
    6660:	dfc00517 	ldw	ra,20(sp)
    6664:	dcc00417 	ldw	r19,16(sp)
    6668:	dc800317 	ldw	r18,12(sp)
    666c:	dc400217 	ldw	r17,8(sp)
    6670:	dc000117 	ldw	r16,4(sp)
    6674:	dec00604 	addi	sp,sp,24
    6678:	f800283a 	ret
    667c:	89400117 	ldw	r5,4(r17)
    6680:	9009883a 	mov	r4,r18
    6684:	d9c00015 	stw	r7,0(sp)
    6688:	29400044 	addi	r5,r5,1
    668c:	00064f80 	call	64f8 <_Balloc>
    6690:	89800417 	ldw	r6,16(r17)
    6694:	89400304 	addi	r5,r17,12
    6698:	11000304 	addi	r4,r2,12
    669c:	31800084 	addi	r6,r6,2
    66a0:	318d883a 	add	r6,r6,r6
    66a4:	318d883a 	add	r6,r6,r6
    66a8:	1027883a 	mov	r19,r2
    66ac:	000612c0 	call	612c <memcpy>
    66b0:	d9c00017 	ldw	r7,0(sp)
    66b4:	88000a26 	beq	r17,zero,66e0 <__multadd+0x118>
    66b8:	88c00117 	ldw	r3,4(r17)
    66bc:	90801317 	ldw	r2,76(r18)
    66c0:	18c7883a 	add	r3,r3,r3
    66c4:	18c7883a 	add	r3,r3,r3
    66c8:	10c5883a 	add	r2,r2,r3
    66cc:	10c00017 	ldw	r3,0(r2)
    66d0:	88c00015 	stw	r3,0(r17)
    66d4:	14400015 	stw	r17,0(r2)
    66d8:	9823883a 	mov	r17,r19
    66dc:	003fd806 	br	6640 <__multadd+0x78>
    66e0:	9823883a 	mov	r17,r19
    66e4:	003fd606 	br	6640 <__multadd+0x78>

000066e8 <__s2b>:
    66e8:	defff904 	addi	sp,sp,-28
    66ec:	dc400115 	stw	r17,4(sp)
    66f0:	dc000015 	stw	r16,0(sp)
    66f4:	2023883a 	mov	r17,r4
    66f8:	2821883a 	mov	r16,r5
    66fc:	39000204 	addi	r4,r7,8
    6700:	01400244 	movi	r5,9
    6704:	dcc00315 	stw	r19,12(sp)
    6708:	dc800215 	stw	r18,8(sp)
    670c:	dfc00615 	stw	ra,24(sp)
    6710:	dd400515 	stw	r21,20(sp)
    6714:	dd000415 	stw	r20,16(sp)
    6718:	3825883a 	mov	r18,r7
    671c:	3027883a 	mov	r19,r6
    6720:	00004ac0 	call	4ac <__divsi3>
    6724:	00c00044 	movi	r3,1
    6728:	000b883a 	mov	r5,zero
    672c:	1880030e 	bge	r3,r2,673c <__s2b+0x54>
    6730:	18c7883a 	add	r3,r3,r3
    6734:	29400044 	addi	r5,r5,1
    6738:	18bffd16 	blt	r3,r2,6730 <__s2b+0x48>
    673c:	8809883a 	mov	r4,r17
    6740:	00064f80 	call	64f8 <_Balloc>
    6744:	d8c00717 	ldw	r3,28(sp)
    6748:	10c00515 	stw	r3,20(r2)
    674c:	00c00044 	movi	r3,1
    6750:	10c00415 	stw	r3,16(r2)
    6754:	00c00244 	movi	r3,9
    6758:	1cc0210e 	bge	r3,r19,67e0 <__s2b+0xf8>
    675c:	80eb883a 	add	r21,r16,r3
    6760:	a829883a 	mov	r20,r21
    6764:	84e1883a 	add	r16,r16,r19
    6768:	a1c00007 	ldb	r7,0(r20)
    676c:	01800284 	movi	r6,10
    6770:	a5000044 	addi	r20,r20,1
    6774:	100b883a 	mov	r5,r2
    6778:	39fff404 	addi	r7,r7,-48
    677c:	8809883a 	mov	r4,r17
    6780:	00065c80 	call	65c8 <__multadd>
    6784:	a43ff81e 	bne	r20,r16,6768 <__s2b+0x80>
    6788:	ace1883a 	add	r16,r21,r19
    678c:	843ffe04 	addi	r16,r16,-8
    6790:	9c800a0e 	bge	r19,r18,67bc <__s2b+0xd4>
    6794:	94e5c83a 	sub	r18,r18,r19
    6798:	84a5883a 	add	r18,r16,r18
    679c:	81c00007 	ldb	r7,0(r16)
    67a0:	01800284 	movi	r6,10
    67a4:	84000044 	addi	r16,r16,1
    67a8:	100b883a 	mov	r5,r2
    67ac:	39fff404 	addi	r7,r7,-48
    67b0:	8809883a 	mov	r4,r17
    67b4:	00065c80 	call	65c8 <__multadd>
    67b8:	84bff81e 	bne	r16,r18,679c <__s2b+0xb4>
    67bc:	dfc00617 	ldw	ra,24(sp)
    67c0:	dd400517 	ldw	r21,20(sp)
    67c4:	dd000417 	ldw	r20,16(sp)
    67c8:	dcc00317 	ldw	r19,12(sp)
    67cc:	dc800217 	ldw	r18,8(sp)
    67d0:	dc400117 	ldw	r17,4(sp)
    67d4:	dc000017 	ldw	r16,0(sp)
    67d8:	dec00704 	addi	sp,sp,28
    67dc:	f800283a 	ret
    67e0:	84000284 	addi	r16,r16,10
    67e4:	1827883a 	mov	r19,r3
    67e8:	003fe906 	br	6790 <__s2b+0xa8>

000067ec <__hi0bits>:
    67ec:	20bfffec 	andhi	r2,r4,65535
    67f0:	1000141e 	bne	r2,zero,6844 <__hi0bits+0x58>
    67f4:	2008943a 	slli	r4,r4,16
    67f8:	00800404 	movi	r2,16
    67fc:	20ffc02c 	andhi	r3,r4,65280
    6800:	1800021e 	bne	r3,zero,680c <__hi0bits+0x20>
    6804:	2008923a 	slli	r4,r4,8
    6808:	10800204 	addi	r2,r2,8
    680c:	20fc002c 	andhi	r3,r4,61440
    6810:	1800021e 	bne	r3,zero,681c <__hi0bits+0x30>
    6814:	2008913a 	slli	r4,r4,4
    6818:	10800104 	addi	r2,r2,4
    681c:	20f0002c 	andhi	r3,r4,49152
    6820:	1800031e 	bne	r3,zero,6830 <__hi0bits+0x44>
    6824:	2109883a 	add	r4,r4,r4
    6828:	10800084 	addi	r2,r2,2
    682c:	2109883a 	add	r4,r4,r4
    6830:	20000316 	blt	r4,zero,6840 <__hi0bits+0x54>
    6834:	2110002c 	andhi	r4,r4,16384
    6838:	2000041e 	bne	r4,zero,684c <__hi0bits+0x60>
    683c:	00800804 	movi	r2,32
    6840:	f800283a 	ret
    6844:	0005883a 	mov	r2,zero
    6848:	003fec06 	br	67fc <__hi0bits+0x10>
    684c:	10800044 	addi	r2,r2,1
    6850:	f800283a 	ret

00006854 <__lo0bits>:
    6854:	20c00017 	ldw	r3,0(r4)
    6858:	188001cc 	andi	r2,r3,7
    685c:	10000826 	beq	r2,zero,6880 <__lo0bits+0x2c>
    6860:	1880004c 	andi	r2,r3,1
    6864:	1000211e 	bne	r2,zero,68ec <__lo0bits+0x98>
    6868:	1880008c 	andi	r2,r3,2
    686c:	1000211e 	bne	r2,zero,68f4 <__lo0bits+0xa0>
    6870:	1806d0ba 	srli	r3,r3,2
    6874:	00800084 	movi	r2,2
    6878:	20c00015 	stw	r3,0(r4)
    687c:	f800283a 	ret
    6880:	18bfffcc 	andi	r2,r3,65535
    6884:	10001326 	beq	r2,zero,68d4 <__lo0bits+0x80>
    6888:	0005883a 	mov	r2,zero
    688c:	19403fcc 	andi	r5,r3,255
    6890:	2800021e 	bne	r5,zero,689c <__lo0bits+0x48>
    6894:	1806d23a 	srli	r3,r3,8
    6898:	10800204 	addi	r2,r2,8
    689c:	194003cc 	andi	r5,r3,15
    68a0:	2800021e 	bne	r5,zero,68ac <__lo0bits+0x58>
    68a4:	1806d13a 	srli	r3,r3,4
    68a8:	10800104 	addi	r2,r2,4
    68ac:	194000cc 	andi	r5,r3,3
    68b0:	2800021e 	bne	r5,zero,68bc <__lo0bits+0x68>
    68b4:	1806d0ba 	srli	r3,r3,2
    68b8:	10800084 	addi	r2,r2,2
    68bc:	1940004c 	andi	r5,r3,1
    68c0:	2800081e 	bne	r5,zero,68e4 <__lo0bits+0x90>
    68c4:	1806d07a 	srli	r3,r3,1
    68c8:	1800051e 	bne	r3,zero,68e0 <__lo0bits+0x8c>
    68cc:	00800804 	movi	r2,32
    68d0:	f800283a 	ret
    68d4:	1806d43a 	srli	r3,r3,16
    68d8:	00800404 	movi	r2,16
    68dc:	003feb06 	br	688c <__lo0bits+0x38>
    68e0:	10800044 	addi	r2,r2,1
    68e4:	20c00015 	stw	r3,0(r4)
    68e8:	f800283a 	ret
    68ec:	0005883a 	mov	r2,zero
    68f0:	f800283a 	ret
    68f4:	1806d07a 	srli	r3,r3,1
    68f8:	00800044 	movi	r2,1
    68fc:	20c00015 	stw	r3,0(r4)
    6900:	f800283a 	ret

00006904 <__i2b>:
    6904:	defffd04 	addi	sp,sp,-12
    6908:	dc000015 	stw	r16,0(sp)
    690c:	04000044 	movi	r16,1
    6910:	dc400115 	stw	r17,4(sp)
    6914:	2823883a 	mov	r17,r5
    6918:	800b883a 	mov	r5,r16
    691c:	dfc00215 	stw	ra,8(sp)
    6920:	00064f80 	call	64f8 <_Balloc>
    6924:	14400515 	stw	r17,20(r2)
    6928:	14000415 	stw	r16,16(r2)
    692c:	dfc00217 	ldw	ra,8(sp)
    6930:	dc400117 	ldw	r17,4(sp)
    6934:	dc000017 	ldw	r16,0(sp)
    6938:	dec00304 	addi	sp,sp,12
    693c:	f800283a 	ret

00006940 <__multiply>:
    6940:	defffa04 	addi	sp,sp,-24
    6944:	dcc00315 	stw	r19,12(sp)
    6948:	dc800215 	stw	r18,8(sp)
    694c:	34c00417 	ldw	r19,16(r6)
    6950:	2c800417 	ldw	r18,16(r5)
    6954:	dd000415 	stw	r20,16(sp)
    6958:	dc400115 	stw	r17,4(sp)
    695c:	dfc00515 	stw	ra,20(sp)
    6960:	dc000015 	stw	r16,0(sp)
    6964:	2829883a 	mov	r20,r5
    6968:	3023883a 	mov	r17,r6
    696c:	94c0050e 	bge	r18,r19,6984 <__multiply+0x44>
    6970:	9007883a 	mov	r3,r18
    6974:	3029883a 	mov	r20,r6
    6978:	9825883a 	mov	r18,r19
    697c:	2823883a 	mov	r17,r5
    6980:	1827883a 	mov	r19,r3
    6984:	a0800217 	ldw	r2,8(r20)
    6988:	94e1883a 	add	r16,r18,r19
    698c:	a1400117 	ldw	r5,4(r20)
    6990:	1400010e 	bge	r2,r16,6998 <__multiply+0x58>
    6994:	29400044 	addi	r5,r5,1
    6998:	00064f80 	call	64f8 <_Balloc>
    699c:	8415883a 	add	r10,r16,r16
    69a0:	12c00504 	addi	r11,r2,20
    69a4:	5295883a 	add	r10,r10,r10
    69a8:	5a95883a 	add	r10,r11,r10
    69ac:	5807883a 	mov	r3,r11
    69b0:	5a80032e 	bgeu	r11,r10,69c0 <__multiply+0x80>
    69b4:	18000015 	stw	zero,0(r3)
    69b8:	18c00104 	addi	r3,r3,4
    69bc:	1abffd36 	bltu	r3,r10,69b4 <__multiply+0x74>
    69c0:	9ce7883a 	add	r19,r19,r19
    69c4:	94a5883a 	add	r18,r18,r18
    69c8:	89800504 	addi	r6,r17,20
    69cc:	9ce7883a 	add	r19,r19,r19
    69d0:	a3400504 	addi	r13,r20,20
    69d4:	94a5883a 	add	r18,r18,r18
    69d8:	34d9883a 	add	r12,r6,r19
    69dc:	6c93883a 	add	r9,r13,r18
    69e0:	3300422e 	bgeu	r6,r12,6aec <__multiply+0x1ac>
    69e4:	37c00017 	ldw	ra,0(r6)
    69e8:	fbffffcc 	andi	r15,ra,65535
    69ec:	78001b26 	beq	r15,zero,6a5c <__multiply+0x11c>
    69f0:	5811883a 	mov	r8,r11
    69f4:	681d883a 	mov	r14,r13
    69f8:	000f883a 	mov	r7,zero
    69fc:	71000017 	ldw	r4,0(r14)
    6a00:	40c00017 	ldw	r3,0(r8)
    6a04:	73800104 	addi	r14,r14,4
    6a08:	217fffcc 	andi	r5,r4,65535
    6a0c:	2bcb383a 	mul	r5,r5,r15
    6a10:	2008d43a 	srli	r4,r4,16
    6a14:	1c7fffcc 	andi	r17,r3,65535
    6a18:	2c4b883a 	add	r5,r5,r17
    6a1c:	29cb883a 	add	r5,r5,r7
    6a20:	23c9383a 	mul	r4,r4,r15
    6a24:	1806d43a 	srli	r3,r3,16
    6a28:	280ed43a 	srli	r7,r5,16
    6a2c:	297fffcc 	andi	r5,r5,65535
    6a30:	20c7883a 	add	r3,r4,r3
    6a34:	19c7883a 	add	r3,r3,r7
    6a38:	1808943a 	slli	r4,r3,16
    6a3c:	4023883a 	mov	r17,r8
    6a40:	180ed43a 	srli	r7,r3,16
    6a44:	214ab03a 	or	r5,r4,r5
    6a48:	41400015 	stw	r5,0(r8)
    6a4c:	42000104 	addi	r8,r8,4
    6a50:	727fea36 	bltu	r14,r9,69fc <__multiply+0xbc>
    6a54:	89c00115 	stw	r7,4(r17)
    6a58:	37c00017 	ldw	ra,0(r6)
    6a5c:	f83ed43a 	srli	ra,ra,16
    6a60:	f8001f26 	beq	ra,zero,6ae0 <__multiply+0x1a0>
    6a64:	58c00017 	ldw	r3,0(r11)
    6a68:	681d883a 	mov	r14,r13
    6a6c:	581f883a 	mov	r15,r11
    6a70:	1811883a 	mov	r8,r3
    6a74:	5825883a 	mov	r18,r11
    6a78:	000f883a 	mov	r7,zero
    6a7c:	00000106 	br	6a84 <__multiply+0x144>
    6a80:	8825883a 	mov	r18,r17
    6a84:	7140000b 	ldhu	r5,0(r14)
    6a88:	4010d43a 	srli	r8,r8,16
    6a8c:	193fffcc 	andi	r4,r3,65535
    6a90:	2fcb383a 	mul	r5,r5,ra
    6a94:	7bc00104 	addi	r15,r15,4
    6a98:	73800104 	addi	r14,r14,4
    6a9c:	2a0b883a 	add	r5,r5,r8
    6aa0:	29cb883a 	add	r5,r5,r7
    6aa4:	2806943a 	slli	r3,r5,16
    6aa8:	94400104 	addi	r17,r18,4
    6aac:	280ad43a 	srli	r5,r5,16
    6ab0:	1908b03a 	or	r4,r3,r4
    6ab4:	793fff15 	stw	r4,-4(r15)
    6ab8:	70ffff17 	ldw	r3,-4(r14)
    6abc:	8a000017 	ldw	r8,0(r17)
    6ac0:	1806d43a 	srli	r3,r3,16
    6ac4:	413fffcc 	andi	r4,r8,65535
    6ac8:	1fc7383a 	mul	r3,r3,ra
    6acc:	1907883a 	add	r3,r3,r4
    6ad0:	1947883a 	add	r3,r3,r5
    6ad4:	180ed43a 	srli	r7,r3,16
    6ad8:	727fe936 	bltu	r14,r9,6a80 <__multiply+0x140>
    6adc:	90c00115 	stw	r3,4(r18)
    6ae0:	31800104 	addi	r6,r6,4
    6ae4:	5ac00104 	addi	r11,r11,4
    6ae8:	333fbe36 	bltu	r6,r12,69e4 <__multiply+0xa4>
    6aec:	0400090e 	bge	zero,r16,6b14 <__multiply+0x1d4>
    6af0:	50ffff17 	ldw	r3,-4(r10)
    6af4:	52bfff04 	addi	r10,r10,-4
    6af8:	18000326 	beq	r3,zero,6b08 <__multiply+0x1c8>
    6afc:	00000506 	br	6b14 <__multiply+0x1d4>
    6b00:	50c00017 	ldw	r3,0(r10)
    6b04:	1800031e 	bne	r3,zero,6b14 <__multiply+0x1d4>
    6b08:	843fffc4 	addi	r16,r16,-1
    6b0c:	52bfff04 	addi	r10,r10,-4
    6b10:	803ffb1e 	bne	r16,zero,6b00 <__multiply+0x1c0>
    6b14:	14000415 	stw	r16,16(r2)
    6b18:	dfc00517 	ldw	ra,20(sp)
    6b1c:	dd000417 	ldw	r20,16(sp)
    6b20:	dcc00317 	ldw	r19,12(sp)
    6b24:	dc800217 	ldw	r18,8(sp)
    6b28:	dc400117 	ldw	r17,4(sp)
    6b2c:	dc000017 	ldw	r16,0(sp)
    6b30:	dec00604 	addi	sp,sp,24
    6b34:	f800283a 	ret

00006b38 <__pow5mult>:
    6b38:	defffa04 	addi	sp,sp,-24
    6b3c:	dcc00315 	stw	r19,12(sp)
    6b40:	dc000015 	stw	r16,0(sp)
    6b44:	dfc00515 	stw	ra,20(sp)
    6b48:	dd000415 	stw	r20,16(sp)
    6b4c:	dc800215 	stw	r18,8(sp)
    6b50:	dc400115 	stw	r17,4(sp)
    6b54:	308000cc 	andi	r2,r6,3
    6b58:	3021883a 	mov	r16,r6
    6b5c:	2027883a 	mov	r19,r4
    6b60:	10002f1e 	bne	r2,zero,6c20 <__pow5mult+0xe8>
    6b64:	2825883a 	mov	r18,r5
    6b68:	8021d0ba 	srai	r16,r16,2
    6b6c:	80001a26 	beq	r16,zero,6bd8 <__pow5mult+0xa0>
    6b70:	9c401217 	ldw	r17,72(r19)
    6b74:	8800061e 	bne	r17,zero,6b90 <__pow5mult+0x58>
    6b78:	00003406 	br	6c4c <__pow5mult+0x114>
    6b7c:	8021d07a 	srai	r16,r16,1
    6b80:	80001526 	beq	r16,zero,6bd8 <__pow5mult+0xa0>
    6b84:	88800017 	ldw	r2,0(r17)
    6b88:	10001c26 	beq	r2,zero,6bfc <__pow5mult+0xc4>
    6b8c:	1023883a 	mov	r17,r2
    6b90:	8080004c 	andi	r2,r16,1
    6b94:	103ff926 	beq	r2,zero,6b7c <__pow5mult+0x44>
    6b98:	880d883a 	mov	r6,r17
    6b9c:	900b883a 	mov	r5,r18
    6ba0:	9809883a 	mov	r4,r19
    6ba4:	00069400 	call	6940 <__multiply>
    6ba8:	90001b26 	beq	r18,zero,6c18 <__pow5mult+0xe0>
    6bac:	91000117 	ldw	r4,4(r18)
    6bb0:	98c01317 	ldw	r3,76(r19)
    6bb4:	8021d07a 	srai	r16,r16,1
    6bb8:	2109883a 	add	r4,r4,r4
    6bbc:	2109883a 	add	r4,r4,r4
    6bc0:	1907883a 	add	r3,r3,r4
    6bc4:	19000017 	ldw	r4,0(r3)
    6bc8:	91000015 	stw	r4,0(r18)
    6bcc:	1c800015 	stw	r18,0(r3)
    6bd0:	1025883a 	mov	r18,r2
    6bd4:	803feb1e 	bne	r16,zero,6b84 <__pow5mult+0x4c>
    6bd8:	9005883a 	mov	r2,r18
    6bdc:	dfc00517 	ldw	ra,20(sp)
    6be0:	dd000417 	ldw	r20,16(sp)
    6be4:	dcc00317 	ldw	r19,12(sp)
    6be8:	dc800217 	ldw	r18,8(sp)
    6bec:	dc400117 	ldw	r17,4(sp)
    6bf0:	dc000017 	ldw	r16,0(sp)
    6bf4:	dec00604 	addi	sp,sp,24
    6bf8:	f800283a 	ret
    6bfc:	880d883a 	mov	r6,r17
    6c00:	880b883a 	mov	r5,r17
    6c04:	9809883a 	mov	r4,r19
    6c08:	00069400 	call	6940 <__multiply>
    6c0c:	88800015 	stw	r2,0(r17)
    6c10:	10000015 	stw	zero,0(r2)
    6c14:	003fdd06 	br	6b8c <__pow5mult+0x54>
    6c18:	1025883a 	mov	r18,r2
    6c1c:	003fd706 	br	6b7c <__pow5mult+0x44>
    6c20:	10bfffc4 	addi	r2,r2,-1
    6c24:	1085883a 	add	r2,r2,r2
    6c28:	00c00074 	movhi	r3,1
    6c2c:	18c25304 	addi	r3,r3,2380
    6c30:	1085883a 	add	r2,r2,r2
    6c34:	1885883a 	add	r2,r3,r2
    6c38:	11800017 	ldw	r6,0(r2)
    6c3c:	000f883a 	mov	r7,zero
    6c40:	00065c80 	call	65c8 <__multadd>
    6c44:	1025883a 	mov	r18,r2
    6c48:	003fc706 	br	6b68 <__pow5mult+0x30>
    6c4c:	05000044 	movi	r20,1
    6c50:	a00b883a 	mov	r5,r20
    6c54:	9809883a 	mov	r4,r19
    6c58:	00064f80 	call	64f8 <_Balloc>
    6c5c:	1023883a 	mov	r17,r2
    6c60:	00809c44 	movi	r2,625
    6c64:	88800515 	stw	r2,20(r17)
    6c68:	8d000415 	stw	r20,16(r17)
    6c6c:	9c401215 	stw	r17,72(r19)
    6c70:	88000015 	stw	zero,0(r17)
    6c74:	003fc606 	br	6b90 <__pow5mult+0x58>

00006c78 <__lshift>:
    6c78:	defff904 	addi	sp,sp,-28
    6c7c:	dd400515 	stw	r21,20(sp)
    6c80:	dcc00315 	stw	r19,12(sp)
    6c84:	302bd17a 	srai	r21,r6,5
    6c88:	2cc00417 	ldw	r19,16(r5)
    6c8c:	28800217 	ldw	r2,8(r5)
    6c90:	dd000415 	stw	r20,16(sp)
    6c94:	ace7883a 	add	r19,r21,r19
    6c98:	dc800215 	stw	r18,8(sp)
    6c9c:	dc400115 	stw	r17,4(sp)
    6ca0:	dc000015 	stw	r16,0(sp)
    6ca4:	dfc00615 	stw	ra,24(sp)
    6ca8:	9c000044 	addi	r16,r19,1
    6cac:	2823883a 	mov	r17,r5
    6cb0:	3029883a 	mov	r20,r6
    6cb4:	2025883a 	mov	r18,r4
    6cb8:	29400117 	ldw	r5,4(r5)
    6cbc:	1400030e 	bge	r2,r16,6ccc <__lshift+0x54>
    6cc0:	1085883a 	add	r2,r2,r2
    6cc4:	29400044 	addi	r5,r5,1
    6cc8:	143ffd16 	blt	r2,r16,6cc0 <__lshift+0x48>
    6ccc:	9009883a 	mov	r4,r18
    6cd0:	00064f80 	call	64f8 <_Balloc>
    6cd4:	10c00504 	addi	r3,r2,20
    6cd8:	0540070e 	bge	zero,r21,6cf8 <__lshift+0x80>
    6cdc:	ad6b883a 	add	r21,r21,r21
    6ce0:	ad6b883a 	add	r21,r21,r21
    6ce4:	1809883a 	mov	r4,r3
    6ce8:	1d47883a 	add	r3,r3,r21
    6cec:	20000015 	stw	zero,0(r4)
    6cf0:	21000104 	addi	r4,r4,4
    6cf4:	193ffd1e 	bne	r3,r4,6cec <__lshift+0x74>
    6cf8:	8a000417 	ldw	r8,16(r17)
    6cfc:	89000504 	addi	r4,r17,20
    6d00:	a18007cc 	andi	r6,r20,31
    6d04:	4211883a 	add	r8,r8,r8
    6d08:	4211883a 	add	r8,r8,r8
    6d0c:	2211883a 	add	r8,r4,r8
    6d10:	30002326 	beq	r6,zero,6da0 <__lshift+0x128>
    6d14:	02400804 	movi	r9,32
    6d18:	4993c83a 	sub	r9,r9,r6
    6d1c:	000b883a 	mov	r5,zero
    6d20:	21c00017 	ldw	r7,0(r4)
    6d24:	1815883a 	mov	r10,r3
    6d28:	18c00104 	addi	r3,r3,4
    6d2c:	398e983a 	sll	r7,r7,r6
    6d30:	21000104 	addi	r4,r4,4
    6d34:	394ab03a 	or	r5,r7,r5
    6d38:	197fff15 	stw	r5,-4(r3)
    6d3c:	217fff17 	ldw	r5,-4(r4)
    6d40:	2a4ad83a 	srl	r5,r5,r9
    6d44:	223ff636 	bltu	r4,r8,6d20 <__lshift+0xa8>
    6d48:	51400115 	stw	r5,4(r10)
    6d4c:	28001a1e 	bne	r5,zero,6db8 <__lshift+0x140>
    6d50:	843fffc4 	addi	r16,r16,-1
    6d54:	14000415 	stw	r16,16(r2)
    6d58:	88000826 	beq	r17,zero,6d7c <__lshift+0x104>
    6d5c:	89000117 	ldw	r4,4(r17)
    6d60:	90c01317 	ldw	r3,76(r18)
    6d64:	2109883a 	add	r4,r4,r4
    6d68:	2109883a 	add	r4,r4,r4
    6d6c:	1907883a 	add	r3,r3,r4
    6d70:	19000017 	ldw	r4,0(r3)
    6d74:	89000015 	stw	r4,0(r17)
    6d78:	1c400015 	stw	r17,0(r3)
    6d7c:	dfc00617 	ldw	ra,24(sp)
    6d80:	dd400517 	ldw	r21,20(sp)
    6d84:	dd000417 	ldw	r20,16(sp)
    6d88:	dcc00317 	ldw	r19,12(sp)
    6d8c:	dc800217 	ldw	r18,8(sp)
    6d90:	dc400117 	ldw	r17,4(sp)
    6d94:	dc000017 	ldw	r16,0(sp)
    6d98:	dec00704 	addi	sp,sp,28
    6d9c:	f800283a 	ret
    6da0:	21400017 	ldw	r5,0(r4)
    6da4:	18c00104 	addi	r3,r3,4
    6da8:	21000104 	addi	r4,r4,4
    6dac:	197fff15 	stw	r5,-4(r3)
    6db0:	223ffb36 	bltu	r4,r8,6da0 <__lshift+0x128>
    6db4:	003fe606 	br	6d50 <__lshift+0xd8>
    6db8:	9c000084 	addi	r16,r19,2
    6dbc:	003fe406 	br	6d50 <__lshift+0xd8>

00006dc0 <__mcmp>:
    6dc0:	20800417 	ldw	r2,16(r4)
    6dc4:	28c00417 	ldw	r3,16(r5)
    6dc8:	10c5c83a 	sub	r2,r2,r3
    6dcc:	1000111e 	bne	r2,zero,6e14 <__mcmp+0x54>
    6dd0:	18c7883a 	add	r3,r3,r3
    6dd4:	18c7883a 	add	r3,r3,r3
    6dd8:	21000504 	addi	r4,r4,20
    6ddc:	29400504 	addi	r5,r5,20
    6de0:	20c5883a 	add	r2,r4,r3
    6de4:	28cb883a 	add	r5,r5,r3
    6de8:	00000106 	br	6df0 <__mcmp+0x30>
    6dec:	20800a2e 	bgeu	r4,r2,6e18 <__mcmp+0x58>
    6df0:	10bfff04 	addi	r2,r2,-4
    6df4:	297fff04 	addi	r5,r5,-4
    6df8:	11800017 	ldw	r6,0(r2)
    6dfc:	28c00017 	ldw	r3,0(r5)
    6e00:	30fffa26 	beq	r6,r3,6dec <__mcmp+0x2c>
    6e04:	30c00236 	bltu	r6,r3,6e10 <__mcmp+0x50>
    6e08:	00800044 	movi	r2,1
    6e0c:	f800283a 	ret
    6e10:	00bfffc4 	movi	r2,-1
    6e14:	f800283a 	ret
    6e18:	0005883a 	mov	r2,zero
    6e1c:	f800283a 	ret

00006e20 <__mdiff>:
    6e20:	28c00417 	ldw	r3,16(r5)
    6e24:	30800417 	ldw	r2,16(r6)
    6e28:	defffa04 	addi	sp,sp,-24
    6e2c:	dcc00315 	stw	r19,12(sp)
    6e30:	dc800215 	stw	r18,8(sp)
    6e34:	dfc00515 	stw	ra,20(sp)
    6e38:	dd000415 	stw	r20,16(sp)
    6e3c:	dc400115 	stw	r17,4(sp)
    6e40:	dc000015 	stw	r16,0(sp)
    6e44:	1887c83a 	sub	r3,r3,r2
    6e48:	2825883a 	mov	r18,r5
    6e4c:	3027883a 	mov	r19,r6
    6e50:	1800141e 	bne	r3,zero,6ea4 <__mdiff+0x84>
    6e54:	1085883a 	add	r2,r2,r2
    6e58:	1085883a 	add	r2,r2,r2
    6e5c:	2a000504 	addi	r8,r5,20
    6e60:	34000504 	addi	r16,r6,20
    6e64:	4087883a 	add	r3,r8,r2
    6e68:	8085883a 	add	r2,r16,r2
    6e6c:	00000106 	br	6e74 <__mdiff+0x54>
    6e70:	40c0592e 	bgeu	r8,r3,6fd8 <__mdiff+0x1b8>
    6e74:	18ffff04 	addi	r3,r3,-4
    6e78:	10bfff04 	addi	r2,r2,-4
    6e7c:	19c00017 	ldw	r7,0(r3)
    6e80:	11400017 	ldw	r5,0(r2)
    6e84:	397ffa26 	beq	r7,r5,6e70 <__mdiff+0x50>
    6e88:	3940592e 	bgeu	r7,r5,6ff0 <__mdiff+0x1d0>
    6e8c:	9005883a 	mov	r2,r18
    6e90:	4023883a 	mov	r17,r8
    6e94:	9825883a 	mov	r18,r19
    6e98:	05000044 	movi	r20,1
    6e9c:	1027883a 	mov	r19,r2
    6ea0:	00000406 	br	6eb4 <__mdiff+0x94>
    6ea4:	18005616 	blt	r3,zero,7000 <__mdiff+0x1e0>
    6ea8:	34400504 	addi	r17,r6,20
    6eac:	2c000504 	addi	r16,r5,20
    6eb0:	0029883a 	mov	r20,zero
    6eb4:	91400117 	ldw	r5,4(r18)
    6eb8:	00064f80 	call	64f8 <_Balloc>
    6ebc:	92400417 	ldw	r9,16(r18)
    6ec0:	9b000417 	ldw	r12,16(r19)
    6ec4:	12c00504 	addi	r11,r2,20
    6ec8:	4a51883a 	add	r8,r9,r9
    6ecc:	6319883a 	add	r12,r12,r12
    6ed0:	4211883a 	add	r8,r8,r8
    6ed4:	6319883a 	add	r12,r12,r12
    6ed8:	15000315 	stw	r20,12(r2)
    6edc:	8211883a 	add	r8,r16,r8
    6ee0:	8b19883a 	add	r12,r17,r12
    6ee4:	0007883a 	mov	r3,zero
    6ee8:	81400017 	ldw	r5,0(r16)
    6eec:	89c00017 	ldw	r7,0(r17)
    6ef0:	59800104 	addi	r6,r11,4
    6ef4:	293fffcc 	andi	r4,r5,65535
    6ef8:	20c7883a 	add	r3,r4,r3
    6efc:	393fffcc 	andi	r4,r7,65535
    6f00:	1909c83a 	sub	r4,r3,r4
    6f04:	280ad43a 	srli	r5,r5,16
    6f08:	380ed43a 	srli	r7,r7,16
    6f0c:	2007d43a 	srai	r3,r4,16
    6f10:	213fffcc 	andi	r4,r4,65535
    6f14:	29cbc83a 	sub	r5,r5,r7
    6f18:	28c7883a 	add	r3,r5,r3
    6f1c:	180a943a 	slli	r5,r3,16
    6f20:	8c400104 	addi	r17,r17,4
    6f24:	84000104 	addi	r16,r16,4
    6f28:	2908b03a 	or	r4,r5,r4
    6f2c:	59000015 	stw	r4,0(r11)
    6f30:	1807d43a 	srai	r3,r3,16
    6f34:	3015883a 	mov	r10,r6
    6f38:	3017883a 	mov	r11,r6
    6f3c:	8b3fea36 	bltu	r17,r12,6ee8 <__mdiff+0xc8>
    6f40:	8200162e 	bgeu	r16,r8,6f9c <__mdiff+0x17c>
    6f44:	8017883a 	mov	r11,r16
    6f48:	59400017 	ldw	r5,0(r11)
    6f4c:	31800104 	addi	r6,r6,4
    6f50:	5ac00104 	addi	r11,r11,4
    6f54:	293fffcc 	andi	r4,r5,65535
    6f58:	20c7883a 	add	r3,r4,r3
    6f5c:	280ed43a 	srli	r7,r5,16
    6f60:	180bd43a 	srai	r5,r3,16
    6f64:	193fffcc 	andi	r4,r3,65535
    6f68:	3947883a 	add	r3,r7,r5
    6f6c:	180a943a 	slli	r5,r3,16
    6f70:	1807d43a 	srai	r3,r3,16
    6f74:	2908b03a 	or	r4,r5,r4
    6f78:	313fff15 	stw	r4,-4(r6)
    6f7c:	5a3ff236 	bltu	r11,r8,6f48 <__mdiff+0x128>
    6f80:	0406303a 	nor	r3,zero,r16
    6f84:	1a07883a 	add	r3,r3,r8
    6f88:	1806d0ba 	srli	r3,r3,2
    6f8c:	18c00044 	addi	r3,r3,1
    6f90:	18c7883a 	add	r3,r3,r3
    6f94:	18c7883a 	add	r3,r3,r3
    6f98:	50d5883a 	add	r10,r10,r3
    6f9c:	50ffff04 	addi	r3,r10,-4
    6fa0:	2000041e 	bne	r4,zero,6fb4 <__mdiff+0x194>
    6fa4:	18ffff04 	addi	r3,r3,-4
    6fa8:	19000017 	ldw	r4,0(r3)
    6fac:	4a7fffc4 	addi	r9,r9,-1
    6fb0:	203ffc26 	beq	r4,zero,6fa4 <__mdiff+0x184>
    6fb4:	12400415 	stw	r9,16(r2)
    6fb8:	dfc00517 	ldw	ra,20(sp)
    6fbc:	dd000417 	ldw	r20,16(sp)
    6fc0:	dcc00317 	ldw	r19,12(sp)
    6fc4:	dc800217 	ldw	r18,8(sp)
    6fc8:	dc400117 	ldw	r17,4(sp)
    6fcc:	dc000017 	ldw	r16,0(sp)
    6fd0:	dec00604 	addi	sp,sp,24
    6fd4:	f800283a 	ret
    6fd8:	000b883a 	mov	r5,zero
    6fdc:	00064f80 	call	64f8 <_Balloc>
    6fe0:	00c00044 	movi	r3,1
    6fe4:	10c00415 	stw	r3,16(r2)
    6fe8:	10000515 	stw	zero,20(r2)
    6fec:	003ff206 	br	6fb8 <__mdiff+0x198>
    6ff0:	8023883a 	mov	r17,r16
    6ff4:	0029883a 	mov	r20,zero
    6ff8:	4021883a 	mov	r16,r8
    6ffc:	003fad06 	br	6eb4 <__mdiff+0x94>
    7000:	9005883a 	mov	r2,r18
    7004:	94400504 	addi	r17,r18,20
    7008:	9c000504 	addi	r16,r19,20
    700c:	9825883a 	mov	r18,r19
    7010:	05000044 	movi	r20,1
    7014:	1027883a 	mov	r19,r2
    7018:	003fa606 	br	6eb4 <__mdiff+0x94>

0000701c <__ulp>:
    701c:	295ffc2c 	andhi	r5,r5,32752
    7020:	00bf3034 	movhi	r2,64704
    7024:	2887883a 	add	r3,r5,r2
    7028:	00c0020e 	bge	zero,r3,7034 <__ulp+0x18>
    702c:	0005883a 	mov	r2,zero
    7030:	f800283a 	ret
    7034:	00c7c83a 	sub	r3,zero,r3
    7038:	1807d53a 	srai	r3,r3,20
    703c:	008004c4 	movi	r2,19
    7040:	10c00b0e 	bge	r2,r3,7070 <__ulp+0x54>
    7044:	18bffb04 	addi	r2,r3,-20
    7048:	01000784 	movi	r4,30
    704c:	0007883a 	mov	r3,zero
    7050:	20800516 	blt	r4,r2,7068 <__ulp+0x4c>
    7054:	010007c4 	movi	r4,31
    7058:	2089c83a 	sub	r4,r4,r2
    705c:	00800044 	movi	r2,1
    7060:	1104983a 	sll	r2,r2,r4
    7064:	f800283a 	ret
    7068:	00800044 	movi	r2,1
    706c:	f800283a 	ret
    7070:	01400234 	movhi	r5,8
    7074:	28c7d83a 	sra	r3,r5,r3
    7078:	0005883a 	mov	r2,zero
    707c:	f800283a 	ret

00007080 <__b2d>:
    7080:	defffa04 	addi	sp,sp,-24
    7084:	dc000015 	stw	r16,0(sp)
    7088:	24000417 	ldw	r16,16(r4)
    708c:	dc400115 	stw	r17,4(sp)
    7090:	24400504 	addi	r17,r4,20
    7094:	8421883a 	add	r16,r16,r16
    7098:	8421883a 	add	r16,r16,r16
    709c:	8c21883a 	add	r16,r17,r16
    70a0:	dc800215 	stw	r18,8(sp)
    70a4:	84bfff17 	ldw	r18,-4(r16)
    70a8:	dd000415 	stw	r20,16(sp)
    70ac:	dcc00315 	stw	r19,12(sp)
    70b0:	9009883a 	mov	r4,r18
    70b4:	2829883a 	mov	r20,r5
    70b8:	dfc00515 	stw	ra,20(sp)
    70bc:	00067ec0 	call	67ec <__hi0bits>
    70c0:	00c00804 	movi	r3,32
    70c4:	1889c83a 	sub	r4,r3,r2
    70c8:	a1000015 	stw	r4,0(r20)
    70cc:	01000284 	movi	r4,10
    70d0:	84ffff04 	addi	r19,r16,-4
    70d4:	20801216 	blt	r4,r2,7120 <__b2d+0xa0>
    70d8:	018002c4 	movi	r6,11
    70dc:	308dc83a 	sub	r6,r6,r2
    70e0:	9186d83a 	srl	r3,r18,r6
    70e4:	18cffc34 	orhi	r3,r3,16368
    70e8:	8cc0212e 	bgeu	r17,r19,7170 <__b2d+0xf0>
    70ec:	813ffe17 	ldw	r4,-8(r16)
    70f0:	218cd83a 	srl	r6,r4,r6
    70f4:	10800544 	addi	r2,r2,21
    70f8:	9084983a 	sll	r2,r18,r2
    70fc:	1184b03a 	or	r2,r2,r6
    7100:	dfc00517 	ldw	ra,20(sp)
    7104:	dd000417 	ldw	r20,16(sp)
    7108:	dcc00317 	ldw	r19,12(sp)
    710c:	dc800217 	ldw	r18,8(sp)
    7110:	dc400117 	ldw	r17,4(sp)
    7114:	dc000017 	ldw	r16,0(sp)
    7118:	dec00604 	addi	sp,sp,24
    711c:	f800283a 	ret
    7120:	8cc00f2e 	bgeu	r17,r19,7160 <__b2d+0xe0>
    7124:	117ffd44 	addi	r5,r2,-11
    7128:	80bffe17 	ldw	r2,-8(r16)
    712c:	28000e26 	beq	r5,zero,7168 <__b2d+0xe8>
    7130:	1949c83a 	sub	r4,r3,r5
    7134:	9164983a 	sll	r18,r18,r5
    7138:	1106d83a 	srl	r3,r2,r4
    713c:	81bffe04 	addi	r6,r16,-8
    7140:	948ffc34 	orhi	r18,r18,16368
    7144:	90c6b03a 	or	r3,r18,r3
    7148:	89800e2e 	bgeu	r17,r6,7184 <__b2d+0x104>
    714c:	81bffd17 	ldw	r6,-12(r16)
    7150:	1144983a 	sll	r2,r2,r5
    7154:	310ad83a 	srl	r5,r6,r4
    7158:	2884b03a 	or	r2,r5,r2
    715c:	003fe806 	br	7100 <__b2d+0x80>
    7160:	10bffd44 	addi	r2,r2,-11
    7164:	1000041e 	bne	r2,zero,7178 <__b2d+0xf8>
    7168:	90cffc34 	orhi	r3,r18,16368
    716c:	003fe406 	br	7100 <__b2d+0x80>
    7170:	000d883a 	mov	r6,zero
    7174:	003fdf06 	br	70f4 <__b2d+0x74>
    7178:	90a4983a 	sll	r18,r18,r2
    717c:	0005883a 	mov	r2,zero
    7180:	003ff906 	br	7168 <__b2d+0xe8>
    7184:	1144983a 	sll	r2,r2,r5
    7188:	003fdd06 	br	7100 <__b2d+0x80>

0000718c <__d2b>:
    718c:	defff804 	addi	sp,sp,-32
    7190:	dc000215 	stw	r16,8(sp)
    7194:	3021883a 	mov	r16,r6
    7198:	dc400315 	stw	r17,12(sp)
    719c:	8022907a 	slli	r17,r16,1
    71a0:	dd000615 	stw	r20,24(sp)
    71a4:	2829883a 	mov	r20,r5
    71a8:	01400044 	movi	r5,1
    71ac:	dcc00515 	stw	r19,20(sp)
    71b0:	dc800415 	stw	r18,16(sp)
    71b4:	dfc00715 	stw	ra,28(sp)
    71b8:	3825883a 	mov	r18,r7
    71bc:	8822d57a 	srli	r17,r17,21
    71c0:	00064f80 	call	64f8 <_Balloc>
    71c4:	1027883a 	mov	r19,r2
    71c8:	00800434 	movhi	r2,16
    71cc:	10bfffc4 	addi	r2,r2,-1
    71d0:	808c703a 	and	r6,r16,r2
    71d4:	88000126 	beq	r17,zero,71dc <__d2b+0x50>
    71d8:	31800434 	orhi	r6,r6,16
    71dc:	d9800015 	stw	r6,0(sp)
    71e0:	a0002426 	beq	r20,zero,7274 <__d2b+0xe8>
    71e4:	d9000104 	addi	r4,sp,4
    71e8:	dd000115 	stw	r20,4(sp)
    71ec:	00068540 	call	6854 <__lo0bits>
    71f0:	d8c00017 	ldw	r3,0(sp)
    71f4:	10002f1e 	bne	r2,zero,72b4 <__d2b+0x128>
    71f8:	d9000117 	ldw	r4,4(sp)
    71fc:	99000515 	stw	r4,20(r19)
    7200:	1821003a 	cmpeq	r16,r3,zero
    7204:	01000084 	movi	r4,2
    7208:	2421c83a 	sub	r16,r4,r16
    720c:	98c00615 	stw	r3,24(r19)
    7210:	9c000415 	stw	r16,16(r19)
    7214:	88001f1e 	bne	r17,zero,7294 <__d2b+0x108>
    7218:	10bef384 	addi	r2,r2,-1074
    721c:	90800015 	stw	r2,0(r18)
    7220:	00900034 	movhi	r2,16384
    7224:	10bfffc4 	addi	r2,r2,-1
    7228:	8085883a 	add	r2,r16,r2
    722c:	1085883a 	add	r2,r2,r2
    7230:	1085883a 	add	r2,r2,r2
    7234:	9885883a 	add	r2,r19,r2
    7238:	11000517 	ldw	r4,20(r2)
    723c:	8020917a 	slli	r16,r16,5
    7240:	00067ec0 	call	67ec <__hi0bits>
    7244:	d8c00817 	ldw	r3,32(sp)
    7248:	8085c83a 	sub	r2,r16,r2
    724c:	18800015 	stw	r2,0(r3)
    7250:	9805883a 	mov	r2,r19
    7254:	dfc00717 	ldw	ra,28(sp)
    7258:	dd000617 	ldw	r20,24(sp)
    725c:	dcc00517 	ldw	r19,20(sp)
    7260:	dc800417 	ldw	r18,16(sp)
    7264:	dc400317 	ldw	r17,12(sp)
    7268:	dc000217 	ldw	r16,8(sp)
    726c:	dec00804 	addi	sp,sp,32
    7270:	f800283a 	ret
    7274:	d809883a 	mov	r4,sp
    7278:	00068540 	call	6854 <__lo0bits>
    727c:	d8c00017 	ldw	r3,0(sp)
    7280:	04000044 	movi	r16,1
    7284:	9c000415 	stw	r16,16(r19)
    7288:	98c00515 	stw	r3,20(r19)
    728c:	10800804 	addi	r2,r2,32
    7290:	883fe126 	beq	r17,zero,7218 <__d2b+0x8c>
    7294:	00c00d44 	movi	r3,53
    7298:	8c7ef344 	addi	r17,r17,-1075
    729c:	88a3883a 	add	r17,r17,r2
    72a0:	1885c83a 	sub	r2,r3,r2
    72a4:	d8c00817 	ldw	r3,32(sp)
    72a8:	94400015 	stw	r17,0(r18)
    72ac:	18800015 	stw	r2,0(r3)
    72b0:	003fe706 	br	7250 <__d2b+0xc4>
    72b4:	01000804 	movi	r4,32
    72b8:	2089c83a 	sub	r4,r4,r2
    72bc:	1908983a 	sll	r4,r3,r4
    72c0:	d9400117 	ldw	r5,4(sp)
    72c4:	1886d83a 	srl	r3,r3,r2
    72c8:	2148b03a 	or	r4,r4,r5
    72cc:	99000515 	stw	r4,20(r19)
    72d0:	d8c00015 	stw	r3,0(sp)
    72d4:	003fca06 	br	7200 <__d2b+0x74>

000072d8 <__ratio>:
    72d8:	defff904 	addi	sp,sp,-28
    72dc:	dc400315 	stw	r17,12(sp)
    72e0:	2823883a 	mov	r17,r5
    72e4:	d9400104 	addi	r5,sp,4
    72e8:	dfc00615 	stw	ra,24(sp)
    72ec:	dcc00515 	stw	r19,20(sp)
    72f0:	dc800415 	stw	r18,16(sp)
    72f4:	2027883a 	mov	r19,r4
    72f8:	dc000215 	stw	r16,8(sp)
    72fc:	00070800 	call	7080 <__b2d>
    7300:	d80b883a 	mov	r5,sp
    7304:	8809883a 	mov	r4,r17
    7308:	1025883a 	mov	r18,r2
    730c:	1821883a 	mov	r16,r3
    7310:	00070800 	call	7080 <__b2d>
    7314:	8a000417 	ldw	r8,16(r17)
    7318:	99000417 	ldw	r4,16(r19)
    731c:	d9400117 	ldw	r5,4(sp)
    7320:	2209c83a 	sub	r4,r4,r8
    7324:	2010917a 	slli	r8,r4,5
    7328:	d9000017 	ldw	r4,0(sp)
    732c:	2909c83a 	sub	r4,r5,r4
    7330:	4109883a 	add	r4,r8,r4
    7334:	01000e0e 	bge	zero,r4,7370 <__ratio+0x98>
    7338:	2008953a 	slli	r4,r4,20
    733c:	2421883a 	add	r16,r4,r16
    7340:	100d883a 	mov	r6,r2
    7344:	180f883a 	mov	r7,r3
    7348:	9009883a 	mov	r4,r18
    734c:	800b883a 	mov	r5,r16
    7350:	000b0100 	call	b010 <__divdf3>
    7354:	dfc00617 	ldw	ra,24(sp)
    7358:	dcc00517 	ldw	r19,20(sp)
    735c:	dc800417 	ldw	r18,16(sp)
    7360:	dc400317 	ldw	r17,12(sp)
    7364:	dc000217 	ldw	r16,8(sp)
    7368:	dec00704 	addi	sp,sp,28
    736c:	f800283a 	ret
    7370:	2008953a 	slli	r4,r4,20
    7374:	1907c83a 	sub	r3,r3,r4
    7378:	003ff106 	br	7340 <__ratio+0x68>

0000737c <_mprec_log10>:
    737c:	defffe04 	addi	sp,sp,-8
    7380:	dc000015 	stw	r16,0(sp)
    7384:	dfc00115 	stw	ra,4(sp)
    7388:	008005c4 	movi	r2,23
    738c:	2021883a 	mov	r16,r4
    7390:	11000d0e 	bge	r2,r4,73c8 <_mprec_log10+0x4c>
    7394:	0005883a 	mov	r2,zero
    7398:	00cffc34 	movhi	r3,16368
    739c:	843fffc4 	addi	r16,r16,-1
    73a0:	000d883a 	mov	r6,zero
    73a4:	01d00934 	movhi	r7,16420
    73a8:	1009883a 	mov	r4,r2
    73ac:	180b883a 	mov	r5,r3
    73b0:	000bb500 	call	bb50 <__muldf3>
    73b4:	803ff91e 	bne	r16,zero,739c <_mprec_log10+0x20>
    73b8:	dfc00117 	ldw	ra,4(sp)
    73bc:	dc000017 	ldw	r16,0(sp)
    73c0:	dec00204 	addi	sp,sp,8
    73c4:	f800283a 	ret
    73c8:	202090fa 	slli	r16,r4,3
    73cc:	00800074 	movhi	r2,1
    73d0:	10826a04 	addi	r2,r2,2472
    73d4:	1421883a 	add	r16,r2,r16
    73d8:	80800017 	ldw	r2,0(r16)
    73dc:	80c00117 	ldw	r3,4(r16)
    73e0:	dfc00117 	ldw	ra,4(sp)
    73e4:	dc000017 	ldw	r16,0(sp)
    73e8:	dec00204 	addi	sp,sp,8
    73ec:	f800283a 	ret

000073f0 <__copybits>:
    73f0:	297fffc4 	addi	r5,r5,-1
    73f4:	280fd17a 	srai	r7,r5,5
    73f8:	30c00417 	ldw	r3,16(r6)
    73fc:	30800504 	addi	r2,r6,20
    7400:	39c00044 	addi	r7,r7,1
    7404:	18c7883a 	add	r3,r3,r3
    7408:	39cf883a 	add	r7,r7,r7
    740c:	18c7883a 	add	r3,r3,r3
    7410:	39cf883a 	add	r7,r7,r7
    7414:	10c7883a 	add	r3,r2,r3
    7418:	21cf883a 	add	r7,r4,r7
    741c:	10c00d2e 	bgeu	r2,r3,7454 <__copybits+0x64>
    7420:	200b883a 	mov	r5,r4
    7424:	12000017 	ldw	r8,0(r2)
    7428:	29400104 	addi	r5,r5,4
    742c:	10800104 	addi	r2,r2,4
    7430:	2a3fff15 	stw	r8,-4(r5)
    7434:	10fffb36 	bltu	r2,r3,7424 <__copybits+0x34>
    7438:	1985c83a 	sub	r2,r3,r6
    743c:	10bffac4 	addi	r2,r2,-21
    7440:	1004d0ba 	srli	r2,r2,2
    7444:	10800044 	addi	r2,r2,1
    7448:	1085883a 	add	r2,r2,r2
    744c:	1085883a 	add	r2,r2,r2
    7450:	2089883a 	add	r4,r4,r2
    7454:	21c0032e 	bgeu	r4,r7,7464 <__copybits+0x74>
    7458:	20000015 	stw	zero,0(r4)
    745c:	21000104 	addi	r4,r4,4
    7460:	21fffd36 	bltu	r4,r7,7458 <__copybits+0x68>
    7464:	f800283a 	ret

00007468 <__any_on>:
    7468:	20c00417 	ldw	r3,16(r4)
    746c:	2805d17a 	srai	r2,r5,5
    7470:	21000504 	addi	r4,r4,20
    7474:	18800d0e 	bge	r3,r2,74ac <__any_on+0x44>
    7478:	18c7883a 	add	r3,r3,r3
    747c:	18c7883a 	add	r3,r3,r3
    7480:	20c7883a 	add	r3,r4,r3
    7484:	20c0192e 	bgeu	r4,r3,74ec <__any_on+0x84>
    7488:	18bfff17 	ldw	r2,-4(r3)
    748c:	18ffff04 	addi	r3,r3,-4
    7490:	1000041e 	bne	r2,zero,74a4 <__any_on+0x3c>
    7494:	20c0142e 	bgeu	r4,r3,74e8 <__any_on+0x80>
    7498:	18ffff04 	addi	r3,r3,-4
    749c:	19400017 	ldw	r5,0(r3)
    74a0:	283ffc26 	beq	r5,zero,7494 <__any_on+0x2c>
    74a4:	00800044 	movi	r2,1
    74a8:	f800283a 	ret
    74ac:	10c00a0e 	bge	r2,r3,74d8 <__any_on+0x70>
    74b0:	1085883a 	add	r2,r2,r2
    74b4:	1085883a 	add	r2,r2,r2
    74b8:	294007cc 	andi	r5,r5,31
    74bc:	2087883a 	add	r3,r4,r2
    74c0:	283ff026 	beq	r5,zero,7484 <__any_on+0x1c>
    74c4:	19800017 	ldw	r6,0(r3)
    74c8:	3144d83a 	srl	r2,r6,r5
    74cc:	114a983a 	sll	r5,r2,r5
    74d0:	317ff41e 	bne	r6,r5,74a4 <__any_on+0x3c>
    74d4:	003feb06 	br	7484 <__any_on+0x1c>
    74d8:	1085883a 	add	r2,r2,r2
    74dc:	1085883a 	add	r2,r2,r2
    74e0:	2087883a 	add	r3,r4,r2
    74e4:	003fe706 	br	7484 <__any_on+0x1c>
    74e8:	f800283a 	ret
    74ec:	0005883a 	mov	r2,zero
    74f0:	f800283a 	ret

000074f4 <_realloc_r>:
    74f4:	defff604 	addi	sp,sp,-40
    74f8:	dc400115 	stw	r17,4(sp)
    74fc:	dfc00915 	stw	ra,36(sp)
    7500:	df000815 	stw	fp,32(sp)
    7504:	ddc00715 	stw	r23,28(sp)
    7508:	dd800615 	stw	r22,24(sp)
    750c:	dd400515 	stw	r21,20(sp)
    7510:	dd000415 	stw	r20,16(sp)
    7514:	dcc00315 	stw	r19,12(sp)
    7518:	dc800215 	stw	r18,8(sp)
    751c:	dc000015 	stw	r16,0(sp)
    7520:	3023883a 	mov	r17,r6
    7524:	2800b626 	beq	r5,zero,7800 <_realloc_r+0x30c>
    7528:	2829883a 	mov	r20,r5
    752c:	2025883a 	mov	r18,r4
    7530:	000d5700 	call	d570 <__malloc_lock>
    7534:	a0ffff17 	ldw	r3,-4(r20)
    7538:	043fff04 	movi	r16,-4
    753c:	888002c4 	addi	r2,r17,11
    7540:	01000584 	movi	r4,22
    7544:	a57ffe04 	addi	r21,r20,-8
    7548:	1c20703a 	and	r16,r3,r16
    754c:	2080332e 	bgeu	r4,r2,761c <_realloc_r+0x128>
    7550:	05bffe04 	movi	r22,-8
    7554:	15ac703a 	and	r22,r2,r22
    7558:	b005883a 	mov	r2,r22
    755c:	b0005716 	blt	r22,zero,76bc <_realloc_r+0x1c8>
    7560:	b4405636 	bltu	r22,r17,76bc <_realloc_r+0x1c8>
    7564:	8080300e 	bge	r16,r2,7628 <_realloc_r+0x134>
    7568:	07000074 	movhi	fp,1
    756c:	e7041d04 	addi	fp,fp,4212
    7570:	e2000217 	ldw	r8,8(fp)
    7574:	ac09883a 	add	r4,r21,r16
    7578:	22006126 	beq	r4,r8,7700 <_realloc_r+0x20c>
    757c:	22400117 	ldw	r9,4(r4)
    7580:	01ffff84 	movi	r7,-2
    7584:	49ce703a 	and	r7,r9,r7
    7588:	21cf883a 	add	r7,r4,r7
    758c:	39800117 	ldw	r6,4(r7)
    7590:	3180004c 	andi	r6,r6,1
    7594:	30003e26 	beq	r6,zero,7690 <_realloc_r+0x19c>
    7598:	18c0004c 	andi	r3,r3,1
    759c:	18008126 	beq	r3,zero,77a4 <_realloc_r+0x2b0>
    75a0:	880b883a 	mov	r5,r17
    75a4:	9009883a 	mov	r4,r18
    75a8:	000583c0 	call	583c <_malloc_r>
    75ac:	1023883a 	mov	r17,r2
    75b0:	10011e26 	beq	r2,zero,7a2c <_realloc_r+0x538>
    75b4:	a0ffff17 	ldw	r3,-4(r20)
    75b8:	113ffe04 	addi	r4,r2,-8
    75bc:	00bfff84 	movi	r2,-2
    75c0:	1884703a 	and	r2,r3,r2
    75c4:	a885883a 	add	r2,r21,r2
    75c8:	2080ee26 	beq	r4,r2,7984 <_realloc_r+0x490>
    75cc:	81bfff04 	addi	r6,r16,-4
    75d0:	00800904 	movi	r2,36
    75d4:	1180b836 	bltu	r2,r6,78b8 <_realloc_r+0x3c4>
    75d8:	00c004c4 	movi	r3,19
    75dc:	19809536 	bltu	r3,r6,7834 <_realloc_r+0x340>
    75e0:	8805883a 	mov	r2,r17
    75e4:	a007883a 	mov	r3,r20
    75e8:	19000017 	ldw	r4,0(r3)
    75ec:	11000015 	stw	r4,0(r2)
    75f0:	19000117 	ldw	r4,4(r3)
    75f4:	11000115 	stw	r4,4(r2)
    75f8:	18c00217 	ldw	r3,8(r3)
    75fc:	10c00215 	stw	r3,8(r2)
    7600:	a00b883a 	mov	r5,r20
    7604:	9009883a 	mov	r4,r18
    7608:	0004c500 	call	4c50 <_free_r>
    760c:	9009883a 	mov	r4,r18
    7610:	000d5940 	call	d594 <__malloc_unlock>
    7614:	8805883a 	mov	r2,r17
    7618:	00001106 	br	7660 <_realloc_r+0x16c>
    761c:	00800404 	movi	r2,16
    7620:	102d883a 	mov	r22,r2
    7624:	003fce06 	br	7560 <_realloc_r+0x6c>
    7628:	a023883a 	mov	r17,r20
    762c:	858fc83a 	sub	r7,r16,r22
    7630:	008003c4 	movi	r2,15
    7634:	18c0004c 	andi	r3,r3,1
    7638:	11c02436 	bltu	r2,r7,76cc <_realloc_r+0x1d8>
    763c:	1c06b03a 	or	r3,r3,r16
    7640:	a8c00115 	stw	r3,4(r21)
    7644:	ac21883a 	add	r16,r21,r16
    7648:	80800117 	ldw	r2,4(r16)
    764c:	10800054 	ori	r2,r2,1
    7650:	80800115 	stw	r2,4(r16)
    7654:	9009883a 	mov	r4,r18
    7658:	000d5940 	call	d594 <__malloc_unlock>
    765c:	8805883a 	mov	r2,r17
    7660:	dfc00917 	ldw	ra,36(sp)
    7664:	df000817 	ldw	fp,32(sp)
    7668:	ddc00717 	ldw	r23,28(sp)
    766c:	dd800617 	ldw	r22,24(sp)
    7670:	dd400517 	ldw	r21,20(sp)
    7674:	dd000417 	ldw	r20,16(sp)
    7678:	dcc00317 	ldw	r19,12(sp)
    767c:	dc800217 	ldw	r18,8(sp)
    7680:	dc400117 	ldw	r17,4(sp)
    7684:	dc000017 	ldw	r16,0(sp)
    7688:	dec00a04 	addi	sp,sp,40
    768c:	f800283a 	ret
    7690:	017fff04 	movi	r5,-4
    7694:	494a703a 	and	r5,r9,r5
    7698:	814d883a 	add	r6,r16,r5
    769c:	30801e16 	blt	r6,r2,7718 <_realloc_r+0x224>
    76a0:	20800317 	ldw	r2,12(r4)
    76a4:	21000217 	ldw	r4,8(r4)
    76a8:	a023883a 	mov	r17,r20
    76ac:	3021883a 	mov	r16,r6
    76b0:	20800315 	stw	r2,12(r4)
    76b4:	11000215 	stw	r4,8(r2)
    76b8:	003fdc06 	br	762c <_realloc_r+0x138>
    76bc:	00800304 	movi	r2,12
    76c0:	90800015 	stw	r2,0(r18)
    76c4:	0005883a 	mov	r2,zero
    76c8:	003fe506 	br	7660 <_realloc_r+0x16c>
    76cc:	1d86b03a 	or	r3,r3,r22
    76d0:	a8c00115 	stw	r3,4(r21)
    76d4:	ad8b883a 	add	r5,r21,r22
    76d8:	38c00054 	ori	r3,r7,1
    76dc:	28c00115 	stw	r3,4(r5)
    76e0:	29cf883a 	add	r7,r5,r7
    76e4:	38c00117 	ldw	r3,4(r7)
    76e8:	29400204 	addi	r5,r5,8
    76ec:	9009883a 	mov	r4,r18
    76f0:	18800054 	ori	r2,r3,1
    76f4:	38800115 	stw	r2,4(r7)
    76f8:	0004c500 	call	4c50 <_free_r>
    76fc:	003fd506 	br	7654 <_realloc_r+0x160>
    7700:	21c00117 	ldw	r7,4(r4)
    7704:	017fff04 	movi	r5,-4
    7708:	b1800404 	addi	r6,r22,16
    770c:	394a703a 	and	r5,r7,r5
    7710:	814f883a 	add	r7,r16,r5
    7714:	39805b0e 	bge	r7,r6,7884 <_realloc_r+0x390>
    7718:	18c0004c 	andi	r3,r3,1
    771c:	183fa01e 	bne	r3,zero,75a0 <_realloc_r+0xac>
    7720:	a4fffe17 	ldw	r19,-8(r20)
    7724:	00ffff04 	movi	r3,-4
    7728:	ace7c83a 	sub	r19,r21,r19
    772c:	99800117 	ldw	r6,4(r19)
    7730:	30c6703a 	and	r3,r6,r3
    7734:	20002026 	beq	r4,zero,77b8 <_realloc_r+0x2c4>
    7738:	80ef883a 	add	r23,r16,r3
    773c:	b96f883a 	add	r23,r23,r5
    7740:	22006126 	beq	r4,r8,78c8 <_realloc_r+0x3d4>
    7744:	b8801c16 	blt	r23,r2,77b8 <_realloc_r+0x2c4>
    7748:	20800317 	ldw	r2,12(r4)
    774c:	20c00217 	ldw	r3,8(r4)
    7750:	81bfff04 	addi	r6,r16,-4
    7754:	01000904 	movi	r4,36
    7758:	18800315 	stw	r2,12(r3)
    775c:	10c00215 	stw	r3,8(r2)
    7760:	98c00217 	ldw	r3,8(r19)
    7764:	98800317 	ldw	r2,12(r19)
    7768:	9c400204 	addi	r17,r19,8
    776c:	18800315 	stw	r2,12(r3)
    7770:	10c00215 	stw	r3,8(r2)
    7774:	21801b36 	bltu	r4,r6,77e4 <_realloc_r+0x2f0>
    7778:	008004c4 	movi	r2,19
    777c:	1180362e 	bgeu	r2,r6,7858 <_realloc_r+0x364>
    7780:	a0800017 	ldw	r2,0(r20)
    7784:	98800215 	stw	r2,8(r19)
    7788:	a0800117 	ldw	r2,4(r20)
    778c:	98800315 	stw	r2,12(r19)
    7790:	008006c4 	movi	r2,27
    7794:	11808136 	bltu	r2,r6,799c <_realloc_r+0x4a8>
    7798:	98800404 	addi	r2,r19,16
    779c:	a5000204 	addi	r20,r20,8
    77a0:	00002e06 	br	785c <_realloc_r+0x368>
    77a4:	a4fffe17 	ldw	r19,-8(r20)
    77a8:	00ffff04 	movi	r3,-4
    77ac:	ace7c83a 	sub	r19,r21,r19
    77b0:	99000117 	ldw	r4,4(r19)
    77b4:	20c6703a 	and	r3,r4,r3
    77b8:	983f7926 	beq	r19,zero,75a0 <_realloc_r+0xac>
    77bc:	80ef883a 	add	r23,r16,r3
    77c0:	b8bf7716 	blt	r23,r2,75a0 <_realloc_r+0xac>
    77c4:	98800317 	ldw	r2,12(r19)
    77c8:	98c00217 	ldw	r3,8(r19)
    77cc:	81bfff04 	addi	r6,r16,-4
    77d0:	01000904 	movi	r4,36
    77d4:	18800315 	stw	r2,12(r3)
    77d8:	10c00215 	stw	r3,8(r2)
    77dc:	9c400204 	addi	r17,r19,8
    77e0:	21bfe52e 	bgeu	r4,r6,7778 <_realloc_r+0x284>
    77e4:	a00b883a 	mov	r5,r20
    77e8:	8809883a 	mov	r4,r17
    77ec:	00062740 	call	6274 <memmove>
    77f0:	98c00117 	ldw	r3,4(r19)
    77f4:	b821883a 	mov	r16,r23
    77f8:	982b883a 	mov	r21,r19
    77fc:	003f8b06 	br	762c <_realloc_r+0x138>
    7800:	300b883a 	mov	r5,r6
    7804:	dfc00917 	ldw	ra,36(sp)
    7808:	df000817 	ldw	fp,32(sp)
    780c:	ddc00717 	ldw	r23,28(sp)
    7810:	dd800617 	ldw	r22,24(sp)
    7814:	dd400517 	ldw	r21,20(sp)
    7818:	dd000417 	ldw	r20,16(sp)
    781c:	dcc00317 	ldw	r19,12(sp)
    7820:	dc800217 	ldw	r18,8(sp)
    7824:	dc400117 	ldw	r17,4(sp)
    7828:	dc000017 	ldw	r16,0(sp)
    782c:	dec00a04 	addi	sp,sp,40
    7830:	000583c1 	jmpi	583c <_malloc_r>
    7834:	a0c00017 	ldw	r3,0(r20)
    7838:	88c00015 	stw	r3,0(r17)
    783c:	a0c00117 	ldw	r3,4(r20)
    7840:	88c00115 	stw	r3,4(r17)
    7844:	00c006c4 	movi	r3,27
    7848:	19804636 	bltu	r3,r6,7964 <_realloc_r+0x470>
    784c:	88800204 	addi	r2,r17,8
    7850:	a0c00204 	addi	r3,r20,8
    7854:	003f6406 	br	75e8 <_realloc_r+0xf4>
    7858:	8805883a 	mov	r2,r17
    785c:	a0c00017 	ldw	r3,0(r20)
    7860:	b821883a 	mov	r16,r23
    7864:	982b883a 	mov	r21,r19
    7868:	10c00015 	stw	r3,0(r2)
    786c:	a0c00117 	ldw	r3,4(r20)
    7870:	10c00115 	stw	r3,4(r2)
    7874:	a0c00217 	ldw	r3,8(r20)
    7878:	10c00215 	stw	r3,8(r2)
    787c:	98c00117 	ldw	r3,4(r19)
    7880:	003f6a06 	br	762c <_realloc_r+0x138>
    7884:	adab883a 	add	r21,r21,r22
    7888:	3d85c83a 	sub	r2,r7,r22
    788c:	e5400215 	stw	r21,8(fp)
    7890:	10800054 	ori	r2,r2,1
    7894:	a8800115 	stw	r2,4(r21)
    7898:	a0bfff17 	ldw	r2,-4(r20)
    789c:	9009883a 	mov	r4,r18
    78a0:	1080004c 	andi	r2,r2,1
    78a4:	1584b03a 	or	r2,r2,r22
    78a8:	a0bfff15 	stw	r2,-4(r20)
    78ac:	000d5940 	call	d594 <__malloc_unlock>
    78b0:	a005883a 	mov	r2,r20
    78b4:	003f6a06 	br	7660 <_realloc_r+0x16c>
    78b8:	a00b883a 	mov	r5,r20
    78bc:	8809883a 	mov	r4,r17
    78c0:	00062740 	call	6274 <memmove>
    78c4:	003f4e06 	br	7600 <_realloc_r+0x10c>
    78c8:	b1000404 	addi	r4,r22,16
    78cc:	b93fba16 	blt	r23,r4,77b8 <_realloc_r+0x2c4>
    78d0:	98800317 	ldw	r2,12(r19)
    78d4:	98c00217 	ldw	r3,8(r19)
    78d8:	81bfff04 	addi	r6,r16,-4
    78dc:	01000904 	movi	r4,36
    78e0:	18800315 	stw	r2,12(r3)
    78e4:	10c00215 	stw	r3,8(r2)
    78e8:	9c400204 	addi	r17,r19,8
    78ec:	21804336 	bltu	r4,r6,79fc <_realloc_r+0x508>
    78f0:	008004c4 	movi	r2,19
    78f4:	11803f2e 	bgeu	r2,r6,79f4 <_realloc_r+0x500>
    78f8:	a0800017 	ldw	r2,0(r20)
    78fc:	98800215 	stw	r2,8(r19)
    7900:	a0800117 	ldw	r2,4(r20)
    7904:	98800315 	stw	r2,12(r19)
    7908:	008006c4 	movi	r2,27
    790c:	11803f36 	bltu	r2,r6,7a0c <_realloc_r+0x518>
    7910:	98800404 	addi	r2,r19,16
    7914:	a5000204 	addi	r20,r20,8
    7918:	a0c00017 	ldw	r3,0(r20)
    791c:	10c00015 	stw	r3,0(r2)
    7920:	a0c00117 	ldw	r3,4(r20)
    7924:	10c00115 	stw	r3,4(r2)
    7928:	a0c00217 	ldw	r3,8(r20)
    792c:	10c00215 	stw	r3,8(r2)
    7930:	9d87883a 	add	r3,r19,r22
    7934:	bd85c83a 	sub	r2,r23,r22
    7938:	e0c00215 	stw	r3,8(fp)
    793c:	10800054 	ori	r2,r2,1
    7940:	18800115 	stw	r2,4(r3)
    7944:	98800117 	ldw	r2,4(r19)
    7948:	9009883a 	mov	r4,r18
    794c:	1080004c 	andi	r2,r2,1
    7950:	1584b03a 	or	r2,r2,r22
    7954:	98800115 	stw	r2,4(r19)
    7958:	000d5940 	call	d594 <__malloc_unlock>
    795c:	8805883a 	mov	r2,r17
    7960:	003f3f06 	br	7660 <_realloc_r+0x16c>
    7964:	a0c00217 	ldw	r3,8(r20)
    7968:	88c00215 	stw	r3,8(r17)
    796c:	a0c00317 	ldw	r3,12(r20)
    7970:	88c00315 	stw	r3,12(r17)
    7974:	30801126 	beq	r6,r2,79bc <_realloc_r+0x4c8>
    7978:	88800404 	addi	r2,r17,16
    797c:	a0c00404 	addi	r3,r20,16
    7980:	003f1906 	br	75e8 <_realloc_r+0xf4>
    7984:	893fff17 	ldw	r4,-4(r17)
    7988:	00bfff04 	movi	r2,-4
    798c:	a023883a 	mov	r17,r20
    7990:	2084703a 	and	r2,r4,r2
    7994:	80a1883a 	add	r16,r16,r2
    7998:	003f2406 	br	762c <_realloc_r+0x138>
    799c:	a0800217 	ldw	r2,8(r20)
    79a0:	98800415 	stw	r2,16(r19)
    79a4:	a0800317 	ldw	r2,12(r20)
    79a8:	98800515 	stw	r2,20(r19)
    79ac:	31000a26 	beq	r6,r4,79d8 <_realloc_r+0x4e4>
    79b0:	98800604 	addi	r2,r19,24
    79b4:	a5000404 	addi	r20,r20,16
    79b8:	003fa806 	br	785c <_realloc_r+0x368>
    79bc:	a1000417 	ldw	r4,16(r20)
    79c0:	88800604 	addi	r2,r17,24
    79c4:	a0c00604 	addi	r3,r20,24
    79c8:	89000415 	stw	r4,16(r17)
    79cc:	a1000517 	ldw	r4,20(r20)
    79d0:	89000515 	stw	r4,20(r17)
    79d4:	003f0406 	br	75e8 <_realloc_r+0xf4>
    79d8:	a0c00417 	ldw	r3,16(r20)
    79dc:	a5000604 	addi	r20,r20,24
    79e0:	98800804 	addi	r2,r19,32
    79e4:	98c00615 	stw	r3,24(r19)
    79e8:	a0ffff17 	ldw	r3,-4(r20)
    79ec:	98c00715 	stw	r3,28(r19)
    79f0:	003f9a06 	br	785c <_realloc_r+0x368>
    79f4:	8805883a 	mov	r2,r17
    79f8:	003fc706 	br	7918 <_realloc_r+0x424>
    79fc:	a00b883a 	mov	r5,r20
    7a00:	8809883a 	mov	r4,r17
    7a04:	00062740 	call	6274 <memmove>
    7a08:	003fc906 	br	7930 <_realloc_r+0x43c>
    7a0c:	a0800217 	ldw	r2,8(r20)
    7a10:	98800415 	stw	r2,16(r19)
    7a14:	a0800317 	ldw	r2,12(r20)
    7a18:	98800515 	stw	r2,20(r19)
    7a1c:	31000726 	beq	r6,r4,7a3c <_realloc_r+0x548>
    7a20:	98800604 	addi	r2,r19,24
    7a24:	a5000404 	addi	r20,r20,16
    7a28:	003fbb06 	br	7918 <_realloc_r+0x424>
    7a2c:	9009883a 	mov	r4,r18
    7a30:	000d5940 	call	d594 <__malloc_unlock>
    7a34:	0005883a 	mov	r2,zero
    7a38:	003f0906 	br	7660 <_realloc_r+0x16c>
    7a3c:	a0c00417 	ldw	r3,16(r20)
    7a40:	a5000604 	addi	r20,r20,24
    7a44:	98800804 	addi	r2,r19,32
    7a48:	98c00615 	stw	r3,24(r19)
    7a4c:	a0ffff17 	ldw	r3,-4(r20)
    7a50:	98c00715 	stw	r3,28(r19)
    7a54:	003fb006 	br	7918 <_realloc_r+0x424>

00007a58 <__fpclassifyd>:
    7a58:	00a00034 	movhi	r2,32768
    7a5c:	10bfffc4 	addi	r2,r2,-1
    7a60:	2884703a 	and	r2,r5,r2
    7a64:	10000726 	beq	r2,zero,7a84 <__fpclassifyd+0x2c>
    7a68:	00fffc34 	movhi	r3,65520
    7a6c:	019ff834 	movhi	r6,32736
    7a70:	28c7883a 	add	r3,r5,r3
    7a74:	31bfffc4 	addi	r6,r6,-1
    7a78:	30c00536 	bltu	r6,r3,7a90 <__fpclassifyd+0x38>
    7a7c:	00800104 	movi	r2,4
    7a80:	f800283a 	ret
    7a84:	2000021e 	bne	r4,zero,7a90 <__fpclassifyd+0x38>
    7a88:	00800084 	movi	r2,2
    7a8c:	f800283a 	ret
    7a90:	00dffc34 	movhi	r3,32752
    7a94:	019ff834 	movhi	r6,32736
    7a98:	28cb883a 	add	r5,r5,r3
    7a9c:	31bfffc4 	addi	r6,r6,-1
    7aa0:	317ff62e 	bgeu	r6,r5,7a7c <__fpclassifyd+0x24>
    7aa4:	01400434 	movhi	r5,16
    7aa8:	297fffc4 	addi	r5,r5,-1
    7aac:	28800236 	bltu	r5,r2,7ab8 <__fpclassifyd+0x60>
    7ab0:	008000c4 	movi	r2,3
    7ab4:	f800283a 	ret
    7ab8:	10c00226 	beq	r2,r3,7ac4 <__fpclassifyd+0x6c>
    7abc:	0005883a 	mov	r2,zero
    7ac0:	f800283a 	ret
    7ac4:	2005003a 	cmpeq	r2,r4,zero
    7ac8:	f800283a 	ret

00007acc <_sbrk_r>:
    7acc:	defffd04 	addi	sp,sp,-12
    7ad0:	dc000015 	stw	r16,0(sp)
    7ad4:	04000074 	movhi	r16,1
    7ad8:	dc400115 	stw	r17,4(sp)
    7adc:	8410fe04 	addi	r16,r16,17400
    7ae0:	2023883a 	mov	r17,r4
    7ae4:	2809883a 	mov	r4,r5
    7ae8:	dfc00215 	stw	ra,8(sp)
    7aec:	80000015 	stw	zero,0(r16)
    7af0:	000d7680 	call	d768 <sbrk>
    7af4:	00ffffc4 	movi	r3,-1
    7af8:	10c00526 	beq	r2,r3,7b10 <_sbrk_r+0x44>
    7afc:	dfc00217 	ldw	ra,8(sp)
    7b00:	dc400117 	ldw	r17,4(sp)
    7b04:	dc000017 	ldw	r16,0(sp)
    7b08:	dec00304 	addi	sp,sp,12
    7b0c:	f800283a 	ret
    7b10:	80c00017 	ldw	r3,0(r16)
    7b14:	183ff926 	beq	r3,zero,7afc <_sbrk_r+0x30>
    7b18:	88c00015 	stw	r3,0(r17)
    7b1c:	003ff706 	br	7afc <_sbrk_r+0x30>

00007b20 <__sread>:
    7b20:	defffe04 	addi	sp,sp,-8
    7b24:	dc000015 	stw	r16,0(sp)
    7b28:	2821883a 	mov	r16,r5
    7b2c:	2940038f 	ldh	r5,14(r5)
    7b30:	dfc00115 	stw	ra,4(sp)
    7b34:	00099140 	call	9914 <_read_r>
    7b38:	10000716 	blt	r2,zero,7b58 <__sread+0x38>
    7b3c:	80c01417 	ldw	r3,80(r16)
    7b40:	1887883a 	add	r3,r3,r2
    7b44:	80c01415 	stw	r3,80(r16)
    7b48:	dfc00117 	ldw	ra,4(sp)
    7b4c:	dc000017 	ldw	r16,0(sp)
    7b50:	dec00204 	addi	sp,sp,8
    7b54:	f800283a 	ret
    7b58:	80c0030b 	ldhu	r3,12(r16)
    7b5c:	18fbffcc 	andi	r3,r3,61439
    7b60:	80c0030d 	sth	r3,12(r16)
    7b64:	dfc00117 	ldw	ra,4(sp)
    7b68:	dc000017 	ldw	r16,0(sp)
    7b6c:	dec00204 	addi	sp,sp,8
    7b70:	f800283a 	ret

00007b74 <__seofread>:
    7b74:	0005883a 	mov	r2,zero
    7b78:	f800283a 	ret

00007b7c <__swrite>:
    7b7c:	2880030b 	ldhu	r2,12(r5)
    7b80:	defffb04 	addi	sp,sp,-20
    7b84:	dcc00315 	stw	r19,12(sp)
    7b88:	dc800215 	stw	r18,8(sp)
    7b8c:	dc400115 	stw	r17,4(sp)
    7b90:	dc000015 	stw	r16,0(sp)
    7b94:	dfc00415 	stw	ra,16(sp)
    7b98:	10c0400c 	andi	r3,r2,256
    7b9c:	2821883a 	mov	r16,r5
    7ba0:	2023883a 	mov	r17,r4
    7ba4:	3025883a 	mov	r18,r6
    7ba8:	3827883a 	mov	r19,r7
    7bac:	18000526 	beq	r3,zero,7bc4 <__swrite+0x48>
    7bb0:	2940038f 	ldh	r5,14(r5)
    7bb4:	01c00084 	movi	r7,2
    7bb8:	000d883a 	mov	r6,zero
    7bbc:	00098b40 	call	98b4 <_lseek_r>
    7bc0:	8080030b 	ldhu	r2,12(r16)
    7bc4:	8140038f 	ldh	r5,14(r16)
    7bc8:	10bbffcc 	andi	r2,r2,61439
    7bcc:	980f883a 	mov	r7,r19
    7bd0:	900d883a 	mov	r6,r18
    7bd4:	8809883a 	mov	r4,r17
    7bd8:	8080030d 	sth	r2,12(r16)
    7bdc:	dfc00417 	ldw	ra,16(sp)
    7be0:	dcc00317 	ldw	r19,12(sp)
    7be4:	dc800217 	ldw	r18,8(sp)
    7be8:	dc400117 	ldw	r17,4(sp)
    7bec:	dc000017 	ldw	r16,0(sp)
    7bf0:	dec00504 	addi	sp,sp,20
    7bf4:	00093801 	jmpi	9380 <_write_r>

00007bf8 <__sseek>:
    7bf8:	defffe04 	addi	sp,sp,-8
    7bfc:	dc000015 	stw	r16,0(sp)
    7c00:	2821883a 	mov	r16,r5
    7c04:	2940038f 	ldh	r5,14(r5)
    7c08:	dfc00115 	stw	ra,4(sp)
    7c0c:	00098b40 	call	98b4 <_lseek_r>
    7c10:	00ffffc4 	movi	r3,-1
    7c14:	10c00826 	beq	r2,r3,7c38 <__sseek+0x40>
    7c18:	80c0030b 	ldhu	r3,12(r16)
    7c1c:	80801415 	stw	r2,80(r16)
    7c20:	18c40014 	ori	r3,r3,4096
    7c24:	80c0030d 	sth	r3,12(r16)
    7c28:	dfc00117 	ldw	ra,4(sp)
    7c2c:	dc000017 	ldw	r16,0(sp)
    7c30:	dec00204 	addi	sp,sp,8
    7c34:	f800283a 	ret
    7c38:	80c0030b 	ldhu	r3,12(r16)
    7c3c:	18fbffcc 	andi	r3,r3,61439
    7c40:	80c0030d 	sth	r3,12(r16)
    7c44:	dfc00117 	ldw	ra,4(sp)
    7c48:	dc000017 	ldw	r16,0(sp)
    7c4c:	dec00204 	addi	sp,sp,8
    7c50:	f800283a 	ret

00007c54 <__sclose>:
    7c54:	2940038f 	ldh	r5,14(r5)
    7c58:	00093e01 	jmpi	93e0 <_close_r>

00007c5c <strcmp>:
    7c5c:	2144b03a 	or	r2,r4,r5
    7c60:	108000cc 	andi	r2,r2,3
    7c64:	1000171e 	bne	r2,zero,7cc4 <strcmp+0x68>
    7c68:	20800017 	ldw	r2,0(r4)
    7c6c:	28c00017 	ldw	r3,0(r5)
    7c70:	10c0141e 	bne	r2,r3,7cc4 <strcmp+0x68>
    7c74:	027fbff4 	movhi	r9,65279
    7c78:	4a7fbfc4 	addi	r9,r9,-257
    7c7c:	0086303a 	nor	r3,zero,r2
    7c80:	02202074 	movhi	r8,32897
    7c84:	1245883a 	add	r2,r2,r9
    7c88:	42202004 	addi	r8,r8,-32640
    7c8c:	10c4703a 	and	r2,r2,r3
    7c90:	1204703a 	and	r2,r2,r8
    7c94:	10000226 	beq	r2,zero,7ca0 <strcmp+0x44>
    7c98:	00002306 	br	7d28 <strcmp+0xcc>
    7c9c:	1000221e 	bne	r2,zero,7d28 <strcmp+0xcc>
    7ca0:	21000104 	addi	r4,r4,4
    7ca4:	20c00017 	ldw	r3,0(r4)
    7ca8:	29400104 	addi	r5,r5,4
    7cac:	29800017 	ldw	r6,0(r5)
    7cb0:	1a4f883a 	add	r7,r3,r9
    7cb4:	00c4303a 	nor	r2,zero,r3
    7cb8:	3884703a 	and	r2,r7,r2
    7cbc:	1204703a 	and	r2,r2,r8
    7cc0:	19bff626 	beq	r3,r6,7c9c <strcmp+0x40>
    7cc4:	20800003 	ldbu	r2,0(r4)
    7cc8:	10c03fcc 	andi	r3,r2,255
    7ccc:	18c0201c 	xori	r3,r3,128
    7cd0:	18ffe004 	addi	r3,r3,-128
    7cd4:	18000c26 	beq	r3,zero,7d08 <strcmp+0xac>
    7cd8:	29800007 	ldb	r6,0(r5)
    7cdc:	19800326 	beq	r3,r6,7cec <strcmp+0x90>
    7ce0:	00001306 	br	7d30 <strcmp+0xd4>
    7ce4:	29800007 	ldb	r6,0(r5)
    7ce8:	11800b1e 	bne	r2,r6,7d18 <strcmp+0xbc>
    7cec:	21000044 	addi	r4,r4,1
    7cf0:	20c00003 	ldbu	r3,0(r4)
    7cf4:	29400044 	addi	r5,r5,1
    7cf8:	18803fcc 	andi	r2,r3,255
    7cfc:	1080201c 	xori	r2,r2,128
    7d00:	10bfe004 	addi	r2,r2,-128
    7d04:	103ff71e 	bne	r2,zero,7ce4 <strcmp+0x88>
    7d08:	0007883a 	mov	r3,zero
    7d0c:	28800003 	ldbu	r2,0(r5)
    7d10:	1885c83a 	sub	r2,r3,r2
    7d14:	f800283a 	ret
    7d18:	28800003 	ldbu	r2,0(r5)
    7d1c:	18c03fcc 	andi	r3,r3,255
    7d20:	1885c83a 	sub	r2,r3,r2
    7d24:	f800283a 	ret
    7d28:	0005883a 	mov	r2,zero
    7d2c:	f800283a 	ret
    7d30:	10c03fcc 	andi	r3,r2,255
    7d34:	003ff506 	br	7d0c <strcmp+0xb0>

00007d38 <__sprint_r.part.0>:
    7d38:	28801917 	ldw	r2,100(r5)
    7d3c:	defff604 	addi	sp,sp,-40
    7d40:	dd400515 	stw	r21,20(sp)
    7d44:	dfc00915 	stw	ra,36(sp)
    7d48:	df000815 	stw	fp,32(sp)
    7d4c:	ddc00715 	stw	r23,28(sp)
    7d50:	dd800615 	stw	r22,24(sp)
    7d54:	dd000415 	stw	r20,16(sp)
    7d58:	dcc00315 	stw	r19,12(sp)
    7d5c:	dc800215 	stw	r18,8(sp)
    7d60:	dc400115 	stw	r17,4(sp)
    7d64:	dc000015 	stw	r16,0(sp)
    7d68:	1088000c 	andi	r2,r2,8192
    7d6c:	302b883a 	mov	r21,r6
    7d70:	10002e26 	beq	r2,zero,7e2c <__sprint_r.part.0+0xf4>
    7d74:	30800217 	ldw	r2,8(r6)
    7d78:	35800017 	ldw	r22,0(r6)
    7d7c:	10002926 	beq	r2,zero,7e24 <__sprint_r.part.0+0xec>
    7d80:	2827883a 	mov	r19,r5
    7d84:	2029883a 	mov	r20,r4
    7d88:	b5c00104 	addi	r23,r22,4
    7d8c:	04bfffc4 	movi	r18,-1
    7d90:	bc400017 	ldw	r17,0(r23)
    7d94:	b4000017 	ldw	r16,0(r22)
    7d98:	0039883a 	mov	fp,zero
    7d9c:	8822d0ba 	srli	r17,r17,2
    7da0:	8800031e 	bne	r17,zero,7db0 <__sprint_r.part.0+0x78>
    7da4:	00001806 	br	7e08 <__sprint_r.part.0+0xd0>
    7da8:	84000104 	addi	r16,r16,4
    7dac:	8f001526 	beq	r17,fp,7e04 <__sprint_r.part.0+0xcc>
    7db0:	81400017 	ldw	r5,0(r16)
    7db4:	980d883a 	mov	r6,r19
    7db8:	a009883a 	mov	r4,r20
    7dbc:	00097600 	call	9760 <_fputwc_r>
    7dc0:	e7000044 	addi	fp,fp,1
    7dc4:	14bff81e 	bne	r2,r18,7da8 <__sprint_r.part.0+0x70>
    7dc8:	9005883a 	mov	r2,r18
    7dcc:	a8000215 	stw	zero,8(r21)
    7dd0:	a8000115 	stw	zero,4(r21)
    7dd4:	dfc00917 	ldw	ra,36(sp)
    7dd8:	df000817 	ldw	fp,32(sp)
    7ddc:	ddc00717 	ldw	r23,28(sp)
    7de0:	dd800617 	ldw	r22,24(sp)
    7de4:	dd400517 	ldw	r21,20(sp)
    7de8:	dd000417 	ldw	r20,16(sp)
    7dec:	dcc00317 	ldw	r19,12(sp)
    7df0:	dc800217 	ldw	r18,8(sp)
    7df4:	dc400117 	ldw	r17,4(sp)
    7df8:	dc000017 	ldw	r16,0(sp)
    7dfc:	dec00a04 	addi	sp,sp,40
    7e00:	f800283a 	ret
    7e04:	a8800217 	ldw	r2,8(r21)
    7e08:	8c63883a 	add	r17,r17,r17
    7e0c:	8c63883a 	add	r17,r17,r17
    7e10:	1445c83a 	sub	r2,r2,r17
    7e14:	a8800215 	stw	r2,8(r21)
    7e18:	b5800204 	addi	r22,r22,8
    7e1c:	bdc00204 	addi	r23,r23,8
    7e20:	103fdb1e 	bne	r2,zero,7d90 <__sprint_r.part.0+0x58>
    7e24:	0005883a 	mov	r2,zero
    7e28:	003fe806 	br	7dcc <__sprint_r.part.0+0x94>
    7e2c:	0004f600 	call	4f60 <__sfvwrite_r>
    7e30:	003fe606 	br	7dcc <__sprint_r.part.0+0x94>

00007e34 <__sprint_r>:
    7e34:	30c00217 	ldw	r3,8(r6)
    7e38:	18000126 	beq	r3,zero,7e40 <__sprint_r+0xc>
    7e3c:	0007d381 	jmpi	7d38 <__sprint_r.part.0>
    7e40:	30000115 	stw	zero,4(r6)
    7e44:	0005883a 	mov	r2,zero
    7e48:	f800283a 	ret

00007e4c <___vfiprintf_internal_r>:
    7e4c:	deffc904 	addi	sp,sp,-220
    7e50:	df003515 	stw	fp,212(sp)
    7e54:	dd003115 	stw	r20,196(sp)
    7e58:	dfc03615 	stw	ra,216(sp)
    7e5c:	ddc03415 	stw	r23,208(sp)
    7e60:	dd803315 	stw	r22,204(sp)
    7e64:	dd403215 	stw	r21,200(sp)
    7e68:	dcc03015 	stw	r19,192(sp)
    7e6c:	dc802f15 	stw	r18,188(sp)
    7e70:	dc402e15 	stw	r17,184(sp)
    7e74:	dc002d15 	stw	r16,180(sp)
    7e78:	d9002015 	stw	r4,128(sp)
    7e7c:	d9c02215 	stw	r7,136(sp)
    7e80:	2829883a 	mov	r20,r5
    7e84:	3039883a 	mov	fp,r6
    7e88:	20000226 	beq	r4,zero,7e94 <___vfiprintf_internal_r+0x48>
    7e8c:	20800e17 	ldw	r2,56(r4)
    7e90:	1000cf26 	beq	r2,zero,81d0 <___vfiprintf_internal_r+0x384>
    7e94:	a080030b 	ldhu	r2,12(r20)
    7e98:	10c8000c 	andi	r3,r2,8192
    7e9c:	1800061e 	bne	r3,zero,7eb8 <___vfiprintf_internal_r+0x6c>
    7ea0:	a1001917 	ldw	r4,100(r20)
    7ea4:	00f7ffc4 	movi	r3,-8193
    7ea8:	10880014 	ori	r2,r2,8192
    7eac:	20c6703a 	and	r3,r4,r3
    7eb0:	a080030d 	sth	r2,12(r20)
    7eb4:	a0c01915 	stw	r3,100(r20)
    7eb8:	10c0020c 	andi	r3,r2,8
    7ebc:	1800a926 	beq	r3,zero,8164 <___vfiprintf_internal_r+0x318>
    7ec0:	a0c00417 	ldw	r3,16(r20)
    7ec4:	1800a726 	beq	r3,zero,8164 <___vfiprintf_internal_r+0x318>
    7ec8:	1080068c 	andi	r2,r2,26
    7ecc:	00c00284 	movi	r3,10
    7ed0:	10c0ac26 	beq	r2,r3,8184 <___vfiprintf_internal_r+0x338>
    7ed4:	da801a04 	addi	r10,sp,104
    7ed8:	da801e15 	stw	r10,120(sp)
    7edc:	d8801e17 	ldw	r2,120(sp)
    7ee0:	da8019c4 	addi	r10,sp,103
    7ee4:	05800074 	movhi	r22,1
    7ee8:	05c00074 	movhi	r23,1
    7eec:	da801f15 	stw	r10,124(sp)
    7ef0:	1295c83a 	sub	r10,r2,r10
    7ef4:	b582a004 	addi	r22,r22,2688
    7ef8:	bdc29c04 	addi	r23,r23,2672
    7efc:	dec01a15 	stw	sp,104(sp)
    7f00:	d8001c15 	stw	zero,112(sp)
    7f04:	d8001b15 	stw	zero,108(sp)
    7f08:	d8002615 	stw	zero,152(sp)
    7f0c:	d8002315 	stw	zero,140(sp)
    7f10:	da802715 	stw	r10,156(sp)
    7f14:	d811883a 	mov	r8,sp
    7f18:	dd002115 	stw	r20,132(sp)
    7f1c:	e021883a 	mov	r16,fp
    7f20:	80800007 	ldb	r2,0(r16)
    7f24:	1003ea26 	beq	r2,zero,8ed0 <___vfiprintf_internal_r+0x1084>
    7f28:	00c00944 	movi	r3,37
    7f2c:	8025883a 	mov	r18,r16
    7f30:	10c0021e 	bne	r2,r3,7f3c <___vfiprintf_internal_r+0xf0>
    7f34:	00001606 	br	7f90 <___vfiprintf_internal_r+0x144>
    7f38:	10c00326 	beq	r2,r3,7f48 <___vfiprintf_internal_r+0xfc>
    7f3c:	94800044 	addi	r18,r18,1
    7f40:	90800007 	ldb	r2,0(r18)
    7f44:	103ffc1e 	bne	r2,zero,7f38 <___vfiprintf_internal_r+0xec>
    7f48:	9423c83a 	sub	r17,r18,r16
    7f4c:	88001026 	beq	r17,zero,7f90 <___vfiprintf_internal_r+0x144>
    7f50:	d8c01c17 	ldw	r3,112(sp)
    7f54:	d8801b17 	ldw	r2,108(sp)
    7f58:	44000015 	stw	r16,0(r8)
    7f5c:	88c7883a 	add	r3,r17,r3
    7f60:	10800044 	addi	r2,r2,1
    7f64:	44400115 	stw	r17,4(r8)
    7f68:	d8c01c15 	stw	r3,112(sp)
    7f6c:	d8801b15 	stw	r2,108(sp)
    7f70:	010001c4 	movi	r4,7
    7f74:	2080760e 	bge	r4,r2,8150 <___vfiprintf_internal_r+0x304>
    7f78:	1803821e 	bne	r3,zero,8d84 <___vfiprintf_internal_r+0xf38>
    7f7c:	da802317 	ldw	r10,140(sp)
    7f80:	d8001b15 	stw	zero,108(sp)
    7f84:	d811883a 	mov	r8,sp
    7f88:	5455883a 	add	r10,r10,r17
    7f8c:	da802315 	stw	r10,140(sp)
    7f90:	90800007 	ldb	r2,0(r18)
    7f94:	10044626 	beq	r2,zero,90b0 <___vfiprintf_internal_r+0x1264>
    7f98:	90c00047 	ldb	r3,1(r18)
    7f9c:	94000044 	addi	r16,r18,1
    7fa0:	d8001d85 	stb	zero,118(sp)
    7fa4:	0009883a 	mov	r4,zero
    7fa8:	000f883a 	mov	r7,zero
    7fac:	027fffc4 	movi	r9,-1
    7fb0:	0023883a 	mov	r17,zero
    7fb4:	0029883a 	mov	r20,zero
    7fb8:	01401604 	movi	r5,88
    7fbc:	01800244 	movi	r6,9
    7fc0:	03400a84 	movi	r13,42
    7fc4:	03001b04 	movi	r12,108
    7fc8:	84000044 	addi	r16,r16,1
    7fcc:	18bff804 	addi	r2,r3,-32
    7fd0:	28827336 	bltu	r5,r2,89a0 <___vfiprintf_internal_r+0xb54>
    7fd4:	100490ba 	slli	r2,r2,2
    7fd8:	02800034 	movhi	r10,0
    7fdc:	529ffb04 	addi	r10,r10,32748
    7fe0:	1285883a 	add	r2,r2,r10
    7fe4:	10800017 	ldw	r2,0(r2)
    7fe8:	1000683a 	jmp	r2
    7fec:	000086d4 	movui	zero,539
    7ff0:	000089a0 	cmpeqi	zero,zero,550
    7ff4:	000089a0 	cmpeqi	zero,zero,550
    7ff8:	000086f4 	movhi	zero,539
    7ffc:	000089a0 	cmpeqi	zero,zero,550
    8000:	000089a0 	cmpeqi	zero,zero,550
    8004:	000089a0 	cmpeqi	zero,zero,550
    8008:	000089a0 	cmpeqi	zero,zero,550
    800c:	000089a0 	cmpeqi	zero,zero,550
    8010:	000089a0 	cmpeqi	zero,zero,550
    8014:	000088dc 	xori	zero,zero,547
    8018:	000088f8 	rdprs	zero,zero,547
    801c:	000089a0 	cmpeqi	zero,zero,550
    8020:	000081e0 	cmpeqi	zero,zero,519
    8024:	00008908 	cmpgei	zero,zero,548
    8028:	000089a0 	cmpeqi	zero,zero,550
    802c:	00008700 	call	870 <___vfprintf_internal_r+0x38>
    8030:	0000870c 	andi	zero,zero,540
    8034:	0000870c 	andi	zero,zero,540
    8038:	0000870c 	andi	zero,zero,540
    803c:	0000870c 	andi	zero,zero,540
    8040:	0000870c 	andi	zero,zero,540
    8044:	0000870c 	andi	zero,zero,540
    8048:	0000870c 	andi	zero,zero,540
    804c:	0000870c 	andi	zero,zero,540
    8050:	0000870c 	andi	zero,zero,540
    8054:	000089a0 	cmpeqi	zero,zero,550
    8058:	000089a0 	cmpeqi	zero,zero,550
    805c:	000089a0 	cmpeqi	zero,zero,550
    8060:	000089a0 	cmpeqi	zero,zero,550
    8064:	000089a0 	cmpeqi	zero,zero,550
    8068:	000089a0 	cmpeqi	zero,zero,550
    806c:	000089a0 	cmpeqi	zero,zero,550
    8070:	000089a0 	cmpeqi	zero,zero,550
    8074:	000089a0 	cmpeqi	zero,zero,550
    8078:	000089a0 	cmpeqi	zero,zero,550
    807c:	00008738 	rdprs	zero,zero,540
    8080:	000089a0 	cmpeqi	zero,zero,550
    8084:	000089a0 	cmpeqi	zero,zero,550
    8088:	000089a0 	cmpeqi	zero,zero,550
    808c:	000089a0 	cmpeqi	zero,zero,550
    8090:	000089a0 	cmpeqi	zero,zero,550
    8094:	000089a0 	cmpeqi	zero,zero,550
    8098:	000089a0 	cmpeqi	zero,zero,550
    809c:	000089a0 	cmpeqi	zero,zero,550
    80a0:	000089a0 	cmpeqi	zero,zero,550
    80a4:	000089a0 	cmpeqi	zero,zero,550
    80a8:	00008770 	cmpltui	zero,zero,541
    80ac:	000089a0 	cmpeqi	zero,zero,550
    80b0:	000089a0 	cmpeqi	zero,zero,550
    80b4:	000089a0 	cmpeqi	zero,zero,550
    80b8:	000089a0 	cmpeqi	zero,zero,550
    80bc:	000089a0 	cmpeqi	zero,zero,550
    80c0:	000087c8 	cmpgei	zero,zero,543
    80c4:	000089a0 	cmpeqi	zero,zero,550
    80c8:	000089a0 	cmpeqi	zero,zero,550
    80cc:	00008838 	rdprs	zero,zero,544
    80d0:	000089a0 	cmpeqi	zero,zero,550
    80d4:	000089a0 	cmpeqi	zero,zero,550
    80d8:	000089a0 	cmpeqi	zero,zero,550
    80dc:	000089a0 	cmpeqi	zero,zero,550
    80e0:	000089a0 	cmpeqi	zero,zero,550
    80e4:	000089a0 	cmpeqi	zero,zero,550
    80e8:	000089a0 	cmpeqi	zero,zero,550
    80ec:	000089a0 	cmpeqi	zero,zero,550
    80f0:	000089a0 	cmpeqi	zero,zero,550
    80f4:	000089a0 	cmpeqi	zero,zero,550
    80f8:	000085e4 	muli	zero,zero,535
    80fc:	00008610 	cmplti	zero,zero,536
    8100:	000089a0 	cmpeqi	zero,zero,550
    8104:	000089a0 	cmpeqi	zero,zero,550
    8108:	000089a0 	cmpeqi	zero,zero,550
    810c:	00008948 	cmpgei	zero,zero,549
    8110:	00008610 	cmplti	zero,zero,536
    8114:	000089a0 	cmpeqi	zero,zero,550
    8118:	000089a0 	cmpeqi	zero,zero,550
    811c:	000084a4 	muli	zero,zero,530
    8120:	000089a0 	cmpeqi	zero,zero,550
    8124:	000084b4 	movhi	zero,530
    8128:	000084f0 	cmpltui	zero,zero,531
    812c:	000081ec 	andhi	zero,zero,519
    8130:	00008498 	cmpnei	zero,zero,530
    8134:	000089a0 	cmpeqi	zero,zero,550
    8138:	00008874 	movhi	zero,545
    813c:	000089a0 	cmpeqi	zero,zero,550
    8140:	000088cc 	andi	zero,zero,547
    8144:	000089a0 	cmpeqi	zero,zero,550
    8148:	000089a0 	cmpeqi	zero,zero,550
    814c:	00008590 	cmplti	zero,zero,534
    8150:	42000204 	addi	r8,r8,8
    8154:	da802317 	ldw	r10,140(sp)
    8158:	5455883a 	add	r10,r10,r17
    815c:	da802315 	stw	r10,140(sp)
    8160:	003f8b06 	br	7f90 <___vfiprintf_internal_r+0x144>
    8164:	d9002017 	ldw	r4,128(sp)
    8168:	a00b883a 	mov	r5,r20
    816c:	0002b080 	call	2b08 <__swsetup_r>
    8170:	1003b11e 	bne	r2,zero,9038 <___vfiprintf_internal_r+0x11ec>
    8174:	a080030b 	ldhu	r2,12(r20)
    8178:	00c00284 	movi	r3,10
    817c:	1080068c 	andi	r2,r2,26
    8180:	10ff541e 	bne	r2,r3,7ed4 <___vfiprintf_internal_r+0x88>
    8184:	a080038f 	ldh	r2,14(r20)
    8188:	103f5216 	blt	r2,zero,7ed4 <___vfiprintf_internal_r+0x88>
    818c:	d9c02217 	ldw	r7,136(sp)
    8190:	d9002017 	ldw	r4,128(sp)
    8194:	e00d883a 	mov	r6,fp
    8198:	a00b883a 	mov	r5,r20
    819c:	00092c40 	call	92c4 <__sbprintf>
    81a0:	dfc03617 	ldw	ra,216(sp)
    81a4:	df003517 	ldw	fp,212(sp)
    81a8:	ddc03417 	ldw	r23,208(sp)
    81ac:	dd803317 	ldw	r22,204(sp)
    81b0:	dd403217 	ldw	r21,200(sp)
    81b4:	dd003117 	ldw	r20,196(sp)
    81b8:	dcc03017 	ldw	r19,192(sp)
    81bc:	dc802f17 	ldw	r18,188(sp)
    81c0:	dc402e17 	ldw	r17,184(sp)
    81c4:	dc002d17 	ldw	r16,180(sp)
    81c8:	dec03704 	addi	sp,sp,220
    81cc:	f800283a 	ret
    81d0:	0004adc0 	call	4adc <__sinit>
    81d4:	003f2f06 	br	7e94 <___vfiprintf_internal_r+0x48>
    81d8:	0463c83a 	sub	r17,zero,r17
    81dc:	d8802215 	stw	r2,136(sp)
    81e0:	a5000114 	ori	r20,r20,4
    81e4:	80c00007 	ldb	r3,0(r16)
    81e8:	003f7706 	br	7fc8 <___vfiprintf_internal_r+0x17c>
    81ec:	00800c04 	movi	r2,48
    81f0:	da802217 	ldw	r10,136(sp)
    81f4:	d8801d05 	stb	r2,116(sp)
    81f8:	00801e04 	movi	r2,120
    81fc:	d8801d45 	stb	r2,117(sp)
    8200:	d8001d85 	stb	zero,118(sp)
    8204:	50c00104 	addi	r3,r10,4
    8208:	54800017 	ldw	r18,0(r10)
    820c:	0027883a 	mov	r19,zero
    8210:	a0800094 	ori	r2,r20,2
    8214:	48030b16 	blt	r9,zero,8e44 <___vfiprintf_internal_r+0xff8>
    8218:	00bfdfc4 	movi	r2,-129
    821c:	a096703a 	and	r11,r20,r2
    8220:	d8c02215 	stw	r3,136(sp)
    8224:	5d000094 	ori	r20,r11,2
    8228:	90032b1e 	bne	r18,zero,8ed8 <___vfiprintf_internal_r+0x108c>
    822c:	00800074 	movhi	r2,1
    8230:	10823b04 	addi	r2,r2,2284
    8234:	d8802615 	stw	r2,152(sp)
    8238:	0039883a 	mov	fp,zero
    823c:	48017b1e 	bne	r9,zero,882c <___vfiprintf_internal_r+0x9e0>
    8240:	0013883a 	mov	r9,zero
    8244:	0027883a 	mov	r19,zero
    8248:	dd401a04 	addi	r21,sp,104
    824c:	4825883a 	mov	r18,r9
    8250:	4cc0010e 	bge	r9,r19,8258 <___vfiprintf_internal_r+0x40c>
    8254:	9825883a 	mov	r18,r19
    8258:	e7003fcc 	andi	fp,fp,255
    825c:	e700201c 	xori	fp,fp,128
    8260:	e73fe004 	addi	fp,fp,-128
    8264:	e0000126 	beq	fp,zero,826c <___vfiprintf_internal_r+0x420>
    8268:	94800044 	addi	r18,r18,1
    826c:	a380008c 	andi	r14,r20,2
    8270:	70000126 	beq	r14,zero,8278 <___vfiprintf_internal_r+0x42c>
    8274:	94800084 	addi	r18,r18,2
    8278:	a700210c 	andi	fp,r20,132
    827c:	e001df1e 	bne	fp,zero,89fc <___vfiprintf_internal_r+0xbb0>
    8280:	8c87c83a 	sub	r3,r17,r18
    8284:	00c1dd0e 	bge	zero,r3,89fc <___vfiprintf_internal_r+0xbb0>
    8288:	01c00404 	movi	r7,16
    828c:	d8801c17 	ldw	r2,112(sp)
    8290:	38c3ad0e 	bge	r7,r3,9148 <___vfiprintf_internal_r+0x12fc>
    8294:	02800074 	movhi	r10,1
    8298:	5282a004 	addi	r10,r10,2688
    829c:	dc002915 	stw	r16,164(sp)
    82a0:	d9801b17 	ldw	r6,108(sp)
    82a4:	da802415 	stw	r10,144(sp)
    82a8:	03c001c4 	movi	r15,7
    82ac:	da402515 	stw	r9,148(sp)
    82b0:	db802815 	stw	r14,160(sp)
    82b4:	1821883a 	mov	r16,r3
    82b8:	00000506 	br	82d0 <___vfiprintf_internal_r+0x484>
    82bc:	31400084 	addi	r5,r6,2
    82c0:	42000204 	addi	r8,r8,8
    82c4:	200d883a 	mov	r6,r4
    82c8:	843ffc04 	addi	r16,r16,-16
    82cc:	3c000d0e 	bge	r7,r16,8304 <___vfiprintf_internal_r+0x4b8>
    82d0:	10800404 	addi	r2,r2,16
    82d4:	31000044 	addi	r4,r6,1
    82d8:	45800015 	stw	r22,0(r8)
    82dc:	41c00115 	stw	r7,4(r8)
    82e0:	d8801c15 	stw	r2,112(sp)
    82e4:	d9001b15 	stw	r4,108(sp)
    82e8:	793ff40e 	bge	r15,r4,82bc <___vfiprintf_internal_r+0x470>
    82ec:	1001b51e 	bne	r2,zero,89c4 <___vfiprintf_internal_r+0xb78>
    82f0:	843ffc04 	addi	r16,r16,-16
    82f4:	000d883a 	mov	r6,zero
    82f8:	01400044 	movi	r5,1
    82fc:	d811883a 	mov	r8,sp
    8300:	3c3ff316 	blt	r7,r16,82d0 <___vfiprintf_internal_r+0x484>
    8304:	8007883a 	mov	r3,r16
    8308:	da402517 	ldw	r9,148(sp)
    830c:	db802817 	ldw	r14,160(sp)
    8310:	dc002917 	ldw	r16,164(sp)
    8314:	da802417 	ldw	r10,144(sp)
    8318:	1885883a 	add	r2,r3,r2
    831c:	40c00115 	stw	r3,4(r8)
    8320:	42800015 	stw	r10,0(r8)
    8324:	d8801c15 	stw	r2,112(sp)
    8328:	d9401b15 	stw	r5,108(sp)
    832c:	00c001c4 	movi	r3,7
    8330:	19426016 	blt	r3,r5,8cb4 <___vfiprintf_internal_r+0xe68>
    8334:	d8c01d87 	ldb	r3,118(sp)
    8338:	42000204 	addi	r8,r8,8
    833c:	29000044 	addi	r4,r5,1
    8340:	1801b31e 	bne	r3,zero,8a10 <___vfiprintf_internal_r+0xbc4>
    8344:	7001c026 	beq	r14,zero,8a48 <___vfiprintf_internal_r+0xbfc>
    8348:	d8c01d04 	addi	r3,sp,116
    834c:	10800084 	addi	r2,r2,2
    8350:	40c00015 	stw	r3,0(r8)
    8354:	00c00084 	movi	r3,2
    8358:	40c00115 	stw	r3,4(r8)
    835c:	d8801c15 	stw	r2,112(sp)
    8360:	d9001b15 	stw	r4,108(sp)
    8364:	00c001c4 	movi	r3,7
    8368:	1902650e 	bge	r3,r4,8d00 <___vfiprintf_internal_r+0xeb4>
    836c:	10029a1e 	bne	r2,zero,8dd8 <___vfiprintf_internal_r+0xf8c>
    8370:	00c02004 	movi	r3,128
    8374:	01000044 	movi	r4,1
    8378:	000b883a 	mov	r5,zero
    837c:	d811883a 	mov	r8,sp
    8380:	e0c1b31e 	bne	fp,r3,8a50 <___vfiprintf_internal_r+0xc04>
    8384:	8cb9c83a 	sub	fp,r17,r18
    8388:	0701b10e 	bge	zero,fp,8a50 <___vfiprintf_internal_r+0xc04>
    838c:	01c00404 	movi	r7,16
    8390:	3f03890e 	bge	r7,fp,91b8 <___vfiprintf_internal_r+0x136c>
    8394:	00c00074 	movhi	r3,1
    8398:	18c29c04 	addi	r3,r3,2672
    839c:	d8c02415 	stw	r3,144(sp)
    83a0:	8007883a 	mov	r3,r16
    83a4:	034001c4 	movi	r13,7
    83a8:	e021883a 	mov	r16,fp
    83ac:	da402515 	stw	r9,148(sp)
    83b0:	1839883a 	mov	fp,r3
    83b4:	00000506 	br	83cc <___vfiprintf_internal_r+0x580>
    83b8:	29800084 	addi	r6,r5,2
    83bc:	42000204 	addi	r8,r8,8
    83c0:	180b883a 	mov	r5,r3
    83c4:	843ffc04 	addi	r16,r16,-16
    83c8:	3c000d0e 	bge	r7,r16,8400 <___vfiprintf_internal_r+0x5b4>
    83cc:	10800404 	addi	r2,r2,16
    83d0:	28c00044 	addi	r3,r5,1
    83d4:	45c00015 	stw	r23,0(r8)
    83d8:	41c00115 	stw	r7,4(r8)
    83dc:	d8801c15 	stw	r2,112(sp)
    83e0:	d8c01b15 	stw	r3,108(sp)
    83e4:	68fff40e 	bge	r13,r3,83b8 <___vfiprintf_internal_r+0x56c>
    83e8:	1002241e 	bne	r2,zero,8c7c <___vfiprintf_internal_r+0xe30>
    83ec:	843ffc04 	addi	r16,r16,-16
    83f0:	01800044 	movi	r6,1
    83f4:	000b883a 	mov	r5,zero
    83f8:	d811883a 	mov	r8,sp
    83fc:	3c3ff316 	blt	r7,r16,83cc <___vfiprintf_internal_r+0x580>
    8400:	da402517 	ldw	r9,148(sp)
    8404:	e007883a 	mov	r3,fp
    8408:	8039883a 	mov	fp,r16
    840c:	1821883a 	mov	r16,r3
    8410:	d8c02417 	ldw	r3,144(sp)
    8414:	1705883a 	add	r2,r2,fp
    8418:	47000115 	stw	fp,4(r8)
    841c:	40c00015 	stw	r3,0(r8)
    8420:	d8801c15 	stw	r2,112(sp)
    8424:	d9801b15 	stw	r6,108(sp)
    8428:	00c001c4 	movi	r3,7
    842c:	19827616 	blt	r3,r6,8e08 <___vfiprintf_internal_r+0xfbc>
    8430:	4cf9c83a 	sub	fp,r9,r19
    8434:	42000204 	addi	r8,r8,8
    8438:	31000044 	addi	r4,r6,1
    843c:	300b883a 	mov	r5,r6
    8440:	07018516 	blt	zero,fp,8a58 <___vfiprintf_internal_r+0xc0c>
    8444:	9885883a 	add	r2,r19,r2
    8448:	45400015 	stw	r21,0(r8)
    844c:	44c00115 	stw	r19,4(r8)
    8450:	d8801c15 	stw	r2,112(sp)
    8454:	d9001b15 	stw	r4,108(sp)
    8458:	00c001c4 	movi	r3,7
    845c:	1901dd0e 	bge	r3,r4,8bd4 <___vfiprintf_internal_r+0xd88>
    8460:	1002401e 	bne	r2,zero,8d64 <___vfiprintf_internal_r+0xf18>
    8464:	d8001b15 	stw	zero,108(sp)
    8468:	a2c0010c 	andi	r11,r20,4
    846c:	58000226 	beq	r11,zero,8478 <___vfiprintf_internal_r+0x62c>
    8470:	8ca7c83a 	sub	r19,r17,r18
    8474:	04c2f216 	blt	zero,r19,9040 <___vfiprintf_internal_r+0x11f4>
    8478:	8c80010e 	bge	r17,r18,8480 <___vfiprintf_internal_r+0x634>
    847c:	9023883a 	mov	r17,r18
    8480:	da802317 	ldw	r10,140(sp)
    8484:	5455883a 	add	r10,r10,r17
    8488:	da802315 	stw	r10,140(sp)
    848c:	d8001b15 	stw	zero,108(sp)
    8490:	d811883a 	mov	r8,sp
    8494:	003ea206 	br	7f20 <___vfiprintf_internal_r+0xd4>
    8498:	a5000814 	ori	r20,r20,32
    849c:	80c00007 	ldb	r3,0(r16)
    84a0:	003ec906 	br	7fc8 <___vfiprintf_internal_r+0x17c>
    84a4:	80c00007 	ldb	r3,0(r16)
    84a8:	1b030926 	beq	r3,r12,90d0 <___vfiprintf_internal_r+0x1284>
    84ac:	a5000414 	ori	r20,r20,16
    84b0:	003ec506 	br	7fc8 <___vfiprintf_internal_r+0x17c>
    84b4:	21003fcc 	andi	r4,r4,255
    84b8:	20035e1e 	bne	r4,zero,9234 <___vfiprintf_internal_r+0x13e8>
    84bc:	a080080c 	andi	r2,r20,32
    84c0:	1002a526 	beq	r2,zero,8f58 <___vfiprintf_internal_r+0x110c>
    84c4:	da802217 	ldw	r10,136(sp)
    84c8:	50800017 	ldw	r2,0(r10)
    84cc:	da802317 	ldw	r10,140(sp)
    84d0:	5007d7fa 	srai	r3,r10,31
    84d4:	da802217 	ldw	r10,136(sp)
    84d8:	10c00115 	stw	r3,4(r2)
    84dc:	52800104 	addi	r10,r10,4
    84e0:	da802215 	stw	r10,136(sp)
    84e4:	da802317 	ldw	r10,140(sp)
    84e8:	12800015 	stw	r10,0(r2)
    84ec:	003e8c06 	br	7f20 <___vfiprintf_internal_r+0xd4>
    84f0:	21003fcc 	andi	r4,r4,255
    84f4:	2003511e 	bne	r4,zero,923c <___vfiprintf_internal_r+0x13f0>
    84f8:	a080080c 	andi	r2,r20,32
    84fc:	1000a126 	beq	r2,zero,8784 <___vfiprintf_internal_r+0x938>
    8500:	da802217 	ldw	r10,136(sp)
    8504:	d8001d85 	stb	zero,118(sp)
    8508:	50800204 	addi	r2,r10,8
    850c:	54800017 	ldw	r18,0(r10)
    8510:	54c00117 	ldw	r19,4(r10)
    8514:	4802b416 	blt	r9,zero,8fe8 <___vfiprintf_internal_r+0x119c>
    8518:	013fdfc4 	movi	r4,-129
    851c:	94c6b03a 	or	r3,r18,r19
    8520:	d8802215 	stw	r2,136(sp)
    8524:	a128703a 	and	r20,r20,r4
    8528:	1800a226 	beq	r3,zero,87b4 <___vfiprintf_internal_r+0x968>
    852c:	0039883a 	mov	fp,zero
    8530:	dd401a04 	addi	r21,sp,104
    8534:	9006d0fa 	srli	r3,r18,3
    8538:	9808977a 	slli	r4,r19,29
    853c:	9826d0fa 	srli	r19,r19,3
    8540:	948001cc 	andi	r18,r18,7
    8544:	90800c04 	addi	r2,r18,48
    8548:	ad7fffc4 	addi	r21,r21,-1
    854c:	20e4b03a 	or	r18,r4,r3
    8550:	a8800005 	stb	r2,0(r21)
    8554:	94c6b03a 	or	r3,r18,r19
    8558:	183ff61e 	bne	r3,zero,8534 <___vfiprintf_internal_r+0x6e8>
    855c:	a0c0004c 	andi	r3,r20,1
    8560:	18005926 	beq	r3,zero,86c8 <___vfiprintf_internal_r+0x87c>
    8564:	10803fcc 	andi	r2,r2,255
    8568:	1080201c 	xori	r2,r2,128
    856c:	10bfe004 	addi	r2,r2,-128
    8570:	00c00c04 	movi	r3,48
    8574:	10c05426 	beq	r2,r3,86c8 <___vfiprintf_internal_r+0x87c>
    8578:	da801e17 	ldw	r10,120(sp)
    857c:	a8bfffc4 	addi	r2,r21,-1
    8580:	a8ffffc5 	stb	r3,-1(r21)
    8584:	50a7c83a 	sub	r19,r10,r2
    8588:	102b883a 	mov	r21,r2
    858c:	003f2f06 	br	824c <___vfiprintf_internal_r+0x400>
    8590:	21003fcc 	andi	r4,r4,255
    8594:	2003421e 	bne	r4,zero,92a0 <___vfiprintf_internal_r+0x1454>
    8598:	00800074 	movhi	r2,1
    859c:	10823b04 	addi	r2,r2,2284
    85a0:	d8802615 	stw	r2,152(sp)
    85a4:	a080080c 	andi	r2,r20,32
    85a8:	1000aa26 	beq	r2,zero,8854 <___vfiprintf_internal_r+0xa08>
    85ac:	da802217 	ldw	r10,136(sp)
    85b0:	54800017 	ldw	r18,0(r10)
    85b4:	54c00117 	ldw	r19,4(r10)
    85b8:	52800204 	addi	r10,r10,8
    85bc:	da802215 	stw	r10,136(sp)
    85c0:	a080004c 	andi	r2,r20,1
    85c4:	1001d226 	beq	r2,zero,8d10 <___vfiprintf_internal_r+0xec4>
    85c8:	94c4b03a 	or	r2,r18,r19
    85cc:	1002351e 	bne	r2,zero,8ea4 <___vfiprintf_internal_r+0x1058>
    85d0:	d8001d85 	stb	zero,118(sp)
    85d4:	48022216 	blt	r9,zero,8e60 <___vfiprintf_internal_r+0x1014>
    85d8:	00bfdfc4 	movi	r2,-129
    85dc:	a0a8703a 	and	r20,r20,r2
    85e0:	003f1506 	br	8238 <___vfiprintf_internal_r+0x3ec>
    85e4:	da802217 	ldw	r10,136(sp)
    85e8:	04800044 	movi	r18,1
    85ec:	d8001d85 	stb	zero,118(sp)
    85f0:	50800017 	ldw	r2,0(r10)
    85f4:	52800104 	addi	r10,r10,4
    85f8:	da802215 	stw	r10,136(sp)
    85fc:	d8801005 	stb	r2,64(sp)
    8600:	9027883a 	mov	r19,r18
    8604:	dd401004 	addi	r21,sp,64
    8608:	0013883a 	mov	r9,zero
    860c:	003f1706 	br	826c <___vfiprintf_internal_r+0x420>
    8610:	21003fcc 	andi	r4,r4,255
    8614:	2003201e 	bne	r4,zero,9298 <___vfiprintf_internal_r+0x144c>
    8618:	a080080c 	andi	r2,r20,32
    861c:	10004b26 	beq	r2,zero,874c <___vfiprintf_internal_r+0x900>
    8620:	da802217 	ldw	r10,136(sp)
    8624:	50800117 	ldw	r2,4(r10)
    8628:	54800017 	ldw	r18,0(r10)
    862c:	52800204 	addi	r10,r10,8
    8630:	da802215 	stw	r10,136(sp)
    8634:	1027883a 	mov	r19,r2
    8638:	10022c16 	blt	r2,zero,8eec <___vfiprintf_internal_r+0x10a0>
    863c:	df001d83 	ldbu	fp,118(sp)
    8640:	48007216 	blt	r9,zero,880c <___vfiprintf_internal_r+0x9c0>
    8644:	00ffdfc4 	movi	r3,-129
    8648:	94c4b03a 	or	r2,r18,r19
    864c:	a0e8703a 	and	r20,r20,r3
    8650:	1000cc26 	beq	r2,zero,8984 <___vfiprintf_internal_r+0xb38>
    8654:	98021026 	beq	r19,zero,8e98 <___vfiprintf_internal_r+0x104c>
    8658:	dc402415 	stw	r17,144(sp)
    865c:	dc002515 	stw	r16,148(sp)
    8660:	9823883a 	mov	r17,r19
    8664:	9021883a 	mov	r16,r18
    8668:	dd401a04 	addi	r21,sp,104
    866c:	4825883a 	mov	r18,r9
    8670:	4027883a 	mov	r19,r8
    8674:	8009883a 	mov	r4,r16
    8678:	880b883a 	mov	r5,r17
    867c:	01800284 	movi	r6,10
    8680:	000f883a 	mov	r7,zero
    8684:	000a22c0 	call	a22c <__umoddi3>
    8688:	10800c04 	addi	r2,r2,48
    868c:	ad7fffc4 	addi	r21,r21,-1
    8690:	8009883a 	mov	r4,r16
    8694:	880b883a 	mov	r5,r17
    8698:	a8800005 	stb	r2,0(r21)
    869c:	01800284 	movi	r6,10
    86a0:	000f883a 	mov	r7,zero
    86a4:	0009cb40 	call	9cb4 <__udivdi3>
    86a8:	1021883a 	mov	r16,r2
    86ac:	10c4b03a 	or	r2,r2,r3
    86b0:	1823883a 	mov	r17,r3
    86b4:	103fef1e 	bne	r2,zero,8674 <___vfiprintf_internal_r+0x828>
    86b8:	dc402417 	ldw	r17,144(sp)
    86bc:	dc002517 	ldw	r16,148(sp)
    86c0:	9013883a 	mov	r9,r18
    86c4:	9811883a 	mov	r8,r19
    86c8:	da801e17 	ldw	r10,120(sp)
    86cc:	5567c83a 	sub	r19,r10,r21
    86d0:	003ede06 	br	824c <___vfiprintf_internal_r+0x400>
    86d4:	38803fcc 	andi	r2,r7,255
    86d8:	1080201c 	xori	r2,r2,128
    86dc:	10bfe004 	addi	r2,r2,-128
    86e0:	1002371e 	bne	r2,zero,8fc0 <___vfiprintf_internal_r+0x1174>
    86e4:	01000044 	movi	r4,1
    86e8:	01c00804 	movi	r7,32
    86ec:	80c00007 	ldb	r3,0(r16)
    86f0:	003e3506 	br	7fc8 <___vfiprintf_internal_r+0x17c>
    86f4:	a5000054 	ori	r20,r20,1
    86f8:	80c00007 	ldb	r3,0(r16)
    86fc:	003e3206 	br	7fc8 <___vfiprintf_internal_r+0x17c>
    8700:	a5002014 	ori	r20,r20,128
    8704:	80c00007 	ldb	r3,0(r16)
    8708:	003e2f06 	br	7fc8 <___vfiprintf_internal_r+0x17c>
    870c:	8015883a 	mov	r10,r16
    8710:	0023883a 	mov	r17,zero
    8714:	18bff404 	addi	r2,r3,-48
    8718:	50c00007 	ldb	r3,0(r10)
    871c:	8c4002a4 	muli	r17,r17,10
    8720:	84000044 	addi	r16,r16,1
    8724:	8015883a 	mov	r10,r16
    8728:	1463883a 	add	r17,r2,r17
    872c:	18bff404 	addi	r2,r3,-48
    8730:	30bff92e 	bgeu	r6,r2,8718 <___vfiprintf_internal_r+0x8cc>
    8734:	003e2506 	br	7fcc <___vfiprintf_internal_r+0x180>
    8738:	21003fcc 	andi	r4,r4,255
    873c:	2002d41e 	bne	r4,zero,9290 <___vfiprintf_internal_r+0x1444>
    8740:	a5000414 	ori	r20,r20,16
    8744:	a080080c 	andi	r2,r20,32
    8748:	103fb51e 	bne	r2,zero,8620 <___vfiprintf_internal_r+0x7d4>
    874c:	a080040c 	andi	r2,r20,16
    8750:	1001f826 	beq	r2,zero,8f34 <___vfiprintf_internal_r+0x10e8>
    8754:	da802217 	ldw	r10,136(sp)
    8758:	54800017 	ldw	r18,0(r10)
    875c:	52800104 	addi	r10,r10,4
    8760:	da802215 	stw	r10,136(sp)
    8764:	9027d7fa 	srai	r19,r18,31
    8768:	9805883a 	mov	r2,r19
    876c:	003fb206 	br	8638 <___vfiprintf_internal_r+0x7ec>
    8770:	21003fcc 	andi	r4,r4,255
    8774:	2002c41e 	bne	r4,zero,9288 <___vfiprintf_internal_r+0x143c>
    8778:	a5000414 	ori	r20,r20,16
    877c:	a080080c 	andi	r2,r20,32
    8780:	103f5f1e 	bne	r2,zero,8500 <___vfiprintf_internal_r+0x6b4>
    8784:	a080040c 	andi	r2,r20,16
    8788:	10020f26 	beq	r2,zero,8fc8 <___vfiprintf_internal_r+0x117c>
    878c:	da802217 	ldw	r10,136(sp)
    8790:	d8001d85 	stb	zero,118(sp)
    8794:	0027883a 	mov	r19,zero
    8798:	50800104 	addi	r2,r10,4
    879c:	54800017 	ldw	r18,0(r10)
    87a0:	48021116 	blt	r9,zero,8fe8 <___vfiprintf_internal_r+0x119c>
    87a4:	00ffdfc4 	movi	r3,-129
    87a8:	d8802215 	stw	r2,136(sp)
    87ac:	a0e8703a 	and	r20,r20,r3
    87b0:	903f5e1e 	bne	r18,zero,852c <___vfiprintf_internal_r+0x6e0>
    87b4:	0039883a 	mov	fp,zero
    87b8:	4802a626 	beq	r9,zero,9254 <___vfiprintf_internal_r+0x1408>
    87bc:	0025883a 	mov	r18,zero
    87c0:	0027883a 	mov	r19,zero
    87c4:	003f5a06 	br	8530 <___vfiprintf_internal_r+0x6e4>
    87c8:	21003fcc 	andi	r4,r4,255
    87cc:	20029f1e 	bne	r4,zero,924c <___vfiprintf_internal_r+0x1400>
    87d0:	a5000414 	ori	r20,r20,16
    87d4:	a080080c 	andi	r2,r20,32
    87d8:	10005e1e 	bne	r2,zero,8954 <___vfiprintf_internal_r+0xb08>
    87dc:	a080040c 	andi	r2,r20,16
    87e0:	1001a21e 	bne	r2,zero,8e6c <___vfiprintf_internal_r+0x1020>
    87e4:	a080100c 	andi	r2,r20,64
    87e8:	d8001d85 	stb	zero,118(sp)
    87ec:	da802217 	ldw	r10,136(sp)
    87f0:	1002231e 	bne	r2,zero,9080 <___vfiprintf_internal_r+0x1234>
    87f4:	50800104 	addi	r2,r10,4
    87f8:	54800017 	ldw	r18,0(r10)
    87fc:	0027883a 	mov	r19,zero
    8800:	4801a00e 	bge	r9,zero,8e84 <___vfiprintf_internal_r+0x1038>
    8804:	d8802215 	stw	r2,136(sp)
    8808:	0039883a 	mov	fp,zero
    880c:	94c4b03a 	or	r2,r18,r19
    8810:	103f901e 	bne	r2,zero,8654 <___vfiprintf_internal_r+0x808>
    8814:	00800044 	movi	r2,1
    8818:	10803fcc 	andi	r2,r2,255
    881c:	00c00044 	movi	r3,1
    8820:	10c05926 	beq	r2,r3,8988 <___vfiprintf_internal_r+0xb3c>
    8824:	00c00084 	movi	r3,2
    8828:	10ffe41e 	bne	r2,r3,87bc <___vfiprintf_internal_r+0x970>
    882c:	0025883a 	mov	r18,zero
    8830:	0027883a 	mov	r19,zero
    8834:	00013d06 	br	8d2c <___vfiprintf_internal_r+0xee0>
    8838:	21003fcc 	andi	r4,r4,255
    883c:	2002811e 	bne	r4,zero,9244 <___vfiprintf_internal_r+0x13f8>
    8840:	00800074 	movhi	r2,1
    8844:	10823604 	addi	r2,r2,2264
    8848:	d8802615 	stw	r2,152(sp)
    884c:	a080080c 	andi	r2,r20,32
    8850:	103f561e 	bne	r2,zero,85ac <___vfiprintf_internal_r+0x760>
    8854:	a080040c 	andi	r2,r20,16
    8858:	1001d126 	beq	r2,zero,8fa0 <___vfiprintf_internal_r+0x1154>
    885c:	da802217 	ldw	r10,136(sp)
    8860:	0027883a 	mov	r19,zero
    8864:	54800017 	ldw	r18,0(r10)
    8868:	52800104 	addi	r10,r10,4
    886c:	da802215 	stw	r10,136(sp)
    8870:	003f5306 	br	85c0 <___vfiprintf_internal_r+0x774>
    8874:	da802217 	ldw	r10,136(sp)
    8878:	d8001d85 	stb	zero,118(sp)
    887c:	55400017 	ldw	r21,0(r10)
    8880:	50c00104 	addi	r3,r10,4
    8884:	a8024226 	beq	r21,zero,9190 <___vfiprintf_internal_r+0x1344>
    8888:	48021816 	blt	r9,zero,90ec <___vfiprintf_internal_r+0x12a0>
    888c:	480d883a 	mov	r6,r9
    8890:	000b883a 	mov	r5,zero
    8894:	a809883a 	mov	r4,r21
    8898:	d8c02a15 	stw	r3,168(sp)
    889c:	da002b15 	stw	r8,172(sp)
    88a0:	da402c15 	stw	r9,176(sp)
    88a4:	00060480 	call	6048 <memchr>
    88a8:	d8c02a17 	ldw	r3,168(sp)
    88ac:	da002b17 	ldw	r8,172(sp)
    88b0:	da402c17 	ldw	r9,176(sp)
    88b4:	10024826 	beq	r2,zero,91d8 <___vfiprintf_internal_r+0x138c>
    88b8:	1567c83a 	sub	r19,r2,r21
    88bc:	df001d83 	ldbu	fp,118(sp)
    88c0:	d8c02215 	stw	r3,136(sp)
    88c4:	0013883a 	mov	r9,zero
    88c8:	003e6006 	br	824c <___vfiprintf_internal_r+0x400>
    88cc:	21003fcc 	andi	r4,r4,255
    88d0:	203fc026 	beq	r4,zero,87d4 <___vfiprintf_internal_r+0x988>
    88d4:	d9c01d85 	stb	r7,118(sp)
    88d8:	003fbe06 	br	87d4 <___vfiprintf_internal_r+0x988>
    88dc:	da802217 	ldw	r10,136(sp)
    88e0:	54400017 	ldw	r17,0(r10)
    88e4:	50800104 	addi	r2,r10,4
    88e8:	883e3b16 	blt	r17,zero,81d8 <___vfiprintf_internal_r+0x38c>
    88ec:	d8802215 	stw	r2,136(sp)
    88f0:	80c00007 	ldb	r3,0(r16)
    88f4:	003db406 	br	7fc8 <___vfiprintf_internal_r+0x17c>
    88f8:	01000044 	movi	r4,1
    88fc:	01c00ac4 	movi	r7,43
    8900:	80c00007 	ldb	r3,0(r16)
    8904:	003db006 	br	7fc8 <___vfiprintf_internal_r+0x17c>
    8908:	80c00007 	ldb	r3,0(r16)
    890c:	82800044 	addi	r10,r16,1
    8910:	1b423c26 	beq	r3,r13,9204 <___vfiprintf_internal_r+0x13b8>
    8914:	18bff404 	addi	r2,r3,-48
    8918:	0013883a 	mov	r9,zero
    891c:	30822b36 	bltu	r6,r2,91cc <___vfiprintf_internal_r+0x1380>
    8920:	50c00007 	ldb	r3,0(r10)
    8924:	4a4002a4 	muli	r9,r9,10
    8928:	54000044 	addi	r16,r10,1
    892c:	8015883a 	mov	r10,r16
    8930:	4893883a 	add	r9,r9,r2
    8934:	18bff404 	addi	r2,r3,-48
    8938:	30bff92e 	bgeu	r6,r2,8920 <___vfiprintf_internal_r+0xad4>
    893c:	483da30e 	bge	r9,zero,7fcc <___vfiprintf_internal_r+0x180>
    8940:	027fffc4 	movi	r9,-1
    8944:	003da106 	br	7fcc <___vfiprintf_internal_r+0x180>
    8948:	a5001014 	ori	r20,r20,64
    894c:	80c00007 	ldb	r3,0(r16)
    8950:	003d9d06 	br	7fc8 <___vfiprintf_internal_r+0x17c>
    8954:	da802217 	ldw	r10,136(sp)
    8958:	d8001d85 	stb	zero,118(sp)
    895c:	50c00204 	addi	r3,r10,8
    8960:	54800017 	ldw	r18,0(r10)
    8964:	54c00117 	ldw	r19,4(r10)
    8968:	4801ca16 	blt	r9,zero,9094 <___vfiprintf_internal_r+0x1248>
    896c:	013fdfc4 	movi	r4,-129
    8970:	94c4b03a 	or	r2,r18,r19
    8974:	d8c02215 	stw	r3,136(sp)
    8978:	a128703a 	and	r20,r20,r4
    897c:	0039883a 	mov	fp,zero
    8980:	103f341e 	bne	r2,zero,8654 <___vfiprintf_internal_r+0x808>
    8984:	483e2e26 	beq	r9,zero,8240 <___vfiprintf_internal_r+0x3f4>
    8988:	0025883a 	mov	r18,zero
    898c:	94800c04 	addi	r18,r18,48
    8990:	dc8019c5 	stb	r18,103(sp)
    8994:	dcc02717 	ldw	r19,156(sp)
    8998:	dd4019c4 	addi	r21,sp,103
    899c:	003e2b06 	br	824c <___vfiprintf_internal_r+0x400>
    89a0:	21003fcc 	andi	r4,r4,255
    89a4:	2002361e 	bne	r4,zero,9280 <___vfiprintf_internal_r+0x1434>
    89a8:	1801c126 	beq	r3,zero,90b0 <___vfiprintf_internal_r+0x1264>
    89ac:	04800044 	movi	r18,1
    89b0:	d8c01005 	stb	r3,64(sp)
    89b4:	d8001d85 	stb	zero,118(sp)
    89b8:	9027883a 	mov	r19,r18
    89bc:	dd401004 	addi	r21,sp,64
    89c0:	003f1106 	br	8608 <___vfiprintf_internal_r+0x7bc>
    89c4:	d9402117 	ldw	r5,132(sp)
    89c8:	d9002017 	ldw	r4,128(sp)
    89cc:	d9801a04 	addi	r6,sp,104
    89d0:	d9c02b15 	stw	r7,172(sp)
    89d4:	dbc02a15 	stw	r15,168(sp)
    89d8:	0007d380 	call	7d38 <__sprint_r.part.0>
    89dc:	d9c02b17 	ldw	r7,172(sp)
    89e0:	dbc02a17 	ldw	r15,168(sp)
    89e4:	10006d1e 	bne	r2,zero,8b9c <___vfiprintf_internal_r+0xd50>
    89e8:	d9801b17 	ldw	r6,108(sp)
    89ec:	d8801c17 	ldw	r2,112(sp)
    89f0:	d811883a 	mov	r8,sp
    89f4:	31400044 	addi	r5,r6,1
    89f8:	003e3306 	br	82c8 <___vfiprintf_internal_r+0x47c>
    89fc:	d9401b17 	ldw	r5,108(sp)
    8a00:	d8801c17 	ldw	r2,112(sp)
    8a04:	29000044 	addi	r4,r5,1
    8a08:	d8c01d87 	ldb	r3,118(sp)
    8a0c:	183e4d26 	beq	r3,zero,8344 <___vfiprintf_internal_r+0x4f8>
    8a10:	00c00044 	movi	r3,1
    8a14:	d9401d84 	addi	r5,sp,118
    8a18:	10c5883a 	add	r2,r2,r3
    8a1c:	41400015 	stw	r5,0(r8)
    8a20:	40c00115 	stw	r3,4(r8)
    8a24:	d8801c15 	stw	r2,112(sp)
    8a28:	d9001b15 	stw	r4,108(sp)
    8a2c:	014001c4 	movi	r5,7
    8a30:	2900a90e 	bge	r5,r4,8cd8 <___vfiprintf_internal_r+0xe8c>
    8a34:	1000da1e 	bne	r2,zero,8da0 <___vfiprintf_internal_r+0xf54>
    8a38:	7000ab1e 	bne	r14,zero,8ce8 <___vfiprintf_internal_r+0xe9c>
    8a3c:	000b883a 	mov	r5,zero
    8a40:	1809883a 	mov	r4,r3
    8a44:	d811883a 	mov	r8,sp
    8a48:	00c02004 	movi	r3,128
    8a4c:	e0fe4d26 	beq	fp,r3,8384 <___vfiprintf_internal_r+0x538>
    8a50:	4cf9c83a 	sub	fp,r9,r19
    8a54:	073e7b0e 	bge	zero,fp,8444 <___vfiprintf_internal_r+0x5f8>
    8a58:	01c00404 	movi	r7,16
    8a5c:	3f01900e 	bge	r7,fp,90a0 <___vfiprintf_internal_r+0x1254>
    8a60:	00c00074 	movhi	r3,1
    8a64:	18c29c04 	addi	r3,r3,2672
    8a68:	d8c02415 	stw	r3,144(sp)
    8a6c:	034001c4 	movi	r13,7
    8a70:	00000506 	br	8a88 <___vfiprintf_internal_r+0xc3c>
    8a74:	29000084 	addi	r4,r5,2
    8a78:	42000204 	addi	r8,r8,8
    8a7c:	180b883a 	mov	r5,r3
    8a80:	e73ffc04 	addi	fp,fp,-16
    8a84:	3f000d0e 	bge	r7,fp,8abc <___vfiprintf_internal_r+0xc70>
    8a88:	10800404 	addi	r2,r2,16
    8a8c:	28c00044 	addi	r3,r5,1
    8a90:	45c00015 	stw	r23,0(r8)
    8a94:	41c00115 	stw	r7,4(r8)
    8a98:	d8801c15 	stw	r2,112(sp)
    8a9c:	d8c01b15 	stw	r3,108(sp)
    8aa0:	68fff40e 	bge	r13,r3,8a74 <___vfiprintf_internal_r+0xc28>
    8aa4:	1000101e 	bne	r2,zero,8ae8 <___vfiprintf_internal_r+0xc9c>
    8aa8:	e73ffc04 	addi	fp,fp,-16
    8aac:	01000044 	movi	r4,1
    8ab0:	000b883a 	mov	r5,zero
    8ab4:	d811883a 	mov	r8,sp
    8ab8:	3f3ff316 	blt	r7,fp,8a88 <___vfiprintf_internal_r+0xc3c>
    8abc:	da802417 	ldw	r10,144(sp)
    8ac0:	1705883a 	add	r2,r2,fp
    8ac4:	47000115 	stw	fp,4(r8)
    8ac8:	42800015 	stw	r10,0(r8)
    8acc:	d8801c15 	stw	r2,112(sp)
    8ad0:	d9001b15 	stw	r4,108(sp)
    8ad4:	00c001c4 	movi	r3,7
    8ad8:	19003616 	blt	r3,r4,8bb4 <___vfiprintf_internal_r+0xd68>
    8adc:	42000204 	addi	r8,r8,8
    8ae0:	21000044 	addi	r4,r4,1
    8ae4:	003e5706 	br	8444 <___vfiprintf_internal_r+0x5f8>
    8ae8:	d9402117 	ldw	r5,132(sp)
    8aec:	d9002017 	ldw	r4,128(sp)
    8af0:	d9801a04 	addi	r6,sp,104
    8af4:	d9c02b15 	stw	r7,172(sp)
    8af8:	db402a15 	stw	r13,168(sp)
    8afc:	0007d380 	call	7d38 <__sprint_r.part.0>
    8b00:	d9c02b17 	ldw	r7,172(sp)
    8b04:	db402a17 	ldw	r13,168(sp)
    8b08:	1000241e 	bne	r2,zero,8b9c <___vfiprintf_internal_r+0xd50>
    8b0c:	d9401b17 	ldw	r5,108(sp)
    8b10:	d8801c17 	ldw	r2,112(sp)
    8b14:	d811883a 	mov	r8,sp
    8b18:	29000044 	addi	r4,r5,1
    8b1c:	003fd806 	br	8a80 <___vfiprintf_internal_r+0xc34>
    8b20:	d9401b17 	ldw	r5,108(sp)
    8b24:	00c00074 	movhi	r3,1
    8b28:	18c2a004 	addi	r3,r3,2688
    8b2c:	d8c02415 	stw	r3,144(sp)
    8b30:	29400044 	addi	r5,r5,1
    8b34:	d8c02417 	ldw	r3,144(sp)
    8b38:	14c5883a 	add	r2,r2,r19
    8b3c:	44c00115 	stw	r19,4(r8)
    8b40:	40c00015 	stw	r3,0(r8)
    8b44:	d8801c15 	stw	r2,112(sp)
    8b48:	d9401b15 	stw	r5,108(sp)
    8b4c:	00c001c4 	movi	r3,7
    8b50:	1940070e 	bge	r3,r5,8b70 <___vfiprintf_internal_r+0xd24>
    8b54:	103e4826 	beq	r2,zero,8478 <___vfiprintf_internal_r+0x62c>
    8b58:	d9402117 	ldw	r5,132(sp)
    8b5c:	d9002017 	ldw	r4,128(sp)
    8b60:	d9801a04 	addi	r6,sp,104
    8b64:	0007d380 	call	7d38 <__sprint_r.part.0>
    8b68:	10000c1e 	bne	r2,zero,8b9c <___vfiprintf_internal_r+0xd50>
    8b6c:	d8801c17 	ldw	r2,112(sp)
    8b70:	8c80010e 	bge	r17,r18,8b78 <___vfiprintf_internal_r+0xd2c>
    8b74:	9023883a 	mov	r17,r18
    8b78:	da802317 	ldw	r10,140(sp)
    8b7c:	5455883a 	add	r10,r10,r17
    8b80:	da802315 	stw	r10,140(sp)
    8b84:	103e4126 	beq	r2,zero,848c <___vfiprintf_internal_r+0x640>
    8b88:	d9402117 	ldw	r5,132(sp)
    8b8c:	d9002017 	ldw	r4,128(sp)
    8b90:	d9801a04 	addi	r6,sp,104
    8b94:	0007d380 	call	7d38 <__sprint_r.part.0>
    8b98:	103e3c26 	beq	r2,zero,848c <___vfiprintf_internal_r+0x640>
    8b9c:	dd002117 	ldw	r20,132(sp)
    8ba0:	a080030b 	ldhu	r2,12(r20)
    8ba4:	1080100c 	andi	r2,r2,64
    8ba8:	1001231e 	bne	r2,zero,9038 <___vfiprintf_internal_r+0x11ec>
    8bac:	d8802317 	ldw	r2,140(sp)
    8bb0:	003d7b06 	br	81a0 <___vfiprintf_internal_r+0x354>
    8bb4:	1000991e 	bne	r2,zero,8e1c <___vfiprintf_internal_r+0xfd0>
    8bb8:	00c00044 	movi	r3,1
    8bbc:	9805883a 	mov	r2,r19
    8bc0:	dd400015 	stw	r21,0(sp)
    8bc4:	dcc00115 	stw	r19,4(sp)
    8bc8:	dcc01c15 	stw	r19,112(sp)
    8bcc:	d8c01b15 	stw	r3,108(sp)
    8bd0:	d811883a 	mov	r8,sp
    8bd4:	42000204 	addi	r8,r8,8
    8bd8:	a2c0010c 	andi	r11,r20,4
    8bdc:	583fe426 	beq	r11,zero,8b70 <___vfiprintf_internal_r+0xd24>
    8be0:	8ca7c83a 	sub	r19,r17,r18
    8be4:	04ffe20e 	bge	zero,r19,8b70 <___vfiprintf_internal_r+0xd24>
    8be8:	01c00404 	movi	r7,16
    8bec:	3cffcc0e 	bge	r7,r19,8b20 <___vfiprintf_internal_r+0xcd4>
    8bf0:	02800074 	movhi	r10,1
    8bf4:	5282a004 	addi	r10,r10,2688
    8bf8:	d9001b17 	ldw	r4,108(sp)
    8bfc:	da802415 	stw	r10,144(sp)
    8c00:	382b883a 	mov	r21,r7
    8c04:	050001c4 	movi	r20,7
    8c08:	df002017 	ldw	fp,128(sp)
    8c0c:	00000506 	br	8c24 <___vfiprintf_internal_r+0xdd8>
    8c10:	21400084 	addi	r5,r4,2
    8c14:	42000204 	addi	r8,r8,8
    8c18:	1809883a 	mov	r4,r3
    8c1c:	9cfffc04 	addi	r19,r19,-16
    8c20:	acffc40e 	bge	r21,r19,8b34 <___vfiprintf_internal_r+0xce8>
    8c24:	10800404 	addi	r2,r2,16
    8c28:	20c00044 	addi	r3,r4,1
    8c2c:	45800015 	stw	r22,0(r8)
    8c30:	45400115 	stw	r21,4(r8)
    8c34:	d8801c15 	stw	r2,112(sp)
    8c38:	d8c01b15 	stw	r3,108(sp)
    8c3c:	a0fff40e 	bge	r20,r3,8c10 <___vfiprintf_internal_r+0xdc4>
    8c40:	1000041e 	bne	r2,zero,8c54 <___vfiprintf_internal_r+0xe08>
    8c44:	01400044 	movi	r5,1
    8c48:	0009883a 	mov	r4,zero
    8c4c:	d811883a 	mov	r8,sp
    8c50:	003ff206 	br	8c1c <___vfiprintf_internal_r+0xdd0>
    8c54:	d9402117 	ldw	r5,132(sp)
    8c58:	d9801a04 	addi	r6,sp,104
    8c5c:	e009883a 	mov	r4,fp
    8c60:	0007d380 	call	7d38 <__sprint_r.part.0>
    8c64:	103fcd1e 	bne	r2,zero,8b9c <___vfiprintf_internal_r+0xd50>
    8c68:	d9001b17 	ldw	r4,108(sp)
    8c6c:	d8801c17 	ldw	r2,112(sp)
    8c70:	d811883a 	mov	r8,sp
    8c74:	21400044 	addi	r5,r4,1
    8c78:	003fe806 	br	8c1c <___vfiprintf_internal_r+0xdd0>
    8c7c:	d9402117 	ldw	r5,132(sp)
    8c80:	d9002017 	ldw	r4,128(sp)
    8c84:	d9801a04 	addi	r6,sp,104
    8c88:	d9c02b15 	stw	r7,172(sp)
    8c8c:	db402a15 	stw	r13,168(sp)
    8c90:	0007d380 	call	7d38 <__sprint_r.part.0>
    8c94:	d9c02b17 	ldw	r7,172(sp)
    8c98:	db402a17 	ldw	r13,168(sp)
    8c9c:	103fbf1e 	bne	r2,zero,8b9c <___vfiprintf_internal_r+0xd50>
    8ca0:	d9401b17 	ldw	r5,108(sp)
    8ca4:	d8801c17 	ldw	r2,112(sp)
    8ca8:	d811883a 	mov	r8,sp
    8cac:	29800044 	addi	r6,r5,1
    8cb0:	003dc406 	br	83c4 <___vfiprintf_internal_r+0x578>
    8cb4:	1000d21e 	bne	r2,zero,9000 <___vfiprintf_internal_r+0x11b4>
    8cb8:	d8c01d87 	ldb	r3,118(sp)
    8cbc:	18009526 	beq	r3,zero,8f14 <___vfiprintf_internal_r+0x10c8>
    8cc0:	00800044 	movi	r2,1
    8cc4:	d8c01d84 	addi	r3,sp,118
    8cc8:	1009883a 	mov	r4,r2
    8ccc:	d8c00015 	stw	r3,0(sp)
    8cd0:	d8800115 	stw	r2,4(sp)
    8cd4:	d811883a 	mov	r8,sp
    8cd8:	200b883a 	mov	r5,r4
    8cdc:	42000204 	addi	r8,r8,8
    8ce0:	21000044 	addi	r4,r4,1
    8ce4:	003d9706 	br	8344 <___vfiprintf_internal_r+0x4f8>
    8ce8:	d9001d04 	addi	r4,sp,116
    8cec:	00800084 	movi	r2,2
    8cf0:	d9000015 	stw	r4,0(sp)
    8cf4:	d8800115 	stw	r2,4(sp)
    8cf8:	1809883a 	mov	r4,r3
    8cfc:	d811883a 	mov	r8,sp
    8d00:	200b883a 	mov	r5,r4
    8d04:	42000204 	addi	r8,r8,8
    8d08:	21000044 	addi	r4,r4,1
    8d0c:	003f4e06 	br	8a48 <___vfiprintf_internal_r+0xbfc>
    8d10:	d8001d85 	stb	zero,118(sp)
    8d14:	48005016 	blt	r9,zero,8e58 <___vfiprintf_internal_r+0x100c>
    8d18:	00ffdfc4 	movi	r3,-129
    8d1c:	94c4b03a 	or	r2,r18,r19
    8d20:	a0e8703a 	and	r20,r20,r3
    8d24:	103d4426 	beq	r2,zero,8238 <___vfiprintf_internal_r+0x3ec>
    8d28:	0039883a 	mov	fp,zero
    8d2c:	d9002617 	ldw	r4,152(sp)
    8d30:	dd401a04 	addi	r21,sp,104
    8d34:	908003cc 	andi	r2,r18,15
    8d38:	9806973a 	slli	r3,r19,28
    8d3c:	2085883a 	add	r2,r4,r2
    8d40:	9024d13a 	srli	r18,r18,4
    8d44:	10800003 	ldbu	r2,0(r2)
    8d48:	9826d13a 	srli	r19,r19,4
    8d4c:	ad7fffc4 	addi	r21,r21,-1
    8d50:	1ca4b03a 	or	r18,r3,r18
    8d54:	a8800005 	stb	r2,0(r21)
    8d58:	94c4b03a 	or	r2,r18,r19
    8d5c:	103ff51e 	bne	r2,zero,8d34 <___vfiprintf_internal_r+0xee8>
    8d60:	003e5906 	br	86c8 <___vfiprintf_internal_r+0x87c>
    8d64:	d9402117 	ldw	r5,132(sp)
    8d68:	d9002017 	ldw	r4,128(sp)
    8d6c:	d9801a04 	addi	r6,sp,104
    8d70:	0007d380 	call	7d38 <__sprint_r.part.0>
    8d74:	103f891e 	bne	r2,zero,8b9c <___vfiprintf_internal_r+0xd50>
    8d78:	d8801c17 	ldw	r2,112(sp)
    8d7c:	d811883a 	mov	r8,sp
    8d80:	003f9506 	br	8bd8 <___vfiprintf_internal_r+0xd8c>
    8d84:	d9402117 	ldw	r5,132(sp)
    8d88:	d9002017 	ldw	r4,128(sp)
    8d8c:	d9801a04 	addi	r6,sp,104
    8d90:	0007d380 	call	7d38 <__sprint_r.part.0>
    8d94:	103f811e 	bne	r2,zero,8b9c <___vfiprintf_internal_r+0xd50>
    8d98:	d811883a 	mov	r8,sp
    8d9c:	003ced06 	br	8154 <___vfiprintf_internal_r+0x308>
    8da0:	d9402117 	ldw	r5,132(sp)
    8da4:	d9002017 	ldw	r4,128(sp)
    8da8:	d9801a04 	addi	r6,sp,104
    8dac:	da402c15 	stw	r9,176(sp)
    8db0:	db802a15 	stw	r14,168(sp)
    8db4:	0007d380 	call	7d38 <__sprint_r.part.0>
    8db8:	da402c17 	ldw	r9,176(sp)
    8dbc:	db802a17 	ldw	r14,168(sp)
    8dc0:	103f761e 	bne	r2,zero,8b9c <___vfiprintf_internal_r+0xd50>
    8dc4:	d9401b17 	ldw	r5,108(sp)
    8dc8:	d8801c17 	ldw	r2,112(sp)
    8dcc:	d811883a 	mov	r8,sp
    8dd0:	29000044 	addi	r4,r5,1
    8dd4:	003d5b06 	br	8344 <___vfiprintf_internal_r+0x4f8>
    8dd8:	d9402117 	ldw	r5,132(sp)
    8ddc:	d9002017 	ldw	r4,128(sp)
    8de0:	d9801a04 	addi	r6,sp,104
    8de4:	da402c15 	stw	r9,176(sp)
    8de8:	0007d380 	call	7d38 <__sprint_r.part.0>
    8dec:	da402c17 	ldw	r9,176(sp)
    8df0:	103f6a1e 	bne	r2,zero,8b9c <___vfiprintf_internal_r+0xd50>
    8df4:	d9401b17 	ldw	r5,108(sp)
    8df8:	d8801c17 	ldw	r2,112(sp)
    8dfc:	d811883a 	mov	r8,sp
    8e00:	29000044 	addi	r4,r5,1
    8e04:	003f1006 	br	8a48 <___vfiprintf_internal_r+0xbfc>
    8e08:	1000c31e 	bne	r2,zero,9118 <___vfiprintf_internal_r+0x12cc>
    8e0c:	01000044 	movi	r4,1
    8e10:	000b883a 	mov	r5,zero
    8e14:	d811883a 	mov	r8,sp
    8e18:	003f0d06 	br	8a50 <___vfiprintf_internal_r+0xc04>
    8e1c:	d9402117 	ldw	r5,132(sp)
    8e20:	d9002017 	ldw	r4,128(sp)
    8e24:	d9801a04 	addi	r6,sp,104
    8e28:	0007d380 	call	7d38 <__sprint_r.part.0>
    8e2c:	103f5b1e 	bne	r2,zero,8b9c <___vfiprintf_internal_r+0xd50>
    8e30:	d9001b17 	ldw	r4,108(sp)
    8e34:	d8801c17 	ldw	r2,112(sp)
    8e38:	d811883a 	mov	r8,sp
    8e3c:	21000044 	addi	r4,r4,1
    8e40:	003d8006 	br	8444 <___vfiprintf_internal_r+0x5f8>
    8e44:	01000074 	movhi	r4,1
    8e48:	21023b04 	addi	r4,r4,2284
    8e4c:	d9002615 	stw	r4,152(sp)
    8e50:	d8c02215 	stw	r3,136(sp)
    8e54:	1029883a 	mov	r20,r2
    8e58:	94c4b03a 	or	r2,r18,r19
    8e5c:	103fb21e 	bne	r2,zero,8d28 <___vfiprintf_internal_r+0xedc>
    8e60:	0039883a 	mov	fp,zero
    8e64:	00800084 	movi	r2,2
    8e68:	003e6b06 	br	8818 <___vfiprintf_internal_r+0x9cc>
    8e6c:	da802217 	ldw	r10,136(sp)
    8e70:	d8001d85 	stb	zero,118(sp)
    8e74:	0027883a 	mov	r19,zero
    8e78:	50800104 	addi	r2,r10,4
    8e7c:	54800017 	ldw	r18,0(r10)
    8e80:	483e6016 	blt	r9,zero,8804 <___vfiprintf_internal_r+0x9b8>
    8e84:	00ffdfc4 	movi	r3,-129
    8e88:	d8802215 	stw	r2,136(sp)
    8e8c:	a0e8703a 	and	r20,r20,r3
    8e90:	0039883a 	mov	fp,zero
    8e94:	903ebb26 	beq	r18,zero,8984 <___vfiprintf_internal_r+0xb38>
    8e98:	00800244 	movi	r2,9
    8e9c:	14bdee36 	bltu	r2,r18,8658 <___vfiprintf_internal_r+0x80c>
    8ea0:	003eba06 	br	898c <___vfiprintf_internal_r+0xb40>
    8ea4:	00800c04 	movi	r2,48
    8ea8:	d8c01d45 	stb	r3,117(sp)
    8eac:	d8801d05 	stb	r2,116(sp)
    8eb0:	d8001d85 	stb	zero,118(sp)
    8eb4:	a0c00094 	ori	r3,r20,2
    8eb8:	4800a916 	blt	r9,zero,9160 <___vfiprintf_internal_r+0x1314>
    8ebc:	00bfdfc4 	movi	r2,-129
    8ec0:	a096703a 	and	r11,r20,r2
    8ec4:	5d000094 	ori	r20,r11,2
    8ec8:	0039883a 	mov	fp,zero
    8ecc:	003f9706 	br	8d2c <___vfiprintf_internal_r+0xee0>
    8ed0:	8025883a 	mov	r18,r16
    8ed4:	003c2e06 	br	7f90 <___vfiprintf_internal_r+0x144>
    8ed8:	00800074 	movhi	r2,1
    8edc:	10823b04 	addi	r2,r2,2284
    8ee0:	0039883a 	mov	fp,zero
    8ee4:	d8802615 	stw	r2,152(sp)
    8ee8:	003f9006 	br	8d2c <___vfiprintf_internal_r+0xee0>
    8eec:	04a5c83a 	sub	r18,zero,r18
    8ef0:	07000b44 	movi	fp,45
    8ef4:	9004c03a 	cmpne	r2,r18,zero
    8ef8:	04e7c83a 	sub	r19,zero,r19
    8efc:	df001d85 	stb	fp,118(sp)
    8f00:	98a7c83a 	sub	r19,r19,r2
    8f04:	48009f16 	blt	r9,zero,9184 <___vfiprintf_internal_r+0x1338>
    8f08:	00bfdfc4 	movi	r2,-129
    8f0c:	a0a8703a 	and	r20,r20,r2
    8f10:	003dd006 	br	8654 <___vfiprintf_internal_r+0x808>
    8f14:	70004c26 	beq	r14,zero,9048 <___vfiprintf_internal_r+0x11fc>
    8f18:	00800084 	movi	r2,2
    8f1c:	d8c01d04 	addi	r3,sp,116
    8f20:	d8c00015 	stw	r3,0(sp)
    8f24:	d8800115 	stw	r2,4(sp)
    8f28:	01000044 	movi	r4,1
    8f2c:	d811883a 	mov	r8,sp
    8f30:	003f7306 	br	8d00 <___vfiprintf_internal_r+0xeb4>
    8f34:	a080100c 	andi	r2,r20,64
    8f38:	da802217 	ldw	r10,136(sp)
    8f3c:	103e0626 	beq	r2,zero,8758 <___vfiprintf_internal_r+0x90c>
    8f40:	5480000f 	ldh	r18,0(r10)
    8f44:	52800104 	addi	r10,r10,4
    8f48:	da802215 	stw	r10,136(sp)
    8f4c:	9027d7fa 	srai	r19,r18,31
    8f50:	9805883a 	mov	r2,r19
    8f54:	003db806 	br	8638 <___vfiprintf_internal_r+0x7ec>
    8f58:	a080040c 	andi	r2,r20,16
    8f5c:	1000091e 	bne	r2,zero,8f84 <___vfiprintf_internal_r+0x1138>
    8f60:	a2c0100c 	andi	r11,r20,64
    8f64:	58000726 	beq	r11,zero,8f84 <___vfiprintf_internal_r+0x1138>
    8f68:	da802217 	ldw	r10,136(sp)
    8f6c:	50800017 	ldw	r2,0(r10)
    8f70:	52800104 	addi	r10,r10,4
    8f74:	da802215 	stw	r10,136(sp)
    8f78:	da802317 	ldw	r10,140(sp)
    8f7c:	1280000d 	sth	r10,0(r2)
    8f80:	003be706 	br	7f20 <___vfiprintf_internal_r+0xd4>
    8f84:	da802217 	ldw	r10,136(sp)
    8f88:	50800017 	ldw	r2,0(r10)
    8f8c:	52800104 	addi	r10,r10,4
    8f90:	da802215 	stw	r10,136(sp)
    8f94:	da802317 	ldw	r10,140(sp)
    8f98:	12800015 	stw	r10,0(r2)
    8f9c:	003be006 	br	7f20 <___vfiprintf_internal_r+0xd4>
    8fa0:	a080100c 	andi	r2,r20,64
    8fa4:	da802217 	ldw	r10,136(sp)
    8fa8:	10003026 	beq	r2,zero,906c <___vfiprintf_internal_r+0x1220>
    8fac:	5480000b 	ldhu	r18,0(r10)
    8fb0:	52800104 	addi	r10,r10,4
    8fb4:	0027883a 	mov	r19,zero
    8fb8:	da802215 	stw	r10,136(sp)
    8fbc:	003d8006 	br	85c0 <___vfiprintf_internal_r+0x774>
    8fc0:	80c00007 	ldb	r3,0(r16)
    8fc4:	003c0006 	br	7fc8 <___vfiprintf_internal_r+0x17c>
    8fc8:	a080100c 	andi	r2,r20,64
    8fcc:	d8001d85 	stb	zero,118(sp)
    8fd0:	da802217 	ldw	r10,136(sp)
    8fd4:	1000201e 	bne	r2,zero,9058 <___vfiprintf_internal_r+0x120c>
    8fd8:	50800104 	addi	r2,r10,4
    8fdc:	54800017 	ldw	r18,0(r10)
    8fe0:	0027883a 	mov	r19,zero
    8fe4:	483def0e 	bge	r9,zero,87a4 <___vfiprintf_internal_r+0x958>
    8fe8:	94c6b03a 	or	r3,r18,r19
    8fec:	d8802215 	stw	r2,136(sp)
    8ff0:	183d4e1e 	bne	r3,zero,852c <___vfiprintf_internal_r+0x6e0>
    8ff4:	0039883a 	mov	fp,zero
    8ff8:	0005883a 	mov	r2,zero
    8ffc:	003e0606 	br	8818 <___vfiprintf_internal_r+0x9cc>
    9000:	d9402117 	ldw	r5,132(sp)
    9004:	d9002017 	ldw	r4,128(sp)
    9008:	d9801a04 	addi	r6,sp,104
    900c:	da402c15 	stw	r9,176(sp)
    9010:	db802a15 	stw	r14,168(sp)
    9014:	0007d380 	call	7d38 <__sprint_r.part.0>
    9018:	da402c17 	ldw	r9,176(sp)
    901c:	db802a17 	ldw	r14,168(sp)
    9020:	103ede1e 	bne	r2,zero,8b9c <___vfiprintf_internal_r+0xd50>
    9024:	d9401b17 	ldw	r5,108(sp)
    9028:	d8801c17 	ldw	r2,112(sp)
    902c:	d811883a 	mov	r8,sp
    9030:	29000044 	addi	r4,r5,1
    9034:	003e7406 	br	8a08 <___vfiprintf_internal_r+0xbbc>
    9038:	00bfffc4 	movi	r2,-1
    903c:	003c5806 	br	81a0 <___vfiprintf_internal_r+0x354>
    9040:	d811883a 	mov	r8,sp
    9044:	003ee806 	br	8be8 <___vfiprintf_internal_r+0xd9c>
    9048:	000b883a 	mov	r5,zero
    904c:	01000044 	movi	r4,1
    9050:	d811883a 	mov	r8,sp
    9054:	003e7c06 	br	8a48 <___vfiprintf_internal_r+0xbfc>
    9058:	50800104 	addi	r2,r10,4
    905c:	5480000b 	ldhu	r18,0(r10)
    9060:	0027883a 	mov	r19,zero
    9064:	483dcf0e 	bge	r9,zero,87a4 <___vfiprintf_internal_r+0x958>
    9068:	003fdf06 	br	8fe8 <___vfiprintf_internal_r+0x119c>
    906c:	54800017 	ldw	r18,0(r10)
    9070:	52800104 	addi	r10,r10,4
    9074:	0027883a 	mov	r19,zero
    9078:	da802215 	stw	r10,136(sp)
    907c:	003d5006 	br	85c0 <___vfiprintf_internal_r+0x774>
    9080:	50800104 	addi	r2,r10,4
    9084:	5480000b 	ldhu	r18,0(r10)
    9088:	0027883a 	mov	r19,zero
    908c:	483f7d0e 	bge	r9,zero,8e84 <___vfiprintf_internal_r+0x1038>
    9090:	003ddc06 	br	8804 <___vfiprintf_internal_r+0x9b8>
    9094:	d8c02215 	stw	r3,136(sp)
    9098:	0039883a 	mov	fp,zero
    909c:	003ddb06 	br	880c <___vfiprintf_internal_r+0x9c0>
    90a0:	02800074 	movhi	r10,1
    90a4:	52829c04 	addi	r10,r10,2672
    90a8:	da802415 	stw	r10,144(sp)
    90ac:	003e8306 	br	8abc <___vfiprintf_internal_r+0xc70>
    90b0:	d8801c17 	ldw	r2,112(sp)
    90b4:	dd002117 	ldw	r20,132(sp)
    90b8:	103eb926 	beq	r2,zero,8ba0 <___vfiprintf_internal_r+0xd54>
    90bc:	d9002017 	ldw	r4,128(sp)
    90c0:	d9801a04 	addi	r6,sp,104
    90c4:	a00b883a 	mov	r5,r20
    90c8:	0007d380 	call	7d38 <__sprint_r.part.0>
    90cc:	003eb406 	br	8ba0 <___vfiprintf_internal_r+0xd54>
    90d0:	80c00043 	ldbu	r3,1(r16)
    90d4:	a5000814 	ori	r20,r20,32
    90d8:	84000044 	addi	r16,r16,1
    90dc:	18c03fcc 	andi	r3,r3,255
    90e0:	18c0201c 	xori	r3,r3,128
    90e4:	18ffe004 	addi	r3,r3,-128
    90e8:	003bb706 	br	7fc8 <___vfiprintf_internal_r+0x17c>
    90ec:	a809883a 	mov	r4,r21
    90f0:	d8c02a15 	stw	r3,168(sp)
    90f4:	da002b15 	stw	r8,172(sp)
    90f8:	00007a00 	call	7a0 <strlen>
    90fc:	d8c02a17 	ldw	r3,168(sp)
    9100:	1027883a 	mov	r19,r2
    9104:	df001d83 	ldbu	fp,118(sp)
    9108:	d8c02215 	stw	r3,136(sp)
    910c:	0013883a 	mov	r9,zero
    9110:	da002b17 	ldw	r8,172(sp)
    9114:	003c4d06 	br	824c <___vfiprintf_internal_r+0x400>
    9118:	d9402117 	ldw	r5,132(sp)
    911c:	d9002017 	ldw	r4,128(sp)
    9120:	d9801a04 	addi	r6,sp,104
    9124:	da402c15 	stw	r9,176(sp)
    9128:	0007d380 	call	7d38 <__sprint_r.part.0>
    912c:	da402c17 	ldw	r9,176(sp)
    9130:	103e9a1e 	bne	r2,zero,8b9c <___vfiprintf_internal_r+0xd50>
    9134:	d9401b17 	ldw	r5,108(sp)
    9138:	d8801c17 	ldw	r2,112(sp)
    913c:	d811883a 	mov	r8,sp
    9140:	29000044 	addi	r4,r5,1
    9144:	003e4206 	br	8a50 <___vfiprintf_internal_r+0xc04>
    9148:	d9401b17 	ldw	r5,108(sp)
    914c:	01000074 	movhi	r4,1
    9150:	2102a004 	addi	r4,r4,2688
    9154:	d9002415 	stw	r4,144(sp)
    9158:	29400044 	addi	r5,r5,1
    915c:	003c6d06 	br	8314 <___vfiprintf_internal_r+0x4c8>
    9160:	0039883a 	mov	fp,zero
    9164:	00800084 	movi	r2,2
    9168:	10803fcc 	andi	r2,r2,255
    916c:	01000044 	movi	r4,1
    9170:	11001e26 	beq	r2,r4,91ec <___vfiprintf_internal_r+0x13a0>
    9174:	01000084 	movi	r4,2
    9178:	11001e1e 	bne	r2,r4,91f4 <___vfiprintf_internal_r+0x13a8>
    917c:	1829883a 	mov	r20,r3
    9180:	003eea06 	br	8d2c <___vfiprintf_internal_r+0xee0>
    9184:	a007883a 	mov	r3,r20
    9188:	00800044 	movi	r2,1
    918c:	003ff606 	br	9168 <___vfiprintf_internal_r+0x131c>
    9190:	00800184 	movi	r2,6
    9194:	1240012e 	bgeu	r2,r9,919c <___vfiprintf_internal_r+0x1350>
    9198:	1013883a 	mov	r9,r2
    919c:	4827883a 	mov	r19,r9
    91a0:	4825883a 	mov	r18,r9
    91a4:	48001516 	blt	r9,zero,91fc <___vfiprintf_internal_r+0x13b0>
    91a8:	05400074 	movhi	r21,1
    91ac:	d8c02215 	stw	r3,136(sp)
    91b0:	ad424004 	addi	r21,r21,2304
    91b4:	003d1406 	br	8608 <___vfiprintf_internal_r+0x7bc>
    91b8:	02800074 	movhi	r10,1
    91bc:	52829c04 	addi	r10,r10,2672
    91c0:	da802415 	stw	r10,144(sp)
    91c4:	200d883a 	mov	r6,r4
    91c8:	003c9106 	br	8410 <___vfiprintf_internal_r+0x5c4>
    91cc:	5021883a 	mov	r16,r10
    91d0:	0013883a 	mov	r9,zero
    91d4:	003b7d06 	br	7fcc <___vfiprintf_internal_r+0x180>
    91d8:	4827883a 	mov	r19,r9
    91dc:	df001d83 	ldbu	fp,118(sp)
    91e0:	d8c02215 	stw	r3,136(sp)
    91e4:	0013883a 	mov	r9,zero
    91e8:	003c1806 	br	824c <___vfiprintf_internal_r+0x400>
    91ec:	1829883a 	mov	r20,r3
    91f0:	003d1806 	br	8654 <___vfiprintf_internal_r+0x808>
    91f4:	1829883a 	mov	r20,r3
    91f8:	003ccd06 	br	8530 <___vfiprintf_internal_r+0x6e4>
    91fc:	0025883a 	mov	r18,zero
    9200:	003fe906 	br	91a8 <___vfiprintf_internal_r+0x135c>
    9204:	d8802217 	ldw	r2,136(sp)
    9208:	80c00043 	ldbu	r3,1(r16)
    920c:	5021883a 	mov	r16,r10
    9210:	12400017 	ldw	r9,0(r2)
    9214:	10800104 	addi	r2,r2,4
    9218:	d8802215 	stw	r2,136(sp)
    921c:	483faf0e 	bge	r9,zero,90dc <___vfiprintf_internal_r+0x1290>
    9220:	18c03fcc 	andi	r3,r3,255
    9224:	18c0201c 	xori	r3,r3,128
    9228:	027fffc4 	movi	r9,-1
    922c:	18ffe004 	addi	r3,r3,-128
    9230:	003b6506 	br	7fc8 <___vfiprintf_internal_r+0x17c>
    9234:	d9c01d85 	stb	r7,118(sp)
    9238:	003ca006 	br	84bc <___vfiprintf_internal_r+0x670>
    923c:	d9c01d85 	stb	r7,118(sp)
    9240:	003cad06 	br	84f8 <___vfiprintf_internal_r+0x6ac>
    9244:	d9c01d85 	stb	r7,118(sp)
    9248:	003d7d06 	br	8840 <___vfiprintf_internal_r+0x9f4>
    924c:	d9c01d85 	stb	r7,118(sp)
    9250:	003d5f06 	br	87d0 <___vfiprintf_internal_r+0x984>
    9254:	a080004c 	andi	r2,r20,1
    9258:	0039883a 	mov	fp,zero
    925c:	10000526 	beq	r2,zero,9274 <___vfiprintf_internal_r+0x1428>
    9260:	00800c04 	movi	r2,48
    9264:	d88019c5 	stb	r2,103(sp)
    9268:	dcc02717 	ldw	r19,156(sp)
    926c:	dd4019c4 	addi	r21,sp,103
    9270:	003bf606 	br	824c <___vfiprintf_internal_r+0x400>
    9274:	0027883a 	mov	r19,zero
    9278:	dd401a04 	addi	r21,sp,104
    927c:	003bf306 	br	824c <___vfiprintf_internal_r+0x400>
    9280:	d9c01d85 	stb	r7,118(sp)
    9284:	003dc806 	br	89a8 <___vfiprintf_internal_r+0xb5c>
    9288:	d9c01d85 	stb	r7,118(sp)
    928c:	003d3a06 	br	8778 <___vfiprintf_internal_r+0x92c>
    9290:	d9c01d85 	stb	r7,118(sp)
    9294:	003d2a06 	br	8740 <___vfiprintf_internal_r+0x8f4>
    9298:	d9c01d85 	stb	r7,118(sp)
    929c:	003cde06 	br	8618 <___vfiprintf_internal_r+0x7cc>
    92a0:	d9c01d85 	stb	r7,118(sp)
    92a4:	003cbc06 	br	8598 <___vfiprintf_internal_r+0x74c>

000092a8 <__vfiprintf_internal>:
    92a8:	00800074 	movhi	r2,1
    92ac:	1089e404 	addi	r2,r2,10128
    92b0:	300f883a 	mov	r7,r6
    92b4:	280d883a 	mov	r6,r5
    92b8:	200b883a 	mov	r5,r4
    92bc:	11000017 	ldw	r4,0(r2)
    92c0:	0007e4c1 	jmpi	7e4c <___vfiprintf_internal_r>

000092c4 <__sbprintf>:
    92c4:	2880030b 	ldhu	r2,12(r5)
    92c8:	2ac01917 	ldw	r11,100(r5)
    92cc:	2a80038b 	ldhu	r10,14(r5)
    92d0:	2a400717 	ldw	r9,28(r5)
    92d4:	2a000917 	ldw	r8,36(r5)
    92d8:	defee204 	addi	sp,sp,-1144
    92dc:	00c10004 	movi	r3,1024
    92e0:	dc011a15 	stw	r16,1128(sp)
    92e4:	10bfff4c 	andi	r2,r2,65533
    92e8:	2821883a 	mov	r16,r5
    92ec:	d8cb883a 	add	r5,sp,r3
    92f0:	dc811c15 	stw	r18,1136(sp)
    92f4:	dc411b15 	stw	r17,1132(sp)
    92f8:	dfc11d15 	stw	ra,1140(sp)
    92fc:	2025883a 	mov	r18,r4
    9300:	d881030d 	sth	r2,1036(sp)
    9304:	dac11915 	stw	r11,1124(sp)
    9308:	da81038d 	sth	r10,1038(sp)
    930c:	da410715 	stw	r9,1052(sp)
    9310:	da010915 	stw	r8,1060(sp)
    9314:	dec10015 	stw	sp,1024(sp)
    9318:	dec10415 	stw	sp,1040(sp)
    931c:	d8c10215 	stw	r3,1032(sp)
    9320:	d8c10515 	stw	r3,1044(sp)
    9324:	d8010615 	stw	zero,1048(sp)
    9328:	0007e4c0 	call	7e4c <___vfiprintf_internal_r>
    932c:	1023883a 	mov	r17,r2
    9330:	10000416 	blt	r2,zero,9344 <__sbprintf+0x80>
    9334:	d9410004 	addi	r5,sp,1024
    9338:	9009883a 	mov	r4,r18
    933c:	00047000 	call	4700 <_fflush_r>
    9340:	10000d1e 	bne	r2,zero,9378 <__sbprintf+0xb4>
    9344:	d881030b 	ldhu	r2,1036(sp)
    9348:	1080100c 	andi	r2,r2,64
    934c:	10000326 	beq	r2,zero,935c <__sbprintf+0x98>
    9350:	8080030b 	ldhu	r2,12(r16)
    9354:	10801014 	ori	r2,r2,64
    9358:	8080030d 	sth	r2,12(r16)
    935c:	8805883a 	mov	r2,r17
    9360:	dfc11d17 	ldw	ra,1140(sp)
    9364:	dc811c17 	ldw	r18,1136(sp)
    9368:	dc411b17 	ldw	r17,1132(sp)
    936c:	dc011a17 	ldw	r16,1128(sp)
    9370:	dec11e04 	addi	sp,sp,1144
    9374:	f800283a 	ret
    9378:	047fffc4 	movi	r17,-1
    937c:	003ff106 	br	9344 <__sbprintf+0x80>

00009380 <_write_r>:
    9380:	defffd04 	addi	sp,sp,-12
    9384:	2805883a 	mov	r2,r5
    9388:	dc000015 	stw	r16,0(sp)
    938c:	04000074 	movhi	r16,1
    9390:	dc400115 	stw	r17,4(sp)
    9394:	300b883a 	mov	r5,r6
    9398:	8410fe04 	addi	r16,r16,17400
    939c:	2023883a 	mov	r17,r4
    93a0:	380d883a 	mov	r6,r7
    93a4:	1009883a 	mov	r4,r2
    93a8:	dfc00215 	stw	ra,8(sp)
    93ac:	80000015 	stw	zero,0(r16)
    93b0:	000d8980 	call	d898 <write>
    93b4:	00ffffc4 	movi	r3,-1
    93b8:	10c00526 	beq	r2,r3,93d0 <_write_r+0x50>
    93bc:	dfc00217 	ldw	ra,8(sp)
    93c0:	dc400117 	ldw	r17,4(sp)
    93c4:	dc000017 	ldw	r16,0(sp)
    93c8:	dec00304 	addi	sp,sp,12
    93cc:	f800283a 	ret
    93d0:	80c00017 	ldw	r3,0(r16)
    93d4:	183ff926 	beq	r3,zero,93bc <_write_r+0x3c>
    93d8:	88c00015 	stw	r3,0(r17)
    93dc:	003ff706 	br	93bc <_write_r+0x3c>

000093e0 <_close_r>:
    93e0:	defffd04 	addi	sp,sp,-12
    93e4:	dc000015 	stw	r16,0(sp)
    93e8:	04000074 	movhi	r16,1
    93ec:	dc400115 	stw	r17,4(sp)
    93f0:	8410fe04 	addi	r16,r16,17400
    93f4:	2023883a 	mov	r17,r4
    93f8:	2809883a 	mov	r4,r5
    93fc:	dfc00215 	stw	ra,8(sp)
    9400:	80000015 	stw	zero,0(r16)
    9404:	000ce1c0 	call	ce1c <close>
    9408:	00ffffc4 	movi	r3,-1
    940c:	10c00526 	beq	r2,r3,9424 <_close_r+0x44>
    9410:	dfc00217 	ldw	ra,8(sp)
    9414:	dc400117 	ldw	r17,4(sp)
    9418:	dc000017 	ldw	r16,0(sp)
    941c:	dec00304 	addi	sp,sp,12
    9420:	f800283a 	ret
    9424:	80c00017 	ldw	r3,0(r16)
    9428:	183ff926 	beq	r3,zero,9410 <_close_r+0x30>
    942c:	88c00015 	stw	r3,0(r17)
    9430:	003ff706 	br	9410 <_close_r+0x30>

00009434 <_calloc_r>:
    9434:	298b383a 	mul	r5,r5,r6
    9438:	defffe04 	addi	sp,sp,-8
    943c:	dfc00115 	stw	ra,4(sp)
    9440:	dc000015 	stw	r16,0(sp)
    9444:	000583c0 	call	583c <_malloc_r>
    9448:	10002926 	beq	r2,zero,94f0 <_calloc_r+0xbc>
    944c:	11bfff17 	ldw	r6,-4(r2)
    9450:	1021883a 	mov	r16,r2
    9454:	00bfff04 	movi	r2,-4
    9458:	308c703a 	and	r6,r6,r2
    945c:	00c00904 	movi	r3,36
    9460:	308d883a 	add	r6,r6,r2
    9464:	19801636 	bltu	r3,r6,94c0 <_calloc_r+0x8c>
    9468:	008004c4 	movi	r2,19
    946c:	11800b2e 	bgeu	r2,r6,949c <_calloc_r+0x68>
    9470:	80000015 	stw	zero,0(r16)
    9474:	80000115 	stw	zero,4(r16)
    9478:	008006c4 	movi	r2,27
    947c:	11801a2e 	bgeu	r2,r6,94e8 <_calloc_r+0xb4>
    9480:	80000215 	stw	zero,8(r16)
    9484:	80000315 	stw	zero,12(r16)
    9488:	30c0151e 	bne	r6,r3,94e0 <_calloc_r+0xac>
    948c:	80000415 	stw	zero,16(r16)
    9490:	80800604 	addi	r2,r16,24
    9494:	80000515 	stw	zero,20(r16)
    9498:	00000106 	br	94a0 <_calloc_r+0x6c>
    949c:	8005883a 	mov	r2,r16
    94a0:	10000015 	stw	zero,0(r2)
    94a4:	10000115 	stw	zero,4(r2)
    94a8:	10000215 	stw	zero,8(r2)
    94ac:	8005883a 	mov	r2,r16
    94b0:	dfc00117 	ldw	ra,4(sp)
    94b4:	dc000017 	ldw	r16,0(sp)
    94b8:	dec00204 	addi	sp,sp,8
    94bc:	f800283a 	ret
    94c0:	000b883a 	mov	r5,zero
    94c4:	8009883a 	mov	r4,r16
    94c8:	00063d00 	call	63d0 <memset>
    94cc:	8005883a 	mov	r2,r16
    94d0:	dfc00117 	ldw	ra,4(sp)
    94d4:	dc000017 	ldw	r16,0(sp)
    94d8:	dec00204 	addi	sp,sp,8
    94dc:	f800283a 	ret
    94e0:	80800404 	addi	r2,r16,16
    94e4:	003fee06 	br	94a0 <_calloc_r+0x6c>
    94e8:	80800204 	addi	r2,r16,8
    94ec:	003fec06 	br	94a0 <_calloc_r+0x6c>
    94f0:	0005883a 	mov	r2,zero
    94f4:	003fee06 	br	94b0 <_calloc_r+0x7c>

000094f8 <_fclose_r>:
    94f8:	28003926 	beq	r5,zero,95e0 <_fclose_r+0xe8>
    94fc:	defffc04 	addi	sp,sp,-16
    9500:	dc400115 	stw	r17,4(sp)
    9504:	dc000015 	stw	r16,0(sp)
    9508:	dfc00315 	stw	ra,12(sp)
    950c:	dc800215 	stw	r18,8(sp)
    9510:	2023883a 	mov	r17,r4
    9514:	2821883a 	mov	r16,r5
    9518:	20000226 	beq	r4,zero,9524 <_fclose_r+0x2c>
    951c:	20800e17 	ldw	r2,56(r4)
    9520:	10002726 	beq	r2,zero,95c0 <_fclose_r+0xc8>
    9524:	8080030f 	ldh	r2,12(r16)
    9528:	1000071e 	bne	r2,zero,9548 <_fclose_r+0x50>
    952c:	0005883a 	mov	r2,zero
    9530:	dfc00317 	ldw	ra,12(sp)
    9534:	dc800217 	ldw	r18,8(sp)
    9538:	dc400117 	ldw	r17,4(sp)
    953c:	dc000017 	ldw	r16,0(sp)
    9540:	dec00404 	addi	sp,sp,16
    9544:	f800283a 	ret
    9548:	800b883a 	mov	r5,r16
    954c:	8809883a 	mov	r4,r17
    9550:	00044e40 	call	44e4 <__sflush_r>
    9554:	1025883a 	mov	r18,r2
    9558:	80800b17 	ldw	r2,44(r16)
    955c:	10000426 	beq	r2,zero,9570 <_fclose_r+0x78>
    9560:	81400717 	ldw	r5,28(r16)
    9564:	8809883a 	mov	r4,r17
    9568:	103ee83a 	callr	r2
    956c:	10001616 	blt	r2,zero,95c8 <_fclose_r+0xd0>
    9570:	8080030b 	ldhu	r2,12(r16)
    9574:	1080200c 	andi	r2,r2,128
    9578:	1000151e 	bne	r2,zero,95d0 <_fclose_r+0xd8>
    957c:	81400c17 	ldw	r5,48(r16)
    9580:	28000526 	beq	r5,zero,9598 <_fclose_r+0xa0>
    9584:	80801004 	addi	r2,r16,64
    9588:	28800226 	beq	r5,r2,9594 <_fclose_r+0x9c>
    958c:	8809883a 	mov	r4,r17
    9590:	0004c500 	call	4c50 <_free_r>
    9594:	80000c15 	stw	zero,48(r16)
    9598:	81401117 	ldw	r5,68(r16)
    959c:	28000326 	beq	r5,zero,95ac <_fclose_r+0xb4>
    95a0:	8809883a 	mov	r4,r17
    95a4:	0004c500 	call	4c50 <_free_r>
    95a8:	80001115 	stw	zero,68(r16)
    95ac:	0004aec0 	call	4aec <__sfp_lock_acquire>
    95b0:	8000030d 	sth	zero,12(r16)
    95b4:	0004af00 	call	4af0 <__sfp_lock_release>
    95b8:	9005883a 	mov	r2,r18
    95bc:	003fdc06 	br	9530 <_fclose_r+0x38>
    95c0:	0004adc0 	call	4adc <__sinit>
    95c4:	003fd706 	br	9524 <_fclose_r+0x2c>
    95c8:	04bfffc4 	movi	r18,-1
    95cc:	003fe806 	br	9570 <_fclose_r+0x78>
    95d0:	81400417 	ldw	r5,16(r16)
    95d4:	8809883a 	mov	r4,r17
    95d8:	0004c500 	call	4c50 <_free_r>
    95dc:	003fe706 	br	957c <_fclose_r+0x84>
    95e0:	0005883a 	mov	r2,zero
    95e4:	f800283a 	ret

000095e8 <fclose>:
    95e8:	00800074 	movhi	r2,1
    95ec:	1089e404 	addi	r2,r2,10128
    95f0:	200b883a 	mov	r5,r4
    95f4:	11000017 	ldw	r4,0(r2)
    95f8:	00094f81 	jmpi	94f8 <_fclose_r>

000095fc <__fputwc>:
    95fc:	defff804 	addi	sp,sp,-32
    9600:	dcc00415 	stw	r19,16(sp)
    9604:	dc800315 	stw	r18,12(sp)
    9608:	dc000115 	stw	r16,4(sp)
    960c:	dfc00715 	stw	ra,28(sp)
    9610:	dd400615 	stw	r21,24(sp)
    9614:	dd000515 	stw	r20,20(sp)
    9618:	dc400215 	stw	r17,8(sp)
    961c:	2027883a 	mov	r19,r4
    9620:	2825883a 	mov	r18,r5
    9624:	3021883a 	mov	r16,r6
    9628:	000562c0 	call	562c <__locale_mb_cur_max>
    962c:	00c00044 	movi	r3,1
    9630:	10c03e26 	beq	r2,r3,972c <__fputwc+0x130>
    9634:	81c01704 	addi	r7,r16,92
    9638:	900d883a 	mov	r6,r18
    963c:	d80b883a 	mov	r5,sp
    9640:	9809883a 	mov	r4,r19
    9644:	0009acc0 	call	9acc <_wcrtomb_r>
    9648:	1029883a 	mov	r20,r2
    964c:	00bfffc4 	movi	r2,-1
    9650:	a0802026 	beq	r20,r2,96d4 <__fputwc+0xd8>
    9654:	d9400003 	ldbu	r5,0(sp)
    9658:	a0001c26 	beq	r20,zero,96cc <__fputwc+0xd0>
    965c:	0023883a 	mov	r17,zero
    9660:	05400284 	movi	r21,10
    9664:	00000906 	br	968c <__fputwc+0x90>
    9668:	80800017 	ldw	r2,0(r16)
    966c:	11400005 	stb	r5,0(r2)
    9670:	80c00017 	ldw	r3,0(r16)
    9674:	18c00044 	addi	r3,r3,1
    9678:	80c00015 	stw	r3,0(r16)
    967c:	8c400044 	addi	r17,r17,1
    9680:	dc45883a 	add	r2,sp,r17
    9684:	8d00112e 	bgeu	r17,r20,96cc <__fputwc+0xd0>
    9688:	11400003 	ldbu	r5,0(r2)
    968c:	80c00217 	ldw	r3,8(r16)
    9690:	18ffffc4 	addi	r3,r3,-1
    9694:	80c00215 	stw	r3,8(r16)
    9698:	183ff30e 	bge	r3,zero,9668 <__fputwc+0x6c>
    969c:	80800617 	ldw	r2,24(r16)
    96a0:	18801916 	blt	r3,r2,9708 <__fputwc+0x10c>
    96a4:	80800017 	ldw	r2,0(r16)
    96a8:	11400005 	stb	r5,0(r2)
    96ac:	80800017 	ldw	r2,0(r16)
    96b0:	10c00003 	ldbu	r3,0(r2)
    96b4:	10800044 	addi	r2,r2,1
    96b8:	1d402326 	beq	r3,r21,9748 <__fputwc+0x14c>
    96bc:	80800015 	stw	r2,0(r16)
    96c0:	8c400044 	addi	r17,r17,1
    96c4:	dc45883a 	add	r2,sp,r17
    96c8:	8d3fef36 	bltu	r17,r20,9688 <__fputwc+0x8c>
    96cc:	9005883a 	mov	r2,r18
    96d0:	00000406 	br	96e4 <__fputwc+0xe8>
    96d4:	80c0030b 	ldhu	r3,12(r16)
    96d8:	a005883a 	mov	r2,r20
    96dc:	18c01014 	ori	r3,r3,64
    96e0:	80c0030d 	sth	r3,12(r16)
    96e4:	dfc00717 	ldw	ra,28(sp)
    96e8:	dd400617 	ldw	r21,24(sp)
    96ec:	dd000517 	ldw	r20,20(sp)
    96f0:	dcc00417 	ldw	r19,16(sp)
    96f4:	dc800317 	ldw	r18,12(sp)
    96f8:	dc400217 	ldw	r17,8(sp)
    96fc:	dc000117 	ldw	r16,4(sp)
    9700:	dec00804 	addi	sp,sp,32
    9704:	f800283a 	ret
    9708:	800d883a 	mov	r6,r16
    970c:	29403fcc 	andi	r5,r5,255
    9710:	9809883a 	mov	r4,r19
    9714:	00099740 	call	9974 <__swbuf_r>
    9718:	10bfffe0 	cmpeqi	r2,r2,-1
    971c:	10803fcc 	andi	r2,r2,255
    9720:	103fd626 	beq	r2,zero,967c <__fputwc+0x80>
    9724:	00bfffc4 	movi	r2,-1
    9728:	003fee06 	br	96e4 <__fputwc+0xe8>
    972c:	90ffffc4 	addi	r3,r18,-1
    9730:	01003f84 	movi	r4,254
    9734:	20ffbf36 	bltu	r4,r3,9634 <__fputwc+0x38>
    9738:	900b883a 	mov	r5,r18
    973c:	dc800005 	stb	r18,0(sp)
    9740:	1029883a 	mov	r20,r2
    9744:	003fc506 	br	965c <__fputwc+0x60>
    9748:	800d883a 	mov	r6,r16
    974c:	a80b883a 	mov	r5,r21
    9750:	9809883a 	mov	r4,r19
    9754:	00099740 	call	9974 <__swbuf_r>
    9758:	10bfffe0 	cmpeqi	r2,r2,-1
    975c:	003fef06 	br	971c <__fputwc+0x120>

00009760 <_fputwc_r>:
    9760:	3080030b 	ldhu	r2,12(r6)
    9764:	10c8000c 	andi	r3,r2,8192
    9768:	1800051e 	bne	r3,zero,9780 <_fputwc_r+0x20>
    976c:	30c01917 	ldw	r3,100(r6)
    9770:	10880014 	ori	r2,r2,8192
    9774:	3080030d 	sth	r2,12(r6)
    9778:	18880014 	ori	r2,r3,8192
    977c:	30801915 	stw	r2,100(r6)
    9780:	00095fc1 	jmpi	95fc <__fputwc>

00009784 <fputwc>:
    9784:	00800074 	movhi	r2,1
    9788:	defffc04 	addi	sp,sp,-16
    978c:	1089e404 	addi	r2,r2,10128
    9790:	dc000115 	stw	r16,4(sp)
    9794:	14000017 	ldw	r16,0(r2)
    9798:	dc400215 	stw	r17,8(sp)
    979c:	dfc00315 	stw	ra,12(sp)
    97a0:	2023883a 	mov	r17,r4
    97a4:	80000226 	beq	r16,zero,97b0 <fputwc+0x2c>
    97a8:	80800e17 	ldw	r2,56(r16)
    97ac:	10001026 	beq	r2,zero,97f0 <fputwc+0x6c>
    97b0:	2880030b 	ldhu	r2,12(r5)
    97b4:	10c8000c 	andi	r3,r2,8192
    97b8:	1800051e 	bne	r3,zero,97d0 <fputwc+0x4c>
    97bc:	28c01917 	ldw	r3,100(r5)
    97c0:	10880014 	ori	r2,r2,8192
    97c4:	2880030d 	sth	r2,12(r5)
    97c8:	18880014 	ori	r2,r3,8192
    97cc:	28801915 	stw	r2,100(r5)
    97d0:	280d883a 	mov	r6,r5
    97d4:	8009883a 	mov	r4,r16
    97d8:	880b883a 	mov	r5,r17
    97dc:	dfc00317 	ldw	ra,12(sp)
    97e0:	dc400217 	ldw	r17,8(sp)
    97e4:	dc000117 	ldw	r16,4(sp)
    97e8:	dec00404 	addi	sp,sp,16
    97ec:	00095fc1 	jmpi	95fc <__fputwc>
    97f0:	8009883a 	mov	r4,r16
    97f4:	d9400015 	stw	r5,0(sp)
    97f8:	0004adc0 	call	4adc <__sinit>
    97fc:	d9400017 	ldw	r5,0(sp)
    9800:	003feb06 	br	97b0 <fputwc+0x2c>

00009804 <_fstat_r>:
    9804:	defffd04 	addi	sp,sp,-12
    9808:	2805883a 	mov	r2,r5
    980c:	dc000015 	stw	r16,0(sp)
    9810:	04000074 	movhi	r16,1
    9814:	dc400115 	stw	r17,4(sp)
    9818:	8410fe04 	addi	r16,r16,17400
    981c:	2023883a 	mov	r17,r4
    9820:	300b883a 	mov	r5,r6
    9824:	1009883a 	mov	r4,r2
    9828:	dfc00215 	stw	ra,8(sp)
    982c:	80000015 	stw	zero,0(r16)
    9830:	000d1400 	call	d140 <fstat>
    9834:	00ffffc4 	movi	r3,-1
    9838:	10c00526 	beq	r2,r3,9850 <_fstat_r+0x4c>
    983c:	dfc00217 	ldw	ra,8(sp)
    9840:	dc400117 	ldw	r17,4(sp)
    9844:	dc000017 	ldw	r16,0(sp)
    9848:	dec00304 	addi	sp,sp,12
    984c:	f800283a 	ret
    9850:	80c00017 	ldw	r3,0(r16)
    9854:	183ff926 	beq	r3,zero,983c <_fstat_r+0x38>
    9858:	88c00015 	stw	r3,0(r17)
    985c:	003ff706 	br	983c <_fstat_r+0x38>

00009860 <_isatty_r>:
    9860:	defffd04 	addi	sp,sp,-12
    9864:	dc000015 	stw	r16,0(sp)
    9868:	04000074 	movhi	r16,1
    986c:	dc400115 	stw	r17,4(sp)
    9870:	8410fe04 	addi	r16,r16,17400
    9874:	2023883a 	mov	r17,r4
    9878:	2809883a 	mov	r4,r5
    987c:	dfc00215 	stw	ra,8(sp)
    9880:	80000015 	stw	zero,0(r16)
    9884:	000d2400 	call	d240 <isatty>
    9888:	00ffffc4 	movi	r3,-1
    988c:	10c00526 	beq	r2,r3,98a4 <_isatty_r+0x44>
    9890:	dfc00217 	ldw	ra,8(sp)
    9894:	dc400117 	ldw	r17,4(sp)
    9898:	dc000017 	ldw	r16,0(sp)
    989c:	dec00304 	addi	sp,sp,12
    98a0:	f800283a 	ret
    98a4:	80c00017 	ldw	r3,0(r16)
    98a8:	183ff926 	beq	r3,zero,9890 <_isatty_r+0x30>
    98ac:	88c00015 	stw	r3,0(r17)
    98b0:	003ff706 	br	9890 <_isatty_r+0x30>

000098b4 <_lseek_r>:
    98b4:	defffd04 	addi	sp,sp,-12
    98b8:	2805883a 	mov	r2,r5
    98bc:	dc000015 	stw	r16,0(sp)
    98c0:	04000074 	movhi	r16,1
    98c4:	dc400115 	stw	r17,4(sp)
    98c8:	300b883a 	mov	r5,r6
    98cc:	8410fe04 	addi	r16,r16,17400
    98d0:	2023883a 	mov	r17,r4
    98d4:	380d883a 	mov	r6,r7
    98d8:	1009883a 	mov	r4,r2
    98dc:	dfc00215 	stw	ra,8(sp)
    98e0:	80000015 	stw	zero,0(r16)
    98e4:	000d4200 	call	d420 <lseek>
    98e8:	00ffffc4 	movi	r3,-1
    98ec:	10c00526 	beq	r2,r3,9904 <_lseek_r+0x50>
    98f0:	dfc00217 	ldw	ra,8(sp)
    98f4:	dc400117 	ldw	r17,4(sp)
    98f8:	dc000017 	ldw	r16,0(sp)
    98fc:	dec00304 	addi	sp,sp,12
    9900:	f800283a 	ret
    9904:	80c00017 	ldw	r3,0(r16)
    9908:	183ff926 	beq	r3,zero,98f0 <_lseek_r+0x3c>
    990c:	88c00015 	stw	r3,0(r17)
    9910:	003ff706 	br	98f0 <_lseek_r+0x3c>

00009914 <_read_r>:
    9914:	defffd04 	addi	sp,sp,-12
    9918:	2805883a 	mov	r2,r5
    991c:	dc000015 	stw	r16,0(sp)
    9920:	04000074 	movhi	r16,1
    9924:	dc400115 	stw	r17,4(sp)
    9928:	300b883a 	mov	r5,r6
    992c:	8410fe04 	addi	r16,r16,17400
    9930:	2023883a 	mov	r17,r4
    9934:	380d883a 	mov	r6,r7
    9938:	1009883a 	mov	r4,r2
    993c:	dfc00215 	stw	ra,8(sp)
    9940:	80000015 	stw	zero,0(r16)
    9944:	000d6080 	call	d608 <read>
    9948:	00ffffc4 	movi	r3,-1
    994c:	10c00526 	beq	r2,r3,9964 <_read_r+0x50>
    9950:	dfc00217 	ldw	ra,8(sp)
    9954:	dc400117 	ldw	r17,4(sp)
    9958:	dc000017 	ldw	r16,0(sp)
    995c:	dec00304 	addi	sp,sp,12
    9960:	f800283a 	ret
    9964:	80c00017 	ldw	r3,0(r16)
    9968:	183ff926 	beq	r3,zero,9950 <_read_r+0x3c>
    996c:	88c00015 	stw	r3,0(r17)
    9970:	003ff706 	br	9950 <_read_r+0x3c>

00009974 <__swbuf_r>:
    9974:	defffb04 	addi	sp,sp,-20
    9978:	dcc00315 	stw	r19,12(sp)
    997c:	dc800215 	stw	r18,8(sp)
    9980:	dc000015 	stw	r16,0(sp)
    9984:	dfc00415 	stw	ra,16(sp)
    9988:	dc400115 	stw	r17,4(sp)
    998c:	2025883a 	mov	r18,r4
    9990:	2827883a 	mov	r19,r5
    9994:	3021883a 	mov	r16,r6
    9998:	20000226 	beq	r4,zero,99a4 <__swbuf_r+0x30>
    999c:	20800e17 	ldw	r2,56(r4)
    99a0:	10004226 	beq	r2,zero,9aac <__swbuf_r+0x138>
    99a4:	80800617 	ldw	r2,24(r16)
    99a8:	8100030b 	ldhu	r4,12(r16)
    99ac:	80800215 	stw	r2,8(r16)
    99b0:	2080020c 	andi	r2,r4,8
    99b4:	10003626 	beq	r2,zero,9a90 <__swbuf_r+0x11c>
    99b8:	80c00417 	ldw	r3,16(r16)
    99bc:	18003426 	beq	r3,zero,9a90 <__swbuf_r+0x11c>
    99c0:	2088000c 	andi	r2,r4,8192
    99c4:	9c403fcc 	andi	r17,r19,255
    99c8:	10001a26 	beq	r2,zero,9a34 <__swbuf_r+0xc0>
    99cc:	80800017 	ldw	r2,0(r16)
    99d0:	81000517 	ldw	r4,20(r16)
    99d4:	10c7c83a 	sub	r3,r2,r3
    99d8:	1900200e 	bge	r3,r4,9a5c <__swbuf_r+0xe8>
    99dc:	18c00044 	addi	r3,r3,1
    99e0:	81000217 	ldw	r4,8(r16)
    99e4:	11400044 	addi	r5,r2,1
    99e8:	81400015 	stw	r5,0(r16)
    99ec:	213fffc4 	addi	r4,r4,-1
    99f0:	81000215 	stw	r4,8(r16)
    99f4:	14c00005 	stb	r19,0(r2)
    99f8:	80800517 	ldw	r2,20(r16)
    99fc:	10c01e26 	beq	r2,r3,9a78 <__swbuf_r+0x104>
    9a00:	8080030b 	ldhu	r2,12(r16)
    9a04:	1080004c 	andi	r2,r2,1
    9a08:	10000226 	beq	r2,zero,9a14 <__swbuf_r+0xa0>
    9a0c:	00800284 	movi	r2,10
    9a10:	88801926 	beq	r17,r2,9a78 <__swbuf_r+0x104>
    9a14:	8805883a 	mov	r2,r17
    9a18:	dfc00417 	ldw	ra,16(sp)
    9a1c:	dcc00317 	ldw	r19,12(sp)
    9a20:	dc800217 	ldw	r18,8(sp)
    9a24:	dc400117 	ldw	r17,4(sp)
    9a28:	dc000017 	ldw	r16,0(sp)
    9a2c:	dec00504 	addi	sp,sp,20
    9a30:	f800283a 	ret
    9a34:	81401917 	ldw	r5,100(r16)
    9a38:	00b7ffc4 	movi	r2,-8193
    9a3c:	21080014 	ori	r4,r4,8192
    9a40:	2884703a 	and	r2,r5,r2
    9a44:	80801915 	stw	r2,100(r16)
    9a48:	80800017 	ldw	r2,0(r16)
    9a4c:	8100030d 	sth	r4,12(r16)
    9a50:	81000517 	ldw	r4,20(r16)
    9a54:	10c7c83a 	sub	r3,r2,r3
    9a58:	193fe016 	blt	r3,r4,99dc <__swbuf_r+0x68>
    9a5c:	800b883a 	mov	r5,r16
    9a60:	9009883a 	mov	r4,r18
    9a64:	00047000 	call	4700 <_fflush_r>
    9a68:	1000071e 	bne	r2,zero,9a88 <__swbuf_r+0x114>
    9a6c:	80800017 	ldw	r2,0(r16)
    9a70:	00c00044 	movi	r3,1
    9a74:	003fda06 	br	99e0 <__swbuf_r+0x6c>
    9a78:	800b883a 	mov	r5,r16
    9a7c:	9009883a 	mov	r4,r18
    9a80:	00047000 	call	4700 <_fflush_r>
    9a84:	103fe326 	beq	r2,zero,9a14 <__swbuf_r+0xa0>
    9a88:	00bfffc4 	movi	r2,-1
    9a8c:	003fe206 	br	9a18 <__swbuf_r+0xa4>
    9a90:	800b883a 	mov	r5,r16
    9a94:	9009883a 	mov	r4,r18
    9a98:	0002b080 	call	2b08 <__swsetup_r>
    9a9c:	103ffa1e 	bne	r2,zero,9a88 <__swbuf_r+0x114>
    9aa0:	8100030b 	ldhu	r4,12(r16)
    9aa4:	80c00417 	ldw	r3,16(r16)
    9aa8:	003fc506 	br	99c0 <__swbuf_r+0x4c>
    9aac:	0004adc0 	call	4adc <__sinit>
    9ab0:	003fbc06 	br	99a4 <__swbuf_r+0x30>

00009ab4 <__swbuf>:
    9ab4:	00800074 	movhi	r2,1
    9ab8:	1089e404 	addi	r2,r2,10128
    9abc:	280d883a 	mov	r6,r5
    9ac0:	200b883a 	mov	r5,r4
    9ac4:	11000017 	ldw	r4,0(r2)
    9ac8:	00099741 	jmpi	9974 <__swbuf_r>

00009acc <_wcrtomb_r>:
    9acc:	defff604 	addi	sp,sp,-40
    9ad0:	00800074 	movhi	r2,1
    9ad4:	dc800815 	stw	r18,32(sp)
    9ad8:	dc400715 	stw	r17,28(sp)
    9adc:	dc000615 	stw	r16,24(sp)
    9ae0:	1089e804 	addi	r2,r2,10144
    9ae4:	dfc00915 	stw	ra,36(sp)
    9ae8:	2021883a 	mov	r16,r4
    9aec:	3823883a 	mov	r17,r7
    9af0:	14800017 	ldw	r18,0(r2)
    9af4:	28001426 	beq	r5,zero,9b48 <_wcrtomb_r+0x7c>
    9af8:	d9400415 	stw	r5,16(sp)
    9afc:	d9800515 	stw	r6,20(sp)
    9b00:	00056200 	call	5620 <__locale_charset>
    9b04:	d9800517 	ldw	r6,20(sp)
    9b08:	d9400417 	ldw	r5,16(sp)
    9b0c:	100f883a 	mov	r7,r2
    9b10:	dc400015 	stw	r17,0(sp)
    9b14:	8009883a 	mov	r4,r16
    9b18:	903ee83a 	callr	r18
    9b1c:	00ffffc4 	movi	r3,-1
    9b20:	10c0031e 	bne	r2,r3,9b30 <_wcrtomb_r+0x64>
    9b24:	88000015 	stw	zero,0(r17)
    9b28:	00c02284 	movi	r3,138
    9b2c:	80c00015 	stw	r3,0(r16)
    9b30:	dfc00917 	ldw	ra,36(sp)
    9b34:	dc800817 	ldw	r18,32(sp)
    9b38:	dc400717 	ldw	r17,28(sp)
    9b3c:	dc000617 	ldw	r16,24(sp)
    9b40:	dec00a04 	addi	sp,sp,40
    9b44:	f800283a 	ret
    9b48:	00056200 	call	5620 <__locale_charset>
    9b4c:	100f883a 	mov	r7,r2
    9b50:	dc400015 	stw	r17,0(sp)
    9b54:	000d883a 	mov	r6,zero
    9b58:	d9400104 	addi	r5,sp,4
    9b5c:	8009883a 	mov	r4,r16
    9b60:	903ee83a 	callr	r18
    9b64:	003fed06 	br	9b1c <_wcrtomb_r+0x50>

00009b68 <wcrtomb>:
    9b68:	defff604 	addi	sp,sp,-40
    9b6c:	00800074 	movhi	r2,1
    9b70:	dc800615 	stw	r18,24(sp)
    9b74:	dc400515 	stw	r17,20(sp)
    9b78:	1089e404 	addi	r2,r2,10128
    9b7c:	dfc00915 	stw	ra,36(sp)
    9b80:	dd000815 	stw	r20,32(sp)
    9b84:	dcc00715 	stw	r19,28(sp)
    9b88:	dc000415 	stw	r16,16(sp)
    9b8c:	3025883a 	mov	r18,r6
    9b90:	14400017 	ldw	r17,0(r2)
    9b94:	20001926 	beq	r4,zero,9bfc <wcrtomb+0x94>
    9b98:	00800074 	movhi	r2,1
    9b9c:	1089e804 	addi	r2,r2,10144
    9ba0:	15000017 	ldw	r20,0(r2)
    9ba4:	2021883a 	mov	r16,r4
    9ba8:	2827883a 	mov	r19,r5
    9bac:	00056200 	call	5620 <__locale_charset>
    9bb0:	100f883a 	mov	r7,r2
    9bb4:	dc800015 	stw	r18,0(sp)
    9bb8:	980d883a 	mov	r6,r19
    9bbc:	800b883a 	mov	r5,r16
    9bc0:	8809883a 	mov	r4,r17
    9bc4:	a03ee83a 	callr	r20
    9bc8:	00ffffc4 	movi	r3,-1
    9bcc:	10c0031e 	bne	r2,r3,9bdc <wcrtomb+0x74>
    9bd0:	90000015 	stw	zero,0(r18)
    9bd4:	00c02284 	movi	r3,138
    9bd8:	88c00015 	stw	r3,0(r17)
    9bdc:	dfc00917 	ldw	ra,36(sp)
    9be0:	dd000817 	ldw	r20,32(sp)
    9be4:	dcc00717 	ldw	r19,28(sp)
    9be8:	dc800617 	ldw	r18,24(sp)
    9bec:	dc400517 	ldw	r17,20(sp)
    9bf0:	dc000417 	ldw	r16,16(sp)
    9bf4:	dec00a04 	addi	sp,sp,40
    9bf8:	f800283a 	ret
    9bfc:	00800074 	movhi	r2,1
    9c00:	1089e804 	addi	r2,r2,10144
    9c04:	14000017 	ldw	r16,0(r2)
    9c08:	00056200 	call	5620 <__locale_charset>
    9c0c:	100f883a 	mov	r7,r2
    9c10:	dc800015 	stw	r18,0(sp)
    9c14:	000d883a 	mov	r6,zero
    9c18:	d9400104 	addi	r5,sp,4
    9c1c:	8809883a 	mov	r4,r17
    9c20:	803ee83a 	callr	r16
    9c24:	003fe806 	br	9bc8 <wcrtomb+0x60>

00009c28 <__ascii_wctomb>:
    9c28:	28000526 	beq	r5,zero,9c40 <__ascii_wctomb+0x18>
    9c2c:	00803fc4 	movi	r2,255
    9c30:	11800536 	bltu	r2,r6,9c48 <__ascii_wctomb+0x20>
    9c34:	29800005 	stb	r6,0(r5)
    9c38:	00800044 	movi	r2,1
    9c3c:	f800283a 	ret
    9c40:	0005883a 	mov	r2,zero
    9c44:	f800283a 	ret
    9c48:	00802284 	movi	r2,138
    9c4c:	20800015 	stw	r2,0(r4)
    9c50:	00bfffc4 	movi	r2,-1
    9c54:	f800283a 	ret

00009c58 <_wctomb_r>:
    9c58:	00800074 	movhi	r2,1
    9c5c:	defff904 	addi	sp,sp,-28
    9c60:	1089e804 	addi	r2,r2,10144
    9c64:	dfc00615 	stw	ra,24(sp)
    9c68:	dc400515 	stw	r17,20(sp)
    9c6c:	dc000415 	stw	r16,16(sp)
    9c70:	3823883a 	mov	r17,r7
    9c74:	14000017 	ldw	r16,0(r2)
    9c78:	d9000115 	stw	r4,4(sp)
    9c7c:	d9400215 	stw	r5,8(sp)
    9c80:	d9800315 	stw	r6,12(sp)
    9c84:	00056200 	call	5620 <__locale_charset>
    9c88:	d9800317 	ldw	r6,12(sp)
    9c8c:	d9400217 	ldw	r5,8(sp)
    9c90:	d9000117 	ldw	r4,4(sp)
    9c94:	100f883a 	mov	r7,r2
    9c98:	dc400015 	stw	r17,0(sp)
    9c9c:	803ee83a 	callr	r16
    9ca0:	dfc00617 	ldw	ra,24(sp)
    9ca4:	dc400517 	ldw	r17,20(sp)
    9ca8:	dc000417 	ldw	r16,16(sp)
    9cac:	dec00704 	addi	sp,sp,28
    9cb0:	f800283a 	ret

00009cb4 <__udivdi3>:
    9cb4:	defff504 	addi	sp,sp,-44
    9cb8:	dcc00415 	stw	r19,16(sp)
    9cbc:	dc000115 	stw	r16,4(sp)
    9cc0:	dfc00a15 	stw	ra,40(sp)
    9cc4:	df000915 	stw	fp,36(sp)
    9cc8:	ddc00815 	stw	r23,32(sp)
    9ccc:	dd800715 	stw	r22,28(sp)
    9cd0:	dd400615 	stw	r21,24(sp)
    9cd4:	dd000515 	stw	r20,20(sp)
    9cd8:	dc800315 	stw	r18,12(sp)
    9cdc:	dc400215 	stw	r17,8(sp)
    9ce0:	2027883a 	mov	r19,r4
    9ce4:	2821883a 	mov	r16,r5
    9ce8:	3800411e 	bne	r7,zero,9df0 <__udivdi3+0x13c>
    9cec:	3023883a 	mov	r17,r6
    9cf0:	2025883a 	mov	r18,r4
    9cf4:	2980522e 	bgeu	r5,r6,9e40 <__udivdi3+0x18c>
    9cf8:	00bfffd4 	movui	r2,65535
    9cfc:	282d883a 	mov	r22,r5
    9d00:	1180a836 	bltu	r2,r6,9fa4 <__udivdi3+0x2f0>
    9d04:	00803fc4 	movi	r2,255
    9d08:	1185803a 	cmpltu	r2,r2,r6
    9d0c:	100490fa 	slli	r2,r2,3
    9d10:	3086d83a 	srl	r3,r6,r2
    9d14:	01000074 	movhi	r4,1
    9d18:	2102a404 	addi	r4,r4,2704
    9d1c:	20c7883a 	add	r3,r4,r3
    9d20:	18c00003 	ldbu	r3,0(r3)
    9d24:	1885883a 	add	r2,r3,r2
    9d28:	00c00804 	movi	r3,32
    9d2c:	1887c83a 	sub	r3,r3,r2
    9d30:	18000526 	beq	r3,zero,9d48 <__udivdi3+0x94>
    9d34:	80e0983a 	sll	r16,r16,r3
    9d38:	9884d83a 	srl	r2,r19,r2
    9d3c:	30e2983a 	sll	r17,r6,r3
    9d40:	98e4983a 	sll	r18,r19,r3
    9d44:	142cb03a 	or	r22,r2,r16
    9d48:	882ad43a 	srli	r21,r17,16
    9d4c:	b009883a 	mov	r4,r22
    9d50:	8d3fffcc 	andi	r20,r17,65535
    9d54:	a80b883a 	mov	r5,r21
    9d58:	00006080 	call	608 <__umodsi3>
    9d5c:	b009883a 	mov	r4,r22
    9d60:	a80b883a 	mov	r5,r21
    9d64:	1027883a 	mov	r19,r2
    9d68:	00005a40 	call	5a4 <__udivsi3>
    9d6c:	102d883a 	mov	r22,r2
    9d70:	9826943a 	slli	r19,r19,16
    9d74:	9004d43a 	srli	r2,r18,16
    9d78:	a5a1383a 	mul	r16,r20,r22
    9d7c:	14c4b03a 	or	r2,r2,r19
    9d80:	1400052e 	bgeu	r2,r16,9d98 <__udivdi3+0xe4>
    9d84:	1445883a 	add	r2,r2,r17
    9d88:	b0ffffc4 	addi	r3,r22,-1
    9d8c:	14400136 	bltu	r2,r17,9d94 <__udivdi3+0xe0>
    9d90:	14012336 	bltu	r2,r16,a220 <__udivdi3+0x56c>
    9d94:	182d883a 	mov	r22,r3
    9d98:	1421c83a 	sub	r16,r2,r16
    9d9c:	a80b883a 	mov	r5,r21
    9da0:	8009883a 	mov	r4,r16
    9da4:	00006080 	call	608 <__umodsi3>
    9da8:	1027883a 	mov	r19,r2
    9dac:	a80b883a 	mov	r5,r21
    9db0:	8009883a 	mov	r4,r16
    9db4:	00005a40 	call	5a4 <__udivsi3>
    9db8:	9826943a 	slli	r19,r19,16
    9dbc:	a0a9383a 	mul	r20,r20,r2
    9dc0:	94bfffcc 	andi	r18,r18,65535
    9dc4:	94e4b03a 	or	r18,r18,r19
    9dc8:	9500052e 	bgeu	r18,r20,9de0 <__udivdi3+0x12c>
    9dcc:	8ca5883a 	add	r18,r17,r18
    9dd0:	10ffffc4 	addi	r3,r2,-1
    9dd4:	9440f136 	bltu	r18,r17,a19c <__udivdi3+0x4e8>
    9dd8:	9500f02e 	bgeu	r18,r20,a19c <__udivdi3+0x4e8>
    9ddc:	10bfff84 	addi	r2,r2,-2
    9de0:	b00c943a 	slli	r6,r22,16
    9de4:	0007883a 	mov	r3,zero
    9de8:	3084b03a 	or	r2,r6,r2
    9dec:	00005906 	br	9f54 <__udivdi3+0x2a0>
    9df0:	29c05636 	bltu	r5,r7,9f4c <__udivdi3+0x298>
    9df4:	00bfffd4 	movui	r2,65535
    9df8:	11c0622e 	bgeu	r2,r7,9f84 <__udivdi3+0x2d0>
    9dfc:	00804034 	movhi	r2,256
    9e00:	10bfffc4 	addi	r2,r2,-1
    9e04:	11c0ee36 	bltu	r2,r7,a1c0 <__udivdi3+0x50c>
    9e08:	00800404 	movi	r2,16
    9e0c:	3886d83a 	srl	r3,r7,r2
    9e10:	01000074 	movhi	r4,1
    9e14:	2102a404 	addi	r4,r4,2704
    9e18:	20c7883a 	add	r3,r4,r3
    9e1c:	18c00003 	ldbu	r3,0(r3)
    9e20:	05400804 	movi	r21,32
    9e24:	1885883a 	add	r2,r3,r2
    9e28:	a8abc83a 	sub	r21,r21,r2
    9e2c:	a800621e 	bne	r21,zero,9fb8 <__udivdi3+0x304>
    9e30:	3c00e936 	bltu	r7,r16,a1d8 <__udivdi3+0x524>
    9e34:	9985403a 	cmpgeu	r2,r19,r6
    9e38:	0007883a 	mov	r3,zero
    9e3c:	00004506 	br	9f54 <__udivdi3+0x2a0>
    9e40:	3000041e 	bne	r6,zero,9e54 <__udivdi3+0x1a0>
    9e44:	000b883a 	mov	r5,zero
    9e48:	01000044 	movi	r4,1
    9e4c:	00005a40 	call	5a4 <__udivsi3>
    9e50:	1023883a 	mov	r17,r2
    9e54:	00bfffd4 	movui	r2,65535
    9e58:	14404e2e 	bgeu	r2,r17,9f94 <__udivdi3+0x2e0>
    9e5c:	00804034 	movhi	r2,256
    9e60:	10bfffc4 	addi	r2,r2,-1
    9e64:	1440d836 	bltu	r2,r17,a1c8 <__udivdi3+0x514>
    9e68:	00800404 	movi	r2,16
    9e6c:	8886d83a 	srl	r3,r17,r2
    9e70:	01000074 	movhi	r4,1
    9e74:	2102a404 	addi	r4,r4,2704
    9e78:	20c7883a 	add	r3,r4,r3
    9e7c:	18c00003 	ldbu	r3,0(r3)
    9e80:	1885883a 	add	r2,r3,r2
    9e84:	00c00804 	movi	r3,32
    9e88:	1887c83a 	sub	r3,r3,r2
    9e8c:	18008f1e 	bne	r3,zero,a0cc <__udivdi3+0x418>
    9e90:	882ad43a 	srli	r21,r17,16
    9e94:	8461c83a 	sub	r16,r16,r17
    9e98:	8d3fffcc 	andi	r20,r17,65535
    9e9c:	00c00044 	movi	r3,1
    9ea0:	8009883a 	mov	r4,r16
    9ea4:	a80b883a 	mov	r5,r21
    9ea8:	d8c00015 	stw	r3,0(sp)
    9eac:	00006080 	call	608 <__umodsi3>
    9eb0:	8009883a 	mov	r4,r16
    9eb4:	a80b883a 	mov	r5,r21
    9eb8:	1027883a 	mov	r19,r2
    9ebc:	00005a40 	call	5a4 <__udivsi3>
    9ec0:	9826943a 	slli	r19,r19,16
    9ec4:	9008d43a 	srli	r4,r18,16
    9ec8:	1521383a 	mul	r16,r2,r20
    9ecc:	102d883a 	mov	r22,r2
    9ed0:	24c8b03a 	or	r4,r4,r19
    9ed4:	d8c00017 	ldw	r3,0(sp)
    9ed8:	2400052e 	bgeu	r4,r16,9ef0 <__udivdi3+0x23c>
    9edc:	2449883a 	add	r4,r4,r17
    9ee0:	b0bfffc4 	addi	r2,r22,-1
    9ee4:	24400136 	bltu	r4,r17,9eec <__udivdi3+0x238>
    9ee8:	2400ca36 	bltu	r4,r16,a214 <__udivdi3+0x560>
    9eec:	102d883a 	mov	r22,r2
    9ef0:	2421c83a 	sub	r16,r4,r16
    9ef4:	a80b883a 	mov	r5,r21
    9ef8:	8009883a 	mov	r4,r16
    9efc:	d8c00015 	stw	r3,0(sp)
    9f00:	00006080 	call	608 <__umodsi3>
    9f04:	1027883a 	mov	r19,r2
    9f08:	a80b883a 	mov	r5,r21
    9f0c:	8009883a 	mov	r4,r16
    9f10:	00005a40 	call	5a4 <__udivsi3>
    9f14:	9826943a 	slli	r19,r19,16
    9f18:	1529383a 	mul	r20,r2,r20
    9f1c:	94bfffcc 	andi	r18,r18,65535
    9f20:	94e4b03a 	or	r18,r18,r19
    9f24:	d8c00017 	ldw	r3,0(sp)
    9f28:	9500052e 	bgeu	r18,r20,9f40 <__udivdi3+0x28c>
    9f2c:	8ca5883a 	add	r18,r17,r18
    9f30:	113fffc4 	addi	r4,r2,-1
    9f34:	94409736 	bltu	r18,r17,a194 <__udivdi3+0x4e0>
    9f38:	9500962e 	bgeu	r18,r20,a194 <__udivdi3+0x4e0>
    9f3c:	10bfff84 	addi	r2,r2,-2
    9f40:	b00c943a 	slli	r6,r22,16
    9f44:	3084b03a 	or	r2,r6,r2
    9f48:	00000206 	br	9f54 <__udivdi3+0x2a0>
    9f4c:	0007883a 	mov	r3,zero
    9f50:	0005883a 	mov	r2,zero
    9f54:	dfc00a17 	ldw	ra,40(sp)
    9f58:	df000917 	ldw	fp,36(sp)
    9f5c:	ddc00817 	ldw	r23,32(sp)
    9f60:	dd800717 	ldw	r22,28(sp)
    9f64:	dd400617 	ldw	r21,24(sp)
    9f68:	dd000517 	ldw	r20,20(sp)
    9f6c:	dcc00417 	ldw	r19,16(sp)
    9f70:	dc800317 	ldw	r18,12(sp)
    9f74:	dc400217 	ldw	r17,8(sp)
    9f78:	dc000117 	ldw	r16,4(sp)
    9f7c:	dec00b04 	addi	sp,sp,44
    9f80:	f800283a 	ret
    9f84:	00803fc4 	movi	r2,255
    9f88:	11c5803a 	cmpltu	r2,r2,r7
    9f8c:	100490fa 	slli	r2,r2,3
    9f90:	003f9e06 	br	9e0c <__udivdi3+0x158>
    9f94:	00803fc4 	movi	r2,255
    9f98:	1445803a 	cmpltu	r2,r2,r17
    9f9c:	100490fa 	slli	r2,r2,3
    9fa0:	003fb206 	br	9e6c <__udivdi3+0x1b8>
    9fa4:	00804034 	movhi	r2,256
    9fa8:	10bfffc4 	addi	r2,r2,-1
    9fac:	11808836 	bltu	r2,r6,a1d0 <__udivdi3+0x51c>
    9fb0:	00800404 	movi	r2,16
    9fb4:	003f5606 	br	9d10 <__udivdi3+0x5c>
    9fb8:	30aed83a 	srl	r23,r6,r2
    9fbc:	3d4e983a 	sll	r7,r7,r21
    9fc0:	80acd83a 	srl	r22,r16,r2
    9fc4:	9884d83a 	srl	r2,r19,r2
    9fc8:	3deeb03a 	or	r23,r7,r23
    9fcc:	b824d43a 	srli	r18,r23,16
    9fd0:	8560983a 	sll	r16,r16,r21
    9fd4:	b009883a 	mov	r4,r22
    9fd8:	900b883a 	mov	r5,r18
    9fdc:	3568983a 	sll	r20,r6,r21
    9fe0:	1420b03a 	or	r16,r2,r16
    9fe4:	00006080 	call	608 <__umodsi3>
    9fe8:	b009883a 	mov	r4,r22
    9fec:	900b883a 	mov	r5,r18
    9ff0:	1023883a 	mov	r17,r2
    9ff4:	00005a40 	call	5a4 <__udivsi3>
    9ff8:	8808943a 	slli	r4,r17,16
    9ffc:	bf3fffcc 	andi	fp,r23,65535
    a000:	8006d43a 	srli	r3,r16,16
    a004:	e0a3383a 	mul	r17,fp,r2
    a008:	100d883a 	mov	r6,r2
    a00c:	1906b03a 	or	r3,r3,r4
    a010:	1c40042e 	bgeu	r3,r17,a024 <__udivdi3+0x370>
    a014:	1dc7883a 	add	r3,r3,r23
    a018:	10bfffc4 	addi	r2,r2,-1
    a01c:	1dc0752e 	bgeu	r3,r23,a1f4 <__udivdi3+0x540>
    a020:	100d883a 	mov	r6,r2
    a024:	1c63c83a 	sub	r17,r3,r17
    a028:	900b883a 	mov	r5,r18
    a02c:	8809883a 	mov	r4,r17
    a030:	d9800015 	stw	r6,0(sp)
    a034:	00006080 	call	608 <__umodsi3>
    a038:	102d883a 	mov	r22,r2
    a03c:	8809883a 	mov	r4,r17
    a040:	900b883a 	mov	r5,r18
    a044:	00005a40 	call	5a4 <__udivsi3>
    a048:	b02c943a 	slli	r22,r22,16
    a04c:	e089383a 	mul	r4,fp,r2
    a050:	843fffcc 	andi	r16,r16,65535
    a054:	85a0b03a 	or	r16,r16,r22
    a058:	d9800017 	ldw	r6,0(sp)
    a05c:	8100042e 	bgeu	r16,r4,a070 <__udivdi3+0x3bc>
    a060:	85e1883a 	add	r16,r16,r23
    a064:	10ffffc4 	addi	r3,r2,-1
    a068:	85c05e2e 	bgeu	r16,r23,a1e4 <__udivdi3+0x530>
    a06c:	1805883a 	mov	r2,r3
    a070:	300c943a 	slli	r6,r6,16
    a074:	a17fffcc 	andi	r5,r20,65535
    a078:	a028d43a 	srli	r20,r20,16
    a07c:	3084b03a 	or	r2,r6,r2
    a080:	10ffffcc 	andi	r3,r2,65535
    a084:	100cd43a 	srli	r6,r2,16
    a088:	194f383a 	mul	r7,r3,r5
    a08c:	1d07383a 	mul	r3,r3,r20
    a090:	314b383a 	mul	r5,r6,r5
    a094:	3810d43a 	srli	r8,r7,16
    a098:	8121c83a 	sub	r16,r16,r4
    a09c:	1947883a 	add	r3,r3,r5
    a0a0:	40c7883a 	add	r3,r8,r3
    a0a4:	350d383a 	mul	r6,r6,r20
    a0a8:	1940022e 	bgeu	r3,r5,a0b4 <__udivdi3+0x400>
    a0ac:	01000074 	movhi	r4,1
    a0b0:	310d883a 	add	r6,r6,r4
    a0b4:	1828d43a 	srli	r20,r3,16
    a0b8:	a18d883a 	add	r6,r20,r6
    a0bc:	81803e36 	bltu	r16,r6,a1b8 <__udivdi3+0x504>
    a0c0:	81803826 	beq	r16,r6,a1a4 <__udivdi3+0x4f0>
    a0c4:	0007883a 	mov	r3,zero
    a0c8:	003fa206 	br	9f54 <__udivdi3+0x2a0>
    a0cc:	88e2983a 	sll	r17,r17,r3
    a0d0:	80a8d83a 	srl	r20,r16,r2
    a0d4:	80e0983a 	sll	r16,r16,r3
    a0d8:	882ad43a 	srli	r21,r17,16
    a0dc:	9884d83a 	srl	r2,r19,r2
    a0e0:	a009883a 	mov	r4,r20
    a0e4:	a80b883a 	mov	r5,r21
    a0e8:	142eb03a 	or	r23,r2,r16
    a0ec:	98e4983a 	sll	r18,r19,r3
    a0f0:	00006080 	call	608 <__umodsi3>
    a0f4:	a009883a 	mov	r4,r20
    a0f8:	a80b883a 	mov	r5,r21
    a0fc:	1021883a 	mov	r16,r2
    a100:	00005a40 	call	5a4 <__udivsi3>
    a104:	1039883a 	mov	fp,r2
    a108:	8d3fffcc 	andi	r20,r17,65535
    a10c:	8020943a 	slli	r16,r16,16
    a110:	b804d43a 	srli	r2,r23,16
    a114:	a72d383a 	mul	r22,r20,fp
    a118:	1404b03a 	or	r2,r2,r16
    a11c:	1580062e 	bgeu	r2,r22,a138 <__udivdi3+0x484>
    a120:	1445883a 	add	r2,r2,r17
    a124:	e0ffffc4 	addi	r3,fp,-1
    a128:	14403836 	bltu	r2,r17,a20c <__udivdi3+0x558>
    a12c:	1580372e 	bgeu	r2,r22,a20c <__udivdi3+0x558>
    a130:	e73fff84 	addi	fp,fp,-2
    a134:	1445883a 	add	r2,r2,r17
    a138:	15adc83a 	sub	r22,r2,r22
    a13c:	a80b883a 	mov	r5,r21
    a140:	b009883a 	mov	r4,r22
    a144:	00006080 	call	608 <__umodsi3>
    a148:	1027883a 	mov	r19,r2
    a14c:	b009883a 	mov	r4,r22
    a150:	a80b883a 	mov	r5,r21
    a154:	00005a40 	call	5a4 <__udivsi3>
    a158:	9826943a 	slli	r19,r19,16
    a15c:	a0a1383a 	mul	r16,r20,r2
    a160:	b93fffcc 	andi	r4,r23,65535
    a164:	24c8b03a 	or	r4,r4,r19
    a168:	2400062e 	bgeu	r4,r16,a184 <__udivdi3+0x4d0>
    a16c:	2449883a 	add	r4,r4,r17
    a170:	10ffffc4 	addi	r3,r2,-1
    a174:	24402336 	bltu	r4,r17,a204 <__udivdi3+0x550>
    a178:	2400222e 	bgeu	r4,r16,a204 <__udivdi3+0x550>
    a17c:	10bfff84 	addi	r2,r2,-2
    a180:	2449883a 	add	r4,r4,r17
    a184:	e038943a 	slli	fp,fp,16
    a188:	2421c83a 	sub	r16,r4,r16
    a18c:	e086b03a 	or	r3,fp,r2
    a190:	003f4306 	br	9ea0 <__udivdi3+0x1ec>
    a194:	2005883a 	mov	r2,r4
    a198:	003f6906 	br	9f40 <__udivdi3+0x28c>
    a19c:	1805883a 	mov	r2,r3
    a1a0:	003f0f06 	br	9de0 <__udivdi3+0x12c>
    a1a4:	1806943a 	slli	r3,r3,16
    a1a8:	9d66983a 	sll	r19,r19,r21
    a1ac:	39ffffcc 	andi	r7,r7,65535
    a1b0:	19c7883a 	add	r3,r3,r7
    a1b4:	98ffc32e 	bgeu	r19,r3,a0c4 <__udivdi3+0x410>
    a1b8:	10bfffc4 	addi	r2,r2,-1
    a1bc:	003fc106 	br	a0c4 <__udivdi3+0x410>
    a1c0:	00800604 	movi	r2,24
    a1c4:	003f1106 	br	9e0c <__udivdi3+0x158>
    a1c8:	00800604 	movi	r2,24
    a1cc:	003f2706 	br	9e6c <__udivdi3+0x1b8>
    a1d0:	00800604 	movi	r2,24
    a1d4:	003ece06 	br	9d10 <__udivdi3+0x5c>
    a1d8:	0007883a 	mov	r3,zero
    a1dc:	00800044 	movi	r2,1
    a1e0:	003f5c06 	br	9f54 <__udivdi3+0x2a0>
    a1e4:	813fa12e 	bgeu	r16,r4,a06c <__udivdi3+0x3b8>
    a1e8:	10bfff84 	addi	r2,r2,-2
    a1ec:	85e1883a 	add	r16,r16,r23
    a1f0:	003f9f06 	br	a070 <__udivdi3+0x3bc>
    a1f4:	1c7f8a2e 	bgeu	r3,r17,a020 <__udivdi3+0x36c>
    a1f8:	31bfff84 	addi	r6,r6,-2
    a1fc:	1dc7883a 	add	r3,r3,r23
    a200:	003f8806 	br	a024 <__udivdi3+0x370>
    a204:	1805883a 	mov	r2,r3
    a208:	003fde06 	br	a184 <__udivdi3+0x4d0>
    a20c:	1839883a 	mov	fp,r3
    a210:	003fc906 	br	a138 <__udivdi3+0x484>
    a214:	b5bfff84 	addi	r22,r22,-2
    a218:	2449883a 	add	r4,r4,r17
    a21c:	003f3406 	br	9ef0 <__udivdi3+0x23c>
    a220:	b5bfff84 	addi	r22,r22,-2
    a224:	1445883a 	add	r2,r2,r17
    a228:	003edb06 	br	9d98 <__udivdi3+0xe4>

0000a22c <__umoddi3>:
    a22c:	defff404 	addi	sp,sp,-48
    a230:	df000a15 	stw	fp,40(sp)
    a234:	dc400315 	stw	r17,12(sp)
    a238:	dc000215 	stw	r16,8(sp)
    a23c:	dfc00b15 	stw	ra,44(sp)
    a240:	ddc00915 	stw	r23,36(sp)
    a244:	dd800815 	stw	r22,32(sp)
    a248:	dd400715 	stw	r21,28(sp)
    a24c:	dd000615 	stw	r20,24(sp)
    a250:	dcc00515 	stw	r19,20(sp)
    a254:	dc800415 	stw	r18,16(sp)
    a258:	2021883a 	mov	r16,r4
    a25c:	2823883a 	mov	r17,r5
    a260:	2839883a 	mov	fp,r5
    a264:	38003c1e 	bne	r7,zero,a358 <__umoddi3+0x12c>
    a268:	3027883a 	mov	r19,r6
    a26c:	2029883a 	mov	r20,r4
    a270:	2980512e 	bgeu	r5,r6,a3b8 <__umoddi3+0x18c>
    a274:	00bfffd4 	movui	r2,65535
    a278:	11809a36 	bltu	r2,r6,a4e4 <__umoddi3+0x2b8>
    a27c:	01003fc4 	movi	r4,255
    a280:	2189803a 	cmpltu	r4,r4,r6
    a284:	200890fa 	slli	r4,r4,3
    a288:	3104d83a 	srl	r2,r6,r4
    a28c:	00c00074 	movhi	r3,1
    a290:	18c2a404 	addi	r3,r3,2704
    a294:	1885883a 	add	r2,r3,r2
    a298:	10c00003 	ldbu	r3,0(r2)
    a29c:	00800804 	movi	r2,32
    a2a0:	1909883a 	add	r4,r3,r4
    a2a4:	1125c83a 	sub	r18,r2,r4
    a2a8:	90000526 	beq	r18,zero,a2c0 <__umoddi3+0x94>
    a2ac:	8ca2983a 	sll	r17,r17,r18
    a2b0:	8108d83a 	srl	r4,r16,r4
    a2b4:	34a6983a 	sll	r19,r6,r18
    a2b8:	84a8983a 	sll	r20,r16,r18
    a2bc:	2478b03a 	or	fp,r4,r17
    a2c0:	982ed43a 	srli	r23,r19,16
    a2c4:	e009883a 	mov	r4,fp
    a2c8:	9dbfffcc 	andi	r22,r19,65535
    a2cc:	b80b883a 	mov	r5,r23
    a2d0:	00006080 	call	608 <__umodsi3>
    a2d4:	e009883a 	mov	r4,fp
    a2d8:	b80b883a 	mov	r5,r23
    a2dc:	102b883a 	mov	r21,r2
    a2e0:	00005a40 	call	5a4 <__udivsi3>
    a2e4:	a806943a 	slli	r3,r21,16
    a2e8:	a008d43a 	srli	r4,r20,16
    a2ec:	b085383a 	mul	r2,r22,r2
    a2f0:	20c8b03a 	or	r4,r4,r3
    a2f4:	2080032e 	bgeu	r4,r2,a304 <__umoddi3+0xd8>
    a2f8:	24c9883a 	add	r4,r4,r19
    a2fc:	24c00136 	bltu	r4,r19,a304 <__umoddi3+0xd8>
    a300:	20811036 	bltu	r4,r2,a744 <__umoddi3+0x518>
    a304:	20abc83a 	sub	r21,r4,r2
    a308:	b80b883a 	mov	r5,r23
    a30c:	a809883a 	mov	r4,r21
    a310:	00006080 	call	608 <__umodsi3>
    a314:	1023883a 	mov	r17,r2
    a318:	b80b883a 	mov	r5,r23
    a31c:	a809883a 	mov	r4,r21
    a320:	00005a40 	call	5a4 <__udivsi3>
    a324:	8822943a 	slli	r17,r17,16
    a328:	b085383a 	mul	r2,r22,r2
    a32c:	a0ffffcc 	andi	r3,r20,65535
    a330:	1c46b03a 	or	r3,r3,r17
    a334:	1880042e 	bgeu	r3,r2,a348 <__umoddi3+0x11c>
    a338:	1cc7883a 	add	r3,r3,r19
    a33c:	1cc00236 	bltu	r3,r19,a348 <__umoddi3+0x11c>
    a340:	1880012e 	bgeu	r3,r2,a348 <__umoddi3+0x11c>
    a344:	1cc7883a 	add	r3,r3,r19
    a348:	1885c83a 	sub	r2,r3,r2
    a34c:	1484d83a 	srl	r2,r2,r18
    a350:	0007883a 	mov	r3,zero
    a354:	00004f06 	br	a494 <__umoddi3+0x268>
    a358:	29c04c36 	bltu	r5,r7,a48c <__umoddi3+0x260>
    a35c:	00bfffd4 	movui	r2,65535
    a360:	11c0582e 	bgeu	r2,r7,a4c4 <__umoddi3+0x298>
    a364:	00804034 	movhi	r2,256
    a368:	10bfffc4 	addi	r2,r2,-1
    a36c:	11c0e736 	bltu	r2,r7,a70c <__umoddi3+0x4e0>
    a370:	01000404 	movi	r4,16
    a374:	3904d83a 	srl	r2,r7,r4
    a378:	00c00074 	movhi	r3,1
    a37c:	18c2a404 	addi	r3,r3,2704
    a380:	1885883a 	add	r2,r3,r2
    a384:	14c00003 	ldbu	r19,0(r2)
    a388:	00c00804 	movi	r3,32
    a38c:	9927883a 	add	r19,r19,r4
    a390:	1ce9c83a 	sub	r20,r3,r19
    a394:	a000581e 	bne	r20,zero,a4f8 <__umoddi3+0x2cc>
    a398:	3c400136 	bltu	r7,r17,a3a0 <__umoddi3+0x174>
    a39c:	8180eb36 	bltu	r16,r6,a74c <__umoddi3+0x520>
    a3a0:	8185c83a 	sub	r2,r16,r6
    a3a4:	89e3c83a 	sub	r17,r17,r7
    a3a8:	8089803a 	cmpltu	r4,r16,r2
    a3ac:	8939c83a 	sub	fp,r17,r4
    a3b0:	e007883a 	mov	r3,fp
    a3b4:	00003706 	br	a494 <__umoddi3+0x268>
    a3b8:	3000041e 	bne	r6,zero,a3cc <__umoddi3+0x1a0>
    a3bc:	000b883a 	mov	r5,zero
    a3c0:	01000044 	movi	r4,1
    a3c4:	00005a40 	call	5a4 <__udivsi3>
    a3c8:	1027883a 	mov	r19,r2
    a3cc:	00bfffd4 	movui	r2,65535
    a3d0:	14c0402e 	bgeu	r2,r19,a4d4 <__umoddi3+0x2a8>
    a3d4:	00804034 	movhi	r2,256
    a3d8:	10bfffc4 	addi	r2,r2,-1
    a3dc:	14c0cd36 	bltu	r2,r19,a714 <__umoddi3+0x4e8>
    a3e0:	00800404 	movi	r2,16
    a3e4:	9886d83a 	srl	r3,r19,r2
    a3e8:	01000074 	movhi	r4,1
    a3ec:	2102a404 	addi	r4,r4,2704
    a3f0:	20c7883a 	add	r3,r4,r3
    a3f4:	18c00003 	ldbu	r3,0(r3)
    a3f8:	1887883a 	add	r3,r3,r2
    a3fc:	00800804 	movi	r2,32
    a400:	10e5c83a 	sub	r18,r2,r3
    a404:	9000901e 	bne	r18,zero,a648 <__umoddi3+0x41c>
    a408:	982cd43a 	srli	r22,r19,16
    a40c:	8ce3c83a 	sub	r17,r17,r19
    a410:	9d7fffcc 	andi	r21,r19,65535
    a414:	b00b883a 	mov	r5,r22
    a418:	8809883a 	mov	r4,r17
    a41c:	00006080 	call	608 <__umodsi3>
    a420:	8809883a 	mov	r4,r17
    a424:	b00b883a 	mov	r5,r22
    a428:	1021883a 	mov	r16,r2
    a42c:	00005a40 	call	5a4 <__udivsi3>
    a430:	8006943a 	slli	r3,r16,16
    a434:	a008d43a 	srli	r4,r20,16
    a438:	1545383a 	mul	r2,r2,r21
    a43c:	20c8b03a 	or	r4,r4,r3
    a440:	2080042e 	bgeu	r4,r2,a454 <__umoddi3+0x228>
    a444:	24c9883a 	add	r4,r4,r19
    a448:	24c00236 	bltu	r4,r19,a454 <__umoddi3+0x228>
    a44c:	2080012e 	bgeu	r4,r2,a454 <__umoddi3+0x228>
    a450:	24c9883a 	add	r4,r4,r19
    a454:	20a1c83a 	sub	r16,r4,r2
    a458:	b00b883a 	mov	r5,r22
    a45c:	8009883a 	mov	r4,r16
    a460:	00006080 	call	608 <__umodsi3>
    a464:	1023883a 	mov	r17,r2
    a468:	b00b883a 	mov	r5,r22
    a46c:	8009883a 	mov	r4,r16
    a470:	00005a40 	call	5a4 <__udivsi3>
    a474:	8822943a 	slli	r17,r17,16
    a478:	1545383a 	mul	r2,r2,r21
    a47c:	a53fffcc 	andi	r20,r20,65535
    a480:	a446b03a 	or	r3,r20,r17
    a484:	18bfb02e 	bgeu	r3,r2,a348 <__umoddi3+0x11c>
    a488:	003fab06 	br	a338 <__umoddi3+0x10c>
    a48c:	2005883a 	mov	r2,r4
    a490:	2807883a 	mov	r3,r5
    a494:	dfc00b17 	ldw	ra,44(sp)
    a498:	df000a17 	ldw	fp,40(sp)
    a49c:	ddc00917 	ldw	r23,36(sp)
    a4a0:	dd800817 	ldw	r22,32(sp)
    a4a4:	dd400717 	ldw	r21,28(sp)
    a4a8:	dd000617 	ldw	r20,24(sp)
    a4ac:	dcc00517 	ldw	r19,20(sp)
    a4b0:	dc800417 	ldw	r18,16(sp)
    a4b4:	dc400317 	ldw	r17,12(sp)
    a4b8:	dc000217 	ldw	r16,8(sp)
    a4bc:	dec00c04 	addi	sp,sp,48
    a4c0:	f800283a 	ret
    a4c4:	04c03fc4 	movi	r19,255
    a4c8:	99c9803a 	cmpltu	r4,r19,r7
    a4cc:	200890fa 	slli	r4,r4,3
    a4d0:	003fa806 	br	a374 <__umoddi3+0x148>
    a4d4:	00803fc4 	movi	r2,255
    a4d8:	14c5803a 	cmpltu	r2,r2,r19
    a4dc:	100490fa 	slli	r2,r2,3
    a4e0:	003fc006 	br	a3e4 <__umoddi3+0x1b8>
    a4e4:	00804034 	movhi	r2,256
    a4e8:	10bfffc4 	addi	r2,r2,-1
    a4ec:	11808b36 	bltu	r2,r6,a71c <__umoddi3+0x4f0>
    a4f0:	01000404 	movi	r4,16
    a4f4:	003f6406 	br	a288 <__umoddi3+0x5c>
    a4f8:	34c4d83a 	srl	r2,r6,r19
    a4fc:	3d0e983a 	sll	r7,r7,r20
    a500:	8cf8d83a 	srl	fp,r17,r19
    a504:	8d10983a 	sll	r8,r17,r20
    a508:	38aab03a 	or	r21,r7,r2
    a50c:	a82cd43a 	srli	r22,r21,16
    a510:	84e2d83a 	srl	r17,r16,r19
    a514:	e009883a 	mov	r4,fp
    a518:	b00b883a 	mov	r5,r22
    a51c:	8a22b03a 	or	r17,r17,r8
    a520:	3524983a 	sll	r18,r6,r20
    a524:	00006080 	call	608 <__umodsi3>
    a528:	e009883a 	mov	r4,fp
    a52c:	b00b883a 	mov	r5,r22
    a530:	102f883a 	mov	r23,r2
    a534:	00005a40 	call	5a4 <__udivsi3>
    a538:	100d883a 	mov	r6,r2
    a53c:	b808943a 	slli	r4,r23,16
    a540:	aa3fffcc 	andi	r8,r21,65535
    a544:	8804d43a 	srli	r2,r17,16
    a548:	41af383a 	mul	r23,r8,r6
    a54c:	8520983a 	sll	r16,r16,r20
    a550:	1104b03a 	or	r2,r2,r4
    a554:	15c0042e 	bgeu	r2,r23,a568 <__umoddi3+0x33c>
    a558:	1545883a 	add	r2,r2,r21
    a55c:	30ffffc4 	addi	r3,r6,-1
    a560:	1540742e 	bgeu	r2,r21,a734 <__umoddi3+0x508>
    a564:	180d883a 	mov	r6,r3
    a568:	15efc83a 	sub	r23,r2,r23
    a56c:	b00b883a 	mov	r5,r22
    a570:	b809883a 	mov	r4,r23
    a574:	d9800115 	stw	r6,4(sp)
    a578:	da000015 	stw	r8,0(sp)
    a57c:	00006080 	call	608 <__umodsi3>
    a580:	b00b883a 	mov	r5,r22
    a584:	b809883a 	mov	r4,r23
    a588:	1039883a 	mov	fp,r2
    a58c:	00005a40 	call	5a4 <__udivsi3>
    a590:	da000017 	ldw	r8,0(sp)
    a594:	e038943a 	slli	fp,fp,16
    a598:	100b883a 	mov	r5,r2
    a59c:	4089383a 	mul	r4,r8,r2
    a5a0:	8a3fffcc 	andi	r8,r17,65535
    a5a4:	4710b03a 	or	r8,r8,fp
    a5a8:	d9800117 	ldw	r6,4(sp)
    a5ac:	4100042e 	bgeu	r8,r4,a5c0 <__umoddi3+0x394>
    a5b0:	4551883a 	add	r8,r8,r21
    a5b4:	10bfffc4 	addi	r2,r2,-1
    a5b8:	45405a2e 	bgeu	r8,r21,a724 <__umoddi3+0x4f8>
    a5bc:	100b883a 	mov	r5,r2
    a5c0:	300c943a 	slli	r6,r6,16
    a5c4:	91ffffcc 	andi	r7,r18,65535
    a5c8:	9004d43a 	srli	r2,r18,16
    a5cc:	314cb03a 	or	r6,r6,r5
    a5d0:	317fffcc 	andi	r5,r6,65535
    a5d4:	300cd43a 	srli	r6,r6,16
    a5d8:	29d3383a 	mul	r9,r5,r7
    a5dc:	288b383a 	mul	r5,r5,r2
    a5e0:	31cf383a 	mul	r7,r6,r7
    a5e4:	4806d43a 	srli	r3,r9,16
    a5e8:	4111c83a 	sub	r8,r8,r4
    a5ec:	29cb883a 	add	r5,r5,r7
    a5f0:	194b883a 	add	r5,r3,r5
    a5f4:	3085383a 	mul	r2,r6,r2
    a5f8:	29c0022e 	bgeu	r5,r7,a604 <__umoddi3+0x3d8>
    a5fc:	00c00074 	movhi	r3,1
    a600:	10c5883a 	add	r2,r2,r3
    a604:	2808d43a 	srli	r4,r5,16
    a608:	280a943a 	slli	r5,r5,16
    a60c:	4a7fffcc 	andi	r9,r9,65535
    a610:	2085883a 	add	r2,r4,r2
    a614:	2a4b883a 	add	r5,r5,r9
    a618:	40803636 	bltu	r8,r2,a6f4 <__umoddi3+0x4c8>
    a61c:	40804d26 	beq	r8,r2,a754 <__umoddi3+0x528>
    a620:	4089c83a 	sub	r4,r8,r2
    a624:	280f883a 	mov	r7,r5
    a628:	81cfc83a 	sub	r7,r16,r7
    a62c:	81c7803a 	cmpltu	r3,r16,r7
    a630:	20c7c83a 	sub	r3,r4,r3
    a634:	1cc4983a 	sll	r2,r3,r19
    a638:	3d0ed83a 	srl	r7,r7,r20
    a63c:	1d06d83a 	srl	r3,r3,r20
    a640:	11c4b03a 	or	r2,r2,r7
    a644:	003f9306 	br	a494 <__umoddi3+0x268>
    a648:	9ca6983a 	sll	r19,r19,r18
    a64c:	88e8d83a 	srl	r20,r17,r3
    a650:	80c4d83a 	srl	r2,r16,r3
    a654:	982cd43a 	srli	r22,r19,16
    a658:	8ca2983a 	sll	r17,r17,r18
    a65c:	a009883a 	mov	r4,r20
    a660:	b00b883a 	mov	r5,r22
    a664:	1478b03a 	or	fp,r2,r17
    a668:	00006080 	call	608 <__umodsi3>
    a66c:	a009883a 	mov	r4,r20
    a670:	b00b883a 	mov	r5,r22
    a674:	1023883a 	mov	r17,r2
    a678:	00005a40 	call	5a4 <__udivsi3>
    a67c:	9d7fffcc 	andi	r21,r19,65535
    a680:	880a943a 	slli	r5,r17,16
    a684:	e008d43a 	srli	r4,fp,16
    a688:	a885383a 	mul	r2,r21,r2
    a68c:	84a8983a 	sll	r20,r16,r18
    a690:	2148b03a 	or	r4,r4,r5
    a694:	2080042e 	bgeu	r4,r2,a6a8 <__umoddi3+0x47c>
    a698:	24c9883a 	add	r4,r4,r19
    a69c:	24c00236 	bltu	r4,r19,a6a8 <__umoddi3+0x47c>
    a6a0:	2080012e 	bgeu	r4,r2,a6a8 <__umoddi3+0x47c>
    a6a4:	24c9883a 	add	r4,r4,r19
    a6a8:	20a3c83a 	sub	r17,r4,r2
    a6ac:	b00b883a 	mov	r5,r22
    a6b0:	8809883a 	mov	r4,r17
    a6b4:	00006080 	call	608 <__umodsi3>
    a6b8:	102f883a 	mov	r23,r2
    a6bc:	8809883a 	mov	r4,r17
    a6c0:	b00b883a 	mov	r5,r22
    a6c4:	00005a40 	call	5a4 <__udivsi3>
    a6c8:	b82e943a 	slli	r23,r23,16
    a6cc:	a885383a 	mul	r2,r21,r2
    a6d0:	e13fffcc 	andi	r4,fp,65535
    a6d4:	25c8b03a 	or	r4,r4,r23
    a6d8:	2080042e 	bgeu	r4,r2,a6ec <__umoddi3+0x4c0>
    a6dc:	24c9883a 	add	r4,r4,r19
    a6e0:	24c00236 	bltu	r4,r19,a6ec <__umoddi3+0x4c0>
    a6e4:	2080012e 	bgeu	r4,r2,a6ec <__umoddi3+0x4c0>
    a6e8:	24c9883a 	add	r4,r4,r19
    a6ec:	20a3c83a 	sub	r17,r4,r2
    a6f0:	003f4806 	br	a414 <__umoddi3+0x1e8>
    a6f4:	2c8fc83a 	sub	r7,r5,r18
    a6f8:	1545c83a 	sub	r2,r2,r21
    a6fc:	29cb803a 	cmpltu	r5,r5,r7
    a700:	1145c83a 	sub	r2,r2,r5
    a704:	4089c83a 	sub	r4,r8,r2
    a708:	003fc706 	br	a628 <__umoddi3+0x3fc>
    a70c:	01000604 	movi	r4,24
    a710:	003f1806 	br	a374 <__umoddi3+0x148>
    a714:	00800604 	movi	r2,24
    a718:	003f3206 	br	a3e4 <__umoddi3+0x1b8>
    a71c:	01000604 	movi	r4,24
    a720:	003ed906 	br	a288 <__umoddi3+0x5c>
    a724:	413fa52e 	bgeu	r8,r4,a5bc <__umoddi3+0x390>
    a728:	297fff84 	addi	r5,r5,-2
    a72c:	4551883a 	add	r8,r8,r21
    a730:	003fa306 	br	a5c0 <__umoddi3+0x394>
    a734:	15ff8b2e 	bgeu	r2,r23,a564 <__umoddi3+0x338>
    a738:	31bfff84 	addi	r6,r6,-2
    a73c:	1545883a 	add	r2,r2,r21
    a740:	003f8906 	br	a568 <__umoddi3+0x33c>
    a744:	24c9883a 	add	r4,r4,r19
    a748:	003eee06 	br	a304 <__umoddi3+0xd8>
    a74c:	8005883a 	mov	r2,r16
    a750:	003f1706 	br	a3b0 <__umoddi3+0x184>
    a754:	817fe736 	bltu	r16,r5,a6f4 <__umoddi3+0x4c8>
    a758:	280f883a 	mov	r7,r5
    a75c:	0009883a 	mov	r4,zero
    a760:	003fb106 	br	a628 <__umoddi3+0x3fc>

0000a764 <__adddf3>:
    a764:	02c00434 	movhi	r11,16
    a768:	5affffc4 	addi	r11,r11,-1
    a76c:	2806d7fa 	srli	r3,r5,31
    a770:	2ad4703a 	and	r10,r5,r11
    a774:	3ad2703a 	and	r9,r7,r11
    a778:	3804d53a 	srli	r2,r7,20
    a77c:	3018d77a 	srli	r12,r6,29
    a780:	280ad53a 	srli	r5,r5,20
    a784:	501490fa 	slli	r10,r10,3
    a788:	2010d77a 	srli	r8,r4,29
    a78c:	481290fa 	slli	r9,r9,3
    a790:	380ed7fa 	srli	r7,r7,31
    a794:	defffb04 	addi	sp,sp,-20
    a798:	dc800215 	stw	r18,8(sp)
    a79c:	dc400115 	stw	r17,4(sp)
    a7a0:	dc000015 	stw	r16,0(sp)
    a7a4:	dfc00415 	stw	ra,16(sp)
    a7a8:	dcc00315 	stw	r19,12(sp)
    a7ac:	1c803fcc 	andi	r18,r3,255
    a7b0:	2c01ffcc 	andi	r16,r5,2047
    a7b4:	5210b03a 	or	r8,r10,r8
    a7b8:	202290fa 	slli	r17,r4,3
    a7bc:	1081ffcc 	andi	r2,r2,2047
    a7c0:	4b12b03a 	or	r9,r9,r12
    a7c4:	300c90fa 	slli	r6,r6,3
    a7c8:	91c07526 	beq	r18,r7,a9a0 <__adddf3+0x23c>
    a7cc:	8087c83a 	sub	r3,r16,r2
    a7d0:	00c0ab0e 	bge	zero,r3,aa80 <__adddf3+0x31c>
    a7d4:	10002a1e 	bne	r2,zero,a880 <__adddf3+0x11c>
    a7d8:	4984b03a 	or	r2,r9,r6
    a7dc:	1000961e 	bne	r2,zero,aa38 <__adddf3+0x2d4>
    a7e0:	888001cc 	andi	r2,r17,7
    a7e4:	10000726 	beq	r2,zero,a804 <__adddf3+0xa0>
    a7e8:	888003cc 	andi	r2,r17,15
    a7ec:	00c00104 	movi	r3,4
    a7f0:	10c00426 	beq	r2,r3,a804 <__adddf3+0xa0>
    a7f4:	88c7883a 	add	r3,r17,r3
    a7f8:	1c63803a 	cmpltu	r17,r3,r17
    a7fc:	4451883a 	add	r8,r8,r17
    a800:	1823883a 	mov	r17,r3
    a804:	4080202c 	andhi	r2,r8,128
    a808:	10005926 	beq	r2,zero,a970 <__adddf3+0x20c>
    a80c:	84000044 	addi	r16,r16,1
    a810:	0081ffc4 	movi	r2,2047
    a814:	8080ba26 	beq	r16,r2,ab00 <__adddf3+0x39c>
    a818:	00bfe034 	movhi	r2,65408
    a81c:	10bfffc4 	addi	r2,r2,-1
    a820:	4090703a 	and	r8,r8,r2
    a824:	4004977a 	slli	r2,r8,29
    a828:	4010927a 	slli	r8,r8,9
    a82c:	8822d0fa 	srli	r17,r17,3
    a830:	8401ffcc 	andi	r16,r16,2047
    a834:	4010d33a 	srli	r8,r8,12
    a838:	9007883a 	mov	r3,r18
    a83c:	1444b03a 	or	r2,r2,r17
    a840:	8401ffcc 	andi	r16,r16,2047
    a844:	8020953a 	slli	r16,r16,20
    a848:	18c03fcc 	andi	r3,r3,255
    a84c:	01000434 	movhi	r4,16
    a850:	213fffc4 	addi	r4,r4,-1
    a854:	180697fa 	slli	r3,r3,31
    a858:	4110703a 	and	r8,r8,r4
    a85c:	4410b03a 	or	r8,r8,r16
    a860:	40c6b03a 	or	r3,r8,r3
    a864:	dfc00417 	ldw	ra,16(sp)
    a868:	dcc00317 	ldw	r19,12(sp)
    a86c:	dc800217 	ldw	r18,8(sp)
    a870:	dc400117 	ldw	r17,4(sp)
    a874:	dc000017 	ldw	r16,0(sp)
    a878:	dec00504 	addi	sp,sp,20
    a87c:	f800283a 	ret
    a880:	0081ffc4 	movi	r2,2047
    a884:	80bfd626 	beq	r16,r2,a7e0 <__adddf3+0x7c>
    a888:	4a402034 	orhi	r9,r9,128
    a88c:	00800e04 	movi	r2,56
    a890:	10c09f16 	blt	r2,r3,ab10 <__adddf3+0x3ac>
    a894:	008007c4 	movi	r2,31
    a898:	10c0c216 	blt	r2,r3,aba4 <__adddf3+0x440>
    a89c:	00800804 	movi	r2,32
    a8a0:	10c5c83a 	sub	r2,r2,r3
    a8a4:	488a983a 	sll	r5,r9,r2
    a8a8:	30c8d83a 	srl	r4,r6,r3
    a8ac:	3084983a 	sll	r2,r6,r2
    a8b0:	48c6d83a 	srl	r3,r9,r3
    a8b4:	290cb03a 	or	r6,r5,r4
    a8b8:	1004c03a 	cmpne	r2,r2,zero
    a8bc:	308cb03a 	or	r6,r6,r2
    a8c0:	898dc83a 	sub	r6,r17,r6
    a8c4:	89a3803a 	cmpltu	r17,r17,r6
    a8c8:	40d1c83a 	sub	r8,r8,r3
    a8cc:	4451c83a 	sub	r8,r8,r17
    a8d0:	3023883a 	mov	r17,r6
    a8d4:	4080202c 	andhi	r2,r8,128
    a8d8:	10002326 	beq	r2,zero,a968 <__adddf3+0x204>
    a8dc:	04c02034 	movhi	r19,128
    a8e0:	9cffffc4 	addi	r19,r19,-1
    a8e4:	44e6703a 	and	r19,r8,r19
    a8e8:	98007626 	beq	r19,zero,aac4 <__adddf3+0x360>
    a8ec:	9809883a 	mov	r4,r19
    a8f0:	000cd680 	call	cd68 <__clzsi2>
    a8f4:	10fffe04 	addi	r3,r2,-8
    a8f8:	010007c4 	movi	r4,31
    a8fc:	20c07716 	blt	r4,r3,aadc <__adddf3+0x378>
    a900:	00800804 	movi	r2,32
    a904:	10c5c83a 	sub	r2,r2,r3
    a908:	8884d83a 	srl	r2,r17,r2
    a90c:	98d0983a 	sll	r8,r19,r3
    a910:	88e2983a 	sll	r17,r17,r3
    a914:	1204b03a 	or	r2,r2,r8
    a918:	1c007416 	blt	r3,r16,aaec <__adddf3+0x388>
    a91c:	1c21c83a 	sub	r16,r3,r16
    a920:	82000044 	addi	r8,r16,1
    a924:	00c007c4 	movi	r3,31
    a928:	1a009116 	blt	r3,r8,ab70 <__adddf3+0x40c>
    a92c:	00c00804 	movi	r3,32
    a930:	1a07c83a 	sub	r3,r3,r8
    a934:	8a08d83a 	srl	r4,r17,r8
    a938:	88e2983a 	sll	r17,r17,r3
    a93c:	10c6983a 	sll	r3,r2,r3
    a940:	1210d83a 	srl	r8,r2,r8
    a944:	8804c03a 	cmpne	r2,r17,zero
    a948:	1906b03a 	or	r3,r3,r4
    a94c:	18a2b03a 	or	r17,r3,r2
    a950:	0021883a 	mov	r16,zero
    a954:	003fa206 	br	a7e0 <__adddf3+0x7c>
    a958:	1890b03a 	or	r8,r3,r2
    a95c:	40017d26 	beq	r8,zero,af54 <__adddf3+0x7f0>
    a960:	1011883a 	mov	r8,r2
    a964:	1823883a 	mov	r17,r3
    a968:	888001cc 	andi	r2,r17,7
    a96c:	103f9e1e 	bne	r2,zero,a7e8 <__adddf3+0x84>
    a970:	4004977a 	slli	r2,r8,29
    a974:	8822d0fa 	srli	r17,r17,3
    a978:	4010d0fa 	srli	r8,r8,3
    a97c:	9007883a 	mov	r3,r18
    a980:	1444b03a 	or	r2,r2,r17
    a984:	0101ffc4 	movi	r4,2047
    a988:	81002426 	beq	r16,r4,aa1c <__adddf3+0x2b8>
    a98c:	8120703a 	and	r16,r16,r4
    a990:	01000434 	movhi	r4,16
    a994:	213fffc4 	addi	r4,r4,-1
    a998:	4110703a 	and	r8,r8,r4
    a99c:	003fa806 	br	a840 <__adddf3+0xdc>
    a9a0:	8089c83a 	sub	r4,r16,r2
    a9a4:	01005e0e 	bge	zero,r4,ab20 <__adddf3+0x3bc>
    a9a8:	10002b26 	beq	r2,zero,aa58 <__adddf3+0x2f4>
    a9ac:	0081ffc4 	movi	r2,2047
    a9b0:	80bf8b26 	beq	r16,r2,a7e0 <__adddf3+0x7c>
    a9b4:	4a402034 	orhi	r9,r9,128
    a9b8:	00800e04 	movi	r2,56
    a9bc:	1100a40e 	bge	r2,r4,ac50 <__adddf3+0x4ec>
    a9c0:	498cb03a 	or	r6,r9,r6
    a9c4:	300ac03a 	cmpne	r5,r6,zero
    a9c8:	0013883a 	mov	r9,zero
    a9cc:	2c4b883a 	add	r5,r5,r17
    a9d0:	2c63803a 	cmpltu	r17,r5,r17
    a9d4:	4a11883a 	add	r8,r9,r8
    a9d8:	8a11883a 	add	r8,r17,r8
    a9dc:	2823883a 	mov	r17,r5
    a9e0:	4080202c 	andhi	r2,r8,128
    a9e4:	103fe026 	beq	r2,zero,a968 <__adddf3+0x204>
    a9e8:	84000044 	addi	r16,r16,1
    a9ec:	0081ffc4 	movi	r2,2047
    a9f0:	8080d226 	beq	r16,r2,ad3c <__adddf3+0x5d8>
    a9f4:	00bfe034 	movhi	r2,65408
    a9f8:	10bfffc4 	addi	r2,r2,-1
    a9fc:	4090703a 	and	r8,r8,r2
    aa00:	880ad07a 	srli	r5,r17,1
    aa04:	400897fa 	slli	r4,r8,31
    aa08:	88c0004c 	andi	r3,r17,1
    aa0c:	28e2b03a 	or	r17,r5,r3
    aa10:	4010d07a 	srli	r8,r8,1
    aa14:	2462b03a 	or	r17,r4,r17
    aa18:	003f7106 	br	a7e0 <__adddf3+0x7c>
    aa1c:	4088b03a 	or	r4,r8,r2
    aa20:	20014526 	beq	r4,zero,af38 <__adddf3+0x7d4>
    aa24:	01000434 	movhi	r4,16
    aa28:	42000234 	orhi	r8,r8,8
    aa2c:	213fffc4 	addi	r4,r4,-1
    aa30:	4110703a 	and	r8,r8,r4
    aa34:	003f8206 	br	a840 <__adddf3+0xdc>
    aa38:	18ffffc4 	addi	r3,r3,-1
    aa3c:	1800491e 	bne	r3,zero,ab64 <__adddf3+0x400>
    aa40:	898bc83a 	sub	r5,r17,r6
    aa44:	8963803a 	cmpltu	r17,r17,r5
    aa48:	4251c83a 	sub	r8,r8,r9
    aa4c:	4451c83a 	sub	r8,r8,r17
    aa50:	2823883a 	mov	r17,r5
    aa54:	003f9f06 	br	a8d4 <__adddf3+0x170>
    aa58:	4984b03a 	or	r2,r9,r6
    aa5c:	103f6026 	beq	r2,zero,a7e0 <__adddf3+0x7c>
    aa60:	213fffc4 	addi	r4,r4,-1
    aa64:	2000931e 	bne	r4,zero,acb4 <__adddf3+0x550>
    aa68:	898d883a 	add	r6,r17,r6
    aa6c:	3463803a 	cmpltu	r17,r6,r17
    aa70:	4251883a 	add	r8,r8,r9
    aa74:	8a11883a 	add	r8,r17,r8
    aa78:	3023883a 	mov	r17,r6
    aa7c:	003fd806 	br	a9e0 <__adddf3+0x27c>
    aa80:	1800541e 	bne	r3,zero,abd4 <__adddf3+0x470>
    aa84:	80800044 	addi	r2,r16,1
    aa88:	1081ffcc 	andi	r2,r2,2047
    aa8c:	00c00044 	movi	r3,1
    aa90:	1880a00e 	bge	r3,r2,ad14 <__adddf3+0x5b0>
    aa94:	8989c83a 	sub	r4,r17,r6
    aa98:	8905803a 	cmpltu	r2,r17,r4
    aa9c:	4267c83a 	sub	r19,r8,r9
    aaa0:	98a7c83a 	sub	r19,r19,r2
    aaa4:	9880202c 	andhi	r2,r19,128
    aaa8:	10006326 	beq	r2,zero,ac38 <__adddf3+0x4d4>
    aaac:	3463c83a 	sub	r17,r6,r17
    aab0:	4a07c83a 	sub	r3,r9,r8
    aab4:	344d803a 	cmpltu	r6,r6,r17
    aab8:	19a7c83a 	sub	r19,r3,r6
    aabc:	3825883a 	mov	r18,r7
    aac0:	983f8a1e 	bne	r19,zero,a8ec <__adddf3+0x188>
    aac4:	8809883a 	mov	r4,r17
    aac8:	000cd680 	call	cd68 <__clzsi2>
    aacc:	10800804 	addi	r2,r2,32
    aad0:	10fffe04 	addi	r3,r2,-8
    aad4:	010007c4 	movi	r4,31
    aad8:	20ff890e 	bge	r4,r3,a900 <__adddf3+0x19c>
    aadc:	10bff604 	addi	r2,r2,-40
    aae0:	8884983a 	sll	r2,r17,r2
    aae4:	0023883a 	mov	r17,zero
    aae8:	1c3f8c0e 	bge	r3,r16,a91c <__adddf3+0x1b8>
    aaec:	023fe034 	movhi	r8,65408
    aaf0:	423fffc4 	addi	r8,r8,-1
    aaf4:	80e1c83a 	sub	r16,r16,r3
    aaf8:	1210703a 	and	r8,r2,r8
    aafc:	003f3806 	br	a7e0 <__adddf3+0x7c>
    ab00:	9007883a 	mov	r3,r18
    ab04:	0011883a 	mov	r8,zero
    ab08:	0005883a 	mov	r2,zero
    ab0c:	003f4c06 	br	a840 <__adddf3+0xdc>
    ab10:	498cb03a 	or	r6,r9,r6
    ab14:	300cc03a 	cmpne	r6,r6,zero
    ab18:	0007883a 	mov	r3,zero
    ab1c:	003f6806 	br	a8c0 <__adddf3+0x15c>
    ab20:	20009c1e 	bne	r4,zero,ad94 <__adddf3+0x630>
    ab24:	80800044 	addi	r2,r16,1
    ab28:	1141ffcc 	andi	r5,r2,2047
    ab2c:	01000044 	movi	r4,1
    ab30:	2140670e 	bge	r4,r5,acd0 <__adddf3+0x56c>
    ab34:	0101ffc4 	movi	r4,2047
    ab38:	11007f26 	beq	r2,r4,ad38 <__adddf3+0x5d4>
    ab3c:	898d883a 	add	r6,r17,r6
    ab40:	4247883a 	add	r3,r8,r9
    ab44:	3451803a 	cmpltu	r8,r6,r17
    ab48:	40d1883a 	add	r8,r8,r3
    ab4c:	402297fa 	slli	r17,r8,31
    ab50:	300cd07a 	srli	r6,r6,1
    ab54:	4010d07a 	srli	r8,r8,1
    ab58:	1021883a 	mov	r16,r2
    ab5c:	89a2b03a 	or	r17,r17,r6
    ab60:	003f1f06 	br	a7e0 <__adddf3+0x7c>
    ab64:	0081ffc4 	movi	r2,2047
    ab68:	80bf481e 	bne	r16,r2,a88c <__adddf3+0x128>
    ab6c:	003f1c06 	br	a7e0 <__adddf3+0x7c>
    ab70:	843ff844 	addi	r16,r16,-31
    ab74:	01000804 	movi	r4,32
    ab78:	1406d83a 	srl	r3,r2,r16
    ab7c:	41005026 	beq	r8,r4,acc0 <__adddf3+0x55c>
    ab80:	01001004 	movi	r4,64
    ab84:	2211c83a 	sub	r8,r4,r8
    ab88:	1204983a 	sll	r2,r2,r8
    ab8c:	88a2b03a 	or	r17,r17,r2
    ab90:	8822c03a 	cmpne	r17,r17,zero
    ab94:	1c62b03a 	or	r17,r3,r17
    ab98:	0011883a 	mov	r8,zero
    ab9c:	0021883a 	mov	r16,zero
    aba0:	003f7106 	br	a968 <__adddf3+0x204>
    aba4:	193ff804 	addi	r4,r3,-32
    aba8:	00800804 	movi	r2,32
    abac:	4908d83a 	srl	r4,r9,r4
    abb0:	18804526 	beq	r3,r2,acc8 <__adddf3+0x564>
    abb4:	00801004 	movi	r2,64
    abb8:	10c5c83a 	sub	r2,r2,r3
    abbc:	4886983a 	sll	r3,r9,r2
    abc0:	198cb03a 	or	r6,r3,r6
    abc4:	300cc03a 	cmpne	r6,r6,zero
    abc8:	218cb03a 	or	r6,r4,r6
    abcc:	0007883a 	mov	r3,zero
    abd0:	003f3b06 	br	a8c0 <__adddf3+0x15c>
    abd4:	80002a26 	beq	r16,zero,ac80 <__adddf3+0x51c>
    abd8:	0101ffc4 	movi	r4,2047
    abdc:	11006826 	beq	r2,r4,ad80 <__adddf3+0x61c>
    abe0:	00c7c83a 	sub	r3,zero,r3
    abe4:	42002034 	orhi	r8,r8,128
    abe8:	01000e04 	movi	r4,56
    abec:	20c07c16 	blt	r4,r3,ade0 <__adddf3+0x67c>
    abf0:	010007c4 	movi	r4,31
    abf4:	20c0da16 	blt	r4,r3,af60 <__adddf3+0x7fc>
    abf8:	01000804 	movi	r4,32
    abfc:	20c9c83a 	sub	r4,r4,r3
    ac00:	4114983a 	sll	r10,r8,r4
    ac04:	88cad83a 	srl	r5,r17,r3
    ac08:	8908983a 	sll	r4,r17,r4
    ac0c:	40c6d83a 	srl	r3,r8,r3
    ac10:	5162b03a 	or	r17,r10,r5
    ac14:	2008c03a 	cmpne	r4,r4,zero
    ac18:	8922b03a 	or	r17,r17,r4
    ac1c:	3463c83a 	sub	r17,r6,r17
    ac20:	48c7c83a 	sub	r3,r9,r3
    ac24:	344d803a 	cmpltu	r6,r6,r17
    ac28:	1991c83a 	sub	r8,r3,r6
    ac2c:	1021883a 	mov	r16,r2
    ac30:	3825883a 	mov	r18,r7
    ac34:	003f2706 	br	a8d4 <__adddf3+0x170>
    ac38:	24d0b03a 	or	r8,r4,r19
    ac3c:	40001b1e 	bne	r8,zero,acac <__adddf3+0x548>
    ac40:	0005883a 	mov	r2,zero
    ac44:	0007883a 	mov	r3,zero
    ac48:	0021883a 	mov	r16,zero
    ac4c:	003f4d06 	br	a984 <__adddf3+0x220>
    ac50:	008007c4 	movi	r2,31
    ac54:	11003c16 	blt	r2,r4,ad48 <__adddf3+0x5e4>
    ac58:	00800804 	movi	r2,32
    ac5c:	1105c83a 	sub	r2,r2,r4
    ac60:	488e983a 	sll	r7,r9,r2
    ac64:	310ad83a 	srl	r5,r6,r4
    ac68:	3084983a 	sll	r2,r6,r2
    ac6c:	4912d83a 	srl	r9,r9,r4
    ac70:	394ab03a 	or	r5,r7,r5
    ac74:	1004c03a 	cmpne	r2,r2,zero
    ac78:	288ab03a 	or	r5,r5,r2
    ac7c:	003f5306 	br	a9cc <__adddf3+0x268>
    ac80:	4448b03a 	or	r4,r8,r17
    ac84:	20003e26 	beq	r4,zero,ad80 <__adddf3+0x61c>
    ac88:	00c6303a 	nor	r3,zero,r3
    ac8c:	18003a1e 	bne	r3,zero,ad78 <__adddf3+0x614>
    ac90:	3463c83a 	sub	r17,r6,r17
    ac94:	4a07c83a 	sub	r3,r9,r8
    ac98:	344d803a 	cmpltu	r6,r6,r17
    ac9c:	1991c83a 	sub	r8,r3,r6
    aca0:	1021883a 	mov	r16,r2
    aca4:	3825883a 	mov	r18,r7
    aca8:	003f0a06 	br	a8d4 <__adddf3+0x170>
    acac:	2023883a 	mov	r17,r4
    acb0:	003f0d06 	br	a8e8 <__adddf3+0x184>
    acb4:	0081ffc4 	movi	r2,2047
    acb8:	80bf3f1e 	bne	r16,r2,a9b8 <__adddf3+0x254>
    acbc:	003ec806 	br	a7e0 <__adddf3+0x7c>
    acc0:	0005883a 	mov	r2,zero
    acc4:	003fb106 	br	ab8c <__adddf3+0x428>
    acc8:	0007883a 	mov	r3,zero
    accc:	003fbc06 	br	abc0 <__adddf3+0x45c>
    acd0:	4444b03a 	or	r2,r8,r17
    acd4:	8000871e 	bne	r16,zero,aef4 <__adddf3+0x790>
    acd8:	1000ba26 	beq	r2,zero,afc4 <__adddf3+0x860>
    acdc:	4984b03a 	or	r2,r9,r6
    ace0:	103ebf26 	beq	r2,zero,a7e0 <__adddf3+0x7c>
    ace4:	8985883a 	add	r2,r17,r6
    ace8:	4247883a 	add	r3,r8,r9
    acec:	1451803a 	cmpltu	r8,r2,r17
    acf0:	40d1883a 	add	r8,r8,r3
    acf4:	40c0202c 	andhi	r3,r8,128
    acf8:	1023883a 	mov	r17,r2
    acfc:	183f1a26 	beq	r3,zero,a968 <__adddf3+0x204>
    ad00:	00bfe034 	movhi	r2,65408
    ad04:	10bfffc4 	addi	r2,r2,-1
    ad08:	2021883a 	mov	r16,r4
    ad0c:	4090703a 	and	r8,r8,r2
    ad10:	003eb306 	br	a7e0 <__adddf3+0x7c>
    ad14:	4444b03a 	or	r2,r8,r17
    ad18:	8000291e 	bne	r16,zero,adc0 <__adddf3+0x65c>
    ad1c:	10004b1e 	bne	r2,zero,ae4c <__adddf3+0x6e8>
    ad20:	4990b03a 	or	r8,r9,r6
    ad24:	40008b26 	beq	r8,zero,af54 <__adddf3+0x7f0>
    ad28:	4811883a 	mov	r8,r9
    ad2c:	3023883a 	mov	r17,r6
    ad30:	3825883a 	mov	r18,r7
    ad34:	003eaa06 	br	a7e0 <__adddf3+0x7c>
    ad38:	1021883a 	mov	r16,r2
    ad3c:	0011883a 	mov	r8,zero
    ad40:	0005883a 	mov	r2,zero
    ad44:	003f0f06 	br	a984 <__adddf3+0x220>
    ad48:	217ff804 	addi	r5,r4,-32
    ad4c:	00800804 	movi	r2,32
    ad50:	494ad83a 	srl	r5,r9,r5
    ad54:	20807d26 	beq	r4,r2,af4c <__adddf3+0x7e8>
    ad58:	00801004 	movi	r2,64
    ad5c:	1109c83a 	sub	r4,r2,r4
    ad60:	4912983a 	sll	r9,r9,r4
    ad64:	498cb03a 	or	r6,r9,r6
    ad68:	300cc03a 	cmpne	r6,r6,zero
    ad6c:	298ab03a 	or	r5,r5,r6
    ad70:	0013883a 	mov	r9,zero
    ad74:	003f1506 	br	a9cc <__adddf3+0x268>
    ad78:	0101ffc4 	movi	r4,2047
    ad7c:	113f9a1e 	bne	r2,r4,abe8 <__adddf3+0x484>
    ad80:	4811883a 	mov	r8,r9
    ad84:	3023883a 	mov	r17,r6
    ad88:	1021883a 	mov	r16,r2
    ad8c:	3825883a 	mov	r18,r7
    ad90:	003e9306 	br	a7e0 <__adddf3+0x7c>
    ad94:	8000161e 	bne	r16,zero,adf0 <__adddf3+0x68c>
    ad98:	444ab03a 	or	r5,r8,r17
    ad9c:	28005126 	beq	r5,zero,aee4 <__adddf3+0x780>
    ada0:	0108303a 	nor	r4,zero,r4
    ada4:	20004d1e 	bne	r4,zero,aedc <__adddf3+0x778>
    ada8:	89a3883a 	add	r17,r17,r6
    adac:	4253883a 	add	r9,r8,r9
    adb0:	898d803a 	cmpltu	r6,r17,r6
    adb4:	3251883a 	add	r8,r6,r9
    adb8:	1021883a 	mov	r16,r2
    adbc:	003f0806 	br	a9e0 <__adddf3+0x27c>
    adc0:	1000301e 	bne	r2,zero,ae84 <__adddf3+0x720>
    adc4:	4984b03a 	or	r2,r9,r6
    adc8:	10007126 	beq	r2,zero,af90 <__adddf3+0x82c>
    adcc:	4811883a 	mov	r8,r9
    add0:	3023883a 	mov	r17,r6
    add4:	3825883a 	mov	r18,r7
    add8:	0401ffc4 	movi	r16,2047
    addc:	003e8006 	br	a7e0 <__adddf3+0x7c>
    ade0:	4462b03a 	or	r17,r8,r17
    ade4:	8822c03a 	cmpne	r17,r17,zero
    ade8:	0007883a 	mov	r3,zero
    adec:	003f8b06 	br	ac1c <__adddf3+0x4b8>
    adf0:	0141ffc4 	movi	r5,2047
    adf4:	11403b26 	beq	r2,r5,aee4 <__adddf3+0x780>
    adf8:	0109c83a 	sub	r4,zero,r4
    adfc:	42002034 	orhi	r8,r8,128
    ae00:	01400e04 	movi	r5,56
    ae04:	29006716 	blt	r5,r4,afa4 <__adddf3+0x840>
    ae08:	014007c4 	movi	r5,31
    ae0c:	29007016 	blt	r5,r4,afd0 <__adddf3+0x86c>
    ae10:	01400804 	movi	r5,32
    ae14:	290bc83a 	sub	r5,r5,r4
    ae18:	4154983a 	sll	r10,r8,r5
    ae1c:	890ed83a 	srl	r7,r17,r4
    ae20:	894a983a 	sll	r5,r17,r5
    ae24:	4108d83a 	srl	r4,r8,r4
    ae28:	51e2b03a 	or	r17,r10,r7
    ae2c:	280ac03a 	cmpne	r5,r5,zero
    ae30:	8962b03a 	or	r17,r17,r5
    ae34:	89a3883a 	add	r17,r17,r6
    ae38:	2253883a 	add	r9,r4,r9
    ae3c:	898d803a 	cmpltu	r6,r17,r6
    ae40:	3251883a 	add	r8,r6,r9
    ae44:	1021883a 	mov	r16,r2
    ae48:	003ee506 	br	a9e0 <__adddf3+0x27c>
    ae4c:	4984b03a 	or	r2,r9,r6
    ae50:	103e6326 	beq	r2,zero,a7e0 <__adddf3+0x7c>
    ae54:	8987c83a 	sub	r3,r17,r6
    ae58:	88c9803a 	cmpltu	r4,r17,r3
    ae5c:	4245c83a 	sub	r2,r8,r9
    ae60:	1105c83a 	sub	r2,r2,r4
    ae64:	1100202c 	andhi	r4,r2,128
    ae68:	203ebb26 	beq	r4,zero,a958 <__adddf3+0x1f4>
    ae6c:	3463c83a 	sub	r17,r6,r17
    ae70:	4a07c83a 	sub	r3,r9,r8
    ae74:	344d803a 	cmpltu	r6,r6,r17
    ae78:	1991c83a 	sub	r8,r3,r6
    ae7c:	3825883a 	mov	r18,r7
    ae80:	003e5706 	br	a7e0 <__adddf3+0x7c>
    ae84:	4984b03a 	or	r2,r9,r6
    ae88:	10002e26 	beq	r2,zero,af44 <__adddf3+0x7e0>
    ae8c:	4004d0fa 	srli	r2,r8,3
    ae90:	8822d0fa 	srli	r17,r17,3
    ae94:	4010977a 	slli	r8,r8,29
    ae98:	10c0022c 	andhi	r3,r2,8
    ae9c:	4462b03a 	or	r17,r8,r17
    aea0:	18000826 	beq	r3,zero,aec4 <__adddf3+0x760>
    aea4:	4808d0fa 	srli	r4,r9,3
    aea8:	20c0022c 	andhi	r3,r4,8
    aeac:	1800051e 	bne	r3,zero,aec4 <__adddf3+0x760>
    aeb0:	300cd0fa 	srli	r6,r6,3
    aeb4:	4806977a 	slli	r3,r9,29
    aeb8:	2005883a 	mov	r2,r4
    aebc:	3825883a 	mov	r18,r7
    aec0:	19a2b03a 	or	r17,r3,r6
    aec4:	8810d77a 	srli	r8,r17,29
    aec8:	100490fa 	slli	r2,r2,3
    aecc:	882290fa 	slli	r17,r17,3
    aed0:	0401ffc4 	movi	r16,2047
    aed4:	4090b03a 	or	r8,r8,r2
    aed8:	003e4106 	br	a7e0 <__adddf3+0x7c>
    aedc:	0141ffc4 	movi	r5,2047
    aee0:	117fc71e 	bne	r2,r5,ae00 <__adddf3+0x69c>
    aee4:	4811883a 	mov	r8,r9
    aee8:	3023883a 	mov	r17,r6
    aeec:	1021883a 	mov	r16,r2
    aef0:	003e3b06 	br	a7e0 <__adddf3+0x7c>
    aef4:	10002f26 	beq	r2,zero,afb4 <__adddf3+0x850>
    aef8:	4984b03a 	or	r2,r9,r6
    aefc:	10001126 	beq	r2,zero,af44 <__adddf3+0x7e0>
    af00:	4004d0fa 	srli	r2,r8,3
    af04:	8822d0fa 	srli	r17,r17,3
    af08:	4010977a 	slli	r8,r8,29
    af0c:	10c0022c 	andhi	r3,r2,8
    af10:	4462b03a 	or	r17,r8,r17
    af14:	183feb26 	beq	r3,zero,aec4 <__adddf3+0x760>
    af18:	4808d0fa 	srli	r4,r9,3
    af1c:	20c0022c 	andhi	r3,r4,8
    af20:	183fe81e 	bne	r3,zero,aec4 <__adddf3+0x760>
    af24:	300cd0fa 	srli	r6,r6,3
    af28:	4806977a 	slli	r3,r9,29
    af2c:	2005883a 	mov	r2,r4
    af30:	19a2b03a 	or	r17,r3,r6
    af34:	003fe306 	br	aec4 <__adddf3+0x760>
    af38:	0011883a 	mov	r8,zero
    af3c:	0005883a 	mov	r2,zero
    af40:	003e3f06 	br	a840 <__adddf3+0xdc>
    af44:	0401ffc4 	movi	r16,2047
    af48:	003e2506 	br	a7e0 <__adddf3+0x7c>
    af4c:	0013883a 	mov	r9,zero
    af50:	003f8406 	br	ad64 <__adddf3+0x600>
    af54:	0005883a 	mov	r2,zero
    af58:	0007883a 	mov	r3,zero
    af5c:	003e8906 	br	a984 <__adddf3+0x220>
    af60:	197ff804 	addi	r5,r3,-32
    af64:	01000804 	movi	r4,32
    af68:	414ad83a 	srl	r5,r8,r5
    af6c:	19002426 	beq	r3,r4,b000 <__adddf3+0x89c>
    af70:	01001004 	movi	r4,64
    af74:	20c7c83a 	sub	r3,r4,r3
    af78:	40c6983a 	sll	r3,r8,r3
    af7c:	1c46b03a 	or	r3,r3,r17
    af80:	1806c03a 	cmpne	r3,r3,zero
    af84:	28e2b03a 	or	r17,r5,r3
    af88:	0007883a 	mov	r3,zero
    af8c:	003f2306 	br	ac1c <__adddf3+0x4b8>
    af90:	0007883a 	mov	r3,zero
    af94:	5811883a 	mov	r8,r11
    af98:	00bfffc4 	movi	r2,-1
    af9c:	0401ffc4 	movi	r16,2047
    afa0:	003e7806 	br	a984 <__adddf3+0x220>
    afa4:	4462b03a 	or	r17,r8,r17
    afa8:	8822c03a 	cmpne	r17,r17,zero
    afac:	0009883a 	mov	r4,zero
    afb0:	003fa006 	br	ae34 <__adddf3+0x6d0>
    afb4:	4811883a 	mov	r8,r9
    afb8:	3023883a 	mov	r17,r6
    afbc:	0401ffc4 	movi	r16,2047
    afc0:	003e0706 	br	a7e0 <__adddf3+0x7c>
    afc4:	4811883a 	mov	r8,r9
    afc8:	3023883a 	mov	r17,r6
    afcc:	003e0406 	br	a7e0 <__adddf3+0x7c>
    afd0:	21fff804 	addi	r7,r4,-32
    afd4:	01400804 	movi	r5,32
    afd8:	41ced83a 	srl	r7,r8,r7
    afdc:	21400a26 	beq	r4,r5,b008 <__adddf3+0x8a4>
    afe0:	01401004 	movi	r5,64
    afe4:	2909c83a 	sub	r4,r5,r4
    afe8:	4108983a 	sll	r4,r8,r4
    afec:	2448b03a 	or	r4,r4,r17
    aff0:	2008c03a 	cmpne	r4,r4,zero
    aff4:	3922b03a 	or	r17,r7,r4
    aff8:	0009883a 	mov	r4,zero
    affc:	003f8d06 	br	ae34 <__adddf3+0x6d0>
    b000:	0007883a 	mov	r3,zero
    b004:	003fdd06 	br	af7c <__adddf3+0x818>
    b008:	0009883a 	mov	r4,zero
    b00c:	003ff706 	br	afec <__adddf3+0x888>

0000b010 <__divdf3>:
    b010:	defff204 	addi	sp,sp,-56
    b014:	dd400915 	stw	r21,36(sp)
    b018:	282ad53a 	srli	r21,r5,20
    b01c:	dd000815 	stw	r20,32(sp)
    b020:	2828d7fa 	srli	r20,r5,31
    b024:	dc000415 	stw	r16,16(sp)
    b028:	04000434 	movhi	r16,16
    b02c:	df000c15 	stw	fp,48(sp)
    b030:	843fffc4 	addi	r16,r16,-1
    b034:	dfc00d15 	stw	ra,52(sp)
    b038:	ddc00b15 	stw	r23,44(sp)
    b03c:	dd800a15 	stw	r22,40(sp)
    b040:	dcc00715 	stw	r19,28(sp)
    b044:	dc800615 	stw	r18,24(sp)
    b048:	dc400515 	stw	r17,20(sp)
    b04c:	ad41ffcc 	andi	r21,r21,2047
    b050:	2c20703a 	and	r16,r5,r16
    b054:	a7003fcc 	andi	fp,r20,255
    b058:	a8006126 	beq	r21,zero,b1e0 <__divdf3+0x1d0>
    b05c:	0081ffc4 	movi	r2,2047
    b060:	2025883a 	mov	r18,r4
    b064:	a8803726 	beq	r21,r2,b144 <__divdf3+0x134>
    b068:	80c00434 	orhi	r3,r16,16
    b06c:	180690fa 	slli	r3,r3,3
    b070:	2020d77a 	srli	r16,r4,29
    b074:	202490fa 	slli	r18,r4,3
    b078:	ad7f0044 	addi	r21,r21,-1023
    b07c:	80e0b03a 	or	r16,r16,r3
    b080:	0027883a 	mov	r19,zero
    b084:	0013883a 	mov	r9,zero
    b088:	3808d53a 	srli	r4,r7,20
    b08c:	382cd7fa 	srli	r22,r7,31
    b090:	04400434 	movhi	r17,16
    b094:	8c7fffc4 	addi	r17,r17,-1
    b098:	2101ffcc 	andi	r4,r4,2047
    b09c:	3011883a 	mov	r8,r6
    b0a0:	3c62703a 	and	r17,r7,r17
    b0a4:	b5c03fcc 	andi	r23,r22,255
    b0a8:	20006c26 	beq	r4,zero,b25c <__divdf3+0x24c>
    b0ac:	0081ffc4 	movi	r2,2047
    b0b0:	20806426 	beq	r4,r2,b244 <__divdf3+0x234>
    b0b4:	88c00434 	orhi	r3,r17,16
    b0b8:	180690fa 	slli	r3,r3,3
    b0bc:	3022d77a 	srli	r17,r6,29
    b0c0:	301090fa 	slli	r8,r6,3
    b0c4:	213f0044 	addi	r4,r4,-1023
    b0c8:	88e2b03a 	or	r17,r17,r3
    b0cc:	000d883a 	mov	r6,zero
    b0d0:	a584f03a 	xor	r2,r20,r22
    b0d4:	34cab03a 	or	r5,r6,r19
    b0d8:	1007883a 	mov	r3,r2
    b0dc:	14c03fcc 	andi	r19,r2,255
    b0e0:	008003c4 	movi	r2,15
    b0e4:	a92bc83a 	sub	r21,r21,r4
    b0e8:	11409036 	bltu	r2,r5,b32c <__divdf3+0x31c>
    b0ec:	280a90ba 	slli	r5,r5,2
    b0f0:	00800074 	movhi	r2,1
    b0f4:	10ac4104 	addi	r2,r2,-20220
    b0f8:	288b883a 	add	r5,r5,r2
    b0fc:	28800017 	ldw	r2,0(r5)
    b100:	1000683a 	jmp	r2
    b104:	0000b32c 	andhi	zero,zero,716
    b108:	0000b17c 	xorhi	zero,zero,709
    b10c:	0000b31c 	xori	zero,zero,716
    b110:	0000b170 	cmpltui	zero,zero,709
    b114:	0000b31c 	xori	zero,zero,716
    b118:	0000b2f0 	cmpltui	zero,zero,715
    b11c:	0000b31c 	xori	zero,zero,716
    b120:	0000b170 	cmpltui	zero,zero,709
    b124:	0000b17c 	xorhi	zero,zero,709
    b128:	0000b17c 	xorhi	zero,zero,709
    b12c:	0000b2f0 	cmpltui	zero,zero,715
    b130:	0000b170 	cmpltui	zero,zero,709
    b134:	0000b160 	cmpeqi	zero,zero,709
    b138:	0000b160 	cmpeqi	zero,zero,709
    b13c:	0000b160 	cmpeqi	zero,zero,709
    b140:	0000b610 	cmplti	zero,zero,728
    b144:	2404b03a 	or	r2,r4,r16
    b148:	1000661e 	bne	r2,zero,b2e4 <__divdf3+0x2d4>
    b14c:	04c00204 	movi	r19,8
    b150:	0021883a 	mov	r16,zero
    b154:	0025883a 	mov	r18,zero
    b158:	02400084 	movi	r9,2
    b15c:	003fca06 	br	b088 <__divdf3+0x78>
    b160:	8023883a 	mov	r17,r16
    b164:	9011883a 	mov	r8,r18
    b168:	e02f883a 	mov	r23,fp
    b16c:	480d883a 	mov	r6,r9
    b170:	00800084 	movi	r2,2
    b174:	3081311e 	bne	r6,r2,b63c <__divdf3+0x62c>
    b178:	b827883a 	mov	r19,r23
    b17c:	98c0004c 	andi	r3,r19,1
    b180:	0081ffc4 	movi	r2,2047
    b184:	000b883a 	mov	r5,zero
    b188:	0025883a 	mov	r18,zero
    b18c:	1004953a 	slli	r2,r2,20
    b190:	18c03fcc 	andi	r3,r3,255
    b194:	04400434 	movhi	r17,16
    b198:	8c7fffc4 	addi	r17,r17,-1
    b19c:	180697fa 	slli	r3,r3,31
    b1a0:	2c4a703a 	and	r5,r5,r17
    b1a4:	288ab03a 	or	r5,r5,r2
    b1a8:	28c6b03a 	or	r3,r5,r3
    b1ac:	9005883a 	mov	r2,r18
    b1b0:	dfc00d17 	ldw	ra,52(sp)
    b1b4:	df000c17 	ldw	fp,48(sp)
    b1b8:	ddc00b17 	ldw	r23,44(sp)
    b1bc:	dd800a17 	ldw	r22,40(sp)
    b1c0:	dd400917 	ldw	r21,36(sp)
    b1c4:	dd000817 	ldw	r20,32(sp)
    b1c8:	dcc00717 	ldw	r19,28(sp)
    b1cc:	dc800617 	ldw	r18,24(sp)
    b1d0:	dc400517 	ldw	r17,20(sp)
    b1d4:	dc000417 	ldw	r16,16(sp)
    b1d8:	dec00e04 	addi	sp,sp,56
    b1dc:	f800283a 	ret
    b1e0:	2404b03a 	or	r2,r4,r16
    b1e4:	2027883a 	mov	r19,r4
    b1e8:	10003926 	beq	r2,zero,b2d0 <__divdf3+0x2c0>
    b1ec:	80012e26 	beq	r16,zero,b6a8 <__divdf3+0x698>
    b1f0:	8009883a 	mov	r4,r16
    b1f4:	d9800315 	stw	r6,12(sp)
    b1f8:	d9c00215 	stw	r7,8(sp)
    b1fc:	000cd680 	call	cd68 <__clzsi2>
    b200:	d9800317 	ldw	r6,12(sp)
    b204:	d9c00217 	ldw	r7,8(sp)
    b208:	10fffd44 	addi	r3,r2,-11
    b20c:	01000704 	movi	r4,28
    b210:	20c12116 	blt	r4,r3,b698 <__divdf3+0x688>
    b214:	01000744 	movi	r4,29
    b218:	147ffe04 	addi	r17,r2,-8
    b21c:	20c9c83a 	sub	r4,r4,r3
    b220:	8460983a 	sll	r16,r16,r17
    b224:	9908d83a 	srl	r4,r19,r4
    b228:	9c64983a 	sll	r18,r19,r17
    b22c:	2420b03a 	or	r16,r4,r16
    b230:	057f0084 	movi	r21,-1022
    b234:	a8ebc83a 	sub	r21,r21,r3
    b238:	0027883a 	mov	r19,zero
    b23c:	0013883a 	mov	r9,zero
    b240:	003f9106 	br	b088 <__divdf3+0x78>
    b244:	3444b03a 	or	r2,r6,r17
    b248:	10001f1e 	bne	r2,zero,b2c8 <__divdf3+0x2b8>
    b24c:	0023883a 	mov	r17,zero
    b250:	0011883a 	mov	r8,zero
    b254:	01800084 	movi	r6,2
    b258:	003f9d06 	br	b0d0 <__divdf3+0xc0>
    b25c:	3444b03a 	or	r2,r6,r17
    b260:	10001526 	beq	r2,zero,b2b8 <__divdf3+0x2a8>
    b264:	88011b26 	beq	r17,zero,b6d4 <__divdf3+0x6c4>
    b268:	8809883a 	mov	r4,r17
    b26c:	d9800315 	stw	r6,12(sp)
    b270:	da400115 	stw	r9,4(sp)
    b274:	000cd680 	call	cd68 <__clzsi2>
    b278:	d9800317 	ldw	r6,12(sp)
    b27c:	da400117 	ldw	r9,4(sp)
    b280:	10fffd44 	addi	r3,r2,-11
    b284:	01000704 	movi	r4,28
    b288:	20c10e16 	blt	r4,r3,b6c4 <__divdf3+0x6b4>
    b28c:	01000744 	movi	r4,29
    b290:	123ffe04 	addi	r8,r2,-8
    b294:	20c9c83a 	sub	r4,r4,r3
    b298:	8a22983a 	sll	r17,r17,r8
    b29c:	3108d83a 	srl	r4,r6,r4
    b2a0:	3210983a 	sll	r8,r6,r8
    b2a4:	2462b03a 	or	r17,r4,r17
    b2a8:	013f0084 	movi	r4,-1022
    b2ac:	20c9c83a 	sub	r4,r4,r3
    b2b0:	000d883a 	mov	r6,zero
    b2b4:	003f8606 	br	b0d0 <__divdf3+0xc0>
    b2b8:	0023883a 	mov	r17,zero
    b2bc:	0011883a 	mov	r8,zero
    b2c0:	01800044 	movi	r6,1
    b2c4:	003f8206 	br	b0d0 <__divdf3+0xc0>
    b2c8:	018000c4 	movi	r6,3
    b2cc:	003f8006 	br	b0d0 <__divdf3+0xc0>
    b2d0:	04c00104 	movi	r19,4
    b2d4:	0021883a 	mov	r16,zero
    b2d8:	0025883a 	mov	r18,zero
    b2dc:	02400044 	movi	r9,1
    b2e0:	003f6906 	br	b088 <__divdf3+0x78>
    b2e4:	04c00304 	movi	r19,12
    b2e8:	024000c4 	movi	r9,3
    b2ec:	003f6606 	br	b088 <__divdf3+0x78>
    b2f0:	01400434 	movhi	r5,16
    b2f4:	0007883a 	mov	r3,zero
    b2f8:	297fffc4 	addi	r5,r5,-1
    b2fc:	04bfffc4 	movi	r18,-1
    b300:	0081ffc4 	movi	r2,2047
    b304:	003fa106 	br	b18c <__divdf3+0x17c>
    b308:	00c00044 	movi	r3,1
    b30c:	1887c83a 	sub	r3,r3,r2
    b310:	01000e04 	movi	r4,56
    b314:	20c1210e 	bge	r4,r3,b79c <__divdf3+0x78c>
    b318:	98c0004c 	andi	r3,r19,1
    b31c:	0005883a 	mov	r2,zero
    b320:	000b883a 	mov	r5,zero
    b324:	0025883a 	mov	r18,zero
    b328:	003f9806 	br	b18c <__divdf3+0x17c>
    b32c:	8c00fd36 	bltu	r17,r16,b724 <__divdf3+0x714>
    b330:	8440fb26 	beq	r16,r17,b720 <__divdf3+0x710>
    b334:	8007883a 	mov	r3,r16
    b338:	ad7fffc4 	addi	r21,r21,-1
    b33c:	0021883a 	mov	r16,zero
    b340:	400ad63a 	srli	r5,r8,24
    b344:	8822923a 	slli	r17,r17,8
    b348:	1809883a 	mov	r4,r3
    b34c:	402c923a 	slli	r22,r8,8
    b350:	8978b03a 	or	fp,r17,r5
    b354:	e028d43a 	srli	r20,fp,16
    b358:	d8c00015 	stw	r3,0(sp)
    b35c:	e5ffffcc 	andi	r23,fp,65535
    b360:	a00b883a 	mov	r5,r20
    b364:	00005a40 	call	5a4 <__udivsi3>
    b368:	d8c00017 	ldw	r3,0(sp)
    b36c:	a00b883a 	mov	r5,r20
    b370:	d8800315 	stw	r2,12(sp)
    b374:	1809883a 	mov	r4,r3
    b378:	00006080 	call	608 <__umodsi3>
    b37c:	d9800317 	ldw	r6,12(sp)
    b380:	1006943a 	slli	r3,r2,16
    b384:	9004d43a 	srli	r2,r18,16
    b388:	b9a3383a 	mul	r17,r23,r6
    b38c:	10c4b03a 	or	r2,r2,r3
    b390:	1440062e 	bgeu	r2,r17,b3ac <__divdf3+0x39c>
    b394:	1705883a 	add	r2,r2,fp
    b398:	30ffffc4 	addi	r3,r6,-1
    b39c:	1700ee36 	bltu	r2,fp,b758 <__divdf3+0x748>
    b3a0:	1440ed2e 	bgeu	r2,r17,b758 <__divdf3+0x748>
    b3a4:	31bfff84 	addi	r6,r6,-2
    b3a8:	1705883a 	add	r2,r2,fp
    b3ac:	1463c83a 	sub	r17,r2,r17
    b3b0:	a00b883a 	mov	r5,r20
    b3b4:	8809883a 	mov	r4,r17
    b3b8:	d9800315 	stw	r6,12(sp)
    b3bc:	00005a40 	call	5a4 <__udivsi3>
    b3c0:	a00b883a 	mov	r5,r20
    b3c4:	8809883a 	mov	r4,r17
    b3c8:	d8800215 	stw	r2,8(sp)
    b3cc:	00006080 	call	608 <__umodsi3>
    b3d0:	d9c00217 	ldw	r7,8(sp)
    b3d4:	1004943a 	slli	r2,r2,16
    b3d8:	94bfffcc 	andi	r18,r18,65535
    b3dc:	b9d1383a 	mul	r8,r23,r7
    b3e0:	90a4b03a 	or	r18,r18,r2
    b3e4:	d9800317 	ldw	r6,12(sp)
    b3e8:	9200062e 	bgeu	r18,r8,b404 <__divdf3+0x3f4>
    b3ec:	9725883a 	add	r18,r18,fp
    b3f0:	38bfffc4 	addi	r2,r7,-1
    b3f4:	9700d636 	bltu	r18,fp,b750 <__divdf3+0x740>
    b3f8:	9200d52e 	bgeu	r18,r8,b750 <__divdf3+0x740>
    b3fc:	39ffff84 	addi	r7,r7,-2
    b400:	9725883a 	add	r18,r18,fp
    b404:	3004943a 	slli	r2,r6,16
    b408:	b012d43a 	srli	r9,r22,16
    b40c:	b1bfffcc 	andi	r6,r22,65535
    b410:	11e2b03a 	or	r17,r2,r7
    b414:	8806d43a 	srli	r3,r17,16
    b418:	893fffcc 	andi	r4,r17,65535
    b41c:	218b383a 	mul	r5,r4,r6
    b420:	30c5383a 	mul	r2,r6,r3
    b424:	2249383a 	mul	r4,r4,r9
    b428:	280ed43a 	srli	r7,r5,16
    b42c:	9225c83a 	sub	r18,r18,r8
    b430:	2089883a 	add	r4,r4,r2
    b434:	3909883a 	add	r4,r7,r4
    b438:	1a47383a 	mul	r3,r3,r9
    b43c:	2080022e 	bgeu	r4,r2,b448 <__divdf3+0x438>
    b440:	00800074 	movhi	r2,1
    b444:	1887883a 	add	r3,r3,r2
    b448:	2004d43a 	srli	r2,r4,16
    b44c:	2008943a 	slli	r4,r4,16
    b450:	297fffcc 	andi	r5,r5,65535
    b454:	10c7883a 	add	r3,r2,r3
    b458:	2149883a 	add	r4,r4,r5
    b45c:	90c0a536 	bltu	r18,r3,b6f4 <__divdf3+0x6e4>
    b460:	90c0bf26 	beq	r18,r3,b760 <__divdf3+0x750>
    b464:	90c7c83a 	sub	r3,r18,r3
    b468:	810fc83a 	sub	r7,r16,r4
    b46c:	81e5803a 	cmpltu	r18,r16,r7
    b470:	1ca5c83a 	sub	r18,r3,r18
    b474:	e480c126 	beq	fp,r18,b77c <__divdf3+0x76c>
    b478:	a00b883a 	mov	r5,r20
    b47c:	9009883a 	mov	r4,r18
    b480:	d9800315 	stw	r6,12(sp)
    b484:	d9c00215 	stw	r7,8(sp)
    b488:	da400115 	stw	r9,4(sp)
    b48c:	00005a40 	call	5a4 <__udivsi3>
    b490:	a00b883a 	mov	r5,r20
    b494:	9009883a 	mov	r4,r18
    b498:	d8800015 	stw	r2,0(sp)
    b49c:	00006080 	call	608 <__umodsi3>
    b4a0:	d9c00217 	ldw	r7,8(sp)
    b4a4:	da000017 	ldw	r8,0(sp)
    b4a8:	1006943a 	slli	r3,r2,16
    b4ac:	3804d43a 	srli	r2,r7,16
    b4b0:	ba21383a 	mul	r16,r23,r8
    b4b4:	d9800317 	ldw	r6,12(sp)
    b4b8:	10c4b03a 	or	r2,r2,r3
    b4bc:	da400117 	ldw	r9,4(sp)
    b4c0:	1400062e 	bgeu	r2,r16,b4dc <__divdf3+0x4cc>
    b4c4:	1705883a 	add	r2,r2,fp
    b4c8:	40ffffc4 	addi	r3,r8,-1
    b4cc:	1700ad36 	bltu	r2,fp,b784 <__divdf3+0x774>
    b4d0:	1400ac2e 	bgeu	r2,r16,b784 <__divdf3+0x774>
    b4d4:	423fff84 	addi	r8,r8,-2
    b4d8:	1705883a 	add	r2,r2,fp
    b4dc:	1421c83a 	sub	r16,r2,r16
    b4e0:	a00b883a 	mov	r5,r20
    b4e4:	8009883a 	mov	r4,r16
    b4e8:	d9800315 	stw	r6,12(sp)
    b4ec:	d9c00215 	stw	r7,8(sp)
    b4f0:	da000015 	stw	r8,0(sp)
    b4f4:	da400115 	stw	r9,4(sp)
    b4f8:	00005a40 	call	5a4 <__udivsi3>
    b4fc:	8009883a 	mov	r4,r16
    b500:	a00b883a 	mov	r5,r20
    b504:	1025883a 	mov	r18,r2
    b508:	00006080 	call	608 <__umodsi3>
    b50c:	d9c00217 	ldw	r7,8(sp)
    b510:	1004943a 	slli	r2,r2,16
    b514:	bcaf383a 	mul	r23,r23,r18
    b518:	393fffcc 	andi	r4,r7,65535
    b51c:	2088b03a 	or	r4,r4,r2
    b520:	d9800317 	ldw	r6,12(sp)
    b524:	da000017 	ldw	r8,0(sp)
    b528:	da400117 	ldw	r9,4(sp)
    b52c:	25c0062e 	bgeu	r4,r23,b548 <__divdf3+0x538>
    b530:	2709883a 	add	r4,r4,fp
    b534:	90bfffc4 	addi	r2,r18,-1
    b538:	27009436 	bltu	r4,fp,b78c <__divdf3+0x77c>
    b53c:	25c0932e 	bgeu	r4,r23,b78c <__divdf3+0x77c>
    b540:	94bfff84 	addi	r18,r18,-2
    b544:	2709883a 	add	r4,r4,fp
    b548:	4004943a 	slli	r2,r8,16
    b54c:	25efc83a 	sub	r23,r4,r23
    b550:	1490b03a 	or	r8,r2,r18
    b554:	4008d43a 	srli	r4,r8,16
    b558:	40ffffcc 	andi	r3,r8,65535
    b55c:	30c5383a 	mul	r2,r6,r3
    b560:	1a47383a 	mul	r3,r3,r9
    b564:	310d383a 	mul	r6,r6,r4
    b568:	100ad43a 	srli	r5,r2,16
    b56c:	4913383a 	mul	r9,r9,r4
    b570:	1987883a 	add	r3,r3,r6
    b574:	28c7883a 	add	r3,r5,r3
    b578:	1980022e 	bgeu	r3,r6,b584 <__divdf3+0x574>
    b57c:	01000074 	movhi	r4,1
    b580:	4913883a 	add	r9,r9,r4
    b584:	1808d43a 	srli	r4,r3,16
    b588:	1806943a 	slli	r3,r3,16
    b58c:	10bfffcc 	andi	r2,r2,65535
    b590:	2253883a 	add	r9,r4,r9
    b594:	1887883a 	add	r3,r3,r2
    b598:	ba403836 	bltu	r23,r9,b67c <__divdf3+0x66c>
    b59c:	ba403626 	beq	r23,r9,b678 <__divdf3+0x668>
    b5a0:	42000054 	ori	r8,r8,1
    b5a4:	a880ffc4 	addi	r2,r21,1023
    b5a8:	00bf570e 	bge	zero,r2,b308 <__divdf3+0x2f8>
    b5ac:	40c001cc 	andi	r3,r8,7
    b5b0:	18000726 	beq	r3,zero,b5d0 <__divdf3+0x5c0>
    b5b4:	40c003cc 	andi	r3,r8,15
    b5b8:	01000104 	movi	r4,4
    b5bc:	19000426 	beq	r3,r4,b5d0 <__divdf3+0x5c0>
    b5c0:	4107883a 	add	r3,r8,r4
    b5c4:	1a11803a 	cmpltu	r8,r3,r8
    b5c8:	8a23883a 	add	r17,r17,r8
    b5cc:	1811883a 	mov	r8,r3
    b5d0:	88c0402c 	andhi	r3,r17,256
    b5d4:	18000426 	beq	r3,zero,b5e8 <__divdf3+0x5d8>
    b5d8:	00ffc034 	movhi	r3,65280
    b5dc:	18ffffc4 	addi	r3,r3,-1
    b5e0:	a8810004 	addi	r2,r21,1024
    b5e4:	88e2703a 	and	r17,r17,r3
    b5e8:	00c1ff84 	movi	r3,2046
    b5ec:	18bee316 	blt	r3,r2,b17c <__divdf3+0x16c>
    b5f0:	8824977a 	slli	r18,r17,29
    b5f4:	4010d0fa 	srli	r8,r8,3
    b5f8:	8822927a 	slli	r17,r17,9
    b5fc:	1081ffcc 	andi	r2,r2,2047
    b600:	9224b03a 	or	r18,r18,r8
    b604:	880ad33a 	srli	r5,r17,12
    b608:	98c0004c 	andi	r3,r19,1
    b60c:	003edf06 	br	b18c <__divdf3+0x17c>
    b610:	8080022c 	andhi	r2,r16,8
    b614:	10001226 	beq	r2,zero,b660 <__divdf3+0x650>
    b618:	8880022c 	andhi	r2,r17,8
    b61c:	1000101e 	bne	r2,zero,b660 <__divdf3+0x650>
    b620:	00800434 	movhi	r2,16
    b624:	89400234 	orhi	r5,r17,8
    b628:	10bfffc4 	addi	r2,r2,-1
    b62c:	b007883a 	mov	r3,r22
    b630:	288a703a 	and	r5,r5,r2
    b634:	4025883a 	mov	r18,r8
    b638:	003f3106 	br	b300 <__divdf3+0x2f0>
    b63c:	008000c4 	movi	r2,3
    b640:	3080a626 	beq	r6,r2,b8dc <__divdf3+0x8cc>
    b644:	00800044 	movi	r2,1
    b648:	3080521e 	bne	r6,r2,b794 <__divdf3+0x784>
    b64c:	b807883a 	mov	r3,r23
    b650:	0005883a 	mov	r2,zero
    b654:	000b883a 	mov	r5,zero
    b658:	0025883a 	mov	r18,zero
    b65c:	003ecb06 	br	b18c <__divdf3+0x17c>
    b660:	00800434 	movhi	r2,16
    b664:	81400234 	orhi	r5,r16,8
    b668:	10bfffc4 	addi	r2,r2,-1
    b66c:	a007883a 	mov	r3,r20
    b670:	288a703a 	and	r5,r5,r2
    b674:	003f2206 	br	b300 <__divdf3+0x2f0>
    b678:	183fca26 	beq	r3,zero,b5a4 <__divdf3+0x594>
    b67c:	e5ef883a 	add	r23,fp,r23
    b680:	40bfffc4 	addi	r2,r8,-1
    b684:	bf00392e 	bgeu	r23,fp,b76c <__divdf3+0x75c>
    b688:	1011883a 	mov	r8,r2
    b68c:	ba7fc41e 	bne	r23,r9,b5a0 <__divdf3+0x590>
    b690:	b0ffc31e 	bne	r22,r3,b5a0 <__divdf3+0x590>
    b694:	003fc306 	br	b5a4 <__divdf3+0x594>
    b698:	10bff604 	addi	r2,r2,-40
    b69c:	98a0983a 	sll	r16,r19,r2
    b6a0:	0025883a 	mov	r18,zero
    b6a4:	003ee206 	br	b230 <__divdf3+0x220>
    b6a8:	d9800315 	stw	r6,12(sp)
    b6ac:	d9c00215 	stw	r7,8(sp)
    b6b0:	000cd680 	call	cd68 <__clzsi2>
    b6b4:	10800804 	addi	r2,r2,32
    b6b8:	d9c00217 	ldw	r7,8(sp)
    b6bc:	d9800317 	ldw	r6,12(sp)
    b6c0:	003ed106 	br	b208 <__divdf3+0x1f8>
    b6c4:	10bff604 	addi	r2,r2,-40
    b6c8:	30a2983a 	sll	r17,r6,r2
    b6cc:	0011883a 	mov	r8,zero
    b6d0:	003ef506 	br	b2a8 <__divdf3+0x298>
    b6d4:	3009883a 	mov	r4,r6
    b6d8:	d9800315 	stw	r6,12(sp)
    b6dc:	da400115 	stw	r9,4(sp)
    b6e0:	000cd680 	call	cd68 <__clzsi2>
    b6e4:	10800804 	addi	r2,r2,32
    b6e8:	da400117 	ldw	r9,4(sp)
    b6ec:	d9800317 	ldw	r6,12(sp)
    b6f0:	003ee306 	br	b280 <__divdf3+0x270>
    b6f4:	85a1883a 	add	r16,r16,r22
    b6f8:	8585803a 	cmpltu	r2,r16,r22
    b6fc:	1705883a 	add	r2,r2,fp
    b700:	14a5883a 	add	r18,r2,r18
    b704:	88bfffc4 	addi	r2,r17,-1
    b708:	e4800c2e 	bgeu	fp,r18,b73c <__divdf3+0x72c>
    b70c:	90c03e36 	bltu	r18,r3,b808 <__divdf3+0x7f8>
    b710:	1c806926 	beq	r3,r18,b8b8 <__divdf3+0x8a8>
    b714:	90c7c83a 	sub	r3,r18,r3
    b718:	1023883a 	mov	r17,r2
    b71c:	003f5206 	br	b468 <__divdf3+0x458>
    b720:	923f0436 	bltu	r18,r8,b334 <__divdf3+0x324>
    b724:	800897fa 	slli	r4,r16,31
    b728:	9004d07a 	srli	r2,r18,1
    b72c:	8006d07a 	srli	r3,r16,1
    b730:	902097fa 	slli	r16,r18,31
    b734:	20a4b03a 	or	r18,r4,r2
    b738:	003f0106 	br	b340 <__divdf3+0x330>
    b73c:	e4bff51e 	bne	fp,r18,b714 <__divdf3+0x704>
    b740:	85bff22e 	bgeu	r16,r22,b70c <__divdf3+0x6fc>
    b744:	e0c7c83a 	sub	r3,fp,r3
    b748:	1023883a 	mov	r17,r2
    b74c:	003f4606 	br	b468 <__divdf3+0x458>
    b750:	100f883a 	mov	r7,r2
    b754:	003f2b06 	br	b404 <__divdf3+0x3f4>
    b758:	180d883a 	mov	r6,r3
    b75c:	003f1306 	br	b3ac <__divdf3+0x39c>
    b760:	813fe436 	bltu	r16,r4,b6f4 <__divdf3+0x6e4>
    b764:	0007883a 	mov	r3,zero
    b768:	003f3f06 	br	b468 <__divdf3+0x458>
    b76c:	ba402c36 	bltu	r23,r9,b820 <__divdf3+0x810>
    b770:	4dc05426 	beq	r9,r23,b8c4 <__divdf3+0x8b4>
    b774:	1011883a 	mov	r8,r2
    b778:	003f8906 	br	b5a0 <__divdf3+0x590>
    b77c:	023fffc4 	movi	r8,-1
    b780:	003f8806 	br	b5a4 <__divdf3+0x594>
    b784:	1811883a 	mov	r8,r3
    b788:	003f5406 	br	b4dc <__divdf3+0x4cc>
    b78c:	1025883a 	mov	r18,r2
    b790:	003f6d06 	br	b548 <__divdf3+0x538>
    b794:	b827883a 	mov	r19,r23
    b798:	003f8206 	br	b5a4 <__divdf3+0x594>
    b79c:	010007c4 	movi	r4,31
    b7a0:	20c02616 	blt	r4,r3,b83c <__divdf3+0x82c>
    b7a4:	00800804 	movi	r2,32
    b7a8:	10c5c83a 	sub	r2,r2,r3
    b7ac:	888a983a 	sll	r5,r17,r2
    b7b0:	40c8d83a 	srl	r4,r8,r3
    b7b4:	4084983a 	sll	r2,r8,r2
    b7b8:	88e2d83a 	srl	r17,r17,r3
    b7bc:	2906b03a 	or	r3,r5,r4
    b7c0:	1004c03a 	cmpne	r2,r2,zero
    b7c4:	1886b03a 	or	r3,r3,r2
    b7c8:	188001cc 	andi	r2,r3,7
    b7cc:	10000726 	beq	r2,zero,b7ec <__divdf3+0x7dc>
    b7d0:	188003cc 	andi	r2,r3,15
    b7d4:	01000104 	movi	r4,4
    b7d8:	11000426 	beq	r2,r4,b7ec <__divdf3+0x7dc>
    b7dc:	1805883a 	mov	r2,r3
    b7e0:	10c00104 	addi	r3,r2,4
    b7e4:	1885803a 	cmpltu	r2,r3,r2
    b7e8:	88a3883a 	add	r17,r17,r2
    b7ec:	8880202c 	andhi	r2,r17,128
    b7f0:	10002726 	beq	r2,zero,b890 <__divdf3+0x880>
    b7f4:	98c0004c 	andi	r3,r19,1
    b7f8:	00800044 	movi	r2,1
    b7fc:	000b883a 	mov	r5,zero
    b800:	0025883a 	mov	r18,zero
    b804:	003e6106 	br	b18c <__divdf3+0x17c>
    b808:	85a1883a 	add	r16,r16,r22
    b80c:	8585803a 	cmpltu	r2,r16,r22
    b810:	1705883a 	add	r2,r2,fp
    b814:	14a5883a 	add	r18,r2,r18
    b818:	8c7fff84 	addi	r17,r17,-2
    b81c:	003f1106 	br	b464 <__divdf3+0x454>
    b820:	b589883a 	add	r4,r22,r22
    b824:	25ad803a 	cmpltu	r22,r4,r22
    b828:	b739883a 	add	fp,r22,fp
    b82c:	40bfff84 	addi	r2,r8,-2
    b830:	bf2f883a 	add	r23,r23,fp
    b834:	202d883a 	mov	r22,r4
    b838:	003f9306 	br	b688 <__divdf3+0x678>
    b83c:	013ff844 	movi	r4,-31
    b840:	2085c83a 	sub	r2,r4,r2
    b844:	8888d83a 	srl	r4,r17,r2
    b848:	00800804 	movi	r2,32
    b84c:	18802126 	beq	r3,r2,b8d4 <__divdf3+0x8c4>
    b850:	00801004 	movi	r2,64
    b854:	10c5c83a 	sub	r2,r2,r3
    b858:	8884983a 	sll	r2,r17,r2
    b85c:	1204b03a 	or	r2,r2,r8
    b860:	1004c03a 	cmpne	r2,r2,zero
    b864:	2084b03a 	or	r2,r4,r2
    b868:	144001cc 	andi	r17,r2,7
    b86c:	88000d1e 	bne	r17,zero,b8a4 <__divdf3+0x894>
    b870:	000b883a 	mov	r5,zero
    b874:	1024d0fa 	srli	r18,r2,3
    b878:	98c0004c 	andi	r3,r19,1
    b87c:	0005883a 	mov	r2,zero
    b880:	9464b03a 	or	r18,r18,r17
    b884:	003e4106 	br	b18c <__divdf3+0x17c>
    b888:	1007883a 	mov	r3,r2
    b88c:	0023883a 	mov	r17,zero
    b890:	880a927a 	slli	r5,r17,9
    b894:	1805883a 	mov	r2,r3
    b898:	8822977a 	slli	r17,r17,29
    b89c:	280ad33a 	srli	r5,r5,12
    b8a0:	003ff406 	br	b874 <__divdf3+0x864>
    b8a4:	10c003cc 	andi	r3,r2,15
    b8a8:	01000104 	movi	r4,4
    b8ac:	193ff626 	beq	r3,r4,b888 <__divdf3+0x878>
    b8b0:	0023883a 	mov	r17,zero
    b8b4:	003fca06 	br	b7e0 <__divdf3+0x7d0>
    b8b8:	813fd336 	bltu	r16,r4,b808 <__divdf3+0x7f8>
    b8bc:	1023883a 	mov	r17,r2
    b8c0:	003fa806 	br	b764 <__divdf3+0x754>
    b8c4:	b0ffd636 	bltu	r22,r3,b820 <__divdf3+0x810>
    b8c8:	1011883a 	mov	r8,r2
    b8cc:	b0ff341e 	bne	r22,r3,b5a0 <__divdf3+0x590>
    b8d0:	003f3406 	br	b5a4 <__divdf3+0x594>
    b8d4:	0005883a 	mov	r2,zero
    b8d8:	003fe006 	br	b85c <__divdf3+0x84c>
    b8dc:	00800434 	movhi	r2,16
    b8e0:	89400234 	orhi	r5,r17,8
    b8e4:	10bfffc4 	addi	r2,r2,-1
    b8e8:	b807883a 	mov	r3,r23
    b8ec:	288a703a 	and	r5,r5,r2
    b8f0:	4025883a 	mov	r18,r8
    b8f4:	003e8206 	br	b300 <__divdf3+0x2f0>

0000b8f8 <__eqdf2>:
    b8f8:	2804d53a 	srli	r2,r5,20
    b8fc:	3806d53a 	srli	r3,r7,20
    b900:	02000434 	movhi	r8,16
    b904:	423fffc4 	addi	r8,r8,-1
    b908:	1081ffcc 	andi	r2,r2,2047
    b90c:	0281ffc4 	movi	r10,2047
    b910:	2a12703a 	and	r9,r5,r8
    b914:	18c1ffcc 	andi	r3,r3,2047
    b918:	3a10703a 	and	r8,r7,r8
    b91c:	280ad7fa 	srli	r5,r5,31
    b920:	380ed7fa 	srli	r7,r7,31
    b924:	12801026 	beq	r2,r10,b968 <__eqdf2+0x70>
    b928:	0281ffc4 	movi	r10,2047
    b92c:	1a800a26 	beq	r3,r10,b958 <__eqdf2+0x60>
    b930:	10c00226 	beq	r2,r3,b93c <__eqdf2+0x44>
    b934:	00800044 	movi	r2,1
    b938:	f800283a 	ret
    b93c:	4a3ffd1e 	bne	r9,r8,b934 <__eqdf2+0x3c>
    b940:	21bffc1e 	bne	r4,r6,b934 <__eqdf2+0x3c>
    b944:	29c00c26 	beq	r5,r7,b978 <__eqdf2+0x80>
    b948:	103ffa1e 	bne	r2,zero,b934 <__eqdf2+0x3c>
    b94c:	2244b03a 	or	r2,r4,r9
    b950:	1004c03a 	cmpne	r2,r2,zero
    b954:	f800283a 	ret
    b958:	3214b03a 	or	r10,r6,r8
    b95c:	503ff426 	beq	r10,zero,b930 <__eqdf2+0x38>
    b960:	00800044 	movi	r2,1
    b964:	f800283a 	ret
    b968:	2254b03a 	or	r10,r4,r9
    b96c:	503fee26 	beq	r10,zero,b928 <__eqdf2+0x30>
    b970:	00800044 	movi	r2,1
    b974:	f800283a 	ret
    b978:	0005883a 	mov	r2,zero
    b97c:	f800283a 	ret

0000b980 <__gedf2>:
    b980:	2804d53a 	srli	r2,r5,20
    b984:	3806d53a 	srli	r3,r7,20
    b988:	02000434 	movhi	r8,16
    b98c:	423fffc4 	addi	r8,r8,-1
    b990:	1081ffcc 	andi	r2,r2,2047
    b994:	0241ffc4 	movi	r9,2047
    b998:	2a14703a 	and	r10,r5,r8
    b99c:	18c1ffcc 	andi	r3,r3,2047
    b9a0:	3a10703a 	and	r8,r7,r8
    b9a4:	280ad7fa 	srli	r5,r5,31
    b9a8:	380ed7fa 	srli	r7,r7,31
    b9ac:	12401d26 	beq	r2,r9,ba24 <__gedf2+0xa4>
    b9b0:	0241ffc4 	movi	r9,2047
    b9b4:	1a401226 	beq	r3,r9,ba00 <__gedf2+0x80>
    b9b8:	1000081e 	bne	r2,zero,b9dc <__gedf2+0x5c>
    b9bc:	2296b03a 	or	r11,r4,r10
    b9c0:	5813003a 	cmpeq	r9,r11,zero
    b9c4:	1800091e 	bne	r3,zero,b9ec <__gedf2+0x6c>
    b9c8:	3218b03a 	or	r12,r6,r8
    b9cc:	6000071e 	bne	r12,zero,b9ec <__gedf2+0x6c>
    b9d0:	0005883a 	mov	r2,zero
    b9d4:	5800101e 	bne	r11,zero,ba18 <__gedf2+0x98>
    b9d8:	f800283a 	ret
    b9dc:	18000c1e 	bne	r3,zero,ba10 <__gedf2+0x90>
    b9e0:	3212b03a 	or	r9,r6,r8
    b9e4:	48000c26 	beq	r9,zero,ba18 <__gedf2+0x98>
    b9e8:	0013883a 	mov	r9,zero
    b9ec:	39c03fcc 	andi	r7,r7,255
    b9f0:	48000826 	beq	r9,zero,ba14 <__gedf2+0x94>
    b9f4:	38000926 	beq	r7,zero,ba1c <__gedf2+0x9c>
    b9f8:	00800044 	movi	r2,1
    b9fc:	f800283a 	ret
    ba00:	3212b03a 	or	r9,r6,r8
    ba04:	483fec26 	beq	r9,zero,b9b8 <__gedf2+0x38>
    ba08:	00bfff84 	movi	r2,-2
    ba0c:	f800283a 	ret
    ba10:	39c03fcc 	andi	r7,r7,255
    ba14:	29c00626 	beq	r5,r7,ba30 <__gedf2+0xb0>
    ba18:	283ff726 	beq	r5,zero,b9f8 <__gedf2+0x78>
    ba1c:	00bfffc4 	movi	r2,-1
    ba20:	f800283a 	ret
    ba24:	2292b03a 	or	r9,r4,r10
    ba28:	483fe126 	beq	r9,zero,b9b0 <__gedf2+0x30>
    ba2c:	003ff606 	br	ba08 <__gedf2+0x88>
    ba30:	18bff916 	blt	r3,r2,ba18 <__gedf2+0x98>
    ba34:	10c00316 	blt	r2,r3,ba44 <__gedf2+0xc4>
    ba38:	42bff736 	bltu	r8,r10,ba18 <__gedf2+0x98>
    ba3c:	52000326 	beq	r10,r8,ba4c <__gedf2+0xcc>
    ba40:	5200042e 	bgeu	r10,r8,ba54 <__gedf2+0xd4>
    ba44:	283fec1e 	bne	r5,zero,b9f8 <__gedf2+0x78>
    ba48:	003ff406 	br	ba1c <__gedf2+0x9c>
    ba4c:	313ff236 	bltu	r6,r4,ba18 <__gedf2+0x98>
    ba50:	21bffc36 	bltu	r4,r6,ba44 <__gedf2+0xc4>
    ba54:	0005883a 	mov	r2,zero
    ba58:	f800283a 	ret

0000ba5c <__ledf2>:
    ba5c:	2804d53a 	srli	r2,r5,20
    ba60:	3810d53a 	srli	r8,r7,20
    ba64:	00c00434 	movhi	r3,16
    ba68:	18ffffc4 	addi	r3,r3,-1
    ba6c:	1081ffcc 	andi	r2,r2,2047
    ba70:	0241ffc4 	movi	r9,2047
    ba74:	28d4703a 	and	r10,r5,r3
    ba78:	4201ffcc 	andi	r8,r8,2047
    ba7c:	38c6703a 	and	r3,r7,r3
    ba80:	280ad7fa 	srli	r5,r5,31
    ba84:	380ed7fa 	srli	r7,r7,31
    ba88:	12401f26 	beq	r2,r9,bb08 <__ledf2+0xac>
    ba8c:	0241ffc4 	movi	r9,2047
    ba90:	42401426 	beq	r8,r9,bae4 <__ledf2+0x88>
    ba94:	1000091e 	bne	r2,zero,babc <__ledf2+0x60>
    ba98:	2296b03a 	or	r11,r4,r10
    ba9c:	5813003a 	cmpeq	r9,r11,zero
    baa0:	29403fcc 	andi	r5,r5,255
    baa4:	40000a1e 	bne	r8,zero,bad0 <__ledf2+0x74>
    baa8:	30d8b03a 	or	r12,r6,r3
    baac:	6000081e 	bne	r12,zero,bad0 <__ledf2+0x74>
    bab0:	0005883a 	mov	r2,zero
    bab4:	5800111e 	bne	r11,zero,bafc <__ledf2+0xa0>
    bab8:	f800283a 	ret
    babc:	29403fcc 	andi	r5,r5,255
    bac0:	40000c1e 	bne	r8,zero,baf4 <__ledf2+0x98>
    bac4:	30d2b03a 	or	r9,r6,r3
    bac8:	48000c26 	beq	r9,zero,bafc <__ledf2+0xa0>
    bacc:	0013883a 	mov	r9,zero
    bad0:	39c03fcc 	andi	r7,r7,255
    bad4:	48000826 	beq	r9,zero,baf8 <__ledf2+0x9c>
    bad8:	38001126 	beq	r7,zero,bb20 <__ledf2+0xc4>
    badc:	00800044 	movi	r2,1
    bae0:	f800283a 	ret
    bae4:	30d2b03a 	or	r9,r6,r3
    bae8:	483fea26 	beq	r9,zero,ba94 <__ledf2+0x38>
    baec:	00800084 	movi	r2,2
    baf0:	f800283a 	ret
    baf4:	39c03fcc 	andi	r7,r7,255
    baf8:	39400726 	beq	r7,r5,bb18 <__ledf2+0xbc>
    bafc:	2800081e 	bne	r5,zero,bb20 <__ledf2+0xc4>
    bb00:	00800044 	movi	r2,1
    bb04:	f800283a 	ret
    bb08:	2292b03a 	or	r9,r4,r10
    bb0c:	483fdf26 	beq	r9,zero,ba8c <__ledf2+0x30>
    bb10:	00800084 	movi	r2,2
    bb14:	f800283a 	ret
    bb18:	4080030e 	bge	r8,r2,bb28 <__ledf2+0xcc>
    bb1c:	383fef26 	beq	r7,zero,badc <__ledf2+0x80>
    bb20:	00bfffc4 	movi	r2,-1
    bb24:	f800283a 	ret
    bb28:	123feb16 	blt	r2,r8,bad8 <__ledf2+0x7c>
    bb2c:	1abff336 	bltu	r3,r10,bafc <__ledf2+0xa0>
    bb30:	50c00326 	beq	r10,r3,bb40 <__ledf2+0xe4>
    bb34:	50c0042e 	bgeu	r10,r3,bb48 <__ledf2+0xec>
    bb38:	283fe81e 	bne	r5,zero,badc <__ledf2+0x80>
    bb3c:	003ff806 	br	bb20 <__ledf2+0xc4>
    bb40:	313fee36 	bltu	r6,r4,bafc <__ledf2+0xa0>
    bb44:	21bffc36 	bltu	r4,r6,bb38 <__ledf2+0xdc>
    bb48:	0005883a 	mov	r2,zero
    bb4c:	f800283a 	ret

0000bb50 <__muldf3>:
    bb50:	defff304 	addi	sp,sp,-52
    bb54:	dd400815 	stw	r21,32(sp)
    bb58:	282ad53a 	srli	r21,r5,20
    bb5c:	dd800915 	stw	r22,36(sp)
    bb60:	282cd7fa 	srli	r22,r5,31
    bb64:	dc000315 	stw	r16,12(sp)
    bb68:	04000434 	movhi	r16,16
    bb6c:	dd000715 	stw	r20,28(sp)
    bb70:	843fffc4 	addi	r16,r16,-1
    bb74:	dfc00c15 	stw	ra,48(sp)
    bb78:	df000b15 	stw	fp,44(sp)
    bb7c:	ddc00a15 	stw	r23,40(sp)
    bb80:	dcc00615 	stw	r19,24(sp)
    bb84:	dc800515 	stw	r18,20(sp)
    bb88:	dc400415 	stw	r17,16(sp)
    bb8c:	ad41ffcc 	andi	r21,r21,2047
    bb90:	2c20703a 	and	r16,r5,r16
    bb94:	b029883a 	mov	r20,r22
    bb98:	b2403fcc 	andi	r9,r22,255
    bb9c:	a8006026 	beq	r21,zero,bd20 <__muldf3+0x1d0>
    bba0:	0081ffc4 	movi	r2,2047
    bba4:	2027883a 	mov	r19,r4
    bba8:	a8803626 	beq	r21,r2,bc84 <__muldf3+0x134>
    bbac:	80c00434 	orhi	r3,r16,16
    bbb0:	180690fa 	slli	r3,r3,3
    bbb4:	2020d77a 	srli	r16,r4,29
    bbb8:	202690fa 	slli	r19,r4,3
    bbbc:	ad7f0044 	addi	r21,r21,-1023
    bbc0:	80e0b03a 	or	r16,r16,r3
    bbc4:	0025883a 	mov	r18,zero
    bbc8:	0039883a 	mov	fp,zero
    bbcc:	3808d53a 	srli	r4,r7,20
    bbd0:	382ed7fa 	srli	r23,r7,31
    bbd4:	04400434 	movhi	r17,16
    bbd8:	8c7fffc4 	addi	r17,r17,-1
    bbdc:	2101ffcc 	andi	r4,r4,2047
    bbe0:	3011883a 	mov	r8,r6
    bbe4:	3c62703a 	and	r17,r7,r17
    bbe8:	ba803fcc 	andi	r10,r23,255
    bbec:	20006d26 	beq	r4,zero,bda4 <__muldf3+0x254>
    bbf0:	0081ffc4 	movi	r2,2047
    bbf4:	20806526 	beq	r4,r2,bd8c <__muldf3+0x23c>
    bbf8:	88c00434 	orhi	r3,r17,16
    bbfc:	180690fa 	slli	r3,r3,3
    bc00:	3022d77a 	srli	r17,r6,29
    bc04:	301090fa 	slli	r8,r6,3
    bc08:	213f0044 	addi	r4,r4,-1023
    bc0c:	88e2b03a 	or	r17,r17,r3
    bc10:	000b883a 	mov	r5,zero
    bc14:	a909883a 	add	r4,r21,r4
    bc18:	2c84b03a 	or	r2,r5,r18
    bc1c:	00c003c4 	movi	r3,15
    bc20:	bdacf03a 	xor	r22,r23,r22
    bc24:	22c00044 	addi	r11,r4,1
    bc28:	18809936 	bltu	r3,r2,be90 <__muldf3+0x340>
    bc2c:	100490ba 	slli	r2,r2,2
    bc30:	00c00074 	movhi	r3,1
    bc34:	18ef1104 	addi	r3,r3,-17340
    bc38:	10c5883a 	add	r2,r2,r3
    bc3c:	10800017 	ldw	r2,0(r2)
    bc40:	1000683a 	jmp	r2
    bc44:	0000be90 	cmplti	zero,zero,762
    bc48:	0000bca4 	muli	zero,zero,754
    bc4c:	0000bca4 	muli	zero,zero,754
    bc50:	0000bca0 	cmpeqi	zero,zero,754
    bc54:	0000be6c 	andhi	zero,zero,761
    bc58:	0000be6c 	andhi	zero,zero,761
    bc5c:	0000be54 	movui	zero,761
    bc60:	0000bca0 	cmpeqi	zero,zero,754
    bc64:	0000be6c 	andhi	zero,zero,761
    bc68:	0000be54 	movui	zero,761
    bc6c:	0000be6c 	andhi	zero,zero,761
    bc70:	0000bca0 	cmpeqi	zero,zero,754
    bc74:	0000be7c 	xorhi	zero,zero,761
    bc78:	0000be7c 	xorhi	zero,zero,761
    bc7c:	0000be7c 	xorhi	zero,zero,761
    bc80:	0000c098 	cmpnei	zero,zero,770
    bc84:	2404b03a 	or	r2,r4,r16
    bc88:	10006f1e 	bne	r2,zero,be48 <__muldf3+0x2f8>
    bc8c:	04800204 	movi	r18,8
    bc90:	0021883a 	mov	r16,zero
    bc94:	0027883a 	mov	r19,zero
    bc98:	07000084 	movi	fp,2
    bc9c:	003fcb06 	br	bbcc <__muldf3+0x7c>
    bca0:	502d883a 	mov	r22,r10
    bca4:	00800084 	movi	r2,2
    bca8:	28805726 	beq	r5,r2,be08 <__muldf3+0x2b8>
    bcac:	008000c4 	movi	r2,3
    bcb0:	28816626 	beq	r5,r2,c24c <__muldf3+0x6fc>
    bcb4:	00800044 	movi	r2,1
    bcb8:	2881411e 	bne	r5,r2,c1c0 <__muldf3+0x670>
    bcbc:	b029883a 	mov	r20,r22
    bcc0:	0005883a 	mov	r2,zero
    bcc4:	000b883a 	mov	r5,zero
    bcc8:	0027883a 	mov	r19,zero
    bccc:	1004953a 	slli	r2,r2,20
    bcd0:	a0c03fcc 	andi	r3,r20,255
    bcd4:	04400434 	movhi	r17,16
    bcd8:	8c7fffc4 	addi	r17,r17,-1
    bcdc:	180697fa 	slli	r3,r3,31
    bce0:	2c4a703a 	and	r5,r5,r17
    bce4:	288ab03a 	or	r5,r5,r2
    bce8:	28c6b03a 	or	r3,r5,r3
    bcec:	9805883a 	mov	r2,r19
    bcf0:	dfc00c17 	ldw	ra,48(sp)
    bcf4:	df000b17 	ldw	fp,44(sp)
    bcf8:	ddc00a17 	ldw	r23,40(sp)
    bcfc:	dd800917 	ldw	r22,36(sp)
    bd00:	dd400817 	ldw	r21,32(sp)
    bd04:	dd000717 	ldw	r20,28(sp)
    bd08:	dcc00617 	ldw	r19,24(sp)
    bd0c:	dc800517 	ldw	r18,20(sp)
    bd10:	dc400417 	ldw	r17,16(sp)
    bd14:	dc000317 	ldw	r16,12(sp)
    bd18:	dec00d04 	addi	sp,sp,52
    bd1c:	f800283a 	ret
    bd20:	2404b03a 	or	r2,r4,r16
    bd24:	2025883a 	mov	r18,r4
    bd28:	10004226 	beq	r2,zero,be34 <__muldf3+0x2e4>
    bd2c:	8000fc26 	beq	r16,zero,c120 <__muldf3+0x5d0>
    bd30:	8009883a 	mov	r4,r16
    bd34:	d9800215 	stw	r6,8(sp)
    bd38:	d9c00015 	stw	r7,0(sp)
    bd3c:	da400115 	stw	r9,4(sp)
    bd40:	000cd680 	call	cd68 <__clzsi2>
    bd44:	d9800217 	ldw	r6,8(sp)
    bd48:	d9c00017 	ldw	r7,0(sp)
    bd4c:	da400117 	ldw	r9,4(sp)
    bd50:	10fffd44 	addi	r3,r2,-11
    bd54:	01000704 	movi	r4,28
    bd58:	20c0ed16 	blt	r4,r3,c110 <__muldf3+0x5c0>
    bd5c:	01000744 	movi	r4,29
    bd60:	147ffe04 	addi	r17,r2,-8
    bd64:	20c9c83a 	sub	r4,r4,r3
    bd68:	8460983a 	sll	r16,r16,r17
    bd6c:	9108d83a 	srl	r4,r18,r4
    bd70:	9466983a 	sll	r19,r18,r17
    bd74:	2420b03a 	or	r16,r4,r16
    bd78:	013f0084 	movi	r4,-1022
    bd7c:	20ebc83a 	sub	r21,r4,r3
    bd80:	0025883a 	mov	r18,zero
    bd84:	0039883a 	mov	fp,zero
    bd88:	003f9006 	br	bbcc <__muldf3+0x7c>
    bd8c:	3444b03a 	or	r2,r6,r17
    bd90:	1000261e 	bne	r2,zero,be2c <__muldf3+0x2dc>
    bd94:	0023883a 	mov	r17,zero
    bd98:	0011883a 	mov	r8,zero
    bd9c:	01400084 	movi	r5,2
    bda0:	003f9c06 	br	bc14 <__muldf3+0xc4>
    bda4:	3444b03a 	or	r2,r6,r17
    bda8:	10001c26 	beq	r2,zero,be1c <__muldf3+0x2cc>
    bdac:	8800ce26 	beq	r17,zero,c0e8 <__muldf3+0x598>
    bdb0:	8809883a 	mov	r4,r17
    bdb4:	d9800215 	stw	r6,8(sp)
    bdb8:	da400115 	stw	r9,4(sp)
    bdbc:	da800015 	stw	r10,0(sp)
    bdc0:	000cd680 	call	cd68 <__clzsi2>
    bdc4:	d9800217 	ldw	r6,8(sp)
    bdc8:	da400117 	ldw	r9,4(sp)
    bdcc:	da800017 	ldw	r10,0(sp)
    bdd0:	113ffd44 	addi	r4,r2,-11
    bdd4:	00c00704 	movi	r3,28
    bdd8:	1900bf16 	blt	r3,r4,c0d8 <__muldf3+0x588>
    bddc:	00c00744 	movi	r3,29
    bde0:	123ffe04 	addi	r8,r2,-8
    bde4:	1907c83a 	sub	r3,r3,r4
    bde8:	8a22983a 	sll	r17,r17,r8
    bdec:	30c6d83a 	srl	r3,r6,r3
    bdf0:	3210983a 	sll	r8,r6,r8
    bdf4:	1c62b03a 	or	r17,r3,r17
    bdf8:	017f0084 	movi	r5,-1022
    bdfc:	2909c83a 	sub	r4,r5,r4
    be00:	000b883a 	mov	r5,zero
    be04:	003f8306 	br	bc14 <__muldf3+0xc4>
    be08:	b029883a 	mov	r20,r22
    be0c:	0081ffc4 	movi	r2,2047
    be10:	000b883a 	mov	r5,zero
    be14:	0027883a 	mov	r19,zero
    be18:	003fac06 	br	bccc <__muldf3+0x17c>
    be1c:	0023883a 	mov	r17,zero
    be20:	0011883a 	mov	r8,zero
    be24:	01400044 	movi	r5,1
    be28:	003f7a06 	br	bc14 <__muldf3+0xc4>
    be2c:	014000c4 	movi	r5,3
    be30:	003f7806 	br	bc14 <__muldf3+0xc4>
    be34:	04800104 	movi	r18,4
    be38:	0021883a 	mov	r16,zero
    be3c:	0027883a 	mov	r19,zero
    be40:	07000044 	movi	fp,1
    be44:	003f6106 	br	bbcc <__muldf3+0x7c>
    be48:	04800304 	movi	r18,12
    be4c:	070000c4 	movi	fp,3
    be50:	003f5e06 	br	bbcc <__muldf3+0x7c>
    be54:	01400434 	movhi	r5,16
    be58:	0029883a 	mov	r20,zero
    be5c:	297fffc4 	addi	r5,r5,-1
    be60:	04ffffc4 	movi	r19,-1
    be64:	0081ffc4 	movi	r2,2047
    be68:	003f9806 	br	bccc <__muldf3+0x17c>
    be6c:	8023883a 	mov	r17,r16
    be70:	9811883a 	mov	r8,r19
    be74:	e00b883a 	mov	r5,fp
    be78:	003f8a06 	br	bca4 <__muldf3+0x154>
    be7c:	8023883a 	mov	r17,r16
    be80:	9811883a 	mov	r8,r19
    be84:	482d883a 	mov	r22,r9
    be88:	e00b883a 	mov	r5,fp
    be8c:	003f8506 	br	bca4 <__muldf3+0x154>
    be90:	980ad43a 	srli	r5,r19,16
    be94:	401ad43a 	srli	r13,r8,16
    be98:	9cffffcc 	andi	r19,r19,65535
    be9c:	423fffcc 	andi	r8,r8,65535
    bea0:	44d9383a 	mul	r12,r8,r19
    bea4:	4145383a 	mul	r2,r8,r5
    bea8:	6ccd383a 	mul	r6,r13,r19
    beac:	6006d43a 	srli	r3,r12,16
    beb0:	2b5d383a 	mul	r14,r5,r13
    beb4:	308d883a 	add	r6,r6,r2
    beb8:	198d883a 	add	r6,r3,r6
    bebc:	3080022e 	bgeu	r6,r2,bec8 <__muldf3+0x378>
    bec0:	00800074 	movhi	r2,1
    bec4:	709d883a 	add	r14,r14,r2
    bec8:	8828d43a 	srli	r20,r17,16
    becc:	8bffffcc 	andi	r15,r17,65535
    bed0:	7ce3383a 	mul	r17,r15,r19
    bed4:	7945383a 	mul	r2,r15,r5
    bed8:	a4e7383a 	mul	r19,r20,r19
    bedc:	8814d43a 	srli	r10,r17,16
    bee0:	3012943a 	slli	r9,r6,16
    bee4:	98a7883a 	add	r19,r19,r2
    bee8:	633fffcc 	andi	r12,r12,65535
    beec:	54d5883a 	add	r10,r10,r19
    bef0:	3006d43a 	srli	r3,r6,16
    bef4:	4b13883a 	add	r9,r9,r12
    bef8:	2d0b383a 	mul	r5,r5,r20
    befc:	5080022e 	bgeu	r10,r2,bf08 <__muldf3+0x3b8>
    bf00:	00800074 	movhi	r2,1
    bf04:	288b883a 	add	r5,r5,r2
    bf08:	802ad43a 	srli	r21,r16,16
    bf0c:	843fffcc 	andi	r16,r16,65535
    bf10:	440d383a 	mul	r6,r8,r16
    bf14:	4565383a 	mul	r18,r8,r21
    bf18:	8359383a 	mul	r12,r16,r13
    bf1c:	500e943a 	slli	r7,r10,16
    bf20:	3010d43a 	srli	r8,r6,16
    bf24:	5026d43a 	srli	r19,r10,16
    bf28:	6499883a 	add	r12,r12,r18
    bf2c:	8abfffcc 	andi	r10,r17,65535
    bf30:	3a95883a 	add	r10,r7,r10
    bf34:	4319883a 	add	r12,r8,r12
    bf38:	9967883a 	add	r19,r19,r5
    bf3c:	1a87883a 	add	r3,r3,r10
    bf40:	6d5b383a 	mul	r13,r13,r21
    bf44:	6480022e 	bgeu	r12,r18,bf50 <__muldf3+0x400>
    bf48:	00800074 	movhi	r2,1
    bf4c:	689b883a 	add	r13,r13,r2
    bf50:	7c25383a 	mul	r18,r15,r16
    bf54:	7d4b383a 	mul	r5,r15,r21
    bf58:	850f383a 	mul	r7,r16,r20
    bf5c:	901ed43a 	srli	r15,r18,16
    bf60:	6004d43a 	srli	r2,r12,16
    bf64:	6010943a 	slli	r8,r12,16
    bf68:	394f883a 	add	r7,r7,r5
    bf6c:	333fffcc 	andi	r12,r6,65535
    bf70:	79df883a 	add	r15,r15,r7
    bf74:	135b883a 	add	r13,r2,r13
    bf78:	a563383a 	mul	r17,r20,r21
    bf7c:	4305883a 	add	r2,r8,r12
    bf80:	7940022e 	bgeu	r15,r5,bf8c <__muldf3+0x43c>
    bf84:	01400074 	movhi	r5,1
    bf88:	8963883a 	add	r17,r17,r5
    bf8c:	780a943a 	slli	r5,r15,16
    bf90:	91bfffcc 	andi	r6,r18,65535
    bf94:	70c7883a 	add	r3,r14,r3
    bf98:	298d883a 	add	r6,r5,r6
    bf9c:	1a8f803a 	cmpltu	r7,r3,r10
    bfa0:	34cb883a 	add	r5,r6,r19
    bfa4:	10c7883a 	add	r3,r2,r3
    bfa8:	3955883a 	add	r10,r7,r5
    bfac:	1885803a 	cmpltu	r2,r3,r2
    bfb0:	6a91883a 	add	r8,r13,r10
    bfb4:	780cd43a 	srli	r6,r15,16
    bfb8:	1219883a 	add	r12,r2,r8
    bfbc:	2ccb803a 	cmpltu	r5,r5,r19
    bfc0:	51cf803a 	cmpltu	r7,r10,r7
    bfc4:	29ceb03a 	or	r7,r5,r7
    bfc8:	4351803a 	cmpltu	r8,r8,r13
    bfcc:	608b803a 	cmpltu	r5,r12,r2
    bfd0:	4144b03a 	or	r2,r8,r5
    bfd4:	398f883a 	add	r7,r7,r6
    bfd8:	3885883a 	add	r2,r7,r2
    bfdc:	1810927a 	slli	r8,r3,9
    bfe0:	1445883a 	add	r2,r2,r17
    bfe4:	1004927a 	slli	r2,r2,9
    bfe8:	6022d5fa 	srli	r17,r12,23
    bfec:	1806d5fa 	srli	r3,r3,23
    bff0:	4252b03a 	or	r9,r8,r9
    bff4:	600a927a 	slli	r5,r12,9
    bff8:	4810c03a 	cmpne	r8,r9,zero
    bffc:	1462b03a 	or	r17,r2,r17
    c000:	40c6b03a 	or	r3,r8,r3
    c004:	8880402c 	andhi	r2,r17,256
    c008:	1950b03a 	or	r8,r3,r5
    c00c:	10000726 	beq	r2,zero,c02c <__muldf3+0x4dc>
    c010:	4006d07a 	srli	r3,r8,1
    c014:	880497fa 	slli	r2,r17,31
    c018:	4200004c 	andi	r8,r8,1
    c01c:	8822d07a 	srli	r17,r17,1
    c020:	1a10b03a 	or	r8,r3,r8
    c024:	1210b03a 	or	r8,r2,r8
    c028:	5809883a 	mov	r4,r11
    c02c:	2080ffc4 	addi	r2,r4,1023
    c030:	0080440e 	bge	zero,r2,c144 <__muldf3+0x5f4>
    c034:	40c001cc 	andi	r3,r8,7
    c038:	18000726 	beq	r3,zero,c058 <__muldf3+0x508>
    c03c:	40c003cc 	andi	r3,r8,15
    c040:	01400104 	movi	r5,4
    c044:	19400426 	beq	r3,r5,c058 <__muldf3+0x508>
    c048:	4147883a 	add	r3,r8,r5
    c04c:	1a11803a 	cmpltu	r8,r3,r8
    c050:	8a23883a 	add	r17,r17,r8
    c054:	1811883a 	mov	r8,r3
    c058:	88c0402c 	andhi	r3,r17,256
    c05c:	18000426 	beq	r3,zero,c070 <__muldf3+0x520>
    c060:	00ffc034 	movhi	r3,65280
    c064:	18ffffc4 	addi	r3,r3,-1
    c068:	20810004 	addi	r2,r4,1024
    c06c:	88e2703a 	and	r17,r17,r3
    c070:	00c1ff84 	movi	r3,2046
    c074:	18bf6416 	blt	r3,r2,be08 <__muldf3+0x2b8>
    c078:	8826977a 	slli	r19,r17,29
    c07c:	4010d0fa 	srli	r8,r8,3
    c080:	8822927a 	slli	r17,r17,9
    c084:	1081ffcc 	andi	r2,r2,2047
    c088:	9a26b03a 	or	r19,r19,r8
    c08c:	880ad33a 	srli	r5,r17,12
    c090:	b029883a 	mov	r20,r22
    c094:	003f0d06 	br	bccc <__muldf3+0x17c>
    c098:	8080022c 	andhi	r2,r16,8
    c09c:	10000926 	beq	r2,zero,c0c4 <__muldf3+0x574>
    c0a0:	8880022c 	andhi	r2,r17,8
    c0a4:	1000071e 	bne	r2,zero,c0c4 <__muldf3+0x574>
    c0a8:	00800434 	movhi	r2,16
    c0ac:	89400234 	orhi	r5,r17,8
    c0b0:	10bfffc4 	addi	r2,r2,-1
    c0b4:	b829883a 	mov	r20,r23
    c0b8:	288a703a 	and	r5,r5,r2
    c0bc:	4027883a 	mov	r19,r8
    c0c0:	003f6806 	br	be64 <__muldf3+0x314>
    c0c4:	00800434 	movhi	r2,16
    c0c8:	81400234 	orhi	r5,r16,8
    c0cc:	10bfffc4 	addi	r2,r2,-1
    c0d0:	288a703a 	and	r5,r5,r2
    c0d4:	003f6306 	br	be64 <__muldf3+0x314>
    c0d8:	10bff604 	addi	r2,r2,-40
    c0dc:	30a2983a 	sll	r17,r6,r2
    c0e0:	0011883a 	mov	r8,zero
    c0e4:	003f4406 	br	bdf8 <__muldf3+0x2a8>
    c0e8:	3009883a 	mov	r4,r6
    c0ec:	d9800215 	stw	r6,8(sp)
    c0f0:	da400115 	stw	r9,4(sp)
    c0f4:	da800015 	stw	r10,0(sp)
    c0f8:	000cd680 	call	cd68 <__clzsi2>
    c0fc:	10800804 	addi	r2,r2,32
    c100:	da800017 	ldw	r10,0(sp)
    c104:	da400117 	ldw	r9,4(sp)
    c108:	d9800217 	ldw	r6,8(sp)
    c10c:	003f3006 	br	bdd0 <__muldf3+0x280>
    c110:	10bff604 	addi	r2,r2,-40
    c114:	90a0983a 	sll	r16,r18,r2
    c118:	0027883a 	mov	r19,zero
    c11c:	003f1606 	br	bd78 <__muldf3+0x228>
    c120:	d9800215 	stw	r6,8(sp)
    c124:	d9c00015 	stw	r7,0(sp)
    c128:	da400115 	stw	r9,4(sp)
    c12c:	000cd680 	call	cd68 <__clzsi2>
    c130:	10800804 	addi	r2,r2,32
    c134:	da400117 	ldw	r9,4(sp)
    c138:	d9c00017 	ldw	r7,0(sp)
    c13c:	d9800217 	ldw	r6,8(sp)
    c140:	003f0306 	br	bd50 <__muldf3+0x200>
    c144:	00c00044 	movi	r3,1
    c148:	1887c83a 	sub	r3,r3,r2
    c14c:	01000e04 	movi	r4,56
    c150:	20feda16 	blt	r4,r3,bcbc <__muldf3+0x16c>
    c154:	010007c4 	movi	r4,31
    c158:	20c01b16 	blt	r4,r3,c1c8 <__muldf3+0x678>
    c15c:	00800804 	movi	r2,32
    c160:	10c5c83a 	sub	r2,r2,r3
    c164:	888a983a 	sll	r5,r17,r2
    c168:	40c8d83a 	srl	r4,r8,r3
    c16c:	4084983a 	sll	r2,r8,r2
    c170:	88e2d83a 	srl	r17,r17,r3
    c174:	2906b03a 	or	r3,r5,r4
    c178:	1004c03a 	cmpne	r2,r2,zero
    c17c:	1886b03a 	or	r3,r3,r2
    c180:	188001cc 	andi	r2,r3,7
    c184:	10000726 	beq	r2,zero,c1a4 <__muldf3+0x654>
    c188:	188003cc 	andi	r2,r3,15
    c18c:	01000104 	movi	r4,4
    c190:	11000426 	beq	r2,r4,c1a4 <__muldf3+0x654>
    c194:	1805883a 	mov	r2,r3
    c198:	10c00104 	addi	r3,r2,4
    c19c:	1885803a 	cmpltu	r2,r3,r2
    c1a0:	88a3883a 	add	r17,r17,r2
    c1a4:	8880202c 	andhi	r2,r17,128
    c1a8:	10001c26 	beq	r2,zero,c21c <__muldf3+0x6cc>
    c1ac:	b029883a 	mov	r20,r22
    c1b0:	00800044 	movi	r2,1
    c1b4:	000b883a 	mov	r5,zero
    c1b8:	0027883a 	mov	r19,zero
    c1bc:	003ec306 	br	bccc <__muldf3+0x17c>
    c1c0:	5809883a 	mov	r4,r11
    c1c4:	003f9906 	br	c02c <__muldf3+0x4dc>
    c1c8:	013ff844 	movi	r4,-31
    c1cc:	2085c83a 	sub	r2,r4,r2
    c1d0:	8888d83a 	srl	r4,r17,r2
    c1d4:	00800804 	movi	r2,32
    c1d8:	18801a26 	beq	r3,r2,c244 <__muldf3+0x6f4>
    c1dc:	00801004 	movi	r2,64
    c1e0:	10c5c83a 	sub	r2,r2,r3
    c1e4:	8884983a 	sll	r2,r17,r2
    c1e8:	1204b03a 	or	r2,r2,r8
    c1ec:	1004c03a 	cmpne	r2,r2,zero
    c1f0:	2084b03a 	or	r2,r4,r2
    c1f4:	144001cc 	andi	r17,r2,7
    c1f8:	88000d1e 	bne	r17,zero,c230 <__muldf3+0x6e0>
    c1fc:	000b883a 	mov	r5,zero
    c200:	1026d0fa 	srli	r19,r2,3
    c204:	b029883a 	mov	r20,r22
    c208:	0005883a 	mov	r2,zero
    c20c:	9c66b03a 	or	r19,r19,r17
    c210:	003eae06 	br	bccc <__muldf3+0x17c>
    c214:	1007883a 	mov	r3,r2
    c218:	0023883a 	mov	r17,zero
    c21c:	880a927a 	slli	r5,r17,9
    c220:	1805883a 	mov	r2,r3
    c224:	8822977a 	slli	r17,r17,29
    c228:	280ad33a 	srli	r5,r5,12
    c22c:	003ff406 	br	c200 <__muldf3+0x6b0>
    c230:	10c003cc 	andi	r3,r2,15
    c234:	01000104 	movi	r4,4
    c238:	193ff626 	beq	r3,r4,c214 <__muldf3+0x6c4>
    c23c:	0023883a 	mov	r17,zero
    c240:	003fd506 	br	c198 <__muldf3+0x648>
    c244:	0005883a 	mov	r2,zero
    c248:	003fe706 	br	c1e8 <__muldf3+0x698>
    c24c:	00800434 	movhi	r2,16
    c250:	89400234 	orhi	r5,r17,8
    c254:	10bfffc4 	addi	r2,r2,-1
    c258:	b029883a 	mov	r20,r22
    c25c:	288a703a 	and	r5,r5,r2
    c260:	4027883a 	mov	r19,r8
    c264:	003eff06 	br	be64 <__muldf3+0x314>

0000c268 <__subdf3>:
    c268:	02000434 	movhi	r8,16
    c26c:	423fffc4 	addi	r8,r8,-1
    c270:	defffb04 	addi	sp,sp,-20
    c274:	2a14703a 	and	r10,r5,r8
    c278:	3812d53a 	srli	r9,r7,20
    c27c:	3a10703a 	and	r8,r7,r8
    c280:	2006d77a 	srli	r3,r4,29
    c284:	3004d77a 	srli	r2,r6,29
    c288:	dc000015 	stw	r16,0(sp)
    c28c:	501490fa 	slli	r10,r10,3
    c290:	2820d53a 	srli	r16,r5,20
    c294:	401090fa 	slli	r8,r8,3
    c298:	dc800215 	stw	r18,8(sp)
    c29c:	dc400115 	stw	r17,4(sp)
    c2a0:	dfc00415 	stw	ra,16(sp)
    c2a4:	202290fa 	slli	r17,r4,3
    c2a8:	dcc00315 	stw	r19,12(sp)
    c2ac:	4a41ffcc 	andi	r9,r9,2047
    c2b0:	0101ffc4 	movi	r4,2047
    c2b4:	2824d7fa 	srli	r18,r5,31
    c2b8:	8401ffcc 	andi	r16,r16,2047
    c2bc:	50c6b03a 	or	r3,r10,r3
    c2c0:	380ed7fa 	srli	r7,r7,31
    c2c4:	408ab03a 	or	r5,r8,r2
    c2c8:	300c90fa 	slli	r6,r6,3
    c2cc:	49009626 	beq	r9,r4,c528 <__subdf3+0x2c0>
    c2d0:	39c0005c 	xori	r7,r7,1
    c2d4:	8245c83a 	sub	r2,r16,r9
    c2d8:	3c807426 	beq	r7,r18,c4ac <__subdf3+0x244>
    c2dc:	0080af0e 	bge	zero,r2,c59c <__subdf3+0x334>
    c2e0:	48002a1e 	bne	r9,zero,c38c <__subdf3+0x124>
    c2e4:	2988b03a 	or	r4,r5,r6
    c2e8:	20009a1e 	bne	r4,zero,c554 <__subdf3+0x2ec>
    c2ec:	888001cc 	andi	r2,r17,7
    c2f0:	10000726 	beq	r2,zero,c310 <__subdf3+0xa8>
    c2f4:	888003cc 	andi	r2,r17,15
    c2f8:	01000104 	movi	r4,4
    c2fc:	11000426 	beq	r2,r4,c310 <__subdf3+0xa8>
    c300:	890b883a 	add	r5,r17,r4
    c304:	2c63803a 	cmpltu	r17,r5,r17
    c308:	1c47883a 	add	r3,r3,r17
    c30c:	2823883a 	mov	r17,r5
    c310:	1880202c 	andhi	r2,r3,128
    c314:	10005926 	beq	r2,zero,c47c <__subdf3+0x214>
    c318:	84000044 	addi	r16,r16,1
    c31c:	0081ffc4 	movi	r2,2047
    c320:	8080be26 	beq	r16,r2,c61c <__subdf3+0x3b4>
    c324:	017fe034 	movhi	r5,65408
    c328:	297fffc4 	addi	r5,r5,-1
    c32c:	1946703a 	and	r3,r3,r5
    c330:	1804977a 	slli	r2,r3,29
    c334:	1806927a 	slli	r3,r3,9
    c338:	8822d0fa 	srli	r17,r17,3
    c33c:	8401ffcc 	andi	r16,r16,2047
    c340:	180ad33a 	srli	r5,r3,12
    c344:	9100004c 	andi	r4,r18,1
    c348:	1444b03a 	or	r2,r2,r17
    c34c:	80c1ffcc 	andi	r3,r16,2047
    c350:	1820953a 	slli	r16,r3,20
    c354:	20c03fcc 	andi	r3,r4,255
    c358:	180897fa 	slli	r4,r3,31
    c35c:	00c00434 	movhi	r3,16
    c360:	18ffffc4 	addi	r3,r3,-1
    c364:	28c6703a 	and	r3,r5,r3
    c368:	1c06b03a 	or	r3,r3,r16
    c36c:	1906b03a 	or	r3,r3,r4
    c370:	dfc00417 	ldw	ra,16(sp)
    c374:	dcc00317 	ldw	r19,12(sp)
    c378:	dc800217 	ldw	r18,8(sp)
    c37c:	dc400117 	ldw	r17,4(sp)
    c380:	dc000017 	ldw	r16,0(sp)
    c384:	dec00504 	addi	sp,sp,20
    c388:	f800283a 	ret
    c38c:	0101ffc4 	movi	r4,2047
    c390:	813fd626 	beq	r16,r4,c2ec <__subdf3+0x84>
    c394:	29402034 	orhi	r5,r5,128
    c398:	01000e04 	movi	r4,56
    c39c:	2080a316 	blt	r4,r2,c62c <__subdf3+0x3c4>
    c3a0:	010007c4 	movi	r4,31
    c3a4:	2080c616 	blt	r4,r2,c6c0 <__subdf3+0x458>
    c3a8:	01000804 	movi	r4,32
    c3ac:	2089c83a 	sub	r4,r4,r2
    c3b0:	2910983a 	sll	r8,r5,r4
    c3b4:	308ed83a 	srl	r7,r6,r2
    c3b8:	3108983a 	sll	r4,r6,r4
    c3bc:	2884d83a 	srl	r2,r5,r2
    c3c0:	41ccb03a 	or	r6,r8,r7
    c3c4:	2008c03a 	cmpne	r4,r4,zero
    c3c8:	310cb03a 	or	r6,r6,r4
    c3cc:	898dc83a 	sub	r6,r17,r6
    c3d0:	89a3803a 	cmpltu	r17,r17,r6
    c3d4:	1887c83a 	sub	r3,r3,r2
    c3d8:	1c47c83a 	sub	r3,r3,r17
    c3dc:	3023883a 	mov	r17,r6
    c3e0:	1880202c 	andhi	r2,r3,128
    c3e4:	10002326 	beq	r2,zero,c474 <__subdf3+0x20c>
    c3e8:	04c02034 	movhi	r19,128
    c3ec:	9cffffc4 	addi	r19,r19,-1
    c3f0:	1ce6703a 	and	r19,r3,r19
    c3f4:	98007a26 	beq	r19,zero,c5e0 <__subdf3+0x378>
    c3f8:	9809883a 	mov	r4,r19
    c3fc:	000cd680 	call	cd68 <__clzsi2>
    c400:	113ffe04 	addi	r4,r2,-8
    c404:	00c007c4 	movi	r3,31
    c408:	19007b16 	blt	r3,r4,c5f8 <__subdf3+0x390>
    c40c:	00800804 	movi	r2,32
    c410:	1105c83a 	sub	r2,r2,r4
    c414:	8884d83a 	srl	r2,r17,r2
    c418:	9906983a 	sll	r3,r19,r4
    c41c:	8922983a 	sll	r17,r17,r4
    c420:	10c4b03a 	or	r2,r2,r3
    c424:	24007816 	blt	r4,r16,c608 <__subdf3+0x3a0>
    c428:	2421c83a 	sub	r16,r4,r16
    c42c:	80c00044 	addi	r3,r16,1
    c430:	010007c4 	movi	r4,31
    c434:	20c09516 	blt	r4,r3,c68c <__subdf3+0x424>
    c438:	01400804 	movi	r5,32
    c43c:	28cbc83a 	sub	r5,r5,r3
    c440:	88c8d83a 	srl	r4,r17,r3
    c444:	8962983a 	sll	r17,r17,r5
    c448:	114a983a 	sll	r5,r2,r5
    c44c:	10c6d83a 	srl	r3,r2,r3
    c450:	8804c03a 	cmpne	r2,r17,zero
    c454:	290ab03a 	or	r5,r5,r4
    c458:	28a2b03a 	or	r17,r5,r2
    c45c:	0021883a 	mov	r16,zero
    c460:	003fa206 	br	c2ec <__subdf3+0x84>
    c464:	2090b03a 	or	r8,r4,r2
    c468:	40018e26 	beq	r8,zero,caa4 <__subdf3+0x83c>
    c46c:	1007883a 	mov	r3,r2
    c470:	2023883a 	mov	r17,r4
    c474:	888001cc 	andi	r2,r17,7
    c478:	103f9e1e 	bne	r2,zero,c2f4 <__subdf3+0x8c>
    c47c:	1804977a 	slli	r2,r3,29
    c480:	8822d0fa 	srli	r17,r17,3
    c484:	1810d0fa 	srli	r8,r3,3
    c488:	9100004c 	andi	r4,r18,1
    c48c:	1444b03a 	or	r2,r2,r17
    c490:	00c1ffc4 	movi	r3,2047
    c494:	80c02826 	beq	r16,r3,c538 <__subdf3+0x2d0>
    c498:	01400434 	movhi	r5,16
    c49c:	297fffc4 	addi	r5,r5,-1
    c4a0:	80e0703a 	and	r16,r16,r3
    c4a4:	414a703a 	and	r5,r8,r5
    c4a8:	003fa806 	br	c34c <__subdf3+0xe4>
    c4ac:	0080630e 	bge	zero,r2,c63c <__subdf3+0x3d4>
    c4b0:	48003026 	beq	r9,zero,c574 <__subdf3+0x30c>
    c4b4:	0101ffc4 	movi	r4,2047
    c4b8:	813f8c26 	beq	r16,r4,c2ec <__subdf3+0x84>
    c4bc:	29402034 	orhi	r5,r5,128
    c4c0:	01000e04 	movi	r4,56
    c4c4:	2080a90e 	bge	r4,r2,c76c <__subdf3+0x504>
    c4c8:	298cb03a 	or	r6,r5,r6
    c4cc:	3012c03a 	cmpne	r9,r6,zero
    c4d0:	0005883a 	mov	r2,zero
    c4d4:	4c53883a 	add	r9,r9,r17
    c4d8:	4c63803a 	cmpltu	r17,r9,r17
    c4dc:	10c7883a 	add	r3,r2,r3
    c4e0:	88c7883a 	add	r3,r17,r3
    c4e4:	4823883a 	mov	r17,r9
    c4e8:	1880202c 	andhi	r2,r3,128
    c4ec:	1000d026 	beq	r2,zero,c830 <__subdf3+0x5c8>
    c4f0:	84000044 	addi	r16,r16,1
    c4f4:	0081ffc4 	movi	r2,2047
    c4f8:	8080fe26 	beq	r16,r2,c8f4 <__subdf3+0x68c>
    c4fc:	00bfe034 	movhi	r2,65408
    c500:	10bfffc4 	addi	r2,r2,-1
    c504:	1886703a 	and	r3,r3,r2
    c508:	880ad07a 	srli	r5,r17,1
    c50c:	180497fa 	slli	r2,r3,31
    c510:	8900004c 	andi	r4,r17,1
    c514:	2922b03a 	or	r17,r5,r4
    c518:	1806d07a 	srli	r3,r3,1
    c51c:	1462b03a 	or	r17,r2,r17
    c520:	3825883a 	mov	r18,r7
    c524:	003f7106 	br	c2ec <__subdf3+0x84>
    c528:	2984b03a 	or	r2,r5,r6
    c52c:	103f6826 	beq	r2,zero,c2d0 <__subdf3+0x68>
    c530:	39c03fcc 	andi	r7,r7,255
    c534:	003f6706 	br	c2d4 <__subdf3+0x6c>
    c538:	4086b03a 	or	r3,r8,r2
    c53c:	18015226 	beq	r3,zero,ca88 <__subdf3+0x820>
    c540:	00c00434 	movhi	r3,16
    c544:	41400234 	orhi	r5,r8,8
    c548:	18ffffc4 	addi	r3,r3,-1
    c54c:	28ca703a 	and	r5,r5,r3
    c550:	003f7e06 	br	c34c <__subdf3+0xe4>
    c554:	10bfffc4 	addi	r2,r2,-1
    c558:	1000491e 	bne	r2,zero,c680 <__subdf3+0x418>
    c55c:	898fc83a 	sub	r7,r17,r6
    c560:	89e3803a 	cmpltu	r17,r17,r7
    c564:	1947c83a 	sub	r3,r3,r5
    c568:	1c47c83a 	sub	r3,r3,r17
    c56c:	3823883a 	mov	r17,r7
    c570:	003f9b06 	br	c3e0 <__subdf3+0x178>
    c574:	2988b03a 	or	r4,r5,r6
    c578:	203f5c26 	beq	r4,zero,c2ec <__subdf3+0x84>
    c57c:	10bfffc4 	addi	r2,r2,-1
    c580:	1000931e 	bne	r2,zero,c7d0 <__subdf3+0x568>
    c584:	898d883a 	add	r6,r17,r6
    c588:	3463803a 	cmpltu	r17,r6,r17
    c58c:	1947883a 	add	r3,r3,r5
    c590:	88c7883a 	add	r3,r17,r3
    c594:	3023883a 	mov	r17,r6
    c598:	003fd306 	br	c4e8 <__subdf3+0x280>
    c59c:	1000541e 	bne	r2,zero,c6f0 <__subdf3+0x488>
    c5a0:	80800044 	addi	r2,r16,1
    c5a4:	1081ffcc 	andi	r2,r2,2047
    c5a8:	01000044 	movi	r4,1
    c5ac:	2080a20e 	bge	r4,r2,c838 <__subdf3+0x5d0>
    c5b0:	8989c83a 	sub	r4,r17,r6
    c5b4:	8905803a 	cmpltu	r2,r17,r4
    c5b8:	1967c83a 	sub	r19,r3,r5
    c5bc:	98a7c83a 	sub	r19,r19,r2
    c5c0:	9880202c 	andhi	r2,r19,128
    c5c4:	10006326 	beq	r2,zero,c754 <__subdf3+0x4ec>
    c5c8:	3463c83a 	sub	r17,r6,r17
    c5cc:	28c7c83a 	sub	r3,r5,r3
    c5d0:	344d803a 	cmpltu	r6,r6,r17
    c5d4:	19a7c83a 	sub	r19,r3,r6
    c5d8:	3825883a 	mov	r18,r7
    c5dc:	983f861e 	bne	r19,zero,c3f8 <__subdf3+0x190>
    c5e0:	8809883a 	mov	r4,r17
    c5e4:	000cd680 	call	cd68 <__clzsi2>
    c5e8:	10800804 	addi	r2,r2,32
    c5ec:	113ffe04 	addi	r4,r2,-8
    c5f0:	00c007c4 	movi	r3,31
    c5f4:	193f850e 	bge	r3,r4,c40c <__subdf3+0x1a4>
    c5f8:	10bff604 	addi	r2,r2,-40
    c5fc:	8884983a 	sll	r2,r17,r2
    c600:	0023883a 	mov	r17,zero
    c604:	243f880e 	bge	r4,r16,c428 <__subdf3+0x1c0>
    c608:	00ffe034 	movhi	r3,65408
    c60c:	18ffffc4 	addi	r3,r3,-1
    c610:	8121c83a 	sub	r16,r16,r4
    c614:	10c6703a 	and	r3,r2,r3
    c618:	003f3406 	br	c2ec <__subdf3+0x84>
    c61c:	9100004c 	andi	r4,r18,1
    c620:	000b883a 	mov	r5,zero
    c624:	0005883a 	mov	r2,zero
    c628:	003f4806 	br	c34c <__subdf3+0xe4>
    c62c:	298cb03a 	or	r6,r5,r6
    c630:	300cc03a 	cmpne	r6,r6,zero
    c634:	0005883a 	mov	r2,zero
    c638:	003f6406 	br	c3cc <__subdf3+0x164>
    c63c:	10009a1e 	bne	r2,zero,c8a8 <__subdf3+0x640>
    c640:	82400044 	addi	r9,r16,1
    c644:	4881ffcc 	andi	r2,r9,2047
    c648:	02800044 	movi	r10,1
    c64c:	5080670e 	bge	r10,r2,c7ec <__subdf3+0x584>
    c650:	0081ffc4 	movi	r2,2047
    c654:	4880af26 	beq	r9,r2,c914 <__subdf3+0x6ac>
    c658:	898d883a 	add	r6,r17,r6
    c65c:	1945883a 	add	r2,r3,r5
    c660:	3447803a 	cmpltu	r3,r6,r17
    c664:	1887883a 	add	r3,r3,r2
    c668:	182297fa 	slli	r17,r3,31
    c66c:	300cd07a 	srli	r6,r6,1
    c670:	1806d07a 	srli	r3,r3,1
    c674:	4821883a 	mov	r16,r9
    c678:	89a2b03a 	or	r17,r17,r6
    c67c:	003f1b06 	br	c2ec <__subdf3+0x84>
    c680:	0101ffc4 	movi	r4,2047
    c684:	813f441e 	bne	r16,r4,c398 <__subdf3+0x130>
    c688:	003f1806 	br	c2ec <__subdf3+0x84>
    c68c:	843ff844 	addi	r16,r16,-31
    c690:	01400804 	movi	r5,32
    c694:	1408d83a 	srl	r4,r2,r16
    c698:	19405026 	beq	r3,r5,c7dc <__subdf3+0x574>
    c69c:	01401004 	movi	r5,64
    c6a0:	28c7c83a 	sub	r3,r5,r3
    c6a4:	10c4983a 	sll	r2,r2,r3
    c6a8:	88a2b03a 	or	r17,r17,r2
    c6ac:	8822c03a 	cmpne	r17,r17,zero
    c6b0:	2462b03a 	or	r17,r4,r17
    c6b4:	0007883a 	mov	r3,zero
    c6b8:	0021883a 	mov	r16,zero
    c6bc:	003f6d06 	br	c474 <__subdf3+0x20c>
    c6c0:	11fff804 	addi	r7,r2,-32
    c6c4:	01000804 	movi	r4,32
    c6c8:	29ced83a 	srl	r7,r5,r7
    c6cc:	11004526 	beq	r2,r4,c7e4 <__subdf3+0x57c>
    c6d0:	01001004 	movi	r4,64
    c6d4:	2089c83a 	sub	r4,r4,r2
    c6d8:	2904983a 	sll	r2,r5,r4
    c6dc:	118cb03a 	or	r6,r2,r6
    c6e0:	300cc03a 	cmpne	r6,r6,zero
    c6e4:	398cb03a 	or	r6,r7,r6
    c6e8:	0005883a 	mov	r2,zero
    c6ec:	003f3706 	br	c3cc <__subdf3+0x164>
    c6f0:	80002a26 	beq	r16,zero,c79c <__subdf3+0x534>
    c6f4:	0101ffc4 	movi	r4,2047
    c6f8:	49006626 	beq	r9,r4,c894 <__subdf3+0x62c>
    c6fc:	0085c83a 	sub	r2,zero,r2
    c700:	18c02034 	orhi	r3,r3,128
    c704:	01000e04 	movi	r4,56
    c708:	20807e16 	blt	r4,r2,c904 <__subdf3+0x69c>
    c70c:	010007c4 	movi	r4,31
    c710:	2080e716 	blt	r4,r2,cab0 <__subdf3+0x848>
    c714:	01000804 	movi	r4,32
    c718:	2089c83a 	sub	r4,r4,r2
    c71c:	1914983a 	sll	r10,r3,r4
    c720:	8890d83a 	srl	r8,r17,r2
    c724:	8908983a 	sll	r4,r17,r4
    c728:	1884d83a 	srl	r2,r3,r2
    c72c:	5222b03a 	or	r17,r10,r8
    c730:	2006c03a 	cmpne	r3,r4,zero
    c734:	88e2b03a 	or	r17,r17,r3
    c738:	3463c83a 	sub	r17,r6,r17
    c73c:	2885c83a 	sub	r2,r5,r2
    c740:	344d803a 	cmpltu	r6,r6,r17
    c744:	1187c83a 	sub	r3,r2,r6
    c748:	4821883a 	mov	r16,r9
    c74c:	3825883a 	mov	r18,r7
    c750:	003f2306 	br	c3e0 <__subdf3+0x178>
    c754:	24d0b03a 	or	r8,r4,r19
    c758:	40001b1e 	bne	r8,zero,c7c8 <__subdf3+0x560>
    c75c:	0005883a 	mov	r2,zero
    c760:	0009883a 	mov	r4,zero
    c764:	0021883a 	mov	r16,zero
    c768:	003f4906 	br	c490 <__subdf3+0x228>
    c76c:	010007c4 	movi	r4,31
    c770:	20803a16 	blt	r4,r2,c85c <__subdf3+0x5f4>
    c774:	01000804 	movi	r4,32
    c778:	2089c83a 	sub	r4,r4,r2
    c77c:	2912983a 	sll	r9,r5,r4
    c780:	3090d83a 	srl	r8,r6,r2
    c784:	3108983a 	sll	r4,r6,r4
    c788:	2884d83a 	srl	r2,r5,r2
    c78c:	4a12b03a 	or	r9,r9,r8
    c790:	2008c03a 	cmpne	r4,r4,zero
    c794:	4912b03a 	or	r9,r9,r4
    c798:	003f4e06 	br	c4d4 <__subdf3+0x26c>
    c79c:	1c48b03a 	or	r4,r3,r17
    c7a0:	20003c26 	beq	r4,zero,c894 <__subdf3+0x62c>
    c7a4:	0084303a 	nor	r2,zero,r2
    c7a8:	1000381e 	bne	r2,zero,c88c <__subdf3+0x624>
    c7ac:	3463c83a 	sub	r17,r6,r17
    c7b0:	28c5c83a 	sub	r2,r5,r3
    c7b4:	344d803a 	cmpltu	r6,r6,r17
    c7b8:	1187c83a 	sub	r3,r2,r6
    c7bc:	4821883a 	mov	r16,r9
    c7c0:	3825883a 	mov	r18,r7
    c7c4:	003f0606 	br	c3e0 <__subdf3+0x178>
    c7c8:	2023883a 	mov	r17,r4
    c7cc:	003f0906 	br	c3f4 <__subdf3+0x18c>
    c7d0:	0101ffc4 	movi	r4,2047
    c7d4:	813f3a1e 	bne	r16,r4,c4c0 <__subdf3+0x258>
    c7d8:	003ec406 	br	c2ec <__subdf3+0x84>
    c7dc:	0005883a 	mov	r2,zero
    c7e0:	003fb106 	br	c6a8 <__subdf3+0x440>
    c7e4:	0005883a 	mov	r2,zero
    c7e8:	003fbc06 	br	c6dc <__subdf3+0x474>
    c7ec:	1c44b03a 	or	r2,r3,r17
    c7f0:	80008e1e 	bne	r16,zero,ca2c <__subdf3+0x7c4>
    c7f4:	1000c826 	beq	r2,zero,cb18 <__subdf3+0x8b0>
    c7f8:	2984b03a 	or	r2,r5,r6
    c7fc:	103ebb26 	beq	r2,zero,c2ec <__subdf3+0x84>
    c800:	8989883a 	add	r4,r17,r6
    c804:	1945883a 	add	r2,r3,r5
    c808:	2447803a 	cmpltu	r3,r4,r17
    c80c:	1887883a 	add	r3,r3,r2
    c810:	1880202c 	andhi	r2,r3,128
    c814:	2023883a 	mov	r17,r4
    c818:	103f1626 	beq	r2,zero,c474 <__subdf3+0x20c>
    c81c:	00bfe034 	movhi	r2,65408
    c820:	10bfffc4 	addi	r2,r2,-1
    c824:	5021883a 	mov	r16,r10
    c828:	1886703a 	and	r3,r3,r2
    c82c:	003eaf06 	br	c2ec <__subdf3+0x84>
    c830:	3825883a 	mov	r18,r7
    c834:	003f0f06 	br	c474 <__subdf3+0x20c>
    c838:	1c44b03a 	or	r2,r3,r17
    c83c:	8000251e 	bne	r16,zero,c8d4 <__subdf3+0x66c>
    c840:	1000661e 	bne	r2,zero,c9dc <__subdf3+0x774>
    c844:	2990b03a 	or	r8,r5,r6
    c848:	40009626 	beq	r8,zero,caa4 <__subdf3+0x83c>
    c84c:	2807883a 	mov	r3,r5
    c850:	3023883a 	mov	r17,r6
    c854:	3825883a 	mov	r18,r7
    c858:	003ea406 	br	c2ec <__subdf3+0x84>
    c85c:	127ff804 	addi	r9,r2,-32
    c860:	01000804 	movi	r4,32
    c864:	2a52d83a 	srl	r9,r5,r9
    c868:	11008c26 	beq	r2,r4,ca9c <__subdf3+0x834>
    c86c:	01001004 	movi	r4,64
    c870:	2085c83a 	sub	r2,r4,r2
    c874:	2884983a 	sll	r2,r5,r2
    c878:	118cb03a 	or	r6,r2,r6
    c87c:	300cc03a 	cmpne	r6,r6,zero
    c880:	4992b03a 	or	r9,r9,r6
    c884:	0005883a 	mov	r2,zero
    c888:	003f1206 	br	c4d4 <__subdf3+0x26c>
    c88c:	0101ffc4 	movi	r4,2047
    c890:	493f9c1e 	bne	r9,r4,c704 <__subdf3+0x49c>
    c894:	2807883a 	mov	r3,r5
    c898:	3023883a 	mov	r17,r6
    c89c:	4821883a 	mov	r16,r9
    c8a0:	3825883a 	mov	r18,r7
    c8a4:	003e9106 	br	c2ec <__subdf3+0x84>
    c8a8:	80001f1e 	bne	r16,zero,c928 <__subdf3+0x6c0>
    c8ac:	1c48b03a 	or	r4,r3,r17
    c8b0:	20005a26 	beq	r4,zero,ca1c <__subdf3+0x7b4>
    c8b4:	0084303a 	nor	r2,zero,r2
    c8b8:	1000561e 	bne	r2,zero,ca14 <__subdf3+0x7ac>
    c8bc:	89a3883a 	add	r17,r17,r6
    c8c0:	1945883a 	add	r2,r3,r5
    c8c4:	898d803a 	cmpltu	r6,r17,r6
    c8c8:	3087883a 	add	r3,r6,r2
    c8cc:	4821883a 	mov	r16,r9
    c8d0:	003f0506 	br	c4e8 <__subdf3+0x280>
    c8d4:	10002b1e 	bne	r2,zero,c984 <__subdf3+0x71c>
    c8d8:	2984b03a 	or	r2,r5,r6
    c8dc:	10008026 	beq	r2,zero,cae0 <__subdf3+0x878>
    c8e0:	2807883a 	mov	r3,r5
    c8e4:	3023883a 	mov	r17,r6
    c8e8:	3825883a 	mov	r18,r7
    c8ec:	0401ffc4 	movi	r16,2047
    c8f0:	003e7e06 	br	c2ec <__subdf3+0x84>
    c8f4:	3809883a 	mov	r4,r7
    c8f8:	0011883a 	mov	r8,zero
    c8fc:	0005883a 	mov	r2,zero
    c900:	003ee306 	br	c490 <__subdf3+0x228>
    c904:	1c62b03a 	or	r17,r3,r17
    c908:	8822c03a 	cmpne	r17,r17,zero
    c90c:	0005883a 	mov	r2,zero
    c910:	003f8906 	br	c738 <__subdf3+0x4d0>
    c914:	3809883a 	mov	r4,r7
    c918:	4821883a 	mov	r16,r9
    c91c:	0011883a 	mov	r8,zero
    c920:	0005883a 	mov	r2,zero
    c924:	003eda06 	br	c490 <__subdf3+0x228>
    c928:	0101ffc4 	movi	r4,2047
    c92c:	49003b26 	beq	r9,r4,ca1c <__subdf3+0x7b4>
    c930:	0085c83a 	sub	r2,zero,r2
    c934:	18c02034 	orhi	r3,r3,128
    c938:	01000e04 	movi	r4,56
    c93c:	20806e16 	blt	r4,r2,caf8 <__subdf3+0x890>
    c940:	010007c4 	movi	r4,31
    c944:	20807716 	blt	r4,r2,cb24 <__subdf3+0x8bc>
    c948:	01000804 	movi	r4,32
    c94c:	2089c83a 	sub	r4,r4,r2
    c950:	1914983a 	sll	r10,r3,r4
    c954:	8890d83a 	srl	r8,r17,r2
    c958:	8908983a 	sll	r4,r17,r4
    c95c:	1884d83a 	srl	r2,r3,r2
    c960:	5222b03a 	or	r17,r10,r8
    c964:	2006c03a 	cmpne	r3,r4,zero
    c968:	88e2b03a 	or	r17,r17,r3
    c96c:	89a3883a 	add	r17,r17,r6
    c970:	1145883a 	add	r2,r2,r5
    c974:	898d803a 	cmpltu	r6,r17,r6
    c978:	3087883a 	add	r3,r6,r2
    c97c:	4821883a 	mov	r16,r9
    c980:	003ed906 	br	c4e8 <__subdf3+0x280>
    c984:	2984b03a 	or	r2,r5,r6
    c988:	10004226 	beq	r2,zero,ca94 <__subdf3+0x82c>
    c98c:	1808d0fa 	srli	r4,r3,3
    c990:	8822d0fa 	srli	r17,r17,3
    c994:	1806977a 	slli	r3,r3,29
    c998:	2080022c 	andhi	r2,r4,8
    c99c:	1c62b03a 	or	r17,r3,r17
    c9a0:	10000826 	beq	r2,zero,c9c4 <__subdf3+0x75c>
    c9a4:	2812d0fa 	srli	r9,r5,3
    c9a8:	4880022c 	andhi	r2,r9,8
    c9ac:	1000051e 	bne	r2,zero,c9c4 <__subdf3+0x75c>
    c9b0:	300cd0fa 	srli	r6,r6,3
    c9b4:	2804977a 	slli	r2,r5,29
    c9b8:	4809883a 	mov	r4,r9
    c9bc:	3825883a 	mov	r18,r7
    c9c0:	11a2b03a 	or	r17,r2,r6
    c9c4:	8806d77a 	srli	r3,r17,29
    c9c8:	200890fa 	slli	r4,r4,3
    c9cc:	882290fa 	slli	r17,r17,3
    c9d0:	0401ffc4 	movi	r16,2047
    c9d4:	1906b03a 	or	r3,r3,r4
    c9d8:	003e4406 	br	c2ec <__subdf3+0x84>
    c9dc:	2984b03a 	or	r2,r5,r6
    c9e0:	103e4226 	beq	r2,zero,c2ec <__subdf3+0x84>
    c9e4:	8989c83a 	sub	r4,r17,r6
    c9e8:	8911803a 	cmpltu	r8,r17,r4
    c9ec:	1945c83a 	sub	r2,r3,r5
    c9f0:	1205c83a 	sub	r2,r2,r8
    c9f4:	1200202c 	andhi	r8,r2,128
    c9f8:	403e9a26 	beq	r8,zero,c464 <__subdf3+0x1fc>
    c9fc:	3463c83a 	sub	r17,r6,r17
    ca00:	28c5c83a 	sub	r2,r5,r3
    ca04:	344d803a 	cmpltu	r6,r6,r17
    ca08:	1187c83a 	sub	r3,r2,r6
    ca0c:	3825883a 	mov	r18,r7
    ca10:	003e3606 	br	c2ec <__subdf3+0x84>
    ca14:	0101ffc4 	movi	r4,2047
    ca18:	493fc71e 	bne	r9,r4,c938 <__subdf3+0x6d0>
    ca1c:	2807883a 	mov	r3,r5
    ca20:	3023883a 	mov	r17,r6
    ca24:	4821883a 	mov	r16,r9
    ca28:	003e3006 	br	c2ec <__subdf3+0x84>
    ca2c:	10003626 	beq	r2,zero,cb08 <__subdf3+0x8a0>
    ca30:	2984b03a 	or	r2,r5,r6
    ca34:	10001726 	beq	r2,zero,ca94 <__subdf3+0x82c>
    ca38:	1808d0fa 	srli	r4,r3,3
    ca3c:	8822d0fa 	srli	r17,r17,3
    ca40:	1806977a 	slli	r3,r3,29
    ca44:	2080022c 	andhi	r2,r4,8
    ca48:	1c62b03a 	or	r17,r3,r17
    ca4c:	10000726 	beq	r2,zero,ca6c <__subdf3+0x804>
    ca50:	2812d0fa 	srli	r9,r5,3
    ca54:	4880022c 	andhi	r2,r9,8
    ca58:	1000041e 	bne	r2,zero,ca6c <__subdf3+0x804>
    ca5c:	300cd0fa 	srli	r6,r6,3
    ca60:	2804977a 	slli	r2,r5,29
    ca64:	4809883a 	mov	r4,r9
    ca68:	11a2b03a 	or	r17,r2,r6
    ca6c:	8806d77a 	srli	r3,r17,29
    ca70:	200890fa 	slli	r4,r4,3
    ca74:	882290fa 	slli	r17,r17,3
    ca78:	3825883a 	mov	r18,r7
    ca7c:	1906b03a 	or	r3,r3,r4
    ca80:	0401ffc4 	movi	r16,2047
    ca84:	003e1906 	br	c2ec <__subdf3+0x84>
    ca88:	000b883a 	mov	r5,zero
    ca8c:	0005883a 	mov	r2,zero
    ca90:	003e2e06 	br	c34c <__subdf3+0xe4>
    ca94:	0401ffc4 	movi	r16,2047
    ca98:	003e1406 	br	c2ec <__subdf3+0x84>
    ca9c:	0005883a 	mov	r2,zero
    caa0:	003f7506 	br	c878 <__subdf3+0x610>
    caa4:	0005883a 	mov	r2,zero
    caa8:	0009883a 	mov	r4,zero
    caac:	003e7806 	br	c490 <__subdf3+0x228>
    cab0:	123ff804 	addi	r8,r2,-32
    cab4:	01000804 	movi	r4,32
    cab8:	1a10d83a 	srl	r8,r3,r8
    cabc:	11002526 	beq	r2,r4,cb54 <__subdf3+0x8ec>
    cac0:	01001004 	movi	r4,64
    cac4:	2085c83a 	sub	r2,r4,r2
    cac8:	1884983a 	sll	r2,r3,r2
    cacc:	1444b03a 	or	r2,r2,r17
    cad0:	1004c03a 	cmpne	r2,r2,zero
    cad4:	40a2b03a 	or	r17,r8,r2
    cad8:	0005883a 	mov	r2,zero
    cadc:	003f1606 	br	c738 <__subdf3+0x4d0>
    cae0:	02000434 	movhi	r8,16
    cae4:	0009883a 	mov	r4,zero
    cae8:	423fffc4 	addi	r8,r8,-1
    caec:	00bfffc4 	movi	r2,-1
    caf0:	0401ffc4 	movi	r16,2047
    caf4:	003e6606 	br	c490 <__subdf3+0x228>
    caf8:	1c62b03a 	or	r17,r3,r17
    cafc:	8822c03a 	cmpne	r17,r17,zero
    cb00:	0005883a 	mov	r2,zero
    cb04:	003f9906 	br	c96c <__subdf3+0x704>
    cb08:	2807883a 	mov	r3,r5
    cb0c:	3023883a 	mov	r17,r6
    cb10:	0401ffc4 	movi	r16,2047
    cb14:	003df506 	br	c2ec <__subdf3+0x84>
    cb18:	2807883a 	mov	r3,r5
    cb1c:	3023883a 	mov	r17,r6
    cb20:	003df206 	br	c2ec <__subdf3+0x84>
    cb24:	123ff804 	addi	r8,r2,-32
    cb28:	01000804 	movi	r4,32
    cb2c:	1a10d83a 	srl	r8,r3,r8
    cb30:	11000a26 	beq	r2,r4,cb5c <__subdf3+0x8f4>
    cb34:	01001004 	movi	r4,64
    cb38:	2085c83a 	sub	r2,r4,r2
    cb3c:	1884983a 	sll	r2,r3,r2
    cb40:	1444b03a 	or	r2,r2,r17
    cb44:	1004c03a 	cmpne	r2,r2,zero
    cb48:	40a2b03a 	or	r17,r8,r2
    cb4c:	0005883a 	mov	r2,zero
    cb50:	003f8606 	br	c96c <__subdf3+0x704>
    cb54:	0005883a 	mov	r2,zero
    cb58:	003fdc06 	br	cacc <__subdf3+0x864>
    cb5c:	0005883a 	mov	r2,zero
    cb60:	003ff706 	br	cb40 <__subdf3+0x8d8>

0000cb64 <__fixdfsi>:
    cb64:	280cd53a 	srli	r6,r5,20
    cb68:	00c00434 	movhi	r3,16
    cb6c:	18ffffc4 	addi	r3,r3,-1
    cb70:	3181ffcc 	andi	r6,r6,2047
    cb74:	01c0ff84 	movi	r7,1022
    cb78:	28c6703a 	and	r3,r5,r3
    cb7c:	280ad7fa 	srli	r5,r5,31
    cb80:	3980120e 	bge	r7,r6,cbcc <__fixdfsi+0x68>
    cb84:	00810744 	movi	r2,1053
    cb88:	11800c16 	blt	r2,r6,cbbc <__fixdfsi+0x58>
    cb8c:	00810cc4 	movi	r2,1075
    cb90:	1185c83a 	sub	r2,r2,r6
    cb94:	01c007c4 	movi	r7,31
    cb98:	18c00434 	orhi	r3,r3,16
    cb9c:	38800d16 	blt	r7,r2,cbd4 <__fixdfsi+0x70>
    cba0:	31befb44 	addi	r6,r6,-1043
    cba4:	2084d83a 	srl	r2,r4,r2
    cba8:	1986983a 	sll	r3,r3,r6
    cbac:	1884b03a 	or	r2,r3,r2
    cbb0:	28000726 	beq	r5,zero,cbd0 <__fixdfsi+0x6c>
    cbb4:	0085c83a 	sub	r2,zero,r2
    cbb8:	f800283a 	ret
    cbbc:	00a00034 	movhi	r2,32768
    cbc0:	10bfffc4 	addi	r2,r2,-1
    cbc4:	2885883a 	add	r2,r5,r2
    cbc8:	f800283a 	ret
    cbcc:	0005883a 	mov	r2,zero
    cbd0:	f800283a 	ret
    cbd4:	008104c4 	movi	r2,1043
    cbd8:	1185c83a 	sub	r2,r2,r6
    cbdc:	1884d83a 	srl	r2,r3,r2
    cbe0:	003ff306 	br	cbb0 <__fixdfsi+0x4c>

0000cbe4 <__floatsidf>:
    cbe4:	defffd04 	addi	sp,sp,-12
    cbe8:	dfc00215 	stw	ra,8(sp)
    cbec:	dc400115 	stw	r17,4(sp)
    cbf0:	dc000015 	stw	r16,0(sp)
    cbf4:	20002b26 	beq	r4,zero,cca4 <__floatsidf+0xc0>
    cbf8:	2023883a 	mov	r17,r4
    cbfc:	2020d7fa 	srli	r16,r4,31
    cc00:	20002d16 	blt	r4,zero,ccb8 <__floatsidf+0xd4>
    cc04:	8809883a 	mov	r4,r17
    cc08:	000cd680 	call	cd68 <__clzsi2>
    cc0c:	01410784 	movi	r5,1054
    cc10:	288bc83a 	sub	r5,r5,r2
    cc14:	01010cc4 	movi	r4,1075
    cc18:	2149c83a 	sub	r4,r4,r5
    cc1c:	00c007c4 	movi	r3,31
    cc20:	1900160e 	bge	r3,r4,cc7c <__floatsidf+0x98>
    cc24:	00c104c4 	movi	r3,1043
    cc28:	1947c83a 	sub	r3,r3,r5
    cc2c:	88c6983a 	sll	r3,r17,r3
    cc30:	00800434 	movhi	r2,16
    cc34:	10bfffc4 	addi	r2,r2,-1
    cc38:	1886703a 	and	r3,r3,r2
    cc3c:	2941ffcc 	andi	r5,r5,2047
    cc40:	800d883a 	mov	r6,r16
    cc44:	0005883a 	mov	r2,zero
    cc48:	280a953a 	slli	r5,r5,20
    cc4c:	31803fcc 	andi	r6,r6,255
    cc50:	01000434 	movhi	r4,16
    cc54:	300c97fa 	slli	r6,r6,31
    cc58:	213fffc4 	addi	r4,r4,-1
    cc5c:	1906703a 	and	r3,r3,r4
    cc60:	1946b03a 	or	r3,r3,r5
    cc64:	1986b03a 	or	r3,r3,r6
    cc68:	dfc00217 	ldw	ra,8(sp)
    cc6c:	dc400117 	ldw	r17,4(sp)
    cc70:	dc000017 	ldw	r16,0(sp)
    cc74:	dec00304 	addi	sp,sp,12
    cc78:	f800283a 	ret
    cc7c:	00c002c4 	movi	r3,11
    cc80:	1887c83a 	sub	r3,r3,r2
    cc84:	88c6d83a 	srl	r3,r17,r3
    cc88:	8904983a 	sll	r2,r17,r4
    cc8c:	01000434 	movhi	r4,16
    cc90:	213fffc4 	addi	r4,r4,-1
    cc94:	2941ffcc 	andi	r5,r5,2047
    cc98:	1906703a 	and	r3,r3,r4
    cc9c:	800d883a 	mov	r6,r16
    cca0:	003fe906 	br	cc48 <__floatsidf+0x64>
    cca4:	000d883a 	mov	r6,zero
    cca8:	000b883a 	mov	r5,zero
    ccac:	0007883a 	mov	r3,zero
    ccb0:	0005883a 	mov	r2,zero
    ccb4:	003fe406 	br	cc48 <__floatsidf+0x64>
    ccb8:	0123c83a 	sub	r17,zero,r4
    ccbc:	003fd106 	br	cc04 <__floatsidf+0x20>

0000ccc0 <__floatunsidf>:
    ccc0:	defffe04 	addi	sp,sp,-8
    ccc4:	dc000015 	stw	r16,0(sp)
    ccc8:	dfc00115 	stw	ra,4(sp)
    cccc:	2021883a 	mov	r16,r4
    ccd0:	20002226 	beq	r4,zero,cd5c <__floatunsidf+0x9c>
    ccd4:	000cd680 	call	cd68 <__clzsi2>
    ccd8:	01010784 	movi	r4,1054
    ccdc:	2089c83a 	sub	r4,r4,r2
    cce0:	01810cc4 	movi	r6,1075
    cce4:	310dc83a 	sub	r6,r6,r4
    cce8:	00c007c4 	movi	r3,31
    ccec:	1980120e 	bge	r3,r6,cd38 <__floatunsidf+0x78>
    ccf0:	00c104c4 	movi	r3,1043
    ccf4:	1907c83a 	sub	r3,r3,r4
    ccf8:	80ca983a 	sll	r5,r16,r3
    ccfc:	00800434 	movhi	r2,16
    cd00:	10bfffc4 	addi	r2,r2,-1
    cd04:	2101ffcc 	andi	r4,r4,2047
    cd08:	0021883a 	mov	r16,zero
    cd0c:	288a703a 	and	r5,r5,r2
    cd10:	2008953a 	slli	r4,r4,20
    cd14:	00c00434 	movhi	r3,16
    cd18:	18ffffc4 	addi	r3,r3,-1
    cd1c:	28c6703a 	and	r3,r5,r3
    cd20:	8005883a 	mov	r2,r16
    cd24:	1906b03a 	or	r3,r3,r4
    cd28:	dfc00117 	ldw	ra,4(sp)
    cd2c:	dc000017 	ldw	r16,0(sp)
    cd30:	dec00204 	addi	sp,sp,8
    cd34:	f800283a 	ret
    cd38:	00c002c4 	movi	r3,11
    cd3c:	188bc83a 	sub	r5,r3,r2
    cd40:	814ad83a 	srl	r5,r16,r5
    cd44:	00c00434 	movhi	r3,16
    cd48:	18ffffc4 	addi	r3,r3,-1
    cd4c:	81a0983a 	sll	r16,r16,r6
    cd50:	2101ffcc 	andi	r4,r4,2047
    cd54:	28ca703a 	and	r5,r5,r3
    cd58:	003fed06 	br	cd10 <__floatunsidf+0x50>
    cd5c:	0009883a 	mov	r4,zero
    cd60:	000b883a 	mov	r5,zero
    cd64:	003fea06 	br	cd10 <__floatunsidf+0x50>

0000cd68 <__clzsi2>:
    cd68:	00bfffd4 	movui	r2,65535
    cd6c:	11000536 	bltu	r2,r4,cd84 <__clzsi2+0x1c>
    cd70:	00803fc4 	movi	r2,255
    cd74:	11000f36 	bltu	r2,r4,cdb4 <__clzsi2+0x4c>
    cd78:	00800804 	movi	r2,32
    cd7c:	0007883a 	mov	r3,zero
    cd80:	00000506 	br	cd98 <__clzsi2+0x30>
    cd84:	00804034 	movhi	r2,256
    cd88:	10bfffc4 	addi	r2,r2,-1
    cd8c:	11000c2e 	bgeu	r2,r4,cdc0 <__clzsi2+0x58>
    cd90:	00800204 	movi	r2,8
    cd94:	00c00604 	movi	r3,24
    cd98:	20c8d83a 	srl	r4,r4,r3
    cd9c:	00c00074 	movhi	r3,1
    cda0:	18c2a404 	addi	r3,r3,2704
    cda4:	1909883a 	add	r4,r3,r4
    cda8:	20c00003 	ldbu	r3,0(r4)
    cdac:	10c5c83a 	sub	r2,r2,r3
    cdb0:	f800283a 	ret
    cdb4:	00800604 	movi	r2,24
    cdb8:	00c00204 	movi	r3,8
    cdbc:	003ff606 	br	cd98 <__clzsi2+0x30>
    cdc0:	00800404 	movi	r2,16
    cdc4:	1007883a 	mov	r3,r2
    cdc8:	003ff306 	br	cd98 <__clzsi2+0x30>

0000cdcc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cdcc:	defffe04 	addi	sp,sp,-8
    cdd0:	dfc00115 	stw	ra,4(sp)
    cdd4:	df000015 	stw	fp,0(sp)
    cdd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cddc:	00800074 	movhi	r2,1
    cde0:	1089f204 	addi	r2,r2,10184
    cde4:	10800017 	ldw	r2,0(r2)
    cde8:	10000526 	beq	r2,zero,ce00 <alt_get_errno+0x34>
    cdec:	00800074 	movhi	r2,1
    cdf0:	1089f204 	addi	r2,r2,10184
    cdf4:	10800017 	ldw	r2,0(r2)
    cdf8:	103ee83a 	callr	r2
    cdfc:	00000206 	br	ce08 <alt_get_errno+0x3c>
    ce00:	00800074 	movhi	r2,1
    ce04:	1090fe04 	addi	r2,r2,17400
}
    ce08:	e037883a 	mov	sp,fp
    ce0c:	dfc00117 	ldw	ra,4(sp)
    ce10:	df000017 	ldw	fp,0(sp)
    ce14:	dec00204 	addi	sp,sp,8
    ce18:	f800283a 	ret

0000ce1c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    ce1c:	defffb04 	addi	sp,sp,-20
    ce20:	dfc00415 	stw	ra,16(sp)
    ce24:	df000315 	stw	fp,12(sp)
    ce28:	df000304 	addi	fp,sp,12
    ce2c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    ce30:	e0bfff17 	ldw	r2,-4(fp)
    ce34:	10000616 	blt	r2,zero,ce50 <close+0x34>
    ce38:	e0bfff17 	ldw	r2,-4(fp)
    ce3c:	10c00324 	muli	r3,r2,12
    ce40:	00800074 	movhi	r2,1
    ce44:	10852904 	addi	r2,r2,5284
    ce48:	1885883a 	add	r2,r3,r2
    ce4c:	00000106 	br	ce54 <close+0x38>
    ce50:	0005883a 	mov	r2,zero
    ce54:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    ce58:	e0bffd17 	ldw	r2,-12(fp)
    ce5c:	10001926 	beq	r2,zero,cec4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    ce60:	e0bffd17 	ldw	r2,-12(fp)
    ce64:	10800017 	ldw	r2,0(r2)
    ce68:	10800417 	ldw	r2,16(r2)
    ce6c:	10000626 	beq	r2,zero,ce88 <close+0x6c>
    ce70:	e0bffd17 	ldw	r2,-12(fp)
    ce74:	10800017 	ldw	r2,0(r2)
    ce78:	10800417 	ldw	r2,16(r2)
    ce7c:	e13ffd17 	ldw	r4,-12(fp)
    ce80:	103ee83a 	callr	r2
    ce84:	00000106 	br	ce8c <close+0x70>
    ce88:	0005883a 	mov	r2,zero
    ce8c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    ce90:	e13fff17 	ldw	r4,-4(fp)
    ce94:	000d7040 	call	d704 <alt_release_fd>
    if (rval < 0)
    ce98:	e0bffe17 	ldw	r2,-8(fp)
    ce9c:	1000070e 	bge	r2,zero,cebc <close+0xa0>
    {
      ALT_ERRNO = -rval;
    cea0:	000cdcc0 	call	cdcc <alt_get_errno>
    cea4:	1007883a 	mov	r3,r2
    cea8:	e0bffe17 	ldw	r2,-8(fp)
    ceac:	0085c83a 	sub	r2,zero,r2
    ceb0:	18800015 	stw	r2,0(r3)
      return -1;
    ceb4:	00bfffc4 	movi	r2,-1
    ceb8:	00000706 	br	ced8 <close+0xbc>
    }
    return 0;
    cebc:	0005883a 	mov	r2,zero
    cec0:	00000506 	br	ced8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    cec4:	000cdcc0 	call	cdcc <alt_get_errno>
    cec8:	1007883a 	mov	r3,r2
    cecc:	00801444 	movi	r2,81
    ced0:	18800015 	stw	r2,0(r3)
    return -1;
    ced4:	00bfffc4 	movi	r2,-1
  }
}
    ced8:	e037883a 	mov	sp,fp
    cedc:	dfc00117 	ldw	ra,4(sp)
    cee0:	df000017 	ldw	fp,0(sp)
    cee4:	dec00204 	addi	sp,sp,8
    cee8:	f800283a 	ret

0000ceec <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    ceec:	defffc04 	addi	sp,sp,-16
    cef0:	df000315 	stw	fp,12(sp)
    cef4:	df000304 	addi	fp,sp,12
    cef8:	e13ffd15 	stw	r4,-12(fp)
    cefc:	e17ffe15 	stw	r5,-8(fp)
    cf00:	e1bfff15 	stw	r6,-4(fp)
  return len;
    cf04:	e0bfff17 	ldw	r2,-4(fp)
}
    cf08:	e037883a 	mov	sp,fp
    cf0c:	df000017 	ldw	fp,0(sp)
    cf10:	dec00104 	addi	sp,sp,4
    cf14:	f800283a 	ret

0000cf18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cf18:	defffe04 	addi	sp,sp,-8
    cf1c:	dfc00115 	stw	ra,4(sp)
    cf20:	df000015 	stw	fp,0(sp)
    cf24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cf28:	00800074 	movhi	r2,1
    cf2c:	1089f204 	addi	r2,r2,10184
    cf30:	10800017 	ldw	r2,0(r2)
    cf34:	10000526 	beq	r2,zero,cf4c <alt_get_errno+0x34>
    cf38:	00800074 	movhi	r2,1
    cf3c:	1089f204 	addi	r2,r2,10184
    cf40:	10800017 	ldw	r2,0(r2)
    cf44:	103ee83a 	callr	r2
    cf48:	00000206 	br	cf54 <alt_get_errno+0x3c>
    cf4c:	00800074 	movhi	r2,1
    cf50:	1090fe04 	addi	r2,r2,17400
}
    cf54:	e037883a 	mov	sp,fp
    cf58:	dfc00117 	ldw	ra,4(sp)
    cf5c:	df000017 	ldw	fp,0(sp)
    cf60:	dec00204 	addi	sp,sp,8
    cf64:	f800283a 	ret

0000cf68 <alt_dma_rxchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_rxchan alt_dma_rxchan_open (const char* name)
{
    cf68:	defffc04 	addi	sp,sp,-16
    cf6c:	dfc00315 	stw	ra,12(sp)
    cf70:	df000215 	stw	fp,8(sp)
    cf74:	df000204 	addi	fp,sp,8
    cf78:	e13fff15 	stw	r4,-4(fp)
  alt_dma_rxchan dev;

  dev = (alt_dma_rxchan) alt_find_dev (name, &alt_dma_rxchan_list);
    cf7c:	d1600b04 	addi	r5,gp,-32724
    cf80:	e13fff17 	ldw	r4,-4(fp)
    cf84:	000d0600 	call	d060 <alt_find_dev>
    cf88:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
    cf8c:	e0bffe17 	ldw	r2,-8(fp)
    cf90:	1000041e 	bne	r2,zero,cfa4 <alt_dma_rxchan_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
    cf94:	000cf180 	call	cf18 <alt_get_errno>
    cf98:	1007883a 	mov	r3,r2
    cf9c:	008004c4 	movi	r2,19
    cfa0:	18800015 	stw	r2,0(r3)
  }

  return dev;
    cfa4:	e0bffe17 	ldw	r2,-8(fp)
}
    cfa8:	e037883a 	mov	sp,fp
    cfac:	dfc00117 	ldw	ra,4(sp)
    cfb0:	df000017 	ldw	fp,0(sp)
    cfb4:	dec00204 	addi	sp,sp,8
    cfb8:	f800283a 	ret

0000cfbc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cfbc:	defffe04 	addi	sp,sp,-8
    cfc0:	dfc00115 	stw	ra,4(sp)
    cfc4:	df000015 	stw	fp,0(sp)
    cfc8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cfcc:	00800074 	movhi	r2,1
    cfd0:	1089f204 	addi	r2,r2,10184
    cfd4:	10800017 	ldw	r2,0(r2)
    cfd8:	10000526 	beq	r2,zero,cff0 <alt_get_errno+0x34>
    cfdc:	00800074 	movhi	r2,1
    cfe0:	1089f204 	addi	r2,r2,10184
    cfe4:	10800017 	ldw	r2,0(r2)
    cfe8:	103ee83a 	callr	r2
    cfec:	00000206 	br	cff8 <alt_get_errno+0x3c>
    cff0:	00800074 	movhi	r2,1
    cff4:	1090fe04 	addi	r2,r2,17400
}
    cff8:	e037883a 	mov	sp,fp
    cffc:	dfc00117 	ldw	ra,4(sp)
    d000:	df000017 	ldw	fp,0(sp)
    d004:	dec00204 	addi	sp,sp,8
    d008:	f800283a 	ret

0000d00c <alt_dma_txchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_txchan alt_dma_txchan_open (const char* name)
{
    d00c:	defffc04 	addi	sp,sp,-16
    d010:	dfc00315 	stw	ra,12(sp)
    d014:	df000215 	stw	fp,8(sp)
    d018:	df000204 	addi	fp,sp,8
    d01c:	e13fff15 	stw	r4,-4(fp)
  alt_dma_txchan dev;

  dev = (alt_dma_txchan) alt_find_dev (name, &alt_dma_txchan_list);
    d020:	d1600d04 	addi	r5,gp,-32716
    d024:	e13fff17 	ldw	r4,-4(fp)
    d028:	000d0600 	call	d060 <alt_find_dev>
    d02c:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
    d030:	e0bffe17 	ldw	r2,-8(fp)
    d034:	1000041e 	bne	r2,zero,d048 <alt_dma_txchan_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
    d038:	000cfbc0 	call	cfbc <alt_get_errno>
    d03c:	1007883a 	mov	r3,r2
    d040:	008004c4 	movi	r2,19
    d044:	18800015 	stw	r2,0(r3)
  }

  return dev;
    d048:	e0bffe17 	ldw	r2,-8(fp)
}
    d04c:	e037883a 	mov	sp,fp
    d050:	dfc00117 	ldw	ra,4(sp)
    d054:	df000017 	ldw	fp,0(sp)
    d058:	dec00204 	addi	sp,sp,8
    d05c:	f800283a 	ret

0000d060 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    d060:	defffa04 	addi	sp,sp,-24
    d064:	dfc00515 	stw	ra,20(sp)
    d068:	df000415 	stw	fp,16(sp)
    d06c:	df000404 	addi	fp,sp,16
    d070:	e13ffe15 	stw	r4,-8(fp)
    d074:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    d078:	e0bfff17 	ldw	r2,-4(fp)
    d07c:	10800017 	ldw	r2,0(r2)
    d080:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    d084:	e13ffe17 	ldw	r4,-8(fp)
    d088:	00007a00 	call	7a0 <strlen>
    d08c:	10800044 	addi	r2,r2,1
    d090:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    d094:	00000d06 	br	d0cc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    d098:	e0bffc17 	ldw	r2,-16(fp)
    d09c:	10800217 	ldw	r2,8(r2)
    d0a0:	e0fffd17 	ldw	r3,-12(fp)
    d0a4:	180d883a 	mov	r6,r3
    d0a8:	e17ffe17 	ldw	r5,-8(fp)
    d0ac:	1009883a 	mov	r4,r2
    d0b0:	00104980 	call	10498 <memcmp>
    d0b4:	1000021e 	bne	r2,zero,d0c0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    d0b8:	e0bffc17 	ldw	r2,-16(fp)
    d0bc:	00000706 	br	d0dc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    d0c0:	e0bffc17 	ldw	r2,-16(fp)
    d0c4:	10800017 	ldw	r2,0(r2)
    d0c8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    d0cc:	e0fffc17 	ldw	r3,-16(fp)
    d0d0:	e0bfff17 	ldw	r2,-4(fp)
    d0d4:	18bff01e 	bne	r3,r2,d098 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    d0d8:	0005883a 	mov	r2,zero
}
    d0dc:	e037883a 	mov	sp,fp
    d0e0:	dfc00117 	ldw	ra,4(sp)
    d0e4:	df000017 	ldw	fp,0(sp)
    d0e8:	dec00204 	addi	sp,sp,8
    d0ec:	f800283a 	ret

0000d0f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d0f0:	defffe04 	addi	sp,sp,-8
    d0f4:	dfc00115 	stw	ra,4(sp)
    d0f8:	df000015 	stw	fp,0(sp)
    d0fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d100:	00800074 	movhi	r2,1
    d104:	1089f204 	addi	r2,r2,10184
    d108:	10800017 	ldw	r2,0(r2)
    d10c:	10000526 	beq	r2,zero,d124 <alt_get_errno+0x34>
    d110:	00800074 	movhi	r2,1
    d114:	1089f204 	addi	r2,r2,10184
    d118:	10800017 	ldw	r2,0(r2)
    d11c:	103ee83a 	callr	r2
    d120:	00000206 	br	d12c <alt_get_errno+0x3c>
    d124:	00800074 	movhi	r2,1
    d128:	1090fe04 	addi	r2,r2,17400
}
    d12c:	e037883a 	mov	sp,fp
    d130:	dfc00117 	ldw	ra,4(sp)
    d134:	df000017 	ldw	fp,0(sp)
    d138:	dec00204 	addi	sp,sp,8
    d13c:	f800283a 	ret

0000d140 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    d140:	defffb04 	addi	sp,sp,-20
    d144:	dfc00415 	stw	ra,16(sp)
    d148:	df000315 	stw	fp,12(sp)
    d14c:	df000304 	addi	fp,sp,12
    d150:	e13ffe15 	stw	r4,-8(fp)
    d154:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d158:	e0bffe17 	ldw	r2,-8(fp)
    d15c:	10000616 	blt	r2,zero,d178 <fstat+0x38>
    d160:	e0bffe17 	ldw	r2,-8(fp)
    d164:	10c00324 	muli	r3,r2,12
    d168:	00800074 	movhi	r2,1
    d16c:	10852904 	addi	r2,r2,5284
    d170:	1885883a 	add	r2,r3,r2
    d174:	00000106 	br	d17c <fstat+0x3c>
    d178:	0005883a 	mov	r2,zero
    d17c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    d180:	e0bffd17 	ldw	r2,-12(fp)
    d184:	10001026 	beq	r2,zero,d1c8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    d188:	e0bffd17 	ldw	r2,-12(fp)
    d18c:	10800017 	ldw	r2,0(r2)
    d190:	10800817 	ldw	r2,32(r2)
    d194:	10000726 	beq	r2,zero,d1b4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    d198:	e0bffd17 	ldw	r2,-12(fp)
    d19c:	10800017 	ldw	r2,0(r2)
    d1a0:	10800817 	ldw	r2,32(r2)
    d1a4:	e17fff17 	ldw	r5,-4(fp)
    d1a8:	e13ffd17 	ldw	r4,-12(fp)
    d1ac:	103ee83a 	callr	r2
    d1b0:	00000a06 	br	d1dc <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    d1b4:	e0bfff17 	ldw	r2,-4(fp)
    d1b8:	00c80004 	movi	r3,8192
    d1bc:	10c00115 	stw	r3,4(r2)
      return 0;
    d1c0:	0005883a 	mov	r2,zero
    d1c4:	00000506 	br	d1dc <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d1c8:	000d0f00 	call	d0f0 <alt_get_errno>
    d1cc:	1007883a 	mov	r3,r2
    d1d0:	00801444 	movi	r2,81
    d1d4:	18800015 	stw	r2,0(r3)
    return -1;
    d1d8:	00bfffc4 	movi	r2,-1
  }
}
    d1dc:	e037883a 	mov	sp,fp
    d1e0:	dfc00117 	ldw	ra,4(sp)
    d1e4:	df000017 	ldw	fp,0(sp)
    d1e8:	dec00204 	addi	sp,sp,8
    d1ec:	f800283a 	ret

0000d1f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d1f0:	defffe04 	addi	sp,sp,-8
    d1f4:	dfc00115 	stw	ra,4(sp)
    d1f8:	df000015 	stw	fp,0(sp)
    d1fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d200:	00800074 	movhi	r2,1
    d204:	1089f204 	addi	r2,r2,10184
    d208:	10800017 	ldw	r2,0(r2)
    d20c:	10000526 	beq	r2,zero,d224 <alt_get_errno+0x34>
    d210:	00800074 	movhi	r2,1
    d214:	1089f204 	addi	r2,r2,10184
    d218:	10800017 	ldw	r2,0(r2)
    d21c:	103ee83a 	callr	r2
    d220:	00000206 	br	d22c <alt_get_errno+0x3c>
    d224:	00800074 	movhi	r2,1
    d228:	1090fe04 	addi	r2,r2,17400
}
    d22c:	e037883a 	mov	sp,fp
    d230:	dfc00117 	ldw	ra,4(sp)
    d234:	df000017 	ldw	fp,0(sp)
    d238:	dec00204 	addi	sp,sp,8
    d23c:	f800283a 	ret

0000d240 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    d240:	deffed04 	addi	sp,sp,-76
    d244:	dfc01215 	stw	ra,72(sp)
    d248:	df001115 	stw	fp,68(sp)
    d24c:	df001104 	addi	fp,sp,68
    d250:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d254:	e0bfff17 	ldw	r2,-4(fp)
    d258:	10000616 	blt	r2,zero,d274 <isatty+0x34>
    d25c:	e0bfff17 	ldw	r2,-4(fp)
    d260:	10c00324 	muli	r3,r2,12
    d264:	00800074 	movhi	r2,1
    d268:	10852904 	addi	r2,r2,5284
    d26c:	1885883a 	add	r2,r3,r2
    d270:	00000106 	br	d278 <isatty+0x38>
    d274:	0005883a 	mov	r2,zero
    d278:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    d27c:	e0bfef17 	ldw	r2,-68(fp)
    d280:	10000e26 	beq	r2,zero,d2bc <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    d284:	e0bfef17 	ldw	r2,-68(fp)
    d288:	10800017 	ldw	r2,0(r2)
    d28c:	10800817 	ldw	r2,32(r2)
    d290:	1000021e 	bne	r2,zero,d29c <isatty+0x5c>
    {
      return 1;
    d294:	00800044 	movi	r2,1
    d298:	00000d06 	br	d2d0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    d29c:	e0bff004 	addi	r2,fp,-64
    d2a0:	100b883a 	mov	r5,r2
    d2a4:	e13fff17 	ldw	r4,-4(fp)
    d2a8:	000d1400 	call	d140 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    d2ac:	e0bff117 	ldw	r2,-60(fp)
    d2b0:	10880020 	cmpeqi	r2,r2,8192
    d2b4:	10803fcc 	andi	r2,r2,255
    d2b8:	00000506 	br	d2d0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d2bc:	000d1f00 	call	d1f0 <alt_get_errno>
    d2c0:	1007883a 	mov	r3,r2
    d2c4:	00801444 	movi	r2,81
    d2c8:	18800015 	stw	r2,0(r3)
    return 0;
    d2cc:	0005883a 	mov	r2,zero
  }
}
    d2d0:	e037883a 	mov	sp,fp
    d2d4:	dfc00117 	ldw	ra,4(sp)
    d2d8:	df000017 	ldw	fp,0(sp)
    d2dc:	dec00204 	addi	sp,sp,8
    d2e0:	f800283a 	ret

0000d2e4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    d2e4:	defffc04 	addi	sp,sp,-16
    d2e8:	df000315 	stw	fp,12(sp)
    d2ec:	df000304 	addi	fp,sp,12
    d2f0:	e13ffd15 	stw	r4,-12(fp)
    d2f4:	e17ffe15 	stw	r5,-8(fp)
    d2f8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    d2fc:	e0fffe17 	ldw	r3,-8(fp)
    d300:	e0bffd17 	ldw	r2,-12(fp)
    d304:	18800c26 	beq	r3,r2,d338 <alt_load_section+0x54>
  {
    while( to != end )
    d308:	00000806 	br	d32c <alt_load_section+0x48>
    {
      *to++ = *from++;
    d30c:	e0bffe17 	ldw	r2,-8(fp)
    d310:	10c00104 	addi	r3,r2,4
    d314:	e0fffe15 	stw	r3,-8(fp)
    d318:	e0fffd17 	ldw	r3,-12(fp)
    d31c:	19000104 	addi	r4,r3,4
    d320:	e13ffd15 	stw	r4,-12(fp)
    d324:	18c00017 	ldw	r3,0(r3)
    d328:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    d32c:	e0fffe17 	ldw	r3,-8(fp)
    d330:	e0bfff17 	ldw	r2,-4(fp)
    d334:	18bff51e 	bne	r3,r2,d30c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    d338:	0001883a 	nop
    d33c:	e037883a 	mov	sp,fp
    d340:	df000017 	ldw	fp,0(sp)
    d344:	dec00104 	addi	sp,sp,4
    d348:	f800283a 	ret

0000d34c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    d34c:	defffe04 	addi	sp,sp,-8
    d350:	dfc00115 	stw	ra,4(sp)
    d354:	df000015 	stw	fp,0(sp)
    d358:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    d35c:	01800074 	movhi	r6,1
    d360:	3189f704 	addi	r6,r6,10204
    d364:	01400074 	movhi	r5,1
    d368:	2942f604 	addi	r5,r5,3032
    d36c:	01000074 	movhi	r4,1
    d370:	2109f704 	addi	r4,r4,10204
    d374:	000d2e40 	call	d2e4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    d378:	01800034 	movhi	r6,0
    d37c:	31809204 	addi	r6,r6,584
    d380:	01400034 	movhi	r5,0
    d384:	29400804 	addi	r5,r5,32
    d388:	01000034 	movhi	r4,0
    d38c:	21000804 	addi	r4,r4,32
    d390:	000d2e40 	call	d2e4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    d394:	01800074 	movhi	r6,1
    d398:	3182f604 	addi	r6,r6,3032
    d39c:	01400074 	movhi	r5,1
    d3a0:	2941f804 	addi	r5,r5,2016
    d3a4:	01000074 	movhi	r4,1
    d3a8:	2101f804 	addi	r4,r4,2016
    d3ac:	000d2e40 	call	d2e4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    d3b0:	000f7fc0 	call	f7fc <alt_dcache_flush_all>
  alt_icache_flush_all();
    d3b4:	000f9f80 	call	f9f8 <alt_icache_flush_all>
}
    d3b8:	0001883a 	nop
    d3bc:	e037883a 	mov	sp,fp
    d3c0:	dfc00117 	ldw	ra,4(sp)
    d3c4:	df000017 	ldw	fp,0(sp)
    d3c8:	dec00204 	addi	sp,sp,8
    d3cc:	f800283a 	ret

0000d3d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d3d0:	defffe04 	addi	sp,sp,-8
    d3d4:	dfc00115 	stw	ra,4(sp)
    d3d8:	df000015 	stw	fp,0(sp)
    d3dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d3e0:	00800074 	movhi	r2,1
    d3e4:	1089f204 	addi	r2,r2,10184
    d3e8:	10800017 	ldw	r2,0(r2)
    d3ec:	10000526 	beq	r2,zero,d404 <alt_get_errno+0x34>
    d3f0:	00800074 	movhi	r2,1
    d3f4:	1089f204 	addi	r2,r2,10184
    d3f8:	10800017 	ldw	r2,0(r2)
    d3fc:	103ee83a 	callr	r2
    d400:	00000206 	br	d40c <alt_get_errno+0x3c>
    d404:	00800074 	movhi	r2,1
    d408:	1090fe04 	addi	r2,r2,17400
}
    d40c:	e037883a 	mov	sp,fp
    d410:	dfc00117 	ldw	ra,4(sp)
    d414:	df000017 	ldw	fp,0(sp)
    d418:	dec00204 	addi	sp,sp,8
    d41c:	f800283a 	ret

0000d420 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    d420:	defff904 	addi	sp,sp,-28
    d424:	dfc00615 	stw	ra,24(sp)
    d428:	df000515 	stw	fp,20(sp)
    d42c:	df000504 	addi	fp,sp,20
    d430:	e13ffd15 	stw	r4,-12(fp)
    d434:	e17ffe15 	stw	r5,-8(fp)
    d438:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    d43c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d440:	e0bffd17 	ldw	r2,-12(fp)
    d444:	10000616 	blt	r2,zero,d460 <lseek+0x40>
    d448:	e0bffd17 	ldw	r2,-12(fp)
    d44c:	10c00324 	muli	r3,r2,12
    d450:	00800074 	movhi	r2,1
    d454:	10852904 	addi	r2,r2,5284
    d458:	1885883a 	add	r2,r3,r2
    d45c:	00000106 	br	d464 <lseek+0x44>
    d460:	0005883a 	mov	r2,zero
    d464:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    d468:	e0bffc17 	ldw	r2,-16(fp)
    d46c:	10001026 	beq	r2,zero,d4b0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    d470:	e0bffc17 	ldw	r2,-16(fp)
    d474:	10800017 	ldw	r2,0(r2)
    d478:	10800717 	ldw	r2,28(r2)
    d47c:	10000926 	beq	r2,zero,d4a4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    d480:	e0bffc17 	ldw	r2,-16(fp)
    d484:	10800017 	ldw	r2,0(r2)
    d488:	10800717 	ldw	r2,28(r2)
    d48c:	e1bfff17 	ldw	r6,-4(fp)
    d490:	e17ffe17 	ldw	r5,-8(fp)
    d494:	e13ffc17 	ldw	r4,-16(fp)
    d498:	103ee83a 	callr	r2
    d49c:	e0bffb15 	stw	r2,-20(fp)
    d4a0:	00000506 	br	d4b8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    d4a4:	00bfde84 	movi	r2,-134
    d4a8:	e0bffb15 	stw	r2,-20(fp)
    d4ac:	00000206 	br	d4b8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    d4b0:	00bfebc4 	movi	r2,-81
    d4b4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    d4b8:	e0bffb17 	ldw	r2,-20(fp)
    d4bc:	1000070e 	bge	r2,zero,d4dc <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    d4c0:	000d3d00 	call	d3d0 <alt_get_errno>
    d4c4:	1007883a 	mov	r3,r2
    d4c8:	e0bffb17 	ldw	r2,-20(fp)
    d4cc:	0085c83a 	sub	r2,zero,r2
    d4d0:	18800015 	stw	r2,0(r3)
    rc = -1;
    d4d4:	00bfffc4 	movi	r2,-1
    d4d8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    d4dc:	e0bffb17 	ldw	r2,-20(fp)
}
    d4e0:	e037883a 	mov	sp,fp
    d4e4:	dfc00117 	ldw	ra,4(sp)
    d4e8:	df000017 	ldw	fp,0(sp)
    d4ec:	dec00204 	addi	sp,sp,8
    d4f0:	f800283a 	ret

0000d4f4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    d4f4:	defffd04 	addi	sp,sp,-12
    d4f8:	dfc00215 	stw	ra,8(sp)
    d4fc:	df000115 	stw	fp,4(sp)
    d500:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    d504:	0009883a 	mov	r4,zero
    d508:	000d9c80 	call	d9c8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    d50c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    d510:	000da000 	call	da00 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    d514:	01800074 	movhi	r6,1
    d518:	3182e704 	addi	r6,r6,2972
    d51c:	01400074 	movhi	r5,1
    d520:	2942e704 	addi	r5,r5,2972
    d524:	01000074 	movhi	r4,1
    d528:	2102e704 	addi	r4,r4,2972
    d52c:	000faf00 	call	faf0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    d530:	000f9380 	call	f938 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    d534:	01000074 	movhi	r4,1
    d538:	213e6604 	addi	r4,r4,-1640
    d53c:	001044c0 	call	1044c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    d540:	d0a71c17 	ldw	r2,-25488(gp)
    d544:	d0e71d17 	ldw	r3,-25484(gp)
    d548:	d1271e17 	ldw	r4,-25480(gp)
    d54c:	200d883a 	mov	r6,r4
    d550:	180b883a 	mov	r5,r3
    d554:	1009883a 	mov	r4,r2
    d558:	00002b80 	call	2b8 <main>
    d55c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    d560:	01000044 	movi	r4,1
    d564:	000ce1c0 	call	ce1c <close>
  exit (result);
    d568:	e13fff17 	ldw	r4,-4(fp)
    d56c:	00104600 	call	10460 <exit>

0000d570 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    d570:	defffe04 	addi	sp,sp,-8
    d574:	df000115 	stw	fp,4(sp)
    d578:	df000104 	addi	fp,sp,4
    d57c:	e13fff15 	stw	r4,-4(fp)
}
    d580:	0001883a 	nop
    d584:	e037883a 	mov	sp,fp
    d588:	df000017 	ldw	fp,0(sp)
    d58c:	dec00104 	addi	sp,sp,4
    d590:	f800283a 	ret

0000d594 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    d594:	defffe04 	addi	sp,sp,-8
    d598:	df000115 	stw	fp,4(sp)
    d59c:	df000104 	addi	fp,sp,4
    d5a0:	e13fff15 	stw	r4,-4(fp)
}
    d5a4:	0001883a 	nop
    d5a8:	e037883a 	mov	sp,fp
    d5ac:	df000017 	ldw	fp,0(sp)
    d5b0:	dec00104 	addi	sp,sp,4
    d5b4:	f800283a 	ret

0000d5b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d5b8:	defffe04 	addi	sp,sp,-8
    d5bc:	dfc00115 	stw	ra,4(sp)
    d5c0:	df000015 	stw	fp,0(sp)
    d5c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d5c8:	00800074 	movhi	r2,1
    d5cc:	1089f204 	addi	r2,r2,10184
    d5d0:	10800017 	ldw	r2,0(r2)
    d5d4:	10000526 	beq	r2,zero,d5ec <alt_get_errno+0x34>
    d5d8:	00800074 	movhi	r2,1
    d5dc:	1089f204 	addi	r2,r2,10184
    d5e0:	10800017 	ldw	r2,0(r2)
    d5e4:	103ee83a 	callr	r2
    d5e8:	00000206 	br	d5f4 <alt_get_errno+0x3c>
    d5ec:	00800074 	movhi	r2,1
    d5f0:	1090fe04 	addi	r2,r2,17400
}
    d5f4:	e037883a 	mov	sp,fp
    d5f8:	dfc00117 	ldw	ra,4(sp)
    d5fc:	df000017 	ldw	fp,0(sp)
    d600:	dec00204 	addi	sp,sp,8
    d604:	f800283a 	ret

0000d608 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    d608:	defff904 	addi	sp,sp,-28
    d60c:	dfc00615 	stw	ra,24(sp)
    d610:	df000515 	stw	fp,20(sp)
    d614:	df000504 	addi	fp,sp,20
    d618:	e13ffd15 	stw	r4,-12(fp)
    d61c:	e17ffe15 	stw	r5,-8(fp)
    d620:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d624:	e0bffd17 	ldw	r2,-12(fp)
    d628:	10000616 	blt	r2,zero,d644 <read+0x3c>
    d62c:	e0bffd17 	ldw	r2,-12(fp)
    d630:	10c00324 	muli	r3,r2,12
    d634:	00800074 	movhi	r2,1
    d638:	10852904 	addi	r2,r2,5284
    d63c:	1885883a 	add	r2,r3,r2
    d640:	00000106 	br	d648 <read+0x40>
    d644:	0005883a 	mov	r2,zero
    d648:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d64c:	e0bffb17 	ldw	r2,-20(fp)
    d650:	10002226 	beq	r2,zero,d6dc <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d654:	e0bffb17 	ldw	r2,-20(fp)
    d658:	10800217 	ldw	r2,8(r2)
    d65c:	108000cc 	andi	r2,r2,3
    d660:	10800060 	cmpeqi	r2,r2,1
    d664:	1000181e 	bne	r2,zero,d6c8 <read+0xc0>
        (fd->dev->read))
    d668:	e0bffb17 	ldw	r2,-20(fp)
    d66c:	10800017 	ldw	r2,0(r2)
    d670:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d674:	10001426 	beq	r2,zero,d6c8 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    d678:	e0bffb17 	ldw	r2,-20(fp)
    d67c:	10800017 	ldw	r2,0(r2)
    d680:	10800517 	ldw	r2,20(r2)
    d684:	e0ffff17 	ldw	r3,-4(fp)
    d688:	180d883a 	mov	r6,r3
    d68c:	e17ffe17 	ldw	r5,-8(fp)
    d690:	e13ffb17 	ldw	r4,-20(fp)
    d694:	103ee83a 	callr	r2
    d698:	e0bffc15 	stw	r2,-16(fp)
    d69c:	e0bffc17 	ldw	r2,-16(fp)
    d6a0:	1000070e 	bge	r2,zero,d6c0 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    d6a4:	000d5b80 	call	d5b8 <alt_get_errno>
    d6a8:	1007883a 	mov	r3,r2
    d6ac:	e0bffc17 	ldw	r2,-16(fp)
    d6b0:	0085c83a 	sub	r2,zero,r2
    d6b4:	18800015 	stw	r2,0(r3)
          return -1;
    d6b8:	00bfffc4 	movi	r2,-1
    d6bc:	00000c06 	br	d6f0 <read+0xe8>
        }
        return rval;
    d6c0:	e0bffc17 	ldw	r2,-16(fp)
    d6c4:	00000a06 	br	d6f0 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    d6c8:	000d5b80 	call	d5b8 <alt_get_errno>
    d6cc:	1007883a 	mov	r3,r2
    d6d0:	00800344 	movi	r2,13
    d6d4:	18800015 	stw	r2,0(r3)
    d6d8:	00000406 	br	d6ec <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    d6dc:	000d5b80 	call	d5b8 <alt_get_errno>
    d6e0:	1007883a 	mov	r3,r2
    d6e4:	00801444 	movi	r2,81
    d6e8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d6ec:	00bfffc4 	movi	r2,-1
}
    d6f0:	e037883a 	mov	sp,fp
    d6f4:	dfc00117 	ldw	ra,4(sp)
    d6f8:	df000017 	ldw	fp,0(sp)
    d6fc:	dec00204 	addi	sp,sp,8
    d700:	f800283a 	ret

0000d704 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    d704:	defffe04 	addi	sp,sp,-8
    d708:	df000115 	stw	fp,4(sp)
    d70c:	df000104 	addi	fp,sp,4
    d710:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    d714:	e0bfff17 	ldw	r2,-4(fp)
    d718:	108000d0 	cmplti	r2,r2,3
    d71c:	10000d1e 	bne	r2,zero,d754 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    d720:	00800074 	movhi	r2,1
    d724:	10852904 	addi	r2,r2,5284
    d728:	e0ffff17 	ldw	r3,-4(fp)
    d72c:	18c00324 	muli	r3,r3,12
    d730:	10c5883a 	add	r2,r2,r3
    d734:	10800204 	addi	r2,r2,8
    d738:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    d73c:	00800074 	movhi	r2,1
    d740:	10852904 	addi	r2,r2,5284
    d744:	e0ffff17 	ldw	r3,-4(fp)
    d748:	18c00324 	muli	r3,r3,12
    d74c:	10c5883a 	add	r2,r2,r3
    d750:	10000015 	stw	zero,0(r2)
  }
}
    d754:	0001883a 	nop
    d758:	e037883a 	mov	sp,fp
    d75c:	df000017 	ldw	fp,0(sp)
    d760:	dec00104 	addi	sp,sp,4
    d764:	f800283a 	ret

0000d768 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    d768:	defff904 	addi	sp,sp,-28
    d76c:	df000615 	stw	fp,24(sp)
    d770:	df000604 	addi	fp,sp,24
    d774:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d778:	0005303a 	rdctl	r2,status
    d77c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d780:	e0fffe17 	ldw	r3,-8(fp)
    d784:	00bfff84 	movi	r2,-2
    d788:	1884703a 	and	r2,r3,r2
    d78c:	1001703a 	wrctl	status,r2
  
  return context;
    d790:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    d794:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    d798:	d0a01017 	ldw	r2,-32704(gp)
    d79c:	10c000c4 	addi	r3,r2,3
    d7a0:	00bfff04 	movi	r2,-4
    d7a4:	1884703a 	and	r2,r3,r2
    d7a8:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    d7ac:	d0e01017 	ldw	r3,-32704(gp)
    d7b0:	e0bfff17 	ldw	r2,-4(fp)
    d7b4:	1887883a 	add	r3,r3,r2
    d7b8:	00810034 	movhi	r2,1024
    d7bc:	10800004 	addi	r2,r2,0
    d7c0:	10c0062e 	bgeu	r2,r3,d7dc <sbrk+0x74>
    d7c4:	e0bffb17 	ldw	r2,-20(fp)
    d7c8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d7cc:	e0bffa17 	ldw	r2,-24(fp)
    d7d0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    d7d4:	00bfffc4 	movi	r2,-1
    d7d8:	00000b06 	br	d808 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    d7dc:	d0a01017 	ldw	r2,-32704(gp)
    d7e0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    d7e4:	d0e01017 	ldw	r3,-32704(gp)
    d7e8:	e0bfff17 	ldw	r2,-4(fp)
    d7ec:	1885883a 	add	r2,r3,r2
    d7f0:	d0a01015 	stw	r2,-32704(gp)
    d7f4:	e0bffb17 	ldw	r2,-20(fp)
    d7f8:	e0bffc15 	stw	r2,-16(fp)
    d7fc:	e0bffc17 	ldw	r2,-16(fp)
    d800:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    d804:	e0bffd17 	ldw	r2,-12(fp)
} 
    d808:	e037883a 	mov	sp,fp
    d80c:	df000017 	ldw	fp,0(sp)
    d810:	dec00104 	addi	sp,sp,4
    d814:	f800283a 	ret

0000d818 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    d818:	defffd04 	addi	sp,sp,-12
    d81c:	dfc00215 	stw	ra,8(sp)
    d820:	df000115 	stw	fp,4(sp)
    d824:	df000104 	addi	fp,sp,4
    d828:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    d82c:	e13fff17 	ldw	r4,-4(fp)
    d830:	000f6a40 	call	f6a4 <alt_busy_sleep>
}
    d834:	e037883a 	mov	sp,fp
    d838:	dfc00117 	ldw	ra,4(sp)
    d83c:	df000017 	ldw	fp,0(sp)
    d840:	dec00204 	addi	sp,sp,8
    d844:	f800283a 	ret

0000d848 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d848:	defffe04 	addi	sp,sp,-8
    d84c:	dfc00115 	stw	ra,4(sp)
    d850:	df000015 	stw	fp,0(sp)
    d854:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d858:	00800074 	movhi	r2,1
    d85c:	1089f204 	addi	r2,r2,10184
    d860:	10800017 	ldw	r2,0(r2)
    d864:	10000526 	beq	r2,zero,d87c <alt_get_errno+0x34>
    d868:	00800074 	movhi	r2,1
    d86c:	1089f204 	addi	r2,r2,10184
    d870:	10800017 	ldw	r2,0(r2)
    d874:	103ee83a 	callr	r2
    d878:	00000206 	br	d884 <alt_get_errno+0x3c>
    d87c:	00800074 	movhi	r2,1
    d880:	1090fe04 	addi	r2,r2,17400
}
    d884:	e037883a 	mov	sp,fp
    d888:	dfc00117 	ldw	ra,4(sp)
    d88c:	df000017 	ldw	fp,0(sp)
    d890:	dec00204 	addi	sp,sp,8
    d894:	f800283a 	ret

0000d898 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    d898:	defff904 	addi	sp,sp,-28
    d89c:	dfc00615 	stw	ra,24(sp)
    d8a0:	df000515 	stw	fp,20(sp)
    d8a4:	df000504 	addi	fp,sp,20
    d8a8:	e13ffd15 	stw	r4,-12(fp)
    d8ac:	e17ffe15 	stw	r5,-8(fp)
    d8b0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d8b4:	e0bffd17 	ldw	r2,-12(fp)
    d8b8:	10000616 	blt	r2,zero,d8d4 <write+0x3c>
    d8bc:	e0bffd17 	ldw	r2,-12(fp)
    d8c0:	10c00324 	muli	r3,r2,12
    d8c4:	00800074 	movhi	r2,1
    d8c8:	10852904 	addi	r2,r2,5284
    d8cc:	1885883a 	add	r2,r3,r2
    d8d0:	00000106 	br	d8d8 <write+0x40>
    d8d4:	0005883a 	mov	r2,zero
    d8d8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d8dc:	e0bffb17 	ldw	r2,-20(fp)
    d8e0:	10002126 	beq	r2,zero,d968 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    d8e4:	e0bffb17 	ldw	r2,-20(fp)
    d8e8:	10800217 	ldw	r2,8(r2)
    d8ec:	108000cc 	andi	r2,r2,3
    d8f0:	10001826 	beq	r2,zero,d954 <write+0xbc>
    d8f4:	e0bffb17 	ldw	r2,-20(fp)
    d8f8:	10800017 	ldw	r2,0(r2)
    d8fc:	10800617 	ldw	r2,24(r2)
    d900:	10001426 	beq	r2,zero,d954 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    d904:	e0bffb17 	ldw	r2,-20(fp)
    d908:	10800017 	ldw	r2,0(r2)
    d90c:	10800617 	ldw	r2,24(r2)
    d910:	e0ffff17 	ldw	r3,-4(fp)
    d914:	180d883a 	mov	r6,r3
    d918:	e17ffe17 	ldw	r5,-8(fp)
    d91c:	e13ffb17 	ldw	r4,-20(fp)
    d920:	103ee83a 	callr	r2
    d924:	e0bffc15 	stw	r2,-16(fp)
    d928:	e0bffc17 	ldw	r2,-16(fp)
    d92c:	1000070e 	bge	r2,zero,d94c <write+0xb4>
      {
        ALT_ERRNO = -rval;
    d930:	000d8480 	call	d848 <alt_get_errno>
    d934:	1007883a 	mov	r3,r2
    d938:	e0bffc17 	ldw	r2,-16(fp)
    d93c:	0085c83a 	sub	r2,zero,r2
    d940:	18800015 	stw	r2,0(r3)
        return -1;
    d944:	00bfffc4 	movi	r2,-1
    d948:	00000c06 	br	d97c <write+0xe4>
      }
      return rval;
    d94c:	e0bffc17 	ldw	r2,-16(fp)
    d950:	00000a06 	br	d97c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    d954:	000d8480 	call	d848 <alt_get_errno>
    d958:	1007883a 	mov	r3,r2
    d95c:	00800344 	movi	r2,13
    d960:	18800015 	stw	r2,0(r3)
    d964:	00000406 	br	d978 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    d968:	000d8480 	call	d848 <alt_get_errno>
    d96c:	1007883a 	mov	r3,r2
    d970:	00801444 	movi	r2,81
    d974:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d978:	00bfffc4 	movi	r2,-1
}
    d97c:	e037883a 	mov	sp,fp
    d980:	dfc00117 	ldw	ra,4(sp)
    d984:	df000017 	ldw	fp,0(sp)
    d988:	dec00204 	addi	sp,sp,8
    d98c:	f800283a 	ret

0000d990 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    d990:	defffd04 	addi	sp,sp,-12
    d994:	dfc00215 	stw	ra,8(sp)
    d998:	df000115 	stw	fp,4(sp)
    d99c:	df000104 	addi	fp,sp,4
    d9a0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    d9a4:	01400074 	movhi	r5,1
    d9a8:	2949eb04 	addi	r5,r5,10156
    d9ac:	e13fff17 	ldw	r4,-4(fp)
    d9b0:	000f8940 	call	f894 <alt_dev_llist_insert>
}
    d9b4:	e037883a 	mov	sp,fp
    d9b8:	dfc00117 	ldw	ra,4(sp)
    d9bc:	df000017 	ldw	fp,0(sp)
    d9c0:	dec00204 	addi	sp,sp,8
    d9c4:	f800283a 	ret

0000d9c8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    d9c8:	defffd04 	addi	sp,sp,-12
    d9cc:	dfc00215 	stw	ra,8(sp)
    d9d0:	df000115 	stw	fp,4(sp)
    d9d4:	df000104 	addi	fp,sp,4
    d9d8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOSII_CORE, niosII_core);
    d9dc:	00101340 	call	10134 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    d9e0:	00800044 	movi	r2,1
    d9e4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    d9e8:	0001883a 	nop
    d9ec:	e037883a 	mov	sp,fp
    d9f0:	dfc00117 	ldw	ra,4(sp)
    d9f4:	df000017 	ldw	fp,0(sp)
    d9f8:	dec00204 	addi	sp,sp,8
    d9fc:	f800283a 	ret

0000da00 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    da00:	defffd04 	addi	sp,sp,-12
    da04:	dfc00215 	stw	ra,8(sp)
    da08:	df000115 	stw	fp,4(sp)
    da0c:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( SYS_TIMER, Sys_Timer);
    da10:	01c0fa04 	movi	r7,1000
    da14:	01800044 	movi	r6,1
    da18:	000b883a 	mov	r5,zero
    da1c:	01010134 	movhi	r4,1028
    da20:	21060804 	addi	r4,r4,6176
    da24:	000f14c0 	call	f14c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_DMA_INIT ( GENERAL_DMA, General_DMA);
    da28:	008000c4 	movi	r2,3
    da2c:	d8800015 	stw	r2,0(sp)
    da30:	000f883a 	mov	r7,zero
    da34:	01810134 	movhi	r6,1028
    da38:	31860004 	addi	r6,r6,6144
    da3c:	01400074 	movhi	r5,1
    da40:	2945b904 	addi	r5,r5,5860
    da44:	01000074 	movhi	r4,1
    da48:	2105b204 	addi	r4,r4,5832
    da4c:	000e5b40 	call	e5b4 <alt_avalon_dma_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, JTAG);
    da50:	000d883a 	mov	r6,zero
    da54:	000b883a 	mov	r5,zero
    da58:	01000074 	movhi	r4,1
    da5c:	2105ca04 	addi	r4,r4,5928
    da60:	000e7c40 	call	e7c4 <altera_avalon_jtag_uart_init>
    da64:	01000074 	movhi	r4,1
    da68:	2105c004 	addi	r4,r4,5888
    da6c:	000d9900 	call	d990 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSTEMID, SystemID);
    da70:	0001883a 	nop
    ALTERA_UP_AVALON_RS232_INIT ( UART_COM, UART_COM);
    da74:	01000074 	movhi	r4,1
    da78:	2109d804 	addi	r4,r4,10080
    da7c:	000d9900 	call	d990 <alt_dev_reg>
}
    da80:	0001883a 	nop
    da84:	e037883a 	mov	sp,fp
    da88:	dfc00117 	ldw	ra,4(sp)
    da8c:	df000017 	ldw	fp,0(sp)
    da90:	dec00204 	addi	sp,sp,8
    da94:	f800283a 	ret

0000da98 <alt_dma_txchan_reg>:
/*
 * Register a DMA transmit channel with the system.
 */

static ALT_INLINE int alt_dma_txchan_reg (alt_dma_txchan_dev* dev)
{
    da98:	defffd04 	addi	sp,sp,-12
    da9c:	dfc00215 	stw	ra,8(sp)
    daa0:	df000115 	stw	fp,4(sp)
    daa4:	df000104 	addi	fp,sp,4
    daa8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_txchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_txchan_list);
    daac:	01400074 	movhi	r5,1
    dab0:	2949f004 	addi	r5,r5,10176
    dab4:	e13fff17 	ldw	r4,-4(fp)
    dab8:	000f8940 	call	f894 <alt_dev_llist_insert>
}
    dabc:	e037883a 	mov	sp,fp
    dac0:	dfc00117 	ldw	ra,4(sp)
    dac4:	df000017 	ldw	fp,0(sp)
    dac8:	dec00204 	addi	sp,sp,8
    dacc:	f800283a 	ret

0000dad0 <alt_dma_rxchan_reg>:
/*
 * Register a DMA receive channel with the system.
 */

static ALT_INLINE int alt_dma_rxchan_reg (alt_dma_rxchan_dev* dev)
{
    dad0:	defffd04 	addi	sp,sp,-12
    dad4:	dfc00215 	stw	ra,8(sp)
    dad8:	df000115 	stw	fp,4(sp)
    dadc:	df000104 	addi	fp,sp,4
    dae0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_rxchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_rxchan_list);
    dae4:	01400074 	movhi	r5,1
    dae8:	2949ee04 	addi	r5,r5,10168
    daec:	e13fff17 	ldw	r4,-4(fp)
    daf0:	000f8940 	call	f894 <alt_dev_llist_insert>
}
    daf4:	e037883a 	mov	sp,fp
    daf8:	dfc00117 	ldw	ra,4(sp)
    dafc:	df000017 	ldw	fp,0(sp)
    db00:	dec00204 	addi	sp,sp,8
    db04:	f800283a 	ret

0000db08 <alt_avalon_dma_launch_bidir>:
 * both the receive and transmit channels are using incrementing addresses,
 * i.e. both channels are accesing memory rather than devices.
 */

void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv)
{
    db08:	defffc04 	addi	sp,sp,-16
    db0c:	df000315 	stw	fp,12(sp)
    db10:	df000304 	addi	fp,sp,12
    db14:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_txslot* tx_slot;
  alt_avalon_dma_rxslot* rx_slot;

  if ((priv->tx_start != priv->tx_end) && (priv->rx_start != priv->rx_end))
    db18:	e0bfff17 	ldw	r2,-4(fp)
    db1c:	10c00117 	ldw	r3,4(r2)
    db20:	e0bfff17 	ldw	r2,-4(fp)
    db24:	10800217 	ldw	r2,8(r2)
    db28:	18802e26 	beq	r3,r2,dbe4 <alt_avalon_dma_launch_bidir+0xdc>
    db2c:	e0bfff17 	ldw	r2,-4(fp)
    db30:	10c00317 	ldw	r3,12(r2)
    db34:	e0bfff17 	ldw	r2,-4(fp)
    db38:	10800417 	ldw	r2,16(r2)
    db3c:	18802926 	beq	r3,r2,dbe4 <alt_avalon_dma_launch_bidir+0xdc>
  {
    priv->active = 1;
    db40:	e0bfff17 	ldw	r2,-4(fp)
    db44:	00c00044 	movi	r3,1
    db48:	10c00815 	stw	r3,32(r2)

    tx_slot = &priv->tx_buf[priv->tx_start];
    db4c:	e0bfff17 	ldw	r2,-4(fp)
    db50:	10800117 	ldw	r2,4(r2)
    db54:	1004913a 	slli	r2,r2,4
    db58:	10800904 	addi	r2,r2,36
    db5c:	e0ffff17 	ldw	r3,-4(fp)
    db60:	1885883a 	add	r2,r3,r2
    db64:	e0bffd15 	stw	r2,-12(fp)
    rx_slot = &priv->rx_buf[priv->rx_start];
    db68:	e0bfff17 	ldw	r2,-4(fp)
    db6c:	10800317 	ldw	r2,12(r2)
    db70:	1004913a 	slli	r2,r2,4
    db74:	10801904 	addi	r2,r2,100
    db78:	e0ffff17 	ldw	r3,-4(fp)
    db7c:	1885883a 	add	r2,r3,r2
    db80:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
    db84:	e0bfff17 	ldw	r2,-4(fp)
    db88:	10800017 	ldw	r2,0(r2)
    db8c:	10800104 	addi	r2,r2,4
    db90:	e0fffd17 	ldw	r3,-12(fp)
    db94:	18c00017 	ldw	r3,0(r3)
    db98:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
    db9c:	e0bfff17 	ldw	r2,-4(fp)
    dba0:	10800017 	ldw	r2,0(r2)
    dba4:	10800204 	addi	r2,r2,8
    dba8:	e0fffe17 	ldw	r3,-8(fp)
    dbac:	18c00017 	ldw	r3,0(r3)
    dbb0:	10c00035 	stwio	r3,0(r2)

    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base,
    dbb4:	e0bfff17 	ldw	r2,-4(fp)
    dbb8:	10800017 	ldw	r2,0(r2)
    dbbc:	11000304 	addi	r4,r2,12
    dbc0:	e0bffd17 	ldw	r2,-12(fp)
    dbc4:	11400117 	ldw	r5,4(r2)
    dbc8:	e0bffe17 	ldw	r2,-8(fp)
    dbcc:	10c00117 	ldw	r3,4(r2)
    dbd0:	2805883a 	mov	r2,r5
    dbd4:	1880012e 	bgeu	r3,r2,dbdc <alt_avalon_dma_launch_bidir+0xd4>
    dbd8:	1805883a 	mov	r2,r3
    dbdc:	20800035 	stwio	r2,0(r4)
    dbe0:	00000206 	br	dbec <alt_avalon_dma_launch_bidir+0xe4>
       (tx_slot->len > rx_slot->len) ? rx_slot->len : tx_slot->len);
  }
  else
  {
    priv->active = 0;
    dbe4:	e0bfff17 	ldw	r2,-4(fp)
    dbe8:	10000815 	stw	zero,32(r2)
  }
}
    dbec:	0001883a 	nop
    dbf0:	e037883a 	mov	sp,fp
    dbf4:	df000017 	ldw	fp,0(sp)
    dbf8:	dec00104 	addi	sp,sp,4
    dbfc:	f800283a 	ret

0000dc00 <alt_avalon_dma_launch_txonly>:
 * i.e. the receive channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv)
{
    dc00:	defffd04 	addi	sp,sp,-12
    dc04:	df000215 	stw	fp,8(sp)
    dc08:	df000204 	addi	fp,sp,8
    dc0c:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_txslot* tx_slot;

  if (priv->tx_start != priv->tx_end)
    dc10:	e0bfff17 	ldw	r2,-4(fp)
    dc14:	10c00117 	ldw	r3,4(r2)
    dc18:	e0bfff17 	ldw	r2,-4(fp)
    dc1c:	10800217 	ldw	r2,8(r2)
    dc20:	18801726 	beq	r3,r2,dc80 <alt_avalon_dma_launch_txonly+0x80>
  {
    priv->active = 1;
    dc24:	e0bfff17 	ldw	r2,-4(fp)
    dc28:	00c00044 	movi	r3,1
    dc2c:	10c00815 	stw	r3,32(r2)
    tx_slot      = &priv->tx_buf[priv->tx_start];
    dc30:	e0bfff17 	ldw	r2,-4(fp)
    dc34:	10800117 	ldw	r2,4(r2)
    dc38:	1004913a 	slli	r2,r2,4
    dc3c:	10800904 	addi	r2,r2,36
    dc40:	e0ffff17 	ldw	r3,-4(fp)
    dc44:	1885883a 	add	r2,r3,r2
    dc48:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
    dc4c:	e0bfff17 	ldw	r2,-4(fp)
    dc50:	10800017 	ldw	r2,0(r2)
    dc54:	10800104 	addi	r2,r2,4
    dc58:	e0fffe17 	ldw	r3,-8(fp)
    dc5c:	18c00017 	ldw	r3,0(r3)
    dc60:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, tx_slot->len);
    dc64:	e0bfff17 	ldw	r2,-4(fp)
    dc68:	10800017 	ldw	r2,0(r2)
    dc6c:	10800304 	addi	r2,r2,12
    dc70:	e0fffe17 	ldw	r3,-8(fp)
    dc74:	18c00117 	ldw	r3,4(r3)
    dc78:	10c00035 	stwio	r3,0(r2)
  }
  else
  {
    priv->active = 0;
  }
}
    dc7c:	00000206 	br	dc88 <alt_avalon_dma_launch_txonly+0x88>
    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, tx_slot->len);
  }
  else
  {
    priv->active = 0;
    dc80:	e0bfff17 	ldw	r2,-4(fp)
    dc84:	10000815 	stw	zero,32(r2)
  }
}
    dc88:	0001883a 	nop
    dc8c:	e037883a 	mov	sp,fp
    dc90:	df000017 	ldw	fp,0(sp)
    dc94:	dec00104 	addi	sp,sp,4
    dc98:	f800283a 	ret

0000dc9c <alt_avalon_dma_launch_rxonly>:
 * i.e. the transmit channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv)
{
    dc9c:	defffd04 	addi	sp,sp,-12
    dca0:	df000215 	stw	fp,8(sp)
    dca4:	df000204 	addi	fp,sp,8
    dca8:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_rxslot* rx_slot;

  if (priv->rx_start != priv->rx_end)
    dcac:	e0bfff17 	ldw	r2,-4(fp)
    dcb0:	10c00317 	ldw	r3,12(r2)
    dcb4:	e0bfff17 	ldw	r2,-4(fp)
    dcb8:	10800417 	ldw	r2,16(r2)
    dcbc:	18801726 	beq	r3,r2,dd1c <alt_avalon_dma_launch_rxonly+0x80>
  {
    priv->active = 1;
    dcc0:	e0bfff17 	ldw	r2,-4(fp)
    dcc4:	00c00044 	movi	r3,1
    dcc8:	10c00815 	stw	r3,32(r2)
    rx_slot      = &priv->rx_buf[priv->rx_start];
    dccc:	e0bfff17 	ldw	r2,-4(fp)
    dcd0:	10800317 	ldw	r2,12(r2)
    dcd4:	1004913a 	slli	r2,r2,4
    dcd8:	10801904 	addi	r2,r2,100
    dcdc:	e0ffff17 	ldw	r3,-4(fp)
    dce0:	1885883a 	add	r2,r3,r2
    dce4:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
    dce8:	e0bfff17 	ldw	r2,-4(fp)
    dcec:	10800017 	ldw	r2,0(r2)
    dcf0:	10800204 	addi	r2,r2,8
    dcf4:	e0fffe17 	ldw	r3,-8(fp)
    dcf8:	18c00017 	ldw	r3,0(r3)
    dcfc:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, rx_slot->len);
    dd00:	e0bfff17 	ldw	r2,-4(fp)
    dd04:	10800017 	ldw	r2,0(r2)
    dd08:	10800304 	addi	r2,r2,12
    dd0c:	e0fffe17 	ldw	r3,-8(fp)
    dd10:	18c00117 	ldw	r3,4(r3)
    dd14:	10c00035 	stwio	r3,0(r2)
  }
  else
  {
    priv->active = 0;
  }
}
    dd18:	00000206 	br	dd24 <alt_avalon_dma_launch_rxonly+0x88>
    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, rx_slot->len);
  }
  else
  {
    priv->active = 0;
    dd1c:	e0bfff17 	ldw	r2,-4(fp)
    dd20:	10000815 	stw	zero,32(r2)
  }
}
    dd24:	0001883a 	nop
    dd28:	e037883a 	mov	sp,fp
    dd2c:	df000017 	ldw	fp,0(sp)
    dd30:	dec00104 	addi	sp,sp,4
    dd34:	f800283a 	ret

0000dd38 <alt_avalon_dma_ioctl>:
 * device instance. See alt_dma_dev.h for the meaning of the supported
 * ioctl requests.
 */

static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)
{
    dd38:	defffa04 	addi	sp,sp,-24
    dd3c:	df000515 	stw	fp,20(sp)
    dd40:	df000504 	addi	fp,sp,20
    dd44:	e13ffd15 	stw	r4,-12(fp)
    dd48:	e17ffe15 	stw	r5,-8(fp)
    dd4c:	e1bfff15 	stw	r6,-4(fp)
  int     status = 0;
    dd50:	e03ffb15 	stw	zero,-20(fp)
   * since it cannot catch concurrent calls to alt_alavalon_dma_prepare()
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
    dd54:	e0bffd17 	ldw	r2,-12(fp)
    dd58:	10c00117 	ldw	r3,4(r2)
    dd5c:	e0bffd17 	ldw	r2,-12(fp)
    dd60:	10800217 	ldw	r2,8(r2)
    dd64:	18800a1e 	bne	r3,r2,dd90 <alt_avalon_dma_ioctl+0x58>
      (priv->rx_start != priv->rx_end) ||
    dd68:	e0bffd17 	ldw	r2,-12(fp)
    dd6c:	10c00317 	ldw	r3,12(r2)
    dd70:	e0bffd17 	ldw	r2,-12(fp)
    dd74:	10800417 	ldw	r2,16(r2)
   * since it cannot catch concurrent calls to alt_alavalon_dma_prepare()
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
    dd78:	1880051e 	bne	r3,r2,dd90 <alt_avalon_dma_ioctl+0x58>
      (priv->rx_start != priv->rx_end) ||
      IORD_ALTERA_AVALON_DMA_LENGTH (priv->base))
    dd7c:	e0bffd17 	ldw	r2,-12(fp)
    dd80:	10800017 	ldw	r2,0(r2)
    dd84:	10800304 	addi	r2,r2,12
    dd88:	10800037 	ldwio	r2,0(r2)
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
      (priv->rx_start != priv->rx_end) ||
    dd8c:	10000226 	beq	r2,zero,dd98 <alt_avalon_dma_ioctl+0x60>
      IORD_ALTERA_AVALON_DMA_LENGTH (priv->base))
  {
    return -EIO;
    dd90:	00bffec4 	movi	r2,-5
    dd94:	0000b506 	br	e06c <alt_avalon_dma_ioctl+0x334>
  }

  /* Now process the ioctl. */

  switch (req)
    dd98:	e0bffe17 	ldw	r2,-8(fp)
    dd9c:	108002a8 	cmpgeui	r2,r2,10
    dda0:	1000781e 	bne	r2,zero,df84 <alt_avalon_dma_ioctl+0x24c>
    dda4:	e0bffe17 	ldw	r2,-8(fp)
    dda8:	100690ba 	slli	r3,r2,2
    ddac:	00800074 	movhi	r2,1
    ddb0:	10b77004 	addi	r2,r2,-8768
    ddb4:	1885883a 	add	r2,r3,r2
    ddb8:	10800017 	ldw	r2,0(r2)
    ddbc:	1000683a 	jmp	r2
    ddc0:	0000df84 	movi	zero,894
    ddc4:	0000dde8 	cmpgeui	zero,zero,887
    ddc8:	0000de40 	call	de4 <___vfprintf_internal_r+0x5ac>
    ddcc:	0000de6c 	andhi	zero,zero,889
    ddd0:	0000dec4 	movi	zero,891
    ddd4:	0000def0 	cmpltui	zero,zero,891
    ddd8:	0000df0c 	andi	zero,zero,892
    dddc:	0000df2c 	andhi	zero,zero,892
    dde0:	0000df4c 	andi	zero,zero,893
    dde4:	0000df6c 	andhi	zero,zero,893
  {
  case ALT_DMA_TX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_RX_STREAM))
    dde8:	e0bffd17 	ldw	r2,-12(fp)
    ddec:	10800517 	ldw	r2,20(r2)
    ddf0:	1080100c 	andi	r2,r2,64
    ddf4:	10000f1e 	bne	r2,zero,de34 <alt_avalon_dma_ioctl+0xfc>
    {
      IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) arg);
    ddf8:	e0bffd17 	ldw	r2,-12(fp)
    ddfc:	10800017 	ldw	r2,0(r2)
    de00:	10800104 	addi	r2,r2,4
    de04:	e0ffff17 	ldw	r3,-4(fp)
    de08:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_TX_STREAM;
    de0c:	e0bffd17 	ldw	r2,-12(fp)
    de10:	10800517 	ldw	r2,20(r2)
    de14:	10c00814 	ori	r3,r2,32
    de18:	e0bffd17 	ldw	r2,-12(fp)
    de1c:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_rxonly;
    de20:	e0fffd17 	ldw	r3,-12(fp)
    de24:	00800074 	movhi	r2,1
    de28:	10b72704 	addi	r2,r2,-9060
    de2c:	18800715 	stw	r2,28(r3)
    }
    else
    {
      status = -EIO;
    }
    break;
    de30:	00005606 	br	df8c <alt_avalon_dma_ioctl+0x254>
      priv->flags |= ALT_AVALON_DMA_TX_STREAM;
      priv->launch = alt_avalon_dma_launch_rxonly;
    }
    else
    {
      status = -EIO;
    de34:	00bffec4 	movi	r2,-5
    de38:	e0bffb15 	stw	r2,-20(fp)
    }
    break;
    de3c:	00005306 	br	df8c <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_TX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_TX_STREAM;
    de40:	e0bffd17 	ldw	r2,-12(fp)
    de44:	10c00517 	ldw	r3,20(r2)
    de48:	00bff7c4 	movi	r2,-33
    de4c:	1886703a 	and	r3,r3,r2
    de50:	e0bffd17 	ldw	r2,-12(fp)
    de54:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
    de58:	e0fffd17 	ldw	r3,-12(fp)
    de5c:	00800074 	movhi	r2,1
    de60:	10b6c204 	addi	r2,r2,-9464
    de64:	18800715 	stw	r2,28(r3)
    break;
    de68:	00004806 	br	df8c <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_RX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_TX_STREAM))
    de6c:	e0bffd17 	ldw	r2,-12(fp)
    de70:	10800517 	ldw	r2,20(r2)
    de74:	1080080c 	andi	r2,r2,32
    de78:	10000f1e 	bne	r2,zero,deb8 <alt_avalon_dma_ioctl+0x180>
    {
      IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) arg);
    de7c:	e0bffd17 	ldw	r2,-12(fp)
    de80:	10800017 	ldw	r2,0(r2)
    de84:	10800204 	addi	r2,r2,8
    de88:	e0ffff17 	ldw	r3,-4(fp)
    de8c:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_RX_STREAM;
    de90:	e0bffd17 	ldw	r2,-12(fp)
    de94:	10800517 	ldw	r2,20(r2)
    de98:	10c01014 	ori	r3,r2,64
    de9c:	e0bffd17 	ldw	r2,-12(fp)
    dea0:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_txonly;
    dea4:	e0fffd17 	ldw	r3,-12(fp)
    dea8:	00800074 	movhi	r2,1
    deac:	10b70004 	addi	r2,r2,-9216
    deb0:	18800715 	stw	r2,28(r3)
    }
    else
    {
      status = -EIO;
    }
    break;
    deb4:	00003506 	br	df8c <alt_avalon_dma_ioctl+0x254>
      priv->flags |= ALT_AVALON_DMA_RX_STREAM;
      priv->launch = alt_avalon_dma_launch_txonly;
    }
    else
    {
      status = -EIO;
    deb8:	00bffec4 	movi	r2,-5
    debc:	e0bffb15 	stw	r2,-20(fp)
    }
    break;
    dec0:	00003206 	br	df8c <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_RX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_RX_STREAM;
    dec4:	e0bffd17 	ldw	r2,-12(fp)
    dec8:	10c00517 	ldw	r3,20(r2)
    decc:	00bfefc4 	movi	r2,-65
    ded0:	1886703a 	and	r3,r3,r2
    ded4:	e0bffd17 	ldw	r2,-12(fp)
    ded8:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
    dedc:	e0fffd17 	ldw	r3,-12(fp)
    dee0:	00800074 	movhi	r2,1
    dee4:	10b6c204 	addi	r2,r2,-9464
    dee8:	18800715 	stw	r2,28(r3)
    break;
    deec:	00002706 	br	df8c <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_8:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
    def0:	e0bffd17 	ldw	r2,-12(fp)
    def4:	10c00517 	ldw	r3,20(r2)
    def8:	00bffc04 	movi	r2,-16
    defc:	1886703a 	and	r3,r3,r2
    df00:	e0bffd17 	ldw	r2,-12(fp)
    df04:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_8;
    break;
    df08:	00002006 	br	df8c <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_16:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
    df0c:	e0bffd17 	ldw	r2,-12(fp)
    df10:	10c00517 	ldw	r3,20(r2)
    df14:	00bffc04 	movi	r2,-16
    df18:	1884703a 	and	r2,r3,r2
    df1c:	10c00054 	ori	r3,r2,1
    df20:	e0bffd17 	ldw	r2,-12(fp)
    df24:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_16;
    break;
    df28:	00001806 	br	df8c <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_32:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
    df2c:	e0bffd17 	ldw	r2,-12(fp)
    df30:	10c00517 	ldw	r3,20(r2)
    df34:	00bffc04 	movi	r2,-16
    df38:	1884703a 	and	r2,r3,r2
    df3c:	10c000d4 	ori	r3,r2,3
    df40:	e0bffd17 	ldw	r2,-12(fp)
    df44:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_32;
    break;
    df48:	00001006 	br	df8c <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_64:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
    df4c:	e0bffd17 	ldw	r2,-12(fp)
    df50:	10c00517 	ldw	r3,20(r2)
    df54:	00bffc04 	movi	r2,-16
    df58:	1884703a 	and	r2,r3,r2
    df5c:	10c001d4 	ori	r3,r2,7
    df60:	e0bffd17 	ldw	r2,-12(fp)
    df64:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_64;
    break;
    df68:	00000806 	br	df8c <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_128:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
    df6c:	e0bffd17 	ldw	r2,-12(fp)
    df70:	10800517 	ldw	r2,20(r2)
    df74:	10c003d4 	ori	r3,r2,15
    df78:	e0bffd17 	ldw	r2,-12(fp)
    df7c:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_128;
    break;
    df80:	00000206 	br	df8c <alt_avalon_dma_ioctl+0x254>
  default:
    status = -ENOTTY;
    df84:	00bff9c4 	movi	r2,-25
    df88:	e0bffb15 	stw	r2,-20(fp)
  }

  if (!status)
    df8c:	e0bffb17 	ldw	r2,-20(fp)
    df90:	1000351e 	bne	r2,zero,e068 <alt_avalon_dma_ioctl+0x330>
  {
     switch (priv->flags & ALT_AVALON_DMA_MODE_MSK)
    df94:	e0bffd17 	ldw	r2,-12(fp)
    df98:	10800517 	ldw	r2,20(r2)
    df9c:	108003cc 	andi	r2,r2,15
    dfa0:	10c00060 	cmpeqi	r3,r2,1
    dfa4:	1800091e 	bne	r3,zero,dfcc <alt_avalon_dma_ioctl+0x294>
    dfa8:	0080052e 	bgeu	zero,r2,dfc0 <alt_avalon_dma_ioctl+0x288>
    dfac:	10c000e0 	cmpeqi	r3,r2,3
    dfb0:	1800091e 	bne	r3,zero,dfd8 <alt_avalon_dma_ioctl+0x2a0>
    dfb4:	108001e0 	cmpeqi	r2,r2,7
    dfb8:	10000a1e 	bne	r2,zero,dfe4 <alt_avalon_dma_ioctl+0x2ac>
    dfbc:	00000c06 	br	dff0 <alt_avalon_dma_ioctl+0x2b8>
     {
     case ALT_AVALON_DMA_MODE_8:
       mode = ALTERA_AVALON_DMA_CONTROL_BYTE_MSK;
    dfc0:	00800044 	movi	r2,1
    dfc4:	e0bffc15 	stw	r2,-16(fp)
       break;
    dfc8:	00000b06 	br	dff8 <alt_avalon_dma_ioctl+0x2c0>
     case ALT_AVALON_DMA_MODE_16:
       mode = ALTERA_AVALON_DMA_CONTROL_HW_MSK;
    dfcc:	00800084 	movi	r2,2
    dfd0:	e0bffc15 	stw	r2,-16(fp)
       break;
    dfd4:	00000806 	br	dff8 <alt_avalon_dma_ioctl+0x2c0>
     case ALT_AVALON_DMA_MODE_32:
       mode = ALTERA_AVALON_DMA_CONTROL_WORD_MSK;
    dfd8:	00800104 	movi	r2,4
    dfdc:	e0bffc15 	stw	r2,-16(fp)
       break;
    dfe0:	00000506 	br	dff8 <alt_avalon_dma_ioctl+0x2c0>
     case ALT_AVALON_DMA_MODE_64:
       mode = ALTERA_AVALON_DMA_CONTROL_DWORD_MSK;
    dfe4:	00810004 	movi	r2,1024
    dfe8:	e0bffc15 	stw	r2,-16(fp)
       break;
    dfec:	00000206 	br	dff8 <alt_avalon_dma_ioctl+0x2c0>
     default:
       mode = ALTERA_AVALON_DMA_CONTROL_QWORD_MSK;
    dff0:	00820004 	movi	r2,2048
    dff4:	e0bffc15 	stw	r2,-16(fp)
     }

    if (priv->flags & ALT_AVALON_DMA_TX_STREAM)
    dff8:	e0bffd17 	ldw	r2,-12(fp)
    dffc:	10800517 	ldw	r2,20(r2)
    e000:	1080080c 	andi	r2,r2,32
    e004:	10000726 	beq	r2,zero,e024 <alt_avalon_dma_ioctl+0x2ec>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
    e008:	e0bffd17 	ldw	r2,-12(fp)
    e00c:	10800017 	ldw	r2,0(r2)
    e010:	10800604 	addi	r2,r2,24
    e014:	e0fffc17 	ldw	r3,-16(fp)
    e018:	18c07e14 	ori	r3,r3,504
    e01c:	10c00035 	stwio	r3,0(r2)
    e020:	00001106 	br	e068 <alt_avalon_dma_ioctl+0x330>
        ALTERA_AVALON_DMA_CONTROL_REEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_RCON_MSK);
    }
    else if (priv->flags & ALT_AVALON_DMA_RX_STREAM)
    e024:	e0bffd17 	ldw	r2,-12(fp)
    e028:	10800517 	ldw	r2,20(r2)
    e02c:	1080100c 	andi	r2,r2,64
    e030:	10000726 	beq	r2,zero,e050 <alt_avalon_dma_ioctl+0x318>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
    e034:	e0bffd17 	ldw	r2,-12(fp)
    e038:	10800017 	ldw	r2,0(r2)
    e03c:	10800604 	addi	r2,r2,24
    e040:	e0fffc17 	ldw	r3,-16(fp)
    e044:	18c0be14 	ori	r3,r3,760
    e048:	10c00035 	stwio	r3,0(r2)
    e04c:	00000606 	br	e068 <alt_avalon_dma_ioctl+0x330>
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WCON_MSK);
    }
    else
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
    e050:	e0bffd17 	ldw	r2,-12(fp)
    e054:	10800017 	ldw	r2,0(r2)
    e058:	10800604 	addi	r2,r2,24
    e05c:	e0fffc17 	ldw	r3,-16(fp)
    e060:	18c03e14 	ori	r3,r3,248
    e064:	10c00035 	stwio	r3,0(r2)
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);
    }
  }

  return status;
    e068:	e0bffb17 	ldw	r2,-20(fp)
}
    e06c:	e037883a 	mov	sp,fp
    e070:	df000017 	ldw	fp,0(sp)
    e074:	dec00104 	addi	sp,sp,4
    e078:	f800283a 	ret

0000e07c <alt_avalon_dma_tx_ioctl>:
 */

int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,
           int req,
           void* arg)
{
    e07c:	defffb04 	addi	sp,sp,-20
    e080:	dfc00415 	stw	ra,16(sp)
    e084:	df000315 	stw	fp,12(sp)
    e088:	df000304 	addi	fp,sp,12
    e08c:	e13ffd15 	stw	r4,-12(fp)
    e090:	e17ffe15 	stw	r5,-8(fp)
    e094:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_txchan*) dma)->priv,
    e098:	e0bffd17 	ldw	r2,-12(fp)
    e09c:	10800617 	ldw	r2,24(r2)
    e0a0:	e1bfff17 	ldw	r6,-4(fp)
    e0a4:	e17ffe17 	ldw	r5,-8(fp)
    e0a8:	1009883a 	mov	r4,r2
    e0ac:	000dd380 	call	dd38 <alt_avalon_dma_ioctl>
             req,
             arg);
}
    e0b0:	e037883a 	mov	sp,fp
    e0b4:	dfc00117 	ldw	ra,4(sp)
    e0b8:	df000017 	ldw	fp,0(sp)
    e0bc:	dec00204 	addi	sp,sp,8
    e0c0:	f800283a 	ret

0000e0c4 <alt_avalon_dma_rx_ioctl>:
 */

int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,
           int req,
           void* arg)
{
    e0c4:	defffb04 	addi	sp,sp,-20
    e0c8:	dfc00415 	stw	ra,16(sp)
    e0cc:	df000315 	stw	fp,12(sp)
    e0d0:	df000304 	addi	fp,sp,12
    e0d4:	e13ffd15 	stw	r4,-12(fp)
    e0d8:	e17ffe15 	stw	r5,-8(fp)
    e0dc:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_rxchan*) dma)->priv,
    e0e0:	e0bffd17 	ldw	r2,-12(fp)
    e0e4:	10800617 	ldw	r2,24(r2)
    e0e8:	e1bfff17 	ldw	r6,-4(fp)
    e0ec:	e17ffe17 	ldw	r5,-8(fp)
    e0f0:	1009883a 	mov	r4,r2
    e0f4:	000dd380 	call	dd38 <alt_avalon_dma_ioctl>
             req,
             arg);
}
    e0f8:	e037883a 	mov	sp,fp
    e0fc:	dfc00117 	ldw	ra,4(sp)
    e100:	df000017 	ldw	fp,0(sp)
    e104:	dec00204 	addi	sp,sp,8
    e108:	f800283a 	ret

0000e10c <alt_avalon_dma_prepare>:
int alt_avalon_dma_prepare (alt_dma_rxchan   dma,
                            void*            data,
                            alt_u32          len,
                            alt_rxchan_done* done,
                            void*            handle)
{
    e10c:	defff404 	addi	sp,sp,-48
    e110:	dfc00b15 	stw	ra,44(sp)
    e114:	df000a15 	stw	fp,40(sp)
    e118:	df000a04 	addi	fp,sp,40
    e11c:	e13ffc15 	stw	r4,-16(fp)
    e120:	e17ffd15 	stw	r5,-12(fp)
    e124:	e1bffe15 	stw	r6,-8(fp)
    e128:	e1ffff15 	stw	r7,-4(fp)
  alt_u32                end;
  alt_u32                next;
  alt_u32                align_mask;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_rxchan*) dma)->priv;
    e12c:	e0bffc17 	ldw	r2,-16(fp)
    e130:	10800617 	ldw	r2,24(r2)
    e134:	e0bff615 	stw	r2,-40(fp)
  /*
   * Ensure that the data is correctly aligned, and that it's not too
   * big for the device.
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
    e138:	e0bff617 	ldw	r2,-40(fp)
    e13c:	10800517 	ldw	r2,20(r2)
    e140:	108003cc 	andi	r2,r2,15
    e144:	e0bff715 	stw	r2,-36(fp)

  if ((((alt_u32) data) & align_mask) || (len & align_mask) ||
    e148:	e0fffd17 	ldw	r3,-12(fp)
    e14c:	e0bff717 	ldw	r2,-36(fp)
    e150:	1884703a 	and	r2,r3,r2
    e154:	1000081e 	bne	r2,zero,e178 <alt_avalon_dma_prepare+0x6c>
    e158:	e0fffe17 	ldw	r3,-8(fp)
    e15c:	e0bff717 	ldw	r2,-36(fp)
    e160:	1884703a 	and	r2,r3,r2
    e164:	1000041e 	bne	r2,zero,e178 <alt_avalon_dma_prepare+0x6c>
     (len > priv->max_length))
    e168:	e0bff617 	ldw	r2,-40(fp)
    e16c:	10c00617 	ldw	r3,24(r2)
   * big for the device.
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) data) & align_mask) || (len & align_mask) ||
    e170:	e0bffe17 	ldw	r2,-8(fp)
    e174:	1880022e 	bgeu	r3,r2,e180 <alt_avalon_dma_prepare+0x74>
     (len > priv->max_length))
  {
    return -EINVAL;
    e178:	00bffa84 	movi	r2,-22
    e17c:	00002c06 	br	e230 <alt_avalon_dma_prepare+0x124>
  }

  start = priv->rx_start;
    e180:	e0bff617 	ldw	r2,-40(fp)
    e184:	10800317 	ldw	r2,12(r2)
    e188:	e0bff815 	stw	r2,-32(fp)
  end   = priv->rx_end;
    e18c:	e0bff617 	ldw	r2,-40(fp)
    e190:	10800417 	ldw	r2,16(r2)
    e194:	e0bff915 	stw	r2,-28(fp)
  slot  = &priv->rx_buf[end];
    e198:	e0bff917 	ldw	r2,-28(fp)
    e19c:	1004913a 	slli	r2,r2,4
    e1a0:	10801904 	addi	r2,r2,100
    e1a4:	e0fff617 	ldw	r3,-40(fp)
    e1a8:	1885883a 	add	r2,r3,r2
    e1ac:	e0bffa15 	stw	r2,-24(fp)

  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
    e1b0:	e0bff917 	ldw	r2,-28(fp)
    e1b4:	10800044 	addi	r2,r2,1
    e1b8:	108000cc 	andi	r2,r2,3
    e1bc:	e0bffb15 	stw	r2,-20(fp)

  if (next == start)
    e1c0:	e0fffb17 	ldw	r3,-20(fp)
    e1c4:	e0bff817 	ldw	r2,-32(fp)
    e1c8:	1880021e 	bne	r3,r2,e1d4 <alt_avalon_dma_prepare+0xc8>
  {
    return -ENOSPC;
    e1cc:	00bff904 	movi	r2,-28
    e1d0:	00001706 	br	e230 <alt_avalon_dma_prepare+0x124>
  }

  slot->data   = data;
    e1d4:	e0bffa17 	ldw	r2,-24(fp)
    e1d8:	e0fffd17 	ldw	r3,-12(fp)
    e1dc:	10c00015 	stw	r3,0(r2)
  slot->len    = len;
    e1e0:	e0bffa17 	ldw	r2,-24(fp)
    e1e4:	e0fffe17 	ldw	r3,-8(fp)
    e1e8:	10c00115 	stw	r3,4(r2)
  slot->done   = done;
    e1ec:	e0bffa17 	ldw	r2,-24(fp)
    e1f0:	e0ffff17 	ldw	r3,-4(fp)
    e1f4:	10c00215 	stw	r3,8(r2)
  slot->handle = handle;
    e1f8:	e0bffa17 	ldw	r2,-24(fp)
    e1fc:	e0c00217 	ldw	r3,8(fp)
    e200:	10c00315 	stw	r3,12(r2)

  priv->rx_end = next;
    e204:	e0bff617 	ldw	r2,-40(fp)
    e208:	e0fffb17 	ldw	r3,-20(fp)
    e20c:	10c00415 	stw	r3,16(r2)

  if (!priv->active)
    e210:	e0bff617 	ldw	r2,-40(fp)
    e214:	10800817 	ldw	r2,32(r2)
    e218:	1000041e 	bne	r2,zero,e22c <alt_avalon_dma_prepare+0x120>
  {
    priv->launch (priv);
    e21c:	e0bff617 	ldw	r2,-40(fp)
    e220:	10800717 	ldw	r2,28(r2)
    e224:	e13ff617 	ldw	r4,-40(fp)
    e228:	103ee83a 	callr	r2
  }

  return 0;
    e22c:	0005883a 	mov	r2,zero
}
    e230:	e037883a 	mov	sp,fp
    e234:	dfc00117 	ldw	ra,4(sp)
    e238:	df000017 	ldw	fp,0(sp)
    e23c:	dec00204 	addi	sp,sp,8
    e240:	f800283a 	ret

0000e244 <alt_avalon_dma_space>:
 *
 * A negative value indicates that the value could not be determined.
 */

int alt_avalon_dma_space (alt_dma_txchan dma)
{
    e244:	defffb04 	addi	sp,sp,-20
    e248:	df000415 	stw	fp,16(sp)
    e24c:	df000404 	addi	fp,sp,16
    e250:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_priv* priv;

  alt_u32 start;
  alt_u32 end;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
    e254:	e0bfff17 	ldw	r2,-4(fp)
    e258:	10800617 	ldw	r2,24(r2)
    e25c:	e0bffc15 	stw	r2,-16(fp)

  start = priv->tx_start;
    e260:	e0bffc17 	ldw	r2,-16(fp)
    e264:	10800117 	ldw	r2,4(r2)
    e268:	e0bffd15 	stw	r2,-12(fp)
  end   = priv->tx_end;
    e26c:	e0bffc17 	ldw	r2,-16(fp)
    e270:	10800217 	ldw	r2,8(r2)
    e274:	e0bffe15 	stw	r2,-8(fp)

  return (start > end) ? start - end - 1 :
    e278:	e0bffd17 	ldw	r2,-12(fp)
    e27c:	e0fffe17 	ldw	r3,-8(fp)
    e280:	1880052e 	bgeu	r3,r2,e298 <alt_avalon_dma_space+0x54>
    e284:	e0fffd17 	ldw	r3,-12(fp)
    e288:	e0bffe17 	ldw	r2,-8(fp)
    e28c:	1885c83a 	sub	r2,r3,r2
    e290:	10bfffc4 	addi	r2,r2,-1
    e294:	00000406 	br	e2a8 <alt_avalon_dma_space+0x64>
    ALT_AVALON_DMA_NSLOTS + start - end - 1;
    e298:	e0fffd17 	ldw	r3,-12(fp)
    e29c:	e0bffe17 	ldw	r2,-8(fp)
    e2a0:	1885c83a 	sub	r2,r3,r2
    e2a4:	108000c4 	addi	r2,r2,3
}
    e2a8:	e037883a 	mov	sp,fp
    e2ac:	df000017 	ldw	fp,0(sp)
    e2b0:	dec00104 	addi	sp,sp,4
    e2b4:	f800283a 	ret

0000e2b8 <alt_avalon_dma_send>:
int alt_avalon_dma_send (alt_dma_txchan   dma,
                         const void*      from,
                         alt_u32          len,
                         alt_txchan_done* done,
                         void*            handle)
{
    e2b8:	defff404 	addi	sp,sp,-48
    e2bc:	dfc00b15 	stw	ra,44(sp)
    e2c0:	df000a15 	stw	fp,40(sp)
    e2c4:	df000a04 	addi	fp,sp,40
    e2c8:	e13ffc15 	stw	r4,-16(fp)
    e2cc:	e17ffd15 	stw	r5,-12(fp)
    e2d0:	e1bffe15 	stw	r6,-8(fp)
    e2d4:	e1ffff15 	stw	r7,-4(fp)
  alt_u32                end;
  alt_u32                align_mask;
  alt_u32                next;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
    e2d8:	e0bffc17 	ldw	r2,-16(fp)
    e2dc:	10800617 	ldw	r2,24(r2)
    e2e0:	e0bff615 	stw	r2,-40(fp)
  /*
   * Ensure that the data is correctly aligned, and not too large
   * for the device
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
    e2e4:	e0bff617 	ldw	r2,-40(fp)
    e2e8:	10800517 	ldw	r2,20(r2)
    e2ec:	108003cc 	andi	r2,r2,15
    e2f0:	e0bff715 	stw	r2,-36(fp)

  if ((((alt_u32) from) & align_mask) ||
    e2f4:	e0fffd17 	ldw	r3,-12(fp)
    e2f8:	e0bff717 	ldw	r2,-36(fp)
    e2fc:	1884703a 	and	r2,r3,r2
    e300:	1000081e 	bne	r2,zero,e324 <alt_avalon_dma_send+0x6c>
        (len & align_mask)            ||
    e304:	e0fffe17 	ldw	r3,-8(fp)
    e308:	e0bff717 	ldw	r2,-36(fp)
    e30c:	1884703a 	and	r2,r3,r2
   * for the device
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) from) & align_mask) ||
    e310:	1000041e 	bne	r2,zero,e324 <alt_avalon_dma_send+0x6c>
        (len & align_mask)            ||
        (len > priv->max_length))
    e314:	e0bff617 	ldw	r2,-40(fp)
    e318:	10c00617 	ldw	r3,24(r2)
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) from) & align_mask) ||
        (len & align_mask)            ||
    e31c:	e0bffe17 	ldw	r2,-8(fp)
    e320:	1880022e 	bgeu	r3,r2,e32c <alt_avalon_dma_send+0x74>
        (len > priv->max_length))
  {
    return -EINVAL;
    e324:	00bffa84 	movi	r2,-22
    e328:	00002c06 	br	e3dc <alt_avalon_dma_send+0x124>
  }

  start = priv->tx_start;
    e32c:	e0bff617 	ldw	r2,-40(fp)
    e330:	10800117 	ldw	r2,4(r2)
    e334:	e0bff815 	stw	r2,-32(fp)
  end   = priv->tx_end;
    e338:	e0bff617 	ldw	r2,-40(fp)
    e33c:	10800217 	ldw	r2,8(r2)
    e340:	e0bff915 	stw	r2,-28(fp)
  slot  = &priv->tx_buf[end];
    e344:	e0bff917 	ldw	r2,-28(fp)
    e348:	1004913a 	slli	r2,r2,4
    e34c:	10800904 	addi	r2,r2,36
    e350:	e0fff617 	ldw	r3,-40(fp)
    e354:	1885883a 	add	r2,r3,r2
    e358:	e0bffa15 	stw	r2,-24(fp)
  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
    e35c:	e0bff917 	ldw	r2,-28(fp)
    e360:	10800044 	addi	r2,r2,1
    e364:	108000cc 	andi	r2,r2,3
    e368:	e0bffb15 	stw	r2,-20(fp)

  if (next == start)
    e36c:	e0fffb17 	ldw	r3,-20(fp)
    e370:	e0bff817 	ldw	r2,-32(fp)
    e374:	1880021e 	bne	r3,r2,e380 <alt_avalon_dma_send+0xc8>
  {
    return -ENOSPC;
    e378:	00bff904 	movi	r2,-28
    e37c:	00001706 	br	e3dc <alt_avalon_dma_send+0x124>
  }

  /* Fill in the descriptor */

  slot->from   = from;
    e380:	e0bffa17 	ldw	r2,-24(fp)
    e384:	e0fffd17 	ldw	r3,-12(fp)
    e388:	10c00015 	stw	r3,0(r2)
  slot->len    = len;
    e38c:	e0bffa17 	ldw	r2,-24(fp)
    e390:	e0fffe17 	ldw	r3,-8(fp)
    e394:	10c00115 	stw	r3,4(r2)
  slot->done   = done;
    e398:	e0bffa17 	ldw	r2,-24(fp)
    e39c:	e0ffff17 	ldw	r3,-4(fp)
    e3a0:	10c00215 	stw	r3,8(r2)
  slot->handle = handle;
    e3a4:	e0bffa17 	ldw	r2,-24(fp)
    e3a8:	e0c00217 	ldw	r3,8(fp)
    e3ac:	10c00315 	stw	r3,12(r2)

  priv->tx_end = next;
    e3b0:	e0bff617 	ldw	r2,-40(fp)
    e3b4:	e0fffb17 	ldw	r3,-20(fp)
    e3b8:	10c00215 	stw	r3,8(r2)

  if (!priv->active)
    e3bc:	e0bff617 	ldw	r2,-40(fp)
    e3c0:	10800817 	ldw	r2,32(r2)
    e3c4:	1000041e 	bne	r2,zero,e3d8 <alt_avalon_dma_send+0x120>
  {
    priv->launch (priv);
    e3c8:	e0bff617 	ldw	r2,-40(fp)
    e3cc:	10800717 	ldw	r2,28(r2)
    e3d0:	e13ff617 	ldw	r4,-40(fp)
    e3d4:	103ee83a 	callr	r2
  }

  return 0;
    e3d8:	0005883a 	mov	r2,zero
}
    e3dc:	e037883a 	mov	sp,fp
    e3e0:	dfc00117 	ldw	ra,4(sp)
    e3e4:	df000017 	ldw	fp,0(sp)
    e3e8:	dec00204 	addi	sp,sp,8
    e3ec:	f800283a 	ret

0000e3f0 <alt_avalon_dma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_dma_irq (void* context)
#else
static void alt_avalon_dma_irq (void* context, alt_u32 id)
#endif
{
    e3f0:	defff004 	addi	sp,sp,-64
    e3f4:	dfc00f15 	stw	ra,60(sp)
    e3f8:	df000e15 	stw	fp,56(sp)
    e3fc:	df000e04 	addi	fp,sp,56
    e400:	e13ffe15 	stw	r4,-8(fp)
    e404:	e17fff15 	stw	r5,-4(fp)
  alt_avalon_dma_priv* priv = (alt_avalon_dma_priv*) context;
    e408:	e0bffe17 	ldw	r2,-8(fp)
    e40c:	e0bff215 	stw	r2,-56(fp)
  alt_u32                rx_start;
  int                    stream_tx;
  int                    stream_rx;
  alt_irq_context        cpu_sr;

  stream_tx = priv->flags & ALT_AVALON_DMA_TX_STREAM;
    e410:	e0bff217 	ldw	r2,-56(fp)
    e414:	10800517 	ldw	r2,20(r2)
    e418:	1080080c 	andi	r2,r2,32
    e41c:	e0bff315 	stw	r2,-52(fp)
  stream_rx = priv->flags & ALT_AVALON_DMA_RX_STREAM;
    e420:	e0bff217 	ldw	r2,-56(fp)
    e424:	10800517 	ldw	r2,20(r2)
    e428:	1080100c 	andi	r2,r2,64
    e42c:	e0bff415 	stw	r2,-48(fp)

  tx_start = priv->tx_start;
    e430:	e0bff217 	ldw	r2,-56(fp)
    e434:	10800117 	ldw	r2,4(r2)
    e438:	e0bff515 	stw	r2,-44(fp)
  rx_start = priv->rx_start;
    e43c:	e0bff217 	ldw	r2,-56(fp)
    e440:	10800317 	ldw	r2,12(r2)
    e444:	e0bff615 	stw	r2,-40(fp)

  tx_slot = &priv->tx_buf[tx_start];
    e448:	e0bff517 	ldw	r2,-44(fp)
    e44c:	1004913a 	slli	r2,r2,4
    e450:	10800904 	addi	r2,r2,36
    e454:	e0fff217 	ldw	r3,-56(fp)
    e458:	1885883a 	add	r2,r3,r2
    e45c:	e0bff715 	stw	r2,-36(fp)
  rx_slot = &priv->rx_buf[rx_start];
    e460:	e0bff617 	ldw	r2,-40(fp)
    e464:	1004913a 	slli	r2,r2,4
    e468:	10801904 	addi	r2,r2,100
    e46c:	e0fff217 	ldw	r3,-56(fp)
    e470:	1885883a 	add	r2,r3,r2
    e474:	e0bff815 	stw	r2,-32(fp)

  /* Increment the descriptors */

  if (!stream_tx)
    e478:	e0bff317 	ldw	r2,-52(fp)
    e47c:	1000051e 	bne	r2,zero,e494 <alt_avalon_dma_irq+0xa4>
  {
    priv->tx_start = (tx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
    e480:	e0bff517 	ldw	r2,-44(fp)
    e484:	10800044 	addi	r2,r2,1
    e488:	10c000cc 	andi	r3,r2,3
    e48c:	e0bff217 	ldw	r2,-56(fp)
    e490:	10c00115 	stw	r3,4(r2)
  }
  if (!stream_rx)
    e494:	e0bff417 	ldw	r2,-48(fp)
    e498:	1000051e 	bne	r2,zero,e4b0 <alt_avalon_dma_irq+0xc0>
  {
    priv->rx_start = (rx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
    e49c:	e0bff617 	ldw	r2,-40(fp)
    e4a0:	10800044 	addi	r2,r2,1
    e4a4:	10c000cc 	andi	r3,r2,3
    e4a8:	e0bff217 	ldw	r2,-56(fp)
    e4ac:	10c00315 	stw	r3,12(r2)
  }

  /* clear the interrupt */

  IOWR_ALTERA_AVALON_DMA_STATUS (priv->base, 0);
    e4b0:	e0bff217 	ldw	r2,-56(fp)
    e4b4:	10800017 	ldw	r2,0(r2)
    e4b8:	0007883a 	mov	r3,zero
    e4bc:	10c00035 	stwio	r3,0(r2)
  
  /* Dummy read to ensure IRQ is cleared prior to ISR completion*/
  IORD_ALTERA_AVALON_DMA_STATUS (priv->base);
    e4c0:	e0bff217 	ldw	r2,-56(fp)
    e4c4:	10800017 	ldw	r2,0(r2)
    e4c8:	10800037 	ldwio	r2,0(r2)

  /* launch the next transaction */

  priv->launch (priv);
    e4cc:	e0bff217 	ldw	r2,-56(fp)
    e4d0:	10800717 	ldw	r2,28(r2)
    e4d4:	e13ff217 	ldw	r4,-56(fp)
    e4d8:	103ee83a 	callr	r2
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the DMA driver to support 
   * interrupt preemption.
   */
  if (!stream_tx && tx_slot->done)
    e4dc:	e0bff317 	ldw	r2,-52(fp)
    e4e0:	1000151e 	bne	r2,zero,e538 <alt_avalon_dma_irq+0x148>
    e4e4:	e0bff717 	ldw	r2,-36(fp)
    e4e8:	10800217 	ldw	r2,8(r2)
    e4ec:	10001226 	beq	r2,zero,e538 <alt_avalon_dma_irq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e4f0:	0005303a 	rdctl	r2,status
    e4f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e4f8:	e0fffb17 	ldw	r3,-20(fp)
    e4fc:	00bfff84 	movi	r2,-2
    e500:	1884703a 	and	r2,r3,r2
    e504:	1001703a 	wrctl	status,r2
  
  return context;
    e508:	e0bffb17 	ldw	r2,-20(fp)
  {
    cpu_sr = alt_irq_disable_all();
    e50c:	e0bffa15 	stw	r2,-24(fp)
    tx_slot->done (tx_slot->handle);
    e510:	e0bff717 	ldw	r2,-36(fp)
    e514:	10800217 	ldw	r2,8(r2)
    e518:	e0fff717 	ldw	r3,-36(fp)
    e51c:	18c00317 	ldw	r3,12(r3)
    e520:	1809883a 	mov	r4,r3
    e524:	103ee83a 	callr	r2
    e528:	e0bffa17 	ldw	r2,-24(fp)
    e52c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e530:	e0bffd17 	ldw	r2,-12(fp)
    e534:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
    
  }
  if (!stream_rx && rx_slot->done)
    e538:	e0bff417 	ldw	r2,-48(fp)
    e53c:	1000171e 	bne	r2,zero,e59c <alt_avalon_dma_irq+0x1ac>
    e540:	e0bff817 	ldw	r2,-32(fp)
    e544:	10800217 	ldw	r2,8(r2)
    e548:	10001426 	beq	r2,zero,e59c <alt_avalon_dma_irq+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e54c:	0005303a 	rdctl	r2,status
    e550:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e554:	e0fffc17 	ldw	r3,-16(fp)
    e558:	00bfff84 	movi	r2,-2
    e55c:	1884703a 	and	r2,r3,r2
    e560:	1001703a 	wrctl	status,r2
  
  return context;
    e564:	e0bffc17 	ldw	r2,-16(fp)
  {
    cpu_sr = alt_irq_disable_all();
    e568:	e0bffa15 	stw	r2,-24(fp)
    rx_slot->done (rx_slot->handle, rx_slot->data);
    e56c:	e0bff817 	ldw	r2,-32(fp)
    e570:	10800217 	ldw	r2,8(r2)
    e574:	e0fff817 	ldw	r3,-32(fp)
    e578:	19000317 	ldw	r4,12(r3)
    e57c:	e0fff817 	ldw	r3,-32(fp)
    e580:	18c00017 	ldw	r3,0(r3)
    e584:	180b883a 	mov	r5,r3
    e588:	103ee83a 	callr	r2
    e58c:	e0bffa17 	ldw	r2,-24(fp)
    e590:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e594:	e0bff917 	ldw	r2,-28(fp)
    e598:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
    e59c:	0001883a 	nop
    e5a0:	e037883a 	mov	sp,fp
    e5a4:	dfc00117 	ldw	ra,4(sp)
    e5a8:	df000017 	ldw	fp,0(sp)
    e5ac:	dec00204 	addi	sp,sp,8
    e5b0:	f800283a 	ret

0000e5b4 <alt_avalon_dma_init>:
void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,
                          alt_avalon_dma_rxchan* rx,
                          void*                  base,
                          alt_u32                ic_id,
                          alt_u32                irq)
{
    e5b4:	defffa04 	addi	sp,sp,-24
    e5b8:	dfc00515 	stw	ra,20(sp)
    e5bc:	df000415 	stw	fp,16(sp)
    e5c0:	df000404 	addi	fp,sp,16
    e5c4:	e13ffc15 	stw	r4,-16(fp)
    e5c8:	e17ffd15 	stw	r5,-12(fp)
    e5cc:	e1bffe15 	stw	r6,-8(fp)
    e5d0:	e1ffff15 	stw	r7,-4(fp)

  /* Halt any current transactions (reset the device) */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
    e5d4:	e0bffe17 	ldw	r2,-8(fp)
    e5d8:	10800604 	addi	r2,r2,24
    e5dc:	00c40004 	movi	r3,4096
    e5e0:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
    e5e4:	e0bffe17 	ldw	r2,-8(fp)
    e5e8:	10800604 	addi	r2,r2,24
    e5ec:	00c40004 	movi	r3,4096
    e5f0:	10c00035 	stwio	r3,0(r2)

  /* Set the default mode of the device (32 bit block reads and writes from/to memory). */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base,
    e5f4:	e0bffe17 	ldw	r2,-8(fp)
    e5f8:	10800604 	addi	r2,r2,24
    e5fc:	00c03f04 	movi	r3,252
    e600:	10c00035 	stwio	r3,0(r2)
                          ALTERA_AVALON_DMA_CONTROL_REEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);

  /* Clear any pending interrupts and the DONE flag */
  IOWR_ALTERA_AVALON_DMA_STATUS (base, 0);
    e604:	0007883a 	mov	r3,zero
    e608:	e0bffe17 	ldw	r2,-8(fp)
    e60c:	10c00035 	stwio	r3,0(r2)
   * system.
   */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if (alt_ic_isr_register(ic_id, irq, alt_avalon_dma_irq, tx->priv, 0x0) >= 0)
#else
  if (alt_irq_register (irq, tx->priv, alt_avalon_dma_irq) >= 0)
    e610:	e0bffc17 	ldw	r2,-16(fp)
    e614:	10800617 	ldw	r2,24(r2)
    e618:	01800074 	movhi	r6,1
    e61c:	31b8fc04 	addi	r6,r6,-7184
    e620:	100b883a 	mov	r5,r2
    e624:	e1000217 	ldw	r4,8(fp)
    e628:	000fb6c0 	call	fb6c <alt_irq_register>
    e62c:	10000616 	blt	r2,zero,e648 <alt_avalon_dma_init+0x94>
#endif  
  {
    alt_dma_txchan_reg (&tx->dev);
    e630:	e0bffc17 	ldw	r2,-16(fp)
    e634:	1009883a 	mov	r4,r2
    e638:	000da980 	call	da98 <alt_dma_txchan_reg>
    alt_dma_rxchan_reg (&rx->dev);
    e63c:	e0bffd17 	ldw	r2,-12(fp)
    e640:	1009883a 	mov	r4,r2
    e644:	000dad00 	call	dad0 <alt_dma_rxchan_reg>
  }
}
    e648:	0001883a 	nop
    e64c:	e037883a 	mov	sp,fp
    e650:	dfc00117 	ldw	ra,4(sp)
    e654:	df000017 	ldw	fp,0(sp)
    e658:	dec00204 	addi	sp,sp,8
    e65c:	f800283a 	ret

0000e660 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    e660:	defffa04 	addi	sp,sp,-24
    e664:	dfc00515 	stw	ra,20(sp)
    e668:	df000415 	stw	fp,16(sp)
    e66c:	df000404 	addi	fp,sp,16
    e670:	e13ffd15 	stw	r4,-12(fp)
    e674:	e17ffe15 	stw	r5,-8(fp)
    e678:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e67c:	e0bffd17 	ldw	r2,-12(fp)
    e680:	10800017 	ldw	r2,0(r2)
    e684:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    e688:	e0bffc17 	ldw	r2,-16(fp)
    e68c:	10c00a04 	addi	r3,r2,40
    e690:	e0bffd17 	ldw	r2,-12(fp)
    e694:	10800217 	ldw	r2,8(r2)
    e698:	100f883a 	mov	r7,r2
    e69c:	e1bfff17 	ldw	r6,-4(fp)
    e6a0:	e17ffe17 	ldw	r5,-8(fp)
    e6a4:	1809883a 	mov	r4,r3
    e6a8:	000ec900 	call	ec90 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    e6ac:	e037883a 	mov	sp,fp
    e6b0:	dfc00117 	ldw	ra,4(sp)
    e6b4:	df000017 	ldw	fp,0(sp)
    e6b8:	dec00204 	addi	sp,sp,8
    e6bc:	f800283a 	ret

0000e6c0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    e6c0:	defffa04 	addi	sp,sp,-24
    e6c4:	dfc00515 	stw	ra,20(sp)
    e6c8:	df000415 	stw	fp,16(sp)
    e6cc:	df000404 	addi	fp,sp,16
    e6d0:	e13ffd15 	stw	r4,-12(fp)
    e6d4:	e17ffe15 	stw	r5,-8(fp)
    e6d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e6dc:	e0bffd17 	ldw	r2,-12(fp)
    e6e0:	10800017 	ldw	r2,0(r2)
    e6e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    e6e8:	e0bffc17 	ldw	r2,-16(fp)
    e6ec:	10c00a04 	addi	r3,r2,40
    e6f0:	e0bffd17 	ldw	r2,-12(fp)
    e6f4:	10800217 	ldw	r2,8(r2)
    e6f8:	100f883a 	mov	r7,r2
    e6fc:	e1bfff17 	ldw	r6,-4(fp)
    e700:	e17ffe17 	ldw	r5,-8(fp)
    e704:	1809883a 	mov	r4,r3
    e708:	000eeac0 	call	eeac <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    e70c:	e037883a 	mov	sp,fp
    e710:	dfc00117 	ldw	ra,4(sp)
    e714:	df000017 	ldw	fp,0(sp)
    e718:	dec00204 	addi	sp,sp,8
    e71c:	f800283a 	ret

0000e720 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    e720:	defffc04 	addi	sp,sp,-16
    e724:	dfc00315 	stw	ra,12(sp)
    e728:	df000215 	stw	fp,8(sp)
    e72c:	df000204 	addi	fp,sp,8
    e730:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e734:	e0bfff17 	ldw	r2,-4(fp)
    e738:	10800017 	ldw	r2,0(r2)
    e73c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    e740:	e0bffe17 	ldw	r2,-8(fp)
    e744:	10c00a04 	addi	r3,r2,40
    e748:	e0bfff17 	ldw	r2,-4(fp)
    e74c:	10800217 	ldw	r2,8(r2)
    e750:	100b883a 	mov	r5,r2
    e754:	1809883a 	mov	r4,r3
    e758:	000eb380 	call	eb38 <altera_avalon_jtag_uart_close>
}
    e75c:	e037883a 	mov	sp,fp
    e760:	dfc00117 	ldw	ra,4(sp)
    e764:	df000017 	ldw	fp,0(sp)
    e768:	dec00204 	addi	sp,sp,8
    e76c:	f800283a 	ret

0000e770 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    e770:	defffa04 	addi	sp,sp,-24
    e774:	dfc00515 	stw	ra,20(sp)
    e778:	df000415 	stw	fp,16(sp)
    e77c:	df000404 	addi	fp,sp,16
    e780:	e13ffd15 	stw	r4,-12(fp)
    e784:	e17ffe15 	stw	r5,-8(fp)
    e788:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    e78c:	e0bffd17 	ldw	r2,-12(fp)
    e790:	10800017 	ldw	r2,0(r2)
    e794:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    e798:	e0bffc17 	ldw	r2,-16(fp)
    e79c:	10800a04 	addi	r2,r2,40
    e7a0:	e1bfff17 	ldw	r6,-4(fp)
    e7a4:	e17ffe17 	ldw	r5,-8(fp)
    e7a8:	1009883a 	mov	r4,r2
    e7ac:	000eba00 	call	eba0 <altera_avalon_jtag_uart_ioctl>
}
    e7b0:	e037883a 	mov	sp,fp
    e7b4:	dfc00117 	ldw	ra,4(sp)
    e7b8:	df000017 	ldw	fp,0(sp)
    e7bc:	dec00204 	addi	sp,sp,8
    e7c0:	f800283a 	ret

0000e7c4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    e7c4:	defffb04 	addi	sp,sp,-20
    e7c8:	dfc00415 	stw	ra,16(sp)
    e7cc:	df000315 	stw	fp,12(sp)
    e7d0:	df000304 	addi	fp,sp,12
    e7d4:	e13ffd15 	stw	r4,-12(fp)
    e7d8:	e17ffe15 	stw	r5,-8(fp)
    e7dc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e7e0:	e0bffd17 	ldw	r2,-12(fp)
    e7e4:	00c00044 	movi	r3,1
    e7e8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    e7ec:	e0bffd17 	ldw	r2,-12(fp)
    e7f0:	10800017 	ldw	r2,0(r2)
    e7f4:	10800104 	addi	r2,r2,4
    e7f8:	1007883a 	mov	r3,r2
    e7fc:	e0bffd17 	ldw	r2,-12(fp)
    e800:	10800817 	ldw	r2,32(r2)
    e804:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    e808:	e0bfff17 	ldw	r2,-4(fp)
    e80c:	01800074 	movhi	r6,1
    e810:	31ba2004 	addi	r6,r6,-6016
    e814:	e17ffd17 	ldw	r5,-12(fp)
    e818:	1009883a 	mov	r4,r2
    e81c:	000fb6c0 	call	fb6c <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    e820:	e0bffd17 	ldw	r2,-12(fp)
    e824:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    e828:	e0bffd17 	ldw	r2,-12(fp)
    e82c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    e830:	00800074 	movhi	r2,1
    e834:	10910304 	addi	r2,r2,17420
    e838:	10800017 	ldw	r2,0(r2)
    e83c:	e1fffd17 	ldw	r7,-12(fp)
    e840:	01800074 	movhi	r6,1
    e844:	31baa404 	addi	r6,r6,-5488
    e848:	100b883a 	mov	r5,r2
    e84c:	1809883a 	mov	r4,r3
    e850:	000f5640 	call	f564 <alt_alarm_start>
    e854:	1000040e 	bge	r2,zero,e868 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    e858:	e0fffd17 	ldw	r3,-12(fp)
    e85c:	00a00034 	movhi	r2,32768
    e860:	10bfffc4 	addi	r2,r2,-1
    e864:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    e868:	0001883a 	nop
    e86c:	e037883a 	mov	sp,fp
    e870:	dfc00117 	ldw	ra,4(sp)
    e874:	df000017 	ldw	fp,0(sp)
    e878:	dec00204 	addi	sp,sp,8
    e87c:	f800283a 	ret

0000e880 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    e880:	defff704 	addi	sp,sp,-36
    e884:	df000815 	stw	fp,32(sp)
    e888:	df000804 	addi	fp,sp,32
    e88c:	e13ffe15 	stw	r4,-8(fp)
    e890:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    e894:	e0bffe17 	ldw	r2,-8(fp)
    e898:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
    e89c:	e0bffa17 	ldw	r2,-24(fp)
    e8a0:	10800017 	ldw	r2,0(r2)
    e8a4:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e8a8:	e0bffb17 	ldw	r2,-20(fp)
    e8ac:	10800104 	addi	r2,r2,4
    e8b0:	10800037 	ldwio	r2,0(r2)
    e8b4:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    e8b8:	e0bffc17 	ldw	r2,-16(fp)
    e8bc:	1080c00c 	andi	r2,r2,768
    e8c0:	10006d26 	beq	r2,zero,ea78 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    e8c4:	e0bffc17 	ldw	r2,-16(fp)
    e8c8:	1080400c 	andi	r2,r2,256
    e8cc:	10003526 	beq	r2,zero,e9a4 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    e8d0:	00800074 	movhi	r2,1
    e8d4:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e8d8:	e0bffa17 	ldw	r2,-24(fp)
    e8dc:	10800a17 	ldw	r2,40(r2)
    e8e0:	10800044 	addi	r2,r2,1
    e8e4:	1081ffcc 	andi	r2,r2,2047
    e8e8:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
    e8ec:	e0bffa17 	ldw	r2,-24(fp)
    e8f0:	10c00b17 	ldw	r3,44(r2)
    e8f4:	e0bffd17 	ldw	r2,-12(fp)
    e8f8:	18801526 	beq	r3,r2,e950 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    e8fc:	e0bffb17 	ldw	r2,-20(fp)
    e900:	10800037 	ldwio	r2,0(r2)
    e904:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    e908:	e0bff817 	ldw	r2,-32(fp)
    e90c:	10a0000c 	andi	r2,r2,32768
    e910:	10001126 	beq	r2,zero,e958 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    e914:	e0bffa17 	ldw	r2,-24(fp)
    e918:	10800a17 	ldw	r2,40(r2)
    e91c:	e0fff817 	ldw	r3,-32(fp)
    e920:	1809883a 	mov	r4,r3
    e924:	e0fffa17 	ldw	r3,-24(fp)
    e928:	1885883a 	add	r2,r3,r2
    e92c:	10800e04 	addi	r2,r2,56
    e930:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e934:	e0bffa17 	ldw	r2,-24(fp)
    e938:	10800a17 	ldw	r2,40(r2)
    e93c:	10800044 	addi	r2,r2,1
    e940:	10c1ffcc 	andi	r3,r2,2047
    e944:	e0bffa17 	ldw	r2,-24(fp)
    e948:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    e94c:	003fe206 	br	e8d8 <altera_avalon_jtag_uart_irq+0x58>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    e950:	0001883a 	nop
    e954:	00000106 	br	e95c <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    e958:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    e95c:	e0bff817 	ldw	r2,-32(fp)
    e960:	10bfffec 	andhi	r2,r2,65535
    e964:	10000f26 	beq	r2,zero,e9a4 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e968:	e0bffa17 	ldw	r2,-24(fp)
    e96c:	10c00817 	ldw	r3,32(r2)
    e970:	00bfff84 	movi	r2,-2
    e974:	1886703a 	and	r3,r3,r2
    e978:	e0bffa17 	ldw	r2,-24(fp)
    e97c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    e980:	e0bffb17 	ldw	r2,-20(fp)
    e984:	10800104 	addi	r2,r2,4
    e988:	1007883a 	mov	r3,r2
    e98c:	e0bffa17 	ldw	r2,-24(fp)
    e990:	10800817 	ldw	r2,32(r2)
    e994:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e998:	e0bffb17 	ldw	r2,-20(fp)
    e99c:	10800104 	addi	r2,r2,4
    e9a0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    e9a4:	e0bffc17 	ldw	r2,-16(fp)
    e9a8:	1080800c 	andi	r2,r2,512
    e9ac:	103fbe26 	beq	r2,zero,e8a8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    e9b0:	e0bffc17 	ldw	r2,-16(fp)
    e9b4:	1004d43a 	srli	r2,r2,16
    e9b8:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    e9bc:	00001406 	br	ea10 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    e9c0:	e0bffb17 	ldw	r2,-20(fp)
    e9c4:	e0fffa17 	ldw	r3,-24(fp)
    e9c8:	18c00d17 	ldw	r3,52(r3)
    e9cc:	e13ffa17 	ldw	r4,-24(fp)
    e9d0:	20c7883a 	add	r3,r4,r3
    e9d4:	18c20e04 	addi	r3,r3,2104
    e9d8:	18c00003 	ldbu	r3,0(r3)
    e9dc:	18c03fcc 	andi	r3,r3,255
    e9e0:	18c0201c 	xori	r3,r3,128
    e9e4:	18ffe004 	addi	r3,r3,-128
    e9e8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e9ec:	e0bffa17 	ldw	r2,-24(fp)
    e9f0:	10800d17 	ldw	r2,52(r2)
    e9f4:	10800044 	addi	r2,r2,1
    e9f8:	10c1ffcc 	andi	r3,r2,2047
    e9fc:	e0bffa17 	ldw	r2,-24(fp)
    ea00:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    ea04:	e0bff917 	ldw	r2,-28(fp)
    ea08:	10bfffc4 	addi	r2,r2,-1
    ea0c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    ea10:	e0bff917 	ldw	r2,-28(fp)
    ea14:	10000526 	beq	r2,zero,ea2c <altera_avalon_jtag_uart_irq+0x1ac>
    ea18:	e0bffa17 	ldw	r2,-24(fp)
    ea1c:	10c00d17 	ldw	r3,52(r2)
    ea20:	e0bffa17 	ldw	r2,-24(fp)
    ea24:	10800c17 	ldw	r2,48(r2)
    ea28:	18bfe51e 	bne	r3,r2,e9c0 <altera_avalon_jtag_uart_irq+0x140>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    ea2c:	e0bff917 	ldw	r2,-28(fp)
    ea30:	103f9d26 	beq	r2,zero,e8a8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ea34:	e0bffa17 	ldw	r2,-24(fp)
    ea38:	10c00817 	ldw	r3,32(r2)
    ea3c:	00bfff44 	movi	r2,-3
    ea40:	1886703a 	and	r3,r3,r2
    ea44:	e0bffa17 	ldw	r2,-24(fp)
    ea48:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ea4c:	e0bffa17 	ldw	r2,-24(fp)
    ea50:	10800017 	ldw	r2,0(r2)
    ea54:	10800104 	addi	r2,r2,4
    ea58:	1007883a 	mov	r3,r2
    ea5c:	e0bffa17 	ldw	r2,-24(fp)
    ea60:	10800817 	ldw	r2,32(r2)
    ea64:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ea68:	e0bffb17 	ldw	r2,-20(fp)
    ea6c:	10800104 	addi	r2,r2,4
    ea70:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    ea74:	003f8c06 	br	e8a8 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    ea78:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    ea7c:	0001883a 	nop
    ea80:	e037883a 	mov	sp,fp
    ea84:	df000017 	ldw	fp,0(sp)
    ea88:	dec00104 	addi	sp,sp,4
    ea8c:	f800283a 	ret

0000ea90 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    ea90:	defff804 	addi	sp,sp,-32
    ea94:	df000715 	stw	fp,28(sp)
    ea98:	df000704 	addi	fp,sp,28
    ea9c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    eaa0:	e0bffb17 	ldw	r2,-20(fp)
    eaa4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    eaa8:	e0bff917 	ldw	r2,-28(fp)
    eaac:	10800017 	ldw	r2,0(r2)
    eab0:	10800104 	addi	r2,r2,4
    eab4:	10800037 	ldwio	r2,0(r2)
    eab8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    eabc:	e0bffa17 	ldw	r2,-24(fp)
    eac0:	1081000c 	andi	r2,r2,1024
    eac4:	10000b26 	beq	r2,zero,eaf4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    eac8:	e0bff917 	ldw	r2,-28(fp)
    eacc:	10800017 	ldw	r2,0(r2)
    ead0:	10800104 	addi	r2,r2,4
    ead4:	1007883a 	mov	r3,r2
    ead8:	e0bff917 	ldw	r2,-28(fp)
    eadc:	10800817 	ldw	r2,32(r2)
    eae0:	10810014 	ori	r2,r2,1024
    eae4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    eae8:	e0bff917 	ldw	r2,-28(fp)
    eaec:	10000915 	stw	zero,36(r2)
    eaf0:	00000a06 	br	eb1c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    eaf4:	e0bff917 	ldw	r2,-28(fp)
    eaf8:	10c00917 	ldw	r3,36(r2)
    eafc:	00a00034 	movhi	r2,32768
    eb00:	10bfff04 	addi	r2,r2,-4
    eb04:	10c00536 	bltu	r2,r3,eb1c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    eb08:	e0bff917 	ldw	r2,-28(fp)
    eb0c:	10800917 	ldw	r2,36(r2)
    eb10:	10c00044 	addi	r3,r2,1
    eb14:	e0bff917 	ldw	r2,-28(fp)
    eb18:	10c00915 	stw	r3,36(r2)
    eb1c:	00800074 	movhi	r2,1
    eb20:	10910304 	addi	r2,r2,17420
    eb24:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    eb28:	e037883a 	mov	sp,fp
    eb2c:	df000017 	ldw	fp,0(sp)
    eb30:	dec00104 	addi	sp,sp,4
    eb34:	f800283a 	ret

0000eb38 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    eb38:	defffd04 	addi	sp,sp,-12
    eb3c:	df000215 	stw	fp,8(sp)
    eb40:	df000204 	addi	fp,sp,8
    eb44:	e13ffe15 	stw	r4,-8(fp)
    eb48:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    eb4c:	00000506 	br	eb64 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    eb50:	e0bfff17 	ldw	r2,-4(fp)
    eb54:	1090000c 	andi	r2,r2,16384
    eb58:	10000226 	beq	r2,zero,eb64 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    eb5c:	00bffd44 	movi	r2,-11
    eb60:	00000b06 	br	eb90 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    eb64:	e0bffe17 	ldw	r2,-8(fp)
    eb68:	10c00d17 	ldw	r3,52(r2)
    eb6c:	e0bffe17 	ldw	r2,-8(fp)
    eb70:	10800c17 	ldw	r2,48(r2)
    eb74:	18800526 	beq	r3,r2,eb8c <altera_avalon_jtag_uart_close+0x54>
    eb78:	e0bffe17 	ldw	r2,-8(fp)
    eb7c:	10c00917 	ldw	r3,36(r2)
    eb80:	e0bffe17 	ldw	r2,-8(fp)
    eb84:	10800117 	ldw	r2,4(r2)
    eb88:	18bff136 	bltu	r3,r2,eb50 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    eb8c:	0005883a 	mov	r2,zero
}
    eb90:	e037883a 	mov	sp,fp
    eb94:	df000017 	ldw	fp,0(sp)
    eb98:	dec00104 	addi	sp,sp,4
    eb9c:	f800283a 	ret

0000eba0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    eba0:	defffa04 	addi	sp,sp,-24
    eba4:	df000515 	stw	fp,20(sp)
    eba8:	df000504 	addi	fp,sp,20
    ebac:	e13ffd15 	stw	r4,-12(fp)
    ebb0:	e17ffe15 	stw	r5,-8(fp)
    ebb4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    ebb8:	00bff9c4 	movi	r2,-25
    ebbc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    ebc0:	e0bffe17 	ldw	r2,-8(fp)
    ebc4:	10da8060 	cmpeqi	r3,r2,27137
    ebc8:	1800031e 	bne	r3,zero,ebd8 <altera_avalon_jtag_uart_ioctl+0x38>
    ebcc:	109a80a0 	cmpeqi	r2,r2,27138
    ebd0:	1000181e 	bne	r2,zero,ec34 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    ebd4:	00002906 	br	ec7c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    ebd8:	e0bffd17 	ldw	r2,-12(fp)
    ebdc:	10c00117 	ldw	r3,4(r2)
    ebe0:	00a00034 	movhi	r2,32768
    ebe4:	10bfffc4 	addi	r2,r2,-1
    ebe8:	18802126 	beq	r3,r2,ec70 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    ebec:	e0bfff17 	ldw	r2,-4(fp)
    ebf0:	10800017 	ldw	r2,0(r2)
    ebf4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    ebf8:	e0bffc17 	ldw	r2,-16(fp)
    ebfc:	10800090 	cmplti	r2,r2,2
    ec00:	1000061e 	bne	r2,zero,ec1c <altera_avalon_jtag_uart_ioctl+0x7c>
    ec04:	e0fffc17 	ldw	r3,-16(fp)
    ec08:	00a00034 	movhi	r2,32768
    ec0c:	10bfffc4 	addi	r2,r2,-1
    ec10:	18800226 	beq	r3,r2,ec1c <altera_avalon_jtag_uart_ioctl+0x7c>
    ec14:	e0bffc17 	ldw	r2,-16(fp)
    ec18:	00000206 	br	ec24 <altera_avalon_jtag_uart_ioctl+0x84>
    ec1c:	00a00034 	movhi	r2,32768
    ec20:	10bfff84 	addi	r2,r2,-2
    ec24:	e0fffd17 	ldw	r3,-12(fp)
    ec28:	18800115 	stw	r2,4(r3)
      rc = 0;
    ec2c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    ec30:	00000f06 	br	ec70 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    ec34:	e0bffd17 	ldw	r2,-12(fp)
    ec38:	10c00117 	ldw	r3,4(r2)
    ec3c:	00a00034 	movhi	r2,32768
    ec40:	10bfffc4 	addi	r2,r2,-1
    ec44:	18800c26 	beq	r3,r2,ec78 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    ec48:	e0bffd17 	ldw	r2,-12(fp)
    ec4c:	10c00917 	ldw	r3,36(r2)
    ec50:	e0bffd17 	ldw	r2,-12(fp)
    ec54:	10800117 	ldw	r2,4(r2)
    ec58:	1885803a 	cmpltu	r2,r3,r2
    ec5c:	10c03fcc 	andi	r3,r2,255
    ec60:	e0bfff17 	ldw	r2,-4(fp)
    ec64:	10c00015 	stw	r3,0(r2)
      rc = 0;
    ec68:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    ec6c:	00000206 	br	ec78 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    ec70:	0001883a 	nop
    ec74:	00000106 	br	ec7c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    ec78:	0001883a 	nop

  default:
    break;
  }

  return rc;
    ec7c:	e0bffb17 	ldw	r2,-20(fp)
}
    ec80:	e037883a 	mov	sp,fp
    ec84:	df000017 	ldw	fp,0(sp)
    ec88:	dec00104 	addi	sp,sp,4
    ec8c:	f800283a 	ret

0000ec90 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    ec90:	defff304 	addi	sp,sp,-52
    ec94:	dfc00c15 	stw	ra,48(sp)
    ec98:	df000b15 	stw	fp,44(sp)
    ec9c:	df000b04 	addi	fp,sp,44
    eca0:	e13ffc15 	stw	r4,-16(fp)
    eca4:	e17ffd15 	stw	r5,-12(fp)
    eca8:	e1bffe15 	stw	r6,-8(fp)
    ecac:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    ecb0:	e0bffd17 	ldw	r2,-12(fp)
    ecb4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ecb8:	00004706 	br	edd8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    ecbc:	e0bffc17 	ldw	r2,-16(fp)
    ecc0:	10800a17 	ldw	r2,40(r2)
    ecc4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    ecc8:	e0bffc17 	ldw	r2,-16(fp)
    eccc:	10800b17 	ldw	r2,44(r2)
    ecd0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    ecd4:	e0fff717 	ldw	r3,-36(fp)
    ecd8:	e0bff817 	ldw	r2,-32(fp)
    ecdc:	18800536 	bltu	r3,r2,ecf4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    ece0:	e0fff717 	ldw	r3,-36(fp)
    ece4:	e0bff817 	ldw	r2,-32(fp)
    ece8:	1885c83a 	sub	r2,r3,r2
    ecec:	e0bff615 	stw	r2,-40(fp)
    ecf0:	00000406 	br	ed04 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    ecf4:	00c20004 	movi	r3,2048
    ecf8:	e0bff817 	ldw	r2,-32(fp)
    ecfc:	1885c83a 	sub	r2,r3,r2
    ed00:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    ed04:	e0bff617 	ldw	r2,-40(fp)
    ed08:	10001e26 	beq	r2,zero,ed84 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    ed0c:	e0fffe17 	ldw	r3,-8(fp)
    ed10:	e0bff617 	ldw	r2,-40(fp)
    ed14:	1880022e 	bgeu	r3,r2,ed20 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    ed18:	e0bffe17 	ldw	r2,-8(fp)
    ed1c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    ed20:	e0bffc17 	ldw	r2,-16(fp)
    ed24:	10c00e04 	addi	r3,r2,56
    ed28:	e0bff817 	ldw	r2,-32(fp)
    ed2c:	1885883a 	add	r2,r3,r2
    ed30:	e1bff617 	ldw	r6,-40(fp)
    ed34:	100b883a 	mov	r5,r2
    ed38:	e13ff517 	ldw	r4,-44(fp)
    ed3c:	000612c0 	call	612c <memcpy>
      ptr   += n;
    ed40:	e0fff517 	ldw	r3,-44(fp)
    ed44:	e0bff617 	ldw	r2,-40(fp)
    ed48:	1885883a 	add	r2,r3,r2
    ed4c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    ed50:	e0fffe17 	ldw	r3,-8(fp)
    ed54:	e0bff617 	ldw	r2,-40(fp)
    ed58:	1885c83a 	sub	r2,r3,r2
    ed5c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ed60:	e0fff817 	ldw	r3,-32(fp)
    ed64:	e0bff617 	ldw	r2,-40(fp)
    ed68:	1885883a 	add	r2,r3,r2
    ed6c:	10c1ffcc 	andi	r3,r2,2047
    ed70:	e0bffc17 	ldw	r2,-16(fp)
    ed74:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    ed78:	e0bffe17 	ldw	r2,-8(fp)
    ed7c:	00bfcf16 	blt	zero,r2,ecbc <altera_avalon_jtag_uart_read+0x2c>
    ed80:	00000106 	br	ed88 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    ed84:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    ed88:	e0fff517 	ldw	r3,-44(fp)
    ed8c:	e0bffd17 	ldw	r2,-12(fp)
    ed90:	1880141e 	bne	r3,r2,ede4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    ed94:	e0bfff17 	ldw	r2,-4(fp)
    ed98:	1090000c 	andi	r2,r2,16384
    ed9c:	1000131e 	bne	r2,zero,edec <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    eda0:	0001883a 	nop
    eda4:	e0bffc17 	ldw	r2,-16(fp)
    eda8:	10c00a17 	ldw	r3,40(r2)
    edac:	e0bff717 	ldw	r2,-36(fp)
    edb0:	1880051e 	bne	r3,r2,edc8 <altera_avalon_jtag_uart_read+0x138>
    edb4:	e0bffc17 	ldw	r2,-16(fp)
    edb8:	10c00917 	ldw	r3,36(r2)
    edbc:	e0bffc17 	ldw	r2,-16(fp)
    edc0:	10800117 	ldw	r2,4(r2)
    edc4:	18bff736 	bltu	r3,r2,eda4 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    edc8:	e0bffc17 	ldw	r2,-16(fp)
    edcc:	10c00a17 	ldw	r3,40(r2)
    edd0:	e0bff717 	ldw	r2,-36(fp)
    edd4:	18800726 	beq	r3,r2,edf4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    edd8:	e0bffe17 	ldw	r2,-8(fp)
    eddc:	00bfb716 	blt	zero,r2,ecbc <altera_avalon_jtag_uart_read+0x2c>
    ede0:	00000506 	br	edf8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    ede4:	0001883a 	nop
    ede8:	00000306 	br	edf8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    edec:	0001883a 	nop
    edf0:	00000106 	br	edf8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    edf4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    edf8:	e0fff517 	ldw	r3,-44(fp)
    edfc:	e0bffd17 	ldw	r2,-12(fp)
    ee00:	18801826 	beq	r3,r2,ee64 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ee04:	0005303a 	rdctl	r2,status
    ee08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ee0c:	e0fffb17 	ldw	r3,-20(fp)
    ee10:	00bfff84 	movi	r2,-2
    ee14:	1884703a 	and	r2,r3,r2
    ee18:	1001703a 	wrctl	status,r2
  
  return context;
    ee1c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    ee20:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ee24:	e0bffc17 	ldw	r2,-16(fp)
    ee28:	10800817 	ldw	r2,32(r2)
    ee2c:	10c00054 	ori	r3,r2,1
    ee30:	e0bffc17 	ldw	r2,-16(fp)
    ee34:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ee38:	e0bffc17 	ldw	r2,-16(fp)
    ee3c:	10800017 	ldw	r2,0(r2)
    ee40:	10800104 	addi	r2,r2,4
    ee44:	1007883a 	mov	r3,r2
    ee48:	e0bffc17 	ldw	r2,-16(fp)
    ee4c:	10800817 	ldw	r2,32(r2)
    ee50:	18800035 	stwio	r2,0(r3)
    ee54:	e0bffa17 	ldw	r2,-24(fp)
    ee58:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ee5c:	e0bff917 	ldw	r2,-28(fp)
    ee60:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    ee64:	e0fff517 	ldw	r3,-44(fp)
    ee68:	e0bffd17 	ldw	r2,-12(fp)
    ee6c:	18800426 	beq	r3,r2,ee80 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    ee70:	e0fff517 	ldw	r3,-44(fp)
    ee74:	e0bffd17 	ldw	r2,-12(fp)
    ee78:	1885c83a 	sub	r2,r3,r2
    ee7c:	00000606 	br	ee98 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    ee80:	e0bfff17 	ldw	r2,-4(fp)
    ee84:	1090000c 	andi	r2,r2,16384
    ee88:	10000226 	beq	r2,zero,ee94 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    ee8c:	00bffd44 	movi	r2,-11
    ee90:	00000106 	br	ee98 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    ee94:	00bffec4 	movi	r2,-5
}
    ee98:	e037883a 	mov	sp,fp
    ee9c:	dfc00117 	ldw	ra,4(sp)
    eea0:	df000017 	ldw	fp,0(sp)
    eea4:	dec00204 	addi	sp,sp,8
    eea8:	f800283a 	ret

0000eeac <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    eeac:	defff304 	addi	sp,sp,-52
    eeb0:	dfc00c15 	stw	ra,48(sp)
    eeb4:	df000b15 	stw	fp,44(sp)
    eeb8:	df000b04 	addi	fp,sp,44
    eebc:	e13ffc15 	stw	r4,-16(fp)
    eec0:	e17ffd15 	stw	r5,-12(fp)
    eec4:	e1bffe15 	stw	r6,-8(fp)
    eec8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    eecc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    eed0:	e0bffd17 	ldw	r2,-12(fp)
    eed4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    eed8:	00003706 	br	efb8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    eedc:	e0bffc17 	ldw	r2,-16(fp)
    eee0:	10800c17 	ldw	r2,48(r2)
    eee4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    eee8:	e0bffc17 	ldw	r2,-16(fp)
    eeec:	10800d17 	ldw	r2,52(r2)
    eef0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    eef4:	e0fff917 	ldw	r3,-28(fp)
    eef8:	e0bff517 	ldw	r2,-44(fp)
    eefc:	1880062e 	bgeu	r3,r2,ef18 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    ef00:	e0fff517 	ldw	r3,-44(fp)
    ef04:	e0bff917 	ldw	r2,-28(fp)
    ef08:	1885c83a 	sub	r2,r3,r2
    ef0c:	10bfffc4 	addi	r2,r2,-1
    ef10:	e0bff615 	stw	r2,-40(fp)
    ef14:	00000b06 	br	ef44 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    ef18:	e0bff517 	ldw	r2,-44(fp)
    ef1c:	10000526 	beq	r2,zero,ef34 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    ef20:	00c20004 	movi	r3,2048
    ef24:	e0bff917 	ldw	r2,-28(fp)
    ef28:	1885c83a 	sub	r2,r3,r2
    ef2c:	e0bff615 	stw	r2,-40(fp)
    ef30:	00000406 	br	ef44 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    ef34:	00c1ffc4 	movi	r3,2047
    ef38:	e0bff917 	ldw	r2,-28(fp)
    ef3c:	1885c83a 	sub	r2,r3,r2
    ef40:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    ef44:	e0bff617 	ldw	r2,-40(fp)
    ef48:	10001e26 	beq	r2,zero,efc4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    ef4c:	e0fffe17 	ldw	r3,-8(fp)
    ef50:	e0bff617 	ldw	r2,-40(fp)
    ef54:	1880022e 	bgeu	r3,r2,ef60 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    ef58:	e0bffe17 	ldw	r2,-8(fp)
    ef5c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    ef60:	e0bffc17 	ldw	r2,-16(fp)
    ef64:	10c20e04 	addi	r3,r2,2104
    ef68:	e0bff917 	ldw	r2,-28(fp)
    ef6c:	1885883a 	add	r2,r3,r2
    ef70:	e1bff617 	ldw	r6,-40(fp)
    ef74:	e17ffd17 	ldw	r5,-12(fp)
    ef78:	1009883a 	mov	r4,r2
    ef7c:	000612c0 	call	612c <memcpy>
      ptr   += n;
    ef80:	e0fffd17 	ldw	r3,-12(fp)
    ef84:	e0bff617 	ldw	r2,-40(fp)
    ef88:	1885883a 	add	r2,r3,r2
    ef8c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    ef90:	e0fffe17 	ldw	r3,-8(fp)
    ef94:	e0bff617 	ldw	r2,-40(fp)
    ef98:	1885c83a 	sub	r2,r3,r2
    ef9c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    efa0:	e0fff917 	ldw	r3,-28(fp)
    efa4:	e0bff617 	ldw	r2,-40(fp)
    efa8:	1885883a 	add	r2,r3,r2
    efac:	10c1ffcc 	andi	r3,r2,2047
    efb0:	e0bffc17 	ldw	r2,-16(fp)
    efb4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    efb8:	e0bffe17 	ldw	r2,-8(fp)
    efbc:	00bfc716 	blt	zero,r2,eedc <altera_avalon_jtag_uart_write+0x30>
    efc0:	00000106 	br	efc8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    efc4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    efc8:	0005303a 	rdctl	r2,status
    efcc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    efd0:	e0fffb17 	ldw	r3,-20(fp)
    efd4:	00bfff84 	movi	r2,-2
    efd8:	1884703a 	and	r2,r3,r2
    efdc:	1001703a 	wrctl	status,r2
  
  return context;
    efe0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    efe4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    efe8:	e0bffc17 	ldw	r2,-16(fp)
    efec:	10800817 	ldw	r2,32(r2)
    eff0:	10c00094 	ori	r3,r2,2
    eff4:	e0bffc17 	ldw	r2,-16(fp)
    eff8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    effc:	e0bffc17 	ldw	r2,-16(fp)
    f000:	10800017 	ldw	r2,0(r2)
    f004:	10800104 	addi	r2,r2,4
    f008:	1007883a 	mov	r3,r2
    f00c:	e0bffc17 	ldw	r2,-16(fp)
    f010:	10800817 	ldw	r2,32(r2)
    f014:	18800035 	stwio	r2,0(r3)
    f018:	e0bffa17 	ldw	r2,-24(fp)
    f01c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f020:	e0bff817 	ldw	r2,-32(fp)
    f024:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    f028:	e0bffe17 	ldw	r2,-8(fp)
    f02c:	0080100e 	bge	zero,r2,f070 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    f030:	e0bfff17 	ldw	r2,-4(fp)
    f034:	1090000c 	andi	r2,r2,16384
    f038:	1000101e 	bne	r2,zero,f07c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    f03c:	0001883a 	nop
    f040:	e0bffc17 	ldw	r2,-16(fp)
    f044:	10c00d17 	ldw	r3,52(r2)
    f048:	e0bff517 	ldw	r2,-44(fp)
    f04c:	1880051e 	bne	r3,r2,f064 <altera_avalon_jtag_uart_write+0x1b8>
    f050:	e0bffc17 	ldw	r2,-16(fp)
    f054:	10c00917 	ldw	r3,36(r2)
    f058:	e0bffc17 	ldw	r2,-16(fp)
    f05c:	10800117 	ldw	r2,4(r2)
    f060:	18bff736 	bltu	r3,r2,f040 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    f064:	e0bffc17 	ldw	r2,-16(fp)
    f068:	10800917 	ldw	r2,36(r2)
    f06c:	1000051e 	bne	r2,zero,f084 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    f070:	e0bffe17 	ldw	r2,-8(fp)
    f074:	00bfd016 	blt	zero,r2,efb8 <altera_avalon_jtag_uart_write+0x10c>
    f078:	00000306 	br	f088 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    f07c:	0001883a 	nop
    f080:	00000106 	br	f088 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    f084:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f088:	e0fffd17 	ldw	r3,-12(fp)
    f08c:	e0bff717 	ldw	r2,-36(fp)
    f090:	18800426 	beq	r3,r2,f0a4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    f094:	e0fffd17 	ldw	r3,-12(fp)
    f098:	e0bff717 	ldw	r2,-36(fp)
    f09c:	1885c83a 	sub	r2,r3,r2
    f0a0:	00000606 	br	f0bc <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    f0a4:	e0bfff17 	ldw	r2,-4(fp)
    f0a8:	1090000c 	andi	r2,r2,16384
    f0ac:	10000226 	beq	r2,zero,f0b8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    f0b0:	00bffd44 	movi	r2,-11
    f0b4:	00000106 	br	f0bc <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    f0b8:	00bffec4 	movi	r2,-5
}
    f0bc:	e037883a 	mov	sp,fp
    f0c0:	dfc00117 	ldw	ra,4(sp)
    f0c4:	df000017 	ldw	fp,0(sp)
    f0c8:	dec00204 	addi	sp,sp,8
    f0cc:	f800283a 	ret

0000f0d0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    f0d0:	defff904 	addi	sp,sp,-28
    f0d4:	dfc00615 	stw	ra,24(sp)
    f0d8:	df000515 	stw	fp,20(sp)
    f0dc:	df000504 	addi	fp,sp,20
    f0e0:	e13ffe15 	stw	r4,-8(fp)
    f0e4:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    f0e8:	0007883a 	mov	r3,zero
    f0ec:	e0bffe17 	ldw	r2,-8(fp)
    f0f0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    f0f4:	e0bffe17 	ldw	r2,-8(fp)
    f0f8:	10800104 	addi	r2,r2,4
    f0fc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f100:	0005303a 	rdctl	r2,status
    f104:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f108:	e0fffc17 	ldw	r3,-16(fp)
    f10c:	00bfff84 	movi	r2,-2
    f110:	1884703a 	and	r2,r3,r2
    f114:	1001703a 	wrctl	status,r2
  
  return context;
    f118:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    f11c:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
    f120:	001002c0 	call	1002c <alt_tick>
    f124:	e0bffb17 	ldw	r2,-20(fp)
    f128:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f12c:	e0bffd17 	ldw	r2,-12(fp)
    f130:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    f134:	0001883a 	nop
    f138:	e037883a 	mov	sp,fp
    f13c:	dfc00117 	ldw	ra,4(sp)
    f140:	df000017 	ldw	fp,0(sp)
    f144:	dec00204 	addi	sp,sp,8
    f148:	f800283a 	ret

0000f14c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    f14c:	defff904 	addi	sp,sp,-28
    f150:	dfc00615 	stw	ra,24(sp)
    f154:	df000515 	stw	fp,20(sp)
    f158:	df000504 	addi	fp,sp,20
    f15c:	e13ffc15 	stw	r4,-16(fp)
    f160:	e17ffd15 	stw	r5,-12(fp)
    f164:	e1bffe15 	stw	r6,-8(fp)
    f168:	e1ffff15 	stw	r7,-4(fp)
    f16c:	e0bfff17 	ldw	r2,-4(fp)
    f170:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    f174:	00800074 	movhi	r2,1
    f178:	10910304 	addi	r2,r2,17420
    f17c:	10800017 	ldw	r2,0(r2)
    f180:	1000041e 	bne	r2,zero,f194 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    f184:	00800074 	movhi	r2,1
    f188:	10910304 	addi	r2,r2,17420
    f18c:	e0fffb17 	ldw	r3,-20(fp)
    f190:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    f194:	e0bffc17 	ldw	r2,-16(fp)
    f198:	10800104 	addi	r2,r2,4
    f19c:	00c001c4 	movi	r3,7
    f1a0:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    f1a4:	01800074 	movhi	r6,1
    f1a8:	31bc3404 	addi	r6,r6,-3888
    f1ac:	e17ffc17 	ldw	r5,-16(fp)
    f1b0:	e13ffe17 	ldw	r4,-8(fp)
    f1b4:	000fb6c0 	call	fb6c <alt_irq_register>
#endif  
}
    f1b8:	0001883a 	nop
    f1bc:	e037883a 	mov	sp,fp
    f1c0:	dfc00117 	ldw	ra,4(sp)
    f1c4:	df000017 	ldw	fp,0(sp)
    f1c8:	dec00204 	addi	sp,sp,8
    f1cc:	f800283a 	ret

0000f1d0 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
    f1d0:	defffd04 	addi	sp,sp,-12
    f1d4:	df000215 	stw	fp,8(sp)
    f1d8:	df000204 	addi	fp,sp,8
    f1dc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    f1e0:	e0bfff17 	ldw	r2,-4(fp)
    f1e4:	10800a17 	ldw	r2,40(r2)
    f1e8:	10800104 	addi	r2,r2,4
    f1ec:	10800037 	ldwio	r2,0(r2)
    f1f0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    f1f4:	e0bffe17 	ldw	r2,-8(fp)
    f1f8:	10800054 	ori	r2,r2,1
    f1fc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    f200:	e0bfff17 	ldw	r2,-4(fp)
    f204:	10800a17 	ldw	r2,40(r2)
    f208:	10800104 	addi	r2,r2,4
    f20c:	1007883a 	mov	r3,r2
    f210:	e0bffe17 	ldw	r2,-8(fp)
    f214:	18800035 	stwio	r2,0(r3)
}
    f218:	0001883a 	nop
    f21c:	e037883a 	mov	sp,fp
    f220:	df000017 	ldw	fp,0(sp)
    f224:	dec00104 	addi	sp,sp,4
    f228:	f800283a 	ret

0000f22c <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
    f22c:	defffd04 	addi	sp,sp,-12
    f230:	df000215 	stw	fp,8(sp)
    f234:	df000204 	addi	fp,sp,8
    f238:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    f23c:	e0bfff17 	ldw	r2,-4(fp)
    f240:	10800a17 	ldw	r2,40(r2)
    f244:	10800104 	addi	r2,r2,4
    f248:	10800037 	ldwio	r2,0(r2)
    f24c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    f250:	e0fffe17 	ldw	r3,-8(fp)
    f254:	00bfff84 	movi	r2,-2
    f258:	1884703a 	and	r2,r3,r2
    f25c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    f260:	e0bfff17 	ldw	r2,-4(fp)
    f264:	10800a17 	ldw	r2,40(r2)
    f268:	10800104 	addi	r2,r2,4
    f26c:	1007883a 	mov	r3,r2
    f270:	e0bffe17 	ldw	r2,-8(fp)
    f274:	18800035 	stwio	r2,0(r3)
}
    f278:	0001883a 	nop
    f27c:	e037883a 	mov	sp,fp
    f280:	df000017 	ldw	fp,0(sp)
    f284:	dec00104 	addi	sp,sp,4
    f288:	f800283a 	ret

0000f28c <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
    f28c:	defffd04 	addi	sp,sp,-12
    f290:	df000215 	stw	fp,8(sp)
    f294:	df000204 	addi	fp,sp,8
    f298:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    f29c:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    f2a0:	e0bfff17 	ldw	r2,-4(fp)
    f2a4:	10800a17 	ldw	r2,40(r2)
    f2a8:	10800084 	addi	r2,r2,2
    f2ac:	1080002b 	ldhuio	r2,0(r2)
    f2b0:	10bfffcc 	andi	r2,r2,65535
    f2b4:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
    f2b8:	e0bffe0b 	ldhu	r2,-8(fp)
}
    f2bc:	e037883a 	mov	sp,fp
    f2c0:	df000017 	ldw	fp,0(sp)
    f2c4:	dec00104 	addi	sp,sp,4
    f2c8:	f800283a 	ret

0000f2cc <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
    f2cc:	defffd04 	addi	sp,sp,-12
    f2d0:	df000215 	stw	fp,8(sp)
    f2d4:	df000204 	addi	fp,sp,8
    f2d8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    f2dc:	e0bfff17 	ldw	r2,-4(fp)
    f2e0:	10800a17 	ldw	r2,40(r2)
    f2e4:	10800104 	addi	r2,r2,4
    f2e8:	10800037 	ldwio	r2,0(r2)
    f2ec:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
    f2f0:	e0bffe17 	ldw	r2,-8(fp)
    f2f4:	1004d43a 	srli	r2,r2,16
}
    f2f8:	e037883a 	mov	sp,fp
    f2fc:	df000017 	ldw	fp,0(sp)
    f300:	dec00104 	addi	sp,sp,4
    f304:	f800283a 	ret

0000f308 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
    f308:	defffd04 	addi	sp,sp,-12
    f30c:	df000215 	stw	fp,8(sp)
    f310:	df000204 	addi	fp,sp,8
    f314:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    f318:	e0bfff17 	ldw	r2,-4(fp)
    f31c:	1080800c 	andi	r2,r2,512
    f320:	1004d27a 	srli	r2,r2,9
    f324:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
    f328:	e0bffe17 	ldw	r2,-8(fp)
    f32c:	10000226 	beq	r2,zero,f338 <alt_up_rs232_check_parity+0x30>
    f330:	00bfffc4 	movi	r2,-1
    f334:	00000106 	br	f33c <alt_up_rs232_check_parity+0x34>
    f338:	0005883a 	mov	r2,zero
}
    f33c:	e037883a 	mov	sp,fp
    f340:	df000017 	ldw	fp,0(sp)
    f344:	dec00104 	addi	sp,sp,4
    f348:	f800283a 	ret

0000f34c <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
    f34c:	defffd04 	addi	sp,sp,-12
    f350:	df000215 	stw	fp,8(sp)
    f354:	df000204 	addi	fp,sp,8
    f358:	e13ffe15 	stw	r4,-8(fp)
    f35c:	2805883a 	mov	r2,r5
    f360:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    f364:	e0bffe17 	ldw	r2,-8(fp)
    f368:	10800a17 	ldw	r2,40(r2)
    f36c:	1007883a 	mov	r3,r2
    f370:	e0bfff03 	ldbu	r2,-4(fp)
    f374:	18800035 	stwio	r2,0(r3)
	return 0;
    f378:	0005883a 	mov	r2,zero
}
    f37c:	e037883a 	mov	sp,fp
    f380:	df000017 	ldw	fp,0(sp)
    f384:	dec00104 	addi	sp,sp,4
    f388:	f800283a 	ret

0000f38c <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    f38c:	defffa04 	addi	sp,sp,-24
    f390:	dfc00515 	stw	ra,20(sp)
    f394:	df000415 	stw	fp,16(sp)
    f398:	df000404 	addi	fp,sp,16
    f39c:	e13ffd15 	stw	r4,-12(fp)
    f3a0:	e17ffe15 	stw	r5,-8(fp)
    f3a4:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    f3a8:	e0bffd17 	ldw	r2,-12(fp)
    f3ac:	10800a17 	ldw	r2,40(r2)
    f3b0:	10800037 	ldwio	r2,0(r2)
    f3b4:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    f3b8:	e0bffc17 	ldw	r2,-16(fp)
    f3bc:	1007883a 	mov	r3,r2
    f3c0:	e0bffe17 	ldw	r2,-8(fp)
    f3c4:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    f3c8:	e13ffc17 	ldw	r4,-16(fp)
    f3cc:	000f3080 	call	f308 <alt_up_rs232_check_parity>
    f3d0:	1007883a 	mov	r3,r2
    f3d4:	e0bfff17 	ldw	r2,-4(fp)
    f3d8:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    f3dc:	e0bffc17 	ldw	r2,-16(fp)
    f3e0:	10a0000c 	andi	r2,r2,32768
    f3e4:	1004d3fa 	srli	r2,r2,15
    f3e8:	10bfffc4 	addi	r2,r2,-1
}
    f3ec:	e037883a 	mov	sp,fp
    f3f0:	dfc00117 	ldw	ra,4(sp)
    f3f4:	df000017 	ldw	fp,0(sp)
    f3f8:	dec00204 	addi	sp,sp,8
    f3fc:	f800283a 	ret

0000f400 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    f400:	defff804 	addi	sp,sp,-32
    f404:	dfc00715 	stw	ra,28(sp)
    f408:	df000615 	stw	fp,24(sp)
    f40c:	df000604 	addi	fp,sp,24
    f410:	e13ffd15 	stw	r4,-12(fp)
    f414:	e17ffe15 	stw	r5,-8(fp)
    f418:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    f41c:	e0bffd17 	ldw	r2,-12(fp)
    f420:	10800017 	ldw	r2,0(r2)
    f424:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    f428:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    f42c:	00000c06 	br	f460 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
    f430:	e0bffe17 	ldw	r2,-8(fp)
    f434:	10c00044 	addi	r3,r2,1
    f438:	e0fffe15 	stw	r3,-8(fp)
    f43c:	e0fffc04 	addi	r3,fp,-16
    f440:	180d883a 	mov	r6,r3
    f444:	100b883a 	mov	r5,r2
    f448:	e13ffb17 	ldw	r4,-20(fp)
    f44c:	000f38c0 	call	f38c <alt_up_rs232_read_data>
    f450:	1000081e 	bne	r2,zero,f474 <alt_up_rs232_read_fd+0x74>
			count++;
    f454:	e0bffa17 	ldw	r2,-24(fp)
    f458:	10800044 	addi	r2,r2,1
    f45c:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    f460:	e0bfff17 	ldw	r2,-4(fp)
    f464:	10ffffc4 	addi	r3,r2,-1
    f468:	e0ffff15 	stw	r3,-4(fp)
    f46c:	103ff01e 	bne	r2,zero,f430 <alt_up_rs232_read_fd+0x30>
    f470:	00000106 	br	f478 <alt_up_rs232_read_fd+0x78>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
    f474:	0001883a 	nop
	}
	return count;
    f478:	e0bffa17 	ldw	r2,-24(fp)
}
    f47c:	e037883a 	mov	sp,fp
    f480:	dfc00117 	ldw	ra,4(sp)
    f484:	df000017 	ldw	fp,0(sp)
    f488:	dec00204 	addi	sp,sp,8
    f48c:	f800283a 	ret

0000f490 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    f490:	defff904 	addi	sp,sp,-28
    f494:	dfc00615 	stw	ra,24(sp)
    f498:	df000515 	stw	fp,20(sp)
    f49c:	df000504 	addi	fp,sp,20
    f4a0:	e13ffd15 	stw	r4,-12(fp)
    f4a4:	e17ffe15 	stw	r5,-8(fp)
    f4a8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    f4ac:	e0bffd17 	ldw	r2,-12(fp)
    f4b0:	10800017 	ldw	r2,0(r2)
    f4b4:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    f4b8:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    f4bc:	00000d06 	br	f4f4 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    f4c0:	e0bffe17 	ldw	r2,-8(fp)
    f4c4:	10800003 	ldbu	r2,0(r2)
    f4c8:	10803fcc 	andi	r2,r2,255
    f4cc:	100b883a 	mov	r5,r2
    f4d0:	e13ffc17 	ldw	r4,-16(fp)
    f4d4:	000f34c0 	call	f34c <alt_up_rs232_write_data>
    f4d8:	10000b1e 	bne	r2,zero,f508 <alt_up_rs232_write_fd+0x78>
		{
			count++;
    f4dc:	e0bffb17 	ldw	r2,-20(fp)
    f4e0:	10800044 	addi	r2,r2,1
    f4e4:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
    f4e8:	e0bffe17 	ldw	r2,-8(fp)
    f4ec:	10800044 	addi	r2,r2,1
    f4f0:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    f4f4:	e0bfff17 	ldw	r2,-4(fp)
    f4f8:	10ffffc4 	addi	r3,r2,-1
    f4fc:	e0ffff15 	stw	r3,-4(fp)
    f500:	103fef1e 	bne	r2,zero,f4c0 <alt_up_rs232_write_fd+0x30>
    f504:	00000106 	br	f50c <alt_up_rs232_write_fd+0x7c>
		{
			count++;
			ptr++;
		}
		else
			break;
    f508:	0001883a 	nop
	}
	return count;
    f50c:	e0bffb17 	ldw	r2,-20(fp)
}
    f510:	e037883a 	mov	sp,fp
    f514:	dfc00117 	ldw	ra,4(sp)
    f518:	df000017 	ldw	fp,0(sp)
    f51c:	dec00204 	addi	sp,sp,8
    f520:	f800283a 	ret

0000f524 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    f524:	defffc04 	addi	sp,sp,-16
    f528:	dfc00315 	stw	ra,12(sp)
    f52c:	df000215 	stw	fp,8(sp)
    f530:	df000204 	addi	fp,sp,8
    f534:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    f538:	01400074 	movhi	r5,1
    f53c:	2949eb04 	addi	r5,r5,10156
    f540:	e13fff17 	ldw	r4,-4(fp)
    f544:	000d0600 	call	d060 <alt_find_dev>
    f548:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    f54c:	e0bffe17 	ldw	r2,-8(fp)
}
    f550:	e037883a 	mov	sp,fp
    f554:	dfc00117 	ldw	ra,4(sp)
    f558:	df000017 	ldw	fp,0(sp)
    f55c:	dec00204 	addi	sp,sp,8
    f560:	f800283a 	ret

0000f564 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    f564:	defff504 	addi	sp,sp,-44
    f568:	df000a15 	stw	fp,40(sp)
    f56c:	df000a04 	addi	fp,sp,40
    f570:	e13ffc15 	stw	r4,-16(fp)
    f574:	e17ffd15 	stw	r5,-12(fp)
    f578:	e1bffe15 	stw	r6,-8(fp)
    f57c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    f580:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    f584:	00800074 	movhi	r2,1
    f588:	10910304 	addi	r2,r2,17420
    f58c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    f590:	10003f26 	beq	r2,zero,f690 <alt_alarm_start+0x12c>
  {
    if (alarm)
    f594:	e0bffc17 	ldw	r2,-16(fp)
    f598:	10003b26 	beq	r2,zero,f688 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    f59c:	e0bffc17 	ldw	r2,-16(fp)
    f5a0:	e0fffe17 	ldw	r3,-8(fp)
    f5a4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    f5a8:	e0bffc17 	ldw	r2,-16(fp)
    f5ac:	e0ffff17 	ldw	r3,-4(fp)
    f5b0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f5b4:	0005303a 	rdctl	r2,status
    f5b8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f5bc:	e0fff917 	ldw	r3,-28(fp)
    f5c0:	00bfff84 	movi	r2,-2
    f5c4:	1884703a 	and	r2,r3,r2
    f5c8:	1001703a 	wrctl	status,r2
  
  return context;
    f5cc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    f5d0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    f5d4:	00800074 	movhi	r2,1
    f5d8:	10910404 	addi	r2,r2,17424
    f5dc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    f5e0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    f5e4:	e0fffd17 	ldw	r3,-12(fp)
    f5e8:	e0bff617 	ldw	r2,-40(fp)
    f5ec:	1885883a 	add	r2,r3,r2
    f5f0:	10c00044 	addi	r3,r2,1
    f5f4:	e0bffc17 	ldw	r2,-16(fp)
    f5f8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    f5fc:	e0bffc17 	ldw	r2,-16(fp)
    f600:	10c00217 	ldw	r3,8(r2)
    f604:	e0bff617 	ldw	r2,-40(fp)
    f608:	1880042e 	bgeu	r3,r2,f61c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    f60c:	e0bffc17 	ldw	r2,-16(fp)
    f610:	00c00044 	movi	r3,1
    f614:	10c00405 	stb	r3,16(r2)
    f618:	00000206 	br	f624 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    f61c:	e0bffc17 	ldw	r2,-16(fp)
    f620:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    f624:	e0fffc17 	ldw	r3,-16(fp)
    f628:	00800074 	movhi	r2,1
    f62c:	1089f504 	addi	r2,r2,10196
    f630:	e0bffa15 	stw	r2,-24(fp)
    f634:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    f638:	e0bffb17 	ldw	r2,-20(fp)
    f63c:	e0fffa17 	ldw	r3,-24(fp)
    f640:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    f644:	e0bffa17 	ldw	r2,-24(fp)
    f648:	10c00017 	ldw	r3,0(r2)
    f64c:	e0bffb17 	ldw	r2,-20(fp)
    f650:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    f654:	e0bffa17 	ldw	r2,-24(fp)
    f658:	10800017 	ldw	r2,0(r2)
    f65c:	e0fffb17 	ldw	r3,-20(fp)
    f660:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    f664:	e0bffa17 	ldw	r2,-24(fp)
    f668:	e0fffb17 	ldw	r3,-20(fp)
    f66c:	10c00015 	stw	r3,0(r2)
    f670:	e0bff817 	ldw	r2,-32(fp)
    f674:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f678:	e0bff717 	ldw	r2,-36(fp)
    f67c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    f680:	0005883a 	mov	r2,zero
    f684:	00000306 	br	f694 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    f688:	00bffa84 	movi	r2,-22
    f68c:	00000106 	br	f694 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    f690:	00bfde84 	movi	r2,-134
  }
}
    f694:	e037883a 	mov	sp,fp
    f698:	df000017 	ldw	fp,0(sp)
    f69c:	dec00104 	addi	sp,sp,4
    f6a0:	f800283a 	ret

0000f6a4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    f6a4:	defffa04 	addi	sp,sp,-24
    f6a8:	dfc00515 	stw	ra,20(sp)
    f6ac:	df000415 	stw	fp,16(sp)
    f6b0:	df000404 	addi	fp,sp,16
    f6b4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    f6b8:	008000c4 	movi	r2,3
    f6bc:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    f6c0:	e0fffd17 	ldw	r3,-12(fp)
    f6c4:	008003f4 	movhi	r2,15
    f6c8:	10909004 	addi	r2,r2,16960
    f6cc:	1885383a 	mul	r2,r3,r2
    f6d0:	100b883a 	mov	r5,r2
    f6d4:	01017db4 	movhi	r4,1526
    f6d8:	21384004 	addi	r4,r4,-7936
    f6dc:	00005a40 	call	5a4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    f6e0:	100b883a 	mov	r5,r2
    f6e4:	01200034 	movhi	r4,32768
    f6e8:	213fffc4 	addi	r4,r4,-1
    f6ec:	00005a40 	call	5a4 <__udivsi3>
    f6f0:	100b883a 	mov	r5,r2
    f6f4:	e13fff17 	ldw	r4,-4(fp)
    f6f8:	00005a40 	call	5a4 <__udivsi3>
    f6fc:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    f700:	e0bffe17 	ldw	r2,-8(fp)
    f704:	10002a26 	beq	r2,zero,f7b0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    f708:	e03ffc15 	stw	zero,-16(fp)
    f70c:	00001706 	br	f76c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    f710:	00a00034 	movhi	r2,32768
    f714:	10bfffc4 	addi	r2,r2,-1
    f718:	10bfffc4 	addi	r2,r2,-1
    f71c:	103ffe1e 	bne	r2,zero,f718 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    f720:	e0fffd17 	ldw	r3,-12(fp)
    f724:	008003f4 	movhi	r2,15
    f728:	10909004 	addi	r2,r2,16960
    f72c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    f730:	100b883a 	mov	r5,r2
    f734:	01017db4 	movhi	r4,1526
    f738:	21384004 	addi	r4,r4,-7936
    f73c:	00005a40 	call	5a4 <__udivsi3>
    f740:	100b883a 	mov	r5,r2
    f744:	01200034 	movhi	r4,32768
    f748:	213fffc4 	addi	r4,r4,-1
    f74c:	00005a40 	call	5a4 <__udivsi3>
    f750:	1007883a 	mov	r3,r2
    f754:	e0bfff17 	ldw	r2,-4(fp)
    f758:	10c5c83a 	sub	r2,r2,r3
    f75c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    f760:	e0bffc17 	ldw	r2,-16(fp)
    f764:	10800044 	addi	r2,r2,1
    f768:	e0bffc15 	stw	r2,-16(fp)
    f76c:	e0fffc17 	ldw	r3,-16(fp)
    f770:	e0bffe17 	ldw	r2,-8(fp)
    f774:	18bfe616 	blt	r3,r2,f710 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    f778:	e0fffd17 	ldw	r3,-12(fp)
    f77c:	008003f4 	movhi	r2,15
    f780:	10909004 	addi	r2,r2,16960
    f784:	1885383a 	mul	r2,r3,r2
    f788:	100b883a 	mov	r5,r2
    f78c:	01017db4 	movhi	r4,1526
    f790:	21384004 	addi	r4,r4,-7936
    f794:	00005a40 	call	5a4 <__udivsi3>
    f798:	1007883a 	mov	r3,r2
    f79c:	e0bfff17 	ldw	r2,-4(fp)
    f7a0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    f7a4:	10bfffc4 	addi	r2,r2,-1
    f7a8:	103ffe1e 	bne	r2,zero,f7a4 <alt_busy_sleep+0x100>
    f7ac:	00000d06 	br	f7e4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    f7b0:	e0fffd17 	ldw	r3,-12(fp)
    f7b4:	008003f4 	movhi	r2,15
    f7b8:	10909004 	addi	r2,r2,16960
    f7bc:	1885383a 	mul	r2,r3,r2
    f7c0:	100b883a 	mov	r5,r2
    f7c4:	01017db4 	movhi	r4,1526
    f7c8:	21384004 	addi	r4,r4,-7936
    f7cc:	00005a40 	call	5a4 <__udivsi3>
    f7d0:	1007883a 	mov	r3,r2
    f7d4:	e0bfff17 	ldw	r2,-4(fp)
    f7d8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    f7dc:	10bfffc4 	addi	r2,r2,-1
    f7e0:	00bffe16 	blt	zero,r2,f7dc <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    f7e4:	0005883a 	mov	r2,zero
}
    f7e8:	e037883a 	mov	sp,fp
    f7ec:	dfc00117 	ldw	ra,4(sp)
    f7f0:	df000017 	ldw	fp,0(sp)
    f7f4:	dec00204 	addi	sp,sp,8
    f7f8:	f800283a 	ret

0000f7fc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    f7fc:	defffe04 	addi	sp,sp,-8
    f800:	df000115 	stw	fp,4(sp)
    f804:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    f808:	e03fff15 	stw	zero,-4(fp)
    f80c:	00000506 	br	f824 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    f810:	e0bfff17 	ldw	r2,-4(fp)
    f814:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    f818:	e0bfff17 	ldw	r2,-4(fp)
    f81c:	10800804 	addi	r2,r2,32
    f820:	e0bfff15 	stw	r2,-4(fp)
    f824:	e0bfff17 	ldw	r2,-4(fp)
    f828:	10820030 	cmpltui	r2,r2,2048
    f82c:	103ff81e 	bne	r2,zero,f810 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    f830:	0001883a 	nop
    f834:	e037883a 	mov	sp,fp
    f838:	df000017 	ldw	fp,0(sp)
    f83c:	dec00104 	addi	sp,sp,4
    f840:	f800283a 	ret

0000f844 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f844:	defffe04 	addi	sp,sp,-8
    f848:	dfc00115 	stw	ra,4(sp)
    f84c:	df000015 	stw	fp,0(sp)
    f850:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f854:	00800074 	movhi	r2,1
    f858:	1089f204 	addi	r2,r2,10184
    f85c:	10800017 	ldw	r2,0(r2)
    f860:	10000526 	beq	r2,zero,f878 <alt_get_errno+0x34>
    f864:	00800074 	movhi	r2,1
    f868:	1089f204 	addi	r2,r2,10184
    f86c:	10800017 	ldw	r2,0(r2)
    f870:	103ee83a 	callr	r2
    f874:	00000206 	br	f880 <alt_get_errno+0x3c>
    f878:	00800074 	movhi	r2,1
    f87c:	1090fe04 	addi	r2,r2,17400
}
    f880:	e037883a 	mov	sp,fp
    f884:	dfc00117 	ldw	ra,4(sp)
    f888:	df000017 	ldw	fp,0(sp)
    f88c:	dec00204 	addi	sp,sp,8
    f890:	f800283a 	ret

0000f894 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    f894:	defffa04 	addi	sp,sp,-24
    f898:	dfc00515 	stw	ra,20(sp)
    f89c:	df000415 	stw	fp,16(sp)
    f8a0:	df000404 	addi	fp,sp,16
    f8a4:	e13ffe15 	stw	r4,-8(fp)
    f8a8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    f8ac:	e0bffe17 	ldw	r2,-8(fp)
    f8b0:	10000326 	beq	r2,zero,f8c0 <alt_dev_llist_insert+0x2c>
    f8b4:	e0bffe17 	ldw	r2,-8(fp)
    f8b8:	10800217 	ldw	r2,8(r2)
    f8bc:	1000061e 	bne	r2,zero,f8d8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    f8c0:	000f8440 	call	f844 <alt_get_errno>
    f8c4:	1007883a 	mov	r3,r2
    f8c8:	00800584 	movi	r2,22
    f8cc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    f8d0:	00bffa84 	movi	r2,-22
    f8d4:	00001306 	br	f924 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    f8d8:	e0bffe17 	ldw	r2,-8(fp)
    f8dc:	e0ffff17 	ldw	r3,-4(fp)
    f8e0:	e0fffc15 	stw	r3,-16(fp)
    f8e4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    f8e8:	e0bffd17 	ldw	r2,-12(fp)
    f8ec:	e0fffc17 	ldw	r3,-16(fp)
    f8f0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    f8f4:	e0bffc17 	ldw	r2,-16(fp)
    f8f8:	10c00017 	ldw	r3,0(r2)
    f8fc:	e0bffd17 	ldw	r2,-12(fp)
    f900:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    f904:	e0bffc17 	ldw	r2,-16(fp)
    f908:	10800017 	ldw	r2,0(r2)
    f90c:	e0fffd17 	ldw	r3,-12(fp)
    f910:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    f914:	e0bffc17 	ldw	r2,-16(fp)
    f918:	e0fffd17 	ldw	r3,-12(fp)
    f91c:	10c00015 	stw	r3,0(r2)

  return 0;  
    f920:	0005883a 	mov	r2,zero
}
    f924:	e037883a 	mov	sp,fp
    f928:	dfc00117 	ldw	ra,4(sp)
    f92c:	df000017 	ldw	fp,0(sp)
    f930:	dec00204 	addi	sp,sp,8
    f934:	f800283a 	ret

0000f938 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    f938:	defffd04 	addi	sp,sp,-12
    f93c:	dfc00215 	stw	ra,8(sp)
    f940:	df000115 	stw	fp,4(sp)
    f944:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f948:	00800074 	movhi	r2,1
    f94c:	1081f704 	addi	r2,r2,2012
    f950:	e0bfff15 	stw	r2,-4(fp)
    f954:	00000606 	br	f970 <_do_ctors+0x38>
        (*ctor) (); 
    f958:	e0bfff17 	ldw	r2,-4(fp)
    f95c:	10800017 	ldw	r2,0(r2)
    f960:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f964:	e0bfff17 	ldw	r2,-4(fp)
    f968:	10bfff04 	addi	r2,r2,-4
    f96c:	e0bfff15 	stw	r2,-4(fp)
    f970:	e0ffff17 	ldw	r3,-4(fp)
    f974:	00800074 	movhi	r2,1
    f978:	1081f804 	addi	r2,r2,2016
    f97c:	18bff62e 	bgeu	r3,r2,f958 <_do_ctors+0x20>
        (*ctor) (); 
}
    f980:	0001883a 	nop
    f984:	e037883a 	mov	sp,fp
    f988:	dfc00117 	ldw	ra,4(sp)
    f98c:	df000017 	ldw	fp,0(sp)
    f990:	dec00204 	addi	sp,sp,8
    f994:	f800283a 	ret

0000f998 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    f998:	defffd04 	addi	sp,sp,-12
    f99c:	dfc00215 	stw	ra,8(sp)
    f9a0:	df000115 	stw	fp,4(sp)
    f9a4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f9a8:	00800074 	movhi	r2,1
    f9ac:	1081f704 	addi	r2,r2,2012
    f9b0:	e0bfff15 	stw	r2,-4(fp)
    f9b4:	00000606 	br	f9d0 <_do_dtors+0x38>
        (*dtor) (); 
    f9b8:	e0bfff17 	ldw	r2,-4(fp)
    f9bc:	10800017 	ldw	r2,0(r2)
    f9c0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f9c4:	e0bfff17 	ldw	r2,-4(fp)
    f9c8:	10bfff04 	addi	r2,r2,-4
    f9cc:	e0bfff15 	stw	r2,-4(fp)
    f9d0:	e0ffff17 	ldw	r3,-4(fp)
    f9d4:	00800074 	movhi	r2,1
    f9d8:	1081f804 	addi	r2,r2,2016
    f9dc:	18bff62e 	bgeu	r3,r2,f9b8 <_do_dtors+0x20>
        (*dtor) (); 
}
    f9e0:	0001883a 	nop
    f9e4:	e037883a 	mov	sp,fp
    f9e8:	dfc00117 	ldw	ra,4(sp)
    f9ec:	df000017 	ldw	fp,0(sp)
    f9f0:	dec00204 	addi	sp,sp,8
    f9f4:	f800283a 	ret

0000f9f8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    f9f8:	defffe04 	addi	sp,sp,-8
    f9fc:	dfc00115 	stw	ra,4(sp)
    fa00:	df000015 	stw	fp,0(sp)
    fa04:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    fa08:	01440004 	movi	r5,4096
    fa0c:	0009883a 	mov	r4,zero
    fa10:	00103200 	call	10320 <alt_icache_flush>
#endif
}
    fa14:	0001883a 	nop
    fa18:	e037883a 	mov	sp,fp
    fa1c:	dfc00117 	ldw	ra,4(sp)
    fa20:	df000017 	ldw	fp,0(sp)
    fa24:	dec00204 	addi	sp,sp,8
    fa28:	f800283a 	ret

0000fa2c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    fa2c:	defff904 	addi	sp,sp,-28
    fa30:	dfc00615 	stw	ra,24(sp)
    fa34:	df000515 	stw	fp,20(sp)
    fa38:	df000504 	addi	fp,sp,20
    fa3c:	e13ffc15 	stw	r4,-16(fp)
    fa40:	e17ffd15 	stw	r5,-12(fp)
    fa44:	e1bffe15 	stw	r6,-8(fp)
    fa48:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    fa4c:	e1bfff17 	ldw	r6,-4(fp)
    fa50:	e17ffe17 	ldw	r5,-8(fp)
    fa54:	e13ffd17 	ldw	r4,-12(fp)
    fa58:	000fe380 	call	fe38 <open>
    fa5c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    fa60:	e0bffb17 	ldw	r2,-20(fp)
    fa64:	10001c16 	blt	r2,zero,fad8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    fa68:	00800074 	movhi	r2,1
    fa6c:	10852904 	addi	r2,r2,5284
    fa70:	e0fffb17 	ldw	r3,-20(fp)
    fa74:	18c00324 	muli	r3,r3,12
    fa78:	10c5883a 	add	r2,r2,r3
    fa7c:	10c00017 	ldw	r3,0(r2)
    fa80:	e0bffc17 	ldw	r2,-16(fp)
    fa84:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fa88:	00800074 	movhi	r2,1
    fa8c:	10852904 	addi	r2,r2,5284
    fa90:	e0fffb17 	ldw	r3,-20(fp)
    fa94:	18c00324 	muli	r3,r3,12
    fa98:	10c5883a 	add	r2,r2,r3
    fa9c:	10800104 	addi	r2,r2,4
    faa0:	10c00017 	ldw	r3,0(r2)
    faa4:	e0bffc17 	ldw	r2,-16(fp)
    faa8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    faac:	00800074 	movhi	r2,1
    fab0:	10852904 	addi	r2,r2,5284
    fab4:	e0fffb17 	ldw	r3,-20(fp)
    fab8:	18c00324 	muli	r3,r3,12
    fabc:	10c5883a 	add	r2,r2,r3
    fac0:	10800204 	addi	r2,r2,8
    fac4:	10c00017 	ldw	r3,0(r2)
    fac8:	e0bffc17 	ldw	r2,-16(fp)
    facc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    fad0:	e13ffb17 	ldw	r4,-20(fp)
    fad4:	000d7040 	call	d704 <alt_release_fd>
  }
} 
    fad8:	0001883a 	nop
    fadc:	e037883a 	mov	sp,fp
    fae0:	dfc00117 	ldw	ra,4(sp)
    fae4:	df000017 	ldw	fp,0(sp)
    fae8:	dec00204 	addi	sp,sp,8
    faec:	f800283a 	ret

0000faf0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    faf0:	defffb04 	addi	sp,sp,-20
    faf4:	dfc00415 	stw	ra,16(sp)
    faf8:	df000315 	stw	fp,12(sp)
    fafc:	df000304 	addi	fp,sp,12
    fb00:	e13ffd15 	stw	r4,-12(fp)
    fb04:	e17ffe15 	stw	r5,-8(fp)
    fb08:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    fb0c:	01c07fc4 	movi	r7,511
    fb10:	01800044 	movi	r6,1
    fb14:	e17ffd17 	ldw	r5,-12(fp)
    fb18:	01000074 	movhi	r4,1
    fb1c:	21052c04 	addi	r4,r4,5296
    fb20:	000fa2c0 	call	fa2c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    fb24:	01c07fc4 	movi	r7,511
    fb28:	000d883a 	mov	r6,zero
    fb2c:	e17ffe17 	ldw	r5,-8(fp)
    fb30:	01000074 	movhi	r4,1
    fb34:	21052904 	addi	r4,r4,5284
    fb38:	000fa2c0 	call	fa2c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    fb3c:	01c07fc4 	movi	r7,511
    fb40:	01800044 	movi	r6,1
    fb44:	e17fff17 	ldw	r5,-4(fp)
    fb48:	01000074 	movhi	r4,1
    fb4c:	21052f04 	addi	r4,r4,5308
    fb50:	000fa2c0 	call	fa2c <alt_open_fd>
}  
    fb54:	0001883a 	nop
    fb58:	e037883a 	mov	sp,fp
    fb5c:	dfc00117 	ldw	ra,4(sp)
    fb60:	df000017 	ldw	fp,0(sp)
    fb64:	dec00204 	addi	sp,sp,8
    fb68:	f800283a 	ret

0000fb6c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    fb6c:	defff004 	addi	sp,sp,-64
    fb70:	df000f15 	stw	fp,60(sp)
    fb74:	df000f04 	addi	fp,sp,60
    fb78:	e13ffd15 	stw	r4,-12(fp)
    fb7c:	e17ffe15 	stw	r5,-8(fp)
    fb80:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
    fb84:	00bffa84 	movi	r2,-22
    fb88:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    fb8c:	e0bffd17 	ldw	r2,-12(fp)
    fb90:	10800828 	cmpgeui	r2,r2,32
    fb94:	10005c1e 	bne	r2,zero,fd08 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fb98:	0005303a 	rdctl	r2,status
    fb9c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fba0:	e0fff617 	ldw	r3,-40(fp)
    fba4:	00bfff84 	movi	r2,-2
    fba8:	1884703a 	and	r2,r3,r2
    fbac:	1001703a 	wrctl	status,r2
  
  return context;
    fbb0:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    fbb4:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
    fbb8:	00800074 	movhi	r2,1
    fbbc:	10911004 	addi	r2,r2,17472
    fbc0:	e0fffd17 	ldw	r3,-12(fp)
    fbc4:	180690fa 	slli	r3,r3,3
    fbc8:	10c5883a 	add	r2,r2,r3
    fbcc:	e0ffff17 	ldw	r3,-4(fp)
    fbd0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
    fbd4:	00800074 	movhi	r2,1
    fbd8:	10911004 	addi	r2,r2,17472
    fbdc:	e0fffd17 	ldw	r3,-12(fp)
    fbe0:	180690fa 	slli	r3,r3,3
    fbe4:	10c5883a 	add	r2,r2,r3
    fbe8:	10800104 	addi	r2,r2,4
    fbec:	e0fffe17 	ldw	r3,-8(fp)
    fbf0:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    fbf4:	e0bfff17 	ldw	r2,-4(fp)
    fbf8:	10001f26 	beq	r2,zero,fc78 <alt_irq_register+0x10c>
    fbfc:	e0bffd17 	ldw	r2,-12(fp)
    fc00:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fc04:	0005303a 	rdctl	r2,status
    fc08:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fc0c:	e0fff717 	ldw	r3,-36(fp)
    fc10:	00bfff84 	movi	r2,-2
    fc14:	1884703a 	and	r2,r3,r2
    fc18:	1001703a 	wrctl	status,r2
  
  return context;
    fc1c:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    fc20:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    fc24:	00c00044 	movi	r3,1
    fc28:	e0bff217 	ldw	r2,-56(fp)
    fc2c:	1884983a 	sll	r2,r3,r2
    fc30:	1007883a 	mov	r3,r2
    fc34:	00800074 	movhi	r2,1
    fc38:	10910204 	addi	r2,r2,17416
    fc3c:	10800017 	ldw	r2,0(r2)
    fc40:	1886b03a 	or	r3,r3,r2
    fc44:	00800074 	movhi	r2,1
    fc48:	10910204 	addi	r2,r2,17416
    fc4c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    fc50:	00800074 	movhi	r2,1
    fc54:	10910204 	addi	r2,r2,17416
    fc58:	10800017 	ldw	r2,0(r2)
    fc5c:	100170fa 	wrctl	ienable,r2
    fc60:	e0bff817 	ldw	r2,-32(fp)
    fc64:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fc68:	e0bff917 	ldw	r2,-28(fp)
    fc6c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    fc70:	0005883a 	mov	r2,zero
    fc74:	00001f06 	br	fcf4 <alt_irq_register+0x188>
    fc78:	e0bffd17 	ldw	r2,-12(fp)
    fc7c:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fc80:	0005303a 	rdctl	r2,status
    fc84:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fc88:	e0fffa17 	ldw	r3,-24(fp)
    fc8c:	00bfff84 	movi	r2,-2
    fc90:	1884703a 	and	r2,r3,r2
    fc94:	1001703a 	wrctl	status,r2
  
  return context;
    fc98:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    fc9c:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
    fca0:	00c00044 	movi	r3,1
    fca4:	e0bff417 	ldw	r2,-48(fp)
    fca8:	1884983a 	sll	r2,r3,r2
    fcac:	0084303a 	nor	r2,zero,r2
    fcb0:	1007883a 	mov	r3,r2
    fcb4:	00800074 	movhi	r2,1
    fcb8:	10910204 	addi	r2,r2,17416
    fcbc:	10800017 	ldw	r2,0(r2)
    fcc0:	1886703a 	and	r3,r3,r2
    fcc4:	00800074 	movhi	r2,1
    fcc8:	10910204 	addi	r2,r2,17416
    fccc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    fcd0:	00800074 	movhi	r2,1
    fcd4:	10910204 	addi	r2,r2,17416
    fcd8:	10800017 	ldw	r2,0(r2)
    fcdc:	100170fa 	wrctl	ienable,r2
    fce0:	e0bffb17 	ldw	r2,-20(fp)
    fce4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fce8:	e0bffc17 	ldw	r2,-16(fp)
    fcec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    fcf0:	0005883a 	mov	r2,zero
    fcf4:	e0bff115 	stw	r2,-60(fp)
    fcf8:	e0bff317 	ldw	r2,-52(fp)
    fcfc:	e0bff515 	stw	r2,-44(fp)
    fd00:	e0bff517 	ldw	r2,-44(fp)
    fd04:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    fd08:	e0bff117 	ldw	r2,-60(fp)
}
    fd0c:	e037883a 	mov	sp,fp
    fd10:	df000017 	ldw	fp,0(sp)
    fd14:	dec00104 	addi	sp,sp,4
    fd18:	f800283a 	ret

0000fd1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fd1c:	defffe04 	addi	sp,sp,-8
    fd20:	dfc00115 	stw	ra,4(sp)
    fd24:	df000015 	stw	fp,0(sp)
    fd28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fd2c:	00800074 	movhi	r2,1
    fd30:	1089f204 	addi	r2,r2,10184
    fd34:	10800017 	ldw	r2,0(r2)
    fd38:	10000526 	beq	r2,zero,fd50 <alt_get_errno+0x34>
    fd3c:	00800074 	movhi	r2,1
    fd40:	1089f204 	addi	r2,r2,10184
    fd44:	10800017 	ldw	r2,0(r2)
    fd48:	103ee83a 	callr	r2
    fd4c:	00000206 	br	fd58 <alt_get_errno+0x3c>
    fd50:	00800074 	movhi	r2,1
    fd54:	1090fe04 	addi	r2,r2,17400
}
    fd58:	e037883a 	mov	sp,fp
    fd5c:	dfc00117 	ldw	ra,4(sp)
    fd60:	df000017 	ldw	fp,0(sp)
    fd64:	dec00204 	addi	sp,sp,8
    fd68:	f800283a 	ret

0000fd6c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    fd6c:	defffd04 	addi	sp,sp,-12
    fd70:	df000215 	stw	fp,8(sp)
    fd74:	df000204 	addi	fp,sp,8
    fd78:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    fd7c:	e0bfff17 	ldw	r2,-4(fp)
    fd80:	10800217 	ldw	r2,8(r2)
    fd84:	10d00034 	orhi	r3,r2,16384
    fd88:	e0bfff17 	ldw	r2,-4(fp)
    fd8c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    fd90:	e03ffe15 	stw	zero,-8(fp)
    fd94:	00001d06 	br	fe0c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    fd98:	00800074 	movhi	r2,1
    fd9c:	10852904 	addi	r2,r2,5284
    fda0:	e0fffe17 	ldw	r3,-8(fp)
    fda4:	18c00324 	muli	r3,r3,12
    fda8:	10c5883a 	add	r2,r2,r3
    fdac:	10c00017 	ldw	r3,0(r2)
    fdb0:	e0bfff17 	ldw	r2,-4(fp)
    fdb4:	10800017 	ldw	r2,0(r2)
    fdb8:	1880111e 	bne	r3,r2,fe00 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    fdbc:	00800074 	movhi	r2,1
    fdc0:	10852904 	addi	r2,r2,5284
    fdc4:	e0fffe17 	ldw	r3,-8(fp)
    fdc8:	18c00324 	muli	r3,r3,12
    fdcc:	10c5883a 	add	r2,r2,r3
    fdd0:	10800204 	addi	r2,r2,8
    fdd4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    fdd8:	1000090e 	bge	r2,zero,fe00 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    fddc:	e0bffe17 	ldw	r2,-8(fp)
    fde0:	10c00324 	muli	r3,r2,12
    fde4:	00800074 	movhi	r2,1
    fde8:	10852904 	addi	r2,r2,5284
    fdec:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    fdf0:	e0bfff17 	ldw	r2,-4(fp)
    fdf4:	18800226 	beq	r3,r2,fe00 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    fdf8:	00bffcc4 	movi	r2,-13
    fdfc:	00000a06 	br	fe28 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    fe00:	e0bffe17 	ldw	r2,-8(fp)
    fe04:	10800044 	addi	r2,r2,1
    fe08:	e0bffe15 	stw	r2,-8(fp)
    fe0c:	00800074 	movhi	r2,1
    fe10:	1089ed04 	addi	r2,r2,10164
    fe14:	10800017 	ldw	r2,0(r2)
    fe18:	1007883a 	mov	r3,r2
    fe1c:	e0bffe17 	ldw	r2,-8(fp)
    fe20:	18bfdd2e 	bgeu	r3,r2,fd98 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    fe24:	0005883a 	mov	r2,zero
}
    fe28:	e037883a 	mov	sp,fp
    fe2c:	df000017 	ldw	fp,0(sp)
    fe30:	dec00104 	addi	sp,sp,4
    fe34:	f800283a 	ret

0000fe38 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    fe38:	defff604 	addi	sp,sp,-40
    fe3c:	dfc00915 	stw	ra,36(sp)
    fe40:	df000815 	stw	fp,32(sp)
    fe44:	df000804 	addi	fp,sp,32
    fe48:	e13ffd15 	stw	r4,-12(fp)
    fe4c:	e17ffe15 	stw	r5,-8(fp)
    fe50:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    fe54:	00bfffc4 	movi	r2,-1
    fe58:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    fe5c:	00bffb44 	movi	r2,-19
    fe60:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    fe64:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    fe68:	01400074 	movhi	r5,1
    fe6c:	2949eb04 	addi	r5,r5,10156
    fe70:	e13ffd17 	ldw	r4,-12(fp)
    fe74:	000d0600 	call	d060 <alt_find_dev>
    fe78:	e0bff815 	stw	r2,-32(fp)
    fe7c:	e0bff817 	ldw	r2,-32(fp)
    fe80:	1000051e 	bne	r2,zero,fe98 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    fe84:	e13ffd17 	ldw	r4,-12(fp)
    fe88:	00101580 	call	10158 <alt_find_file>
    fe8c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    fe90:	00800044 	movi	r2,1
    fe94:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    fe98:	e0bff817 	ldw	r2,-32(fp)
    fe9c:	10002926 	beq	r2,zero,ff44 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    fea0:	e13ff817 	ldw	r4,-32(fp)
    fea4:	001026c0 	call	1026c <alt_get_fd>
    fea8:	e0bff915 	stw	r2,-28(fp)
    feac:	e0bff917 	ldw	r2,-28(fp)
    feb0:	1000030e 	bge	r2,zero,fec0 <open+0x88>
    {
      status = index;
    feb4:	e0bff917 	ldw	r2,-28(fp)
    feb8:	e0bffa15 	stw	r2,-24(fp)
    febc:	00002306 	br	ff4c <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
    fec0:	e0bff917 	ldw	r2,-28(fp)
    fec4:	10c00324 	muli	r3,r2,12
    fec8:	00800074 	movhi	r2,1
    fecc:	10852904 	addi	r2,r2,5284
    fed0:	1885883a 	add	r2,r3,r2
    fed4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    fed8:	e0fffe17 	ldw	r3,-8(fp)
    fedc:	00900034 	movhi	r2,16384
    fee0:	10bfffc4 	addi	r2,r2,-1
    fee4:	1886703a 	and	r3,r3,r2
    fee8:	e0bffc17 	ldw	r2,-16(fp)
    feec:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    fef0:	e0bffb17 	ldw	r2,-20(fp)
    fef4:	1000051e 	bne	r2,zero,ff0c <open+0xd4>
    fef8:	e13ffc17 	ldw	r4,-16(fp)
    fefc:	000fd6c0 	call	fd6c <alt_file_locked>
    ff00:	e0bffa15 	stw	r2,-24(fp)
    ff04:	e0bffa17 	ldw	r2,-24(fp)
    ff08:	10001016 	blt	r2,zero,ff4c <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    ff0c:	e0bff817 	ldw	r2,-32(fp)
    ff10:	10800317 	ldw	r2,12(r2)
    ff14:	10000826 	beq	r2,zero,ff38 <open+0x100>
    ff18:	e0bff817 	ldw	r2,-32(fp)
    ff1c:	10800317 	ldw	r2,12(r2)
    ff20:	e1ffff17 	ldw	r7,-4(fp)
    ff24:	e1bffe17 	ldw	r6,-8(fp)
    ff28:	e17ffd17 	ldw	r5,-12(fp)
    ff2c:	e13ffc17 	ldw	r4,-16(fp)
    ff30:	103ee83a 	callr	r2
    ff34:	00000106 	br	ff3c <open+0x104>
    ff38:	0005883a 	mov	r2,zero
    ff3c:	e0bffa15 	stw	r2,-24(fp)
    ff40:	00000206 	br	ff4c <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
    ff44:	00bffb44 	movi	r2,-19
    ff48:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    ff4c:	e0bffa17 	ldw	r2,-24(fp)
    ff50:	1000090e 	bge	r2,zero,ff78 <open+0x140>
  {
    alt_release_fd (index);  
    ff54:	e13ff917 	ldw	r4,-28(fp)
    ff58:	000d7040 	call	d704 <alt_release_fd>
    ALT_ERRNO = -status;
    ff5c:	000fd1c0 	call	fd1c <alt_get_errno>
    ff60:	1007883a 	mov	r3,r2
    ff64:	e0bffa17 	ldw	r2,-24(fp)
    ff68:	0085c83a 	sub	r2,zero,r2
    ff6c:	18800015 	stw	r2,0(r3)
    return -1;
    ff70:	00bfffc4 	movi	r2,-1
    ff74:	00000106 	br	ff7c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    ff78:	e0bff917 	ldw	r2,-28(fp)
}
    ff7c:	e037883a 	mov	sp,fp
    ff80:	dfc00117 	ldw	ra,4(sp)
    ff84:	df000017 	ldw	fp,0(sp)
    ff88:	dec00204 	addi	sp,sp,8
    ff8c:	f800283a 	ret

0000ff90 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    ff90:	defffa04 	addi	sp,sp,-24
    ff94:	df000515 	stw	fp,20(sp)
    ff98:	df000504 	addi	fp,sp,20
    ff9c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ffa0:	0005303a 	rdctl	r2,status
    ffa4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ffa8:	e0fffc17 	ldw	r3,-16(fp)
    ffac:	00bfff84 	movi	r2,-2
    ffb0:	1884703a 	and	r2,r3,r2
    ffb4:	1001703a 	wrctl	status,r2
  
  return context;
    ffb8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    ffbc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    ffc0:	e0bfff17 	ldw	r2,-4(fp)
    ffc4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    ffc8:	e0bffd17 	ldw	r2,-12(fp)
    ffcc:	10800017 	ldw	r2,0(r2)
    ffd0:	e0fffd17 	ldw	r3,-12(fp)
    ffd4:	18c00117 	ldw	r3,4(r3)
    ffd8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    ffdc:	e0bffd17 	ldw	r2,-12(fp)
    ffe0:	10800117 	ldw	r2,4(r2)
    ffe4:	e0fffd17 	ldw	r3,-12(fp)
    ffe8:	18c00017 	ldw	r3,0(r3)
    ffec:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    fff0:	e0bffd17 	ldw	r2,-12(fp)
    fff4:	e0fffd17 	ldw	r3,-12(fp)
    fff8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    fffc:	e0bffd17 	ldw	r2,-12(fp)
   10000:	e0fffd17 	ldw	r3,-12(fp)
   10004:	10c00015 	stw	r3,0(r2)
   10008:	e0bffb17 	ldw	r2,-20(fp)
   1000c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10010:	e0bffe17 	ldw	r2,-8(fp)
   10014:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   10018:	0001883a 	nop
   1001c:	e037883a 	mov	sp,fp
   10020:	df000017 	ldw	fp,0(sp)
   10024:	dec00104 	addi	sp,sp,4
   10028:	f800283a 	ret

0001002c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1002c:	defffb04 	addi	sp,sp,-20
   10030:	dfc00415 	stw	ra,16(sp)
   10034:	df000315 	stw	fp,12(sp)
   10038:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1003c:	d0a01217 	ldw	r2,-32696(gp)
   10040:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   10044:	d0a72117 	ldw	r2,-25468(gp)
   10048:	10800044 	addi	r2,r2,1
   1004c:	d0a72115 	stw	r2,-25468(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10050:	00002e06 	br	1010c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   10054:	e0bffd17 	ldw	r2,-12(fp)
   10058:	10800017 	ldw	r2,0(r2)
   1005c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   10060:	e0bffd17 	ldw	r2,-12(fp)
   10064:	10800403 	ldbu	r2,16(r2)
   10068:	10803fcc 	andi	r2,r2,255
   1006c:	10000426 	beq	r2,zero,10080 <alt_tick+0x54>
   10070:	d0a72117 	ldw	r2,-25468(gp)
   10074:	1000021e 	bne	r2,zero,10080 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   10078:	e0bffd17 	ldw	r2,-12(fp)
   1007c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   10080:	e0bffd17 	ldw	r2,-12(fp)
   10084:	10800217 	ldw	r2,8(r2)
   10088:	d0e72117 	ldw	r3,-25468(gp)
   1008c:	18801d36 	bltu	r3,r2,10104 <alt_tick+0xd8>
   10090:	e0bffd17 	ldw	r2,-12(fp)
   10094:	10800403 	ldbu	r2,16(r2)
   10098:	10803fcc 	andi	r2,r2,255
   1009c:	1000191e 	bne	r2,zero,10104 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   100a0:	e0bffd17 	ldw	r2,-12(fp)
   100a4:	10800317 	ldw	r2,12(r2)
   100a8:	e0fffd17 	ldw	r3,-12(fp)
   100ac:	18c00517 	ldw	r3,20(r3)
   100b0:	1809883a 	mov	r4,r3
   100b4:	103ee83a 	callr	r2
   100b8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   100bc:	e0bfff17 	ldw	r2,-4(fp)
   100c0:	1000031e 	bne	r2,zero,100d0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   100c4:	e13ffd17 	ldw	r4,-12(fp)
   100c8:	000ff900 	call	ff90 <alt_alarm_stop>
   100cc:	00000d06 	br	10104 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   100d0:	e0bffd17 	ldw	r2,-12(fp)
   100d4:	10c00217 	ldw	r3,8(r2)
   100d8:	e0bfff17 	ldw	r2,-4(fp)
   100dc:	1887883a 	add	r3,r3,r2
   100e0:	e0bffd17 	ldw	r2,-12(fp)
   100e4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   100e8:	e0bffd17 	ldw	r2,-12(fp)
   100ec:	10c00217 	ldw	r3,8(r2)
   100f0:	d0a72117 	ldw	r2,-25468(gp)
   100f4:	1880032e 	bgeu	r3,r2,10104 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   100f8:	e0bffd17 	ldw	r2,-12(fp)
   100fc:	00c00044 	movi	r3,1
   10100:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   10104:	e0bffe17 	ldw	r2,-8(fp)
   10108:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1010c:	e0fffd17 	ldw	r3,-12(fp)
   10110:	d0a01204 	addi	r2,gp,-32696
   10114:	18bfcf1e 	bne	r3,r2,10054 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   10118:	0001883a 	nop
}
   1011c:	0001883a 	nop
   10120:	e037883a 	mov	sp,fp
   10124:	dfc00117 	ldw	ra,4(sp)
   10128:	df000017 	ldw	fp,0(sp)
   1012c:	dec00204 	addi	sp,sp,8
   10130:	f800283a 	ret

00010134 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   10134:	deffff04 	addi	sp,sp,-4
   10138:	df000015 	stw	fp,0(sp)
   1013c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   10140:	000170fa 	wrctl	ienable,zero
}
   10144:	0001883a 	nop
   10148:	e037883a 	mov	sp,fp
   1014c:	df000017 	ldw	fp,0(sp)
   10150:	dec00104 	addi	sp,sp,4
   10154:	f800283a 	ret

00010158 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   10158:	defffb04 	addi	sp,sp,-20
   1015c:	dfc00415 	stw	ra,16(sp)
   10160:	df000315 	stw	fp,12(sp)
   10164:	df000304 	addi	fp,sp,12
   10168:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1016c:	00800074 	movhi	r2,1
   10170:	1089e904 	addi	r2,r2,10148
   10174:	10800017 	ldw	r2,0(r2)
   10178:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1017c:	00003106 	br	10244 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   10180:	e0bffd17 	ldw	r2,-12(fp)
   10184:	10800217 	ldw	r2,8(r2)
   10188:	1009883a 	mov	r4,r2
   1018c:	00007a00 	call	7a0 <strlen>
   10190:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   10194:	e0bffd17 	ldw	r2,-12(fp)
   10198:	10c00217 	ldw	r3,8(r2)
   1019c:	e0bffe17 	ldw	r2,-8(fp)
   101a0:	10bfffc4 	addi	r2,r2,-1
   101a4:	1885883a 	add	r2,r3,r2
   101a8:	10800003 	ldbu	r2,0(r2)
   101ac:	10803fcc 	andi	r2,r2,255
   101b0:	1080201c 	xori	r2,r2,128
   101b4:	10bfe004 	addi	r2,r2,-128
   101b8:	10800bd8 	cmpnei	r2,r2,47
   101bc:	1000031e 	bne	r2,zero,101cc <alt_find_file+0x74>
    {
      len -= 1;
   101c0:	e0bffe17 	ldw	r2,-8(fp)
   101c4:	10bfffc4 	addi	r2,r2,-1
   101c8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   101cc:	e0bffe17 	ldw	r2,-8(fp)
   101d0:	e0ffff17 	ldw	r3,-4(fp)
   101d4:	1885883a 	add	r2,r3,r2
   101d8:	10800003 	ldbu	r2,0(r2)
   101dc:	10803fcc 	andi	r2,r2,255
   101e0:	1080201c 	xori	r2,r2,128
   101e4:	10bfe004 	addi	r2,r2,-128
   101e8:	10800be0 	cmpeqi	r2,r2,47
   101ec:	1000081e 	bne	r2,zero,10210 <alt_find_file+0xb8>
   101f0:	e0bffe17 	ldw	r2,-8(fp)
   101f4:	e0ffff17 	ldw	r3,-4(fp)
   101f8:	1885883a 	add	r2,r3,r2
   101fc:	10800003 	ldbu	r2,0(r2)
   10200:	10803fcc 	andi	r2,r2,255
   10204:	1080201c 	xori	r2,r2,128
   10208:	10bfe004 	addi	r2,r2,-128
   1020c:	10000a1e 	bne	r2,zero,10238 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   10210:	e0bffd17 	ldw	r2,-12(fp)
   10214:	10800217 	ldw	r2,8(r2)
   10218:	e0fffe17 	ldw	r3,-8(fp)
   1021c:	180d883a 	mov	r6,r3
   10220:	e17fff17 	ldw	r5,-4(fp)
   10224:	1009883a 	mov	r4,r2
   10228:	00104980 	call	10498 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1022c:	1000021e 	bne	r2,zero,10238 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   10230:	e0bffd17 	ldw	r2,-12(fp)
   10234:	00000806 	br	10258 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   10238:	e0bffd17 	ldw	r2,-12(fp)
   1023c:	10800017 	ldw	r2,0(r2)
   10240:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10244:	e0fffd17 	ldw	r3,-12(fp)
   10248:	00800074 	movhi	r2,1
   1024c:	1089e904 	addi	r2,r2,10148
   10250:	18bfcb1e 	bne	r3,r2,10180 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   10254:	0005883a 	mov	r2,zero
}
   10258:	e037883a 	mov	sp,fp
   1025c:	dfc00117 	ldw	ra,4(sp)
   10260:	df000017 	ldw	fp,0(sp)
   10264:	dec00204 	addi	sp,sp,8
   10268:	f800283a 	ret

0001026c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1026c:	defffc04 	addi	sp,sp,-16
   10270:	df000315 	stw	fp,12(sp)
   10274:	df000304 	addi	fp,sp,12
   10278:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1027c:	00bffa04 	movi	r2,-24
   10280:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10284:	e03ffd15 	stw	zero,-12(fp)
   10288:	00001d06 	br	10300 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   1028c:	00800074 	movhi	r2,1
   10290:	10852904 	addi	r2,r2,5284
   10294:	e0fffd17 	ldw	r3,-12(fp)
   10298:	18c00324 	muli	r3,r3,12
   1029c:	10c5883a 	add	r2,r2,r3
   102a0:	10800017 	ldw	r2,0(r2)
   102a4:	1000131e 	bne	r2,zero,102f4 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   102a8:	00800074 	movhi	r2,1
   102ac:	10852904 	addi	r2,r2,5284
   102b0:	e0fffd17 	ldw	r3,-12(fp)
   102b4:	18c00324 	muli	r3,r3,12
   102b8:	10c5883a 	add	r2,r2,r3
   102bc:	e0ffff17 	ldw	r3,-4(fp)
   102c0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   102c4:	00800074 	movhi	r2,1
   102c8:	1089ed04 	addi	r2,r2,10164
   102cc:	10c00017 	ldw	r3,0(r2)
   102d0:	e0bffd17 	ldw	r2,-12(fp)
   102d4:	1880040e 	bge	r3,r2,102e8 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   102d8:	00800074 	movhi	r2,1
   102dc:	1089ed04 	addi	r2,r2,10164
   102e0:	e0fffd17 	ldw	r3,-12(fp)
   102e4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   102e8:	e0bffd17 	ldw	r2,-12(fp)
   102ec:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   102f0:	00000606 	br	1030c <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   102f4:	e0bffd17 	ldw	r2,-12(fp)
   102f8:	10800044 	addi	r2,r2,1
   102fc:	e0bffd15 	stw	r2,-12(fp)
   10300:	e0bffd17 	ldw	r2,-12(fp)
   10304:	10800810 	cmplti	r2,r2,32
   10308:	103fe01e 	bne	r2,zero,1028c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1030c:	e0bffe17 	ldw	r2,-8(fp)
}
   10310:	e037883a 	mov	sp,fp
   10314:	df000017 	ldw	fp,0(sp)
   10318:	dec00104 	addi	sp,sp,4
   1031c:	f800283a 	ret

00010320 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   10320:	defffb04 	addi	sp,sp,-20
   10324:	df000415 	stw	fp,16(sp)
   10328:	df000404 	addi	fp,sp,16
   1032c:	e13ffe15 	stw	r4,-8(fp)
   10330:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   10334:	e0bfff17 	ldw	r2,-4(fp)
   10338:	10840070 	cmpltui	r2,r2,4097
   1033c:	1000021e 	bne	r2,zero,10348 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   10340:	00840004 	movi	r2,4096
   10344:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   10348:	e0fffe17 	ldw	r3,-8(fp)
   1034c:	e0bfff17 	ldw	r2,-4(fp)
   10350:	1885883a 	add	r2,r3,r2
   10354:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10358:	e0bffe17 	ldw	r2,-8(fp)
   1035c:	e0bffc15 	stw	r2,-16(fp)
   10360:	00000506 	br	10378 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   10364:	e0bffc17 	ldw	r2,-16(fp)
   10368:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1036c:	e0bffc17 	ldw	r2,-16(fp)
   10370:	10800804 	addi	r2,r2,32
   10374:	e0bffc15 	stw	r2,-16(fp)
   10378:	e0fffc17 	ldw	r3,-16(fp)
   1037c:	e0bffd17 	ldw	r2,-12(fp)
   10380:	18bff836 	bltu	r3,r2,10364 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   10384:	e0bffe17 	ldw	r2,-8(fp)
   10388:	108007cc 	andi	r2,r2,31
   1038c:	10000226 	beq	r2,zero,10398 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   10390:	e0bffc17 	ldw	r2,-16(fp)
   10394:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   10398:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1039c:	0001883a 	nop
   103a0:	e037883a 	mov	sp,fp
   103a4:	df000017 	ldw	fp,0(sp)
   103a8:	dec00104 	addi	sp,sp,4
   103ac:	f800283a 	ret

000103b0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   103b0:	defffe04 	addi	sp,sp,-8
   103b4:	df000115 	stw	fp,4(sp)
   103b8:	df000104 	addi	fp,sp,4
   103bc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   103c0:	e0bfff17 	ldw	r2,-4(fp)
   103c4:	10bffe84 	addi	r2,r2,-6
   103c8:	10c00428 	cmpgeui	r3,r2,16
   103cc:	18001a1e 	bne	r3,zero,10438 <alt_exception_cause_generated_bad_addr+0x88>
   103d0:	100690ba 	slli	r3,r2,2
   103d4:	00800074 	movhi	r2,1
   103d8:	1080fa04 	addi	r2,r2,1000
   103dc:	1885883a 	add	r2,r3,r2
   103e0:	10800017 	ldw	r2,0(r2)
   103e4:	1000683a 	jmp	r2
   103e8:	00010428 	cmpgeui	zero,zero,1040
   103ec:	00010428 	cmpgeui	zero,zero,1040
   103f0:	00010438 	rdprs	zero,zero,1040
   103f4:	00010438 	rdprs	zero,zero,1040
   103f8:	00010438 	rdprs	zero,zero,1040
   103fc:	00010428 	cmpgeui	zero,zero,1040
   10400:	00010430 	cmpltui	zero,zero,1040
   10404:	00010438 	rdprs	zero,zero,1040
   10408:	00010428 	cmpgeui	zero,zero,1040
   1040c:	00010428 	cmpgeui	zero,zero,1040
   10410:	00010438 	rdprs	zero,zero,1040
   10414:	00010428 	cmpgeui	zero,zero,1040
   10418:	00010430 	cmpltui	zero,zero,1040
   1041c:	00010438 	rdprs	zero,zero,1040
   10420:	00010438 	rdprs	zero,zero,1040
   10424:	00010428 	cmpgeui	zero,zero,1040
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   10428:	00800044 	movi	r2,1
   1042c:	00000306 	br	1043c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   10430:	0005883a 	mov	r2,zero
   10434:	00000106 	br	1043c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   10438:	0005883a 	mov	r2,zero
  }
}
   1043c:	e037883a 	mov	sp,fp
   10440:	df000017 	ldw	fp,0(sp)
   10444:	dec00104 	addi	sp,sp,4
   10448:	f800283a 	ret

0001044c <atexit>:
   1044c:	200b883a 	mov	r5,r4
   10450:	000f883a 	mov	r7,zero
   10454:	000d883a 	mov	r6,zero
   10458:	0009883a 	mov	r4,zero
   1045c:	00105141 	jmpi	10514 <__register_exitproc>

00010460 <exit>:
   10460:	defffe04 	addi	sp,sp,-8
   10464:	000b883a 	mov	r5,zero
   10468:	dc000015 	stw	r16,0(sp)
   1046c:	dfc00115 	stw	ra,4(sp)
   10470:	2021883a 	mov	r16,r4
   10474:	001062c0 	call	1062c <__call_exitprocs>
   10478:	00800074 	movhi	r2,1
   1047c:	1089e304 	addi	r2,r2,10124
   10480:	11000017 	ldw	r4,0(r2)
   10484:	20800f17 	ldw	r2,60(r4)
   10488:	10000126 	beq	r2,zero,10490 <exit+0x30>
   1048c:	103ee83a 	callr	r2
   10490:	8009883a 	mov	r4,r16
   10494:	00107ac0 	call	107ac <_exit>

00010498 <memcmp>:
   10498:	01c000c4 	movi	r7,3
   1049c:	3980192e 	bgeu	r7,r6,10504 <memcmp+0x6c>
   104a0:	2144b03a 	or	r2,r4,r5
   104a4:	11c4703a 	and	r2,r2,r7
   104a8:	10000f26 	beq	r2,zero,104e8 <memcmp+0x50>
   104ac:	20800003 	ldbu	r2,0(r4)
   104b0:	28c00003 	ldbu	r3,0(r5)
   104b4:	10c0151e 	bne	r2,r3,1050c <memcmp+0x74>
   104b8:	31bfff84 	addi	r6,r6,-2
   104bc:	01ffffc4 	movi	r7,-1
   104c0:	00000406 	br	104d4 <memcmp+0x3c>
   104c4:	20800003 	ldbu	r2,0(r4)
   104c8:	28c00003 	ldbu	r3,0(r5)
   104cc:	31bfffc4 	addi	r6,r6,-1
   104d0:	10c00e1e 	bne	r2,r3,1050c <memcmp+0x74>
   104d4:	21000044 	addi	r4,r4,1
   104d8:	29400044 	addi	r5,r5,1
   104dc:	31fff91e 	bne	r6,r7,104c4 <memcmp+0x2c>
   104e0:	0005883a 	mov	r2,zero
   104e4:	f800283a 	ret
   104e8:	20c00017 	ldw	r3,0(r4)
   104ec:	28800017 	ldw	r2,0(r5)
   104f0:	18bfee1e 	bne	r3,r2,104ac <memcmp+0x14>
   104f4:	31bfff04 	addi	r6,r6,-4
   104f8:	21000104 	addi	r4,r4,4
   104fc:	29400104 	addi	r5,r5,4
   10500:	39bff936 	bltu	r7,r6,104e8 <memcmp+0x50>
   10504:	303fe91e 	bne	r6,zero,104ac <memcmp+0x14>
   10508:	003ff506 	br	104e0 <memcmp+0x48>
   1050c:	10c5c83a 	sub	r2,r2,r3
   10510:	f800283a 	ret

00010514 <__register_exitproc>:
   10514:	defffa04 	addi	sp,sp,-24
   10518:	dc000315 	stw	r16,12(sp)
   1051c:	04000074 	movhi	r16,1
   10520:	8409e304 	addi	r16,r16,10124
   10524:	80c00017 	ldw	r3,0(r16)
   10528:	dc400415 	stw	r17,16(sp)
   1052c:	dfc00515 	stw	ra,20(sp)
   10530:	18805217 	ldw	r2,328(r3)
   10534:	2023883a 	mov	r17,r4
   10538:	10003726 	beq	r2,zero,10618 <__register_exitproc+0x104>
   1053c:	10c00117 	ldw	r3,4(r2)
   10540:	010007c4 	movi	r4,31
   10544:	20c00e16 	blt	r4,r3,10580 <__register_exitproc+0x6c>
   10548:	1a000044 	addi	r8,r3,1
   1054c:	8800221e 	bne	r17,zero,105d8 <__register_exitproc+0xc4>
   10550:	18c00084 	addi	r3,r3,2
   10554:	18c7883a 	add	r3,r3,r3
   10558:	18c7883a 	add	r3,r3,r3
   1055c:	12000115 	stw	r8,4(r2)
   10560:	10c7883a 	add	r3,r2,r3
   10564:	19400015 	stw	r5,0(r3)
   10568:	0005883a 	mov	r2,zero
   1056c:	dfc00517 	ldw	ra,20(sp)
   10570:	dc400417 	ldw	r17,16(sp)
   10574:	dc000317 	ldw	r16,12(sp)
   10578:	dec00604 	addi	sp,sp,24
   1057c:	f800283a 	ret
   10580:	00800034 	movhi	r2,0
   10584:	10800004 	addi	r2,r2,0
   10588:	10002626 	beq	r2,zero,10624 <__register_exitproc+0x110>
   1058c:	01006404 	movi	r4,400
   10590:	d9400015 	stw	r5,0(sp)
   10594:	d9800115 	stw	r6,4(sp)
   10598:	d9c00215 	stw	r7,8(sp)
   1059c:	00000000 	call	0 <__alt_mem_SDRAM>
   105a0:	d9400017 	ldw	r5,0(sp)
   105a4:	d9800117 	ldw	r6,4(sp)
   105a8:	d9c00217 	ldw	r7,8(sp)
   105ac:	10001d26 	beq	r2,zero,10624 <__register_exitproc+0x110>
   105b0:	81000017 	ldw	r4,0(r16)
   105b4:	10000115 	stw	zero,4(r2)
   105b8:	02000044 	movi	r8,1
   105bc:	22405217 	ldw	r9,328(r4)
   105c0:	0007883a 	mov	r3,zero
   105c4:	12400015 	stw	r9,0(r2)
   105c8:	20805215 	stw	r2,328(r4)
   105cc:	10006215 	stw	zero,392(r2)
   105d0:	10006315 	stw	zero,396(r2)
   105d4:	883fde26 	beq	r17,zero,10550 <__register_exitproc+0x3c>
   105d8:	18c9883a 	add	r4,r3,r3
   105dc:	2109883a 	add	r4,r4,r4
   105e0:	1109883a 	add	r4,r2,r4
   105e4:	21802215 	stw	r6,136(r4)
   105e8:	01800044 	movi	r6,1
   105ec:	12406217 	ldw	r9,392(r2)
   105f0:	30cc983a 	sll	r6,r6,r3
   105f4:	4992b03a 	or	r9,r9,r6
   105f8:	12406215 	stw	r9,392(r2)
   105fc:	21c04215 	stw	r7,264(r4)
   10600:	01000084 	movi	r4,2
   10604:	893fd21e 	bne	r17,r4,10550 <__register_exitproc+0x3c>
   10608:	11006317 	ldw	r4,396(r2)
   1060c:	218cb03a 	or	r6,r4,r6
   10610:	11806315 	stw	r6,396(r2)
   10614:	003fce06 	br	10550 <__register_exitproc+0x3c>
   10618:	18805304 	addi	r2,r3,332
   1061c:	18805215 	stw	r2,328(r3)
   10620:	003fc606 	br	1053c <__register_exitproc+0x28>
   10624:	00bfffc4 	movi	r2,-1
   10628:	003fd006 	br	1056c <__register_exitproc+0x58>

0001062c <__call_exitprocs>:
   1062c:	defff504 	addi	sp,sp,-44
   10630:	df000915 	stw	fp,36(sp)
   10634:	dd400615 	stw	r21,24(sp)
   10638:	dc800315 	stw	r18,12(sp)
   1063c:	dfc00a15 	stw	ra,40(sp)
   10640:	ddc00815 	stw	r23,32(sp)
   10644:	dd800715 	stw	r22,28(sp)
   10648:	dd000515 	stw	r20,20(sp)
   1064c:	dcc00415 	stw	r19,16(sp)
   10650:	dc400215 	stw	r17,8(sp)
   10654:	dc000115 	stw	r16,4(sp)
   10658:	d9000015 	stw	r4,0(sp)
   1065c:	2839883a 	mov	fp,r5
   10660:	04800044 	movi	r18,1
   10664:	057fffc4 	movi	r21,-1
   10668:	00800074 	movhi	r2,1
   1066c:	1089e304 	addi	r2,r2,10124
   10670:	12000017 	ldw	r8,0(r2)
   10674:	45005217 	ldw	r20,328(r8)
   10678:	44c05204 	addi	r19,r8,328
   1067c:	a0001c26 	beq	r20,zero,106f0 <__call_exitprocs+0xc4>
   10680:	a0800117 	ldw	r2,4(r20)
   10684:	15ffffc4 	addi	r23,r2,-1
   10688:	b8000d16 	blt	r23,zero,106c0 <__call_exitprocs+0x94>
   1068c:	14000044 	addi	r16,r2,1
   10690:	8421883a 	add	r16,r16,r16
   10694:	8421883a 	add	r16,r16,r16
   10698:	84402004 	addi	r17,r16,128
   1069c:	a463883a 	add	r17,r20,r17
   106a0:	a421883a 	add	r16,r20,r16
   106a4:	e0001e26 	beq	fp,zero,10720 <__call_exitprocs+0xf4>
   106a8:	80804017 	ldw	r2,256(r16)
   106ac:	e0801c26 	beq	fp,r2,10720 <__call_exitprocs+0xf4>
   106b0:	bdffffc4 	addi	r23,r23,-1
   106b4:	843fff04 	addi	r16,r16,-4
   106b8:	8c7fff04 	addi	r17,r17,-4
   106bc:	bd7ff91e 	bne	r23,r21,106a4 <__call_exitprocs+0x78>
   106c0:	00800034 	movhi	r2,0
   106c4:	10800004 	addi	r2,r2,0
   106c8:	10000926 	beq	r2,zero,106f0 <__call_exitprocs+0xc4>
   106cc:	a0800117 	ldw	r2,4(r20)
   106d0:	1000301e 	bne	r2,zero,10794 <__call_exitprocs+0x168>
   106d4:	a0800017 	ldw	r2,0(r20)
   106d8:	10003226 	beq	r2,zero,107a4 <__call_exitprocs+0x178>
   106dc:	a009883a 	mov	r4,r20
   106e0:	98800015 	stw	r2,0(r19)
   106e4:	00000000 	call	0 <__alt_mem_SDRAM>
   106e8:	9d000017 	ldw	r20,0(r19)
   106ec:	a03fe41e 	bne	r20,zero,10680 <__call_exitprocs+0x54>
   106f0:	dfc00a17 	ldw	ra,40(sp)
   106f4:	df000917 	ldw	fp,36(sp)
   106f8:	ddc00817 	ldw	r23,32(sp)
   106fc:	dd800717 	ldw	r22,28(sp)
   10700:	dd400617 	ldw	r21,24(sp)
   10704:	dd000517 	ldw	r20,20(sp)
   10708:	dcc00417 	ldw	r19,16(sp)
   1070c:	dc800317 	ldw	r18,12(sp)
   10710:	dc400217 	ldw	r17,8(sp)
   10714:	dc000117 	ldw	r16,4(sp)
   10718:	dec00b04 	addi	sp,sp,44
   1071c:	f800283a 	ret
   10720:	a0800117 	ldw	r2,4(r20)
   10724:	80c00017 	ldw	r3,0(r16)
   10728:	10bfffc4 	addi	r2,r2,-1
   1072c:	15c01426 	beq	r2,r23,10780 <__call_exitprocs+0x154>
   10730:	80000015 	stw	zero,0(r16)
   10734:	183fde26 	beq	r3,zero,106b0 <__call_exitprocs+0x84>
   10738:	95c8983a 	sll	r4,r18,r23
   1073c:	a0806217 	ldw	r2,392(r20)
   10740:	a5800117 	ldw	r22,4(r20)
   10744:	2084703a 	and	r2,r4,r2
   10748:	10000b26 	beq	r2,zero,10778 <__call_exitprocs+0x14c>
   1074c:	a0806317 	ldw	r2,396(r20)
   10750:	2088703a 	and	r4,r4,r2
   10754:	20000c1e 	bne	r4,zero,10788 <__call_exitprocs+0x15c>
   10758:	89400017 	ldw	r5,0(r17)
   1075c:	d9000017 	ldw	r4,0(sp)
   10760:	183ee83a 	callr	r3
   10764:	a0800117 	ldw	r2,4(r20)
   10768:	15bfbf1e 	bne	r2,r22,10668 <__call_exitprocs+0x3c>
   1076c:	98800017 	ldw	r2,0(r19)
   10770:	153fcf26 	beq	r2,r20,106b0 <__call_exitprocs+0x84>
   10774:	003fbc06 	br	10668 <__call_exitprocs+0x3c>
   10778:	183ee83a 	callr	r3
   1077c:	003ff906 	br	10764 <__call_exitprocs+0x138>
   10780:	a5c00115 	stw	r23,4(r20)
   10784:	003feb06 	br	10734 <__call_exitprocs+0x108>
   10788:	89000017 	ldw	r4,0(r17)
   1078c:	183ee83a 	callr	r3
   10790:	003ff406 	br	10764 <__call_exitprocs+0x138>
   10794:	a0800017 	ldw	r2,0(r20)
   10798:	a027883a 	mov	r19,r20
   1079c:	1029883a 	mov	r20,r2
   107a0:	003fb606 	br	1067c <__call_exitprocs+0x50>
   107a4:	0005883a 	mov	r2,zero
   107a8:	003ffb06 	br	10798 <__call_exitprocs+0x16c>

000107ac <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   107ac:	defffd04 	addi	sp,sp,-12
   107b0:	df000215 	stw	fp,8(sp)
   107b4:	df000204 	addi	fp,sp,8
   107b8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   107bc:	0001883a 	nop
   107c0:	e0bfff17 	ldw	r2,-4(fp)
   107c4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   107c8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   107cc:	10000226 	beq	r2,zero,107d8 <_exit+0x2c>
    ALT_SIM_FAIL();
   107d0:	002af070 	cmpltui	zero,zero,43969
   107d4:	00000106 	br	107dc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   107d8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   107dc:	003fff06 	br	107dc <_exit+0x30>
