
sw_design.elf:     file format elf32-littlenios2
sw_design.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000598c memsz 0x0000598c flags r-x
    LOAD off    0x000069ac vaddr 0x000059ac paddr 0x00007418 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00008e84 vaddr 0x00008e84 paddr 0x00008e84 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005728  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000040  0000596c  0000596c  0000696c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  000059ac  00007418  000069ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00008e84  00008e84  00008e84  2**2
                  ALLOC, SMALL_DATA
  6 .SRAM         00000000  00008fd8  00008fd8  00008418  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00008418  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a30  00000000  00000000  00008440  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000164a9  00000000  00000000  00008e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006048  00000000  00000000  0001f319  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006958  00000000  00000000  00025361  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000159c  00000000  00000000  0002bcbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002724  00000000  00000000  0002d258  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000049c3  00000000  00000000  0002f97c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00034340  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000680  00000000  00000000  00034370  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00036f31  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000b  00000000  00000000  00036f34  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00036f3f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00036f40  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00036f41  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00036f45  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00036f49  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000004  00000000  00000000  00036f4d  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000004  00000000  00000000  00036f51  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000004  00000000  00000000  00036f55  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000a  00000000  00000000  00036f59  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001b  00000000  00000000  00036f63  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00050afc  00000000  00000000  00036f7e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
0000596c l    d  .rodata	00000000 .rodata
000059ac l    d  .rwdata	00000000 .rwdata
00008e84 l    d  .bss	00000000 .bss
00008fd8 l    d  .SRAM	00000000 .SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../sw_design_bsp//obj/HAL/src/crt0.o
0000028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00000430 l     F .text	00000008 __fp_unlock
00000444 l     F .text	0000019c __sinit.part.1
000005e0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000059ac l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
0000308c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000031ac l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000031d8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000032d8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000033cc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000034b8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000036a0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00007408 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00003900 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00003a48 l     F .text	00000038 alt_dev_reg
00006380 l     O .rwdata	00001060 JTAG
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00003d48 l     F .text	0000020c altera_avalon_jtag_uart_irq
00003f54 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00004594 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00004820 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00004cd8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00004e18 l     F .text	00000050 alt_get_errno
00004e68 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00008eac g     O .bss	00000004 alt_instruction_exception_handler
00002e84 g     F .text	00000054 _isatty_r
000035dc g     F .text	0000007c alt_main
000002c4 g     F .text	000000c0 _puts_r
00008ed8 g     O .bss	00000100 alt_irq
00002bac g     F .text	00000060 _lseek_r
00007418 g       *ABS*	00000000 __flash_rwdata_start
00008fd8 g       *ABS*	00000000 __alt_heap_start
00002160 g     F .text	0000005c __sseek
00000780 g     F .text	00000010 __sinit
000005e8 g     F .text	00000068 __sfmoreglue
0000367c g     F .text	00000024 __malloc_unlock
0000184c g     F .text	0000015c memmove
00000768 g     F .text	00000018 _cleanup
00005230 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00002e28 g     F .text	0000005c _fstat_r
00008e90 g     O .bss	00000004 errno
000020dc g     F .text	00000008 __seofread
00008e98 g     O .bss	00000004 alt_argv
0000f3e0 g       *ABS*	00000000 _gp
00006200 g     O .rwdata	00000180 alt_fd_list
00005254 g     F .text	00000090 alt_find_dev
00001704 g     F .text	00000148 memcpy
00000438 g     F .text	0000000c _cleanup_r
00004d9c g     F .text	0000007c alt_io_redirect
0000596c g       *ABS*	00000000 __DTOR_END__
00000384 g     F .text	00000014 puts
0000553c g     F .text	0000009c alt_exception_cause_generated_bad_addr
00004154 g     F .text	0000021c altera_avalon_jtag_uart_read
00002fd0 g     F .text	00000064 .hidden __udivsi3
00003328 g     F .text	000000a4 isatty
000054ac g     F .text	00000090 alt_icache_flush
00008e8c g     O .bss	00000004 __malloc_top_pad
000007d0 g     F .text	000004bc __sfvwrite_r
00002034 g     F .text	00000054 _sbrk_r
00002dc8 g     F .text	00000060 _read_r
00007400 g     O .rwdata	00000004 alt_max_fd
000023cc g     F .text	000000f0 _fclose_r
00002748 g     F .text	00000030 fflush
00008e88 g     O .bss	00000004 __malloc_max_sbrked_mem
00003508 g     F .text	000000d4 lseek
000073e0 g     O .rwdata	00000004 _global_impure_ptr
00001ad0 g     F .text	00000564 _realloc_r
00008fd8 g       *ABS*	00000000 __bss_end
00004be8 g     F .text	000000f0 alt_iic_isr_register
00005128 g     F .text	00000108 alt_tick
000007a0 g     F .text	00000018 __fp_lock_all
00004b9c g     F .text	0000004c alt_ic_irq_enabled
0000508c g     F .text	0000009c alt_alarm_stop
00008ea0 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
000061d8 g     O .rwdata	00000028 alt_dev_null
000047d8 g     F .text	00000048 alt_dcache_flush_all
00007418 g       *ABS*	00000000 __ram_rwdata_end
000073f8 g     O .rwdata	00000008 alt_dev_list
00003950 g     F .text	000000f8 write
000059ac g       *ABS*	00000000 __ram_rodata_end
00003228 g     F .text	000000b0 fstat
00003034 g     F .text	00000058 .hidden __umodsi3
00008fd8 g       *ABS*	00000000 end
00003c80 g     F .text	000000c8 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0000596c g       *ABS*	00000000 __CTOR_LIST__
0000a000 g       *ABS*	00000000 __alt_stack_pointer
0000460c g     F .text	0000008c alt_avalon_timer_sc_init
00004370 g     F .text	00000224 altera_avalon_jtag_uart_write
00000790 g     F .text	00000004 __sfp_lock_acquire
00001620 g     F .text	000000e4 memchr
0000289c g     F .text	00000310 _free_r
000057b8 g     F .text	00000180 __call_exitprocs
000073e8 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000004c _start
00008ea4 g     O .bss	00000004 _alt_tick_rate
00008ea8 g     O .bss	00000004 _alt_nticks
000036f0 g     F .text	000000fc read
00003ab8 g     F .text	00000064 alt_sys_init
000056a0 g     F .text	00000118 __register_exitproc
00003ffc g     F .text	00000068 altera_avalon_jtag_uart_close
000059ac g       *ABS*	00000000 __ram_rwdata_start
0000596c g       *ABS*	00000000 __ram_rodata_start
00008eb0 g     O .bss	00000028 __malloc_current_mallinfo
00003b1c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000053f8 g     F .text	000000b4 alt_get_fd
00002378 g     F .text	00000054 _close_r
00005624 g     F .text	0000007c memcmp
00003bdc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00008fd8 g       *ABS*	00000000 __alt_stack_base
00003c2c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00002224 g     F .text	00000154 __swsetup_r
00000650 g     F .text	00000118 __sfp
00005dd0 g     O .rwdata	00000408 __malloc_av_
0000079c g     F .text	00000004 __sinit_lock_release
00002088 g     F .text	00000054 __sread
000052e4 g     F .text	00000114 alt_find_file
00004870 g     F .text	000000a4 alt_dev_llist_insert
00003658 g     F .text	00000024 __malloc_lock
00003850 g     F .text	000000b0 sbrk
000026ec g     F .text	0000005c _fflush_r
00008e84 g       *ABS*	00000000 __bss_start
000019a8 g     F .text	00000128 memset
00000290 g     F .text	00000034 main
00008e9c g     O .bss	00000004 alt_envp
00008e84 g     O .bss	00000004 __malloc_max_total_mem
00003b7c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000021bc g     F .text	00000008 __sclose
0000a000 g       *ABS*	00000000 __alt_heap_limit
000024bc g     F .text	00000014 fclose
00000e14 g     F .text	0000080c _malloc_r
00007404 g     O .rwdata	00000004 alt_errno
00000c8c g     F .text	000000c4 _fwalk
00002ed8 g     F .text	00000084 .hidden __divsi3
00002778 g     F .text	00000124 _malloc_trim_r
0000596c g       *ABS*	00000000 __CTOR_END__
0000596c g       *ABS*	00000000 __flash_rodata_start
0000596c g       *ABS*	00000000 __DTOR_LIST__
00003a80 g     F .text	00000038 alt_irq_init
000037ec g     F .text	00000064 alt_release_fd
000055d8 g     F .text	00000014 atexit
000021c4 g     F .text	00000060 _write_r
000073e4 g     O .rwdata	00000004 _impure_ptr
00008e94 g     O .bss	00000004 alt_argc
000024d0 g     F .text	0000021c __sflush_r
00004974 g     F .text	00000060 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
000007b8 g     F .text	00000018 __fp_unlock_all
000073f0 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00004a08 g     F .text	00000050 alt_ic_isr_register
00007418 g       *ABS*	00000000 _edata
00008fd8 g       *ABS*	00000000 _end
00000244 g       *ABS*	00000000 __ram_exceptions_end
00004064 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00004af8 g     F .text	000000a4 alt_ic_irq_disable
000020e4 g     F .text	0000007c __swrite
000073ec g     O .rwdata	00000004 __malloc_trim_threshold
000055ec g     F .text	00000038 exit
00000d50 g     F .text	000000c4 _fwalk_reent
00002f5c g     F .text	00000074 .hidden __modsi3
0000a000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000794 g     F .text	00000004 __sfp_lock_release
00005938 g     F .text	00000034 _exit
00004698 g     F .text	00000140 alt_alarm_start
00002c0c g     F .text	000001bc __smakebuf_r
00000398 g     F .text	00000098 strlen
00004f34 g     F .text	00000158 open
00000000 g       *ABS*	00000000 __alt_mem_SRAM
000049d4 g     F .text	00000034 alt_icache_flush_all
0000740c g     O .rwdata	00000004 alt_priority_mask
00004a58 g     F .text	000000a0 alt_ic_irq_enable
00007410 g     O .rwdata	00000008 alt_alarm_list
00004914 g     F .text	00000060 _do_ctors
000030dc g     F .text	000000d0 close
00003434 g     F .text	00000084 alt_load
00000798 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10a3b604 	addi	r2,r2,-28968
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10a3b604 	addi	r2,r2,-28968
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a6b317 	ldw	r2,-25908(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a6b317 	ldw	r2,-25908(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     24c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     250:	00bffd16 	blt	zero,r2,248 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     254:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
     258:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
     25c:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     260:	d6bcf814 	ori	gp,gp,62432
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     264:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     268:	10a3a114 	ori	r2,r2,36484

    movhi r3, %hi(__bss_end)
     26c:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     270:	18e3f614 	ori	r3,r3,36824

    beq r2, r3, 1f
     274:	10c00326 	beq	r2,r3,284 <_start+0x40>

0:
    stw zero, (r2)
     278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     27c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     280:	10fffd36 	bltu	r2,r3,278 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     284:	00034340 	call	3434 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     288:	00035dc0 	call	35dc <alt_main>

0000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     28c:	003fff06 	br	28c <alt_after_alt_main>

00000290 <main>:
 */

#include <stdio.h>

int main()
{
     290:	defffe04 	addi	sp,sp,-8
     294:	dfc00115 	stw	ra,4(sp)
     298:	df000015 	stw	fp,0(sp)
     29c:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
     2a0:	01000034 	movhi	r4,0
     2a4:	21165b04 	addi	r4,r4,22892
     2a8:	00003840 	call	384 <puts>

  return 0;
     2ac:	0005883a 	mov	r2,zero
}
     2b0:	e037883a 	mov	sp,fp
     2b4:	dfc00117 	ldw	ra,4(sp)
     2b8:	df000017 	ldw	fp,0(sp)
     2bc:	dec00204 	addi	sp,sp,8
     2c0:	f800283a 	ret

000002c4 <_puts_r>:
     2c4:	defff604 	addi	sp,sp,-40
     2c8:	dc000715 	stw	r16,28(sp)
     2cc:	2021883a 	mov	r16,r4
     2d0:	2809883a 	mov	r4,r5
     2d4:	dc400815 	stw	r17,32(sp)
     2d8:	dfc00915 	stw	ra,36(sp)
     2dc:	2823883a 	mov	r17,r5
     2e0:	00003980 	call	398 <strlen>
     2e4:	10c00044 	addi	r3,r2,1
     2e8:	d8800115 	stw	r2,4(sp)
     2ec:	00800034 	movhi	r2,0
     2f0:	10966004 	addi	r2,r2,22912
     2f4:	d8800215 	stw	r2,8(sp)
     2f8:	00800044 	movi	r2,1
     2fc:	d8800315 	stw	r2,12(sp)
     300:	00800084 	movi	r2,2
     304:	dc400015 	stw	r17,0(sp)
     308:	d8c00615 	stw	r3,24(sp)
     30c:	dec00415 	stw	sp,16(sp)
     310:	d8800515 	stw	r2,20(sp)
     314:	80000226 	beq	r16,zero,320 <_puts_r+0x5c>
     318:	80800e17 	ldw	r2,56(r16)
     31c:	10001426 	beq	r2,zero,370 <_puts_r+0xac>
     320:	81400217 	ldw	r5,8(r16)
     324:	2880030b 	ldhu	r2,12(r5)
     328:	10c8000c 	andi	r3,r2,8192
     32c:	1800061e 	bne	r3,zero,348 <_puts_r+0x84>
     330:	29001917 	ldw	r4,100(r5)
     334:	00f7ffc4 	movi	r3,-8193
     338:	10880014 	ori	r2,r2,8192
     33c:	20c6703a 	and	r3,r4,r3
     340:	2880030d 	sth	r2,12(r5)
     344:	28c01915 	stw	r3,100(r5)
     348:	d9800404 	addi	r6,sp,16
     34c:	8009883a 	mov	r4,r16
     350:	00007d00 	call	7d0 <__sfvwrite_r>
     354:	1000091e 	bne	r2,zero,37c <_puts_r+0xb8>
     358:	00800284 	movi	r2,10
     35c:	dfc00917 	ldw	ra,36(sp)
     360:	dc400817 	ldw	r17,32(sp)
     364:	dc000717 	ldw	r16,28(sp)
     368:	dec00a04 	addi	sp,sp,40
     36c:	f800283a 	ret
     370:	8009883a 	mov	r4,r16
     374:	00007800 	call	780 <__sinit>
     378:	003fe906 	br	320 <_puts_r+0x5c>
     37c:	00bfffc4 	movi	r2,-1
     380:	003ff606 	br	35c <_puts_r+0x98>

00000384 <puts>:
     384:	00800034 	movhi	r2,0
     388:	109cf904 	addi	r2,r2,29668
     38c:	200b883a 	mov	r5,r4
     390:	11000017 	ldw	r4,0(r2)
     394:	00002c41 	jmpi	2c4 <_puts_r>

00000398 <strlen>:
     398:	208000cc 	andi	r2,r4,3
     39c:	10002026 	beq	r2,zero,420 <strlen+0x88>
     3a0:	20800007 	ldb	r2,0(r4)
     3a4:	10002026 	beq	r2,zero,428 <strlen+0x90>
     3a8:	2005883a 	mov	r2,r4
     3ac:	00000206 	br	3b8 <strlen+0x20>
     3b0:	10c00007 	ldb	r3,0(r2)
     3b4:	18001826 	beq	r3,zero,418 <strlen+0x80>
     3b8:	10800044 	addi	r2,r2,1
     3bc:	10c000cc 	andi	r3,r2,3
     3c0:	183ffb1e 	bne	r3,zero,3b0 <strlen+0x18>
     3c4:	10c00017 	ldw	r3,0(r2)
     3c8:	01ffbff4 	movhi	r7,65279
     3cc:	39ffbfc4 	addi	r7,r7,-257
     3d0:	00ca303a 	nor	r5,zero,r3
     3d4:	01a02074 	movhi	r6,32897
     3d8:	19c7883a 	add	r3,r3,r7
     3dc:	31a02004 	addi	r6,r6,-32640
     3e0:	1946703a 	and	r3,r3,r5
     3e4:	1986703a 	and	r3,r3,r6
     3e8:	1800091e 	bne	r3,zero,410 <strlen+0x78>
     3ec:	10800104 	addi	r2,r2,4
     3f0:	10c00017 	ldw	r3,0(r2)
     3f4:	19cb883a 	add	r5,r3,r7
     3f8:	00c6303a 	nor	r3,zero,r3
     3fc:	28c6703a 	and	r3,r5,r3
     400:	1986703a 	and	r3,r3,r6
     404:	183ff926 	beq	r3,zero,3ec <strlen+0x54>
     408:	00000106 	br	410 <strlen+0x78>
     40c:	10800044 	addi	r2,r2,1
     410:	10c00007 	ldb	r3,0(r2)
     414:	183ffd1e 	bne	r3,zero,40c <strlen+0x74>
     418:	1105c83a 	sub	r2,r2,r4
     41c:	f800283a 	ret
     420:	2005883a 	mov	r2,r4
     424:	003fe706 	br	3c4 <strlen+0x2c>
     428:	0005883a 	mov	r2,zero
     42c:	f800283a 	ret

00000430 <__fp_unlock>:
     430:	0005883a 	mov	r2,zero
     434:	f800283a 	ret

00000438 <_cleanup_r>:
     438:	01400034 	movhi	r5,0
     43c:	2948f304 	addi	r5,r5,9164
     440:	0000d501 	jmpi	d50 <_fwalk_reent>

00000444 <__sinit.part.1>:
     444:	defff704 	addi	sp,sp,-36
     448:	00c00034 	movhi	r3,0
     44c:	dfc00815 	stw	ra,32(sp)
     450:	ddc00715 	stw	r23,28(sp)
     454:	dd800615 	stw	r22,24(sp)
     458:	dd400515 	stw	r21,20(sp)
     45c:	dd000415 	stw	r20,16(sp)
     460:	dcc00315 	stw	r19,12(sp)
     464:	dc800215 	stw	r18,8(sp)
     468:	dc400115 	stw	r17,4(sp)
     46c:	dc000015 	stw	r16,0(sp)
     470:	18c10e04 	addi	r3,r3,1080
     474:	24000117 	ldw	r16,4(r4)
     478:	20c00f15 	stw	r3,60(r4)
     47c:	2080bb04 	addi	r2,r4,748
     480:	00c000c4 	movi	r3,3
     484:	20c0b915 	stw	r3,740(r4)
     488:	2080ba15 	stw	r2,744(r4)
     48c:	2000b815 	stw	zero,736(r4)
     490:	05c00204 	movi	r23,8
     494:	00800104 	movi	r2,4
     498:	2025883a 	mov	r18,r4
     49c:	b80d883a 	mov	r6,r23
     4a0:	81001704 	addi	r4,r16,92
     4a4:	000b883a 	mov	r5,zero
     4a8:	80000015 	stw	zero,0(r16)
     4ac:	80000115 	stw	zero,4(r16)
     4b0:	80000215 	stw	zero,8(r16)
     4b4:	8080030d 	sth	r2,12(r16)
     4b8:	80001915 	stw	zero,100(r16)
     4bc:	8000038d 	sth	zero,14(r16)
     4c0:	80000415 	stw	zero,16(r16)
     4c4:	80000515 	stw	zero,20(r16)
     4c8:	80000615 	stw	zero,24(r16)
     4cc:	00019a80 	call	19a8 <memset>
     4d0:	05800034 	movhi	r22,0
     4d4:	94400217 	ldw	r17,8(r18)
     4d8:	05400034 	movhi	r21,0
     4dc:	05000034 	movhi	r20,0
     4e0:	04c00034 	movhi	r19,0
     4e4:	b5882204 	addi	r22,r22,8328
     4e8:	ad483904 	addi	r21,r21,8420
     4ec:	a5085804 	addi	r20,r20,8544
     4f0:	9cc86f04 	addi	r19,r19,8636
     4f4:	85800815 	stw	r22,32(r16)
     4f8:	85400915 	stw	r21,36(r16)
     4fc:	85000a15 	stw	r20,40(r16)
     500:	84c00b15 	stw	r19,44(r16)
     504:	84000715 	stw	r16,28(r16)
     508:	00800284 	movi	r2,10
     50c:	8880030d 	sth	r2,12(r17)
     510:	00800044 	movi	r2,1
     514:	b80d883a 	mov	r6,r23
     518:	89001704 	addi	r4,r17,92
     51c:	000b883a 	mov	r5,zero
     520:	88000015 	stw	zero,0(r17)
     524:	88000115 	stw	zero,4(r17)
     528:	88000215 	stw	zero,8(r17)
     52c:	88001915 	stw	zero,100(r17)
     530:	8880038d 	sth	r2,14(r17)
     534:	88000415 	stw	zero,16(r17)
     538:	88000515 	stw	zero,20(r17)
     53c:	88000615 	stw	zero,24(r17)
     540:	00019a80 	call	19a8 <memset>
     544:	94000317 	ldw	r16,12(r18)
     548:	00800484 	movi	r2,18
     54c:	8c400715 	stw	r17,28(r17)
     550:	8d800815 	stw	r22,32(r17)
     554:	8d400915 	stw	r21,36(r17)
     558:	8d000a15 	stw	r20,40(r17)
     55c:	8cc00b15 	stw	r19,44(r17)
     560:	8080030d 	sth	r2,12(r16)
     564:	00800084 	movi	r2,2
     568:	80000015 	stw	zero,0(r16)
     56c:	80000115 	stw	zero,4(r16)
     570:	80000215 	stw	zero,8(r16)
     574:	80001915 	stw	zero,100(r16)
     578:	8080038d 	sth	r2,14(r16)
     57c:	80000415 	stw	zero,16(r16)
     580:	80000515 	stw	zero,20(r16)
     584:	80000615 	stw	zero,24(r16)
     588:	b80d883a 	mov	r6,r23
     58c:	000b883a 	mov	r5,zero
     590:	81001704 	addi	r4,r16,92
     594:	00019a80 	call	19a8 <memset>
     598:	00800044 	movi	r2,1
     59c:	84000715 	stw	r16,28(r16)
     5a0:	85800815 	stw	r22,32(r16)
     5a4:	85400915 	stw	r21,36(r16)
     5a8:	85000a15 	stw	r20,40(r16)
     5ac:	84c00b15 	stw	r19,44(r16)
     5b0:	90800e15 	stw	r2,56(r18)
     5b4:	dfc00817 	ldw	ra,32(sp)
     5b8:	ddc00717 	ldw	r23,28(sp)
     5bc:	dd800617 	ldw	r22,24(sp)
     5c0:	dd400517 	ldw	r21,20(sp)
     5c4:	dd000417 	ldw	r20,16(sp)
     5c8:	dcc00317 	ldw	r19,12(sp)
     5cc:	dc800217 	ldw	r18,8(sp)
     5d0:	dc400117 	ldw	r17,4(sp)
     5d4:	dc000017 	ldw	r16,0(sp)
     5d8:	dec00904 	addi	sp,sp,36
     5dc:	f800283a 	ret

000005e0 <__fp_lock>:
     5e0:	0005883a 	mov	r2,zero
     5e4:	f800283a 	ret

000005e8 <__sfmoreglue>:
     5e8:	defffc04 	addi	sp,sp,-16
     5ec:	dc400115 	stw	r17,4(sp)
     5f0:	2c7fffc4 	addi	r17,r5,-1
     5f4:	8c401a24 	muli	r17,r17,104
     5f8:	dc800215 	stw	r18,8(sp)
     5fc:	2825883a 	mov	r18,r5
     600:	89401d04 	addi	r5,r17,116
     604:	dc000015 	stw	r16,0(sp)
     608:	dfc00315 	stw	ra,12(sp)
     60c:	0000e140 	call	e14 <_malloc_r>
     610:	1021883a 	mov	r16,r2
     614:	10000726 	beq	r2,zero,634 <__sfmoreglue+0x4c>
     618:	11000304 	addi	r4,r2,12
     61c:	10000015 	stw	zero,0(r2)
     620:	14800115 	stw	r18,4(r2)
     624:	11000215 	stw	r4,8(r2)
     628:	89801a04 	addi	r6,r17,104
     62c:	000b883a 	mov	r5,zero
     630:	00019a80 	call	19a8 <memset>
     634:	8005883a 	mov	r2,r16
     638:	dfc00317 	ldw	ra,12(sp)
     63c:	dc800217 	ldw	r18,8(sp)
     640:	dc400117 	ldw	r17,4(sp)
     644:	dc000017 	ldw	r16,0(sp)
     648:	dec00404 	addi	sp,sp,16
     64c:	f800283a 	ret

00000650 <__sfp>:
     650:	defffb04 	addi	sp,sp,-20
     654:	dc000015 	stw	r16,0(sp)
     658:	04000034 	movhi	r16,0
     65c:	841cf804 	addi	r16,r16,29664
     660:	dcc00315 	stw	r19,12(sp)
     664:	2027883a 	mov	r19,r4
     668:	81000017 	ldw	r4,0(r16)
     66c:	dfc00415 	stw	ra,16(sp)
     670:	dc800215 	stw	r18,8(sp)
     674:	20800e17 	ldw	r2,56(r4)
     678:	dc400115 	stw	r17,4(sp)
     67c:	1000021e 	bne	r2,zero,688 <__sfp+0x38>
     680:	00004440 	call	444 <__sinit.part.1>
     684:	81000017 	ldw	r4,0(r16)
     688:	2480b804 	addi	r18,r4,736
     68c:	047fffc4 	movi	r17,-1
     690:	91000117 	ldw	r4,4(r18)
     694:	94000217 	ldw	r16,8(r18)
     698:	213fffc4 	addi	r4,r4,-1
     69c:	20000a16 	blt	r4,zero,6c8 <__sfp+0x78>
     6a0:	8080030f 	ldh	r2,12(r16)
     6a4:	10000c26 	beq	r2,zero,6d8 <__sfp+0x88>
     6a8:	80c01d04 	addi	r3,r16,116
     6ac:	00000206 	br	6b8 <__sfp+0x68>
     6b0:	18bfe60f 	ldh	r2,-104(r3)
     6b4:	10000826 	beq	r2,zero,6d8 <__sfp+0x88>
     6b8:	213fffc4 	addi	r4,r4,-1
     6bc:	1c3ffd04 	addi	r16,r3,-12
     6c0:	18c01a04 	addi	r3,r3,104
     6c4:	247ffa1e 	bne	r4,r17,6b0 <__sfp+0x60>
     6c8:	90800017 	ldw	r2,0(r18)
     6cc:	10001d26 	beq	r2,zero,744 <__sfp+0xf4>
     6d0:	1025883a 	mov	r18,r2
     6d4:	003fee06 	br	690 <__sfp+0x40>
     6d8:	00bfffc4 	movi	r2,-1
     6dc:	8080038d 	sth	r2,14(r16)
     6e0:	00800044 	movi	r2,1
     6e4:	8080030d 	sth	r2,12(r16)
     6e8:	80001915 	stw	zero,100(r16)
     6ec:	80000015 	stw	zero,0(r16)
     6f0:	80000215 	stw	zero,8(r16)
     6f4:	80000115 	stw	zero,4(r16)
     6f8:	80000415 	stw	zero,16(r16)
     6fc:	80000515 	stw	zero,20(r16)
     700:	80000615 	stw	zero,24(r16)
     704:	01800204 	movi	r6,8
     708:	000b883a 	mov	r5,zero
     70c:	81001704 	addi	r4,r16,92
     710:	00019a80 	call	19a8 <memset>
     714:	8005883a 	mov	r2,r16
     718:	80000c15 	stw	zero,48(r16)
     71c:	80000d15 	stw	zero,52(r16)
     720:	80001115 	stw	zero,68(r16)
     724:	80001215 	stw	zero,72(r16)
     728:	dfc00417 	ldw	ra,16(sp)
     72c:	dcc00317 	ldw	r19,12(sp)
     730:	dc800217 	ldw	r18,8(sp)
     734:	dc400117 	ldw	r17,4(sp)
     738:	dc000017 	ldw	r16,0(sp)
     73c:	dec00504 	addi	sp,sp,20
     740:	f800283a 	ret
     744:	01400104 	movi	r5,4
     748:	9809883a 	mov	r4,r19
     74c:	00005e80 	call	5e8 <__sfmoreglue>
     750:	90800015 	stw	r2,0(r18)
     754:	103fde1e 	bne	r2,zero,6d0 <__sfp+0x80>
     758:	00800304 	movi	r2,12
     75c:	98800015 	stw	r2,0(r19)
     760:	0005883a 	mov	r2,zero
     764:	003ff006 	br	728 <__sfp+0xd8>

00000768 <_cleanup>:
     768:	00800034 	movhi	r2,0
     76c:	109cf804 	addi	r2,r2,29664
     770:	11000017 	ldw	r4,0(r2)
     774:	01400034 	movhi	r5,0
     778:	2948f304 	addi	r5,r5,9164
     77c:	0000d501 	jmpi	d50 <_fwalk_reent>

00000780 <__sinit>:
     780:	20800e17 	ldw	r2,56(r4)
     784:	10000126 	beq	r2,zero,78c <__sinit+0xc>
     788:	f800283a 	ret
     78c:	00004441 	jmpi	444 <__sinit.part.1>

00000790 <__sfp_lock_acquire>:
     790:	f800283a 	ret

00000794 <__sfp_lock_release>:
     794:	f800283a 	ret

00000798 <__sinit_lock_acquire>:
     798:	f800283a 	ret

0000079c <__sinit_lock_release>:
     79c:	f800283a 	ret

000007a0 <__fp_lock_all>:
     7a0:	00800034 	movhi	r2,0
     7a4:	109cf904 	addi	r2,r2,29668
     7a8:	11000017 	ldw	r4,0(r2)
     7ac:	01400034 	movhi	r5,0
     7b0:	29417804 	addi	r5,r5,1504
     7b4:	0000c8c1 	jmpi	c8c <_fwalk>

000007b8 <__fp_unlock_all>:
     7b8:	00800034 	movhi	r2,0
     7bc:	109cf904 	addi	r2,r2,29668
     7c0:	11000017 	ldw	r4,0(r2)
     7c4:	01400034 	movhi	r5,0
     7c8:	29410c04 	addi	r5,r5,1072
     7cc:	0000c8c1 	jmpi	c8c <_fwalk>

000007d0 <__sfvwrite_r>:
     7d0:	30800217 	ldw	r2,8(r6)
     7d4:	10006726 	beq	r2,zero,974 <__sfvwrite_r+0x1a4>
     7d8:	28c0030b 	ldhu	r3,12(r5)
     7dc:	defff404 	addi	sp,sp,-48
     7e0:	dd400715 	stw	r21,28(sp)
     7e4:	dd000615 	stw	r20,24(sp)
     7e8:	dc000215 	stw	r16,8(sp)
     7ec:	dfc00b15 	stw	ra,44(sp)
     7f0:	df000a15 	stw	fp,40(sp)
     7f4:	ddc00915 	stw	r23,36(sp)
     7f8:	dd800815 	stw	r22,32(sp)
     7fc:	dcc00515 	stw	r19,20(sp)
     800:	dc800415 	stw	r18,16(sp)
     804:	dc400315 	stw	r17,12(sp)
     808:	1880020c 	andi	r2,r3,8
     80c:	2821883a 	mov	r16,r5
     810:	202b883a 	mov	r21,r4
     814:	3029883a 	mov	r20,r6
     818:	10002726 	beq	r2,zero,8b8 <__sfvwrite_r+0xe8>
     81c:	28800417 	ldw	r2,16(r5)
     820:	10002526 	beq	r2,zero,8b8 <__sfvwrite_r+0xe8>
     824:	1880008c 	andi	r2,r3,2
     828:	a4400017 	ldw	r17,0(r20)
     82c:	10002a26 	beq	r2,zero,8d8 <__sfvwrite_r+0x108>
     830:	05a00034 	movhi	r22,32768
     834:	0027883a 	mov	r19,zero
     838:	0025883a 	mov	r18,zero
     83c:	b5bf0004 	addi	r22,r22,-1024
     840:	980d883a 	mov	r6,r19
     844:	a809883a 	mov	r4,r21
     848:	90004626 	beq	r18,zero,964 <__sfvwrite_r+0x194>
     84c:	900f883a 	mov	r7,r18
     850:	b480022e 	bgeu	r22,r18,85c <__sfvwrite_r+0x8c>
     854:	01e00034 	movhi	r7,32768
     858:	39ff0004 	addi	r7,r7,-1024
     85c:	80800917 	ldw	r2,36(r16)
     860:	81400717 	ldw	r5,28(r16)
     864:	103ee83a 	callr	r2
     868:	0080570e 	bge	zero,r2,9c8 <__sfvwrite_r+0x1f8>
     86c:	a0c00217 	ldw	r3,8(r20)
     870:	98a7883a 	add	r19,r19,r2
     874:	90a5c83a 	sub	r18,r18,r2
     878:	1885c83a 	sub	r2,r3,r2
     87c:	a0800215 	stw	r2,8(r20)
     880:	103fef1e 	bne	r2,zero,840 <__sfvwrite_r+0x70>
     884:	0005883a 	mov	r2,zero
     888:	dfc00b17 	ldw	ra,44(sp)
     88c:	df000a17 	ldw	fp,40(sp)
     890:	ddc00917 	ldw	r23,36(sp)
     894:	dd800817 	ldw	r22,32(sp)
     898:	dd400717 	ldw	r21,28(sp)
     89c:	dd000617 	ldw	r20,24(sp)
     8a0:	dcc00517 	ldw	r19,20(sp)
     8a4:	dc800417 	ldw	r18,16(sp)
     8a8:	dc400317 	ldw	r17,12(sp)
     8ac:	dc000217 	ldw	r16,8(sp)
     8b0:	dec00c04 	addi	sp,sp,48
     8b4:	f800283a 	ret
     8b8:	800b883a 	mov	r5,r16
     8bc:	a809883a 	mov	r4,r21
     8c0:	00022240 	call	2224 <__swsetup_r>
     8c4:	1000eb1e 	bne	r2,zero,c74 <__sfvwrite_r+0x4a4>
     8c8:	80c0030b 	ldhu	r3,12(r16)
     8cc:	a4400017 	ldw	r17,0(r20)
     8d0:	1880008c 	andi	r2,r3,2
     8d4:	103fd61e 	bne	r2,zero,830 <__sfvwrite_r+0x60>
     8d8:	1880004c 	andi	r2,r3,1
     8dc:	10003f1e 	bne	r2,zero,9dc <__sfvwrite_r+0x20c>
     8e0:	0039883a 	mov	fp,zero
     8e4:	0025883a 	mov	r18,zero
     8e8:	90001a26 	beq	r18,zero,954 <__sfvwrite_r+0x184>
     8ec:	1880800c 	andi	r2,r3,512
     8f0:	84c00217 	ldw	r19,8(r16)
     8f4:	10002126 	beq	r2,zero,97c <__sfvwrite_r+0x1ac>
     8f8:	982f883a 	mov	r23,r19
     8fc:	94c09336 	bltu	r18,r19,b4c <__sfvwrite_r+0x37c>
     900:	1881200c 	andi	r2,r3,1152
     904:	10009e1e 	bne	r2,zero,b80 <__sfvwrite_r+0x3b0>
     908:	81000017 	ldw	r4,0(r16)
     90c:	b80d883a 	mov	r6,r23
     910:	e00b883a 	mov	r5,fp
     914:	000184c0 	call	184c <memmove>
     918:	80c00217 	ldw	r3,8(r16)
     91c:	81000017 	ldw	r4,0(r16)
     920:	9005883a 	mov	r2,r18
     924:	1ce7c83a 	sub	r19,r3,r19
     928:	25cf883a 	add	r7,r4,r23
     92c:	84c00215 	stw	r19,8(r16)
     930:	81c00015 	stw	r7,0(r16)
     934:	a0c00217 	ldw	r3,8(r20)
     938:	e0b9883a 	add	fp,fp,r2
     93c:	90a5c83a 	sub	r18,r18,r2
     940:	18a7c83a 	sub	r19,r3,r2
     944:	a4c00215 	stw	r19,8(r20)
     948:	983fce26 	beq	r19,zero,884 <__sfvwrite_r+0xb4>
     94c:	80c0030b 	ldhu	r3,12(r16)
     950:	903fe61e 	bne	r18,zero,8ec <__sfvwrite_r+0x11c>
     954:	8f000017 	ldw	fp,0(r17)
     958:	8c800117 	ldw	r18,4(r17)
     95c:	8c400204 	addi	r17,r17,8
     960:	003fe106 	br	8e8 <__sfvwrite_r+0x118>
     964:	8cc00017 	ldw	r19,0(r17)
     968:	8c800117 	ldw	r18,4(r17)
     96c:	8c400204 	addi	r17,r17,8
     970:	003fb306 	br	840 <__sfvwrite_r+0x70>
     974:	0005883a 	mov	r2,zero
     978:	f800283a 	ret
     97c:	81000017 	ldw	r4,0(r16)
     980:	80800417 	ldw	r2,16(r16)
     984:	11005736 	bltu	r2,r4,ae4 <__sfvwrite_r+0x314>
     988:	85c00517 	ldw	r23,20(r16)
     98c:	95c05536 	bltu	r18,r23,ae4 <__sfvwrite_r+0x314>
     990:	00a00034 	movhi	r2,32768
     994:	10bfffc4 	addi	r2,r2,-1
     998:	9009883a 	mov	r4,r18
     99c:	1480012e 	bgeu	r2,r18,9a4 <__sfvwrite_r+0x1d4>
     9a0:	1009883a 	mov	r4,r2
     9a4:	b80b883a 	mov	r5,r23
     9a8:	0002ed80 	call	2ed8 <__divsi3>
     9ac:	15cf383a 	mul	r7,r2,r23
     9b0:	81400717 	ldw	r5,28(r16)
     9b4:	80800917 	ldw	r2,36(r16)
     9b8:	e00d883a 	mov	r6,fp
     9bc:	a809883a 	mov	r4,r21
     9c0:	103ee83a 	callr	r2
     9c4:	00bfdb16 	blt	zero,r2,934 <__sfvwrite_r+0x164>
     9c8:	8080030b 	ldhu	r2,12(r16)
     9cc:	10801014 	ori	r2,r2,64
     9d0:	8080030d 	sth	r2,12(r16)
     9d4:	00bfffc4 	movi	r2,-1
     9d8:	003fab06 	br	888 <__sfvwrite_r+0xb8>
     9dc:	0027883a 	mov	r19,zero
     9e0:	0011883a 	mov	r8,zero
     9e4:	0039883a 	mov	fp,zero
     9e8:	0025883a 	mov	r18,zero
     9ec:	90001f26 	beq	r18,zero,a6c <__sfvwrite_r+0x29c>
     9f0:	40005a26 	beq	r8,zero,b5c <__sfvwrite_r+0x38c>
     9f4:	982d883a 	mov	r22,r19
     9f8:	94c0012e 	bgeu	r18,r19,a00 <__sfvwrite_r+0x230>
     9fc:	902d883a 	mov	r22,r18
     a00:	81000017 	ldw	r4,0(r16)
     a04:	80800417 	ldw	r2,16(r16)
     a08:	b02f883a 	mov	r23,r22
     a0c:	81c00517 	ldw	r7,20(r16)
     a10:	1100032e 	bgeu	r2,r4,a20 <__sfvwrite_r+0x250>
     a14:	80c00217 	ldw	r3,8(r16)
     a18:	38c7883a 	add	r3,r7,r3
     a1c:	1d801816 	blt	r3,r22,a80 <__sfvwrite_r+0x2b0>
     a20:	b1c03e16 	blt	r22,r7,b1c <__sfvwrite_r+0x34c>
     a24:	80800917 	ldw	r2,36(r16)
     a28:	81400717 	ldw	r5,28(r16)
     a2c:	e00d883a 	mov	r6,fp
     a30:	da000115 	stw	r8,4(sp)
     a34:	a809883a 	mov	r4,r21
     a38:	103ee83a 	callr	r2
     a3c:	102f883a 	mov	r23,r2
     a40:	da000117 	ldw	r8,4(sp)
     a44:	00bfe00e 	bge	zero,r2,9c8 <__sfvwrite_r+0x1f8>
     a48:	9de7c83a 	sub	r19,r19,r23
     a4c:	98001f26 	beq	r19,zero,acc <__sfvwrite_r+0x2fc>
     a50:	a0800217 	ldw	r2,8(r20)
     a54:	e5f9883a 	add	fp,fp,r23
     a58:	95e5c83a 	sub	r18,r18,r23
     a5c:	15efc83a 	sub	r23,r2,r23
     a60:	a5c00215 	stw	r23,8(r20)
     a64:	b83f8726 	beq	r23,zero,884 <__sfvwrite_r+0xb4>
     a68:	903fe11e 	bne	r18,zero,9f0 <__sfvwrite_r+0x220>
     a6c:	8f000017 	ldw	fp,0(r17)
     a70:	8c800117 	ldw	r18,4(r17)
     a74:	0011883a 	mov	r8,zero
     a78:	8c400204 	addi	r17,r17,8
     a7c:	003fdb06 	br	9ec <__sfvwrite_r+0x21c>
     a80:	180d883a 	mov	r6,r3
     a84:	e00b883a 	mov	r5,fp
     a88:	da000115 	stw	r8,4(sp)
     a8c:	d8c00015 	stw	r3,0(sp)
     a90:	000184c0 	call	184c <memmove>
     a94:	d8c00017 	ldw	r3,0(sp)
     a98:	80800017 	ldw	r2,0(r16)
     a9c:	800b883a 	mov	r5,r16
     aa0:	a809883a 	mov	r4,r21
     aa4:	10c5883a 	add	r2,r2,r3
     aa8:	80800015 	stw	r2,0(r16)
     aac:	d8c00015 	stw	r3,0(sp)
     ab0:	00026ec0 	call	26ec <_fflush_r>
     ab4:	d8c00017 	ldw	r3,0(sp)
     ab8:	da000117 	ldw	r8,4(sp)
     abc:	103fc21e 	bne	r2,zero,9c8 <__sfvwrite_r+0x1f8>
     ac0:	182f883a 	mov	r23,r3
     ac4:	9de7c83a 	sub	r19,r19,r23
     ac8:	983fe11e 	bne	r19,zero,a50 <__sfvwrite_r+0x280>
     acc:	800b883a 	mov	r5,r16
     ad0:	a809883a 	mov	r4,r21
     ad4:	00026ec0 	call	26ec <_fflush_r>
     ad8:	103fbb1e 	bne	r2,zero,9c8 <__sfvwrite_r+0x1f8>
     adc:	0011883a 	mov	r8,zero
     ae0:	003fdb06 	br	a50 <__sfvwrite_r+0x280>
     ae4:	94c0012e 	bgeu	r18,r19,aec <__sfvwrite_r+0x31c>
     ae8:	9027883a 	mov	r19,r18
     aec:	980d883a 	mov	r6,r19
     af0:	e00b883a 	mov	r5,fp
     af4:	000184c0 	call	184c <memmove>
     af8:	80800217 	ldw	r2,8(r16)
     afc:	80c00017 	ldw	r3,0(r16)
     b00:	14c5c83a 	sub	r2,r2,r19
     b04:	1cc7883a 	add	r3,r3,r19
     b08:	80800215 	stw	r2,8(r16)
     b0c:	80c00015 	stw	r3,0(r16)
     b10:	10004326 	beq	r2,zero,c20 <__sfvwrite_r+0x450>
     b14:	9805883a 	mov	r2,r19
     b18:	003f8606 	br	934 <__sfvwrite_r+0x164>
     b1c:	b00d883a 	mov	r6,r22
     b20:	e00b883a 	mov	r5,fp
     b24:	da000115 	stw	r8,4(sp)
     b28:	000184c0 	call	184c <memmove>
     b2c:	80800217 	ldw	r2,8(r16)
     b30:	80c00017 	ldw	r3,0(r16)
     b34:	da000117 	ldw	r8,4(sp)
     b38:	1585c83a 	sub	r2,r2,r22
     b3c:	1dad883a 	add	r22,r3,r22
     b40:	80800215 	stw	r2,8(r16)
     b44:	85800015 	stw	r22,0(r16)
     b48:	003fbf06 	br	a48 <__sfvwrite_r+0x278>
     b4c:	81000017 	ldw	r4,0(r16)
     b50:	9027883a 	mov	r19,r18
     b54:	902f883a 	mov	r23,r18
     b58:	003f6c06 	br	90c <__sfvwrite_r+0x13c>
     b5c:	900d883a 	mov	r6,r18
     b60:	01400284 	movi	r5,10
     b64:	e009883a 	mov	r4,fp
     b68:	00016200 	call	1620 <memchr>
     b6c:	10003e26 	beq	r2,zero,c68 <__sfvwrite_r+0x498>
     b70:	10800044 	addi	r2,r2,1
     b74:	1727c83a 	sub	r19,r2,fp
     b78:	02000044 	movi	r8,1
     b7c:	003f9d06 	br	9f4 <__sfvwrite_r+0x224>
     b80:	80800517 	ldw	r2,20(r16)
     b84:	81400417 	ldw	r5,16(r16)
     b88:	81c00017 	ldw	r7,0(r16)
     b8c:	10a7883a 	add	r19,r2,r2
     b90:	9885883a 	add	r2,r19,r2
     b94:	1026d7fa 	srli	r19,r2,31
     b98:	396dc83a 	sub	r22,r7,r5
     b9c:	b1000044 	addi	r4,r22,1
     ba0:	9885883a 	add	r2,r19,r2
     ba4:	1027d07a 	srai	r19,r2,1
     ba8:	2485883a 	add	r2,r4,r18
     bac:	980d883a 	mov	r6,r19
     bb0:	9880022e 	bgeu	r19,r2,bbc <__sfvwrite_r+0x3ec>
     bb4:	1027883a 	mov	r19,r2
     bb8:	100d883a 	mov	r6,r2
     bbc:	18c1000c 	andi	r3,r3,1024
     bc0:	18001c26 	beq	r3,zero,c34 <__sfvwrite_r+0x464>
     bc4:	300b883a 	mov	r5,r6
     bc8:	a809883a 	mov	r4,r21
     bcc:	0000e140 	call	e14 <_malloc_r>
     bd0:	102f883a 	mov	r23,r2
     bd4:	10002926 	beq	r2,zero,c7c <__sfvwrite_r+0x4ac>
     bd8:	81400417 	ldw	r5,16(r16)
     bdc:	b00d883a 	mov	r6,r22
     be0:	1009883a 	mov	r4,r2
     be4:	00017040 	call	1704 <memcpy>
     be8:	8080030b 	ldhu	r2,12(r16)
     bec:	00fedfc4 	movi	r3,-1153
     bf0:	10c4703a 	and	r2,r2,r3
     bf4:	10802014 	ori	r2,r2,128
     bf8:	8080030d 	sth	r2,12(r16)
     bfc:	bd89883a 	add	r4,r23,r22
     c00:	9d8fc83a 	sub	r7,r19,r22
     c04:	85c00415 	stw	r23,16(r16)
     c08:	84c00515 	stw	r19,20(r16)
     c0c:	81000015 	stw	r4,0(r16)
     c10:	9027883a 	mov	r19,r18
     c14:	81c00215 	stw	r7,8(r16)
     c18:	902f883a 	mov	r23,r18
     c1c:	003f3b06 	br	90c <__sfvwrite_r+0x13c>
     c20:	800b883a 	mov	r5,r16
     c24:	a809883a 	mov	r4,r21
     c28:	00026ec0 	call	26ec <_fflush_r>
     c2c:	103fb926 	beq	r2,zero,b14 <__sfvwrite_r+0x344>
     c30:	003f6506 	br	9c8 <__sfvwrite_r+0x1f8>
     c34:	a809883a 	mov	r4,r21
     c38:	0001ad00 	call	1ad0 <_realloc_r>
     c3c:	102f883a 	mov	r23,r2
     c40:	103fee1e 	bne	r2,zero,bfc <__sfvwrite_r+0x42c>
     c44:	81400417 	ldw	r5,16(r16)
     c48:	a809883a 	mov	r4,r21
     c4c:	000289c0 	call	289c <_free_r>
     c50:	8080030b 	ldhu	r2,12(r16)
     c54:	00ffdfc4 	movi	r3,-129
     c58:	1884703a 	and	r2,r3,r2
     c5c:	00c00304 	movi	r3,12
     c60:	a8c00015 	stw	r3,0(r21)
     c64:	003f5906 	br	9cc <__sfvwrite_r+0x1fc>
     c68:	94c00044 	addi	r19,r18,1
     c6c:	02000044 	movi	r8,1
     c70:	003f6006 	br	9f4 <__sfvwrite_r+0x224>
     c74:	00bfffc4 	movi	r2,-1
     c78:	003f0306 	br	888 <__sfvwrite_r+0xb8>
     c7c:	00800304 	movi	r2,12
     c80:	a8800015 	stw	r2,0(r21)
     c84:	8080030b 	ldhu	r2,12(r16)
     c88:	003f5006 	br	9cc <__sfvwrite_r+0x1fc>

00000c8c <_fwalk>:
     c8c:	defff704 	addi	sp,sp,-36
     c90:	dd000415 	stw	r20,16(sp)
     c94:	dfc00815 	stw	ra,32(sp)
     c98:	ddc00715 	stw	r23,28(sp)
     c9c:	dd800615 	stw	r22,24(sp)
     ca0:	dd400515 	stw	r21,20(sp)
     ca4:	dcc00315 	stw	r19,12(sp)
     ca8:	dc800215 	stw	r18,8(sp)
     cac:	dc400115 	stw	r17,4(sp)
     cb0:	dc000015 	stw	r16,0(sp)
     cb4:	2500b804 	addi	r20,r4,736
     cb8:	a0002326 	beq	r20,zero,d48 <_fwalk+0xbc>
     cbc:	282b883a 	mov	r21,r5
     cc0:	002f883a 	mov	r23,zero
     cc4:	05800044 	movi	r22,1
     cc8:	04ffffc4 	movi	r19,-1
     ccc:	a4400117 	ldw	r17,4(r20)
     cd0:	a4800217 	ldw	r18,8(r20)
     cd4:	8c7fffc4 	addi	r17,r17,-1
     cd8:	88000d16 	blt	r17,zero,d10 <_fwalk+0x84>
     cdc:	94000304 	addi	r16,r18,12
     ce0:	94800384 	addi	r18,r18,14
     ce4:	8080000b 	ldhu	r2,0(r16)
     ce8:	8c7fffc4 	addi	r17,r17,-1
     cec:	813ffd04 	addi	r4,r16,-12
     cf0:	b080042e 	bgeu	r22,r2,d04 <_fwalk+0x78>
     cf4:	9080000f 	ldh	r2,0(r18)
     cf8:	14c00226 	beq	r2,r19,d04 <_fwalk+0x78>
     cfc:	a83ee83a 	callr	r21
     d00:	b8aeb03a 	or	r23,r23,r2
     d04:	84001a04 	addi	r16,r16,104
     d08:	94801a04 	addi	r18,r18,104
     d0c:	8cfff51e 	bne	r17,r19,ce4 <_fwalk+0x58>
     d10:	a5000017 	ldw	r20,0(r20)
     d14:	a03fed1e 	bne	r20,zero,ccc <_fwalk+0x40>
     d18:	b805883a 	mov	r2,r23
     d1c:	dfc00817 	ldw	ra,32(sp)
     d20:	ddc00717 	ldw	r23,28(sp)
     d24:	dd800617 	ldw	r22,24(sp)
     d28:	dd400517 	ldw	r21,20(sp)
     d2c:	dd000417 	ldw	r20,16(sp)
     d30:	dcc00317 	ldw	r19,12(sp)
     d34:	dc800217 	ldw	r18,8(sp)
     d38:	dc400117 	ldw	r17,4(sp)
     d3c:	dc000017 	ldw	r16,0(sp)
     d40:	dec00904 	addi	sp,sp,36
     d44:	f800283a 	ret
     d48:	002f883a 	mov	r23,zero
     d4c:	003ff206 	br	d18 <_fwalk+0x8c>

00000d50 <_fwalk_reent>:
     d50:	defff704 	addi	sp,sp,-36
     d54:	dd000415 	stw	r20,16(sp)
     d58:	dfc00815 	stw	ra,32(sp)
     d5c:	ddc00715 	stw	r23,28(sp)
     d60:	dd800615 	stw	r22,24(sp)
     d64:	dd400515 	stw	r21,20(sp)
     d68:	dcc00315 	stw	r19,12(sp)
     d6c:	dc800215 	stw	r18,8(sp)
     d70:	dc400115 	stw	r17,4(sp)
     d74:	dc000015 	stw	r16,0(sp)
     d78:	2500b804 	addi	r20,r4,736
     d7c:	a0002326 	beq	r20,zero,e0c <_fwalk_reent+0xbc>
     d80:	282b883a 	mov	r21,r5
     d84:	2027883a 	mov	r19,r4
     d88:	002f883a 	mov	r23,zero
     d8c:	05800044 	movi	r22,1
     d90:	04bfffc4 	movi	r18,-1
     d94:	a4400117 	ldw	r17,4(r20)
     d98:	a4000217 	ldw	r16,8(r20)
     d9c:	8c7fffc4 	addi	r17,r17,-1
     da0:	88000c16 	blt	r17,zero,dd4 <_fwalk_reent+0x84>
     da4:	84000304 	addi	r16,r16,12
     da8:	8080000b 	ldhu	r2,0(r16)
     dac:	8c7fffc4 	addi	r17,r17,-1
     db0:	817ffd04 	addi	r5,r16,-12
     db4:	b080052e 	bgeu	r22,r2,dcc <_fwalk_reent+0x7c>
     db8:	8080008f 	ldh	r2,2(r16)
     dbc:	9809883a 	mov	r4,r19
     dc0:	14800226 	beq	r2,r18,dcc <_fwalk_reent+0x7c>
     dc4:	a83ee83a 	callr	r21
     dc8:	b8aeb03a 	or	r23,r23,r2
     dcc:	84001a04 	addi	r16,r16,104
     dd0:	8cbff51e 	bne	r17,r18,da8 <_fwalk_reent+0x58>
     dd4:	a5000017 	ldw	r20,0(r20)
     dd8:	a03fee1e 	bne	r20,zero,d94 <_fwalk_reent+0x44>
     ddc:	b805883a 	mov	r2,r23
     de0:	dfc00817 	ldw	ra,32(sp)
     de4:	ddc00717 	ldw	r23,28(sp)
     de8:	dd800617 	ldw	r22,24(sp)
     dec:	dd400517 	ldw	r21,20(sp)
     df0:	dd000417 	ldw	r20,16(sp)
     df4:	dcc00317 	ldw	r19,12(sp)
     df8:	dc800217 	ldw	r18,8(sp)
     dfc:	dc400117 	ldw	r17,4(sp)
     e00:	dc000017 	ldw	r16,0(sp)
     e04:	dec00904 	addi	sp,sp,36
     e08:	f800283a 	ret
     e0c:	002f883a 	mov	r23,zero
     e10:	003ff206 	br	ddc <_fwalk_reent+0x8c>

00000e14 <_malloc_r>:
     e14:	defff504 	addi	sp,sp,-44
     e18:	dc800315 	stw	r18,12(sp)
     e1c:	dfc00a15 	stw	ra,40(sp)
     e20:	df000915 	stw	fp,36(sp)
     e24:	ddc00815 	stw	r23,32(sp)
     e28:	dd800715 	stw	r22,28(sp)
     e2c:	dd400615 	stw	r21,24(sp)
     e30:	dd000515 	stw	r20,20(sp)
     e34:	dcc00415 	stw	r19,16(sp)
     e38:	dc400215 	stw	r17,8(sp)
     e3c:	dc000115 	stw	r16,4(sp)
     e40:	288002c4 	addi	r2,r5,11
     e44:	00c00584 	movi	r3,22
     e48:	2025883a 	mov	r18,r4
     e4c:	18807f2e 	bgeu	r3,r2,104c <_malloc_r+0x238>
     e50:	047ffe04 	movi	r17,-8
     e54:	1462703a 	and	r17,r2,r17
     e58:	8800a316 	blt	r17,zero,10e8 <_malloc_r+0x2d4>
     e5c:	8940a236 	bltu	r17,r5,10e8 <_malloc_r+0x2d4>
     e60:	00036580 	call	3658 <__malloc_lock>
     e64:	00807dc4 	movi	r2,503
     e68:	1441e92e 	bgeu	r2,r17,1610 <_malloc_r+0x7fc>
     e6c:	8804d27a 	srli	r2,r17,9
     e70:	1000a126 	beq	r2,zero,10f8 <_malloc_r+0x2e4>
     e74:	00c00104 	movi	r3,4
     e78:	18811e36 	bltu	r3,r2,12f4 <_malloc_r+0x4e0>
     e7c:	8804d1ba 	srli	r2,r17,6
     e80:	12000e44 	addi	r8,r2,57
     e84:	11c00e04 	addi	r7,r2,56
     e88:	4209883a 	add	r4,r8,r8
     e8c:	04c00034 	movhi	r19,0
     e90:	2109883a 	add	r4,r4,r4
     e94:	9cd77404 	addi	r19,r19,24016
     e98:	2109883a 	add	r4,r4,r4
     e9c:	9909883a 	add	r4,r19,r4
     ea0:	24000117 	ldw	r16,4(r4)
     ea4:	213ffe04 	addi	r4,r4,-8
     ea8:	24009726 	beq	r4,r16,1108 <_malloc_r+0x2f4>
     eac:	80800117 	ldw	r2,4(r16)
     eb0:	01bfff04 	movi	r6,-4
     eb4:	014003c4 	movi	r5,15
     eb8:	1184703a 	and	r2,r2,r6
     ebc:	1447c83a 	sub	r3,r2,r17
     ec0:	28c00716 	blt	r5,r3,ee0 <_malloc_r+0xcc>
     ec4:	1800920e 	bge	r3,zero,1110 <_malloc_r+0x2fc>
     ec8:	84000317 	ldw	r16,12(r16)
     ecc:	24008e26 	beq	r4,r16,1108 <_malloc_r+0x2f4>
     ed0:	80800117 	ldw	r2,4(r16)
     ed4:	1184703a 	and	r2,r2,r6
     ed8:	1447c83a 	sub	r3,r2,r17
     edc:	28fff90e 	bge	r5,r3,ec4 <_malloc_r+0xb0>
     ee0:	3809883a 	mov	r4,r7
     ee4:	01800034 	movhi	r6,0
     ee8:	9c000417 	ldw	r16,16(r19)
     eec:	31977404 	addi	r6,r6,24016
     ef0:	32000204 	addi	r8,r6,8
     ef4:	82013426 	beq	r16,r8,13c8 <_malloc_r+0x5b4>
     ef8:	80c00117 	ldw	r3,4(r16)
     efc:	00bfff04 	movi	r2,-4
     f00:	188e703a 	and	r7,r3,r2
     f04:	3c45c83a 	sub	r2,r7,r17
     f08:	00c003c4 	movi	r3,15
     f0c:	18811f16 	blt	r3,r2,138c <_malloc_r+0x578>
     f10:	32000515 	stw	r8,20(r6)
     f14:	32000415 	stw	r8,16(r6)
     f18:	10007f0e 	bge	r2,zero,1118 <_malloc_r+0x304>
     f1c:	00807fc4 	movi	r2,511
     f20:	11c0fd36 	bltu	r2,r7,1318 <_malloc_r+0x504>
     f24:	3806d0fa 	srli	r3,r7,3
     f28:	01c00044 	movi	r7,1
     f2c:	30800117 	ldw	r2,4(r6)
     f30:	19400044 	addi	r5,r3,1
     f34:	294b883a 	add	r5,r5,r5
     f38:	1807d0ba 	srai	r3,r3,2
     f3c:	294b883a 	add	r5,r5,r5
     f40:	294b883a 	add	r5,r5,r5
     f44:	298b883a 	add	r5,r5,r6
     f48:	38c6983a 	sll	r3,r7,r3
     f4c:	29c00017 	ldw	r7,0(r5)
     f50:	2a7ffe04 	addi	r9,r5,-8
     f54:	1886b03a 	or	r3,r3,r2
     f58:	82400315 	stw	r9,12(r16)
     f5c:	81c00215 	stw	r7,8(r16)
     f60:	30c00115 	stw	r3,4(r6)
     f64:	2c000015 	stw	r16,0(r5)
     f68:	3c000315 	stw	r16,12(r7)
     f6c:	2005d0ba 	srai	r2,r4,2
     f70:	01400044 	movi	r5,1
     f74:	288a983a 	sll	r5,r5,r2
     f78:	19406f36 	bltu	r3,r5,1138 <_malloc_r+0x324>
     f7c:	28c4703a 	and	r2,r5,r3
     f80:	10000a1e 	bne	r2,zero,fac <_malloc_r+0x198>
     f84:	00bfff04 	movi	r2,-4
     f88:	294b883a 	add	r5,r5,r5
     f8c:	2088703a 	and	r4,r4,r2
     f90:	28c4703a 	and	r2,r5,r3
     f94:	21000104 	addi	r4,r4,4
     f98:	1000041e 	bne	r2,zero,fac <_malloc_r+0x198>
     f9c:	294b883a 	add	r5,r5,r5
     fa0:	28c4703a 	and	r2,r5,r3
     fa4:	21000104 	addi	r4,r4,4
     fa8:	103ffc26 	beq	r2,zero,f9c <_malloc_r+0x188>
     fac:	02bfff04 	movi	r10,-4
     fb0:	024003c4 	movi	r9,15
     fb4:	21800044 	addi	r6,r4,1
     fb8:	318d883a 	add	r6,r6,r6
     fbc:	318d883a 	add	r6,r6,r6
     fc0:	318d883a 	add	r6,r6,r6
     fc4:	998d883a 	add	r6,r19,r6
     fc8:	333ffe04 	addi	r12,r6,-8
     fcc:	2017883a 	mov	r11,r4
     fd0:	31800104 	addi	r6,r6,4
     fd4:	34000017 	ldw	r16,0(r6)
     fd8:	31fffd04 	addi	r7,r6,-12
     fdc:	81c0041e 	bne	r16,r7,ff0 <_malloc_r+0x1dc>
     fe0:	0000fb06 	br	13d0 <_malloc_r+0x5bc>
     fe4:	1801030e 	bge	r3,zero,13f4 <_malloc_r+0x5e0>
     fe8:	84000317 	ldw	r16,12(r16)
     fec:	81c0f826 	beq	r16,r7,13d0 <_malloc_r+0x5bc>
     ff0:	80800117 	ldw	r2,4(r16)
     ff4:	1284703a 	and	r2,r2,r10
     ff8:	1447c83a 	sub	r3,r2,r17
     ffc:	48fff90e 	bge	r9,r3,fe4 <_malloc_r+0x1d0>
    1000:	80800317 	ldw	r2,12(r16)
    1004:	81000217 	ldw	r4,8(r16)
    1008:	89400054 	ori	r5,r17,1
    100c:	81400115 	stw	r5,4(r16)
    1010:	20800315 	stw	r2,12(r4)
    1014:	11000215 	stw	r4,8(r2)
    1018:	8463883a 	add	r17,r16,r17
    101c:	9c400515 	stw	r17,20(r19)
    1020:	9c400415 	stw	r17,16(r19)
    1024:	18800054 	ori	r2,r3,1
    1028:	88800115 	stw	r2,4(r17)
    102c:	8a000315 	stw	r8,12(r17)
    1030:	8a000215 	stw	r8,8(r17)
    1034:	88e3883a 	add	r17,r17,r3
    1038:	88c00015 	stw	r3,0(r17)
    103c:	9009883a 	mov	r4,r18
    1040:	000367c0 	call	367c <__malloc_unlock>
    1044:	80800204 	addi	r2,r16,8
    1048:	00001b06 	br	10b8 <_malloc_r+0x2a4>
    104c:	04400404 	movi	r17,16
    1050:	89402536 	bltu	r17,r5,10e8 <_malloc_r+0x2d4>
    1054:	00036580 	call	3658 <__malloc_lock>
    1058:	00800184 	movi	r2,6
    105c:	01000084 	movi	r4,2
    1060:	04c00034 	movhi	r19,0
    1064:	1085883a 	add	r2,r2,r2
    1068:	9cd77404 	addi	r19,r19,24016
    106c:	1085883a 	add	r2,r2,r2
    1070:	9885883a 	add	r2,r19,r2
    1074:	14000117 	ldw	r16,4(r2)
    1078:	10fffe04 	addi	r3,r2,-8
    107c:	80c0d926 	beq	r16,r3,13e4 <_malloc_r+0x5d0>
    1080:	80c00117 	ldw	r3,4(r16)
    1084:	81000317 	ldw	r4,12(r16)
    1088:	00bfff04 	movi	r2,-4
    108c:	1884703a 	and	r2,r3,r2
    1090:	81400217 	ldw	r5,8(r16)
    1094:	8085883a 	add	r2,r16,r2
    1098:	10c00117 	ldw	r3,4(r2)
    109c:	29000315 	stw	r4,12(r5)
    10a0:	21400215 	stw	r5,8(r4)
    10a4:	18c00054 	ori	r3,r3,1
    10a8:	10c00115 	stw	r3,4(r2)
    10ac:	9009883a 	mov	r4,r18
    10b0:	000367c0 	call	367c <__malloc_unlock>
    10b4:	80800204 	addi	r2,r16,8
    10b8:	dfc00a17 	ldw	ra,40(sp)
    10bc:	df000917 	ldw	fp,36(sp)
    10c0:	ddc00817 	ldw	r23,32(sp)
    10c4:	dd800717 	ldw	r22,28(sp)
    10c8:	dd400617 	ldw	r21,24(sp)
    10cc:	dd000517 	ldw	r20,20(sp)
    10d0:	dcc00417 	ldw	r19,16(sp)
    10d4:	dc800317 	ldw	r18,12(sp)
    10d8:	dc400217 	ldw	r17,8(sp)
    10dc:	dc000117 	ldw	r16,4(sp)
    10e0:	dec00b04 	addi	sp,sp,44
    10e4:	f800283a 	ret
    10e8:	00800304 	movi	r2,12
    10ec:	90800015 	stw	r2,0(r18)
    10f0:	0005883a 	mov	r2,zero
    10f4:	003ff006 	br	10b8 <_malloc_r+0x2a4>
    10f8:	01002004 	movi	r4,128
    10fc:	02001004 	movi	r8,64
    1100:	01c00fc4 	movi	r7,63
    1104:	003f6106 	br	e8c <_malloc_r+0x78>
    1108:	4009883a 	mov	r4,r8
    110c:	003f7506 	br	ee4 <_malloc_r+0xd0>
    1110:	81000317 	ldw	r4,12(r16)
    1114:	003fde06 	br	1090 <_malloc_r+0x27c>
    1118:	81c5883a 	add	r2,r16,r7
    111c:	11400117 	ldw	r5,4(r2)
    1120:	9009883a 	mov	r4,r18
    1124:	29400054 	ori	r5,r5,1
    1128:	11400115 	stw	r5,4(r2)
    112c:	000367c0 	call	367c <__malloc_unlock>
    1130:	80800204 	addi	r2,r16,8
    1134:	003fe006 	br	10b8 <_malloc_r+0x2a4>
    1138:	9c000217 	ldw	r16,8(r19)
    113c:	00bfff04 	movi	r2,-4
    1140:	85800117 	ldw	r22,4(r16)
    1144:	b0ac703a 	and	r22,r22,r2
    1148:	b4400336 	bltu	r22,r17,1158 <_malloc_r+0x344>
    114c:	b445c83a 	sub	r2,r22,r17
    1150:	00c003c4 	movi	r3,15
    1154:	18805d16 	blt	r3,r2,12cc <_malloc_r+0x4b8>
    1158:	05c00034 	movhi	r23,0
    115c:	00800074 	movhi	r2,1
    1160:	10a3a304 	addi	r2,r2,-29044
    1164:	bddcfa04 	addi	r23,r23,29672
    1168:	15400017 	ldw	r21,0(r2)
    116c:	b8c00017 	ldw	r3,0(r23)
    1170:	00bfffc4 	movi	r2,-1
    1174:	858d883a 	add	r6,r16,r22
    1178:	8d6b883a 	add	r21,r17,r21
    117c:	1880ea26 	beq	r3,r2,1528 <_malloc_r+0x714>
    1180:	ad4403c4 	addi	r21,r21,4111
    1184:	00bc0004 	movi	r2,-4096
    1188:	a8aa703a 	and	r21,r21,r2
    118c:	a80b883a 	mov	r5,r21
    1190:	9009883a 	mov	r4,r18
    1194:	d9800015 	stw	r6,0(sp)
    1198:	00020340 	call	2034 <_sbrk_r>
    119c:	1029883a 	mov	r20,r2
    11a0:	00bfffc4 	movi	r2,-1
    11a4:	d9800017 	ldw	r6,0(sp)
    11a8:	a080e826 	beq	r20,r2,154c <_malloc_r+0x738>
    11ac:	a180a636 	bltu	r20,r6,1448 <_malloc_r+0x634>
    11b0:	07000074 	movhi	fp,1
    11b4:	e723ac04 	addi	fp,fp,-29008
    11b8:	e0800017 	ldw	r2,0(fp)
    11bc:	a887883a 	add	r3,r21,r2
    11c0:	e0c00015 	stw	r3,0(fp)
    11c4:	3500e626 	beq	r6,r20,1560 <_malloc_r+0x74c>
    11c8:	b9000017 	ldw	r4,0(r23)
    11cc:	00bfffc4 	movi	r2,-1
    11d0:	2080ee26 	beq	r4,r2,158c <_malloc_r+0x778>
    11d4:	a185c83a 	sub	r2,r20,r6
    11d8:	10c5883a 	add	r2,r2,r3
    11dc:	e0800015 	stw	r2,0(fp)
    11e0:	a0c001cc 	andi	r3,r20,7
    11e4:	1800bc26 	beq	r3,zero,14d8 <_malloc_r+0x6c4>
    11e8:	a0e9c83a 	sub	r20,r20,r3
    11ec:	00840204 	movi	r2,4104
    11f0:	a5000204 	addi	r20,r20,8
    11f4:	10c7c83a 	sub	r3,r2,r3
    11f8:	a545883a 	add	r2,r20,r21
    11fc:	1083ffcc 	andi	r2,r2,4095
    1200:	18abc83a 	sub	r21,r3,r2
    1204:	a80b883a 	mov	r5,r21
    1208:	9009883a 	mov	r4,r18
    120c:	00020340 	call	2034 <_sbrk_r>
    1210:	00ffffc4 	movi	r3,-1
    1214:	10c0e126 	beq	r2,r3,159c <_malloc_r+0x788>
    1218:	1505c83a 	sub	r2,r2,r20
    121c:	1545883a 	add	r2,r2,r21
    1220:	10800054 	ori	r2,r2,1
    1224:	e0c00017 	ldw	r3,0(fp)
    1228:	9d000215 	stw	r20,8(r19)
    122c:	a0800115 	stw	r2,4(r20)
    1230:	a8c7883a 	add	r3,r21,r3
    1234:	e0c00015 	stw	r3,0(fp)
    1238:	84c00e26 	beq	r16,r19,1274 <_malloc_r+0x460>
    123c:	018003c4 	movi	r6,15
    1240:	3580a72e 	bgeu	r6,r22,14e0 <_malloc_r+0x6cc>
    1244:	81400117 	ldw	r5,4(r16)
    1248:	013ffe04 	movi	r4,-8
    124c:	b0bffd04 	addi	r2,r22,-12
    1250:	1104703a 	and	r2,r2,r4
    1254:	2900004c 	andi	r4,r5,1
    1258:	2088b03a 	or	r4,r4,r2
    125c:	81000115 	stw	r4,4(r16)
    1260:	01400144 	movi	r5,5
    1264:	8089883a 	add	r4,r16,r2
    1268:	21400115 	stw	r5,4(r4)
    126c:	21400215 	stw	r5,8(r4)
    1270:	3080cd36 	bltu	r6,r2,15a8 <_malloc_r+0x794>
    1274:	00800074 	movhi	r2,1
    1278:	10a3a204 	addi	r2,r2,-29048
    127c:	11000017 	ldw	r4,0(r2)
    1280:	20c0012e 	bgeu	r4,r3,1288 <_malloc_r+0x474>
    1284:	10c00015 	stw	r3,0(r2)
    1288:	00800074 	movhi	r2,1
    128c:	10a3a104 	addi	r2,r2,-29052
    1290:	11000017 	ldw	r4,0(r2)
    1294:	9c000217 	ldw	r16,8(r19)
    1298:	20c0012e 	bgeu	r4,r3,12a0 <_malloc_r+0x48c>
    129c:	10c00015 	stw	r3,0(r2)
    12a0:	80c00117 	ldw	r3,4(r16)
    12a4:	00bfff04 	movi	r2,-4
    12a8:	1886703a 	and	r3,r3,r2
    12ac:	1c45c83a 	sub	r2,r3,r17
    12b0:	1c400236 	bltu	r3,r17,12bc <_malloc_r+0x4a8>
    12b4:	00c003c4 	movi	r3,15
    12b8:	18800416 	blt	r3,r2,12cc <_malloc_r+0x4b8>
    12bc:	9009883a 	mov	r4,r18
    12c0:	000367c0 	call	367c <__malloc_unlock>
    12c4:	0005883a 	mov	r2,zero
    12c8:	003f7b06 	br	10b8 <_malloc_r+0x2a4>
    12cc:	88c00054 	ori	r3,r17,1
    12d0:	80c00115 	stw	r3,4(r16)
    12d4:	8463883a 	add	r17,r16,r17
    12d8:	10800054 	ori	r2,r2,1
    12dc:	9c400215 	stw	r17,8(r19)
    12e0:	88800115 	stw	r2,4(r17)
    12e4:	9009883a 	mov	r4,r18
    12e8:	000367c0 	call	367c <__malloc_unlock>
    12ec:	80800204 	addi	r2,r16,8
    12f0:	003f7106 	br	10b8 <_malloc_r+0x2a4>
    12f4:	00c00504 	movi	r3,20
    12f8:	18804a2e 	bgeu	r3,r2,1424 <_malloc_r+0x610>
    12fc:	00c01504 	movi	r3,84
    1300:	18806e36 	bltu	r3,r2,14bc <_malloc_r+0x6a8>
    1304:	8804d33a 	srli	r2,r17,12
    1308:	12001bc4 	addi	r8,r2,111
    130c:	11c01b84 	addi	r7,r2,110
    1310:	4209883a 	add	r4,r8,r8
    1314:	003edd06 	br	e8c <_malloc_r+0x78>
    1318:	3804d27a 	srli	r2,r7,9
    131c:	00c00104 	movi	r3,4
    1320:	1880442e 	bgeu	r3,r2,1434 <_malloc_r+0x620>
    1324:	00c00504 	movi	r3,20
    1328:	18808136 	bltu	r3,r2,1530 <_malloc_r+0x71c>
    132c:	11401704 	addi	r5,r2,92
    1330:	10c016c4 	addi	r3,r2,91
    1334:	294b883a 	add	r5,r5,r5
    1338:	294b883a 	add	r5,r5,r5
    133c:	294b883a 	add	r5,r5,r5
    1340:	994b883a 	add	r5,r19,r5
    1344:	28800017 	ldw	r2,0(r5)
    1348:	01800034 	movhi	r6,0
    134c:	297ffe04 	addi	r5,r5,-8
    1350:	31977404 	addi	r6,r6,24016
    1354:	28806526 	beq	r5,r2,14ec <_malloc_r+0x6d8>
    1358:	01bfff04 	movi	r6,-4
    135c:	10c00117 	ldw	r3,4(r2)
    1360:	1986703a 	and	r3,r3,r6
    1364:	38c0022e 	bgeu	r7,r3,1370 <_malloc_r+0x55c>
    1368:	10800217 	ldw	r2,8(r2)
    136c:	28bffb1e 	bne	r5,r2,135c <_malloc_r+0x548>
    1370:	11400317 	ldw	r5,12(r2)
    1374:	98c00117 	ldw	r3,4(r19)
    1378:	81400315 	stw	r5,12(r16)
    137c:	80800215 	stw	r2,8(r16)
    1380:	2c000215 	stw	r16,8(r5)
    1384:	14000315 	stw	r16,12(r2)
    1388:	003ef806 	br	f6c <_malloc_r+0x158>
    138c:	88c00054 	ori	r3,r17,1
    1390:	80c00115 	stw	r3,4(r16)
    1394:	8463883a 	add	r17,r16,r17
    1398:	34400515 	stw	r17,20(r6)
    139c:	34400415 	stw	r17,16(r6)
    13a0:	10c00054 	ori	r3,r2,1
    13a4:	8a000315 	stw	r8,12(r17)
    13a8:	8a000215 	stw	r8,8(r17)
    13ac:	88c00115 	stw	r3,4(r17)
    13b0:	88a3883a 	add	r17,r17,r2
    13b4:	88800015 	stw	r2,0(r17)
    13b8:	9009883a 	mov	r4,r18
    13bc:	000367c0 	call	367c <__malloc_unlock>
    13c0:	80800204 	addi	r2,r16,8
    13c4:	003f3c06 	br	10b8 <_malloc_r+0x2a4>
    13c8:	30c00117 	ldw	r3,4(r6)
    13cc:	003ee706 	br	f6c <_malloc_r+0x158>
    13d0:	5ac00044 	addi	r11,r11,1
    13d4:	588000cc 	andi	r2,r11,3
    13d8:	31800204 	addi	r6,r6,8
    13dc:	103efd1e 	bne	r2,zero,fd4 <_malloc_r+0x1c0>
    13e0:	00002406 	br	1474 <_malloc_r+0x660>
    13e4:	14000317 	ldw	r16,12(r2)
    13e8:	143f251e 	bne	r2,r16,1080 <_malloc_r+0x26c>
    13ec:	21000084 	addi	r4,r4,2
    13f0:	003ebc06 	br	ee4 <_malloc_r+0xd0>
    13f4:	8085883a 	add	r2,r16,r2
    13f8:	10c00117 	ldw	r3,4(r2)
    13fc:	81000317 	ldw	r4,12(r16)
    1400:	81400217 	ldw	r5,8(r16)
    1404:	18c00054 	ori	r3,r3,1
    1408:	10c00115 	stw	r3,4(r2)
    140c:	29000315 	stw	r4,12(r5)
    1410:	21400215 	stw	r5,8(r4)
    1414:	9009883a 	mov	r4,r18
    1418:	000367c0 	call	367c <__malloc_unlock>
    141c:	80800204 	addi	r2,r16,8
    1420:	003f2506 	br	10b8 <_malloc_r+0x2a4>
    1424:	12001704 	addi	r8,r2,92
    1428:	11c016c4 	addi	r7,r2,91
    142c:	4209883a 	add	r4,r8,r8
    1430:	003e9606 	br	e8c <_malloc_r+0x78>
    1434:	3804d1ba 	srli	r2,r7,6
    1438:	11400e44 	addi	r5,r2,57
    143c:	10c00e04 	addi	r3,r2,56
    1440:	294b883a 	add	r5,r5,r5
    1444:	003fbc06 	br	1338 <_malloc_r+0x524>
    1448:	84ff5926 	beq	r16,r19,11b0 <_malloc_r+0x39c>
    144c:	00800034 	movhi	r2,0
    1450:	10977404 	addi	r2,r2,24016
    1454:	14000217 	ldw	r16,8(r2)
    1458:	00bfff04 	movi	r2,-4
    145c:	80c00117 	ldw	r3,4(r16)
    1460:	1886703a 	and	r3,r3,r2
    1464:	003f9106 	br	12ac <_malloc_r+0x498>
    1468:	60800217 	ldw	r2,8(r12)
    146c:	213fffc4 	addi	r4,r4,-1
    1470:	1300651e 	bne	r2,r12,1608 <_malloc_r+0x7f4>
    1474:	208000cc 	andi	r2,r4,3
    1478:	633ffe04 	addi	r12,r12,-8
    147c:	103ffa1e 	bne	r2,zero,1468 <_malloc_r+0x654>
    1480:	98800117 	ldw	r2,4(r19)
    1484:	0146303a 	nor	r3,zero,r5
    1488:	1884703a 	and	r2,r3,r2
    148c:	98800115 	stw	r2,4(r19)
    1490:	294b883a 	add	r5,r5,r5
    1494:	117f2836 	bltu	r2,r5,1138 <_malloc_r+0x324>
    1498:	283f2726 	beq	r5,zero,1138 <_malloc_r+0x324>
    149c:	2886703a 	and	r3,r5,r2
    14a0:	5809883a 	mov	r4,r11
    14a4:	183ec31e 	bne	r3,zero,fb4 <_malloc_r+0x1a0>
    14a8:	294b883a 	add	r5,r5,r5
    14ac:	2886703a 	and	r3,r5,r2
    14b0:	21000104 	addi	r4,r4,4
    14b4:	183ffc26 	beq	r3,zero,14a8 <_malloc_r+0x694>
    14b8:	003ebe06 	br	fb4 <_malloc_r+0x1a0>
    14bc:	00c05504 	movi	r3,340
    14c0:	18801236 	bltu	r3,r2,150c <_malloc_r+0x6f8>
    14c4:	8804d3fa 	srli	r2,r17,15
    14c8:	12001e04 	addi	r8,r2,120
    14cc:	11c01dc4 	addi	r7,r2,119
    14d0:	4209883a 	add	r4,r8,r8
    14d4:	003e6d06 	br	e8c <_malloc_r+0x78>
    14d8:	00c40004 	movi	r3,4096
    14dc:	003f4606 	br	11f8 <_malloc_r+0x3e4>
    14e0:	00800044 	movi	r2,1
    14e4:	a0800115 	stw	r2,4(r20)
    14e8:	003f7406 	br	12bc <_malloc_r+0x4a8>
    14ec:	1805d0ba 	srai	r2,r3,2
    14f0:	01c00044 	movi	r7,1
    14f4:	30c00117 	ldw	r3,4(r6)
    14f8:	388e983a 	sll	r7,r7,r2
    14fc:	2805883a 	mov	r2,r5
    1500:	38c6b03a 	or	r3,r7,r3
    1504:	30c00115 	stw	r3,4(r6)
    1508:	003f9b06 	br	1378 <_malloc_r+0x564>
    150c:	00c15504 	movi	r3,1364
    1510:	18801a36 	bltu	r3,r2,157c <_malloc_r+0x768>
    1514:	8804d4ba 	srli	r2,r17,18
    1518:	12001f44 	addi	r8,r2,125
    151c:	11c01f04 	addi	r7,r2,124
    1520:	4209883a 	add	r4,r8,r8
    1524:	003e5906 	br	e8c <_malloc_r+0x78>
    1528:	ad400404 	addi	r21,r21,16
    152c:	003f1706 	br	118c <_malloc_r+0x378>
    1530:	00c01504 	movi	r3,84
    1534:	18802336 	bltu	r3,r2,15c4 <_malloc_r+0x7b0>
    1538:	3804d33a 	srli	r2,r7,12
    153c:	11401bc4 	addi	r5,r2,111
    1540:	10c01b84 	addi	r3,r2,110
    1544:	294b883a 	add	r5,r5,r5
    1548:	003f7b06 	br	1338 <_malloc_r+0x524>
    154c:	9c000217 	ldw	r16,8(r19)
    1550:	00bfff04 	movi	r2,-4
    1554:	80c00117 	ldw	r3,4(r16)
    1558:	1886703a 	and	r3,r3,r2
    155c:	003f5306 	br	12ac <_malloc_r+0x498>
    1560:	3083ffcc 	andi	r2,r6,4095
    1564:	103f181e 	bne	r2,zero,11c8 <_malloc_r+0x3b4>
    1568:	99000217 	ldw	r4,8(r19)
    156c:	b545883a 	add	r2,r22,r21
    1570:	10800054 	ori	r2,r2,1
    1574:	20800115 	stw	r2,4(r4)
    1578:	003f3e06 	br	1274 <_malloc_r+0x460>
    157c:	01003f84 	movi	r4,254
    1580:	02001fc4 	movi	r8,127
    1584:	01c01f84 	movi	r7,126
    1588:	003e4006 	br	e8c <_malloc_r+0x78>
    158c:	00800034 	movhi	r2,0
    1590:	109cfa04 	addi	r2,r2,29672
    1594:	15000015 	stw	r20,0(r2)
    1598:	003f1106 	br	11e0 <_malloc_r+0x3cc>
    159c:	00800044 	movi	r2,1
    15a0:	002b883a 	mov	r21,zero
    15a4:	003f1f06 	br	1224 <_malloc_r+0x410>
    15a8:	81400204 	addi	r5,r16,8
    15ac:	9009883a 	mov	r4,r18
    15b0:	000289c0 	call	289c <_free_r>
    15b4:	00800074 	movhi	r2,1
    15b8:	10a3ac04 	addi	r2,r2,-29008
    15bc:	10c00017 	ldw	r3,0(r2)
    15c0:	003f2c06 	br	1274 <_malloc_r+0x460>
    15c4:	00c05504 	movi	r3,340
    15c8:	18800536 	bltu	r3,r2,15e0 <_malloc_r+0x7cc>
    15cc:	3804d3fa 	srli	r2,r7,15
    15d0:	11401e04 	addi	r5,r2,120
    15d4:	10c01dc4 	addi	r3,r2,119
    15d8:	294b883a 	add	r5,r5,r5
    15dc:	003f5606 	br	1338 <_malloc_r+0x524>
    15e0:	00c15504 	movi	r3,1364
    15e4:	18800536 	bltu	r3,r2,15fc <_malloc_r+0x7e8>
    15e8:	3804d4ba 	srli	r2,r7,18
    15ec:	11401f44 	addi	r5,r2,125
    15f0:	10c01f04 	addi	r3,r2,124
    15f4:	294b883a 	add	r5,r5,r5
    15f8:	003f4f06 	br	1338 <_malloc_r+0x524>
    15fc:	01403f84 	movi	r5,254
    1600:	00c01f84 	movi	r3,126
    1604:	003f4c06 	br	1338 <_malloc_r+0x524>
    1608:	98800117 	ldw	r2,4(r19)
    160c:	003fa006 	br	1490 <_malloc_r+0x67c>
    1610:	8808d0fa 	srli	r4,r17,3
    1614:	20800044 	addi	r2,r4,1
    1618:	1085883a 	add	r2,r2,r2
    161c:	003e9006 	br	1060 <_malloc_r+0x24c>

00001620 <memchr>:
    1620:	208000cc 	andi	r2,r4,3
    1624:	280f883a 	mov	r7,r5
    1628:	10003426 	beq	r2,zero,16fc <memchr+0xdc>
    162c:	30bfffc4 	addi	r2,r6,-1
    1630:	30001a26 	beq	r6,zero,169c <memchr+0x7c>
    1634:	20c00003 	ldbu	r3,0(r4)
    1638:	29803fcc 	andi	r6,r5,255
    163c:	30c0051e 	bne	r6,r3,1654 <memchr+0x34>
    1640:	00001806 	br	16a4 <memchr+0x84>
    1644:	10001526 	beq	r2,zero,169c <memchr+0x7c>
    1648:	20c00003 	ldbu	r3,0(r4)
    164c:	10bfffc4 	addi	r2,r2,-1
    1650:	30c01426 	beq	r6,r3,16a4 <memchr+0x84>
    1654:	21000044 	addi	r4,r4,1
    1658:	20c000cc 	andi	r3,r4,3
    165c:	183ff91e 	bne	r3,zero,1644 <memchr+0x24>
    1660:	020000c4 	movi	r8,3
    1664:	40801136 	bltu	r8,r2,16ac <memchr+0x8c>
    1668:	10000c26 	beq	r2,zero,169c <memchr+0x7c>
    166c:	20c00003 	ldbu	r3,0(r4)
    1670:	29403fcc 	andi	r5,r5,255
    1674:	28c00b26 	beq	r5,r3,16a4 <memchr+0x84>
    1678:	20c00044 	addi	r3,r4,1
    167c:	39803fcc 	andi	r6,r7,255
    1680:	2089883a 	add	r4,r4,r2
    1684:	00000306 	br	1694 <memchr+0x74>
    1688:	18c00044 	addi	r3,r3,1
    168c:	197fffc3 	ldbu	r5,-1(r3)
    1690:	31400526 	beq	r6,r5,16a8 <memchr+0x88>
    1694:	1805883a 	mov	r2,r3
    1698:	20fffb1e 	bne	r4,r3,1688 <memchr+0x68>
    169c:	0005883a 	mov	r2,zero
    16a0:	f800283a 	ret
    16a4:	2005883a 	mov	r2,r4
    16a8:	f800283a 	ret
    16ac:	28c03fcc 	andi	r3,r5,255
    16b0:	1812923a 	slli	r9,r3,8
    16b4:	02ffbff4 	movhi	r11,65279
    16b8:	02a02074 	movhi	r10,32897
    16bc:	48d2b03a 	or	r9,r9,r3
    16c0:	4806943a 	slli	r3,r9,16
    16c4:	5affbfc4 	addi	r11,r11,-257
    16c8:	52a02004 	addi	r10,r10,-32640
    16cc:	48d2b03a 	or	r9,r9,r3
    16d0:	20c00017 	ldw	r3,0(r4)
    16d4:	48c6f03a 	xor	r3,r9,r3
    16d8:	1acd883a 	add	r6,r3,r11
    16dc:	00c6303a 	nor	r3,zero,r3
    16e0:	30c6703a 	and	r3,r6,r3
    16e4:	1a86703a 	and	r3,r3,r10
    16e8:	183fe01e 	bne	r3,zero,166c <memchr+0x4c>
    16ec:	10bfff04 	addi	r2,r2,-4
    16f0:	21000104 	addi	r4,r4,4
    16f4:	40bff636 	bltu	r8,r2,16d0 <memchr+0xb0>
    16f8:	003fdb06 	br	1668 <memchr+0x48>
    16fc:	3005883a 	mov	r2,r6
    1700:	003fd706 	br	1660 <memchr+0x40>

00001704 <memcpy>:
    1704:	defffd04 	addi	sp,sp,-12
    1708:	dfc00215 	stw	ra,8(sp)
    170c:	dc400115 	stw	r17,4(sp)
    1710:	dc000015 	stw	r16,0(sp)
    1714:	00c003c4 	movi	r3,15
    1718:	2005883a 	mov	r2,r4
    171c:	1980452e 	bgeu	r3,r6,1834 <memcpy+0x130>
    1720:	2906b03a 	or	r3,r5,r4
    1724:	18c000cc 	andi	r3,r3,3
    1728:	1800441e 	bne	r3,zero,183c <memcpy+0x138>
    172c:	347ffc04 	addi	r17,r6,-16
    1730:	8822d13a 	srli	r17,r17,4
    1734:	28c00104 	addi	r3,r5,4
    1738:	23400104 	addi	r13,r4,4
    173c:	8820913a 	slli	r16,r17,4
    1740:	2b000204 	addi	r12,r5,8
    1744:	22c00204 	addi	r11,r4,8
    1748:	84000504 	addi	r16,r16,20
    174c:	2a800304 	addi	r10,r5,12
    1750:	22400304 	addi	r9,r4,12
    1754:	2c21883a 	add	r16,r5,r16
    1758:	2811883a 	mov	r8,r5
    175c:	200f883a 	mov	r7,r4
    1760:	41000017 	ldw	r4,0(r8)
    1764:	1fc00017 	ldw	ra,0(r3)
    1768:	63c00017 	ldw	r15,0(r12)
    176c:	39000015 	stw	r4,0(r7)
    1770:	53800017 	ldw	r14,0(r10)
    1774:	6fc00015 	stw	ra,0(r13)
    1778:	5bc00015 	stw	r15,0(r11)
    177c:	4b800015 	stw	r14,0(r9)
    1780:	18c00404 	addi	r3,r3,16
    1784:	39c00404 	addi	r7,r7,16
    1788:	42000404 	addi	r8,r8,16
    178c:	6b400404 	addi	r13,r13,16
    1790:	63000404 	addi	r12,r12,16
    1794:	5ac00404 	addi	r11,r11,16
    1798:	52800404 	addi	r10,r10,16
    179c:	4a400404 	addi	r9,r9,16
    17a0:	1c3fef1e 	bne	r3,r16,1760 <memcpy+0x5c>
    17a4:	89c00044 	addi	r7,r17,1
    17a8:	380e913a 	slli	r7,r7,4
    17ac:	310003cc 	andi	r4,r6,15
    17b0:	02c000c4 	movi	r11,3
    17b4:	11c7883a 	add	r3,r2,r7
    17b8:	29cb883a 	add	r5,r5,r7
    17bc:	5900212e 	bgeu	r11,r4,1844 <memcpy+0x140>
    17c0:	1813883a 	mov	r9,r3
    17c4:	2811883a 	mov	r8,r5
    17c8:	200f883a 	mov	r7,r4
    17cc:	42800017 	ldw	r10,0(r8)
    17d0:	4a400104 	addi	r9,r9,4
    17d4:	39ffff04 	addi	r7,r7,-4
    17d8:	4abfff15 	stw	r10,-4(r9)
    17dc:	42000104 	addi	r8,r8,4
    17e0:	59fffa36 	bltu	r11,r7,17cc <memcpy+0xc8>
    17e4:	213fff04 	addi	r4,r4,-4
    17e8:	2008d0ba 	srli	r4,r4,2
    17ec:	318000cc 	andi	r6,r6,3
    17f0:	21000044 	addi	r4,r4,1
    17f4:	2109883a 	add	r4,r4,r4
    17f8:	2109883a 	add	r4,r4,r4
    17fc:	1907883a 	add	r3,r3,r4
    1800:	290b883a 	add	r5,r5,r4
    1804:	30000626 	beq	r6,zero,1820 <memcpy+0x11c>
    1808:	198d883a 	add	r6,r3,r6
    180c:	29c00003 	ldbu	r7,0(r5)
    1810:	18c00044 	addi	r3,r3,1
    1814:	29400044 	addi	r5,r5,1
    1818:	19ffffc5 	stb	r7,-1(r3)
    181c:	19bffb1e 	bne	r3,r6,180c <memcpy+0x108>
    1820:	dfc00217 	ldw	ra,8(sp)
    1824:	dc400117 	ldw	r17,4(sp)
    1828:	dc000017 	ldw	r16,0(sp)
    182c:	dec00304 	addi	sp,sp,12
    1830:	f800283a 	ret
    1834:	2007883a 	mov	r3,r4
    1838:	003ff206 	br	1804 <memcpy+0x100>
    183c:	2007883a 	mov	r3,r4
    1840:	003ff106 	br	1808 <memcpy+0x104>
    1844:	200d883a 	mov	r6,r4
    1848:	003fee06 	br	1804 <memcpy+0x100>

0000184c <memmove>:
    184c:	2005883a 	mov	r2,r4
    1850:	29000b2e 	bgeu	r5,r4,1880 <memmove+0x34>
    1854:	298f883a 	add	r7,r5,r6
    1858:	21c0092e 	bgeu	r4,r7,1880 <memmove+0x34>
    185c:	2187883a 	add	r3,r4,r6
    1860:	198bc83a 	sub	r5,r3,r6
    1864:	30004826 	beq	r6,zero,1988 <memmove+0x13c>
    1868:	39ffffc4 	addi	r7,r7,-1
    186c:	39000003 	ldbu	r4,0(r7)
    1870:	18ffffc4 	addi	r3,r3,-1
    1874:	19000005 	stb	r4,0(r3)
    1878:	28fffb1e 	bne	r5,r3,1868 <memmove+0x1c>
    187c:	f800283a 	ret
    1880:	00c003c4 	movi	r3,15
    1884:	1980412e 	bgeu	r3,r6,198c <memmove+0x140>
    1888:	2886b03a 	or	r3,r5,r2
    188c:	18c000cc 	andi	r3,r3,3
    1890:	1800401e 	bne	r3,zero,1994 <memmove+0x148>
    1894:	33fffc04 	addi	r15,r6,-16
    1898:	781ed13a 	srli	r15,r15,4
    189c:	28c00104 	addi	r3,r5,4
    18a0:	13400104 	addi	r13,r2,4
    18a4:	781c913a 	slli	r14,r15,4
    18a8:	2b000204 	addi	r12,r5,8
    18ac:	12c00204 	addi	r11,r2,8
    18b0:	73800504 	addi	r14,r14,20
    18b4:	2a800304 	addi	r10,r5,12
    18b8:	12400304 	addi	r9,r2,12
    18bc:	2b9d883a 	add	r14,r5,r14
    18c0:	2811883a 	mov	r8,r5
    18c4:	100f883a 	mov	r7,r2
    18c8:	41000017 	ldw	r4,0(r8)
    18cc:	39c00404 	addi	r7,r7,16
    18d0:	18c00404 	addi	r3,r3,16
    18d4:	393ffc15 	stw	r4,-16(r7)
    18d8:	193ffc17 	ldw	r4,-16(r3)
    18dc:	6b400404 	addi	r13,r13,16
    18e0:	5ac00404 	addi	r11,r11,16
    18e4:	693ffc15 	stw	r4,-16(r13)
    18e8:	61000017 	ldw	r4,0(r12)
    18ec:	4a400404 	addi	r9,r9,16
    18f0:	42000404 	addi	r8,r8,16
    18f4:	593ffc15 	stw	r4,-16(r11)
    18f8:	51000017 	ldw	r4,0(r10)
    18fc:	63000404 	addi	r12,r12,16
    1900:	52800404 	addi	r10,r10,16
    1904:	493ffc15 	stw	r4,-16(r9)
    1908:	1bbfef1e 	bne	r3,r14,18c8 <memmove+0x7c>
    190c:	79000044 	addi	r4,r15,1
    1910:	2008913a 	slli	r4,r4,4
    1914:	328003cc 	andi	r10,r6,15
    1918:	02c000c4 	movi	r11,3
    191c:	1107883a 	add	r3,r2,r4
    1920:	290b883a 	add	r5,r5,r4
    1924:	5a801e2e 	bgeu	r11,r10,19a0 <memmove+0x154>
    1928:	1813883a 	mov	r9,r3
    192c:	2811883a 	mov	r8,r5
    1930:	500f883a 	mov	r7,r10
    1934:	41000017 	ldw	r4,0(r8)
    1938:	4a400104 	addi	r9,r9,4
    193c:	39ffff04 	addi	r7,r7,-4
    1940:	493fff15 	stw	r4,-4(r9)
    1944:	42000104 	addi	r8,r8,4
    1948:	59fffa36 	bltu	r11,r7,1934 <memmove+0xe8>
    194c:	513fff04 	addi	r4,r10,-4
    1950:	2008d0ba 	srli	r4,r4,2
    1954:	318000cc 	andi	r6,r6,3
    1958:	21000044 	addi	r4,r4,1
    195c:	2109883a 	add	r4,r4,r4
    1960:	2109883a 	add	r4,r4,r4
    1964:	1907883a 	add	r3,r3,r4
    1968:	290b883a 	add	r5,r5,r4
    196c:	30000b26 	beq	r6,zero,199c <memmove+0x150>
    1970:	198d883a 	add	r6,r3,r6
    1974:	29c00003 	ldbu	r7,0(r5)
    1978:	18c00044 	addi	r3,r3,1
    197c:	29400044 	addi	r5,r5,1
    1980:	19ffffc5 	stb	r7,-1(r3)
    1984:	19bffb1e 	bne	r3,r6,1974 <memmove+0x128>
    1988:	f800283a 	ret
    198c:	1007883a 	mov	r3,r2
    1990:	003ff606 	br	196c <memmove+0x120>
    1994:	1007883a 	mov	r3,r2
    1998:	003ff506 	br	1970 <memmove+0x124>
    199c:	f800283a 	ret
    19a0:	500d883a 	mov	r6,r10
    19a4:	003ff106 	br	196c <memmove+0x120>

000019a8 <memset>:
    19a8:	20c000cc 	andi	r3,r4,3
    19ac:	2005883a 	mov	r2,r4
    19b0:	18004426 	beq	r3,zero,1ac4 <memset+0x11c>
    19b4:	31ffffc4 	addi	r7,r6,-1
    19b8:	30004026 	beq	r6,zero,1abc <memset+0x114>
    19bc:	2813883a 	mov	r9,r5
    19c0:	200d883a 	mov	r6,r4
    19c4:	2007883a 	mov	r3,r4
    19c8:	00000406 	br	19dc <memset+0x34>
    19cc:	3a3fffc4 	addi	r8,r7,-1
    19d0:	31800044 	addi	r6,r6,1
    19d4:	38003926 	beq	r7,zero,1abc <memset+0x114>
    19d8:	400f883a 	mov	r7,r8
    19dc:	18c00044 	addi	r3,r3,1
    19e0:	32400005 	stb	r9,0(r6)
    19e4:	1a0000cc 	andi	r8,r3,3
    19e8:	403ff81e 	bne	r8,zero,19cc <memset+0x24>
    19ec:	010000c4 	movi	r4,3
    19f0:	21c02d2e 	bgeu	r4,r7,1aa8 <memset+0x100>
    19f4:	29003fcc 	andi	r4,r5,255
    19f8:	200c923a 	slli	r6,r4,8
    19fc:	3108b03a 	or	r4,r6,r4
    1a00:	200c943a 	slli	r6,r4,16
    1a04:	218cb03a 	or	r6,r4,r6
    1a08:	010003c4 	movi	r4,15
    1a0c:	21c0182e 	bgeu	r4,r7,1a70 <memset+0xc8>
    1a10:	3b3ffc04 	addi	r12,r7,-16
    1a14:	6018d13a 	srli	r12,r12,4
    1a18:	1a000104 	addi	r8,r3,4
    1a1c:	1ac00204 	addi	r11,r3,8
    1a20:	6008913a 	slli	r4,r12,4
    1a24:	1a800304 	addi	r10,r3,12
    1a28:	1813883a 	mov	r9,r3
    1a2c:	21000504 	addi	r4,r4,20
    1a30:	1909883a 	add	r4,r3,r4
    1a34:	49800015 	stw	r6,0(r9)
    1a38:	41800015 	stw	r6,0(r8)
    1a3c:	59800015 	stw	r6,0(r11)
    1a40:	51800015 	stw	r6,0(r10)
    1a44:	42000404 	addi	r8,r8,16
    1a48:	4a400404 	addi	r9,r9,16
    1a4c:	5ac00404 	addi	r11,r11,16
    1a50:	52800404 	addi	r10,r10,16
    1a54:	413ff71e 	bne	r8,r4,1a34 <memset+0x8c>
    1a58:	63000044 	addi	r12,r12,1
    1a5c:	6018913a 	slli	r12,r12,4
    1a60:	39c003cc 	andi	r7,r7,15
    1a64:	010000c4 	movi	r4,3
    1a68:	1b07883a 	add	r3,r3,r12
    1a6c:	21c00e2e 	bgeu	r4,r7,1aa8 <memset+0x100>
    1a70:	1813883a 	mov	r9,r3
    1a74:	3811883a 	mov	r8,r7
    1a78:	010000c4 	movi	r4,3
    1a7c:	49800015 	stw	r6,0(r9)
    1a80:	423fff04 	addi	r8,r8,-4
    1a84:	4a400104 	addi	r9,r9,4
    1a88:	223ffc36 	bltu	r4,r8,1a7c <memset+0xd4>
    1a8c:	393fff04 	addi	r4,r7,-4
    1a90:	2008d0ba 	srli	r4,r4,2
    1a94:	39c000cc 	andi	r7,r7,3
    1a98:	21000044 	addi	r4,r4,1
    1a9c:	2109883a 	add	r4,r4,r4
    1aa0:	2109883a 	add	r4,r4,r4
    1aa4:	1907883a 	add	r3,r3,r4
    1aa8:	38000526 	beq	r7,zero,1ac0 <memset+0x118>
    1aac:	19cf883a 	add	r7,r3,r7
    1ab0:	19400005 	stb	r5,0(r3)
    1ab4:	18c00044 	addi	r3,r3,1
    1ab8:	38fffd1e 	bne	r7,r3,1ab0 <memset+0x108>
    1abc:	f800283a 	ret
    1ac0:	f800283a 	ret
    1ac4:	2007883a 	mov	r3,r4
    1ac8:	300f883a 	mov	r7,r6
    1acc:	003fc706 	br	19ec <memset+0x44>

00001ad0 <_realloc_r>:
    1ad0:	defff604 	addi	sp,sp,-40
    1ad4:	dc400115 	stw	r17,4(sp)
    1ad8:	dfc00915 	stw	ra,36(sp)
    1adc:	df000815 	stw	fp,32(sp)
    1ae0:	ddc00715 	stw	r23,28(sp)
    1ae4:	dd800615 	stw	r22,24(sp)
    1ae8:	dd400515 	stw	r21,20(sp)
    1aec:	dd000415 	stw	r20,16(sp)
    1af0:	dcc00315 	stw	r19,12(sp)
    1af4:	dc800215 	stw	r18,8(sp)
    1af8:	dc000015 	stw	r16,0(sp)
    1afc:	3023883a 	mov	r17,r6
    1b00:	2800b626 	beq	r5,zero,1ddc <_realloc_r+0x30c>
    1b04:	2829883a 	mov	r20,r5
    1b08:	2025883a 	mov	r18,r4
    1b0c:	00036580 	call	3658 <__malloc_lock>
    1b10:	a0ffff17 	ldw	r3,-4(r20)
    1b14:	043fff04 	movi	r16,-4
    1b18:	888002c4 	addi	r2,r17,11
    1b1c:	01000584 	movi	r4,22
    1b20:	a57ffe04 	addi	r21,r20,-8
    1b24:	1c20703a 	and	r16,r3,r16
    1b28:	2080332e 	bgeu	r4,r2,1bf8 <_realloc_r+0x128>
    1b2c:	05bffe04 	movi	r22,-8
    1b30:	15ac703a 	and	r22,r2,r22
    1b34:	b005883a 	mov	r2,r22
    1b38:	b0005716 	blt	r22,zero,1c98 <_realloc_r+0x1c8>
    1b3c:	b4405636 	bltu	r22,r17,1c98 <_realloc_r+0x1c8>
    1b40:	8080300e 	bge	r16,r2,1c04 <_realloc_r+0x134>
    1b44:	07000034 	movhi	fp,0
    1b48:	e7177404 	addi	fp,fp,24016
    1b4c:	e2000217 	ldw	r8,8(fp)
    1b50:	ac09883a 	add	r4,r21,r16
    1b54:	22006126 	beq	r4,r8,1cdc <_realloc_r+0x20c>
    1b58:	22400117 	ldw	r9,4(r4)
    1b5c:	01ffff84 	movi	r7,-2
    1b60:	49ce703a 	and	r7,r9,r7
    1b64:	21cf883a 	add	r7,r4,r7
    1b68:	39800117 	ldw	r6,4(r7)
    1b6c:	3180004c 	andi	r6,r6,1
    1b70:	30003e26 	beq	r6,zero,1c6c <_realloc_r+0x19c>
    1b74:	18c0004c 	andi	r3,r3,1
    1b78:	18008126 	beq	r3,zero,1d80 <_realloc_r+0x2b0>
    1b7c:	880b883a 	mov	r5,r17
    1b80:	9009883a 	mov	r4,r18
    1b84:	0000e140 	call	e14 <_malloc_r>
    1b88:	1023883a 	mov	r17,r2
    1b8c:	10011e26 	beq	r2,zero,2008 <_realloc_r+0x538>
    1b90:	a0ffff17 	ldw	r3,-4(r20)
    1b94:	113ffe04 	addi	r4,r2,-8
    1b98:	00bfff84 	movi	r2,-2
    1b9c:	1884703a 	and	r2,r3,r2
    1ba0:	a885883a 	add	r2,r21,r2
    1ba4:	2080ee26 	beq	r4,r2,1f60 <_realloc_r+0x490>
    1ba8:	81bfff04 	addi	r6,r16,-4
    1bac:	00800904 	movi	r2,36
    1bb0:	1180b836 	bltu	r2,r6,1e94 <_realloc_r+0x3c4>
    1bb4:	00c004c4 	movi	r3,19
    1bb8:	19809536 	bltu	r3,r6,1e10 <_realloc_r+0x340>
    1bbc:	8805883a 	mov	r2,r17
    1bc0:	a007883a 	mov	r3,r20
    1bc4:	19000017 	ldw	r4,0(r3)
    1bc8:	11000015 	stw	r4,0(r2)
    1bcc:	19000117 	ldw	r4,4(r3)
    1bd0:	11000115 	stw	r4,4(r2)
    1bd4:	18c00217 	ldw	r3,8(r3)
    1bd8:	10c00215 	stw	r3,8(r2)
    1bdc:	a00b883a 	mov	r5,r20
    1be0:	9009883a 	mov	r4,r18
    1be4:	000289c0 	call	289c <_free_r>
    1be8:	9009883a 	mov	r4,r18
    1bec:	000367c0 	call	367c <__malloc_unlock>
    1bf0:	8805883a 	mov	r2,r17
    1bf4:	00001106 	br	1c3c <_realloc_r+0x16c>
    1bf8:	00800404 	movi	r2,16
    1bfc:	102d883a 	mov	r22,r2
    1c00:	003fce06 	br	1b3c <_realloc_r+0x6c>
    1c04:	a023883a 	mov	r17,r20
    1c08:	858fc83a 	sub	r7,r16,r22
    1c0c:	008003c4 	movi	r2,15
    1c10:	18c0004c 	andi	r3,r3,1
    1c14:	11c02436 	bltu	r2,r7,1ca8 <_realloc_r+0x1d8>
    1c18:	1c06b03a 	or	r3,r3,r16
    1c1c:	a8c00115 	stw	r3,4(r21)
    1c20:	ac21883a 	add	r16,r21,r16
    1c24:	80800117 	ldw	r2,4(r16)
    1c28:	10800054 	ori	r2,r2,1
    1c2c:	80800115 	stw	r2,4(r16)
    1c30:	9009883a 	mov	r4,r18
    1c34:	000367c0 	call	367c <__malloc_unlock>
    1c38:	8805883a 	mov	r2,r17
    1c3c:	dfc00917 	ldw	ra,36(sp)
    1c40:	df000817 	ldw	fp,32(sp)
    1c44:	ddc00717 	ldw	r23,28(sp)
    1c48:	dd800617 	ldw	r22,24(sp)
    1c4c:	dd400517 	ldw	r21,20(sp)
    1c50:	dd000417 	ldw	r20,16(sp)
    1c54:	dcc00317 	ldw	r19,12(sp)
    1c58:	dc800217 	ldw	r18,8(sp)
    1c5c:	dc400117 	ldw	r17,4(sp)
    1c60:	dc000017 	ldw	r16,0(sp)
    1c64:	dec00a04 	addi	sp,sp,40
    1c68:	f800283a 	ret
    1c6c:	017fff04 	movi	r5,-4
    1c70:	494a703a 	and	r5,r9,r5
    1c74:	814d883a 	add	r6,r16,r5
    1c78:	30801e16 	blt	r6,r2,1cf4 <_realloc_r+0x224>
    1c7c:	20800317 	ldw	r2,12(r4)
    1c80:	21000217 	ldw	r4,8(r4)
    1c84:	a023883a 	mov	r17,r20
    1c88:	3021883a 	mov	r16,r6
    1c8c:	20800315 	stw	r2,12(r4)
    1c90:	11000215 	stw	r4,8(r2)
    1c94:	003fdc06 	br	1c08 <_realloc_r+0x138>
    1c98:	00800304 	movi	r2,12
    1c9c:	90800015 	stw	r2,0(r18)
    1ca0:	0005883a 	mov	r2,zero
    1ca4:	003fe506 	br	1c3c <_realloc_r+0x16c>
    1ca8:	1d86b03a 	or	r3,r3,r22
    1cac:	a8c00115 	stw	r3,4(r21)
    1cb0:	ad8b883a 	add	r5,r21,r22
    1cb4:	38c00054 	ori	r3,r7,1
    1cb8:	28c00115 	stw	r3,4(r5)
    1cbc:	29cf883a 	add	r7,r5,r7
    1cc0:	38c00117 	ldw	r3,4(r7)
    1cc4:	29400204 	addi	r5,r5,8
    1cc8:	9009883a 	mov	r4,r18
    1ccc:	18800054 	ori	r2,r3,1
    1cd0:	38800115 	stw	r2,4(r7)
    1cd4:	000289c0 	call	289c <_free_r>
    1cd8:	003fd506 	br	1c30 <_realloc_r+0x160>
    1cdc:	21c00117 	ldw	r7,4(r4)
    1ce0:	017fff04 	movi	r5,-4
    1ce4:	b1800404 	addi	r6,r22,16
    1ce8:	394a703a 	and	r5,r7,r5
    1cec:	814f883a 	add	r7,r16,r5
    1cf0:	39805b0e 	bge	r7,r6,1e60 <_realloc_r+0x390>
    1cf4:	18c0004c 	andi	r3,r3,1
    1cf8:	183fa01e 	bne	r3,zero,1b7c <_realloc_r+0xac>
    1cfc:	a4fffe17 	ldw	r19,-8(r20)
    1d00:	00ffff04 	movi	r3,-4
    1d04:	ace7c83a 	sub	r19,r21,r19
    1d08:	99800117 	ldw	r6,4(r19)
    1d0c:	30c6703a 	and	r3,r6,r3
    1d10:	20002026 	beq	r4,zero,1d94 <_realloc_r+0x2c4>
    1d14:	80ef883a 	add	r23,r16,r3
    1d18:	b96f883a 	add	r23,r23,r5
    1d1c:	22006126 	beq	r4,r8,1ea4 <_realloc_r+0x3d4>
    1d20:	b8801c16 	blt	r23,r2,1d94 <_realloc_r+0x2c4>
    1d24:	20800317 	ldw	r2,12(r4)
    1d28:	20c00217 	ldw	r3,8(r4)
    1d2c:	81bfff04 	addi	r6,r16,-4
    1d30:	01000904 	movi	r4,36
    1d34:	18800315 	stw	r2,12(r3)
    1d38:	10c00215 	stw	r3,8(r2)
    1d3c:	98c00217 	ldw	r3,8(r19)
    1d40:	98800317 	ldw	r2,12(r19)
    1d44:	9c400204 	addi	r17,r19,8
    1d48:	18800315 	stw	r2,12(r3)
    1d4c:	10c00215 	stw	r3,8(r2)
    1d50:	21801b36 	bltu	r4,r6,1dc0 <_realloc_r+0x2f0>
    1d54:	008004c4 	movi	r2,19
    1d58:	1180362e 	bgeu	r2,r6,1e34 <_realloc_r+0x364>
    1d5c:	a0800017 	ldw	r2,0(r20)
    1d60:	98800215 	stw	r2,8(r19)
    1d64:	a0800117 	ldw	r2,4(r20)
    1d68:	98800315 	stw	r2,12(r19)
    1d6c:	008006c4 	movi	r2,27
    1d70:	11808136 	bltu	r2,r6,1f78 <_realloc_r+0x4a8>
    1d74:	98800404 	addi	r2,r19,16
    1d78:	a5000204 	addi	r20,r20,8
    1d7c:	00002e06 	br	1e38 <_realloc_r+0x368>
    1d80:	a4fffe17 	ldw	r19,-8(r20)
    1d84:	00ffff04 	movi	r3,-4
    1d88:	ace7c83a 	sub	r19,r21,r19
    1d8c:	99000117 	ldw	r4,4(r19)
    1d90:	20c6703a 	and	r3,r4,r3
    1d94:	983f7926 	beq	r19,zero,1b7c <_realloc_r+0xac>
    1d98:	80ef883a 	add	r23,r16,r3
    1d9c:	b8bf7716 	blt	r23,r2,1b7c <_realloc_r+0xac>
    1da0:	98800317 	ldw	r2,12(r19)
    1da4:	98c00217 	ldw	r3,8(r19)
    1da8:	81bfff04 	addi	r6,r16,-4
    1dac:	01000904 	movi	r4,36
    1db0:	18800315 	stw	r2,12(r3)
    1db4:	10c00215 	stw	r3,8(r2)
    1db8:	9c400204 	addi	r17,r19,8
    1dbc:	21bfe52e 	bgeu	r4,r6,1d54 <_realloc_r+0x284>
    1dc0:	a00b883a 	mov	r5,r20
    1dc4:	8809883a 	mov	r4,r17
    1dc8:	000184c0 	call	184c <memmove>
    1dcc:	98c00117 	ldw	r3,4(r19)
    1dd0:	b821883a 	mov	r16,r23
    1dd4:	982b883a 	mov	r21,r19
    1dd8:	003f8b06 	br	1c08 <_realloc_r+0x138>
    1ddc:	300b883a 	mov	r5,r6
    1de0:	dfc00917 	ldw	ra,36(sp)
    1de4:	df000817 	ldw	fp,32(sp)
    1de8:	ddc00717 	ldw	r23,28(sp)
    1dec:	dd800617 	ldw	r22,24(sp)
    1df0:	dd400517 	ldw	r21,20(sp)
    1df4:	dd000417 	ldw	r20,16(sp)
    1df8:	dcc00317 	ldw	r19,12(sp)
    1dfc:	dc800217 	ldw	r18,8(sp)
    1e00:	dc400117 	ldw	r17,4(sp)
    1e04:	dc000017 	ldw	r16,0(sp)
    1e08:	dec00a04 	addi	sp,sp,40
    1e0c:	0000e141 	jmpi	e14 <_malloc_r>
    1e10:	a0c00017 	ldw	r3,0(r20)
    1e14:	88c00015 	stw	r3,0(r17)
    1e18:	a0c00117 	ldw	r3,4(r20)
    1e1c:	88c00115 	stw	r3,4(r17)
    1e20:	00c006c4 	movi	r3,27
    1e24:	19804636 	bltu	r3,r6,1f40 <_realloc_r+0x470>
    1e28:	88800204 	addi	r2,r17,8
    1e2c:	a0c00204 	addi	r3,r20,8
    1e30:	003f6406 	br	1bc4 <_realloc_r+0xf4>
    1e34:	8805883a 	mov	r2,r17
    1e38:	a0c00017 	ldw	r3,0(r20)
    1e3c:	b821883a 	mov	r16,r23
    1e40:	982b883a 	mov	r21,r19
    1e44:	10c00015 	stw	r3,0(r2)
    1e48:	a0c00117 	ldw	r3,4(r20)
    1e4c:	10c00115 	stw	r3,4(r2)
    1e50:	a0c00217 	ldw	r3,8(r20)
    1e54:	10c00215 	stw	r3,8(r2)
    1e58:	98c00117 	ldw	r3,4(r19)
    1e5c:	003f6a06 	br	1c08 <_realloc_r+0x138>
    1e60:	adab883a 	add	r21,r21,r22
    1e64:	3d85c83a 	sub	r2,r7,r22
    1e68:	e5400215 	stw	r21,8(fp)
    1e6c:	10800054 	ori	r2,r2,1
    1e70:	a8800115 	stw	r2,4(r21)
    1e74:	a0bfff17 	ldw	r2,-4(r20)
    1e78:	9009883a 	mov	r4,r18
    1e7c:	1080004c 	andi	r2,r2,1
    1e80:	1584b03a 	or	r2,r2,r22
    1e84:	a0bfff15 	stw	r2,-4(r20)
    1e88:	000367c0 	call	367c <__malloc_unlock>
    1e8c:	a005883a 	mov	r2,r20
    1e90:	003f6a06 	br	1c3c <_realloc_r+0x16c>
    1e94:	a00b883a 	mov	r5,r20
    1e98:	8809883a 	mov	r4,r17
    1e9c:	000184c0 	call	184c <memmove>
    1ea0:	003f4e06 	br	1bdc <_realloc_r+0x10c>
    1ea4:	b1000404 	addi	r4,r22,16
    1ea8:	b93fba16 	blt	r23,r4,1d94 <_realloc_r+0x2c4>
    1eac:	98800317 	ldw	r2,12(r19)
    1eb0:	98c00217 	ldw	r3,8(r19)
    1eb4:	81bfff04 	addi	r6,r16,-4
    1eb8:	01000904 	movi	r4,36
    1ebc:	18800315 	stw	r2,12(r3)
    1ec0:	10c00215 	stw	r3,8(r2)
    1ec4:	9c400204 	addi	r17,r19,8
    1ec8:	21804336 	bltu	r4,r6,1fd8 <_realloc_r+0x508>
    1ecc:	008004c4 	movi	r2,19
    1ed0:	11803f2e 	bgeu	r2,r6,1fd0 <_realloc_r+0x500>
    1ed4:	a0800017 	ldw	r2,0(r20)
    1ed8:	98800215 	stw	r2,8(r19)
    1edc:	a0800117 	ldw	r2,4(r20)
    1ee0:	98800315 	stw	r2,12(r19)
    1ee4:	008006c4 	movi	r2,27
    1ee8:	11803f36 	bltu	r2,r6,1fe8 <_realloc_r+0x518>
    1eec:	98800404 	addi	r2,r19,16
    1ef0:	a5000204 	addi	r20,r20,8
    1ef4:	a0c00017 	ldw	r3,0(r20)
    1ef8:	10c00015 	stw	r3,0(r2)
    1efc:	a0c00117 	ldw	r3,4(r20)
    1f00:	10c00115 	stw	r3,4(r2)
    1f04:	a0c00217 	ldw	r3,8(r20)
    1f08:	10c00215 	stw	r3,8(r2)
    1f0c:	9d87883a 	add	r3,r19,r22
    1f10:	bd85c83a 	sub	r2,r23,r22
    1f14:	e0c00215 	stw	r3,8(fp)
    1f18:	10800054 	ori	r2,r2,1
    1f1c:	18800115 	stw	r2,4(r3)
    1f20:	98800117 	ldw	r2,4(r19)
    1f24:	9009883a 	mov	r4,r18
    1f28:	1080004c 	andi	r2,r2,1
    1f2c:	1584b03a 	or	r2,r2,r22
    1f30:	98800115 	stw	r2,4(r19)
    1f34:	000367c0 	call	367c <__malloc_unlock>
    1f38:	8805883a 	mov	r2,r17
    1f3c:	003f3f06 	br	1c3c <_realloc_r+0x16c>
    1f40:	a0c00217 	ldw	r3,8(r20)
    1f44:	88c00215 	stw	r3,8(r17)
    1f48:	a0c00317 	ldw	r3,12(r20)
    1f4c:	88c00315 	stw	r3,12(r17)
    1f50:	30801126 	beq	r6,r2,1f98 <_realloc_r+0x4c8>
    1f54:	88800404 	addi	r2,r17,16
    1f58:	a0c00404 	addi	r3,r20,16
    1f5c:	003f1906 	br	1bc4 <_realloc_r+0xf4>
    1f60:	893fff17 	ldw	r4,-4(r17)
    1f64:	00bfff04 	movi	r2,-4
    1f68:	a023883a 	mov	r17,r20
    1f6c:	2084703a 	and	r2,r4,r2
    1f70:	80a1883a 	add	r16,r16,r2
    1f74:	003f2406 	br	1c08 <_realloc_r+0x138>
    1f78:	a0800217 	ldw	r2,8(r20)
    1f7c:	98800415 	stw	r2,16(r19)
    1f80:	a0800317 	ldw	r2,12(r20)
    1f84:	98800515 	stw	r2,20(r19)
    1f88:	31000a26 	beq	r6,r4,1fb4 <_realloc_r+0x4e4>
    1f8c:	98800604 	addi	r2,r19,24
    1f90:	a5000404 	addi	r20,r20,16
    1f94:	003fa806 	br	1e38 <_realloc_r+0x368>
    1f98:	a1000417 	ldw	r4,16(r20)
    1f9c:	88800604 	addi	r2,r17,24
    1fa0:	a0c00604 	addi	r3,r20,24
    1fa4:	89000415 	stw	r4,16(r17)
    1fa8:	a1000517 	ldw	r4,20(r20)
    1fac:	89000515 	stw	r4,20(r17)
    1fb0:	003f0406 	br	1bc4 <_realloc_r+0xf4>
    1fb4:	a0c00417 	ldw	r3,16(r20)
    1fb8:	a5000604 	addi	r20,r20,24
    1fbc:	98800804 	addi	r2,r19,32
    1fc0:	98c00615 	stw	r3,24(r19)
    1fc4:	a0ffff17 	ldw	r3,-4(r20)
    1fc8:	98c00715 	stw	r3,28(r19)
    1fcc:	003f9a06 	br	1e38 <_realloc_r+0x368>
    1fd0:	8805883a 	mov	r2,r17
    1fd4:	003fc706 	br	1ef4 <_realloc_r+0x424>
    1fd8:	a00b883a 	mov	r5,r20
    1fdc:	8809883a 	mov	r4,r17
    1fe0:	000184c0 	call	184c <memmove>
    1fe4:	003fc906 	br	1f0c <_realloc_r+0x43c>
    1fe8:	a0800217 	ldw	r2,8(r20)
    1fec:	98800415 	stw	r2,16(r19)
    1ff0:	a0800317 	ldw	r2,12(r20)
    1ff4:	98800515 	stw	r2,20(r19)
    1ff8:	31000726 	beq	r6,r4,2018 <_realloc_r+0x548>
    1ffc:	98800604 	addi	r2,r19,24
    2000:	a5000404 	addi	r20,r20,16
    2004:	003fbb06 	br	1ef4 <_realloc_r+0x424>
    2008:	9009883a 	mov	r4,r18
    200c:	000367c0 	call	367c <__malloc_unlock>
    2010:	0005883a 	mov	r2,zero
    2014:	003f0906 	br	1c3c <_realloc_r+0x16c>
    2018:	a0c00417 	ldw	r3,16(r20)
    201c:	a5000604 	addi	r20,r20,24
    2020:	98800804 	addi	r2,r19,32
    2024:	98c00615 	stw	r3,24(r19)
    2028:	a0ffff17 	ldw	r3,-4(r20)
    202c:	98c00715 	stw	r3,28(r19)
    2030:	003fb006 	br	1ef4 <_realloc_r+0x424>

00002034 <_sbrk_r>:
    2034:	defffd04 	addi	sp,sp,-12
    2038:	dc000015 	stw	r16,0(sp)
    203c:	04000074 	movhi	r16,1
    2040:	dc400115 	stw	r17,4(sp)
    2044:	8423a404 	addi	r16,r16,-29040
    2048:	2023883a 	mov	r17,r4
    204c:	2809883a 	mov	r4,r5
    2050:	dfc00215 	stw	ra,8(sp)
    2054:	80000015 	stw	zero,0(r16)
    2058:	00038500 	call	3850 <sbrk>
    205c:	00ffffc4 	movi	r3,-1
    2060:	10c00526 	beq	r2,r3,2078 <_sbrk_r+0x44>
    2064:	dfc00217 	ldw	ra,8(sp)
    2068:	dc400117 	ldw	r17,4(sp)
    206c:	dc000017 	ldw	r16,0(sp)
    2070:	dec00304 	addi	sp,sp,12
    2074:	f800283a 	ret
    2078:	80c00017 	ldw	r3,0(r16)
    207c:	183ff926 	beq	r3,zero,2064 <_sbrk_r+0x30>
    2080:	88c00015 	stw	r3,0(r17)
    2084:	003ff706 	br	2064 <_sbrk_r+0x30>

00002088 <__sread>:
    2088:	defffe04 	addi	sp,sp,-8
    208c:	dc000015 	stw	r16,0(sp)
    2090:	2821883a 	mov	r16,r5
    2094:	2940038f 	ldh	r5,14(r5)
    2098:	dfc00115 	stw	ra,4(sp)
    209c:	0002dc80 	call	2dc8 <_read_r>
    20a0:	10000716 	blt	r2,zero,20c0 <__sread+0x38>
    20a4:	80c01417 	ldw	r3,80(r16)
    20a8:	1887883a 	add	r3,r3,r2
    20ac:	80c01415 	stw	r3,80(r16)
    20b0:	dfc00117 	ldw	ra,4(sp)
    20b4:	dc000017 	ldw	r16,0(sp)
    20b8:	dec00204 	addi	sp,sp,8
    20bc:	f800283a 	ret
    20c0:	80c0030b 	ldhu	r3,12(r16)
    20c4:	18fbffcc 	andi	r3,r3,61439
    20c8:	80c0030d 	sth	r3,12(r16)
    20cc:	dfc00117 	ldw	ra,4(sp)
    20d0:	dc000017 	ldw	r16,0(sp)
    20d4:	dec00204 	addi	sp,sp,8
    20d8:	f800283a 	ret

000020dc <__seofread>:
    20dc:	0005883a 	mov	r2,zero
    20e0:	f800283a 	ret

000020e4 <__swrite>:
    20e4:	2880030b 	ldhu	r2,12(r5)
    20e8:	defffb04 	addi	sp,sp,-20
    20ec:	dcc00315 	stw	r19,12(sp)
    20f0:	dc800215 	stw	r18,8(sp)
    20f4:	dc400115 	stw	r17,4(sp)
    20f8:	dc000015 	stw	r16,0(sp)
    20fc:	dfc00415 	stw	ra,16(sp)
    2100:	10c0400c 	andi	r3,r2,256
    2104:	2821883a 	mov	r16,r5
    2108:	2023883a 	mov	r17,r4
    210c:	3025883a 	mov	r18,r6
    2110:	3827883a 	mov	r19,r7
    2114:	18000526 	beq	r3,zero,212c <__swrite+0x48>
    2118:	2940038f 	ldh	r5,14(r5)
    211c:	01c00084 	movi	r7,2
    2120:	000d883a 	mov	r6,zero
    2124:	0002bac0 	call	2bac <_lseek_r>
    2128:	8080030b 	ldhu	r2,12(r16)
    212c:	8140038f 	ldh	r5,14(r16)
    2130:	10bbffcc 	andi	r2,r2,61439
    2134:	980f883a 	mov	r7,r19
    2138:	900d883a 	mov	r6,r18
    213c:	8809883a 	mov	r4,r17
    2140:	8080030d 	sth	r2,12(r16)
    2144:	dfc00417 	ldw	ra,16(sp)
    2148:	dcc00317 	ldw	r19,12(sp)
    214c:	dc800217 	ldw	r18,8(sp)
    2150:	dc400117 	ldw	r17,4(sp)
    2154:	dc000017 	ldw	r16,0(sp)
    2158:	dec00504 	addi	sp,sp,20
    215c:	00021c41 	jmpi	21c4 <_write_r>

00002160 <__sseek>:
    2160:	defffe04 	addi	sp,sp,-8
    2164:	dc000015 	stw	r16,0(sp)
    2168:	2821883a 	mov	r16,r5
    216c:	2940038f 	ldh	r5,14(r5)
    2170:	dfc00115 	stw	ra,4(sp)
    2174:	0002bac0 	call	2bac <_lseek_r>
    2178:	00ffffc4 	movi	r3,-1
    217c:	10c00826 	beq	r2,r3,21a0 <__sseek+0x40>
    2180:	80c0030b 	ldhu	r3,12(r16)
    2184:	80801415 	stw	r2,80(r16)
    2188:	18c40014 	ori	r3,r3,4096
    218c:	80c0030d 	sth	r3,12(r16)
    2190:	dfc00117 	ldw	ra,4(sp)
    2194:	dc000017 	ldw	r16,0(sp)
    2198:	dec00204 	addi	sp,sp,8
    219c:	f800283a 	ret
    21a0:	80c0030b 	ldhu	r3,12(r16)
    21a4:	18fbffcc 	andi	r3,r3,61439
    21a8:	80c0030d 	sth	r3,12(r16)
    21ac:	dfc00117 	ldw	ra,4(sp)
    21b0:	dc000017 	ldw	r16,0(sp)
    21b4:	dec00204 	addi	sp,sp,8
    21b8:	f800283a 	ret

000021bc <__sclose>:
    21bc:	2940038f 	ldh	r5,14(r5)
    21c0:	00023781 	jmpi	2378 <_close_r>

000021c4 <_write_r>:
    21c4:	defffd04 	addi	sp,sp,-12
    21c8:	2805883a 	mov	r2,r5
    21cc:	dc000015 	stw	r16,0(sp)
    21d0:	04000074 	movhi	r16,1
    21d4:	dc400115 	stw	r17,4(sp)
    21d8:	300b883a 	mov	r5,r6
    21dc:	8423a404 	addi	r16,r16,-29040
    21e0:	2023883a 	mov	r17,r4
    21e4:	380d883a 	mov	r6,r7
    21e8:	1009883a 	mov	r4,r2
    21ec:	dfc00215 	stw	ra,8(sp)
    21f0:	80000015 	stw	zero,0(r16)
    21f4:	00039500 	call	3950 <write>
    21f8:	00ffffc4 	movi	r3,-1
    21fc:	10c00526 	beq	r2,r3,2214 <_write_r+0x50>
    2200:	dfc00217 	ldw	ra,8(sp)
    2204:	dc400117 	ldw	r17,4(sp)
    2208:	dc000017 	ldw	r16,0(sp)
    220c:	dec00304 	addi	sp,sp,12
    2210:	f800283a 	ret
    2214:	80c00017 	ldw	r3,0(r16)
    2218:	183ff926 	beq	r3,zero,2200 <_write_r+0x3c>
    221c:	88c00015 	stw	r3,0(r17)
    2220:	003ff706 	br	2200 <_write_r+0x3c>

00002224 <__swsetup_r>:
    2224:	00800034 	movhi	r2,0
    2228:	defffd04 	addi	sp,sp,-12
    222c:	109cf904 	addi	r2,r2,29668
    2230:	dc400115 	stw	r17,4(sp)
    2234:	2023883a 	mov	r17,r4
    2238:	11000017 	ldw	r4,0(r2)
    223c:	dc000015 	stw	r16,0(sp)
    2240:	dfc00215 	stw	ra,8(sp)
    2244:	2821883a 	mov	r16,r5
    2248:	20000226 	beq	r4,zero,2254 <__swsetup_r+0x30>
    224c:	20800e17 	ldw	r2,56(r4)
    2250:	10003126 	beq	r2,zero,2318 <__swsetup_r+0xf4>
    2254:	8080030b 	ldhu	r2,12(r16)
    2258:	10c0020c 	andi	r3,r2,8
    225c:	1009883a 	mov	r4,r2
    2260:	18000f26 	beq	r3,zero,22a0 <__swsetup_r+0x7c>
    2264:	80c00417 	ldw	r3,16(r16)
    2268:	18001526 	beq	r3,zero,22c0 <__swsetup_r+0x9c>
    226c:	1100004c 	andi	r4,r2,1
    2270:	20001c1e 	bne	r4,zero,22e4 <__swsetup_r+0xc0>
    2274:	1080008c 	andi	r2,r2,2
    2278:	1000291e 	bne	r2,zero,2320 <__swsetup_r+0xfc>
    227c:	80800517 	ldw	r2,20(r16)
    2280:	80800215 	stw	r2,8(r16)
    2284:	18001c26 	beq	r3,zero,22f8 <__swsetup_r+0xd4>
    2288:	0005883a 	mov	r2,zero
    228c:	dfc00217 	ldw	ra,8(sp)
    2290:	dc400117 	ldw	r17,4(sp)
    2294:	dc000017 	ldw	r16,0(sp)
    2298:	dec00304 	addi	sp,sp,12
    229c:	f800283a 	ret
    22a0:	2080040c 	andi	r2,r4,16
    22a4:	10002e26 	beq	r2,zero,2360 <__swsetup_r+0x13c>
    22a8:	2080010c 	andi	r2,r4,4
    22ac:	10001e1e 	bne	r2,zero,2328 <__swsetup_r+0x104>
    22b0:	80c00417 	ldw	r3,16(r16)
    22b4:	20800214 	ori	r2,r4,8
    22b8:	8080030d 	sth	r2,12(r16)
    22bc:	183feb1e 	bne	r3,zero,226c <__swsetup_r+0x48>
    22c0:	1100a00c 	andi	r4,r2,640
    22c4:	01408004 	movi	r5,512
    22c8:	217fe826 	beq	r4,r5,226c <__swsetup_r+0x48>
    22cc:	800b883a 	mov	r5,r16
    22d0:	8809883a 	mov	r4,r17
    22d4:	0002c0c0 	call	2c0c <__smakebuf_r>
    22d8:	8080030b 	ldhu	r2,12(r16)
    22dc:	80c00417 	ldw	r3,16(r16)
    22e0:	003fe206 	br	226c <__swsetup_r+0x48>
    22e4:	80800517 	ldw	r2,20(r16)
    22e8:	80000215 	stw	zero,8(r16)
    22ec:	0085c83a 	sub	r2,zero,r2
    22f0:	80800615 	stw	r2,24(r16)
    22f4:	183fe41e 	bne	r3,zero,2288 <__swsetup_r+0x64>
    22f8:	80c0030b 	ldhu	r3,12(r16)
    22fc:	0005883a 	mov	r2,zero
    2300:	1900200c 	andi	r4,r3,128
    2304:	203fe126 	beq	r4,zero,228c <__swsetup_r+0x68>
    2308:	18c01014 	ori	r3,r3,64
    230c:	80c0030d 	sth	r3,12(r16)
    2310:	00bfffc4 	movi	r2,-1
    2314:	003fdd06 	br	228c <__swsetup_r+0x68>
    2318:	00007800 	call	780 <__sinit>
    231c:	003fcd06 	br	2254 <__swsetup_r+0x30>
    2320:	0005883a 	mov	r2,zero
    2324:	003fd606 	br	2280 <__swsetup_r+0x5c>
    2328:	81400c17 	ldw	r5,48(r16)
    232c:	28000626 	beq	r5,zero,2348 <__swsetup_r+0x124>
    2330:	80801004 	addi	r2,r16,64
    2334:	28800326 	beq	r5,r2,2344 <__swsetup_r+0x120>
    2338:	8809883a 	mov	r4,r17
    233c:	000289c0 	call	289c <_free_r>
    2340:	8100030b 	ldhu	r4,12(r16)
    2344:	80000c15 	stw	zero,48(r16)
    2348:	80c00417 	ldw	r3,16(r16)
    234c:	00bff6c4 	movi	r2,-37
    2350:	1108703a 	and	r4,r2,r4
    2354:	80000115 	stw	zero,4(r16)
    2358:	80c00015 	stw	r3,0(r16)
    235c:	003fd506 	br	22b4 <__swsetup_r+0x90>
    2360:	00800244 	movi	r2,9
    2364:	88800015 	stw	r2,0(r17)
    2368:	20801014 	ori	r2,r4,64
    236c:	8080030d 	sth	r2,12(r16)
    2370:	00bfffc4 	movi	r2,-1
    2374:	003fc506 	br	228c <__swsetup_r+0x68>

00002378 <_close_r>:
    2378:	defffd04 	addi	sp,sp,-12
    237c:	dc000015 	stw	r16,0(sp)
    2380:	04000074 	movhi	r16,1
    2384:	dc400115 	stw	r17,4(sp)
    2388:	8423a404 	addi	r16,r16,-29040
    238c:	2023883a 	mov	r17,r4
    2390:	2809883a 	mov	r4,r5
    2394:	dfc00215 	stw	ra,8(sp)
    2398:	80000015 	stw	zero,0(r16)
    239c:	00030dc0 	call	30dc <close>
    23a0:	00ffffc4 	movi	r3,-1
    23a4:	10c00526 	beq	r2,r3,23bc <_close_r+0x44>
    23a8:	dfc00217 	ldw	ra,8(sp)
    23ac:	dc400117 	ldw	r17,4(sp)
    23b0:	dc000017 	ldw	r16,0(sp)
    23b4:	dec00304 	addi	sp,sp,12
    23b8:	f800283a 	ret
    23bc:	80c00017 	ldw	r3,0(r16)
    23c0:	183ff926 	beq	r3,zero,23a8 <_close_r+0x30>
    23c4:	88c00015 	stw	r3,0(r17)
    23c8:	003ff706 	br	23a8 <_close_r+0x30>

000023cc <_fclose_r>:
    23cc:	28003926 	beq	r5,zero,24b4 <_fclose_r+0xe8>
    23d0:	defffc04 	addi	sp,sp,-16
    23d4:	dc400115 	stw	r17,4(sp)
    23d8:	dc000015 	stw	r16,0(sp)
    23dc:	dfc00315 	stw	ra,12(sp)
    23e0:	dc800215 	stw	r18,8(sp)
    23e4:	2023883a 	mov	r17,r4
    23e8:	2821883a 	mov	r16,r5
    23ec:	20000226 	beq	r4,zero,23f8 <_fclose_r+0x2c>
    23f0:	20800e17 	ldw	r2,56(r4)
    23f4:	10002726 	beq	r2,zero,2494 <_fclose_r+0xc8>
    23f8:	8080030f 	ldh	r2,12(r16)
    23fc:	1000071e 	bne	r2,zero,241c <_fclose_r+0x50>
    2400:	0005883a 	mov	r2,zero
    2404:	dfc00317 	ldw	ra,12(sp)
    2408:	dc800217 	ldw	r18,8(sp)
    240c:	dc400117 	ldw	r17,4(sp)
    2410:	dc000017 	ldw	r16,0(sp)
    2414:	dec00404 	addi	sp,sp,16
    2418:	f800283a 	ret
    241c:	800b883a 	mov	r5,r16
    2420:	8809883a 	mov	r4,r17
    2424:	00024d00 	call	24d0 <__sflush_r>
    2428:	1025883a 	mov	r18,r2
    242c:	80800b17 	ldw	r2,44(r16)
    2430:	10000426 	beq	r2,zero,2444 <_fclose_r+0x78>
    2434:	81400717 	ldw	r5,28(r16)
    2438:	8809883a 	mov	r4,r17
    243c:	103ee83a 	callr	r2
    2440:	10001616 	blt	r2,zero,249c <_fclose_r+0xd0>
    2444:	8080030b 	ldhu	r2,12(r16)
    2448:	1080200c 	andi	r2,r2,128
    244c:	1000151e 	bne	r2,zero,24a4 <_fclose_r+0xd8>
    2450:	81400c17 	ldw	r5,48(r16)
    2454:	28000526 	beq	r5,zero,246c <_fclose_r+0xa0>
    2458:	80801004 	addi	r2,r16,64
    245c:	28800226 	beq	r5,r2,2468 <_fclose_r+0x9c>
    2460:	8809883a 	mov	r4,r17
    2464:	000289c0 	call	289c <_free_r>
    2468:	80000c15 	stw	zero,48(r16)
    246c:	81401117 	ldw	r5,68(r16)
    2470:	28000326 	beq	r5,zero,2480 <_fclose_r+0xb4>
    2474:	8809883a 	mov	r4,r17
    2478:	000289c0 	call	289c <_free_r>
    247c:	80001115 	stw	zero,68(r16)
    2480:	00007900 	call	790 <__sfp_lock_acquire>
    2484:	8000030d 	sth	zero,12(r16)
    2488:	00007940 	call	794 <__sfp_lock_release>
    248c:	9005883a 	mov	r2,r18
    2490:	003fdc06 	br	2404 <_fclose_r+0x38>
    2494:	00007800 	call	780 <__sinit>
    2498:	003fd706 	br	23f8 <_fclose_r+0x2c>
    249c:	04bfffc4 	movi	r18,-1
    24a0:	003fe806 	br	2444 <_fclose_r+0x78>
    24a4:	81400417 	ldw	r5,16(r16)
    24a8:	8809883a 	mov	r4,r17
    24ac:	000289c0 	call	289c <_free_r>
    24b0:	003fe706 	br	2450 <_fclose_r+0x84>
    24b4:	0005883a 	mov	r2,zero
    24b8:	f800283a 	ret

000024bc <fclose>:
    24bc:	00800034 	movhi	r2,0
    24c0:	109cf904 	addi	r2,r2,29668
    24c4:	200b883a 	mov	r5,r4
    24c8:	11000017 	ldw	r4,0(r2)
    24cc:	00023cc1 	jmpi	23cc <_fclose_r>

000024d0 <__sflush_r>:
    24d0:	2880030b 	ldhu	r2,12(r5)
    24d4:	defffb04 	addi	sp,sp,-20
    24d8:	dcc00315 	stw	r19,12(sp)
    24dc:	dc400115 	stw	r17,4(sp)
    24e0:	dfc00415 	stw	ra,16(sp)
    24e4:	dc800215 	stw	r18,8(sp)
    24e8:	dc000015 	stw	r16,0(sp)
    24ec:	10c0020c 	andi	r3,r2,8
    24f0:	2823883a 	mov	r17,r5
    24f4:	2027883a 	mov	r19,r4
    24f8:	1800311e 	bne	r3,zero,25c0 <__sflush_r+0xf0>
    24fc:	28c00117 	ldw	r3,4(r5)
    2500:	10820014 	ori	r2,r2,2048
    2504:	2880030d 	sth	r2,12(r5)
    2508:	00c04b0e 	bge	zero,r3,2638 <__sflush_r+0x168>
    250c:	8a000a17 	ldw	r8,40(r17)
    2510:	40002326 	beq	r8,zero,25a0 <__sflush_r+0xd0>
    2514:	9c000017 	ldw	r16,0(r19)
    2518:	10c4000c 	andi	r3,r2,4096
    251c:	98000015 	stw	zero,0(r19)
    2520:	18004826 	beq	r3,zero,2644 <__sflush_r+0x174>
    2524:	89801417 	ldw	r6,80(r17)
    2528:	10c0010c 	andi	r3,r2,4
    252c:	18000626 	beq	r3,zero,2548 <__sflush_r+0x78>
    2530:	88c00117 	ldw	r3,4(r17)
    2534:	88800c17 	ldw	r2,48(r17)
    2538:	30cdc83a 	sub	r6,r6,r3
    253c:	10000226 	beq	r2,zero,2548 <__sflush_r+0x78>
    2540:	88800f17 	ldw	r2,60(r17)
    2544:	308dc83a 	sub	r6,r6,r2
    2548:	89400717 	ldw	r5,28(r17)
    254c:	000f883a 	mov	r7,zero
    2550:	9809883a 	mov	r4,r19
    2554:	403ee83a 	callr	r8
    2558:	00ffffc4 	movi	r3,-1
    255c:	10c04426 	beq	r2,r3,2670 <__sflush_r+0x1a0>
    2560:	88c0030b 	ldhu	r3,12(r17)
    2564:	89000417 	ldw	r4,16(r17)
    2568:	88000115 	stw	zero,4(r17)
    256c:	197dffcc 	andi	r5,r3,63487
    2570:	8940030d 	sth	r5,12(r17)
    2574:	89000015 	stw	r4,0(r17)
    2578:	18c4000c 	andi	r3,r3,4096
    257c:	18002c1e 	bne	r3,zero,2630 <__sflush_r+0x160>
    2580:	89400c17 	ldw	r5,48(r17)
    2584:	9c000015 	stw	r16,0(r19)
    2588:	28000526 	beq	r5,zero,25a0 <__sflush_r+0xd0>
    258c:	88801004 	addi	r2,r17,64
    2590:	28800226 	beq	r5,r2,259c <__sflush_r+0xcc>
    2594:	9809883a 	mov	r4,r19
    2598:	000289c0 	call	289c <_free_r>
    259c:	88000c15 	stw	zero,48(r17)
    25a0:	0005883a 	mov	r2,zero
    25a4:	dfc00417 	ldw	ra,16(sp)
    25a8:	dcc00317 	ldw	r19,12(sp)
    25ac:	dc800217 	ldw	r18,8(sp)
    25b0:	dc400117 	ldw	r17,4(sp)
    25b4:	dc000017 	ldw	r16,0(sp)
    25b8:	dec00504 	addi	sp,sp,20
    25bc:	f800283a 	ret
    25c0:	2c800417 	ldw	r18,16(r5)
    25c4:	903ff626 	beq	r18,zero,25a0 <__sflush_r+0xd0>
    25c8:	2c000017 	ldw	r16,0(r5)
    25cc:	108000cc 	andi	r2,r2,3
    25d0:	2c800015 	stw	r18,0(r5)
    25d4:	84a1c83a 	sub	r16,r16,r18
    25d8:	1000131e 	bne	r2,zero,2628 <__sflush_r+0x158>
    25dc:	28800517 	ldw	r2,20(r5)
    25e0:	88800215 	stw	r2,8(r17)
    25e4:	04000316 	blt	zero,r16,25f4 <__sflush_r+0x124>
    25e8:	003fed06 	br	25a0 <__sflush_r+0xd0>
    25ec:	90a5883a 	add	r18,r18,r2
    25f0:	043feb0e 	bge	zero,r16,25a0 <__sflush_r+0xd0>
    25f4:	88800917 	ldw	r2,36(r17)
    25f8:	89400717 	ldw	r5,28(r17)
    25fc:	800f883a 	mov	r7,r16
    2600:	900d883a 	mov	r6,r18
    2604:	9809883a 	mov	r4,r19
    2608:	103ee83a 	callr	r2
    260c:	80a1c83a 	sub	r16,r16,r2
    2610:	00bff616 	blt	zero,r2,25ec <__sflush_r+0x11c>
    2614:	88c0030b 	ldhu	r3,12(r17)
    2618:	00bfffc4 	movi	r2,-1
    261c:	18c01014 	ori	r3,r3,64
    2620:	88c0030d 	sth	r3,12(r17)
    2624:	003fdf06 	br	25a4 <__sflush_r+0xd4>
    2628:	0005883a 	mov	r2,zero
    262c:	003fec06 	br	25e0 <__sflush_r+0x110>
    2630:	88801415 	stw	r2,80(r17)
    2634:	003fd206 	br	2580 <__sflush_r+0xb0>
    2638:	28c00f17 	ldw	r3,60(r5)
    263c:	00ffb316 	blt	zero,r3,250c <__sflush_r+0x3c>
    2640:	003fd706 	br	25a0 <__sflush_r+0xd0>
    2644:	89400717 	ldw	r5,28(r17)
    2648:	000d883a 	mov	r6,zero
    264c:	01c00044 	movi	r7,1
    2650:	9809883a 	mov	r4,r19
    2654:	403ee83a 	callr	r8
    2658:	100d883a 	mov	r6,r2
    265c:	00bfffc4 	movi	r2,-1
    2660:	30801426 	beq	r6,r2,26b4 <__sflush_r+0x1e4>
    2664:	8880030b 	ldhu	r2,12(r17)
    2668:	8a000a17 	ldw	r8,40(r17)
    266c:	003fae06 	br	2528 <__sflush_r+0x58>
    2670:	98c00017 	ldw	r3,0(r19)
    2674:	183fba26 	beq	r3,zero,2560 <__sflush_r+0x90>
    2678:	01000744 	movi	r4,29
    267c:	19000626 	beq	r3,r4,2698 <__sflush_r+0x1c8>
    2680:	01000584 	movi	r4,22
    2684:	19000426 	beq	r3,r4,2698 <__sflush_r+0x1c8>
    2688:	88c0030b 	ldhu	r3,12(r17)
    268c:	18c01014 	ori	r3,r3,64
    2690:	88c0030d 	sth	r3,12(r17)
    2694:	003fc306 	br	25a4 <__sflush_r+0xd4>
    2698:	8880030b 	ldhu	r2,12(r17)
    269c:	88c00417 	ldw	r3,16(r17)
    26a0:	88000115 	stw	zero,4(r17)
    26a4:	10bdffcc 	andi	r2,r2,63487
    26a8:	8880030d 	sth	r2,12(r17)
    26ac:	88c00015 	stw	r3,0(r17)
    26b0:	003fb306 	br	2580 <__sflush_r+0xb0>
    26b4:	98800017 	ldw	r2,0(r19)
    26b8:	103fea26 	beq	r2,zero,2664 <__sflush_r+0x194>
    26bc:	00c00744 	movi	r3,29
    26c0:	10c00226 	beq	r2,r3,26cc <__sflush_r+0x1fc>
    26c4:	00c00584 	movi	r3,22
    26c8:	10c0031e 	bne	r2,r3,26d8 <__sflush_r+0x208>
    26cc:	9c000015 	stw	r16,0(r19)
    26d0:	0005883a 	mov	r2,zero
    26d4:	003fb306 	br	25a4 <__sflush_r+0xd4>
    26d8:	88c0030b 	ldhu	r3,12(r17)
    26dc:	3005883a 	mov	r2,r6
    26e0:	18c01014 	ori	r3,r3,64
    26e4:	88c0030d 	sth	r3,12(r17)
    26e8:	003fae06 	br	25a4 <__sflush_r+0xd4>

000026ec <_fflush_r>:
    26ec:	defffd04 	addi	sp,sp,-12
    26f0:	dc000115 	stw	r16,4(sp)
    26f4:	dfc00215 	stw	ra,8(sp)
    26f8:	2021883a 	mov	r16,r4
    26fc:	20000226 	beq	r4,zero,2708 <_fflush_r+0x1c>
    2700:	20800e17 	ldw	r2,56(r4)
    2704:	10000c26 	beq	r2,zero,2738 <_fflush_r+0x4c>
    2708:	2880030f 	ldh	r2,12(r5)
    270c:	1000051e 	bne	r2,zero,2724 <_fflush_r+0x38>
    2710:	0005883a 	mov	r2,zero
    2714:	dfc00217 	ldw	ra,8(sp)
    2718:	dc000117 	ldw	r16,4(sp)
    271c:	dec00304 	addi	sp,sp,12
    2720:	f800283a 	ret
    2724:	8009883a 	mov	r4,r16
    2728:	dfc00217 	ldw	ra,8(sp)
    272c:	dc000117 	ldw	r16,4(sp)
    2730:	dec00304 	addi	sp,sp,12
    2734:	00024d01 	jmpi	24d0 <__sflush_r>
    2738:	d9400015 	stw	r5,0(sp)
    273c:	00007800 	call	780 <__sinit>
    2740:	d9400017 	ldw	r5,0(sp)
    2744:	003ff006 	br	2708 <_fflush_r+0x1c>

00002748 <fflush>:
    2748:	20000526 	beq	r4,zero,2760 <fflush+0x18>
    274c:	00800034 	movhi	r2,0
    2750:	109cf904 	addi	r2,r2,29668
    2754:	200b883a 	mov	r5,r4
    2758:	11000017 	ldw	r4,0(r2)
    275c:	00026ec1 	jmpi	26ec <_fflush_r>
    2760:	00800034 	movhi	r2,0
    2764:	109cf804 	addi	r2,r2,29664
    2768:	11000017 	ldw	r4,0(r2)
    276c:	01400034 	movhi	r5,0
    2770:	2949bb04 	addi	r5,r5,9964
    2774:	0000d501 	jmpi	d50 <_fwalk_reent>

00002778 <_malloc_trim_r>:
    2778:	defffb04 	addi	sp,sp,-20
    277c:	dcc00315 	stw	r19,12(sp)
    2780:	04c00034 	movhi	r19,0
    2784:	dc800215 	stw	r18,8(sp)
    2788:	dc400115 	stw	r17,4(sp)
    278c:	dc000015 	stw	r16,0(sp)
    2790:	dfc00415 	stw	ra,16(sp)
    2794:	2821883a 	mov	r16,r5
    2798:	9cd77404 	addi	r19,r19,24016
    279c:	2025883a 	mov	r18,r4
    27a0:	00036580 	call	3658 <__malloc_lock>
    27a4:	98800217 	ldw	r2,8(r19)
    27a8:	14400117 	ldw	r17,4(r2)
    27ac:	00bfff04 	movi	r2,-4
    27b0:	88a2703a 	and	r17,r17,r2
    27b4:	8c21c83a 	sub	r16,r17,r16
    27b8:	8403fbc4 	addi	r16,r16,4079
    27bc:	8020d33a 	srli	r16,r16,12
    27c0:	0083ffc4 	movi	r2,4095
    27c4:	843fffc4 	addi	r16,r16,-1
    27c8:	8020933a 	slli	r16,r16,12
    27cc:	1400060e 	bge	r2,r16,27e8 <_malloc_trim_r+0x70>
    27d0:	000b883a 	mov	r5,zero
    27d4:	9009883a 	mov	r4,r18
    27d8:	00020340 	call	2034 <_sbrk_r>
    27dc:	98c00217 	ldw	r3,8(r19)
    27e0:	1c47883a 	add	r3,r3,r17
    27e4:	10c00a26 	beq	r2,r3,2810 <_malloc_trim_r+0x98>
    27e8:	9009883a 	mov	r4,r18
    27ec:	000367c0 	call	367c <__malloc_unlock>
    27f0:	0005883a 	mov	r2,zero
    27f4:	dfc00417 	ldw	ra,16(sp)
    27f8:	dcc00317 	ldw	r19,12(sp)
    27fc:	dc800217 	ldw	r18,8(sp)
    2800:	dc400117 	ldw	r17,4(sp)
    2804:	dc000017 	ldw	r16,0(sp)
    2808:	dec00504 	addi	sp,sp,20
    280c:	f800283a 	ret
    2810:	040bc83a 	sub	r5,zero,r16
    2814:	9009883a 	mov	r4,r18
    2818:	00020340 	call	2034 <_sbrk_r>
    281c:	00ffffc4 	movi	r3,-1
    2820:	10c00d26 	beq	r2,r3,2858 <_malloc_trim_r+0xe0>
    2824:	00c00074 	movhi	r3,1
    2828:	18e3ac04 	addi	r3,r3,-29008
    282c:	18800017 	ldw	r2,0(r3)
    2830:	99000217 	ldw	r4,8(r19)
    2834:	8c23c83a 	sub	r17,r17,r16
    2838:	8c400054 	ori	r17,r17,1
    283c:	1421c83a 	sub	r16,r2,r16
    2840:	24400115 	stw	r17,4(r4)
    2844:	9009883a 	mov	r4,r18
    2848:	1c000015 	stw	r16,0(r3)
    284c:	000367c0 	call	367c <__malloc_unlock>
    2850:	00800044 	movi	r2,1
    2854:	003fe706 	br	27f4 <_malloc_trim_r+0x7c>
    2858:	000b883a 	mov	r5,zero
    285c:	9009883a 	mov	r4,r18
    2860:	00020340 	call	2034 <_sbrk_r>
    2864:	99000217 	ldw	r4,8(r19)
    2868:	014003c4 	movi	r5,15
    286c:	1107c83a 	sub	r3,r2,r4
    2870:	28ffdd0e 	bge	r5,r3,27e8 <_malloc_trim_r+0x70>
    2874:	01400034 	movhi	r5,0
    2878:	295cfa04 	addi	r5,r5,29672
    287c:	29400017 	ldw	r5,0(r5)
    2880:	18c00054 	ori	r3,r3,1
    2884:	20c00115 	stw	r3,4(r4)
    2888:	00c00074 	movhi	r3,1
    288c:	1145c83a 	sub	r2,r2,r5
    2890:	18e3ac04 	addi	r3,r3,-29008
    2894:	18800015 	stw	r2,0(r3)
    2898:	003fd306 	br	27e8 <_malloc_trim_r+0x70>

0000289c <_free_r>:
    289c:	28004126 	beq	r5,zero,29a4 <_free_r+0x108>
    28a0:	defffd04 	addi	sp,sp,-12
    28a4:	dc400115 	stw	r17,4(sp)
    28a8:	dc000015 	stw	r16,0(sp)
    28ac:	2023883a 	mov	r17,r4
    28b0:	2821883a 	mov	r16,r5
    28b4:	dfc00215 	stw	ra,8(sp)
    28b8:	00036580 	call	3658 <__malloc_lock>
    28bc:	81ffff17 	ldw	r7,-4(r16)
    28c0:	00bfff84 	movi	r2,-2
    28c4:	01000034 	movhi	r4,0
    28c8:	81bffe04 	addi	r6,r16,-8
    28cc:	3884703a 	and	r2,r7,r2
    28d0:	21177404 	addi	r4,r4,24016
    28d4:	308b883a 	add	r5,r6,r2
    28d8:	2a400117 	ldw	r9,4(r5)
    28dc:	22000217 	ldw	r8,8(r4)
    28e0:	00ffff04 	movi	r3,-4
    28e4:	48c6703a 	and	r3,r9,r3
    28e8:	2a005726 	beq	r5,r8,2a48 <_free_r+0x1ac>
    28ec:	28c00115 	stw	r3,4(r5)
    28f0:	39c0004c 	andi	r7,r7,1
    28f4:	3800091e 	bne	r7,zero,291c <_free_r+0x80>
    28f8:	823ffe17 	ldw	r8,-8(r16)
    28fc:	22400204 	addi	r9,r4,8
    2900:	320dc83a 	sub	r6,r6,r8
    2904:	31c00217 	ldw	r7,8(r6)
    2908:	1205883a 	add	r2,r2,r8
    290c:	3a406526 	beq	r7,r9,2aa4 <_free_r+0x208>
    2910:	32000317 	ldw	r8,12(r6)
    2914:	3a000315 	stw	r8,12(r7)
    2918:	41c00215 	stw	r7,8(r8)
    291c:	28cf883a 	add	r7,r5,r3
    2920:	39c00117 	ldw	r7,4(r7)
    2924:	39c0004c 	andi	r7,r7,1
    2928:	38003a26 	beq	r7,zero,2a14 <_free_r+0x178>
    292c:	10c00054 	ori	r3,r2,1
    2930:	30c00115 	stw	r3,4(r6)
    2934:	3087883a 	add	r3,r6,r2
    2938:	18800015 	stw	r2,0(r3)
    293c:	00c07fc4 	movi	r3,511
    2940:	18801936 	bltu	r3,r2,29a8 <_free_r+0x10c>
    2944:	1004d0fa 	srli	r2,r2,3
    2948:	01c00044 	movi	r7,1
    294c:	21400117 	ldw	r5,4(r4)
    2950:	10c00044 	addi	r3,r2,1
    2954:	18c7883a 	add	r3,r3,r3
    2958:	1005d0ba 	srai	r2,r2,2
    295c:	18c7883a 	add	r3,r3,r3
    2960:	18c7883a 	add	r3,r3,r3
    2964:	1907883a 	add	r3,r3,r4
    2968:	3884983a 	sll	r2,r7,r2
    296c:	19c00017 	ldw	r7,0(r3)
    2970:	1a3ffe04 	addi	r8,r3,-8
    2974:	1144b03a 	or	r2,r2,r5
    2978:	32000315 	stw	r8,12(r6)
    297c:	31c00215 	stw	r7,8(r6)
    2980:	20800115 	stw	r2,4(r4)
    2984:	19800015 	stw	r6,0(r3)
    2988:	39800315 	stw	r6,12(r7)
    298c:	8809883a 	mov	r4,r17
    2990:	dfc00217 	ldw	ra,8(sp)
    2994:	dc400117 	ldw	r17,4(sp)
    2998:	dc000017 	ldw	r16,0(sp)
    299c:	dec00304 	addi	sp,sp,12
    29a0:	000367c1 	jmpi	367c <__malloc_unlock>
    29a4:	f800283a 	ret
    29a8:	100ad27a 	srli	r5,r2,9
    29ac:	00c00104 	movi	r3,4
    29b0:	19404a36 	bltu	r3,r5,2adc <_free_r+0x240>
    29b4:	100ad1ba 	srli	r5,r2,6
    29b8:	28c00e44 	addi	r3,r5,57
    29bc:	18c7883a 	add	r3,r3,r3
    29c0:	29400e04 	addi	r5,r5,56
    29c4:	18c7883a 	add	r3,r3,r3
    29c8:	18c7883a 	add	r3,r3,r3
    29cc:	1909883a 	add	r4,r3,r4
    29d0:	20c00017 	ldw	r3,0(r4)
    29d4:	01c00034 	movhi	r7,0
    29d8:	213ffe04 	addi	r4,r4,-8
    29dc:	39d77404 	addi	r7,r7,24016
    29e0:	20c04426 	beq	r4,r3,2af4 <_free_r+0x258>
    29e4:	01ffff04 	movi	r7,-4
    29e8:	19400117 	ldw	r5,4(r3)
    29ec:	29ca703a 	and	r5,r5,r7
    29f0:	1140022e 	bgeu	r2,r5,29fc <_free_r+0x160>
    29f4:	18c00217 	ldw	r3,8(r3)
    29f8:	20fffb1e 	bne	r4,r3,29e8 <_free_r+0x14c>
    29fc:	19000317 	ldw	r4,12(r3)
    2a00:	31000315 	stw	r4,12(r6)
    2a04:	30c00215 	stw	r3,8(r6)
    2a08:	21800215 	stw	r6,8(r4)
    2a0c:	19800315 	stw	r6,12(r3)
    2a10:	003fde06 	br	298c <_free_r+0xf0>
    2a14:	29c00217 	ldw	r7,8(r5)
    2a18:	10c5883a 	add	r2,r2,r3
    2a1c:	00c00034 	movhi	r3,0
    2a20:	18d77604 	addi	r3,r3,24024
    2a24:	38c03b26 	beq	r7,r3,2b14 <_free_r+0x278>
    2a28:	2a000317 	ldw	r8,12(r5)
    2a2c:	11400054 	ori	r5,r2,1
    2a30:	3087883a 	add	r3,r6,r2
    2a34:	3a000315 	stw	r8,12(r7)
    2a38:	41c00215 	stw	r7,8(r8)
    2a3c:	31400115 	stw	r5,4(r6)
    2a40:	18800015 	stw	r2,0(r3)
    2a44:	003fbd06 	br	293c <_free_r+0xa0>
    2a48:	39c0004c 	andi	r7,r7,1
    2a4c:	10c5883a 	add	r2,r2,r3
    2a50:	3800071e 	bne	r7,zero,2a70 <_free_r+0x1d4>
    2a54:	81fffe17 	ldw	r7,-8(r16)
    2a58:	31cdc83a 	sub	r6,r6,r7
    2a5c:	30c00317 	ldw	r3,12(r6)
    2a60:	31400217 	ldw	r5,8(r6)
    2a64:	11c5883a 	add	r2,r2,r7
    2a68:	28c00315 	stw	r3,12(r5)
    2a6c:	19400215 	stw	r5,8(r3)
    2a70:	10c00054 	ori	r3,r2,1
    2a74:	30c00115 	stw	r3,4(r6)
    2a78:	00c00034 	movhi	r3,0
    2a7c:	18dcfb04 	addi	r3,r3,29676
    2a80:	18c00017 	ldw	r3,0(r3)
    2a84:	21800215 	stw	r6,8(r4)
    2a88:	10ffc036 	bltu	r2,r3,298c <_free_r+0xf0>
    2a8c:	00800074 	movhi	r2,1
    2a90:	10a3a304 	addi	r2,r2,-29044
    2a94:	11400017 	ldw	r5,0(r2)
    2a98:	8809883a 	mov	r4,r17
    2a9c:	00027780 	call	2778 <_malloc_trim_r>
    2aa0:	003fba06 	br	298c <_free_r+0xf0>
    2aa4:	28c9883a 	add	r4,r5,r3
    2aa8:	21000117 	ldw	r4,4(r4)
    2aac:	2100004c 	andi	r4,r4,1
    2ab0:	2000391e 	bne	r4,zero,2b98 <_free_r+0x2fc>
    2ab4:	29c00217 	ldw	r7,8(r5)
    2ab8:	29000317 	ldw	r4,12(r5)
    2abc:	1885883a 	add	r2,r3,r2
    2ac0:	10c00054 	ori	r3,r2,1
    2ac4:	39000315 	stw	r4,12(r7)
    2ac8:	21c00215 	stw	r7,8(r4)
    2acc:	30c00115 	stw	r3,4(r6)
    2ad0:	308d883a 	add	r6,r6,r2
    2ad4:	30800015 	stw	r2,0(r6)
    2ad8:	003fac06 	br	298c <_free_r+0xf0>
    2adc:	00c00504 	movi	r3,20
    2ae0:	19401536 	bltu	r3,r5,2b38 <_free_r+0x29c>
    2ae4:	28c01704 	addi	r3,r5,92
    2ae8:	18c7883a 	add	r3,r3,r3
    2aec:	294016c4 	addi	r5,r5,91
    2af0:	003fb406 	br	29c4 <_free_r+0x128>
    2af4:	280bd0ba 	srai	r5,r5,2
    2af8:	00c00044 	movi	r3,1
    2afc:	38800117 	ldw	r2,4(r7)
    2b00:	194a983a 	sll	r5,r3,r5
    2b04:	2007883a 	mov	r3,r4
    2b08:	2884b03a 	or	r2,r5,r2
    2b0c:	38800115 	stw	r2,4(r7)
    2b10:	003fbb06 	br	2a00 <_free_r+0x164>
    2b14:	21800515 	stw	r6,20(r4)
    2b18:	21800415 	stw	r6,16(r4)
    2b1c:	10c00054 	ori	r3,r2,1
    2b20:	31c00315 	stw	r7,12(r6)
    2b24:	31c00215 	stw	r7,8(r6)
    2b28:	30c00115 	stw	r3,4(r6)
    2b2c:	308d883a 	add	r6,r6,r2
    2b30:	30800015 	stw	r2,0(r6)
    2b34:	003f9506 	br	298c <_free_r+0xf0>
    2b38:	00c01504 	movi	r3,84
    2b3c:	19400536 	bltu	r3,r5,2b54 <_free_r+0x2b8>
    2b40:	100ad33a 	srli	r5,r2,12
    2b44:	28c01bc4 	addi	r3,r5,111
    2b48:	18c7883a 	add	r3,r3,r3
    2b4c:	29401b84 	addi	r5,r5,110
    2b50:	003f9c06 	br	29c4 <_free_r+0x128>
    2b54:	00c05504 	movi	r3,340
    2b58:	19400536 	bltu	r3,r5,2b70 <_free_r+0x2d4>
    2b5c:	100ad3fa 	srli	r5,r2,15
    2b60:	28c01e04 	addi	r3,r5,120
    2b64:	18c7883a 	add	r3,r3,r3
    2b68:	29401dc4 	addi	r5,r5,119
    2b6c:	003f9506 	br	29c4 <_free_r+0x128>
    2b70:	00c15504 	movi	r3,1364
    2b74:	19400536 	bltu	r3,r5,2b8c <_free_r+0x2f0>
    2b78:	100ad4ba 	srli	r5,r2,18
    2b7c:	28c01f44 	addi	r3,r5,125
    2b80:	18c7883a 	add	r3,r3,r3
    2b84:	29401f04 	addi	r5,r5,124
    2b88:	003f8e06 	br	29c4 <_free_r+0x128>
    2b8c:	00c03f84 	movi	r3,254
    2b90:	01401f84 	movi	r5,126
    2b94:	003f8b06 	br	29c4 <_free_r+0x128>
    2b98:	10c00054 	ori	r3,r2,1
    2b9c:	30c00115 	stw	r3,4(r6)
    2ba0:	308d883a 	add	r6,r6,r2
    2ba4:	30800015 	stw	r2,0(r6)
    2ba8:	003f7806 	br	298c <_free_r+0xf0>

00002bac <_lseek_r>:
    2bac:	defffd04 	addi	sp,sp,-12
    2bb0:	2805883a 	mov	r2,r5
    2bb4:	dc000015 	stw	r16,0(sp)
    2bb8:	04000074 	movhi	r16,1
    2bbc:	dc400115 	stw	r17,4(sp)
    2bc0:	300b883a 	mov	r5,r6
    2bc4:	8423a404 	addi	r16,r16,-29040
    2bc8:	2023883a 	mov	r17,r4
    2bcc:	380d883a 	mov	r6,r7
    2bd0:	1009883a 	mov	r4,r2
    2bd4:	dfc00215 	stw	ra,8(sp)
    2bd8:	80000015 	stw	zero,0(r16)
    2bdc:	00035080 	call	3508 <lseek>
    2be0:	00ffffc4 	movi	r3,-1
    2be4:	10c00526 	beq	r2,r3,2bfc <_lseek_r+0x50>
    2be8:	dfc00217 	ldw	ra,8(sp)
    2bec:	dc400117 	ldw	r17,4(sp)
    2bf0:	dc000017 	ldw	r16,0(sp)
    2bf4:	dec00304 	addi	sp,sp,12
    2bf8:	f800283a 	ret
    2bfc:	80c00017 	ldw	r3,0(r16)
    2c00:	183ff926 	beq	r3,zero,2be8 <_lseek_r+0x3c>
    2c04:	88c00015 	stw	r3,0(r17)
    2c08:	003ff706 	br	2be8 <_lseek_r+0x3c>

00002c0c <__smakebuf_r>:
    2c0c:	2880030b 	ldhu	r2,12(r5)
    2c10:	10c0008c 	andi	r3,r2,2
    2c14:	1800411e 	bne	r3,zero,2d1c <__smakebuf_r+0x110>
    2c18:	deffec04 	addi	sp,sp,-80
    2c1c:	dc000f15 	stw	r16,60(sp)
    2c20:	2821883a 	mov	r16,r5
    2c24:	2940038f 	ldh	r5,14(r5)
    2c28:	dc401015 	stw	r17,64(sp)
    2c2c:	dfc01315 	stw	ra,76(sp)
    2c30:	dcc01215 	stw	r19,72(sp)
    2c34:	dc801115 	stw	r18,68(sp)
    2c38:	2023883a 	mov	r17,r4
    2c3c:	28001c16 	blt	r5,zero,2cb0 <__smakebuf_r+0xa4>
    2c40:	d80d883a 	mov	r6,sp
    2c44:	0002e280 	call	2e28 <_fstat_r>
    2c48:	10001816 	blt	r2,zero,2cac <__smakebuf_r+0xa0>
    2c4c:	d8800117 	ldw	r2,4(sp)
    2c50:	00e00014 	movui	r3,32768
    2c54:	10bc000c 	andi	r2,r2,61440
    2c58:	14c80020 	cmpeqi	r19,r2,8192
    2c5c:	10c03726 	beq	r2,r3,2d3c <__smakebuf_r+0x130>
    2c60:	80c0030b 	ldhu	r3,12(r16)
    2c64:	18c20014 	ori	r3,r3,2048
    2c68:	80c0030d 	sth	r3,12(r16)
    2c6c:	00c80004 	movi	r3,8192
    2c70:	10c0521e 	bne	r2,r3,2dbc <__smakebuf_r+0x1b0>
    2c74:	8140038f 	ldh	r5,14(r16)
    2c78:	8809883a 	mov	r4,r17
    2c7c:	0002e840 	call	2e84 <_isatty_r>
    2c80:	10004c26 	beq	r2,zero,2db4 <__smakebuf_r+0x1a8>
    2c84:	8080030b 	ldhu	r2,12(r16)
    2c88:	80c010c4 	addi	r3,r16,67
    2c8c:	80c00015 	stw	r3,0(r16)
    2c90:	10800054 	ori	r2,r2,1
    2c94:	8080030d 	sth	r2,12(r16)
    2c98:	00800044 	movi	r2,1
    2c9c:	80c00415 	stw	r3,16(r16)
    2ca0:	80800515 	stw	r2,20(r16)
    2ca4:	04810004 	movi	r18,1024
    2ca8:	00000706 	br	2cc8 <__smakebuf_r+0xbc>
    2cac:	8080030b 	ldhu	r2,12(r16)
    2cb0:	10c0200c 	andi	r3,r2,128
    2cb4:	18001f1e 	bne	r3,zero,2d34 <__smakebuf_r+0x128>
    2cb8:	04810004 	movi	r18,1024
    2cbc:	10820014 	ori	r2,r2,2048
    2cc0:	8080030d 	sth	r2,12(r16)
    2cc4:	0027883a 	mov	r19,zero
    2cc8:	900b883a 	mov	r5,r18
    2ccc:	8809883a 	mov	r4,r17
    2cd0:	0000e140 	call	e14 <_malloc_r>
    2cd4:	10002c26 	beq	r2,zero,2d88 <__smakebuf_r+0x17c>
    2cd8:	80c0030b 	ldhu	r3,12(r16)
    2cdc:	01000034 	movhi	r4,0
    2ce0:	21010e04 	addi	r4,r4,1080
    2ce4:	89000f15 	stw	r4,60(r17)
    2ce8:	18c02014 	ori	r3,r3,128
    2cec:	80c0030d 	sth	r3,12(r16)
    2cf0:	80800015 	stw	r2,0(r16)
    2cf4:	80800415 	stw	r2,16(r16)
    2cf8:	84800515 	stw	r18,20(r16)
    2cfc:	98001a1e 	bne	r19,zero,2d68 <__smakebuf_r+0x15c>
    2d00:	dfc01317 	ldw	ra,76(sp)
    2d04:	dcc01217 	ldw	r19,72(sp)
    2d08:	dc801117 	ldw	r18,68(sp)
    2d0c:	dc401017 	ldw	r17,64(sp)
    2d10:	dc000f17 	ldw	r16,60(sp)
    2d14:	dec01404 	addi	sp,sp,80
    2d18:	f800283a 	ret
    2d1c:	288010c4 	addi	r2,r5,67
    2d20:	28800015 	stw	r2,0(r5)
    2d24:	28800415 	stw	r2,16(r5)
    2d28:	00800044 	movi	r2,1
    2d2c:	28800515 	stw	r2,20(r5)
    2d30:	f800283a 	ret
    2d34:	04801004 	movi	r18,64
    2d38:	003fe006 	br	2cbc <__smakebuf_r+0xb0>
    2d3c:	81000a17 	ldw	r4,40(r16)
    2d40:	00c00034 	movhi	r3,0
    2d44:	18c85804 	addi	r3,r3,8544
    2d48:	20ffc51e 	bne	r4,r3,2c60 <__smakebuf_r+0x54>
    2d4c:	8080030b 	ldhu	r2,12(r16)
    2d50:	04810004 	movi	r18,1024
    2d54:	84801315 	stw	r18,76(r16)
    2d58:	1484b03a 	or	r2,r2,r18
    2d5c:	8080030d 	sth	r2,12(r16)
    2d60:	0027883a 	mov	r19,zero
    2d64:	003fd806 	br	2cc8 <__smakebuf_r+0xbc>
    2d68:	8140038f 	ldh	r5,14(r16)
    2d6c:	8809883a 	mov	r4,r17
    2d70:	0002e840 	call	2e84 <_isatty_r>
    2d74:	103fe226 	beq	r2,zero,2d00 <__smakebuf_r+0xf4>
    2d78:	8080030b 	ldhu	r2,12(r16)
    2d7c:	10800054 	ori	r2,r2,1
    2d80:	8080030d 	sth	r2,12(r16)
    2d84:	003fde06 	br	2d00 <__smakebuf_r+0xf4>
    2d88:	8080030b 	ldhu	r2,12(r16)
    2d8c:	10c0800c 	andi	r3,r2,512
    2d90:	183fdb1e 	bne	r3,zero,2d00 <__smakebuf_r+0xf4>
    2d94:	10800094 	ori	r2,r2,2
    2d98:	80c010c4 	addi	r3,r16,67
    2d9c:	8080030d 	sth	r2,12(r16)
    2da0:	00800044 	movi	r2,1
    2da4:	80c00015 	stw	r3,0(r16)
    2da8:	80c00415 	stw	r3,16(r16)
    2dac:	80800515 	stw	r2,20(r16)
    2db0:	003fd306 	br	2d00 <__smakebuf_r+0xf4>
    2db4:	04810004 	movi	r18,1024
    2db8:	003fc306 	br	2cc8 <__smakebuf_r+0xbc>
    2dbc:	0027883a 	mov	r19,zero
    2dc0:	04810004 	movi	r18,1024
    2dc4:	003fc006 	br	2cc8 <__smakebuf_r+0xbc>

00002dc8 <_read_r>:
    2dc8:	defffd04 	addi	sp,sp,-12
    2dcc:	2805883a 	mov	r2,r5
    2dd0:	dc000015 	stw	r16,0(sp)
    2dd4:	04000074 	movhi	r16,1
    2dd8:	dc400115 	stw	r17,4(sp)
    2ddc:	300b883a 	mov	r5,r6
    2de0:	8423a404 	addi	r16,r16,-29040
    2de4:	2023883a 	mov	r17,r4
    2de8:	380d883a 	mov	r6,r7
    2dec:	1009883a 	mov	r4,r2
    2df0:	dfc00215 	stw	ra,8(sp)
    2df4:	80000015 	stw	zero,0(r16)
    2df8:	00036f00 	call	36f0 <read>
    2dfc:	00ffffc4 	movi	r3,-1
    2e00:	10c00526 	beq	r2,r3,2e18 <_read_r+0x50>
    2e04:	dfc00217 	ldw	ra,8(sp)
    2e08:	dc400117 	ldw	r17,4(sp)
    2e0c:	dc000017 	ldw	r16,0(sp)
    2e10:	dec00304 	addi	sp,sp,12
    2e14:	f800283a 	ret
    2e18:	80c00017 	ldw	r3,0(r16)
    2e1c:	183ff926 	beq	r3,zero,2e04 <_read_r+0x3c>
    2e20:	88c00015 	stw	r3,0(r17)
    2e24:	003ff706 	br	2e04 <_read_r+0x3c>

00002e28 <_fstat_r>:
    2e28:	defffd04 	addi	sp,sp,-12
    2e2c:	2805883a 	mov	r2,r5
    2e30:	dc000015 	stw	r16,0(sp)
    2e34:	04000074 	movhi	r16,1
    2e38:	dc400115 	stw	r17,4(sp)
    2e3c:	8423a404 	addi	r16,r16,-29040
    2e40:	2023883a 	mov	r17,r4
    2e44:	300b883a 	mov	r5,r6
    2e48:	1009883a 	mov	r4,r2
    2e4c:	dfc00215 	stw	ra,8(sp)
    2e50:	80000015 	stw	zero,0(r16)
    2e54:	00032280 	call	3228 <fstat>
    2e58:	00ffffc4 	movi	r3,-1
    2e5c:	10c00526 	beq	r2,r3,2e74 <_fstat_r+0x4c>
    2e60:	dfc00217 	ldw	ra,8(sp)
    2e64:	dc400117 	ldw	r17,4(sp)
    2e68:	dc000017 	ldw	r16,0(sp)
    2e6c:	dec00304 	addi	sp,sp,12
    2e70:	f800283a 	ret
    2e74:	80c00017 	ldw	r3,0(r16)
    2e78:	183ff926 	beq	r3,zero,2e60 <_fstat_r+0x38>
    2e7c:	88c00015 	stw	r3,0(r17)
    2e80:	003ff706 	br	2e60 <_fstat_r+0x38>

00002e84 <_isatty_r>:
    2e84:	defffd04 	addi	sp,sp,-12
    2e88:	dc000015 	stw	r16,0(sp)
    2e8c:	04000074 	movhi	r16,1
    2e90:	dc400115 	stw	r17,4(sp)
    2e94:	8423a404 	addi	r16,r16,-29040
    2e98:	2023883a 	mov	r17,r4
    2e9c:	2809883a 	mov	r4,r5
    2ea0:	dfc00215 	stw	ra,8(sp)
    2ea4:	80000015 	stw	zero,0(r16)
    2ea8:	00033280 	call	3328 <isatty>
    2eac:	00ffffc4 	movi	r3,-1
    2eb0:	10c00526 	beq	r2,r3,2ec8 <_isatty_r+0x44>
    2eb4:	dfc00217 	ldw	ra,8(sp)
    2eb8:	dc400117 	ldw	r17,4(sp)
    2ebc:	dc000017 	ldw	r16,0(sp)
    2ec0:	dec00304 	addi	sp,sp,12
    2ec4:	f800283a 	ret
    2ec8:	80c00017 	ldw	r3,0(r16)
    2ecc:	183ff926 	beq	r3,zero,2eb4 <_isatty_r+0x30>
    2ed0:	88c00015 	stw	r3,0(r17)
    2ed4:	003ff706 	br	2eb4 <_isatty_r+0x30>

00002ed8 <__divsi3>:
    2ed8:	20001b16 	blt	r4,zero,2f48 <__divsi3+0x70>
    2edc:	000f883a 	mov	r7,zero
    2ee0:	28001616 	blt	r5,zero,2f3c <__divsi3+0x64>
    2ee4:	200d883a 	mov	r6,r4
    2ee8:	29001a2e 	bgeu	r5,r4,2f54 <__divsi3+0x7c>
    2eec:	00800804 	movi	r2,32
    2ef0:	00c00044 	movi	r3,1
    2ef4:	00000106 	br	2efc <__divsi3+0x24>
    2ef8:	10000d26 	beq	r2,zero,2f30 <__divsi3+0x58>
    2efc:	294b883a 	add	r5,r5,r5
    2f00:	10bfffc4 	addi	r2,r2,-1
    2f04:	18c7883a 	add	r3,r3,r3
    2f08:	293ffb36 	bltu	r5,r4,2ef8 <__divsi3+0x20>
    2f0c:	0005883a 	mov	r2,zero
    2f10:	18000726 	beq	r3,zero,2f30 <__divsi3+0x58>
    2f14:	0005883a 	mov	r2,zero
    2f18:	31400236 	bltu	r6,r5,2f24 <__divsi3+0x4c>
    2f1c:	314dc83a 	sub	r6,r6,r5
    2f20:	10c4b03a 	or	r2,r2,r3
    2f24:	1806d07a 	srli	r3,r3,1
    2f28:	280ad07a 	srli	r5,r5,1
    2f2c:	183ffa1e 	bne	r3,zero,2f18 <__divsi3+0x40>
    2f30:	38000126 	beq	r7,zero,2f38 <__divsi3+0x60>
    2f34:	0085c83a 	sub	r2,zero,r2
    2f38:	f800283a 	ret
    2f3c:	014bc83a 	sub	r5,zero,r5
    2f40:	39c0005c 	xori	r7,r7,1
    2f44:	003fe706 	br	2ee4 <__divsi3+0xc>
    2f48:	0109c83a 	sub	r4,zero,r4
    2f4c:	01c00044 	movi	r7,1
    2f50:	003fe306 	br	2ee0 <__divsi3+0x8>
    2f54:	00c00044 	movi	r3,1
    2f58:	003fee06 	br	2f14 <__divsi3+0x3c>

00002f5c <__modsi3>:
    2f5c:	20001716 	blt	r4,zero,2fbc <__modsi3+0x60>
    2f60:	000f883a 	mov	r7,zero
    2f64:	2005883a 	mov	r2,r4
    2f68:	28001216 	blt	r5,zero,2fb4 <__modsi3+0x58>
    2f6c:	2900162e 	bgeu	r5,r4,2fc8 <__modsi3+0x6c>
    2f70:	01800804 	movi	r6,32
    2f74:	00c00044 	movi	r3,1
    2f78:	00000106 	br	2f80 <__modsi3+0x24>
    2f7c:	30000a26 	beq	r6,zero,2fa8 <__modsi3+0x4c>
    2f80:	294b883a 	add	r5,r5,r5
    2f84:	31bfffc4 	addi	r6,r6,-1
    2f88:	18c7883a 	add	r3,r3,r3
    2f8c:	293ffb36 	bltu	r5,r4,2f7c <__modsi3+0x20>
    2f90:	18000526 	beq	r3,zero,2fa8 <__modsi3+0x4c>
    2f94:	1806d07a 	srli	r3,r3,1
    2f98:	11400136 	bltu	r2,r5,2fa0 <__modsi3+0x44>
    2f9c:	1145c83a 	sub	r2,r2,r5
    2fa0:	280ad07a 	srli	r5,r5,1
    2fa4:	183ffb1e 	bne	r3,zero,2f94 <__modsi3+0x38>
    2fa8:	38000126 	beq	r7,zero,2fb0 <__modsi3+0x54>
    2fac:	0085c83a 	sub	r2,zero,r2
    2fb0:	f800283a 	ret
    2fb4:	014bc83a 	sub	r5,zero,r5
    2fb8:	003fec06 	br	2f6c <__modsi3+0x10>
    2fbc:	0109c83a 	sub	r4,zero,r4
    2fc0:	01c00044 	movi	r7,1
    2fc4:	003fe706 	br	2f64 <__modsi3+0x8>
    2fc8:	00c00044 	movi	r3,1
    2fcc:	003ff106 	br	2f94 <__modsi3+0x38>

00002fd0 <__udivsi3>:
    2fd0:	200d883a 	mov	r6,r4
    2fd4:	2900152e 	bgeu	r5,r4,302c <__udivsi3+0x5c>
    2fd8:	28001416 	blt	r5,zero,302c <__udivsi3+0x5c>
    2fdc:	00800804 	movi	r2,32
    2fe0:	00c00044 	movi	r3,1
    2fe4:	00000206 	br	2ff0 <__udivsi3+0x20>
    2fe8:	10000e26 	beq	r2,zero,3024 <__udivsi3+0x54>
    2fec:	28000516 	blt	r5,zero,3004 <__udivsi3+0x34>
    2ff0:	294b883a 	add	r5,r5,r5
    2ff4:	10bfffc4 	addi	r2,r2,-1
    2ff8:	18c7883a 	add	r3,r3,r3
    2ffc:	293ffa36 	bltu	r5,r4,2fe8 <__udivsi3+0x18>
    3000:	18000826 	beq	r3,zero,3024 <__udivsi3+0x54>
    3004:	0005883a 	mov	r2,zero
    3008:	31400236 	bltu	r6,r5,3014 <__udivsi3+0x44>
    300c:	314dc83a 	sub	r6,r6,r5
    3010:	10c4b03a 	or	r2,r2,r3
    3014:	1806d07a 	srli	r3,r3,1
    3018:	280ad07a 	srli	r5,r5,1
    301c:	183ffa1e 	bne	r3,zero,3008 <__udivsi3+0x38>
    3020:	f800283a 	ret
    3024:	0005883a 	mov	r2,zero
    3028:	f800283a 	ret
    302c:	00c00044 	movi	r3,1
    3030:	003ff406 	br	3004 <__udivsi3+0x34>

00003034 <__umodsi3>:
    3034:	2005883a 	mov	r2,r4
    3038:	2900122e 	bgeu	r5,r4,3084 <__umodsi3+0x50>
    303c:	28001116 	blt	r5,zero,3084 <__umodsi3+0x50>
    3040:	01800804 	movi	r6,32
    3044:	00c00044 	movi	r3,1
    3048:	00000206 	br	3054 <__umodsi3+0x20>
    304c:	30000c26 	beq	r6,zero,3080 <__umodsi3+0x4c>
    3050:	28000516 	blt	r5,zero,3068 <__umodsi3+0x34>
    3054:	294b883a 	add	r5,r5,r5
    3058:	31bfffc4 	addi	r6,r6,-1
    305c:	18c7883a 	add	r3,r3,r3
    3060:	293ffa36 	bltu	r5,r4,304c <__umodsi3+0x18>
    3064:	18000626 	beq	r3,zero,3080 <__umodsi3+0x4c>
    3068:	1806d07a 	srli	r3,r3,1
    306c:	11400136 	bltu	r2,r5,3074 <__umodsi3+0x40>
    3070:	1145c83a 	sub	r2,r2,r5
    3074:	280ad07a 	srli	r5,r5,1
    3078:	183ffb1e 	bne	r3,zero,3068 <__umodsi3+0x34>
    307c:	f800283a 	ret
    3080:	f800283a 	ret
    3084:	00c00044 	movi	r3,1
    3088:	003ff706 	br	3068 <__umodsi3+0x34>

0000308c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    308c:	defffe04 	addi	sp,sp,-8
    3090:	dfc00115 	stw	ra,4(sp)
    3094:	df000015 	stw	fp,0(sp)
    3098:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    309c:	00800034 	movhi	r2,0
    30a0:	109d0104 	addi	r2,r2,29700
    30a4:	10800017 	ldw	r2,0(r2)
    30a8:	10000526 	beq	r2,zero,30c0 <alt_get_errno+0x34>
    30ac:	00800034 	movhi	r2,0
    30b0:	109d0104 	addi	r2,r2,29700
    30b4:	10800017 	ldw	r2,0(r2)
    30b8:	103ee83a 	callr	r2
    30bc:	00000206 	br	30c8 <alt_get_errno+0x3c>
    30c0:	00800074 	movhi	r2,1
    30c4:	10a3a404 	addi	r2,r2,-29040
}
    30c8:	e037883a 	mov	sp,fp
    30cc:	dfc00117 	ldw	ra,4(sp)
    30d0:	df000017 	ldw	fp,0(sp)
    30d4:	dec00204 	addi	sp,sp,8
    30d8:	f800283a 	ret

000030dc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    30dc:	defffb04 	addi	sp,sp,-20
    30e0:	dfc00415 	stw	ra,16(sp)
    30e4:	df000315 	stw	fp,12(sp)
    30e8:	df000304 	addi	fp,sp,12
    30ec:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    30f0:	e0bfff17 	ldw	r2,-4(fp)
    30f4:	10000616 	blt	r2,zero,3110 <close+0x34>
    30f8:	e0bfff17 	ldw	r2,-4(fp)
    30fc:	10c00324 	muli	r3,r2,12
    3100:	00800034 	movhi	r2,0
    3104:	10988004 	addi	r2,r2,25088
    3108:	1885883a 	add	r2,r3,r2
    310c:	00000106 	br	3114 <close+0x38>
    3110:	0005883a 	mov	r2,zero
    3114:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    3118:	e0bffd17 	ldw	r2,-12(fp)
    311c:	10001926 	beq	r2,zero,3184 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    3120:	e0bffd17 	ldw	r2,-12(fp)
    3124:	10800017 	ldw	r2,0(r2)
    3128:	10800417 	ldw	r2,16(r2)
    312c:	10000626 	beq	r2,zero,3148 <close+0x6c>
    3130:	e0bffd17 	ldw	r2,-12(fp)
    3134:	10800017 	ldw	r2,0(r2)
    3138:	10800417 	ldw	r2,16(r2)
    313c:	e13ffd17 	ldw	r4,-12(fp)
    3140:	103ee83a 	callr	r2
    3144:	00000106 	br	314c <close+0x70>
    3148:	0005883a 	mov	r2,zero
    314c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    3150:	e13fff17 	ldw	r4,-4(fp)
    3154:	00037ec0 	call	37ec <alt_release_fd>
    if (rval < 0)
    3158:	e0bffe17 	ldw	r2,-8(fp)
    315c:	1000070e 	bge	r2,zero,317c <close+0xa0>
    {
      ALT_ERRNO = -rval;
    3160:	000308c0 	call	308c <alt_get_errno>
    3164:	1007883a 	mov	r3,r2
    3168:	e0bffe17 	ldw	r2,-8(fp)
    316c:	0085c83a 	sub	r2,zero,r2
    3170:	18800015 	stw	r2,0(r3)
      return -1;
    3174:	00bfffc4 	movi	r2,-1
    3178:	00000706 	br	3198 <close+0xbc>
    }
    return 0;
    317c:	0005883a 	mov	r2,zero
    3180:	00000506 	br	3198 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3184:	000308c0 	call	308c <alt_get_errno>
    3188:	1007883a 	mov	r3,r2
    318c:	00801444 	movi	r2,81
    3190:	18800015 	stw	r2,0(r3)
    return -1;
    3194:	00bfffc4 	movi	r2,-1
  }
}
    3198:	e037883a 	mov	sp,fp
    319c:	dfc00117 	ldw	ra,4(sp)
    31a0:	df000017 	ldw	fp,0(sp)
    31a4:	dec00204 	addi	sp,sp,8
    31a8:	f800283a 	ret

000031ac <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    31ac:	defffc04 	addi	sp,sp,-16
    31b0:	df000315 	stw	fp,12(sp)
    31b4:	df000304 	addi	fp,sp,12
    31b8:	e13ffd15 	stw	r4,-12(fp)
    31bc:	e17ffe15 	stw	r5,-8(fp)
    31c0:	e1bfff15 	stw	r6,-4(fp)
  return len;
    31c4:	e0bfff17 	ldw	r2,-4(fp)
}
    31c8:	e037883a 	mov	sp,fp
    31cc:	df000017 	ldw	fp,0(sp)
    31d0:	dec00104 	addi	sp,sp,4
    31d4:	f800283a 	ret

000031d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    31d8:	defffe04 	addi	sp,sp,-8
    31dc:	dfc00115 	stw	ra,4(sp)
    31e0:	df000015 	stw	fp,0(sp)
    31e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    31e8:	00800034 	movhi	r2,0
    31ec:	109d0104 	addi	r2,r2,29700
    31f0:	10800017 	ldw	r2,0(r2)
    31f4:	10000526 	beq	r2,zero,320c <alt_get_errno+0x34>
    31f8:	00800034 	movhi	r2,0
    31fc:	109d0104 	addi	r2,r2,29700
    3200:	10800017 	ldw	r2,0(r2)
    3204:	103ee83a 	callr	r2
    3208:	00000206 	br	3214 <alt_get_errno+0x3c>
    320c:	00800074 	movhi	r2,1
    3210:	10a3a404 	addi	r2,r2,-29040
}
    3214:	e037883a 	mov	sp,fp
    3218:	dfc00117 	ldw	ra,4(sp)
    321c:	df000017 	ldw	fp,0(sp)
    3220:	dec00204 	addi	sp,sp,8
    3224:	f800283a 	ret

00003228 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    3228:	defffb04 	addi	sp,sp,-20
    322c:	dfc00415 	stw	ra,16(sp)
    3230:	df000315 	stw	fp,12(sp)
    3234:	df000304 	addi	fp,sp,12
    3238:	e13ffe15 	stw	r4,-8(fp)
    323c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3240:	e0bffe17 	ldw	r2,-8(fp)
    3244:	10000616 	blt	r2,zero,3260 <fstat+0x38>
    3248:	e0bffe17 	ldw	r2,-8(fp)
    324c:	10c00324 	muli	r3,r2,12
    3250:	00800034 	movhi	r2,0
    3254:	10988004 	addi	r2,r2,25088
    3258:	1885883a 	add	r2,r3,r2
    325c:	00000106 	br	3264 <fstat+0x3c>
    3260:	0005883a 	mov	r2,zero
    3264:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    3268:	e0bffd17 	ldw	r2,-12(fp)
    326c:	10001026 	beq	r2,zero,32b0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    3270:	e0bffd17 	ldw	r2,-12(fp)
    3274:	10800017 	ldw	r2,0(r2)
    3278:	10800817 	ldw	r2,32(r2)
    327c:	10000726 	beq	r2,zero,329c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    3280:	e0bffd17 	ldw	r2,-12(fp)
    3284:	10800017 	ldw	r2,0(r2)
    3288:	10800817 	ldw	r2,32(r2)
    328c:	e17fff17 	ldw	r5,-4(fp)
    3290:	e13ffd17 	ldw	r4,-12(fp)
    3294:	103ee83a 	callr	r2
    3298:	00000a06 	br	32c4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    329c:	e0bfff17 	ldw	r2,-4(fp)
    32a0:	00c80004 	movi	r3,8192
    32a4:	10c00115 	stw	r3,4(r2)
      return 0;
    32a8:	0005883a 	mov	r2,zero
    32ac:	00000506 	br	32c4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    32b0:	00031d80 	call	31d8 <alt_get_errno>
    32b4:	1007883a 	mov	r3,r2
    32b8:	00801444 	movi	r2,81
    32bc:	18800015 	stw	r2,0(r3)
    return -1;
    32c0:	00bfffc4 	movi	r2,-1
  }
}
    32c4:	e037883a 	mov	sp,fp
    32c8:	dfc00117 	ldw	ra,4(sp)
    32cc:	df000017 	ldw	fp,0(sp)
    32d0:	dec00204 	addi	sp,sp,8
    32d4:	f800283a 	ret

000032d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    32d8:	defffe04 	addi	sp,sp,-8
    32dc:	dfc00115 	stw	ra,4(sp)
    32e0:	df000015 	stw	fp,0(sp)
    32e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    32e8:	00800034 	movhi	r2,0
    32ec:	109d0104 	addi	r2,r2,29700
    32f0:	10800017 	ldw	r2,0(r2)
    32f4:	10000526 	beq	r2,zero,330c <alt_get_errno+0x34>
    32f8:	00800034 	movhi	r2,0
    32fc:	109d0104 	addi	r2,r2,29700
    3300:	10800017 	ldw	r2,0(r2)
    3304:	103ee83a 	callr	r2
    3308:	00000206 	br	3314 <alt_get_errno+0x3c>
    330c:	00800074 	movhi	r2,1
    3310:	10a3a404 	addi	r2,r2,-29040
}
    3314:	e037883a 	mov	sp,fp
    3318:	dfc00117 	ldw	ra,4(sp)
    331c:	df000017 	ldw	fp,0(sp)
    3320:	dec00204 	addi	sp,sp,8
    3324:	f800283a 	ret

00003328 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    3328:	deffed04 	addi	sp,sp,-76
    332c:	dfc01215 	stw	ra,72(sp)
    3330:	df001115 	stw	fp,68(sp)
    3334:	df001104 	addi	fp,sp,68
    3338:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    333c:	e0bfff17 	ldw	r2,-4(fp)
    3340:	10000616 	blt	r2,zero,335c <isatty+0x34>
    3344:	e0bfff17 	ldw	r2,-4(fp)
    3348:	10c00324 	muli	r3,r2,12
    334c:	00800034 	movhi	r2,0
    3350:	10988004 	addi	r2,r2,25088
    3354:	1885883a 	add	r2,r3,r2
    3358:	00000106 	br	3360 <isatty+0x38>
    335c:	0005883a 	mov	r2,zero
    3360:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    3364:	e0bfef17 	ldw	r2,-68(fp)
    3368:	10000e26 	beq	r2,zero,33a4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    336c:	e0bfef17 	ldw	r2,-68(fp)
    3370:	10800017 	ldw	r2,0(r2)
    3374:	10800817 	ldw	r2,32(r2)
    3378:	1000021e 	bne	r2,zero,3384 <isatty+0x5c>
    {
      return 1;
    337c:	00800044 	movi	r2,1
    3380:	00000d06 	br	33b8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    3384:	e0bff004 	addi	r2,fp,-64
    3388:	100b883a 	mov	r5,r2
    338c:	e13fff17 	ldw	r4,-4(fp)
    3390:	00032280 	call	3228 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    3394:	e0bff117 	ldw	r2,-60(fp)
    3398:	10880020 	cmpeqi	r2,r2,8192
    339c:	10803fcc 	andi	r2,r2,255
    33a0:	00000506 	br	33b8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    33a4:	00032d80 	call	32d8 <alt_get_errno>
    33a8:	1007883a 	mov	r3,r2
    33ac:	00801444 	movi	r2,81
    33b0:	18800015 	stw	r2,0(r3)
    return 0;
    33b4:	0005883a 	mov	r2,zero
  }
}
    33b8:	e037883a 	mov	sp,fp
    33bc:	dfc00117 	ldw	ra,4(sp)
    33c0:	df000017 	ldw	fp,0(sp)
    33c4:	dec00204 	addi	sp,sp,8
    33c8:	f800283a 	ret

000033cc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    33cc:	defffc04 	addi	sp,sp,-16
    33d0:	df000315 	stw	fp,12(sp)
    33d4:	df000304 	addi	fp,sp,12
    33d8:	e13ffd15 	stw	r4,-12(fp)
    33dc:	e17ffe15 	stw	r5,-8(fp)
    33e0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    33e4:	e0fffe17 	ldw	r3,-8(fp)
    33e8:	e0bffd17 	ldw	r2,-12(fp)
    33ec:	18800c26 	beq	r3,r2,3420 <alt_load_section+0x54>
  {
    while( to != end )
    33f0:	00000806 	br	3414 <alt_load_section+0x48>
    {
      *to++ = *from++;
    33f4:	e0bffe17 	ldw	r2,-8(fp)
    33f8:	10c00104 	addi	r3,r2,4
    33fc:	e0fffe15 	stw	r3,-8(fp)
    3400:	e0fffd17 	ldw	r3,-12(fp)
    3404:	19000104 	addi	r4,r3,4
    3408:	e13ffd15 	stw	r4,-12(fp)
    340c:	18c00017 	ldw	r3,0(r3)
    3410:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    3414:	e0fffe17 	ldw	r3,-8(fp)
    3418:	e0bfff17 	ldw	r2,-4(fp)
    341c:	18bff51e 	bne	r3,r2,33f4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    3420:	0001883a 	nop
    3424:	e037883a 	mov	sp,fp
    3428:	df000017 	ldw	fp,0(sp)
    342c:	dec00104 	addi	sp,sp,4
    3430:	f800283a 	ret

00003434 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    3434:	defffe04 	addi	sp,sp,-8
    3438:	dfc00115 	stw	ra,4(sp)
    343c:	df000015 	stw	fp,0(sp)
    3440:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    3444:	01800034 	movhi	r6,0
    3448:	319d0604 	addi	r6,r6,29720
    344c:	01400034 	movhi	r5,0
    3450:	29566b04 	addi	r5,r5,22956
    3454:	01000034 	movhi	r4,0
    3458:	211d0604 	addi	r4,r4,29720
    345c:	00033cc0 	call	33cc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    3460:	01800034 	movhi	r6,0
    3464:	31809104 	addi	r6,r6,580
    3468:	01400034 	movhi	r5,0
    346c:	29400804 	addi	r5,r5,32
    3470:	01000034 	movhi	r4,0
    3474:	21000804 	addi	r4,r4,32
    3478:	00033cc0 	call	33cc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    347c:	01800034 	movhi	r6,0
    3480:	31966b04 	addi	r6,r6,22956
    3484:	01400034 	movhi	r5,0
    3488:	29565b04 	addi	r5,r5,22892
    348c:	01000034 	movhi	r4,0
    3490:	21165b04 	addi	r4,r4,22892
    3494:	00033cc0 	call	33cc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    3498:	00047d80 	call	47d8 <alt_dcache_flush_all>
  alt_icache_flush_all();
    349c:	00049d40 	call	49d4 <alt_icache_flush_all>
}
    34a0:	0001883a 	nop
    34a4:	e037883a 	mov	sp,fp
    34a8:	dfc00117 	ldw	ra,4(sp)
    34ac:	df000017 	ldw	fp,0(sp)
    34b0:	dec00204 	addi	sp,sp,8
    34b4:	f800283a 	ret

000034b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    34b8:	defffe04 	addi	sp,sp,-8
    34bc:	dfc00115 	stw	ra,4(sp)
    34c0:	df000015 	stw	fp,0(sp)
    34c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    34c8:	00800034 	movhi	r2,0
    34cc:	109d0104 	addi	r2,r2,29700
    34d0:	10800017 	ldw	r2,0(r2)
    34d4:	10000526 	beq	r2,zero,34ec <alt_get_errno+0x34>
    34d8:	00800034 	movhi	r2,0
    34dc:	109d0104 	addi	r2,r2,29700
    34e0:	10800017 	ldw	r2,0(r2)
    34e4:	103ee83a 	callr	r2
    34e8:	00000206 	br	34f4 <alt_get_errno+0x3c>
    34ec:	00800074 	movhi	r2,1
    34f0:	10a3a404 	addi	r2,r2,-29040
}
    34f4:	e037883a 	mov	sp,fp
    34f8:	dfc00117 	ldw	ra,4(sp)
    34fc:	df000017 	ldw	fp,0(sp)
    3500:	dec00204 	addi	sp,sp,8
    3504:	f800283a 	ret

00003508 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    3508:	defff904 	addi	sp,sp,-28
    350c:	dfc00615 	stw	ra,24(sp)
    3510:	df000515 	stw	fp,20(sp)
    3514:	df000504 	addi	fp,sp,20
    3518:	e13ffd15 	stw	r4,-12(fp)
    351c:	e17ffe15 	stw	r5,-8(fp)
    3520:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    3524:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3528:	e0bffd17 	ldw	r2,-12(fp)
    352c:	10000616 	blt	r2,zero,3548 <lseek+0x40>
    3530:	e0bffd17 	ldw	r2,-12(fp)
    3534:	10c00324 	muli	r3,r2,12
    3538:	00800034 	movhi	r2,0
    353c:	10988004 	addi	r2,r2,25088
    3540:	1885883a 	add	r2,r3,r2
    3544:	00000106 	br	354c <lseek+0x44>
    3548:	0005883a 	mov	r2,zero
    354c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    3550:	e0bffc17 	ldw	r2,-16(fp)
    3554:	10001026 	beq	r2,zero,3598 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    3558:	e0bffc17 	ldw	r2,-16(fp)
    355c:	10800017 	ldw	r2,0(r2)
    3560:	10800717 	ldw	r2,28(r2)
    3564:	10000926 	beq	r2,zero,358c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    3568:	e0bffc17 	ldw	r2,-16(fp)
    356c:	10800017 	ldw	r2,0(r2)
    3570:	10800717 	ldw	r2,28(r2)
    3574:	e1bfff17 	ldw	r6,-4(fp)
    3578:	e17ffe17 	ldw	r5,-8(fp)
    357c:	e13ffc17 	ldw	r4,-16(fp)
    3580:	103ee83a 	callr	r2
    3584:	e0bffb15 	stw	r2,-20(fp)
    3588:	00000506 	br	35a0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    358c:	00bfde84 	movi	r2,-134
    3590:	e0bffb15 	stw	r2,-20(fp)
    3594:	00000206 	br	35a0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    3598:	00bfebc4 	movi	r2,-81
    359c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    35a0:	e0bffb17 	ldw	r2,-20(fp)
    35a4:	1000070e 	bge	r2,zero,35c4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    35a8:	00034b80 	call	34b8 <alt_get_errno>
    35ac:	1007883a 	mov	r3,r2
    35b0:	e0bffb17 	ldw	r2,-20(fp)
    35b4:	0085c83a 	sub	r2,zero,r2
    35b8:	18800015 	stw	r2,0(r3)
    rc = -1;
    35bc:	00bfffc4 	movi	r2,-1
    35c0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    35c4:	e0bffb17 	ldw	r2,-20(fp)
}
    35c8:	e037883a 	mov	sp,fp
    35cc:	dfc00117 	ldw	ra,4(sp)
    35d0:	df000017 	ldw	fp,0(sp)
    35d4:	dec00204 	addi	sp,sp,8
    35d8:	f800283a 	ret

000035dc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    35dc:	defffd04 	addi	sp,sp,-12
    35e0:	dfc00215 	stw	ra,8(sp)
    35e4:	df000115 	stw	fp,4(sp)
    35e8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    35ec:	0009883a 	mov	r4,zero
    35f0:	0003a800 	call	3a80 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    35f4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    35f8:	0003ab80 	call	3ab8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    35fc:	01800034 	movhi	r6,0
    3600:	31966504 	addi	r6,r6,22932
    3604:	01400034 	movhi	r5,0
    3608:	29566504 	addi	r5,r5,22932
    360c:	01000034 	movhi	r4,0
    3610:	21166504 	addi	r4,r4,22932
    3614:	0004d9c0 	call	4d9c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    3618:	00049140 	call	4914 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    361c:	01000034 	movhi	r4,0
    3620:	21125d04 	addi	r4,r4,18804
    3624:	00055d80 	call	55d8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    3628:	d0a6ad17 	ldw	r2,-25932(gp)
    362c:	d0e6ae17 	ldw	r3,-25928(gp)
    3630:	d126af17 	ldw	r4,-25924(gp)
    3634:	200d883a 	mov	r6,r4
    3638:	180b883a 	mov	r5,r3
    363c:	1009883a 	mov	r4,r2
    3640:	00002900 	call	290 <main>
    3644:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    3648:	01000044 	movi	r4,1
    364c:	00030dc0 	call	30dc <close>
  exit (result);
    3650:	e13fff17 	ldw	r4,-4(fp)
    3654:	00055ec0 	call	55ec <exit>

00003658 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    3658:	defffe04 	addi	sp,sp,-8
    365c:	df000115 	stw	fp,4(sp)
    3660:	df000104 	addi	fp,sp,4
    3664:	e13fff15 	stw	r4,-4(fp)
}
    3668:	0001883a 	nop
    366c:	e037883a 	mov	sp,fp
    3670:	df000017 	ldw	fp,0(sp)
    3674:	dec00104 	addi	sp,sp,4
    3678:	f800283a 	ret

0000367c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    367c:	defffe04 	addi	sp,sp,-8
    3680:	df000115 	stw	fp,4(sp)
    3684:	df000104 	addi	fp,sp,4
    3688:	e13fff15 	stw	r4,-4(fp)
}
    368c:	0001883a 	nop
    3690:	e037883a 	mov	sp,fp
    3694:	df000017 	ldw	fp,0(sp)
    3698:	dec00104 	addi	sp,sp,4
    369c:	f800283a 	ret

000036a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    36a0:	defffe04 	addi	sp,sp,-8
    36a4:	dfc00115 	stw	ra,4(sp)
    36a8:	df000015 	stw	fp,0(sp)
    36ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    36b0:	00800034 	movhi	r2,0
    36b4:	109d0104 	addi	r2,r2,29700
    36b8:	10800017 	ldw	r2,0(r2)
    36bc:	10000526 	beq	r2,zero,36d4 <alt_get_errno+0x34>
    36c0:	00800034 	movhi	r2,0
    36c4:	109d0104 	addi	r2,r2,29700
    36c8:	10800017 	ldw	r2,0(r2)
    36cc:	103ee83a 	callr	r2
    36d0:	00000206 	br	36dc <alt_get_errno+0x3c>
    36d4:	00800074 	movhi	r2,1
    36d8:	10a3a404 	addi	r2,r2,-29040
}
    36dc:	e037883a 	mov	sp,fp
    36e0:	dfc00117 	ldw	ra,4(sp)
    36e4:	df000017 	ldw	fp,0(sp)
    36e8:	dec00204 	addi	sp,sp,8
    36ec:	f800283a 	ret

000036f0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    36f0:	defff904 	addi	sp,sp,-28
    36f4:	dfc00615 	stw	ra,24(sp)
    36f8:	df000515 	stw	fp,20(sp)
    36fc:	df000504 	addi	fp,sp,20
    3700:	e13ffd15 	stw	r4,-12(fp)
    3704:	e17ffe15 	stw	r5,-8(fp)
    3708:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    370c:	e0bffd17 	ldw	r2,-12(fp)
    3710:	10000616 	blt	r2,zero,372c <read+0x3c>
    3714:	e0bffd17 	ldw	r2,-12(fp)
    3718:	10c00324 	muli	r3,r2,12
    371c:	00800034 	movhi	r2,0
    3720:	10988004 	addi	r2,r2,25088
    3724:	1885883a 	add	r2,r3,r2
    3728:	00000106 	br	3730 <read+0x40>
    372c:	0005883a 	mov	r2,zero
    3730:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    3734:	e0bffb17 	ldw	r2,-20(fp)
    3738:	10002226 	beq	r2,zero,37c4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    373c:	e0bffb17 	ldw	r2,-20(fp)
    3740:	10800217 	ldw	r2,8(r2)
    3744:	108000cc 	andi	r2,r2,3
    3748:	10800060 	cmpeqi	r2,r2,1
    374c:	1000181e 	bne	r2,zero,37b0 <read+0xc0>
        (fd->dev->read))
    3750:	e0bffb17 	ldw	r2,-20(fp)
    3754:	10800017 	ldw	r2,0(r2)
    3758:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    375c:	10001426 	beq	r2,zero,37b0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    3760:	e0bffb17 	ldw	r2,-20(fp)
    3764:	10800017 	ldw	r2,0(r2)
    3768:	10800517 	ldw	r2,20(r2)
    376c:	e0ffff17 	ldw	r3,-4(fp)
    3770:	180d883a 	mov	r6,r3
    3774:	e17ffe17 	ldw	r5,-8(fp)
    3778:	e13ffb17 	ldw	r4,-20(fp)
    377c:	103ee83a 	callr	r2
    3780:	e0bffc15 	stw	r2,-16(fp)
    3784:	e0bffc17 	ldw	r2,-16(fp)
    3788:	1000070e 	bge	r2,zero,37a8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    378c:	00036a00 	call	36a0 <alt_get_errno>
    3790:	1007883a 	mov	r3,r2
    3794:	e0bffc17 	ldw	r2,-16(fp)
    3798:	0085c83a 	sub	r2,zero,r2
    379c:	18800015 	stw	r2,0(r3)
          return -1;
    37a0:	00bfffc4 	movi	r2,-1
    37a4:	00000c06 	br	37d8 <read+0xe8>
        }
        return rval;
    37a8:	e0bffc17 	ldw	r2,-16(fp)
    37ac:	00000a06 	br	37d8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    37b0:	00036a00 	call	36a0 <alt_get_errno>
    37b4:	1007883a 	mov	r3,r2
    37b8:	00800344 	movi	r2,13
    37bc:	18800015 	stw	r2,0(r3)
    37c0:	00000406 	br	37d4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    37c4:	00036a00 	call	36a0 <alt_get_errno>
    37c8:	1007883a 	mov	r3,r2
    37cc:	00801444 	movi	r2,81
    37d0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    37d4:	00bfffc4 	movi	r2,-1
}
    37d8:	e037883a 	mov	sp,fp
    37dc:	dfc00117 	ldw	ra,4(sp)
    37e0:	df000017 	ldw	fp,0(sp)
    37e4:	dec00204 	addi	sp,sp,8
    37e8:	f800283a 	ret

000037ec <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    37ec:	defffe04 	addi	sp,sp,-8
    37f0:	df000115 	stw	fp,4(sp)
    37f4:	df000104 	addi	fp,sp,4
    37f8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    37fc:	e0bfff17 	ldw	r2,-4(fp)
    3800:	108000d0 	cmplti	r2,r2,3
    3804:	10000d1e 	bne	r2,zero,383c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    3808:	00800034 	movhi	r2,0
    380c:	10988004 	addi	r2,r2,25088
    3810:	e0ffff17 	ldw	r3,-4(fp)
    3814:	18c00324 	muli	r3,r3,12
    3818:	10c5883a 	add	r2,r2,r3
    381c:	10800204 	addi	r2,r2,8
    3820:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    3824:	00800034 	movhi	r2,0
    3828:	10988004 	addi	r2,r2,25088
    382c:	e0ffff17 	ldw	r3,-4(fp)
    3830:	18c00324 	muli	r3,r3,12
    3834:	10c5883a 	add	r2,r2,r3
    3838:	10000015 	stw	zero,0(r2)
  }
}
    383c:	0001883a 	nop
    3840:	e037883a 	mov	sp,fp
    3844:	df000017 	ldw	fp,0(sp)
    3848:	dec00104 	addi	sp,sp,4
    384c:	f800283a 	ret

00003850 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    3850:	defff904 	addi	sp,sp,-28
    3854:	df000615 	stw	fp,24(sp)
    3858:	df000604 	addi	fp,sp,24
    385c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3860:	0005303a 	rdctl	r2,status
    3864:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3868:	e0fffe17 	ldw	r3,-8(fp)
    386c:	00bfff84 	movi	r2,-2
    3870:	1884703a 	and	r2,r3,r2
    3874:	1001703a 	wrctl	status,r2
  
  return context;
    3878:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    387c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    3880:	d0a00a17 	ldw	r2,-32728(gp)
    3884:	10c000c4 	addi	r3,r2,3
    3888:	00bfff04 	movi	r2,-4
    388c:	1884703a 	and	r2,r3,r2
    3890:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    3894:	d0e00a17 	ldw	r3,-32728(gp)
    3898:	e0bfff17 	ldw	r2,-4(fp)
    389c:	1887883a 	add	r3,r3,r2
    38a0:	00800074 	movhi	r2,1
    38a4:	10a80004 	addi	r2,r2,-24576
    38a8:	10c0062e 	bgeu	r2,r3,38c4 <sbrk+0x74>
    38ac:	e0bffb17 	ldw	r2,-20(fp)
    38b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    38b4:	e0bffa17 	ldw	r2,-24(fp)
    38b8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    38bc:	00bfffc4 	movi	r2,-1
    38c0:	00000b06 	br	38f0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    38c4:	d0a00a17 	ldw	r2,-32728(gp)
    38c8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    38cc:	d0e00a17 	ldw	r3,-32728(gp)
    38d0:	e0bfff17 	ldw	r2,-4(fp)
    38d4:	1885883a 	add	r2,r3,r2
    38d8:	d0a00a15 	stw	r2,-32728(gp)
    38dc:	e0bffb17 	ldw	r2,-20(fp)
    38e0:	e0bffc15 	stw	r2,-16(fp)
    38e4:	e0bffc17 	ldw	r2,-16(fp)
    38e8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    38ec:	e0bffd17 	ldw	r2,-12(fp)
} 
    38f0:	e037883a 	mov	sp,fp
    38f4:	df000017 	ldw	fp,0(sp)
    38f8:	dec00104 	addi	sp,sp,4
    38fc:	f800283a 	ret

00003900 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3900:	defffe04 	addi	sp,sp,-8
    3904:	dfc00115 	stw	ra,4(sp)
    3908:	df000015 	stw	fp,0(sp)
    390c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3910:	00800034 	movhi	r2,0
    3914:	109d0104 	addi	r2,r2,29700
    3918:	10800017 	ldw	r2,0(r2)
    391c:	10000526 	beq	r2,zero,3934 <alt_get_errno+0x34>
    3920:	00800034 	movhi	r2,0
    3924:	109d0104 	addi	r2,r2,29700
    3928:	10800017 	ldw	r2,0(r2)
    392c:	103ee83a 	callr	r2
    3930:	00000206 	br	393c <alt_get_errno+0x3c>
    3934:	00800074 	movhi	r2,1
    3938:	10a3a404 	addi	r2,r2,-29040
}
    393c:	e037883a 	mov	sp,fp
    3940:	dfc00117 	ldw	ra,4(sp)
    3944:	df000017 	ldw	fp,0(sp)
    3948:	dec00204 	addi	sp,sp,8
    394c:	f800283a 	ret

00003950 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    3950:	defff904 	addi	sp,sp,-28
    3954:	dfc00615 	stw	ra,24(sp)
    3958:	df000515 	stw	fp,20(sp)
    395c:	df000504 	addi	fp,sp,20
    3960:	e13ffd15 	stw	r4,-12(fp)
    3964:	e17ffe15 	stw	r5,-8(fp)
    3968:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    396c:	e0bffd17 	ldw	r2,-12(fp)
    3970:	10000616 	blt	r2,zero,398c <write+0x3c>
    3974:	e0bffd17 	ldw	r2,-12(fp)
    3978:	10c00324 	muli	r3,r2,12
    397c:	00800034 	movhi	r2,0
    3980:	10988004 	addi	r2,r2,25088
    3984:	1885883a 	add	r2,r3,r2
    3988:	00000106 	br	3990 <write+0x40>
    398c:	0005883a 	mov	r2,zero
    3990:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    3994:	e0bffb17 	ldw	r2,-20(fp)
    3998:	10002126 	beq	r2,zero,3a20 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    399c:	e0bffb17 	ldw	r2,-20(fp)
    39a0:	10800217 	ldw	r2,8(r2)
    39a4:	108000cc 	andi	r2,r2,3
    39a8:	10001826 	beq	r2,zero,3a0c <write+0xbc>
    39ac:	e0bffb17 	ldw	r2,-20(fp)
    39b0:	10800017 	ldw	r2,0(r2)
    39b4:	10800617 	ldw	r2,24(r2)
    39b8:	10001426 	beq	r2,zero,3a0c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    39bc:	e0bffb17 	ldw	r2,-20(fp)
    39c0:	10800017 	ldw	r2,0(r2)
    39c4:	10800617 	ldw	r2,24(r2)
    39c8:	e0ffff17 	ldw	r3,-4(fp)
    39cc:	180d883a 	mov	r6,r3
    39d0:	e17ffe17 	ldw	r5,-8(fp)
    39d4:	e13ffb17 	ldw	r4,-20(fp)
    39d8:	103ee83a 	callr	r2
    39dc:	e0bffc15 	stw	r2,-16(fp)
    39e0:	e0bffc17 	ldw	r2,-16(fp)
    39e4:	1000070e 	bge	r2,zero,3a04 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    39e8:	00039000 	call	3900 <alt_get_errno>
    39ec:	1007883a 	mov	r3,r2
    39f0:	e0bffc17 	ldw	r2,-16(fp)
    39f4:	0085c83a 	sub	r2,zero,r2
    39f8:	18800015 	stw	r2,0(r3)
        return -1;
    39fc:	00bfffc4 	movi	r2,-1
    3a00:	00000c06 	br	3a34 <write+0xe4>
      }
      return rval;
    3a04:	e0bffc17 	ldw	r2,-16(fp)
    3a08:	00000a06 	br	3a34 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    3a0c:	00039000 	call	3900 <alt_get_errno>
    3a10:	1007883a 	mov	r3,r2
    3a14:	00800344 	movi	r2,13
    3a18:	18800015 	stw	r2,0(r3)
    3a1c:	00000406 	br	3a30 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    3a20:	00039000 	call	3900 <alt_get_errno>
    3a24:	1007883a 	mov	r3,r2
    3a28:	00801444 	movi	r2,81
    3a2c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    3a30:	00bfffc4 	movi	r2,-1
}
    3a34:	e037883a 	mov	sp,fp
    3a38:	dfc00117 	ldw	ra,4(sp)
    3a3c:	df000017 	ldw	fp,0(sp)
    3a40:	dec00204 	addi	sp,sp,8
    3a44:	f800283a 	ret

00003a48 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    3a48:	defffd04 	addi	sp,sp,-12
    3a4c:	dfc00215 	stw	ra,8(sp)
    3a50:	df000115 	stw	fp,4(sp)
    3a54:	df000104 	addi	fp,sp,4
    3a58:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    3a5c:	01400034 	movhi	r5,0
    3a60:	295cfe04 	addi	r5,r5,29688
    3a64:	e13fff17 	ldw	r4,-4(fp)
    3a68:	00048700 	call	4870 <alt_dev_llist_insert>
}
    3a6c:	e037883a 	mov	sp,fp
    3a70:	dfc00117 	ldw	ra,4(sp)
    3a74:	df000017 	ldw	fp,0(sp)
    3a78:	dec00204 	addi	sp,sp,8
    3a7c:	f800283a 	ret

00003a80 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    3a80:	defffd04 	addi	sp,sp,-12
    3a84:	dfc00215 	stw	ra,8(sp)
    3a88:	df000115 	stw	fp,4(sp)
    3a8c:	df000104 	addi	fp,sp,4
    3a90:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOSII_CORE, niosII_core);
    3a94:	00052300 	call	5230 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    3a98:	00800044 	movi	r2,1
    3a9c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    3aa0:	0001883a 	nop
    3aa4:	e037883a 	mov	sp,fp
    3aa8:	dfc00117 	ldw	ra,4(sp)
    3aac:	df000017 	ldw	fp,0(sp)
    3ab0:	dec00204 	addi	sp,sp,8
    3ab4:	f800283a 	ret

00003ab8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    3ab8:	defffe04 	addi	sp,sp,-8
    3abc:	dfc00115 	stw	ra,4(sp)
    3ac0:	df000015 	stw	fp,0(sp)
    3ac4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_TIMER, Sys_Timer);
    3ac8:	01c0fa04 	movi	r7,1000
    3acc:	01800044 	movi	r6,1
    3ad0:	000b883a 	mov	r5,zero
    3ad4:	01000074 	movhi	r4,1
    3ad8:	21040004 	addi	r4,r4,4096
    3adc:	000460c0 	call	460c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, JTAG);
    3ae0:	000d883a 	mov	r6,zero
    3ae4:	000b883a 	mov	r5,zero
    3ae8:	01000034 	movhi	r4,0
    3aec:	2118ea04 	addi	r4,r4,25512
    3af0:	0003c800 	call	3c80 <altera_avalon_jtag_uart_init>
    3af4:	01000034 	movhi	r4,0
    3af8:	2118e004 	addi	r4,r4,25472
    3afc:	0003a480 	call	3a48 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSTEMID, SystemID);
    3b00:	0001883a 	nop
}
    3b04:	0001883a 	nop
    3b08:	e037883a 	mov	sp,fp
    3b0c:	dfc00117 	ldw	ra,4(sp)
    3b10:	df000017 	ldw	fp,0(sp)
    3b14:	dec00204 	addi	sp,sp,8
    3b18:	f800283a 	ret

00003b1c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    3b1c:	defffa04 	addi	sp,sp,-24
    3b20:	dfc00515 	stw	ra,20(sp)
    3b24:	df000415 	stw	fp,16(sp)
    3b28:	df000404 	addi	fp,sp,16
    3b2c:	e13ffd15 	stw	r4,-12(fp)
    3b30:	e17ffe15 	stw	r5,-8(fp)
    3b34:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3b38:	e0bffd17 	ldw	r2,-12(fp)
    3b3c:	10800017 	ldw	r2,0(r2)
    3b40:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    3b44:	e0bffc17 	ldw	r2,-16(fp)
    3b48:	10c00a04 	addi	r3,r2,40
    3b4c:	e0bffd17 	ldw	r2,-12(fp)
    3b50:	10800217 	ldw	r2,8(r2)
    3b54:	100f883a 	mov	r7,r2
    3b58:	e1bfff17 	ldw	r6,-4(fp)
    3b5c:	e17ffe17 	ldw	r5,-8(fp)
    3b60:	1809883a 	mov	r4,r3
    3b64:	00041540 	call	4154 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    3b68:	e037883a 	mov	sp,fp
    3b6c:	dfc00117 	ldw	ra,4(sp)
    3b70:	df000017 	ldw	fp,0(sp)
    3b74:	dec00204 	addi	sp,sp,8
    3b78:	f800283a 	ret

00003b7c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    3b7c:	defffa04 	addi	sp,sp,-24
    3b80:	dfc00515 	stw	ra,20(sp)
    3b84:	df000415 	stw	fp,16(sp)
    3b88:	df000404 	addi	fp,sp,16
    3b8c:	e13ffd15 	stw	r4,-12(fp)
    3b90:	e17ffe15 	stw	r5,-8(fp)
    3b94:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3b98:	e0bffd17 	ldw	r2,-12(fp)
    3b9c:	10800017 	ldw	r2,0(r2)
    3ba0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    3ba4:	e0bffc17 	ldw	r2,-16(fp)
    3ba8:	10c00a04 	addi	r3,r2,40
    3bac:	e0bffd17 	ldw	r2,-12(fp)
    3bb0:	10800217 	ldw	r2,8(r2)
    3bb4:	100f883a 	mov	r7,r2
    3bb8:	e1bfff17 	ldw	r6,-4(fp)
    3bbc:	e17ffe17 	ldw	r5,-8(fp)
    3bc0:	1809883a 	mov	r4,r3
    3bc4:	00043700 	call	4370 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    3bc8:	e037883a 	mov	sp,fp
    3bcc:	dfc00117 	ldw	ra,4(sp)
    3bd0:	df000017 	ldw	fp,0(sp)
    3bd4:	dec00204 	addi	sp,sp,8
    3bd8:	f800283a 	ret

00003bdc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    3bdc:	defffc04 	addi	sp,sp,-16
    3be0:	dfc00315 	stw	ra,12(sp)
    3be4:	df000215 	stw	fp,8(sp)
    3be8:	df000204 	addi	fp,sp,8
    3bec:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3bf0:	e0bfff17 	ldw	r2,-4(fp)
    3bf4:	10800017 	ldw	r2,0(r2)
    3bf8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    3bfc:	e0bffe17 	ldw	r2,-8(fp)
    3c00:	10c00a04 	addi	r3,r2,40
    3c04:	e0bfff17 	ldw	r2,-4(fp)
    3c08:	10800217 	ldw	r2,8(r2)
    3c0c:	100b883a 	mov	r5,r2
    3c10:	1809883a 	mov	r4,r3
    3c14:	0003ffc0 	call	3ffc <altera_avalon_jtag_uart_close>
}
    3c18:	e037883a 	mov	sp,fp
    3c1c:	dfc00117 	ldw	ra,4(sp)
    3c20:	df000017 	ldw	fp,0(sp)
    3c24:	dec00204 	addi	sp,sp,8
    3c28:	f800283a 	ret

00003c2c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    3c2c:	defffa04 	addi	sp,sp,-24
    3c30:	dfc00515 	stw	ra,20(sp)
    3c34:	df000415 	stw	fp,16(sp)
    3c38:	df000404 	addi	fp,sp,16
    3c3c:	e13ffd15 	stw	r4,-12(fp)
    3c40:	e17ffe15 	stw	r5,-8(fp)
    3c44:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    3c48:	e0bffd17 	ldw	r2,-12(fp)
    3c4c:	10800017 	ldw	r2,0(r2)
    3c50:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    3c54:	e0bffc17 	ldw	r2,-16(fp)
    3c58:	10800a04 	addi	r2,r2,40
    3c5c:	e1bfff17 	ldw	r6,-4(fp)
    3c60:	e17ffe17 	ldw	r5,-8(fp)
    3c64:	1009883a 	mov	r4,r2
    3c68:	00040640 	call	4064 <altera_avalon_jtag_uart_ioctl>
}
    3c6c:	e037883a 	mov	sp,fp
    3c70:	dfc00117 	ldw	ra,4(sp)
    3c74:	df000017 	ldw	fp,0(sp)
    3c78:	dec00204 	addi	sp,sp,8
    3c7c:	f800283a 	ret

00003c80 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    3c80:	defffa04 	addi	sp,sp,-24
    3c84:	dfc00515 	stw	ra,20(sp)
    3c88:	df000415 	stw	fp,16(sp)
    3c8c:	df000404 	addi	fp,sp,16
    3c90:	e13ffd15 	stw	r4,-12(fp)
    3c94:	e17ffe15 	stw	r5,-8(fp)
    3c98:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    3c9c:	e0bffd17 	ldw	r2,-12(fp)
    3ca0:	00c00044 	movi	r3,1
    3ca4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    3ca8:	e0bffd17 	ldw	r2,-12(fp)
    3cac:	10800017 	ldw	r2,0(r2)
    3cb0:	10800104 	addi	r2,r2,4
    3cb4:	1007883a 	mov	r3,r2
    3cb8:	e0bffd17 	ldw	r2,-12(fp)
    3cbc:	10800817 	ldw	r2,32(r2)
    3cc0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    3cc4:	e0bffe17 	ldw	r2,-8(fp)
    3cc8:	e0ffff17 	ldw	r3,-4(fp)
    3ccc:	d8000015 	stw	zero,0(sp)
    3cd0:	e1fffd17 	ldw	r7,-12(fp)
    3cd4:	01800034 	movhi	r6,0
    3cd8:	318f5204 	addi	r6,r6,15688
    3cdc:	180b883a 	mov	r5,r3
    3ce0:	1009883a 	mov	r4,r2
    3ce4:	0004a080 	call	4a08 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    3ce8:	e0bffd17 	ldw	r2,-12(fp)
    3cec:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    3cf0:	e0bffd17 	ldw	r2,-12(fp)
    3cf4:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    3cf8:	00800074 	movhi	r2,1
    3cfc:	10a3a904 	addi	r2,r2,-29020
    3d00:	10800017 	ldw	r2,0(r2)
    3d04:	e1fffd17 	ldw	r7,-12(fp)
    3d08:	01800034 	movhi	r6,0
    3d0c:	318fd504 	addi	r6,r6,16212
    3d10:	100b883a 	mov	r5,r2
    3d14:	1809883a 	mov	r4,r3
    3d18:	00046980 	call	4698 <alt_alarm_start>
    3d1c:	1000040e 	bge	r2,zero,3d30 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    3d20:	e0fffd17 	ldw	r3,-12(fp)
    3d24:	00a00034 	movhi	r2,32768
    3d28:	10bfffc4 	addi	r2,r2,-1
    3d2c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    3d30:	0001883a 	nop
    3d34:	e037883a 	mov	sp,fp
    3d38:	dfc00117 	ldw	ra,4(sp)
    3d3c:	df000017 	ldw	fp,0(sp)
    3d40:	dec00204 	addi	sp,sp,8
    3d44:	f800283a 	ret

00003d48 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    3d48:	defff804 	addi	sp,sp,-32
    3d4c:	df000715 	stw	fp,28(sp)
    3d50:	df000704 	addi	fp,sp,28
    3d54:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    3d58:	e0bfff17 	ldw	r2,-4(fp)
    3d5c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    3d60:	e0bffb17 	ldw	r2,-20(fp)
    3d64:	10800017 	ldw	r2,0(r2)
    3d68:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    3d6c:	e0bffc17 	ldw	r2,-16(fp)
    3d70:	10800104 	addi	r2,r2,4
    3d74:	10800037 	ldwio	r2,0(r2)
    3d78:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    3d7c:	e0bffd17 	ldw	r2,-12(fp)
    3d80:	1080c00c 	andi	r2,r2,768
    3d84:	10006d26 	beq	r2,zero,3f3c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    3d88:	e0bffd17 	ldw	r2,-12(fp)
    3d8c:	1080400c 	andi	r2,r2,256
    3d90:	10003526 	beq	r2,zero,3e68 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    3d94:	00800074 	movhi	r2,1
    3d98:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    3d9c:	e0bffb17 	ldw	r2,-20(fp)
    3da0:	10800a17 	ldw	r2,40(r2)
    3da4:	10800044 	addi	r2,r2,1
    3da8:	1081ffcc 	andi	r2,r2,2047
    3dac:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    3db0:	e0bffb17 	ldw	r2,-20(fp)
    3db4:	10c00b17 	ldw	r3,44(r2)
    3db8:	e0bffe17 	ldw	r2,-8(fp)
    3dbc:	18801526 	beq	r3,r2,3e14 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    3dc0:	e0bffc17 	ldw	r2,-16(fp)
    3dc4:	10800037 	ldwio	r2,0(r2)
    3dc8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    3dcc:	e0bff917 	ldw	r2,-28(fp)
    3dd0:	10a0000c 	andi	r2,r2,32768
    3dd4:	10001126 	beq	r2,zero,3e1c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    3dd8:	e0bffb17 	ldw	r2,-20(fp)
    3ddc:	10800a17 	ldw	r2,40(r2)
    3de0:	e0fff917 	ldw	r3,-28(fp)
    3de4:	1809883a 	mov	r4,r3
    3de8:	e0fffb17 	ldw	r3,-20(fp)
    3dec:	1885883a 	add	r2,r3,r2
    3df0:	10800e04 	addi	r2,r2,56
    3df4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    3df8:	e0bffb17 	ldw	r2,-20(fp)
    3dfc:	10800a17 	ldw	r2,40(r2)
    3e00:	10800044 	addi	r2,r2,1
    3e04:	10c1ffcc 	andi	r3,r2,2047
    3e08:	e0bffb17 	ldw	r2,-20(fp)
    3e0c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    3e10:	003fe206 	br	3d9c <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    3e14:	0001883a 	nop
    3e18:	00000106 	br	3e20 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    3e1c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    3e20:	e0bff917 	ldw	r2,-28(fp)
    3e24:	10bfffec 	andhi	r2,r2,65535
    3e28:	10000f26 	beq	r2,zero,3e68 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    3e2c:	e0bffb17 	ldw	r2,-20(fp)
    3e30:	10c00817 	ldw	r3,32(r2)
    3e34:	00bfff84 	movi	r2,-2
    3e38:	1886703a 	and	r3,r3,r2
    3e3c:	e0bffb17 	ldw	r2,-20(fp)
    3e40:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    3e44:	e0bffc17 	ldw	r2,-16(fp)
    3e48:	10800104 	addi	r2,r2,4
    3e4c:	1007883a 	mov	r3,r2
    3e50:	e0bffb17 	ldw	r2,-20(fp)
    3e54:	10800817 	ldw	r2,32(r2)
    3e58:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    3e5c:	e0bffc17 	ldw	r2,-16(fp)
    3e60:	10800104 	addi	r2,r2,4
    3e64:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    3e68:	e0bffd17 	ldw	r2,-12(fp)
    3e6c:	1080800c 	andi	r2,r2,512
    3e70:	103fbe26 	beq	r2,zero,3d6c <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    3e74:	e0bffd17 	ldw	r2,-12(fp)
    3e78:	1004d43a 	srli	r2,r2,16
    3e7c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    3e80:	00001406 	br	3ed4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    3e84:	e0bffc17 	ldw	r2,-16(fp)
    3e88:	e0fffb17 	ldw	r3,-20(fp)
    3e8c:	18c00d17 	ldw	r3,52(r3)
    3e90:	e13ffb17 	ldw	r4,-20(fp)
    3e94:	20c7883a 	add	r3,r4,r3
    3e98:	18c20e04 	addi	r3,r3,2104
    3e9c:	18c00003 	ldbu	r3,0(r3)
    3ea0:	18c03fcc 	andi	r3,r3,255
    3ea4:	18c0201c 	xori	r3,r3,128
    3ea8:	18ffe004 	addi	r3,r3,-128
    3eac:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    3eb0:	e0bffb17 	ldw	r2,-20(fp)
    3eb4:	10800d17 	ldw	r2,52(r2)
    3eb8:	10800044 	addi	r2,r2,1
    3ebc:	10c1ffcc 	andi	r3,r2,2047
    3ec0:	e0bffb17 	ldw	r2,-20(fp)
    3ec4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    3ec8:	e0bffa17 	ldw	r2,-24(fp)
    3ecc:	10bfffc4 	addi	r2,r2,-1
    3ed0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    3ed4:	e0bffa17 	ldw	r2,-24(fp)
    3ed8:	10000526 	beq	r2,zero,3ef0 <altera_avalon_jtag_uart_irq+0x1a8>
    3edc:	e0bffb17 	ldw	r2,-20(fp)
    3ee0:	10c00d17 	ldw	r3,52(r2)
    3ee4:	e0bffb17 	ldw	r2,-20(fp)
    3ee8:	10800c17 	ldw	r2,48(r2)
    3eec:	18bfe51e 	bne	r3,r2,3e84 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    3ef0:	e0bffa17 	ldw	r2,-24(fp)
    3ef4:	103f9d26 	beq	r2,zero,3d6c <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    3ef8:	e0bffb17 	ldw	r2,-20(fp)
    3efc:	10c00817 	ldw	r3,32(r2)
    3f00:	00bfff44 	movi	r2,-3
    3f04:	1886703a 	and	r3,r3,r2
    3f08:	e0bffb17 	ldw	r2,-20(fp)
    3f0c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    3f10:	e0bffb17 	ldw	r2,-20(fp)
    3f14:	10800017 	ldw	r2,0(r2)
    3f18:	10800104 	addi	r2,r2,4
    3f1c:	1007883a 	mov	r3,r2
    3f20:	e0bffb17 	ldw	r2,-20(fp)
    3f24:	10800817 	ldw	r2,32(r2)
    3f28:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    3f2c:	e0bffc17 	ldw	r2,-16(fp)
    3f30:	10800104 	addi	r2,r2,4
    3f34:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    3f38:	003f8c06 	br	3d6c <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    3f3c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    3f40:	0001883a 	nop
    3f44:	e037883a 	mov	sp,fp
    3f48:	df000017 	ldw	fp,0(sp)
    3f4c:	dec00104 	addi	sp,sp,4
    3f50:	f800283a 	ret

00003f54 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    3f54:	defff804 	addi	sp,sp,-32
    3f58:	df000715 	stw	fp,28(sp)
    3f5c:	df000704 	addi	fp,sp,28
    3f60:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    3f64:	e0bffb17 	ldw	r2,-20(fp)
    3f68:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    3f6c:	e0bff917 	ldw	r2,-28(fp)
    3f70:	10800017 	ldw	r2,0(r2)
    3f74:	10800104 	addi	r2,r2,4
    3f78:	10800037 	ldwio	r2,0(r2)
    3f7c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    3f80:	e0bffa17 	ldw	r2,-24(fp)
    3f84:	1081000c 	andi	r2,r2,1024
    3f88:	10000b26 	beq	r2,zero,3fb8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    3f8c:	e0bff917 	ldw	r2,-28(fp)
    3f90:	10800017 	ldw	r2,0(r2)
    3f94:	10800104 	addi	r2,r2,4
    3f98:	1007883a 	mov	r3,r2
    3f9c:	e0bff917 	ldw	r2,-28(fp)
    3fa0:	10800817 	ldw	r2,32(r2)
    3fa4:	10810014 	ori	r2,r2,1024
    3fa8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    3fac:	e0bff917 	ldw	r2,-28(fp)
    3fb0:	10000915 	stw	zero,36(r2)
    3fb4:	00000a06 	br	3fe0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    3fb8:	e0bff917 	ldw	r2,-28(fp)
    3fbc:	10c00917 	ldw	r3,36(r2)
    3fc0:	00a00034 	movhi	r2,32768
    3fc4:	10bfff04 	addi	r2,r2,-4
    3fc8:	10c00536 	bltu	r2,r3,3fe0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    3fcc:	e0bff917 	ldw	r2,-28(fp)
    3fd0:	10800917 	ldw	r2,36(r2)
    3fd4:	10c00044 	addi	r3,r2,1
    3fd8:	e0bff917 	ldw	r2,-28(fp)
    3fdc:	10c00915 	stw	r3,36(r2)
    3fe0:	00800074 	movhi	r2,1
    3fe4:	10a3a904 	addi	r2,r2,-29020
    3fe8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    3fec:	e037883a 	mov	sp,fp
    3ff0:	df000017 	ldw	fp,0(sp)
    3ff4:	dec00104 	addi	sp,sp,4
    3ff8:	f800283a 	ret

00003ffc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    3ffc:	defffd04 	addi	sp,sp,-12
    4000:	df000215 	stw	fp,8(sp)
    4004:	df000204 	addi	fp,sp,8
    4008:	e13ffe15 	stw	r4,-8(fp)
    400c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    4010:	00000506 	br	4028 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    4014:	e0bfff17 	ldw	r2,-4(fp)
    4018:	1090000c 	andi	r2,r2,16384
    401c:	10000226 	beq	r2,zero,4028 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    4020:	00bffd44 	movi	r2,-11
    4024:	00000b06 	br	4054 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    4028:	e0bffe17 	ldw	r2,-8(fp)
    402c:	10c00d17 	ldw	r3,52(r2)
    4030:	e0bffe17 	ldw	r2,-8(fp)
    4034:	10800c17 	ldw	r2,48(r2)
    4038:	18800526 	beq	r3,r2,4050 <altera_avalon_jtag_uart_close+0x54>
    403c:	e0bffe17 	ldw	r2,-8(fp)
    4040:	10c00917 	ldw	r3,36(r2)
    4044:	e0bffe17 	ldw	r2,-8(fp)
    4048:	10800117 	ldw	r2,4(r2)
    404c:	18bff136 	bltu	r3,r2,4014 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    4050:	0005883a 	mov	r2,zero
}
    4054:	e037883a 	mov	sp,fp
    4058:	df000017 	ldw	fp,0(sp)
    405c:	dec00104 	addi	sp,sp,4
    4060:	f800283a 	ret

00004064 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    4064:	defffa04 	addi	sp,sp,-24
    4068:	df000515 	stw	fp,20(sp)
    406c:	df000504 	addi	fp,sp,20
    4070:	e13ffd15 	stw	r4,-12(fp)
    4074:	e17ffe15 	stw	r5,-8(fp)
    4078:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    407c:	00bff9c4 	movi	r2,-25
    4080:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    4084:	e0bffe17 	ldw	r2,-8(fp)
    4088:	10da8060 	cmpeqi	r3,r2,27137
    408c:	1800031e 	bne	r3,zero,409c <altera_avalon_jtag_uart_ioctl+0x38>
    4090:	109a80a0 	cmpeqi	r2,r2,27138
    4094:	1000181e 	bne	r2,zero,40f8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    4098:	00002906 	br	4140 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    409c:	e0bffd17 	ldw	r2,-12(fp)
    40a0:	10c00117 	ldw	r3,4(r2)
    40a4:	00a00034 	movhi	r2,32768
    40a8:	10bfffc4 	addi	r2,r2,-1
    40ac:	18802126 	beq	r3,r2,4134 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    40b0:	e0bfff17 	ldw	r2,-4(fp)
    40b4:	10800017 	ldw	r2,0(r2)
    40b8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    40bc:	e0bffc17 	ldw	r2,-16(fp)
    40c0:	10800090 	cmplti	r2,r2,2
    40c4:	1000061e 	bne	r2,zero,40e0 <altera_avalon_jtag_uart_ioctl+0x7c>
    40c8:	e0fffc17 	ldw	r3,-16(fp)
    40cc:	00a00034 	movhi	r2,32768
    40d0:	10bfffc4 	addi	r2,r2,-1
    40d4:	18800226 	beq	r3,r2,40e0 <altera_avalon_jtag_uart_ioctl+0x7c>
    40d8:	e0bffc17 	ldw	r2,-16(fp)
    40dc:	00000206 	br	40e8 <altera_avalon_jtag_uart_ioctl+0x84>
    40e0:	00a00034 	movhi	r2,32768
    40e4:	10bfff84 	addi	r2,r2,-2
    40e8:	e0fffd17 	ldw	r3,-12(fp)
    40ec:	18800115 	stw	r2,4(r3)
      rc = 0;
    40f0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    40f4:	00000f06 	br	4134 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    40f8:	e0bffd17 	ldw	r2,-12(fp)
    40fc:	10c00117 	ldw	r3,4(r2)
    4100:	00a00034 	movhi	r2,32768
    4104:	10bfffc4 	addi	r2,r2,-1
    4108:	18800c26 	beq	r3,r2,413c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    410c:	e0bffd17 	ldw	r2,-12(fp)
    4110:	10c00917 	ldw	r3,36(r2)
    4114:	e0bffd17 	ldw	r2,-12(fp)
    4118:	10800117 	ldw	r2,4(r2)
    411c:	1885803a 	cmpltu	r2,r3,r2
    4120:	10c03fcc 	andi	r3,r2,255
    4124:	e0bfff17 	ldw	r2,-4(fp)
    4128:	10c00015 	stw	r3,0(r2)
      rc = 0;
    412c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    4130:	00000206 	br	413c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    4134:	0001883a 	nop
    4138:	00000106 	br	4140 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    413c:	0001883a 	nop

  default:
    break;
  }

  return rc;
    4140:	e0bffb17 	ldw	r2,-20(fp)
}
    4144:	e037883a 	mov	sp,fp
    4148:	df000017 	ldw	fp,0(sp)
    414c:	dec00104 	addi	sp,sp,4
    4150:	f800283a 	ret

00004154 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    4154:	defff304 	addi	sp,sp,-52
    4158:	dfc00c15 	stw	ra,48(sp)
    415c:	df000b15 	stw	fp,44(sp)
    4160:	df000b04 	addi	fp,sp,44
    4164:	e13ffc15 	stw	r4,-16(fp)
    4168:	e17ffd15 	stw	r5,-12(fp)
    416c:	e1bffe15 	stw	r6,-8(fp)
    4170:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    4174:	e0bffd17 	ldw	r2,-12(fp)
    4178:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    417c:	00004706 	br	429c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    4180:	e0bffc17 	ldw	r2,-16(fp)
    4184:	10800a17 	ldw	r2,40(r2)
    4188:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    418c:	e0bffc17 	ldw	r2,-16(fp)
    4190:	10800b17 	ldw	r2,44(r2)
    4194:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    4198:	e0fff717 	ldw	r3,-36(fp)
    419c:	e0bff817 	ldw	r2,-32(fp)
    41a0:	18800536 	bltu	r3,r2,41b8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    41a4:	e0fff717 	ldw	r3,-36(fp)
    41a8:	e0bff817 	ldw	r2,-32(fp)
    41ac:	1885c83a 	sub	r2,r3,r2
    41b0:	e0bff615 	stw	r2,-40(fp)
    41b4:	00000406 	br	41c8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    41b8:	00c20004 	movi	r3,2048
    41bc:	e0bff817 	ldw	r2,-32(fp)
    41c0:	1885c83a 	sub	r2,r3,r2
    41c4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    41c8:	e0bff617 	ldw	r2,-40(fp)
    41cc:	10001e26 	beq	r2,zero,4248 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    41d0:	e0fffe17 	ldw	r3,-8(fp)
    41d4:	e0bff617 	ldw	r2,-40(fp)
    41d8:	1880022e 	bgeu	r3,r2,41e4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    41dc:	e0bffe17 	ldw	r2,-8(fp)
    41e0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    41e4:	e0bffc17 	ldw	r2,-16(fp)
    41e8:	10c00e04 	addi	r3,r2,56
    41ec:	e0bff817 	ldw	r2,-32(fp)
    41f0:	1885883a 	add	r2,r3,r2
    41f4:	e1bff617 	ldw	r6,-40(fp)
    41f8:	100b883a 	mov	r5,r2
    41fc:	e13ff517 	ldw	r4,-44(fp)
    4200:	00017040 	call	1704 <memcpy>
      ptr   += n;
    4204:	e0fff517 	ldw	r3,-44(fp)
    4208:	e0bff617 	ldw	r2,-40(fp)
    420c:	1885883a 	add	r2,r3,r2
    4210:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    4214:	e0fffe17 	ldw	r3,-8(fp)
    4218:	e0bff617 	ldw	r2,-40(fp)
    421c:	1885c83a 	sub	r2,r3,r2
    4220:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4224:	e0fff817 	ldw	r3,-32(fp)
    4228:	e0bff617 	ldw	r2,-40(fp)
    422c:	1885883a 	add	r2,r3,r2
    4230:	10c1ffcc 	andi	r3,r2,2047
    4234:	e0bffc17 	ldw	r2,-16(fp)
    4238:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    423c:	e0bffe17 	ldw	r2,-8(fp)
    4240:	00bfcf16 	blt	zero,r2,4180 <altera_avalon_jtag_uart_read+0x2c>
    4244:	00000106 	br	424c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    4248:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    424c:	e0fff517 	ldw	r3,-44(fp)
    4250:	e0bffd17 	ldw	r2,-12(fp)
    4254:	1880141e 	bne	r3,r2,42a8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    4258:	e0bfff17 	ldw	r2,-4(fp)
    425c:	1090000c 	andi	r2,r2,16384
    4260:	1000131e 	bne	r2,zero,42b0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    4264:	0001883a 	nop
    4268:	e0bffc17 	ldw	r2,-16(fp)
    426c:	10c00a17 	ldw	r3,40(r2)
    4270:	e0bff717 	ldw	r2,-36(fp)
    4274:	1880051e 	bne	r3,r2,428c <altera_avalon_jtag_uart_read+0x138>
    4278:	e0bffc17 	ldw	r2,-16(fp)
    427c:	10c00917 	ldw	r3,36(r2)
    4280:	e0bffc17 	ldw	r2,-16(fp)
    4284:	10800117 	ldw	r2,4(r2)
    4288:	18bff736 	bltu	r3,r2,4268 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    428c:	e0bffc17 	ldw	r2,-16(fp)
    4290:	10c00a17 	ldw	r3,40(r2)
    4294:	e0bff717 	ldw	r2,-36(fp)
    4298:	18800726 	beq	r3,r2,42b8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    429c:	e0bffe17 	ldw	r2,-8(fp)
    42a0:	00bfb716 	blt	zero,r2,4180 <altera_avalon_jtag_uart_read+0x2c>
    42a4:	00000506 	br	42bc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    42a8:	0001883a 	nop
    42ac:	00000306 	br	42bc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    42b0:	0001883a 	nop
    42b4:	00000106 	br	42bc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    42b8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    42bc:	e0fff517 	ldw	r3,-44(fp)
    42c0:	e0bffd17 	ldw	r2,-12(fp)
    42c4:	18801826 	beq	r3,r2,4328 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    42c8:	0005303a 	rdctl	r2,status
    42cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    42d0:	e0fffb17 	ldw	r3,-20(fp)
    42d4:	00bfff84 	movi	r2,-2
    42d8:	1884703a 	and	r2,r3,r2
    42dc:	1001703a 	wrctl	status,r2
  
  return context;
    42e0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    42e4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    42e8:	e0bffc17 	ldw	r2,-16(fp)
    42ec:	10800817 	ldw	r2,32(r2)
    42f0:	10c00054 	ori	r3,r2,1
    42f4:	e0bffc17 	ldw	r2,-16(fp)
    42f8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    42fc:	e0bffc17 	ldw	r2,-16(fp)
    4300:	10800017 	ldw	r2,0(r2)
    4304:	10800104 	addi	r2,r2,4
    4308:	1007883a 	mov	r3,r2
    430c:	e0bffc17 	ldw	r2,-16(fp)
    4310:	10800817 	ldw	r2,32(r2)
    4314:	18800035 	stwio	r2,0(r3)
    4318:	e0bffa17 	ldw	r2,-24(fp)
    431c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4320:	e0bff917 	ldw	r2,-28(fp)
    4324:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    4328:	e0fff517 	ldw	r3,-44(fp)
    432c:	e0bffd17 	ldw	r2,-12(fp)
    4330:	18800426 	beq	r3,r2,4344 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    4334:	e0fff517 	ldw	r3,-44(fp)
    4338:	e0bffd17 	ldw	r2,-12(fp)
    433c:	1885c83a 	sub	r2,r3,r2
    4340:	00000606 	br	435c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    4344:	e0bfff17 	ldw	r2,-4(fp)
    4348:	1090000c 	andi	r2,r2,16384
    434c:	10000226 	beq	r2,zero,4358 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    4350:	00bffd44 	movi	r2,-11
    4354:	00000106 	br	435c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    4358:	00bffec4 	movi	r2,-5
}
    435c:	e037883a 	mov	sp,fp
    4360:	dfc00117 	ldw	ra,4(sp)
    4364:	df000017 	ldw	fp,0(sp)
    4368:	dec00204 	addi	sp,sp,8
    436c:	f800283a 	ret

00004370 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    4370:	defff304 	addi	sp,sp,-52
    4374:	dfc00c15 	stw	ra,48(sp)
    4378:	df000b15 	stw	fp,44(sp)
    437c:	df000b04 	addi	fp,sp,44
    4380:	e13ffc15 	stw	r4,-16(fp)
    4384:	e17ffd15 	stw	r5,-12(fp)
    4388:	e1bffe15 	stw	r6,-8(fp)
    438c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    4390:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    4394:	e0bffd17 	ldw	r2,-12(fp)
    4398:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    439c:	00003706 	br	447c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    43a0:	e0bffc17 	ldw	r2,-16(fp)
    43a4:	10800c17 	ldw	r2,48(r2)
    43a8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    43ac:	e0bffc17 	ldw	r2,-16(fp)
    43b0:	10800d17 	ldw	r2,52(r2)
    43b4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    43b8:	e0fff917 	ldw	r3,-28(fp)
    43bc:	e0bff517 	ldw	r2,-44(fp)
    43c0:	1880062e 	bgeu	r3,r2,43dc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    43c4:	e0fff517 	ldw	r3,-44(fp)
    43c8:	e0bff917 	ldw	r2,-28(fp)
    43cc:	1885c83a 	sub	r2,r3,r2
    43d0:	10bfffc4 	addi	r2,r2,-1
    43d4:	e0bff615 	stw	r2,-40(fp)
    43d8:	00000b06 	br	4408 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    43dc:	e0bff517 	ldw	r2,-44(fp)
    43e0:	10000526 	beq	r2,zero,43f8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    43e4:	00c20004 	movi	r3,2048
    43e8:	e0bff917 	ldw	r2,-28(fp)
    43ec:	1885c83a 	sub	r2,r3,r2
    43f0:	e0bff615 	stw	r2,-40(fp)
    43f4:	00000406 	br	4408 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    43f8:	00c1ffc4 	movi	r3,2047
    43fc:	e0bff917 	ldw	r2,-28(fp)
    4400:	1885c83a 	sub	r2,r3,r2
    4404:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    4408:	e0bff617 	ldw	r2,-40(fp)
    440c:	10001e26 	beq	r2,zero,4488 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    4410:	e0fffe17 	ldw	r3,-8(fp)
    4414:	e0bff617 	ldw	r2,-40(fp)
    4418:	1880022e 	bgeu	r3,r2,4424 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    441c:	e0bffe17 	ldw	r2,-8(fp)
    4420:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    4424:	e0bffc17 	ldw	r2,-16(fp)
    4428:	10c20e04 	addi	r3,r2,2104
    442c:	e0bff917 	ldw	r2,-28(fp)
    4430:	1885883a 	add	r2,r3,r2
    4434:	e1bff617 	ldw	r6,-40(fp)
    4438:	e17ffd17 	ldw	r5,-12(fp)
    443c:	1009883a 	mov	r4,r2
    4440:	00017040 	call	1704 <memcpy>
      ptr   += n;
    4444:	e0fffd17 	ldw	r3,-12(fp)
    4448:	e0bff617 	ldw	r2,-40(fp)
    444c:	1885883a 	add	r2,r3,r2
    4450:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    4454:	e0fffe17 	ldw	r3,-8(fp)
    4458:	e0bff617 	ldw	r2,-40(fp)
    445c:	1885c83a 	sub	r2,r3,r2
    4460:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4464:	e0fff917 	ldw	r3,-28(fp)
    4468:	e0bff617 	ldw	r2,-40(fp)
    446c:	1885883a 	add	r2,r3,r2
    4470:	10c1ffcc 	andi	r3,r2,2047
    4474:	e0bffc17 	ldw	r2,-16(fp)
    4478:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    447c:	e0bffe17 	ldw	r2,-8(fp)
    4480:	00bfc716 	blt	zero,r2,43a0 <altera_avalon_jtag_uart_write+0x30>
    4484:	00000106 	br	448c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    4488:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    448c:	0005303a 	rdctl	r2,status
    4490:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4494:	e0fffb17 	ldw	r3,-20(fp)
    4498:	00bfff84 	movi	r2,-2
    449c:	1884703a 	and	r2,r3,r2
    44a0:	1001703a 	wrctl	status,r2
  
  return context;
    44a4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    44a8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    44ac:	e0bffc17 	ldw	r2,-16(fp)
    44b0:	10800817 	ldw	r2,32(r2)
    44b4:	10c00094 	ori	r3,r2,2
    44b8:	e0bffc17 	ldw	r2,-16(fp)
    44bc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    44c0:	e0bffc17 	ldw	r2,-16(fp)
    44c4:	10800017 	ldw	r2,0(r2)
    44c8:	10800104 	addi	r2,r2,4
    44cc:	1007883a 	mov	r3,r2
    44d0:	e0bffc17 	ldw	r2,-16(fp)
    44d4:	10800817 	ldw	r2,32(r2)
    44d8:	18800035 	stwio	r2,0(r3)
    44dc:	e0bffa17 	ldw	r2,-24(fp)
    44e0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    44e4:	e0bff817 	ldw	r2,-32(fp)
    44e8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    44ec:	e0bffe17 	ldw	r2,-8(fp)
    44f0:	0080100e 	bge	zero,r2,4534 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    44f4:	e0bfff17 	ldw	r2,-4(fp)
    44f8:	1090000c 	andi	r2,r2,16384
    44fc:	1000101e 	bne	r2,zero,4540 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    4500:	0001883a 	nop
    4504:	e0bffc17 	ldw	r2,-16(fp)
    4508:	10c00d17 	ldw	r3,52(r2)
    450c:	e0bff517 	ldw	r2,-44(fp)
    4510:	1880051e 	bne	r3,r2,4528 <altera_avalon_jtag_uart_write+0x1b8>
    4514:	e0bffc17 	ldw	r2,-16(fp)
    4518:	10c00917 	ldw	r3,36(r2)
    451c:	e0bffc17 	ldw	r2,-16(fp)
    4520:	10800117 	ldw	r2,4(r2)
    4524:	18bff736 	bltu	r3,r2,4504 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    4528:	e0bffc17 	ldw	r2,-16(fp)
    452c:	10800917 	ldw	r2,36(r2)
    4530:	1000051e 	bne	r2,zero,4548 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    4534:	e0bffe17 	ldw	r2,-8(fp)
    4538:	00bfd016 	blt	zero,r2,447c <altera_avalon_jtag_uart_write+0x10c>
    453c:	00000306 	br	454c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    4540:	0001883a 	nop
    4544:	00000106 	br	454c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    4548:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    454c:	e0fffd17 	ldw	r3,-12(fp)
    4550:	e0bff717 	ldw	r2,-36(fp)
    4554:	18800426 	beq	r3,r2,4568 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    4558:	e0fffd17 	ldw	r3,-12(fp)
    455c:	e0bff717 	ldw	r2,-36(fp)
    4560:	1885c83a 	sub	r2,r3,r2
    4564:	00000606 	br	4580 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    4568:	e0bfff17 	ldw	r2,-4(fp)
    456c:	1090000c 	andi	r2,r2,16384
    4570:	10000226 	beq	r2,zero,457c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    4574:	00bffd44 	movi	r2,-11
    4578:	00000106 	br	4580 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    457c:	00bffec4 	movi	r2,-5
}
    4580:	e037883a 	mov	sp,fp
    4584:	dfc00117 	ldw	ra,4(sp)
    4588:	df000017 	ldw	fp,0(sp)
    458c:	dec00204 	addi	sp,sp,8
    4590:	f800283a 	ret

00004594 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    4594:	defffa04 	addi	sp,sp,-24
    4598:	dfc00515 	stw	ra,20(sp)
    459c:	df000415 	stw	fp,16(sp)
    45a0:	df000404 	addi	fp,sp,16
    45a4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    45a8:	0007883a 	mov	r3,zero
    45ac:	e0bfff17 	ldw	r2,-4(fp)
    45b0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    45b4:	e0bfff17 	ldw	r2,-4(fp)
    45b8:	10800104 	addi	r2,r2,4
    45bc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    45c0:	0005303a 	rdctl	r2,status
    45c4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    45c8:	e0fffd17 	ldw	r3,-12(fp)
    45cc:	00bfff84 	movi	r2,-2
    45d0:	1884703a 	and	r2,r3,r2
    45d4:	1001703a 	wrctl	status,r2
  
  return context;
    45d8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    45dc:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    45e0:	00051280 	call	5128 <alt_tick>
    45e4:	e0bffc17 	ldw	r2,-16(fp)
    45e8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    45ec:	e0bffe17 	ldw	r2,-8(fp)
    45f0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    45f4:	0001883a 	nop
    45f8:	e037883a 	mov	sp,fp
    45fc:	dfc00117 	ldw	ra,4(sp)
    4600:	df000017 	ldw	fp,0(sp)
    4604:	dec00204 	addi	sp,sp,8
    4608:	f800283a 	ret

0000460c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    460c:	defff804 	addi	sp,sp,-32
    4610:	dfc00715 	stw	ra,28(sp)
    4614:	df000615 	stw	fp,24(sp)
    4618:	df000604 	addi	fp,sp,24
    461c:	e13ffc15 	stw	r4,-16(fp)
    4620:	e17ffd15 	stw	r5,-12(fp)
    4624:	e1bffe15 	stw	r6,-8(fp)
    4628:	e1ffff15 	stw	r7,-4(fp)
    462c:	e0bfff17 	ldw	r2,-4(fp)
    4630:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    4634:	00800074 	movhi	r2,1
    4638:	10a3a904 	addi	r2,r2,-29020
    463c:	10800017 	ldw	r2,0(r2)
    4640:	1000041e 	bne	r2,zero,4654 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    4644:	00800074 	movhi	r2,1
    4648:	10a3a904 	addi	r2,r2,-29020
    464c:	e0fffb17 	ldw	r3,-20(fp)
    4650:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    4654:	e0bffc17 	ldw	r2,-16(fp)
    4658:	10800104 	addi	r2,r2,4
    465c:	00c001c4 	movi	r3,7
    4660:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    4664:	d8000015 	stw	zero,0(sp)
    4668:	e1fffc17 	ldw	r7,-16(fp)
    466c:	01800034 	movhi	r6,0
    4670:	31916504 	addi	r6,r6,17812
    4674:	e17ffe17 	ldw	r5,-8(fp)
    4678:	e13ffd17 	ldw	r4,-12(fp)
    467c:	0004a080 	call	4a08 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    4680:	0001883a 	nop
    4684:	e037883a 	mov	sp,fp
    4688:	dfc00117 	ldw	ra,4(sp)
    468c:	df000017 	ldw	fp,0(sp)
    4690:	dec00204 	addi	sp,sp,8
    4694:	f800283a 	ret

00004698 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    4698:	defff504 	addi	sp,sp,-44
    469c:	df000a15 	stw	fp,40(sp)
    46a0:	df000a04 	addi	fp,sp,40
    46a4:	e13ffc15 	stw	r4,-16(fp)
    46a8:	e17ffd15 	stw	r5,-12(fp)
    46ac:	e1bffe15 	stw	r6,-8(fp)
    46b0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    46b4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    46b8:	00800074 	movhi	r2,1
    46bc:	10a3a904 	addi	r2,r2,-29020
    46c0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    46c4:	10003f26 	beq	r2,zero,47c4 <alt_alarm_start+0x12c>
  {
    if (alarm)
    46c8:	e0bffc17 	ldw	r2,-16(fp)
    46cc:	10003b26 	beq	r2,zero,47bc <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    46d0:	e0bffc17 	ldw	r2,-16(fp)
    46d4:	e0fffe17 	ldw	r3,-8(fp)
    46d8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    46dc:	e0bffc17 	ldw	r2,-16(fp)
    46e0:	e0ffff17 	ldw	r3,-4(fp)
    46e4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    46e8:	0005303a 	rdctl	r2,status
    46ec:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    46f0:	e0fff917 	ldw	r3,-28(fp)
    46f4:	00bfff84 	movi	r2,-2
    46f8:	1884703a 	and	r2,r3,r2
    46fc:	1001703a 	wrctl	status,r2
  
  return context;
    4700:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    4704:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    4708:	00800074 	movhi	r2,1
    470c:	10a3aa04 	addi	r2,r2,-29016
    4710:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    4714:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    4718:	e0fffd17 	ldw	r3,-12(fp)
    471c:	e0bff617 	ldw	r2,-40(fp)
    4720:	1885883a 	add	r2,r3,r2
    4724:	10c00044 	addi	r3,r2,1
    4728:	e0bffc17 	ldw	r2,-16(fp)
    472c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    4730:	e0bffc17 	ldw	r2,-16(fp)
    4734:	10c00217 	ldw	r3,8(r2)
    4738:	e0bff617 	ldw	r2,-40(fp)
    473c:	1880042e 	bgeu	r3,r2,4750 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    4740:	e0bffc17 	ldw	r2,-16(fp)
    4744:	00c00044 	movi	r3,1
    4748:	10c00405 	stb	r3,16(r2)
    474c:	00000206 	br	4758 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    4750:	e0bffc17 	ldw	r2,-16(fp)
    4754:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    4758:	e0fffc17 	ldw	r3,-16(fp)
    475c:	00800034 	movhi	r2,0
    4760:	109d0404 	addi	r2,r2,29712
    4764:	e0bffa15 	stw	r2,-24(fp)
    4768:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    476c:	e0bffb17 	ldw	r2,-20(fp)
    4770:	e0fffa17 	ldw	r3,-24(fp)
    4774:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    4778:	e0bffa17 	ldw	r2,-24(fp)
    477c:	10c00017 	ldw	r3,0(r2)
    4780:	e0bffb17 	ldw	r2,-20(fp)
    4784:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    4788:	e0bffa17 	ldw	r2,-24(fp)
    478c:	10800017 	ldw	r2,0(r2)
    4790:	e0fffb17 	ldw	r3,-20(fp)
    4794:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    4798:	e0bffa17 	ldw	r2,-24(fp)
    479c:	e0fffb17 	ldw	r3,-20(fp)
    47a0:	10c00015 	stw	r3,0(r2)
    47a4:	e0bff817 	ldw	r2,-32(fp)
    47a8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    47ac:	e0bff717 	ldw	r2,-36(fp)
    47b0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    47b4:	0005883a 	mov	r2,zero
    47b8:	00000306 	br	47c8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    47bc:	00bffa84 	movi	r2,-22
    47c0:	00000106 	br	47c8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    47c4:	00bfde84 	movi	r2,-134
  }
}
    47c8:	e037883a 	mov	sp,fp
    47cc:	df000017 	ldw	fp,0(sp)
    47d0:	dec00104 	addi	sp,sp,4
    47d4:	f800283a 	ret

000047d8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    47d8:	defffe04 	addi	sp,sp,-8
    47dc:	df000115 	stw	fp,4(sp)
    47e0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    47e4:	e03fff15 	stw	zero,-4(fp)
    47e8:	00000506 	br	4800 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    47ec:	e0bfff17 	ldw	r2,-4(fp)
    47f0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    47f4:	e0bfff17 	ldw	r2,-4(fp)
    47f8:	10800804 	addi	r2,r2,32
    47fc:	e0bfff15 	stw	r2,-4(fp)
    4800:	e0bfff17 	ldw	r2,-4(fp)
    4804:	10820030 	cmpltui	r2,r2,2048
    4808:	103ff81e 	bne	r2,zero,47ec <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    480c:	0001883a 	nop
    4810:	e037883a 	mov	sp,fp
    4814:	df000017 	ldw	fp,0(sp)
    4818:	dec00104 	addi	sp,sp,4
    481c:	f800283a 	ret

00004820 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4820:	defffe04 	addi	sp,sp,-8
    4824:	dfc00115 	stw	ra,4(sp)
    4828:	df000015 	stw	fp,0(sp)
    482c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4830:	00800034 	movhi	r2,0
    4834:	109d0104 	addi	r2,r2,29700
    4838:	10800017 	ldw	r2,0(r2)
    483c:	10000526 	beq	r2,zero,4854 <alt_get_errno+0x34>
    4840:	00800034 	movhi	r2,0
    4844:	109d0104 	addi	r2,r2,29700
    4848:	10800017 	ldw	r2,0(r2)
    484c:	103ee83a 	callr	r2
    4850:	00000206 	br	485c <alt_get_errno+0x3c>
    4854:	00800074 	movhi	r2,1
    4858:	10a3a404 	addi	r2,r2,-29040
}
    485c:	e037883a 	mov	sp,fp
    4860:	dfc00117 	ldw	ra,4(sp)
    4864:	df000017 	ldw	fp,0(sp)
    4868:	dec00204 	addi	sp,sp,8
    486c:	f800283a 	ret

00004870 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    4870:	defffa04 	addi	sp,sp,-24
    4874:	dfc00515 	stw	ra,20(sp)
    4878:	df000415 	stw	fp,16(sp)
    487c:	df000404 	addi	fp,sp,16
    4880:	e13ffe15 	stw	r4,-8(fp)
    4884:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    4888:	e0bffe17 	ldw	r2,-8(fp)
    488c:	10000326 	beq	r2,zero,489c <alt_dev_llist_insert+0x2c>
    4890:	e0bffe17 	ldw	r2,-8(fp)
    4894:	10800217 	ldw	r2,8(r2)
    4898:	1000061e 	bne	r2,zero,48b4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    489c:	00048200 	call	4820 <alt_get_errno>
    48a0:	1007883a 	mov	r3,r2
    48a4:	00800584 	movi	r2,22
    48a8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    48ac:	00bffa84 	movi	r2,-22
    48b0:	00001306 	br	4900 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    48b4:	e0bffe17 	ldw	r2,-8(fp)
    48b8:	e0ffff17 	ldw	r3,-4(fp)
    48bc:	e0fffc15 	stw	r3,-16(fp)
    48c0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    48c4:	e0bffd17 	ldw	r2,-12(fp)
    48c8:	e0fffc17 	ldw	r3,-16(fp)
    48cc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    48d0:	e0bffc17 	ldw	r2,-16(fp)
    48d4:	10c00017 	ldw	r3,0(r2)
    48d8:	e0bffd17 	ldw	r2,-12(fp)
    48dc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    48e0:	e0bffc17 	ldw	r2,-16(fp)
    48e4:	10800017 	ldw	r2,0(r2)
    48e8:	e0fffd17 	ldw	r3,-12(fp)
    48ec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    48f0:	e0bffc17 	ldw	r2,-16(fp)
    48f4:	e0fffd17 	ldw	r3,-12(fp)
    48f8:	10c00015 	stw	r3,0(r2)

  return 0;  
    48fc:	0005883a 	mov	r2,zero
}
    4900:	e037883a 	mov	sp,fp
    4904:	dfc00117 	ldw	ra,4(sp)
    4908:	df000017 	ldw	fp,0(sp)
    490c:	dec00204 	addi	sp,sp,8
    4910:	f800283a 	ret

00004914 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    4914:	defffd04 	addi	sp,sp,-12
    4918:	dfc00215 	stw	ra,8(sp)
    491c:	df000115 	stw	fp,4(sp)
    4920:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    4924:	00800034 	movhi	r2,0
    4928:	10965a04 	addi	r2,r2,22888
    492c:	e0bfff15 	stw	r2,-4(fp)
    4930:	00000606 	br	494c <_do_ctors+0x38>
        (*ctor) (); 
    4934:	e0bfff17 	ldw	r2,-4(fp)
    4938:	10800017 	ldw	r2,0(r2)
    493c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    4940:	e0bfff17 	ldw	r2,-4(fp)
    4944:	10bfff04 	addi	r2,r2,-4
    4948:	e0bfff15 	stw	r2,-4(fp)
    494c:	e0ffff17 	ldw	r3,-4(fp)
    4950:	00800034 	movhi	r2,0
    4954:	10965b04 	addi	r2,r2,22892
    4958:	18bff62e 	bgeu	r3,r2,4934 <_do_ctors+0x20>
        (*ctor) (); 
}
    495c:	0001883a 	nop
    4960:	e037883a 	mov	sp,fp
    4964:	dfc00117 	ldw	ra,4(sp)
    4968:	df000017 	ldw	fp,0(sp)
    496c:	dec00204 	addi	sp,sp,8
    4970:	f800283a 	ret

00004974 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    4974:	defffd04 	addi	sp,sp,-12
    4978:	dfc00215 	stw	ra,8(sp)
    497c:	df000115 	stw	fp,4(sp)
    4980:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    4984:	00800034 	movhi	r2,0
    4988:	10965a04 	addi	r2,r2,22888
    498c:	e0bfff15 	stw	r2,-4(fp)
    4990:	00000606 	br	49ac <_do_dtors+0x38>
        (*dtor) (); 
    4994:	e0bfff17 	ldw	r2,-4(fp)
    4998:	10800017 	ldw	r2,0(r2)
    499c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    49a0:	e0bfff17 	ldw	r2,-4(fp)
    49a4:	10bfff04 	addi	r2,r2,-4
    49a8:	e0bfff15 	stw	r2,-4(fp)
    49ac:	e0ffff17 	ldw	r3,-4(fp)
    49b0:	00800034 	movhi	r2,0
    49b4:	10965b04 	addi	r2,r2,22892
    49b8:	18bff62e 	bgeu	r3,r2,4994 <_do_dtors+0x20>
        (*dtor) (); 
}
    49bc:	0001883a 	nop
    49c0:	e037883a 	mov	sp,fp
    49c4:	dfc00117 	ldw	ra,4(sp)
    49c8:	df000017 	ldw	fp,0(sp)
    49cc:	dec00204 	addi	sp,sp,8
    49d0:	f800283a 	ret

000049d4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    49d4:	defffe04 	addi	sp,sp,-8
    49d8:	dfc00115 	stw	ra,4(sp)
    49dc:	df000015 	stw	fp,0(sp)
    49e0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    49e4:	01440004 	movi	r5,4096
    49e8:	0009883a 	mov	r4,zero
    49ec:	00054ac0 	call	54ac <alt_icache_flush>
#endif
}
    49f0:	0001883a 	nop
    49f4:	e037883a 	mov	sp,fp
    49f8:	dfc00117 	ldw	ra,4(sp)
    49fc:	df000017 	ldw	fp,0(sp)
    4a00:	dec00204 	addi	sp,sp,8
    4a04:	f800283a 	ret

00004a08 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    4a08:	defff904 	addi	sp,sp,-28
    4a0c:	dfc00615 	stw	ra,24(sp)
    4a10:	df000515 	stw	fp,20(sp)
    4a14:	df000504 	addi	fp,sp,20
    4a18:	e13ffc15 	stw	r4,-16(fp)
    4a1c:	e17ffd15 	stw	r5,-12(fp)
    4a20:	e1bffe15 	stw	r6,-8(fp)
    4a24:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    4a28:	e0800217 	ldw	r2,8(fp)
    4a2c:	d8800015 	stw	r2,0(sp)
    4a30:	e1ffff17 	ldw	r7,-4(fp)
    4a34:	e1bffe17 	ldw	r6,-8(fp)
    4a38:	e17ffd17 	ldw	r5,-12(fp)
    4a3c:	e13ffc17 	ldw	r4,-16(fp)
    4a40:	0004be80 	call	4be8 <alt_iic_isr_register>
}  
    4a44:	e037883a 	mov	sp,fp
    4a48:	dfc00117 	ldw	ra,4(sp)
    4a4c:	df000017 	ldw	fp,0(sp)
    4a50:	dec00204 	addi	sp,sp,8
    4a54:	f800283a 	ret

00004a58 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    4a58:	defff904 	addi	sp,sp,-28
    4a5c:	df000615 	stw	fp,24(sp)
    4a60:	df000604 	addi	fp,sp,24
    4a64:	e13ffe15 	stw	r4,-8(fp)
    4a68:	e17fff15 	stw	r5,-4(fp)
    4a6c:	e0bfff17 	ldw	r2,-4(fp)
    4a70:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4a74:	0005303a 	rdctl	r2,status
    4a78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4a7c:	e0fffb17 	ldw	r3,-20(fp)
    4a80:	00bfff84 	movi	r2,-2
    4a84:	1884703a 	and	r2,r3,r2
    4a88:	1001703a 	wrctl	status,r2
  
  return context;
    4a8c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    4a90:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    4a94:	00c00044 	movi	r3,1
    4a98:	e0bffa17 	ldw	r2,-24(fp)
    4a9c:	1884983a 	sll	r2,r3,r2
    4aa0:	1007883a 	mov	r3,r2
    4aa4:	00800074 	movhi	r2,1
    4aa8:	10a3a804 	addi	r2,r2,-29024
    4aac:	10800017 	ldw	r2,0(r2)
    4ab0:	1886b03a 	or	r3,r3,r2
    4ab4:	00800074 	movhi	r2,1
    4ab8:	10a3a804 	addi	r2,r2,-29024
    4abc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    4ac0:	00800074 	movhi	r2,1
    4ac4:	10a3a804 	addi	r2,r2,-29024
    4ac8:	10800017 	ldw	r2,0(r2)
    4acc:	100170fa 	wrctl	ienable,r2
    4ad0:	e0bffc17 	ldw	r2,-16(fp)
    4ad4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4ad8:	e0bffd17 	ldw	r2,-12(fp)
    4adc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    4ae0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    4ae4:	0001883a 	nop
}
    4ae8:	e037883a 	mov	sp,fp
    4aec:	df000017 	ldw	fp,0(sp)
    4af0:	dec00104 	addi	sp,sp,4
    4af4:	f800283a 	ret

00004af8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    4af8:	defff904 	addi	sp,sp,-28
    4afc:	df000615 	stw	fp,24(sp)
    4b00:	df000604 	addi	fp,sp,24
    4b04:	e13ffe15 	stw	r4,-8(fp)
    4b08:	e17fff15 	stw	r5,-4(fp)
    4b0c:	e0bfff17 	ldw	r2,-4(fp)
    4b10:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4b14:	0005303a 	rdctl	r2,status
    4b18:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4b1c:	e0fffb17 	ldw	r3,-20(fp)
    4b20:	00bfff84 	movi	r2,-2
    4b24:	1884703a 	and	r2,r3,r2
    4b28:	1001703a 	wrctl	status,r2
  
  return context;
    4b2c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    4b30:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    4b34:	00c00044 	movi	r3,1
    4b38:	e0bffa17 	ldw	r2,-24(fp)
    4b3c:	1884983a 	sll	r2,r3,r2
    4b40:	0084303a 	nor	r2,zero,r2
    4b44:	1007883a 	mov	r3,r2
    4b48:	00800074 	movhi	r2,1
    4b4c:	10a3a804 	addi	r2,r2,-29024
    4b50:	10800017 	ldw	r2,0(r2)
    4b54:	1886703a 	and	r3,r3,r2
    4b58:	00800074 	movhi	r2,1
    4b5c:	10a3a804 	addi	r2,r2,-29024
    4b60:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    4b64:	00800074 	movhi	r2,1
    4b68:	10a3a804 	addi	r2,r2,-29024
    4b6c:	10800017 	ldw	r2,0(r2)
    4b70:	100170fa 	wrctl	ienable,r2
    4b74:	e0bffc17 	ldw	r2,-16(fp)
    4b78:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4b7c:	e0bffd17 	ldw	r2,-12(fp)
    4b80:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    4b84:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    4b88:	0001883a 	nop
}
    4b8c:	e037883a 	mov	sp,fp
    4b90:	df000017 	ldw	fp,0(sp)
    4b94:	dec00104 	addi	sp,sp,4
    4b98:	f800283a 	ret

00004b9c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    4b9c:	defffc04 	addi	sp,sp,-16
    4ba0:	df000315 	stw	fp,12(sp)
    4ba4:	df000304 	addi	fp,sp,12
    4ba8:	e13ffe15 	stw	r4,-8(fp)
    4bac:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    4bb0:	000530fa 	rdctl	r2,ienable
    4bb4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    4bb8:	00c00044 	movi	r3,1
    4bbc:	e0bfff17 	ldw	r2,-4(fp)
    4bc0:	1884983a 	sll	r2,r3,r2
    4bc4:	1007883a 	mov	r3,r2
    4bc8:	e0bffd17 	ldw	r2,-12(fp)
    4bcc:	1884703a 	and	r2,r3,r2
    4bd0:	1004c03a 	cmpne	r2,r2,zero
    4bd4:	10803fcc 	andi	r2,r2,255
}
    4bd8:	e037883a 	mov	sp,fp
    4bdc:	df000017 	ldw	fp,0(sp)
    4be0:	dec00104 	addi	sp,sp,4
    4be4:	f800283a 	ret

00004be8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    4be8:	defff504 	addi	sp,sp,-44
    4bec:	dfc00a15 	stw	ra,40(sp)
    4bf0:	df000915 	stw	fp,36(sp)
    4bf4:	df000904 	addi	fp,sp,36
    4bf8:	e13ffc15 	stw	r4,-16(fp)
    4bfc:	e17ffd15 	stw	r5,-12(fp)
    4c00:	e1bffe15 	stw	r6,-8(fp)
    4c04:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    4c08:	00bffa84 	movi	r2,-22
    4c0c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    4c10:	e0bffd17 	ldw	r2,-12(fp)
    4c14:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    4c18:	e0bff817 	ldw	r2,-32(fp)
    4c1c:	10800808 	cmpgei	r2,r2,32
    4c20:	1000271e 	bne	r2,zero,4cc0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4c24:	0005303a 	rdctl	r2,status
    4c28:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4c2c:	e0fffb17 	ldw	r3,-20(fp)
    4c30:	00bfff84 	movi	r2,-2
    4c34:	1884703a 	and	r2,r3,r2
    4c38:	1001703a 	wrctl	status,r2
  
  return context;
    4c3c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    4c40:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    4c44:	00800074 	movhi	r2,1
    4c48:	10a3b604 	addi	r2,r2,-28968
    4c4c:	e0fff817 	ldw	r3,-32(fp)
    4c50:	180690fa 	slli	r3,r3,3
    4c54:	10c5883a 	add	r2,r2,r3
    4c58:	e0fffe17 	ldw	r3,-8(fp)
    4c5c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    4c60:	00800074 	movhi	r2,1
    4c64:	10a3b604 	addi	r2,r2,-28968
    4c68:	e0fff817 	ldw	r3,-32(fp)
    4c6c:	180690fa 	slli	r3,r3,3
    4c70:	10c5883a 	add	r2,r2,r3
    4c74:	10800104 	addi	r2,r2,4
    4c78:	e0ffff17 	ldw	r3,-4(fp)
    4c7c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    4c80:	e0bffe17 	ldw	r2,-8(fp)
    4c84:	10000526 	beq	r2,zero,4c9c <alt_iic_isr_register+0xb4>
    4c88:	e0bff817 	ldw	r2,-32(fp)
    4c8c:	100b883a 	mov	r5,r2
    4c90:	e13ffc17 	ldw	r4,-16(fp)
    4c94:	0004a580 	call	4a58 <alt_ic_irq_enable>
    4c98:	00000406 	br	4cac <alt_iic_isr_register+0xc4>
    4c9c:	e0bff817 	ldw	r2,-32(fp)
    4ca0:	100b883a 	mov	r5,r2
    4ca4:	e13ffc17 	ldw	r4,-16(fp)
    4ca8:	0004af80 	call	4af8 <alt_ic_irq_disable>
    4cac:	e0bff715 	stw	r2,-36(fp)
    4cb0:	e0bffa17 	ldw	r2,-24(fp)
    4cb4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4cb8:	e0bff917 	ldw	r2,-28(fp)
    4cbc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    4cc0:	e0bff717 	ldw	r2,-36(fp)
}
    4cc4:	e037883a 	mov	sp,fp
    4cc8:	dfc00117 	ldw	ra,4(sp)
    4ccc:	df000017 	ldw	fp,0(sp)
    4cd0:	dec00204 	addi	sp,sp,8
    4cd4:	f800283a 	ret

00004cd8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    4cd8:	defff904 	addi	sp,sp,-28
    4cdc:	dfc00615 	stw	ra,24(sp)
    4ce0:	df000515 	stw	fp,20(sp)
    4ce4:	df000504 	addi	fp,sp,20
    4ce8:	e13ffc15 	stw	r4,-16(fp)
    4cec:	e17ffd15 	stw	r5,-12(fp)
    4cf0:	e1bffe15 	stw	r6,-8(fp)
    4cf4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    4cf8:	e1bfff17 	ldw	r6,-4(fp)
    4cfc:	e17ffe17 	ldw	r5,-8(fp)
    4d00:	e13ffd17 	ldw	r4,-12(fp)
    4d04:	0004f340 	call	4f34 <open>
    4d08:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    4d0c:	e0bffb17 	ldw	r2,-20(fp)
    4d10:	10001c16 	blt	r2,zero,4d84 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    4d14:	00800034 	movhi	r2,0
    4d18:	10988004 	addi	r2,r2,25088
    4d1c:	e0fffb17 	ldw	r3,-20(fp)
    4d20:	18c00324 	muli	r3,r3,12
    4d24:	10c5883a 	add	r2,r2,r3
    4d28:	10c00017 	ldw	r3,0(r2)
    4d2c:	e0bffc17 	ldw	r2,-16(fp)
    4d30:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    4d34:	00800034 	movhi	r2,0
    4d38:	10988004 	addi	r2,r2,25088
    4d3c:	e0fffb17 	ldw	r3,-20(fp)
    4d40:	18c00324 	muli	r3,r3,12
    4d44:	10c5883a 	add	r2,r2,r3
    4d48:	10800104 	addi	r2,r2,4
    4d4c:	10c00017 	ldw	r3,0(r2)
    4d50:	e0bffc17 	ldw	r2,-16(fp)
    4d54:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    4d58:	00800034 	movhi	r2,0
    4d5c:	10988004 	addi	r2,r2,25088
    4d60:	e0fffb17 	ldw	r3,-20(fp)
    4d64:	18c00324 	muli	r3,r3,12
    4d68:	10c5883a 	add	r2,r2,r3
    4d6c:	10800204 	addi	r2,r2,8
    4d70:	10c00017 	ldw	r3,0(r2)
    4d74:	e0bffc17 	ldw	r2,-16(fp)
    4d78:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    4d7c:	e13ffb17 	ldw	r4,-20(fp)
    4d80:	00037ec0 	call	37ec <alt_release_fd>
  }
} 
    4d84:	0001883a 	nop
    4d88:	e037883a 	mov	sp,fp
    4d8c:	dfc00117 	ldw	ra,4(sp)
    4d90:	df000017 	ldw	fp,0(sp)
    4d94:	dec00204 	addi	sp,sp,8
    4d98:	f800283a 	ret

00004d9c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    4d9c:	defffb04 	addi	sp,sp,-20
    4da0:	dfc00415 	stw	ra,16(sp)
    4da4:	df000315 	stw	fp,12(sp)
    4da8:	df000304 	addi	fp,sp,12
    4dac:	e13ffd15 	stw	r4,-12(fp)
    4db0:	e17ffe15 	stw	r5,-8(fp)
    4db4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    4db8:	01c07fc4 	movi	r7,511
    4dbc:	01800044 	movi	r6,1
    4dc0:	e17ffd17 	ldw	r5,-12(fp)
    4dc4:	01000034 	movhi	r4,0
    4dc8:	21188304 	addi	r4,r4,25100
    4dcc:	0004cd80 	call	4cd8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    4dd0:	01c07fc4 	movi	r7,511
    4dd4:	000d883a 	mov	r6,zero
    4dd8:	e17ffe17 	ldw	r5,-8(fp)
    4ddc:	01000034 	movhi	r4,0
    4de0:	21188004 	addi	r4,r4,25088
    4de4:	0004cd80 	call	4cd8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    4de8:	01c07fc4 	movi	r7,511
    4dec:	01800044 	movi	r6,1
    4df0:	e17fff17 	ldw	r5,-4(fp)
    4df4:	01000034 	movhi	r4,0
    4df8:	21188604 	addi	r4,r4,25112
    4dfc:	0004cd80 	call	4cd8 <alt_open_fd>
}  
    4e00:	0001883a 	nop
    4e04:	e037883a 	mov	sp,fp
    4e08:	dfc00117 	ldw	ra,4(sp)
    4e0c:	df000017 	ldw	fp,0(sp)
    4e10:	dec00204 	addi	sp,sp,8
    4e14:	f800283a 	ret

00004e18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4e18:	defffe04 	addi	sp,sp,-8
    4e1c:	dfc00115 	stw	ra,4(sp)
    4e20:	df000015 	stw	fp,0(sp)
    4e24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4e28:	00800034 	movhi	r2,0
    4e2c:	109d0104 	addi	r2,r2,29700
    4e30:	10800017 	ldw	r2,0(r2)
    4e34:	10000526 	beq	r2,zero,4e4c <alt_get_errno+0x34>
    4e38:	00800034 	movhi	r2,0
    4e3c:	109d0104 	addi	r2,r2,29700
    4e40:	10800017 	ldw	r2,0(r2)
    4e44:	103ee83a 	callr	r2
    4e48:	00000206 	br	4e54 <alt_get_errno+0x3c>
    4e4c:	00800074 	movhi	r2,1
    4e50:	10a3a404 	addi	r2,r2,-29040
}
    4e54:	e037883a 	mov	sp,fp
    4e58:	dfc00117 	ldw	ra,4(sp)
    4e5c:	df000017 	ldw	fp,0(sp)
    4e60:	dec00204 	addi	sp,sp,8
    4e64:	f800283a 	ret

00004e68 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    4e68:	defffd04 	addi	sp,sp,-12
    4e6c:	df000215 	stw	fp,8(sp)
    4e70:	df000204 	addi	fp,sp,8
    4e74:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    4e78:	e0bfff17 	ldw	r2,-4(fp)
    4e7c:	10800217 	ldw	r2,8(r2)
    4e80:	10d00034 	orhi	r3,r2,16384
    4e84:	e0bfff17 	ldw	r2,-4(fp)
    4e88:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    4e8c:	e03ffe15 	stw	zero,-8(fp)
    4e90:	00001d06 	br	4f08 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    4e94:	00800034 	movhi	r2,0
    4e98:	10988004 	addi	r2,r2,25088
    4e9c:	e0fffe17 	ldw	r3,-8(fp)
    4ea0:	18c00324 	muli	r3,r3,12
    4ea4:	10c5883a 	add	r2,r2,r3
    4ea8:	10c00017 	ldw	r3,0(r2)
    4eac:	e0bfff17 	ldw	r2,-4(fp)
    4eb0:	10800017 	ldw	r2,0(r2)
    4eb4:	1880111e 	bne	r3,r2,4efc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    4eb8:	00800034 	movhi	r2,0
    4ebc:	10988004 	addi	r2,r2,25088
    4ec0:	e0fffe17 	ldw	r3,-8(fp)
    4ec4:	18c00324 	muli	r3,r3,12
    4ec8:	10c5883a 	add	r2,r2,r3
    4ecc:	10800204 	addi	r2,r2,8
    4ed0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    4ed4:	1000090e 	bge	r2,zero,4efc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    4ed8:	e0bffe17 	ldw	r2,-8(fp)
    4edc:	10c00324 	muli	r3,r2,12
    4ee0:	00800034 	movhi	r2,0
    4ee4:	10988004 	addi	r2,r2,25088
    4ee8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    4eec:	e0bfff17 	ldw	r2,-4(fp)
    4ef0:	18800226 	beq	r3,r2,4efc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    4ef4:	00bffcc4 	movi	r2,-13
    4ef8:	00000a06 	br	4f24 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    4efc:	e0bffe17 	ldw	r2,-8(fp)
    4f00:	10800044 	addi	r2,r2,1
    4f04:	e0bffe15 	stw	r2,-8(fp)
    4f08:	00800034 	movhi	r2,0
    4f0c:	109d0004 	addi	r2,r2,29696
    4f10:	10800017 	ldw	r2,0(r2)
    4f14:	1007883a 	mov	r3,r2
    4f18:	e0bffe17 	ldw	r2,-8(fp)
    4f1c:	18bfdd2e 	bgeu	r3,r2,4e94 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    4f20:	0005883a 	mov	r2,zero
}
    4f24:	e037883a 	mov	sp,fp
    4f28:	df000017 	ldw	fp,0(sp)
    4f2c:	dec00104 	addi	sp,sp,4
    4f30:	f800283a 	ret

00004f34 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    4f34:	defff604 	addi	sp,sp,-40
    4f38:	dfc00915 	stw	ra,36(sp)
    4f3c:	df000815 	stw	fp,32(sp)
    4f40:	df000804 	addi	fp,sp,32
    4f44:	e13ffd15 	stw	r4,-12(fp)
    4f48:	e17ffe15 	stw	r5,-8(fp)
    4f4c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    4f50:	00bfffc4 	movi	r2,-1
    4f54:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    4f58:	00bffb44 	movi	r2,-19
    4f5c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    4f60:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    4f64:	01400034 	movhi	r5,0
    4f68:	295cfe04 	addi	r5,r5,29688
    4f6c:	e13ffd17 	ldw	r4,-12(fp)
    4f70:	00052540 	call	5254 <alt_find_dev>
    4f74:	e0bff815 	stw	r2,-32(fp)
    4f78:	e0bff817 	ldw	r2,-32(fp)
    4f7c:	1000051e 	bne	r2,zero,4f94 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    4f80:	e13ffd17 	ldw	r4,-12(fp)
    4f84:	00052e40 	call	52e4 <alt_find_file>
    4f88:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    4f8c:	00800044 	movi	r2,1
    4f90:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    4f94:	e0bff817 	ldw	r2,-32(fp)
    4f98:	10002926 	beq	r2,zero,5040 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    4f9c:	e13ff817 	ldw	r4,-32(fp)
    4fa0:	00053f80 	call	53f8 <alt_get_fd>
    4fa4:	e0bff915 	stw	r2,-28(fp)
    4fa8:	e0bff917 	ldw	r2,-28(fp)
    4fac:	1000030e 	bge	r2,zero,4fbc <open+0x88>
    {
      status = index;
    4fb0:	e0bff917 	ldw	r2,-28(fp)
    4fb4:	e0bffa15 	stw	r2,-24(fp)
    4fb8:	00002306 	br	5048 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
    4fbc:	e0bff917 	ldw	r2,-28(fp)
    4fc0:	10c00324 	muli	r3,r2,12
    4fc4:	00800034 	movhi	r2,0
    4fc8:	10988004 	addi	r2,r2,25088
    4fcc:	1885883a 	add	r2,r3,r2
    4fd0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    4fd4:	e0fffe17 	ldw	r3,-8(fp)
    4fd8:	00900034 	movhi	r2,16384
    4fdc:	10bfffc4 	addi	r2,r2,-1
    4fe0:	1886703a 	and	r3,r3,r2
    4fe4:	e0bffc17 	ldw	r2,-16(fp)
    4fe8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    4fec:	e0bffb17 	ldw	r2,-20(fp)
    4ff0:	1000051e 	bne	r2,zero,5008 <open+0xd4>
    4ff4:	e13ffc17 	ldw	r4,-16(fp)
    4ff8:	0004e680 	call	4e68 <alt_file_locked>
    4ffc:	e0bffa15 	stw	r2,-24(fp)
    5000:	e0bffa17 	ldw	r2,-24(fp)
    5004:	10001016 	blt	r2,zero,5048 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    5008:	e0bff817 	ldw	r2,-32(fp)
    500c:	10800317 	ldw	r2,12(r2)
    5010:	10000826 	beq	r2,zero,5034 <open+0x100>
    5014:	e0bff817 	ldw	r2,-32(fp)
    5018:	10800317 	ldw	r2,12(r2)
    501c:	e1ffff17 	ldw	r7,-4(fp)
    5020:	e1bffe17 	ldw	r6,-8(fp)
    5024:	e17ffd17 	ldw	r5,-12(fp)
    5028:	e13ffc17 	ldw	r4,-16(fp)
    502c:	103ee83a 	callr	r2
    5030:	00000106 	br	5038 <open+0x104>
    5034:	0005883a 	mov	r2,zero
    5038:	e0bffa15 	stw	r2,-24(fp)
    503c:	00000206 	br	5048 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
    5040:	00bffb44 	movi	r2,-19
    5044:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    5048:	e0bffa17 	ldw	r2,-24(fp)
    504c:	1000090e 	bge	r2,zero,5074 <open+0x140>
  {
    alt_release_fd (index);  
    5050:	e13ff917 	ldw	r4,-28(fp)
    5054:	00037ec0 	call	37ec <alt_release_fd>
    ALT_ERRNO = -status;
    5058:	0004e180 	call	4e18 <alt_get_errno>
    505c:	1007883a 	mov	r3,r2
    5060:	e0bffa17 	ldw	r2,-24(fp)
    5064:	0085c83a 	sub	r2,zero,r2
    5068:	18800015 	stw	r2,0(r3)
    return -1;
    506c:	00bfffc4 	movi	r2,-1
    5070:	00000106 	br	5078 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    5074:	e0bff917 	ldw	r2,-28(fp)
}
    5078:	e037883a 	mov	sp,fp
    507c:	dfc00117 	ldw	ra,4(sp)
    5080:	df000017 	ldw	fp,0(sp)
    5084:	dec00204 	addi	sp,sp,8
    5088:	f800283a 	ret

0000508c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    508c:	defffa04 	addi	sp,sp,-24
    5090:	df000515 	stw	fp,20(sp)
    5094:	df000504 	addi	fp,sp,20
    5098:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    509c:	0005303a 	rdctl	r2,status
    50a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    50a4:	e0fffc17 	ldw	r3,-16(fp)
    50a8:	00bfff84 	movi	r2,-2
    50ac:	1884703a 	and	r2,r3,r2
    50b0:	1001703a 	wrctl	status,r2
  
  return context;
    50b4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    50b8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    50bc:	e0bfff17 	ldw	r2,-4(fp)
    50c0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    50c4:	e0bffd17 	ldw	r2,-12(fp)
    50c8:	10800017 	ldw	r2,0(r2)
    50cc:	e0fffd17 	ldw	r3,-12(fp)
    50d0:	18c00117 	ldw	r3,4(r3)
    50d4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    50d8:	e0bffd17 	ldw	r2,-12(fp)
    50dc:	10800117 	ldw	r2,4(r2)
    50e0:	e0fffd17 	ldw	r3,-12(fp)
    50e4:	18c00017 	ldw	r3,0(r3)
    50e8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    50ec:	e0bffd17 	ldw	r2,-12(fp)
    50f0:	e0fffd17 	ldw	r3,-12(fp)
    50f4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    50f8:	e0bffd17 	ldw	r2,-12(fp)
    50fc:	e0fffd17 	ldw	r3,-12(fp)
    5100:	10c00015 	stw	r3,0(r2)
    5104:	e0bffb17 	ldw	r2,-20(fp)
    5108:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    510c:	e0bffe17 	ldw	r2,-8(fp)
    5110:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    5114:	0001883a 	nop
    5118:	e037883a 	mov	sp,fp
    511c:	df000017 	ldw	fp,0(sp)
    5120:	dec00104 	addi	sp,sp,4
    5124:	f800283a 	ret

00005128 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    5128:	defffb04 	addi	sp,sp,-20
    512c:	dfc00415 	stw	ra,16(sp)
    5130:	df000315 	stw	fp,12(sp)
    5134:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    5138:	d0a00c17 	ldw	r2,-32720(gp)
    513c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    5140:	d0a6b217 	ldw	r2,-25912(gp)
    5144:	10800044 	addi	r2,r2,1
    5148:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    514c:	00002e06 	br	5208 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    5150:	e0bffd17 	ldw	r2,-12(fp)
    5154:	10800017 	ldw	r2,0(r2)
    5158:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    515c:	e0bffd17 	ldw	r2,-12(fp)
    5160:	10800403 	ldbu	r2,16(r2)
    5164:	10803fcc 	andi	r2,r2,255
    5168:	10000426 	beq	r2,zero,517c <alt_tick+0x54>
    516c:	d0a6b217 	ldw	r2,-25912(gp)
    5170:	1000021e 	bne	r2,zero,517c <alt_tick+0x54>
    {
      alarm->rollover = 0;
    5174:	e0bffd17 	ldw	r2,-12(fp)
    5178:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    517c:	e0bffd17 	ldw	r2,-12(fp)
    5180:	10800217 	ldw	r2,8(r2)
    5184:	d0e6b217 	ldw	r3,-25912(gp)
    5188:	18801d36 	bltu	r3,r2,5200 <alt_tick+0xd8>
    518c:	e0bffd17 	ldw	r2,-12(fp)
    5190:	10800403 	ldbu	r2,16(r2)
    5194:	10803fcc 	andi	r2,r2,255
    5198:	1000191e 	bne	r2,zero,5200 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    519c:	e0bffd17 	ldw	r2,-12(fp)
    51a0:	10800317 	ldw	r2,12(r2)
    51a4:	e0fffd17 	ldw	r3,-12(fp)
    51a8:	18c00517 	ldw	r3,20(r3)
    51ac:	1809883a 	mov	r4,r3
    51b0:	103ee83a 	callr	r2
    51b4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    51b8:	e0bfff17 	ldw	r2,-4(fp)
    51bc:	1000031e 	bne	r2,zero,51cc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    51c0:	e13ffd17 	ldw	r4,-12(fp)
    51c4:	000508c0 	call	508c <alt_alarm_stop>
    51c8:	00000d06 	br	5200 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    51cc:	e0bffd17 	ldw	r2,-12(fp)
    51d0:	10c00217 	ldw	r3,8(r2)
    51d4:	e0bfff17 	ldw	r2,-4(fp)
    51d8:	1887883a 	add	r3,r3,r2
    51dc:	e0bffd17 	ldw	r2,-12(fp)
    51e0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    51e4:	e0bffd17 	ldw	r2,-12(fp)
    51e8:	10c00217 	ldw	r3,8(r2)
    51ec:	d0a6b217 	ldw	r2,-25912(gp)
    51f0:	1880032e 	bgeu	r3,r2,5200 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    51f4:	e0bffd17 	ldw	r2,-12(fp)
    51f8:	00c00044 	movi	r3,1
    51fc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    5200:	e0bffe17 	ldw	r2,-8(fp)
    5204:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    5208:	e0fffd17 	ldw	r3,-12(fp)
    520c:	d0a00c04 	addi	r2,gp,-32720
    5210:	18bfcf1e 	bne	r3,r2,5150 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    5214:	0001883a 	nop
}
    5218:	0001883a 	nop
    521c:	e037883a 	mov	sp,fp
    5220:	dfc00117 	ldw	ra,4(sp)
    5224:	df000017 	ldw	fp,0(sp)
    5228:	dec00204 	addi	sp,sp,8
    522c:	f800283a 	ret

00005230 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    5230:	deffff04 	addi	sp,sp,-4
    5234:	df000015 	stw	fp,0(sp)
    5238:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    523c:	000170fa 	wrctl	ienable,zero
}
    5240:	0001883a 	nop
    5244:	e037883a 	mov	sp,fp
    5248:	df000017 	ldw	fp,0(sp)
    524c:	dec00104 	addi	sp,sp,4
    5250:	f800283a 	ret

00005254 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    5254:	defffa04 	addi	sp,sp,-24
    5258:	dfc00515 	stw	ra,20(sp)
    525c:	df000415 	stw	fp,16(sp)
    5260:	df000404 	addi	fp,sp,16
    5264:	e13ffe15 	stw	r4,-8(fp)
    5268:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    526c:	e0bfff17 	ldw	r2,-4(fp)
    5270:	10800017 	ldw	r2,0(r2)
    5274:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    5278:	e13ffe17 	ldw	r4,-8(fp)
    527c:	00003980 	call	398 <strlen>
    5280:	10800044 	addi	r2,r2,1
    5284:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    5288:	00000d06 	br	52c0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    528c:	e0bffc17 	ldw	r2,-16(fp)
    5290:	10800217 	ldw	r2,8(r2)
    5294:	e0fffd17 	ldw	r3,-12(fp)
    5298:	180d883a 	mov	r6,r3
    529c:	e17ffe17 	ldw	r5,-8(fp)
    52a0:	1009883a 	mov	r4,r2
    52a4:	00056240 	call	5624 <memcmp>
    52a8:	1000021e 	bne	r2,zero,52b4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    52ac:	e0bffc17 	ldw	r2,-16(fp)
    52b0:	00000706 	br	52d0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    52b4:	e0bffc17 	ldw	r2,-16(fp)
    52b8:	10800017 	ldw	r2,0(r2)
    52bc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    52c0:	e0fffc17 	ldw	r3,-16(fp)
    52c4:	e0bfff17 	ldw	r2,-4(fp)
    52c8:	18bff01e 	bne	r3,r2,528c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    52cc:	0005883a 	mov	r2,zero
}
    52d0:	e037883a 	mov	sp,fp
    52d4:	dfc00117 	ldw	ra,4(sp)
    52d8:	df000017 	ldw	fp,0(sp)
    52dc:	dec00204 	addi	sp,sp,8
    52e0:	f800283a 	ret

000052e4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    52e4:	defffb04 	addi	sp,sp,-20
    52e8:	dfc00415 	stw	ra,16(sp)
    52ec:	df000315 	stw	fp,12(sp)
    52f0:	df000304 	addi	fp,sp,12
    52f4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    52f8:	00800034 	movhi	r2,0
    52fc:	109cfc04 	addi	r2,r2,29680
    5300:	10800017 	ldw	r2,0(r2)
    5304:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    5308:	00003106 	br	53d0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    530c:	e0bffd17 	ldw	r2,-12(fp)
    5310:	10800217 	ldw	r2,8(r2)
    5314:	1009883a 	mov	r4,r2
    5318:	00003980 	call	398 <strlen>
    531c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    5320:	e0bffd17 	ldw	r2,-12(fp)
    5324:	10c00217 	ldw	r3,8(r2)
    5328:	e0bffe17 	ldw	r2,-8(fp)
    532c:	10bfffc4 	addi	r2,r2,-1
    5330:	1885883a 	add	r2,r3,r2
    5334:	10800003 	ldbu	r2,0(r2)
    5338:	10803fcc 	andi	r2,r2,255
    533c:	1080201c 	xori	r2,r2,128
    5340:	10bfe004 	addi	r2,r2,-128
    5344:	10800bd8 	cmpnei	r2,r2,47
    5348:	1000031e 	bne	r2,zero,5358 <alt_find_file+0x74>
    {
      len -= 1;
    534c:	e0bffe17 	ldw	r2,-8(fp)
    5350:	10bfffc4 	addi	r2,r2,-1
    5354:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    5358:	e0bffe17 	ldw	r2,-8(fp)
    535c:	e0ffff17 	ldw	r3,-4(fp)
    5360:	1885883a 	add	r2,r3,r2
    5364:	10800003 	ldbu	r2,0(r2)
    5368:	10803fcc 	andi	r2,r2,255
    536c:	1080201c 	xori	r2,r2,128
    5370:	10bfe004 	addi	r2,r2,-128
    5374:	10800be0 	cmpeqi	r2,r2,47
    5378:	1000081e 	bne	r2,zero,539c <alt_find_file+0xb8>
    537c:	e0bffe17 	ldw	r2,-8(fp)
    5380:	e0ffff17 	ldw	r3,-4(fp)
    5384:	1885883a 	add	r2,r3,r2
    5388:	10800003 	ldbu	r2,0(r2)
    538c:	10803fcc 	andi	r2,r2,255
    5390:	1080201c 	xori	r2,r2,128
    5394:	10bfe004 	addi	r2,r2,-128
    5398:	10000a1e 	bne	r2,zero,53c4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    539c:	e0bffd17 	ldw	r2,-12(fp)
    53a0:	10800217 	ldw	r2,8(r2)
    53a4:	e0fffe17 	ldw	r3,-8(fp)
    53a8:	180d883a 	mov	r6,r3
    53ac:	e17fff17 	ldw	r5,-4(fp)
    53b0:	1009883a 	mov	r4,r2
    53b4:	00056240 	call	5624 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    53b8:	1000021e 	bne	r2,zero,53c4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    53bc:	e0bffd17 	ldw	r2,-12(fp)
    53c0:	00000806 	br	53e4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    53c4:	e0bffd17 	ldw	r2,-12(fp)
    53c8:	10800017 	ldw	r2,0(r2)
    53cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    53d0:	e0fffd17 	ldw	r3,-12(fp)
    53d4:	00800034 	movhi	r2,0
    53d8:	109cfc04 	addi	r2,r2,29680
    53dc:	18bfcb1e 	bne	r3,r2,530c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    53e0:	0005883a 	mov	r2,zero
}
    53e4:	e037883a 	mov	sp,fp
    53e8:	dfc00117 	ldw	ra,4(sp)
    53ec:	df000017 	ldw	fp,0(sp)
    53f0:	dec00204 	addi	sp,sp,8
    53f4:	f800283a 	ret

000053f8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    53f8:	defffc04 	addi	sp,sp,-16
    53fc:	df000315 	stw	fp,12(sp)
    5400:	df000304 	addi	fp,sp,12
    5404:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    5408:	00bffa04 	movi	r2,-24
    540c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    5410:	e03ffd15 	stw	zero,-12(fp)
    5414:	00001d06 	br	548c <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    5418:	00800034 	movhi	r2,0
    541c:	10988004 	addi	r2,r2,25088
    5420:	e0fffd17 	ldw	r3,-12(fp)
    5424:	18c00324 	muli	r3,r3,12
    5428:	10c5883a 	add	r2,r2,r3
    542c:	10800017 	ldw	r2,0(r2)
    5430:	1000131e 	bne	r2,zero,5480 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    5434:	00800034 	movhi	r2,0
    5438:	10988004 	addi	r2,r2,25088
    543c:	e0fffd17 	ldw	r3,-12(fp)
    5440:	18c00324 	muli	r3,r3,12
    5444:	10c5883a 	add	r2,r2,r3
    5448:	e0ffff17 	ldw	r3,-4(fp)
    544c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    5450:	00800034 	movhi	r2,0
    5454:	109d0004 	addi	r2,r2,29696
    5458:	10c00017 	ldw	r3,0(r2)
    545c:	e0bffd17 	ldw	r2,-12(fp)
    5460:	1880040e 	bge	r3,r2,5474 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    5464:	00800034 	movhi	r2,0
    5468:	109d0004 	addi	r2,r2,29696
    546c:	e0fffd17 	ldw	r3,-12(fp)
    5470:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    5474:	e0bffd17 	ldw	r2,-12(fp)
    5478:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    547c:	00000606 	br	5498 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    5480:	e0bffd17 	ldw	r2,-12(fp)
    5484:	10800044 	addi	r2,r2,1
    5488:	e0bffd15 	stw	r2,-12(fp)
    548c:	e0bffd17 	ldw	r2,-12(fp)
    5490:	10800810 	cmplti	r2,r2,32
    5494:	103fe01e 	bne	r2,zero,5418 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    5498:	e0bffe17 	ldw	r2,-8(fp)
}
    549c:	e037883a 	mov	sp,fp
    54a0:	df000017 	ldw	fp,0(sp)
    54a4:	dec00104 	addi	sp,sp,4
    54a8:	f800283a 	ret

000054ac <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    54ac:	defffb04 	addi	sp,sp,-20
    54b0:	df000415 	stw	fp,16(sp)
    54b4:	df000404 	addi	fp,sp,16
    54b8:	e13ffe15 	stw	r4,-8(fp)
    54bc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    54c0:	e0bfff17 	ldw	r2,-4(fp)
    54c4:	10840070 	cmpltui	r2,r2,4097
    54c8:	1000021e 	bne	r2,zero,54d4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    54cc:	00840004 	movi	r2,4096
    54d0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    54d4:	e0fffe17 	ldw	r3,-8(fp)
    54d8:	e0bfff17 	ldw	r2,-4(fp)
    54dc:	1885883a 	add	r2,r3,r2
    54e0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    54e4:	e0bffe17 	ldw	r2,-8(fp)
    54e8:	e0bffc15 	stw	r2,-16(fp)
    54ec:	00000506 	br	5504 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    54f0:	e0bffc17 	ldw	r2,-16(fp)
    54f4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    54f8:	e0bffc17 	ldw	r2,-16(fp)
    54fc:	10800804 	addi	r2,r2,32
    5500:	e0bffc15 	stw	r2,-16(fp)
    5504:	e0fffc17 	ldw	r3,-16(fp)
    5508:	e0bffd17 	ldw	r2,-12(fp)
    550c:	18bff836 	bltu	r3,r2,54f0 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    5510:	e0bffe17 	ldw	r2,-8(fp)
    5514:	108007cc 	andi	r2,r2,31
    5518:	10000226 	beq	r2,zero,5524 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    551c:	e0bffc17 	ldw	r2,-16(fp)
    5520:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    5524:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    5528:	0001883a 	nop
    552c:	e037883a 	mov	sp,fp
    5530:	df000017 	ldw	fp,0(sp)
    5534:	dec00104 	addi	sp,sp,4
    5538:	f800283a 	ret

0000553c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    553c:	defffe04 	addi	sp,sp,-8
    5540:	df000115 	stw	fp,4(sp)
    5544:	df000104 	addi	fp,sp,4
    5548:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    554c:	e0bfff17 	ldw	r2,-4(fp)
    5550:	10bffe84 	addi	r2,r2,-6
    5554:	10c00428 	cmpgeui	r3,r2,16
    5558:	18001a1e 	bne	r3,zero,55c4 <alt_exception_cause_generated_bad_addr+0x88>
    555c:	100690ba 	slli	r3,r2,2
    5560:	00800034 	movhi	r2,0
    5564:	10955d04 	addi	r2,r2,21876
    5568:	1885883a 	add	r2,r3,r2
    556c:	10800017 	ldw	r2,0(r2)
    5570:	1000683a 	jmp	r2
    5574:	000055b4 	movhi	zero,342
    5578:	000055b4 	movhi	zero,342
    557c:	000055c4 	movi	zero,343
    5580:	000055c4 	movi	zero,343
    5584:	000055c4 	movi	zero,343
    5588:	000055b4 	movhi	zero,342
    558c:	000055bc 	xorhi	zero,zero,342
    5590:	000055c4 	movi	zero,343
    5594:	000055b4 	movhi	zero,342
    5598:	000055b4 	movhi	zero,342
    559c:	000055c4 	movi	zero,343
    55a0:	000055b4 	movhi	zero,342
    55a4:	000055bc 	xorhi	zero,zero,342
    55a8:	000055c4 	movi	zero,343
    55ac:	000055c4 	movi	zero,343
    55b0:	000055b4 	movhi	zero,342
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    55b4:	00800044 	movi	r2,1
    55b8:	00000306 	br	55c8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    55bc:	0005883a 	mov	r2,zero
    55c0:	00000106 	br	55c8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    55c4:	0005883a 	mov	r2,zero
  }
}
    55c8:	e037883a 	mov	sp,fp
    55cc:	df000017 	ldw	fp,0(sp)
    55d0:	dec00104 	addi	sp,sp,4
    55d4:	f800283a 	ret

000055d8 <atexit>:
    55d8:	200b883a 	mov	r5,r4
    55dc:	000f883a 	mov	r7,zero
    55e0:	000d883a 	mov	r6,zero
    55e4:	0009883a 	mov	r4,zero
    55e8:	00056a01 	jmpi	56a0 <__register_exitproc>

000055ec <exit>:
    55ec:	defffe04 	addi	sp,sp,-8
    55f0:	000b883a 	mov	r5,zero
    55f4:	dc000015 	stw	r16,0(sp)
    55f8:	dfc00115 	stw	ra,4(sp)
    55fc:	2021883a 	mov	r16,r4
    5600:	00057b80 	call	57b8 <__call_exitprocs>
    5604:	00800034 	movhi	r2,0
    5608:	109cf804 	addi	r2,r2,29664
    560c:	11000017 	ldw	r4,0(r2)
    5610:	20800f17 	ldw	r2,60(r4)
    5614:	10000126 	beq	r2,zero,561c <exit+0x30>
    5618:	103ee83a 	callr	r2
    561c:	8009883a 	mov	r4,r16
    5620:	00059380 	call	5938 <_exit>

00005624 <memcmp>:
    5624:	01c000c4 	movi	r7,3
    5628:	3980192e 	bgeu	r7,r6,5690 <memcmp+0x6c>
    562c:	2144b03a 	or	r2,r4,r5
    5630:	11c4703a 	and	r2,r2,r7
    5634:	10000f26 	beq	r2,zero,5674 <memcmp+0x50>
    5638:	20800003 	ldbu	r2,0(r4)
    563c:	28c00003 	ldbu	r3,0(r5)
    5640:	10c0151e 	bne	r2,r3,5698 <memcmp+0x74>
    5644:	31bfff84 	addi	r6,r6,-2
    5648:	01ffffc4 	movi	r7,-1
    564c:	00000406 	br	5660 <memcmp+0x3c>
    5650:	20800003 	ldbu	r2,0(r4)
    5654:	28c00003 	ldbu	r3,0(r5)
    5658:	31bfffc4 	addi	r6,r6,-1
    565c:	10c00e1e 	bne	r2,r3,5698 <memcmp+0x74>
    5660:	21000044 	addi	r4,r4,1
    5664:	29400044 	addi	r5,r5,1
    5668:	31fff91e 	bne	r6,r7,5650 <memcmp+0x2c>
    566c:	0005883a 	mov	r2,zero
    5670:	f800283a 	ret
    5674:	20c00017 	ldw	r3,0(r4)
    5678:	28800017 	ldw	r2,0(r5)
    567c:	18bfee1e 	bne	r3,r2,5638 <memcmp+0x14>
    5680:	31bfff04 	addi	r6,r6,-4
    5684:	21000104 	addi	r4,r4,4
    5688:	29400104 	addi	r5,r5,4
    568c:	39bff936 	bltu	r7,r6,5674 <memcmp+0x50>
    5690:	303fe91e 	bne	r6,zero,5638 <memcmp+0x14>
    5694:	003ff506 	br	566c <memcmp+0x48>
    5698:	10c5c83a 	sub	r2,r2,r3
    569c:	f800283a 	ret

000056a0 <__register_exitproc>:
    56a0:	defffa04 	addi	sp,sp,-24
    56a4:	dc000315 	stw	r16,12(sp)
    56a8:	04000034 	movhi	r16,0
    56ac:	841cf804 	addi	r16,r16,29664
    56b0:	80c00017 	ldw	r3,0(r16)
    56b4:	dc400415 	stw	r17,16(sp)
    56b8:	dfc00515 	stw	ra,20(sp)
    56bc:	18805217 	ldw	r2,328(r3)
    56c0:	2023883a 	mov	r17,r4
    56c4:	10003726 	beq	r2,zero,57a4 <__register_exitproc+0x104>
    56c8:	10c00117 	ldw	r3,4(r2)
    56cc:	010007c4 	movi	r4,31
    56d0:	20c00e16 	blt	r4,r3,570c <__register_exitproc+0x6c>
    56d4:	1a000044 	addi	r8,r3,1
    56d8:	8800221e 	bne	r17,zero,5764 <__register_exitproc+0xc4>
    56dc:	18c00084 	addi	r3,r3,2
    56e0:	18c7883a 	add	r3,r3,r3
    56e4:	18c7883a 	add	r3,r3,r3
    56e8:	12000115 	stw	r8,4(r2)
    56ec:	10c7883a 	add	r3,r2,r3
    56f0:	19400015 	stw	r5,0(r3)
    56f4:	0005883a 	mov	r2,zero
    56f8:	dfc00517 	ldw	ra,20(sp)
    56fc:	dc400417 	ldw	r17,16(sp)
    5700:	dc000317 	ldw	r16,12(sp)
    5704:	dec00604 	addi	sp,sp,24
    5708:	f800283a 	ret
    570c:	00800034 	movhi	r2,0
    5710:	10800004 	addi	r2,r2,0
    5714:	10002626 	beq	r2,zero,57b0 <__register_exitproc+0x110>
    5718:	01006404 	movi	r4,400
    571c:	d9400015 	stw	r5,0(sp)
    5720:	d9800115 	stw	r6,4(sp)
    5724:	d9c00215 	stw	r7,8(sp)
    5728:	00000000 	call	0 <__alt_mem_SRAM>
    572c:	d9400017 	ldw	r5,0(sp)
    5730:	d9800117 	ldw	r6,4(sp)
    5734:	d9c00217 	ldw	r7,8(sp)
    5738:	10001d26 	beq	r2,zero,57b0 <__register_exitproc+0x110>
    573c:	81000017 	ldw	r4,0(r16)
    5740:	10000115 	stw	zero,4(r2)
    5744:	02000044 	movi	r8,1
    5748:	22405217 	ldw	r9,328(r4)
    574c:	0007883a 	mov	r3,zero
    5750:	12400015 	stw	r9,0(r2)
    5754:	20805215 	stw	r2,328(r4)
    5758:	10006215 	stw	zero,392(r2)
    575c:	10006315 	stw	zero,396(r2)
    5760:	883fde26 	beq	r17,zero,56dc <__register_exitproc+0x3c>
    5764:	18c9883a 	add	r4,r3,r3
    5768:	2109883a 	add	r4,r4,r4
    576c:	1109883a 	add	r4,r2,r4
    5770:	21802215 	stw	r6,136(r4)
    5774:	01800044 	movi	r6,1
    5778:	12406217 	ldw	r9,392(r2)
    577c:	30cc983a 	sll	r6,r6,r3
    5780:	4992b03a 	or	r9,r9,r6
    5784:	12406215 	stw	r9,392(r2)
    5788:	21c04215 	stw	r7,264(r4)
    578c:	01000084 	movi	r4,2
    5790:	893fd21e 	bne	r17,r4,56dc <__register_exitproc+0x3c>
    5794:	11006317 	ldw	r4,396(r2)
    5798:	218cb03a 	or	r6,r4,r6
    579c:	11806315 	stw	r6,396(r2)
    57a0:	003fce06 	br	56dc <__register_exitproc+0x3c>
    57a4:	18805304 	addi	r2,r3,332
    57a8:	18805215 	stw	r2,328(r3)
    57ac:	003fc606 	br	56c8 <__register_exitproc+0x28>
    57b0:	00bfffc4 	movi	r2,-1
    57b4:	003fd006 	br	56f8 <__register_exitproc+0x58>

000057b8 <__call_exitprocs>:
    57b8:	defff504 	addi	sp,sp,-44
    57bc:	df000915 	stw	fp,36(sp)
    57c0:	dd400615 	stw	r21,24(sp)
    57c4:	dc800315 	stw	r18,12(sp)
    57c8:	dfc00a15 	stw	ra,40(sp)
    57cc:	ddc00815 	stw	r23,32(sp)
    57d0:	dd800715 	stw	r22,28(sp)
    57d4:	dd000515 	stw	r20,20(sp)
    57d8:	dcc00415 	stw	r19,16(sp)
    57dc:	dc400215 	stw	r17,8(sp)
    57e0:	dc000115 	stw	r16,4(sp)
    57e4:	d9000015 	stw	r4,0(sp)
    57e8:	2839883a 	mov	fp,r5
    57ec:	04800044 	movi	r18,1
    57f0:	057fffc4 	movi	r21,-1
    57f4:	00800034 	movhi	r2,0
    57f8:	109cf804 	addi	r2,r2,29664
    57fc:	12000017 	ldw	r8,0(r2)
    5800:	45005217 	ldw	r20,328(r8)
    5804:	44c05204 	addi	r19,r8,328
    5808:	a0001c26 	beq	r20,zero,587c <__call_exitprocs+0xc4>
    580c:	a0800117 	ldw	r2,4(r20)
    5810:	15ffffc4 	addi	r23,r2,-1
    5814:	b8000d16 	blt	r23,zero,584c <__call_exitprocs+0x94>
    5818:	14000044 	addi	r16,r2,1
    581c:	8421883a 	add	r16,r16,r16
    5820:	8421883a 	add	r16,r16,r16
    5824:	84402004 	addi	r17,r16,128
    5828:	a463883a 	add	r17,r20,r17
    582c:	a421883a 	add	r16,r20,r16
    5830:	e0001e26 	beq	fp,zero,58ac <__call_exitprocs+0xf4>
    5834:	80804017 	ldw	r2,256(r16)
    5838:	e0801c26 	beq	fp,r2,58ac <__call_exitprocs+0xf4>
    583c:	bdffffc4 	addi	r23,r23,-1
    5840:	843fff04 	addi	r16,r16,-4
    5844:	8c7fff04 	addi	r17,r17,-4
    5848:	bd7ff91e 	bne	r23,r21,5830 <__call_exitprocs+0x78>
    584c:	00800034 	movhi	r2,0
    5850:	10800004 	addi	r2,r2,0
    5854:	10000926 	beq	r2,zero,587c <__call_exitprocs+0xc4>
    5858:	a0800117 	ldw	r2,4(r20)
    585c:	1000301e 	bne	r2,zero,5920 <__call_exitprocs+0x168>
    5860:	a0800017 	ldw	r2,0(r20)
    5864:	10003226 	beq	r2,zero,5930 <__call_exitprocs+0x178>
    5868:	a009883a 	mov	r4,r20
    586c:	98800015 	stw	r2,0(r19)
    5870:	00000000 	call	0 <__alt_mem_SRAM>
    5874:	9d000017 	ldw	r20,0(r19)
    5878:	a03fe41e 	bne	r20,zero,580c <__call_exitprocs+0x54>
    587c:	dfc00a17 	ldw	ra,40(sp)
    5880:	df000917 	ldw	fp,36(sp)
    5884:	ddc00817 	ldw	r23,32(sp)
    5888:	dd800717 	ldw	r22,28(sp)
    588c:	dd400617 	ldw	r21,24(sp)
    5890:	dd000517 	ldw	r20,20(sp)
    5894:	dcc00417 	ldw	r19,16(sp)
    5898:	dc800317 	ldw	r18,12(sp)
    589c:	dc400217 	ldw	r17,8(sp)
    58a0:	dc000117 	ldw	r16,4(sp)
    58a4:	dec00b04 	addi	sp,sp,44
    58a8:	f800283a 	ret
    58ac:	a0800117 	ldw	r2,4(r20)
    58b0:	80c00017 	ldw	r3,0(r16)
    58b4:	10bfffc4 	addi	r2,r2,-1
    58b8:	15c01426 	beq	r2,r23,590c <__call_exitprocs+0x154>
    58bc:	80000015 	stw	zero,0(r16)
    58c0:	183fde26 	beq	r3,zero,583c <__call_exitprocs+0x84>
    58c4:	95c8983a 	sll	r4,r18,r23
    58c8:	a0806217 	ldw	r2,392(r20)
    58cc:	a5800117 	ldw	r22,4(r20)
    58d0:	2084703a 	and	r2,r4,r2
    58d4:	10000b26 	beq	r2,zero,5904 <__call_exitprocs+0x14c>
    58d8:	a0806317 	ldw	r2,396(r20)
    58dc:	2088703a 	and	r4,r4,r2
    58e0:	20000c1e 	bne	r4,zero,5914 <__call_exitprocs+0x15c>
    58e4:	89400017 	ldw	r5,0(r17)
    58e8:	d9000017 	ldw	r4,0(sp)
    58ec:	183ee83a 	callr	r3
    58f0:	a0800117 	ldw	r2,4(r20)
    58f4:	15bfbf1e 	bne	r2,r22,57f4 <__call_exitprocs+0x3c>
    58f8:	98800017 	ldw	r2,0(r19)
    58fc:	153fcf26 	beq	r2,r20,583c <__call_exitprocs+0x84>
    5900:	003fbc06 	br	57f4 <__call_exitprocs+0x3c>
    5904:	183ee83a 	callr	r3
    5908:	003ff906 	br	58f0 <__call_exitprocs+0x138>
    590c:	a5c00115 	stw	r23,4(r20)
    5910:	003feb06 	br	58c0 <__call_exitprocs+0x108>
    5914:	89000017 	ldw	r4,0(r17)
    5918:	183ee83a 	callr	r3
    591c:	003ff406 	br	58f0 <__call_exitprocs+0x138>
    5920:	a0800017 	ldw	r2,0(r20)
    5924:	a027883a 	mov	r19,r20
    5928:	1029883a 	mov	r20,r2
    592c:	003fb606 	br	5808 <__call_exitprocs+0x50>
    5930:	0005883a 	mov	r2,zero
    5934:	003ffb06 	br	5924 <__call_exitprocs+0x16c>

00005938 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    5938:	defffd04 	addi	sp,sp,-12
    593c:	df000215 	stw	fp,8(sp)
    5940:	df000204 	addi	fp,sp,8
    5944:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    5948:	0001883a 	nop
    594c:	e0bfff17 	ldw	r2,-4(fp)
    5950:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    5954:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    5958:	10000226 	beq	r2,zero,5964 <_exit+0x2c>
    ALT_SIM_FAIL();
    595c:	002af070 	cmpltui	zero,zero,43969
    5960:	00000106 	br	5968 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    5964:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    5968:	003fff06 	br	5968 <_exit+0x30>
