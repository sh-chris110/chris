
sw_design.elf:     file format elf32-littlenios2
sw_design.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000f86c memsz 0x0000f86c flags r-x
    LOAD off    0x0001088c vaddr 0x0000f88c paddr 0x00011378 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00012e64 vaddr 0x00012e64 paddr 0x00012e64 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f31c  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000032c  0000f560  0000f560  00010560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  0000f88c  00011378  0001088c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  00012e64  00012e64  00012e64  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00012fc4  00012fc4  00012378  2**0
                  CONTENTS
  7 .SRAM         00000000  04020000  04020000  00012378  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00012378  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000eb8  00000000  00000000  000123a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002346e  00000000  00000000  00013258  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000901d  00000000  00000000  000366c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b478  00000000  00000000  0003f6e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002068  00000000  00000000  0004ab5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000037df  00000000  00000000  0004cbc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017b46  00000000  00000000  000503a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00067eec  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018c0  00000000  00000000  00067f20  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006c8d5  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000b  00000000  00000000  0006c8d8  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006c8e3  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006c8e4  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006c8e5  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006c8e9  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006c8ed  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000004  00000000  00000000  0006c8f1  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000004  00000000  00000000  0006c8f5  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000004  00000000  00000000  0006c8f9  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000a  00000000  00000000  0006c8fd  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001b  00000000  00000000  0006c907  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0005d209  00000000  00000000  0006c922  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
0000f560 l    d  .rodata	00000000 .rodata
0000f88c l    d  .rwdata	00000000 .rwdata
00012e64 l    d  .bss	00000000 .bss
00012fc4 l    d  .SDRAM	00000000 .SDRAM
04020000 l    d  .SRAM	00000000 .SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../sw_design_bsp//obj/HAL/src/crt0.o
0000028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000f5e2 l     O .rodata	00000010 zeroes.4404
0000274c l     F .text	000000bc __sbprintf
0000f5f2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0000295c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000448c l     F .text	00000008 __fp_unlock
000044a0 l     F .text	0000019c __sinit.part.1
0000463c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000f88c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0000fcd0 l     O .rwdata	00000020 lc_ctype_charset
0000fcb0 l     O .rwdata	00000020 lc_message_charset
0000fcf0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000f624 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00007a38 l     F .text	000000fc __sprint_r.part.0
0000f758 l     O .rodata	00000010 blanks.4348
0000f748 l     O .rodata	00000010 zeroes.4349
00008fc4 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000cc80 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000cda0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000cdcc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000cecc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000cfc0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000d0ac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000d294 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00011368 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000d4f4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000d63c l     F .text	00000038 alt_dev_reg
000102d8 l     O .rwdata	00001060 JTAG
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000d93c l     F .text	0000020c altera_avalon_jtag_uart_irq
0000db48 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000e188 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000e414 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000e8cc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000ea0c l     F .text	00000050 alt_get_errno
0000ea5c l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00012e98 g     O .bss	00000004 alt_instruction_exception_handler
0000707c g     F .text	00000074 _mprec_log10
00007168 g     F .text	0000008c __any_on
00009560 g     F .text	00000054 _isatty_r
0000f630 g     O .rodata	00000028 __mprec_tinytens
0000d1d0 g     F .text	0000007c alt_main
000003cc g     F .text	000000c0 _puts_r
00012ec4 g     O .bss	00000100 alt_irq
000095b4 g     F .text	00000060 _lseek_r
00011378 g       *ABS*	00000000 __flash_rwdata_start
0000b7ac g     F .text	00000088 .hidden __eqdf2
00012fc4 g       *ABS*	00000000 __alt_heap_start
00000390 g     F .text	0000003c printf
000097cc g     F .text	0000009c _wcrtomb_r
000078f8 g     F .text	0000005c __sseek
000047dc g     F .text	00000010 __sinit
00009674 g     F .text	00000140 __swbuf_r
000052a4 g     F .text	0000007c _setlocale_r
00004644 g     F .text	00000068 __sfmoreglue
0000d270 g     F .text	00000024 __malloc_unlock
00005f74 g     F .text	0000015c memmove
000047c4 g     F .text	00000018 _cleanup
000061f8 g     F .text	000000a8 _Balloc
0000b834 g     F .text	000000dc .hidden __gtdf2
0000ee24 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00009504 g     F .text	0000005c _fstat_r
00012e7c g     O .bss	00000004 errno
00007874 g     F .text	00000008 __seofread
00012e84 g     O .bss	00000004 alt_argv
00019338 g       *ABS*	00000000 _gp
00010158 g     O .rwdata	00000180 alt_fd_list
0000ee48 g     F .text	00000090 alt_find_dev
00005e2c g     F .text	00000148 memcpy
00004494 g     F .text	0000000c _cleanup_r
0000ca98 g     F .text	000000dc .hidden __floatsidf
0000e990 g     F .text	0000007c alt_io_redirect
0000b910 g     F .text	000000f4 .hidden __ltdf2
0000f560 g       *ABS*	00000000 __DTOR_END__
0000048c g     F .text	00000014 puts
0000f130 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00007758 g     F .text	00000074 __fpclassifyd
00006fd8 g     F .text	000000a4 __ratio
00008fa8 g     F .text	0000001c __vfiprintf_internal
0000dd48 g     F .text	0000021c altera_avalon_jtag_uart_read
00000360 g     F .text	00000030 _printf_r
0000a55c g     F .text	00000064 .hidden __udivsi3
0000cf1c g     F .text	000000a4 isatty
0000f680 g     O .rodata	000000c8 __mprec_tens
00005320 g     F .text	0000000c __locale_charset
0000f0a0 g     F .text	00000090 alt_icache_flush
00012e78 g     O .bss	00000004 __malloc_top_pad
00011340 g     O .rwdata	00000004 __mb_cur_max
00005350 g     F .text	0000000c _localeconv_r
00006604 g     F .text	0000003c __i2b
00004c60 g     F .text	000004bc __sfvwrite_r
000077cc g     F .text	00000054 _sbrk_r
00009614 g     F .text	00000060 _read_r
00011360 g     O .rwdata	00000004 alt_max_fd
000091f8 g     F .text	000000f0 _fclose_r
0000445c g     F .text	00000030 fflush
00012e74 g     O .bss	00000004 __malloc_max_sbrked_mem
0000a618 g     F .text	000008ac .hidden __adddf3
00006d80 g     F .text	0000010c __b2d
00009f2c g     F .text	00000538 .hidden __umoddi3
0000d0fc g     F .text	000000d4 lseek
00011338 g     O .rwdata	00000004 _global_impure_ptr
000071f4 g     F .text	00000564 _realloc_r
00012fc4 g       *ABS*	00000000 __bss_end
0000e7dc g     F .text	000000f0 alt_iic_isr_register
0000ed1c g     F .text	00000108 alt_tick
000099b4 g     F .text	00000578 .hidden __udivdi3
00009460 g     F .text	00000024 _fputwc_r
0000f658 g     O .rodata	00000028 __mprec_bigtens
000063e8 g     F .text	00000104 __s2b
0000cb74 g     F .text	000000a8 .hidden __floatunsidf
00006ac0 g     F .text	00000060 __mcmp
000047fc g     F .text	00000018 __fp_lock_all
0000e790 g     F .text	0000004c alt_ic_irq_enabled
0000ec80 g     F .text	0000009c alt_alarm_stop
00012e8c g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00010130 g     O .rwdata	00000028 alt_dev_null
0000e3cc g     F .text	00000048 alt_dcache_flush_all
000064ec g     F .text	00000068 __hi0bits
0000ca18 g     F .text	00000080 .hidden __fixdfsi
00011378 g       *ABS*	00000000 __ram_rwdata_end
00011358 g     O .rwdata	00000008 alt_dev_list
0000d544 g     F .text	000000f8 write
0000f88c g       *ABS*	00000000 __ram_rodata_end
0000ce1c g     F .text	000000b0 fstat
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000b910 g     F .text	000000f4 .hidden __ledf2
00006838 g     F .text	00000140 __pow5mult
00007b4c g     F .text	0000145c ___vfiprintf_internal_r
00012e6c g     O .bss	00000004 __nlocale_changed
0000a5c0 g     F .text	00000058 .hidden __umodsi3
00012fc4 g       *ABS*	00000000 end
0000d874 g     F .text	000000c8 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0000f560 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0000e200 g     F .text	0000008c alt_avalon_timer_sc_init
0000cc1c g     F .text	00000064 .hidden __clzsi2
0000df64 g     F .text	00000224 altera_avalon_jtag_uart_write
000047ec g     F .text	00000004 __sfp_lock_acquire
00005d48 g     F .text	000000e4 memchr
00000538 g     F .text	000021f8 ___vfprintf_internal_r
00004950 g     F .text	00000310 _free_r
0000532c g     F .text	00000010 __locale_mb_cur_max
0000f3ac g     F .text	00000180 __call_exitprocs
00012e68 g     O .bss	00000004 __mlocale_changed
00011344 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000004c _start
00012e90 g     O .bss	00000004 _alt_tick_rate
00006978 g     F .text	00000148 __lshift
00012e94 g     O .bss	00000004 _alt_nticks
0000d2e4 g     F .text	000000fc read
0000d6ac g     F .text	00000064 alt_sys_init
0000f294 g     F .text	00000118 __register_exitproc
00006640 g     F .text	000001f8 __multiply
0000dbf0 g     F .text	00000068 altera_avalon_jtag_uart_close
0000f88c g       *ABS*	00000000 __ram_rwdata_start
0000f560 g       *ABS*	00000000 __ram_rodata_start
00012e9c g     O .bss	00000028 __malloc_current_mallinfo
00006e8c g     F .text	0000014c __d2b
0000d710 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000efec g     F .text	000000b4 alt_get_fd
000090e0 g     F .text	00000054 _close_r
0000f218 g     F .text	0000007c memcmp
0000d7d0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00012fc4 g       *ABS*	00000000 __alt_stack_base
0000d820 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00002808 g     F .text	00000154 __swsetup_r
0000aec4 g     F .text	000008e8 .hidden __divdf3
000046ac g     F .text	00000118 __sfp
000070f0 g     F .text	00000078 __copybits
0000fd28 g     O .rwdata	00000408 __malloc_av_
000047f8 g     F .text	00000004 __sinit_lock_release
0000ba04 g     F .text	00000718 .hidden __muldf3
00007820 g     F .text	00000054 __sread
0000eed8 g     F .text	00000114 alt_find_file
0000e464 g     F .text	000000a4 alt_dev_llist_insert
0000d24c g     F .text	00000024 __malloc_lock
0000d444 g     F .text	000000b0 sbrk
00004400 g     F .text	0000005c _fflush_r
00009134 g     F .text	000000c4 _calloc_r
00012e64 g       *ABS*	00000000 __bss_start
000060d0 g     F .text	00000128 memset
00000290 g     F .text	000000d0 main
00012e88 g     O .bss	00000004 alt_envp
00012e70 g     O .bss	00000004 __malloc_max_total_mem
0000d770 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000097b4 g     F .text	00000018 __swbuf
00007954 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
000092e8 g     F .text	00000014 fclose
00002b5c g     F .text	00001688 _dtoa_r
0000553c g     F .text	0000080c _malloc_r
00009928 g     F .text	00000030 __ascii_wctomb
00011364 g     O .rwdata	00000004 alt_errno
0000511c g     F .text	000000c4 _fwalk
0000a464 g     F .text	00000084 .hidden __divsi3
0000482c g     F .text	00000124 _malloc_trim_r
0000f560 g       *ABS*	00000000 __CTOR_END__
0000795c g     F .text	000000dc strcmp
0000f560 g       *ABS*	00000000 __flash_rodata_start
0000f560 g       *ABS*	00000000 __DTOR_LIST__
0000b7ac g     F .text	00000088 .hidden __nedf2
0000d674 g     F .text	00000038 alt_irq_init
0000d3e0 g     F .text	00000064 alt_release_fd
0000f768 g     O .rodata	00000100 .hidden __clz_tab
00012e64 g     O .bss	00000004 _PathLocale
0000f1cc g     F .text	00000014 atexit
00009080 g     F .text	00000060 _write_r
0000535c g     F .text	00000018 setlocale
0001133c g     O .rwdata	00000004 _impure_ptr
00012e80 g     O .bss	00000004 alt_argc
000041e4 g     F .text	0000021c __sflush_r
0000e568 g     F .text	00000060 _do_dtors
00005348 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00006d1c g     F .text	00000064 __ulp
00004814 g     F .text	00000018 __fp_unlock_all
00011350 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00005374 g     F .text	0000000c localeconv
0000e5fc g     F .text	00000050 alt_ic_isr_register
00011378 g       *ABS*	00000000 _edata
00012fc4 g       *ABS*	00000000 _end
000092fc g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
0000dc58 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000e6ec g     F .text	000000a4 alt_ic_irq_disable
0000787c g     F .text	0000007c __swrite
00011348 g     O .rwdata	00000004 __malloc_trim_threshold
0000533c g     F .text	0000000c __locale_msgcharset
0000f1e0 g     F .text	00000038 exit
000051e0 g     F .text	000000c4 _fwalk_reent
00006b20 g     F .text	000001fc __mdiff
0000a4e8 g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000047f0 g     F .text	00000004 __sfp_lock_release
0000f52c g     F .text	00000034 _exit
0000e28c g     F .text	00000140 alt_alarm_start
00005380 g     F .text	000001bc __smakebuf_r
000004a0 g     F .text	00000098 strlen
0000eb28 g     F .text	00000158 open
0000b834 g     F .text	000000dc .hidden __gedf2
0001134c g     O .rwdata	00000004 __wctomb
04020000 g       *ABS*	00000000 __alt_mem_SRAM
00007b34 g     F .text	00000018 __sprint_r
0000e5c8 g     F .text	00000034 alt_icache_flush_all
0001136c g     O .rwdata	00000004 alt_priority_mask
0000e64c g     F .text	000000a0 alt_ic_irq_enable
00002730 g     F .text	0000001c __vfprintf_internal
00009958 g     F .text	0000005c _wctomb_r
0000c11c g     F .text	000008fc .hidden __subdf3
00006554 g     F .text	000000b0 __lo0bits
00011370 g     O .rwdata	00000008 alt_alarm_list
0000e508 g     F .text	00000060 _do_ctors
00009868 g     F .text	000000c0 wcrtomb
0000ccd0 g     F .text	000000d0 close
0000d028 g     F .text	00000084 alt_load
00009484 g     F .text	00000080 fputwc
000047f4 g     F .text	00000004 __sinit_lock_acquire
000062c8 g     F .text	00000120 __multadd
000062a0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	108bb104 	addi	r2,r2,11972
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	108bb104 	addi	r2,r2,11972
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a6d817 	ldw	r2,-25760(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a6d817 	ldw	r2,-25760(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     24c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     250:	00bffd16 	blt	zero,r2,248 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     254:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     25c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     260:	d6a4ce14 	ori	gp,gp,37688
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     264:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     268:	108b9914 	ori	r2,r2,11876

    movhi r3, %hi(__bss_end)
     26c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     270:	18cbf114 	ori	r3,r3,12228

    beq r2, r3, 1f
     274:	10c00326 	beq	r2,r3,284 <_start+0x40>

0:
    stw zero, (r2)
     278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     27c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     280:	10fffd36 	bltu	r2,r3,278 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     284:	000d0280 	call	d028 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     288:	000d1d00 	call	d1d0 <alt_main>

0000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     28c:	003fff06 	br	28c <alt_after_alt_main>

00000290 <main>:
#include "string.h"



int main()
{
     290:	defffd04 	addi	sp,sp,-12
     294:	dfc00215 	stw	ra,8(sp)
     298:	df000115 	stw	fp,4(sp)
     29c:	df000104 	addi	fp,sp,4
  printf("Hello from Nios II, Begin to run....!\n");
     2a0:	01000074 	movhi	r4,1
     2a4:	213d5804 	addi	r4,r4,-2720
     2a8:	000048c0 	call	48c <puts>

	  while (counter < 5000000) {
		  counter++;
	  }*/

	  IOWR(0x04041000, 0x0, 2);
     2ac:	00c00084 	movi	r3,2
     2b0:	00810134 	movhi	r2,1028
     2b4:	10840004 	addi	r2,r2,4096
     2b8:	10c00035 	stwio	r3,0(r2)
	  IOWR(0x04041000, 0x1, 2);
     2bc:	00c00084 	movi	r3,2
     2c0:	00810134 	movhi	r2,1028
     2c4:	10840104 	addi	r2,r2,4100
     2c8:	10c00035 	stwio	r3,0(r2)
	  IOWR(0x04041000, 0x2, 1);
     2cc:	00c00044 	movi	r3,1
     2d0:	00810134 	movhi	r2,1028
     2d4:	10840204 	addi	r2,r2,4104
     2d8:	10c00035 	stwio	r3,0(r2)
	  IOWR(0x04041000, 0x3, 1);
     2dc:	00c00044 	movi	r3,1
     2e0:	00810134 	movhi	r2,1028
     2e4:	10840304 	addi	r2,r2,4108
     2e8:	10c00035 	stwio	r3,0(r2)
	  IOWR(0x04041000, 0x4, 1);
     2ec:	00c00044 	movi	r3,1
     2f0:	00810134 	movhi	r2,1028
     2f4:	10840404 	addi	r2,r2,4112
     2f8:	10c00035 	stwio	r3,0(r2)
	  IOWR(0x04041000, 0x5, 1);
     2fc:	00c00044 	movi	r3,1
     300:	00810134 	movhi	r2,1028
     304:	10840504 	addi	r2,r2,4116
     308:	10c00035 	stwio	r3,0(r2)
	  IOWR(0x04041000, 0x6, 1);
     30c:	00c00044 	movi	r3,1
     310:	00810134 	movhi	r2,1028
     314:	10840604 	addi	r2,r2,4120
     318:	10c00035 	stwio	r3,0(r2)
	  IOWR(0x04041000, 0x7, 2);
     31c:	00c00084 	movi	r3,2
     320:	00810134 	movhi	r2,1028
     324:	10840704 	addi	r2,r2,4124
     328:	10c00035 	stwio	r3,0(r2)
	  IOWR(0x04041000, 0x8, 2);
     32c:	00c00084 	movi	r3,2
     330:	00810134 	movhi	r2,1028
     334:	10840804 	addi	r2,r2,4128
     338:	10c00035 	stwio	r3,0(r2)
	  //printf ("read done\n");
	  unsigned int ret = IORD(0x04041000, 0x9);
     33c:	00810134 	movhi	r2,1028
     340:	10840904 	addi	r2,r2,4132
     344:	10800037 	ldwio	r2,0(r2)
     348:	e0bfff15 	stw	r2,-4(fp)
	  printf ("return value:[%d]\n", ret);
     34c:	e17fff17 	ldw	r5,-4(fp)
     350:	01000074 	movhi	r4,1
     354:	213d6204 	addi	r4,r4,-2680
     358:	00003900 	call	390 <printf>
  }
     35c:	003fd306 	br	2ac <main+0x1c>

00000360 <_printf_r>:
     360:	defffd04 	addi	sp,sp,-12
     364:	2805883a 	mov	r2,r5
     368:	dfc00015 	stw	ra,0(sp)
     36c:	d9800115 	stw	r6,4(sp)
     370:	d9c00215 	stw	r7,8(sp)
     374:	21400217 	ldw	r5,8(r4)
     378:	d9c00104 	addi	r7,sp,4
     37c:	100d883a 	mov	r6,r2
     380:	00005380 	call	538 <___vfprintf_internal_r>
     384:	dfc00017 	ldw	ra,0(sp)
     388:	dec00304 	addi	sp,sp,12
     38c:	f800283a 	ret

00000390 <printf>:
     390:	defffc04 	addi	sp,sp,-16
     394:	dfc00015 	stw	ra,0(sp)
     398:	d9400115 	stw	r5,4(sp)
     39c:	d9800215 	stw	r6,8(sp)
     3a0:	d9c00315 	stw	r7,12(sp)
     3a4:	00800074 	movhi	r2,1
     3a8:	1084cf04 	addi	r2,r2,4924
     3ac:	10800017 	ldw	r2,0(r2)
     3b0:	200b883a 	mov	r5,r4
     3b4:	d9800104 	addi	r6,sp,4
     3b8:	11000217 	ldw	r4,8(r2)
     3bc:	00027300 	call	2730 <__vfprintf_internal>
     3c0:	dfc00017 	ldw	ra,0(sp)
     3c4:	dec00404 	addi	sp,sp,16
     3c8:	f800283a 	ret

000003cc <_puts_r>:
     3cc:	defff604 	addi	sp,sp,-40
     3d0:	dc000715 	stw	r16,28(sp)
     3d4:	2021883a 	mov	r16,r4
     3d8:	2809883a 	mov	r4,r5
     3dc:	dc400815 	stw	r17,32(sp)
     3e0:	dfc00915 	stw	ra,36(sp)
     3e4:	2823883a 	mov	r17,r5
     3e8:	00004a00 	call	4a0 <strlen>
     3ec:	10c00044 	addi	r3,r2,1
     3f0:	d8800115 	stw	r2,4(sp)
     3f4:	00800074 	movhi	r2,1
     3f8:	10bd6704 	addi	r2,r2,-2660
     3fc:	d8800215 	stw	r2,8(sp)
     400:	00800044 	movi	r2,1
     404:	d8800315 	stw	r2,12(sp)
     408:	00800084 	movi	r2,2
     40c:	dc400015 	stw	r17,0(sp)
     410:	d8c00615 	stw	r3,24(sp)
     414:	dec00415 	stw	sp,16(sp)
     418:	d8800515 	stw	r2,20(sp)
     41c:	80000226 	beq	r16,zero,428 <_puts_r+0x5c>
     420:	80800e17 	ldw	r2,56(r16)
     424:	10001426 	beq	r2,zero,478 <_puts_r+0xac>
     428:	81400217 	ldw	r5,8(r16)
     42c:	2880030b 	ldhu	r2,12(r5)
     430:	10c8000c 	andi	r3,r2,8192
     434:	1800061e 	bne	r3,zero,450 <_puts_r+0x84>
     438:	29001917 	ldw	r4,100(r5)
     43c:	00f7ffc4 	movi	r3,-8193
     440:	10880014 	ori	r2,r2,8192
     444:	20c6703a 	and	r3,r4,r3
     448:	2880030d 	sth	r2,12(r5)
     44c:	28c01915 	stw	r3,100(r5)
     450:	d9800404 	addi	r6,sp,16
     454:	8009883a 	mov	r4,r16
     458:	0004c600 	call	4c60 <__sfvwrite_r>
     45c:	1000091e 	bne	r2,zero,484 <_puts_r+0xb8>
     460:	00800284 	movi	r2,10
     464:	dfc00917 	ldw	ra,36(sp)
     468:	dc400817 	ldw	r17,32(sp)
     46c:	dc000717 	ldw	r16,28(sp)
     470:	dec00a04 	addi	sp,sp,40
     474:	f800283a 	ret
     478:	8009883a 	mov	r4,r16
     47c:	00047dc0 	call	47dc <__sinit>
     480:	003fe906 	br	428 <_puts_r+0x5c>
     484:	00bfffc4 	movi	r2,-1
     488:	003ff606 	br	464 <_puts_r+0x98>

0000048c <puts>:
     48c:	00800074 	movhi	r2,1
     490:	1084cf04 	addi	r2,r2,4924
     494:	200b883a 	mov	r5,r4
     498:	11000017 	ldw	r4,0(r2)
     49c:	00003cc1 	jmpi	3cc <_puts_r>

000004a0 <strlen>:
     4a0:	208000cc 	andi	r2,r4,3
     4a4:	10002026 	beq	r2,zero,528 <strlen+0x88>
     4a8:	20800007 	ldb	r2,0(r4)
     4ac:	10002026 	beq	r2,zero,530 <strlen+0x90>
     4b0:	2005883a 	mov	r2,r4
     4b4:	00000206 	br	4c0 <strlen+0x20>
     4b8:	10c00007 	ldb	r3,0(r2)
     4bc:	18001826 	beq	r3,zero,520 <strlen+0x80>
     4c0:	10800044 	addi	r2,r2,1
     4c4:	10c000cc 	andi	r3,r2,3
     4c8:	183ffb1e 	bne	r3,zero,4b8 <strlen+0x18>
     4cc:	10c00017 	ldw	r3,0(r2)
     4d0:	01ffbff4 	movhi	r7,65279
     4d4:	39ffbfc4 	addi	r7,r7,-257
     4d8:	00ca303a 	nor	r5,zero,r3
     4dc:	01a02074 	movhi	r6,32897
     4e0:	19c7883a 	add	r3,r3,r7
     4e4:	31a02004 	addi	r6,r6,-32640
     4e8:	1946703a 	and	r3,r3,r5
     4ec:	1986703a 	and	r3,r3,r6
     4f0:	1800091e 	bne	r3,zero,518 <strlen+0x78>
     4f4:	10800104 	addi	r2,r2,4
     4f8:	10c00017 	ldw	r3,0(r2)
     4fc:	19cb883a 	add	r5,r3,r7
     500:	00c6303a 	nor	r3,zero,r3
     504:	28c6703a 	and	r3,r5,r3
     508:	1986703a 	and	r3,r3,r6
     50c:	183ff926 	beq	r3,zero,4f4 <strlen+0x54>
     510:	00000106 	br	518 <strlen+0x78>
     514:	10800044 	addi	r2,r2,1
     518:	10c00007 	ldb	r3,0(r2)
     51c:	183ffd1e 	bne	r3,zero,514 <strlen+0x74>
     520:	1105c83a 	sub	r2,r2,r4
     524:	f800283a 	ret
     528:	2005883a 	mov	r2,r4
     52c:	003fe706 	br	4cc <strlen+0x2c>
     530:	0005883a 	mov	r2,zero
     534:	f800283a 	ret

00000538 <___vfprintf_internal_r>:
     538:	deffb804 	addi	sp,sp,-288
     53c:	dfc04715 	stw	ra,284(sp)
     540:	ddc04515 	stw	r23,276(sp)
     544:	dd404315 	stw	r21,268(sp)
     548:	d9002c15 	stw	r4,176(sp)
     54c:	282f883a 	mov	r23,r5
     550:	302b883a 	mov	r21,r6
     554:	d9c02d15 	stw	r7,180(sp)
     558:	df004615 	stw	fp,280(sp)
     55c:	dd804415 	stw	r22,272(sp)
     560:	dd004215 	stw	r20,264(sp)
     564:	dcc04115 	stw	r19,260(sp)
     568:	dc804015 	stw	r18,256(sp)
     56c:	dc403f15 	stw	r17,252(sp)
     570:	dc003e15 	stw	r16,248(sp)
     574:	00053500 	call	5350 <_localeconv_r>
     578:	10800017 	ldw	r2,0(r2)
     57c:	1009883a 	mov	r4,r2
     580:	d8803415 	stw	r2,208(sp)
     584:	00004a00 	call	4a0 <strlen>
     588:	d8803715 	stw	r2,220(sp)
     58c:	d8802c17 	ldw	r2,176(sp)
     590:	10000226 	beq	r2,zero,59c <___vfprintf_internal_r+0x64>
     594:	10800e17 	ldw	r2,56(r2)
     598:	1000f926 	beq	r2,zero,980 <___vfprintf_internal_r+0x448>
     59c:	b880030b 	ldhu	r2,12(r23)
     5a0:	10c8000c 	andi	r3,r2,8192
     5a4:	1800061e 	bne	r3,zero,5c0 <___vfprintf_internal_r+0x88>
     5a8:	b9001917 	ldw	r4,100(r23)
     5ac:	00f7ffc4 	movi	r3,-8193
     5b0:	10880014 	ori	r2,r2,8192
     5b4:	20c6703a 	and	r3,r4,r3
     5b8:	b880030d 	sth	r2,12(r23)
     5bc:	b8c01915 	stw	r3,100(r23)
     5c0:	10c0020c 	andi	r3,r2,8
     5c4:	1800c126 	beq	r3,zero,8cc <___vfprintf_internal_r+0x394>
     5c8:	b8c00417 	ldw	r3,16(r23)
     5cc:	1800bf26 	beq	r3,zero,8cc <___vfprintf_internal_r+0x394>
     5d0:	1080068c 	andi	r2,r2,26
     5d4:	00c00284 	movi	r3,10
     5d8:	10c0c426 	beq	r2,r3,8ec <___vfprintf_internal_r+0x3b4>
     5dc:	d8c00404 	addi	r3,sp,16
     5e0:	05000074 	movhi	r20,1
     5e4:	d9001e04 	addi	r4,sp,120
     5e8:	a53d7884 	addi	r20,r20,-2590
     5ec:	d8c01e15 	stw	r3,120(sp)
     5f0:	d8002015 	stw	zero,128(sp)
     5f4:	d8001f15 	stw	zero,124(sp)
     5f8:	d8003315 	stw	zero,204(sp)
     5fc:	d8003615 	stw	zero,216(sp)
     600:	d8003815 	stw	zero,224(sp)
     604:	1811883a 	mov	r8,r3
     608:	d8003915 	stw	zero,228(sp)
     60c:	d8003a15 	stw	zero,232(sp)
     610:	d8002f15 	stw	zero,188(sp)
     614:	d9002815 	stw	r4,160(sp)
     618:	a8800007 	ldb	r2,0(r21)
     61c:	10027b26 	beq	r2,zero,100c <___vfprintf_internal_r+0xad4>
     620:	00c00944 	movi	r3,37
     624:	a821883a 	mov	r16,r21
     628:	10c0021e 	bne	r2,r3,634 <___vfprintf_internal_r+0xfc>
     62c:	00001406 	br	680 <___vfprintf_internal_r+0x148>
     630:	10c00326 	beq	r2,r3,640 <___vfprintf_internal_r+0x108>
     634:	84000044 	addi	r16,r16,1
     638:	80800007 	ldb	r2,0(r16)
     63c:	103ffc1e 	bne	r2,zero,630 <___vfprintf_internal_r+0xf8>
     640:	8563c83a 	sub	r17,r16,r21
     644:	88000e26 	beq	r17,zero,680 <___vfprintf_internal_r+0x148>
     648:	d8c02017 	ldw	r3,128(sp)
     64c:	d8801f17 	ldw	r2,124(sp)
     650:	45400015 	stw	r21,0(r8)
     654:	1c47883a 	add	r3,r3,r17
     658:	10800044 	addi	r2,r2,1
     65c:	d8c02015 	stw	r3,128(sp)
     660:	44400115 	stw	r17,4(r8)
     664:	d8801f15 	stw	r2,124(sp)
     668:	00c001c4 	movi	r3,7
     66c:	1880a716 	blt	r3,r2,90c <___vfprintf_internal_r+0x3d4>
     670:	42000204 	addi	r8,r8,8
     674:	d9402f17 	ldw	r5,188(sp)
     678:	2c4b883a 	add	r5,r5,r17
     67c:	d9402f15 	stw	r5,188(sp)
     680:	80800007 	ldb	r2,0(r16)
     684:	1000a826 	beq	r2,zero,928 <___vfprintf_internal_r+0x3f0>
     688:	84400047 	ldb	r17,1(r16)
     68c:	00bfffc4 	movi	r2,-1
     690:	85400044 	addi	r21,r16,1
     694:	d8002785 	stb	zero,158(sp)
     698:	0007883a 	mov	r3,zero
     69c:	000f883a 	mov	r7,zero
     6a0:	d8802915 	stw	r2,164(sp)
     6a4:	d8003115 	stw	zero,196(sp)
     6a8:	0025883a 	mov	r18,zero
     6ac:	01401604 	movi	r5,88
     6b0:	01800244 	movi	r6,9
     6b4:	02800a84 	movi	r10,42
     6b8:	02401b04 	movi	r9,108
     6bc:	ad400044 	addi	r21,r21,1
     6c0:	88bff804 	addi	r2,r17,-32
     6c4:	28830436 	bltu	r5,r2,12d8 <___vfprintf_internal_r+0xda0>
     6c8:	100490ba 	slli	r2,r2,2
     6cc:	01000034 	movhi	r4,0
     6d0:	2101b804 	addi	r4,r4,1760
     6d4:	1105883a 	add	r2,r2,r4
     6d8:	10800017 	ldw	r2,0(r2)
     6dc:	1000683a 	jmp	r2
     6e0:	000011f8 	rdprs	zero,zero,71
     6e4:	000012d8 	cmpnei	zero,zero,75
     6e8:	000012d8 	cmpnei	zero,zero,75
     6ec:	00001218 	cmpnei	zero,zero,72
     6f0:	000012d8 	cmpnei	zero,zero,75
     6f4:	000012d8 	cmpnei	zero,zero,75
     6f8:	000012d8 	cmpnei	zero,zero,75
     6fc:	000012d8 	cmpnei	zero,zero,75
     700:	000012d8 	cmpnei	zero,zero,75
     704:	000012d8 	cmpnei	zero,zero,75
     708:	0000098c 	andi	zero,zero,38
     70c:	00001134 	movhi	zero,68
     710:	000012d8 	cmpnei	zero,zero,75
     714:	00000854 	movui	zero,33
     718:	000009b4 	movhi	zero,38
     71c:	000012d8 	cmpnei	zero,zero,75
     720:	000009f4 	movhi	zero,39
     724:	00000a00 	call	a0 <__flash_exceptions_start+0x80>
     728:	00000a00 	call	a0 <__flash_exceptions_start+0x80>
     72c:	00000a00 	call	a0 <__flash_exceptions_start+0x80>
     730:	00000a00 	call	a0 <__flash_exceptions_start+0x80>
     734:	00000a00 	call	a0 <__flash_exceptions_start+0x80>
     738:	00000a00 	call	a0 <__flash_exceptions_start+0x80>
     73c:	00000a00 	call	a0 <__flash_exceptions_start+0x80>
     740:	00000a00 	call	a0 <__flash_exceptions_start+0x80>
     744:	00000a00 	call	a0 <__flash_exceptions_start+0x80>
     748:	000012d8 	cmpnei	zero,zero,75
     74c:	000012d8 	cmpnei	zero,zero,75
     750:	000012d8 	cmpnei	zero,zero,75
     754:	000012d8 	cmpnei	zero,zero,75
     758:	000012d8 	cmpnei	zero,zero,75
     75c:	000012d8 	cmpnei	zero,zero,75
     760:	000012d8 	cmpnei	zero,zero,75
     764:	000012d8 	cmpnei	zero,zero,75
     768:	000012d8 	cmpnei	zero,zero,75
     76c:	000012d8 	cmpnei	zero,zero,75
     770:	00000a34 	movhi	zero,40
     774:	00000af0 	cmpltui	zero,zero,43
     778:	000012d8 	cmpnei	zero,zero,75
     77c:	00000af0 	cmpltui	zero,zero,43
     780:	000012d8 	cmpnei	zero,zero,75
     784:	000012d8 	cmpnei	zero,zero,75
     788:	000012d8 	cmpnei	zero,zero,75
     78c:	000012d8 	cmpnei	zero,zero,75
     790:	00000b90 	cmplti	zero,zero,46
     794:	000012d8 	cmpnei	zero,zero,75
     798:	000012d8 	cmpnei	zero,zero,75
     79c:	00000b9c 	xori	zero,zero,46
     7a0:	000012d8 	cmpnei	zero,zero,75
     7a4:	000012d8 	cmpnei	zero,zero,75
     7a8:	000012d8 	cmpnei	zero,zero,75
     7ac:	000012d8 	cmpnei	zero,zero,75
     7b0:	000012d8 	cmpnei	zero,zero,75
     7b4:	00001014 	movui	zero,64
     7b8:	000012d8 	cmpnei	zero,zero,75
     7bc:	000012d8 	cmpnei	zero,zero,75
     7c0:	00001074 	movhi	zero,65
     7c4:	000012d8 	cmpnei	zero,zero,75
     7c8:	000012d8 	cmpnei	zero,zero,75
     7cc:	000012d8 	cmpnei	zero,zero,75
     7d0:	000012d8 	cmpnei	zero,zero,75
     7d4:	000012d8 	cmpnei	zero,zero,75
     7d8:	000012d8 	cmpnei	zero,zero,75
     7dc:	000012d8 	cmpnei	zero,zero,75
     7e0:	000012d8 	cmpnei	zero,zero,75
     7e4:	000012d8 	cmpnei	zero,zero,75
     7e8:	000012d8 	cmpnei	zero,zero,75
     7ec:	00001284 	movi	zero,74
     7f0:	00001224 	muli	zero,zero,72
     7f4:	00000af0 	cmpltui	zero,zero,43
     7f8:	00000af0 	cmpltui	zero,zero,43
     7fc:	00000af0 	cmpltui	zero,zero,43
     800:	00001234 	movhi	zero,72
     804:	00001224 	muli	zero,zero,72
     808:	000012d8 	cmpnei	zero,zero,75
     80c:	000012d8 	cmpnei	zero,zero,75
     810:	00001240 	call	124 <alt_irq_handler+0x28>
     814:	000012d8 	cmpnei	zero,zero,75
     818:	00001250 	cmplti	zero,zero,73
     81c:	00001124 	muli	zero,zero,68
     820:	00000860 	cmpeqi	zero,zero,33
     824:	00001144 	movi	zero,69
     828:	000012d8 	cmpnei	zero,zero,75
     82c:	00001150 	cmplti	zero,zero,69
     830:	000012d8 	cmpnei	zero,zero,75
     834:	000011ac 	andhi	zero,zero,70
     838:	000012d8 	cmpnei	zero,zero,75
     83c:	000012d8 	cmpnei	zero,zero,75
     840:	000011bc 	xorhi	zero,zero,70
     844:	d9003117 	ldw	r4,196(sp)
     848:	d8802d15 	stw	r2,180(sp)
     84c:	0109c83a 	sub	r4,zero,r4
     850:	d9003115 	stw	r4,196(sp)
     854:	94800114 	ori	r18,r18,4
     858:	ac400007 	ldb	r17,0(r21)
     85c:	003f9706 	br	6bc <___vfprintf_internal_r+0x184>
     860:	00800c04 	movi	r2,48
     864:	d9002d17 	ldw	r4,180(sp)
     868:	d9402917 	ldw	r5,164(sp)
     86c:	d8802705 	stb	r2,156(sp)
     870:	00801e04 	movi	r2,120
     874:	d8802745 	stb	r2,157(sp)
     878:	d8002785 	stb	zero,158(sp)
     87c:	20c00104 	addi	r3,r4,4
     880:	24c00017 	ldw	r19,0(r4)
     884:	002d883a 	mov	r22,zero
     888:	90800094 	ori	r2,r18,2
     88c:	28029a16 	blt	r5,zero,12f8 <___vfprintf_internal_r+0xdc0>
     890:	00bfdfc4 	movi	r2,-129
     894:	90a4703a 	and	r18,r18,r2
     898:	d8c02d15 	stw	r3,180(sp)
     89c:	94800094 	ori	r18,r18,2
     8a0:	9802871e 	bne	r19,zero,12c0 <___vfprintf_internal_r+0xd88>
     8a4:	00800074 	movhi	r2,1
     8a8:	10bd7104 	addi	r2,r2,-2620
     8ac:	d8803915 	stw	r2,228(sp)
     8b0:	04401e04 	movi	r17,120
     8b4:	d8802917 	ldw	r2,164(sp)
     8b8:	0039883a 	mov	fp,zero
     8bc:	1001e926 	beq	r2,zero,1064 <___vfprintf_internal_r+0xb2c>
     8c0:	0027883a 	mov	r19,zero
     8c4:	002d883a 	mov	r22,zero
     8c8:	00020506 	br	10e0 <___vfprintf_internal_r+0xba8>
     8cc:	d9002c17 	ldw	r4,176(sp)
     8d0:	b80b883a 	mov	r5,r23
     8d4:	00028080 	call	2808 <__swsetup_r>
     8d8:	1005ac1e 	bne	r2,zero,1f8c <___vfprintf_internal_r+0x1a54>
     8dc:	b880030b 	ldhu	r2,12(r23)
     8e0:	00c00284 	movi	r3,10
     8e4:	1080068c 	andi	r2,r2,26
     8e8:	10ff3c1e 	bne	r2,r3,5dc <___vfprintf_internal_r+0xa4>
     8ec:	b880038f 	ldh	r2,14(r23)
     8f0:	103f3a16 	blt	r2,zero,5dc <___vfprintf_internal_r+0xa4>
     8f4:	d9c02d17 	ldw	r7,180(sp)
     8f8:	d9002c17 	ldw	r4,176(sp)
     8fc:	a80d883a 	mov	r6,r21
     900:	b80b883a 	mov	r5,r23
     904:	000274c0 	call	274c <__sbprintf>
     908:	00001106 	br	950 <___vfprintf_internal_r+0x418>
     90c:	d9002c17 	ldw	r4,176(sp)
     910:	d9801e04 	addi	r6,sp,120
     914:	b80b883a 	mov	r5,r23
     918:	0007b340 	call	7b34 <__sprint_r>
     91c:	1000081e 	bne	r2,zero,940 <___vfprintf_internal_r+0x408>
     920:	da000404 	addi	r8,sp,16
     924:	003f5306 	br	674 <___vfprintf_internal_r+0x13c>
     928:	d8802017 	ldw	r2,128(sp)
     92c:	10000426 	beq	r2,zero,940 <___vfprintf_internal_r+0x408>
     930:	d9002c17 	ldw	r4,176(sp)
     934:	d9801e04 	addi	r6,sp,120
     938:	b80b883a 	mov	r5,r23
     93c:	0007b340 	call	7b34 <__sprint_r>
     940:	b880030b 	ldhu	r2,12(r23)
     944:	1080100c 	andi	r2,r2,64
     948:	1005901e 	bne	r2,zero,1f8c <___vfprintf_internal_r+0x1a54>
     94c:	d8802f17 	ldw	r2,188(sp)
     950:	dfc04717 	ldw	ra,284(sp)
     954:	df004617 	ldw	fp,280(sp)
     958:	ddc04517 	ldw	r23,276(sp)
     95c:	dd804417 	ldw	r22,272(sp)
     960:	dd404317 	ldw	r21,268(sp)
     964:	dd004217 	ldw	r20,264(sp)
     968:	dcc04117 	ldw	r19,260(sp)
     96c:	dc804017 	ldw	r18,256(sp)
     970:	dc403f17 	ldw	r17,252(sp)
     974:	dc003e17 	ldw	r16,248(sp)
     978:	dec04804 	addi	sp,sp,288
     97c:	f800283a 	ret
     980:	d9002c17 	ldw	r4,176(sp)
     984:	00047dc0 	call	47dc <__sinit>
     988:	003f0406 	br	59c <___vfprintf_internal_r+0x64>
     98c:	d8802d17 	ldw	r2,180(sp)
     990:	d9002d17 	ldw	r4,180(sp)
     994:	10800017 	ldw	r2,0(r2)
     998:	d8803115 	stw	r2,196(sp)
     99c:	20800104 	addi	r2,r4,4
     9a0:	d9003117 	ldw	r4,196(sp)
     9a4:	203fa716 	blt	r4,zero,844 <___vfprintf_internal_r+0x30c>
     9a8:	d8802d15 	stw	r2,180(sp)
     9ac:	ac400007 	ldb	r17,0(r21)
     9b0:	003f4206 	br	6bc <___vfprintf_internal_r+0x184>
     9b4:	ac400007 	ldb	r17,0(r21)
     9b8:	aac00044 	addi	r11,r21,1
     9bc:	8a872826 	beq	r17,r10,2660 <___vfprintf_internal_r+0x2128>
     9c0:	88bff404 	addi	r2,r17,-48
     9c4:	0009883a 	mov	r4,zero
     9c8:	30867d36 	bltu	r6,r2,23c0 <___vfprintf_internal_r+0x1e88>
     9cc:	5c400007 	ldb	r17,0(r11)
     9d0:	210002a4 	muli	r4,r4,10
     9d4:	5d400044 	addi	r21,r11,1
     9d8:	a817883a 	mov	r11,r21
     9dc:	2089883a 	add	r4,r4,r2
     9e0:	88bff404 	addi	r2,r17,-48
     9e4:	30bff92e 	bgeu	r6,r2,9cc <___vfprintf_internal_r+0x494>
     9e8:	2005c916 	blt	r4,zero,2110 <___vfprintf_internal_r+0x1bd8>
     9ec:	d9002915 	stw	r4,164(sp)
     9f0:	003f3306 	br	6c0 <___vfprintf_internal_r+0x188>
     9f4:	94802014 	ori	r18,r18,128
     9f8:	ac400007 	ldb	r17,0(r21)
     9fc:	003f2f06 	br	6bc <___vfprintf_internal_r+0x184>
     a00:	a809883a 	mov	r4,r21
     a04:	d8003115 	stw	zero,196(sp)
     a08:	88bff404 	addi	r2,r17,-48
     a0c:	0017883a 	mov	r11,zero
     a10:	24400007 	ldb	r17,0(r4)
     a14:	5ac002a4 	muli	r11,r11,10
     a18:	ad400044 	addi	r21,r21,1
     a1c:	a809883a 	mov	r4,r21
     a20:	12d7883a 	add	r11,r2,r11
     a24:	88bff404 	addi	r2,r17,-48
     a28:	30bff92e 	bgeu	r6,r2,a10 <___vfprintf_internal_r+0x4d8>
     a2c:	dac03115 	stw	r11,196(sp)
     a30:	003f2306 	br	6c0 <___vfprintf_internal_r+0x188>
     a34:	18c03fcc 	andi	r3,r3,255
     a38:	18072b1e 	bne	r3,zero,26e8 <___vfprintf_internal_r+0x21b0>
     a3c:	94800414 	ori	r18,r18,16
     a40:	9080080c 	andi	r2,r18,32
     a44:	10037b26 	beq	r2,zero,1834 <___vfprintf_internal_r+0x12fc>
     a48:	d9402d17 	ldw	r5,180(sp)
     a4c:	28800117 	ldw	r2,4(r5)
     a50:	2cc00017 	ldw	r19,0(r5)
     a54:	29400204 	addi	r5,r5,8
     a58:	d9402d15 	stw	r5,180(sp)
     a5c:	102d883a 	mov	r22,r2
     a60:	10044b16 	blt	r2,zero,1b90 <___vfprintf_internal_r+0x1658>
     a64:	d9402917 	ldw	r5,164(sp)
     a68:	df002783 	ldbu	fp,158(sp)
     a6c:	2803bc16 	blt	r5,zero,1960 <___vfprintf_internal_r+0x1428>
     a70:	00ffdfc4 	movi	r3,-129
     a74:	9d84b03a 	or	r2,r19,r22
     a78:	90e4703a 	and	r18,r18,r3
     a7c:	10017726 	beq	r2,zero,105c <___vfprintf_internal_r+0xb24>
     a80:	b0038326 	beq	r22,zero,1890 <___vfprintf_internal_r+0x1358>
     a84:	dc402a15 	stw	r17,168(sp)
     a88:	dc001e04 	addi	r16,sp,120
     a8c:	b023883a 	mov	r17,r22
     a90:	402d883a 	mov	r22,r8
     a94:	9809883a 	mov	r4,r19
     a98:	880b883a 	mov	r5,r17
     a9c:	01800284 	movi	r6,10
     aa0:	000f883a 	mov	r7,zero
     aa4:	0009f2c0 	call	9f2c <__umoddi3>
     aa8:	10800c04 	addi	r2,r2,48
     aac:	843fffc4 	addi	r16,r16,-1
     ab0:	9809883a 	mov	r4,r19
     ab4:	880b883a 	mov	r5,r17
     ab8:	80800005 	stb	r2,0(r16)
     abc:	01800284 	movi	r6,10
     ac0:	000f883a 	mov	r7,zero
     ac4:	00099b40 	call	99b4 <__udivdi3>
     ac8:	1027883a 	mov	r19,r2
     acc:	10c4b03a 	or	r2,r2,r3
     ad0:	1823883a 	mov	r17,r3
     ad4:	103fef1e 	bne	r2,zero,a94 <___vfprintf_internal_r+0x55c>
     ad8:	d8c02817 	ldw	r3,160(sp)
     adc:	dc402a17 	ldw	r17,168(sp)
     ae0:	b011883a 	mov	r8,r22
     ae4:	1c07c83a 	sub	r3,r3,r16
     ae8:	d8c02e15 	stw	r3,184(sp)
     aec:	00005906 	br	c54 <___vfprintf_internal_r+0x71c>
     af0:	18c03fcc 	andi	r3,r3,255
     af4:	1806fa1e 	bne	r3,zero,26e0 <___vfprintf_internal_r+0x21a8>
     af8:	9080020c 	andi	r2,r18,8
     afc:	10048a26 	beq	r2,zero,1d28 <___vfprintf_internal_r+0x17f0>
     b00:	d8c02d17 	ldw	r3,180(sp)
     b04:	d9002d17 	ldw	r4,180(sp)
     b08:	d9402d17 	ldw	r5,180(sp)
     b0c:	18c00017 	ldw	r3,0(r3)
     b10:	21000117 	ldw	r4,4(r4)
     b14:	29400204 	addi	r5,r5,8
     b18:	d8c03615 	stw	r3,216(sp)
     b1c:	d9003815 	stw	r4,224(sp)
     b20:	d9402d15 	stw	r5,180(sp)
     b24:	d9003617 	ldw	r4,216(sp)
     b28:	d9403817 	ldw	r5,224(sp)
     b2c:	da003d15 	stw	r8,244(sp)
     b30:	04000044 	movi	r16,1
     b34:	00077580 	call	7758 <__fpclassifyd>
     b38:	da003d17 	ldw	r8,244(sp)
     b3c:	14041f1e 	bne	r2,r16,1bbc <___vfprintf_internal_r+0x1684>
     b40:	d9003617 	ldw	r4,216(sp)
     b44:	d9403817 	ldw	r5,224(sp)
     b48:	000d883a 	mov	r6,zero
     b4c:	000f883a 	mov	r7,zero
     b50:	000b9100 	call	b910 <__ledf2>
     b54:	da003d17 	ldw	r8,244(sp)
     b58:	1005be16 	blt	r2,zero,2254 <___vfprintf_internal_r+0x1d1c>
     b5c:	df002783 	ldbu	fp,158(sp)
     b60:	008011c4 	movi	r2,71
     b64:	1445330e 	bge	r2,r17,2034 <___vfprintf_internal_r+0x1afc>
     b68:	04000074 	movhi	r16,1
     b6c:	843d6904 	addi	r16,r16,-2652
     b70:	00c000c4 	movi	r3,3
     b74:	00bfdfc4 	movi	r2,-129
     b78:	d8c02a15 	stw	r3,168(sp)
     b7c:	90a4703a 	and	r18,r18,r2
     b80:	d8c02e15 	stw	r3,184(sp)
     b84:	d8002915 	stw	zero,164(sp)
     b88:	d8003215 	stw	zero,200(sp)
     b8c:	00003706 	br	c6c <___vfprintf_internal_r+0x734>
     b90:	94800214 	ori	r18,r18,8
     b94:	ac400007 	ldb	r17,0(r21)
     b98:	003ec806 	br	6bc <___vfprintf_internal_r+0x184>
     b9c:	18c03fcc 	andi	r3,r3,255
     ba0:	1806db1e 	bne	r3,zero,2710 <___vfprintf_internal_r+0x21d8>
     ba4:	94800414 	ori	r18,r18,16
     ba8:	9080080c 	andi	r2,r18,32
     bac:	1002d826 	beq	r2,zero,1710 <___vfprintf_internal_r+0x11d8>
     bb0:	d9402d17 	ldw	r5,180(sp)
     bb4:	d8c02917 	ldw	r3,164(sp)
     bb8:	d8002785 	stb	zero,158(sp)
     bbc:	28800204 	addi	r2,r5,8
     bc0:	2cc00017 	ldw	r19,0(r5)
     bc4:	2d800117 	ldw	r22,4(r5)
     bc8:	18048f16 	blt	r3,zero,1e08 <___vfprintf_internal_r+0x18d0>
     bcc:	013fdfc4 	movi	r4,-129
     bd0:	9d86b03a 	or	r3,r19,r22
     bd4:	d8802d15 	stw	r2,180(sp)
     bd8:	9124703a 	and	r18,r18,r4
     bdc:	1802d91e 	bne	r3,zero,1744 <___vfprintf_internal_r+0x120c>
     be0:	d8c02917 	ldw	r3,164(sp)
     be4:	0039883a 	mov	fp,zero
     be8:	1805c326 	beq	r3,zero,22f8 <___vfprintf_internal_r+0x1dc0>
     bec:	0027883a 	mov	r19,zero
     bf0:	002d883a 	mov	r22,zero
     bf4:	dc001e04 	addi	r16,sp,120
     bf8:	9806d0fa 	srli	r3,r19,3
     bfc:	b008977a 	slli	r4,r22,29
     c00:	b02cd0fa 	srli	r22,r22,3
     c04:	9cc001cc 	andi	r19,r19,7
     c08:	98800c04 	addi	r2,r19,48
     c0c:	843fffc4 	addi	r16,r16,-1
     c10:	20e6b03a 	or	r19,r4,r3
     c14:	80800005 	stb	r2,0(r16)
     c18:	9d86b03a 	or	r3,r19,r22
     c1c:	183ff61e 	bne	r3,zero,bf8 <___vfprintf_internal_r+0x6c0>
     c20:	90c0004c 	andi	r3,r18,1
     c24:	18013b26 	beq	r3,zero,1114 <___vfprintf_internal_r+0xbdc>
     c28:	10803fcc 	andi	r2,r2,255
     c2c:	1080201c 	xori	r2,r2,128
     c30:	10bfe004 	addi	r2,r2,-128
     c34:	00c00c04 	movi	r3,48
     c38:	10c13626 	beq	r2,r3,1114 <___vfprintf_internal_r+0xbdc>
     c3c:	80ffffc5 	stb	r3,-1(r16)
     c40:	d8c02817 	ldw	r3,160(sp)
     c44:	80bfffc4 	addi	r2,r16,-1
     c48:	1021883a 	mov	r16,r2
     c4c:	1887c83a 	sub	r3,r3,r2
     c50:	d8c02e15 	stw	r3,184(sp)
     c54:	d8802e17 	ldw	r2,184(sp)
     c58:	d9002917 	ldw	r4,164(sp)
     c5c:	1100010e 	bge	r2,r4,c64 <___vfprintf_internal_r+0x72c>
     c60:	2005883a 	mov	r2,r4
     c64:	d8802a15 	stw	r2,168(sp)
     c68:	d8003215 	stw	zero,200(sp)
     c6c:	e7003fcc 	andi	fp,fp,255
     c70:	e700201c 	xori	fp,fp,128
     c74:	e73fe004 	addi	fp,fp,-128
     c78:	e0000326 	beq	fp,zero,c88 <___vfprintf_internal_r+0x750>
     c7c:	d8c02a17 	ldw	r3,168(sp)
     c80:	18c00044 	addi	r3,r3,1
     c84:	d8c02a15 	stw	r3,168(sp)
     c88:	90c0008c 	andi	r3,r18,2
     c8c:	d8c02b15 	stw	r3,172(sp)
     c90:	18000326 	beq	r3,zero,ca0 <___vfprintf_internal_r+0x768>
     c94:	d8c02a17 	ldw	r3,168(sp)
     c98:	18c00084 	addi	r3,r3,2
     c9c:	d8c02a15 	stw	r3,168(sp)
     ca0:	90c0210c 	andi	r3,r18,132
     ca4:	d8c03015 	stw	r3,192(sp)
     ca8:	1801a31e 	bne	r3,zero,1338 <___vfprintf_internal_r+0xe00>
     cac:	d9003117 	ldw	r4,196(sp)
     cb0:	d8c02a17 	ldw	r3,168(sp)
     cb4:	20e7c83a 	sub	r19,r4,r3
     cb8:	04c19f0e 	bge	zero,r19,1338 <___vfprintf_internal_r+0xe00>
     cbc:	02400404 	movi	r9,16
     cc0:	d8c02017 	ldw	r3,128(sp)
     cc4:	d8801f17 	ldw	r2,124(sp)
     cc8:	4cc50d0e 	bge	r9,r19,2100 <___vfprintf_internal_r+0x1bc8>
     ccc:	01400074 	movhi	r5,1
     cd0:	297d7c84 	addi	r5,r5,-2574
     cd4:	dc403b15 	stw	r17,236(sp)
     cd8:	d9403515 	stw	r5,212(sp)
     cdc:	9823883a 	mov	r17,r19
     ce0:	482d883a 	mov	r22,r9
     ce4:	9027883a 	mov	r19,r18
     ce8:	070001c4 	movi	fp,7
     cec:	8025883a 	mov	r18,r16
     cf0:	dc002c17 	ldw	r16,176(sp)
     cf4:	00000306 	br	d04 <___vfprintf_internal_r+0x7cc>
     cf8:	8c7ffc04 	addi	r17,r17,-16
     cfc:	42000204 	addi	r8,r8,8
     d00:	b440130e 	bge	r22,r17,d50 <___vfprintf_internal_r+0x818>
     d04:	01000074 	movhi	r4,1
     d08:	18c00404 	addi	r3,r3,16
     d0c:	10800044 	addi	r2,r2,1
     d10:	213d7c84 	addi	r4,r4,-2574
     d14:	41000015 	stw	r4,0(r8)
     d18:	45800115 	stw	r22,4(r8)
     d1c:	d8c02015 	stw	r3,128(sp)
     d20:	d8801f15 	stw	r2,124(sp)
     d24:	e0bff40e 	bge	fp,r2,cf8 <___vfprintf_internal_r+0x7c0>
     d28:	d9801e04 	addi	r6,sp,120
     d2c:	b80b883a 	mov	r5,r23
     d30:	8009883a 	mov	r4,r16
     d34:	0007b340 	call	7b34 <__sprint_r>
     d38:	103f011e 	bne	r2,zero,940 <___vfprintf_internal_r+0x408>
     d3c:	8c7ffc04 	addi	r17,r17,-16
     d40:	d8c02017 	ldw	r3,128(sp)
     d44:	d8801f17 	ldw	r2,124(sp)
     d48:	da000404 	addi	r8,sp,16
     d4c:	b47fed16 	blt	r22,r17,d04 <___vfprintf_internal_r+0x7cc>
     d50:	9021883a 	mov	r16,r18
     d54:	9825883a 	mov	r18,r19
     d58:	8827883a 	mov	r19,r17
     d5c:	dc403b17 	ldw	r17,236(sp)
     d60:	d9403517 	ldw	r5,212(sp)
     d64:	98c7883a 	add	r3,r19,r3
     d68:	10800044 	addi	r2,r2,1
     d6c:	41400015 	stw	r5,0(r8)
     d70:	44c00115 	stw	r19,4(r8)
     d74:	d8c02015 	stw	r3,128(sp)
     d78:	d8801f15 	stw	r2,124(sp)
     d7c:	010001c4 	movi	r4,7
     d80:	2082a316 	blt	r4,r2,1810 <___vfprintf_internal_r+0x12d8>
     d84:	df002787 	ldb	fp,158(sp)
     d88:	42000204 	addi	r8,r8,8
     d8c:	e0000c26 	beq	fp,zero,dc0 <___vfprintf_internal_r+0x888>
     d90:	d8801f17 	ldw	r2,124(sp)
     d94:	d9002784 	addi	r4,sp,158
     d98:	18c00044 	addi	r3,r3,1
     d9c:	10800044 	addi	r2,r2,1
     da0:	41000015 	stw	r4,0(r8)
     da4:	01000044 	movi	r4,1
     da8:	41000115 	stw	r4,4(r8)
     dac:	d8c02015 	stw	r3,128(sp)
     db0:	d8801f15 	stw	r2,124(sp)
     db4:	010001c4 	movi	r4,7
     db8:	20823c16 	blt	r4,r2,16ac <___vfprintf_internal_r+0x1174>
     dbc:	42000204 	addi	r8,r8,8
     dc0:	d8802b17 	ldw	r2,172(sp)
     dc4:	10000c26 	beq	r2,zero,df8 <___vfprintf_internal_r+0x8c0>
     dc8:	d8801f17 	ldw	r2,124(sp)
     dcc:	d9002704 	addi	r4,sp,156
     dd0:	18c00084 	addi	r3,r3,2
     dd4:	10800044 	addi	r2,r2,1
     dd8:	41000015 	stw	r4,0(r8)
     ddc:	01000084 	movi	r4,2
     de0:	41000115 	stw	r4,4(r8)
     de4:	d8c02015 	stw	r3,128(sp)
     de8:	d8801f15 	stw	r2,124(sp)
     dec:	010001c4 	movi	r4,7
     df0:	20823616 	blt	r4,r2,16cc <___vfprintf_internal_r+0x1194>
     df4:	42000204 	addi	r8,r8,8
     df8:	d9003017 	ldw	r4,192(sp)
     dfc:	00802004 	movi	r2,128
     e00:	20819926 	beq	r4,r2,1468 <___vfprintf_internal_r+0xf30>
     e04:	d9402917 	ldw	r5,164(sp)
     e08:	d8802e17 	ldw	r2,184(sp)
     e0c:	28adc83a 	sub	r22,r5,r2
     e10:	0580310e 	bge	zero,r22,ed8 <___vfprintf_internal_r+0x9a0>
     e14:	07000404 	movi	fp,16
     e18:	d8801f17 	ldw	r2,124(sp)
     e1c:	e584140e 	bge	fp,r22,1e70 <___vfprintf_internal_r+0x1938>
     e20:	01400074 	movhi	r5,1
     e24:	297d7884 	addi	r5,r5,-2590
     e28:	dc402915 	stw	r17,164(sp)
     e2c:	d9402b15 	stw	r5,172(sp)
     e30:	b023883a 	mov	r17,r22
     e34:	04c001c4 	movi	r19,7
     e38:	a82d883a 	mov	r22,r21
     e3c:	902b883a 	mov	r21,r18
     e40:	8025883a 	mov	r18,r16
     e44:	dc002c17 	ldw	r16,176(sp)
     e48:	00000306 	br	e58 <___vfprintf_internal_r+0x920>
     e4c:	8c7ffc04 	addi	r17,r17,-16
     e50:	42000204 	addi	r8,r8,8
     e54:	e440110e 	bge	fp,r17,e9c <___vfprintf_internal_r+0x964>
     e58:	18c00404 	addi	r3,r3,16
     e5c:	10800044 	addi	r2,r2,1
     e60:	45000015 	stw	r20,0(r8)
     e64:	47000115 	stw	fp,4(r8)
     e68:	d8c02015 	stw	r3,128(sp)
     e6c:	d8801f15 	stw	r2,124(sp)
     e70:	98bff60e 	bge	r19,r2,e4c <___vfprintf_internal_r+0x914>
     e74:	d9801e04 	addi	r6,sp,120
     e78:	b80b883a 	mov	r5,r23
     e7c:	8009883a 	mov	r4,r16
     e80:	0007b340 	call	7b34 <__sprint_r>
     e84:	103eae1e 	bne	r2,zero,940 <___vfprintf_internal_r+0x408>
     e88:	8c7ffc04 	addi	r17,r17,-16
     e8c:	d8c02017 	ldw	r3,128(sp)
     e90:	d8801f17 	ldw	r2,124(sp)
     e94:	da000404 	addi	r8,sp,16
     e98:	e47fef16 	blt	fp,r17,e58 <___vfprintf_internal_r+0x920>
     e9c:	9021883a 	mov	r16,r18
     ea0:	a825883a 	mov	r18,r21
     ea4:	b02b883a 	mov	r21,r22
     ea8:	882d883a 	mov	r22,r17
     eac:	dc402917 	ldw	r17,164(sp)
     eb0:	d9002b17 	ldw	r4,172(sp)
     eb4:	1d87883a 	add	r3,r3,r22
     eb8:	10800044 	addi	r2,r2,1
     ebc:	41000015 	stw	r4,0(r8)
     ec0:	45800115 	stw	r22,4(r8)
     ec4:	d8c02015 	stw	r3,128(sp)
     ec8:	d8801f15 	stw	r2,124(sp)
     ecc:	010001c4 	movi	r4,7
     ed0:	2081ee16 	blt	r4,r2,168c <___vfprintf_internal_r+0x1154>
     ed4:	42000204 	addi	r8,r8,8
     ed8:	9080400c 	andi	r2,r18,256
     edc:	1001181e 	bne	r2,zero,1340 <___vfprintf_internal_r+0xe08>
     ee0:	d9402e17 	ldw	r5,184(sp)
     ee4:	d8801f17 	ldw	r2,124(sp)
     ee8:	44000015 	stw	r16,0(r8)
     eec:	1947883a 	add	r3,r3,r5
     ef0:	10800044 	addi	r2,r2,1
     ef4:	41400115 	stw	r5,4(r8)
     ef8:	d8c02015 	stw	r3,128(sp)
     efc:	d8801f15 	stw	r2,124(sp)
     f00:	010001c4 	movi	r4,7
     f04:	2081d316 	blt	r4,r2,1654 <___vfprintf_internal_r+0x111c>
     f08:	42000204 	addi	r8,r8,8
     f0c:	9480010c 	andi	r18,r18,4
     f10:	90003226 	beq	r18,zero,fdc <___vfprintf_internal_r+0xaa4>
     f14:	d9403117 	ldw	r5,196(sp)
     f18:	d8802a17 	ldw	r2,168(sp)
     f1c:	28a1c83a 	sub	r16,r5,r2
     f20:	04002e0e 	bge	zero,r16,fdc <___vfprintf_internal_r+0xaa4>
     f24:	04400404 	movi	r17,16
     f28:	d8801f17 	ldw	r2,124(sp)
     f2c:	8c04a20e 	bge	r17,r16,21b8 <___vfprintf_internal_r+0x1c80>
     f30:	01400074 	movhi	r5,1
     f34:	297d7c84 	addi	r5,r5,-2574
     f38:	d9403515 	stw	r5,212(sp)
     f3c:	048001c4 	movi	r18,7
     f40:	dcc02c17 	ldw	r19,176(sp)
     f44:	00000306 	br	f54 <___vfprintf_internal_r+0xa1c>
     f48:	843ffc04 	addi	r16,r16,-16
     f4c:	42000204 	addi	r8,r8,8
     f50:	8c00130e 	bge	r17,r16,fa0 <___vfprintf_internal_r+0xa68>
     f54:	01000074 	movhi	r4,1
     f58:	18c00404 	addi	r3,r3,16
     f5c:	10800044 	addi	r2,r2,1
     f60:	213d7c84 	addi	r4,r4,-2574
     f64:	41000015 	stw	r4,0(r8)
     f68:	44400115 	stw	r17,4(r8)
     f6c:	d8c02015 	stw	r3,128(sp)
     f70:	d8801f15 	stw	r2,124(sp)
     f74:	90bff40e 	bge	r18,r2,f48 <___vfprintf_internal_r+0xa10>
     f78:	d9801e04 	addi	r6,sp,120
     f7c:	b80b883a 	mov	r5,r23
     f80:	9809883a 	mov	r4,r19
     f84:	0007b340 	call	7b34 <__sprint_r>
     f88:	103e6d1e 	bne	r2,zero,940 <___vfprintf_internal_r+0x408>
     f8c:	843ffc04 	addi	r16,r16,-16
     f90:	d8c02017 	ldw	r3,128(sp)
     f94:	d8801f17 	ldw	r2,124(sp)
     f98:	da000404 	addi	r8,sp,16
     f9c:	8c3fed16 	blt	r17,r16,f54 <___vfprintf_internal_r+0xa1c>
     fa0:	d9403517 	ldw	r5,212(sp)
     fa4:	1c07883a 	add	r3,r3,r16
     fa8:	10800044 	addi	r2,r2,1
     fac:	41400015 	stw	r5,0(r8)
     fb0:	44000115 	stw	r16,4(r8)
     fb4:	d8c02015 	stw	r3,128(sp)
     fb8:	d8801f15 	stw	r2,124(sp)
     fbc:	010001c4 	movi	r4,7
     fc0:	2080060e 	bge	r4,r2,fdc <___vfprintf_internal_r+0xaa4>
     fc4:	d9002c17 	ldw	r4,176(sp)
     fc8:	d9801e04 	addi	r6,sp,120
     fcc:	b80b883a 	mov	r5,r23
     fd0:	0007b340 	call	7b34 <__sprint_r>
     fd4:	103e5a1e 	bne	r2,zero,940 <___vfprintf_internal_r+0x408>
     fd8:	d8c02017 	ldw	r3,128(sp)
     fdc:	d8803117 	ldw	r2,196(sp)
     fe0:	d9002a17 	ldw	r4,168(sp)
     fe4:	1100010e 	bge	r2,r4,fec <___vfprintf_internal_r+0xab4>
     fe8:	2005883a 	mov	r2,r4
     fec:	d9402f17 	ldw	r5,188(sp)
     ff0:	288b883a 	add	r5,r5,r2
     ff4:	d9402f15 	stw	r5,188(sp)
     ff8:	18019e1e 	bne	r3,zero,1674 <___vfprintf_internal_r+0x113c>
     ffc:	a8800007 	ldb	r2,0(r21)
    1000:	d8001f15 	stw	zero,124(sp)
    1004:	da000404 	addi	r8,sp,16
    1008:	103d851e 	bne	r2,zero,620 <___vfprintf_internal_r+0xe8>
    100c:	a821883a 	mov	r16,r21
    1010:	003d9b06 	br	680 <___vfprintf_internal_r+0x148>
    1014:	18c03fcc 	andi	r3,r3,255
    1018:	1805c11e 	bne	r3,zero,2720 <___vfprintf_internal_r+0x21e8>
    101c:	94800414 	ori	r18,r18,16
    1020:	9080080c 	andi	r2,r18,32
    1024:	10020c26 	beq	r2,zero,1858 <___vfprintf_internal_r+0x1320>
    1028:	d8802d17 	ldw	r2,180(sp)
    102c:	d9002917 	ldw	r4,164(sp)
    1030:	d8002785 	stb	zero,158(sp)
    1034:	10c00204 	addi	r3,r2,8
    1038:	14c00017 	ldw	r19,0(r2)
    103c:	15800117 	ldw	r22,4(r2)
    1040:	20040f16 	blt	r4,zero,2080 <___vfprintf_internal_r+0x1b48>
    1044:	013fdfc4 	movi	r4,-129
    1048:	9d84b03a 	or	r2,r19,r22
    104c:	d8c02d15 	stw	r3,180(sp)
    1050:	9124703a 	and	r18,r18,r4
    1054:	0039883a 	mov	fp,zero
    1058:	103e891e 	bne	r2,zero,a80 <___vfprintf_internal_r+0x548>
    105c:	d9002917 	ldw	r4,164(sp)
    1060:	2002c11e 	bne	r4,zero,1b68 <___vfprintf_internal_r+0x1630>
    1064:	d8002915 	stw	zero,164(sp)
    1068:	d8002e15 	stw	zero,184(sp)
    106c:	dc001e04 	addi	r16,sp,120
    1070:	003ef806 	br	c54 <___vfprintf_internal_r+0x71c>
    1074:	18c03fcc 	andi	r3,r3,255
    1078:	18059d1e 	bne	r3,zero,26f0 <___vfprintf_internal_r+0x21b8>
    107c:	01400074 	movhi	r5,1
    1080:	297d6c04 	addi	r5,r5,-2640
    1084:	d9403915 	stw	r5,228(sp)
    1088:	9080080c 	andi	r2,r18,32
    108c:	10005226 	beq	r2,zero,11d8 <___vfprintf_internal_r+0xca0>
    1090:	d8802d17 	ldw	r2,180(sp)
    1094:	14c00017 	ldw	r19,0(r2)
    1098:	15800117 	ldw	r22,4(r2)
    109c:	10800204 	addi	r2,r2,8
    10a0:	d8802d15 	stw	r2,180(sp)
    10a4:	9080004c 	andi	r2,r18,1
    10a8:	10019026 	beq	r2,zero,16ec <___vfprintf_internal_r+0x11b4>
    10ac:	9d84b03a 	or	r2,r19,r22
    10b0:	10036926 	beq	r2,zero,1e58 <___vfprintf_internal_r+0x1920>
    10b4:	d8c02917 	ldw	r3,164(sp)
    10b8:	00800c04 	movi	r2,48
    10bc:	d8802705 	stb	r2,156(sp)
    10c0:	dc402745 	stb	r17,157(sp)
    10c4:	d8002785 	stb	zero,158(sp)
    10c8:	90800094 	ori	r2,r18,2
    10cc:	18045d16 	blt	r3,zero,2244 <___vfprintf_internal_r+0x1d0c>
    10d0:	00bfdfc4 	movi	r2,-129
    10d4:	90a4703a 	and	r18,r18,r2
    10d8:	94800094 	ori	r18,r18,2
    10dc:	0039883a 	mov	fp,zero
    10e0:	d9003917 	ldw	r4,228(sp)
    10e4:	dc001e04 	addi	r16,sp,120
    10e8:	988003cc 	andi	r2,r19,15
    10ec:	b006973a 	slli	r3,r22,28
    10f0:	2085883a 	add	r2,r4,r2
    10f4:	9826d13a 	srli	r19,r19,4
    10f8:	10800003 	ldbu	r2,0(r2)
    10fc:	b02cd13a 	srli	r22,r22,4
    1100:	843fffc4 	addi	r16,r16,-1
    1104:	1ce6b03a 	or	r19,r3,r19
    1108:	80800005 	stb	r2,0(r16)
    110c:	9d84b03a 	or	r2,r19,r22
    1110:	103ff51e 	bne	r2,zero,10e8 <___vfprintf_internal_r+0xbb0>
    1114:	d8c02817 	ldw	r3,160(sp)
    1118:	1c07c83a 	sub	r3,r3,r16
    111c:	d8c02e15 	stw	r3,184(sp)
    1120:	003ecc06 	br	c54 <___vfprintf_internal_r+0x71c>
    1124:	18c03fcc 	andi	r3,r3,255
    1128:	183e9f26 	beq	r3,zero,ba8 <___vfprintf_internal_r+0x670>
    112c:	d9c02785 	stb	r7,158(sp)
    1130:	003e9d06 	br	ba8 <___vfprintf_internal_r+0x670>
    1134:	00c00044 	movi	r3,1
    1138:	01c00ac4 	movi	r7,43
    113c:	ac400007 	ldb	r17,0(r21)
    1140:	003d5e06 	br	6bc <___vfprintf_internal_r+0x184>
    1144:	94800814 	ori	r18,r18,32
    1148:	ac400007 	ldb	r17,0(r21)
    114c:	003d5b06 	br	6bc <___vfprintf_internal_r+0x184>
    1150:	d8c02d17 	ldw	r3,180(sp)
    1154:	d8002785 	stb	zero,158(sp)
    1158:	1c000017 	ldw	r16,0(r3)
    115c:	1cc00104 	addi	r19,r3,4
    1160:	80041926 	beq	r16,zero,21c8 <___vfprintf_internal_r+0x1c90>
    1164:	d9002917 	ldw	r4,164(sp)
    1168:	2003d016 	blt	r4,zero,20ac <___vfprintf_internal_r+0x1b74>
    116c:	200d883a 	mov	r6,r4
    1170:	000b883a 	mov	r5,zero
    1174:	8009883a 	mov	r4,r16
    1178:	da003d15 	stw	r8,244(sp)
    117c:	0005d480 	call	5d48 <memchr>
    1180:	da003d17 	ldw	r8,244(sp)
    1184:	10045426 	beq	r2,zero,22d8 <___vfprintf_internal_r+0x1da0>
    1188:	1405c83a 	sub	r2,r2,r16
    118c:	d8802e15 	stw	r2,184(sp)
    1190:	1003cc16 	blt	r2,zero,20c4 <___vfprintf_internal_r+0x1b8c>
    1194:	df002783 	ldbu	fp,158(sp)
    1198:	d8802a15 	stw	r2,168(sp)
    119c:	dcc02d15 	stw	r19,180(sp)
    11a0:	d8002915 	stw	zero,164(sp)
    11a4:	d8003215 	stw	zero,200(sp)
    11a8:	003eb006 	br	c6c <___vfprintf_internal_r+0x734>
    11ac:	18c03fcc 	andi	r3,r3,255
    11b0:	183f9b26 	beq	r3,zero,1020 <___vfprintf_internal_r+0xae8>
    11b4:	d9c02785 	stb	r7,158(sp)
    11b8:	003f9906 	br	1020 <___vfprintf_internal_r+0xae8>
    11bc:	18c03fcc 	andi	r3,r3,255
    11c0:	1805551e 	bne	r3,zero,2718 <___vfprintf_internal_r+0x21e0>
    11c4:	01400074 	movhi	r5,1
    11c8:	297d7104 	addi	r5,r5,-2620
    11cc:	d9403915 	stw	r5,228(sp)
    11d0:	9080080c 	andi	r2,r18,32
    11d4:	103fae1e 	bne	r2,zero,1090 <___vfprintf_internal_r+0xb58>
    11d8:	9080040c 	andi	r2,r18,16
    11dc:	1002de26 	beq	r2,zero,1d58 <___vfprintf_internal_r+0x1820>
    11e0:	d8c02d17 	ldw	r3,180(sp)
    11e4:	002d883a 	mov	r22,zero
    11e8:	1cc00017 	ldw	r19,0(r3)
    11ec:	18c00104 	addi	r3,r3,4
    11f0:	d8c02d15 	stw	r3,180(sp)
    11f4:	003fab06 	br	10a4 <___vfprintf_internal_r+0xb6c>
    11f8:	38803fcc 	andi	r2,r7,255
    11fc:	1080201c 	xori	r2,r2,128
    1200:	10bfe004 	addi	r2,r2,-128
    1204:	1002d21e 	bne	r2,zero,1d50 <___vfprintf_internal_r+0x1818>
    1208:	00c00044 	movi	r3,1
    120c:	01c00804 	movi	r7,32
    1210:	ac400007 	ldb	r17,0(r21)
    1214:	003d2906 	br	6bc <___vfprintf_internal_r+0x184>
    1218:	94800054 	ori	r18,r18,1
    121c:	ac400007 	ldb	r17,0(r21)
    1220:	003d2606 	br	6bc <___vfprintf_internal_r+0x184>
    1224:	18c03fcc 	andi	r3,r3,255
    1228:	183e0526 	beq	r3,zero,a40 <___vfprintf_internal_r+0x508>
    122c:	d9c02785 	stb	r7,158(sp)
    1230:	003e0306 	br	a40 <___vfprintf_internal_r+0x508>
    1234:	94801014 	ori	r18,r18,64
    1238:	ac400007 	ldb	r17,0(r21)
    123c:	003d1f06 	br	6bc <___vfprintf_internal_r+0x184>
    1240:	ac400007 	ldb	r17,0(r21)
    1244:	8a438726 	beq	r17,r9,2064 <___vfprintf_internal_r+0x1b2c>
    1248:	94800414 	ori	r18,r18,16
    124c:	003d1b06 	br	6bc <___vfprintf_internal_r+0x184>
    1250:	18c03fcc 	andi	r3,r3,255
    1254:	1805341e 	bne	r3,zero,2728 <___vfprintf_internal_r+0x21f0>
    1258:	9080080c 	andi	r2,r18,32
    125c:	1002cd26 	beq	r2,zero,1d94 <___vfprintf_internal_r+0x185c>
    1260:	d9402d17 	ldw	r5,180(sp)
    1264:	d9002f17 	ldw	r4,188(sp)
    1268:	28800017 	ldw	r2,0(r5)
    126c:	2007d7fa 	srai	r3,r4,31
    1270:	29400104 	addi	r5,r5,4
    1274:	d9402d15 	stw	r5,180(sp)
    1278:	11000015 	stw	r4,0(r2)
    127c:	10c00115 	stw	r3,4(r2)
    1280:	003ce506 	br	618 <___vfprintf_internal_r+0xe0>
    1284:	d8c02d17 	ldw	r3,180(sp)
    1288:	d9002d17 	ldw	r4,180(sp)
    128c:	d8002785 	stb	zero,158(sp)
    1290:	18800017 	ldw	r2,0(r3)
    1294:	21000104 	addi	r4,r4,4
    1298:	00c00044 	movi	r3,1
    129c:	d8c02a15 	stw	r3,168(sp)
    12a0:	d8801405 	stb	r2,80(sp)
    12a4:	d9002d15 	stw	r4,180(sp)
    12a8:	d8c02e15 	stw	r3,184(sp)
    12ac:	d8002915 	stw	zero,164(sp)
    12b0:	d8003215 	stw	zero,200(sp)
    12b4:	dc001404 	addi	r16,sp,80
    12b8:	0039883a 	mov	fp,zero
    12bc:	003e7206 	br	c88 <___vfprintf_internal_r+0x750>
    12c0:	01000074 	movhi	r4,1
    12c4:	213d7104 	addi	r4,r4,-2620
    12c8:	0039883a 	mov	fp,zero
    12cc:	d9003915 	stw	r4,228(sp)
    12d0:	04401e04 	movi	r17,120
    12d4:	003f8206 	br	10e0 <___vfprintf_internal_r+0xba8>
    12d8:	18c03fcc 	andi	r3,r3,255
    12dc:	1805061e 	bne	r3,zero,26f8 <___vfprintf_internal_r+0x21c0>
    12e0:	883d9126 	beq	r17,zero,928 <___vfprintf_internal_r+0x3f0>
    12e4:	00c00044 	movi	r3,1
    12e8:	d8c02a15 	stw	r3,168(sp)
    12ec:	dc401405 	stb	r17,80(sp)
    12f0:	d8002785 	stb	zero,158(sp)
    12f4:	003fec06 	br	12a8 <___vfprintf_internal_r+0xd70>
    12f8:	01400074 	movhi	r5,1
    12fc:	297d7104 	addi	r5,r5,-2620
    1300:	d9403915 	stw	r5,228(sp)
    1304:	d8c02d15 	stw	r3,180(sp)
    1308:	1025883a 	mov	r18,r2
    130c:	04401e04 	movi	r17,120
    1310:	9d84b03a 	or	r2,r19,r22
    1314:	1000fc1e 	bne	r2,zero,1708 <___vfprintf_internal_r+0x11d0>
    1318:	0039883a 	mov	fp,zero
    131c:	00800084 	movi	r2,2
    1320:	10803fcc 	andi	r2,r2,255
    1324:	00c00044 	movi	r3,1
    1328:	10c20f26 	beq	r2,r3,1b68 <___vfprintf_internal_r+0x1630>
    132c:	00c00084 	movi	r3,2
    1330:	10fd6326 	beq	r2,r3,8c0 <___vfprintf_internal_r+0x388>
    1334:	003e2d06 	br	bec <___vfprintf_internal_r+0x6b4>
    1338:	d8c02017 	ldw	r3,128(sp)
    133c:	003e9306 	br	d8c <___vfprintf_internal_r+0x854>
    1340:	00801944 	movi	r2,101
    1344:	14407e0e 	bge	r2,r17,1540 <___vfprintf_internal_r+0x1008>
    1348:	d9003617 	ldw	r4,216(sp)
    134c:	d9403817 	ldw	r5,224(sp)
    1350:	000d883a 	mov	r6,zero
    1354:	000f883a 	mov	r7,zero
    1358:	d8c03c15 	stw	r3,240(sp)
    135c:	da003d15 	stw	r8,244(sp)
    1360:	000b7ac0 	call	b7ac <__eqdf2>
    1364:	d8c03c17 	ldw	r3,240(sp)
    1368:	da003d17 	ldw	r8,244(sp)
    136c:	1000f71e 	bne	r2,zero,174c <___vfprintf_internal_r+0x1214>
    1370:	d8801f17 	ldw	r2,124(sp)
    1374:	01000074 	movhi	r4,1
    1378:	213d7804 	addi	r4,r4,-2592
    137c:	18c00044 	addi	r3,r3,1
    1380:	10800044 	addi	r2,r2,1
    1384:	41000015 	stw	r4,0(r8)
    1388:	01000044 	movi	r4,1
    138c:	41000115 	stw	r4,4(r8)
    1390:	d8c02015 	stw	r3,128(sp)
    1394:	d8801f15 	stw	r2,124(sp)
    1398:	010001c4 	movi	r4,7
    139c:	2082b816 	blt	r4,r2,1e80 <___vfprintf_internal_r+0x1948>
    13a0:	42000204 	addi	r8,r8,8
    13a4:	d8802617 	ldw	r2,152(sp)
    13a8:	d9403317 	ldw	r5,204(sp)
    13ac:	11400216 	blt	r2,r5,13b8 <___vfprintf_internal_r+0xe80>
    13b0:	9080004c 	andi	r2,r18,1
    13b4:	103ed526 	beq	r2,zero,f0c <___vfprintf_internal_r+0x9d4>
    13b8:	d8803717 	ldw	r2,220(sp)
    13bc:	d9003417 	ldw	r4,208(sp)
    13c0:	d9403717 	ldw	r5,220(sp)
    13c4:	1887883a 	add	r3,r3,r2
    13c8:	d8801f17 	ldw	r2,124(sp)
    13cc:	41000015 	stw	r4,0(r8)
    13d0:	41400115 	stw	r5,4(r8)
    13d4:	10800044 	addi	r2,r2,1
    13d8:	d8c02015 	stw	r3,128(sp)
    13dc:	d8801f15 	stw	r2,124(sp)
    13e0:	010001c4 	movi	r4,7
    13e4:	20832916 	blt	r4,r2,208c <___vfprintf_internal_r+0x1b54>
    13e8:	42000204 	addi	r8,r8,8
    13ec:	d8803317 	ldw	r2,204(sp)
    13f0:	143fffc4 	addi	r16,r2,-1
    13f4:	043ec50e 	bge	zero,r16,f0c <___vfprintf_internal_r+0x9d4>
    13f8:	04400404 	movi	r17,16
    13fc:	d8801f17 	ldw	r2,124(sp)
    1400:	8c00880e 	bge	r17,r16,1624 <___vfprintf_internal_r+0x10ec>
    1404:	01400074 	movhi	r5,1
    1408:	297d7884 	addi	r5,r5,-2590
    140c:	d9402b15 	stw	r5,172(sp)
    1410:	058001c4 	movi	r22,7
    1414:	dcc02c17 	ldw	r19,176(sp)
    1418:	00000306 	br	1428 <___vfprintf_internal_r+0xef0>
    141c:	42000204 	addi	r8,r8,8
    1420:	843ffc04 	addi	r16,r16,-16
    1424:	8c00820e 	bge	r17,r16,1630 <___vfprintf_internal_r+0x10f8>
    1428:	18c00404 	addi	r3,r3,16
    142c:	10800044 	addi	r2,r2,1
    1430:	45000015 	stw	r20,0(r8)
    1434:	44400115 	stw	r17,4(r8)
    1438:	d8c02015 	stw	r3,128(sp)
    143c:	d8801f15 	stw	r2,124(sp)
    1440:	b0bff60e 	bge	r22,r2,141c <___vfprintf_internal_r+0xee4>
    1444:	d9801e04 	addi	r6,sp,120
    1448:	b80b883a 	mov	r5,r23
    144c:	9809883a 	mov	r4,r19
    1450:	0007b340 	call	7b34 <__sprint_r>
    1454:	103d3a1e 	bne	r2,zero,940 <___vfprintf_internal_r+0x408>
    1458:	d8c02017 	ldw	r3,128(sp)
    145c:	d8801f17 	ldw	r2,124(sp)
    1460:	da000404 	addi	r8,sp,16
    1464:	003fee06 	br	1420 <___vfprintf_internal_r+0xee8>
    1468:	d9403117 	ldw	r5,196(sp)
    146c:	d8802a17 	ldw	r2,168(sp)
    1470:	28adc83a 	sub	r22,r5,r2
    1474:	05be630e 	bge	zero,r22,e04 <___vfprintf_internal_r+0x8cc>
    1478:	07000404 	movi	fp,16
    147c:	d8801f17 	ldw	r2,124(sp)
    1480:	e5838f0e 	bge	fp,r22,22c0 <___vfprintf_internal_r+0x1d88>
    1484:	01400074 	movhi	r5,1
    1488:	297d7884 	addi	r5,r5,-2590
    148c:	dc403015 	stw	r17,192(sp)
    1490:	d9402b15 	stw	r5,172(sp)
    1494:	b023883a 	mov	r17,r22
    1498:	04c001c4 	movi	r19,7
    149c:	a82d883a 	mov	r22,r21
    14a0:	902b883a 	mov	r21,r18
    14a4:	8025883a 	mov	r18,r16
    14a8:	dc002c17 	ldw	r16,176(sp)
    14ac:	00000306 	br	14bc <___vfprintf_internal_r+0xf84>
    14b0:	8c7ffc04 	addi	r17,r17,-16
    14b4:	42000204 	addi	r8,r8,8
    14b8:	e440110e 	bge	fp,r17,1500 <___vfprintf_internal_r+0xfc8>
    14bc:	18c00404 	addi	r3,r3,16
    14c0:	10800044 	addi	r2,r2,1
    14c4:	45000015 	stw	r20,0(r8)
    14c8:	47000115 	stw	fp,4(r8)
    14cc:	d8c02015 	stw	r3,128(sp)
    14d0:	d8801f15 	stw	r2,124(sp)
    14d4:	98bff60e 	bge	r19,r2,14b0 <___vfprintf_internal_r+0xf78>
    14d8:	d9801e04 	addi	r6,sp,120
    14dc:	b80b883a 	mov	r5,r23
    14e0:	8009883a 	mov	r4,r16
    14e4:	0007b340 	call	7b34 <__sprint_r>
    14e8:	103d151e 	bne	r2,zero,940 <___vfprintf_internal_r+0x408>
    14ec:	8c7ffc04 	addi	r17,r17,-16
    14f0:	d8c02017 	ldw	r3,128(sp)
    14f4:	d8801f17 	ldw	r2,124(sp)
    14f8:	da000404 	addi	r8,sp,16
    14fc:	e47fef16 	blt	fp,r17,14bc <___vfprintf_internal_r+0xf84>
    1500:	9021883a 	mov	r16,r18
    1504:	a825883a 	mov	r18,r21
    1508:	b02b883a 	mov	r21,r22
    150c:	882d883a 	mov	r22,r17
    1510:	dc403017 	ldw	r17,192(sp)
    1514:	d9002b17 	ldw	r4,172(sp)
    1518:	1d87883a 	add	r3,r3,r22
    151c:	10800044 	addi	r2,r2,1
    1520:	41000015 	stw	r4,0(r8)
    1524:	45800115 	stw	r22,4(r8)
    1528:	d8c02015 	stw	r3,128(sp)
    152c:	d8801f15 	stw	r2,124(sp)
    1530:	010001c4 	movi	r4,7
    1534:	20818e16 	blt	r4,r2,1b70 <___vfprintf_internal_r+0x1638>
    1538:	42000204 	addi	r8,r8,8
    153c:	003e3106 	br	e04 <___vfprintf_internal_r+0x8cc>
    1540:	d9403317 	ldw	r5,204(sp)
    1544:	00800044 	movi	r2,1
    1548:	18c00044 	addi	r3,r3,1
    154c:	1141530e 	bge	r2,r5,1a9c <___vfprintf_internal_r+0x1564>
    1550:	dc401f17 	ldw	r17,124(sp)
    1554:	00800044 	movi	r2,1
    1558:	40800115 	stw	r2,4(r8)
    155c:	8c400044 	addi	r17,r17,1
    1560:	44000015 	stw	r16,0(r8)
    1564:	d8c02015 	stw	r3,128(sp)
    1568:	dc401f15 	stw	r17,124(sp)
    156c:	008001c4 	movi	r2,7
    1570:	14416b16 	blt	r2,r17,1b20 <___vfprintf_internal_r+0x15e8>
    1574:	42000204 	addi	r8,r8,8
    1578:	d8803717 	ldw	r2,220(sp)
    157c:	d9003417 	ldw	r4,208(sp)
    1580:	8c400044 	addi	r17,r17,1
    1584:	10c7883a 	add	r3,r2,r3
    1588:	40800115 	stw	r2,4(r8)
    158c:	41000015 	stw	r4,0(r8)
    1590:	d8c02015 	stw	r3,128(sp)
    1594:	dc401f15 	stw	r17,124(sp)
    1598:	008001c4 	movi	r2,7
    159c:	14416916 	blt	r2,r17,1b44 <___vfprintf_internal_r+0x160c>
    15a0:	45800204 	addi	r22,r8,8
    15a4:	d9003617 	ldw	r4,216(sp)
    15a8:	d9403817 	ldw	r5,224(sp)
    15ac:	000d883a 	mov	r6,zero
    15b0:	000f883a 	mov	r7,zero
    15b4:	d8c03c15 	stw	r3,240(sp)
    15b8:	000b7ac0 	call	b7ac <__eqdf2>
    15bc:	d8c03c17 	ldw	r3,240(sp)
    15c0:	1000bc26 	beq	r2,zero,18b4 <___vfprintf_internal_r+0x137c>
    15c4:	d9403317 	ldw	r5,204(sp)
    15c8:	84000044 	addi	r16,r16,1
    15cc:	8c400044 	addi	r17,r17,1
    15d0:	28bfffc4 	addi	r2,r5,-1
    15d4:	1887883a 	add	r3,r3,r2
    15d8:	b0800115 	stw	r2,4(r22)
    15dc:	b4000015 	stw	r16,0(r22)
    15e0:	d8c02015 	stw	r3,128(sp)
    15e4:	dc401f15 	stw	r17,124(sp)
    15e8:	008001c4 	movi	r2,7
    15ec:	14414316 	blt	r2,r17,1afc <___vfprintf_internal_r+0x15c4>
    15f0:	b5800204 	addi	r22,r22,8
    15f4:	d9003a17 	ldw	r4,232(sp)
    15f8:	df0022c4 	addi	fp,sp,139
    15fc:	8c400044 	addi	r17,r17,1
    1600:	20c7883a 	add	r3,r4,r3
    1604:	b7000015 	stw	fp,0(r22)
    1608:	b1000115 	stw	r4,4(r22)
    160c:	d8c02015 	stw	r3,128(sp)
    1610:	dc401f15 	stw	r17,124(sp)
    1614:	008001c4 	movi	r2,7
    1618:	14400e16 	blt	r2,r17,1654 <___vfprintf_internal_r+0x111c>
    161c:	b2000204 	addi	r8,r22,8
    1620:	003e3a06 	br	f0c <___vfprintf_internal_r+0x9d4>
    1624:	01000074 	movhi	r4,1
    1628:	213d7884 	addi	r4,r4,-2590
    162c:	d9002b15 	stw	r4,172(sp)
    1630:	d9002b17 	ldw	r4,172(sp)
    1634:	1c07883a 	add	r3,r3,r16
    1638:	44000115 	stw	r16,4(r8)
    163c:	41000015 	stw	r4,0(r8)
    1640:	10800044 	addi	r2,r2,1
    1644:	d8c02015 	stw	r3,128(sp)
    1648:	d8801f15 	stw	r2,124(sp)
    164c:	010001c4 	movi	r4,7
    1650:	20be2d0e 	bge	r4,r2,f08 <___vfprintf_internal_r+0x9d0>
    1654:	d9002c17 	ldw	r4,176(sp)
    1658:	d9801e04 	addi	r6,sp,120
    165c:	b80b883a 	mov	r5,r23
    1660:	0007b340 	call	7b34 <__sprint_r>
    1664:	103cb61e 	bne	r2,zero,940 <___vfprintf_internal_r+0x408>
    1668:	d8c02017 	ldw	r3,128(sp)
    166c:	da000404 	addi	r8,sp,16
    1670:	003e2606 	br	f0c <___vfprintf_internal_r+0x9d4>
    1674:	d9002c17 	ldw	r4,176(sp)
    1678:	d9801e04 	addi	r6,sp,120
    167c:	b80b883a 	mov	r5,r23
    1680:	0007b340 	call	7b34 <__sprint_r>
    1684:	103e5d26 	beq	r2,zero,ffc <___vfprintf_internal_r+0xac4>
    1688:	003cad06 	br	940 <___vfprintf_internal_r+0x408>
    168c:	d9002c17 	ldw	r4,176(sp)
    1690:	d9801e04 	addi	r6,sp,120
    1694:	b80b883a 	mov	r5,r23
    1698:	0007b340 	call	7b34 <__sprint_r>
    169c:	103ca81e 	bne	r2,zero,940 <___vfprintf_internal_r+0x408>
    16a0:	d8c02017 	ldw	r3,128(sp)
    16a4:	da000404 	addi	r8,sp,16
    16a8:	003e0b06 	br	ed8 <___vfprintf_internal_r+0x9a0>
    16ac:	d9002c17 	ldw	r4,176(sp)
    16b0:	d9801e04 	addi	r6,sp,120
    16b4:	b80b883a 	mov	r5,r23
    16b8:	0007b340 	call	7b34 <__sprint_r>
    16bc:	103ca01e 	bne	r2,zero,940 <___vfprintf_internal_r+0x408>
    16c0:	d8c02017 	ldw	r3,128(sp)
    16c4:	da000404 	addi	r8,sp,16
    16c8:	003dbd06 	br	dc0 <___vfprintf_internal_r+0x888>
    16cc:	d9002c17 	ldw	r4,176(sp)
    16d0:	d9801e04 	addi	r6,sp,120
    16d4:	b80b883a 	mov	r5,r23
    16d8:	0007b340 	call	7b34 <__sprint_r>
    16dc:	103c981e 	bne	r2,zero,940 <___vfprintf_internal_r+0x408>
    16e0:	d8c02017 	ldw	r3,128(sp)
    16e4:	da000404 	addi	r8,sp,16
    16e8:	003dc306 	br	df8 <___vfprintf_internal_r+0x8c0>
    16ec:	d8802917 	ldw	r2,164(sp)
    16f0:	d8002785 	stb	zero,158(sp)
    16f4:	103f0616 	blt	r2,zero,1310 <___vfprintf_internal_r+0xdd8>
    16f8:	00ffdfc4 	movi	r3,-129
    16fc:	9d84b03a 	or	r2,r19,r22
    1700:	90e4703a 	and	r18,r18,r3
    1704:	103c6b26 	beq	r2,zero,8b4 <___vfprintf_internal_r+0x37c>
    1708:	0039883a 	mov	fp,zero
    170c:	003e7406 	br	10e0 <___vfprintf_internal_r+0xba8>
    1710:	9080040c 	andi	r2,r18,16
    1714:	1001b326 	beq	r2,zero,1de4 <___vfprintf_internal_r+0x18ac>
    1718:	d9002d17 	ldw	r4,180(sp)
    171c:	d9402917 	ldw	r5,164(sp)
    1720:	d8002785 	stb	zero,158(sp)
    1724:	20800104 	addi	r2,r4,4
    1728:	24c00017 	ldw	r19,0(r4)
    172c:	002d883a 	mov	r22,zero
    1730:	2801b516 	blt	r5,zero,1e08 <___vfprintf_internal_r+0x18d0>
    1734:	00ffdfc4 	movi	r3,-129
    1738:	d8802d15 	stw	r2,180(sp)
    173c:	90e4703a 	and	r18,r18,r3
    1740:	983d2726 	beq	r19,zero,be0 <___vfprintf_internal_r+0x6a8>
    1744:	0039883a 	mov	fp,zero
    1748:	003d2a06 	br	bf4 <___vfprintf_internal_r+0x6bc>
    174c:	dc402617 	ldw	r17,152(sp)
    1750:	0441d30e 	bge	zero,r17,1ea0 <___vfprintf_internal_r+0x1968>
    1754:	dc403217 	ldw	r17,200(sp)
    1758:	d8803317 	ldw	r2,204(sp)
    175c:	1440010e 	bge	r2,r17,1764 <___vfprintf_internal_r+0x122c>
    1760:	1023883a 	mov	r17,r2
    1764:	04400a0e 	bge	zero,r17,1790 <___vfprintf_internal_r+0x1258>
    1768:	d8801f17 	ldw	r2,124(sp)
    176c:	1c47883a 	add	r3,r3,r17
    1770:	44000015 	stw	r16,0(r8)
    1774:	10800044 	addi	r2,r2,1
    1778:	44400115 	stw	r17,4(r8)
    177c:	d8c02015 	stw	r3,128(sp)
    1780:	d8801f15 	stw	r2,124(sp)
    1784:	010001c4 	movi	r4,7
    1788:	20826516 	blt	r4,r2,2120 <___vfprintf_internal_r+0x1be8>
    178c:	42000204 	addi	r8,r8,8
    1790:	88026116 	blt	r17,zero,2118 <___vfprintf_internal_r+0x1be0>
    1794:	d9003217 	ldw	r4,200(sp)
    1798:	2463c83a 	sub	r17,r4,r17
    179c:	04407b0e 	bge	zero,r17,198c <___vfprintf_internal_r+0x1454>
    17a0:	05800404 	movi	r22,16
    17a4:	d8801f17 	ldw	r2,124(sp)
    17a8:	b4419d0e 	bge	r22,r17,1e20 <___vfprintf_internal_r+0x18e8>
    17ac:	01000074 	movhi	r4,1
    17b0:	213d7884 	addi	r4,r4,-2590
    17b4:	d9002b15 	stw	r4,172(sp)
    17b8:	070001c4 	movi	fp,7
    17bc:	dcc02c17 	ldw	r19,176(sp)
    17c0:	00000306 	br	17d0 <___vfprintf_internal_r+0x1298>
    17c4:	42000204 	addi	r8,r8,8
    17c8:	8c7ffc04 	addi	r17,r17,-16
    17cc:	b441970e 	bge	r22,r17,1e2c <___vfprintf_internal_r+0x18f4>
    17d0:	18c00404 	addi	r3,r3,16
    17d4:	10800044 	addi	r2,r2,1
    17d8:	45000015 	stw	r20,0(r8)
    17dc:	45800115 	stw	r22,4(r8)
    17e0:	d8c02015 	stw	r3,128(sp)
    17e4:	d8801f15 	stw	r2,124(sp)
    17e8:	e0bff60e 	bge	fp,r2,17c4 <___vfprintf_internal_r+0x128c>
    17ec:	d9801e04 	addi	r6,sp,120
    17f0:	b80b883a 	mov	r5,r23
    17f4:	9809883a 	mov	r4,r19
    17f8:	0007b340 	call	7b34 <__sprint_r>
    17fc:	103c501e 	bne	r2,zero,940 <___vfprintf_internal_r+0x408>
    1800:	d8c02017 	ldw	r3,128(sp)
    1804:	d8801f17 	ldw	r2,124(sp)
    1808:	da000404 	addi	r8,sp,16
    180c:	003fee06 	br	17c8 <___vfprintf_internal_r+0x1290>
    1810:	d9002c17 	ldw	r4,176(sp)
    1814:	d9801e04 	addi	r6,sp,120
    1818:	b80b883a 	mov	r5,r23
    181c:	0007b340 	call	7b34 <__sprint_r>
    1820:	103c471e 	bne	r2,zero,940 <___vfprintf_internal_r+0x408>
    1824:	d8c02017 	ldw	r3,128(sp)
    1828:	df002787 	ldb	fp,158(sp)
    182c:	da000404 	addi	r8,sp,16
    1830:	003d5606 	br	d8c <___vfprintf_internal_r+0x854>
    1834:	9080040c 	andi	r2,r18,16
    1838:	10016126 	beq	r2,zero,1dc0 <___vfprintf_internal_r+0x1888>
    183c:	d8802d17 	ldw	r2,180(sp)
    1840:	14c00017 	ldw	r19,0(r2)
    1844:	10800104 	addi	r2,r2,4
    1848:	d8802d15 	stw	r2,180(sp)
    184c:	982dd7fa 	srai	r22,r19,31
    1850:	b005883a 	mov	r2,r22
    1854:	003c8206 	br	a60 <___vfprintf_internal_r+0x528>
    1858:	9080040c 	andi	r2,r18,16
    185c:	10003526 	beq	r2,zero,1934 <___vfprintf_internal_r+0x13fc>
    1860:	d9402d17 	ldw	r5,180(sp)
    1864:	d8c02917 	ldw	r3,164(sp)
    1868:	d8002785 	stb	zero,158(sp)
    186c:	28800104 	addi	r2,r5,4
    1870:	2cc00017 	ldw	r19,0(r5)
    1874:	002d883a 	mov	r22,zero
    1878:	18003716 	blt	r3,zero,1958 <___vfprintf_internal_r+0x1420>
    187c:	00ffdfc4 	movi	r3,-129
    1880:	d8802d15 	stw	r2,180(sp)
    1884:	90e4703a 	and	r18,r18,r3
    1888:	0039883a 	mov	fp,zero
    188c:	983df326 	beq	r19,zero,105c <___vfprintf_internal_r+0xb24>
    1890:	00800244 	movi	r2,9
    1894:	14fc7b36 	bltu	r2,r19,a84 <___vfprintf_internal_r+0x54c>
    1898:	d8c02817 	ldw	r3,160(sp)
    189c:	dc001dc4 	addi	r16,sp,119
    18a0:	9cc00c04 	addi	r19,r19,48
    18a4:	1c07c83a 	sub	r3,r3,r16
    18a8:	dcc01dc5 	stb	r19,119(sp)
    18ac:	d8c02e15 	stw	r3,184(sp)
    18b0:	003ce806 	br	c54 <___vfprintf_internal_r+0x71c>
    18b4:	d8803317 	ldw	r2,204(sp)
    18b8:	143fffc4 	addi	r16,r2,-1
    18bc:	043f4d0e 	bge	zero,r16,15f4 <___vfprintf_internal_r+0x10bc>
    18c0:	07000404 	movi	fp,16
    18c4:	e400810e 	bge	fp,r16,1acc <___vfprintf_internal_r+0x1594>
    18c8:	01400074 	movhi	r5,1
    18cc:	297d7884 	addi	r5,r5,-2590
    18d0:	d9402b15 	stw	r5,172(sp)
    18d4:	01c001c4 	movi	r7,7
    18d8:	dcc02c17 	ldw	r19,176(sp)
    18dc:	00000306 	br	18ec <___vfprintf_internal_r+0x13b4>
    18e0:	b5800204 	addi	r22,r22,8
    18e4:	843ffc04 	addi	r16,r16,-16
    18e8:	e4007b0e 	bge	fp,r16,1ad8 <___vfprintf_internal_r+0x15a0>
    18ec:	18c00404 	addi	r3,r3,16
    18f0:	8c400044 	addi	r17,r17,1
    18f4:	b5000015 	stw	r20,0(r22)
    18f8:	b7000115 	stw	fp,4(r22)
    18fc:	d8c02015 	stw	r3,128(sp)
    1900:	dc401f15 	stw	r17,124(sp)
    1904:	3c7ff60e 	bge	r7,r17,18e0 <___vfprintf_internal_r+0x13a8>
    1908:	d9801e04 	addi	r6,sp,120
    190c:	b80b883a 	mov	r5,r23
    1910:	9809883a 	mov	r4,r19
    1914:	d9c03c15 	stw	r7,240(sp)
    1918:	0007b340 	call	7b34 <__sprint_r>
    191c:	d9c03c17 	ldw	r7,240(sp)
    1920:	103c071e 	bne	r2,zero,940 <___vfprintf_internal_r+0x408>
    1924:	d8c02017 	ldw	r3,128(sp)
    1928:	dc401f17 	ldw	r17,124(sp)
    192c:	dd800404 	addi	r22,sp,16
    1930:	003fec06 	br	18e4 <___vfprintf_internal_r+0x13ac>
    1934:	9080100c 	andi	r2,r18,64
    1938:	d8002785 	stb	zero,158(sp)
    193c:	10010e26 	beq	r2,zero,1d78 <___vfprintf_internal_r+0x1840>
    1940:	d9002d17 	ldw	r4,180(sp)
    1944:	d9402917 	ldw	r5,164(sp)
    1948:	002d883a 	mov	r22,zero
    194c:	20800104 	addi	r2,r4,4
    1950:	24c0000b 	ldhu	r19,0(r4)
    1954:	283fc90e 	bge	r5,zero,187c <___vfprintf_internal_r+0x1344>
    1958:	d8802d15 	stw	r2,180(sp)
    195c:	0039883a 	mov	fp,zero
    1960:	9d84b03a 	or	r2,r19,r22
    1964:	103c461e 	bne	r2,zero,a80 <___vfprintf_internal_r+0x548>
    1968:	00800044 	movi	r2,1
    196c:	003e6c06 	br	1320 <___vfprintf_internal_r+0xde8>
    1970:	d9002c17 	ldw	r4,176(sp)
    1974:	d9801e04 	addi	r6,sp,120
    1978:	b80b883a 	mov	r5,r23
    197c:	0007b340 	call	7b34 <__sprint_r>
    1980:	103bef1e 	bne	r2,zero,940 <___vfprintf_internal_r+0x408>
    1984:	d8c02017 	ldw	r3,128(sp)
    1988:	da000404 	addi	r8,sp,16
    198c:	d9003217 	ldw	r4,200(sp)
    1990:	d8802617 	ldw	r2,152(sp)
    1994:	d9403317 	ldw	r5,204(sp)
    1998:	8123883a 	add	r17,r16,r4
    199c:	11400216 	blt	r2,r5,19a8 <___vfprintf_internal_r+0x1470>
    19a0:	9100004c 	andi	r4,r18,1
    19a4:	20000d26 	beq	r4,zero,19dc <___vfprintf_internal_r+0x14a4>
    19a8:	d9003717 	ldw	r4,220(sp)
    19ac:	d9403417 	ldw	r5,208(sp)
    19b0:	1907883a 	add	r3,r3,r4
    19b4:	d9001f17 	ldw	r4,124(sp)
    19b8:	41400015 	stw	r5,0(r8)
    19bc:	d9403717 	ldw	r5,220(sp)
    19c0:	21000044 	addi	r4,r4,1
    19c4:	d8c02015 	stw	r3,128(sp)
    19c8:	41400115 	stw	r5,4(r8)
    19cc:	d9001f15 	stw	r4,124(sp)
    19d0:	014001c4 	movi	r5,7
    19d4:	2901e816 	blt	r5,r4,2178 <___vfprintf_internal_r+0x1c40>
    19d8:	42000204 	addi	r8,r8,8
    19dc:	d9003317 	ldw	r4,204(sp)
    19e0:	8121883a 	add	r16,r16,r4
    19e4:	2085c83a 	sub	r2,r4,r2
    19e8:	8461c83a 	sub	r16,r16,r17
    19ec:	1400010e 	bge	r2,r16,19f4 <___vfprintf_internal_r+0x14bc>
    19f0:	1021883a 	mov	r16,r2
    19f4:	04000a0e 	bge	zero,r16,1a20 <___vfprintf_internal_r+0x14e8>
    19f8:	d9001f17 	ldw	r4,124(sp)
    19fc:	1c07883a 	add	r3,r3,r16
    1a00:	44400015 	stw	r17,0(r8)
    1a04:	21000044 	addi	r4,r4,1
    1a08:	44000115 	stw	r16,4(r8)
    1a0c:	d8c02015 	stw	r3,128(sp)
    1a10:	d9001f15 	stw	r4,124(sp)
    1a14:	014001c4 	movi	r5,7
    1a18:	2901fb16 	blt	r5,r4,2208 <___vfprintf_internal_r+0x1cd0>
    1a1c:	42000204 	addi	r8,r8,8
    1a20:	8001f716 	blt	r16,zero,2200 <___vfprintf_internal_r+0x1cc8>
    1a24:	1421c83a 	sub	r16,r2,r16
    1a28:	043d380e 	bge	zero,r16,f0c <___vfprintf_internal_r+0x9d4>
    1a2c:	04400404 	movi	r17,16
    1a30:	d8801f17 	ldw	r2,124(sp)
    1a34:	8c3efb0e 	bge	r17,r16,1624 <___vfprintf_internal_r+0x10ec>
    1a38:	01400074 	movhi	r5,1
    1a3c:	297d7884 	addi	r5,r5,-2590
    1a40:	d9402b15 	stw	r5,172(sp)
    1a44:	058001c4 	movi	r22,7
    1a48:	dcc02c17 	ldw	r19,176(sp)
    1a4c:	00000306 	br	1a5c <___vfprintf_internal_r+0x1524>
    1a50:	42000204 	addi	r8,r8,8
    1a54:	843ffc04 	addi	r16,r16,-16
    1a58:	8c3ef50e 	bge	r17,r16,1630 <___vfprintf_internal_r+0x10f8>
    1a5c:	18c00404 	addi	r3,r3,16
    1a60:	10800044 	addi	r2,r2,1
    1a64:	45000015 	stw	r20,0(r8)
    1a68:	44400115 	stw	r17,4(r8)
    1a6c:	d8c02015 	stw	r3,128(sp)
    1a70:	d8801f15 	stw	r2,124(sp)
    1a74:	b0bff60e 	bge	r22,r2,1a50 <___vfprintf_internal_r+0x1518>
    1a78:	d9801e04 	addi	r6,sp,120
    1a7c:	b80b883a 	mov	r5,r23
    1a80:	9809883a 	mov	r4,r19
    1a84:	0007b340 	call	7b34 <__sprint_r>
    1a88:	103bad1e 	bne	r2,zero,940 <___vfprintf_internal_r+0x408>
    1a8c:	d8c02017 	ldw	r3,128(sp)
    1a90:	d8801f17 	ldw	r2,124(sp)
    1a94:	da000404 	addi	r8,sp,16
    1a98:	003fee06 	br	1a54 <___vfprintf_internal_r+0x151c>
    1a9c:	9088703a 	and	r4,r18,r2
    1aa0:	203eab1e 	bne	r4,zero,1550 <___vfprintf_internal_r+0x1018>
    1aa4:	dc401f17 	ldw	r17,124(sp)
    1aa8:	40800115 	stw	r2,4(r8)
    1aac:	44000015 	stw	r16,0(r8)
    1ab0:	8c400044 	addi	r17,r17,1
    1ab4:	d8c02015 	stw	r3,128(sp)
    1ab8:	dc401f15 	stw	r17,124(sp)
    1abc:	008001c4 	movi	r2,7
    1ac0:	14400e16 	blt	r2,r17,1afc <___vfprintf_internal_r+0x15c4>
    1ac4:	45800204 	addi	r22,r8,8
    1ac8:	003eca06 	br	15f4 <___vfprintf_internal_r+0x10bc>
    1acc:	01000074 	movhi	r4,1
    1ad0:	213d7884 	addi	r4,r4,-2590
    1ad4:	d9002b15 	stw	r4,172(sp)
    1ad8:	d8802b17 	ldw	r2,172(sp)
    1adc:	1c07883a 	add	r3,r3,r16
    1ae0:	8c400044 	addi	r17,r17,1
    1ae4:	b0800015 	stw	r2,0(r22)
    1ae8:	b4000115 	stw	r16,4(r22)
    1aec:	d8c02015 	stw	r3,128(sp)
    1af0:	dc401f15 	stw	r17,124(sp)
    1af4:	008001c4 	movi	r2,7
    1af8:	147ebd0e 	bge	r2,r17,15f0 <___vfprintf_internal_r+0x10b8>
    1afc:	d9002c17 	ldw	r4,176(sp)
    1b00:	d9801e04 	addi	r6,sp,120
    1b04:	b80b883a 	mov	r5,r23
    1b08:	0007b340 	call	7b34 <__sprint_r>
    1b0c:	103b8c1e 	bne	r2,zero,940 <___vfprintf_internal_r+0x408>
    1b10:	d8c02017 	ldw	r3,128(sp)
    1b14:	dc401f17 	ldw	r17,124(sp)
    1b18:	dd800404 	addi	r22,sp,16
    1b1c:	003eb506 	br	15f4 <___vfprintf_internal_r+0x10bc>
    1b20:	d9002c17 	ldw	r4,176(sp)
    1b24:	d9801e04 	addi	r6,sp,120
    1b28:	b80b883a 	mov	r5,r23
    1b2c:	0007b340 	call	7b34 <__sprint_r>
    1b30:	103b831e 	bne	r2,zero,940 <___vfprintf_internal_r+0x408>
    1b34:	d8c02017 	ldw	r3,128(sp)
    1b38:	dc401f17 	ldw	r17,124(sp)
    1b3c:	da000404 	addi	r8,sp,16
    1b40:	003e8d06 	br	1578 <___vfprintf_internal_r+0x1040>
    1b44:	d9002c17 	ldw	r4,176(sp)
    1b48:	d9801e04 	addi	r6,sp,120
    1b4c:	b80b883a 	mov	r5,r23
    1b50:	0007b340 	call	7b34 <__sprint_r>
    1b54:	103b7a1e 	bne	r2,zero,940 <___vfprintf_internal_r+0x408>
    1b58:	d8c02017 	ldw	r3,128(sp)
    1b5c:	dc401f17 	ldw	r17,124(sp)
    1b60:	dd800404 	addi	r22,sp,16
    1b64:	003e8f06 	br	15a4 <___vfprintf_internal_r+0x106c>
    1b68:	0027883a 	mov	r19,zero
    1b6c:	003f4a06 	br	1898 <___vfprintf_internal_r+0x1360>
    1b70:	d9002c17 	ldw	r4,176(sp)
    1b74:	d9801e04 	addi	r6,sp,120
    1b78:	b80b883a 	mov	r5,r23
    1b7c:	0007b340 	call	7b34 <__sprint_r>
    1b80:	103b6f1e 	bne	r2,zero,940 <___vfprintf_internal_r+0x408>
    1b84:	d8c02017 	ldw	r3,128(sp)
    1b88:	da000404 	addi	r8,sp,16
    1b8c:	003c9d06 	br	e04 <___vfprintf_internal_r+0x8cc>
    1b90:	04e7c83a 	sub	r19,zero,r19
    1b94:	9804c03a 	cmpne	r2,r19,zero
    1b98:	05adc83a 	sub	r22,zero,r22
    1b9c:	b0adc83a 	sub	r22,r22,r2
    1ba0:	d8802917 	ldw	r2,164(sp)
    1ba4:	07000b44 	movi	fp,45
    1ba8:	df002785 	stb	fp,158(sp)
    1bac:	10017b16 	blt	r2,zero,219c <___vfprintf_internal_r+0x1c64>
    1bb0:	00bfdfc4 	movi	r2,-129
    1bb4:	90a4703a 	and	r18,r18,r2
    1bb8:	003bb106 	br	a80 <___vfprintf_internal_r+0x548>
    1bbc:	d9003617 	ldw	r4,216(sp)
    1bc0:	d9403817 	ldw	r5,224(sp)
    1bc4:	da003d15 	stw	r8,244(sp)
    1bc8:	00077580 	call	7758 <__fpclassifyd>
    1bcc:	da003d17 	ldw	r8,244(sp)
    1bd0:	1000f026 	beq	r2,zero,1f94 <___vfprintf_internal_r+0x1a5c>
    1bd4:	d9002917 	ldw	r4,164(sp)
    1bd8:	05bff7c4 	movi	r22,-33
    1bdc:	00bfffc4 	movi	r2,-1
    1be0:	8dac703a 	and	r22,r17,r22
    1be4:	20820026 	beq	r4,r2,23e8 <___vfprintf_internal_r+0x1eb0>
    1be8:	008011c4 	movi	r2,71
    1bec:	b081f726 	beq	r22,r2,23cc <___vfprintf_internal_r+0x1e94>
    1bf0:	d9003817 	ldw	r4,224(sp)
    1bf4:	90c04014 	ori	r3,r18,256
    1bf8:	d8c02b15 	stw	r3,172(sp)
    1bfc:	20021516 	blt	r4,zero,2454 <___vfprintf_internal_r+0x1f1c>
    1c00:	dcc03817 	ldw	r19,224(sp)
    1c04:	d8002a05 	stb	zero,168(sp)
    1c08:	00801984 	movi	r2,102
    1c0c:	8881f926 	beq	r17,r2,23f4 <___vfprintf_internal_r+0x1ebc>
    1c10:	00801184 	movi	r2,70
    1c14:	88821c26 	beq	r17,r2,2488 <___vfprintf_internal_r+0x1f50>
    1c18:	00801144 	movi	r2,69
    1c1c:	b081ef26 	beq	r22,r2,23dc <___vfprintf_internal_r+0x1ea4>
    1c20:	d8c02917 	ldw	r3,164(sp)
    1c24:	d8802104 	addi	r2,sp,132
    1c28:	d8800315 	stw	r2,12(sp)
    1c2c:	d9403617 	ldw	r5,216(sp)
    1c30:	d8802504 	addi	r2,sp,148
    1c34:	d9002c17 	ldw	r4,176(sp)
    1c38:	d8800215 	stw	r2,8(sp)
    1c3c:	d8802604 	addi	r2,sp,152
    1c40:	d8c00015 	stw	r3,0(sp)
    1c44:	d8800115 	stw	r2,4(sp)
    1c48:	01c00084 	movi	r7,2
    1c4c:	980d883a 	mov	r6,r19
    1c50:	d8c03c15 	stw	r3,240(sp)
    1c54:	da003d15 	stw	r8,244(sp)
    1c58:	0002b5c0 	call	2b5c <_dtoa_r>
    1c5c:	1021883a 	mov	r16,r2
    1c60:	008019c4 	movi	r2,103
    1c64:	d8c03c17 	ldw	r3,240(sp)
    1c68:	da003d17 	ldw	r8,244(sp)
    1c6c:	88817126 	beq	r17,r2,2234 <___vfprintf_internal_r+0x1cfc>
    1c70:	008011c4 	movi	r2,71
    1c74:	88829226 	beq	r17,r2,26c0 <___vfprintf_internal_r+0x2188>
    1c78:	80f9883a 	add	fp,r16,r3
    1c7c:	d9003617 	ldw	r4,216(sp)
    1c80:	000d883a 	mov	r6,zero
    1c84:	000f883a 	mov	r7,zero
    1c88:	980b883a 	mov	r5,r19
    1c8c:	da003d15 	stw	r8,244(sp)
    1c90:	000b7ac0 	call	b7ac <__eqdf2>
    1c94:	da003d17 	ldw	r8,244(sp)
    1c98:	10018d26 	beq	r2,zero,22d0 <___vfprintf_internal_r+0x1d98>
    1c9c:	d8802117 	ldw	r2,132(sp)
    1ca0:	1700062e 	bgeu	r2,fp,1cbc <___vfprintf_internal_r+0x1784>
    1ca4:	01000c04 	movi	r4,48
    1ca8:	10c00044 	addi	r3,r2,1
    1cac:	d8c02115 	stw	r3,132(sp)
    1cb0:	11000005 	stb	r4,0(r2)
    1cb4:	d8802117 	ldw	r2,132(sp)
    1cb8:	173ffb36 	bltu	r2,fp,1ca8 <___vfprintf_internal_r+0x1770>
    1cbc:	1405c83a 	sub	r2,r2,r16
    1cc0:	d8803315 	stw	r2,204(sp)
    1cc4:	008011c4 	movi	r2,71
    1cc8:	b0817626 	beq	r22,r2,22a4 <___vfprintf_internal_r+0x1d6c>
    1ccc:	00801944 	movi	r2,101
    1cd0:	1442810e 	bge	r2,r17,26d8 <___vfprintf_internal_r+0x21a0>
    1cd4:	d8c02617 	ldw	r3,152(sp)
    1cd8:	00801984 	movi	r2,102
    1cdc:	d8c03215 	stw	r3,200(sp)
    1ce0:	8881fe26 	beq	r17,r2,24dc <___vfprintf_internal_r+0x1fa4>
    1ce4:	d8c03217 	ldw	r3,200(sp)
    1ce8:	d9003317 	ldw	r4,204(sp)
    1cec:	1901dd16 	blt	r3,r4,2464 <___vfprintf_internal_r+0x1f2c>
    1cf0:	9480004c 	andi	r18,r18,1
    1cf4:	90022b1e 	bne	r18,zero,25a4 <___vfprintf_internal_r+0x206c>
    1cf8:	1805883a 	mov	r2,r3
    1cfc:	18028016 	blt	r3,zero,2700 <___vfprintf_internal_r+0x21c8>
    1d00:	d8c03217 	ldw	r3,200(sp)
    1d04:	044019c4 	movi	r17,103
    1d08:	d8c02e15 	stw	r3,184(sp)
    1d0c:	df002a07 	ldb	fp,168(sp)
    1d10:	e001531e 	bne	fp,zero,2260 <___vfprintf_internal_r+0x1d28>
    1d14:	df002783 	ldbu	fp,158(sp)
    1d18:	d8802a15 	stw	r2,168(sp)
    1d1c:	dc802b17 	ldw	r18,172(sp)
    1d20:	d8002915 	stw	zero,164(sp)
    1d24:	003bd106 	br	c6c <___vfprintf_internal_r+0x734>
    1d28:	d8802d17 	ldw	r2,180(sp)
    1d2c:	d8c02d17 	ldw	r3,180(sp)
    1d30:	d9002d17 	ldw	r4,180(sp)
    1d34:	10800017 	ldw	r2,0(r2)
    1d38:	18c00117 	ldw	r3,4(r3)
    1d3c:	21000204 	addi	r4,r4,8
    1d40:	d8803615 	stw	r2,216(sp)
    1d44:	d8c03815 	stw	r3,224(sp)
    1d48:	d9002d15 	stw	r4,180(sp)
    1d4c:	003b7506 	br	b24 <___vfprintf_internal_r+0x5ec>
    1d50:	ac400007 	ldb	r17,0(r21)
    1d54:	003a5906 	br	6bc <___vfprintf_internal_r+0x184>
    1d58:	9080100c 	andi	r2,r18,64
    1d5c:	1000a826 	beq	r2,zero,2000 <___vfprintf_internal_r+0x1ac8>
    1d60:	d9002d17 	ldw	r4,180(sp)
    1d64:	002d883a 	mov	r22,zero
    1d68:	24c0000b 	ldhu	r19,0(r4)
    1d6c:	21000104 	addi	r4,r4,4
    1d70:	d9002d15 	stw	r4,180(sp)
    1d74:	003ccb06 	br	10a4 <___vfprintf_internal_r+0xb6c>
    1d78:	d8c02d17 	ldw	r3,180(sp)
    1d7c:	d9002917 	ldw	r4,164(sp)
    1d80:	002d883a 	mov	r22,zero
    1d84:	18800104 	addi	r2,r3,4
    1d88:	1cc00017 	ldw	r19,0(r3)
    1d8c:	203ebb0e 	bge	r4,zero,187c <___vfprintf_internal_r+0x1344>
    1d90:	003ef106 	br	1958 <___vfprintf_internal_r+0x1420>
    1d94:	9080040c 	andi	r2,r18,16
    1d98:	1000921e 	bne	r2,zero,1fe4 <___vfprintf_internal_r+0x1aac>
    1d9c:	9480100c 	andi	r18,r18,64
    1da0:	90013926 	beq	r18,zero,2288 <___vfprintf_internal_r+0x1d50>
    1da4:	d9002d17 	ldw	r4,180(sp)
    1da8:	d9402f17 	ldw	r5,188(sp)
    1dac:	20800017 	ldw	r2,0(r4)
    1db0:	21000104 	addi	r4,r4,4
    1db4:	d9002d15 	stw	r4,180(sp)
    1db8:	1140000d 	sth	r5,0(r2)
    1dbc:	003a1606 	br	618 <___vfprintf_internal_r+0xe0>
    1dc0:	9080100c 	andi	r2,r18,64
    1dc4:	10008026 	beq	r2,zero,1fc8 <___vfprintf_internal_r+0x1a90>
    1dc8:	d8c02d17 	ldw	r3,180(sp)
    1dcc:	1cc0000f 	ldh	r19,0(r3)
    1dd0:	18c00104 	addi	r3,r3,4
    1dd4:	d8c02d15 	stw	r3,180(sp)
    1dd8:	982dd7fa 	srai	r22,r19,31
    1ddc:	b005883a 	mov	r2,r22
    1de0:	003b1f06 	br	a60 <___vfprintf_internal_r+0x528>
    1de4:	9080100c 	andi	r2,r18,64
    1de8:	d8002785 	stb	zero,158(sp)
    1dec:	10008a1e 	bne	r2,zero,2018 <___vfprintf_internal_r+0x1ae0>
    1df0:	d9402d17 	ldw	r5,180(sp)
    1df4:	d8c02917 	ldw	r3,164(sp)
    1df8:	002d883a 	mov	r22,zero
    1dfc:	28800104 	addi	r2,r5,4
    1e00:	2cc00017 	ldw	r19,0(r5)
    1e04:	183e4b0e 	bge	r3,zero,1734 <___vfprintf_internal_r+0x11fc>
    1e08:	9d86b03a 	or	r3,r19,r22
    1e0c:	d8802d15 	stw	r2,180(sp)
    1e10:	183e4c1e 	bne	r3,zero,1744 <___vfprintf_internal_r+0x120c>
    1e14:	0039883a 	mov	fp,zero
    1e18:	0005883a 	mov	r2,zero
    1e1c:	003d4006 	br	1320 <___vfprintf_internal_r+0xde8>
    1e20:	01400074 	movhi	r5,1
    1e24:	297d7884 	addi	r5,r5,-2590
    1e28:	d9402b15 	stw	r5,172(sp)
    1e2c:	d9402b17 	ldw	r5,172(sp)
    1e30:	1c47883a 	add	r3,r3,r17
    1e34:	10800044 	addi	r2,r2,1
    1e38:	41400015 	stw	r5,0(r8)
    1e3c:	44400115 	stw	r17,4(r8)
    1e40:	d8c02015 	stw	r3,128(sp)
    1e44:	d8801f15 	stw	r2,124(sp)
    1e48:	010001c4 	movi	r4,7
    1e4c:	20bec816 	blt	r4,r2,1970 <___vfprintf_internal_r+0x1438>
    1e50:	42000204 	addi	r8,r8,8
    1e54:	003ecd06 	br	198c <___vfprintf_internal_r+0x1454>
    1e58:	d9002917 	ldw	r4,164(sp)
    1e5c:	d8002785 	stb	zero,158(sp)
    1e60:	203d2d16 	blt	r4,zero,1318 <___vfprintf_internal_r+0xde0>
    1e64:	00bfdfc4 	movi	r2,-129
    1e68:	90a4703a 	and	r18,r18,r2
    1e6c:	003a9106 	br	8b4 <___vfprintf_internal_r+0x37c>
    1e70:	01000074 	movhi	r4,1
    1e74:	213d7884 	addi	r4,r4,-2590
    1e78:	d9002b15 	stw	r4,172(sp)
    1e7c:	003c0c06 	br	eb0 <___vfprintf_internal_r+0x978>
    1e80:	d9002c17 	ldw	r4,176(sp)
    1e84:	d9801e04 	addi	r6,sp,120
    1e88:	b80b883a 	mov	r5,r23
    1e8c:	0007b340 	call	7b34 <__sprint_r>
    1e90:	103aab1e 	bne	r2,zero,940 <___vfprintf_internal_r+0x408>
    1e94:	d8c02017 	ldw	r3,128(sp)
    1e98:	da000404 	addi	r8,sp,16
    1e9c:	003d4106 	br	13a4 <___vfprintf_internal_r+0xe6c>
    1ea0:	d8801f17 	ldw	r2,124(sp)
    1ea4:	01400074 	movhi	r5,1
    1ea8:	01000044 	movi	r4,1
    1eac:	18c00044 	addi	r3,r3,1
    1eb0:	10800044 	addi	r2,r2,1
    1eb4:	297d7804 	addi	r5,r5,-2592
    1eb8:	41000115 	stw	r4,4(r8)
    1ebc:	41400015 	stw	r5,0(r8)
    1ec0:	d8c02015 	stw	r3,128(sp)
    1ec4:	d8801f15 	stw	r2,124(sp)
    1ec8:	010001c4 	movi	r4,7
    1ecc:	20805c16 	blt	r4,r2,2040 <___vfprintf_internal_r+0x1b08>
    1ed0:	42000204 	addi	r8,r8,8
    1ed4:	8800041e 	bne	r17,zero,1ee8 <___vfprintf_internal_r+0x19b0>
    1ed8:	d8803317 	ldw	r2,204(sp)
    1edc:	1000021e 	bne	r2,zero,1ee8 <___vfprintf_internal_r+0x19b0>
    1ee0:	9080004c 	andi	r2,r18,1
    1ee4:	103c0926 	beq	r2,zero,f0c <___vfprintf_internal_r+0x9d4>
    1ee8:	d9003717 	ldw	r4,220(sp)
    1eec:	d8801f17 	ldw	r2,124(sp)
    1ef0:	d9403417 	ldw	r5,208(sp)
    1ef4:	20c7883a 	add	r3,r4,r3
    1ef8:	10800044 	addi	r2,r2,1
    1efc:	41000115 	stw	r4,4(r8)
    1f00:	41400015 	stw	r5,0(r8)
    1f04:	d8c02015 	stw	r3,128(sp)
    1f08:	d8801f15 	stw	r2,124(sp)
    1f0c:	010001c4 	movi	r4,7
    1f10:	20812116 	blt	r4,r2,2398 <___vfprintf_internal_r+0x1e60>
    1f14:	42000204 	addi	r8,r8,8
    1f18:	0463c83a 	sub	r17,zero,r17
    1f1c:	0440730e 	bge	zero,r17,20ec <___vfprintf_internal_r+0x1bb4>
    1f20:	05800404 	movi	r22,16
    1f24:	b440860e 	bge	r22,r17,2140 <___vfprintf_internal_r+0x1c08>
    1f28:	01400074 	movhi	r5,1
    1f2c:	297d7884 	addi	r5,r5,-2590
    1f30:	d9402b15 	stw	r5,172(sp)
    1f34:	070001c4 	movi	fp,7
    1f38:	dcc02c17 	ldw	r19,176(sp)
    1f3c:	00000306 	br	1f4c <___vfprintf_internal_r+0x1a14>
    1f40:	42000204 	addi	r8,r8,8
    1f44:	8c7ffc04 	addi	r17,r17,-16
    1f48:	b440800e 	bge	r22,r17,214c <___vfprintf_internal_r+0x1c14>
    1f4c:	18c00404 	addi	r3,r3,16
    1f50:	10800044 	addi	r2,r2,1
    1f54:	45000015 	stw	r20,0(r8)
    1f58:	45800115 	stw	r22,4(r8)
    1f5c:	d8c02015 	stw	r3,128(sp)
    1f60:	d8801f15 	stw	r2,124(sp)
    1f64:	e0bff60e 	bge	fp,r2,1f40 <___vfprintf_internal_r+0x1a08>
    1f68:	d9801e04 	addi	r6,sp,120
    1f6c:	b80b883a 	mov	r5,r23
    1f70:	9809883a 	mov	r4,r19
    1f74:	0007b340 	call	7b34 <__sprint_r>
    1f78:	103a711e 	bne	r2,zero,940 <___vfprintf_internal_r+0x408>
    1f7c:	d8c02017 	ldw	r3,128(sp)
    1f80:	d8801f17 	ldw	r2,124(sp)
    1f84:	da000404 	addi	r8,sp,16
    1f88:	003fee06 	br	1f44 <___vfprintf_internal_r+0x1a0c>
    1f8c:	00bfffc4 	movi	r2,-1
    1f90:	003a6f06 	br	950 <___vfprintf_internal_r+0x418>
    1f94:	008011c4 	movi	r2,71
    1f98:	1440b816 	blt	r2,r17,227c <___vfprintf_internal_r+0x1d44>
    1f9c:	04000074 	movhi	r16,1
    1fa0:	843d6a04 	addi	r16,r16,-2648
    1fa4:	00c000c4 	movi	r3,3
    1fa8:	00bfdfc4 	movi	r2,-129
    1fac:	d8c02a15 	stw	r3,168(sp)
    1fb0:	90a4703a 	and	r18,r18,r2
    1fb4:	df002783 	ldbu	fp,158(sp)
    1fb8:	d8c02e15 	stw	r3,184(sp)
    1fbc:	d8002915 	stw	zero,164(sp)
    1fc0:	d8003215 	stw	zero,200(sp)
    1fc4:	003b2906 	br	c6c <___vfprintf_internal_r+0x734>
    1fc8:	d9002d17 	ldw	r4,180(sp)
    1fcc:	24c00017 	ldw	r19,0(r4)
    1fd0:	21000104 	addi	r4,r4,4
    1fd4:	d9002d15 	stw	r4,180(sp)
    1fd8:	982dd7fa 	srai	r22,r19,31
    1fdc:	b005883a 	mov	r2,r22
    1fe0:	003a9f06 	br	a60 <___vfprintf_internal_r+0x528>
    1fe4:	d9402d17 	ldw	r5,180(sp)
    1fe8:	d8c02f17 	ldw	r3,188(sp)
    1fec:	28800017 	ldw	r2,0(r5)
    1ff0:	29400104 	addi	r5,r5,4
    1ff4:	d9402d15 	stw	r5,180(sp)
    1ff8:	10c00015 	stw	r3,0(r2)
    1ffc:	00398606 	br	618 <___vfprintf_internal_r+0xe0>
    2000:	d9402d17 	ldw	r5,180(sp)
    2004:	002d883a 	mov	r22,zero
    2008:	2cc00017 	ldw	r19,0(r5)
    200c:	29400104 	addi	r5,r5,4
    2010:	d9402d15 	stw	r5,180(sp)
    2014:	003c2306 	br	10a4 <___vfprintf_internal_r+0xb6c>
    2018:	d8c02d17 	ldw	r3,180(sp)
    201c:	d9002917 	ldw	r4,164(sp)
    2020:	002d883a 	mov	r22,zero
    2024:	18800104 	addi	r2,r3,4
    2028:	1cc0000b 	ldhu	r19,0(r3)
    202c:	203dc10e 	bge	r4,zero,1734 <___vfprintf_internal_r+0x11fc>
    2030:	003f7506 	br	1e08 <___vfprintf_internal_r+0x18d0>
    2034:	04000074 	movhi	r16,1
    2038:	843d6804 	addi	r16,r16,-2656
    203c:	003acc06 	br	b70 <___vfprintf_internal_r+0x638>
    2040:	d9002c17 	ldw	r4,176(sp)
    2044:	d9801e04 	addi	r6,sp,120
    2048:	b80b883a 	mov	r5,r23
    204c:	0007b340 	call	7b34 <__sprint_r>
    2050:	103a3b1e 	bne	r2,zero,940 <___vfprintf_internal_r+0x408>
    2054:	dc402617 	ldw	r17,152(sp)
    2058:	d8c02017 	ldw	r3,128(sp)
    205c:	da000404 	addi	r8,sp,16
    2060:	003f9c06 	br	1ed4 <___vfprintf_internal_r+0x199c>
    2064:	ac400043 	ldbu	r17,1(r21)
    2068:	94800814 	ori	r18,r18,32
    206c:	ad400044 	addi	r21,r21,1
    2070:	8c403fcc 	andi	r17,r17,255
    2074:	8c40201c 	xori	r17,r17,128
    2078:	8c7fe004 	addi	r17,r17,-128
    207c:	00398f06 	br	6bc <___vfprintf_internal_r+0x184>
    2080:	d8c02d15 	stw	r3,180(sp)
    2084:	0039883a 	mov	fp,zero
    2088:	003e3506 	br	1960 <___vfprintf_internal_r+0x1428>
    208c:	d9002c17 	ldw	r4,176(sp)
    2090:	d9801e04 	addi	r6,sp,120
    2094:	b80b883a 	mov	r5,r23
    2098:	0007b340 	call	7b34 <__sprint_r>
    209c:	103a281e 	bne	r2,zero,940 <___vfprintf_internal_r+0x408>
    20a0:	d8c02017 	ldw	r3,128(sp)
    20a4:	da000404 	addi	r8,sp,16
    20a8:	003cd006 	br	13ec <___vfprintf_internal_r+0xeb4>
    20ac:	8009883a 	mov	r4,r16
    20b0:	da003d15 	stw	r8,244(sp)
    20b4:	00004a00 	call	4a0 <strlen>
    20b8:	d8802e15 	stw	r2,184(sp)
    20bc:	da003d17 	ldw	r8,244(sp)
    20c0:	103c340e 	bge	r2,zero,1194 <___vfprintf_internal_r+0xc5c>
    20c4:	0005883a 	mov	r2,zero
    20c8:	003c3206 	br	1194 <___vfprintf_internal_r+0xc5c>
    20cc:	d9002c17 	ldw	r4,176(sp)
    20d0:	d9801e04 	addi	r6,sp,120
    20d4:	b80b883a 	mov	r5,r23
    20d8:	0007b340 	call	7b34 <__sprint_r>
    20dc:	103a181e 	bne	r2,zero,940 <___vfprintf_internal_r+0x408>
    20e0:	d8c02017 	ldw	r3,128(sp)
    20e4:	d8801f17 	ldw	r2,124(sp)
    20e8:	da000404 	addi	r8,sp,16
    20ec:	d9403317 	ldw	r5,204(sp)
    20f0:	10800044 	addi	r2,r2,1
    20f4:	44000015 	stw	r16,0(r8)
    20f8:	28c7883a 	add	r3,r5,r3
    20fc:	003b7d06 	br	ef4 <___vfprintf_internal_r+0x9bc>
    2100:	01000074 	movhi	r4,1
    2104:	213d7c84 	addi	r4,r4,-2574
    2108:	d9003515 	stw	r4,212(sp)
    210c:	003b1406 	br	d60 <___vfprintf_internal_r+0x828>
    2110:	013fffc4 	movi	r4,-1
    2114:	003a3506 	br	9ec <___vfprintf_internal_r+0x4b4>
    2118:	0023883a 	mov	r17,zero
    211c:	003d9d06 	br	1794 <___vfprintf_internal_r+0x125c>
    2120:	d9002c17 	ldw	r4,176(sp)
    2124:	d9801e04 	addi	r6,sp,120
    2128:	b80b883a 	mov	r5,r23
    212c:	0007b340 	call	7b34 <__sprint_r>
    2130:	103a031e 	bne	r2,zero,940 <___vfprintf_internal_r+0x408>
    2134:	d8c02017 	ldw	r3,128(sp)
    2138:	da000404 	addi	r8,sp,16
    213c:	003d9406 	br	1790 <___vfprintf_internal_r+0x1258>
    2140:	01000074 	movhi	r4,1
    2144:	213d7884 	addi	r4,r4,-2590
    2148:	d9002b15 	stw	r4,172(sp)
    214c:	d9002b17 	ldw	r4,172(sp)
    2150:	1c47883a 	add	r3,r3,r17
    2154:	10800044 	addi	r2,r2,1
    2158:	41000015 	stw	r4,0(r8)
    215c:	44400115 	stw	r17,4(r8)
    2160:	d8c02015 	stw	r3,128(sp)
    2164:	d8801f15 	stw	r2,124(sp)
    2168:	010001c4 	movi	r4,7
    216c:	20bfd716 	blt	r4,r2,20cc <___vfprintf_internal_r+0x1b94>
    2170:	42000204 	addi	r8,r8,8
    2174:	003fdd06 	br	20ec <___vfprintf_internal_r+0x1bb4>
    2178:	d9002c17 	ldw	r4,176(sp)
    217c:	d9801e04 	addi	r6,sp,120
    2180:	b80b883a 	mov	r5,r23
    2184:	0007b340 	call	7b34 <__sprint_r>
    2188:	1039ed1e 	bne	r2,zero,940 <___vfprintf_internal_r+0x408>
    218c:	d8802617 	ldw	r2,152(sp)
    2190:	d8c02017 	ldw	r3,128(sp)
    2194:	da000404 	addi	r8,sp,16
    2198:	003e1006 	br	19dc <___vfprintf_internal_r+0x14a4>
    219c:	00800044 	movi	r2,1
    21a0:	10803fcc 	andi	r2,r2,255
    21a4:	00c00044 	movi	r3,1
    21a8:	10fa3526 	beq	r2,r3,a80 <___vfprintf_internal_r+0x548>
    21ac:	00c00084 	movi	r3,2
    21b0:	10fbcb26 	beq	r2,r3,10e0 <___vfprintf_internal_r+0xba8>
    21b4:	003a8f06 	br	bf4 <___vfprintf_internal_r+0x6bc>
    21b8:	01000074 	movhi	r4,1
    21bc:	213d7c84 	addi	r4,r4,-2574
    21c0:	d9003515 	stw	r4,212(sp)
    21c4:	003b7606 	br	fa0 <___vfprintf_internal_r+0xa68>
    21c8:	d8802917 	ldw	r2,164(sp)
    21cc:	00c00184 	movi	r3,6
    21d0:	1880012e 	bgeu	r3,r2,21d8 <___vfprintf_internal_r+0x1ca0>
    21d4:	1805883a 	mov	r2,r3
    21d8:	d8802e15 	stw	r2,184(sp)
    21dc:	1000ef16 	blt	r2,zero,259c <___vfprintf_internal_r+0x2064>
    21e0:	04000074 	movhi	r16,1
    21e4:	d8802a15 	stw	r2,168(sp)
    21e8:	dcc02d15 	stw	r19,180(sp)
    21ec:	d8002915 	stw	zero,164(sp)
    21f0:	d8003215 	stw	zero,200(sp)
    21f4:	843d7604 	addi	r16,r16,-2600
    21f8:	0039883a 	mov	fp,zero
    21fc:	003aa206 	br	c88 <___vfprintf_internal_r+0x750>
    2200:	0021883a 	mov	r16,zero
    2204:	003e0706 	br	1a24 <___vfprintf_internal_r+0x14ec>
    2208:	d9002c17 	ldw	r4,176(sp)
    220c:	d9801e04 	addi	r6,sp,120
    2210:	b80b883a 	mov	r5,r23
    2214:	0007b340 	call	7b34 <__sprint_r>
    2218:	1039c91e 	bne	r2,zero,940 <___vfprintf_internal_r+0x408>
    221c:	d8802617 	ldw	r2,152(sp)
    2220:	d9403317 	ldw	r5,204(sp)
    2224:	d8c02017 	ldw	r3,128(sp)
    2228:	da000404 	addi	r8,sp,16
    222c:	2885c83a 	sub	r2,r5,r2
    2230:	003dfb06 	br	1a20 <___vfprintf_internal_r+0x14e8>
    2234:	9080004c 	andi	r2,r18,1
    2238:	103e8f1e 	bne	r2,zero,1c78 <___vfprintf_internal_r+0x1740>
    223c:	d8802117 	ldw	r2,132(sp)
    2240:	003e9e06 	br	1cbc <___vfprintf_internal_r+0x1784>
    2244:	1025883a 	mov	r18,r2
    2248:	0039883a 	mov	fp,zero
    224c:	00800084 	movi	r2,2
    2250:	003fd306 	br	21a0 <___vfprintf_internal_r+0x1c68>
    2254:	07000b44 	movi	fp,45
    2258:	df002785 	stb	fp,158(sp)
    225c:	003a4006 	br	b60 <___vfprintf_internal_r+0x628>
    2260:	00c00b44 	movi	r3,45
    2264:	d8c02785 	stb	r3,158(sp)
    2268:	d8802a15 	stw	r2,168(sp)
    226c:	dc802b17 	ldw	r18,172(sp)
    2270:	d8002915 	stw	zero,164(sp)
    2274:	07000b44 	movi	fp,45
    2278:	003a8006 	br	c7c <___vfprintf_internal_r+0x744>
    227c:	04000074 	movhi	r16,1
    2280:	843d6b04 	addi	r16,r16,-2644
    2284:	003f4706 	br	1fa4 <___vfprintf_internal_r+0x1a6c>
    2288:	d8c02d17 	ldw	r3,180(sp)
    228c:	d9002f17 	ldw	r4,188(sp)
    2290:	18800017 	ldw	r2,0(r3)
    2294:	18c00104 	addi	r3,r3,4
    2298:	d8c02d15 	stw	r3,180(sp)
    229c:	11000015 	stw	r4,0(r2)
    22a0:	0038dd06 	br	618 <___vfprintf_internal_r+0xe0>
    22a4:	dd802617 	ldw	r22,152(sp)
    22a8:	00bfff44 	movi	r2,-3
    22ac:	b0801c16 	blt	r22,r2,2320 <___vfprintf_internal_r+0x1de8>
    22b0:	d9402917 	ldw	r5,164(sp)
    22b4:	2d801a16 	blt	r5,r22,2320 <___vfprintf_internal_r+0x1de8>
    22b8:	dd803215 	stw	r22,200(sp)
    22bc:	003e8906 	br	1ce4 <___vfprintf_internal_r+0x17ac>
    22c0:	01000074 	movhi	r4,1
    22c4:	213d7884 	addi	r4,r4,-2590
    22c8:	d9002b15 	stw	r4,172(sp)
    22cc:	003c9106 	br	1514 <___vfprintf_internal_r+0xfdc>
    22d0:	e005883a 	mov	r2,fp
    22d4:	003e7906 	br	1cbc <___vfprintf_internal_r+0x1784>
    22d8:	d9402917 	ldw	r5,164(sp)
    22dc:	df002783 	ldbu	fp,158(sp)
    22e0:	dcc02d15 	stw	r19,180(sp)
    22e4:	d9402a15 	stw	r5,168(sp)
    22e8:	d9402e15 	stw	r5,184(sp)
    22ec:	d8002915 	stw	zero,164(sp)
    22f0:	d8003215 	stw	zero,200(sp)
    22f4:	003a5d06 	br	c6c <___vfprintf_internal_r+0x734>
    22f8:	9080004c 	andi	r2,r18,1
    22fc:	0039883a 	mov	fp,zero
    2300:	10000426 	beq	r2,zero,2314 <___vfprintf_internal_r+0x1ddc>
    2304:	00800c04 	movi	r2,48
    2308:	dc001dc4 	addi	r16,sp,119
    230c:	d8801dc5 	stb	r2,119(sp)
    2310:	003b8006 	br	1114 <___vfprintf_internal_r+0xbdc>
    2314:	d8002e15 	stw	zero,184(sp)
    2318:	dc001e04 	addi	r16,sp,120
    231c:	003a4d06 	br	c54 <___vfprintf_internal_r+0x71c>
    2320:	8c7fff84 	addi	r17,r17,-2
    2324:	b5bfffc4 	addi	r22,r22,-1
    2328:	dd802615 	stw	r22,152(sp)
    232c:	dc4022c5 	stb	r17,139(sp)
    2330:	b000bf16 	blt	r22,zero,2630 <___vfprintf_internal_r+0x20f8>
    2334:	00800ac4 	movi	r2,43
    2338:	d8802305 	stb	r2,140(sp)
    233c:	00800244 	movi	r2,9
    2340:	15807016 	blt	r2,r22,2504 <___vfprintf_internal_r+0x1fcc>
    2344:	00800c04 	movi	r2,48
    2348:	b5800c04 	addi	r22,r22,48
    234c:	d8802345 	stb	r2,141(sp)
    2350:	dd802385 	stb	r22,142(sp)
    2354:	d88023c4 	addi	r2,sp,143
    2358:	df0022c4 	addi	fp,sp,139
    235c:	d8c03317 	ldw	r3,204(sp)
    2360:	1739c83a 	sub	fp,r2,fp
    2364:	d9003317 	ldw	r4,204(sp)
    2368:	e0c7883a 	add	r3,fp,r3
    236c:	df003a15 	stw	fp,232(sp)
    2370:	d8c02e15 	stw	r3,184(sp)
    2374:	00800044 	movi	r2,1
    2378:	1100b30e 	bge	r2,r4,2648 <___vfprintf_internal_r+0x2110>
    237c:	d8c02e17 	ldw	r3,184(sp)
    2380:	18c00044 	addi	r3,r3,1
    2384:	d8c02e15 	stw	r3,184(sp)
    2388:	1805883a 	mov	r2,r3
    238c:	1800ac16 	blt	r3,zero,2640 <___vfprintf_internal_r+0x2108>
    2390:	d8003215 	stw	zero,200(sp)
    2394:	003e5d06 	br	1d0c <___vfprintf_internal_r+0x17d4>
    2398:	d9002c17 	ldw	r4,176(sp)
    239c:	d9801e04 	addi	r6,sp,120
    23a0:	b80b883a 	mov	r5,r23
    23a4:	0007b340 	call	7b34 <__sprint_r>
    23a8:	1039651e 	bne	r2,zero,940 <___vfprintf_internal_r+0x408>
    23ac:	dc402617 	ldw	r17,152(sp)
    23b0:	d8c02017 	ldw	r3,128(sp)
    23b4:	d8801f17 	ldw	r2,124(sp)
    23b8:	da000404 	addi	r8,sp,16
    23bc:	003ed606 	br	1f18 <___vfprintf_internal_r+0x19e0>
    23c0:	582b883a 	mov	r21,r11
    23c4:	d8002915 	stw	zero,164(sp)
    23c8:	0038bd06 	br	6c0 <___vfprintf_internal_r+0x188>
    23cc:	d8802917 	ldw	r2,164(sp)
    23d0:	103e071e 	bne	r2,zero,1bf0 <___vfprintf_internal_r+0x16b8>
    23d4:	dc002915 	stw	r16,164(sp)
    23d8:	003e0506 	br	1bf0 <___vfprintf_internal_r+0x16b8>
    23dc:	d9002917 	ldw	r4,164(sp)
    23e0:	20c00044 	addi	r3,r4,1
    23e4:	003e0f06 	br	1c24 <___vfprintf_internal_r+0x16ec>
    23e8:	01400184 	movi	r5,6
    23ec:	d9402915 	stw	r5,164(sp)
    23f0:	003dff06 	br	1bf0 <___vfprintf_internal_r+0x16b8>
    23f4:	d8802104 	addi	r2,sp,132
    23f8:	d8800315 	stw	r2,12(sp)
    23fc:	d8802504 	addi	r2,sp,148
    2400:	d8800215 	stw	r2,8(sp)
    2404:	d8802604 	addi	r2,sp,152
    2408:	d8800115 	stw	r2,4(sp)
    240c:	d8802917 	ldw	r2,164(sp)
    2410:	d9403617 	ldw	r5,216(sp)
    2414:	d9002c17 	ldw	r4,176(sp)
    2418:	d8800015 	stw	r2,0(sp)
    241c:	01c000c4 	movi	r7,3
    2420:	980d883a 	mov	r6,r19
    2424:	da003d15 	stw	r8,244(sp)
    2428:	0002b5c0 	call	2b5c <_dtoa_r>
    242c:	d8c02917 	ldw	r3,164(sp)
    2430:	da003d17 	ldw	r8,244(sp)
    2434:	1021883a 	mov	r16,r2
    2438:	10f9883a 	add	fp,r2,r3
    243c:	81000007 	ldb	r4,0(r16)
    2440:	00800c04 	movi	r2,48
    2444:	20805e26 	beq	r4,r2,25c0 <___vfprintf_internal_r+0x2088>
    2448:	d8c02617 	ldw	r3,152(sp)
    244c:	e0f9883a 	add	fp,fp,r3
    2450:	003e0a06 	br	1c7c <___vfprintf_internal_r+0x1744>
    2454:	00c00b44 	movi	r3,45
    2458:	24e0003c 	xorhi	r19,r4,32768
    245c:	d8c02a05 	stb	r3,168(sp)
    2460:	003de906 	br	1c08 <___vfprintf_internal_r+0x16d0>
    2464:	d8c03217 	ldw	r3,200(sp)
    2468:	00c07a0e 	bge	zero,r3,2654 <___vfprintf_internal_r+0x211c>
    246c:	00800044 	movi	r2,1
    2470:	d9003317 	ldw	r4,204(sp)
    2474:	1105883a 	add	r2,r2,r4
    2478:	d8802e15 	stw	r2,184(sp)
    247c:	10004e16 	blt	r2,zero,25b8 <___vfprintf_internal_r+0x2080>
    2480:	044019c4 	movi	r17,103
    2484:	003e2106 	br	1d0c <___vfprintf_internal_r+0x17d4>
    2488:	d9002917 	ldw	r4,164(sp)
    248c:	d8802104 	addi	r2,sp,132
    2490:	d8800315 	stw	r2,12(sp)
    2494:	d9000015 	stw	r4,0(sp)
    2498:	d8802504 	addi	r2,sp,148
    249c:	d9403617 	ldw	r5,216(sp)
    24a0:	d9002c17 	ldw	r4,176(sp)
    24a4:	d8800215 	stw	r2,8(sp)
    24a8:	d8802604 	addi	r2,sp,152
    24ac:	d8800115 	stw	r2,4(sp)
    24b0:	01c000c4 	movi	r7,3
    24b4:	980d883a 	mov	r6,r19
    24b8:	da003d15 	stw	r8,244(sp)
    24bc:	0002b5c0 	call	2b5c <_dtoa_r>
    24c0:	d8c02917 	ldw	r3,164(sp)
    24c4:	da003d17 	ldw	r8,244(sp)
    24c8:	1021883a 	mov	r16,r2
    24cc:	00801184 	movi	r2,70
    24d0:	80f9883a 	add	fp,r16,r3
    24d4:	88bfd926 	beq	r17,r2,243c <___vfprintf_internal_r+0x1f04>
    24d8:	003de806 	br	1c7c <___vfprintf_internal_r+0x1744>
    24dc:	d9002917 	ldw	r4,164(sp)
    24e0:	00c04d0e 	bge	zero,r3,2618 <___vfprintf_internal_r+0x20e0>
    24e4:	2000441e 	bne	r4,zero,25f8 <___vfprintf_internal_r+0x20c0>
    24e8:	9480004c 	andi	r18,r18,1
    24ec:	9000421e 	bne	r18,zero,25f8 <___vfprintf_internal_r+0x20c0>
    24f0:	1805883a 	mov	r2,r3
    24f4:	18007016 	blt	r3,zero,26b8 <___vfprintf_internal_r+0x2180>
    24f8:	d8c03217 	ldw	r3,200(sp)
    24fc:	d8c02e15 	stw	r3,184(sp)
    2500:	003e0206 	br	1d0c <___vfprintf_internal_r+0x17d4>
    2504:	df0022c4 	addi	fp,sp,139
    2508:	dc002915 	stw	r16,164(sp)
    250c:	4027883a 	mov	r19,r8
    2510:	e021883a 	mov	r16,fp
    2514:	b009883a 	mov	r4,r22
    2518:	01400284 	movi	r5,10
    251c:	000a4e80 	call	a4e8 <__modsi3>
    2520:	10800c04 	addi	r2,r2,48
    2524:	843fffc4 	addi	r16,r16,-1
    2528:	b009883a 	mov	r4,r22
    252c:	01400284 	movi	r5,10
    2530:	80800005 	stb	r2,0(r16)
    2534:	000a4640 	call	a464 <__divsi3>
    2538:	102d883a 	mov	r22,r2
    253c:	00800244 	movi	r2,9
    2540:	15bff416 	blt	r2,r22,2514 <___vfprintf_internal_r+0x1fdc>
    2544:	9811883a 	mov	r8,r19
    2548:	b0800c04 	addi	r2,r22,48
    254c:	8027883a 	mov	r19,r16
    2550:	997fffc4 	addi	r5,r19,-1
    2554:	98bfffc5 	stb	r2,-1(r19)
    2558:	dc002917 	ldw	r16,164(sp)
    255c:	2f006a2e 	bgeu	r5,fp,2708 <___vfprintf_internal_r+0x21d0>
    2560:	d9c02384 	addi	r7,sp,142
    2564:	3ccfc83a 	sub	r7,r7,r19
    2568:	d9002344 	addi	r4,sp,141
    256c:	e1cf883a 	add	r7,fp,r7
    2570:	00000106 	br	2578 <___vfprintf_internal_r+0x2040>
    2574:	28800003 	ldbu	r2,0(r5)
    2578:	20800005 	stb	r2,0(r4)
    257c:	21000044 	addi	r4,r4,1
    2580:	29400044 	addi	r5,r5,1
    2584:	393ffb1e 	bne	r7,r4,2574 <___vfprintf_internal_r+0x203c>
    2588:	d8802304 	addi	r2,sp,140
    258c:	14c5c83a 	sub	r2,r2,r19
    2590:	d8c02344 	addi	r3,sp,141
    2594:	1885883a 	add	r2,r3,r2
    2598:	003f7006 	br	235c <___vfprintf_internal_r+0x1e24>
    259c:	0005883a 	mov	r2,zero
    25a0:	003f0f06 	br	21e0 <___vfprintf_internal_r+0x1ca8>
    25a4:	d8c03217 	ldw	r3,200(sp)
    25a8:	18c00044 	addi	r3,r3,1
    25ac:	d8c02e15 	stw	r3,184(sp)
    25b0:	1805883a 	mov	r2,r3
    25b4:	183fb20e 	bge	r3,zero,2480 <___vfprintf_internal_r+0x1f48>
    25b8:	0005883a 	mov	r2,zero
    25bc:	003fb006 	br	2480 <___vfprintf_internal_r+0x1f48>
    25c0:	d9003617 	ldw	r4,216(sp)
    25c4:	000d883a 	mov	r6,zero
    25c8:	000f883a 	mov	r7,zero
    25cc:	980b883a 	mov	r5,r19
    25d0:	d8c03c15 	stw	r3,240(sp)
    25d4:	da003d15 	stw	r8,244(sp)
    25d8:	000b7ac0 	call	b7ac <__eqdf2>
    25dc:	d8c03c17 	ldw	r3,240(sp)
    25e0:	da003d17 	ldw	r8,244(sp)
    25e4:	103f9826 	beq	r2,zero,2448 <___vfprintf_internal_r+0x1f10>
    25e8:	00800044 	movi	r2,1
    25ec:	10c7c83a 	sub	r3,r2,r3
    25f0:	d8c02615 	stw	r3,152(sp)
    25f4:	003f9506 	br	244c <___vfprintf_internal_r+0x1f14>
    25f8:	d9002917 	ldw	r4,164(sp)
    25fc:	d8c03217 	ldw	r3,200(sp)
    2600:	20800044 	addi	r2,r4,1
    2604:	1885883a 	add	r2,r3,r2
    2608:	d8802e15 	stw	r2,184(sp)
    260c:	103dbf0e 	bge	r2,zero,1d0c <___vfprintf_internal_r+0x17d4>
    2610:	0005883a 	mov	r2,zero
    2614:	003dbd06 	br	1d0c <___vfprintf_internal_r+0x17d4>
    2618:	2000211e 	bne	r4,zero,26a0 <___vfprintf_internal_r+0x2168>
    261c:	9480004c 	andi	r18,r18,1
    2620:	90001f1e 	bne	r18,zero,26a0 <___vfprintf_internal_r+0x2168>
    2624:	00800044 	movi	r2,1
    2628:	d8802e15 	stw	r2,184(sp)
    262c:	003db706 	br	1d0c <___vfprintf_internal_r+0x17d4>
    2630:	00800b44 	movi	r2,45
    2634:	05adc83a 	sub	r22,zero,r22
    2638:	d8802305 	stb	r2,140(sp)
    263c:	003f3f06 	br	233c <___vfprintf_internal_r+0x1e04>
    2640:	0005883a 	mov	r2,zero
    2644:	003f5206 	br	2390 <___vfprintf_internal_r+0x1e58>
    2648:	90a4703a 	and	r18,r18,r2
    264c:	903f4e26 	beq	r18,zero,2388 <___vfprintf_internal_r+0x1e50>
    2650:	003f4a06 	br	237c <___vfprintf_internal_r+0x1e44>
    2654:	00800084 	movi	r2,2
    2658:	10c5c83a 	sub	r2,r2,r3
    265c:	003f8406 	br	2470 <___vfprintf_internal_r+0x1f38>
    2660:	d8802d17 	ldw	r2,180(sp)
    2664:	d9002d17 	ldw	r4,180(sp)
    2668:	ac400043 	ldbu	r17,1(r21)
    266c:	10800017 	ldw	r2,0(r2)
    2670:	582b883a 	mov	r21,r11
    2674:	d8802915 	stw	r2,164(sp)
    2678:	20800104 	addi	r2,r4,4
    267c:	d9002917 	ldw	r4,164(sp)
    2680:	d8802d15 	stw	r2,180(sp)
    2684:	203e7a0e 	bge	r4,zero,2070 <___vfprintf_internal_r+0x1b38>
    2688:	8c403fcc 	andi	r17,r17,255
    268c:	00bfffc4 	movi	r2,-1
    2690:	8c40201c 	xori	r17,r17,128
    2694:	d8802915 	stw	r2,164(sp)
    2698:	8c7fe004 	addi	r17,r17,-128
    269c:	00380706 	br	6bc <___vfprintf_internal_r+0x184>
    26a0:	d8c02917 	ldw	r3,164(sp)
    26a4:	18c00084 	addi	r3,r3,2
    26a8:	d8c02e15 	stw	r3,184(sp)
    26ac:	1805883a 	mov	r2,r3
    26b0:	183d960e 	bge	r3,zero,1d0c <___vfprintf_internal_r+0x17d4>
    26b4:	003fd606 	br	2610 <___vfprintf_internal_r+0x20d8>
    26b8:	0005883a 	mov	r2,zero
    26bc:	003f8e06 	br	24f8 <___vfprintf_internal_r+0x1fc0>
    26c0:	9080004c 	andi	r2,r18,1
    26c4:	103f811e 	bne	r2,zero,24cc <___vfprintf_internal_r+0x1f94>
    26c8:	d8802117 	ldw	r2,132(sp)
    26cc:	1405c83a 	sub	r2,r2,r16
    26d0:	d8803315 	stw	r2,204(sp)
    26d4:	b47ef326 	beq	r22,r17,22a4 <___vfprintf_internal_r+0x1d6c>
    26d8:	dd802617 	ldw	r22,152(sp)
    26dc:	003f1106 	br	2324 <___vfprintf_internal_r+0x1dec>
    26e0:	d9c02785 	stb	r7,158(sp)
    26e4:	00390406 	br	af8 <___vfprintf_internal_r+0x5c0>
    26e8:	d9c02785 	stb	r7,158(sp)
    26ec:	0038d306 	br	a3c <___vfprintf_internal_r+0x504>
    26f0:	d9c02785 	stb	r7,158(sp)
    26f4:	003a6106 	br	107c <___vfprintf_internal_r+0xb44>
    26f8:	d9c02785 	stb	r7,158(sp)
    26fc:	003af806 	br	12e0 <___vfprintf_internal_r+0xda8>
    2700:	0005883a 	mov	r2,zero
    2704:	003d7e06 	br	1d00 <___vfprintf_internal_r+0x17c8>
    2708:	d8802344 	addi	r2,sp,141
    270c:	003f1306 	br	235c <___vfprintf_internal_r+0x1e24>
    2710:	d9c02785 	stb	r7,158(sp)
    2714:	00392306 	br	ba4 <___vfprintf_internal_r+0x66c>
    2718:	d9c02785 	stb	r7,158(sp)
    271c:	003aa906 	br	11c4 <___vfprintf_internal_r+0xc8c>
    2720:	d9c02785 	stb	r7,158(sp)
    2724:	003a3d06 	br	101c <___vfprintf_internal_r+0xae4>
    2728:	d9c02785 	stb	r7,158(sp)
    272c:	003aca06 	br	1258 <___vfprintf_internal_r+0xd20>

00002730 <__vfprintf_internal>:
    2730:	00800074 	movhi	r2,1
    2734:	1084cf04 	addi	r2,r2,4924
    2738:	300f883a 	mov	r7,r6
    273c:	280d883a 	mov	r6,r5
    2740:	200b883a 	mov	r5,r4
    2744:	11000017 	ldw	r4,0(r2)
    2748:	00005381 	jmpi	538 <___vfprintf_internal_r>

0000274c <__sbprintf>:
    274c:	2880030b 	ldhu	r2,12(r5)
    2750:	2ac01917 	ldw	r11,100(r5)
    2754:	2a80038b 	ldhu	r10,14(r5)
    2758:	2a400717 	ldw	r9,28(r5)
    275c:	2a000917 	ldw	r8,36(r5)
    2760:	defee204 	addi	sp,sp,-1144
    2764:	00c10004 	movi	r3,1024
    2768:	dc011a15 	stw	r16,1128(sp)
    276c:	10bfff4c 	andi	r2,r2,65533
    2770:	2821883a 	mov	r16,r5
    2774:	d8cb883a 	add	r5,sp,r3
    2778:	dc811c15 	stw	r18,1136(sp)
    277c:	dc411b15 	stw	r17,1132(sp)
    2780:	dfc11d15 	stw	ra,1140(sp)
    2784:	2025883a 	mov	r18,r4
    2788:	d881030d 	sth	r2,1036(sp)
    278c:	dac11915 	stw	r11,1124(sp)
    2790:	da81038d 	sth	r10,1038(sp)
    2794:	da410715 	stw	r9,1052(sp)
    2798:	da010915 	stw	r8,1060(sp)
    279c:	dec10015 	stw	sp,1024(sp)
    27a0:	dec10415 	stw	sp,1040(sp)
    27a4:	d8c10215 	stw	r3,1032(sp)
    27a8:	d8c10515 	stw	r3,1044(sp)
    27ac:	d8010615 	stw	zero,1048(sp)
    27b0:	00005380 	call	538 <___vfprintf_internal_r>
    27b4:	1023883a 	mov	r17,r2
    27b8:	10000416 	blt	r2,zero,27cc <__sbprintf+0x80>
    27bc:	d9410004 	addi	r5,sp,1024
    27c0:	9009883a 	mov	r4,r18
    27c4:	00044000 	call	4400 <_fflush_r>
    27c8:	10000d1e 	bne	r2,zero,2800 <__sbprintf+0xb4>
    27cc:	d881030b 	ldhu	r2,1036(sp)
    27d0:	1080100c 	andi	r2,r2,64
    27d4:	10000326 	beq	r2,zero,27e4 <__sbprintf+0x98>
    27d8:	8080030b 	ldhu	r2,12(r16)
    27dc:	10801014 	ori	r2,r2,64
    27e0:	8080030d 	sth	r2,12(r16)
    27e4:	8805883a 	mov	r2,r17
    27e8:	dfc11d17 	ldw	ra,1140(sp)
    27ec:	dc811c17 	ldw	r18,1136(sp)
    27f0:	dc411b17 	ldw	r17,1132(sp)
    27f4:	dc011a17 	ldw	r16,1128(sp)
    27f8:	dec11e04 	addi	sp,sp,1144
    27fc:	f800283a 	ret
    2800:	047fffc4 	movi	r17,-1
    2804:	003ff106 	br	27cc <__sbprintf+0x80>

00002808 <__swsetup_r>:
    2808:	00800074 	movhi	r2,1
    280c:	defffd04 	addi	sp,sp,-12
    2810:	1084cf04 	addi	r2,r2,4924
    2814:	dc400115 	stw	r17,4(sp)
    2818:	2023883a 	mov	r17,r4
    281c:	11000017 	ldw	r4,0(r2)
    2820:	dc000015 	stw	r16,0(sp)
    2824:	dfc00215 	stw	ra,8(sp)
    2828:	2821883a 	mov	r16,r5
    282c:	20000226 	beq	r4,zero,2838 <__swsetup_r+0x30>
    2830:	20800e17 	ldw	r2,56(r4)
    2834:	10003126 	beq	r2,zero,28fc <__swsetup_r+0xf4>
    2838:	8080030b 	ldhu	r2,12(r16)
    283c:	10c0020c 	andi	r3,r2,8
    2840:	1009883a 	mov	r4,r2
    2844:	18000f26 	beq	r3,zero,2884 <__swsetup_r+0x7c>
    2848:	80c00417 	ldw	r3,16(r16)
    284c:	18001526 	beq	r3,zero,28a4 <__swsetup_r+0x9c>
    2850:	1100004c 	andi	r4,r2,1
    2854:	20001c1e 	bne	r4,zero,28c8 <__swsetup_r+0xc0>
    2858:	1080008c 	andi	r2,r2,2
    285c:	1000291e 	bne	r2,zero,2904 <__swsetup_r+0xfc>
    2860:	80800517 	ldw	r2,20(r16)
    2864:	80800215 	stw	r2,8(r16)
    2868:	18001c26 	beq	r3,zero,28dc <__swsetup_r+0xd4>
    286c:	0005883a 	mov	r2,zero
    2870:	dfc00217 	ldw	ra,8(sp)
    2874:	dc400117 	ldw	r17,4(sp)
    2878:	dc000017 	ldw	r16,0(sp)
    287c:	dec00304 	addi	sp,sp,12
    2880:	f800283a 	ret
    2884:	2080040c 	andi	r2,r4,16
    2888:	10002e26 	beq	r2,zero,2944 <__swsetup_r+0x13c>
    288c:	2080010c 	andi	r2,r4,4
    2890:	10001e1e 	bne	r2,zero,290c <__swsetup_r+0x104>
    2894:	80c00417 	ldw	r3,16(r16)
    2898:	20800214 	ori	r2,r4,8
    289c:	8080030d 	sth	r2,12(r16)
    28a0:	183feb1e 	bne	r3,zero,2850 <__swsetup_r+0x48>
    28a4:	1100a00c 	andi	r4,r2,640
    28a8:	01408004 	movi	r5,512
    28ac:	217fe826 	beq	r4,r5,2850 <__swsetup_r+0x48>
    28b0:	800b883a 	mov	r5,r16
    28b4:	8809883a 	mov	r4,r17
    28b8:	00053800 	call	5380 <__smakebuf_r>
    28bc:	8080030b 	ldhu	r2,12(r16)
    28c0:	80c00417 	ldw	r3,16(r16)
    28c4:	003fe206 	br	2850 <__swsetup_r+0x48>
    28c8:	80800517 	ldw	r2,20(r16)
    28cc:	80000215 	stw	zero,8(r16)
    28d0:	0085c83a 	sub	r2,zero,r2
    28d4:	80800615 	stw	r2,24(r16)
    28d8:	183fe41e 	bne	r3,zero,286c <__swsetup_r+0x64>
    28dc:	80c0030b 	ldhu	r3,12(r16)
    28e0:	0005883a 	mov	r2,zero
    28e4:	1900200c 	andi	r4,r3,128
    28e8:	203fe126 	beq	r4,zero,2870 <__swsetup_r+0x68>
    28ec:	18c01014 	ori	r3,r3,64
    28f0:	80c0030d 	sth	r3,12(r16)
    28f4:	00bfffc4 	movi	r2,-1
    28f8:	003fdd06 	br	2870 <__swsetup_r+0x68>
    28fc:	00047dc0 	call	47dc <__sinit>
    2900:	003fcd06 	br	2838 <__swsetup_r+0x30>
    2904:	0005883a 	mov	r2,zero
    2908:	003fd606 	br	2864 <__swsetup_r+0x5c>
    290c:	81400c17 	ldw	r5,48(r16)
    2910:	28000626 	beq	r5,zero,292c <__swsetup_r+0x124>
    2914:	80801004 	addi	r2,r16,64
    2918:	28800326 	beq	r5,r2,2928 <__swsetup_r+0x120>
    291c:	8809883a 	mov	r4,r17
    2920:	00049500 	call	4950 <_free_r>
    2924:	8100030b 	ldhu	r4,12(r16)
    2928:	80000c15 	stw	zero,48(r16)
    292c:	80c00417 	ldw	r3,16(r16)
    2930:	00bff6c4 	movi	r2,-37
    2934:	1108703a 	and	r4,r2,r4
    2938:	80000115 	stw	zero,4(r16)
    293c:	80c00015 	stw	r3,0(r16)
    2940:	003fd506 	br	2898 <__swsetup_r+0x90>
    2944:	00800244 	movi	r2,9
    2948:	88800015 	stw	r2,0(r17)
    294c:	20801014 	ori	r2,r4,64
    2950:	8080030d 	sth	r2,12(r16)
    2954:	00bfffc4 	movi	r2,-1
    2958:	003fc506 	br	2870 <__swsetup_r+0x68>

0000295c <quorem>:
    295c:	defff704 	addi	sp,sp,-36
    2960:	dc800215 	stw	r18,8(sp)
    2964:	20800417 	ldw	r2,16(r4)
    2968:	2c800417 	ldw	r18,16(r5)
    296c:	dfc00815 	stw	ra,32(sp)
    2970:	ddc00715 	stw	r23,28(sp)
    2974:	dd800615 	stw	r22,24(sp)
    2978:	dd400515 	stw	r21,20(sp)
    297c:	dd000415 	stw	r20,16(sp)
    2980:	dcc00315 	stw	r19,12(sp)
    2984:	dc400115 	stw	r17,4(sp)
    2988:	dc000015 	stw	r16,0(sp)
    298c:	14807116 	blt	r2,r18,2b54 <quorem+0x1f8>
    2990:	94bfffc4 	addi	r18,r18,-1
    2994:	94ad883a 	add	r22,r18,r18
    2998:	b5ad883a 	add	r22,r22,r22
    299c:	2c400504 	addi	r17,r5,20
    29a0:	8da9883a 	add	r20,r17,r22
    29a4:	25400504 	addi	r21,r4,20
    29a8:	282f883a 	mov	r23,r5
    29ac:	adad883a 	add	r22,r21,r22
    29b0:	a1400017 	ldw	r5,0(r20)
    29b4:	2021883a 	mov	r16,r4
    29b8:	b1000017 	ldw	r4,0(r22)
    29bc:	29400044 	addi	r5,r5,1
    29c0:	000a55c0 	call	a55c <__udivsi3>
    29c4:	1027883a 	mov	r19,r2
    29c8:	10002c26 	beq	r2,zero,2a7c <quorem+0x120>
    29cc:	a813883a 	mov	r9,r21
    29d0:	880b883a 	mov	r5,r17
    29d4:	0009883a 	mov	r4,zero
    29d8:	000d883a 	mov	r6,zero
    29dc:	2a000017 	ldw	r8,0(r5)
    29e0:	49c00017 	ldw	r7,0(r9)
    29e4:	29400104 	addi	r5,r5,4
    29e8:	40bfffcc 	andi	r2,r8,65535
    29ec:	14c5383a 	mul	r2,r2,r19
    29f0:	4010d43a 	srli	r8,r8,16
    29f4:	38ffffcc 	andi	r3,r7,65535
    29f8:	1105883a 	add	r2,r2,r4
    29fc:	1008d43a 	srli	r4,r2,16
    2a00:	44d1383a 	mul	r8,r8,r19
    2a04:	198d883a 	add	r6,r3,r6
    2a08:	10ffffcc 	andi	r3,r2,65535
    2a0c:	30c7c83a 	sub	r3,r6,r3
    2a10:	380ed43a 	srli	r7,r7,16
    2a14:	4105883a 	add	r2,r8,r4
    2a18:	180dd43a 	srai	r6,r3,16
    2a1c:	113fffcc 	andi	r4,r2,65535
    2a20:	390fc83a 	sub	r7,r7,r4
    2a24:	398d883a 	add	r6,r7,r6
    2a28:	300e943a 	slli	r7,r6,16
    2a2c:	18ffffcc 	andi	r3,r3,65535
    2a30:	1008d43a 	srli	r4,r2,16
    2a34:	38ceb03a 	or	r7,r7,r3
    2a38:	49c00015 	stw	r7,0(r9)
    2a3c:	300dd43a 	srai	r6,r6,16
    2a40:	4a400104 	addi	r9,r9,4
    2a44:	a17fe52e 	bgeu	r20,r5,29dc <quorem+0x80>
    2a48:	b0800017 	ldw	r2,0(r22)
    2a4c:	10000b1e 	bne	r2,zero,2a7c <quorem+0x120>
    2a50:	b0bfff04 	addi	r2,r22,-4
    2a54:	a880082e 	bgeu	r21,r2,2a78 <quorem+0x11c>
    2a58:	b0ffff17 	ldw	r3,-4(r22)
    2a5c:	18000326 	beq	r3,zero,2a6c <quorem+0x110>
    2a60:	00000506 	br	2a78 <quorem+0x11c>
    2a64:	10c00017 	ldw	r3,0(r2)
    2a68:	1800031e 	bne	r3,zero,2a78 <quorem+0x11c>
    2a6c:	10bfff04 	addi	r2,r2,-4
    2a70:	94bfffc4 	addi	r18,r18,-1
    2a74:	a8bffb36 	bltu	r21,r2,2a64 <quorem+0x108>
    2a78:	84800415 	stw	r18,16(r16)
    2a7c:	b80b883a 	mov	r5,r23
    2a80:	8009883a 	mov	r4,r16
    2a84:	0006ac00 	call	6ac0 <__mcmp>
    2a88:	10002616 	blt	r2,zero,2b24 <quorem+0x1c8>
    2a8c:	9cc00044 	addi	r19,r19,1
    2a90:	a805883a 	mov	r2,r21
    2a94:	000b883a 	mov	r5,zero
    2a98:	11000017 	ldw	r4,0(r2)
    2a9c:	89800017 	ldw	r6,0(r17)
    2aa0:	10800104 	addi	r2,r2,4
    2aa4:	20ffffcc 	andi	r3,r4,65535
    2aa8:	194b883a 	add	r5,r3,r5
    2aac:	30ffffcc 	andi	r3,r6,65535
    2ab0:	28c7c83a 	sub	r3,r5,r3
    2ab4:	300cd43a 	srli	r6,r6,16
    2ab8:	2008d43a 	srli	r4,r4,16
    2abc:	180bd43a 	srai	r5,r3,16
    2ac0:	18ffffcc 	andi	r3,r3,65535
    2ac4:	2189c83a 	sub	r4,r4,r6
    2ac8:	2149883a 	add	r4,r4,r5
    2acc:	200c943a 	slli	r6,r4,16
    2ad0:	8c400104 	addi	r17,r17,4
    2ad4:	200bd43a 	srai	r5,r4,16
    2ad8:	30c6b03a 	or	r3,r6,r3
    2adc:	10ffff15 	stw	r3,-4(r2)
    2ae0:	a47fed2e 	bgeu	r20,r17,2a98 <quorem+0x13c>
    2ae4:	9485883a 	add	r2,r18,r18
    2ae8:	1085883a 	add	r2,r2,r2
    2aec:	a887883a 	add	r3,r21,r2
    2af0:	18800017 	ldw	r2,0(r3)
    2af4:	10000b1e 	bne	r2,zero,2b24 <quorem+0x1c8>
    2af8:	18bfff04 	addi	r2,r3,-4
    2afc:	a880082e 	bgeu	r21,r2,2b20 <quorem+0x1c4>
    2b00:	18ffff17 	ldw	r3,-4(r3)
    2b04:	18000326 	beq	r3,zero,2b14 <quorem+0x1b8>
    2b08:	00000506 	br	2b20 <quorem+0x1c4>
    2b0c:	10c00017 	ldw	r3,0(r2)
    2b10:	1800031e 	bne	r3,zero,2b20 <quorem+0x1c4>
    2b14:	10bfff04 	addi	r2,r2,-4
    2b18:	94bfffc4 	addi	r18,r18,-1
    2b1c:	a8bffb36 	bltu	r21,r2,2b0c <quorem+0x1b0>
    2b20:	84800415 	stw	r18,16(r16)
    2b24:	9805883a 	mov	r2,r19
    2b28:	dfc00817 	ldw	ra,32(sp)
    2b2c:	ddc00717 	ldw	r23,28(sp)
    2b30:	dd800617 	ldw	r22,24(sp)
    2b34:	dd400517 	ldw	r21,20(sp)
    2b38:	dd000417 	ldw	r20,16(sp)
    2b3c:	dcc00317 	ldw	r19,12(sp)
    2b40:	dc800217 	ldw	r18,8(sp)
    2b44:	dc400117 	ldw	r17,4(sp)
    2b48:	dc000017 	ldw	r16,0(sp)
    2b4c:	dec00904 	addi	sp,sp,36
    2b50:	f800283a 	ret
    2b54:	0005883a 	mov	r2,zero
    2b58:	003ff306 	br	2b28 <quorem+0x1cc>

00002b5c <_dtoa_r>:
    2b5c:	20801017 	ldw	r2,64(r4)
    2b60:	deffde04 	addi	sp,sp,-136
    2b64:	df002015 	stw	fp,128(sp)
    2b68:	dcc01b15 	stw	r19,108(sp)
    2b6c:	dc801a15 	stw	r18,104(sp)
    2b70:	dc401915 	stw	r17,100(sp)
    2b74:	dc001815 	stw	r16,96(sp)
    2b78:	dfc02115 	stw	ra,132(sp)
    2b7c:	ddc01f15 	stw	r23,124(sp)
    2b80:	dd801e15 	stw	r22,120(sp)
    2b84:	dd401d15 	stw	r21,116(sp)
    2b88:	dd001c15 	stw	r20,112(sp)
    2b8c:	d9c00315 	stw	r7,12(sp)
    2b90:	2039883a 	mov	fp,r4
    2b94:	3023883a 	mov	r17,r6
    2b98:	2825883a 	mov	r18,r5
    2b9c:	dc002417 	ldw	r16,144(sp)
    2ba0:	3027883a 	mov	r19,r6
    2ba4:	10000826 	beq	r2,zero,2bc8 <_dtoa_r+0x6c>
    2ba8:	21801117 	ldw	r6,68(r4)
    2bac:	00c00044 	movi	r3,1
    2bb0:	100b883a 	mov	r5,r2
    2bb4:	1986983a 	sll	r3,r3,r6
    2bb8:	11800115 	stw	r6,4(r2)
    2bbc:	10c00215 	stw	r3,8(r2)
    2bc0:	00062a00 	call	62a0 <_Bfree>
    2bc4:	e0001015 	stw	zero,64(fp)
    2bc8:	88002e16 	blt	r17,zero,2c84 <_dtoa_r+0x128>
    2bcc:	80000015 	stw	zero,0(r16)
    2bd0:	889ffc2c 	andhi	r2,r17,32752
    2bd4:	00dffc34 	movhi	r3,32752
    2bd8:	10c01c26 	beq	r2,r3,2c4c <_dtoa_r+0xf0>
    2bdc:	000d883a 	mov	r6,zero
    2be0:	000f883a 	mov	r7,zero
    2be4:	9009883a 	mov	r4,r18
    2be8:	980b883a 	mov	r5,r19
    2bec:	000b7ac0 	call	b7ac <__eqdf2>
    2bf0:	10002b1e 	bne	r2,zero,2ca0 <_dtoa_r+0x144>
    2bf4:	d9c02317 	ldw	r7,140(sp)
    2bf8:	00800044 	movi	r2,1
    2bfc:	38800015 	stw	r2,0(r7)
    2c00:	d8802517 	ldw	r2,148(sp)
    2c04:	10019e26 	beq	r2,zero,3280 <_dtoa_r+0x724>
    2c08:	d8c02517 	ldw	r3,148(sp)
    2c0c:	00800074 	movhi	r2,1
    2c10:	10bd7844 	addi	r2,r2,-2591
    2c14:	18800015 	stw	r2,0(r3)
    2c18:	10bfffc4 	addi	r2,r2,-1
    2c1c:	dfc02117 	ldw	ra,132(sp)
    2c20:	df002017 	ldw	fp,128(sp)
    2c24:	ddc01f17 	ldw	r23,124(sp)
    2c28:	dd801e17 	ldw	r22,120(sp)
    2c2c:	dd401d17 	ldw	r21,116(sp)
    2c30:	dd001c17 	ldw	r20,112(sp)
    2c34:	dcc01b17 	ldw	r19,108(sp)
    2c38:	dc801a17 	ldw	r18,104(sp)
    2c3c:	dc401917 	ldw	r17,100(sp)
    2c40:	dc001817 	ldw	r16,96(sp)
    2c44:	dec02204 	addi	sp,sp,136
    2c48:	f800283a 	ret
    2c4c:	d8c02317 	ldw	r3,140(sp)
    2c50:	0089c3c4 	movi	r2,9999
    2c54:	18800015 	stw	r2,0(r3)
    2c58:	90017726 	beq	r18,zero,3238 <_dtoa_r+0x6dc>
    2c5c:	00800074 	movhi	r2,1
    2c60:	10bd8404 	addi	r2,r2,-2544
    2c64:	d9002517 	ldw	r4,148(sp)
    2c68:	203fec26 	beq	r4,zero,2c1c <_dtoa_r+0xc0>
    2c6c:	10c000c7 	ldb	r3,3(r2)
    2c70:	1801781e 	bne	r3,zero,3254 <_dtoa_r+0x6f8>
    2c74:	10c000c4 	addi	r3,r2,3
    2c78:	d9802517 	ldw	r6,148(sp)
    2c7c:	30c00015 	stw	r3,0(r6)
    2c80:	003fe606 	br	2c1c <_dtoa_r+0xc0>
    2c84:	04e00034 	movhi	r19,32768
    2c88:	9cffffc4 	addi	r19,r19,-1
    2c8c:	00800044 	movi	r2,1
    2c90:	8ce6703a 	and	r19,r17,r19
    2c94:	80800015 	stw	r2,0(r16)
    2c98:	9823883a 	mov	r17,r19
    2c9c:	003fcc06 	br	2bd0 <_dtoa_r+0x74>
    2ca0:	d8800204 	addi	r2,sp,8
    2ca4:	d8800015 	stw	r2,0(sp)
    2ca8:	d9c00104 	addi	r7,sp,4
    2cac:	900b883a 	mov	r5,r18
    2cb0:	980d883a 	mov	r6,r19
    2cb4:	e009883a 	mov	r4,fp
    2cb8:	8820d53a 	srli	r16,r17,20
    2cbc:	0006e8c0 	call	6e8c <__d2b>
    2cc0:	d8800915 	stw	r2,36(sp)
    2cc4:	8001651e 	bne	r16,zero,325c <_dtoa_r+0x700>
    2cc8:	dd800217 	ldw	r22,8(sp)
    2ccc:	dc000117 	ldw	r16,4(sp)
    2cd0:	00800804 	movi	r2,32
    2cd4:	b421883a 	add	r16,r22,r16
    2cd8:	80c10c84 	addi	r3,r16,1074
    2cdc:	10c2d10e 	bge	r2,r3,3824 <_dtoa_r+0xcc8>
    2ce0:	00801004 	movi	r2,64
    2ce4:	81010484 	addi	r4,r16,1042
    2ce8:	10c7c83a 	sub	r3,r2,r3
    2cec:	9108d83a 	srl	r4,r18,r4
    2cf0:	88e2983a 	sll	r17,r17,r3
    2cf4:	2448b03a 	or	r4,r4,r17
    2cf8:	000cb740 	call	cb74 <__floatunsidf>
    2cfc:	017f8434 	movhi	r5,65040
    2d00:	01800044 	movi	r6,1
    2d04:	1009883a 	mov	r4,r2
    2d08:	194b883a 	add	r5,r3,r5
    2d0c:	843fffc4 	addi	r16,r16,-1
    2d10:	d9801115 	stw	r6,68(sp)
    2d14:	000d883a 	mov	r6,zero
    2d18:	01cffe34 	movhi	r7,16376
    2d1c:	000c11c0 	call	c11c <__subdf3>
    2d20:	0198dbf4 	movhi	r6,25455
    2d24:	01cff4f4 	movhi	r7,16339
    2d28:	3190d844 	addi	r6,r6,17249
    2d2c:	39e1e9c4 	addi	r7,r7,-30809
    2d30:	1009883a 	mov	r4,r2
    2d34:	180b883a 	mov	r5,r3
    2d38:	000ba040 	call	ba04 <__muldf3>
    2d3c:	01a2d874 	movhi	r6,35681
    2d40:	01cff1f4 	movhi	r7,16327
    2d44:	31b22cc4 	addi	r6,r6,-14157
    2d48:	39e28a04 	addi	r7,r7,-30168
    2d4c:	180b883a 	mov	r5,r3
    2d50:	1009883a 	mov	r4,r2
    2d54:	000a6180 	call	a618 <__adddf3>
    2d58:	8009883a 	mov	r4,r16
    2d5c:	1029883a 	mov	r20,r2
    2d60:	1823883a 	mov	r17,r3
    2d64:	000ca980 	call	ca98 <__floatsidf>
    2d68:	019427f4 	movhi	r6,20639
    2d6c:	01cff4f4 	movhi	r7,16339
    2d70:	319e7ec4 	addi	r6,r6,31227
    2d74:	39d104c4 	addi	r7,r7,17427
    2d78:	1009883a 	mov	r4,r2
    2d7c:	180b883a 	mov	r5,r3
    2d80:	000ba040 	call	ba04 <__muldf3>
    2d84:	100d883a 	mov	r6,r2
    2d88:	180f883a 	mov	r7,r3
    2d8c:	a009883a 	mov	r4,r20
    2d90:	880b883a 	mov	r5,r17
    2d94:	000a6180 	call	a618 <__adddf3>
    2d98:	1009883a 	mov	r4,r2
    2d9c:	180b883a 	mov	r5,r3
    2da0:	1029883a 	mov	r20,r2
    2da4:	1823883a 	mov	r17,r3
    2da8:	000ca180 	call	ca18 <__fixdfsi>
    2dac:	000d883a 	mov	r6,zero
    2db0:	000f883a 	mov	r7,zero
    2db4:	a009883a 	mov	r4,r20
    2db8:	880b883a 	mov	r5,r17
    2dbc:	d8800515 	stw	r2,20(sp)
    2dc0:	000b9100 	call	b910 <__ledf2>
    2dc4:	10028716 	blt	r2,zero,37e4 <_dtoa_r+0xc88>
    2dc8:	d8c00517 	ldw	r3,20(sp)
    2dcc:	00800584 	movi	r2,22
    2dd0:	10c27536 	bltu	r2,r3,37a8 <_dtoa_r+0xc4c>
    2dd4:	180490fa 	slli	r2,r3,3
    2dd8:	00c00074 	movhi	r3,1
    2ddc:	18fda004 	addi	r3,r3,-2432
    2de0:	1885883a 	add	r2,r3,r2
    2de4:	11000017 	ldw	r4,0(r2)
    2de8:	11400117 	ldw	r5,4(r2)
    2dec:	900d883a 	mov	r6,r18
    2df0:	980f883a 	mov	r7,r19
    2df4:	000b8340 	call	b834 <__gedf2>
    2df8:	00828d0e 	bge	zero,r2,3830 <_dtoa_r+0xcd4>
    2dfc:	d9000517 	ldw	r4,20(sp)
    2e00:	d8000e15 	stw	zero,56(sp)
    2e04:	213fffc4 	addi	r4,r4,-1
    2e08:	d9000515 	stw	r4,20(sp)
    2e0c:	b42dc83a 	sub	r22,r22,r16
    2e10:	b5bfffc4 	addi	r22,r22,-1
    2e14:	b0026f16 	blt	r22,zero,37d4 <_dtoa_r+0xc78>
    2e18:	d8000815 	stw	zero,32(sp)
    2e1c:	d9c00517 	ldw	r7,20(sp)
    2e20:	38026416 	blt	r7,zero,37b4 <_dtoa_r+0xc58>
    2e24:	b1ed883a 	add	r22,r22,r7
    2e28:	d9c00d15 	stw	r7,52(sp)
    2e2c:	d8000a15 	stw	zero,40(sp)
    2e30:	d9800317 	ldw	r6,12(sp)
    2e34:	00800244 	movi	r2,9
    2e38:	11811436 	bltu	r2,r6,328c <_dtoa_r+0x730>
    2e3c:	00800144 	movi	r2,5
    2e40:	1184e10e 	bge	r2,r6,41c8 <_dtoa_r+0x166c>
    2e44:	31bfff04 	addi	r6,r6,-4
    2e48:	d9800315 	stw	r6,12(sp)
    2e4c:	0023883a 	mov	r17,zero
    2e50:	d9800317 	ldw	r6,12(sp)
    2e54:	008000c4 	movi	r2,3
    2e58:	30836726 	beq	r6,r2,3bf8 <_dtoa_r+0x109c>
    2e5c:	1183410e 	bge	r2,r6,3b64 <_dtoa_r+0x1008>
    2e60:	d9c00317 	ldw	r7,12(sp)
    2e64:	00800104 	movi	r2,4
    2e68:	38827c26 	beq	r7,r2,385c <_dtoa_r+0xd00>
    2e6c:	00800144 	movi	r2,5
    2e70:	3884c41e 	bne	r7,r2,4184 <_dtoa_r+0x1628>
    2e74:	00800044 	movi	r2,1
    2e78:	d8800b15 	stw	r2,44(sp)
    2e7c:	d8c00517 	ldw	r3,20(sp)
    2e80:	d9002217 	ldw	r4,136(sp)
    2e84:	1907883a 	add	r3,r3,r4
    2e88:	19800044 	addi	r6,r3,1
    2e8c:	d8c00c15 	stw	r3,48(sp)
    2e90:	d9800615 	stw	r6,24(sp)
    2e94:	0183a40e 	bge	zero,r6,3d28 <_dtoa_r+0x11cc>
    2e98:	d9800617 	ldw	r6,24(sp)
    2e9c:	3021883a 	mov	r16,r6
    2ea0:	e0001115 	stw	zero,68(fp)
    2ea4:	008005c4 	movi	r2,23
    2ea8:	1184c92e 	bgeu	r2,r6,41d0 <_dtoa_r+0x1674>
    2eac:	00c00044 	movi	r3,1
    2eb0:	00800104 	movi	r2,4
    2eb4:	1085883a 	add	r2,r2,r2
    2eb8:	11000504 	addi	r4,r2,20
    2ebc:	180b883a 	mov	r5,r3
    2ec0:	18c00044 	addi	r3,r3,1
    2ec4:	313ffb2e 	bgeu	r6,r4,2eb4 <_dtoa_r+0x358>
    2ec8:	e1401115 	stw	r5,68(fp)
    2ecc:	e009883a 	mov	r4,fp
    2ed0:	00061f80 	call	61f8 <_Balloc>
    2ed4:	d8800715 	stw	r2,28(sp)
    2ed8:	e0801015 	stw	r2,64(fp)
    2edc:	00800384 	movi	r2,14
    2ee0:	1400f736 	bltu	r2,r16,32c0 <_dtoa_r+0x764>
    2ee4:	8800f626 	beq	r17,zero,32c0 <_dtoa_r+0x764>
    2ee8:	d9c00517 	ldw	r7,20(sp)
    2eec:	01c39a0e 	bge	zero,r7,3d58 <_dtoa_r+0x11fc>
    2ef0:	388003cc 	andi	r2,r7,15
    2ef4:	100490fa 	slli	r2,r2,3
    2ef8:	382bd13a 	srai	r21,r7,4
    2efc:	00c00074 	movhi	r3,1
    2f00:	18fda004 	addi	r3,r3,-2432
    2f04:	1885883a 	add	r2,r3,r2
    2f08:	a8c0040c 	andi	r3,r21,16
    2f0c:	12400017 	ldw	r9,0(r2)
    2f10:	12000117 	ldw	r8,4(r2)
    2f14:	18037926 	beq	r3,zero,3cfc <_dtoa_r+0x11a0>
    2f18:	00800074 	movhi	r2,1
    2f1c:	10bd9604 	addi	r2,r2,-2472
    2f20:	11800817 	ldw	r6,32(r2)
    2f24:	11c00917 	ldw	r7,36(r2)
    2f28:	9009883a 	mov	r4,r18
    2f2c:	980b883a 	mov	r5,r19
    2f30:	da001715 	stw	r8,92(sp)
    2f34:	da401615 	stw	r9,88(sp)
    2f38:	000aec40 	call	aec4 <__divdf3>
    2f3c:	da001717 	ldw	r8,92(sp)
    2f40:	da401617 	ldw	r9,88(sp)
    2f44:	ad4003cc 	andi	r21,r21,15
    2f48:	040000c4 	movi	r16,3
    2f4c:	1023883a 	mov	r17,r2
    2f50:	1829883a 	mov	r20,r3
    2f54:	a8001126 	beq	r21,zero,2f9c <_dtoa_r+0x440>
    2f58:	05c00074 	movhi	r23,1
    2f5c:	bdfd9604 	addi	r23,r23,-2472
    2f60:	4805883a 	mov	r2,r9
    2f64:	4007883a 	mov	r3,r8
    2f68:	a980004c 	andi	r6,r21,1
    2f6c:	1009883a 	mov	r4,r2
    2f70:	a82bd07a 	srai	r21,r21,1
    2f74:	180b883a 	mov	r5,r3
    2f78:	30000426 	beq	r6,zero,2f8c <_dtoa_r+0x430>
    2f7c:	b9800017 	ldw	r6,0(r23)
    2f80:	b9c00117 	ldw	r7,4(r23)
    2f84:	84000044 	addi	r16,r16,1
    2f88:	000ba040 	call	ba04 <__muldf3>
    2f8c:	bdc00204 	addi	r23,r23,8
    2f90:	a83ff51e 	bne	r21,zero,2f68 <_dtoa_r+0x40c>
    2f94:	1013883a 	mov	r9,r2
    2f98:	1811883a 	mov	r8,r3
    2f9c:	480d883a 	mov	r6,r9
    2fa0:	400f883a 	mov	r7,r8
    2fa4:	8809883a 	mov	r4,r17
    2fa8:	a00b883a 	mov	r5,r20
    2fac:	000aec40 	call	aec4 <__divdf3>
    2fb0:	d8800f15 	stw	r2,60(sp)
    2fb4:	d8c01015 	stw	r3,64(sp)
    2fb8:	d8c00e17 	ldw	r3,56(sp)
    2fbc:	18000626 	beq	r3,zero,2fd8 <_dtoa_r+0x47c>
    2fc0:	d9000f17 	ldw	r4,60(sp)
    2fc4:	d9401017 	ldw	r5,64(sp)
    2fc8:	000d883a 	mov	r6,zero
    2fcc:	01cffc34 	movhi	r7,16368
    2fd0:	000b9100 	call	b910 <__ledf2>
    2fd4:	10040b16 	blt	r2,zero,4004 <_dtoa_r+0x14a8>
    2fd8:	8009883a 	mov	r4,r16
    2fdc:	000ca980 	call	ca98 <__floatsidf>
    2fe0:	d9800f17 	ldw	r6,60(sp)
    2fe4:	d9c01017 	ldw	r7,64(sp)
    2fe8:	1009883a 	mov	r4,r2
    2fec:	180b883a 	mov	r5,r3
    2ff0:	000ba040 	call	ba04 <__muldf3>
    2ff4:	000d883a 	mov	r6,zero
    2ff8:	01d00734 	movhi	r7,16412
    2ffc:	1009883a 	mov	r4,r2
    3000:	180b883a 	mov	r5,r3
    3004:	000a6180 	call	a618 <__adddf3>
    3008:	1021883a 	mov	r16,r2
    300c:	d8800617 	ldw	r2,24(sp)
    3010:	047f3034 	movhi	r17,64704
    3014:	1c63883a 	add	r17,r3,r17
    3018:	10031826 	beq	r2,zero,3c7c <_dtoa_r+0x1120>
    301c:	d8c00517 	ldw	r3,20(sp)
    3020:	db000617 	ldw	r12,24(sp)
    3024:	d8c01315 	stw	r3,76(sp)
    3028:	d9000b17 	ldw	r4,44(sp)
    302c:	20038f26 	beq	r4,zero,3e6c <_dtoa_r+0x1310>
    3030:	60bfffc4 	addi	r2,r12,-1
    3034:	100490fa 	slli	r2,r2,3
    3038:	00c00074 	movhi	r3,1
    303c:	18fda004 	addi	r3,r3,-2432
    3040:	1885883a 	add	r2,r3,r2
    3044:	11800017 	ldw	r6,0(r2)
    3048:	11c00117 	ldw	r7,4(r2)
    304c:	d8800717 	ldw	r2,28(sp)
    3050:	0009883a 	mov	r4,zero
    3054:	014ff834 	movhi	r5,16352
    3058:	db001615 	stw	r12,88(sp)
    305c:	15c00044 	addi	r23,r2,1
    3060:	000aec40 	call	aec4 <__divdf3>
    3064:	800d883a 	mov	r6,r16
    3068:	880f883a 	mov	r7,r17
    306c:	1009883a 	mov	r4,r2
    3070:	180b883a 	mov	r5,r3
    3074:	000c11c0 	call	c11c <__subdf3>
    3078:	d9401017 	ldw	r5,64(sp)
    307c:	d9000f17 	ldw	r4,60(sp)
    3080:	102b883a 	mov	r21,r2
    3084:	d8c01215 	stw	r3,72(sp)
    3088:	000ca180 	call	ca18 <__fixdfsi>
    308c:	1009883a 	mov	r4,r2
    3090:	1029883a 	mov	r20,r2
    3094:	000ca980 	call	ca98 <__floatsidf>
    3098:	d9000f17 	ldw	r4,60(sp)
    309c:	d9401017 	ldw	r5,64(sp)
    30a0:	100d883a 	mov	r6,r2
    30a4:	180f883a 	mov	r7,r3
    30a8:	000c11c0 	call	c11c <__subdf3>
    30ac:	1823883a 	mov	r17,r3
    30b0:	d8c00717 	ldw	r3,28(sp)
    30b4:	d9401217 	ldw	r5,72(sp)
    30b8:	a2000c04 	addi	r8,r20,48
    30bc:	1021883a 	mov	r16,r2
    30c0:	1a000005 	stb	r8,0(r3)
    30c4:	800d883a 	mov	r6,r16
    30c8:	880f883a 	mov	r7,r17
    30cc:	a809883a 	mov	r4,r21
    30d0:	4029883a 	mov	r20,r8
    30d4:	000b8340 	call	b834 <__gedf2>
    30d8:	00841d16 	blt	zero,r2,4150 <_dtoa_r+0x15f4>
    30dc:	800d883a 	mov	r6,r16
    30e0:	880f883a 	mov	r7,r17
    30e4:	0009883a 	mov	r4,zero
    30e8:	014ffc34 	movhi	r5,16368
    30ec:	000c11c0 	call	c11c <__subdf3>
    30f0:	d9401217 	ldw	r5,72(sp)
    30f4:	100d883a 	mov	r6,r2
    30f8:	180f883a 	mov	r7,r3
    30fc:	a809883a 	mov	r4,r21
    3100:	000b8340 	call	b834 <__gedf2>
    3104:	db001617 	ldw	r12,88(sp)
    3108:	00840e16 	blt	zero,r2,4144 <_dtoa_r+0x15e8>
    310c:	00800044 	movi	r2,1
    3110:	13006b0e 	bge	r2,r12,32c0 <_dtoa_r+0x764>
    3114:	d9000717 	ldw	r4,28(sp)
    3118:	dd800f15 	stw	r22,60(sp)
    311c:	dcc01015 	stw	r19,64(sp)
    3120:	2319883a 	add	r12,r4,r12
    3124:	dcc01217 	ldw	r19,72(sp)
    3128:	602d883a 	mov	r22,r12
    312c:	dc801215 	stw	r18,72(sp)
    3130:	b825883a 	mov	r18,r23
    3134:	00000906 	br	315c <_dtoa_r+0x600>
    3138:	000c11c0 	call	c11c <__subdf3>
    313c:	a80d883a 	mov	r6,r21
    3140:	980f883a 	mov	r7,r19
    3144:	1009883a 	mov	r4,r2
    3148:	180b883a 	mov	r5,r3
    314c:	000b9100 	call	b910 <__ledf2>
    3150:	1003e816 	blt	r2,zero,40f4 <_dtoa_r+0x1598>
    3154:	b825883a 	mov	r18,r23
    3158:	bd83e926 	beq	r23,r22,4100 <_dtoa_r+0x15a4>
    315c:	a809883a 	mov	r4,r21
    3160:	980b883a 	mov	r5,r19
    3164:	000d883a 	mov	r6,zero
    3168:	01d00934 	movhi	r7,16420
    316c:	000ba040 	call	ba04 <__muldf3>
    3170:	000d883a 	mov	r6,zero
    3174:	01d00934 	movhi	r7,16420
    3178:	8009883a 	mov	r4,r16
    317c:	880b883a 	mov	r5,r17
    3180:	102b883a 	mov	r21,r2
    3184:	1827883a 	mov	r19,r3
    3188:	000ba040 	call	ba04 <__muldf3>
    318c:	180b883a 	mov	r5,r3
    3190:	1009883a 	mov	r4,r2
    3194:	1821883a 	mov	r16,r3
    3198:	1023883a 	mov	r17,r2
    319c:	000ca180 	call	ca18 <__fixdfsi>
    31a0:	1009883a 	mov	r4,r2
    31a4:	1029883a 	mov	r20,r2
    31a8:	000ca980 	call	ca98 <__floatsidf>
    31ac:	8809883a 	mov	r4,r17
    31b0:	800b883a 	mov	r5,r16
    31b4:	100d883a 	mov	r6,r2
    31b8:	180f883a 	mov	r7,r3
    31bc:	000c11c0 	call	c11c <__subdf3>
    31c0:	a5000c04 	addi	r20,r20,48
    31c4:	a80d883a 	mov	r6,r21
    31c8:	980f883a 	mov	r7,r19
    31cc:	1009883a 	mov	r4,r2
    31d0:	180b883a 	mov	r5,r3
    31d4:	95000005 	stb	r20,0(r18)
    31d8:	1021883a 	mov	r16,r2
    31dc:	1823883a 	mov	r17,r3
    31e0:	000b9100 	call	b910 <__ledf2>
    31e4:	bdc00044 	addi	r23,r23,1
    31e8:	800d883a 	mov	r6,r16
    31ec:	880f883a 	mov	r7,r17
    31f0:	0009883a 	mov	r4,zero
    31f4:	014ffc34 	movhi	r5,16368
    31f8:	103fcf0e 	bge	r2,zero,3138 <_dtoa_r+0x5dc>
    31fc:	d8c01317 	ldw	r3,76(sp)
    3200:	d8c00515 	stw	r3,20(sp)
    3204:	d9400917 	ldw	r5,36(sp)
    3208:	e009883a 	mov	r4,fp
    320c:	00062a00 	call	62a0 <_Bfree>
    3210:	d9000517 	ldw	r4,20(sp)
    3214:	d9802317 	ldw	r6,140(sp)
    3218:	d9c02517 	ldw	r7,148(sp)
    321c:	b8000005 	stb	zero,0(r23)
    3220:	20800044 	addi	r2,r4,1
    3224:	30800015 	stw	r2,0(r6)
    3228:	3802aa26 	beq	r7,zero,3cd4 <_dtoa_r+0x1178>
    322c:	3dc00015 	stw	r23,0(r7)
    3230:	d8800717 	ldw	r2,28(sp)
    3234:	003e7906 	br	2c1c <_dtoa_r+0xc0>
    3238:	00800434 	movhi	r2,16
    323c:	10bfffc4 	addi	r2,r2,-1
    3240:	88a2703a 	and	r17,r17,r2
    3244:	883e851e 	bne	r17,zero,2c5c <_dtoa_r+0x100>
    3248:	00800074 	movhi	r2,1
    324c:	10bd8104 	addi	r2,r2,-2556
    3250:	003e8406 	br	2c64 <_dtoa_r+0x108>
    3254:	10c00204 	addi	r3,r2,8
    3258:	003e8706 	br	2c78 <_dtoa_r+0x11c>
    325c:	01400434 	movhi	r5,16
    3260:	297fffc4 	addi	r5,r5,-1
    3264:	994a703a 	and	r5,r19,r5
    3268:	9009883a 	mov	r4,r18
    326c:	843f0044 	addi	r16,r16,-1023
    3270:	294ffc34 	orhi	r5,r5,16368
    3274:	dd800217 	ldw	r22,8(sp)
    3278:	d8001115 	stw	zero,68(sp)
    327c:	003ea506 	br	2d14 <_dtoa_r+0x1b8>
    3280:	00800074 	movhi	r2,1
    3284:	10bd7804 	addi	r2,r2,-2592
    3288:	003e6406 	br	2c1c <_dtoa_r+0xc0>
    328c:	e0001115 	stw	zero,68(fp)
    3290:	000b883a 	mov	r5,zero
    3294:	e009883a 	mov	r4,fp
    3298:	00061f80 	call	61f8 <_Balloc>
    329c:	01bfffc4 	movi	r6,-1
    32a0:	01c00044 	movi	r7,1
    32a4:	d8800715 	stw	r2,28(sp)
    32a8:	d9800c15 	stw	r6,48(sp)
    32ac:	e0801015 	stw	r2,64(fp)
    32b0:	d8000315 	stw	zero,12(sp)
    32b4:	d9c00b15 	stw	r7,44(sp)
    32b8:	d9800615 	stw	r6,24(sp)
    32bc:	d8002215 	stw	zero,136(sp)
    32c0:	d8800117 	ldw	r2,4(sp)
    32c4:	10008916 	blt	r2,zero,34ec <_dtoa_r+0x990>
    32c8:	d9000517 	ldw	r4,20(sp)
    32cc:	00c00384 	movi	r3,14
    32d0:	19008616 	blt	r3,r4,34ec <_dtoa_r+0x990>
    32d4:	200490fa 	slli	r2,r4,3
    32d8:	00c00074 	movhi	r3,1
    32dc:	d9802217 	ldw	r6,136(sp)
    32e0:	18fda004 	addi	r3,r3,-2432
    32e4:	1885883a 	add	r2,r3,r2
    32e8:	14000017 	ldw	r16,0(r2)
    32ec:	14400117 	ldw	r17,4(r2)
    32f0:	30016316 	blt	r6,zero,3880 <_dtoa_r+0xd24>
    32f4:	800d883a 	mov	r6,r16
    32f8:	880f883a 	mov	r7,r17
    32fc:	9009883a 	mov	r4,r18
    3300:	980b883a 	mov	r5,r19
    3304:	000aec40 	call	aec4 <__divdf3>
    3308:	180b883a 	mov	r5,r3
    330c:	1009883a 	mov	r4,r2
    3310:	000ca180 	call	ca18 <__fixdfsi>
    3314:	1009883a 	mov	r4,r2
    3318:	102b883a 	mov	r21,r2
    331c:	000ca980 	call	ca98 <__floatsidf>
    3320:	800d883a 	mov	r6,r16
    3324:	880f883a 	mov	r7,r17
    3328:	1009883a 	mov	r4,r2
    332c:	180b883a 	mov	r5,r3
    3330:	000ba040 	call	ba04 <__muldf3>
    3334:	100d883a 	mov	r6,r2
    3338:	180f883a 	mov	r7,r3
    333c:	9009883a 	mov	r4,r18
    3340:	980b883a 	mov	r5,r19
    3344:	000c11c0 	call	c11c <__subdf3>
    3348:	d9c00717 	ldw	r7,28(sp)
    334c:	1009883a 	mov	r4,r2
    3350:	a8800c04 	addi	r2,r21,48
    3354:	38800005 	stb	r2,0(r7)
    3358:	3dc00044 	addi	r23,r7,1
    335c:	d9c00617 	ldw	r7,24(sp)
    3360:	01800044 	movi	r6,1
    3364:	180b883a 	mov	r5,r3
    3368:	2005883a 	mov	r2,r4
    336c:	39803826 	beq	r7,r6,3450 <_dtoa_r+0x8f4>
    3370:	000d883a 	mov	r6,zero
    3374:	01d00934 	movhi	r7,16420
    3378:	000ba040 	call	ba04 <__muldf3>
    337c:	000d883a 	mov	r6,zero
    3380:	000f883a 	mov	r7,zero
    3384:	1009883a 	mov	r4,r2
    3388:	180b883a 	mov	r5,r3
    338c:	1025883a 	mov	r18,r2
    3390:	1827883a 	mov	r19,r3
    3394:	000b7ac0 	call	b7ac <__eqdf2>
    3398:	103f9a26 	beq	r2,zero,3204 <_dtoa_r+0x6a8>
    339c:	d9c00617 	ldw	r7,24(sp)
    33a0:	d8c00717 	ldw	r3,28(sp)
    33a4:	b829883a 	mov	r20,r23
    33a8:	38bfffc4 	addi	r2,r7,-1
    33ac:	18ad883a 	add	r22,r3,r2
    33b0:	00000a06 	br	33dc <_dtoa_r+0x880>
    33b4:	000ba040 	call	ba04 <__muldf3>
    33b8:	000d883a 	mov	r6,zero
    33bc:	000f883a 	mov	r7,zero
    33c0:	1009883a 	mov	r4,r2
    33c4:	180b883a 	mov	r5,r3
    33c8:	1025883a 	mov	r18,r2
    33cc:	1827883a 	mov	r19,r3
    33d0:	b829883a 	mov	r20,r23
    33d4:	000b7ac0 	call	b7ac <__eqdf2>
    33d8:	103f8a26 	beq	r2,zero,3204 <_dtoa_r+0x6a8>
    33dc:	800d883a 	mov	r6,r16
    33e0:	880f883a 	mov	r7,r17
    33e4:	9009883a 	mov	r4,r18
    33e8:	980b883a 	mov	r5,r19
    33ec:	000aec40 	call	aec4 <__divdf3>
    33f0:	180b883a 	mov	r5,r3
    33f4:	1009883a 	mov	r4,r2
    33f8:	000ca180 	call	ca18 <__fixdfsi>
    33fc:	1009883a 	mov	r4,r2
    3400:	102b883a 	mov	r21,r2
    3404:	000ca980 	call	ca98 <__floatsidf>
    3408:	800d883a 	mov	r6,r16
    340c:	880f883a 	mov	r7,r17
    3410:	1009883a 	mov	r4,r2
    3414:	180b883a 	mov	r5,r3
    3418:	000ba040 	call	ba04 <__muldf3>
    341c:	100d883a 	mov	r6,r2
    3420:	180f883a 	mov	r7,r3
    3424:	9009883a 	mov	r4,r18
    3428:	980b883a 	mov	r5,r19
    342c:	000c11c0 	call	c11c <__subdf3>
    3430:	aa000c04 	addi	r8,r21,48
    3434:	a2000005 	stb	r8,0(r20)
    3438:	000d883a 	mov	r6,zero
    343c:	01d00934 	movhi	r7,16420
    3440:	1009883a 	mov	r4,r2
    3444:	180b883a 	mov	r5,r3
    3448:	a5c00044 	addi	r23,r20,1
    344c:	b53fd91e 	bne	r22,r20,33b4 <_dtoa_r+0x858>
    3450:	100d883a 	mov	r6,r2
    3454:	180f883a 	mov	r7,r3
    3458:	1009883a 	mov	r4,r2
    345c:	180b883a 	mov	r5,r3
    3460:	000a6180 	call	a618 <__adddf3>
    3464:	100d883a 	mov	r6,r2
    3468:	180f883a 	mov	r7,r3
    346c:	8009883a 	mov	r4,r16
    3470:	880b883a 	mov	r5,r17
    3474:	1027883a 	mov	r19,r2
    3478:	1825883a 	mov	r18,r3
    347c:	000b9100 	call	b910 <__ledf2>
    3480:	10000816 	blt	r2,zero,34a4 <_dtoa_r+0x948>
    3484:	980d883a 	mov	r6,r19
    3488:	900f883a 	mov	r7,r18
    348c:	8009883a 	mov	r4,r16
    3490:	880b883a 	mov	r5,r17
    3494:	000b7ac0 	call	b7ac <__eqdf2>
    3498:	103f5a1e 	bne	r2,zero,3204 <_dtoa_r+0x6a8>
    349c:	ad40004c 	andi	r21,r21,1
    34a0:	a83f5826 	beq	r21,zero,3204 <_dtoa_r+0x6a8>
    34a4:	bd3fffc3 	ldbu	r20,-1(r23)
    34a8:	b8bfffc4 	addi	r2,r23,-1
    34ac:	1007883a 	mov	r3,r2
    34b0:	01400e44 	movi	r5,57
    34b4:	d9800717 	ldw	r6,28(sp)
    34b8:	00000506 	br	34d0 <_dtoa_r+0x974>
    34bc:	18ffffc4 	addi	r3,r3,-1
    34c0:	11824726 	beq	r2,r6,3de0 <_dtoa_r+0x1284>
    34c4:	1d000003 	ldbu	r20,0(r3)
    34c8:	102f883a 	mov	r23,r2
    34cc:	10bfffc4 	addi	r2,r2,-1
    34d0:	a1003fcc 	andi	r4,r20,255
    34d4:	2100201c 	xori	r4,r4,128
    34d8:	213fe004 	addi	r4,r4,-128
    34dc:	217ff726 	beq	r4,r5,34bc <_dtoa_r+0x960>
    34e0:	a2000044 	addi	r8,r20,1
    34e4:	12000005 	stb	r8,0(r2)
    34e8:	003f4606 	br	3204 <_dtoa_r+0x6a8>
    34ec:	d9000b17 	ldw	r4,44(sp)
    34f0:	2000c826 	beq	r4,zero,3814 <_dtoa_r+0xcb8>
    34f4:	d9800317 	ldw	r6,12(sp)
    34f8:	00c00044 	movi	r3,1
    34fc:	1980f90e 	bge	r3,r6,38e4 <_dtoa_r+0xd88>
    3500:	d8800617 	ldw	r2,24(sp)
    3504:	d8c00a17 	ldw	r3,40(sp)
    3508:	157fffc4 	addi	r21,r2,-1
    350c:	1d41f316 	blt	r3,r21,3cdc <_dtoa_r+0x1180>
    3510:	1d6bc83a 	sub	r21,r3,r21
    3514:	d9c00617 	ldw	r7,24(sp)
    3518:	3802aa16 	blt	r7,zero,3fc4 <_dtoa_r+0x1468>
    351c:	dd000817 	ldw	r20,32(sp)
    3520:	d8800617 	ldw	r2,24(sp)
    3524:	d8c00817 	ldw	r3,32(sp)
    3528:	01400044 	movi	r5,1
    352c:	e009883a 	mov	r4,fp
    3530:	1887883a 	add	r3,r3,r2
    3534:	d8c00815 	stw	r3,32(sp)
    3538:	b0ad883a 	add	r22,r22,r2
    353c:	00066040 	call	6604 <__i2b>
    3540:	1023883a 	mov	r17,r2
    3544:	a0000826 	beq	r20,zero,3568 <_dtoa_r+0xa0c>
    3548:	0580070e 	bge	zero,r22,3568 <_dtoa_r+0xa0c>
    354c:	a005883a 	mov	r2,r20
    3550:	b500b916 	blt	r22,r20,3838 <_dtoa_r+0xcdc>
    3554:	d9000817 	ldw	r4,32(sp)
    3558:	a0a9c83a 	sub	r20,r20,r2
    355c:	b0adc83a 	sub	r22,r22,r2
    3560:	2089c83a 	sub	r4,r4,r2
    3564:	d9000815 	stw	r4,32(sp)
    3568:	d9800a17 	ldw	r6,40(sp)
    356c:	0181810e 	bge	zero,r6,3b74 <_dtoa_r+0x1018>
    3570:	d9c00b17 	ldw	r7,44(sp)
    3574:	3800b326 	beq	r7,zero,3844 <_dtoa_r+0xce8>
    3578:	a800b226 	beq	r21,zero,3844 <_dtoa_r+0xce8>
    357c:	880b883a 	mov	r5,r17
    3580:	a80d883a 	mov	r6,r21
    3584:	e009883a 	mov	r4,fp
    3588:	00068380 	call	6838 <__pow5mult>
    358c:	d9800917 	ldw	r6,36(sp)
    3590:	100b883a 	mov	r5,r2
    3594:	e009883a 	mov	r4,fp
    3598:	1023883a 	mov	r17,r2
    359c:	00066400 	call	6640 <__multiply>
    35a0:	1021883a 	mov	r16,r2
    35a4:	d8800a17 	ldw	r2,40(sp)
    35a8:	d9400917 	ldw	r5,36(sp)
    35ac:	e009883a 	mov	r4,fp
    35b0:	1545c83a 	sub	r2,r2,r21
    35b4:	d8800a15 	stw	r2,40(sp)
    35b8:	00062a00 	call	62a0 <_Bfree>
    35bc:	d8c00a17 	ldw	r3,40(sp)
    35c0:	18009f1e 	bne	r3,zero,3840 <_dtoa_r+0xce4>
    35c4:	05c00044 	movi	r23,1
    35c8:	e009883a 	mov	r4,fp
    35cc:	b80b883a 	mov	r5,r23
    35d0:	00066040 	call	6604 <__i2b>
    35d4:	d9000d17 	ldw	r4,52(sp)
    35d8:	102b883a 	mov	r21,r2
    35dc:	2000ce26 	beq	r4,zero,3918 <_dtoa_r+0xdbc>
    35e0:	200d883a 	mov	r6,r4
    35e4:	100b883a 	mov	r5,r2
    35e8:	e009883a 	mov	r4,fp
    35ec:	00068380 	call	6838 <__pow5mult>
    35f0:	d9800317 	ldw	r6,12(sp)
    35f4:	102b883a 	mov	r21,r2
    35f8:	b981810e 	bge	r23,r6,3c00 <_dtoa_r+0x10a4>
    35fc:	0027883a 	mov	r19,zero
    3600:	a8800417 	ldw	r2,16(r21)
    3604:	05c00804 	movi	r23,32
    3608:	10800104 	addi	r2,r2,4
    360c:	1085883a 	add	r2,r2,r2
    3610:	1085883a 	add	r2,r2,r2
    3614:	a885883a 	add	r2,r21,r2
    3618:	11000017 	ldw	r4,0(r2)
    361c:	00064ec0 	call	64ec <__hi0bits>
    3620:	b885c83a 	sub	r2,r23,r2
    3624:	1585883a 	add	r2,r2,r22
    3628:	108007cc 	andi	r2,r2,31
    362c:	1000b326 	beq	r2,zero,38fc <_dtoa_r+0xda0>
    3630:	00c00804 	movi	r3,32
    3634:	1887c83a 	sub	r3,r3,r2
    3638:	01000104 	movi	r4,4
    363c:	20c2cd0e 	bge	r4,r3,4174 <_dtoa_r+0x1618>
    3640:	00c00704 	movi	r3,28
    3644:	1885c83a 	sub	r2,r3,r2
    3648:	d8c00817 	ldw	r3,32(sp)
    364c:	a0a9883a 	add	r20,r20,r2
    3650:	b0ad883a 	add	r22,r22,r2
    3654:	1887883a 	add	r3,r3,r2
    3658:	d8c00815 	stw	r3,32(sp)
    365c:	d9800817 	ldw	r6,32(sp)
    3660:	0180040e 	bge	zero,r6,3674 <_dtoa_r+0xb18>
    3664:	800b883a 	mov	r5,r16
    3668:	e009883a 	mov	r4,fp
    366c:	00069780 	call	6978 <__lshift>
    3670:	1021883a 	mov	r16,r2
    3674:	0580050e 	bge	zero,r22,368c <_dtoa_r+0xb30>
    3678:	a80b883a 	mov	r5,r21
    367c:	b00d883a 	mov	r6,r22
    3680:	e009883a 	mov	r4,fp
    3684:	00069780 	call	6978 <__lshift>
    3688:	102b883a 	mov	r21,r2
    368c:	d9c00e17 	ldw	r7,56(sp)
    3690:	3801211e 	bne	r7,zero,3b18 <_dtoa_r+0xfbc>
    3694:	d9800617 	ldw	r6,24(sp)
    3698:	0181380e 	bge	zero,r6,3b7c <_dtoa_r+0x1020>
    369c:	d8c00b17 	ldw	r3,44(sp)
    36a0:	1800ab1e 	bne	r3,zero,3950 <_dtoa_r+0xdf4>
    36a4:	dc800717 	ldw	r18,28(sp)
    36a8:	dcc00617 	ldw	r19,24(sp)
    36ac:	9029883a 	mov	r20,r18
    36b0:	00000206 	br	36bc <_dtoa_r+0xb60>
    36b4:	00062c80 	call	62c8 <__multadd>
    36b8:	1021883a 	mov	r16,r2
    36bc:	a80b883a 	mov	r5,r21
    36c0:	8009883a 	mov	r4,r16
    36c4:	000295c0 	call	295c <quorem>
    36c8:	10800c04 	addi	r2,r2,48
    36cc:	90800005 	stb	r2,0(r18)
    36d0:	94800044 	addi	r18,r18,1
    36d4:	9507c83a 	sub	r3,r18,r20
    36d8:	000f883a 	mov	r7,zero
    36dc:	01800284 	movi	r6,10
    36e0:	800b883a 	mov	r5,r16
    36e4:	e009883a 	mov	r4,fp
    36e8:	1cfff216 	blt	r3,r19,36b4 <_dtoa_r+0xb58>
    36ec:	1011883a 	mov	r8,r2
    36f0:	d8800617 	ldw	r2,24(sp)
    36f4:	0082370e 	bge	zero,r2,3fd4 <_dtoa_r+0x1478>
    36f8:	d9000717 	ldw	r4,28(sp)
    36fc:	0025883a 	mov	r18,zero
    3700:	20af883a 	add	r23,r4,r2
    3704:	01800044 	movi	r6,1
    3708:	800b883a 	mov	r5,r16
    370c:	e009883a 	mov	r4,fp
    3710:	da001715 	stw	r8,92(sp)
    3714:	00069780 	call	6978 <__lshift>
    3718:	a80b883a 	mov	r5,r21
    371c:	1009883a 	mov	r4,r2
    3720:	d8800915 	stw	r2,36(sp)
    3724:	0006ac00 	call	6ac0 <__mcmp>
    3728:	da001717 	ldw	r8,92(sp)
    372c:	0081800e 	bge	zero,r2,3d30 <_dtoa_r+0x11d4>
    3730:	b93fffc3 	ldbu	r4,-1(r23)
    3734:	b8bfffc4 	addi	r2,r23,-1
    3738:	1007883a 	mov	r3,r2
    373c:	01800e44 	movi	r6,57
    3740:	d9c00717 	ldw	r7,28(sp)
    3744:	00000506 	br	375c <_dtoa_r+0xc00>
    3748:	18ffffc4 	addi	r3,r3,-1
    374c:	11c12326 	beq	r2,r7,3bdc <_dtoa_r+0x1080>
    3750:	19000003 	ldbu	r4,0(r3)
    3754:	102f883a 	mov	r23,r2
    3758:	10bfffc4 	addi	r2,r2,-1
    375c:	21403fcc 	andi	r5,r4,255
    3760:	2940201c 	xori	r5,r5,128
    3764:	297fe004 	addi	r5,r5,-128
    3768:	29bff726 	beq	r5,r6,3748 <_dtoa_r+0xbec>
    376c:	21000044 	addi	r4,r4,1
    3770:	11000005 	stb	r4,0(r2)
    3774:	a80b883a 	mov	r5,r21
    3778:	e009883a 	mov	r4,fp
    377c:	00062a00 	call	62a0 <_Bfree>
    3780:	883ea026 	beq	r17,zero,3204 <_dtoa_r+0x6a8>
    3784:	90000426 	beq	r18,zero,3798 <_dtoa_r+0xc3c>
    3788:	94400326 	beq	r18,r17,3798 <_dtoa_r+0xc3c>
    378c:	900b883a 	mov	r5,r18
    3790:	e009883a 	mov	r4,fp
    3794:	00062a00 	call	62a0 <_Bfree>
    3798:	880b883a 	mov	r5,r17
    379c:	e009883a 	mov	r4,fp
    37a0:	00062a00 	call	62a0 <_Bfree>
    37a4:	003e9706 	br	3204 <_dtoa_r+0x6a8>
    37a8:	01800044 	movi	r6,1
    37ac:	d9800e15 	stw	r6,56(sp)
    37b0:	003d9606 	br	2e0c <_dtoa_r+0x2b0>
    37b4:	d8800817 	ldw	r2,32(sp)
    37b8:	d8c00517 	ldw	r3,20(sp)
    37bc:	d8000d15 	stw	zero,52(sp)
    37c0:	10c5c83a 	sub	r2,r2,r3
    37c4:	00c9c83a 	sub	r4,zero,r3
    37c8:	d8800815 	stw	r2,32(sp)
    37cc:	d9000a15 	stw	r4,40(sp)
    37d0:	003d9706 	br	2e30 <_dtoa_r+0x2d4>
    37d4:	05adc83a 	sub	r22,zero,r22
    37d8:	dd800815 	stw	r22,32(sp)
    37dc:	002d883a 	mov	r22,zero
    37e0:	003d8e06 	br	2e1c <_dtoa_r+0x2c0>
    37e4:	d9000517 	ldw	r4,20(sp)
    37e8:	000ca980 	call	ca98 <__floatsidf>
    37ec:	100d883a 	mov	r6,r2
    37f0:	180f883a 	mov	r7,r3
    37f4:	a009883a 	mov	r4,r20
    37f8:	880b883a 	mov	r5,r17
    37fc:	000b7ac0 	call	b7ac <__eqdf2>
    3800:	103d7126 	beq	r2,zero,2dc8 <_dtoa_r+0x26c>
    3804:	d9c00517 	ldw	r7,20(sp)
    3808:	39ffffc4 	addi	r7,r7,-1
    380c:	d9c00515 	stw	r7,20(sp)
    3810:	003d6d06 	br	2dc8 <_dtoa_r+0x26c>
    3814:	dd400a17 	ldw	r21,40(sp)
    3818:	dd000817 	ldw	r20,32(sp)
    381c:	0023883a 	mov	r17,zero
    3820:	003f4806 	br	3544 <_dtoa_r+0x9e8>
    3824:	10e3c83a 	sub	r17,r2,r3
    3828:	9448983a 	sll	r4,r18,r17
    382c:	003d3206 	br	2cf8 <_dtoa_r+0x19c>
    3830:	d8000e15 	stw	zero,56(sp)
    3834:	003d7506 	br	2e0c <_dtoa_r+0x2b0>
    3838:	b005883a 	mov	r2,r22
    383c:	003f4506 	br	3554 <_dtoa_r+0x9f8>
    3840:	dc000915 	stw	r16,36(sp)
    3844:	d9800a17 	ldw	r6,40(sp)
    3848:	d9400917 	ldw	r5,36(sp)
    384c:	e009883a 	mov	r4,fp
    3850:	00068380 	call	6838 <__pow5mult>
    3854:	1021883a 	mov	r16,r2
    3858:	003f5a06 	br	35c4 <_dtoa_r+0xa68>
    385c:	01c00044 	movi	r7,1
    3860:	d9c00b15 	stw	r7,44(sp)
    3864:	d8802217 	ldw	r2,136(sp)
    3868:	0081280e 	bge	zero,r2,3d0c <_dtoa_r+0x11b0>
    386c:	100d883a 	mov	r6,r2
    3870:	1021883a 	mov	r16,r2
    3874:	d8800c15 	stw	r2,48(sp)
    3878:	d8800615 	stw	r2,24(sp)
    387c:	003d8806 	br	2ea0 <_dtoa_r+0x344>
    3880:	d8800617 	ldw	r2,24(sp)
    3884:	00be9b16 	blt	zero,r2,32f4 <_dtoa_r+0x798>
    3888:	10010f1e 	bne	r2,zero,3cc8 <_dtoa_r+0x116c>
    388c:	880b883a 	mov	r5,r17
    3890:	000d883a 	mov	r6,zero
    3894:	01d00534 	movhi	r7,16404
    3898:	8009883a 	mov	r4,r16
    389c:	000ba040 	call	ba04 <__muldf3>
    38a0:	900d883a 	mov	r6,r18
    38a4:	980f883a 	mov	r7,r19
    38a8:	1009883a 	mov	r4,r2
    38ac:	180b883a 	mov	r5,r3
    38b0:	000b8340 	call	b834 <__gedf2>
    38b4:	002b883a 	mov	r21,zero
    38b8:	0023883a 	mov	r17,zero
    38bc:	1000bf16 	blt	r2,zero,3bbc <_dtoa_r+0x1060>
    38c0:	d9802217 	ldw	r6,136(sp)
    38c4:	ddc00717 	ldw	r23,28(sp)
    38c8:	018c303a 	nor	r6,zero,r6
    38cc:	d9800515 	stw	r6,20(sp)
    38d0:	a80b883a 	mov	r5,r21
    38d4:	e009883a 	mov	r4,fp
    38d8:	00062a00 	call	62a0 <_Bfree>
    38dc:	883e4926 	beq	r17,zero,3204 <_dtoa_r+0x6a8>
    38e0:	003fad06 	br	3798 <_dtoa_r+0xc3c>
    38e4:	d9c01117 	ldw	r7,68(sp)
    38e8:	3801bc26 	beq	r7,zero,3fdc <_dtoa_r+0x1480>
    38ec:	10810cc4 	addi	r2,r2,1075
    38f0:	dd400a17 	ldw	r21,40(sp)
    38f4:	dd000817 	ldw	r20,32(sp)
    38f8:	003f0a06 	br	3524 <_dtoa_r+0x9c8>
    38fc:	00800704 	movi	r2,28
    3900:	d9000817 	ldw	r4,32(sp)
    3904:	a0a9883a 	add	r20,r20,r2
    3908:	b0ad883a 	add	r22,r22,r2
    390c:	2089883a 	add	r4,r4,r2
    3910:	d9000815 	stw	r4,32(sp)
    3914:	003f5106 	br	365c <_dtoa_r+0xb00>
    3918:	d8c00317 	ldw	r3,12(sp)
    391c:	b8c1fc0e 	bge	r23,r3,4110 <_dtoa_r+0x15b4>
    3920:	0027883a 	mov	r19,zero
    3924:	b805883a 	mov	r2,r23
    3928:	003f3e06 	br	3624 <_dtoa_r+0xac8>
    392c:	880b883a 	mov	r5,r17
    3930:	e009883a 	mov	r4,fp
    3934:	000f883a 	mov	r7,zero
    3938:	01800284 	movi	r6,10
    393c:	00062c80 	call	62c8 <__multadd>
    3940:	d9000c17 	ldw	r4,48(sp)
    3944:	1023883a 	mov	r17,r2
    3948:	0102040e 	bge	zero,r4,415c <_dtoa_r+0x1600>
    394c:	d9000615 	stw	r4,24(sp)
    3950:	0500050e 	bge	zero,r20,3968 <_dtoa_r+0xe0c>
    3954:	880b883a 	mov	r5,r17
    3958:	a00d883a 	mov	r6,r20
    395c:	e009883a 	mov	r4,fp
    3960:	00069780 	call	6978 <__lshift>
    3964:	1023883a 	mov	r17,r2
    3968:	9801241e 	bne	r19,zero,3dfc <_dtoa_r+0x12a0>
    396c:	8829883a 	mov	r20,r17
    3970:	d9000617 	ldw	r4,24(sp)
    3974:	dcc00717 	ldw	r19,28(sp)
    3978:	9480004c 	andi	r18,r18,1
    397c:	20bfffc4 	addi	r2,r4,-1
    3980:	9885883a 	add	r2,r19,r2
    3984:	d8800415 	stw	r2,16(sp)
    3988:	dc800615 	stw	r18,24(sp)
    398c:	a80b883a 	mov	r5,r21
    3990:	8009883a 	mov	r4,r16
    3994:	000295c0 	call	295c <quorem>
    3998:	880b883a 	mov	r5,r17
    399c:	8009883a 	mov	r4,r16
    39a0:	102f883a 	mov	r23,r2
    39a4:	0006ac00 	call	6ac0 <__mcmp>
    39a8:	a80b883a 	mov	r5,r21
    39ac:	a00d883a 	mov	r6,r20
    39b0:	e009883a 	mov	r4,fp
    39b4:	102d883a 	mov	r22,r2
    39b8:	0006b200 	call	6b20 <__mdiff>
    39bc:	1007883a 	mov	r3,r2
    39c0:	10800317 	ldw	r2,12(r2)
    39c4:	bc800c04 	addi	r18,r23,48
    39c8:	180b883a 	mov	r5,r3
    39cc:	10004e1e 	bne	r2,zero,3b08 <_dtoa_r+0xfac>
    39d0:	8009883a 	mov	r4,r16
    39d4:	d8c01615 	stw	r3,88(sp)
    39d8:	0006ac00 	call	6ac0 <__mcmp>
    39dc:	d8c01617 	ldw	r3,88(sp)
    39e0:	e009883a 	mov	r4,fp
    39e4:	d8801615 	stw	r2,88(sp)
    39e8:	180b883a 	mov	r5,r3
    39ec:	00062a00 	call	62a0 <_Bfree>
    39f0:	d8801617 	ldw	r2,88(sp)
    39f4:	1000041e 	bne	r2,zero,3a08 <_dtoa_r+0xeac>
    39f8:	d9800317 	ldw	r6,12(sp)
    39fc:	3000021e 	bne	r6,zero,3a08 <_dtoa_r+0xeac>
    3a00:	d8c00617 	ldw	r3,24(sp)
    3a04:	18003726 	beq	r3,zero,3ae4 <_dtoa_r+0xf88>
    3a08:	b0002016 	blt	r22,zero,3a8c <_dtoa_r+0xf30>
    3a0c:	b000041e 	bne	r22,zero,3a20 <_dtoa_r+0xec4>
    3a10:	d9000317 	ldw	r4,12(sp)
    3a14:	2000021e 	bne	r4,zero,3a20 <_dtoa_r+0xec4>
    3a18:	d8c00617 	ldw	r3,24(sp)
    3a1c:	18001b26 	beq	r3,zero,3a8c <_dtoa_r+0xf30>
    3a20:	00810716 	blt	zero,r2,3e40 <_dtoa_r+0x12e4>
    3a24:	d8c00417 	ldw	r3,16(sp)
    3a28:	9d800044 	addi	r22,r19,1
    3a2c:	9c800005 	stb	r18,0(r19)
    3a30:	b02f883a 	mov	r23,r22
    3a34:	98c10626 	beq	r19,r3,3e50 <_dtoa_r+0x12f4>
    3a38:	800b883a 	mov	r5,r16
    3a3c:	000f883a 	mov	r7,zero
    3a40:	01800284 	movi	r6,10
    3a44:	e009883a 	mov	r4,fp
    3a48:	00062c80 	call	62c8 <__multadd>
    3a4c:	1021883a 	mov	r16,r2
    3a50:	000f883a 	mov	r7,zero
    3a54:	01800284 	movi	r6,10
    3a58:	880b883a 	mov	r5,r17
    3a5c:	e009883a 	mov	r4,fp
    3a60:	8d002526 	beq	r17,r20,3af8 <_dtoa_r+0xf9c>
    3a64:	00062c80 	call	62c8 <__multadd>
    3a68:	a00b883a 	mov	r5,r20
    3a6c:	000f883a 	mov	r7,zero
    3a70:	01800284 	movi	r6,10
    3a74:	e009883a 	mov	r4,fp
    3a78:	1023883a 	mov	r17,r2
    3a7c:	00062c80 	call	62c8 <__multadd>
    3a80:	1029883a 	mov	r20,r2
    3a84:	b027883a 	mov	r19,r22
    3a88:	003fc006 	br	398c <_dtoa_r+0xe30>
    3a8c:	9011883a 	mov	r8,r18
    3a90:	00800e0e 	bge	zero,r2,3acc <_dtoa_r+0xf70>
    3a94:	800b883a 	mov	r5,r16
    3a98:	01800044 	movi	r6,1
    3a9c:	e009883a 	mov	r4,fp
    3aa0:	da001715 	stw	r8,92(sp)
    3aa4:	00069780 	call	6978 <__lshift>
    3aa8:	a80b883a 	mov	r5,r21
    3aac:	1009883a 	mov	r4,r2
    3ab0:	1021883a 	mov	r16,r2
    3ab4:	0006ac00 	call	6ac0 <__mcmp>
    3ab8:	da001717 	ldw	r8,92(sp)
    3abc:	0081960e 	bge	zero,r2,4118 <_dtoa_r+0x15bc>
    3ac0:	00800e44 	movi	r2,57
    3ac4:	40817026 	beq	r8,r2,4088 <_dtoa_r+0x152c>
    3ac8:	ba000c44 	addi	r8,r23,49
    3acc:	8825883a 	mov	r18,r17
    3ad0:	9dc00044 	addi	r23,r19,1
    3ad4:	9a000005 	stb	r8,0(r19)
    3ad8:	a023883a 	mov	r17,r20
    3adc:	dc000915 	stw	r16,36(sp)
    3ae0:	003f2406 	br	3774 <_dtoa_r+0xc18>
    3ae4:	00800e44 	movi	r2,57
    3ae8:	9011883a 	mov	r8,r18
    3aec:	90816626 	beq	r18,r2,4088 <_dtoa_r+0x152c>
    3af0:	05bff516 	blt	zero,r22,3ac8 <_dtoa_r+0xf6c>
    3af4:	003ff506 	br	3acc <_dtoa_r+0xf70>
    3af8:	00062c80 	call	62c8 <__multadd>
    3afc:	1023883a 	mov	r17,r2
    3b00:	1029883a 	mov	r20,r2
    3b04:	003fdf06 	br	3a84 <_dtoa_r+0xf28>
    3b08:	e009883a 	mov	r4,fp
    3b0c:	00062a00 	call	62a0 <_Bfree>
    3b10:	00800044 	movi	r2,1
    3b14:	003fbc06 	br	3a08 <_dtoa_r+0xeac>
    3b18:	a80b883a 	mov	r5,r21
    3b1c:	8009883a 	mov	r4,r16
    3b20:	0006ac00 	call	6ac0 <__mcmp>
    3b24:	103edb0e 	bge	r2,zero,3694 <_dtoa_r+0xb38>
    3b28:	800b883a 	mov	r5,r16
    3b2c:	000f883a 	mov	r7,zero
    3b30:	01800284 	movi	r6,10
    3b34:	e009883a 	mov	r4,fp
    3b38:	00062c80 	call	62c8 <__multadd>
    3b3c:	1021883a 	mov	r16,r2
    3b40:	d8800517 	ldw	r2,20(sp)
    3b44:	d8c00b17 	ldw	r3,44(sp)
    3b48:	10bfffc4 	addi	r2,r2,-1
    3b4c:	d8800515 	stw	r2,20(sp)
    3b50:	183f761e 	bne	r3,zero,392c <_dtoa_r+0xdd0>
    3b54:	d9000c17 	ldw	r4,48(sp)
    3b58:	0101730e 	bge	zero,r4,4128 <_dtoa_r+0x15cc>
    3b5c:	d9000615 	stw	r4,24(sp)
    3b60:	003ed006 	br	36a4 <_dtoa_r+0xb48>
    3b64:	00800084 	movi	r2,2
    3b68:	3081861e 	bne	r6,r2,4184 <_dtoa_r+0x1628>
    3b6c:	d8000b15 	stw	zero,44(sp)
    3b70:	003f3c06 	br	3864 <_dtoa_r+0xd08>
    3b74:	dc000917 	ldw	r16,36(sp)
    3b78:	003e9206 	br	35c4 <_dtoa_r+0xa68>
    3b7c:	d9c00317 	ldw	r7,12(sp)
    3b80:	00800084 	movi	r2,2
    3b84:	11fec50e 	bge	r2,r7,369c <_dtoa_r+0xb40>
    3b88:	d9000617 	ldw	r4,24(sp)
    3b8c:	20013c1e 	bne	r4,zero,4080 <_dtoa_r+0x1524>
    3b90:	a80b883a 	mov	r5,r21
    3b94:	000f883a 	mov	r7,zero
    3b98:	01800144 	movi	r6,5
    3b9c:	e009883a 	mov	r4,fp
    3ba0:	00062c80 	call	62c8 <__multadd>
    3ba4:	100b883a 	mov	r5,r2
    3ba8:	8009883a 	mov	r4,r16
    3bac:	102b883a 	mov	r21,r2
    3bb0:	0006ac00 	call	6ac0 <__mcmp>
    3bb4:	dc000915 	stw	r16,36(sp)
    3bb8:	00bf410e 	bge	zero,r2,38c0 <_dtoa_r+0xd64>
    3bbc:	d9c00717 	ldw	r7,28(sp)
    3bc0:	00800c44 	movi	r2,49
    3bc4:	38800005 	stb	r2,0(r7)
    3bc8:	d8800517 	ldw	r2,20(sp)
    3bcc:	3dc00044 	addi	r23,r7,1
    3bd0:	10800044 	addi	r2,r2,1
    3bd4:	d8800515 	stw	r2,20(sp)
    3bd8:	003f3d06 	br	38d0 <_dtoa_r+0xd74>
    3bdc:	d9800517 	ldw	r6,20(sp)
    3be0:	d9c00717 	ldw	r7,28(sp)
    3be4:	00800c44 	movi	r2,49
    3be8:	31800044 	addi	r6,r6,1
    3bec:	d9800515 	stw	r6,20(sp)
    3bf0:	38800005 	stb	r2,0(r7)
    3bf4:	003edf06 	br	3774 <_dtoa_r+0xc18>
    3bf8:	d8000b15 	stw	zero,44(sp)
    3bfc:	003c9f06 	br	2e7c <_dtoa_r+0x320>
    3c00:	903e7e1e 	bne	r18,zero,35fc <_dtoa_r+0xaa0>
    3c04:	00800434 	movhi	r2,16
    3c08:	10bfffc4 	addi	r2,r2,-1
    3c0c:	9884703a 	and	r2,r19,r2
    3c10:	1000ea1e 	bne	r2,zero,3fbc <_dtoa_r+0x1460>
    3c14:	9cdffc2c 	andhi	r19,r19,32752
    3c18:	9800e826 	beq	r19,zero,3fbc <_dtoa_r+0x1460>
    3c1c:	d9c00817 	ldw	r7,32(sp)
    3c20:	b5800044 	addi	r22,r22,1
    3c24:	04c00044 	movi	r19,1
    3c28:	39c00044 	addi	r7,r7,1
    3c2c:	d9c00815 	stw	r7,32(sp)
    3c30:	d8800d17 	ldw	r2,52(sp)
    3c34:	103e721e 	bne	r2,zero,3600 <_dtoa_r+0xaa4>
    3c38:	00800044 	movi	r2,1
    3c3c:	003e7906 	br	3624 <_dtoa_r+0xac8>
    3c40:	8009883a 	mov	r4,r16
    3c44:	000ca980 	call	ca98 <__floatsidf>
    3c48:	d9800f17 	ldw	r6,60(sp)
    3c4c:	d9c01017 	ldw	r7,64(sp)
    3c50:	1009883a 	mov	r4,r2
    3c54:	180b883a 	mov	r5,r3
    3c58:	000ba040 	call	ba04 <__muldf3>
    3c5c:	000d883a 	mov	r6,zero
    3c60:	01d00734 	movhi	r7,16412
    3c64:	1009883a 	mov	r4,r2
    3c68:	180b883a 	mov	r5,r3
    3c6c:	000a6180 	call	a618 <__adddf3>
    3c70:	047f3034 	movhi	r17,64704
    3c74:	1021883a 	mov	r16,r2
    3c78:	1c63883a 	add	r17,r3,r17
    3c7c:	d9000f17 	ldw	r4,60(sp)
    3c80:	d9401017 	ldw	r5,64(sp)
    3c84:	000d883a 	mov	r6,zero
    3c88:	01d00534 	movhi	r7,16404
    3c8c:	000c11c0 	call	c11c <__subdf3>
    3c90:	800d883a 	mov	r6,r16
    3c94:	880f883a 	mov	r7,r17
    3c98:	1009883a 	mov	r4,r2
    3c9c:	180b883a 	mov	r5,r3
    3ca0:	102b883a 	mov	r21,r2
    3ca4:	1829883a 	mov	r20,r3
    3ca8:	000b8340 	call	b834 <__gedf2>
    3cac:	00806c16 	blt	zero,r2,3e60 <_dtoa_r+0x1304>
    3cb0:	89e0003c 	xorhi	r7,r17,32768
    3cb4:	800d883a 	mov	r6,r16
    3cb8:	a809883a 	mov	r4,r21
    3cbc:	a00b883a 	mov	r5,r20
    3cc0:	000b9100 	call	b910 <__ledf2>
    3cc4:	103d7e0e 	bge	r2,zero,32c0 <_dtoa_r+0x764>
    3cc8:	002b883a 	mov	r21,zero
    3ccc:	0023883a 	mov	r17,zero
    3cd0:	003efb06 	br	38c0 <_dtoa_r+0xd64>
    3cd4:	d8800717 	ldw	r2,28(sp)
    3cd8:	003bd006 	br	2c1c <_dtoa_r+0xc0>
    3cdc:	d9000a17 	ldw	r4,40(sp)
    3ce0:	d9800d17 	ldw	r6,52(sp)
    3ce4:	dd400a15 	stw	r21,40(sp)
    3ce8:	a905c83a 	sub	r2,r21,r4
    3cec:	308d883a 	add	r6,r6,r2
    3cf0:	d9800d15 	stw	r6,52(sp)
    3cf4:	002b883a 	mov	r21,zero
    3cf8:	003e0606 	br	3514 <_dtoa_r+0x9b8>
    3cfc:	9023883a 	mov	r17,r18
    3d00:	9829883a 	mov	r20,r19
    3d04:	04000084 	movi	r16,2
    3d08:	003c9206 	br	2f54 <_dtoa_r+0x3f8>
    3d0c:	04000044 	movi	r16,1
    3d10:	dc000c15 	stw	r16,48(sp)
    3d14:	dc000615 	stw	r16,24(sp)
    3d18:	dc002215 	stw	r16,136(sp)
    3d1c:	e0001115 	stw	zero,68(fp)
    3d20:	000b883a 	mov	r5,zero
    3d24:	003c6906 	br	2ecc <_dtoa_r+0x370>
    3d28:	3021883a 	mov	r16,r6
    3d2c:	003ffb06 	br	3d1c <_dtoa_r+0x11c0>
    3d30:	1000021e 	bne	r2,zero,3d3c <_dtoa_r+0x11e0>
    3d34:	4200004c 	andi	r8,r8,1
    3d38:	403e7d1e 	bne	r8,zero,3730 <_dtoa_r+0xbd4>
    3d3c:	01000c04 	movi	r4,48
    3d40:	00000106 	br	3d48 <_dtoa_r+0x11ec>
    3d44:	102f883a 	mov	r23,r2
    3d48:	b8bfffc4 	addi	r2,r23,-1
    3d4c:	10c00007 	ldb	r3,0(r2)
    3d50:	193ffc26 	beq	r3,r4,3d44 <_dtoa_r+0x11e8>
    3d54:	003e8706 	br	3774 <_dtoa_r+0xc18>
    3d58:	d8800517 	ldw	r2,20(sp)
    3d5c:	00a3c83a 	sub	r17,zero,r2
    3d60:	8800a426 	beq	r17,zero,3ff4 <_dtoa_r+0x1498>
    3d64:	888003cc 	andi	r2,r17,15
    3d68:	100490fa 	slli	r2,r2,3
    3d6c:	00c00074 	movhi	r3,1
    3d70:	18fda004 	addi	r3,r3,-2432
    3d74:	1885883a 	add	r2,r3,r2
    3d78:	11800017 	ldw	r6,0(r2)
    3d7c:	11c00117 	ldw	r7,4(r2)
    3d80:	9009883a 	mov	r4,r18
    3d84:	980b883a 	mov	r5,r19
    3d88:	8823d13a 	srai	r17,r17,4
    3d8c:	000ba040 	call	ba04 <__muldf3>
    3d90:	d8800f15 	stw	r2,60(sp)
    3d94:	d8c01015 	stw	r3,64(sp)
    3d98:	8800e826 	beq	r17,zero,413c <_dtoa_r+0x15e0>
    3d9c:	05000074 	movhi	r20,1
    3da0:	a53d9604 	addi	r20,r20,-2472
    3da4:	04000084 	movi	r16,2
    3da8:	8980004c 	andi	r6,r17,1
    3dac:	1009883a 	mov	r4,r2
    3db0:	8823d07a 	srai	r17,r17,1
    3db4:	180b883a 	mov	r5,r3
    3db8:	30000426 	beq	r6,zero,3dcc <_dtoa_r+0x1270>
    3dbc:	a1800017 	ldw	r6,0(r20)
    3dc0:	a1c00117 	ldw	r7,4(r20)
    3dc4:	84000044 	addi	r16,r16,1
    3dc8:	000ba040 	call	ba04 <__muldf3>
    3dcc:	a5000204 	addi	r20,r20,8
    3dd0:	883ff51e 	bne	r17,zero,3da8 <_dtoa_r+0x124c>
    3dd4:	d8800f15 	stw	r2,60(sp)
    3dd8:	d8c01015 	stw	r3,64(sp)
    3ddc:	003c7606 	br	2fb8 <_dtoa_r+0x45c>
    3de0:	00c00c04 	movi	r3,48
    3de4:	10c00005 	stb	r3,0(r2)
    3de8:	d8c00517 	ldw	r3,20(sp)
    3dec:	bd3fffc3 	ldbu	r20,-1(r23)
    3df0:	18c00044 	addi	r3,r3,1
    3df4:	d8c00515 	stw	r3,20(sp)
    3df8:	003db906 	br	34e0 <_dtoa_r+0x984>
    3dfc:	89400117 	ldw	r5,4(r17)
    3e00:	e009883a 	mov	r4,fp
    3e04:	00061f80 	call	61f8 <_Balloc>
    3e08:	89800417 	ldw	r6,16(r17)
    3e0c:	89400304 	addi	r5,r17,12
    3e10:	11000304 	addi	r4,r2,12
    3e14:	31800084 	addi	r6,r6,2
    3e18:	318d883a 	add	r6,r6,r6
    3e1c:	318d883a 	add	r6,r6,r6
    3e20:	1027883a 	mov	r19,r2
    3e24:	0005e2c0 	call	5e2c <memcpy>
    3e28:	01800044 	movi	r6,1
    3e2c:	980b883a 	mov	r5,r19
    3e30:	e009883a 	mov	r4,fp
    3e34:	00069780 	call	6978 <__lshift>
    3e38:	1029883a 	mov	r20,r2
    3e3c:	003ecc06 	br	3970 <_dtoa_r+0xe14>
    3e40:	00800e44 	movi	r2,57
    3e44:	90809026 	beq	r18,r2,4088 <_dtoa_r+0x152c>
    3e48:	92000044 	addi	r8,r18,1
    3e4c:	003f1f06 	br	3acc <_dtoa_r+0xf70>
    3e50:	9011883a 	mov	r8,r18
    3e54:	8825883a 	mov	r18,r17
    3e58:	a023883a 	mov	r17,r20
    3e5c:	003e2906 	br	3704 <_dtoa_r+0xba8>
    3e60:	002b883a 	mov	r21,zero
    3e64:	0023883a 	mov	r17,zero
    3e68:	003f5406 	br	3bbc <_dtoa_r+0x1060>
    3e6c:	61bfffc4 	addi	r6,r12,-1
    3e70:	300490fa 	slli	r2,r6,3
    3e74:	00c00074 	movhi	r3,1
    3e78:	18fda004 	addi	r3,r3,-2432
    3e7c:	1885883a 	add	r2,r3,r2
    3e80:	11000017 	ldw	r4,0(r2)
    3e84:	11400117 	ldw	r5,4(r2)
    3e88:	d8800717 	ldw	r2,28(sp)
    3e8c:	880f883a 	mov	r7,r17
    3e90:	d9801215 	stw	r6,72(sp)
    3e94:	800d883a 	mov	r6,r16
    3e98:	db001615 	stw	r12,88(sp)
    3e9c:	15c00044 	addi	r23,r2,1
    3ea0:	000ba040 	call	ba04 <__muldf3>
    3ea4:	d9401017 	ldw	r5,64(sp)
    3ea8:	d9000f17 	ldw	r4,60(sp)
    3eac:	d8c01515 	stw	r3,84(sp)
    3eb0:	d8801415 	stw	r2,80(sp)
    3eb4:	000ca180 	call	ca18 <__fixdfsi>
    3eb8:	1009883a 	mov	r4,r2
    3ebc:	1021883a 	mov	r16,r2
    3ec0:	000ca980 	call	ca98 <__floatsidf>
    3ec4:	d9000f17 	ldw	r4,60(sp)
    3ec8:	d9401017 	ldw	r5,64(sp)
    3ecc:	100d883a 	mov	r6,r2
    3ed0:	180f883a 	mov	r7,r3
    3ed4:	000c11c0 	call	c11c <__subdf3>
    3ed8:	1829883a 	mov	r20,r3
    3edc:	d8c00717 	ldw	r3,28(sp)
    3ee0:	84000c04 	addi	r16,r16,48
    3ee4:	1023883a 	mov	r17,r2
    3ee8:	1c000005 	stb	r16,0(r3)
    3eec:	db001617 	ldw	r12,88(sp)
    3ef0:	00800044 	movi	r2,1
    3ef4:	60802226 	beq	r12,r2,3f80 <_dtoa_r+0x1424>
    3ef8:	d9c00717 	ldw	r7,28(sp)
    3efc:	8805883a 	mov	r2,r17
    3f00:	b82b883a 	mov	r21,r23
    3f04:	3b19883a 	add	r12,r7,r12
    3f08:	6023883a 	mov	r17,r12
    3f0c:	a007883a 	mov	r3,r20
    3f10:	dc800f15 	stw	r18,60(sp)
    3f14:	000d883a 	mov	r6,zero
    3f18:	01d00934 	movhi	r7,16420
    3f1c:	1009883a 	mov	r4,r2
    3f20:	180b883a 	mov	r5,r3
    3f24:	000ba040 	call	ba04 <__muldf3>
    3f28:	180b883a 	mov	r5,r3
    3f2c:	1009883a 	mov	r4,r2
    3f30:	1829883a 	mov	r20,r3
    3f34:	1025883a 	mov	r18,r2
    3f38:	000ca180 	call	ca18 <__fixdfsi>
    3f3c:	1009883a 	mov	r4,r2
    3f40:	1021883a 	mov	r16,r2
    3f44:	000ca980 	call	ca98 <__floatsidf>
    3f48:	100d883a 	mov	r6,r2
    3f4c:	180f883a 	mov	r7,r3
    3f50:	9009883a 	mov	r4,r18
    3f54:	a00b883a 	mov	r5,r20
    3f58:	84000c04 	addi	r16,r16,48
    3f5c:	000c11c0 	call	c11c <__subdf3>
    3f60:	ad400044 	addi	r21,r21,1
    3f64:	ac3fffc5 	stb	r16,-1(r21)
    3f68:	ac7fea1e 	bne	r21,r17,3f14 <_dtoa_r+0x13b8>
    3f6c:	1023883a 	mov	r17,r2
    3f70:	d8801217 	ldw	r2,72(sp)
    3f74:	dc800f17 	ldw	r18,60(sp)
    3f78:	1829883a 	mov	r20,r3
    3f7c:	b8af883a 	add	r23,r23,r2
    3f80:	d9001417 	ldw	r4,80(sp)
    3f84:	d9401517 	ldw	r5,84(sp)
    3f88:	000d883a 	mov	r6,zero
    3f8c:	01cff834 	movhi	r7,16352
    3f90:	000a6180 	call	a618 <__adddf3>
    3f94:	880d883a 	mov	r6,r17
    3f98:	a00f883a 	mov	r7,r20
    3f9c:	1009883a 	mov	r4,r2
    3fa0:	180b883a 	mov	r5,r3
    3fa4:	000b9100 	call	b910 <__ledf2>
    3fa8:	10003e0e 	bge	r2,zero,40a4 <_dtoa_r+0x1548>
    3fac:	d9001317 	ldw	r4,76(sp)
    3fb0:	bd3fffc3 	ldbu	r20,-1(r23)
    3fb4:	d9000515 	stw	r4,20(sp)
    3fb8:	003d3b06 	br	34a8 <_dtoa_r+0x94c>
    3fbc:	0027883a 	mov	r19,zero
    3fc0:	003f1b06 	br	3c30 <_dtoa_r+0x10d4>
    3fc4:	d8800817 	ldw	r2,32(sp)
    3fc8:	11e9c83a 	sub	r20,r2,r7
    3fcc:	0005883a 	mov	r2,zero
    3fd0:	003d5406 	br	3524 <_dtoa_r+0x9c8>
    3fd4:	00800044 	movi	r2,1
    3fd8:	003dc706 	br	36f8 <_dtoa_r+0xb9c>
    3fdc:	d8c00217 	ldw	r3,8(sp)
    3fe0:	00800d84 	movi	r2,54
    3fe4:	dd400a17 	ldw	r21,40(sp)
    3fe8:	10c5c83a 	sub	r2,r2,r3
    3fec:	dd000817 	ldw	r20,32(sp)
    3ff0:	003d4c06 	br	3524 <_dtoa_r+0x9c8>
    3ff4:	dc800f15 	stw	r18,60(sp)
    3ff8:	dcc01015 	stw	r19,64(sp)
    3ffc:	04000084 	movi	r16,2
    4000:	003bed06 	br	2fb8 <_dtoa_r+0x45c>
    4004:	d9000617 	ldw	r4,24(sp)
    4008:	203f0d26 	beq	r4,zero,3c40 <_dtoa_r+0x10e4>
    400c:	d9800c17 	ldw	r6,48(sp)
    4010:	01bcab0e 	bge	zero,r6,32c0 <_dtoa_r+0x764>
    4014:	d9401017 	ldw	r5,64(sp)
    4018:	d9000f17 	ldw	r4,60(sp)
    401c:	000d883a 	mov	r6,zero
    4020:	01d00934 	movhi	r7,16420
    4024:	000ba040 	call	ba04 <__muldf3>
    4028:	81000044 	addi	r4,r16,1
    402c:	d8800f15 	stw	r2,60(sp)
    4030:	d8c01015 	stw	r3,64(sp)
    4034:	000ca980 	call	ca98 <__floatsidf>
    4038:	d9800f17 	ldw	r6,60(sp)
    403c:	d9c01017 	ldw	r7,64(sp)
    4040:	1009883a 	mov	r4,r2
    4044:	180b883a 	mov	r5,r3
    4048:	000ba040 	call	ba04 <__muldf3>
    404c:	01d00734 	movhi	r7,16412
    4050:	000d883a 	mov	r6,zero
    4054:	1009883a 	mov	r4,r2
    4058:	180b883a 	mov	r5,r3
    405c:	000a6180 	call	a618 <__adddf3>
    4060:	d9c00517 	ldw	r7,20(sp)
    4064:	047f3034 	movhi	r17,64704
    4068:	1021883a 	mov	r16,r2
    406c:	39ffffc4 	addi	r7,r7,-1
    4070:	d9c01315 	stw	r7,76(sp)
    4074:	1c63883a 	add	r17,r3,r17
    4078:	db000c17 	ldw	r12,48(sp)
    407c:	003bea06 	br	3028 <_dtoa_r+0x4cc>
    4080:	dc000915 	stw	r16,36(sp)
    4084:	003e0e06 	br	38c0 <_dtoa_r+0xd64>
    4088:	01000e44 	movi	r4,57
    408c:	8825883a 	mov	r18,r17
    4090:	9dc00044 	addi	r23,r19,1
    4094:	99000005 	stb	r4,0(r19)
    4098:	a023883a 	mov	r17,r20
    409c:	dc000915 	stw	r16,36(sp)
    40a0:	003da406 	br	3734 <_dtoa_r+0xbd8>
    40a4:	d9801417 	ldw	r6,80(sp)
    40a8:	d9c01517 	ldw	r7,84(sp)
    40ac:	0009883a 	mov	r4,zero
    40b0:	014ff834 	movhi	r5,16352
    40b4:	000c11c0 	call	c11c <__subdf3>
    40b8:	880d883a 	mov	r6,r17
    40bc:	a00f883a 	mov	r7,r20
    40c0:	1009883a 	mov	r4,r2
    40c4:	180b883a 	mov	r5,r3
    40c8:	000b8340 	call	b834 <__gedf2>
    40cc:	00bc7c0e 	bge	zero,r2,32c0 <_dtoa_r+0x764>
    40d0:	01000c04 	movi	r4,48
    40d4:	00000106 	br	40dc <_dtoa_r+0x1580>
    40d8:	102f883a 	mov	r23,r2
    40dc:	b8bfffc4 	addi	r2,r23,-1
    40e0:	10c00007 	ldb	r3,0(r2)
    40e4:	193ffc26 	beq	r3,r4,40d8 <_dtoa_r+0x157c>
    40e8:	d9801317 	ldw	r6,76(sp)
    40ec:	d9800515 	stw	r6,20(sp)
    40f0:	003c4406 	br	3204 <_dtoa_r+0x6a8>
    40f4:	d9801317 	ldw	r6,76(sp)
    40f8:	d9800515 	stw	r6,20(sp)
    40fc:	003cea06 	br	34a8 <_dtoa_r+0x94c>
    4100:	dd800f17 	ldw	r22,60(sp)
    4104:	dcc01017 	ldw	r19,64(sp)
    4108:	dc801217 	ldw	r18,72(sp)
    410c:	003c6c06 	br	32c0 <_dtoa_r+0x764>
    4110:	903e031e 	bne	r18,zero,3920 <_dtoa_r+0xdc4>
    4114:	003ebb06 	br	3c04 <_dtoa_r+0x10a8>
    4118:	103e6c1e 	bne	r2,zero,3acc <_dtoa_r+0xf70>
    411c:	4080004c 	andi	r2,r8,1
    4120:	103e6a26 	beq	r2,zero,3acc <_dtoa_r+0xf70>
    4124:	003e6606 	br	3ac0 <_dtoa_r+0xf64>
    4128:	d8c00317 	ldw	r3,12(sp)
    412c:	00800084 	movi	r2,2
    4130:	10c02916 	blt	r2,r3,41d8 <_dtoa_r+0x167c>
    4134:	d9000c17 	ldw	r4,48(sp)
    4138:	003e8806 	br	3b5c <_dtoa_r+0x1000>
    413c:	04000084 	movi	r16,2
    4140:	003b9d06 	br	2fb8 <_dtoa_r+0x45c>
    4144:	d9001317 	ldw	r4,76(sp)
    4148:	d9000515 	stw	r4,20(sp)
    414c:	003cd606 	br	34a8 <_dtoa_r+0x94c>
    4150:	d8801317 	ldw	r2,76(sp)
    4154:	d8800515 	stw	r2,20(sp)
    4158:	003c2a06 	br	3204 <_dtoa_r+0x6a8>
    415c:	d9800317 	ldw	r6,12(sp)
    4160:	00800084 	movi	r2,2
    4164:	11801516 	blt	r2,r6,41bc <_dtoa_r+0x1660>
    4168:	d9c00c17 	ldw	r7,48(sp)
    416c:	d9c00615 	stw	r7,24(sp)
    4170:	003df706 	br	3950 <_dtoa_r+0xdf4>
    4174:	193d3926 	beq	r3,r4,365c <_dtoa_r+0xb00>
    4178:	00c00f04 	movi	r3,60
    417c:	1885c83a 	sub	r2,r3,r2
    4180:	003ddf06 	br	3900 <_dtoa_r+0xda4>
    4184:	e009883a 	mov	r4,fp
    4188:	e0001115 	stw	zero,68(fp)
    418c:	000b883a 	mov	r5,zero
    4190:	00061f80 	call	61f8 <_Balloc>
    4194:	d8800715 	stw	r2,28(sp)
    4198:	d8c00717 	ldw	r3,28(sp)
    419c:	00bfffc4 	movi	r2,-1
    41a0:	01000044 	movi	r4,1
    41a4:	d8800c15 	stw	r2,48(sp)
    41a8:	e0c01015 	stw	r3,64(fp)
    41ac:	d9000b15 	stw	r4,44(sp)
    41b0:	d8800615 	stw	r2,24(sp)
    41b4:	d8002215 	stw	zero,136(sp)
    41b8:	003c4106 	br	32c0 <_dtoa_r+0x764>
    41bc:	d8c00c17 	ldw	r3,48(sp)
    41c0:	d8c00615 	stw	r3,24(sp)
    41c4:	003e7006 	br	3b88 <_dtoa_r+0x102c>
    41c8:	04400044 	movi	r17,1
    41cc:	003b2006 	br	2e50 <_dtoa_r+0x2f4>
    41d0:	000b883a 	mov	r5,zero
    41d4:	003b3d06 	br	2ecc <_dtoa_r+0x370>
    41d8:	d8800c17 	ldw	r2,48(sp)
    41dc:	d8800615 	stw	r2,24(sp)
    41e0:	003e6906 	br	3b88 <_dtoa_r+0x102c>

000041e4 <__sflush_r>:
    41e4:	2880030b 	ldhu	r2,12(r5)
    41e8:	defffb04 	addi	sp,sp,-20
    41ec:	dcc00315 	stw	r19,12(sp)
    41f0:	dc400115 	stw	r17,4(sp)
    41f4:	dfc00415 	stw	ra,16(sp)
    41f8:	dc800215 	stw	r18,8(sp)
    41fc:	dc000015 	stw	r16,0(sp)
    4200:	10c0020c 	andi	r3,r2,8
    4204:	2823883a 	mov	r17,r5
    4208:	2027883a 	mov	r19,r4
    420c:	1800311e 	bne	r3,zero,42d4 <__sflush_r+0xf0>
    4210:	28c00117 	ldw	r3,4(r5)
    4214:	10820014 	ori	r2,r2,2048
    4218:	2880030d 	sth	r2,12(r5)
    421c:	00c04b0e 	bge	zero,r3,434c <__sflush_r+0x168>
    4220:	8a000a17 	ldw	r8,40(r17)
    4224:	40002326 	beq	r8,zero,42b4 <__sflush_r+0xd0>
    4228:	9c000017 	ldw	r16,0(r19)
    422c:	10c4000c 	andi	r3,r2,4096
    4230:	98000015 	stw	zero,0(r19)
    4234:	18004826 	beq	r3,zero,4358 <__sflush_r+0x174>
    4238:	89801417 	ldw	r6,80(r17)
    423c:	10c0010c 	andi	r3,r2,4
    4240:	18000626 	beq	r3,zero,425c <__sflush_r+0x78>
    4244:	88c00117 	ldw	r3,4(r17)
    4248:	88800c17 	ldw	r2,48(r17)
    424c:	30cdc83a 	sub	r6,r6,r3
    4250:	10000226 	beq	r2,zero,425c <__sflush_r+0x78>
    4254:	88800f17 	ldw	r2,60(r17)
    4258:	308dc83a 	sub	r6,r6,r2
    425c:	89400717 	ldw	r5,28(r17)
    4260:	000f883a 	mov	r7,zero
    4264:	9809883a 	mov	r4,r19
    4268:	403ee83a 	callr	r8
    426c:	00ffffc4 	movi	r3,-1
    4270:	10c04426 	beq	r2,r3,4384 <__sflush_r+0x1a0>
    4274:	88c0030b 	ldhu	r3,12(r17)
    4278:	89000417 	ldw	r4,16(r17)
    427c:	88000115 	stw	zero,4(r17)
    4280:	197dffcc 	andi	r5,r3,63487
    4284:	8940030d 	sth	r5,12(r17)
    4288:	89000015 	stw	r4,0(r17)
    428c:	18c4000c 	andi	r3,r3,4096
    4290:	18002c1e 	bne	r3,zero,4344 <__sflush_r+0x160>
    4294:	89400c17 	ldw	r5,48(r17)
    4298:	9c000015 	stw	r16,0(r19)
    429c:	28000526 	beq	r5,zero,42b4 <__sflush_r+0xd0>
    42a0:	88801004 	addi	r2,r17,64
    42a4:	28800226 	beq	r5,r2,42b0 <__sflush_r+0xcc>
    42a8:	9809883a 	mov	r4,r19
    42ac:	00049500 	call	4950 <_free_r>
    42b0:	88000c15 	stw	zero,48(r17)
    42b4:	0005883a 	mov	r2,zero
    42b8:	dfc00417 	ldw	ra,16(sp)
    42bc:	dcc00317 	ldw	r19,12(sp)
    42c0:	dc800217 	ldw	r18,8(sp)
    42c4:	dc400117 	ldw	r17,4(sp)
    42c8:	dc000017 	ldw	r16,0(sp)
    42cc:	dec00504 	addi	sp,sp,20
    42d0:	f800283a 	ret
    42d4:	2c800417 	ldw	r18,16(r5)
    42d8:	903ff626 	beq	r18,zero,42b4 <__sflush_r+0xd0>
    42dc:	2c000017 	ldw	r16,0(r5)
    42e0:	108000cc 	andi	r2,r2,3
    42e4:	2c800015 	stw	r18,0(r5)
    42e8:	84a1c83a 	sub	r16,r16,r18
    42ec:	1000131e 	bne	r2,zero,433c <__sflush_r+0x158>
    42f0:	28800517 	ldw	r2,20(r5)
    42f4:	88800215 	stw	r2,8(r17)
    42f8:	04000316 	blt	zero,r16,4308 <__sflush_r+0x124>
    42fc:	003fed06 	br	42b4 <__sflush_r+0xd0>
    4300:	90a5883a 	add	r18,r18,r2
    4304:	043feb0e 	bge	zero,r16,42b4 <__sflush_r+0xd0>
    4308:	88800917 	ldw	r2,36(r17)
    430c:	89400717 	ldw	r5,28(r17)
    4310:	800f883a 	mov	r7,r16
    4314:	900d883a 	mov	r6,r18
    4318:	9809883a 	mov	r4,r19
    431c:	103ee83a 	callr	r2
    4320:	80a1c83a 	sub	r16,r16,r2
    4324:	00bff616 	blt	zero,r2,4300 <__sflush_r+0x11c>
    4328:	88c0030b 	ldhu	r3,12(r17)
    432c:	00bfffc4 	movi	r2,-1
    4330:	18c01014 	ori	r3,r3,64
    4334:	88c0030d 	sth	r3,12(r17)
    4338:	003fdf06 	br	42b8 <__sflush_r+0xd4>
    433c:	0005883a 	mov	r2,zero
    4340:	003fec06 	br	42f4 <__sflush_r+0x110>
    4344:	88801415 	stw	r2,80(r17)
    4348:	003fd206 	br	4294 <__sflush_r+0xb0>
    434c:	28c00f17 	ldw	r3,60(r5)
    4350:	00ffb316 	blt	zero,r3,4220 <__sflush_r+0x3c>
    4354:	003fd706 	br	42b4 <__sflush_r+0xd0>
    4358:	89400717 	ldw	r5,28(r17)
    435c:	000d883a 	mov	r6,zero
    4360:	01c00044 	movi	r7,1
    4364:	9809883a 	mov	r4,r19
    4368:	403ee83a 	callr	r8
    436c:	100d883a 	mov	r6,r2
    4370:	00bfffc4 	movi	r2,-1
    4374:	30801426 	beq	r6,r2,43c8 <__sflush_r+0x1e4>
    4378:	8880030b 	ldhu	r2,12(r17)
    437c:	8a000a17 	ldw	r8,40(r17)
    4380:	003fae06 	br	423c <__sflush_r+0x58>
    4384:	98c00017 	ldw	r3,0(r19)
    4388:	183fba26 	beq	r3,zero,4274 <__sflush_r+0x90>
    438c:	01000744 	movi	r4,29
    4390:	19000626 	beq	r3,r4,43ac <__sflush_r+0x1c8>
    4394:	01000584 	movi	r4,22
    4398:	19000426 	beq	r3,r4,43ac <__sflush_r+0x1c8>
    439c:	88c0030b 	ldhu	r3,12(r17)
    43a0:	18c01014 	ori	r3,r3,64
    43a4:	88c0030d 	sth	r3,12(r17)
    43a8:	003fc306 	br	42b8 <__sflush_r+0xd4>
    43ac:	8880030b 	ldhu	r2,12(r17)
    43b0:	88c00417 	ldw	r3,16(r17)
    43b4:	88000115 	stw	zero,4(r17)
    43b8:	10bdffcc 	andi	r2,r2,63487
    43bc:	8880030d 	sth	r2,12(r17)
    43c0:	88c00015 	stw	r3,0(r17)
    43c4:	003fb306 	br	4294 <__sflush_r+0xb0>
    43c8:	98800017 	ldw	r2,0(r19)
    43cc:	103fea26 	beq	r2,zero,4378 <__sflush_r+0x194>
    43d0:	00c00744 	movi	r3,29
    43d4:	10c00226 	beq	r2,r3,43e0 <__sflush_r+0x1fc>
    43d8:	00c00584 	movi	r3,22
    43dc:	10c0031e 	bne	r2,r3,43ec <__sflush_r+0x208>
    43e0:	9c000015 	stw	r16,0(r19)
    43e4:	0005883a 	mov	r2,zero
    43e8:	003fb306 	br	42b8 <__sflush_r+0xd4>
    43ec:	88c0030b 	ldhu	r3,12(r17)
    43f0:	3005883a 	mov	r2,r6
    43f4:	18c01014 	ori	r3,r3,64
    43f8:	88c0030d 	sth	r3,12(r17)
    43fc:	003fae06 	br	42b8 <__sflush_r+0xd4>

00004400 <_fflush_r>:
    4400:	defffd04 	addi	sp,sp,-12
    4404:	dc000115 	stw	r16,4(sp)
    4408:	dfc00215 	stw	ra,8(sp)
    440c:	2021883a 	mov	r16,r4
    4410:	20000226 	beq	r4,zero,441c <_fflush_r+0x1c>
    4414:	20800e17 	ldw	r2,56(r4)
    4418:	10000c26 	beq	r2,zero,444c <_fflush_r+0x4c>
    441c:	2880030f 	ldh	r2,12(r5)
    4420:	1000051e 	bne	r2,zero,4438 <_fflush_r+0x38>
    4424:	0005883a 	mov	r2,zero
    4428:	dfc00217 	ldw	ra,8(sp)
    442c:	dc000117 	ldw	r16,4(sp)
    4430:	dec00304 	addi	sp,sp,12
    4434:	f800283a 	ret
    4438:	8009883a 	mov	r4,r16
    443c:	dfc00217 	ldw	ra,8(sp)
    4440:	dc000117 	ldw	r16,4(sp)
    4444:	dec00304 	addi	sp,sp,12
    4448:	00041e41 	jmpi	41e4 <__sflush_r>
    444c:	d9400015 	stw	r5,0(sp)
    4450:	00047dc0 	call	47dc <__sinit>
    4454:	d9400017 	ldw	r5,0(sp)
    4458:	003ff006 	br	441c <_fflush_r+0x1c>

0000445c <fflush>:
    445c:	20000526 	beq	r4,zero,4474 <fflush+0x18>
    4460:	00800074 	movhi	r2,1
    4464:	1084cf04 	addi	r2,r2,4924
    4468:	200b883a 	mov	r5,r4
    446c:	11000017 	ldw	r4,0(r2)
    4470:	00044001 	jmpi	4400 <_fflush_r>
    4474:	00800074 	movhi	r2,1
    4478:	1084ce04 	addi	r2,r2,4920
    447c:	11000017 	ldw	r4,0(r2)
    4480:	01400034 	movhi	r5,0
    4484:	29510004 	addi	r5,r5,17408
    4488:	00051e01 	jmpi	51e0 <_fwalk_reent>

0000448c <__fp_unlock>:
    448c:	0005883a 	mov	r2,zero
    4490:	f800283a 	ret

00004494 <_cleanup_r>:
    4494:	01400074 	movhi	r5,1
    4498:	29647e04 	addi	r5,r5,-28168
    449c:	00051e01 	jmpi	51e0 <_fwalk_reent>

000044a0 <__sinit.part.1>:
    44a0:	defff704 	addi	sp,sp,-36
    44a4:	00c00034 	movhi	r3,0
    44a8:	dfc00815 	stw	ra,32(sp)
    44ac:	ddc00715 	stw	r23,28(sp)
    44b0:	dd800615 	stw	r22,24(sp)
    44b4:	dd400515 	stw	r21,20(sp)
    44b8:	dd000415 	stw	r20,16(sp)
    44bc:	dcc00315 	stw	r19,12(sp)
    44c0:	dc800215 	stw	r18,8(sp)
    44c4:	dc400115 	stw	r17,4(sp)
    44c8:	dc000015 	stw	r16,0(sp)
    44cc:	18d12504 	addi	r3,r3,17556
    44d0:	24000117 	ldw	r16,4(r4)
    44d4:	20c00f15 	stw	r3,60(r4)
    44d8:	2080bb04 	addi	r2,r4,748
    44dc:	00c000c4 	movi	r3,3
    44e0:	20c0b915 	stw	r3,740(r4)
    44e4:	2080ba15 	stw	r2,744(r4)
    44e8:	2000b815 	stw	zero,736(r4)
    44ec:	05c00204 	movi	r23,8
    44f0:	00800104 	movi	r2,4
    44f4:	2025883a 	mov	r18,r4
    44f8:	b80d883a 	mov	r6,r23
    44fc:	81001704 	addi	r4,r16,92
    4500:	000b883a 	mov	r5,zero
    4504:	80000015 	stw	zero,0(r16)
    4508:	80000115 	stw	zero,4(r16)
    450c:	80000215 	stw	zero,8(r16)
    4510:	8080030d 	sth	r2,12(r16)
    4514:	80001915 	stw	zero,100(r16)
    4518:	8000038d 	sth	zero,14(r16)
    451c:	80000415 	stw	zero,16(r16)
    4520:	80000515 	stw	zero,20(r16)
    4524:	80000615 	stw	zero,24(r16)
    4528:	00060d00 	call	60d0 <memset>
    452c:	05800034 	movhi	r22,0
    4530:	94400217 	ldw	r17,8(r18)
    4534:	05400034 	movhi	r21,0
    4538:	05000034 	movhi	r20,0
    453c:	04c00034 	movhi	r19,0
    4540:	b59e0804 	addi	r22,r22,30752
    4544:	ad5e1f04 	addi	r21,r21,30844
    4548:	a51e3e04 	addi	r20,r20,30968
    454c:	9cde5504 	addi	r19,r19,31060
    4550:	85800815 	stw	r22,32(r16)
    4554:	85400915 	stw	r21,36(r16)
    4558:	85000a15 	stw	r20,40(r16)
    455c:	84c00b15 	stw	r19,44(r16)
    4560:	84000715 	stw	r16,28(r16)
    4564:	00800284 	movi	r2,10
    4568:	8880030d 	sth	r2,12(r17)
    456c:	00800044 	movi	r2,1
    4570:	b80d883a 	mov	r6,r23
    4574:	89001704 	addi	r4,r17,92
    4578:	000b883a 	mov	r5,zero
    457c:	88000015 	stw	zero,0(r17)
    4580:	88000115 	stw	zero,4(r17)
    4584:	88000215 	stw	zero,8(r17)
    4588:	88001915 	stw	zero,100(r17)
    458c:	8880038d 	sth	r2,14(r17)
    4590:	88000415 	stw	zero,16(r17)
    4594:	88000515 	stw	zero,20(r17)
    4598:	88000615 	stw	zero,24(r17)
    459c:	00060d00 	call	60d0 <memset>
    45a0:	94000317 	ldw	r16,12(r18)
    45a4:	00800484 	movi	r2,18
    45a8:	8c400715 	stw	r17,28(r17)
    45ac:	8d800815 	stw	r22,32(r17)
    45b0:	8d400915 	stw	r21,36(r17)
    45b4:	8d000a15 	stw	r20,40(r17)
    45b8:	8cc00b15 	stw	r19,44(r17)
    45bc:	8080030d 	sth	r2,12(r16)
    45c0:	00800084 	movi	r2,2
    45c4:	80000015 	stw	zero,0(r16)
    45c8:	80000115 	stw	zero,4(r16)
    45cc:	80000215 	stw	zero,8(r16)
    45d0:	80001915 	stw	zero,100(r16)
    45d4:	8080038d 	sth	r2,14(r16)
    45d8:	80000415 	stw	zero,16(r16)
    45dc:	80000515 	stw	zero,20(r16)
    45e0:	80000615 	stw	zero,24(r16)
    45e4:	b80d883a 	mov	r6,r23
    45e8:	000b883a 	mov	r5,zero
    45ec:	81001704 	addi	r4,r16,92
    45f0:	00060d00 	call	60d0 <memset>
    45f4:	00800044 	movi	r2,1
    45f8:	84000715 	stw	r16,28(r16)
    45fc:	85800815 	stw	r22,32(r16)
    4600:	85400915 	stw	r21,36(r16)
    4604:	85000a15 	stw	r20,40(r16)
    4608:	84c00b15 	stw	r19,44(r16)
    460c:	90800e15 	stw	r2,56(r18)
    4610:	dfc00817 	ldw	ra,32(sp)
    4614:	ddc00717 	ldw	r23,28(sp)
    4618:	dd800617 	ldw	r22,24(sp)
    461c:	dd400517 	ldw	r21,20(sp)
    4620:	dd000417 	ldw	r20,16(sp)
    4624:	dcc00317 	ldw	r19,12(sp)
    4628:	dc800217 	ldw	r18,8(sp)
    462c:	dc400117 	ldw	r17,4(sp)
    4630:	dc000017 	ldw	r16,0(sp)
    4634:	dec00904 	addi	sp,sp,36
    4638:	f800283a 	ret

0000463c <__fp_lock>:
    463c:	0005883a 	mov	r2,zero
    4640:	f800283a 	ret

00004644 <__sfmoreglue>:
    4644:	defffc04 	addi	sp,sp,-16
    4648:	dc400115 	stw	r17,4(sp)
    464c:	2c7fffc4 	addi	r17,r5,-1
    4650:	8c401a24 	muli	r17,r17,104
    4654:	dc800215 	stw	r18,8(sp)
    4658:	2825883a 	mov	r18,r5
    465c:	89401d04 	addi	r5,r17,116
    4660:	dc000015 	stw	r16,0(sp)
    4664:	dfc00315 	stw	ra,12(sp)
    4668:	000553c0 	call	553c <_malloc_r>
    466c:	1021883a 	mov	r16,r2
    4670:	10000726 	beq	r2,zero,4690 <__sfmoreglue+0x4c>
    4674:	11000304 	addi	r4,r2,12
    4678:	10000015 	stw	zero,0(r2)
    467c:	14800115 	stw	r18,4(r2)
    4680:	11000215 	stw	r4,8(r2)
    4684:	89801a04 	addi	r6,r17,104
    4688:	000b883a 	mov	r5,zero
    468c:	00060d00 	call	60d0 <memset>
    4690:	8005883a 	mov	r2,r16
    4694:	dfc00317 	ldw	ra,12(sp)
    4698:	dc800217 	ldw	r18,8(sp)
    469c:	dc400117 	ldw	r17,4(sp)
    46a0:	dc000017 	ldw	r16,0(sp)
    46a4:	dec00404 	addi	sp,sp,16
    46a8:	f800283a 	ret

000046ac <__sfp>:
    46ac:	defffb04 	addi	sp,sp,-20
    46b0:	dc000015 	stw	r16,0(sp)
    46b4:	04000074 	movhi	r16,1
    46b8:	8404ce04 	addi	r16,r16,4920
    46bc:	dcc00315 	stw	r19,12(sp)
    46c0:	2027883a 	mov	r19,r4
    46c4:	81000017 	ldw	r4,0(r16)
    46c8:	dfc00415 	stw	ra,16(sp)
    46cc:	dc800215 	stw	r18,8(sp)
    46d0:	20800e17 	ldw	r2,56(r4)
    46d4:	dc400115 	stw	r17,4(sp)
    46d8:	1000021e 	bne	r2,zero,46e4 <__sfp+0x38>
    46dc:	00044a00 	call	44a0 <__sinit.part.1>
    46e0:	81000017 	ldw	r4,0(r16)
    46e4:	2480b804 	addi	r18,r4,736
    46e8:	047fffc4 	movi	r17,-1
    46ec:	91000117 	ldw	r4,4(r18)
    46f0:	94000217 	ldw	r16,8(r18)
    46f4:	213fffc4 	addi	r4,r4,-1
    46f8:	20000a16 	blt	r4,zero,4724 <__sfp+0x78>
    46fc:	8080030f 	ldh	r2,12(r16)
    4700:	10000c26 	beq	r2,zero,4734 <__sfp+0x88>
    4704:	80c01d04 	addi	r3,r16,116
    4708:	00000206 	br	4714 <__sfp+0x68>
    470c:	18bfe60f 	ldh	r2,-104(r3)
    4710:	10000826 	beq	r2,zero,4734 <__sfp+0x88>
    4714:	213fffc4 	addi	r4,r4,-1
    4718:	1c3ffd04 	addi	r16,r3,-12
    471c:	18c01a04 	addi	r3,r3,104
    4720:	247ffa1e 	bne	r4,r17,470c <__sfp+0x60>
    4724:	90800017 	ldw	r2,0(r18)
    4728:	10001d26 	beq	r2,zero,47a0 <__sfp+0xf4>
    472c:	1025883a 	mov	r18,r2
    4730:	003fee06 	br	46ec <__sfp+0x40>
    4734:	00bfffc4 	movi	r2,-1
    4738:	8080038d 	sth	r2,14(r16)
    473c:	00800044 	movi	r2,1
    4740:	8080030d 	sth	r2,12(r16)
    4744:	80001915 	stw	zero,100(r16)
    4748:	80000015 	stw	zero,0(r16)
    474c:	80000215 	stw	zero,8(r16)
    4750:	80000115 	stw	zero,4(r16)
    4754:	80000415 	stw	zero,16(r16)
    4758:	80000515 	stw	zero,20(r16)
    475c:	80000615 	stw	zero,24(r16)
    4760:	01800204 	movi	r6,8
    4764:	000b883a 	mov	r5,zero
    4768:	81001704 	addi	r4,r16,92
    476c:	00060d00 	call	60d0 <memset>
    4770:	8005883a 	mov	r2,r16
    4774:	80000c15 	stw	zero,48(r16)
    4778:	80000d15 	stw	zero,52(r16)
    477c:	80001115 	stw	zero,68(r16)
    4780:	80001215 	stw	zero,72(r16)
    4784:	dfc00417 	ldw	ra,16(sp)
    4788:	dcc00317 	ldw	r19,12(sp)
    478c:	dc800217 	ldw	r18,8(sp)
    4790:	dc400117 	ldw	r17,4(sp)
    4794:	dc000017 	ldw	r16,0(sp)
    4798:	dec00504 	addi	sp,sp,20
    479c:	f800283a 	ret
    47a0:	01400104 	movi	r5,4
    47a4:	9809883a 	mov	r4,r19
    47a8:	00046440 	call	4644 <__sfmoreglue>
    47ac:	90800015 	stw	r2,0(r18)
    47b0:	103fde1e 	bne	r2,zero,472c <__sfp+0x80>
    47b4:	00800304 	movi	r2,12
    47b8:	98800015 	stw	r2,0(r19)
    47bc:	0005883a 	mov	r2,zero
    47c0:	003ff006 	br	4784 <__sfp+0xd8>

000047c4 <_cleanup>:
    47c4:	00800074 	movhi	r2,1
    47c8:	1084ce04 	addi	r2,r2,4920
    47cc:	11000017 	ldw	r4,0(r2)
    47d0:	01400074 	movhi	r5,1
    47d4:	29647e04 	addi	r5,r5,-28168
    47d8:	00051e01 	jmpi	51e0 <_fwalk_reent>

000047dc <__sinit>:
    47dc:	20800e17 	ldw	r2,56(r4)
    47e0:	10000126 	beq	r2,zero,47e8 <__sinit+0xc>
    47e4:	f800283a 	ret
    47e8:	00044a01 	jmpi	44a0 <__sinit.part.1>

000047ec <__sfp_lock_acquire>:
    47ec:	f800283a 	ret

000047f0 <__sfp_lock_release>:
    47f0:	f800283a 	ret

000047f4 <__sinit_lock_acquire>:
    47f4:	f800283a 	ret

000047f8 <__sinit_lock_release>:
    47f8:	f800283a 	ret

000047fc <__fp_lock_all>:
    47fc:	00800074 	movhi	r2,1
    4800:	1084cf04 	addi	r2,r2,4924
    4804:	11000017 	ldw	r4,0(r2)
    4808:	01400034 	movhi	r5,0
    480c:	29518f04 	addi	r5,r5,17980
    4810:	000511c1 	jmpi	511c <_fwalk>

00004814 <__fp_unlock_all>:
    4814:	00800074 	movhi	r2,1
    4818:	1084cf04 	addi	r2,r2,4924
    481c:	11000017 	ldw	r4,0(r2)
    4820:	01400034 	movhi	r5,0
    4824:	29512304 	addi	r5,r5,17548
    4828:	000511c1 	jmpi	511c <_fwalk>

0000482c <_malloc_trim_r>:
    482c:	defffb04 	addi	sp,sp,-20
    4830:	dcc00315 	stw	r19,12(sp)
    4834:	04c00074 	movhi	r19,1
    4838:	dc800215 	stw	r18,8(sp)
    483c:	dc400115 	stw	r17,4(sp)
    4840:	dc000015 	stw	r16,0(sp)
    4844:	dfc00415 	stw	ra,16(sp)
    4848:	2821883a 	mov	r16,r5
    484c:	9cff4a04 	addi	r19,r19,-728
    4850:	2025883a 	mov	r18,r4
    4854:	000d24c0 	call	d24c <__malloc_lock>
    4858:	98800217 	ldw	r2,8(r19)
    485c:	14400117 	ldw	r17,4(r2)
    4860:	00bfff04 	movi	r2,-4
    4864:	88a2703a 	and	r17,r17,r2
    4868:	8c21c83a 	sub	r16,r17,r16
    486c:	8403fbc4 	addi	r16,r16,4079
    4870:	8020d33a 	srli	r16,r16,12
    4874:	0083ffc4 	movi	r2,4095
    4878:	843fffc4 	addi	r16,r16,-1
    487c:	8020933a 	slli	r16,r16,12
    4880:	1400060e 	bge	r2,r16,489c <_malloc_trim_r+0x70>
    4884:	000b883a 	mov	r5,zero
    4888:	9009883a 	mov	r4,r18
    488c:	00077cc0 	call	77cc <_sbrk_r>
    4890:	98c00217 	ldw	r3,8(r19)
    4894:	1c47883a 	add	r3,r3,r17
    4898:	10c00a26 	beq	r2,r3,48c4 <_malloc_trim_r+0x98>
    489c:	9009883a 	mov	r4,r18
    48a0:	000d2700 	call	d270 <__malloc_unlock>
    48a4:	0005883a 	mov	r2,zero
    48a8:	dfc00417 	ldw	ra,16(sp)
    48ac:	dcc00317 	ldw	r19,12(sp)
    48b0:	dc800217 	ldw	r18,8(sp)
    48b4:	dc400117 	ldw	r17,4(sp)
    48b8:	dc000017 	ldw	r16,0(sp)
    48bc:	dec00504 	addi	sp,sp,20
    48c0:	f800283a 	ret
    48c4:	040bc83a 	sub	r5,zero,r16
    48c8:	9009883a 	mov	r4,r18
    48cc:	00077cc0 	call	77cc <_sbrk_r>
    48d0:	00ffffc4 	movi	r3,-1
    48d4:	10c00d26 	beq	r2,r3,490c <_malloc_trim_r+0xe0>
    48d8:	00c00074 	movhi	r3,1
    48dc:	18cba704 	addi	r3,r3,11932
    48e0:	18800017 	ldw	r2,0(r3)
    48e4:	99000217 	ldw	r4,8(r19)
    48e8:	8c23c83a 	sub	r17,r17,r16
    48ec:	8c400054 	ori	r17,r17,1
    48f0:	1421c83a 	sub	r16,r2,r16
    48f4:	24400115 	stw	r17,4(r4)
    48f8:	9009883a 	mov	r4,r18
    48fc:	1c000015 	stw	r16,0(r3)
    4900:	000d2700 	call	d270 <__malloc_unlock>
    4904:	00800044 	movi	r2,1
    4908:	003fe706 	br	48a8 <_malloc_trim_r+0x7c>
    490c:	000b883a 	mov	r5,zero
    4910:	9009883a 	mov	r4,r18
    4914:	00077cc0 	call	77cc <_sbrk_r>
    4918:	99000217 	ldw	r4,8(r19)
    491c:	014003c4 	movi	r5,15
    4920:	1107c83a 	sub	r3,r2,r4
    4924:	28ffdd0e 	bge	r5,r3,489c <_malloc_trim_r+0x70>
    4928:	01400074 	movhi	r5,1
    492c:	2944d104 	addi	r5,r5,4932
    4930:	29400017 	ldw	r5,0(r5)
    4934:	18c00054 	ori	r3,r3,1
    4938:	20c00115 	stw	r3,4(r4)
    493c:	00c00074 	movhi	r3,1
    4940:	1145c83a 	sub	r2,r2,r5
    4944:	18cba704 	addi	r3,r3,11932
    4948:	18800015 	stw	r2,0(r3)
    494c:	003fd306 	br	489c <_malloc_trim_r+0x70>

00004950 <_free_r>:
    4950:	28004126 	beq	r5,zero,4a58 <_free_r+0x108>
    4954:	defffd04 	addi	sp,sp,-12
    4958:	dc400115 	stw	r17,4(sp)
    495c:	dc000015 	stw	r16,0(sp)
    4960:	2023883a 	mov	r17,r4
    4964:	2821883a 	mov	r16,r5
    4968:	dfc00215 	stw	ra,8(sp)
    496c:	000d24c0 	call	d24c <__malloc_lock>
    4970:	81ffff17 	ldw	r7,-4(r16)
    4974:	00bfff84 	movi	r2,-2
    4978:	01000074 	movhi	r4,1
    497c:	81bffe04 	addi	r6,r16,-8
    4980:	3884703a 	and	r2,r7,r2
    4984:	213f4a04 	addi	r4,r4,-728
    4988:	308b883a 	add	r5,r6,r2
    498c:	2a400117 	ldw	r9,4(r5)
    4990:	22000217 	ldw	r8,8(r4)
    4994:	00ffff04 	movi	r3,-4
    4998:	48c6703a 	and	r3,r9,r3
    499c:	2a005726 	beq	r5,r8,4afc <_free_r+0x1ac>
    49a0:	28c00115 	stw	r3,4(r5)
    49a4:	39c0004c 	andi	r7,r7,1
    49a8:	3800091e 	bne	r7,zero,49d0 <_free_r+0x80>
    49ac:	823ffe17 	ldw	r8,-8(r16)
    49b0:	22400204 	addi	r9,r4,8
    49b4:	320dc83a 	sub	r6,r6,r8
    49b8:	31c00217 	ldw	r7,8(r6)
    49bc:	1205883a 	add	r2,r2,r8
    49c0:	3a406526 	beq	r7,r9,4b58 <_free_r+0x208>
    49c4:	32000317 	ldw	r8,12(r6)
    49c8:	3a000315 	stw	r8,12(r7)
    49cc:	41c00215 	stw	r7,8(r8)
    49d0:	28cf883a 	add	r7,r5,r3
    49d4:	39c00117 	ldw	r7,4(r7)
    49d8:	39c0004c 	andi	r7,r7,1
    49dc:	38003a26 	beq	r7,zero,4ac8 <_free_r+0x178>
    49e0:	10c00054 	ori	r3,r2,1
    49e4:	30c00115 	stw	r3,4(r6)
    49e8:	3087883a 	add	r3,r6,r2
    49ec:	18800015 	stw	r2,0(r3)
    49f0:	00c07fc4 	movi	r3,511
    49f4:	18801936 	bltu	r3,r2,4a5c <_free_r+0x10c>
    49f8:	1004d0fa 	srli	r2,r2,3
    49fc:	01c00044 	movi	r7,1
    4a00:	21400117 	ldw	r5,4(r4)
    4a04:	10c00044 	addi	r3,r2,1
    4a08:	18c7883a 	add	r3,r3,r3
    4a0c:	1005d0ba 	srai	r2,r2,2
    4a10:	18c7883a 	add	r3,r3,r3
    4a14:	18c7883a 	add	r3,r3,r3
    4a18:	1907883a 	add	r3,r3,r4
    4a1c:	3884983a 	sll	r2,r7,r2
    4a20:	19c00017 	ldw	r7,0(r3)
    4a24:	1a3ffe04 	addi	r8,r3,-8
    4a28:	1144b03a 	or	r2,r2,r5
    4a2c:	32000315 	stw	r8,12(r6)
    4a30:	31c00215 	stw	r7,8(r6)
    4a34:	20800115 	stw	r2,4(r4)
    4a38:	19800015 	stw	r6,0(r3)
    4a3c:	39800315 	stw	r6,12(r7)
    4a40:	8809883a 	mov	r4,r17
    4a44:	dfc00217 	ldw	ra,8(sp)
    4a48:	dc400117 	ldw	r17,4(sp)
    4a4c:	dc000017 	ldw	r16,0(sp)
    4a50:	dec00304 	addi	sp,sp,12
    4a54:	000d2701 	jmpi	d270 <__malloc_unlock>
    4a58:	f800283a 	ret
    4a5c:	100ad27a 	srli	r5,r2,9
    4a60:	00c00104 	movi	r3,4
    4a64:	19404a36 	bltu	r3,r5,4b90 <_free_r+0x240>
    4a68:	100ad1ba 	srli	r5,r2,6
    4a6c:	28c00e44 	addi	r3,r5,57
    4a70:	18c7883a 	add	r3,r3,r3
    4a74:	29400e04 	addi	r5,r5,56
    4a78:	18c7883a 	add	r3,r3,r3
    4a7c:	18c7883a 	add	r3,r3,r3
    4a80:	1909883a 	add	r4,r3,r4
    4a84:	20c00017 	ldw	r3,0(r4)
    4a88:	01c00074 	movhi	r7,1
    4a8c:	213ffe04 	addi	r4,r4,-8
    4a90:	39ff4a04 	addi	r7,r7,-728
    4a94:	20c04426 	beq	r4,r3,4ba8 <_free_r+0x258>
    4a98:	01ffff04 	movi	r7,-4
    4a9c:	19400117 	ldw	r5,4(r3)
    4aa0:	29ca703a 	and	r5,r5,r7
    4aa4:	1140022e 	bgeu	r2,r5,4ab0 <_free_r+0x160>
    4aa8:	18c00217 	ldw	r3,8(r3)
    4aac:	20fffb1e 	bne	r4,r3,4a9c <_free_r+0x14c>
    4ab0:	19000317 	ldw	r4,12(r3)
    4ab4:	31000315 	stw	r4,12(r6)
    4ab8:	30c00215 	stw	r3,8(r6)
    4abc:	21800215 	stw	r6,8(r4)
    4ac0:	19800315 	stw	r6,12(r3)
    4ac4:	003fde06 	br	4a40 <_free_r+0xf0>
    4ac8:	29c00217 	ldw	r7,8(r5)
    4acc:	10c5883a 	add	r2,r2,r3
    4ad0:	00c00074 	movhi	r3,1
    4ad4:	18ff4c04 	addi	r3,r3,-720
    4ad8:	38c03b26 	beq	r7,r3,4bc8 <_free_r+0x278>
    4adc:	2a000317 	ldw	r8,12(r5)
    4ae0:	11400054 	ori	r5,r2,1
    4ae4:	3087883a 	add	r3,r6,r2
    4ae8:	3a000315 	stw	r8,12(r7)
    4aec:	41c00215 	stw	r7,8(r8)
    4af0:	31400115 	stw	r5,4(r6)
    4af4:	18800015 	stw	r2,0(r3)
    4af8:	003fbd06 	br	49f0 <_free_r+0xa0>
    4afc:	39c0004c 	andi	r7,r7,1
    4b00:	10c5883a 	add	r2,r2,r3
    4b04:	3800071e 	bne	r7,zero,4b24 <_free_r+0x1d4>
    4b08:	81fffe17 	ldw	r7,-8(r16)
    4b0c:	31cdc83a 	sub	r6,r6,r7
    4b10:	30c00317 	ldw	r3,12(r6)
    4b14:	31400217 	ldw	r5,8(r6)
    4b18:	11c5883a 	add	r2,r2,r7
    4b1c:	28c00315 	stw	r3,12(r5)
    4b20:	19400215 	stw	r5,8(r3)
    4b24:	10c00054 	ori	r3,r2,1
    4b28:	30c00115 	stw	r3,4(r6)
    4b2c:	00c00074 	movhi	r3,1
    4b30:	18c4d204 	addi	r3,r3,4936
    4b34:	18c00017 	ldw	r3,0(r3)
    4b38:	21800215 	stw	r6,8(r4)
    4b3c:	10ffc036 	bltu	r2,r3,4a40 <_free_r+0xf0>
    4b40:	00800074 	movhi	r2,1
    4b44:	108b9e04 	addi	r2,r2,11896
    4b48:	11400017 	ldw	r5,0(r2)
    4b4c:	8809883a 	mov	r4,r17
    4b50:	000482c0 	call	482c <_malloc_trim_r>
    4b54:	003fba06 	br	4a40 <_free_r+0xf0>
    4b58:	28c9883a 	add	r4,r5,r3
    4b5c:	21000117 	ldw	r4,4(r4)
    4b60:	2100004c 	andi	r4,r4,1
    4b64:	2000391e 	bne	r4,zero,4c4c <_free_r+0x2fc>
    4b68:	29c00217 	ldw	r7,8(r5)
    4b6c:	29000317 	ldw	r4,12(r5)
    4b70:	1885883a 	add	r2,r3,r2
    4b74:	10c00054 	ori	r3,r2,1
    4b78:	39000315 	stw	r4,12(r7)
    4b7c:	21c00215 	stw	r7,8(r4)
    4b80:	30c00115 	stw	r3,4(r6)
    4b84:	308d883a 	add	r6,r6,r2
    4b88:	30800015 	stw	r2,0(r6)
    4b8c:	003fac06 	br	4a40 <_free_r+0xf0>
    4b90:	00c00504 	movi	r3,20
    4b94:	19401536 	bltu	r3,r5,4bec <_free_r+0x29c>
    4b98:	28c01704 	addi	r3,r5,92
    4b9c:	18c7883a 	add	r3,r3,r3
    4ba0:	294016c4 	addi	r5,r5,91
    4ba4:	003fb406 	br	4a78 <_free_r+0x128>
    4ba8:	280bd0ba 	srai	r5,r5,2
    4bac:	00c00044 	movi	r3,1
    4bb0:	38800117 	ldw	r2,4(r7)
    4bb4:	194a983a 	sll	r5,r3,r5
    4bb8:	2007883a 	mov	r3,r4
    4bbc:	2884b03a 	or	r2,r5,r2
    4bc0:	38800115 	stw	r2,4(r7)
    4bc4:	003fbb06 	br	4ab4 <_free_r+0x164>
    4bc8:	21800515 	stw	r6,20(r4)
    4bcc:	21800415 	stw	r6,16(r4)
    4bd0:	10c00054 	ori	r3,r2,1
    4bd4:	31c00315 	stw	r7,12(r6)
    4bd8:	31c00215 	stw	r7,8(r6)
    4bdc:	30c00115 	stw	r3,4(r6)
    4be0:	308d883a 	add	r6,r6,r2
    4be4:	30800015 	stw	r2,0(r6)
    4be8:	003f9506 	br	4a40 <_free_r+0xf0>
    4bec:	00c01504 	movi	r3,84
    4bf0:	19400536 	bltu	r3,r5,4c08 <_free_r+0x2b8>
    4bf4:	100ad33a 	srli	r5,r2,12
    4bf8:	28c01bc4 	addi	r3,r5,111
    4bfc:	18c7883a 	add	r3,r3,r3
    4c00:	29401b84 	addi	r5,r5,110
    4c04:	003f9c06 	br	4a78 <_free_r+0x128>
    4c08:	00c05504 	movi	r3,340
    4c0c:	19400536 	bltu	r3,r5,4c24 <_free_r+0x2d4>
    4c10:	100ad3fa 	srli	r5,r2,15
    4c14:	28c01e04 	addi	r3,r5,120
    4c18:	18c7883a 	add	r3,r3,r3
    4c1c:	29401dc4 	addi	r5,r5,119
    4c20:	003f9506 	br	4a78 <_free_r+0x128>
    4c24:	00c15504 	movi	r3,1364
    4c28:	19400536 	bltu	r3,r5,4c40 <_free_r+0x2f0>
    4c2c:	100ad4ba 	srli	r5,r2,18
    4c30:	28c01f44 	addi	r3,r5,125
    4c34:	18c7883a 	add	r3,r3,r3
    4c38:	29401f04 	addi	r5,r5,124
    4c3c:	003f8e06 	br	4a78 <_free_r+0x128>
    4c40:	00c03f84 	movi	r3,254
    4c44:	01401f84 	movi	r5,126
    4c48:	003f8b06 	br	4a78 <_free_r+0x128>
    4c4c:	10c00054 	ori	r3,r2,1
    4c50:	30c00115 	stw	r3,4(r6)
    4c54:	308d883a 	add	r6,r6,r2
    4c58:	30800015 	stw	r2,0(r6)
    4c5c:	003f7806 	br	4a40 <_free_r+0xf0>

00004c60 <__sfvwrite_r>:
    4c60:	30800217 	ldw	r2,8(r6)
    4c64:	10006726 	beq	r2,zero,4e04 <__sfvwrite_r+0x1a4>
    4c68:	28c0030b 	ldhu	r3,12(r5)
    4c6c:	defff404 	addi	sp,sp,-48
    4c70:	dd400715 	stw	r21,28(sp)
    4c74:	dd000615 	stw	r20,24(sp)
    4c78:	dc000215 	stw	r16,8(sp)
    4c7c:	dfc00b15 	stw	ra,44(sp)
    4c80:	df000a15 	stw	fp,40(sp)
    4c84:	ddc00915 	stw	r23,36(sp)
    4c88:	dd800815 	stw	r22,32(sp)
    4c8c:	dcc00515 	stw	r19,20(sp)
    4c90:	dc800415 	stw	r18,16(sp)
    4c94:	dc400315 	stw	r17,12(sp)
    4c98:	1880020c 	andi	r2,r3,8
    4c9c:	2821883a 	mov	r16,r5
    4ca0:	202b883a 	mov	r21,r4
    4ca4:	3029883a 	mov	r20,r6
    4ca8:	10002726 	beq	r2,zero,4d48 <__sfvwrite_r+0xe8>
    4cac:	28800417 	ldw	r2,16(r5)
    4cb0:	10002526 	beq	r2,zero,4d48 <__sfvwrite_r+0xe8>
    4cb4:	1880008c 	andi	r2,r3,2
    4cb8:	a4400017 	ldw	r17,0(r20)
    4cbc:	10002a26 	beq	r2,zero,4d68 <__sfvwrite_r+0x108>
    4cc0:	05a00034 	movhi	r22,32768
    4cc4:	0027883a 	mov	r19,zero
    4cc8:	0025883a 	mov	r18,zero
    4ccc:	b5bf0004 	addi	r22,r22,-1024
    4cd0:	980d883a 	mov	r6,r19
    4cd4:	a809883a 	mov	r4,r21
    4cd8:	90004626 	beq	r18,zero,4df4 <__sfvwrite_r+0x194>
    4cdc:	900f883a 	mov	r7,r18
    4ce0:	b480022e 	bgeu	r22,r18,4cec <__sfvwrite_r+0x8c>
    4ce4:	01e00034 	movhi	r7,32768
    4ce8:	39ff0004 	addi	r7,r7,-1024
    4cec:	80800917 	ldw	r2,36(r16)
    4cf0:	81400717 	ldw	r5,28(r16)
    4cf4:	103ee83a 	callr	r2
    4cf8:	0080570e 	bge	zero,r2,4e58 <__sfvwrite_r+0x1f8>
    4cfc:	a0c00217 	ldw	r3,8(r20)
    4d00:	98a7883a 	add	r19,r19,r2
    4d04:	90a5c83a 	sub	r18,r18,r2
    4d08:	1885c83a 	sub	r2,r3,r2
    4d0c:	a0800215 	stw	r2,8(r20)
    4d10:	103fef1e 	bne	r2,zero,4cd0 <__sfvwrite_r+0x70>
    4d14:	0005883a 	mov	r2,zero
    4d18:	dfc00b17 	ldw	ra,44(sp)
    4d1c:	df000a17 	ldw	fp,40(sp)
    4d20:	ddc00917 	ldw	r23,36(sp)
    4d24:	dd800817 	ldw	r22,32(sp)
    4d28:	dd400717 	ldw	r21,28(sp)
    4d2c:	dd000617 	ldw	r20,24(sp)
    4d30:	dcc00517 	ldw	r19,20(sp)
    4d34:	dc800417 	ldw	r18,16(sp)
    4d38:	dc400317 	ldw	r17,12(sp)
    4d3c:	dc000217 	ldw	r16,8(sp)
    4d40:	dec00c04 	addi	sp,sp,48
    4d44:	f800283a 	ret
    4d48:	800b883a 	mov	r5,r16
    4d4c:	a809883a 	mov	r4,r21
    4d50:	00028080 	call	2808 <__swsetup_r>
    4d54:	1000eb1e 	bne	r2,zero,5104 <__sfvwrite_r+0x4a4>
    4d58:	80c0030b 	ldhu	r3,12(r16)
    4d5c:	a4400017 	ldw	r17,0(r20)
    4d60:	1880008c 	andi	r2,r3,2
    4d64:	103fd61e 	bne	r2,zero,4cc0 <__sfvwrite_r+0x60>
    4d68:	1880004c 	andi	r2,r3,1
    4d6c:	10003f1e 	bne	r2,zero,4e6c <__sfvwrite_r+0x20c>
    4d70:	0039883a 	mov	fp,zero
    4d74:	0025883a 	mov	r18,zero
    4d78:	90001a26 	beq	r18,zero,4de4 <__sfvwrite_r+0x184>
    4d7c:	1880800c 	andi	r2,r3,512
    4d80:	84c00217 	ldw	r19,8(r16)
    4d84:	10002126 	beq	r2,zero,4e0c <__sfvwrite_r+0x1ac>
    4d88:	982f883a 	mov	r23,r19
    4d8c:	94c09336 	bltu	r18,r19,4fdc <__sfvwrite_r+0x37c>
    4d90:	1881200c 	andi	r2,r3,1152
    4d94:	10009e1e 	bne	r2,zero,5010 <__sfvwrite_r+0x3b0>
    4d98:	81000017 	ldw	r4,0(r16)
    4d9c:	b80d883a 	mov	r6,r23
    4da0:	e00b883a 	mov	r5,fp
    4da4:	0005f740 	call	5f74 <memmove>
    4da8:	80c00217 	ldw	r3,8(r16)
    4dac:	81000017 	ldw	r4,0(r16)
    4db0:	9005883a 	mov	r2,r18
    4db4:	1ce7c83a 	sub	r19,r3,r19
    4db8:	25cf883a 	add	r7,r4,r23
    4dbc:	84c00215 	stw	r19,8(r16)
    4dc0:	81c00015 	stw	r7,0(r16)
    4dc4:	a0c00217 	ldw	r3,8(r20)
    4dc8:	e0b9883a 	add	fp,fp,r2
    4dcc:	90a5c83a 	sub	r18,r18,r2
    4dd0:	18a7c83a 	sub	r19,r3,r2
    4dd4:	a4c00215 	stw	r19,8(r20)
    4dd8:	983fce26 	beq	r19,zero,4d14 <__sfvwrite_r+0xb4>
    4ddc:	80c0030b 	ldhu	r3,12(r16)
    4de0:	903fe61e 	bne	r18,zero,4d7c <__sfvwrite_r+0x11c>
    4de4:	8f000017 	ldw	fp,0(r17)
    4de8:	8c800117 	ldw	r18,4(r17)
    4dec:	8c400204 	addi	r17,r17,8
    4df0:	003fe106 	br	4d78 <__sfvwrite_r+0x118>
    4df4:	8cc00017 	ldw	r19,0(r17)
    4df8:	8c800117 	ldw	r18,4(r17)
    4dfc:	8c400204 	addi	r17,r17,8
    4e00:	003fb306 	br	4cd0 <__sfvwrite_r+0x70>
    4e04:	0005883a 	mov	r2,zero
    4e08:	f800283a 	ret
    4e0c:	81000017 	ldw	r4,0(r16)
    4e10:	80800417 	ldw	r2,16(r16)
    4e14:	11005736 	bltu	r2,r4,4f74 <__sfvwrite_r+0x314>
    4e18:	85c00517 	ldw	r23,20(r16)
    4e1c:	95c05536 	bltu	r18,r23,4f74 <__sfvwrite_r+0x314>
    4e20:	00a00034 	movhi	r2,32768
    4e24:	10bfffc4 	addi	r2,r2,-1
    4e28:	9009883a 	mov	r4,r18
    4e2c:	1480012e 	bgeu	r2,r18,4e34 <__sfvwrite_r+0x1d4>
    4e30:	1009883a 	mov	r4,r2
    4e34:	b80b883a 	mov	r5,r23
    4e38:	000a4640 	call	a464 <__divsi3>
    4e3c:	15cf383a 	mul	r7,r2,r23
    4e40:	81400717 	ldw	r5,28(r16)
    4e44:	80800917 	ldw	r2,36(r16)
    4e48:	e00d883a 	mov	r6,fp
    4e4c:	a809883a 	mov	r4,r21
    4e50:	103ee83a 	callr	r2
    4e54:	00bfdb16 	blt	zero,r2,4dc4 <__sfvwrite_r+0x164>
    4e58:	8080030b 	ldhu	r2,12(r16)
    4e5c:	10801014 	ori	r2,r2,64
    4e60:	8080030d 	sth	r2,12(r16)
    4e64:	00bfffc4 	movi	r2,-1
    4e68:	003fab06 	br	4d18 <__sfvwrite_r+0xb8>
    4e6c:	0027883a 	mov	r19,zero
    4e70:	0011883a 	mov	r8,zero
    4e74:	0039883a 	mov	fp,zero
    4e78:	0025883a 	mov	r18,zero
    4e7c:	90001f26 	beq	r18,zero,4efc <__sfvwrite_r+0x29c>
    4e80:	40005a26 	beq	r8,zero,4fec <__sfvwrite_r+0x38c>
    4e84:	982d883a 	mov	r22,r19
    4e88:	94c0012e 	bgeu	r18,r19,4e90 <__sfvwrite_r+0x230>
    4e8c:	902d883a 	mov	r22,r18
    4e90:	81000017 	ldw	r4,0(r16)
    4e94:	80800417 	ldw	r2,16(r16)
    4e98:	b02f883a 	mov	r23,r22
    4e9c:	81c00517 	ldw	r7,20(r16)
    4ea0:	1100032e 	bgeu	r2,r4,4eb0 <__sfvwrite_r+0x250>
    4ea4:	80c00217 	ldw	r3,8(r16)
    4ea8:	38c7883a 	add	r3,r7,r3
    4eac:	1d801816 	blt	r3,r22,4f10 <__sfvwrite_r+0x2b0>
    4eb0:	b1c03e16 	blt	r22,r7,4fac <__sfvwrite_r+0x34c>
    4eb4:	80800917 	ldw	r2,36(r16)
    4eb8:	81400717 	ldw	r5,28(r16)
    4ebc:	e00d883a 	mov	r6,fp
    4ec0:	da000115 	stw	r8,4(sp)
    4ec4:	a809883a 	mov	r4,r21
    4ec8:	103ee83a 	callr	r2
    4ecc:	102f883a 	mov	r23,r2
    4ed0:	da000117 	ldw	r8,4(sp)
    4ed4:	00bfe00e 	bge	zero,r2,4e58 <__sfvwrite_r+0x1f8>
    4ed8:	9de7c83a 	sub	r19,r19,r23
    4edc:	98001f26 	beq	r19,zero,4f5c <__sfvwrite_r+0x2fc>
    4ee0:	a0800217 	ldw	r2,8(r20)
    4ee4:	e5f9883a 	add	fp,fp,r23
    4ee8:	95e5c83a 	sub	r18,r18,r23
    4eec:	15efc83a 	sub	r23,r2,r23
    4ef0:	a5c00215 	stw	r23,8(r20)
    4ef4:	b83f8726 	beq	r23,zero,4d14 <__sfvwrite_r+0xb4>
    4ef8:	903fe11e 	bne	r18,zero,4e80 <__sfvwrite_r+0x220>
    4efc:	8f000017 	ldw	fp,0(r17)
    4f00:	8c800117 	ldw	r18,4(r17)
    4f04:	0011883a 	mov	r8,zero
    4f08:	8c400204 	addi	r17,r17,8
    4f0c:	003fdb06 	br	4e7c <__sfvwrite_r+0x21c>
    4f10:	180d883a 	mov	r6,r3
    4f14:	e00b883a 	mov	r5,fp
    4f18:	da000115 	stw	r8,4(sp)
    4f1c:	d8c00015 	stw	r3,0(sp)
    4f20:	0005f740 	call	5f74 <memmove>
    4f24:	d8c00017 	ldw	r3,0(sp)
    4f28:	80800017 	ldw	r2,0(r16)
    4f2c:	800b883a 	mov	r5,r16
    4f30:	a809883a 	mov	r4,r21
    4f34:	10c5883a 	add	r2,r2,r3
    4f38:	80800015 	stw	r2,0(r16)
    4f3c:	d8c00015 	stw	r3,0(sp)
    4f40:	00044000 	call	4400 <_fflush_r>
    4f44:	d8c00017 	ldw	r3,0(sp)
    4f48:	da000117 	ldw	r8,4(sp)
    4f4c:	103fc21e 	bne	r2,zero,4e58 <__sfvwrite_r+0x1f8>
    4f50:	182f883a 	mov	r23,r3
    4f54:	9de7c83a 	sub	r19,r19,r23
    4f58:	983fe11e 	bne	r19,zero,4ee0 <__sfvwrite_r+0x280>
    4f5c:	800b883a 	mov	r5,r16
    4f60:	a809883a 	mov	r4,r21
    4f64:	00044000 	call	4400 <_fflush_r>
    4f68:	103fbb1e 	bne	r2,zero,4e58 <__sfvwrite_r+0x1f8>
    4f6c:	0011883a 	mov	r8,zero
    4f70:	003fdb06 	br	4ee0 <__sfvwrite_r+0x280>
    4f74:	94c0012e 	bgeu	r18,r19,4f7c <__sfvwrite_r+0x31c>
    4f78:	9027883a 	mov	r19,r18
    4f7c:	980d883a 	mov	r6,r19
    4f80:	e00b883a 	mov	r5,fp
    4f84:	0005f740 	call	5f74 <memmove>
    4f88:	80800217 	ldw	r2,8(r16)
    4f8c:	80c00017 	ldw	r3,0(r16)
    4f90:	14c5c83a 	sub	r2,r2,r19
    4f94:	1cc7883a 	add	r3,r3,r19
    4f98:	80800215 	stw	r2,8(r16)
    4f9c:	80c00015 	stw	r3,0(r16)
    4fa0:	10004326 	beq	r2,zero,50b0 <__sfvwrite_r+0x450>
    4fa4:	9805883a 	mov	r2,r19
    4fa8:	003f8606 	br	4dc4 <__sfvwrite_r+0x164>
    4fac:	b00d883a 	mov	r6,r22
    4fb0:	e00b883a 	mov	r5,fp
    4fb4:	da000115 	stw	r8,4(sp)
    4fb8:	0005f740 	call	5f74 <memmove>
    4fbc:	80800217 	ldw	r2,8(r16)
    4fc0:	80c00017 	ldw	r3,0(r16)
    4fc4:	da000117 	ldw	r8,4(sp)
    4fc8:	1585c83a 	sub	r2,r2,r22
    4fcc:	1dad883a 	add	r22,r3,r22
    4fd0:	80800215 	stw	r2,8(r16)
    4fd4:	85800015 	stw	r22,0(r16)
    4fd8:	003fbf06 	br	4ed8 <__sfvwrite_r+0x278>
    4fdc:	81000017 	ldw	r4,0(r16)
    4fe0:	9027883a 	mov	r19,r18
    4fe4:	902f883a 	mov	r23,r18
    4fe8:	003f6c06 	br	4d9c <__sfvwrite_r+0x13c>
    4fec:	900d883a 	mov	r6,r18
    4ff0:	01400284 	movi	r5,10
    4ff4:	e009883a 	mov	r4,fp
    4ff8:	0005d480 	call	5d48 <memchr>
    4ffc:	10003e26 	beq	r2,zero,50f8 <__sfvwrite_r+0x498>
    5000:	10800044 	addi	r2,r2,1
    5004:	1727c83a 	sub	r19,r2,fp
    5008:	02000044 	movi	r8,1
    500c:	003f9d06 	br	4e84 <__sfvwrite_r+0x224>
    5010:	80800517 	ldw	r2,20(r16)
    5014:	81400417 	ldw	r5,16(r16)
    5018:	81c00017 	ldw	r7,0(r16)
    501c:	10a7883a 	add	r19,r2,r2
    5020:	9885883a 	add	r2,r19,r2
    5024:	1026d7fa 	srli	r19,r2,31
    5028:	396dc83a 	sub	r22,r7,r5
    502c:	b1000044 	addi	r4,r22,1
    5030:	9885883a 	add	r2,r19,r2
    5034:	1027d07a 	srai	r19,r2,1
    5038:	2485883a 	add	r2,r4,r18
    503c:	980d883a 	mov	r6,r19
    5040:	9880022e 	bgeu	r19,r2,504c <__sfvwrite_r+0x3ec>
    5044:	1027883a 	mov	r19,r2
    5048:	100d883a 	mov	r6,r2
    504c:	18c1000c 	andi	r3,r3,1024
    5050:	18001c26 	beq	r3,zero,50c4 <__sfvwrite_r+0x464>
    5054:	300b883a 	mov	r5,r6
    5058:	a809883a 	mov	r4,r21
    505c:	000553c0 	call	553c <_malloc_r>
    5060:	102f883a 	mov	r23,r2
    5064:	10002926 	beq	r2,zero,510c <__sfvwrite_r+0x4ac>
    5068:	81400417 	ldw	r5,16(r16)
    506c:	b00d883a 	mov	r6,r22
    5070:	1009883a 	mov	r4,r2
    5074:	0005e2c0 	call	5e2c <memcpy>
    5078:	8080030b 	ldhu	r2,12(r16)
    507c:	00fedfc4 	movi	r3,-1153
    5080:	10c4703a 	and	r2,r2,r3
    5084:	10802014 	ori	r2,r2,128
    5088:	8080030d 	sth	r2,12(r16)
    508c:	bd89883a 	add	r4,r23,r22
    5090:	9d8fc83a 	sub	r7,r19,r22
    5094:	85c00415 	stw	r23,16(r16)
    5098:	84c00515 	stw	r19,20(r16)
    509c:	81000015 	stw	r4,0(r16)
    50a0:	9027883a 	mov	r19,r18
    50a4:	81c00215 	stw	r7,8(r16)
    50a8:	902f883a 	mov	r23,r18
    50ac:	003f3b06 	br	4d9c <__sfvwrite_r+0x13c>
    50b0:	800b883a 	mov	r5,r16
    50b4:	a809883a 	mov	r4,r21
    50b8:	00044000 	call	4400 <_fflush_r>
    50bc:	103fb926 	beq	r2,zero,4fa4 <__sfvwrite_r+0x344>
    50c0:	003f6506 	br	4e58 <__sfvwrite_r+0x1f8>
    50c4:	a809883a 	mov	r4,r21
    50c8:	00071f40 	call	71f4 <_realloc_r>
    50cc:	102f883a 	mov	r23,r2
    50d0:	103fee1e 	bne	r2,zero,508c <__sfvwrite_r+0x42c>
    50d4:	81400417 	ldw	r5,16(r16)
    50d8:	a809883a 	mov	r4,r21
    50dc:	00049500 	call	4950 <_free_r>
    50e0:	8080030b 	ldhu	r2,12(r16)
    50e4:	00ffdfc4 	movi	r3,-129
    50e8:	1884703a 	and	r2,r3,r2
    50ec:	00c00304 	movi	r3,12
    50f0:	a8c00015 	stw	r3,0(r21)
    50f4:	003f5906 	br	4e5c <__sfvwrite_r+0x1fc>
    50f8:	94c00044 	addi	r19,r18,1
    50fc:	02000044 	movi	r8,1
    5100:	003f6006 	br	4e84 <__sfvwrite_r+0x224>
    5104:	00bfffc4 	movi	r2,-1
    5108:	003f0306 	br	4d18 <__sfvwrite_r+0xb8>
    510c:	00800304 	movi	r2,12
    5110:	a8800015 	stw	r2,0(r21)
    5114:	8080030b 	ldhu	r2,12(r16)
    5118:	003f5006 	br	4e5c <__sfvwrite_r+0x1fc>

0000511c <_fwalk>:
    511c:	defff704 	addi	sp,sp,-36
    5120:	dd000415 	stw	r20,16(sp)
    5124:	dfc00815 	stw	ra,32(sp)
    5128:	ddc00715 	stw	r23,28(sp)
    512c:	dd800615 	stw	r22,24(sp)
    5130:	dd400515 	stw	r21,20(sp)
    5134:	dcc00315 	stw	r19,12(sp)
    5138:	dc800215 	stw	r18,8(sp)
    513c:	dc400115 	stw	r17,4(sp)
    5140:	dc000015 	stw	r16,0(sp)
    5144:	2500b804 	addi	r20,r4,736
    5148:	a0002326 	beq	r20,zero,51d8 <_fwalk+0xbc>
    514c:	282b883a 	mov	r21,r5
    5150:	002f883a 	mov	r23,zero
    5154:	05800044 	movi	r22,1
    5158:	04ffffc4 	movi	r19,-1
    515c:	a4400117 	ldw	r17,4(r20)
    5160:	a4800217 	ldw	r18,8(r20)
    5164:	8c7fffc4 	addi	r17,r17,-1
    5168:	88000d16 	blt	r17,zero,51a0 <_fwalk+0x84>
    516c:	94000304 	addi	r16,r18,12
    5170:	94800384 	addi	r18,r18,14
    5174:	8080000b 	ldhu	r2,0(r16)
    5178:	8c7fffc4 	addi	r17,r17,-1
    517c:	813ffd04 	addi	r4,r16,-12
    5180:	b080042e 	bgeu	r22,r2,5194 <_fwalk+0x78>
    5184:	9080000f 	ldh	r2,0(r18)
    5188:	14c00226 	beq	r2,r19,5194 <_fwalk+0x78>
    518c:	a83ee83a 	callr	r21
    5190:	b8aeb03a 	or	r23,r23,r2
    5194:	84001a04 	addi	r16,r16,104
    5198:	94801a04 	addi	r18,r18,104
    519c:	8cfff51e 	bne	r17,r19,5174 <_fwalk+0x58>
    51a0:	a5000017 	ldw	r20,0(r20)
    51a4:	a03fed1e 	bne	r20,zero,515c <_fwalk+0x40>
    51a8:	b805883a 	mov	r2,r23
    51ac:	dfc00817 	ldw	ra,32(sp)
    51b0:	ddc00717 	ldw	r23,28(sp)
    51b4:	dd800617 	ldw	r22,24(sp)
    51b8:	dd400517 	ldw	r21,20(sp)
    51bc:	dd000417 	ldw	r20,16(sp)
    51c0:	dcc00317 	ldw	r19,12(sp)
    51c4:	dc800217 	ldw	r18,8(sp)
    51c8:	dc400117 	ldw	r17,4(sp)
    51cc:	dc000017 	ldw	r16,0(sp)
    51d0:	dec00904 	addi	sp,sp,36
    51d4:	f800283a 	ret
    51d8:	002f883a 	mov	r23,zero
    51dc:	003ff206 	br	51a8 <_fwalk+0x8c>

000051e0 <_fwalk_reent>:
    51e0:	defff704 	addi	sp,sp,-36
    51e4:	dd000415 	stw	r20,16(sp)
    51e8:	dfc00815 	stw	ra,32(sp)
    51ec:	ddc00715 	stw	r23,28(sp)
    51f0:	dd800615 	stw	r22,24(sp)
    51f4:	dd400515 	stw	r21,20(sp)
    51f8:	dcc00315 	stw	r19,12(sp)
    51fc:	dc800215 	stw	r18,8(sp)
    5200:	dc400115 	stw	r17,4(sp)
    5204:	dc000015 	stw	r16,0(sp)
    5208:	2500b804 	addi	r20,r4,736
    520c:	a0002326 	beq	r20,zero,529c <_fwalk_reent+0xbc>
    5210:	282b883a 	mov	r21,r5
    5214:	2027883a 	mov	r19,r4
    5218:	002f883a 	mov	r23,zero
    521c:	05800044 	movi	r22,1
    5220:	04bfffc4 	movi	r18,-1
    5224:	a4400117 	ldw	r17,4(r20)
    5228:	a4000217 	ldw	r16,8(r20)
    522c:	8c7fffc4 	addi	r17,r17,-1
    5230:	88000c16 	blt	r17,zero,5264 <_fwalk_reent+0x84>
    5234:	84000304 	addi	r16,r16,12
    5238:	8080000b 	ldhu	r2,0(r16)
    523c:	8c7fffc4 	addi	r17,r17,-1
    5240:	817ffd04 	addi	r5,r16,-12
    5244:	b080052e 	bgeu	r22,r2,525c <_fwalk_reent+0x7c>
    5248:	8080008f 	ldh	r2,2(r16)
    524c:	9809883a 	mov	r4,r19
    5250:	14800226 	beq	r2,r18,525c <_fwalk_reent+0x7c>
    5254:	a83ee83a 	callr	r21
    5258:	b8aeb03a 	or	r23,r23,r2
    525c:	84001a04 	addi	r16,r16,104
    5260:	8cbff51e 	bne	r17,r18,5238 <_fwalk_reent+0x58>
    5264:	a5000017 	ldw	r20,0(r20)
    5268:	a03fee1e 	bne	r20,zero,5224 <_fwalk_reent+0x44>
    526c:	b805883a 	mov	r2,r23
    5270:	dfc00817 	ldw	ra,32(sp)
    5274:	ddc00717 	ldw	r23,28(sp)
    5278:	dd800617 	ldw	r22,24(sp)
    527c:	dd400517 	ldw	r21,20(sp)
    5280:	dd000417 	ldw	r20,16(sp)
    5284:	dcc00317 	ldw	r19,12(sp)
    5288:	dc800217 	ldw	r18,8(sp)
    528c:	dc400117 	ldw	r17,4(sp)
    5290:	dc000017 	ldw	r16,0(sp)
    5294:	dec00904 	addi	sp,sp,36
    5298:	f800283a 	ret
    529c:	002f883a 	mov	r23,zero
    52a0:	003ff206 	br	526c <_fwalk_reent+0x8c>

000052a4 <_setlocale_r>:
    52a4:	30001b26 	beq	r6,zero,5314 <_setlocale_r+0x70>
    52a8:	01400074 	movhi	r5,1
    52ac:	defffe04 	addi	sp,sp,-8
    52b0:	297d8604 	addi	r5,r5,-2536
    52b4:	3009883a 	mov	r4,r6
    52b8:	dc000015 	stw	r16,0(sp)
    52bc:	dfc00115 	stw	ra,4(sp)
    52c0:	3021883a 	mov	r16,r6
    52c4:	000795c0 	call	795c <strcmp>
    52c8:	1000061e 	bne	r2,zero,52e4 <_setlocale_r+0x40>
    52cc:	00800074 	movhi	r2,1
    52d0:	10bd8504 	addi	r2,r2,-2540
    52d4:	dfc00117 	ldw	ra,4(sp)
    52d8:	dc000017 	ldw	r16,0(sp)
    52dc:	dec00204 	addi	sp,sp,8
    52e0:	f800283a 	ret
    52e4:	01400074 	movhi	r5,1
    52e8:	297d8504 	addi	r5,r5,-2540
    52ec:	8009883a 	mov	r4,r16
    52f0:	000795c0 	call	795c <strcmp>
    52f4:	103ff526 	beq	r2,zero,52cc <_setlocale_r+0x28>
    52f8:	01400074 	movhi	r5,1
    52fc:	297d7004 	addi	r5,r5,-2624
    5300:	8009883a 	mov	r4,r16
    5304:	000795c0 	call	795c <strcmp>
    5308:	103ff026 	beq	r2,zero,52cc <_setlocale_r+0x28>
    530c:	0005883a 	mov	r2,zero
    5310:	003ff006 	br	52d4 <_setlocale_r+0x30>
    5314:	00800074 	movhi	r2,1
    5318:	10bd8504 	addi	r2,r2,-2540
    531c:	f800283a 	ret

00005320 <__locale_charset>:
    5320:	00800074 	movhi	r2,1
    5324:	10bf3404 	addi	r2,r2,-816
    5328:	f800283a 	ret

0000532c <__locale_mb_cur_max>:
    532c:	00800074 	movhi	r2,1
    5330:	1084d004 	addi	r2,r2,4928
    5334:	10800017 	ldw	r2,0(r2)
    5338:	f800283a 	ret

0000533c <__locale_msgcharset>:
    533c:	00800074 	movhi	r2,1
    5340:	10bf2c04 	addi	r2,r2,-848
    5344:	f800283a 	ret

00005348 <__locale_cjk_lang>:
    5348:	0005883a 	mov	r2,zero
    534c:	f800283a 	ret

00005350 <_localeconv_r>:
    5350:	00800074 	movhi	r2,1
    5354:	10bf3c04 	addi	r2,r2,-784
    5358:	f800283a 	ret

0000535c <setlocale>:
    535c:	00800074 	movhi	r2,1
    5360:	1084cf04 	addi	r2,r2,4924
    5364:	280d883a 	mov	r6,r5
    5368:	200b883a 	mov	r5,r4
    536c:	11000017 	ldw	r4,0(r2)
    5370:	00052a41 	jmpi	52a4 <_setlocale_r>

00005374 <localeconv>:
    5374:	00800074 	movhi	r2,1
    5378:	10bf3c04 	addi	r2,r2,-784
    537c:	f800283a 	ret

00005380 <__smakebuf_r>:
    5380:	2880030b 	ldhu	r2,12(r5)
    5384:	10c0008c 	andi	r3,r2,2
    5388:	1800411e 	bne	r3,zero,5490 <__smakebuf_r+0x110>
    538c:	deffec04 	addi	sp,sp,-80
    5390:	dc000f15 	stw	r16,60(sp)
    5394:	2821883a 	mov	r16,r5
    5398:	2940038f 	ldh	r5,14(r5)
    539c:	dc401015 	stw	r17,64(sp)
    53a0:	dfc01315 	stw	ra,76(sp)
    53a4:	dcc01215 	stw	r19,72(sp)
    53a8:	dc801115 	stw	r18,68(sp)
    53ac:	2023883a 	mov	r17,r4
    53b0:	28001c16 	blt	r5,zero,5424 <__smakebuf_r+0xa4>
    53b4:	d80d883a 	mov	r6,sp
    53b8:	00095040 	call	9504 <_fstat_r>
    53bc:	10001816 	blt	r2,zero,5420 <__smakebuf_r+0xa0>
    53c0:	d8800117 	ldw	r2,4(sp)
    53c4:	00e00014 	movui	r3,32768
    53c8:	10bc000c 	andi	r2,r2,61440
    53cc:	14c80020 	cmpeqi	r19,r2,8192
    53d0:	10c03726 	beq	r2,r3,54b0 <__smakebuf_r+0x130>
    53d4:	80c0030b 	ldhu	r3,12(r16)
    53d8:	18c20014 	ori	r3,r3,2048
    53dc:	80c0030d 	sth	r3,12(r16)
    53e0:	00c80004 	movi	r3,8192
    53e4:	10c0521e 	bne	r2,r3,5530 <__smakebuf_r+0x1b0>
    53e8:	8140038f 	ldh	r5,14(r16)
    53ec:	8809883a 	mov	r4,r17
    53f0:	00095600 	call	9560 <_isatty_r>
    53f4:	10004c26 	beq	r2,zero,5528 <__smakebuf_r+0x1a8>
    53f8:	8080030b 	ldhu	r2,12(r16)
    53fc:	80c010c4 	addi	r3,r16,67
    5400:	80c00015 	stw	r3,0(r16)
    5404:	10800054 	ori	r2,r2,1
    5408:	8080030d 	sth	r2,12(r16)
    540c:	00800044 	movi	r2,1
    5410:	80c00415 	stw	r3,16(r16)
    5414:	80800515 	stw	r2,20(r16)
    5418:	04810004 	movi	r18,1024
    541c:	00000706 	br	543c <__smakebuf_r+0xbc>
    5420:	8080030b 	ldhu	r2,12(r16)
    5424:	10c0200c 	andi	r3,r2,128
    5428:	18001f1e 	bne	r3,zero,54a8 <__smakebuf_r+0x128>
    542c:	04810004 	movi	r18,1024
    5430:	10820014 	ori	r2,r2,2048
    5434:	8080030d 	sth	r2,12(r16)
    5438:	0027883a 	mov	r19,zero
    543c:	900b883a 	mov	r5,r18
    5440:	8809883a 	mov	r4,r17
    5444:	000553c0 	call	553c <_malloc_r>
    5448:	10002c26 	beq	r2,zero,54fc <__smakebuf_r+0x17c>
    544c:	80c0030b 	ldhu	r3,12(r16)
    5450:	01000034 	movhi	r4,0
    5454:	21112504 	addi	r4,r4,17556
    5458:	89000f15 	stw	r4,60(r17)
    545c:	18c02014 	ori	r3,r3,128
    5460:	80c0030d 	sth	r3,12(r16)
    5464:	80800015 	stw	r2,0(r16)
    5468:	80800415 	stw	r2,16(r16)
    546c:	84800515 	stw	r18,20(r16)
    5470:	98001a1e 	bne	r19,zero,54dc <__smakebuf_r+0x15c>
    5474:	dfc01317 	ldw	ra,76(sp)
    5478:	dcc01217 	ldw	r19,72(sp)
    547c:	dc801117 	ldw	r18,68(sp)
    5480:	dc401017 	ldw	r17,64(sp)
    5484:	dc000f17 	ldw	r16,60(sp)
    5488:	dec01404 	addi	sp,sp,80
    548c:	f800283a 	ret
    5490:	288010c4 	addi	r2,r5,67
    5494:	28800015 	stw	r2,0(r5)
    5498:	28800415 	stw	r2,16(r5)
    549c:	00800044 	movi	r2,1
    54a0:	28800515 	stw	r2,20(r5)
    54a4:	f800283a 	ret
    54a8:	04801004 	movi	r18,64
    54ac:	003fe006 	br	5430 <__smakebuf_r+0xb0>
    54b0:	81000a17 	ldw	r4,40(r16)
    54b4:	00c00034 	movhi	r3,0
    54b8:	18de3e04 	addi	r3,r3,30968
    54bc:	20ffc51e 	bne	r4,r3,53d4 <__smakebuf_r+0x54>
    54c0:	8080030b 	ldhu	r2,12(r16)
    54c4:	04810004 	movi	r18,1024
    54c8:	84801315 	stw	r18,76(r16)
    54cc:	1484b03a 	or	r2,r2,r18
    54d0:	8080030d 	sth	r2,12(r16)
    54d4:	0027883a 	mov	r19,zero
    54d8:	003fd806 	br	543c <__smakebuf_r+0xbc>
    54dc:	8140038f 	ldh	r5,14(r16)
    54e0:	8809883a 	mov	r4,r17
    54e4:	00095600 	call	9560 <_isatty_r>
    54e8:	103fe226 	beq	r2,zero,5474 <__smakebuf_r+0xf4>
    54ec:	8080030b 	ldhu	r2,12(r16)
    54f0:	10800054 	ori	r2,r2,1
    54f4:	8080030d 	sth	r2,12(r16)
    54f8:	003fde06 	br	5474 <__smakebuf_r+0xf4>
    54fc:	8080030b 	ldhu	r2,12(r16)
    5500:	10c0800c 	andi	r3,r2,512
    5504:	183fdb1e 	bne	r3,zero,5474 <__smakebuf_r+0xf4>
    5508:	10800094 	ori	r2,r2,2
    550c:	80c010c4 	addi	r3,r16,67
    5510:	8080030d 	sth	r2,12(r16)
    5514:	00800044 	movi	r2,1
    5518:	80c00015 	stw	r3,0(r16)
    551c:	80c00415 	stw	r3,16(r16)
    5520:	80800515 	stw	r2,20(r16)
    5524:	003fd306 	br	5474 <__smakebuf_r+0xf4>
    5528:	04810004 	movi	r18,1024
    552c:	003fc306 	br	543c <__smakebuf_r+0xbc>
    5530:	0027883a 	mov	r19,zero
    5534:	04810004 	movi	r18,1024
    5538:	003fc006 	br	543c <__smakebuf_r+0xbc>

0000553c <_malloc_r>:
    553c:	defff504 	addi	sp,sp,-44
    5540:	dc800315 	stw	r18,12(sp)
    5544:	dfc00a15 	stw	ra,40(sp)
    5548:	df000915 	stw	fp,36(sp)
    554c:	ddc00815 	stw	r23,32(sp)
    5550:	dd800715 	stw	r22,28(sp)
    5554:	dd400615 	stw	r21,24(sp)
    5558:	dd000515 	stw	r20,20(sp)
    555c:	dcc00415 	stw	r19,16(sp)
    5560:	dc400215 	stw	r17,8(sp)
    5564:	dc000115 	stw	r16,4(sp)
    5568:	288002c4 	addi	r2,r5,11
    556c:	00c00584 	movi	r3,22
    5570:	2025883a 	mov	r18,r4
    5574:	18807f2e 	bgeu	r3,r2,5774 <_malloc_r+0x238>
    5578:	047ffe04 	movi	r17,-8
    557c:	1462703a 	and	r17,r2,r17
    5580:	8800a316 	blt	r17,zero,5810 <_malloc_r+0x2d4>
    5584:	8940a236 	bltu	r17,r5,5810 <_malloc_r+0x2d4>
    5588:	000d24c0 	call	d24c <__malloc_lock>
    558c:	00807dc4 	movi	r2,503
    5590:	1441e92e 	bgeu	r2,r17,5d38 <_malloc_r+0x7fc>
    5594:	8804d27a 	srli	r2,r17,9
    5598:	1000a126 	beq	r2,zero,5820 <_malloc_r+0x2e4>
    559c:	00c00104 	movi	r3,4
    55a0:	18811e36 	bltu	r3,r2,5a1c <_malloc_r+0x4e0>
    55a4:	8804d1ba 	srli	r2,r17,6
    55a8:	12000e44 	addi	r8,r2,57
    55ac:	11c00e04 	addi	r7,r2,56
    55b0:	4209883a 	add	r4,r8,r8
    55b4:	04c00074 	movhi	r19,1
    55b8:	2109883a 	add	r4,r4,r4
    55bc:	9cff4a04 	addi	r19,r19,-728
    55c0:	2109883a 	add	r4,r4,r4
    55c4:	9909883a 	add	r4,r19,r4
    55c8:	24000117 	ldw	r16,4(r4)
    55cc:	213ffe04 	addi	r4,r4,-8
    55d0:	24009726 	beq	r4,r16,5830 <_malloc_r+0x2f4>
    55d4:	80800117 	ldw	r2,4(r16)
    55d8:	01bfff04 	movi	r6,-4
    55dc:	014003c4 	movi	r5,15
    55e0:	1184703a 	and	r2,r2,r6
    55e4:	1447c83a 	sub	r3,r2,r17
    55e8:	28c00716 	blt	r5,r3,5608 <_malloc_r+0xcc>
    55ec:	1800920e 	bge	r3,zero,5838 <_malloc_r+0x2fc>
    55f0:	84000317 	ldw	r16,12(r16)
    55f4:	24008e26 	beq	r4,r16,5830 <_malloc_r+0x2f4>
    55f8:	80800117 	ldw	r2,4(r16)
    55fc:	1184703a 	and	r2,r2,r6
    5600:	1447c83a 	sub	r3,r2,r17
    5604:	28fff90e 	bge	r5,r3,55ec <_malloc_r+0xb0>
    5608:	3809883a 	mov	r4,r7
    560c:	01800074 	movhi	r6,1
    5610:	9c000417 	ldw	r16,16(r19)
    5614:	31bf4a04 	addi	r6,r6,-728
    5618:	32000204 	addi	r8,r6,8
    561c:	82013426 	beq	r16,r8,5af0 <_malloc_r+0x5b4>
    5620:	80c00117 	ldw	r3,4(r16)
    5624:	00bfff04 	movi	r2,-4
    5628:	188e703a 	and	r7,r3,r2
    562c:	3c45c83a 	sub	r2,r7,r17
    5630:	00c003c4 	movi	r3,15
    5634:	18811f16 	blt	r3,r2,5ab4 <_malloc_r+0x578>
    5638:	32000515 	stw	r8,20(r6)
    563c:	32000415 	stw	r8,16(r6)
    5640:	10007f0e 	bge	r2,zero,5840 <_malloc_r+0x304>
    5644:	00807fc4 	movi	r2,511
    5648:	11c0fd36 	bltu	r2,r7,5a40 <_malloc_r+0x504>
    564c:	3806d0fa 	srli	r3,r7,3
    5650:	01c00044 	movi	r7,1
    5654:	30800117 	ldw	r2,4(r6)
    5658:	19400044 	addi	r5,r3,1
    565c:	294b883a 	add	r5,r5,r5
    5660:	1807d0ba 	srai	r3,r3,2
    5664:	294b883a 	add	r5,r5,r5
    5668:	294b883a 	add	r5,r5,r5
    566c:	298b883a 	add	r5,r5,r6
    5670:	38c6983a 	sll	r3,r7,r3
    5674:	29c00017 	ldw	r7,0(r5)
    5678:	2a7ffe04 	addi	r9,r5,-8
    567c:	1886b03a 	or	r3,r3,r2
    5680:	82400315 	stw	r9,12(r16)
    5684:	81c00215 	stw	r7,8(r16)
    5688:	30c00115 	stw	r3,4(r6)
    568c:	2c000015 	stw	r16,0(r5)
    5690:	3c000315 	stw	r16,12(r7)
    5694:	2005d0ba 	srai	r2,r4,2
    5698:	01400044 	movi	r5,1
    569c:	288a983a 	sll	r5,r5,r2
    56a0:	19406f36 	bltu	r3,r5,5860 <_malloc_r+0x324>
    56a4:	28c4703a 	and	r2,r5,r3
    56a8:	10000a1e 	bne	r2,zero,56d4 <_malloc_r+0x198>
    56ac:	00bfff04 	movi	r2,-4
    56b0:	294b883a 	add	r5,r5,r5
    56b4:	2088703a 	and	r4,r4,r2
    56b8:	28c4703a 	and	r2,r5,r3
    56bc:	21000104 	addi	r4,r4,4
    56c0:	1000041e 	bne	r2,zero,56d4 <_malloc_r+0x198>
    56c4:	294b883a 	add	r5,r5,r5
    56c8:	28c4703a 	and	r2,r5,r3
    56cc:	21000104 	addi	r4,r4,4
    56d0:	103ffc26 	beq	r2,zero,56c4 <_malloc_r+0x188>
    56d4:	02bfff04 	movi	r10,-4
    56d8:	024003c4 	movi	r9,15
    56dc:	21800044 	addi	r6,r4,1
    56e0:	318d883a 	add	r6,r6,r6
    56e4:	318d883a 	add	r6,r6,r6
    56e8:	318d883a 	add	r6,r6,r6
    56ec:	998d883a 	add	r6,r19,r6
    56f0:	333ffe04 	addi	r12,r6,-8
    56f4:	2017883a 	mov	r11,r4
    56f8:	31800104 	addi	r6,r6,4
    56fc:	34000017 	ldw	r16,0(r6)
    5700:	31fffd04 	addi	r7,r6,-12
    5704:	81c0041e 	bne	r16,r7,5718 <_malloc_r+0x1dc>
    5708:	0000fb06 	br	5af8 <_malloc_r+0x5bc>
    570c:	1801030e 	bge	r3,zero,5b1c <_malloc_r+0x5e0>
    5710:	84000317 	ldw	r16,12(r16)
    5714:	81c0f826 	beq	r16,r7,5af8 <_malloc_r+0x5bc>
    5718:	80800117 	ldw	r2,4(r16)
    571c:	1284703a 	and	r2,r2,r10
    5720:	1447c83a 	sub	r3,r2,r17
    5724:	48fff90e 	bge	r9,r3,570c <_malloc_r+0x1d0>
    5728:	80800317 	ldw	r2,12(r16)
    572c:	81000217 	ldw	r4,8(r16)
    5730:	89400054 	ori	r5,r17,1
    5734:	81400115 	stw	r5,4(r16)
    5738:	20800315 	stw	r2,12(r4)
    573c:	11000215 	stw	r4,8(r2)
    5740:	8463883a 	add	r17,r16,r17
    5744:	9c400515 	stw	r17,20(r19)
    5748:	9c400415 	stw	r17,16(r19)
    574c:	18800054 	ori	r2,r3,1
    5750:	88800115 	stw	r2,4(r17)
    5754:	8a000315 	stw	r8,12(r17)
    5758:	8a000215 	stw	r8,8(r17)
    575c:	88e3883a 	add	r17,r17,r3
    5760:	88c00015 	stw	r3,0(r17)
    5764:	9009883a 	mov	r4,r18
    5768:	000d2700 	call	d270 <__malloc_unlock>
    576c:	80800204 	addi	r2,r16,8
    5770:	00001b06 	br	57e0 <_malloc_r+0x2a4>
    5774:	04400404 	movi	r17,16
    5778:	89402536 	bltu	r17,r5,5810 <_malloc_r+0x2d4>
    577c:	000d24c0 	call	d24c <__malloc_lock>
    5780:	00800184 	movi	r2,6
    5784:	01000084 	movi	r4,2
    5788:	04c00074 	movhi	r19,1
    578c:	1085883a 	add	r2,r2,r2
    5790:	9cff4a04 	addi	r19,r19,-728
    5794:	1085883a 	add	r2,r2,r2
    5798:	9885883a 	add	r2,r19,r2
    579c:	14000117 	ldw	r16,4(r2)
    57a0:	10fffe04 	addi	r3,r2,-8
    57a4:	80c0d926 	beq	r16,r3,5b0c <_malloc_r+0x5d0>
    57a8:	80c00117 	ldw	r3,4(r16)
    57ac:	81000317 	ldw	r4,12(r16)
    57b0:	00bfff04 	movi	r2,-4
    57b4:	1884703a 	and	r2,r3,r2
    57b8:	81400217 	ldw	r5,8(r16)
    57bc:	8085883a 	add	r2,r16,r2
    57c0:	10c00117 	ldw	r3,4(r2)
    57c4:	29000315 	stw	r4,12(r5)
    57c8:	21400215 	stw	r5,8(r4)
    57cc:	18c00054 	ori	r3,r3,1
    57d0:	10c00115 	stw	r3,4(r2)
    57d4:	9009883a 	mov	r4,r18
    57d8:	000d2700 	call	d270 <__malloc_unlock>
    57dc:	80800204 	addi	r2,r16,8
    57e0:	dfc00a17 	ldw	ra,40(sp)
    57e4:	df000917 	ldw	fp,36(sp)
    57e8:	ddc00817 	ldw	r23,32(sp)
    57ec:	dd800717 	ldw	r22,28(sp)
    57f0:	dd400617 	ldw	r21,24(sp)
    57f4:	dd000517 	ldw	r20,20(sp)
    57f8:	dcc00417 	ldw	r19,16(sp)
    57fc:	dc800317 	ldw	r18,12(sp)
    5800:	dc400217 	ldw	r17,8(sp)
    5804:	dc000117 	ldw	r16,4(sp)
    5808:	dec00b04 	addi	sp,sp,44
    580c:	f800283a 	ret
    5810:	00800304 	movi	r2,12
    5814:	90800015 	stw	r2,0(r18)
    5818:	0005883a 	mov	r2,zero
    581c:	003ff006 	br	57e0 <_malloc_r+0x2a4>
    5820:	01002004 	movi	r4,128
    5824:	02001004 	movi	r8,64
    5828:	01c00fc4 	movi	r7,63
    582c:	003f6106 	br	55b4 <_malloc_r+0x78>
    5830:	4009883a 	mov	r4,r8
    5834:	003f7506 	br	560c <_malloc_r+0xd0>
    5838:	81000317 	ldw	r4,12(r16)
    583c:	003fde06 	br	57b8 <_malloc_r+0x27c>
    5840:	81c5883a 	add	r2,r16,r7
    5844:	11400117 	ldw	r5,4(r2)
    5848:	9009883a 	mov	r4,r18
    584c:	29400054 	ori	r5,r5,1
    5850:	11400115 	stw	r5,4(r2)
    5854:	000d2700 	call	d270 <__malloc_unlock>
    5858:	80800204 	addi	r2,r16,8
    585c:	003fe006 	br	57e0 <_malloc_r+0x2a4>
    5860:	9c000217 	ldw	r16,8(r19)
    5864:	00bfff04 	movi	r2,-4
    5868:	85800117 	ldw	r22,4(r16)
    586c:	b0ac703a 	and	r22,r22,r2
    5870:	b4400336 	bltu	r22,r17,5880 <_malloc_r+0x344>
    5874:	b445c83a 	sub	r2,r22,r17
    5878:	00c003c4 	movi	r3,15
    587c:	18805d16 	blt	r3,r2,59f4 <_malloc_r+0x4b8>
    5880:	05c00074 	movhi	r23,1
    5884:	00800074 	movhi	r2,1
    5888:	108b9e04 	addi	r2,r2,11896
    588c:	bdc4d104 	addi	r23,r23,4932
    5890:	15400017 	ldw	r21,0(r2)
    5894:	b8c00017 	ldw	r3,0(r23)
    5898:	00bfffc4 	movi	r2,-1
    589c:	858d883a 	add	r6,r16,r22
    58a0:	8d6b883a 	add	r21,r17,r21
    58a4:	1880ea26 	beq	r3,r2,5c50 <_malloc_r+0x714>
    58a8:	ad4403c4 	addi	r21,r21,4111
    58ac:	00bc0004 	movi	r2,-4096
    58b0:	a8aa703a 	and	r21,r21,r2
    58b4:	a80b883a 	mov	r5,r21
    58b8:	9009883a 	mov	r4,r18
    58bc:	d9800015 	stw	r6,0(sp)
    58c0:	00077cc0 	call	77cc <_sbrk_r>
    58c4:	1029883a 	mov	r20,r2
    58c8:	00bfffc4 	movi	r2,-1
    58cc:	d9800017 	ldw	r6,0(sp)
    58d0:	a080e826 	beq	r20,r2,5c74 <_malloc_r+0x738>
    58d4:	a180a636 	bltu	r20,r6,5b70 <_malloc_r+0x634>
    58d8:	07000074 	movhi	fp,1
    58dc:	e70ba704 	addi	fp,fp,11932
    58e0:	e0800017 	ldw	r2,0(fp)
    58e4:	a887883a 	add	r3,r21,r2
    58e8:	e0c00015 	stw	r3,0(fp)
    58ec:	3500e626 	beq	r6,r20,5c88 <_malloc_r+0x74c>
    58f0:	b9000017 	ldw	r4,0(r23)
    58f4:	00bfffc4 	movi	r2,-1
    58f8:	2080ee26 	beq	r4,r2,5cb4 <_malloc_r+0x778>
    58fc:	a185c83a 	sub	r2,r20,r6
    5900:	10c5883a 	add	r2,r2,r3
    5904:	e0800015 	stw	r2,0(fp)
    5908:	a0c001cc 	andi	r3,r20,7
    590c:	1800bc26 	beq	r3,zero,5c00 <_malloc_r+0x6c4>
    5910:	a0e9c83a 	sub	r20,r20,r3
    5914:	00840204 	movi	r2,4104
    5918:	a5000204 	addi	r20,r20,8
    591c:	10c7c83a 	sub	r3,r2,r3
    5920:	a545883a 	add	r2,r20,r21
    5924:	1083ffcc 	andi	r2,r2,4095
    5928:	18abc83a 	sub	r21,r3,r2
    592c:	a80b883a 	mov	r5,r21
    5930:	9009883a 	mov	r4,r18
    5934:	00077cc0 	call	77cc <_sbrk_r>
    5938:	00ffffc4 	movi	r3,-1
    593c:	10c0e126 	beq	r2,r3,5cc4 <_malloc_r+0x788>
    5940:	1505c83a 	sub	r2,r2,r20
    5944:	1545883a 	add	r2,r2,r21
    5948:	10800054 	ori	r2,r2,1
    594c:	e0c00017 	ldw	r3,0(fp)
    5950:	9d000215 	stw	r20,8(r19)
    5954:	a0800115 	stw	r2,4(r20)
    5958:	a8c7883a 	add	r3,r21,r3
    595c:	e0c00015 	stw	r3,0(fp)
    5960:	84c00e26 	beq	r16,r19,599c <_malloc_r+0x460>
    5964:	018003c4 	movi	r6,15
    5968:	3580a72e 	bgeu	r6,r22,5c08 <_malloc_r+0x6cc>
    596c:	81400117 	ldw	r5,4(r16)
    5970:	013ffe04 	movi	r4,-8
    5974:	b0bffd04 	addi	r2,r22,-12
    5978:	1104703a 	and	r2,r2,r4
    597c:	2900004c 	andi	r4,r5,1
    5980:	2088b03a 	or	r4,r4,r2
    5984:	81000115 	stw	r4,4(r16)
    5988:	01400144 	movi	r5,5
    598c:	8089883a 	add	r4,r16,r2
    5990:	21400115 	stw	r5,4(r4)
    5994:	21400215 	stw	r5,8(r4)
    5998:	3080cd36 	bltu	r6,r2,5cd0 <_malloc_r+0x794>
    599c:	00800074 	movhi	r2,1
    59a0:	108b9d04 	addi	r2,r2,11892
    59a4:	11000017 	ldw	r4,0(r2)
    59a8:	20c0012e 	bgeu	r4,r3,59b0 <_malloc_r+0x474>
    59ac:	10c00015 	stw	r3,0(r2)
    59b0:	00800074 	movhi	r2,1
    59b4:	108b9c04 	addi	r2,r2,11888
    59b8:	11000017 	ldw	r4,0(r2)
    59bc:	9c000217 	ldw	r16,8(r19)
    59c0:	20c0012e 	bgeu	r4,r3,59c8 <_malloc_r+0x48c>
    59c4:	10c00015 	stw	r3,0(r2)
    59c8:	80c00117 	ldw	r3,4(r16)
    59cc:	00bfff04 	movi	r2,-4
    59d0:	1886703a 	and	r3,r3,r2
    59d4:	1c45c83a 	sub	r2,r3,r17
    59d8:	1c400236 	bltu	r3,r17,59e4 <_malloc_r+0x4a8>
    59dc:	00c003c4 	movi	r3,15
    59e0:	18800416 	blt	r3,r2,59f4 <_malloc_r+0x4b8>
    59e4:	9009883a 	mov	r4,r18
    59e8:	000d2700 	call	d270 <__malloc_unlock>
    59ec:	0005883a 	mov	r2,zero
    59f0:	003f7b06 	br	57e0 <_malloc_r+0x2a4>
    59f4:	88c00054 	ori	r3,r17,1
    59f8:	80c00115 	stw	r3,4(r16)
    59fc:	8463883a 	add	r17,r16,r17
    5a00:	10800054 	ori	r2,r2,1
    5a04:	9c400215 	stw	r17,8(r19)
    5a08:	88800115 	stw	r2,4(r17)
    5a0c:	9009883a 	mov	r4,r18
    5a10:	000d2700 	call	d270 <__malloc_unlock>
    5a14:	80800204 	addi	r2,r16,8
    5a18:	003f7106 	br	57e0 <_malloc_r+0x2a4>
    5a1c:	00c00504 	movi	r3,20
    5a20:	18804a2e 	bgeu	r3,r2,5b4c <_malloc_r+0x610>
    5a24:	00c01504 	movi	r3,84
    5a28:	18806e36 	bltu	r3,r2,5be4 <_malloc_r+0x6a8>
    5a2c:	8804d33a 	srli	r2,r17,12
    5a30:	12001bc4 	addi	r8,r2,111
    5a34:	11c01b84 	addi	r7,r2,110
    5a38:	4209883a 	add	r4,r8,r8
    5a3c:	003edd06 	br	55b4 <_malloc_r+0x78>
    5a40:	3804d27a 	srli	r2,r7,9
    5a44:	00c00104 	movi	r3,4
    5a48:	1880442e 	bgeu	r3,r2,5b5c <_malloc_r+0x620>
    5a4c:	00c00504 	movi	r3,20
    5a50:	18808136 	bltu	r3,r2,5c58 <_malloc_r+0x71c>
    5a54:	11401704 	addi	r5,r2,92
    5a58:	10c016c4 	addi	r3,r2,91
    5a5c:	294b883a 	add	r5,r5,r5
    5a60:	294b883a 	add	r5,r5,r5
    5a64:	294b883a 	add	r5,r5,r5
    5a68:	994b883a 	add	r5,r19,r5
    5a6c:	28800017 	ldw	r2,0(r5)
    5a70:	01800074 	movhi	r6,1
    5a74:	297ffe04 	addi	r5,r5,-8
    5a78:	31bf4a04 	addi	r6,r6,-728
    5a7c:	28806526 	beq	r5,r2,5c14 <_malloc_r+0x6d8>
    5a80:	01bfff04 	movi	r6,-4
    5a84:	10c00117 	ldw	r3,4(r2)
    5a88:	1986703a 	and	r3,r3,r6
    5a8c:	38c0022e 	bgeu	r7,r3,5a98 <_malloc_r+0x55c>
    5a90:	10800217 	ldw	r2,8(r2)
    5a94:	28bffb1e 	bne	r5,r2,5a84 <_malloc_r+0x548>
    5a98:	11400317 	ldw	r5,12(r2)
    5a9c:	98c00117 	ldw	r3,4(r19)
    5aa0:	81400315 	stw	r5,12(r16)
    5aa4:	80800215 	stw	r2,8(r16)
    5aa8:	2c000215 	stw	r16,8(r5)
    5aac:	14000315 	stw	r16,12(r2)
    5ab0:	003ef806 	br	5694 <_malloc_r+0x158>
    5ab4:	88c00054 	ori	r3,r17,1
    5ab8:	80c00115 	stw	r3,4(r16)
    5abc:	8463883a 	add	r17,r16,r17
    5ac0:	34400515 	stw	r17,20(r6)
    5ac4:	34400415 	stw	r17,16(r6)
    5ac8:	10c00054 	ori	r3,r2,1
    5acc:	8a000315 	stw	r8,12(r17)
    5ad0:	8a000215 	stw	r8,8(r17)
    5ad4:	88c00115 	stw	r3,4(r17)
    5ad8:	88a3883a 	add	r17,r17,r2
    5adc:	88800015 	stw	r2,0(r17)
    5ae0:	9009883a 	mov	r4,r18
    5ae4:	000d2700 	call	d270 <__malloc_unlock>
    5ae8:	80800204 	addi	r2,r16,8
    5aec:	003f3c06 	br	57e0 <_malloc_r+0x2a4>
    5af0:	30c00117 	ldw	r3,4(r6)
    5af4:	003ee706 	br	5694 <_malloc_r+0x158>
    5af8:	5ac00044 	addi	r11,r11,1
    5afc:	588000cc 	andi	r2,r11,3
    5b00:	31800204 	addi	r6,r6,8
    5b04:	103efd1e 	bne	r2,zero,56fc <_malloc_r+0x1c0>
    5b08:	00002406 	br	5b9c <_malloc_r+0x660>
    5b0c:	14000317 	ldw	r16,12(r2)
    5b10:	143f251e 	bne	r2,r16,57a8 <_malloc_r+0x26c>
    5b14:	21000084 	addi	r4,r4,2
    5b18:	003ebc06 	br	560c <_malloc_r+0xd0>
    5b1c:	8085883a 	add	r2,r16,r2
    5b20:	10c00117 	ldw	r3,4(r2)
    5b24:	81000317 	ldw	r4,12(r16)
    5b28:	81400217 	ldw	r5,8(r16)
    5b2c:	18c00054 	ori	r3,r3,1
    5b30:	10c00115 	stw	r3,4(r2)
    5b34:	29000315 	stw	r4,12(r5)
    5b38:	21400215 	stw	r5,8(r4)
    5b3c:	9009883a 	mov	r4,r18
    5b40:	000d2700 	call	d270 <__malloc_unlock>
    5b44:	80800204 	addi	r2,r16,8
    5b48:	003f2506 	br	57e0 <_malloc_r+0x2a4>
    5b4c:	12001704 	addi	r8,r2,92
    5b50:	11c016c4 	addi	r7,r2,91
    5b54:	4209883a 	add	r4,r8,r8
    5b58:	003e9606 	br	55b4 <_malloc_r+0x78>
    5b5c:	3804d1ba 	srli	r2,r7,6
    5b60:	11400e44 	addi	r5,r2,57
    5b64:	10c00e04 	addi	r3,r2,56
    5b68:	294b883a 	add	r5,r5,r5
    5b6c:	003fbc06 	br	5a60 <_malloc_r+0x524>
    5b70:	84ff5926 	beq	r16,r19,58d8 <_malloc_r+0x39c>
    5b74:	00800074 	movhi	r2,1
    5b78:	10bf4a04 	addi	r2,r2,-728
    5b7c:	14000217 	ldw	r16,8(r2)
    5b80:	00bfff04 	movi	r2,-4
    5b84:	80c00117 	ldw	r3,4(r16)
    5b88:	1886703a 	and	r3,r3,r2
    5b8c:	003f9106 	br	59d4 <_malloc_r+0x498>
    5b90:	60800217 	ldw	r2,8(r12)
    5b94:	213fffc4 	addi	r4,r4,-1
    5b98:	1300651e 	bne	r2,r12,5d30 <_malloc_r+0x7f4>
    5b9c:	208000cc 	andi	r2,r4,3
    5ba0:	633ffe04 	addi	r12,r12,-8
    5ba4:	103ffa1e 	bne	r2,zero,5b90 <_malloc_r+0x654>
    5ba8:	98800117 	ldw	r2,4(r19)
    5bac:	0146303a 	nor	r3,zero,r5
    5bb0:	1884703a 	and	r2,r3,r2
    5bb4:	98800115 	stw	r2,4(r19)
    5bb8:	294b883a 	add	r5,r5,r5
    5bbc:	117f2836 	bltu	r2,r5,5860 <_malloc_r+0x324>
    5bc0:	283f2726 	beq	r5,zero,5860 <_malloc_r+0x324>
    5bc4:	2886703a 	and	r3,r5,r2
    5bc8:	5809883a 	mov	r4,r11
    5bcc:	183ec31e 	bne	r3,zero,56dc <_malloc_r+0x1a0>
    5bd0:	294b883a 	add	r5,r5,r5
    5bd4:	2886703a 	and	r3,r5,r2
    5bd8:	21000104 	addi	r4,r4,4
    5bdc:	183ffc26 	beq	r3,zero,5bd0 <_malloc_r+0x694>
    5be0:	003ebe06 	br	56dc <_malloc_r+0x1a0>
    5be4:	00c05504 	movi	r3,340
    5be8:	18801236 	bltu	r3,r2,5c34 <_malloc_r+0x6f8>
    5bec:	8804d3fa 	srli	r2,r17,15
    5bf0:	12001e04 	addi	r8,r2,120
    5bf4:	11c01dc4 	addi	r7,r2,119
    5bf8:	4209883a 	add	r4,r8,r8
    5bfc:	003e6d06 	br	55b4 <_malloc_r+0x78>
    5c00:	00c40004 	movi	r3,4096
    5c04:	003f4606 	br	5920 <_malloc_r+0x3e4>
    5c08:	00800044 	movi	r2,1
    5c0c:	a0800115 	stw	r2,4(r20)
    5c10:	003f7406 	br	59e4 <_malloc_r+0x4a8>
    5c14:	1805d0ba 	srai	r2,r3,2
    5c18:	01c00044 	movi	r7,1
    5c1c:	30c00117 	ldw	r3,4(r6)
    5c20:	388e983a 	sll	r7,r7,r2
    5c24:	2805883a 	mov	r2,r5
    5c28:	38c6b03a 	or	r3,r7,r3
    5c2c:	30c00115 	stw	r3,4(r6)
    5c30:	003f9b06 	br	5aa0 <_malloc_r+0x564>
    5c34:	00c15504 	movi	r3,1364
    5c38:	18801a36 	bltu	r3,r2,5ca4 <_malloc_r+0x768>
    5c3c:	8804d4ba 	srli	r2,r17,18
    5c40:	12001f44 	addi	r8,r2,125
    5c44:	11c01f04 	addi	r7,r2,124
    5c48:	4209883a 	add	r4,r8,r8
    5c4c:	003e5906 	br	55b4 <_malloc_r+0x78>
    5c50:	ad400404 	addi	r21,r21,16
    5c54:	003f1706 	br	58b4 <_malloc_r+0x378>
    5c58:	00c01504 	movi	r3,84
    5c5c:	18802336 	bltu	r3,r2,5cec <_malloc_r+0x7b0>
    5c60:	3804d33a 	srli	r2,r7,12
    5c64:	11401bc4 	addi	r5,r2,111
    5c68:	10c01b84 	addi	r3,r2,110
    5c6c:	294b883a 	add	r5,r5,r5
    5c70:	003f7b06 	br	5a60 <_malloc_r+0x524>
    5c74:	9c000217 	ldw	r16,8(r19)
    5c78:	00bfff04 	movi	r2,-4
    5c7c:	80c00117 	ldw	r3,4(r16)
    5c80:	1886703a 	and	r3,r3,r2
    5c84:	003f5306 	br	59d4 <_malloc_r+0x498>
    5c88:	3083ffcc 	andi	r2,r6,4095
    5c8c:	103f181e 	bne	r2,zero,58f0 <_malloc_r+0x3b4>
    5c90:	99000217 	ldw	r4,8(r19)
    5c94:	b545883a 	add	r2,r22,r21
    5c98:	10800054 	ori	r2,r2,1
    5c9c:	20800115 	stw	r2,4(r4)
    5ca0:	003f3e06 	br	599c <_malloc_r+0x460>
    5ca4:	01003f84 	movi	r4,254
    5ca8:	02001fc4 	movi	r8,127
    5cac:	01c01f84 	movi	r7,126
    5cb0:	003e4006 	br	55b4 <_malloc_r+0x78>
    5cb4:	00800074 	movhi	r2,1
    5cb8:	1084d104 	addi	r2,r2,4932
    5cbc:	15000015 	stw	r20,0(r2)
    5cc0:	003f1106 	br	5908 <_malloc_r+0x3cc>
    5cc4:	00800044 	movi	r2,1
    5cc8:	002b883a 	mov	r21,zero
    5ccc:	003f1f06 	br	594c <_malloc_r+0x410>
    5cd0:	81400204 	addi	r5,r16,8
    5cd4:	9009883a 	mov	r4,r18
    5cd8:	00049500 	call	4950 <_free_r>
    5cdc:	00800074 	movhi	r2,1
    5ce0:	108ba704 	addi	r2,r2,11932
    5ce4:	10c00017 	ldw	r3,0(r2)
    5ce8:	003f2c06 	br	599c <_malloc_r+0x460>
    5cec:	00c05504 	movi	r3,340
    5cf0:	18800536 	bltu	r3,r2,5d08 <_malloc_r+0x7cc>
    5cf4:	3804d3fa 	srli	r2,r7,15
    5cf8:	11401e04 	addi	r5,r2,120
    5cfc:	10c01dc4 	addi	r3,r2,119
    5d00:	294b883a 	add	r5,r5,r5
    5d04:	003f5606 	br	5a60 <_malloc_r+0x524>
    5d08:	00c15504 	movi	r3,1364
    5d0c:	18800536 	bltu	r3,r2,5d24 <_malloc_r+0x7e8>
    5d10:	3804d4ba 	srli	r2,r7,18
    5d14:	11401f44 	addi	r5,r2,125
    5d18:	10c01f04 	addi	r3,r2,124
    5d1c:	294b883a 	add	r5,r5,r5
    5d20:	003f4f06 	br	5a60 <_malloc_r+0x524>
    5d24:	01403f84 	movi	r5,254
    5d28:	00c01f84 	movi	r3,126
    5d2c:	003f4c06 	br	5a60 <_malloc_r+0x524>
    5d30:	98800117 	ldw	r2,4(r19)
    5d34:	003fa006 	br	5bb8 <_malloc_r+0x67c>
    5d38:	8808d0fa 	srli	r4,r17,3
    5d3c:	20800044 	addi	r2,r4,1
    5d40:	1085883a 	add	r2,r2,r2
    5d44:	003e9006 	br	5788 <_malloc_r+0x24c>

00005d48 <memchr>:
    5d48:	208000cc 	andi	r2,r4,3
    5d4c:	280f883a 	mov	r7,r5
    5d50:	10003426 	beq	r2,zero,5e24 <memchr+0xdc>
    5d54:	30bfffc4 	addi	r2,r6,-1
    5d58:	30001a26 	beq	r6,zero,5dc4 <memchr+0x7c>
    5d5c:	20c00003 	ldbu	r3,0(r4)
    5d60:	29803fcc 	andi	r6,r5,255
    5d64:	30c0051e 	bne	r6,r3,5d7c <memchr+0x34>
    5d68:	00001806 	br	5dcc <memchr+0x84>
    5d6c:	10001526 	beq	r2,zero,5dc4 <memchr+0x7c>
    5d70:	20c00003 	ldbu	r3,0(r4)
    5d74:	10bfffc4 	addi	r2,r2,-1
    5d78:	30c01426 	beq	r6,r3,5dcc <memchr+0x84>
    5d7c:	21000044 	addi	r4,r4,1
    5d80:	20c000cc 	andi	r3,r4,3
    5d84:	183ff91e 	bne	r3,zero,5d6c <memchr+0x24>
    5d88:	020000c4 	movi	r8,3
    5d8c:	40801136 	bltu	r8,r2,5dd4 <memchr+0x8c>
    5d90:	10000c26 	beq	r2,zero,5dc4 <memchr+0x7c>
    5d94:	20c00003 	ldbu	r3,0(r4)
    5d98:	29403fcc 	andi	r5,r5,255
    5d9c:	28c00b26 	beq	r5,r3,5dcc <memchr+0x84>
    5da0:	20c00044 	addi	r3,r4,1
    5da4:	39803fcc 	andi	r6,r7,255
    5da8:	2089883a 	add	r4,r4,r2
    5dac:	00000306 	br	5dbc <memchr+0x74>
    5db0:	18c00044 	addi	r3,r3,1
    5db4:	197fffc3 	ldbu	r5,-1(r3)
    5db8:	31400526 	beq	r6,r5,5dd0 <memchr+0x88>
    5dbc:	1805883a 	mov	r2,r3
    5dc0:	20fffb1e 	bne	r4,r3,5db0 <memchr+0x68>
    5dc4:	0005883a 	mov	r2,zero
    5dc8:	f800283a 	ret
    5dcc:	2005883a 	mov	r2,r4
    5dd0:	f800283a 	ret
    5dd4:	28c03fcc 	andi	r3,r5,255
    5dd8:	1812923a 	slli	r9,r3,8
    5ddc:	02ffbff4 	movhi	r11,65279
    5de0:	02a02074 	movhi	r10,32897
    5de4:	48d2b03a 	or	r9,r9,r3
    5de8:	4806943a 	slli	r3,r9,16
    5dec:	5affbfc4 	addi	r11,r11,-257
    5df0:	52a02004 	addi	r10,r10,-32640
    5df4:	48d2b03a 	or	r9,r9,r3
    5df8:	20c00017 	ldw	r3,0(r4)
    5dfc:	48c6f03a 	xor	r3,r9,r3
    5e00:	1acd883a 	add	r6,r3,r11
    5e04:	00c6303a 	nor	r3,zero,r3
    5e08:	30c6703a 	and	r3,r6,r3
    5e0c:	1a86703a 	and	r3,r3,r10
    5e10:	183fe01e 	bne	r3,zero,5d94 <memchr+0x4c>
    5e14:	10bfff04 	addi	r2,r2,-4
    5e18:	21000104 	addi	r4,r4,4
    5e1c:	40bff636 	bltu	r8,r2,5df8 <memchr+0xb0>
    5e20:	003fdb06 	br	5d90 <memchr+0x48>
    5e24:	3005883a 	mov	r2,r6
    5e28:	003fd706 	br	5d88 <memchr+0x40>

00005e2c <memcpy>:
    5e2c:	defffd04 	addi	sp,sp,-12
    5e30:	dfc00215 	stw	ra,8(sp)
    5e34:	dc400115 	stw	r17,4(sp)
    5e38:	dc000015 	stw	r16,0(sp)
    5e3c:	00c003c4 	movi	r3,15
    5e40:	2005883a 	mov	r2,r4
    5e44:	1980452e 	bgeu	r3,r6,5f5c <memcpy+0x130>
    5e48:	2906b03a 	or	r3,r5,r4
    5e4c:	18c000cc 	andi	r3,r3,3
    5e50:	1800441e 	bne	r3,zero,5f64 <memcpy+0x138>
    5e54:	347ffc04 	addi	r17,r6,-16
    5e58:	8822d13a 	srli	r17,r17,4
    5e5c:	28c00104 	addi	r3,r5,4
    5e60:	23400104 	addi	r13,r4,4
    5e64:	8820913a 	slli	r16,r17,4
    5e68:	2b000204 	addi	r12,r5,8
    5e6c:	22c00204 	addi	r11,r4,8
    5e70:	84000504 	addi	r16,r16,20
    5e74:	2a800304 	addi	r10,r5,12
    5e78:	22400304 	addi	r9,r4,12
    5e7c:	2c21883a 	add	r16,r5,r16
    5e80:	2811883a 	mov	r8,r5
    5e84:	200f883a 	mov	r7,r4
    5e88:	41000017 	ldw	r4,0(r8)
    5e8c:	1fc00017 	ldw	ra,0(r3)
    5e90:	63c00017 	ldw	r15,0(r12)
    5e94:	39000015 	stw	r4,0(r7)
    5e98:	53800017 	ldw	r14,0(r10)
    5e9c:	6fc00015 	stw	ra,0(r13)
    5ea0:	5bc00015 	stw	r15,0(r11)
    5ea4:	4b800015 	stw	r14,0(r9)
    5ea8:	18c00404 	addi	r3,r3,16
    5eac:	39c00404 	addi	r7,r7,16
    5eb0:	42000404 	addi	r8,r8,16
    5eb4:	6b400404 	addi	r13,r13,16
    5eb8:	63000404 	addi	r12,r12,16
    5ebc:	5ac00404 	addi	r11,r11,16
    5ec0:	52800404 	addi	r10,r10,16
    5ec4:	4a400404 	addi	r9,r9,16
    5ec8:	1c3fef1e 	bne	r3,r16,5e88 <memcpy+0x5c>
    5ecc:	89c00044 	addi	r7,r17,1
    5ed0:	380e913a 	slli	r7,r7,4
    5ed4:	310003cc 	andi	r4,r6,15
    5ed8:	02c000c4 	movi	r11,3
    5edc:	11c7883a 	add	r3,r2,r7
    5ee0:	29cb883a 	add	r5,r5,r7
    5ee4:	5900212e 	bgeu	r11,r4,5f6c <memcpy+0x140>
    5ee8:	1813883a 	mov	r9,r3
    5eec:	2811883a 	mov	r8,r5
    5ef0:	200f883a 	mov	r7,r4
    5ef4:	42800017 	ldw	r10,0(r8)
    5ef8:	4a400104 	addi	r9,r9,4
    5efc:	39ffff04 	addi	r7,r7,-4
    5f00:	4abfff15 	stw	r10,-4(r9)
    5f04:	42000104 	addi	r8,r8,4
    5f08:	59fffa36 	bltu	r11,r7,5ef4 <memcpy+0xc8>
    5f0c:	213fff04 	addi	r4,r4,-4
    5f10:	2008d0ba 	srli	r4,r4,2
    5f14:	318000cc 	andi	r6,r6,3
    5f18:	21000044 	addi	r4,r4,1
    5f1c:	2109883a 	add	r4,r4,r4
    5f20:	2109883a 	add	r4,r4,r4
    5f24:	1907883a 	add	r3,r3,r4
    5f28:	290b883a 	add	r5,r5,r4
    5f2c:	30000626 	beq	r6,zero,5f48 <memcpy+0x11c>
    5f30:	198d883a 	add	r6,r3,r6
    5f34:	29c00003 	ldbu	r7,0(r5)
    5f38:	18c00044 	addi	r3,r3,1
    5f3c:	29400044 	addi	r5,r5,1
    5f40:	19ffffc5 	stb	r7,-1(r3)
    5f44:	19bffb1e 	bne	r3,r6,5f34 <memcpy+0x108>
    5f48:	dfc00217 	ldw	ra,8(sp)
    5f4c:	dc400117 	ldw	r17,4(sp)
    5f50:	dc000017 	ldw	r16,0(sp)
    5f54:	dec00304 	addi	sp,sp,12
    5f58:	f800283a 	ret
    5f5c:	2007883a 	mov	r3,r4
    5f60:	003ff206 	br	5f2c <memcpy+0x100>
    5f64:	2007883a 	mov	r3,r4
    5f68:	003ff106 	br	5f30 <memcpy+0x104>
    5f6c:	200d883a 	mov	r6,r4
    5f70:	003fee06 	br	5f2c <memcpy+0x100>

00005f74 <memmove>:
    5f74:	2005883a 	mov	r2,r4
    5f78:	29000b2e 	bgeu	r5,r4,5fa8 <memmove+0x34>
    5f7c:	298f883a 	add	r7,r5,r6
    5f80:	21c0092e 	bgeu	r4,r7,5fa8 <memmove+0x34>
    5f84:	2187883a 	add	r3,r4,r6
    5f88:	198bc83a 	sub	r5,r3,r6
    5f8c:	30004826 	beq	r6,zero,60b0 <memmove+0x13c>
    5f90:	39ffffc4 	addi	r7,r7,-1
    5f94:	39000003 	ldbu	r4,0(r7)
    5f98:	18ffffc4 	addi	r3,r3,-1
    5f9c:	19000005 	stb	r4,0(r3)
    5fa0:	28fffb1e 	bne	r5,r3,5f90 <memmove+0x1c>
    5fa4:	f800283a 	ret
    5fa8:	00c003c4 	movi	r3,15
    5fac:	1980412e 	bgeu	r3,r6,60b4 <memmove+0x140>
    5fb0:	2886b03a 	or	r3,r5,r2
    5fb4:	18c000cc 	andi	r3,r3,3
    5fb8:	1800401e 	bne	r3,zero,60bc <memmove+0x148>
    5fbc:	33fffc04 	addi	r15,r6,-16
    5fc0:	781ed13a 	srli	r15,r15,4
    5fc4:	28c00104 	addi	r3,r5,4
    5fc8:	13400104 	addi	r13,r2,4
    5fcc:	781c913a 	slli	r14,r15,4
    5fd0:	2b000204 	addi	r12,r5,8
    5fd4:	12c00204 	addi	r11,r2,8
    5fd8:	73800504 	addi	r14,r14,20
    5fdc:	2a800304 	addi	r10,r5,12
    5fe0:	12400304 	addi	r9,r2,12
    5fe4:	2b9d883a 	add	r14,r5,r14
    5fe8:	2811883a 	mov	r8,r5
    5fec:	100f883a 	mov	r7,r2
    5ff0:	41000017 	ldw	r4,0(r8)
    5ff4:	39c00404 	addi	r7,r7,16
    5ff8:	18c00404 	addi	r3,r3,16
    5ffc:	393ffc15 	stw	r4,-16(r7)
    6000:	193ffc17 	ldw	r4,-16(r3)
    6004:	6b400404 	addi	r13,r13,16
    6008:	5ac00404 	addi	r11,r11,16
    600c:	693ffc15 	stw	r4,-16(r13)
    6010:	61000017 	ldw	r4,0(r12)
    6014:	4a400404 	addi	r9,r9,16
    6018:	42000404 	addi	r8,r8,16
    601c:	593ffc15 	stw	r4,-16(r11)
    6020:	51000017 	ldw	r4,0(r10)
    6024:	63000404 	addi	r12,r12,16
    6028:	52800404 	addi	r10,r10,16
    602c:	493ffc15 	stw	r4,-16(r9)
    6030:	1bbfef1e 	bne	r3,r14,5ff0 <memmove+0x7c>
    6034:	79000044 	addi	r4,r15,1
    6038:	2008913a 	slli	r4,r4,4
    603c:	328003cc 	andi	r10,r6,15
    6040:	02c000c4 	movi	r11,3
    6044:	1107883a 	add	r3,r2,r4
    6048:	290b883a 	add	r5,r5,r4
    604c:	5a801e2e 	bgeu	r11,r10,60c8 <memmove+0x154>
    6050:	1813883a 	mov	r9,r3
    6054:	2811883a 	mov	r8,r5
    6058:	500f883a 	mov	r7,r10
    605c:	41000017 	ldw	r4,0(r8)
    6060:	4a400104 	addi	r9,r9,4
    6064:	39ffff04 	addi	r7,r7,-4
    6068:	493fff15 	stw	r4,-4(r9)
    606c:	42000104 	addi	r8,r8,4
    6070:	59fffa36 	bltu	r11,r7,605c <memmove+0xe8>
    6074:	513fff04 	addi	r4,r10,-4
    6078:	2008d0ba 	srli	r4,r4,2
    607c:	318000cc 	andi	r6,r6,3
    6080:	21000044 	addi	r4,r4,1
    6084:	2109883a 	add	r4,r4,r4
    6088:	2109883a 	add	r4,r4,r4
    608c:	1907883a 	add	r3,r3,r4
    6090:	290b883a 	add	r5,r5,r4
    6094:	30000b26 	beq	r6,zero,60c4 <memmove+0x150>
    6098:	198d883a 	add	r6,r3,r6
    609c:	29c00003 	ldbu	r7,0(r5)
    60a0:	18c00044 	addi	r3,r3,1
    60a4:	29400044 	addi	r5,r5,1
    60a8:	19ffffc5 	stb	r7,-1(r3)
    60ac:	19bffb1e 	bne	r3,r6,609c <memmove+0x128>
    60b0:	f800283a 	ret
    60b4:	1007883a 	mov	r3,r2
    60b8:	003ff606 	br	6094 <memmove+0x120>
    60bc:	1007883a 	mov	r3,r2
    60c0:	003ff506 	br	6098 <memmove+0x124>
    60c4:	f800283a 	ret
    60c8:	500d883a 	mov	r6,r10
    60cc:	003ff106 	br	6094 <memmove+0x120>

000060d0 <memset>:
    60d0:	20c000cc 	andi	r3,r4,3
    60d4:	2005883a 	mov	r2,r4
    60d8:	18004426 	beq	r3,zero,61ec <memset+0x11c>
    60dc:	31ffffc4 	addi	r7,r6,-1
    60e0:	30004026 	beq	r6,zero,61e4 <memset+0x114>
    60e4:	2813883a 	mov	r9,r5
    60e8:	200d883a 	mov	r6,r4
    60ec:	2007883a 	mov	r3,r4
    60f0:	00000406 	br	6104 <memset+0x34>
    60f4:	3a3fffc4 	addi	r8,r7,-1
    60f8:	31800044 	addi	r6,r6,1
    60fc:	38003926 	beq	r7,zero,61e4 <memset+0x114>
    6100:	400f883a 	mov	r7,r8
    6104:	18c00044 	addi	r3,r3,1
    6108:	32400005 	stb	r9,0(r6)
    610c:	1a0000cc 	andi	r8,r3,3
    6110:	403ff81e 	bne	r8,zero,60f4 <memset+0x24>
    6114:	010000c4 	movi	r4,3
    6118:	21c02d2e 	bgeu	r4,r7,61d0 <memset+0x100>
    611c:	29003fcc 	andi	r4,r5,255
    6120:	200c923a 	slli	r6,r4,8
    6124:	3108b03a 	or	r4,r6,r4
    6128:	200c943a 	slli	r6,r4,16
    612c:	218cb03a 	or	r6,r4,r6
    6130:	010003c4 	movi	r4,15
    6134:	21c0182e 	bgeu	r4,r7,6198 <memset+0xc8>
    6138:	3b3ffc04 	addi	r12,r7,-16
    613c:	6018d13a 	srli	r12,r12,4
    6140:	1a000104 	addi	r8,r3,4
    6144:	1ac00204 	addi	r11,r3,8
    6148:	6008913a 	slli	r4,r12,4
    614c:	1a800304 	addi	r10,r3,12
    6150:	1813883a 	mov	r9,r3
    6154:	21000504 	addi	r4,r4,20
    6158:	1909883a 	add	r4,r3,r4
    615c:	49800015 	stw	r6,0(r9)
    6160:	41800015 	stw	r6,0(r8)
    6164:	59800015 	stw	r6,0(r11)
    6168:	51800015 	stw	r6,0(r10)
    616c:	42000404 	addi	r8,r8,16
    6170:	4a400404 	addi	r9,r9,16
    6174:	5ac00404 	addi	r11,r11,16
    6178:	52800404 	addi	r10,r10,16
    617c:	413ff71e 	bne	r8,r4,615c <memset+0x8c>
    6180:	63000044 	addi	r12,r12,1
    6184:	6018913a 	slli	r12,r12,4
    6188:	39c003cc 	andi	r7,r7,15
    618c:	010000c4 	movi	r4,3
    6190:	1b07883a 	add	r3,r3,r12
    6194:	21c00e2e 	bgeu	r4,r7,61d0 <memset+0x100>
    6198:	1813883a 	mov	r9,r3
    619c:	3811883a 	mov	r8,r7
    61a0:	010000c4 	movi	r4,3
    61a4:	49800015 	stw	r6,0(r9)
    61a8:	423fff04 	addi	r8,r8,-4
    61ac:	4a400104 	addi	r9,r9,4
    61b0:	223ffc36 	bltu	r4,r8,61a4 <memset+0xd4>
    61b4:	393fff04 	addi	r4,r7,-4
    61b8:	2008d0ba 	srli	r4,r4,2
    61bc:	39c000cc 	andi	r7,r7,3
    61c0:	21000044 	addi	r4,r4,1
    61c4:	2109883a 	add	r4,r4,r4
    61c8:	2109883a 	add	r4,r4,r4
    61cc:	1907883a 	add	r3,r3,r4
    61d0:	38000526 	beq	r7,zero,61e8 <memset+0x118>
    61d4:	19cf883a 	add	r7,r3,r7
    61d8:	19400005 	stb	r5,0(r3)
    61dc:	18c00044 	addi	r3,r3,1
    61e0:	38fffd1e 	bne	r7,r3,61d8 <memset+0x108>
    61e4:	f800283a 	ret
    61e8:	f800283a 	ret
    61ec:	2007883a 	mov	r3,r4
    61f0:	300f883a 	mov	r7,r6
    61f4:	003fc706 	br	6114 <memset+0x44>

000061f8 <_Balloc>:
    61f8:	20801317 	ldw	r2,76(r4)
    61fc:	defffc04 	addi	sp,sp,-16
    6200:	dc400115 	stw	r17,4(sp)
    6204:	dc000015 	stw	r16,0(sp)
    6208:	dfc00315 	stw	ra,12(sp)
    620c:	dc800215 	stw	r18,8(sp)
    6210:	2023883a 	mov	r17,r4
    6214:	2821883a 	mov	r16,r5
    6218:	10000f26 	beq	r2,zero,6258 <_Balloc+0x60>
    621c:	8407883a 	add	r3,r16,r16
    6220:	18c7883a 	add	r3,r3,r3
    6224:	10c7883a 	add	r3,r2,r3
    6228:	18800017 	ldw	r2,0(r3)
    622c:	10001126 	beq	r2,zero,6274 <_Balloc+0x7c>
    6230:	11000017 	ldw	r4,0(r2)
    6234:	19000015 	stw	r4,0(r3)
    6238:	10000415 	stw	zero,16(r2)
    623c:	10000315 	stw	zero,12(r2)
    6240:	dfc00317 	ldw	ra,12(sp)
    6244:	dc800217 	ldw	r18,8(sp)
    6248:	dc400117 	ldw	r17,4(sp)
    624c:	dc000017 	ldw	r16,0(sp)
    6250:	dec00404 	addi	sp,sp,16
    6254:	f800283a 	ret
    6258:	01800844 	movi	r6,33
    625c:	01400104 	movi	r5,4
    6260:	00091340 	call	9134 <_calloc_r>
    6264:	88801315 	stw	r2,76(r17)
    6268:	103fec1e 	bne	r2,zero,621c <_Balloc+0x24>
    626c:	0005883a 	mov	r2,zero
    6270:	003ff306 	br	6240 <_Balloc+0x48>
    6274:	01400044 	movi	r5,1
    6278:	2c24983a 	sll	r18,r5,r16
    627c:	8809883a 	mov	r4,r17
    6280:	91800144 	addi	r6,r18,5
    6284:	318d883a 	add	r6,r6,r6
    6288:	318d883a 	add	r6,r6,r6
    628c:	00091340 	call	9134 <_calloc_r>
    6290:	103ff626 	beq	r2,zero,626c <_Balloc+0x74>
    6294:	14000115 	stw	r16,4(r2)
    6298:	14800215 	stw	r18,8(r2)
    629c:	003fe606 	br	6238 <_Balloc+0x40>

000062a0 <_Bfree>:
    62a0:	28000826 	beq	r5,zero,62c4 <_Bfree+0x24>
    62a4:	28c00117 	ldw	r3,4(r5)
    62a8:	20801317 	ldw	r2,76(r4)
    62ac:	18c7883a 	add	r3,r3,r3
    62b0:	18c7883a 	add	r3,r3,r3
    62b4:	10c5883a 	add	r2,r2,r3
    62b8:	10c00017 	ldw	r3,0(r2)
    62bc:	28c00015 	stw	r3,0(r5)
    62c0:	11400015 	stw	r5,0(r2)
    62c4:	f800283a 	ret

000062c8 <__multadd>:
    62c8:	defffa04 	addi	sp,sp,-24
    62cc:	dc800315 	stw	r18,12(sp)
    62d0:	dc400215 	stw	r17,8(sp)
    62d4:	dc000115 	stw	r16,4(sp)
    62d8:	2823883a 	mov	r17,r5
    62dc:	2c000417 	ldw	r16,16(r5)
    62e0:	dfc00515 	stw	ra,20(sp)
    62e4:	dcc00415 	stw	r19,16(sp)
    62e8:	2025883a 	mov	r18,r4
    62ec:	29400504 	addi	r5,r5,20
    62f0:	0011883a 	mov	r8,zero
    62f4:	28c00017 	ldw	r3,0(r5)
    62f8:	29400104 	addi	r5,r5,4
    62fc:	42000044 	addi	r8,r8,1
    6300:	18bfffcc 	andi	r2,r3,65535
    6304:	1185383a 	mul	r2,r2,r6
    6308:	1806d43a 	srli	r3,r3,16
    630c:	11cf883a 	add	r7,r2,r7
    6310:	3808d43a 	srli	r4,r7,16
    6314:	1987383a 	mul	r3,r3,r6
    6318:	38bfffcc 	andi	r2,r7,65535
    631c:	1907883a 	add	r3,r3,r4
    6320:	1808943a 	slli	r4,r3,16
    6324:	180ed43a 	srli	r7,r3,16
    6328:	2085883a 	add	r2,r4,r2
    632c:	28bfff15 	stw	r2,-4(r5)
    6330:	443ff016 	blt	r8,r16,62f4 <__multadd+0x2c>
    6334:	38000926 	beq	r7,zero,635c <__multadd+0x94>
    6338:	88800217 	ldw	r2,8(r17)
    633c:	80800f0e 	bge	r16,r2,637c <__multadd+0xb4>
    6340:	80800144 	addi	r2,r16,5
    6344:	1085883a 	add	r2,r2,r2
    6348:	1085883a 	add	r2,r2,r2
    634c:	8885883a 	add	r2,r17,r2
    6350:	11c00015 	stw	r7,0(r2)
    6354:	84000044 	addi	r16,r16,1
    6358:	8c000415 	stw	r16,16(r17)
    635c:	8805883a 	mov	r2,r17
    6360:	dfc00517 	ldw	ra,20(sp)
    6364:	dcc00417 	ldw	r19,16(sp)
    6368:	dc800317 	ldw	r18,12(sp)
    636c:	dc400217 	ldw	r17,8(sp)
    6370:	dc000117 	ldw	r16,4(sp)
    6374:	dec00604 	addi	sp,sp,24
    6378:	f800283a 	ret
    637c:	89400117 	ldw	r5,4(r17)
    6380:	9009883a 	mov	r4,r18
    6384:	d9c00015 	stw	r7,0(sp)
    6388:	29400044 	addi	r5,r5,1
    638c:	00061f80 	call	61f8 <_Balloc>
    6390:	89800417 	ldw	r6,16(r17)
    6394:	89400304 	addi	r5,r17,12
    6398:	11000304 	addi	r4,r2,12
    639c:	31800084 	addi	r6,r6,2
    63a0:	318d883a 	add	r6,r6,r6
    63a4:	318d883a 	add	r6,r6,r6
    63a8:	1027883a 	mov	r19,r2
    63ac:	0005e2c0 	call	5e2c <memcpy>
    63b0:	d9c00017 	ldw	r7,0(sp)
    63b4:	88000a26 	beq	r17,zero,63e0 <__multadd+0x118>
    63b8:	88c00117 	ldw	r3,4(r17)
    63bc:	90801317 	ldw	r2,76(r18)
    63c0:	18c7883a 	add	r3,r3,r3
    63c4:	18c7883a 	add	r3,r3,r3
    63c8:	10c5883a 	add	r2,r2,r3
    63cc:	10c00017 	ldw	r3,0(r2)
    63d0:	88c00015 	stw	r3,0(r17)
    63d4:	14400015 	stw	r17,0(r2)
    63d8:	9823883a 	mov	r17,r19
    63dc:	003fd806 	br	6340 <__multadd+0x78>
    63e0:	9823883a 	mov	r17,r19
    63e4:	003fd606 	br	6340 <__multadd+0x78>

000063e8 <__s2b>:
    63e8:	defff904 	addi	sp,sp,-28
    63ec:	dc400115 	stw	r17,4(sp)
    63f0:	dc000015 	stw	r16,0(sp)
    63f4:	2023883a 	mov	r17,r4
    63f8:	2821883a 	mov	r16,r5
    63fc:	39000204 	addi	r4,r7,8
    6400:	01400244 	movi	r5,9
    6404:	dcc00315 	stw	r19,12(sp)
    6408:	dc800215 	stw	r18,8(sp)
    640c:	dfc00615 	stw	ra,24(sp)
    6410:	dd400515 	stw	r21,20(sp)
    6414:	dd000415 	stw	r20,16(sp)
    6418:	3825883a 	mov	r18,r7
    641c:	3027883a 	mov	r19,r6
    6420:	000a4640 	call	a464 <__divsi3>
    6424:	00c00044 	movi	r3,1
    6428:	000b883a 	mov	r5,zero
    642c:	1880030e 	bge	r3,r2,643c <__s2b+0x54>
    6430:	18c7883a 	add	r3,r3,r3
    6434:	29400044 	addi	r5,r5,1
    6438:	18bffd16 	blt	r3,r2,6430 <__s2b+0x48>
    643c:	8809883a 	mov	r4,r17
    6440:	00061f80 	call	61f8 <_Balloc>
    6444:	d8c00717 	ldw	r3,28(sp)
    6448:	10c00515 	stw	r3,20(r2)
    644c:	00c00044 	movi	r3,1
    6450:	10c00415 	stw	r3,16(r2)
    6454:	00c00244 	movi	r3,9
    6458:	1cc0210e 	bge	r3,r19,64e0 <__s2b+0xf8>
    645c:	80eb883a 	add	r21,r16,r3
    6460:	a829883a 	mov	r20,r21
    6464:	84e1883a 	add	r16,r16,r19
    6468:	a1c00007 	ldb	r7,0(r20)
    646c:	01800284 	movi	r6,10
    6470:	a5000044 	addi	r20,r20,1
    6474:	100b883a 	mov	r5,r2
    6478:	39fff404 	addi	r7,r7,-48
    647c:	8809883a 	mov	r4,r17
    6480:	00062c80 	call	62c8 <__multadd>
    6484:	a43ff81e 	bne	r20,r16,6468 <__s2b+0x80>
    6488:	ace1883a 	add	r16,r21,r19
    648c:	843ffe04 	addi	r16,r16,-8
    6490:	9c800a0e 	bge	r19,r18,64bc <__s2b+0xd4>
    6494:	94e5c83a 	sub	r18,r18,r19
    6498:	84a5883a 	add	r18,r16,r18
    649c:	81c00007 	ldb	r7,0(r16)
    64a0:	01800284 	movi	r6,10
    64a4:	84000044 	addi	r16,r16,1
    64a8:	100b883a 	mov	r5,r2
    64ac:	39fff404 	addi	r7,r7,-48
    64b0:	8809883a 	mov	r4,r17
    64b4:	00062c80 	call	62c8 <__multadd>
    64b8:	84bff81e 	bne	r16,r18,649c <__s2b+0xb4>
    64bc:	dfc00617 	ldw	ra,24(sp)
    64c0:	dd400517 	ldw	r21,20(sp)
    64c4:	dd000417 	ldw	r20,16(sp)
    64c8:	dcc00317 	ldw	r19,12(sp)
    64cc:	dc800217 	ldw	r18,8(sp)
    64d0:	dc400117 	ldw	r17,4(sp)
    64d4:	dc000017 	ldw	r16,0(sp)
    64d8:	dec00704 	addi	sp,sp,28
    64dc:	f800283a 	ret
    64e0:	84000284 	addi	r16,r16,10
    64e4:	1827883a 	mov	r19,r3
    64e8:	003fe906 	br	6490 <__s2b+0xa8>

000064ec <__hi0bits>:
    64ec:	20bfffec 	andhi	r2,r4,65535
    64f0:	1000141e 	bne	r2,zero,6544 <__hi0bits+0x58>
    64f4:	2008943a 	slli	r4,r4,16
    64f8:	00800404 	movi	r2,16
    64fc:	20ffc02c 	andhi	r3,r4,65280
    6500:	1800021e 	bne	r3,zero,650c <__hi0bits+0x20>
    6504:	2008923a 	slli	r4,r4,8
    6508:	10800204 	addi	r2,r2,8
    650c:	20fc002c 	andhi	r3,r4,61440
    6510:	1800021e 	bne	r3,zero,651c <__hi0bits+0x30>
    6514:	2008913a 	slli	r4,r4,4
    6518:	10800104 	addi	r2,r2,4
    651c:	20f0002c 	andhi	r3,r4,49152
    6520:	1800031e 	bne	r3,zero,6530 <__hi0bits+0x44>
    6524:	2109883a 	add	r4,r4,r4
    6528:	10800084 	addi	r2,r2,2
    652c:	2109883a 	add	r4,r4,r4
    6530:	20000316 	blt	r4,zero,6540 <__hi0bits+0x54>
    6534:	2110002c 	andhi	r4,r4,16384
    6538:	2000041e 	bne	r4,zero,654c <__hi0bits+0x60>
    653c:	00800804 	movi	r2,32
    6540:	f800283a 	ret
    6544:	0005883a 	mov	r2,zero
    6548:	003fec06 	br	64fc <__hi0bits+0x10>
    654c:	10800044 	addi	r2,r2,1
    6550:	f800283a 	ret

00006554 <__lo0bits>:
    6554:	20c00017 	ldw	r3,0(r4)
    6558:	188001cc 	andi	r2,r3,7
    655c:	10000826 	beq	r2,zero,6580 <__lo0bits+0x2c>
    6560:	1880004c 	andi	r2,r3,1
    6564:	1000211e 	bne	r2,zero,65ec <__lo0bits+0x98>
    6568:	1880008c 	andi	r2,r3,2
    656c:	1000211e 	bne	r2,zero,65f4 <__lo0bits+0xa0>
    6570:	1806d0ba 	srli	r3,r3,2
    6574:	00800084 	movi	r2,2
    6578:	20c00015 	stw	r3,0(r4)
    657c:	f800283a 	ret
    6580:	18bfffcc 	andi	r2,r3,65535
    6584:	10001326 	beq	r2,zero,65d4 <__lo0bits+0x80>
    6588:	0005883a 	mov	r2,zero
    658c:	19403fcc 	andi	r5,r3,255
    6590:	2800021e 	bne	r5,zero,659c <__lo0bits+0x48>
    6594:	1806d23a 	srli	r3,r3,8
    6598:	10800204 	addi	r2,r2,8
    659c:	194003cc 	andi	r5,r3,15
    65a0:	2800021e 	bne	r5,zero,65ac <__lo0bits+0x58>
    65a4:	1806d13a 	srli	r3,r3,4
    65a8:	10800104 	addi	r2,r2,4
    65ac:	194000cc 	andi	r5,r3,3
    65b0:	2800021e 	bne	r5,zero,65bc <__lo0bits+0x68>
    65b4:	1806d0ba 	srli	r3,r3,2
    65b8:	10800084 	addi	r2,r2,2
    65bc:	1940004c 	andi	r5,r3,1
    65c0:	2800081e 	bne	r5,zero,65e4 <__lo0bits+0x90>
    65c4:	1806d07a 	srli	r3,r3,1
    65c8:	1800051e 	bne	r3,zero,65e0 <__lo0bits+0x8c>
    65cc:	00800804 	movi	r2,32
    65d0:	f800283a 	ret
    65d4:	1806d43a 	srli	r3,r3,16
    65d8:	00800404 	movi	r2,16
    65dc:	003feb06 	br	658c <__lo0bits+0x38>
    65e0:	10800044 	addi	r2,r2,1
    65e4:	20c00015 	stw	r3,0(r4)
    65e8:	f800283a 	ret
    65ec:	0005883a 	mov	r2,zero
    65f0:	f800283a 	ret
    65f4:	1806d07a 	srli	r3,r3,1
    65f8:	00800044 	movi	r2,1
    65fc:	20c00015 	stw	r3,0(r4)
    6600:	f800283a 	ret

00006604 <__i2b>:
    6604:	defffd04 	addi	sp,sp,-12
    6608:	dc000015 	stw	r16,0(sp)
    660c:	04000044 	movi	r16,1
    6610:	dc400115 	stw	r17,4(sp)
    6614:	2823883a 	mov	r17,r5
    6618:	800b883a 	mov	r5,r16
    661c:	dfc00215 	stw	ra,8(sp)
    6620:	00061f80 	call	61f8 <_Balloc>
    6624:	14400515 	stw	r17,20(r2)
    6628:	14000415 	stw	r16,16(r2)
    662c:	dfc00217 	ldw	ra,8(sp)
    6630:	dc400117 	ldw	r17,4(sp)
    6634:	dc000017 	ldw	r16,0(sp)
    6638:	dec00304 	addi	sp,sp,12
    663c:	f800283a 	ret

00006640 <__multiply>:
    6640:	defffa04 	addi	sp,sp,-24
    6644:	dcc00315 	stw	r19,12(sp)
    6648:	dc800215 	stw	r18,8(sp)
    664c:	34c00417 	ldw	r19,16(r6)
    6650:	2c800417 	ldw	r18,16(r5)
    6654:	dd000415 	stw	r20,16(sp)
    6658:	dc400115 	stw	r17,4(sp)
    665c:	dfc00515 	stw	ra,20(sp)
    6660:	dc000015 	stw	r16,0(sp)
    6664:	2829883a 	mov	r20,r5
    6668:	3023883a 	mov	r17,r6
    666c:	94c0050e 	bge	r18,r19,6684 <__multiply+0x44>
    6670:	9007883a 	mov	r3,r18
    6674:	3029883a 	mov	r20,r6
    6678:	9825883a 	mov	r18,r19
    667c:	2823883a 	mov	r17,r5
    6680:	1827883a 	mov	r19,r3
    6684:	a0800217 	ldw	r2,8(r20)
    6688:	94e1883a 	add	r16,r18,r19
    668c:	a1400117 	ldw	r5,4(r20)
    6690:	1400010e 	bge	r2,r16,6698 <__multiply+0x58>
    6694:	29400044 	addi	r5,r5,1
    6698:	00061f80 	call	61f8 <_Balloc>
    669c:	8415883a 	add	r10,r16,r16
    66a0:	12c00504 	addi	r11,r2,20
    66a4:	5295883a 	add	r10,r10,r10
    66a8:	5a95883a 	add	r10,r11,r10
    66ac:	5807883a 	mov	r3,r11
    66b0:	5a80032e 	bgeu	r11,r10,66c0 <__multiply+0x80>
    66b4:	18000015 	stw	zero,0(r3)
    66b8:	18c00104 	addi	r3,r3,4
    66bc:	1abffd36 	bltu	r3,r10,66b4 <__multiply+0x74>
    66c0:	9ce7883a 	add	r19,r19,r19
    66c4:	94a5883a 	add	r18,r18,r18
    66c8:	89800504 	addi	r6,r17,20
    66cc:	9ce7883a 	add	r19,r19,r19
    66d0:	a3400504 	addi	r13,r20,20
    66d4:	94a5883a 	add	r18,r18,r18
    66d8:	34d9883a 	add	r12,r6,r19
    66dc:	6c93883a 	add	r9,r13,r18
    66e0:	3300422e 	bgeu	r6,r12,67ec <__multiply+0x1ac>
    66e4:	37c00017 	ldw	ra,0(r6)
    66e8:	fbffffcc 	andi	r15,ra,65535
    66ec:	78001b26 	beq	r15,zero,675c <__multiply+0x11c>
    66f0:	5811883a 	mov	r8,r11
    66f4:	681d883a 	mov	r14,r13
    66f8:	000f883a 	mov	r7,zero
    66fc:	71000017 	ldw	r4,0(r14)
    6700:	40c00017 	ldw	r3,0(r8)
    6704:	73800104 	addi	r14,r14,4
    6708:	217fffcc 	andi	r5,r4,65535
    670c:	2bcb383a 	mul	r5,r5,r15
    6710:	2008d43a 	srli	r4,r4,16
    6714:	1c7fffcc 	andi	r17,r3,65535
    6718:	2c4b883a 	add	r5,r5,r17
    671c:	29cb883a 	add	r5,r5,r7
    6720:	23c9383a 	mul	r4,r4,r15
    6724:	1806d43a 	srli	r3,r3,16
    6728:	280ed43a 	srli	r7,r5,16
    672c:	297fffcc 	andi	r5,r5,65535
    6730:	20c7883a 	add	r3,r4,r3
    6734:	19c7883a 	add	r3,r3,r7
    6738:	1808943a 	slli	r4,r3,16
    673c:	4023883a 	mov	r17,r8
    6740:	180ed43a 	srli	r7,r3,16
    6744:	214ab03a 	or	r5,r4,r5
    6748:	41400015 	stw	r5,0(r8)
    674c:	42000104 	addi	r8,r8,4
    6750:	727fea36 	bltu	r14,r9,66fc <__multiply+0xbc>
    6754:	89c00115 	stw	r7,4(r17)
    6758:	37c00017 	ldw	ra,0(r6)
    675c:	f83ed43a 	srli	ra,ra,16
    6760:	f8001f26 	beq	ra,zero,67e0 <__multiply+0x1a0>
    6764:	58c00017 	ldw	r3,0(r11)
    6768:	681d883a 	mov	r14,r13
    676c:	581f883a 	mov	r15,r11
    6770:	1811883a 	mov	r8,r3
    6774:	5825883a 	mov	r18,r11
    6778:	000f883a 	mov	r7,zero
    677c:	00000106 	br	6784 <__multiply+0x144>
    6780:	8825883a 	mov	r18,r17
    6784:	7140000b 	ldhu	r5,0(r14)
    6788:	4010d43a 	srli	r8,r8,16
    678c:	193fffcc 	andi	r4,r3,65535
    6790:	2fcb383a 	mul	r5,r5,ra
    6794:	7bc00104 	addi	r15,r15,4
    6798:	73800104 	addi	r14,r14,4
    679c:	2a0b883a 	add	r5,r5,r8
    67a0:	29cb883a 	add	r5,r5,r7
    67a4:	2806943a 	slli	r3,r5,16
    67a8:	94400104 	addi	r17,r18,4
    67ac:	280ad43a 	srli	r5,r5,16
    67b0:	1908b03a 	or	r4,r3,r4
    67b4:	793fff15 	stw	r4,-4(r15)
    67b8:	70ffff17 	ldw	r3,-4(r14)
    67bc:	8a000017 	ldw	r8,0(r17)
    67c0:	1806d43a 	srli	r3,r3,16
    67c4:	413fffcc 	andi	r4,r8,65535
    67c8:	1fc7383a 	mul	r3,r3,ra
    67cc:	1907883a 	add	r3,r3,r4
    67d0:	1947883a 	add	r3,r3,r5
    67d4:	180ed43a 	srli	r7,r3,16
    67d8:	727fe936 	bltu	r14,r9,6780 <__multiply+0x140>
    67dc:	90c00115 	stw	r3,4(r18)
    67e0:	31800104 	addi	r6,r6,4
    67e4:	5ac00104 	addi	r11,r11,4
    67e8:	333fbe36 	bltu	r6,r12,66e4 <__multiply+0xa4>
    67ec:	0400090e 	bge	zero,r16,6814 <__multiply+0x1d4>
    67f0:	50ffff17 	ldw	r3,-4(r10)
    67f4:	52bfff04 	addi	r10,r10,-4
    67f8:	18000326 	beq	r3,zero,6808 <__multiply+0x1c8>
    67fc:	00000506 	br	6814 <__multiply+0x1d4>
    6800:	50c00017 	ldw	r3,0(r10)
    6804:	1800031e 	bne	r3,zero,6814 <__multiply+0x1d4>
    6808:	843fffc4 	addi	r16,r16,-1
    680c:	52bfff04 	addi	r10,r10,-4
    6810:	803ffb1e 	bne	r16,zero,6800 <__multiply+0x1c0>
    6814:	14000415 	stw	r16,16(r2)
    6818:	dfc00517 	ldw	ra,20(sp)
    681c:	dd000417 	ldw	r20,16(sp)
    6820:	dcc00317 	ldw	r19,12(sp)
    6824:	dc800217 	ldw	r18,8(sp)
    6828:	dc400117 	ldw	r17,4(sp)
    682c:	dc000017 	ldw	r16,0(sp)
    6830:	dec00604 	addi	sp,sp,24
    6834:	f800283a 	ret

00006838 <__pow5mult>:
    6838:	defffa04 	addi	sp,sp,-24
    683c:	dcc00315 	stw	r19,12(sp)
    6840:	dc000015 	stw	r16,0(sp)
    6844:	dfc00515 	stw	ra,20(sp)
    6848:	dd000415 	stw	r20,16(sp)
    684c:	dc800215 	stw	r18,8(sp)
    6850:	dc400115 	stw	r17,4(sp)
    6854:	308000cc 	andi	r2,r6,3
    6858:	3021883a 	mov	r16,r6
    685c:	2027883a 	mov	r19,r4
    6860:	10002f1e 	bne	r2,zero,6920 <__pow5mult+0xe8>
    6864:	2825883a 	mov	r18,r5
    6868:	8021d0ba 	srai	r16,r16,2
    686c:	80001a26 	beq	r16,zero,68d8 <__pow5mult+0xa0>
    6870:	9c401217 	ldw	r17,72(r19)
    6874:	8800061e 	bne	r17,zero,6890 <__pow5mult+0x58>
    6878:	00003406 	br	694c <__pow5mult+0x114>
    687c:	8021d07a 	srai	r16,r16,1
    6880:	80001526 	beq	r16,zero,68d8 <__pow5mult+0xa0>
    6884:	88800017 	ldw	r2,0(r17)
    6888:	10001c26 	beq	r2,zero,68fc <__pow5mult+0xc4>
    688c:	1023883a 	mov	r17,r2
    6890:	8080004c 	andi	r2,r16,1
    6894:	103ff926 	beq	r2,zero,687c <__pow5mult+0x44>
    6898:	880d883a 	mov	r6,r17
    689c:	900b883a 	mov	r5,r18
    68a0:	9809883a 	mov	r4,r19
    68a4:	00066400 	call	6640 <__multiply>
    68a8:	90001b26 	beq	r18,zero,6918 <__pow5mult+0xe0>
    68ac:	91000117 	ldw	r4,4(r18)
    68b0:	98c01317 	ldw	r3,76(r19)
    68b4:	8021d07a 	srai	r16,r16,1
    68b8:	2109883a 	add	r4,r4,r4
    68bc:	2109883a 	add	r4,r4,r4
    68c0:	1907883a 	add	r3,r3,r4
    68c4:	19000017 	ldw	r4,0(r3)
    68c8:	91000015 	stw	r4,0(r18)
    68cc:	1c800015 	stw	r18,0(r3)
    68d0:	1025883a 	mov	r18,r2
    68d4:	803feb1e 	bne	r16,zero,6884 <__pow5mult+0x4c>
    68d8:	9005883a 	mov	r2,r18
    68dc:	dfc00517 	ldw	ra,20(sp)
    68e0:	dd000417 	ldw	r20,16(sp)
    68e4:	dcc00317 	ldw	r19,12(sp)
    68e8:	dc800217 	ldw	r18,8(sp)
    68ec:	dc400117 	ldw	r17,4(sp)
    68f0:	dc000017 	ldw	r16,0(sp)
    68f4:	dec00604 	addi	sp,sp,24
    68f8:	f800283a 	ret
    68fc:	880d883a 	mov	r6,r17
    6900:	880b883a 	mov	r5,r17
    6904:	9809883a 	mov	r4,r19
    6908:	00066400 	call	6640 <__multiply>
    690c:	88800015 	stw	r2,0(r17)
    6910:	10000015 	stw	zero,0(r2)
    6914:	003fdd06 	br	688c <__pow5mult+0x54>
    6918:	1025883a 	mov	r18,r2
    691c:	003fd706 	br	687c <__pow5mult+0x44>
    6920:	10bfffc4 	addi	r2,r2,-1
    6924:	1085883a 	add	r2,r2,r2
    6928:	00c00074 	movhi	r3,1
    692c:	18fd8904 	addi	r3,r3,-2524
    6930:	1085883a 	add	r2,r2,r2
    6934:	1885883a 	add	r2,r3,r2
    6938:	11800017 	ldw	r6,0(r2)
    693c:	000f883a 	mov	r7,zero
    6940:	00062c80 	call	62c8 <__multadd>
    6944:	1025883a 	mov	r18,r2
    6948:	003fc706 	br	6868 <__pow5mult+0x30>
    694c:	05000044 	movi	r20,1
    6950:	a00b883a 	mov	r5,r20
    6954:	9809883a 	mov	r4,r19
    6958:	00061f80 	call	61f8 <_Balloc>
    695c:	1023883a 	mov	r17,r2
    6960:	00809c44 	movi	r2,625
    6964:	88800515 	stw	r2,20(r17)
    6968:	8d000415 	stw	r20,16(r17)
    696c:	9c401215 	stw	r17,72(r19)
    6970:	88000015 	stw	zero,0(r17)
    6974:	003fc606 	br	6890 <__pow5mult+0x58>

00006978 <__lshift>:
    6978:	defff904 	addi	sp,sp,-28
    697c:	dd400515 	stw	r21,20(sp)
    6980:	dcc00315 	stw	r19,12(sp)
    6984:	302bd17a 	srai	r21,r6,5
    6988:	2cc00417 	ldw	r19,16(r5)
    698c:	28800217 	ldw	r2,8(r5)
    6990:	dd000415 	stw	r20,16(sp)
    6994:	ace7883a 	add	r19,r21,r19
    6998:	dc800215 	stw	r18,8(sp)
    699c:	dc400115 	stw	r17,4(sp)
    69a0:	dc000015 	stw	r16,0(sp)
    69a4:	dfc00615 	stw	ra,24(sp)
    69a8:	9c000044 	addi	r16,r19,1
    69ac:	2823883a 	mov	r17,r5
    69b0:	3029883a 	mov	r20,r6
    69b4:	2025883a 	mov	r18,r4
    69b8:	29400117 	ldw	r5,4(r5)
    69bc:	1400030e 	bge	r2,r16,69cc <__lshift+0x54>
    69c0:	1085883a 	add	r2,r2,r2
    69c4:	29400044 	addi	r5,r5,1
    69c8:	143ffd16 	blt	r2,r16,69c0 <__lshift+0x48>
    69cc:	9009883a 	mov	r4,r18
    69d0:	00061f80 	call	61f8 <_Balloc>
    69d4:	10c00504 	addi	r3,r2,20
    69d8:	0540070e 	bge	zero,r21,69f8 <__lshift+0x80>
    69dc:	ad6b883a 	add	r21,r21,r21
    69e0:	ad6b883a 	add	r21,r21,r21
    69e4:	1809883a 	mov	r4,r3
    69e8:	1d47883a 	add	r3,r3,r21
    69ec:	20000015 	stw	zero,0(r4)
    69f0:	21000104 	addi	r4,r4,4
    69f4:	193ffd1e 	bne	r3,r4,69ec <__lshift+0x74>
    69f8:	8a000417 	ldw	r8,16(r17)
    69fc:	89000504 	addi	r4,r17,20
    6a00:	a18007cc 	andi	r6,r20,31
    6a04:	4211883a 	add	r8,r8,r8
    6a08:	4211883a 	add	r8,r8,r8
    6a0c:	2211883a 	add	r8,r4,r8
    6a10:	30002326 	beq	r6,zero,6aa0 <__lshift+0x128>
    6a14:	02400804 	movi	r9,32
    6a18:	4993c83a 	sub	r9,r9,r6
    6a1c:	000b883a 	mov	r5,zero
    6a20:	21c00017 	ldw	r7,0(r4)
    6a24:	1815883a 	mov	r10,r3
    6a28:	18c00104 	addi	r3,r3,4
    6a2c:	398e983a 	sll	r7,r7,r6
    6a30:	21000104 	addi	r4,r4,4
    6a34:	394ab03a 	or	r5,r7,r5
    6a38:	197fff15 	stw	r5,-4(r3)
    6a3c:	217fff17 	ldw	r5,-4(r4)
    6a40:	2a4ad83a 	srl	r5,r5,r9
    6a44:	223ff636 	bltu	r4,r8,6a20 <__lshift+0xa8>
    6a48:	51400115 	stw	r5,4(r10)
    6a4c:	28001a1e 	bne	r5,zero,6ab8 <__lshift+0x140>
    6a50:	843fffc4 	addi	r16,r16,-1
    6a54:	14000415 	stw	r16,16(r2)
    6a58:	88000826 	beq	r17,zero,6a7c <__lshift+0x104>
    6a5c:	89000117 	ldw	r4,4(r17)
    6a60:	90c01317 	ldw	r3,76(r18)
    6a64:	2109883a 	add	r4,r4,r4
    6a68:	2109883a 	add	r4,r4,r4
    6a6c:	1907883a 	add	r3,r3,r4
    6a70:	19000017 	ldw	r4,0(r3)
    6a74:	89000015 	stw	r4,0(r17)
    6a78:	1c400015 	stw	r17,0(r3)
    6a7c:	dfc00617 	ldw	ra,24(sp)
    6a80:	dd400517 	ldw	r21,20(sp)
    6a84:	dd000417 	ldw	r20,16(sp)
    6a88:	dcc00317 	ldw	r19,12(sp)
    6a8c:	dc800217 	ldw	r18,8(sp)
    6a90:	dc400117 	ldw	r17,4(sp)
    6a94:	dc000017 	ldw	r16,0(sp)
    6a98:	dec00704 	addi	sp,sp,28
    6a9c:	f800283a 	ret
    6aa0:	21400017 	ldw	r5,0(r4)
    6aa4:	18c00104 	addi	r3,r3,4
    6aa8:	21000104 	addi	r4,r4,4
    6aac:	197fff15 	stw	r5,-4(r3)
    6ab0:	223ffb36 	bltu	r4,r8,6aa0 <__lshift+0x128>
    6ab4:	003fe606 	br	6a50 <__lshift+0xd8>
    6ab8:	9c000084 	addi	r16,r19,2
    6abc:	003fe406 	br	6a50 <__lshift+0xd8>

00006ac0 <__mcmp>:
    6ac0:	20800417 	ldw	r2,16(r4)
    6ac4:	28c00417 	ldw	r3,16(r5)
    6ac8:	10c5c83a 	sub	r2,r2,r3
    6acc:	1000111e 	bne	r2,zero,6b14 <__mcmp+0x54>
    6ad0:	18c7883a 	add	r3,r3,r3
    6ad4:	18c7883a 	add	r3,r3,r3
    6ad8:	21000504 	addi	r4,r4,20
    6adc:	29400504 	addi	r5,r5,20
    6ae0:	20c5883a 	add	r2,r4,r3
    6ae4:	28cb883a 	add	r5,r5,r3
    6ae8:	00000106 	br	6af0 <__mcmp+0x30>
    6aec:	20800a2e 	bgeu	r4,r2,6b18 <__mcmp+0x58>
    6af0:	10bfff04 	addi	r2,r2,-4
    6af4:	297fff04 	addi	r5,r5,-4
    6af8:	11800017 	ldw	r6,0(r2)
    6afc:	28c00017 	ldw	r3,0(r5)
    6b00:	30fffa26 	beq	r6,r3,6aec <__mcmp+0x2c>
    6b04:	30c00236 	bltu	r6,r3,6b10 <__mcmp+0x50>
    6b08:	00800044 	movi	r2,1
    6b0c:	f800283a 	ret
    6b10:	00bfffc4 	movi	r2,-1
    6b14:	f800283a 	ret
    6b18:	0005883a 	mov	r2,zero
    6b1c:	f800283a 	ret

00006b20 <__mdiff>:
    6b20:	28c00417 	ldw	r3,16(r5)
    6b24:	30800417 	ldw	r2,16(r6)
    6b28:	defffa04 	addi	sp,sp,-24
    6b2c:	dcc00315 	stw	r19,12(sp)
    6b30:	dc800215 	stw	r18,8(sp)
    6b34:	dfc00515 	stw	ra,20(sp)
    6b38:	dd000415 	stw	r20,16(sp)
    6b3c:	dc400115 	stw	r17,4(sp)
    6b40:	dc000015 	stw	r16,0(sp)
    6b44:	1887c83a 	sub	r3,r3,r2
    6b48:	2825883a 	mov	r18,r5
    6b4c:	3027883a 	mov	r19,r6
    6b50:	1800141e 	bne	r3,zero,6ba4 <__mdiff+0x84>
    6b54:	1085883a 	add	r2,r2,r2
    6b58:	1085883a 	add	r2,r2,r2
    6b5c:	2a000504 	addi	r8,r5,20
    6b60:	34000504 	addi	r16,r6,20
    6b64:	4087883a 	add	r3,r8,r2
    6b68:	8085883a 	add	r2,r16,r2
    6b6c:	00000106 	br	6b74 <__mdiff+0x54>
    6b70:	40c0592e 	bgeu	r8,r3,6cd8 <__mdiff+0x1b8>
    6b74:	18ffff04 	addi	r3,r3,-4
    6b78:	10bfff04 	addi	r2,r2,-4
    6b7c:	19c00017 	ldw	r7,0(r3)
    6b80:	11400017 	ldw	r5,0(r2)
    6b84:	397ffa26 	beq	r7,r5,6b70 <__mdiff+0x50>
    6b88:	3940592e 	bgeu	r7,r5,6cf0 <__mdiff+0x1d0>
    6b8c:	9005883a 	mov	r2,r18
    6b90:	4023883a 	mov	r17,r8
    6b94:	9825883a 	mov	r18,r19
    6b98:	05000044 	movi	r20,1
    6b9c:	1027883a 	mov	r19,r2
    6ba0:	00000406 	br	6bb4 <__mdiff+0x94>
    6ba4:	18005616 	blt	r3,zero,6d00 <__mdiff+0x1e0>
    6ba8:	34400504 	addi	r17,r6,20
    6bac:	2c000504 	addi	r16,r5,20
    6bb0:	0029883a 	mov	r20,zero
    6bb4:	91400117 	ldw	r5,4(r18)
    6bb8:	00061f80 	call	61f8 <_Balloc>
    6bbc:	92400417 	ldw	r9,16(r18)
    6bc0:	9b000417 	ldw	r12,16(r19)
    6bc4:	12c00504 	addi	r11,r2,20
    6bc8:	4a51883a 	add	r8,r9,r9
    6bcc:	6319883a 	add	r12,r12,r12
    6bd0:	4211883a 	add	r8,r8,r8
    6bd4:	6319883a 	add	r12,r12,r12
    6bd8:	15000315 	stw	r20,12(r2)
    6bdc:	8211883a 	add	r8,r16,r8
    6be0:	8b19883a 	add	r12,r17,r12
    6be4:	0007883a 	mov	r3,zero
    6be8:	81400017 	ldw	r5,0(r16)
    6bec:	89c00017 	ldw	r7,0(r17)
    6bf0:	59800104 	addi	r6,r11,4
    6bf4:	293fffcc 	andi	r4,r5,65535
    6bf8:	20c7883a 	add	r3,r4,r3
    6bfc:	393fffcc 	andi	r4,r7,65535
    6c00:	1909c83a 	sub	r4,r3,r4
    6c04:	280ad43a 	srli	r5,r5,16
    6c08:	380ed43a 	srli	r7,r7,16
    6c0c:	2007d43a 	srai	r3,r4,16
    6c10:	213fffcc 	andi	r4,r4,65535
    6c14:	29cbc83a 	sub	r5,r5,r7
    6c18:	28c7883a 	add	r3,r5,r3
    6c1c:	180a943a 	slli	r5,r3,16
    6c20:	8c400104 	addi	r17,r17,4
    6c24:	84000104 	addi	r16,r16,4
    6c28:	2908b03a 	or	r4,r5,r4
    6c2c:	59000015 	stw	r4,0(r11)
    6c30:	1807d43a 	srai	r3,r3,16
    6c34:	3015883a 	mov	r10,r6
    6c38:	3017883a 	mov	r11,r6
    6c3c:	8b3fea36 	bltu	r17,r12,6be8 <__mdiff+0xc8>
    6c40:	8200162e 	bgeu	r16,r8,6c9c <__mdiff+0x17c>
    6c44:	8017883a 	mov	r11,r16
    6c48:	59400017 	ldw	r5,0(r11)
    6c4c:	31800104 	addi	r6,r6,4
    6c50:	5ac00104 	addi	r11,r11,4
    6c54:	293fffcc 	andi	r4,r5,65535
    6c58:	20c7883a 	add	r3,r4,r3
    6c5c:	280ed43a 	srli	r7,r5,16
    6c60:	180bd43a 	srai	r5,r3,16
    6c64:	193fffcc 	andi	r4,r3,65535
    6c68:	3947883a 	add	r3,r7,r5
    6c6c:	180a943a 	slli	r5,r3,16
    6c70:	1807d43a 	srai	r3,r3,16
    6c74:	2908b03a 	or	r4,r5,r4
    6c78:	313fff15 	stw	r4,-4(r6)
    6c7c:	5a3ff236 	bltu	r11,r8,6c48 <__mdiff+0x128>
    6c80:	0406303a 	nor	r3,zero,r16
    6c84:	1a07883a 	add	r3,r3,r8
    6c88:	1806d0ba 	srli	r3,r3,2
    6c8c:	18c00044 	addi	r3,r3,1
    6c90:	18c7883a 	add	r3,r3,r3
    6c94:	18c7883a 	add	r3,r3,r3
    6c98:	50d5883a 	add	r10,r10,r3
    6c9c:	50ffff04 	addi	r3,r10,-4
    6ca0:	2000041e 	bne	r4,zero,6cb4 <__mdiff+0x194>
    6ca4:	18ffff04 	addi	r3,r3,-4
    6ca8:	19000017 	ldw	r4,0(r3)
    6cac:	4a7fffc4 	addi	r9,r9,-1
    6cb0:	203ffc26 	beq	r4,zero,6ca4 <__mdiff+0x184>
    6cb4:	12400415 	stw	r9,16(r2)
    6cb8:	dfc00517 	ldw	ra,20(sp)
    6cbc:	dd000417 	ldw	r20,16(sp)
    6cc0:	dcc00317 	ldw	r19,12(sp)
    6cc4:	dc800217 	ldw	r18,8(sp)
    6cc8:	dc400117 	ldw	r17,4(sp)
    6ccc:	dc000017 	ldw	r16,0(sp)
    6cd0:	dec00604 	addi	sp,sp,24
    6cd4:	f800283a 	ret
    6cd8:	000b883a 	mov	r5,zero
    6cdc:	00061f80 	call	61f8 <_Balloc>
    6ce0:	00c00044 	movi	r3,1
    6ce4:	10c00415 	stw	r3,16(r2)
    6ce8:	10000515 	stw	zero,20(r2)
    6cec:	003ff206 	br	6cb8 <__mdiff+0x198>
    6cf0:	8023883a 	mov	r17,r16
    6cf4:	0029883a 	mov	r20,zero
    6cf8:	4021883a 	mov	r16,r8
    6cfc:	003fad06 	br	6bb4 <__mdiff+0x94>
    6d00:	9005883a 	mov	r2,r18
    6d04:	94400504 	addi	r17,r18,20
    6d08:	9c000504 	addi	r16,r19,20
    6d0c:	9825883a 	mov	r18,r19
    6d10:	05000044 	movi	r20,1
    6d14:	1027883a 	mov	r19,r2
    6d18:	003fa606 	br	6bb4 <__mdiff+0x94>

00006d1c <__ulp>:
    6d1c:	295ffc2c 	andhi	r5,r5,32752
    6d20:	00bf3034 	movhi	r2,64704
    6d24:	2887883a 	add	r3,r5,r2
    6d28:	00c0020e 	bge	zero,r3,6d34 <__ulp+0x18>
    6d2c:	0005883a 	mov	r2,zero
    6d30:	f800283a 	ret
    6d34:	00c7c83a 	sub	r3,zero,r3
    6d38:	1807d53a 	srai	r3,r3,20
    6d3c:	008004c4 	movi	r2,19
    6d40:	10c00b0e 	bge	r2,r3,6d70 <__ulp+0x54>
    6d44:	18bffb04 	addi	r2,r3,-20
    6d48:	01000784 	movi	r4,30
    6d4c:	0007883a 	mov	r3,zero
    6d50:	20800516 	blt	r4,r2,6d68 <__ulp+0x4c>
    6d54:	010007c4 	movi	r4,31
    6d58:	2089c83a 	sub	r4,r4,r2
    6d5c:	00800044 	movi	r2,1
    6d60:	1104983a 	sll	r2,r2,r4
    6d64:	f800283a 	ret
    6d68:	00800044 	movi	r2,1
    6d6c:	f800283a 	ret
    6d70:	01400234 	movhi	r5,8
    6d74:	28c7d83a 	sra	r3,r5,r3
    6d78:	0005883a 	mov	r2,zero
    6d7c:	f800283a 	ret

00006d80 <__b2d>:
    6d80:	defffa04 	addi	sp,sp,-24
    6d84:	dc000015 	stw	r16,0(sp)
    6d88:	24000417 	ldw	r16,16(r4)
    6d8c:	dc400115 	stw	r17,4(sp)
    6d90:	24400504 	addi	r17,r4,20
    6d94:	8421883a 	add	r16,r16,r16
    6d98:	8421883a 	add	r16,r16,r16
    6d9c:	8c21883a 	add	r16,r17,r16
    6da0:	dc800215 	stw	r18,8(sp)
    6da4:	84bfff17 	ldw	r18,-4(r16)
    6da8:	dd000415 	stw	r20,16(sp)
    6dac:	dcc00315 	stw	r19,12(sp)
    6db0:	9009883a 	mov	r4,r18
    6db4:	2829883a 	mov	r20,r5
    6db8:	dfc00515 	stw	ra,20(sp)
    6dbc:	00064ec0 	call	64ec <__hi0bits>
    6dc0:	00c00804 	movi	r3,32
    6dc4:	1889c83a 	sub	r4,r3,r2
    6dc8:	a1000015 	stw	r4,0(r20)
    6dcc:	01000284 	movi	r4,10
    6dd0:	84ffff04 	addi	r19,r16,-4
    6dd4:	20801216 	blt	r4,r2,6e20 <__b2d+0xa0>
    6dd8:	018002c4 	movi	r6,11
    6ddc:	308dc83a 	sub	r6,r6,r2
    6de0:	9186d83a 	srl	r3,r18,r6
    6de4:	18cffc34 	orhi	r3,r3,16368
    6de8:	8cc0212e 	bgeu	r17,r19,6e70 <__b2d+0xf0>
    6dec:	813ffe17 	ldw	r4,-8(r16)
    6df0:	218cd83a 	srl	r6,r4,r6
    6df4:	10800544 	addi	r2,r2,21
    6df8:	9084983a 	sll	r2,r18,r2
    6dfc:	1184b03a 	or	r2,r2,r6
    6e00:	dfc00517 	ldw	ra,20(sp)
    6e04:	dd000417 	ldw	r20,16(sp)
    6e08:	dcc00317 	ldw	r19,12(sp)
    6e0c:	dc800217 	ldw	r18,8(sp)
    6e10:	dc400117 	ldw	r17,4(sp)
    6e14:	dc000017 	ldw	r16,0(sp)
    6e18:	dec00604 	addi	sp,sp,24
    6e1c:	f800283a 	ret
    6e20:	8cc00f2e 	bgeu	r17,r19,6e60 <__b2d+0xe0>
    6e24:	117ffd44 	addi	r5,r2,-11
    6e28:	80bffe17 	ldw	r2,-8(r16)
    6e2c:	28000e26 	beq	r5,zero,6e68 <__b2d+0xe8>
    6e30:	1949c83a 	sub	r4,r3,r5
    6e34:	9164983a 	sll	r18,r18,r5
    6e38:	1106d83a 	srl	r3,r2,r4
    6e3c:	81bffe04 	addi	r6,r16,-8
    6e40:	948ffc34 	orhi	r18,r18,16368
    6e44:	90c6b03a 	or	r3,r18,r3
    6e48:	89800e2e 	bgeu	r17,r6,6e84 <__b2d+0x104>
    6e4c:	81bffd17 	ldw	r6,-12(r16)
    6e50:	1144983a 	sll	r2,r2,r5
    6e54:	310ad83a 	srl	r5,r6,r4
    6e58:	2884b03a 	or	r2,r5,r2
    6e5c:	003fe806 	br	6e00 <__b2d+0x80>
    6e60:	10bffd44 	addi	r2,r2,-11
    6e64:	1000041e 	bne	r2,zero,6e78 <__b2d+0xf8>
    6e68:	90cffc34 	orhi	r3,r18,16368
    6e6c:	003fe406 	br	6e00 <__b2d+0x80>
    6e70:	000d883a 	mov	r6,zero
    6e74:	003fdf06 	br	6df4 <__b2d+0x74>
    6e78:	90a4983a 	sll	r18,r18,r2
    6e7c:	0005883a 	mov	r2,zero
    6e80:	003ff906 	br	6e68 <__b2d+0xe8>
    6e84:	1144983a 	sll	r2,r2,r5
    6e88:	003fdd06 	br	6e00 <__b2d+0x80>

00006e8c <__d2b>:
    6e8c:	defff804 	addi	sp,sp,-32
    6e90:	dc000215 	stw	r16,8(sp)
    6e94:	3021883a 	mov	r16,r6
    6e98:	dc400315 	stw	r17,12(sp)
    6e9c:	8022907a 	slli	r17,r16,1
    6ea0:	dd000615 	stw	r20,24(sp)
    6ea4:	2829883a 	mov	r20,r5
    6ea8:	01400044 	movi	r5,1
    6eac:	dcc00515 	stw	r19,20(sp)
    6eb0:	dc800415 	stw	r18,16(sp)
    6eb4:	dfc00715 	stw	ra,28(sp)
    6eb8:	3825883a 	mov	r18,r7
    6ebc:	8822d57a 	srli	r17,r17,21
    6ec0:	00061f80 	call	61f8 <_Balloc>
    6ec4:	1027883a 	mov	r19,r2
    6ec8:	00800434 	movhi	r2,16
    6ecc:	10bfffc4 	addi	r2,r2,-1
    6ed0:	808c703a 	and	r6,r16,r2
    6ed4:	88000126 	beq	r17,zero,6edc <__d2b+0x50>
    6ed8:	31800434 	orhi	r6,r6,16
    6edc:	d9800015 	stw	r6,0(sp)
    6ee0:	a0002426 	beq	r20,zero,6f74 <__d2b+0xe8>
    6ee4:	d9000104 	addi	r4,sp,4
    6ee8:	dd000115 	stw	r20,4(sp)
    6eec:	00065540 	call	6554 <__lo0bits>
    6ef0:	d8c00017 	ldw	r3,0(sp)
    6ef4:	10002f1e 	bne	r2,zero,6fb4 <__d2b+0x128>
    6ef8:	d9000117 	ldw	r4,4(sp)
    6efc:	99000515 	stw	r4,20(r19)
    6f00:	1821003a 	cmpeq	r16,r3,zero
    6f04:	01000084 	movi	r4,2
    6f08:	2421c83a 	sub	r16,r4,r16
    6f0c:	98c00615 	stw	r3,24(r19)
    6f10:	9c000415 	stw	r16,16(r19)
    6f14:	88001f1e 	bne	r17,zero,6f94 <__d2b+0x108>
    6f18:	10bef384 	addi	r2,r2,-1074
    6f1c:	90800015 	stw	r2,0(r18)
    6f20:	00900034 	movhi	r2,16384
    6f24:	10bfffc4 	addi	r2,r2,-1
    6f28:	8085883a 	add	r2,r16,r2
    6f2c:	1085883a 	add	r2,r2,r2
    6f30:	1085883a 	add	r2,r2,r2
    6f34:	9885883a 	add	r2,r19,r2
    6f38:	11000517 	ldw	r4,20(r2)
    6f3c:	8020917a 	slli	r16,r16,5
    6f40:	00064ec0 	call	64ec <__hi0bits>
    6f44:	d8c00817 	ldw	r3,32(sp)
    6f48:	8085c83a 	sub	r2,r16,r2
    6f4c:	18800015 	stw	r2,0(r3)
    6f50:	9805883a 	mov	r2,r19
    6f54:	dfc00717 	ldw	ra,28(sp)
    6f58:	dd000617 	ldw	r20,24(sp)
    6f5c:	dcc00517 	ldw	r19,20(sp)
    6f60:	dc800417 	ldw	r18,16(sp)
    6f64:	dc400317 	ldw	r17,12(sp)
    6f68:	dc000217 	ldw	r16,8(sp)
    6f6c:	dec00804 	addi	sp,sp,32
    6f70:	f800283a 	ret
    6f74:	d809883a 	mov	r4,sp
    6f78:	00065540 	call	6554 <__lo0bits>
    6f7c:	d8c00017 	ldw	r3,0(sp)
    6f80:	04000044 	movi	r16,1
    6f84:	9c000415 	stw	r16,16(r19)
    6f88:	98c00515 	stw	r3,20(r19)
    6f8c:	10800804 	addi	r2,r2,32
    6f90:	883fe126 	beq	r17,zero,6f18 <__d2b+0x8c>
    6f94:	00c00d44 	movi	r3,53
    6f98:	8c7ef344 	addi	r17,r17,-1075
    6f9c:	88a3883a 	add	r17,r17,r2
    6fa0:	1885c83a 	sub	r2,r3,r2
    6fa4:	d8c00817 	ldw	r3,32(sp)
    6fa8:	94400015 	stw	r17,0(r18)
    6fac:	18800015 	stw	r2,0(r3)
    6fb0:	003fe706 	br	6f50 <__d2b+0xc4>
    6fb4:	01000804 	movi	r4,32
    6fb8:	2089c83a 	sub	r4,r4,r2
    6fbc:	1908983a 	sll	r4,r3,r4
    6fc0:	d9400117 	ldw	r5,4(sp)
    6fc4:	1886d83a 	srl	r3,r3,r2
    6fc8:	2148b03a 	or	r4,r4,r5
    6fcc:	99000515 	stw	r4,20(r19)
    6fd0:	d8c00015 	stw	r3,0(sp)
    6fd4:	003fca06 	br	6f00 <__d2b+0x74>

00006fd8 <__ratio>:
    6fd8:	defff904 	addi	sp,sp,-28
    6fdc:	dc400315 	stw	r17,12(sp)
    6fe0:	2823883a 	mov	r17,r5
    6fe4:	d9400104 	addi	r5,sp,4
    6fe8:	dfc00615 	stw	ra,24(sp)
    6fec:	dcc00515 	stw	r19,20(sp)
    6ff0:	dc800415 	stw	r18,16(sp)
    6ff4:	2027883a 	mov	r19,r4
    6ff8:	dc000215 	stw	r16,8(sp)
    6ffc:	0006d800 	call	6d80 <__b2d>
    7000:	d80b883a 	mov	r5,sp
    7004:	8809883a 	mov	r4,r17
    7008:	1025883a 	mov	r18,r2
    700c:	1821883a 	mov	r16,r3
    7010:	0006d800 	call	6d80 <__b2d>
    7014:	8a000417 	ldw	r8,16(r17)
    7018:	99000417 	ldw	r4,16(r19)
    701c:	d9400117 	ldw	r5,4(sp)
    7020:	2209c83a 	sub	r4,r4,r8
    7024:	2010917a 	slli	r8,r4,5
    7028:	d9000017 	ldw	r4,0(sp)
    702c:	2909c83a 	sub	r4,r5,r4
    7030:	4109883a 	add	r4,r8,r4
    7034:	01000e0e 	bge	zero,r4,7070 <__ratio+0x98>
    7038:	2008953a 	slli	r4,r4,20
    703c:	2421883a 	add	r16,r4,r16
    7040:	100d883a 	mov	r6,r2
    7044:	180f883a 	mov	r7,r3
    7048:	9009883a 	mov	r4,r18
    704c:	800b883a 	mov	r5,r16
    7050:	000aec40 	call	aec4 <__divdf3>
    7054:	dfc00617 	ldw	ra,24(sp)
    7058:	dcc00517 	ldw	r19,20(sp)
    705c:	dc800417 	ldw	r18,16(sp)
    7060:	dc400317 	ldw	r17,12(sp)
    7064:	dc000217 	ldw	r16,8(sp)
    7068:	dec00704 	addi	sp,sp,28
    706c:	f800283a 	ret
    7070:	2008953a 	slli	r4,r4,20
    7074:	1907c83a 	sub	r3,r3,r4
    7078:	003ff106 	br	7040 <__ratio+0x68>

0000707c <_mprec_log10>:
    707c:	defffe04 	addi	sp,sp,-8
    7080:	dc000015 	stw	r16,0(sp)
    7084:	dfc00115 	stw	ra,4(sp)
    7088:	008005c4 	movi	r2,23
    708c:	2021883a 	mov	r16,r4
    7090:	11000d0e 	bge	r2,r4,70c8 <_mprec_log10+0x4c>
    7094:	0005883a 	mov	r2,zero
    7098:	00cffc34 	movhi	r3,16368
    709c:	843fffc4 	addi	r16,r16,-1
    70a0:	000d883a 	mov	r6,zero
    70a4:	01d00934 	movhi	r7,16420
    70a8:	1009883a 	mov	r4,r2
    70ac:	180b883a 	mov	r5,r3
    70b0:	000ba040 	call	ba04 <__muldf3>
    70b4:	803ff91e 	bne	r16,zero,709c <_mprec_log10+0x20>
    70b8:	dfc00117 	ldw	ra,4(sp)
    70bc:	dc000017 	ldw	r16,0(sp)
    70c0:	dec00204 	addi	sp,sp,8
    70c4:	f800283a 	ret
    70c8:	202090fa 	slli	r16,r4,3
    70cc:	00800074 	movhi	r2,1
    70d0:	10bda004 	addi	r2,r2,-2432
    70d4:	1421883a 	add	r16,r2,r16
    70d8:	80800017 	ldw	r2,0(r16)
    70dc:	80c00117 	ldw	r3,4(r16)
    70e0:	dfc00117 	ldw	ra,4(sp)
    70e4:	dc000017 	ldw	r16,0(sp)
    70e8:	dec00204 	addi	sp,sp,8
    70ec:	f800283a 	ret

000070f0 <__copybits>:
    70f0:	297fffc4 	addi	r5,r5,-1
    70f4:	280fd17a 	srai	r7,r5,5
    70f8:	30c00417 	ldw	r3,16(r6)
    70fc:	30800504 	addi	r2,r6,20
    7100:	39c00044 	addi	r7,r7,1
    7104:	18c7883a 	add	r3,r3,r3
    7108:	39cf883a 	add	r7,r7,r7
    710c:	18c7883a 	add	r3,r3,r3
    7110:	39cf883a 	add	r7,r7,r7
    7114:	10c7883a 	add	r3,r2,r3
    7118:	21cf883a 	add	r7,r4,r7
    711c:	10c00d2e 	bgeu	r2,r3,7154 <__copybits+0x64>
    7120:	200b883a 	mov	r5,r4
    7124:	12000017 	ldw	r8,0(r2)
    7128:	29400104 	addi	r5,r5,4
    712c:	10800104 	addi	r2,r2,4
    7130:	2a3fff15 	stw	r8,-4(r5)
    7134:	10fffb36 	bltu	r2,r3,7124 <__copybits+0x34>
    7138:	1985c83a 	sub	r2,r3,r6
    713c:	10bffac4 	addi	r2,r2,-21
    7140:	1004d0ba 	srli	r2,r2,2
    7144:	10800044 	addi	r2,r2,1
    7148:	1085883a 	add	r2,r2,r2
    714c:	1085883a 	add	r2,r2,r2
    7150:	2089883a 	add	r4,r4,r2
    7154:	21c0032e 	bgeu	r4,r7,7164 <__copybits+0x74>
    7158:	20000015 	stw	zero,0(r4)
    715c:	21000104 	addi	r4,r4,4
    7160:	21fffd36 	bltu	r4,r7,7158 <__copybits+0x68>
    7164:	f800283a 	ret

00007168 <__any_on>:
    7168:	20c00417 	ldw	r3,16(r4)
    716c:	2805d17a 	srai	r2,r5,5
    7170:	21000504 	addi	r4,r4,20
    7174:	18800d0e 	bge	r3,r2,71ac <__any_on+0x44>
    7178:	18c7883a 	add	r3,r3,r3
    717c:	18c7883a 	add	r3,r3,r3
    7180:	20c7883a 	add	r3,r4,r3
    7184:	20c0192e 	bgeu	r4,r3,71ec <__any_on+0x84>
    7188:	18bfff17 	ldw	r2,-4(r3)
    718c:	18ffff04 	addi	r3,r3,-4
    7190:	1000041e 	bne	r2,zero,71a4 <__any_on+0x3c>
    7194:	20c0142e 	bgeu	r4,r3,71e8 <__any_on+0x80>
    7198:	18ffff04 	addi	r3,r3,-4
    719c:	19400017 	ldw	r5,0(r3)
    71a0:	283ffc26 	beq	r5,zero,7194 <__any_on+0x2c>
    71a4:	00800044 	movi	r2,1
    71a8:	f800283a 	ret
    71ac:	10c00a0e 	bge	r2,r3,71d8 <__any_on+0x70>
    71b0:	1085883a 	add	r2,r2,r2
    71b4:	1085883a 	add	r2,r2,r2
    71b8:	294007cc 	andi	r5,r5,31
    71bc:	2087883a 	add	r3,r4,r2
    71c0:	283ff026 	beq	r5,zero,7184 <__any_on+0x1c>
    71c4:	19800017 	ldw	r6,0(r3)
    71c8:	3144d83a 	srl	r2,r6,r5
    71cc:	114a983a 	sll	r5,r2,r5
    71d0:	317ff41e 	bne	r6,r5,71a4 <__any_on+0x3c>
    71d4:	003feb06 	br	7184 <__any_on+0x1c>
    71d8:	1085883a 	add	r2,r2,r2
    71dc:	1085883a 	add	r2,r2,r2
    71e0:	2087883a 	add	r3,r4,r2
    71e4:	003fe706 	br	7184 <__any_on+0x1c>
    71e8:	f800283a 	ret
    71ec:	0005883a 	mov	r2,zero
    71f0:	f800283a 	ret

000071f4 <_realloc_r>:
    71f4:	defff604 	addi	sp,sp,-40
    71f8:	dc400115 	stw	r17,4(sp)
    71fc:	dfc00915 	stw	ra,36(sp)
    7200:	df000815 	stw	fp,32(sp)
    7204:	ddc00715 	stw	r23,28(sp)
    7208:	dd800615 	stw	r22,24(sp)
    720c:	dd400515 	stw	r21,20(sp)
    7210:	dd000415 	stw	r20,16(sp)
    7214:	dcc00315 	stw	r19,12(sp)
    7218:	dc800215 	stw	r18,8(sp)
    721c:	dc000015 	stw	r16,0(sp)
    7220:	3023883a 	mov	r17,r6
    7224:	2800b626 	beq	r5,zero,7500 <_realloc_r+0x30c>
    7228:	2829883a 	mov	r20,r5
    722c:	2025883a 	mov	r18,r4
    7230:	000d24c0 	call	d24c <__malloc_lock>
    7234:	a0ffff17 	ldw	r3,-4(r20)
    7238:	043fff04 	movi	r16,-4
    723c:	888002c4 	addi	r2,r17,11
    7240:	01000584 	movi	r4,22
    7244:	a57ffe04 	addi	r21,r20,-8
    7248:	1c20703a 	and	r16,r3,r16
    724c:	2080332e 	bgeu	r4,r2,731c <_realloc_r+0x128>
    7250:	05bffe04 	movi	r22,-8
    7254:	15ac703a 	and	r22,r2,r22
    7258:	b005883a 	mov	r2,r22
    725c:	b0005716 	blt	r22,zero,73bc <_realloc_r+0x1c8>
    7260:	b4405636 	bltu	r22,r17,73bc <_realloc_r+0x1c8>
    7264:	8080300e 	bge	r16,r2,7328 <_realloc_r+0x134>
    7268:	07000074 	movhi	fp,1
    726c:	e73f4a04 	addi	fp,fp,-728
    7270:	e2000217 	ldw	r8,8(fp)
    7274:	ac09883a 	add	r4,r21,r16
    7278:	22006126 	beq	r4,r8,7400 <_realloc_r+0x20c>
    727c:	22400117 	ldw	r9,4(r4)
    7280:	01ffff84 	movi	r7,-2
    7284:	49ce703a 	and	r7,r9,r7
    7288:	21cf883a 	add	r7,r4,r7
    728c:	39800117 	ldw	r6,4(r7)
    7290:	3180004c 	andi	r6,r6,1
    7294:	30003e26 	beq	r6,zero,7390 <_realloc_r+0x19c>
    7298:	18c0004c 	andi	r3,r3,1
    729c:	18008126 	beq	r3,zero,74a4 <_realloc_r+0x2b0>
    72a0:	880b883a 	mov	r5,r17
    72a4:	9009883a 	mov	r4,r18
    72a8:	000553c0 	call	553c <_malloc_r>
    72ac:	1023883a 	mov	r17,r2
    72b0:	10011e26 	beq	r2,zero,772c <_realloc_r+0x538>
    72b4:	a0ffff17 	ldw	r3,-4(r20)
    72b8:	113ffe04 	addi	r4,r2,-8
    72bc:	00bfff84 	movi	r2,-2
    72c0:	1884703a 	and	r2,r3,r2
    72c4:	a885883a 	add	r2,r21,r2
    72c8:	2080ee26 	beq	r4,r2,7684 <_realloc_r+0x490>
    72cc:	81bfff04 	addi	r6,r16,-4
    72d0:	00800904 	movi	r2,36
    72d4:	1180b836 	bltu	r2,r6,75b8 <_realloc_r+0x3c4>
    72d8:	00c004c4 	movi	r3,19
    72dc:	19809536 	bltu	r3,r6,7534 <_realloc_r+0x340>
    72e0:	8805883a 	mov	r2,r17
    72e4:	a007883a 	mov	r3,r20
    72e8:	19000017 	ldw	r4,0(r3)
    72ec:	11000015 	stw	r4,0(r2)
    72f0:	19000117 	ldw	r4,4(r3)
    72f4:	11000115 	stw	r4,4(r2)
    72f8:	18c00217 	ldw	r3,8(r3)
    72fc:	10c00215 	stw	r3,8(r2)
    7300:	a00b883a 	mov	r5,r20
    7304:	9009883a 	mov	r4,r18
    7308:	00049500 	call	4950 <_free_r>
    730c:	9009883a 	mov	r4,r18
    7310:	000d2700 	call	d270 <__malloc_unlock>
    7314:	8805883a 	mov	r2,r17
    7318:	00001106 	br	7360 <_realloc_r+0x16c>
    731c:	00800404 	movi	r2,16
    7320:	102d883a 	mov	r22,r2
    7324:	003fce06 	br	7260 <_realloc_r+0x6c>
    7328:	a023883a 	mov	r17,r20
    732c:	858fc83a 	sub	r7,r16,r22
    7330:	008003c4 	movi	r2,15
    7334:	18c0004c 	andi	r3,r3,1
    7338:	11c02436 	bltu	r2,r7,73cc <_realloc_r+0x1d8>
    733c:	1c06b03a 	or	r3,r3,r16
    7340:	a8c00115 	stw	r3,4(r21)
    7344:	ac21883a 	add	r16,r21,r16
    7348:	80800117 	ldw	r2,4(r16)
    734c:	10800054 	ori	r2,r2,1
    7350:	80800115 	stw	r2,4(r16)
    7354:	9009883a 	mov	r4,r18
    7358:	000d2700 	call	d270 <__malloc_unlock>
    735c:	8805883a 	mov	r2,r17
    7360:	dfc00917 	ldw	ra,36(sp)
    7364:	df000817 	ldw	fp,32(sp)
    7368:	ddc00717 	ldw	r23,28(sp)
    736c:	dd800617 	ldw	r22,24(sp)
    7370:	dd400517 	ldw	r21,20(sp)
    7374:	dd000417 	ldw	r20,16(sp)
    7378:	dcc00317 	ldw	r19,12(sp)
    737c:	dc800217 	ldw	r18,8(sp)
    7380:	dc400117 	ldw	r17,4(sp)
    7384:	dc000017 	ldw	r16,0(sp)
    7388:	dec00a04 	addi	sp,sp,40
    738c:	f800283a 	ret
    7390:	017fff04 	movi	r5,-4
    7394:	494a703a 	and	r5,r9,r5
    7398:	814d883a 	add	r6,r16,r5
    739c:	30801e16 	blt	r6,r2,7418 <_realloc_r+0x224>
    73a0:	20800317 	ldw	r2,12(r4)
    73a4:	21000217 	ldw	r4,8(r4)
    73a8:	a023883a 	mov	r17,r20
    73ac:	3021883a 	mov	r16,r6
    73b0:	20800315 	stw	r2,12(r4)
    73b4:	11000215 	stw	r4,8(r2)
    73b8:	003fdc06 	br	732c <_realloc_r+0x138>
    73bc:	00800304 	movi	r2,12
    73c0:	90800015 	stw	r2,0(r18)
    73c4:	0005883a 	mov	r2,zero
    73c8:	003fe506 	br	7360 <_realloc_r+0x16c>
    73cc:	1d86b03a 	or	r3,r3,r22
    73d0:	a8c00115 	stw	r3,4(r21)
    73d4:	ad8b883a 	add	r5,r21,r22
    73d8:	38c00054 	ori	r3,r7,1
    73dc:	28c00115 	stw	r3,4(r5)
    73e0:	29cf883a 	add	r7,r5,r7
    73e4:	38c00117 	ldw	r3,4(r7)
    73e8:	29400204 	addi	r5,r5,8
    73ec:	9009883a 	mov	r4,r18
    73f0:	18800054 	ori	r2,r3,1
    73f4:	38800115 	stw	r2,4(r7)
    73f8:	00049500 	call	4950 <_free_r>
    73fc:	003fd506 	br	7354 <_realloc_r+0x160>
    7400:	21c00117 	ldw	r7,4(r4)
    7404:	017fff04 	movi	r5,-4
    7408:	b1800404 	addi	r6,r22,16
    740c:	394a703a 	and	r5,r7,r5
    7410:	814f883a 	add	r7,r16,r5
    7414:	39805b0e 	bge	r7,r6,7584 <_realloc_r+0x390>
    7418:	18c0004c 	andi	r3,r3,1
    741c:	183fa01e 	bne	r3,zero,72a0 <_realloc_r+0xac>
    7420:	a4fffe17 	ldw	r19,-8(r20)
    7424:	00ffff04 	movi	r3,-4
    7428:	ace7c83a 	sub	r19,r21,r19
    742c:	99800117 	ldw	r6,4(r19)
    7430:	30c6703a 	and	r3,r6,r3
    7434:	20002026 	beq	r4,zero,74b8 <_realloc_r+0x2c4>
    7438:	80ef883a 	add	r23,r16,r3
    743c:	b96f883a 	add	r23,r23,r5
    7440:	22006126 	beq	r4,r8,75c8 <_realloc_r+0x3d4>
    7444:	b8801c16 	blt	r23,r2,74b8 <_realloc_r+0x2c4>
    7448:	20800317 	ldw	r2,12(r4)
    744c:	20c00217 	ldw	r3,8(r4)
    7450:	81bfff04 	addi	r6,r16,-4
    7454:	01000904 	movi	r4,36
    7458:	18800315 	stw	r2,12(r3)
    745c:	10c00215 	stw	r3,8(r2)
    7460:	98c00217 	ldw	r3,8(r19)
    7464:	98800317 	ldw	r2,12(r19)
    7468:	9c400204 	addi	r17,r19,8
    746c:	18800315 	stw	r2,12(r3)
    7470:	10c00215 	stw	r3,8(r2)
    7474:	21801b36 	bltu	r4,r6,74e4 <_realloc_r+0x2f0>
    7478:	008004c4 	movi	r2,19
    747c:	1180362e 	bgeu	r2,r6,7558 <_realloc_r+0x364>
    7480:	a0800017 	ldw	r2,0(r20)
    7484:	98800215 	stw	r2,8(r19)
    7488:	a0800117 	ldw	r2,4(r20)
    748c:	98800315 	stw	r2,12(r19)
    7490:	008006c4 	movi	r2,27
    7494:	11808136 	bltu	r2,r6,769c <_realloc_r+0x4a8>
    7498:	98800404 	addi	r2,r19,16
    749c:	a5000204 	addi	r20,r20,8
    74a0:	00002e06 	br	755c <_realloc_r+0x368>
    74a4:	a4fffe17 	ldw	r19,-8(r20)
    74a8:	00ffff04 	movi	r3,-4
    74ac:	ace7c83a 	sub	r19,r21,r19
    74b0:	99000117 	ldw	r4,4(r19)
    74b4:	20c6703a 	and	r3,r4,r3
    74b8:	983f7926 	beq	r19,zero,72a0 <_realloc_r+0xac>
    74bc:	80ef883a 	add	r23,r16,r3
    74c0:	b8bf7716 	blt	r23,r2,72a0 <_realloc_r+0xac>
    74c4:	98800317 	ldw	r2,12(r19)
    74c8:	98c00217 	ldw	r3,8(r19)
    74cc:	81bfff04 	addi	r6,r16,-4
    74d0:	01000904 	movi	r4,36
    74d4:	18800315 	stw	r2,12(r3)
    74d8:	10c00215 	stw	r3,8(r2)
    74dc:	9c400204 	addi	r17,r19,8
    74e0:	21bfe52e 	bgeu	r4,r6,7478 <_realloc_r+0x284>
    74e4:	a00b883a 	mov	r5,r20
    74e8:	8809883a 	mov	r4,r17
    74ec:	0005f740 	call	5f74 <memmove>
    74f0:	98c00117 	ldw	r3,4(r19)
    74f4:	b821883a 	mov	r16,r23
    74f8:	982b883a 	mov	r21,r19
    74fc:	003f8b06 	br	732c <_realloc_r+0x138>
    7500:	300b883a 	mov	r5,r6
    7504:	dfc00917 	ldw	ra,36(sp)
    7508:	df000817 	ldw	fp,32(sp)
    750c:	ddc00717 	ldw	r23,28(sp)
    7510:	dd800617 	ldw	r22,24(sp)
    7514:	dd400517 	ldw	r21,20(sp)
    7518:	dd000417 	ldw	r20,16(sp)
    751c:	dcc00317 	ldw	r19,12(sp)
    7520:	dc800217 	ldw	r18,8(sp)
    7524:	dc400117 	ldw	r17,4(sp)
    7528:	dc000017 	ldw	r16,0(sp)
    752c:	dec00a04 	addi	sp,sp,40
    7530:	000553c1 	jmpi	553c <_malloc_r>
    7534:	a0c00017 	ldw	r3,0(r20)
    7538:	88c00015 	stw	r3,0(r17)
    753c:	a0c00117 	ldw	r3,4(r20)
    7540:	88c00115 	stw	r3,4(r17)
    7544:	00c006c4 	movi	r3,27
    7548:	19804636 	bltu	r3,r6,7664 <_realloc_r+0x470>
    754c:	88800204 	addi	r2,r17,8
    7550:	a0c00204 	addi	r3,r20,8
    7554:	003f6406 	br	72e8 <_realloc_r+0xf4>
    7558:	8805883a 	mov	r2,r17
    755c:	a0c00017 	ldw	r3,0(r20)
    7560:	b821883a 	mov	r16,r23
    7564:	982b883a 	mov	r21,r19
    7568:	10c00015 	stw	r3,0(r2)
    756c:	a0c00117 	ldw	r3,4(r20)
    7570:	10c00115 	stw	r3,4(r2)
    7574:	a0c00217 	ldw	r3,8(r20)
    7578:	10c00215 	stw	r3,8(r2)
    757c:	98c00117 	ldw	r3,4(r19)
    7580:	003f6a06 	br	732c <_realloc_r+0x138>
    7584:	adab883a 	add	r21,r21,r22
    7588:	3d85c83a 	sub	r2,r7,r22
    758c:	e5400215 	stw	r21,8(fp)
    7590:	10800054 	ori	r2,r2,1
    7594:	a8800115 	stw	r2,4(r21)
    7598:	a0bfff17 	ldw	r2,-4(r20)
    759c:	9009883a 	mov	r4,r18
    75a0:	1080004c 	andi	r2,r2,1
    75a4:	1584b03a 	or	r2,r2,r22
    75a8:	a0bfff15 	stw	r2,-4(r20)
    75ac:	000d2700 	call	d270 <__malloc_unlock>
    75b0:	a005883a 	mov	r2,r20
    75b4:	003f6a06 	br	7360 <_realloc_r+0x16c>
    75b8:	a00b883a 	mov	r5,r20
    75bc:	8809883a 	mov	r4,r17
    75c0:	0005f740 	call	5f74 <memmove>
    75c4:	003f4e06 	br	7300 <_realloc_r+0x10c>
    75c8:	b1000404 	addi	r4,r22,16
    75cc:	b93fba16 	blt	r23,r4,74b8 <_realloc_r+0x2c4>
    75d0:	98800317 	ldw	r2,12(r19)
    75d4:	98c00217 	ldw	r3,8(r19)
    75d8:	81bfff04 	addi	r6,r16,-4
    75dc:	01000904 	movi	r4,36
    75e0:	18800315 	stw	r2,12(r3)
    75e4:	10c00215 	stw	r3,8(r2)
    75e8:	9c400204 	addi	r17,r19,8
    75ec:	21804336 	bltu	r4,r6,76fc <_realloc_r+0x508>
    75f0:	008004c4 	movi	r2,19
    75f4:	11803f2e 	bgeu	r2,r6,76f4 <_realloc_r+0x500>
    75f8:	a0800017 	ldw	r2,0(r20)
    75fc:	98800215 	stw	r2,8(r19)
    7600:	a0800117 	ldw	r2,4(r20)
    7604:	98800315 	stw	r2,12(r19)
    7608:	008006c4 	movi	r2,27
    760c:	11803f36 	bltu	r2,r6,770c <_realloc_r+0x518>
    7610:	98800404 	addi	r2,r19,16
    7614:	a5000204 	addi	r20,r20,8
    7618:	a0c00017 	ldw	r3,0(r20)
    761c:	10c00015 	stw	r3,0(r2)
    7620:	a0c00117 	ldw	r3,4(r20)
    7624:	10c00115 	stw	r3,4(r2)
    7628:	a0c00217 	ldw	r3,8(r20)
    762c:	10c00215 	stw	r3,8(r2)
    7630:	9d87883a 	add	r3,r19,r22
    7634:	bd85c83a 	sub	r2,r23,r22
    7638:	e0c00215 	stw	r3,8(fp)
    763c:	10800054 	ori	r2,r2,1
    7640:	18800115 	stw	r2,4(r3)
    7644:	98800117 	ldw	r2,4(r19)
    7648:	9009883a 	mov	r4,r18
    764c:	1080004c 	andi	r2,r2,1
    7650:	1584b03a 	or	r2,r2,r22
    7654:	98800115 	stw	r2,4(r19)
    7658:	000d2700 	call	d270 <__malloc_unlock>
    765c:	8805883a 	mov	r2,r17
    7660:	003f3f06 	br	7360 <_realloc_r+0x16c>
    7664:	a0c00217 	ldw	r3,8(r20)
    7668:	88c00215 	stw	r3,8(r17)
    766c:	a0c00317 	ldw	r3,12(r20)
    7670:	88c00315 	stw	r3,12(r17)
    7674:	30801126 	beq	r6,r2,76bc <_realloc_r+0x4c8>
    7678:	88800404 	addi	r2,r17,16
    767c:	a0c00404 	addi	r3,r20,16
    7680:	003f1906 	br	72e8 <_realloc_r+0xf4>
    7684:	893fff17 	ldw	r4,-4(r17)
    7688:	00bfff04 	movi	r2,-4
    768c:	a023883a 	mov	r17,r20
    7690:	2084703a 	and	r2,r4,r2
    7694:	80a1883a 	add	r16,r16,r2
    7698:	003f2406 	br	732c <_realloc_r+0x138>
    769c:	a0800217 	ldw	r2,8(r20)
    76a0:	98800415 	stw	r2,16(r19)
    76a4:	a0800317 	ldw	r2,12(r20)
    76a8:	98800515 	stw	r2,20(r19)
    76ac:	31000a26 	beq	r6,r4,76d8 <_realloc_r+0x4e4>
    76b0:	98800604 	addi	r2,r19,24
    76b4:	a5000404 	addi	r20,r20,16
    76b8:	003fa806 	br	755c <_realloc_r+0x368>
    76bc:	a1000417 	ldw	r4,16(r20)
    76c0:	88800604 	addi	r2,r17,24
    76c4:	a0c00604 	addi	r3,r20,24
    76c8:	89000415 	stw	r4,16(r17)
    76cc:	a1000517 	ldw	r4,20(r20)
    76d0:	89000515 	stw	r4,20(r17)
    76d4:	003f0406 	br	72e8 <_realloc_r+0xf4>
    76d8:	a0c00417 	ldw	r3,16(r20)
    76dc:	a5000604 	addi	r20,r20,24
    76e0:	98800804 	addi	r2,r19,32
    76e4:	98c00615 	stw	r3,24(r19)
    76e8:	a0ffff17 	ldw	r3,-4(r20)
    76ec:	98c00715 	stw	r3,28(r19)
    76f0:	003f9a06 	br	755c <_realloc_r+0x368>
    76f4:	8805883a 	mov	r2,r17
    76f8:	003fc706 	br	7618 <_realloc_r+0x424>
    76fc:	a00b883a 	mov	r5,r20
    7700:	8809883a 	mov	r4,r17
    7704:	0005f740 	call	5f74 <memmove>
    7708:	003fc906 	br	7630 <_realloc_r+0x43c>
    770c:	a0800217 	ldw	r2,8(r20)
    7710:	98800415 	stw	r2,16(r19)
    7714:	a0800317 	ldw	r2,12(r20)
    7718:	98800515 	stw	r2,20(r19)
    771c:	31000726 	beq	r6,r4,773c <_realloc_r+0x548>
    7720:	98800604 	addi	r2,r19,24
    7724:	a5000404 	addi	r20,r20,16
    7728:	003fbb06 	br	7618 <_realloc_r+0x424>
    772c:	9009883a 	mov	r4,r18
    7730:	000d2700 	call	d270 <__malloc_unlock>
    7734:	0005883a 	mov	r2,zero
    7738:	003f0906 	br	7360 <_realloc_r+0x16c>
    773c:	a0c00417 	ldw	r3,16(r20)
    7740:	a5000604 	addi	r20,r20,24
    7744:	98800804 	addi	r2,r19,32
    7748:	98c00615 	stw	r3,24(r19)
    774c:	a0ffff17 	ldw	r3,-4(r20)
    7750:	98c00715 	stw	r3,28(r19)
    7754:	003fb006 	br	7618 <_realloc_r+0x424>

00007758 <__fpclassifyd>:
    7758:	00a00034 	movhi	r2,32768
    775c:	10bfffc4 	addi	r2,r2,-1
    7760:	2884703a 	and	r2,r5,r2
    7764:	10000726 	beq	r2,zero,7784 <__fpclassifyd+0x2c>
    7768:	00fffc34 	movhi	r3,65520
    776c:	019ff834 	movhi	r6,32736
    7770:	28c7883a 	add	r3,r5,r3
    7774:	31bfffc4 	addi	r6,r6,-1
    7778:	30c00536 	bltu	r6,r3,7790 <__fpclassifyd+0x38>
    777c:	00800104 	movi	r2,4
    7780:	f800283a 	ret
    7784:	2000021e 	bne	r4,zero,7790 <__fpclassifyd+0x38>
    7788:	00800084 	movi	r2,2
    778c:	f800283a 	ret
    7790:	00dffc34 	movhi	r3,32752
    7794:	019ff834 	movhi	r6,32736
    7798:	28cb883a 	add	r5,r5,r3
    779c:	31bfffc4 	addi	r6,r6,-1
    77a0:	317ff62e 	bgeu	r6,r5,777c <__fpclassifyd+0x24>
    77a4:	01400434 	movhi	r5,16
    77a8:	297fffc4 	addi	r5,r5,-1
    77ac:	28800236 	bltu	r5,r2,77b8 <__fpclassifyd+0x60>
    77b0:	008000c4 	movi	r2,3
    77b4:	f800283a 	ret
    77b8:	10c00226 	beq	r2,r3,77c4 <__fpclassifyd+0x6c>
    77bc:	0005883a 	mov	r2,zero
    77c0:	f800283a 	ret
    77c4:	2005003a 	cmpeq	r2,r4,zero
    77c8:	f800283a 	ret

000077cc <_sbrk_r>:
    77cc:	defffd04 	addi	sp,sp,-12
    77d0:	dc000015 	stw	r16,0(sp)
    77d4:	04000074 	movhi	r16,1
    77d8:	dc400115 	stw	r17,4(sp)
    77dc:	840b9f04 	addi	r16,r16,11900
    77e0:	2023883a 	mov	r17,r4
    77e4:	2809883a 	mov	r4,r5
    77e8:	dfc00215 	stw	ra,8(sp)
    77ec:	80000015 	stw	zero,0(r16)
    77f0:	000d4440 	call	d444 <sbrk>
    77f4:	00ffffc4 	movi	r3,-1
    77f8:	10c00526 	beq	r2,r3,7810 <_sbrk_r+0x44>
    77fc:	dfc00217 	ldw	ra,8(sp)
    7800:	dc400117 	ldw	r17,4(sp)
    7804:	dc000017 	ldw	r16,0(sp)
    7808:	dec00304 	addi	sp,sp,12
    780c:	f800283a 	ret
    7810:	80c00017 	ldw	r3,0(r16)
    7814:	183ff926 	beq	r3,zero,77fc <_sbrk_r+0x30>
    7818:	88c00015 	stw	r3,0(r17)
    781c:	003ff706 	br	77fc <_sbrk_r+0x30>

00007820 <__sread>:
    7820:	defffe04 	addi	sp,sp,-8
    7824:	dc000015 	stw	r16,0(sp)
    7828:	2821883a 	mov	r16,r5
    782c:	2940038f 	ldh	r5,14(r5)
    7830:	dfc00115 	stw	ra,4(sp)
    7834:	00096140 	call	9614 <_read_r>
    7838:	10000716 	blt	r2,zero,7858 <__sread+0x38>
    783c:	80c01417 	ldw	r3,80(r16)
    7840:	1887883a 	add	r3,r3,r2
    7844:	80c01415 	stw	r3,80(r16)
    7848:	dfc00117 	ldw	ra,4(sp)
    784c:	dc000017 	ldw	r16,0(sp)
    7850:	dec00204 	addi	sp,sp,8
    7854:	f800283a 	ret
    7858:	80c0030b 	ldhu	r3,12(r16)
    785c:	18fbffcc 	andi	r3,r3,61439
    7860:	80c0030d 	sth	r3,12(r16)
    7864:	dfc00117 	ldw	ra,4(sp)
    7868:	dc000017 	ldw	r16,0(sp)
    786c:	dec00204 	addi	sp,sp,8
    7870:	f800283a 	ret

00007874 <__seofread>:
    7874:	0005883a 	mov	r2,zero
    7878:	f800283a 	ret

0000787c <__swrite>:
    787c:	2880030b 	ldhu	r2,12(r5)
    7880:	defffb04 	addi	sp,sp,-20
    7884:	dcc00315 	stw	r19,12(sp)
    7888:	dc800215 	stw	r18,8(sp)
    788c:	dc400115 	stw	r17,4(sp)
    7890:	dc000015 	stw	r16,0(sp)
    7894:	dfc00415 	stw	ra,16(sp)
    7898:	10c0400c 	andi	r3,r2,256
    789c:	2821883a 	mov	r16,r5
    78a0:	2023883a 	mov	r17,r4
    78a4:	3025883a 	mov	r18,r6
    78a8:	3827883a 	mov	r19,r7
    78ac:	18000526 	beq	r3,zero,78c4 <__swrite+0x48>
    78b0:	2940038f 	ldh	r5,14(r5)
    78b4:	01c00084 	movi	r7,2
    78b8:	000d883a 	mov	r6,zero
    78bc:	00095b40 	call	95b4 <_lseek_r>
    78c0:	8080030b 	ldhu	r2,12(r16)
    78c4:	8140038f 	ldh	r5,14(r16)
    78c8:	10bbffcc 	andi	r2,r2,61439
    78cc:	980f883a 	mov	r7,r19
    78d0:	900d883a 	mov	r6,r18
    78d4:	8809883a 	mov	r4,r17
    78d8:	8080030d 	sth	r2,12(r16)
    78dc:	dfc00417 	ldw	ra,16(sp)
    78e0:	dcc00317 	ldw	r19,12(sp)
    78e4:	dc800217 	ldw	r18,8(sp)
    78e8:	dc400117 	ldw	r17,4(sp)
    78ec:	dc000017 	ldw	r16,0(sp)
    78f0:	dec00504 	addi	sp,sp,20
    78f4:	00090801 	jmpi	9080 <_write_r>

000078f8 <__sseek>:
    78f8:	defffe04 	addi	sp,sp,-8
    78fc:	dc000015 	stw	r16,0(sp)
    7900:	2821883a 	mov	r16,r5
    7904:	2940038f 	ldh	r5,14(r5)
    7908:	dfc00115 	stw	ra,4(sp)
    790c:	00095b40 	call	95b4 <_lseek_r>
    7910:	00ffffc4 	movi	r3,-1
    7914:	10c00826 	beq	r2,r3,7938 <__sseek+0x40>
    7918:	80c0030b 	ldhu	r3,12(r16)
    791c:	80801415 	stw	r2,80(r16)
    7920:	18c40014 	ori	r3,r3,4096
    7924:	80c0030d 	sth	r3,12(r16)
    7928:	dfc00117 	ldw	ra,4(sp)
    792c:	dc000017 	ldw	r16,0(sp)
    7930:	dec00204 	addi	sp,sp,8
    7934:	f800283a 	ret
    7938:	80c0030b 	ldhu	r3,12(r16)
    793c:	18fbffcc 	andi	r3,r3,61439
    7940:	80c0030d 	sth	r3,12(r16)
    7944:	dfc00117 	ldw	ra,4(sp)
    7948:	dc000017 	ldw	r16,0(sp)
    794c:	dec00204 	addi	sp,sp,8
    7950:	f800283a 	ret

00007954 <__sclose>:
    7954:	2940038f 	ldh	r5,14(r5)
    7958:	00090e01 	jmpi	90e0 <_close_r>

0000795c <strcmp>:
    795c:	2144b03a 	or	r2,r4,r5
    7960:	108000cc 	andi	r2,r2,3
    7964:	1000171e 	bne	r2,zero,79c4 <strcmp+0x68>
    7968:	20800017 	ldw	r2,0(r4)
    796c:	28c00017 	ldw	r3,0(r5)
    7970:	10c0141e 	bne	r2,r3,79c4 <strcmp+0x68>
    7974:	027fbff4 	movhi	r9,65279
    7978:	4a7fbfc4 	addi	r9,r9,-257
    797c:	0086303a 	nor	r3,zero,r2
    7980:	02202074 	movhi	r8,32897
    7984:	1245883a 	add	r2,r2,r9
    7988:	42202004 	addi	r8,r8,-32640
    798c:	10c4703a 	and	r2,r2,r3
    7990:	1204703a 	and	r2,r2,r8
    7994:	10000226 	beq	r2,zero,79a0 <strcmp+0x44>
    7998:	00002306 	br	7a28 <strcmp+0xcc>
    799c:	1000221e 	bne	r2,zero,7a28 <strcmp+0xcc>
    79a0:	21000104 	addi	r4,r4,4
    79a4:	20c00017 	ldw	r3,0(r4)
    79a8:	29400104 	addi	r5,r5,4
    79ac:	29800017 	ldw	r6,0(r5)
    79b0:	1a4f883a 	add	r7,r3,r9
    79b4:	00c4303a 	nor	r2,zero,r3
    79b8:	3884703a 	and	r2,r7,r2
    79bc:	1204703a 	and	r2,r2,r8
    79c0:	19bff626 	beq	r3,r6,799c <strcmp+0x40>
    79c4:	20800003 	ldbu	r2,0(r4)
    79c8:	10c03fcc 	andi	r3,r2,255
    79cc:	18c0201c 	xori	r3,r3,128
    79d0:	18ffe004 	addi	r3,r3,-128
    79d4:	18000c26 	beq	r3,zero,7a08 <strcmp+0xac>
    79d8:	29800007 	ldb	r6,0(r5)
    79dc:	19800326 	beq	r3,r6,79ec <strcmp+0x90>
    79e0:	00001306 	br	7a30 <strcmp+0xd4>
    79e4:	29800007 	ldb	r6,0(r5)
    79e8:	11800b1e 	bne	r2,r6,7a18 <strcmp+0xbc>
    79ec:	21000044 	addi	r4,r4,1
    79f0:	20c00003 	ldbu	r3,0(r4)
    79f4:	29400044 	addi	r5,r5,1
    79f8:	18803fcc 	andi	r2,r3,255
    79fc:	1080201c 	xori	r2,r2,128
    7a00:	10bfe004 	addi	r2,r2,-128
    7a04:	103ff71e 	bne	r2,zero,79e4 <strcmp+0x88>
    7a08:	0007883a 	mov	r3,zero
    7a0c:	28800003 	ldbu	r2,0(r5)
    7a10:	1885c83a 	sub	r2,r3,r2
    7a14:	f800283a 	ret
    7a18:	28800003 	ldbu	r2,0(r5)
    7a1c:	18c03fcc 	andi	r3,r3,255
    7a20:	1885c83a 	sub	r2,r3,r2
    7a24:	f800283a 	ret
    7a28:	0005883a 	mov	r2,zero
    7a2c:	f800283a 	ret
    7a30:	10c03fcc 	andi	r3,r2,255
    7a34:	003ff506 	br	7a0c <strcmp+0xb0>

00007a38 <__sprint_r.part.0>:
    7a38:	28801917 	ldw	r2,100(r5)
    7a3c:	defff604 	addi	sp,sp,-40
    7a40:	dd400515 	stw	r21,20(sp)
    7a44:	dfc00915 	stw	ra,36(sp)
    7a48:	df000815 	stw	fp,32(sp)
    7a4c:	ddc00715 	stw	r23,28(sp)
    7a50:	dd800615 	stw	r22,24(sp)
    7a54:	dd000415 	stw	r20,16(sp)
    7a58:	dcc00315 	stw	r19,12(sp)
    7a5c:	dc800215 	stw	r18,8(sp)
    7a60:	dc400115 	stw	r17,4(sp)
    7a64:	dc000015 	stw	r16,0(sp)
    7a68:	1088000c 	andi	r2,r2,8192
    7a6c:	302b883a 	mov	r21,r6
    7a70:	10002e26 	beq	r2,zero,7b2c <__sprint_r.part.0+0xf4>
    7a74:	30800217 	ldw	r2,8(r6)
    7a78:	35800017 	ldw	r22,0(r6)
    7a7c:	10002926 	beq	r2,zero,7b24 <__sprint_r.part.0+0xec>
    7a80:	2827883a 	mov	r19,r5
    7a84:	2029883a 	mov	r20,r4
    7a88:	b5c00104 	addi	r23,r22,4
    7a8c:	04bfffc4 	movi	r18,-1
    7a90:	bc400017 	ldw	r17,0(r23)
    7a94:	b4000017 	ldw	r16,0(r22)
    7a98:	0039883a 	mov	fp,zero
    7a9c:	8822d0ba 	srli	r17,r17,2
    7aa0:	8800031e 	bne	r17,zero,7ab0 <__sprint_r.part.0+0x78>
    7aa4:	00001806 	br	7b08 <__sprint_r.part.0+0xd0>
    7aa8:	84000104 	addi	r16,r16,4
    7aac:	8f001526 	beq	r17,fp,7b04 <__sprint_r.part.0+0xcc>
    7ab0:	81400017 	ldw	r5,0(r16)
    7ab4:	980d883a 	mov	r6,r19
    7ab8:	a009883a 	mov	r4,r20
    7abc:	00094600 	call	9460 <_fputwc_r>
    7ac0:	e7000044 	addi	fp,fp,1
    7ac4:	14bff81e 	bne	r2,r18,7aa8 <__sprint_r.part.0+0x70>
    7ac8:	9005883a 	mov	r2,r18
    7acc:	a8000215 	stw	zero,8(r21)
    7ad0:	a8000115 	stw	zero,4(r21)
    7ad4:	dfc00917 	ldw	ra,36(sp)
    7ad8:	df000817 	ldw	fp,32(sp)
    7adc:	ddc00717 	ldw	r23,28(sp)
    7ae0:	dd800617 	ldw	r22,24(sp)
    7ae4:	dd400517 	ldw	r21,20(sp)
    7ae8:	dd000417 	ldw	r20,16(sp)
    7aec:	dcc00317 	ldw	r19,12(sp)
    7af0:	dc800217 	ldw	r18,8(sp)
    7af4:	dc400117 	ldw	r17,4(sp)
    7af8:	dc000017 	ldw	r16,0(sp)
    7afc:	dec00a04 	addi	sp,sp,40
    7b00:	f800283a 	ret
    7b04:	a8800217 	ldw	r2,8(r21)
    7b08:	8c63883a 	add	r17,r17,r17
    7b0c:	8c63883a 	add	r17,r17,r17
    7b10:	1445c83a 	sub	r2,r2,r17
    7b14:	a8800215 	stw	r2,8(r21)
    7b18:	b5800204 	addi	r22,r22,8
    7b1c:	bdc00204 	addi	r23,r23,8
    7b20:	103fdb1e 	bne	r2,zero,7a90 <__sprint_r.part.0+0x58>
    7b24:	0005883a 	mov	r2,zero
    7b28:	003fe806 	br	7acc <__sprint_r.part.0+0x94>
    7b2c:	0004c600 	call	4c60 <__sfvwrite_r>
    7b30:	003fe606 	br	7acc <__sprint_r.part.0+0x94>

00007b34 <__sprint_r>:
    7b34:	30c00217 	ldw	r3,8(r6)
    7b38:	18000126 	beq	r3,zero,7b40 <__sprint_r+0xc>
    7b3c:	0007a381 	jmpi	7a38 <__sprint_r.part.0>
    7b40:	30000115 	stw	zero,4(r6)
    7b44:	0005883a 	mov	r2,zero
    7b48:	f800283a 	ret

00007b4c <___vfiprintf_internal_r>:
    7b4c:	deffc904 	addi	sp,sp,-220
    7b50:	df003515 	stw	fp,212(sp)
    7b54:	dd003115 	stw	r20,196(sp)
    7b58:	dfc03615 	stw	ra,216(sp)
    7b5c:	ddc03415 	stw	r23,208(sp)
    7b60:	dd803315 	stw	r22,204(sp)
    7b64:	dd403215 	stw	r21,200(sp)
    7b68:	dcc03015 	stw	r19,192(sp)
    7b6c:	dc802f15 	stw	r18,188(sp)
    7b70:	dc402e15 	stw	r17,184(sp)
    7b74:	dc002d15 	stw	r16,180(sp)
    7b78:	d9002015 	stw	r4,128(sp)
    7b7c:	d9c02215 	stw	r7,136(sp)
    7b80:	2829883a 	mov	r20,r5
    7b84:	3039883a 	mov	fp,r6
    7b88:	20000226 	beq	r4,zero,7b94 <___vfiprintf_internal_r+0x48>
    7b8c:	20800e17 	ldw	r2,56(r4)
    7b90:	1000cf26 	beq	r2,zero,7ed0 <___vfiprintf_internal_r+0x384>
    7b94:	a080030b 	ldhu	r2,12(r20)
    7b98:	10c8000c 	andi	r3,r2,8192
    7b9c:	1800061e 	bne	r3,zero,7bb8 <___vfiprintf_internal_r+0x6c>
    7ba0:	a1001917 	ldw	r4,100(r20)
    7ba4:	00f7ffc4 	movi	r3,-8193
    7ba8:	10880014 	ori	r2,r2,8192
    7bac:	20c6703a 	and	r3,r4,r3
    7bb0:	a080030d 	sth	r2,12(r20)
    7bb4:	a0c01915 	stw	r3,100(r20)
    7bb8:	10c0020c 	andi	r3,r2,8
    7bbc:	1800a926 	beq	r3,zero,7e64 <___vfiprintf_internal_r+0x318>
    7bc0:	a0c00417 	ldw	r3,16(r20)
    7bc4:	1800a726 	beq	r3,zero,7e64 <___vfiprintf_internal_r+0x318>
    7bc8:	1080068c 	andi	r2,r2,26
    7bcc:	00c00284 	movi	r3,10
    7bd0:	10c0ac26 	beq	r2,r3,7e84 <___vfiprintf_internal_r+0x338>
    7bd4:	da801a04 	addi	r10,sp,104
    7bd8:	da801e15 	stw	r10,120(sp)
    7bdc:	d8801e17 	ldw	r2,120(sp)
    7be0:	da8019c4 	addi	r10,sp,103
    7be4:	05800074 	movhi	r22,1
    7be8:	05c00074 	movhi	r23,1
    7bec:	da801f15 	stw	r10,124(sp)
    7bf0:	1295c83a 	sub	r10,r2,r10
    7bf4:	b5bdd604 	addi	r22,r22,-2216
    7bf8:	bdfdd204 	addi	r23,r23,-2232
    7bfc:	dec01a15 	stw	sp,104(sp)
    7c00:	d8001c15 	stw	zero,112(sp)
    7c04:	d8001b15 	stw	zero,108(sp)
    7c08:	d8002615 	stw	zero,152(sp)
    7c0c:	d8002315 	stw	zero,140(sp)
    7c10:	da802715 	stw	r10,156(sp)
    7c14:	d811883a 	mov	r8,sp
    7c18:	dd002115 	stw	r20,132(sp)
    7c1c:	e021883a 	mov	r16,fp
    7c20:	80800007 	ldb	r2,0(r16)
    7c24:	1003ea26 	beq	r2,zero,8bd0 <___vfiprintf_internal_r+0x1084>
    7c28:	00c00944 	movi	r3,37
    7c2c:	8025883a 	mov	r18,r16
    7c30:	10c0021e 	bne	r2,r3,7c3c <___vfiprintf_internal_r+0xf0>
    7c34:	00001606 	br	7c90 <___vfiprintf_internal_r+0x144>
    7c38:	10c00326 	beq	r2,r3,7c48 <___vfiprintf_internal_r+0xfc>
    7c3c:	94800044 	addi	r18,r18,1
    7c40:	90800007 	ldb	r2,0(r18)
    7c44:	103ffc1e 	bne	r2,zero,7c38 <___vfiprintf_internal_r+0xec>
    7c48:	9423c83a 	sub	r17,r18,r16
    7c4c:	88001026 	beq	r17,zero,7c90 <___vfiprintf_internal_r+0x144>
    7c50:	d8c01c17 	ldw	r3,112(sp)
    7c54:	d8801b17 	ldw	r2,108(sp)
    7c58:	44000015 	stw	r16,0(r8)
    7c5c:	88c7883a 	add	r3,r17,r3
    7c60:	10800044 	addi	r2,r2,1
    7c64:	44400115 	stw	r17,4(r8)
    7c68:	d8c01c15 	stw	r3,112(sp)
    7c6c:	d8801b15 	stw	r2,108(sp)
    7c70:	010001c4 	movi	r4,7
    7c74:	2080760e 	bge	r4,r2,7e50 <___vfiprintf_internal_r+0x304>
    7c78:	1803821e 	bne	r3,zero,8a84 <___vfiprintf_internal_r+0xf38>
    7c7c:	da802317 	ldw	r10,140(sp)
    7c80:	d8001b15 	stw	zero,108(sp)
    7c84:	d811883a 	mov	r8,sp
    7c88:	5455883a 	add	r10,r10,r17
    7c8c:	da802315 	stw	r10,140(sp)
    7c90:	90800007 	ldb	r2,0(r18)
    7c94:	10044626 	beq	r2,zero,8db0 <___vfiprintf_internal_r+0x1264>
    7c98:	90c00047 	ldb	r3,1(r18)
    7c9c:	94000044 	addi	r16,r18,1
    7ca0:	d8001d85 	stb	zero,118(sp)
    7ca4:	0009883a 	mov	r4,zero
    7ca8:	000f883a 	mov	r7,zero
    7cac:	027fffc4 	movi	r9,-1
    7cb0:	0023883a 	mov	r17,zero
    7cb4:	0029883a 	mov	r20,zero
    7cb8:	01401604 	movi	r5,88
    7cbc:	01800244 	movi	r6,9
    7cc0:	03400a84 	movi	r13,42
    7cc4:	03001b04 	movi	r12,108
    7cc8:	84000044 	addi	r16,r16,1
    7ccc:	18bff804 	addi	r2,r3,-32
    7cd0:	28827336 	bltu	r5,r2,86a0 <___vfiprintf_internal_r+0xb54>
    7cd4:	100490ba 	slli	r2,r2,2
    7cd8:	02800034 	movhi	r10,0
    7cdc:	529f3b04 	addi	r10,r10,31980
    7ce0:	1285883a 	add	r2,r2,r10
    7ce4:	10800017 	ldw	r2,0(r2)
    7ce8:	1000683a 	jmp	r2
    7cec:	000083d4 	movui	zero,527
    7cf0:	000086a0 	cmpeqi	zero,zero,538
    7cf4:	000086a0 	cmpeqi	zero,zero,538
    7cf8:	000083f4 	movhi	zero,527
    7cfc:	000086a0 	cmpeqi	zero,zero,538
    7d00:	000086a0 	cmpeqi	zero,zero,538
    7d04:	000086a0 	cmpeqi	zero,zero,538
    7d08:	000086a0 	cmpeqi	zero,zero,538
    7d0c:	000086a0 	cmpeqi	zero,zero,538
    7d10:	000086a0 	cmpeqi	zero,zero,538
    7d14:	000085dc 	xori	zero,zero,535
    7d18:	000085f8 	rdprs	zero,zero,535
    7d1c:	000086a0 	cmpeqi	zero,zero,538
    7d20:	00007ee0 	cmpeqi	zero,zero,507
    7d24:	00008608 	cmpgei	zero,zero,536
    7d28:	000086a0 	cmpeqi	zero,zero,538
    7d2c:	00008400 	call	840 <___vfprintf_internal_r+0x308>
    7d30:	0000840c 	andi	zero,zero,528
    7d34:	0000840c 	andi	zero,zero,528
    7d38:	0000840c 	andi	zero,zero,528
    7d3c:	0000840c 	andi	zero,zero,528
    7d40:	0000840c 	andi	zero,zero,528
    7d44:	0000840c 	andi	zero,zero,528
    7d48:	0000840c 	andi	zero,zero,528
    7d4c:	0000840c 	andi	zero,zero,528
    7d50:	0000840c 	andi	zero,zero,528
    7d54:	000086a0 	cmpeqi	zero,zero,538
    7d58:	000086a0 	cmpeqi	zero,zero,538
    7d5c:	000086a0 	cmpeqi	zero,zero,538
    7d60:	000086a0 	cmpeqi	zero,zero,538
    7d64:	000086a0 	cmpeqi	zero,zero,538
    7d68:	000086a0 	cmpeqi	zero,zero,538
    7d6c:	000086a0 	cmpeqi	zero,zero,538
    7d70:	000086a0 	cmpeqi	zero,zero,538
    7d74:	000086a0 	cmpeqi	zero,zero,538
    7d78:	000086a0 	cmpeqi	zero,zero,538
    7d7c:	00008438 	rdprs	zero,zero,528
    7d80:	000086a0 	cmpeqi	zero,zero,538
    7d84:	000086a0 	cmpeqi	zero,zero,538
    7d88:	000086a0 	cmpeqi	zero,zero,538
    7d8c:	000086a0 	cmpeqi	zero,zero,538
    7d90:	000086a0 	cmpeqi	zero,zero,538
    7d94:	000086a0 	cmpeqi	zero,zero,538
    7d98:	000086a0 	cmpeqi	zero,zero,538
    7d9c:	000086a0 	cmpeqi	zero,zero,538
    7da0:	000086a0 	cmpeqi	zero,zero,538
    7da4:	000086a0 	cmpeqi	zero,zero,538
    7da8:	00008470 	cmpltui	zero,zero,529
    7dac:	000086a0 	cmpeqi	zero,zero,538
    7db0:	000086a0 	cmpeqi	zero,zero,538
    7db4:	000086a0 	cmpeqi	zero,zero,538
    7db8:	000086a0 	cmpeqi	zero,zero,538
    7dbc:	000086a0 	cmpeqi	zero,zero,538
    7dc0:	000084c8 	cmpgei	zero,zero,531
    7dc4:	000086a0 	cmpeqi	zero,zero,538
    7dc8:	000086a0 	cmpeqi	zero,zero,538
    7dcc:	00008538 	rdprs	zero,zero,532
    7dd0:	000086a0 	cmpeqi	zero,zero,538
    7dd4:	000086a0 	cmpeqi	zero,zero,538
    7dd8:	000086a0 	cmpeqi	zero,zero,538
    7ddc:	000086a0 	cmpeqi	zero,zero,538
    7de0:	000086a0 	cmpeqi	zero,zero,538
    7de4:	000086a0 	cmpeqi	zero,zero,538
    7de8:	000086a0 	cmpeqi	zero,zero,538
    7dec:	000086a0 	cmpeqi	zero,zero,538
    7df0:	000086a0 	cmpeqi	zero,zero,538
    7df4:	000086a0 	cmpeqi	zero,zero,538
    7df8:	000082e4 	muli	zero,zero,523
    7dfc:	00008310 	cmplti	zero,zero,524
    7e00:	000086a0 	cmpeqi	zero,zero,538
    7e04:	000086a0 	cmpeqi	zero,zero,538
    7e08:	000086a0 	cmpeqi	zero,zero,538
    7e0c:	00008648 	cmpgei	zero,zero,537
    7e10:	00008310 	cmplti	zero,zero,524
    7e14:	000086a0 	cmpeqi	zero,zero,538
    7e18:	000086a0 	cmpeqi	zero,zero,538
    7e1c:	000081a4 	muli	zero,zero,518
    7e20:	000086a0 	cmpeqi	zero,zero,538
    7e24:	000081b4 	movhi	zero,518
    7e28:	000081f0 	cmpltui	zero,zero,519
    7e2c:	00007eec 	andhi	zero,zero,507
    7e30:	00008198 	cmpnei	zero,zero,518
    7e34:	000086a0 	cmpeqi	zero,zero,538
    7e38:	00008574 	movhi	zero,533
    7e3c:	000086a0 	cmpeqi	zero,zero,538
    7e40:	000085cc 	andi	zero,zero,535
    7e44:	000086a0 	cmpeqi	zero,zero,538
    7e48:	000086a0 	cmpeqi	zero,zero,538
    7e4c:	00008290 	cmplti	zero,zero,522
    7e50:	42000204 	addi	r8,r8,8
    7e54:	da802317 	ldw	r10,140(sp)
    7e58:	5455883a 	add	r10,r10,r17
    7e5c:	da802315 	stw	r10,140(sp)
    7e60:	003f8b06 	br	7c90 <___vfiprintf_internal_r+0x144>
    7e64:	d9002017 	ldw	r4,128(sp)
    7e68:	a00b883a 	mov	r5,r20
    7e6c:	00028080 	call	2808 <__swsetup_r>
    7e70:	1003b11e 	bne	r2,zero,8d38 <___vfiprintf_internal_r+0x11ec>
    7e74:	a080030b 	ldhu	r2,12(r20)
    7e78:	00c00284 	movi	r3,10
    7e7c:	1080068c 	andi	r2,r2,26
    7e80:	10ff541e 	bne	r2,r3,7bd4 <___vfiprintf_internal_r+0x88>
    7e84:	a080038f 	ldh	r2,14(r20)
    7e88:	103f5216 	blt	r2,zero,7bd4 <___vfiprintf_internal_r+0x88>
    7e8c:	d9c02217 	ldw	r7,136(sp)
    7e90:	d9002017 	ldw	r4,128(sp)
    7e94:	e00d883a 	mov	r6,fp
    7e98:	a00b883a 	mov	r5,r20
    7e9c:	0008fc40 	call	8fc4 <__sbprintf>
    7ea0:	dfc03617 	ldw	ra,216(sp)
    7ea4:	df003517 	ldw	fp,212(sp)
    7ea8:	ddc03417 	ldw	r23,208(sp)
    7eac:	dd803317 	ldw	r22,204(sp)
    7eb0:	dd403217 	ldw	r21,200(sp)
    7eb4:	dd003117 	ldw	r20,196(sp)
    7eb8:	dcc03017 	ldw	r19,192(sp)
    7ebc:	dc802f17 	ldw	r18,188(sp)
    7ec0:	dc402e17 	ldw	r17,184(sp)
    7ec4:	dc002d17 	ldw	r16,180(sp)
    7ec8:	dec03704 	addi	sp,sp,220
    7ecc:	f800283a 	ret
    7ed0:	00047dc0 	call	47dc <__sinit>
    7ed4:	003f2f06 	br	7b94 <___vfiprintf_internal_r+0x48>
    7ed8:	0463c83a 	sub	r17,zero,r17
    7edc:	d8802215 	stw	r2,136(sp)
    7ee0:	a5000114 	ori	r20,r20,4
    7ee4:	80c00007 	ldb	r3,0(r16)
    7ee8:	003f7706 	br	7cc8 <___vfiprintf_internal_r+0x17c>
    7eec:	00800c04 	movi	r2,48
    7ef0:	da802217 	ldw	r10,136(sp)
    7ef4:	d8801d05 	stb	r2,116(sp)
    7ef8:	00801e04 	movi	r2,120
    7efc:	d8801d45 	stb	r2,117(sp)
    7f00:	d8001d85 	stb	zero,118(sp)
    7f04:	50c00104 	addi	r3,r10,4
    7f08:	54800017 	ldw	r18,0(r10)
    7f0c:	0027883a 	mov	r19,zero
    7f10:	a0800094 	ori	r2,r20,2
    7f14:	48030b16 	blt	r9,zero,8b44 <___vfiprintf_internal_r+0xff8>
    7f18:	00bfdfc4 	movi	r2,-129
    7f1c:	a096703a 	and	r11,r20,r2
    7f20:	d8c02215 	stw	r3,136(sp)
    7f24:	5d000094 	ori	r20,r11,2
    7f28:	90032b1e 	bne	r18,zero,8bd8 <___vfiprintf_internal_r+0x108c>
    7f2c:	00800074 	movhi	r2,1
    7f30:	10bd7104 	addi	r2,r2,-2620
    7f34:	d8802615 	stw	r2,152(sp)
    7f38:	0039883a 	mov	fp,zero
    7f3c:	48017b1e 	bne	r9,zero,852c <___vfiprintf_internal_r+0x9e0>
    7f40:	0013883a 	mov	r9,zero
    7f44:	0027883a 	mov	r19,zero
    7f48:	dd401a04 	addi	r21,sp,104
    7f4c:	4825883a 	mov	r18,r9
    7f50:	4cc0010e 	bge	r9,r19,7f58 <___vfiprintf_internal_r+0x40c>
    7f54:	9825883a 	mov	r18,r19
    7f58:	e7003fcc 	andi	fp,fp,255
    7f5c:	e700201c 	xori	fp,fp,128
    7f60:	e73fe004 	addi	fp,fp,-128
    7f64:	e0000126 	beq	fp,zero,7f6c <___vfiprintf_internal_r+0x420>
    7f68:	94800044 	addi	r18,r18,1
    7f6c:	a380008c 	andi	r14,r20,2
    7f70:	70000126 	beq	r14,zero,7f78 <___vfiprintf_internal_r+0x42c>
    7f74:	94800084 	addi	r18,r18,2
    7f78:	a700210c 	andi	fp,r20,132
    7f7c:	e001df1e 	bne	fp,zero,86fc <___vfiprintf_internal_r+0xbb0>
    7f80:	8c87c83a 	sub	r3,r17,r18
    7f84:	00c1dd0e 	bge	zero,r3,86fc <___vfiprintf_internal_r+0xbb0>
    7f88:	01c00404 	movi	r7,16
    7f8c:	d8801c17 	ldw	r2,112(sp)
    7f90:	38c3ad0e 	bge	r7,r3,8e48 <___vfiprintf_internal_r+0x12fc>
    7f94:	02800074 	movhi	r10,1
    7f98:	52bdd604 	addi	r10,r10,-2216
    7f9c:	dc002915 	stw	r16,164(sp)
    7fa0:	d9801b17 	ldw	r6,108(sp)
    7fa4:	da802415 	stw	r10,144(sp)
    7fa8:	03c001c4 	movi	r15,7
    7fac:	da402515 	stw	r9,148(sp)
    7fb0:	db802815 	stw	r14,160(sp)
    7fb4:	1821883a 	mov	r16,r3
    7fb8:	00000506 	br	7fd0 <___vfiprintf_internal_r+0x484>
    7fbc:	31400084 	addi	r5,r6,2
    7fc0:	42000204 	addi	r8,r8,8
    7fc4:	200d883a 	mov	r6,r4
    7fc8:	843ffc04 	addi	r16,r16,-16
    7fcc:	3c000d0e 	bge	r7,r16,8004 <___vfiprintf_internal_r+0x4b8>
    7fd0:	10800404 	addi	r2,r2,16
    7fd4:	31000044 	addi	r4,r6,1
    7fd8:	45800015 	stw	r22,0(r8)
    7fdc:	41c00115 	stw	r7,4(r8)
    7fe0:	d8801c15 	stw	r2,112(sp)
    7fe4:	d9001b15 	stw	r4,108(sp)
    7fe8:	793ff40e 	bge	r15,r4,7fbc <___vfiprintf_internal_r+0x470>
    7fec:	1001b51e 	bne	r2,zero,86c4 <___vfiprintf_internal_r+0xb78>
    7ff0:	843ffc04 	addi	r16,r16,-16
    7ff4:	000d883a 	mov	r6,zero
    7ff8:	01400044 	movi	r5,1
    7ffc:	d811883a 	mov	r8,sp
    8000:	3c3ff316 	blt	r7,r16,7fd0 <___vfiprintf_internal_r+0x484>
    8004:	8007883a 	mov	r3,r16
    8008:	da402517 	ldw	r9,148(sp)
    800c:	db802817 	ldw	r14,160(sp)
    8010:	dc002917 	ldw	r16,164(sp)
    8014:	da802417 	ldw	r10,144(sp)
    8018:	1885883a 	add	r2,r3,r2
    801c:	40c00115 	stw	r3,4(r8)
    8020:	42800015 	stw	r10,0(r8)
    8024:	d8801c15 	stw	r2,112(sp)
    8028:	d9401b15 	stw	r5,108(sp)
    802c:	00c001c4 	movi	r3,7
    8030:	19426016 	blt	r3,r5,89b4 <___vfiprintf_internal_r+0xe68>
    8034:	d8c01d87 	ldb	r3,118(sp)
    8038:	42000204 	addi	r8,r8,8
    803c:	29000044 	addi	r4,r5,1
    8040:	1801b31e 	bne	r3,zero,8710 <___vfiprintf_internal_r+0xbc4>
    8044:	7001c026 	beq	r14,zero,8748 <___vfiprintf_internal_r+0xbfc>
    8048:	d8c01d04 	addi	r3,sp,116
    804c:	10800084 	addi	r2,r2,2
    8050:	40c00015 	stw	r3,0(r8)
    8054:	00c00084 	movi	r3,2
    8058:	40c00115 	stw	r3,4(r8)
    805c:	d8801c15 	stw	r2,112(sp)
    8060:	d9001b15 	stw	r4,108(sp)
    8064:	00c001c4 	movi	r3,7
    8068:	1902650e 	bge	r3,r4,8a00 <___vfiprintf_internal_r+0xeb4>
    806c:	10029a1e 	bne	r2,zero,8ad8 <___vfiprintf_internal_r+0xf8c>
    8070:	00c02004 	movi	r3,128
    8074:	01000044 	movi	r4,1
    8078:	000b883a 	mov	r5,zero
    807c:	d811883a 	mov	r8,sp
    8080:	e0c1b31e 	bne	fp,r3,8750 <___vfiprintf_internal_r+0xc04>
    8084:	8cb9c83a 	sub	fp,r17,r18
    8088:	0701b10e 	bge	zero,fp,8750 <___vfiprintf_internal_r+0xc04>
    808c:	01c00404 	movi	r7,16
    8090:	3f03890e 	bge	r7,fp,8eb8 <___vfiprintf_internal_r+0x136c>
    8094:	00c00074 	movhi	r3,1
    8098:	18fdd204 	addi	r3,r3,-2232
    809c:	d8c02415 	stw	r3,144(sp)
    80a0:	8007883a 	mov	r3,r16
    80a4:	034001c4 	movi	r13,7
    80a8:	e021883a 	mov	r16,fp
    80ac:	da402515 	stw	r9,148(sp)
    80b0:	1839883a 	mov	fp,r3
    80b4:	00000506 	br	80cc <___vfiprintf_internal_r+0x580>
    80b8:	29800084 	addi	r6,r5,2
    80bc:	42000204 	addi	r8,r8,8
    80c0:	180b883a 	mov	r5,r3
    80c4:	843ffc04 	addi	r16,r16,-16
    80c8:	3c000d0e 	bge	r7,r16,8100 <___vfiprintf_internal_r+0x5b4>
    80cc:	10800404 	addi	r2,r2,16
    80d0:	28c00044 	addi	r3,r5,1
    80d4:	45c00015 	stw	r23,0(r8)
    80d8:	41c00115 	stw	r7,4(r8)
    80dc:	d8801c15 	stw	r2,112(sp)
    80e0:	d8c01b15 	stw	r3,108(sp)
    80e4:	68fff40e 	bge	r13,r3,80b8 <___vfiprintf_internal_r+0x56c>
    80e8:	1002241e 	bne	r2,zero,897c <___vfiprintf_internal_r+0xe30>
    80ec:	843ffc04 	addi	r16,r16,-16
    80f0:	01800044 	movi	r6,1
    80f4:	000b883a 	mov	r5,zero
    80f8:	d811883a 	mov	r8,sp
    80fc:	3c3ff316 	blt	r7,r16,80cc <___vfiprintf_internal_r+0x580>
    8100:	da402517 	ldw	r9,148(sp)
    8104:	e007883a 	mov	r3,fp
    8108:	8039883a 	mov	fp,r16
    810c:	1821883a 	mov	r16,r3
    8110:	d8c02417 	ldw	r3,144(sp)
    8114:	1705883a 	add	r2,r2,fp
    8118:	47000115 	stw	fp,4(r8)
    811c:	40c00015 	stw	r3,0(r8)
    8120:	d8801c15 	stw	r2,112(sp)
    8124:	d9801b15 	stw	r6,108(sp)
    8128:	00c001c4 	movi	r3,7
    812c:	19827616 	blt	r3,r6,8b08 <___vfiprintf_internal_r+0xfbc>
    8130:	4cf9c83a 	sub	fp,r9,r19
    8134:	42000204 	addi	r8,r8,8
    8138:	31000044 	addi	r4,r6,1
    813c:	300b883a 	mov	r5,r6
    8140:	07018516 	blt	zero,fp,8758 <___vfiprintf_internal_r+0xc0c>
    8144:	9885883a 	add	r2,r19,r2
    8148:	45400015 	stw	r21,0(r8)
    814c:	44c00115 	stw	r19,4(r8)
    8150:	d8801c15 	stw	r2,112(sp)
    8154:	d9001b15 	stw	r4,108(sp)
    8158:	00c001c4 	movi	r3,7
    815c:	1901dd0e 	bge	r3,r4,88d4 <___vfiprintf_internal_r+0xd88>
    8160:	1002401e 	bne	r2,zero,8a64 <___vfiprintf_internal_r+0xf18>
    8164:	d8001b15 	stw	zero,108(sp)
    8168:	a2c0010c 	andi	r11,r20,4
    816c:	58000226 	beq	r11,zero,8178 <___vfiprintf_internal_r+0x62c>
    8170:	8ca7c83a 	sub	r19,r17,r18
    8174:	04c2f216 	blt	zero,r19,8d40 <___vfiprintf_internal_r+0x11f4>
    8178:	8c80010e 	bge	r17,r18,8180 <___vfiprintf_internal_r+0x634>
    817c:	9023883a 	mov	r17,r18
    8180:	da802317 	ldw	r10,140(sp)
    8184:	5455883a 	add	r10,r10,r17
    8188:	da802315 	stw	r10,140(sp)
    818c:	d8001b15 	stw	zero,108(sp)
    8190:	d811883a 	mov	r8,sp
    8194:	003ea206 	br	7c20 <___vfiprintf_internal_r+0xd4>
    8198:	a5000814 	ori	r20,r20,32
    819c:	80c00007 	ldb	r3,0(r16)
    81a0:	003ec906 	br	7cc8 <___vfiprintf_internal_r+0x17c>
    81a4:	80c00007 	ldb	r3,0(r16)
    81a8:	1b030926 	beq	r3,r12,8dd0 <___vfiprintf_internal_r+0x1284>
    81ac:	a5000414 	ori	r20,r20,16
    81b0:	003ec506 	br	7cc8 <___vfiprintf_internal_r+0x17c>
    81b4:	21003fcc 	andi	r4,r4,255
    81b8:	20035e1e 	bne	r4,zero,8f34 <___vfiprintf_internal_r+0x13e8>
    81bc:	a080080c 	andi	r2,r20,32
    81c0:	1002a526 	beq	r2,zero,8c58 <___vfiprintf_internal_r+0x110c>
    81c4:	da802217 	ldw	r10,136(sp)
    81c8:	50800017 	ldw	r2,0(r10)
    81cc:	da802317 	ldw	r10,140(sp)
    81d0:	5007d7fa 	srai	r3,r10,31
    81d4:	da802217 	ldw	r10,136(sp)
    81d8:	10c00115 	stw	r3,4(r2)
    81dc:	52800104 	addi	r10,r10,4
    81e0:	da802215 	stw	r10,136(sp)
    81e4:	da802317 	ldw	r10,140(sp)
    81e8:	12800015 	stw	r10,0(r2)
    81ec:	003e8c06 	br	7c20 <___vfiprintf_internal_r+0xd4>
    81f0:	21003fcc 	andi	r4,r4,255
    81f4:	2003511e 	bne	r4,zero,8f3c <___vfiprintf_internal_r+0x13f0>
    81f8:	a080080c 	andi	r2,r20,32
    81fc:	1000a126 	beq	r2,zero,8484 <___vfiprintf_internal_r+0x938>
    8200:	da802217 	ldw	r10,136(sp)
    8204:	d8001d85 	stb	zero,118(sp)
    8208:	50800204 	addi	r2,r10,8
    820c:	54800017 	ldw	r18,0(r10)
    8210:	54c00117 	ldw	r19,4(r10)
    8214:	4802b416 	blt	r9,zero,8ce8 <___vfiprintf_internal_r+0x119c>
    8218:	013fdfc4 	movi	r4,-129
    821c:	94c6b03a 	or	r3,r18,r19
    8220:	d8802215 	stw	r2,136(sp)
    8224:	a128703a 	and	r20,r20,r4
    8228:	1800a226 	beq	r3,zero,84b4 <___vfiprintf_internal_r+0x968>
    822c:	0039883a 	mov	fp,zero
    8230:	dd401a04 	addi	r21,sp,104
    8234:	9006d0fa 	srli	r3,r18,3
    8238:	9808977a 	slli	r4,r19,29
    823c:	9826d0fa 	srli	r19,r19,3
    8240:	948001cc 	andi	r18,r18,7
    8244:	90800c04 	addi	r2,r18,48
    8248:	ad7fffc4 	addi	r21,r21,-1
    824c:	20e4b03a 	or	r18,r4,r3
    8250:	a8800005 	stb	r2,0(r21)
    8254:	94c6b03a 	or	r3,r18,r19
    8258:	183ff61e 	bne	r3,zero,8234 <___vfiprintf_internal_r+0x6e8>
    825c:	a0c0004c 	andi	r3,r20,1
    8260:	18005926 	beq	r3,zero,83c8 <___vfiprintf_internal_r+0x87c>
    8264:	10803fcc 	andi	r2,r2,255
    8268:	1080201c 	xori	r2,r2,128
    826c:	10bfe004 	addi	r2,r2,-128
    8270:	00c00c04 	movi	r3,48
    8274:	10c05426 	beq	r2,r3,83c8 <___vfiprintf_internal_r+0x87c>
    8278:	da801e17 	ldw	r10,120(sp)
    827c:	a8bfffc4 	addi	r2,r21,-1
    8280:	a8ffffc5 	stb	r3,-1(r21)
    8284:	50a7c83a 	sub	r19,r10,r2
    8288:	102b883a 	mov	r21,r2
    828c:	003f2f06 	br	7f4c <___vfiprintf_internal_r+0x400>
    8290:	21003fcc 	andi	r4,r4,255
    8294:	2003421e 	bne	r4,zero,8fa0 <___vfiprintf_internal_r+0x1454>
    8298:	00800074 	movhi	r2,1
    829c:	10bd7104 	addi	r2,r2,-2620
    82a0:	d8802615 	stw	r2,152(sp)
    82a4:	a080080c 	andi	r2,r20,32
    82a8:	1000aa26 	beq	r2,zero,8554 <___vfiprintf_internal_r+0xa08>
    82ac:	da802217 	ldw	r10,136(sp)
    82b0:	54800017 	ldw	r18,0(r10)
    82b4:	54c00117 	ldw	r19,4(r10)
    82b8:	52800204 	addi	r10,r10,8
    82bc:	da802215 	stw	r10,136(sp)
    82c0:	a080004c 	andi	r2,r20,1
    82c4:	1001d226 	beq	r2,zero,8a10 <___vfiprintf_internal_r+0xec4>
    82c8:	94c4b03a 	or	r2,r18,r19
    82cc:	1002351e 	bne	r2,zero,8ba4 <___vfiprintf_internal_r+0x1058>
    82d0:	d8001d85 	stb	zero,118(sp)
    82d4:	48022216 	blt	r9,zero,8b60 <___vfiprintf_internal_r+0x1014>
    82d8:	00bfdfc4 	movi	r2,-129
    82dc:	a0a8703a 	and	r20,r20,r2
    82e0:	003f1506 	br	7f38 <___vfiprintf_internal_r+0x3ec>
    82e4:	da802217 	ldw	r10,136(sp)
    82e8:	04800044 	movi	r18,1
    82ec:	d8001d85 	stb	zero,118(sp)
    82f0:	50800017 	ldw	r2,0(r10)
    82f4:	52800104 	addi	r10,r10,4
    82f8:	da802215 	stw	r10,136(sp)
    82fc:	d8801005 	stb	r2,64(sp)
    8300:	9027883a 	mov	r19,r18
    8304:	dd401004 	addi	r21,sp,64
    8308:	0013883a 	mov	r9,zero
    830c:	003f1706 	br	7f6c <___vfiprintf_internal_r+0x420>
    8310:	21003fcc 	andi	r4,r4,255
    8314:	2003201e 	bne	r4,zero,8f98 <___vfiprintf_internal_r+0x144c>
    8318:	a080080c 	andi	r2,r20,32
    831c:	10004b26 	beq	r2,zero,844c <___vfiprintf_internal_r+0x900>
    8320:	da802217 	ldw	r10,136(sp)
    8324:	50800117 	ldw	r2,4(r10)
    8328:	54800017 	ldw	r18,0(r10)
    832c:	52800204 	addi	r10,r10,8
    8330:	da802215 	stw	r10,136(sp)
    8334:	1027883a 	mov	r19,r2
    8338:	10022c16 	blt	r2,zero,8bec <___vfiprintf_internal_r+0x10a0>
    833c:	df001d83 	ldbu	fp,118(sp)
    8340:	48007216 	blt	r9,zero,850c <___vfiprintf_internal_r+0x9c0>
    8344:	00ffdfc4 	movi	r3,-129
    8348:	94c4b03a 	or	r2,r18,r19
    834c:	a0e8703a 	and	r20,r20,r3
    8350:	1000cc26 	beq	r2,zero,8684 <___vfiprintf_internal_r+0xb38>
    8354:	98021026 	beq	r19,zero,8b98 <___vfiprintf_internal_r+0x104c>
    8358:	dc402415 	stw	r17,144(sp)
    835c:	dc002515 	stw	r16,148(sp)
    8360:	9823883a 	mov	r17,r19
    8364:	9021883a 	mov	r16,r18
    8368:	dd401a04 	addi	r21,sp,104
    836c:	4825883a 	mov	r18,r9
    8370:	4027883a 	mov	r19,r8
    8374:	8009883a 	mov	r4,r16
    8378:	880b883a 	mov	r5,r17
    837c:	01800284 	movi	r6,10
    8380:	000f883a 	mov	r7,zero
    8384:	0009f2c0 	call	9f2c <__umoddi3>
    8388:	10800c04 	addi	r2,r2,48
    838c:	ad7fffc4 	addi	r21,r21,-1
    8390:	8009883a 	mov	r4,r16
    8394:	880b883a 	mov	r5,r17
    8398:	a8800005 	stb	r2,0(r21)
    839c:	01800284 	movi	r6,10
    83a0:	000f883a 	mov	r7,zero
    83a4:	00099b40 	call	99b4 <__udivdi3>
    83a8:	1021883a 	mov	r16,r2
    83ac:	10c4b03a 	or	r2,r2,r3
    83b0:	1823883a 	mov	r17,r3
    83b4:	103fef1e 	bne	r2,zero,8374 <___vfiprintf_internal_r+0x828>
    83b8:	dc402417 	ldw	r17,144(sp)
    83bc:	dc002517 	ldw	r16,148(sp)
    83c0:	9013883a 	mov	r9,r18
    83c4:	9811883a 	mov	r8,r19
    83c8:	da801e17 	ldw	r10,120(sp)
    83cc:	5567c83a 	sub	r19,r10,r21
    83d0:	003ede06 	br	7f4c <___vfiprintf_internal_r+0x400>
    83d4:	38803fcc 	andi	r2,r7,255
    83d8:	1080201c 	xori	r2,r2,128
    83dc:	10bfe004 	addi	r2,r2,-128
    83e0:	1002371e 	bne	r2,zero,8cc0 <___vfiprintf_internal_r+0x1174>
    83e4:	01000044 	movi	r4,1
    83e8:	01c00804 	movi	r7,32
    83ec:	80c00007 	ldb	r3,0(r16)
    83f0:	003e3506 	br	7cc8 <___vfiprintf_internal_r+0x17c>
    83f4:	a5000054 	ori	r20,r20,1
    83f8:	80c00007 	ldb	r3,0(r16)
    83fc:	003e3206 	br	7cc8 <___vfiprintf_internal_r+0x17c>
    8400:	a5002014 	ori	r20,r20,128
    8404:	80c00007 	ldb	r3,0(r16)
    8408:	003e2f06 	br	7cc8 <___vfiprintf_internal_r+0x17c>
    840c:	8015883a 	mov	r10,r16
    8410:	0023883a 	mov	r17,zero
    8414:	18bff404 	addi	r2,r3,-48
    8418:	50c00007 	ldb	r3,0(r10)
    841c:	8c4002a4 	muli	r17,r17,10
    8420:	84000044 	addi	r16,r16,1
    8424:	8015883a 	mov	r10,r16
    8428:	1463883a 	add	r17,r2,r17
    842c:	18bff404 	addi	r2,r3,-48
    8430:	30bff92e 	bgeu	r6,r2,8418 <___vfiprintf_internal_r+0x8cc>
    8434:	003e2506 	br	7ccc <___vfiprintf_internal_r+0x180>
    8438:	21003fcc 	andi	r4,r4,255
    843c:	2002d41e 	bne	r4,zero,8f90 <___vfiprintf_internal_r+0x1444>
    8440:	a5000414 	ori	r20,r20,16
    8444:	a080080c 	andi	r2,r20,32
    8448:	103fb51e 	bne	r2,zero,8320 <___vfiprintf_internal_r+0x7d4>
    844c:	a080040c 	andi	r2,r20,16
    8450:	1001f826 	beq	r2,zero,8c34 <___vfiprintf_internal_r+0x10e8>
    8454:	da802217 	ldw	r10,136(sp)
    8458:	54800017 	ldw	r18,0(r10)
    845c:	52800104 	addi	r10,r10,4
    8460:	da802215 	stw	r10,136(sp)
    8464:	9027d7fa 	srai	r19,r18,31
    8468:	9805883a 	mov	r2,r19
    846c:	003fb206 	br	8338 <___vfiprintf_internal_r+0x7ec>
    8470:	21003fcc 	andi	r4,r4,255
    8474:	2002c41e 	bne	r4,zero,8f88 <___vfiprintf_internal_r+0x143c>
    8478:	a5000414 	ori	r20,r20,16
    847c:	a080080c 	andi	r2,r20,32
    8480:	103f5f1e 	bne	r2,zero,8200 <___vfiprintf_internal_r+0x6b4>
    8484:	a080040c 	andi	r2,r20,16
    8488:	10020f26 	beq	r2,zero,8cc8 <___vfiprintf_internal_r+0x117c>
    848c:	da802217 	ldw	r10,136(sp)
    8490:	d8001d85 	stb	zero,118(sp)
    8494:	0027883a 	mov	r19,zero
    8498:	50800104 	addi	r2,r10,4
    849c:	54800017 	ldw	r18,0(r10)
    84a0:	48021116 	blt	r9,zero,8ce8 <___vfiprintf_internal_r+0x119c>
    84a4:	00ffdfc4 	movi	r3,-129
    84a8:	d8802215 	stw	r2,136(sp)
    84ac:	a0e8703a 	and	r20,r20,r3
    84b0:	903f5e1e 	bne	r18,zero,822c <___vfiprintf_internal_r+0x6e0>
    84b4:	0039883a 	mov	fp,zero
    84b8:	4802a626 	beq	r9,zero,8f54 <___vfiprintf_internal_r+0x1408>
    84bc:	0025883a 	mov	r18,zero
    84c0:	0027883a 	mov	r19,zero
    84c4:	003f5a06 	br	8230 <___vfiprintf_internal_r+0x6e4>
    84c8:	21003fcc 	andi	r4,r4,255
    84cc:	20029f1e 	bne	r4,zero,8f4c <___vfiprintf_internal_r+0x1400>
    84d0:	a5000414 	ori	r20,r20,16
    84d4:	a080080c 	andi	r2,r20,32
    84d8:	10005e1e 	bne	r2,zero,8654 <___vfiprintf_internal_r+0xb08>
    84dc:	a080040c 	andi	r2,r20,16
    84e0:	1001a21e 	bne	r2,zero,8b6c <___vfiprintf_internal_r+0x1020>
    84e4:	a080100c 	andi	r2,r20,64
    84e8:	d8001d85 	stb	zero,118(sp)
    84ec:	da802217 	ldw	r10,136(sp)
    84f0:	1002231e 	bne	r2,zero,8d80 <___vfiprintf_internal_r+0x1234>
    84f4:	50800104 	addi	r2,r10,4
    84f8:	54800017 	ldw	r18,0(r10)
    84fc:	0027883a 	mov	r19,zero
    8500:	4801a00e 	bge	r9,zero,8b84 <___vfiprintf_internal_r+0x1038>
    8504:	d8802215 	stw	r2,136(sp)
    8508:	0039883a 	mov	fp,zero
    850c:	94c4b03a 	or	r2,r18,r19
    8510:	103f901e 	bne	r2,zero,8354 <___vfiprintf_internal_r+0x808>
    8514:	00800044 	movi	r2,1
    8518:	10803fcc 	andi	r2,r2,255
    851c:	00c00044 	movi	r3,1
    8520:	10c05926 	beq	r2,r3,8688 <___vfiprintf_internal_r+0xb3c>
    8524:	00c00084 	movi	r3,2
    8528:	10ffe41e 	bne	r2,r3,84bc <___vfiprintf_internal_r+0x970>
    852c:	0025883a 	mov	r18,zero
    8530:	0027883a 	mov	r19,zero
    8534:	00013d06 	br	8a2c <___vfiprintf_internal_r+0xee0>
    8538:	21003fcc 	andi	r4,r4,255
    853c:	2002811e 	bne	r4,zero,8f44 <___vfiprintf_internal_r+0x13f8>
    8540:	00800074 	movhi	r2,1
    8544:	10bd6c04 	addi	r2,r2,-2640
    8548:	d8802615 	stw	r2,152(sp)
    854c:	a080080c 	andi	r2,r20,32
    8550:	103f561e 	bne	r2,zero,82ac <___vfiprintf_internal_r+0x760>
    8554:	a080040c 	andi	r2,r20,16
    8558:	1001d126 	beq	r2,zero,8ca0 <___vfiprintf_internal_r+0x1154>
    855c:	da802217 	ldw	r10,136(sp)
    8560:	0027883a 	mov	r19,zero
    8564:	54800017 	ldw	r18,0(r10)
    8568:	52800104 	addi	r10,r10,4
    856c:	da802215 	stw	r10,136(sp)
    8570:	003f5306 	br	82c0 <___vfiprintf_internal_r+0x774>
    8574:	da802217 	ldw	r10,136(sp)
    8578:	d8001d85 	stb	zero,118(sp)
    857c:	55400017 	ldw	r21,0(r10)
    8580:	50c00104 	addi	r3,r10,4
    8584:	a8024226 	beq	r21,zero,8e90 <___vfiprintf_internal_r+0x1344>
    8588:	48021816 	blt	r9,zero,8dec <___vfiprintf_internal_r+0x12a0>
    858c:	480d883a 	mov	r6,r9
    8590:	000b883a 	mov	r5,zero
    8594:	a809883a 	mov	r4,r21
    8598:	d8c02a15 	stw	r3,168(sp)
    859c:	da002b15 	stw	r8,172(sp)
    85a0:	da402c15 	stw	r9,176(sp)
    85a4:	0005d480 	call	5d48 <memchr>
    85a8:	d8c02a17 	ldw	r3,168(sp)
    85ac:	da002b17 	ldw	r8,172(sp)
    85b0:	da402c17 	ldw	r9,176(sp)
    85b4:	10024826 	beq	r2,zero,8ed8 <___vfiprintf_internal_r+0x138c>
    85b8:	1567c83a 	sub	r19,r2,r21
    85bc:	df001d83 	ldbu	fp,118(sp)
    85c0:	d8c02215 	stw	r3,136(sp)
    85c4:	0013883a 	mov	r9,zero
    85c8:	003e6006 	br	7f4c <___vfiprintf_internal_r+0x400>
    85cc:	21003fcc 	andi	r4,r4,255
    85d0:	203fc026 	beq	r4,zero,84d4 <___vfiprintf_internal_r+0x988>
    85d4:	d9c01d85 	stb	r7,118(sp)
    85d8:	003fbe06 	br	84d4 <___vfiprintf_internal_r+0x988>
    85dc:	da802217 	ldw	r10,136(sp)
    85e0:	54400017 	ldw	r17,0(r10)
    85e4:	50800104 	addi	r2,r10,4
    85e8:	883e3b16 	blt	r17,zero,7ed8 <___vfiprintf_internal_r+0x38c>
    85ec:	d8802215 	stw	r2,136(sp)
    85f0:	80c00007 	ldb	r3,0(r16)
    85f4:	003db406 	br	7cc8 <___vfiprintf_internal_r+0x17c>
    85f8:	01000044 	movi	r4,1
    85fc:	01c00ac4 	movi	r7,43
    8600:	80c00007 	ldb	r3,0(r16)
    8604:	003db006 	br	7cc8 <___vfiprintf_internal_r+0x17c>
    8608:	80c00007 	ldb	r3,0(r16)
    860c:	82800044 	addi	r10,r16,1
    8610:	1b423c26 	beq	r3,r13,8f04 <___vfiprintf_internal_r+0x13b8>
    8614:	18bff404 	addi	r2,r3,-48
    8618:	0013883a 	mov	r9,zero
    861c:	30822b36 	bltu	r6,r2,8ecc <___vfiprintf_internal_r+0x1380>
    8620:	50c00007 	ldb	r3,0(r10)
    8624:	4a4002a4 	muli	r9,r9,10
    8628:	54000044 	addi	r16,r10,1
    862c:	8015883a 	mov	r10,r16
    8630:	4893883a 	add	r9,r9,r2
    8634:	18bff404 	addi	r2,r3,-48
    8638:	30bff92e 	bgeu	r6,r2,8620 <___vfiprintf_internal_r+0xad4>
    863c:	483da30e 	bge	r9,zero,7ccc <___vfiprintf_internal_r+0x180>
    8640:	027fffc4 	movi	r9,-1
    8644:	003da106 	br	7ccc <___vfiprintf_internal_r+0x180>
    8648:	a5001014 	ori	r20,r20,64
    864c:	80c00007 	ldb	r3,0(r16)
    8650:	003d9d06 	br	7cc8 <___vfiprintf_internal_r+0x17c>
    8654:	da802217 	ldw	r10,136(sp)
    8658:	d8001d85 	stb	zero,118(sp)
    865c:	50c00204 	addi	r3,r10,8
    8660:	54800017 	ldw	r18,0(r10)
    8664:	54c00117 	ldw	r19,4(r10)
    8668:	4801ca16 	blt	r9,zero,8d94 <___vfiprintf_internal_r+0x1248>
    866c:	013fdfc4 	movi	r4,-129
    8670:	94c4b03a 	or	r2,r18,r19
    8674:	d8c02215 	stw	r3,136(sp)
    8678:	a128703a 	and	r20,r20,r4
    867c:	0039883a 	mov	fp,zero
    8680:	103f341e 	bne	r2,zero,8354 <___vfiprintf_internal_r+0x808>
    8684:	483e2e26 	beq	r9,zero,7f40 <___vfiprintf_internal_r+0x3f4>
    8688:	0025883a 	mov	r18,zero
    868c:	94800c04 	addi	r18,r18,48
    8690:	dc8019c5 	stb	r18,103(sp)
    8694:	dcc02717 	ldw	r19,156(sp)
    8698:	dd4019c4 	addi	r21,sp,103
    869c:	003e2b06 	br	7f4c <___vfiprintf_internal_r+0x400>
    86a0:	21003fcc 	andi	r4,r4,255
    86a4:	2002361e 	bne	r4,zero,8f80 <___vfiprintf_internal_r+0x1434>
    86a8:	1801c126 	beq	r3,zero,8db0 <___vfiprintf_internal_r+0x1264>
    86ac:	04800044 	movi	r18,1
    86b0:	d8c01005 	stb	r3,64(sp)
    86b4:	d8001d85 	stb	zero,118(sp)
    86b8:	9027883a 	mov	r19,r18
    86bc:	dd401004 	addi	r21,sp,64
    86c0:	003f1106 	br	8308 <___vfiprintf_internal_r+0x7bc>
    86c4:	d9402117 	ldw	r5,132(sp)
    86c8:	d9002017 	ldw	r4,128(sp)
    86cc:	d9801a04 	addi	r6,sp,104
    86d0:	d9c02b15 	stw	r7,172(sp)
    86d4:	dbc02a15 	stw	r15,168(sp)
    86d8:	0007a380 	call	7a38 <__sprint_r.part.0>
    86dc:	d9c02b17 	ldw	r7,172(sp)
    86e0:	dbc02a17 	ldw	r15,168(sp)
    86e4:	10006d1e 	bne	r2,zero,889c <___vfiprintf_internal_r+0xd50>
    86e8:	d9801b17 	ldw	r6,108(sp)
    86ec:	d8801c17 	ldw	r2,112(sp)
    86f0:	d811883a 	mov	r8,sp
    86f4:	31400044 	addi	r5,r6,1
    86f8:	003e3306 	br	7fc8 <___vfiprintf_internal_r+0x47c>
    86fc:	d9401b17 	ldw	r5,108(sp)
    8700:	d8801c17 	ldw	r2,112(sp)
    8704:	29000044 	addi	r4,r5,1
    8708:	d8c01d87 	ldb	r3,118(sp)
    870c:	183e4d26 	beq	r3,zero,8044 <___vfiprintf_internal_r+0x4f8>
    8710:	00c00044 	movi	r3,1
    8714:	d9401d84 	addi	r5,sp,118
    8718:	10c5883a 	add	r2,r2,r3
    871c:	41400015 	stw	r5,0(r8)
    8720:	40c00115 	stw	r3,4(r8)
    8724:	d8801c15 	stw	r2,112(sp)
    8728:	d9001b15 	stw	r4,108(sp)
    872c:	014001c4 	movi	r5,7
    8730:	2900a90e 	bge	r5,r4,89d8 <___vfiprintf_internal_r+0xe8c>
    8734:	1000da1e 	bne	r2,zero,8aa0 <___vfiprintf_internal_r+0xf54>
    8738:	7000ab1e 	bne	r14,zero,89e8 <___vfiprintf_internal_r+0xe9c>
    873c:	000b883a 	mov	r5,zero
    8740:	1809883a 	mov	r4,r3
    8744:	d811883a 	mov	r8,sp
    8748:	00c02004 	movi	r3,128
    874c:	e0fe4d26 	beq	fp,r3,8084 <___vfiprintf_internal_r+0x538>
    8750:	4cf9c83a 	sub	fp,r9,r19
    8754:	073e7b0e 	bge	zero,fp,8144 <___vfiprintf_internal_r+0x5f8>
    8758:	01c00404 	movi	r7,16
    875c:	3f01900e 	bge	r7,fp,8da0 <___vfiprintf_internal_r+0x1254>
    8760:	00c00074 	movhi	r3,1
    8764:	18fdd204 	addi	r3,r3,-2232
    8768:	d8c02415 	stw	r3,144(sp)
    876c:	034001c4 	movi	r13,7
    8770:	00000506 	br	8788 <___vfiprintf_internal_r+0xc3c>
    8774:	29000084 	addi	r4,r5,2
    8778:	42000204 	addi	r8,r8,8
    877c:	180b883a 	mov	r5,r3
    8780:	e73ffc04 	addi	fp,fp,-16
    8784:	3f000d0e 	bge	r7,fp,87bc <___vfiprintf_internal_r+0xc70>
    8788:	10800404 	addi	r2,r2,16
    878c:	28c00044 	addi	r3,r5,1
    8790:	45c00015 	stw	r23,0(r8)
    8794:	41c00115 	stw	r7,4(r8)
    8798:	d8801c15 	stw	r2,112(sp)
    879c:	d8c01b15 	stw	r3,108(sp)
    87a0:	68fff40e 	bge	r13,r3,8774 <___vfiprintf_internal_r+0xc28>
    87a4:	1000101e 	bne	r2,zero,87e8 <___vfiprintf_internal_r+0xc9c>
    87a8:	e73ffc04 	addi	fp,fp,-16
    87ac:	01000044 	movi	r4,1
    87b0:	000b883a 	mov	r5,zero
    87b4:	d811883a 	mov	r8,sp
    87b8:	3f3ff316 	blt	r7,fp,8788 <___vfiprintf_internal_r+0xc3c>
    87bc:	da802417 	ldw	r10,144(sp)
    87c0:	1705883a 	add	r2,r2,fp
    87c4:	47000115 	stw	fp,4(r8)
    87c8:	42800015 	stw	r10,0(r8)
    87cc:	d8801c15 	stw	r2,112(sp)
    87d0:	d9001b15 	stw	r4,108(sp)
    87d4:	00c001c4 	movi	r3,7
    87d8:	19003616 	blt	r3,r4,88b4 <___vfiprintf_internal_r+0xd68>
    87dc:	42000204 	addi	r8,r8,8
    87e0:	21000044 	addi	r4,r4,1
    87e4:	003e5706 	br	8144 <___vfiprintf_internal_r+0x5f8>
    87e8:	d9402117 	ldw	r5,132(sp)
    87ec:	d9002017 	ldw	r4,128(sp)
    87f0:	d9801a04 	addi	r6,sp,104
    87f4:	d9c02b15 	stw	r7,172(sp)
    87f8:	db402a15 	stw	r13,168(sp)
    87fc:	0007a380 	call	7a38 <__sprint_r.part.0>
    8800:	d9c02b17 	ldw	r7,172(sp)
    8804:	db402a17 	ldw	r13,168(sp)
    8808:	1000241e 	bne	r2,zero,889c <___vfiprintf_internal_r+0xd50>
    880c:	d9401b17 	ldw	r5,108(sp)
    8810:	d8801c17 	ldw	r2,112(sp)
    8814:	d811883a 	mov	r8,sp
    8818:	29000044 	addi	r4,r5,1
    881c:	003fd806 	br	8780 <___vfiprintf_internal_r+0xc34>
    8820:	d9401b17 	ldw	r5,108(sp)
    8824:	00c00074 	movhi	r3,1
    8828:	18fdd604 	addi	r3,r3,-2216
    882c:	d8c02415 	stw	r3,144(sp)
    8830:	29400044 	addi	r5,r5,1
    8834:	d8c02417 	ldw	r3,144(sp)
    8838:	14c5883a 	add	r2,r2,r19
    883c:	44c00115 	stw	r19,4(r8)
    8840:	40c00015 	stw	r3,0(r8)
    8844:	d8801c15 	stw	r2,112(sp)
    8848:	d9401b15 	stw	r5,108(sp)
    884c:	00c001c4 	movi	r3,7
    8850:	1940070e 	bge	r3,r5,8870 <___vfiprintf_internal_r+0xd24>
    8854:	103e4826 	beq	r2,zero,8178 <___vfiprintf_internal_r+0x62c>
    8858:	d9402117 	ldw	r5,132(sp)
    885c:	d9002017 	ldw	r4,128(sp)
    8860:	d9801a04 	addi	r6,sp,104
    8864:	0007a380 	call	7a38 <__sprint_r.part.0>
    8868:	10000c1e 	bne	r2,zero,889c <___vfiprintf_internal_r+0xd50>
    886c:	d8801c17 	ldw	r2,112(sp)
    8870:	8c80010e 	bge	r17,r18,8878 <___vfiprintf_internal_r+0xd2c>
    8874:	9023883a 	mov	r17,r18
    8878:	da802317 	ldw	r10,140(sp)
    887c:	5455883a 	add	r10,r10,r17
    8880:	da802315 	stw	r10,140(sp)
    8884:	103e4126 	beq	r2,zero,818c <___vfiprintf_internal_r+0x640>
    8888:	d9402117 	ldw	r5,132(sp)
    888c:	d9002017 	ldw	r4,128(sp)
    8890:	d9801a04 	addi	r6,sp,104
    8894:	0007a380 	call	7a38 <__sprint_r.part.0>
    8898:	103e3c26 	beq	r2,zero,818c <___vfiprintf_internal_r+0x640>
    889c:	dd002117 	ldw	r20,132(sp)
    88a0:	a080030b 	ldhu	r2,12(r20)
    88a4:	1080100c 	andi	r2,r2,64
    88a8:	1001231e 	bne	r2,zero,8d38 <___vfiprintf_internal_r+0x11ec>
    88ac:	d8802317 	ldw	r2,140(sp)
    88b0:	003d7b06 	br	7ea0 <___vfiprintf_internal_r+0x354>
    88b4:	1000991e 	bne	r2,zero,8b1c <___vfiprintf_internal_r+0xfd0>
    88b8:	00c00044 	movi	r3,1
    88bc:	9805883a 	mov	r2,r19
    88c0:	dd400015 	stw	r21,0(sp)
    88c4:	dcc00115 	stw	r19,4(sp)
    88c8:	dcc01c15 	stw	r19,112(sp)
    88cc:	d8c01b15 	stw	r3,108(sp)
    88d0:	d811883a 	mov	r8,sp
    88d4:	42000204 	addi	r8,r8,8
    88d8:	a2c0010c 	andi	r11,r20,4
    88dc:	583fe426 	beq	r11,zero,8870 <___vfiprintf_internal_r+0xd24>
    88e0:	8ca7c83a 	sub	r19,r17,r18
    88e4:	04ffe20e 	bge	zero,r19,8870 <___vfiprintf_internal_r+0xd24>
    88e8:	01c00404 	movi	r7,16
    88ec:	3cffcc0e 	bge	r7,r19,8820 <___vfiprintf_internal_r+0xcd4>
    88f0:	02800074 	movhi	r10,1
    88f4:	52bdd604 	addi	r10,r10,-2216
    88f8:	d9001b17 	ldw	r4,108(sp)
    88fc:	da802415 	stw	r10,144(sp)
    8900:	382b883a 	mov	r21,r7
    8904:	050001c4 	movi	r20,7
    8908:	df002017 	ldw	fp,128(sp)
    890c:	00000506 	br	8924 <___vfiprintf_internal_r+0xdd8>
    8910:	21400084 	addi	r5,r4,2
    8914:	42000204 	addi	r8,r8,8
    8918:	1809883a 	mov	r4,r3
    891c:	9cfffc04 	addi	r19,r19,-16
    8920:	acffc40e 	bge	r21,r19,8834 <___vfiprintf_internal_r+0xce8>
    8924:	10800404 	addi	r2,r2,16
    8928:	20c00044 	addi	r3,r4,1
    892c:	45800015 	stw	r22,0(r8)
    8930:	45400115 	stw	r21,4(r8)
    8934:	d8801c15 	stw	r2,112(sp)
    8938:	d8c01b15 	stw	r3,108(sp)
    893c:	a0fff40e 	bge	r20,r3,8910 <___vfiprintf_internal_r+0xdc4>
    8940:	1000041e 	bne	r2,zero,8954 <___vfiprintf_internal_r+0xe08>
    8944:	01400044 	movi	r5,1
    8948:	0009883a 	mov	r4,zero
    894c:	d811883a 	mov	r8,sp
    8950:	003ff206 	br	891c <___vfiprintf_internal_r+0xdd0>
    8954:	d9402117 	ldw	r5,132(sp)
    8958:	d9801a04 	addi	r6,sp,104
    895c:	e009883a 	mov	r4,fp
    8960:	0007a380 	call	7a38 <__sprint_r.part.0>
    8964:	103fcd1e 	bne	r2,zero,889c <___vfiprintf_internal_r+0xd50>
    8968:	d9001b17 	ldw	r4,108(sp)
    896c:	d8801c17 	ldw	r2,112(sp)
    8970:	d811883a 	mov	r8,sp
    8974:	21400044 	addi	r5,r4,1
    8978:	003fe806 	br	891c <___vfiprintf_internal_r+0xdd0>
    897c:	d9402117 	ldw	r5,132(sp)
    8980:	d9002017 	ldw	r4,128(sp)
    8984:	d9801a04 	addi	r6,sp,104
    8988:	d9c02b15 	stw	r7,172(sp)
    898c:	db402a15 	stw	r13,168(sp)
    8990:	0007a380 	call	7a38 <__sprint_r.part.0>
    8994:	d9c02b17 	ldw	r7,172(sp)
    8998:	db402a17 	ldw	r13,168(sp)
    899c:	103fbf1e 	bne	r2,zero,889c <___vfiprintf_internal_r+0xd50>
    89a0:	d9401b17 	ldw	r5,108(sp)
    89a4:	d8801c17 	ldw	r2,112(sp)
    89a8:	d811883a 	mov	r8,sp
    89ac:	29800044 	addi	r6,r5,1
    89b0:	003dc406 	br	80c4 <___vfiprintf_internal_r+0x578>
    89b4:	1000d21e 	bne	r2,zero,8d00 <___vfiprintf_internal_r+0x11b4>
    89b8:	d8c01d87 	ldb	r3,118(sp)
    89bc:	18009526 	beq	r3,zero,8c14 <___vfiprintf_internal_r+0x10c8>
    89c0:	00800044 	movi	r2,1
    89c4:	d8c01d84 	addi	r3,sp,118
    89c8:	1009883a 	mov	r4,r2
    89cc:	d8c00015 	stw	r3,0(sp)
    89d0:	d8800115 	stw	r2,4(sp)
    89d4:	d811883a 	mov	r8,sp
    89d8:	200b883a 	mov	r5,r4
    89dc:	42000204 	addi	r8,r8,8
    89e0:	21000044 	addi	r4,r4,1
    89e4:	003d9706 	br	8044 <___vfiprintf_internal_r+0x4f8>
    89e8:	d9001d04 	addi	r4,sp,116
    89ec:	00800084 	movi	r2,2
    89f0:	d9000015 	stw	r4,0(sp)
    89f4:	d8800115 	stw	r2,4(sp)
    89f8:	1809883a 	mov	r4,r3
    89fc:	d811883a 	mov	r8,sp
    8a00:	200b883a 	mov	r5,r4
    8a04:	42000204 	addi	r8,r8,8
    8a08:	21000044 	addi	r4,r4,1
    8a0c:	003f4e06 	br	8748 <___vfiprintf_internal_r+0xbfc>
    8a10:	d8001d85 	stb	zero,118(sp)
    8a14:	48005016 	blt	r9,zero,8b58 <___vfiprintf_internal_r+0x100c>
    8a18:	00ffdfc4 	movi	r3,-129
    8a1c:	94c4b03a 	or	r2,r18,r19
    8a20:	a0e8703a 	and	r20,r20,r3
    8a24:	103d4426 	beq	r2,zero,7f38 <___vfiprintf_internal_r+0x3ec>
    8a28:	0039883a 	mov	fp,zero
    8a2c:	d9002617 	ldw	r4,152(sp)
    8a30:	dd401a04 	addi	r21,sp,104
    8a34:	908003cc 	andi	r2,r18,15
    8a38:	9806973a 	slli	r3,r19,28
    8a3c:	2085883a 	add	r2,r4,r2
    8a40:	9024d13a 	srli	r18,r18,4
    8a44:	10800003 	ldbu	r2,0(r2)
    8a48:	9826d13a 	srli	r19,r19,4
    8a4c:	ad7fffc4 	addi	r21,r21,-1
    8a50:	1ca4b03a 	or	r18,r3,r18
    8a54:	a8800005 	stb	r2,0(r21)
    8a58:	94c4b03a 	or	r2,r18,r19
    8a5c:	103ff51e 	bne	r2,zero,8a34 <___vfiprintf_internal_r+0xee8>
    8a60:	003e5906 	br	83c8 <___vfiprintf_internal_r+0x87c>
    8a64:	d9402117 	ldw	r5,132(sp)
    8a68:	d9002017 	ldw	r4,128(sp)
    8a6c:	d9801a04 	addi	r6,sp,104
    8a70:	0007a380 	call	7a38 <__sprint_r.part.0>
    8a74:	103f891e 	bne	r2,zero,889c <___vfiprintf_internal_r+0xd50>
    8a78:	d8801c17 	ldw	r2,112(sp)
    8a7c:	d811883a 	mov	r8,sp
    8a80:	003f9506 	br	88d8 <___vfiprintf_internal_r+0xd8c>
    8a84:	d9402117 	ldw	r5,132(sp)
    8a88:	d9002017 	ldw	r4,128(sp)
    8a8c:	d9801a04 	addi	r6,sp,104
    8a90:	0007a380 	call	7a38 <__sprint_r.part.0>
    8a94:	103f811e 	bne	r2,zero,889c <___vfiprintf_internal_r+0xd50>
    8a98:	d811883a 	mov	r8,sp
    8a9c:	003ced06 	br	7e54 <___vfiprintf_internal_r+0x308>
    8aa0:	d9402117 	ldw	r5,132(sp)
    8aa4:	d9002017 	ldw	r4,128(sp)
    8aa8:	d9801a04 	addi	r6,sp,104
    8aac:	da402c15 	stw	r9,176(sp)
    8ab0:	db802a15 	stw	r14,168(sp)
    8ab4:	0007a380 	call	7a38 <__sprint_r.part.0>
    8ab8:	da402c17 	ldw	r9,176(sp)
    8abc:	db802a17 	ldw	r14,168(sp)
    8ac0:	103f761e 	bne	r2,zero,889c <___vfiprintf_internal_r+0xd50>
    8ac4:	d9401b17 	ldw	r5,108(sp)
    8ac8:	d8801c17 	ldw	r2,112(sp)
    8acc:	d811883a 	mov	r8,sp
    8ad0:	29000044 	addi	r4,r5,1
    8ad4:	003d5b06 	br	8044 <___vfiprintf_internal_r+0x4f8>
    8ad8:	d9402117 	ldw	r5,132(sp)
    8adc:	d9002017 	ldw	r4,128(sp)
    8ae0:	d9801a04 	addi	r6,sp,104
    8ae4:	da402c15 	stw	r9,176(sp)
    8ae8:	0007a380 	call	7a38 <__sprint_r.part.0>
    8aec:	da402c17 	ldw	r9,176(sp)
    8af0:	103f6a1e 	bne	r2,zero,889c <___vfiprintf_internal_r+0xd50>
    8af4:	d9401b17 	ldw	r5,108(sp)
    8af8:	d8801c17 	ldw	r2,112(sp)
    8afc:	d811883a 	mov	r8,sp
    8b00:	29000044 	addi	r4,r5,1
    8b04:	003f1006 	br	8748 <___vfiprintf_internal_r+0xbfc>
    8b08:	1000c31e 	bne	r2,zero,8e18 <___vfiprintf_internal_r+0x12cc>
    8b0c:	01000044 	movi	r4,1
    8b10:	000b883a 	mov	r5,zero
    8b14:	d811883a 	mov	r8,sp
    8b18:	003f0d06 	br	8750 <___vfiprintf_internal_r+0xc04>
    8b1c:	d9402117 	ldw	r5,132(sp)
    8b20:	d9002017 	ldw	r4,128(sp)
    8b24:	d9801a04 	addi	r6,sp,104
    8b28:	0007a380 	call	7a38 <__sprint_r.part.0>
    8b2c:	103f5b1e 	bne	r2,zero,889c <___vfiprintf_internal_r+0xd50>
    8b30:	d9001b17 	ldw	r4,108(sp)
    8b34:	d8801c17 	ldw	r2,112(sp)
    8b38:	d811883a 	mov	r8,sp
    8b3c:	21000044 	addi	r4,r4,1
    8b40:	003d8006 	br	8144 <___vfiprintf_internal_r+0x5f8>
    8b44:	01000074 	movhi	r4,1
    8b48:	213d7104 	addi	r4,r4,-2620
    8b4c:	d9002615 	stw	r4,152(sp)
    8b50:	d8c02215 	stw	r3,136(sp)
    8b54:	1029883a 	mov	r20,r2
    8b58:	94c4b03a 	or	r2,r18,r19
    8b5c:	103fb21e 	bne	r2,zero,8a28 <___vfiprintf_internal_r+0xedc>
    8b60:	0039883a 	mov	fp,zero
    8b64:	00800084 	movi	r2,2
    8b68:	003e6b06 	br	8518 <___vfiprintf_internal_r+0x9cc>
    8b6c:	da802217 	ldw	r10,136(sp)
    8b70:	d8001d85 	stb	zero,118(sp)
    8b74:	0027883a 	mov	r19,zero
    8b78:	50800104 	addi	r2,r10,4
    8b7c:	54800017 	ldw	r18,0(r10)
    8b80:	483e6016 	blt	r9,zero,8504 <___vfiprintf_internal_r+0x9b8>
    8b84:	00ffdfc4 	movi	r3,-129
    8b88:	d8802215 	stw	r2,136(sp)
    8b8c:	a0e8703a 	and	r20,r20,r3
    8b90:	0039883a 	mov	fp,zero
    8b94:	903ebb26 	beq	r18,zero,8684 <___vfiprintf_internal_r+0xb38>
    8b98:	00800244 	movi	r2,9
    8b9c:	14bdee36 	bltu	r2,r18,8358 <___vfiprintf_internal_r+0x80c>
    8ba0:	003eba06 	br	868c <___vfiprintf_internal_r+0xb40>
    8ba4:	00800c04 	movi	r2,48
    8ba8:	d8c01d45 	stb	r3,117(sp)
    8bac:	d8801d05 	stb	r2,116(sp)
    8bb0:	d8001d85 	stb	zero,118(sp)
    8bb4:	a0c00094 	ori	r3,r20,2
    8bb8:	4800a916 	blt	r9,zero,8e60 <___vfiprintf_internal_r+0x1314>
    8bbc:	00bfdfc4 	movi	r2,-129
    8bc0:	a096703a 	and	r11,r20,r2
    8bc4:	5d000094 	ori	r20,r11,2
    8bc8:	0039883a 	mov	fp,zero
    8bcc:	003f9706 	br	8a2c <___vfiprintf_internal_r+0xee0>
    8bd0:	8025883a 	mov	r18,r16
    8bd4:	003c2e06 	br	7c90 <___vfiprintf_internal_r+0x144>
    8bd8:	00800074 	movhi	r2,1
    8bdc:	10bd7104 	addi	r2,r2,-2620
    8be0:	0039883a 	mov	fp,zero
    8be4:	d8802615 	stw	r2,152(sp)
    8be8:	003f9006 	br	8a2c <___vfiprintf_internal_r+0xee0>
    8bec:	04a5c83a 	sub	r18,zero,r18
    8bf0:	07000b44 	movi	fp,45
    8bf4:	9004c03a 	cmpne	r2,r18,zero
    8bf8:	04e7c83a 	sub	r19,zero,r19
    8bfc:	df001d85 	stb	fp,118(sp)
    8c00:	98a7c83a 	sub	r19,r19,r2
    8c04:	48009f16 	blt	r9,zero,8e84 <___vfiprintf_internal_r+0x1338>
    8c08:	00bfdfc4 	movi	r2,-129
    8c0c:	a0a8703a 	and	r20,r20,r2
    8c10:	003dd006 	br	8354 <___vfiprintf_internal_r+0x808>
    8c14:	70004c26 	beq	r14,zero,8d48 <___vfiprintf_internal_r+0x11fc>
    8c18:	00800084 	movi	r2,2
    8c1c:	d8c01d04 	addi	r3,sp,116
    8c20:	d8c00015 	stw	r3,0(sp)
    8c24:	d8800115 	stw	r2,4(sp)
    8c28:	01000044 	movi	r4,1
    8c2c:	d811883a 	mov	r8,sp
    8c30:	003f7306 	br	8a00 <___vfiprintf_internal_r+0xeb4>
    8c34:	a080100c 	andi	r2,r20,64
    8c38:	da802217 	ldw	r10,136(sp)
    8c3c:	103e0626 	beq	r2,zero,8458 <___vfiprintf_internal_r+0x90c>
    8c40:	5480000f 	ldh	r18,0(r10)
    8c44:	52800104 	addi	r10,r10,4
    8c48:	da802215 	stw	r10,136(sp)
    8c4c:	9027d7fa 	srai	r19,r18,31
    8c50:	9805883a 	mov	r2,r19
    8c54:	003db806 	br	8338 <___vfiprintf_internal_r+0x7ec>
    8c58:	a080040c 	andi	r2,r20,16
    8c5c:	1000091e 	bne	r2,zero,8c84 <___vfiprintf_internal_r+0x1138>
    8c60:	a2c0100c 	andi	r11,r20,64
    8c64:	58000726 	beq	r11,zero,8c84 <___vfiprintf_internal_r+0x1138>
    8c68:	da802217 	ldw	r10,136(sp)
    8c6c:	50800017 	ldw	r2,0(r10)
    8c70:	52800104 	addi	r10,r10,4
    8c74:	da802215 	stw	r10,136(sp)
    8c78:	da802317 	ldw	r10,140(sp)
    8c7c:	1280000d 	sth	r10,0(r2)
    8c80:	003be706 	br	7c20 <___vfiprintf_internal_r+0xd4>
    8c84:	da802217 	ldw	r10,136(sp)
    8c88:	50800017 	ldw	r2,0(r10)
    8c8c:	52800104 	addi	r10,r10,4
    8c90:	da802215 	stw	r10,136(sp)
    8c94:	da802317 	ldw	r10,140(sp)
    8c98:	12800015 	stw	r10,0(r2)
    8c9c:	003be006 	br	7c20 <___vfiprintf_internal_r+0xd4>
    8ca0:	a080100c 	andi	r2,r20,64
    8ca4:	da802217 	ldw	r10,136(sp)
    8ca8:	10003026 	beq	r2,zero,8d6c <___vfiprintf_internal_r+0x1220>
    8cac:	5480000b 	ldhu	r18,0(r10)
    8cb0:	52800104 	addi	r10,r10,4
    8cb4:	0027883a 	mov	r19,zero
    8cb8:	da802215 	stw	r10,136(sp)
    8cbc:	003d8006 	br	82c0 <___vfiprintf_internal_r+0x774>
    8cc0:	80c00007 	ldb	r3,0(r16)
    8cc4:	003c0006 	br	7cc8 <___vfiprintf_internal_r+0x17c>
    8cc8:	a080100c 	andi	r2,r20,64
    8ccc:	d8001d85 	stb	zero,118(sp)
    8cd0:	da802217 	ldw	r10,136(sp)
    8cd4:	1000201e 	bne	r2,zero,8d58 <___vfiprintf_internal_r+0x120c>
    8cd8:	50800104 	addi	r2,r10,4
    8cdc:	54800017 	ldw	r18,0(r10)
    8ce0:	0027883a 	mov	r19,zero
    8ce4:	483def0e 	bge	r9,zero,84a4 <___vfiprintf_internal_r+0x958>
    8ce8:	94c6b03a 	or	r3,r18,r19
    8cec:	d8802215 	stw	r2,136(sp)
    8cf0:	183d4e1e 	bne	r3,zero,822c <___vfiprintf_internal_r+0x6e0>
    8cf4:	0039883a 	mov	fp,zero
    8cf8:	0005883a 	mov	r2,zero
    8cfc:	003e0606 	br	8518 <___vfiprintf_internal_r+0x9cc>
    8d00:	d9402117 	ldw	r5,132(sp)
    8d04:	d9002017 	ldw	r4,128(sp)
    8d08:	d9801a04 	addi	r6,sp,104
    8d0c:	da402c15 	stw	r9,176(sp)
    8d10:	db802a15 	stw	r14,168(sp)
    8d14:	0007a380 	call	7a38 <__sprint_r.part.0>
    8d18:	da402c17 	ldw	r9,176(sp)
    8d1c:	db802a17 	ldw	r14,168(sp)
    8d20:	103ede1e 	bne	r2,zero,889c <___vfiprintf_internal_r+0xd50>
    8d24:	d9401b17 	ldw	r5,108(sp)
    8d28:	d8801c17 	ldw	r2,112(sp)
    8d2c:	d811883a 	mov	r8,sp
    8d30:	29000044 	addi	r4,r5,1
    8d34:	003e7406 	br	8708 <___vfiprintf_internal_r+0xbbc>
    8d38:	00bfffc4 	movi	r2,-1
    8d3c:	003c5806 	br	7ea0 <___vfiprintf_internal_r+0x354>
    8d40:	d811883a 	mov	r8,sp
    8d44:	003ee806 	br	88e8 <___vfiprintf_internal_r+0xd9c>
    8d48:	000b883a 	mov	r5,zero
    8d4c:	01000044 	movi	r4,1
    8d50:	d811883a 	mov	r8,sp
    8d54:	003e7c06 	br	8748 <___vfiprintf_internal_r+0xbfc>
    8d58:	50800104 	addi	r2,r10,4
    8d5c:	5480000b 	ldhu	r18,0(r10)
    8d60:	0027883a 	mov	r19,zero
    8d64:	483dcf0e 	bge	r9,zero,84a4 <___vfiprintf_internal_r+0x958>
    8d68:	003fdf06 	br	8ce8 <___vfiprintf_internal_r+0x119c>
    8d6c:	54800017 	ldw	r18,0(r10)
    8d70:	52800104 	addi	r10,r10,4
    8d74:	0027883a 	mov	r19,zero
    8d78:	da802215 	stw	r10,136(sp)
    8d7c:	003d5006 	br	82c0 <___vfiprintf_internal_r+0x774>
    8d80:	50800104 	addi	r2,r10,4
    8d84:	5480000b 	ldhu	r18,0(r10)
    8d88:	0027883a 	mov	r19,zero
    8d8c:	483f7d0e 	bge	r9,zero,8b84 <___vfiprintf_internal_r+0x1038>
    8d90:	003ddc06 	br	8504 <___vfiprintf_internal_r+0x9b8>
    8d94:	d8c02215 	stw	r3,136(sp)
    8d98:	0039883a 	mov	fp,zero
    8d9c:	003ddb06 	br	850c <___vfiprintf_internal_r+0x9c0>
    8da0:	02800074 	movhi	r10,1
    8da4:	52bdd204 	addi	r10,r10,-2232
    8da8:	da802415 	stw	r10,144(sp)
    8dac:	003e8306 	br	87bc <___vfiprintf_internal_r+0xc70>
    8db0:	d8801c17 	ldw	r2,112(sp)
    8db4:	dd002117 	ldw	r20,132(sp)
    8db8:	103eb926 	beq	r2,zero,88a0 <___vfiprintf_internal_r+0xd54>
    8dbc:	d9002017 	ldw	r4,128(sp)
    8dc0:	d9801a04 	addi	r6,sp,104
    8dc4:	a00b883a 	mov	r5,r20
    8dc8:	0007a380 	call	7a38 <__sprint_r.part.0>
    8dcc:	003eb406 	br	88a0 <___vfiprintf_internal_r+0xd54>
    8dd0:	80c00043 	ldbu	r3,1(r16)
    8dd4:	a5000814 	ori	r20,r20,32
    8dd8:	84000044 	addi	r16,r16,1
    8ddc:	18c03fcc 	andi	r3,r3,255
    8de0:	18c0201c 	xori	r3,r3,128
    8de4:	18ffe004 	addi	r3,r3,-128
    8de8:	003bb706 	br	7cc8 <___vfiprintf_internal_r+0x17c>
    8dec:	a809883a 	mov	r4,r21
    8df0:	d8c02a15 	stw	r3,168(sp)
    8df4:	da002b15 	stw	r8,172(sp)
    8df8:	00004a00 	call	4a0 <strlen>
    8dfc:	d8c02a17 	ldw	r3,168(sp)
    8e00:	1027883a 	mov	r19,r2
    8e04:	df001d83 	ldbu	fp,118(sp)
    8e08:	d8c02215 	stw	r3,136(sp)
    8e0c:	0013883a 	mov	r9,zero
    8e10:	da002b17 	ldw	r8,172(sp)
    8e14:	003c4d06 	br	7f4c <___vfiprintf_internal_r+0x400>
    8e18:	d9402117 	ldw	r5,132(sp)
    8e1c:	d9002017 	ldw	r4,128(sp)
    8e20:	d9801a04 	addi	r6,sp,104
    8e24:	da402c15 	stw	r9,176(sp)
    8e28:	0007a380 	call	7a38 <__sprint_r.part.0>
    8e2c:	da402c17 	ldw	r9,176(sp)
    8e30:	103e9a1e 	bne	r2,zero,889c <___vfiprintf_internal_r+0xd50>
    8e34:	d9401b17 	ldw	r5,108(sp)
    8e38:	d8801c17 	ldw	r2,112(sp)
    8e3c:	d811883a 	mov	r8,sp
    8e40:	29000044 	addi	r4,r5,1
    8e44:	003e4206 	br	8750 <___vfiprintf_internal_r+0xc04>
    8e48:	d9401b17 	ldw	r5,108(sp)
    8e4c:	01000074 	movhi	r4,1
    8e50:	213dd604 	addi	r4,r4,-2216
    8e54:	d9002415 	stw	r4,144(sp)
    8e58:	29400044 	addi	r5,r5,1
    8e5c:	003c6d06 	br	8014 <___vfiprintf_internal_r+0x4c8>
    8e60:	0039883a 	mov	fp,zero
    8e64:	00800084 	movi	r2,2
    8e68:	10803fcc 	andi	r2,r2,255
    8e6c:	01000044 	movi	r4,1
    8e70:	11001e26 	beq	r2,r4,8eec <___vfiprintf_internal_r+0x13a0>
    8e74:	01000084 	movi	r4,2
    8e78:	11001e1e 	bne	r2,r4,8ef4 <___vfiprintf_internal_r+0x13a8>
    8e7c:	1829883a 	mov	r20,r3
    8e80:	003eea06 	br	8a2c <___vfiprintf_internal_r+0xee0>
    8e84:	a007883a 	mov	r3,r20
    8e88:	00800044 	movi	r2,1
    8e8c:	003ff606 	br	8e68 <___vfiprintf_internal_r+0x131c>
    8e90:	00800184 	movi	r2,6
    8e94:	1240012e 	bgeu	r2,r9,8e9c <___vfiprintf_internal_r+0x1350>
    8e98:	1013883a 	mov	r9,r2
    8e9c:	4827883a 	mov	r19,r9
    8ea0:	4825883a 	mov	r18,r9
    8ea4:	48001516 	blt	r9,zero,8efc <___vfiprintf_internal_r+0x13b0>
    8ea8:	05400074 	movhi	r21,1
    8eac:	d8c02215 	stw	r3,136(sp)
    8eb0:	ad7d7604 	addi	r21,r21,-2600
    8eb4:	003d1406 	br	8308 <___vfiprintf_internal_r+0x7bc>
    8eb8:	02800074 	movhi	r10,1
    8ebc:	52bdd204 	addi	r10,r10,-2232
    8ec0:	da802415 	stw	r10,144(sp)
    8ec4:	200d883a 	mov	r6,r4
    8ec8:	003c9106 	br	8110 <___vfiprintf_internal_r+0x5c4>
    8ecc:	5021883a 	mov	r16,r10
    8ed0:	0013883a 	mov	r9,zero
    8ed4:	003b7d06 	br	7ccc <___vfiprintf_internal_r+0x180>
    8ed8:	4827883a 	mov	r19,r9
    8edc:	df001d83 	ldbu	fp,118(sp)
    8ee0:	d8c02215 	stw	r3,136(sp)
    8ee4:	0013883a 	mov	r9,zero
    8ee8:	003c1806 	br	7f4c <___vfiprintf_internal_r+0x400>
    8eec:	1829883a 	mov	r20,r3
    8ef0:	003d1806 	br	8354 <___vfiprintf_internal_r+0x808>
    8ef4:	1829883a 	mov	r20,r3
    8ef8:	003ccd06 	br	8230 <___vfiprintf_internal_r+0x6e4>
    8efc:	0025883a 	mov	r18,zero
    8f00:	003fe906 	br	8ea8 <___vfiprintf_internal_r+0x135c>
    8f04:	d8802217 	ldw	r2,136(sp)
    8f08:	80c00043 	ldbu	r3,1(r16)
    8f0c:	5021883a 	mov	r16,r10
    8f10:	12400017 	ldw	r9,0(r2)
    8f14:	10800104 	addi	r2,r2,4
    8f18:	d8802215 	stw	r2,136(sp)
    8f1c:	483faf0e 	bge	r9,zero,8ddc <___vfiprintf_internal_r+0x1290>
    8f20:	18c03fcc 	andi	r3,r3,255
    8f24:	18c0201c 	xori	r3,r3,128
    8f28:	027fffc4 	movi	r9,-1
    8f2c:	18ffe004 	addi	r3,r3,-128
    8f30:	003b6506 	br	7cc8 <___vfiprintf_internal_r+0x17c>
    8f34:	d9c01d85 	stb	r7,118(sp)
    8f38:	003ca006 	br	81bc <___vfiprintf_internal_r+0x670>
    8f3c:	d9c01d85 	stb	r7,118(sp)
    8f40:	003cad06 	br	81f8 <___vfiprintf_internal_r+0x6ac>
    8f44:	d9c01d85 	stb	r7,118(sp)
    8f48:	003d7d06 	br	8540 <___vfiprintf_internal_r+0x9f4>
    8f4c:	d9c01d85 	stb	r7,118(sp)
    8f50:	003d5f06 	br	84d0 <___vfiprintf_internal_r+0x984>
    8f54:	a080004c 	andi	r2,r20,1
    8f58:	0039883a 	mov	fp,zero
    8f5c:	10000526 	beq	r2,zero,8f74 <___vfiprintf_internal_r+0x1428>
    8f60:	00800c04 	movi	r2,48
    8f64:	d88019c5 	stb	r2,103(sp)
    8f68:	dcc02717 	ldw	r19,156(sp)
    8f6c:	dd4019c4 	addi	r21,sp,103
    8f70:	003bf606 	br	7f4c <___vfiprintf_internal_r+0x400>
    8f74:	0027883a 	mov	r19,zero
    8f78:	dd401a04 	addi	r21,sp,104
    8f7c:	003bf306 	br	7f4c <___vfiprintf_internal_r+0x400>
    8f80:	d9c01d85 	stb	r7,118(sp)
    8f84:	003dc806 	br	86a8 <___vfiprintf_internal_r+0xb5c>
    8f88:	d9c01d85 	stb	r7,118(sp)
    8f8c:	003d3a06 	br	8478 <___vfiprintf_internal_r+0x92c>
    8f90:	d9c01d85 	stb	r7,118(sp)
    8f94:	003d2a06 	br	8440 <___vfiprintf_internal_r+0x8f4>
    8f98:	d9c01d85 	stb	r7,118(sp)
    8f9c:	003cde06 	br	8318 <___vfiprintf_internal_r+0x7cc>
    8fa0:	d9c01d85 	stb	r7,118(sp)
    8fa4:	003cbc06 	br	8298 <___vfiprintf_internal_r+0x74c>

00008fa8 <__vfiprintf_internal>:
    8fa8:	00800074 	movhi	r2,1
    8fac:	1084cf04 	addi	r2,r2,4924
    8fb0:	300f883a 	mov	r7,r6
    8fb4:	280d883a 	mov	r6,r5
    8fb8:	200b883a 	mov	r5,r4
    8fbc:	11000017 	ldw	r4,0(r2)
    8fc0:	0007b4c1 	jmpi	7b4c <___vfiprintf_internal_r>

00008fc4 <__sbprintf>:
    8fc4:	2880030b 	ldhu	r2,12(r5)
    8fc8:	2ac01917 	ldw	r11,100(r5)
    8fcc:	2a80038b 	ldhu	r10,14(r5)
    8fd0:	2a400717 	ldw	r9,28(r5)
    8fd4:	2a000917 	ldw	r8,36(r5)
    8fd8:	defee204 	addi	sp,sp,-1144
    8fdc:	00c10004 	movi	r3,1024
    8fe0:	dc011a15 	stw	r16,1128(sp)
    8fe4:	10bfff4c 	andi	r2,r2,65533
    8fe8:	2821883a 	mov	r16,r5
    8fec:	d8cb883a 	add	r5,sp,r3
    8ff0:	dc811c15 	stw	r18,1136(sp)
    8ff4:	dc411b15 	stw	r17,1132(sp)
    8ff8:	dfc11d15 	stw	ra,1140(sp)
    8ffc:	2025883a 	mov	r18,r4
    9000:	d881030d 	sth	r2,1036(sp)
    9004:	dac11915 	stw	r11,1124(sp)
    9008:	da81038d 	sth	r10,1038(sp)
    900c:	da410715 	stw	r9,1052(sp)
    9010:	da010915 	stw	r8,1060(sp)
    9014:	dec10015 	stw	sp,1024(sp)
    9018:	dec10415 	stw	sp,1040(sp)
    901c:	d8c10215 	stw	r3,1032(sp)
    9020:	d8c10515 	stw	r3,1044(sp)
    9024:	d8010615 	stw	zero,1048(sp)
    9028:	0007b4c0 	call	7b4c <___vfiprintf_internal_r>
    902c:	1023883a 	mov	r17,r2
    9030:	10000416 	blt	r2,zero,9044 <__sbprintf+0x80>
    9034:	d9410004 	addi	r5,sp,1024
    9038:	9009883a 	mov	r4,r18
    903c:	00044000 	call	4400 <_fflush_r>
    9040:	10000d1e 	bne	r2,zero,9078 <__sbprintf+0xb4>
    9044:	d881030b 	ldhu	r2,1036(sp)
    9048:	1080100c 	andi	r2,r2,64
    904c:	10000326 	beq	r2,zero,905c <__sbprintf+0x98>
    9050:	8080030b 	ldhu	r2,12(r16)
    9054:	10801014 	ori	r2,r2,64
    9058:	8080030d 	sth	r2,12(r16)
    905c:	8805883a 	mov	r2,r17
    9060:	dfc11d17 	ldw	ra,1140(sp)
    9064:	dc811c17 	ldw	r18,1136(sp)
    9068:	dc411b17 	ldw	r17,1132(sp)
    906c:	dc011a17 	ldw	r16,1128(sp)
    9070:	dec11e04 	addi	sp,sp,1144
    9074:	f800283a 	ret
    9078:	047fffc4 	movi	r17,-1
    907c:	003ff106 	br	9044 <__sbprintf+0x80>

00009080 <_write_r>:
    9080:	defffd04 	addi	sp,sp,-12
    9084:	2805883a 	mov	r2,r5
    9088:	dc000015 	stw	r16,0(sp)
    908c:	04000074 	movhi	r16,1
    9090:	dc400115 	stw	r17,4(sp)
    9094:	300b883a 	mov	r5,r6
    9098:	840b9f04 	addi	r16,r16,11900
    909c:	2023883a 	mov	r17,r4
    90a0:	380d883a 	mov	r6,r7
    90a4:	1009883a 	mov	r4,r2
    90a8:	dfc00215 	stw	ra,8(sp)
    90ac:	80000015 	stw	zero,0(r16)
    90b0:	000d5440 	call	d544 <write>
    90b4:	00ffffc4 	movi	r3,-1
    90b8:	10c00526 	beq	r2,r3,90d0 <_write_r+0x50>
    90bc:	dfc00217 	ldw	ra,8(sp)
    90c0:	dc400117 	ldw	r17,4(sp)
    90c4:	dc000017 	ldw	r16,0(sp)
    90c8:	dec00304 	addi	sp,sp,12
    90cc:	f800283a 	ret
    90d0:	80c00017 	ldw	r3,0(r16)
    90d4:	183ff926 	beq	r3,zero,90bc <_write_r+0x3c>
    90d8:	88c00015 	stw	r3,0(r17)
    90dc:	003ff706 	br	90bc <_write_r+0x3c>

000090e0 <_close_r>:
    90e0:	defffd04 	addi	sp,sp,-12
    90e4:	dc000015 	stw	r16,0(sp)
    90e8:	04000074 	movhi	r16,1
    90ec:	dc400115 	stw	r17,4(sp)
    90f0:	840b9f04 	addi	r16,r16,11900
    90f4:	2023883a 	mov	r17,r4
    90f8:	2809883a 	mov	r4,r5
    90fc:	dfc00215 	stw	ra,8(sp)
    9100:	80000015 	stw	zero,0(r16)
    9104:	000ccd00 	call	ccd0 <close>
    9108:	00ffffc4 	movi	r3,-1
    910c:	10c00526 	beq	r2,r3,9124 <_close_r+0x44>
    9110:	dfc00217 	ldw	ra,8(sp)
    9114:	dc400117 	ldw	r17,4(sp)
    9118:	dc000017 	ldw	r16,0(sp)
    911c:	dec00304 	addi	sp,sp,12
    9120:	f800283a 	ret
    9124:	80c00017 	ldw	r3,0(r16)
    9128:	183ff926 	beq	r3,zero,9110 <_close_r+0x30>
    912c:	88c00015 	stw	r3,0(r17)
    9130:	003ff706 	br	9110 <_close_r+0x30>

00009134 <_calloc_r>:
    9134:	298b383a 	mul	r5,r5,r6
    9138:	defffe04 	addi	sp,sp,-8
    913c:	dfc00115 	stw	ra,4(sp)
    9140:	dc000015 	stw	r16,0(sp)
    9144:	000553c0 	call	553c <_malloc_r>
    9148:	10002926 	beq	r2,zero,91f0 <_calloc_r+0xbc>
    914c:	11bfff17 	ldw	r6,-4(r2)
    9150:	1021883a 	mov	r16,r2
    9154:	00bfff04 	movi	r2,-4
    9158:	308c703a 	and	r6,r6,r2
    915c:	00c00904 	movi	r3,36
    9160:	308d883a 	add	r6,r6,r2
    9164:	19801636 	bltu	r3,r6,91c0 <_calloc_r+0x8c>
    9168:	008004c4 	movi	r2,19
    916c:	11800b2e 	bgeu	r2,r6,919c <_calloc_r+0x68>
    9170:	80000015 	stw	zero,0(r16)
    9174:	80000115 	stw	zero,4(r16)
    9178:	008006c4 	movi	r2,27
    917c:	11801a2e 	bgeu	r2,r6,91e8 <_calloc_r+0xb4>
    9180:	80000215 	stw	zero,8(r16)
    9184:	80000315 	stw	zero,12(r16)
    9188:	30c0151e 	bne	r6,r3,91e0 <_calloc_r+0xac>
    918c:	80000415 	stw	zero,16(r16)
    9190:	80800604 	addi	r2,r16,24
    9194:	80000515 	stw	zero,20(r16)
    9198:	00000106 	br	91a0 <_calloc_r+0x6c>
    919c:	8005883a 	mov	r2,r16
    91a0:	10000015 	stw	zero,0(r2)
    91a4:	10000115 	stw	zero,4(r2)
    91a8:	10000215 	stw	zero,8(r2)
    91ac:	8005883a 	mov	r2,r16
    91b0:	dfc00117 	ldw	ra,4(sp)
    91b4:	dc000017 	ldw	r16,0(sp)
    91b8:	dec00204 	addi	sp,sp,8
    91bc:	f800283a 	ret
    91c0:	000b883a 	mov	r5,zero
    91c4:	8009883a 	mov	r4,r16
    91c8:	00060d00 	call	60d0 <memset>
    91cc:	8005883a 	mov	r2,r16
    91d0:	dfc00117 	ldw	ra,4(sp)
    91d4:	dc000017 	ldw	r16,0(sp)
    91d8:	dec00204 	addi	sp,sp,8
    91dc:	f800283a 	ret
    91e0:	80800404 	addi	r2,r16,16
    91e4:	003fee06 	br	91a0 <_calloc_r+0x6c>
    91e8:	80800204 	addi	r2,r16,8
    91ec:	003fec06 	br	91a0 <_calloc_r+0x6c>
    91f0:	0005883a 	mov	r2,zero
    91f4:	003fee06 	br	91b0 <_calloc_r+0x7c>

000091f8 <_fclose_r>:
    91f8:	28003926 	beq	r5,zero,92e0 <_fclose_r+0xe8>
    91fc:	defffc04 	addi	sp,sp,-16
    9200:	dc400115 	stw	r17,4(sp)
    9204:	dc000015 	stw	r16,0(sp)
    9208:	dfc00315 	stw	ra,12(sp)
    920c:	dc800215 	stw	r18,8(sp)
    9210:	2023883a 	mov	r17,r4
    9214:	2821883a 	mov	r16,r5
    9218:	20000226 	beq	r4,zero,9224 <_fclose_r+0x2c>
    921c:	20800e17 	ldw	r2,56(r4)
    9220:	10002726 	beq	r2,zero,92c0 <_fclose_r+0xc8>
    9224:	8080030f 	ldh	r2,12(r16)
    9228:	1000071e 	bne	r2,zero,9248 <_fclose_r+0x50>
    922c:	0005883a 	mov	r2,zero
    9230:	dfc00317 	ldw	ra,12(sp)
    9234:	dc800217 	ldw	r18,8(sp)
    9238:	dc400117 	ldw	r17,4(sp)
    923c:	dc000017 	ldw	r16,0(sp)
    9240:	dec00404 	addi	sp,sp,16
    9244:	f800283a 	ret
    9248:	800b883a 	mov	r5,r16
    924c:	8809883a 	mov	r4,r17
    9250:	00041e40 	call	41e4 <__sflush_r>
    9254:	1025883a 	mov	r18,r2
    9258:	80800b17 	ldw	r2,44(r16)
    925c:	10000426 	beq	r2,zero,9270 <_fclose_r+0x78>
    9260:	81400717 	ldw	r5,28(r16)
    9264:	8809883a 	mov	r4,r17
    9268:	103ee83a 	callr	r2
    926c:	10001616 	blt	r2,zero,92c8 <_fclose_r+0xd0>
    9270:	8080030b 	ldhu	r2,12(r16)
    9274:	1080200c 	andi	r2,r2,128
    9278:	1000151e 	bne	r2,zero,92d0 <_fclose_r+0xd8>
    927c:	81400c17 	ldw	r5,48(r16)
    9280:	28000526 	beq	r5,zero,9298 <_fclose_r+0xa0>
    9284:	80801004 	addi	r2,r16,64
    9288:	28800226 	beq	r5,r2,9294 <_fclose_r+0x9c>
    928c:	8809883a 	mov	r4,r17
    9290:	00049500 	call	4950 <_free_r>
    9294:	80000c15 	stw	zero,48(r16)
    9298:	81401117 	ldw	r5,68(r16)
    929c:	28000326 	beq	r5,zero,92ac <_fclose_r+0xb4>
    92a0:	8809883a 	mov	r4,r17
    92a4:	00049500 	call	4950 <_free_r>
    92a8:	80001115 	stw	zero,68(r16)
    92ac:	00047ec0 	call	47ec <__sfp_lock_acquire>
    92b0:	8000030d 	sth	zero,12(r16)
    92b4:	00047f00 	call	47f0 <__sfp_lock_release>
    92b8:	9005883a 	mov	r2,r18
    92bc:	003fdc06 	br	9230 <_fclose_r+0x38>
    92c0:	00047dc0 	call	47dc <__sinit>
    92c4:	003fd706 	br	9224 <_fclose_r+0x2c>
    92c8:	04bfffc4 	movi	r18,-1
    92cc:	003fe806 	br	9270 <_fclose_r+0x78>
    92d0:	81400417 	ldw	r5,16(r16)
    92d4:	8809883a 	mov	r4,r17
    92d8:	00049500 	call	4950 <_free_r>
    92dc:	003fe706 	br	927c <_fclose_r+0x84>
    92e0:	0005883a 	mov	r2,zero
    92e4:	f800283a 	ret

000092e8 <fclose>:
    92e8:	00800074 	movhi	r2,1
    92ec:	1084cf04 	addi	r2,r2,4924
    92f0:	200b883a 	mov	r5,r4
    92f4:	11000017 	ldw	r4,0(r2)
    92f8:	00091f81 	jmpi	91f8 <_fclose_r>

000092fc <__fputwc>:
    92fc:	defff804 	addi	sp,sp,-32
    9300:	dcc00415 	stw	r19,16(sp)
    9304:	dc800315 	stw	r18,12(sp)
    9308:	dc000115 	stw	r16,4(sp)
    930c:	dfc00715 	stw	ra,28(sp)
    9310:	dd400615 	stw	r21,24(sp)
    9314:	dd000515 	stw	r20,20(sp)
    9318:	dc400215 	stw	r17,8(sp)
    931c:	2027883a 	mov	r19,r4
    9320:	2825883a 	mov	r18,r5
    9324:	3021883a 	mov	r16,r6
    9328:	000532c0 	call	532c <__locale_mb_cur_max>
    932c:	00c00044 	movi	r3,1
    9330:	10c03e26 	beq	r2,r3,942c <__fputwc+0x130>
    9334:	81c01704 	addi	r7,r16,92
    9338:	900d883a 	mov	r6,r18
    933c:	d80b883a 	mov	r5,sp
    9340:	9809883a 	mov	r4,r19
    9344:	00097cc0 	call	97cc <_wcrtomb_r>
    9348:	1029883a 	mov	r20,r2
    934c:	00bfffc4 	movi	r2,-1
    9350:	a0802026 	beq	r20,r2,93d4 <__fputwc+0xd8>
    9354:	d9400003 	ldbu	r5,0(sp)
    9358:	a0001c26 	beq	r20,zero,93cc <__fputwc+0xd0>
    935c:	0023883a 	mov	r17,zero
    9360:	05400284 	movi	r21,10
    9364:	00000906 	br	938c <__fputwc+0x90>
    9368:	80800017 	ldw	r2,0(r16)
    936c:	11400005 	stb	r5,0(r2)
    9370:	80c00017 	ldw	r3,0(r16)
    9374:	18c00044 	addi	r3,r3,1
    9378:	80c00015 	stw	r3,0(r16)
    937c:	8c400044 	addi	r17,r17,1
    9380:	dc45883a 	add	r2,sp,r17
    9384:	8d00112e 	bgeu	r17,r20,93cc <__fputwc+0xd0>
    9388:	11400003 	ldbu	r5,0(r2)
    938c:	80c00217 	ldw	r3,8(r16)
    9390:	18ffffc4 	addi	r3,r3,-1
    9394:	80c00215 	stw	r3,8(r16)
    9398:	183ff30e 	bge	r3,zero,9368 <__fputwc+0x6c>
    939c:	80800617 	ldw	r2,24(r16)
    93a0:	18801916 	blt	r3,r2,9408 <__fputwc+0x10c>
    93a4:	80800017 	ldw	r2,0(r16)
    93a8:	11400005 	stb	r5,0(r2)
    93ac:	80800017 	ldw	r2,0(r16)
    93b0:	10c00003 	ldbu	r3,0(r2)
    93b4:	10800044 	addi	r2,r2,1
    93b8:	1d402326 	beq	r3,r21,9448 <__fputwc+0x14c>
    93bc:	80800015 	stw	r2,0(r16)
    93c0:	8c400044 	addi	r17,r17,1
    93c4:	dc45883a 	add	r2,sp,r17
    93c8:	8d3fef36 	bltu	r17,r20,9388 <__fputwc+0x8c>
    93cc:	9005883a 	mov	r2,r18
    93d0:	00000406 	br	93e4 <__fputwc+0xe8>
    93d4:	80c0030b 	ldhu	r3,12(r16)
    93d8:	a005883a 	mov	r2,r20
    93dc:	18c01014 	ori	r3,r3,64
    93e0:	80c0030d 	sth	r3,12(r16)
    93e4:	dfc00717 	ldw	ra,28(sp)
    93e8:	dd400617 	ldw	r21,24(sp)
    93ec:	dd000517 	ldw	r20,20(sp)
    93f0:	dcc00417 	ldw	r19,16(sp)
    93f4:	dc800317 	ldw	r18,12(sp)
    93f8:	dc400217 	ldw	r17,8(sp)
    93fc:	dc000117 	ldw	r16,4(sp)
    9400:	dec00804 	addi	sp,sp,32
    9404:	f800283a 	ret
    9408:	800d883a 	mov	r6,r16
    940c:	29403fcc 	andi	r5,r5,255
    9410:	9809883a 	mov	r4,r19
    9414:	00096740 	call	9674 <__swbuf_r>
    9418:	10bfffe0 	cmpeqi	r2,r2,-1
    941c:	10803fcc 	andi	r2,r2,255
    9420:	103fd626 	beq	r2,zero,937c <__fputwc+0x80>
    9424:	00bfffc4 	movi	r2,-1
    9428:	003fee06 	br	93e4 <__fputwc+0xe8>
    942c:	90ffffc4 	addi	r3,r18,-1
    9430:	01003f84 	movi	r4,254
    9434:	20ffbf36 	bltu	r4,r3,9334 <__fputwc+0x38>
    9438:	900b883a 	mov	r5,r18
    943c:	dc800005 	stb	r18,0(sp)
    9440:	1029883a 	mov	r20,r2
    9444:	003fc506 	br	935c <__fputwc+0x60>
    9448:	800d883a 	mov	r6,r16
    944c:	a80b883a 	mov	r5,r21
    9450:	9809883a 	mov	r4,r19
    9454:	00096740 	call	9674 <__swbuf_r>
    9458:	10bfffe0 	cmpeqi	r2,r2,-1
    945c:	003fef06 	br	941c <__fputwc+0x120>

00009460 <_fputwc_r>:
    9460:	3080030b 	ldhu	r2,12(r6)
    9464:	10c8000c 	andi	r3,r2,8192
    9468:	1800051e 	bne	r3,zero,9480 <_fputwc_r+0x20>
    946c:	30c01917 	ldw	r3,100(r6)
    9470:	10880014 	ori	r2,r2,8192
    9474:	3080030d 	sth	r2,12(r6)
    9478:	18880014 	ori	r2,r3,8192
    947c:	30801915 	stw	r2,100(r6)
    9480:	00092fc1 	jmpi	92fc <__fputwc>

00009484 <fputwc>:
    9484:	00800074 	movhi	r2,1
    9488:	defffc04 	addi	sp,sp,-16
    948c:	1084cf04 	addi	r2,r2,4924
    9490:	dc000115 	stw	r16,4(sp)
    9494:	14000017 	ldw	r16,0(r2)
    9498:	dc400215 	stw	r17,8(sp)
    949c:	dfc00315 	stw	ra,12(sp)
    94a0:	2023883a 	mov	r17,r4
    94a4:	80000226 	beq	r16,zero,94b0 <fputwc+0x2c>
    94a8:	80800e17 	ldw	r2,56(r16)
    94ac:	10001026 	beq	r2,zero,94f0 <fputwc+0x6c>
    94b0:	2880030b 	ldhu	r2,12(r5)
    94b4:	10c8000c 	andi	r3,r2,8192
    94b8:	1800051e 	bne	r3,zero,94d0 <fputwc+0x4c>
    94bc:	28c01917 	ldw	r3,100(r5)
    94c0:	10880014 	ori	r2,r2,8192
    94c4:	2880030d 	sth	r2,12(r5)
    94c8:	18880014 	ori	r2,r3,8192
    94cc:	28801915 	stw	r2,100(r5)
    94d0:	280d883a 	mov	r6,r5
    94d4:	8009883a 	mov	r4,r16
    94d8:	880b883a 	mov	r5,r17
    94dc:	dfc00317 	ldw	ra,12(sp)
    94e0:	dc400217 	ldw	r17,8(sp)
    94e4:	dc000117 	ldw	r16,4(sp)
    94e8:	dec00404 	addi	sp,sp,16
    94ec:	00092fc1 	jmpi	92fc <__fputwc>
    94f0:	8009883a 	mov	r4,r16
    94f4:	d9400015 	stw	r5,0(sp)
    94f8:	00047dc0 	call	47dc <__sinit>
    94fc:	d9400017 	ldw	r5,0(sp)
    9500:	003feb06 	br	94b0 <fputwc+0x2c>

00009504 <_fstat_r>:
    9504:	defffd04 	addi	sp,sp,-12
    9508:	2805883a 	mov	r2,r5
    950c:	dc000015 	stw	r16,0(sp)
    9510:	04000074 	movhi	r16,1
    9514:	dc400115 	stw	r17,4(sp)
    9518:	840b9f04 	addi	r16,r16,11900
    951c:	2023883a 	mov	r17,r4
    9520:	300b883a 	mov	r5,r6
    9524:	1009883a 	mov	r4,r2
    9528:	dfc00215 	stw	ra,8(sp)
    952c:	80000015 	stw	zero,0(r16)
    9530:	000ce1c0 	call	ce1c <fstat>
    9534:	00ffffc4 	movi	r3,-1
    9538:	10c00526 	beq	r2,r3,9550 <_fstat_r+0x4c>
    953c:	dfc00217 	ldw	ra,8(sp)
    9540:	dc400117 	ldw	r17,4(sp)
    9544:	dc000017 	ldw	r16,0(sp)
    9548:	dec00304 	addi	sp,sp,12
    954c:	f800283a 	ret
    9550:	80c00017 	ldw	r3,0(r16)
    9554:	183ff926 	beq	r3,zero,953c <_fstat_r+0x38>
    9558:	88c00015 	stw	r3,0(r17)
    955c:	003ff706 	br	953c <_fstat_r+0x38>

00009560 <_isatty_r>:
    9560:	defffd04 	addi	sp,sp,-12
    9564:	dc000015 	stw	r16,0(sp)
    9568:	04000074 	movhi	r16,1
    956c:	dc400115 	stw	r17,4(sp)
    9570:	840b9f04 	addi	r16,r16,11900
    9574:	2023883a 	mov	r17,r4
    9578:	2809883a 	mov	r4,r5
    957c:	dfc00215 	stw	ra,8(sp)
    9580:	80000015 	stw	zero,0(r16)
    9584:	000cf1c0 	call	cf1c <isatty>
    9588:	00ffffc4 	movi	r3,-1
    958c:	10c00526 	beq	r2,r3,95a4 <_isatty_r+0x44>
    9590:	dfc00217 	ldw	ra,8(sp)
    9594:	dc400117 	ldw	r17,4(sp)
    9598:	dc000017 	ldw	r16,0(sp)
    959c:	dec00304 	addi	sp,sp,12
    95a0:	f800283a 	ret
    95a4:	80c00017 	ldw	r3,0(r16)
    95a8:	183ff926 	beq	r3,zero,9590 <_isatty_r+0x30>
    95ac:	88c00015 	stw	r3,0(r17)
    95b0:	003ff706 	br	9590 <_isatty_r+0x30>

000095b4 <_lseek_r>:
    95b4:	defffd04 	addi	sp,sp,-12
    95b8:	2805883a 	mov	r2,r5
    95bc:	dc000015 	stw	r16,0(sp)
    95c0:	04000074 	movhi	r16,1
    95c4:	dc400115 	stw	r17,4(sp)
    95c8:	300b883a 	mov	r5,r6
    95cc:	840b9f04 	addi	r16,r16,11900
    95d0:	2023883a 	mov	r17,r4
    95d4:	380d883a 	mov	r6,r7
    95d8:	1009883a 	mov	r4,r2
    95dc:	dfc00215 	stw	ra,8(sp)
    95e0:	80000015 	stw	zero,0(r16)
    95e4:	000d0fc0 	call	d0fc <lseek>
    95e8:	00ffffc4 	movi	r3,-1
    95ec:	10c00526 	beq	r2,r3,9604 <_lseek_r+0x50>
    95f0:	dfc00217 	ldw	ra,8(sp)
    95f4:	dc400117 	ldw	r17,4(sp)
    95f8:	dc000017 	ldw	r16,0(sp)
    95fc:	dec00304 	addi	sp,sp,12
    9600:	f800283a 	ret
    9604:	80c00017 	ldw	r3,0(r16)
    9608:	183ff926 	beq	r3,zero,95f0 <_lseek_r+0x3c>
    960c:	88c00015 	stw	r3,0(r17)
    9610:	003ff706 	br	95f0 <_lseek_r+0x3c>

00009614 <_read_r>:
    9614:	defffd04 	addi	sp,sp,-12
    9618:	2805883a 	mov	r2,r5
    961c:	dc000015 	stw	r16,0(sp)
    9620:	04000074 	movhi	r16,1
    9624:	dc400115 	stw	r17,4(sp)
    9628:	300b883a 	mov	r5,r6
    962c:	840b9f04 	addi	r16,r16,11900
    9630:	2023883a 	mov	r17,r4
    9634:	380d883a 	mov	r6,r7
    9638:	1009883a 	mov	r4,r2
    963c:	dfc00215 	stw	ra,8(sp)
    9640:	80000015 	stw	zero,0(r16)
    9644:	000d2e40 	call	d2e4 <read>
    9648:	00ffffc4 	movi	r3,-1
    964c:	10c00526 	beq	r2,r3,9664 <_read_r+0x50>
    9650:	dfc00217 	ldw	ra,8(sp)
    9654:	dc400117 	ldw	r17,4(sp)
    9658:	dc000017 	ldw	r16,0(sp)
    965c:	dec00304 	addi	sp,sp,12
    9660:	f800283a 	ret
    9664:	80c00017 	ldw	r3,0(r16)
    9668:	183ff926 	beq	r3,zero,9650 <_read_r+0x3c>
    966c:	88c00015 	stw	r3,0(r17)
    9670:	003ff706 	br	9650 <_read_r+0x3c>

00009674 <__swbuf_r>:
    9674:	defffb04 	addi	sp,sp,-20
    9678:	dcc00315 	stw	r19,12(sp)
    967c:	dc800215 	stw	r18,8(sp)
    9680:	dc000015 	stw	r16,0(sp)
    9684:	dfc00415 	stw	ra,16(sp)
    9688:	dc400115 	stw	r17,4(sp)
    968c:	2025883a 	mov	r18,r4
    9690:	2827883a 	mov	r19,r5
    9694:	3021883a 	mov	r16,r6
    9698:	20000226 	beq	r4,zero,96a4 <__swbuf_r+0x30>
    969c:	20800e17 	ldw	r2,56(r4)
    96a0:	10004226 	beq	r2,zero,97ac <__swbuf_r+0x138>
    96a4:	80800617 	ldw	r2,24(r16)
    96a8:	8100030b 	ldhu	r4,12(r16)
    96ac:	80800215 	stw	r2,8(r16)
    96b0:	2080020c 	andi	r2,r4,8
    96b4:	10003626 	beq	r2,zero,9790 <__swbuf_r+0x11c>
    96b8:	80c00417 	ldw	r3,16(r16)
    96bc:	18003426 	beq	r3,zero,9790 <__swbuf_r+0x11c>
    96c0:	2088000c 	andi	r2,r4,8192
    96c4:	9c403fcc 	andi	r17,r19,255
    96c8:	10001a26 	beq	r2,zero,9734 <__swbuf_r+0xc0>
    96cc:	80800017 	ldw	r2,0(r16)
    96d0:	81000517 	ldw	r4,20(r16)
    96d4:	10c7c83a 	sub	r3,r2,r3
    96d8:	1900200e 	bge	r3,r4,975c <__swbuf_r+0xe8>
    96dc:	18c00044 	addi	r3,r3,1
    96e0:	81000217 	ldw	r4,8(r16)
    96e4:	11400044 	addi	r5,r2,1
    96e8:	81400015 	stw	r5,0(r16)
    96ec:	213fffc4 	addi	r4,r4,-1
    96f0:	81000215 	stw	r4,8(r16)
    96f4:	14c00005 	stb	r19,0(r2)
    96f8:	80800517 	ldw	r2,20(r16)
    96fc:	10c01e26 	beq	r2,r3,9778 <__swbuf_r+0x104>
    9700:	8080030b 	ldhu	r2,12(r16)
    9704:	1080004c 	andi	r2,r2,1
    9708:	10000226 	beq	r2,zero,9714 <__swbuf_r+0xa0>
    970c:	00800284 	movi	r2,10
    9710:	88801926 	beq	r17,r2,9778 <__swbuf_r+0x104>
    9714:	8805883a 	mov	r2,r17
    9718:	dfc00417 	ldw	ra,16(sp)
    971c:	dcc00317 	ldw	r19,12(sp)
    9720:	dc800217 	ldw	r18,8(sp)
    9724:	dc400117 	ldw	r17,4(sp)
    9728:	dc000017 	ldw	r16,0(sp)
    972c:	dec00504 	addi	sp,sp,20
    9730:	f800283a 	ret
    9734:	81401917 	ldw	r5,100(r16)
    9738:	00b7ffc4 	movi	r2,-8193
    973c:	21080014 	ori	r4,r4,8192
    9740:	2884703a 	and	r2,r5,r2
    9744:	80801915 	stw	r2,100(r16)
    9748:	80800017 	ldw	r2,0(r16)
    974c:	8100030d 	sth	r4,12(r16)
    9750:	81000517 	ldw	r4,20(r16)
    9754:	10c7c83a 	sub	r3,r2,r3
    9758:	193fe016 	blt	r3,r4,96dc <__swbuf_r+0x68>
    975c:	800b883a 	mov	r5,r16
    9760:	9009883a 	mov	r4,r18
    9764:	00044000 	call	4400 <_fflush_r>
    9768:	1000071e 	bne	r2,zero,9788 <__swbuf_r+0x114>
    976c:	80800017 	ldw	r2,0(r16)
    9770:	00c00044 	movi	r3,1
    9774:	003fda06 	br	96e0 <__swbuf_r+0x6c>
    9778:	800b883a 	mov	r5,r16
    977c:	9009883a 	mov	r4,r18
    9780:	00044000 	call	4400 <_fflush_r>
    9784:	103fe326 	beq	r2,zero,9714 <__swbuf_r+0xa0>
    9788:	00bfffc4 	movi	r2,-1
    978c:	003fe206 	br	9718 <__swbuf_r+0xa4>
    9790:	800b883a 	mov	r5,r16
    9794:	9009883a 	mov	r4,r18
    9798:	00028080 	call	2808 <__swsetup_r>
    979c:	103ffa1e 	bne	r2,zero,9788 <__swbuf_r+0x114>
    97a0:	8100030b 	ldhu	r4,12(r16)
    97a4:	80c00417 	ldw	r3,16(r16)
    97a8:	003fc506 	br	96c0 <__swbuf_r+0x4c>
    97ac:	00047dc0 	call	47dc <__sinit>
    97b0:	003fbc06 	br	96a4 <__swbuf_r+0x30>

000097b4 <__swbuf>:
    97b4:	00800074 	movhi	r2,1
    97b8:	1084cf04 	addi	r2,r2,4924
    97bc:	280d883a 	mov	r6,r5
    97c0:	200b883a 	mov	r5,r4
    97c4:	11000017 	ldw	r4,0(r2)
    97c8:	00096741 	jmpi	9674 <__swbuf_r>

000097cc <_wcrtomb_r>:
    97cc:	defff604 	addi	sp,sp,-40
    97d0:	00800074 	movhi	r2,1
    97d4:	dc800815 	stw	r18,32(sp)
    97d8:	dc400715 	stw	r17,28(sp)
    97dc:	dc000615 	stw	r16,24(sp)
    97e0:	1084d304 	addi	r2,r2,4940
    97e4:	dfc00915 	stw	ra,36(sp)
    97e8:	2021883a 	mov	r16,r4
    97ec:	3823883a 	mov	r17,r7
    97f0:	14800017 	ldw	r18,0(r2)
    97f4:	28001426 	beq	r5,zero,9848 <_wcrtomb_r+0x7c>
    97f8:	d9400415 	stw	r5,16(sp)
    97fc:	d9800515 	stw	r6,20(sp)
    9800:	00053200 	call	5320 <__locale_charset>
    9804:	d9800517 	ldw	r6,20(sp)
    9808:	d9400417 	ldw	r5,16(sp)
    980c:	100f883a 	mov	r7,r2
    9810:	dc400015 	stw	r17,0(sp)
    9814:	8009883a 	mov	r4,r16
    9818:	903ee83a 	callr	r18
    981c:	00ffffc4 	movi	r3,-1
    9820:	10c0031e 	bne	r2,r3,9830 <_wcrtomb_r+0x64>
    9824:	88000015 	stw	zero,0(r17)
    9828:	00c02284 	movi	r3,138
    982c:	80c00015 	stw	r3,0(r16)
    9830:	dfc00917 	ldw	ra,36(sp)
    9834:	dc800817 	ldw	r18,32(sp)
    9838:	dc400717 	ldw	r17,28(sp)
    983c:	dc000617 	ldw	r16,24(sp)
    9840:	dec00a04 	addi	sp,sp,40
    9844:	f800283a 	ret
    9848:	00053200 	call	5320 <__locale_charset>
    984c:	100f883a 	mov	r7,r2
    9850:	dc400015 	stw	r17,0(sp)
    9854:	000d883a 	mov	r6,zero
    9858:	d9400104 	addi	r5,sp,4
    985c:	8009883a 	mov	r4,r16
    9860:	903ee83a 	callr	r18
    9864:	003fed06 	br	981c <_wcrtomb_r+0x50>

00009868 <wcrtomb>:
    9868:	defff604 	addi	sp,sp,-40
    986c:	00800074 	movhi	r2,1
    9870:	dc800615 	stw	r18,24(sp)
    9874:	dc400515 	stw	r17,20(sp)
    9878:	1084cf04 	addi	r2,r2,4924
    987c:	dfc00915 	stw	ra,36(sp)
    9880:	dd000815 	stw	r20,32(sp)
    9884:	dcc00715 	stw	r19,28(sp)
    9888:	dc000415 	stw	r16,16(sp)
    988c:	3025883a 	mov	r18,r6
    9890:	14400017 	ldw	r17,0(r2)
    9894:	20001926 	beq	r4,zero,98fc <wcrtomb+0x94>
    9898:	00800074 	movhi	r2,1
    989c:	1084d304 	addi	r2,r2,4940
    98a0:	15000017 	ldw	r20,0(r2)
    98a4:	2021883a 	mov	r16,r4
    98a8:	2827883a 	mov	r19,r5
    98ac:	00053200 	call	5320 <__locale_charset>
    98b0:	100f883a 	mov	r7,r2
    98b4:	dc800015 	stw	r18,0(sp)
    98b8:	980d883a 	mov	r6,r19
    98bc:	800b883a 	mov	r5,r16
    98c0:	8809883a 	mov	r4,r17
    98c4:	a03ee83a 	callr	r20
    98c8:	00ffffc4 	movi	r3,-1
    98cc:	10c0031e 	bne	r2,r3,98dc <wcrtomb+0x74>
    98d0:	90000015 	stw	zero,0(r18)
    98d4:	00c02284 	movi	r3,138
    98d8:	88c00015 	stw	r3,0(r17)
    98dc:	dfc00917 	ldw	ra,36(sp)
    98e0:	dd000817 	ldw	r20,32(sp)
    98e4:	dcc00717 	ldw	r19,28(sp)
    98e8:	dc800617 	ldw	r18,24(sp)
    98ec:	dc400517 	ldw	r17,20(sp)
    98f0:	dc000417 	ldw	r16,16(sp)
    98f4:	dec00a04 	addi	sp,sp,40
    98f8:	f800283a 	ret
    98fc:	00800074 	movhi	r2,1
    9900:	1084d304 	addi	r2,r2,4940
    9904:	14000017 	ldw	r16,0(r2)
    9908:	00053200 	call	5320 <__locale_charset>
    990c:	100f883a 	mov	r7,r2
    9910:	dc800015 	stw	r18,0(sp)
    9914:	000d883a 	mov	r6,zero
    9918:	d9400104 	addi	r5,sp,4
    991c:	8809883a 	mov	r4,r17
    9920:	803ee83a 	callr	r16
    9924:	003fe806 	br	98c8 <wcrtomb+0x60>

00009928 <__ascii_wctomb>:
    9928:	28000526 	beq	r5,zero,9940 <__ascii_wctomb+0x18>
    992c:	00803fc4 	movi	r2,255
    9930:	11800536 	bltu	r2,r6,9948 <__ascii_wctomb+0x20>
    9934:	29800005 	stb	r6,0(r5)
    9938:	00800044 	movi	r2,1
    993c:	f800283a 	ret
    9940:	0005883a 	mov	r2,zero
    9944:	f800283a 	ret
    9948:	00802284 	movi	r2,138
    994c:	20800015 	stw	r2,0(r4)
    9950:	00bfffc4 	movi	r2,-1
    9954:	f800283a 	ret

00009958 <_wctomb_r>:
    9958:	00800074 	movhi	r2,1
    995c:	defff904 	addi	sp,sp,-28
    9960:	1084d304 	addi	r2,r2,4940
    9964:	dfc00615 	stw	ra,24(sp)
    9968:	dc400515 	stw	r17,20(sp)
    996c:	dc000415 	stw	r16,16(sp)
    9970:	3823883a 	mov	r17,r7
    9974:	14000017 	ldw	r16,0(r2)
    9978:	d9000115 	stw	r4,4(sp)
    997c:	d9400215 	stw	r5,8(sp)
    9980:	d9800315 	stw	r6,12(sp)
    9984:	00053200 	call	5320 <__locale_charset>
    9988:	d9800317 	ldw	r6,12(sp)
    998c:	d9400217 	ldw	r5,8(sp)
    9990:	d9000117 	ldw	r4,4(sp)
    9994:	100f883a 	mov	r7,r2
    9998:	dc400015 	stw	r17,0(sp)
    999c:	803ee83a 	callr	r16
    99a0:	dfc00617 	ldw	ra,24(sp)
    99a4:	dc400517 	ldw	r17,20(sp)
    99a8:	dc000417 	ldw	r16,16(sp)
    99ac:	dec00704 	addi	sp,sp,28
    99b0:	f800283a 	ret

000099b4 <__udivdi3>:
    99b4:	defff504 	addi	sp,sp,-44
    99b8:	dcc00415 	stw	r19,16(sp)
    99bc:	dc000115 	stw	r16,4(sp)
    99c0:	dfc00a15 	stw	ra,40(sp)
    99c4:	df000915 	stw	fp,36(sp)
    99c8:	ddc00815 	stw	r23,32(sp)
    99cc:	dd800715 	stw	r22,28(sp)
    99d0:	dd400615 	stw	r21,24(sp)
    99d4:	dd000515 	stw	r20,20(sp)
    99d8:	dc800315 	stw	r18,12(sp)
    99dc:	dc400215 	stw	r17,8(sp)
    99e0:	2027883a 	mov	r19,r4
    99e4:	2821883a 	mov	r16,r5
    99e8:	3800411e 	bne	r7,zero,9af0 <__udivdi3+0x13c>
    99ec:	3023883a 	mov	r17,r6
    99f0:	2025883a 	mov	r18,r4
    99f4:	2980522e 	bgeu	r5,r6,9b40 <__udivdi3+0x18c>
    99f8:	00bfffd4 	movui	r2,65535
    99fc:	282d883a 	mov	r22,r5
    9a00:	1180a836 	bltu	r2,r6,9ca4 <__udivdi3+0x2f0>
    9a04:	00803fc4 	movi	r2,255
    9a08:	1185803a 	cmpltu	r2,r2,r6
    9a0c:	100490fa 	slli	r2,r2,3
    9a10:	3086d83a 	srl	r3,r6,r2
    9a14:	01000074 	movhi	r4,1
    9a18:	213dda04 	addi	r4,r4,-2200
    9a1c:	20c7883a 	add	r3,r4,r3
    9a20:	18c00003 	ldbu	r3,0(r3)
    9a24:	1885883a 	add	r2,r3,r2
    9a28:	00c00804 	movi	r3,32
    9a2c:	1887c83a 	sub	r3,r3,r2
    9a30:	18000526 	beq	r3,zero,9a48 <__udivdi3+0x94>
    9a34:	80e0983a 	sll	r16,r16,r3
    9a38:	9884d83a 	srl	r2,r19,r2
    9a3c:	30e2983a 	sll	r17,r6,r3
    9a40:	98e4983a 	sll	r18,r19,r3
    9a44:	142cb03a 	or	r22,r2,r16
    9a48:	882ad43a 	srli	r21,r17,16
    9a4c:	b009883a 	mov	r4,r22
    9a50:	8d3fffcc 	andi	r20,r17,65535
    9a54:	a80b883a 	mov	r5,r21
    9a58:	000a5c00 	call	a5c0 <__umodsi3>
    9a5c:	b009883a 	mov	r4,r22
    9a60:	a80b883a 	mov	r5,r21
    9a64:	1027883a 	mov	r19,r2
    9a68:	000a55c0 	call	a55c <__udivsi3>
    9a6c:	102d883a 	mov	r22,r2
    9a70:	9826943a 	slli	r19,r19,16
    9a74:	9004d43a 	srli	r2,r18,16
    9a78:	a5a1383a 	mul	r16,r20,r22
    9a7c:	14c4b03a 	or	r2,r2,r19
    9a80:	1400052e 	bgeu	r2,r16,9a98 <__udivdi3+0xe4>
    9a84:	1445883a 	add	r2,r2,r17
    9a88:	b0ffffc4 	addi	r3,r22,-1
    9a8c:	14400136 	bltu	r2,r17,9a94 <__udivdi3+0xe0>
    9a90:	14012336 	bltu	r2,r16,9f20 <__udivdi3+0x56c>
    9a94:	182d883a 	mov	r22,r3
    9a98:	1421c83a 	sub	r16,r2,r16
    9a9c:	a80b883a 	mov	r5,r21
    9aa0:	8009883a 	mov	r4,r16
    9aa4:	000a5c00 	call	a5c0 <__umodsi3>
    9aa8:	1027883a 	mov	r19,r2
    9aac:	a80b883a 	mov	r5,r21
    9ab0:	8009883a 	mov	r4,r16
    9ab4:	000a55c0 	call	a55c <__udivsi3>
    9ab8:	9826943a 	slli	r19,r19,16
    9abc:	a0a9383a 	mul	r20,r20,r2
    9ac0:	94bfffcc 	andi	r18,r18,65535
    9ac4:	94e4b03a 	or	r18,r18,r19
    9ac8:	9500052e 	bgeu	r18,r20,9ae0 <__udivdi3+0x12c>
    9acc:	8ca5883a 	add	r18,r17,r18
    9ad0:	10ffffc4 	addi	r3,r2,-1
    9ad4:	9440f136 	bltu	r18,r17,9e9c <__udivdi3+0x4e8>
    9ad8:	9500f02e 	bgeu	r18,r20,9e9c <__udivdi3+0x4e8>
    9adc:	10bfff84 	addi	r2,r2,-2
    9ae0:	b00c943a 	slli	r6,r22,16
    9ae4:	0007883a 	mov	r3,zero
    9ae8:	3084b03a 	or	r2,r6,r2
    9aec:	00005906 	br	9c54 <__udivdi3+0x2a0>
    9af0:	29c05636 	bltu	r5,r7,9c4c <__udivdi3+0x298>
    9af4:	00bfffd4 	movui	r2,65535
    9af8:	11c0622e 	bgeu	r2,r7,9c84 <__udivdi3+0x2d0>
    9afc:	00804034 	movhi	r2,256
    9b00:	10bfffc4 	addi	r2,r2,-1
    9b04:	11c0ee36 	bltu	r2,r7,9ec0 <__udivdi3+0x50c>
    9b08:	00800404 	movi	r2,16
    9b0c:	3886d83a 	srl	r3,r7,r2
    9b10:	01000074 	movhi	r4,1
    9b14:	213dda04 	addi	r4,r4,-2200
    9b18:	20c7883a 	add	r3,r4,r3
    9b1c:	18c00003 	ldbu	r3,0(r3)
    9b20:	05400804 	movi	r21,32
    9b24:	1885883a 	add	r2,r3,r2
    9b28:	a8abc83a 	sub	r21,r21,r2
    9b2c:	a800621e 	bne	r21,zero,9cb8 <__udivdi3+0x304>
    9b30:	3c00e936 	bltu	r7,r16,9ed8 <__udivdi3+0x524>
    9b34:	9985403a 	cmpgeu	r2,r19,r6
    9b38:	0007883a 	mov	r3,zero
    9b3c:	00004506 	br	9c54 <__udivdi3+0x2a0>
    9b40:	3000041e 	bne	r6,zero,9b54 <__udivdi3+0x1a0>
    9b44:	000b883a 	mov	r5,zero
    9b48:	01000044 	movi	r4,1
    9b4c:	000a55c0 	call	a55c <__udivsi3>
    9b50:	1023883a 	mov	r17,r2
    9b54:	00bfffd4 	movui	r2,65535
    9b58:	14404e2e 	bgeu	r2,r17,9c94 <__udivdi3+0x2e0>
    9b5c:	00804034 	movhi	r2,256
    9b60:	10bfffc4 	addi	r2,r2,-1
    9b64:	1440d836 	bltu	r2,r17,9ec8 <__udivdi3+0x514>
    9b68:	00800404 	movi	r2,16
    9b6c:	8886d83a 	srl	r3,r17,r2
    9b70:	01000074 	movhi	r4,1
    9b74:	213dda04 	addi	r4,r4,-2200
    9b78:	20c7883a 	add	r3,r4,r3
    9b7c:	18c00003 	ldbu	r3,0(r3)
    9b80:	1885883a 	add	r2,r3,r2
    9b84:	00c00804 	movi	r3,32
    9b88:	1887c83a 	sub	r3,r3,r2
    9b8c:	18008f1e 	bne	r3,zero,9dcc <__udivdi3+0x418>
    9b90:	882ad43a 	srli	r21,r17,16
    9b94:	8461c83a 	sub	r16,r16,r17
    9b98:	8d3fffcc 	andi	r20,r17,65535
    9b9c:	00c00044 	movi	r3,1
    9ba0:	8009883a 	mov	r4,r16
    9ba4:	a80b883a 	mov	r5,r21
    9ba8:	d8c00015 	stw	r3,0(sp)
    9bac:	000a5c00 	call	a5c0 <__umodsi3>
    9bb0:	8009883a 	mov	r4,r16
    9bb4:	a80b883a 	mov	r5,r21
    9bb8:	1027883a 	mov	r19,r2
    9bbc:	000a55c0 	call	a55c <__udivsi3>
    9bc0:	9826943a 	slli	r19,r19,16
    9bc4:	9008d43a 	srli	r4,r18,16
    9bc8:	1521383a 	mul	r16,r2,r20
    9bcc:	102d883a 	mov	r22,r2
    9bd0:	24c8b03a 	or	r4,r4,r19
    9bd4:	d8c00017 	ldw	r3,0(sp)
    9bd8:	2400052e 	bgeu	r4,r16,9bf0 <__udivdi3+0x23c>
    9bdc:	2449883a 	add	r4,r4,r17
    9be0:	b0bfffc4 	addi	r2,r22,-1
    9be4:	24400136 	bltu	r4,r17,9bec <__udivdi3+0x238>
    9be8:	2400ca36 	bltu	r4,r16,9f14 <__udivdi3+0x560>
    9bec:	102d883a 	mov	r22,r2
    9bf0:	2421c83a 	sub	r16,r4,r16
    9bf4:	a80b883a 	mov	r5,r21
    9bf8:	8009883a 	mov	r4,r16
    9bfc:	d8c00015 	stw	r3,0(sp)
    9c00:	000a5c00 	call	a5c0 <__umodsi3>
    9c04:	1027883a 	mov	r19,r2
    9c08:	a80b883a 	mov	r5,r21
    9c0c:	8009883a 	mov	r4,r16
    9c10:	000a55c0 	call	a55c <__udivsi3>
    9c14:	9826943a 	slli	r19,r19,16
    9c18:	1529383a 	mul	r20,r2,r20
    9c1c:	94bfffcc 	andi	r18,r18,65535
    9c20:	94e4b03a 	or	r18,r18,r19
    9c24:	d8c00017 	ldw	r3,0(sp)
    9c28:	9500052e 	bgeu	r18,r20,9c40 <__udivdi3+0x28c>
    9c2c:	8ca5883a 	add	r18,r17,r18
    9c30:	113fffc4 	addi	r4,r2,-1
    9c34:	94409736 	bltu	r18,r17,9e94 <__udivdi3+0x4e0>
    9c38:	9500962e 	bgeu	r18,r20,9e94 <__udivdi3+0x4e0>
    9c3c:	10bfff84 	addi	r2,r2,-2
    9c40:	b00c943a 	slli	r6,r22,16
    9c44:	3084b03a 	or	r2,r6,r2
    9c48:	00000206 	br	9c54 <__udivdi3+0x2a0>
    9c4c:	0007883a 	mov	r3,zero
    9c50:	0005883a 	mov	r2,zero
    9c54:	dfc00a17 	ldw	ra,40(sp)
    9c58:	df000917 	ldw	fp,36(sp)
    9c5c:	ddc00817 	ldw	r23,32(sp)
    9c60:	dd800717 	ldw	r22,28(sp)
    9c64:	dd400617 	ldw	r21,24(sp)
    9c68:	dd000517 	ldw	r20,20(sp)
    9c6c:	dcc00417 	ldw	r19,16(sp)
    9c70:	dc800317 	ldw	r18,12(sp)
    9c74:	dc400217 	ldw	r17,8(sp)
    9c78:	dc000117 	ldw	r16,4(sp)
    9c7c:	dec00b04 	addi	sp,sp,44
    9c80:	f800283a 	ret
    9c84:	00803fc4 	movi	r2,255
    9c88:	11c5803a 	cmpltu	r2,r2,r7
    9c8c:	100490fa 	slli	r2,r2,3
    9c90:	003f9e06 	br	9b0c <__udivdi3+0x158>
    9c94:	00803fc4 	movi	r2,255
    9c98:	1445803a 	cmpltu	r2,r2,r17
    9c9c:	100490fa 	slli	r2,r2,3
    9ca0:	003fb206 	br	9b6c <__udivdi3+0x1b8>
    9ca4:	00804034 	movhi	r2,256
    9ca8:	10bfffc4 	addi	r2,r2,-1
    9cac:	11808836 	bltu	r2,r6,9ed0 <__udivdi3+0x51c>
    9cb0:	00800404 	movi	r2,16
    9cb4:	003f5606 	br	9a10 <__udivdi3+0x5c>
    9cb8:	30aed83a 	srl	r23,r6,r2
    9cbc:	3d4e983a 	sll	r7,r7,r21
    9cc0:	80acd83a 	srl	r22,r16,r2
    9cc4:	9884d83a 	srl	r2,r19,r2
    9cc8:	3deeb03a 	or	r23,r7,r23
    9ccc:	b824d43a 	srli	r18,r23,16
    9cd0:	8560983a 	sll	r16,r16,r21
    9cd4:	b009883a 	mov	r4,r22
    9cd8:	900b883a 	mov	r5,r18
    9cdc:	3568983a 	sll	r20,r6,r21
    9ce0:	1420b03a 	or	r16,r2,r16
    9ce4:	000a5c00 	call	a5c0 <__umodsi3>
    9ce8:	b009883a 	mov	r4,r22
    9cec:	900b883a 	mov	r5,r18
    9cf0:	1023883a 	mov	r17,r2
    9cf4:	000a55c0 	call	a55c <__udivsi3>
    9cf8:	8808943a 	slli	r4,r17,16
    9cfc:	bf3fffcc 	andi	fp,r23,65535
    9d00:	8006d43a 	srli	r3,r16,16
    9d04:	e0a3383a 	mul	r17,fp,r2
    9d08:	100d883a 	mov	r6,r2
    9d0c:	1906b03a 	or	r3,r3,r4
    9d10:	1c40042e 	bgeu	r3,r17,9d24 <__udivdi3+0x370>
    9d14:	1dc7883a 	add	r3,r3,r23
    9d18:	10bfffc4 	addi	r2,r2,-1
    9d1c:	1dc0752e 	bgeu	r3,r23,9ef4 <__udivdi3+0x540>
    9d20:	100d883a 	mov	r6,r2
    9d24:	1c63c83a 	sub	r17,r3,r17
    9d28:	900b883a 	mov	r5,r18
    9d2c:	8809883a 	mov	r4,r17
    9d30:	d9800015 	stw	r6,0(sp)
    9d34:	000a5c00 	call	a5c0 <__umodsi3>
    9d38:	102d883a 	mov	r22,r2
    9d3c:	8809883a 	mov	r4,r17
    9d40:	900b883a 	mov	r5,r18
    9d44:	000a55c0 	call	a55c <__udivsi3>
    9d48:	b02c943a 	slli	r22,r22,16
    9d4c:	e089383a 	mul	r4,fp,r2
    9d50:	843fffcc 	andi	r16,r16,65535
    9d54:	85a0b03a 	or	r16,r16,r22
    9d58:	d9800017 	ldw	r6,0(sp)
    9d5c:	8100042e 	bgeu	r16,r4,9d70 <__udivdi3+0x3bc>
    9d60:	85e1883a 	add	r16,r16,r23
    9d64:	10ffffc4 	addi	r3,r2,-1
    9d68:	85c05e2e 	bgeu	r16,r23,9ee4 <__udivdi3+0x530>
    9d6c:	1805883a 	mov	r2,r3
    9d70:	300c943a 	slli	r6,r6,16
    9d74:	a17fffcc 	andi	r5,r20,65535
    9d78:	a028d43a 	srli	r20,r20,16
    9d7c:	3084b03a 	or	r2,r6,r2
    9d80:	10ffffcc 	andi	r3,r2,65535
    9d84:	100cd43a 	srli	r6,r2,16
    9d88:	194f383a 	mul	r7,r3,r5
    9d8c:	1d07383a 	mul	r3,r3,r20
    9d90:	314b383a 	mul	r5,r6,r5
    9d94:	3810d43a 	srli	r8,r7,16
    9d98:	8121c83a 	sub	r16,r16,r4
    9d9c:	1947883a 	add	r3,r3,r5
    9da0:	40c7883a 	add	r3,r8,r3
    9da4:	350d383a 	mul	r6,r6,r20
    9da8:	1940022e 	bgeu	r3,r5,9db4 <__udivdi3+0x400>
    9dac:	01000074 	movhi	r4,1
    9db0:	310d883a 	add	r6,r6,r4
    9db4:	1828d43a 	srli	r20,r3,16
    9db8:	a18d883a 	add	r6,r20,r6
    9dbc:	81803e36 	bltu	r16,r6,9eb8 <__udivdi3+0x504>
    9dc0:	81803826 	beq	r16,r6,9ea4 <__udivdi3+0x4f0>
    9dc4:	0007883a 	mov	r3,zero
    9dc8:	003fa206 	br	9c54 <__udivdi3+0x2a0>
    9dcc:	88e2983a 	sll	r17,r17,r3
    9dd0:	80a8d83a 	srl	r20,r16,r2
    9dd4:	80e0983a 	sll	r16,r16,r3
    9dd8:	882ad43a 	srli	r21,r17,16
    9ddc:	9884d83a 	srl	r2,r19,r2
    9de0:	a009883a 	mov	r4,r20
    9de4:	a80b883a 	mov	r5,r21
    9de8:	142eb03a 	or	r23,r2,r16
    9dec:	98e4983a 	sll	r18,r19,r3
    9df0:	000a5c00 	call	a5c0 <__umodsi3>
    9df4:	a009883a 	mov	r4,r20
    9df8:	a80b883a 	mov	r5,r21
    9dfc:	1021883a 	mov	r16,r2
    9e00:	000a55c0 	call	a55c <__udivsi3>
    9e04:	1039883a 	mov	fp,r2
    9e08:	8d3fffcc 	andi	r20,r17,65535
    9e0c:	8020943a 	slli	r16,r16,16
    9e10:	b804d43a 	srli	r2,r23,16
    9e14:	a72d383a 	mul	r22,r20,fp
    9e18:	1404b03a 	or	r2,r2,r16
    9e1c:	1580062e 	bgeu	r2,r22,9e38 <__udivdi3+0x484>
    9e20:	1445883a 	add	r2,r2,r17
    9e24:	e0ffffc4 	addi	r3,fp,-1
    9e28:	14403836 	bltu	r2,r17,9f0c <__udivdi3+0x558>
    9e2c:	1580372e 	bgeu	r2,r22,9f0c <__udivdi3+0x558>
    9e30:	e73fff84 	addi	fp,fp,-2
    9e34:	1445883a 	add	r2,r2,r17
    9e38:	15adc83a 	sub	r22,r2,r22
    9e3c:	a80b883a 	mov	r5,r21
    9e40:	b009883a 	mov	r4,r22
    9e44:	000a5c00 	call	a5c0 <__umodsi3>
    9e48:	1027883a 	mov	r19,r2
    9e4c:	b009883a 	mov	r4,r22
    9e50:	a80b883a 	mov	r5,r21
    9e54:	000a55c0 	call	a55c <__udivsi3>
    9e58:	9826943a 	slli	r19,r19,16
    9e5c:	a0a1383a 	mul	r16,r20,r2
    9e60:	b93fffcc 	andi	r4,r23,65535
    9e64:	24c8b03a 	or	r4,r4,r19
    9e68:	2400062e 	bgeu	r4,r16,9e84 <__udivdi3+0x4d0>
    9e6c:	2449883a 	add	r4,r4,r17
    9e70:	10ffffc4 	addi	r3,r2,-1
    9e74:	24402336 	bltu	r4,r17,9f04 <__udivdi3+0x550>
    9e78:	2400222e 	bgeu	r4,r16,9f04 <__udivdi3+0x550>
    9e7c:	10bfff84 	addi	r2,r2,-2
    9e80:	2449883a 	add	r4,r4,r17
    9e84:	e038943a 	slli	fp,fp,16
    9e88:	2421c83a 	sub	r16,r4,r16
    9e8c:	e086b03a 	or	r3,fp,r2
    9e90:	003f4306 	br	9ba0 <__udivdi3+0x1ec>
    9e94:	2005883a 	mov	r2,r4
    9e98:	003f6906 	br	9c40 <__udivdi3+0x28c>
    9e9c:	1805883a 	mov	r2,r3
    9ea0:	003f0f06 	br	9ae0 <__udivdi3+0x12c>
    9ea4:	1806943a 	slli	r3,r3,16
    9ea8:	9d66983a 	sll	r19,r19,r21
    9eac:	39ffffcc 	andi	r7,r7,65535
    9eb0:	19c7883a 	add	r3,r3,r7
    9eb4:	98ffc32e 	bgeu	r19,r3,9dc4 <__udivdi3+0x410>
    9eb8:	10bfffc4 	addi	r2,r2,-1
    9ebc:	003fc106 	br	9dc4 <__udivdi3+0x410>
    9ec0:	00800604 	movi	r2,24
    9ec4:	003f1106 	br	9b0c <__udivdi3+0x158>
    9ec8:	00800604 	movi	r2,24
    9ecc:	003f2706 	br	9b6c <__udivdi3+0x1b8>
    9ed0:	00800604 	movi	r2,24
    9ed4:	003ece06 	br	9a10 <__udivdi3+0x5c>
    9ed8:	0007883a 	mov	r3,zero
    9edc:	00800044 	movi	r2,1
    9ee0:	003f5c06 	br	9c54 <__udivdi3+0x2a0>
    9ee4:	813fa12e 	bgeu	r16,r4,9d6c <__udivdi3+0x3b8>
    9ee8:	10bfff84 	addi	r2,r2,-2
    9eec:	85e1883a 	add	r16,r16,r23
    9ef0:	003f9f06 	br	9d70 <__udivdi3+0x3bc>
    9ef4:	1c7f8a2e 	bgeu	r3,r17,9d20 <__udivdi3+0x36c>
    9ef8:	31bfff84 	addi	r6,r6,-2
    9efc:	1dc7883a 	add	r3,r3,r23
    9f00:	003f8806 	br	9d24 <__udivdi3+0x370>
    9f04:	1805883a 	mov	r2,r3
    9f08:	003fde06 	br	9e84 <__udivdi3+0x4d0>
    9f0c:	1839883a 	mov	fp,r3
    9f10:	003fc906 	br	9e38 <__udivdi3+0x484>
    9f14:	b5bfff84 	addi	r22,r22,-2
    9f18:	2449883a 	add	r4,r4,r17
    9f1c:	003f3406 	br	9bf0 <__udivdi3+0x23c>
    9f20:	b5bfff84 	addi	r22,r22,-2
    9f24:	1445883a 	add	r2,r2,r17
    9f28:	003edb06 	br	9a98 <__udivdi3+0xe4>

00009f2c <__umoddi3>:
    9f2c:	defff404 	addi	sp,sp,-48
    9f30:	df000a15 	stw	fp,40(sp)
    9f34:	dc400315 	stw	r17,12(sp)
    9f38:	dc000215 	stw	r16,8(sp)
    9f3c:	dfc00b15 	stw	ra,44(sp)
    9f40:	ddc00915 	stw	r23,36(sp)
    9f44:	dd800815 	stw	r22,32(sp)
    9f48:	dd400715 	stw	r21,28(sp)
    9f4c:	dd000615 	stw	r20,24(sp)
    9f50:	dcc00515 	stw	r19,20(sp)
    9f54:	dc800415 	stw	r18,16(sp)
    9f58:	2021883a 	mov	r16,r4
    9f5c:	2823883a 	mov	r17,r5
    9f60:	2839883a 	mov	fp,r5
    9f64:	38003c1e 	bne	r7,zero,a058 <__umoddi3+0x12c>
    9f68:	3027883a 	mov	r19,r6
    9f6c:	2029883a 	mov	r20,r4
    9f70:	2980512e 	bgeu	r5,r6,a0b8 <__umoddi3+0x18c>
    9f74:	00bfffd4 	movui	r2,65535
    9f78:	11809a36 	bltu	r2,r6,a1e4 <__umoddi3+0x2b8>
    9f7c:	01003fc4 	movi	r4,255
    9f80:	2189803a 	cmpltu	r4,r4,r6
    9f84:	200890fa 	slli	r4,r4,3
    9f88:	3104d83a 	srl	r2,r6,r4
    9f8c:	00c00074 	movhi	r3,1
    9f90:	18fdda04 	addi	r3,r3,-2200
    9f94:	1885883a 	add	r2,r3,r2
    9f98:	10c00003 	ldbu	r3,0(r2)
    9f9c:	00800804 	movi	r2,32
    9fa0:	1909883a 	add	r4,r3,r4
    9fa4:	1125c83a 	sub	r18,r2,r4
    9fa8:	90000526 	beq	r18,zero,9fc0 <__umoddi3+0x94>
    9fac:	8ca2983a 	sll	r17,r17,r18
    9fb0:	8108d83a 	srl	r4,r16,r4
    9fb4:	34a6983a 	sll	r19,r6,r18
    9fb8:	84a8983a 	sll	r20,r16,r18
    9fbc:	2478b03a 	or	fp,r4,r17
    9fc0:	982ed43a 	srli	r23,r19,16
    9fc4:	e009883a 	mov	r4,fp
    9fc8:	9dbfffcc 	andi	r22,r19,65535
    9fcc:	b80b883a 	mov	r5,r23
    9fd0:	000a5c00 	call	a5c0 <__umodsi3>
    9fd4:	e009883a 	mov	r4,fp
    9fd8:	b80b883a 	mov	r5,r23
    9fdc:	102b883a 	mov	r21,r2
    9fe0:	000a55c0 	call	a55c <__udivsi3>
    9fe4:	a806943a 	slli	r3,r21,16
    9fe8:	a008d43a 	srli	r4,r20,16
    9fec:	b085383a 	mul	r2,r22,r2
    9ff0:	20c8b03a 	or	r4,r4,r3
    9ff4:	2080032e 	bgeu	r4,r2,a004 <__umoddi3+0xd8>
    9ff8:	24c9883a 	add	r4,r4,r19
    9ffc:	24c00136 	bltu	r4,r19,a004 <__umoddi3+0xd8>
    a000:	20811036 	bltu	r4,r2,a444 <__umoddi3+0x518>
    a004:	20abc83a 	sub	r21,r4,r2
    a008:	b80b883a 	mov	r5,r23
    a00c:	a809883a 	mov	r4,r21
    a010:	000a5c00 	call	a5c0 <__umodsi3>
    a014:	1023883a 	mov	r17,r2
    a018:	b80b883a 	mov	r5,r23
    a01c:	a809883a 	mov	r4,r21
    a020:	000a55c0 	call	a55c <__udivsi3>
    a024:	8822943a 	slli	r17,r17,16
    a028:	b085383a 	mul	r2,r22,r2
    a02c:	a0ffffcc 	andi	r3,r20,65535
    a030:	1c46b03a 	or	r3,r3,r17
    a034:	1880042e 	bgeu	r3,r2,a048 <__umoddi3+0x11c>
    a038:	1cc7883a 	add	r3,r3,r19
    a03c:	1cc00236 	bltu	r3,r19,a048 <__umoddi3+0x11c>
    a040:	1880012e 	bgeu	r3,r2,a048 <__umoddi3+0x11c>
    a044:	1cc7883a 	add	r3,r3,r19
    a048:	1885c83a 	sub	r2,r3,r2
    a04c:	1484d83a 	srl	r2,r2,r18
    a050:	0007883a 	mov	r3,zero
    a054:	00004f06 	br	a194 <__umoddi3+0x268>
    a058:	29c04c36 	bltu	r5,r7,a18c <__umoddi3+0x260>
    a05c:	00bfffd4 	movui	r2,65535
    a060:	11c0582e 	bgeu	r2,r7,a1c4 <__umoddi3+0x298>
    a064:	00804034 	movhi	r2,256
    a068:	10bfffc4 	addi	r2,r2,-1
    a06c:	11c0e736 	bltu	r2,r7,a40c <__umoddi3+0x4e0>
    a070:	01000404 	movi	r4,16
    a074:	3904d83a 	srl	r2,r7,r4
    a078:	00c00074 	movhi	r3,1
    a07c:	18fdda04 	addi	r3,r3,-2200
    a080:	1885883a 	add	r2,r3,r2
    a084:	14c00003 	ldbu	r19,0(r2)
    a088:	00c00804 	movi	r3,32
    a08c:	9927883a 	add	r19,r19,r4
    a090:	1ce9c83a 	sub	r20,r3,r19
    a094:	a000581e 	bne	r20,zero,a1f8 <__umoddi3+0x2cc>
    a098:	3c400136 	bltu	r7,r17,a0a0 <__umoddi3+0x174>
    a09c:	8180eb36 	bltu	r16,r6,a44c <__umoddi3+0x520>
    a0a0:	8185c83a 	sub	r2,r16,r6
    a0a4:	89e3c83a 	sub	r17,r17,r7
    a0a8:	8089803a 	cmpltu	r4,r16,r2
    a0ac:	8939c83a 	sub	fp,r17,r4
    a0b0:	e007883a 	mov	r3,fp
    a0b4:	00003706 	br	a194 <__umoddi3+0x268>
    a0b8:	3000041e 	bne	r6,zero,a0cc <__umoddi3+0x1a0>
    a0bc:	000b883a 	mov	r5,zero
    a0c0:	01000044 	movi	r4,1
    a0c4:	000a55c0 	call	a55c <__udivsi3>
    a0c8:	1027883a 	mov	r19,r2
    a0cc:	00bfffd4 	movui	r2,65535
    a0d0:	14c0402e 	bgeu	r2,r19,a1d4 <__umoddi3+0x2a8>
    a0d4:	00804034 	movhi	r2,256
    a0d8:	10bfffc4 	addi	r2,r2,-1
    a0dc:	14c0cd36 	bltu	r2,r19,a414 <__umoddi3+0x4e8>
    a0e0:	00800404 	movi	r2,16
    a0e4:	9886d83a 	srl	r3,r19,r2
    a0e8:	01000074 	movhi	r4,1
    a0ec:	213dda04 	addi	r4,r4,-2200
    a0f0:	20c7883a 	add	r3,r4,r3
    a0f4:	18c00003 	ldbu	r3,0(r3)
    a0f8:	1887883a 	add	r3,r3,r2
    a0fc:	00800804 	movi	r2,32
    a100:	10e5c83a 	sub	r18,r2,r3
    a104:	9000901e 	bne	r18,zero,a348 <__umoddi3+0x41c>
    a108:	982cd43a 	srli	r22,r19,16
    a10c:	8ce3c83a 	sub	r17,r17,r19
    a110:	9d7fffcc 	andi	r21,r19,65535
    a114:	b00b883a 	mov	r5,r22
    a118:	8809883a 	mov	r4,r17
    a11c:	000a5c00 	call	a5c0 <__umodsi3>
    a120:	8809883a 	mov	r4,r17
    a124:	b00b883a 	mov	r5,r22
    a128:	1021883a 	mov	r16,r2
    a12c:	000a55c0 	call	a55c <__udivsi3>
    a130:	8006943a 	slli	r3,r16,16
    a134:	a008d43a 	srli	r4,r20,16
    a138:	1545383a 	mul	r2,r2,r21
    a13c:	20c8b03a 	or	r4,r4,r3
    a140:	2080042e 	bgeu	r4,r2,a154 <__umoddi3+0x228>
    a144:	24c9883a 	add	r4,r4,r19
    a148:	24c00236 	bltu	r4,r19,a154 <__umoddi3+0x228>
    a14c:	2080012e 	bgeu	r4,r2,a154 <__umoddi3+0x228>
    a150:	24c9883a 	add	r4,r4,r19
    a154:	20a1c83a 	sub	r16,r4,r2
    a158:	b00b883a 	mov	r5,r22
    a15c:	8009883a 	mov	r4,r16
    a160:	000a5c00 	call	a5c0 <__umodsi3>
    a164:	1023883a 	mov	r17,r2
    a168:	b00b883a 	mov	r5,r22
    a16c:	8009883a 	mov	r4,r16
    a170:	000a55c0 	call	a55c <__udivsi3>
    a174:	8822943a 	slli	r17,r17,16
    a178:	1545383a 	mul	r2,r2,r21
    a17c:	a53fffcc 	andi	r20,r20,65535
    a180:	a446b03a 	or	r3,r20,r17
    a184:	18bfb02e 	bgeu	r3,r2,a048 <__umoddi3+0x11c>
    a188:	003fab06 	br	a038 <__umoddi3+0x10c>
    a18c:	2005883a 	mov	r2,r4
    a190:	2807883a 	mov	r3,r5
    a194:	dfc00b17 	ldw	ra,44(sp)
    a198:	df000a17 	ldw	fp,40(sp)
    a19c:	ddc00917 	ldw	r23,36(sp)
    a1a0:	dd800817 	ldw	r22,32(sp)
    a1a4:	dd400717 	ldw	r21,28(sp)
    a1a8:	dd000617 	ldw	r20,24(sp)
    a1ac:	dcc00517 	ldw	r19,20(sp)
    a1b0:	dc800417 	ldw	r18,16(sp)
    a1b4:	dc400317 	ldw	r17,12(sp)
    a1b8:	dc000217 	ldw	r16,8(sp)
    a1bc:	dec00c04 	addi	sp,sp,48
    a1c0:	f800283a 	ret
    a1c4:	04c03fc4 	movi	r19,255
    a1c8:	99c9803a 	cmpltu	r4,r19,r7
    a1cc:	200890fa 	slli	r4,r4,3
    a1d0:	003fa806 	br	a074 <__umoddi3+0x148>
    a1d4:	00803fc4 	movi	r2,255
    a1d8:	14c5803a 	cmpltu	r2,r2,r19
    a1dc:	100490fa 	slli	r2,r2,3
    a1e0:	003fc006 	br	a0e4 <__umoddi3+0x1b8>
    a1e4:	00804034 	movhi	r2,256
    a1e8:	10bfffc4 	addi	r2,r2,-1
    a1ec:	11808b36 	bltu	r2,r6,a41c <__umoddi3+0x4f0>
    a1f0:	01000404 	movi	r4,16
    a1f4:	003f6406 	br	9f88 <__umoddi3+0x5c>
    a1f8:	34c4d83a 	srl	r2,r6,r19
    a1fc:	3d0e983a 	sll	r7,r7,r20
    a200:	8cf8d83a 	srl	fp,r17,r19
    a204:	8d10983a 	sll	r8,r17,r20
    a208:	38aab03a 	or	r21,r7,r2
    a20c:	a82cd43a 	srli	r22,r21,16
    a210:	84e2d83a 	srl	r17,r16,r19
    a214:	e009883a 	mov	r4,fp
    a218:	b00b883a 	mov	r5,r22
    a21c:	8a22b03a 	or	r17,r17,r8
    a220:	3524983a 	sll	r18,r6,r20
    a224:	000a5c00 	call	a5c0 <__umodsi3>
    a228:	e009883a 	mov	r4,fp
    a22c:	b00b883a 	mov	r5,r22
    a230:	102f883a 	mov	r23,r2
    a234:	000a55c0 	call	a55c <__udivsi3>
    a238:	100d883a 	mov	r6,r2
    a23c:	b808943a 	slli	r4,r23,16
    a240:	aa3fffcc 	andi	r8,r21,65535
    a244:	8804d43a 	srli	r2,r17,16
    a248:	41af383a 	mul	r23,r8,r6
    a24c:	8520983a 	sll	r16,r16,r20
    a250:	1104b03a 	or	r2,r2,r4
    a254:	15c0042e 	bgeu	r2,r23,a268 <__umoddi3+0x33c>
    a258:	1545883a 	add	r2,r2,r21
    a25c:	30ffffc4 	addi	r3,r6,-1
    a260:	1540742e 	bgeu	r2,r21,a434 <__umoddi3+0x508>
    a264:	180d883a 	mov	r6,r3
    a268:	15efc83a 	sub	r23,r2,r23
    a26c:	b00b883a 	mov	r5,r22
    a270:	b809883a 	mov	r4,r23
    a274:	d9800115 	stw	r6,4(sp)
    a278:	da000015 	stw	r8,0(sp)
    a27c:	000a5c00 	call	a5c0 <__umodsi3>
    a280:	b00b883a 	mov	r5,r22
    a284:	b809883a 	mov	r4,r23
    a288:	1039883a 	mov	fp,r2
    a28c:	000a55c0 	call	a55c <__udivsi3>
    a290:	da000017 	ldw	r8,0(sp)
    a294:	e038943a 	slli	fp,fp,16
    a298:	100b883a 	mov	r5,r2
    a29c:	4089383a 	mul	r4,r8,r2
    a2a0:	8a3fffcc 	andi	r8,r17,65535
    a2a4:	4710b03a 	or	r8,r8,fp
    a2a8:	d9800117 	ldw	r6,4(sp)
    a2ac:	4100042e 	bgeu	r8,r4,a2c0 <__umoddi3+0x394>
    a2b0:	4551883a 	add	r8,r8,r21
    a2b4:	10bfffc4 	addi	r2,r2,-1
    a2b8:	45405a2e 	bgeu	r8,r21,a424 <__umoddi3+0x4f8>
    a2bc:	100b883a 	mov	r5,r2
    a2c0:	300c943a 	slli	r6,r6,16
    a2c4:	91ffffcc 	andi	r7,r18,65535
    a2c8:	9004d43a 	srli	r2,r18,16
    a2cc:	314cb03a 	or	r6,r6,r5
    a2d0:	317fffcc 	andi	r5,r6,65535
    a2d4:	300cd43a 	srli	r6,r6,16
    a2d8:	29d3383a 	mul	r9,r5,r7
    a2dc:	288b383a 	mul	r5,r5,r2
    a2e0:	31cf383a 	mul	r7,r6,r7
    a2e4:	4806d43a 	srli	r3,r9,16
    a2e8:	4111c83a 	sub	r8,r8,r4
    a2ec:	29cb883a 	add	r5,r5,r7
    a2f0:	194b883a 	add	r5,r3,r5
    a2f4:	3085383a 	mul	r2,r6,r2
    a2f8:	29c0022e 	bgeu	r5,r7,a304 <__umoddi3+0x3d8>
    a2fc:	00c00074 	movhi	r3,1
    a300:	10c5883a 	add	r2,r2,r3
    a304:	2808d43a 	srli	r4,r5,16
    a308:	280a943a 	slli	r5,r5,16
    a30c:	4a7fffcc 	andi	r9,r9,65535
    a310:	2085883a 	add	r2,r4,r2
    a314:	2a4b883a 	add	r5,r5,r9
    a318:	40803636 	bltu	r8,r2,a3f4 <__umoddi3+0x4c8>
    a31c:	40804d26 	beq	r8,r2,a454 <__umoddi3+0x528>
    a320:	4089c83a 	sub	r4,r8,r2
    a324:	280f883a 	mov	r7,r5
    a328:	81cfc83a 	sub	r7,r16,r7
    a32c:	81c7803a 	cmpltu	r3,r16,r7
    a330:	20c7c83a 	sub	r3,r4,r3
    a334:	1cc4983a 	sll	r2,r3,r19
    a338:	3d0ed83a 	srl	r7,r7,r20
    a33c:	1d06d83a 	srl	r3,r3,r20
    a340:	11c4b03a 	or	r2,r2,r7
    a344:	003f9306 	br	a194 <__umoddi3+0x268>
    a348:	9ca6983a 	sll	r19,r19,r18
    a34c:	88e8d83a 	srl	r20,r17,r3
    a350:	80c4d83a 	srl	r2,r16,r3
    a354:	982cd43a 	srli	r22,r19,16
    a358:	8ca2983a 	sll	r17,r17,r18
    a35c:	a009883a 	mov	r4,r20
    a360:	b00b883a 	mov	r5,r22
    a364:	1478b03a 	or	fp,r2,r17
    a368:	000a5c00 	call	a5c0 <__umodsi3>
    a36c:	a009883a 	mov	r4,r20
    a370:	b00b883a 	mov	r5,r22
    a374:	1023883a 	mov	r17,r2
    a378:	000a55c0 	call	a55c <__udivsi3>
    a37c:	9d7fffcc 	andi	r21,r19,65535
    a380:	880a943a 	slli	r5,r17,16
    a384:	e008d43a 	srli	r4,fp,16
    a388:	a885383a 	mul	r2,r21,r2
    a38c:	84a8983a 	sll	r20,r16,r18
    a390:	2148b03a 	or	r4,r4,r5
    a394:	2080042e 	bgeu	r4,r2,a3a8 <__umoddi3+0x47c>
    a398:	24c9883a 	add	r4,r4,r19
    a39c:	24c00236 	bltu	r4,r19,a3a8 <__umoddi3+0x47c>
    a3a0:	2080012e 	bgeu	r4,r2,a3a8 <__umoddi3+0x47c>
    a3a4:	24c9883a 	add	r4,r4,r19
    a3a8:	20a3c83a 	sub	r17,r4,r2
    a3ac:	b00b883a 	mov	r5,r22
    a3b0:	8809883a 	mov	r4,r17
    a3b4:	000a5c00 	call	a5c0 <__umodsi3>
    a3b8:	102f883a 	mov	r23,r2
    a3bc:	8809883a 	mov	r4,r17
    a3c0:	b00b883a 	mov	r5,r22
    a3c4:	000a55c0 	call	a55c <__udivsi3>
    a3c8:	b82e943a 	slli	r23,r23,16
    a3cc:	a885383a 	mul	r2,r21,r2
    a3d0:	e13fffcc 	andi	r4,fp,65535
    a3d4:	25c8b03a 	or	r4,r4,r23
    a3d8:	2080042e 	bgeu	r4,r2,a3ec <__umoddi3+0x4c0>
    a3dc:	24c9883a 	add	r4,r4,r19
    a3e0:	24c00236 	bltu	r4,r19,a3ec <__umoddi3+0x4c0>
    a3e4:	2080012e 	bgeu	r4,r2,a3ec <__umoddi3+0x4c0>
    a3e8:	24c9883a 	add	r4,r4,r19
    a3ec:	20a3c83a 	sub	r17,r4,r2
    a3f0:	003f4806 	br	a114 <__umoddi3+0x1e8>
    a3f4:	2c8fc83a 	sub	r7,r5,r18
    a3f8:	1545c83a 	sub	r2,r2,r21
    a3fc:	29cb803a 	cmpltu	r5,r5,r7
    a400:	1145c83a 	sub	r2,r2,r5
    a404:	4089c83a 	sub	r4,r8,r2
    a408:	003fc706 	br	a328 <__umoddi3+0x3fc>
    a40c:	01000604 	movi	r4,24
    a410:	003f1806 	br	a074 <__umoddi3+0x148>
    a414:	00800604 	movi	r2,24
    a418:	003f3206 	br	a0e4 <__umoddi3+0x1b8>
    a41c:	01000604 	movi	r4,24
    a420:	003ed906 	br	9f88 <__umoddi3+0x5c>
    a424:	413fa52e 	bgeu	r8,r4,a2bc <__umoddi3+0x390>
    a428:	297fff84 	addi	r5,r5,-2
    a42c:	4551883a 	add	r8,r8,r21
    a430:	003fa306 	br	a2c0 <__umoddi3+0x394>
    a434:	15ff8b2e 	bgeu	r2,r23,a264 <__umoddi3+0x338>
    a438:	31bfff84 	addi	r6,r6,-2
    a43c:	1545883a 	add	r2,r2,r21
    a440:	003f8906 	br	a268 <__umoddi3+0x33c>
    a444:	24c9883a 	add	r4,r4,r19
    a448:	003eee06 	br	a004 <__umoddi3+0xd8>
    a44c:	8005883a 	mov	r2,r16
    a450:	003f1706 	br	a0b0 <__umoddi3+0x184>
    a454:	817fe736 	bltu	r16,r5,a3f4 <__umoddi3+0x4c8>
    a458:	280f883a 	mov	r7,r5
    a45c:	0009883a 	mov	r4,zero
    a460:	003fb106 	br	a328 <__umoddi3+0x3fc>

0000a464 <__divsi3>:
    a464:	20001b16 	blt	r4,zero,a4d4 <__divsi3+0x70>
    a468:	000f883a 	mov	r7,zero
    a46c:	28001616 	blt	r5,zero,a4c8 <__divsi3+0x64>
    a470:	200d883a 	mov	r6,r4
    a474:	29001a2e 	bgeu	r5,r4,a4e0 <__divsi3+0x7c>
    a478:	00800804 	movi	r2,32
    a47c:	00c00044 	movi	r3,1
    a480:	00000106 	br	a488 <__divsi3+0x24>
    a484:	10000d26 	beq	r2,zero,a4bc <__divsi3+0x58>
    a488:	294b883a 	add	r5,r5,r5
    a48c:	10bfffc4 	addi	r2,r2,-1
    a490:	18c7883a 	add	r3,r3,r3
    a494:	293ffb36 	bltu	r5,r4,a484 <__divsi3+0x20>
    a498:	0005883a 	mov	r2,zero
    a49c:	18000726 	beq	r3,zero,a4bc <__divsi3+0x58>
    a4a0:	0005883a 	mov	r2,zero
    a4a4:	31400236 	bltu	r6,r5,a4b0 <__divsi3+0x4c>
    a4a8:	314dc83a 	sub	r6,r6,r5
    a4ac:	10c4b03a 	or	r2,r2,r3
    a4b0:	1806d07a 	srli	r3,r3,1
    a4b4:	280ad07a 	srli	r5,r5,1
    a4b8:	183ffa1e 	bne	r3,zero,a4a4 <__divsi3+0x40>
    a4bc:	38000126 	beq	r7,zero,a4c4 <__divsi3+0x60>
    a4c0:	0085c83a 	sub	r2,zero,r2
    a4c4:	f800283a 	ret
    a4c8:	014bc83a 	sub	r5,zero,r5
    a4cc:	39c0005c 	xori	r7,r7,1
    a4d0:	003fe706 	br	a470 <__divsi3+0xc>
    a4d4:	0109c83a 	sub	r4,zero,r4
    a4d8:	01c00044 	movi	r7,1
    a4dc:	003fe306 	br	a46c <__divsi3+0x8>
    a4e0:	00c00044 	movi	r3,1
    a4e4:	003fee06 	br	a4a0 <__divsi3+0x3c>

0000a4e8 <__modsi3>:
    a4e8:	20001716 	blt	r4,zero,a548 <__modsi3+0x60>
    a4ec:	000f883a 	mov	r7,zero
    a4f0:	2005883a 	mov	r2,r4
    a4f4:	28001216 	blt	r5,zero,a540 <__modsi3+0x58>
    a4f8:	2900162e 	bgeu	r5,r4,a554 <__modsi3+0x6c>
    a4fc:	01800804 	movi	r6,32
    a500:	00c00044 	movi	r3,1
    a504:	00000106 	br	a50c <__modsi3+0x24>
    a508:	30000a26 	beq	r6,zero,a534 <__modsi3+0x4c>
    a50c:	294b883a 	add	r5,r5,r5
    a510:	31bfffc4 	addi	r6,r6,-1
    a514:	18c7883a 	add	r3,r3,r3
    a518:	293ffb36 	bltu	r5,r4,a508 <__modsi3+0x20>
    a51c:	18000526 	beq	r3,zero,a534 <__modsi3+0x4c>
    a520:	1806d07a 	srli	r3,r3,1
    a524:	11400136 	bltu	r2,r5,a52c <__modsi3+0x44>
    a528:	1145c83a 	sub	r2,r2,r5
    a52c:	280ad07a 	srli	r5,r5,1
    a530:	183ffb1e 	bne	r3,zero,a520 <__modsi3+0x38>
    a534:	38000126 	beq	r7,zero,a53c <__modsi3+0x54>
    a538:	0085c83a 	sub	r2,zero,r2
    a53c:	f800283a 	ret
    a540:	014bc83a 	sub	r5,zero,r5
    a544:	003fec06 	br	a4f8 <__modsi3+0x10>
    a548:	0109c83a 	sub	r4,zero,r4
    a54c:	01c00044 	movi	r7,1
    a550:	003fe706 	br	a4f0 <__modsi3+0x8>
    a554:	00c00044 	movi	r3,1
    a558:	003ff106 	br	a520 <__modsi3+0x38>

0000a55c <__udivsi3>:
    a55c:	200d883a 	mov	r6,r4
    a560:	2900152e 	bgeu	r5,r4,a5b8 <__udivsi3+0x5c>
    a564:	28001416 	blt	r5,zero,a5b8 <__udivsi3+0x5c>
    a568:	00800804 	movi	r2,32
    a56c:	00c00044 	movi	r3,1
    a570:	00000206 	br	a57c <__udivsi3+0x20>
    a574:	10000e26 	beq	r2,zero,a5b0 <__udivsi3+0x54>
    a578:	28000516 	blt	r5,zero,a590 <__udivsi3+0x34>
    a57c:	294b883a 	add	r5,r5,r5
    a580:	10bfffc4 	addi	r2,r2,-1
    a584:	18c7883a 	add	r3,r3,r3
    a588:	293ffa36 	bltu	r5,r4,a574 <__udivsi3+0x18>
    a58c:	18000826 	beq	r3,zero,a5b0 <__udivsi3+0x54>
    a590:	0005883a 	mov	r2,zero
    a594:	31400236 	bltu	r6,r5,a5a0 <__udivsi3+0x44>
    a598:	314dc83a 	sub	r6,r6,r5
    a59c:	10c4b03a 	or	r2,r2,r3
    a5a0:	1806d07a 	srli	r3,r3,1
    a5a4:	280ad07a 	srli	r5,r5,1
    a5a8:	183ffa1e 	bne	r3,zero,a594 <__udivsi3+0x38>
    a5ac:	f800283a 	ret
    a5b0:	0005883a 	mov	r2,zero
    a5b4:	f800283a 	ret
    a5b8:	00c00044 	movi	r3,1
    a5bc:	003ff406 	br	a590 <__udivsi3+0x34>

0000a5c0 <__umodsi3>:
    a5c0:	2005883a 	mov	r2,r4
    a5c4:	2900122e 	bgeu	r5,r4,a610 <__umodsi3+0x50>
    a5c8:	28001116 	blt	r5,zero,a610 <__umodsi3+0x50>
    a5cc:	01800804 	movi	r6,32
    a5d0:	00c00044 	movi	r3,1
    a5d4:	00000206 	br	a5e0 <__umodsi3+0x20>
    a5d8:	30000c26 	beq	r6,zero,a60c <__umodsi3+0x4c>
    a5dc:	28000516 	blt	r5,zero,a5f4 <__umodsi3+0x34>
    a5e0:	294b883a 	add	r5,r5,r5
    a5e4:	31bfffc4 	addi	r6,r6,-1
    a5e8:	18c7883a 	add	r3,r3,r3
    a5ec:	293ffa36 	bltu	r5,r4,a5d8 <__umodsi3+0x18>
    a5f0:	18000626 	beq	r3,zero,a60c <__umodsi3+0x4c>
    a5f4:	1806d07a 	srli	r3,r3,1
    a5f8:	11400136 	bltu	r2,r5,a600 <__umodsi3+0x40>
    a5fc:	1145c83a 	sub	r2,r2,r5
    a600:	280ad07a 	srli	r5,r5,1
    a604:	183ffb1e 	bne	r3,zero,a5f4 <__umodsi3+0x34>
    a608:	f800283a 	ret
    a60c:	f800283a 	ret
    a610:	00c00044 	movi	r3,1
    a614:	003ff706 	br	a5f4 <__umodsi3+0x34>

0000a618 <__adddf3>:
    a618:	02c00434 	movhi	r11,16
    a61c:	5affffc4 	addi	r11,r11,-1
    a620:	2806d7fa 	srli	r3,r5,31
    a624:	2ad4703a 	and	r10,r5,r11
    a628:	3ad2703a 	and	r9,r7,r11
    a62c:	3804d53a 	srli	r2,r7,20
    a630:	3018d77a 	srli	r12,r6,29
    a634:	280ad53a 	srli	r5,r5,20
    a638:	501490fa 	slli	r10,r10,3
    a63c:	2010d77a 	srli	r8,r4,29
    a640:	481290fa 	slli	r9,r9,3
    a644:	380ed7fa 	srli	r7,r7,31
    a648:	defffb04 	addi	sp,sp,-20
    a64c:	dc800215 	stw	r18,8(sp)
    a650:	dc400115 	stw	r17,4(sp)
    a654:	dc000015 	stw	r16,0(sp)
    a658:	dfc00415 	stw	ra,16(sp)
    a65c:	dcc00315 	stw	r19,12(sp)
    a660:	1c803fcc 	andi	r18,r3,255
    a664:	2c01ffcc 	andi	r16,r5,2047
    a668:	5210b03a 	or	r8,r10,r8
    a66c:	202290fa 	slli	r17,r4,3
    a670:	1081ffcc 	andi	r2,r2,2047
    a674:	4b12b03a 	or	r9,r9,r12
    a678:	300c90fa 	slli	r6,r6,3
    a67c:	91c07526 	beq	r18,r7,a854 <__adddf3+0x23c>
    a680:	8087c83a 	sub	r3,r16,r2
    a684:	00c0ab0e 	bge	zero,r3,a934 <__adddf3+0x31c>
    a688:	10002a1e 	bne	r2,zero,a734 <__adddf3+0x11c>
    a68c:	4984b03a 	or	r2,r9,r6
    a690:	1000961e 	bne	r2,zero,a8ec <__adddf3+0x2d4>
    a694:	888001cc 	andi	r2,r17,7
    a698:	10000726 	beq	r2,zero,a6b8 <__adddf3+0xa0>
    a69c:	888003cc 	andi	r2,r17,15
    a6a0:	00c00104 	movi	r3,4
    a6a4:	10c00426 	beq	r2,r3,a6b8 <__adddf3+0xa0>
    a6a8:	88c7883a 	add	r3,r17,r3
    a6ac:	1c63803a 	cmpltu	r17,r3,r17
    a6b0:	4451883a 	add	r8,r8,r17
    a6b4:	1823883a 	mov	r17,r3
    a6b8:	4080202c 	andhi	r2,r8,128
    a6bc:	10005926 	beq	r2,zero,a824 <__adddf3+0x20c>
    a6c0:	84000044 	addi	r16,r16,1
    a6c4:	0081ffc4 	movi	r2,2047
    a6c8:	8080ba26 	beq	r16,r2,a9b4 <__adddf3+0x39c>
    a6cc:	00bfe034 	movhi	r2,65408
    a6d0:	10bfffc4 	addi	r2,r2,-1
    a6d4:	4090703a 	and	r8,r8,r2
    a6d8:	4004977a 	slli	r2,r8,29
    a6dc:	4010927a 	slli	r8,r8,9
    a6e0:	8822d0fa 	srli	r17,r17,3
    a6e4:	8401ffcc 	andi	r16,r16,2047
    a6e8:	4010d33a 	srli	r8,r8,12
    a6ec:	9007883a 	mov	r3,r18
    a6f0:	1444b03a 	or	r2,r2,r17
    a6f4:	8401ffcc 	andi	r16,r16,2047
    a6f8:	8020953a 	slli	r16,r16,20
    a6fc:	18c03fcc 	andi	r3,r3,255
    a700:	01000434 	movhi	r4,16
    a704:	213fffc4 	addi	r4,r4,-1
    a708:	180697fa 	slli	r3,r3,31
    a70c:	4110703a 	and	r8,r8,r4
    a710:	4410b03a 	or	r8,r8,r16
    a714:	40c6b03a 	or	r3,r8,r3
    a718:	dfc00417 	ldw	ra,16(sp)
    a71c:	dcc00317 	ldw	r19,12(sp)
    a720:	dc800217 	ldw	r18,8(sp)
    a724:	dc400117 	ldw	r17,4(sp)
    a728:	dc000017 	ldw	r16,0(sp)
    a72c:	dec00504 	addi	sp,sp,20
    a730:	f800283a 	ret
    a734:	0081ffc4 	movi	r2,2047
    a738:	80bfd626 	beq	r16,r2,a694 <__adddf3+0x7c>
    a73c:	4a402034 	orhi	r9,r9,128
    a740:	00800e04 	movi	r2,56
    a744:	10c09f16 	blt	r2,r3,a9c4 <__adddf3+0x3ac>
    a748:	008007c4 	movi	r2,31
    a74c:	10c0c216 	blt	r2,r3,aa58 <__adddf3+0x440>
    a750:	00800804 	movi	r2,32
    a754:	10c5c83a 	sub	r2,r2,r3
    a758:	488a983a 	sll	r5,r9,r2
    a75c:	30c8d83a 	srl	r4,r6,r3
    a760:	3084983a 	sll	r2,r6,r2
    a764:	48c6d83a 	srl	r3,r9,r3
    a768:	290cb03a 	or	r6,r5,r4
    a76c:	1004c03a 	cmpne	r2,r2,zero
    a770:	308cb03a 	or	r6,r6,r2
    a774:	898dc83a 	sub	r6,r17,r6
    a778:	89a3803a 	cmpltu	r17,r17,r6
    a77c:	40d1c83a 	sub	r8,r8,r3
    a780:	4451c83a 	sub	r8,r8,r17
    a784:	3023883a 	mov	r17,r6
    a788:	4080202c 	andhi	r2,r8,128
    a78c:	10002326 	beq	r2,zero,a81c <__adddf3+0x204>
    a790:	04c02034 	movhi	r19,128
    a794:	9cffffc4 	addi	r19,r19,-1
    a798:	44e6703a 	and	r19,r8,r19
    a79c:	98007626 	beq	r19,zero,a978 <__adddf3+0x360>
    a7a0:	9809883a 	mov	r4,r19
    a7a4:	000cc1c0 	call	cc1c <__clzsi2>
    a7a8:	10fffe04 	addi	r3,r2,-8
    a7ac:	010007c4 	movi	r4,31
    a7b0:	20c07716 	blt	r4,r3,a990 <__adddf3+0x378>
    a7b4:	00800804 	movi	r2,32
    a7b8:	10c5c83a 	sub	r2,r2,r3
    a7bc:	8884d83a 	srl	r2,r17,r2
    a7c0:	98d0983a 	sll	r8,r19,r3
    a7c4:	88e2983a 	sll	r17,r17,r3
    a7c8:	1204b03a 	or	r2,r2,r8
    a7cc:	1c007416 	blt	r3,r16,a9a0 <__adddf3+0x388>
    a7d0:	1c21c83a 	sub	r16,r3,r16
    a7d4:	82000044 	addi	r8,r16,1
    a7d8:	00c007c4 	movi	r3,31
    a7dc:	1a009116 	blt	r3,r8,aa24 <__adddf3+0x40c>
    a7e0:	00c00804 	movi	r3,32
    a7e4:	1a07c83a 	sub	r3,r3,r8
    a7e8:	8a08d83a 	srl	r4,r17,r8
    a7ec:	88e2983a 	sll	r17,r17,r3
    a7f0:	10c6983a 	sll	r3,r2,r3
    a7f4:	1210d83a 	srl	r8,r2,r8
    a7f8:	8804c03a 	cmpne	r2,r17,zero
    a7fc:	1906b03a 	or	r3,r3,r4
    a800:	18a2b03a 	or	r17,r3,r2
    a804:	0021883a 	mov	r16,zero
    a808:	003fa206 	br	a694 <__adddf3+0x7c>
    a80c:	1890b03a 	or	r8,r3,r2
    a810:	40017d26 	beq	r8,zero,ae08 <__adddf3+0x7f0>
    a814:	1011883a 	mov	r8,r2
    a818:	1823883a 	mov	r17,r3
    a81c:	888001cc 	andi	r2,r17,7
    a820:	103f9e1e 	bne	r2,zero,a69c <__adddf3+0x84>
    a824:	4004977a 	slli	r2,r8,29
    a828:	8822d0fa 	srli	r17,r17,3
    a82c:	4010d0fa 	srli	r8,r8,3
    a830:	9007883a 	mov	r3,r18
    a834:	1444b03a 	or	r2,r2,r17
    a838:	0101ffc4 	movi	r4,2047
    a83c:	81002426 	beq	r16,r4,a8d0 <__adddf3+0x2b8>
    a840:	8120703a 	and	r16,r16,r4
    a844:	01000434 	movhi	r4,16
    a848:	213fffc4 	addi	r4,r4,-1
    a84c:	4110703a 	and	r8,r8,r4
    a850:	003fa806 	br	a6f4 <__adddf3+0xdc>
    a854:	8089c83a 	sub	r4,r16,r2
    a858:	01005e0e 	bge	zero,r4,a9d4 <__adddf3+0x3bc>
    a85c:	10002b26 	beq	r2,zero,a90c <__adddf3+0x2f4>
    a860:	0081ffc4 	movi	r2,2047
    a864:	80bf8b26 	beq	r16,r2,a694 <__adddf3+0x7c>
    a868:	4a402034 	orhi	r9,r9,128
    a86c:	00800e04 	movi	r2,56
    a870:	1100a40e 	bge	r2,r4,ab04 <__adddf3+0x4ec>
    a874:	498cb03a 	or	r6,r9,r6
    a878:	300ac03a 	cmpne	r5,r6,zero
    a87c:	0013883a 	mov	r9,zero
    a880:	2c4b883a 	add	r5,r5,r17
    a884:	2c63803a 	cmpltu	r17,r5,r17
    a888:	4a11883a 	add	r8,r9,r8
    a88c:	8a11883a 	add	r8,r17,r8
    a890:	2823883a 	mov	r17,r5
    a894:	4080202c 	andhi	r2,r8,128
    a898:	103fe026 	beq	r2,zero,a81c <__adddf3+0x204>
    a89c:	84000044 	addi	r16,r16,1
    a8a0:	0081ffc4 	movi	r2,2047
    a8a4:	8080d226 	beq	r16,r2,abf0 <__adddf3+0x5d8>
    a8a8:	00bfe034 	movhi	r2,65408
    a8ac:	10bfffc4 	addi	r2,r2,-1
    a8b0:	4090703a 	and	r8,r8,r2
    a8b4:	880ad07a 	srli	r5,r17,1
    a8b8:	400897fa 	slli	r4,r8,31
    a8bc:	88c0004c 	andi	r3,r17,1
    a8c0:	28e2b03a 	or	r17,r5,r3
    a8c4:	4010d07a 	srli	r8,r8,1
    a8c8:	2462b03a 	or	r17,r4,r17
    a8cc:	003f7106 	br	a694 <__adddf3+0x7c>
    a8d0:	4088b03a 	or	r4,r8,r2
    a8d4:	20014526 	beq	r4,zero,adec <__adddf3+0x7d4>
    a8d8:	01000434 	movhi	r4,16
    a8dc:	42000234 	orhi	r8,r8,8
    a8e0:	213fffc4 	addi	r4,r4,-1
    a8e4:	4110703a 	and	r8,r8,r4
    a8e8:	003f8206 	br	a6f4 <__adddf3+0xdc>
    a8ec:	18ffffc4 	addi	r3,r3,-1
    a8f0:	1800491e 	bne	r3,zero,aa18 <__adddf3+0x400>
    a8f4:	898bc83a 	sub	r5,r17,r6
    a8f8:	8963803a 	cmpltu	r17,r17,r5
    a8fc:	4251c83a 	sub	r8,r8,r9
    a900:	4451c83a 	sub	r8,r8,r17
    a904:	2823883a 	mov	r17,r5
    a908:	003f9f06 	br	a788 <__adddf3+0x170>
    a90c:	4984b03a 	or	r2,r9,r6
    a910:	103f6026 	beq	r2,zero,a694 <__adddf3+0x7c>
    a914:	213fffc4 	addi	r4,r4,-1
    a918:	2000931e 	bne	r4,zero,ab68 <__adddf3+0x550>
    a91c:	898d883a 	add	r6,r17,r6
    a920:	3463803a 	cmpltu	r17,r6,r17
    a924:	4251883a 	add	r8,r8,r9
    a928:	8a11883a 	add	r8,r17,r8
    a92c:	3023883a 	mov	r17,r6
    a930:	003fd806 	br	a894 <__adddf3+0x27c>
    a934:	1800541e 	bne	r3,zero,aa88 <__adddf3+0x470>
    a938:	80800044 	addi	r2,r16,1
    a93c:	1081ffcc 	andi	r2,r2,2047
    a940:	00c00044 	movi	r3,1
    a944:	1880a00e 	bge	r3,r2,abc8 <__adddf3+0x5b0>
    a948:	8989c83a 	sub	r4,r17,r6
    a94c:	8905803a 	cmpltu	r2,r17,r4
    a950:	4267c83a 	sub	r19,r8,r9
    a954:	98a7c83a 	sub	r19,r19,r2
    a958:	9880202c 	andhi	r2,r19,128
    a95c:	10006326 	beq	r2,zero,aaec <__adddf3+0x4d4>
    a960:	3463c83a 	sub	r17,r6,r17
    a964:	4a07c83a 	sub	r3,r9,r8
    a968:	344d803a 	cmpltu	r6,r6,r17
    a96c:	19a7c83a 	sub	r19,r3,r6
    a970:	3825883a 	mov	r18,r7
    a974:	983f8a1e 	bne	r19,zero,a7a0 <__adddf3+0x188>
    a978:	8809883a 	mov	r4,r17
    a97c:	000cc1c0 	call	cc1c <__clzsi2>
    a980:	10800804 	addi	r2,r2,32
    a984:	10fffe04 	addi	r3,r2,-8
    a988:	010007c4 	movi	r4,31
    a98c:	20ff890e 	bge	r4,r3,a7b4 <__adddf3+0x19c>
    a990:	10bff604 	addi	r2,r2,-40
    a994:	8884983a 	sll	r2,r17,r2
    a998:	0023883a 	mov	r17,zero
    a99c:	1c3f8c0e 	bge	r3,r16,a7d0 <__adddf3+0x1b8>
    a9a0:	023fe034 	movhi	r8,65408
    a9a4:	423fffc4 	addi	r8,r8,-1
    a9a8:	80e1c83a 	sub	r16,r16,r3
    a9ac:	1210703a 	and	r8,r2,r8
    a9b0:	003f3806 	br	a694 <__adddf3+0x7c>
    a9b4:	9007883a 	mov	r3,r18
    a9b8:	0011883a 	mov	r8,zero
    a9bc:	0005883a 	mov	r2,zero
    a9c0:	003f4c06 	br	a6f4 <__adddf3+0xdc>
    a9c4:	498cb03a 	or	r6,r9,r6
    a9c8:	300cc03a 	cmpne	r6,r6,zero
    a9cc:	0007883a 	mov	r3,zero
    a9d0:	003f6806 	br	a774 <__adddf3+0x15c>
    a9d4:	20009c1e 	bne	r4,zero,ac48 <__adddf3+0x630>
    a9d8:	80800044 	addi	r2,r16,1
    a9dc:	1141ffcc 	andi	r5,r2,2047
    a9e0:	01000044 	movi	r4,1
    a9e4:	2140670e 	bge	r4,r5,ab84 <__adddf3+0x56c>
    a9e8:	0101ffc4 	movi	r4,2047
    a9ec:	11007f26 	beq	r2,r4,abec <__adddf3+0x5d4>
    a9f0:	898d883a 	add	r6,r17,r6
    a9f4:	4247883a 	add	r3,r8,r9
    a9f8:	3451803a 	cmpltu	r8,r6,r17
    a9fc:	40d1883a 	add	r8,r8,r3
    aa00:	402297fa 	slli	r17,r8,31
    aa04:	300cd07a 	srli	r6,r6,1
    aa08:	4010d07a 	srli	r8,r8,1
    aa0c:	1021883a 	mov	r16,r2
    aa10:	89a2b03a 	or	r17,r17,r6
    aa14:	003f1f06 	br	a694 <__adddf3+0x7c>
    aa18:	0081ffc4 	movi	r2,2047
    aa1c:	80bf481e 	bne	r16,r2,a740 <__adddf3+0x128>
    aa20:	003f1c06 	br	a694 <__adddf3+0x7c>
    aa24:	843ff844 	addi	r16,r16,-31
    aa28:	01000804 	movi	r4,32
    aa2c:	1406d83a 	srl	r3,r2,r16
    aa30:	41005026 	beq	r8,r4,ab74 <__adddf3+0x55c>
    aa34:	01001004 	movi	r4,64
    aa38:	2211c83a 	sub	r8,r4,r8
    aa3c:	1204983a 	sll	r2,r2,r8
    aa40:	88a2b03a 	or	r17,r17,r2
    aa44:	8822c03a 	cmpne	r17,r17,zero
    aa48:	1c62b03a 	or	r17,r3,r17
    aa4c:	0011883a 	mov	r8,zero
    aa50:	0021883a 	mov	r16,zero
    aa54:	003f7106 	br	a81c <__adddf3+0x204>
    aa58:	193ff804 	addi	r4,r3,-32
    aa5c:	00800804 	movi	r2,32
    aa60:	4908d83a 	srl	r4,r9,r4
    aa64:	18804526 	beq	r3,r2,ab7c <__adddf3+0x564>
    aa68:	00801004 	movi	r2,64
    aa6c:	10c5c83a 	sub	r2,r2,r3
    aa70:	4886983a 	sll	r3,r9,r2
    aa74:	198cb03a 	or	r6,r3,r6
    aa78:	300cc03a 	cmpne	r6,r6,zero
    aa7c:	218cb03a 	or	r6,r4,r6
    aa80:	0007883a 	mov	r3,zero
    aa84:	003f3b06 	br	a774 <__adddf3+0x15c>
    aa88:	80002a26 	beq	r16,zero,ab34 <__adddf3+0x51c>
    aa8c:	0101ffc4 	movi	r4,2047
    aa90:	11006826 	beq	r2,r4,ac34 <__adddf3+0x61c>
    aa94:	00c7c83a 	sub	r3,zero,r3
    aa98:	42002034 	orhi	r8,r8,128
    aa9c:	01000e04 	movi	r4,56
    aaa0:	20c07c16 	blt	r4,r3,ac94 <__adddf3+0x67c>
    aaa4:	010007c4 	movi	r4,31
    aaa8:	20c0da16 	blt	r4,r3,ae14 <__adddf3+0x7fc>
    aaac:	01000804 	movi	r4,32
    aab0:	20c9c83a 	sub	r4,r4,r3
    aab4:	4114983a 	sll	r10,r8,r4
    aab8:	88cad83a 	srl	r5,r17,r3
    aabc:	8908983a 	sll	r4,r17,r4
    aac0:	40c6d83a 	srl	r3,r8,r3
    aac4:	5162b03a 	or	r17,r10,r5
    aac8:	2008c03a 	cmpne	r4,r4,zero
    aacc:	8922b03a 	or	r17,r17,r4
    aad0:	3463c83a 	sub	r17,r6,r17
    aad4:	48c7c83a 	sub	r3,r9,r3
    aad8:	344d803a 	cmpltu	r6,r6,r17
    aadc:	1991c83a 	sub	r8,r3,r6
    aae0:	1021883a 	mov	r16,r2
    aae4:	3825883a 	mov	r18,r7
    aae8:	003f2706 	br	a788 <__adddf3+0x170>
    aaec:	24d0b03a 	or	r8,r4,r19
    aaf0:	40001b1e 	bne	r8,zero,ab60 <__adddf3+0x548>
    aaf4:	0005883a 	mov	r2,zero
    aaf8:	0007883a 	mov	r3,zero
    aafc:	0021883a 	mov	r16,zero
    ab00:	003f4d06 	br	a838 <__adddf3+0x220>
    ab04:	008007c4 	movi	r2,31
    ab08:	11003c16 	blt	r2,r4,abfc <__adddf3+0x5e4>
    ab0c:	00800804 	movi	r2,32
    ab10:	1105c83a 	sub	r2,r2,r4
    ab14:	488e983a 	sll	r7,r9,r2
    ab18:	310ad83a 	srl	r5,r6,r4
    ab1c:	3084983a 	sll	r2,r6,r2
    ab20:	4912d83a 	srl	r9,r9,r4
    ab24:	394ab03a 	or	r5,r7,r5
    ab28:	1004c03a 	cmpne	r2,r2,zero
    ab2c:	288ab03a 	or	r5,r5,r2
    ab30:	003f5306 	br	a880 <__adddf3+0x268>
    ab34:	4448b03a 	or	r4,r8,r17
    ab38:	20003e26 	beq	r4,zero,ac34 <__adddf3+0x61c>
    ab3c:	00c6303a 	nor	r3,zero,r3
    ab40:	18003a1e 	bne	r3,zero,ac2c <__adddf3+0x614>
    ab44:	3463c83a 	sub	r17,r6,r17
    ab48:	4a07c83a 	sub	r3,r9,r8
    ab4c:	344d803a 	cmpltu	r6,r6,r17
    ab50:	1991c83a 	sub	r8,r3,r6
    ab54:	1021883a 	mov	r16,r2
    ab58:	3825883a 	mov	r18,r7
    ab5c:	003f0a06 	br	a788 <__adddf3+0x170>
    ab60:	2023883a 	mov	r17,r4
    ab64:	003f0d06 	br	a79c <__adddf3+0x184>
    ab68:	0081ffc4 	movi	r2,2047
    ab6c:	80bf3f1e 	bne	r16,r2,a86c <__adddf3+0x254>
    ab70:	003ec806 	br	a694 <__adddf3+0x7c>
    ab74:	0005883a 	mov	r2,zero
    ab78:	003fb106 	br	aa40 <__adddf3+0x428>
    ab7c:	0007883a 	mov	r3,zero
    ab80:	003fbc06 	br	aa74 <__adddf3+0x45c>
    ab84:	4444b03a 	or	r2,r8,r17
    ab88:	8000871e 	bne	r16,zero,ada8 <__adddf3+0x790>
    ab8c:	1000ba26 	beq	r2,zero,ae78 <__adddf3+0x860>
    ab90:	4984b03a 	or	r2,r9,r6
    ab94:	103ebf26 	beq	r2,zero,a694 <__adddf3+0x7c>
    ab98:	8985883a 	add	r2,r17,r6
    ab9c:	4247883a 	add	r3,r8,r9
    aba0:	1451803a 	cmpltu	r8,r2,r17
    aba4:	40d1883a 	add	r8,r8,r3
    aba8:	40c0202c 	andhi	r3,r8,128
    abac:	1023883a 	mov	r17,r2
    abb0:	183f1a26 	beq	r3,zero,a81c <__adddf3+0x204>
    abb4:	00bfe034 	movhi	r2,65408
    abb8:	10bfffc4 	addi	r2,r2,-1
    abbc:	2021883a 	mov	r16,r4
    abc0:	4090703a 	and	r8,r8,r2
    abc4:	003eb306 	br	a694 <__adddf3+0x7c>
    abc8:	4444b03a 	or	r2,r8,r17
    abcc:	8000291e 	bne	r16,zero,ac74 <__adddf3+0x65c>
    abd0:	10004b1e 	bne	r2,zero,ad00 <__adddf3+0x6e8>
    abd4:	4990b03a 	or	r8,r9,r6
    abd8:	40008b26 	beq	r8,zero,ae08 <__adddf3+0x7f0>
    abdc:	4811883a 	mov	r8,r9
    abe0:	3023883a 	mov	r17,r6
    abe4:	3825883a 	mov	r18,r7
    abe8:	003eaa06 	br	a694 <__adddf3+0x7c>
    abec:	1021883a 	mov	r16,r2
    abf0:	0011883a 	mov	r8,zero
    abf4:	0005883a 	mov	r2,zero
    abf8:	003f0f06 	br	a838 <__adddf3+0x220>
    abfc:	217ff804 	addi	r5,r4,-32
    ac00:	00800804 	movi	r2,32
    ac04:	494ad83a 	srl	r5,r9,r5
    ac08:	20807d26 	beq	r4,r2,ae00 <__adddf3+0x7e8>
    ac0c:	00801004 	movi	r2,64
    ac10:	1109c83a 	sub	r4,r2,r4
    ac14:	4912983a 	sll	r9,r9,r4
    ac18:	498cb03a 	or	r6,r9,r6
    ac1c:	300cc03a 	cmpne	r6,r6,zero
    ac20:	298ab03a 	or	r5,r5,r6
    ac24:	0013883a 	mov	r9,zero
    ac28:	003f1506 	br	a880 <__adddf3+0x268>
    ac2c:	0101ffc4 	movi	r4,2047
    ac30:	113f9a1e 	bne	r2,r4,aa9c <__adddf3+0x484>
    ac34:	4811883a 	mov	r8,r9
    ac38:	3023883a 	mov	r17,r6
    ac3c:	1021883a 	mov	r16,r2
    ac40:	3825883a 	mov	r18,r7
    ac44:	003e9306 	br	a694 <__adddf3+0x7c>
    ac48:	8000161e 	bne	r16,zero,aca4 <__adddf3+0x68c>
    ac4c:	444ab03a 	or	r5,r8,r17
    ac50:	28005126 	beq	r5,zero,ad98 <__adddf3+0x780>
    ac54:	0108303a 	nor	r4,zero,r4
    ac58:	20004d1e 	bne	r4,zero,ad90 <__adddf3+0x778>
    ac5c:	89a3883a 	add	r17,r17,r6
    ac60:	4253883a 	add	r9,r8,r9
    ac64:	898d803a 	cmpltu	r6,r17,r6
    ac68:	3251883a 	add	r8,r6,r9
    ac6c:	1021883a 	mov	r16,r2
    ac70:	003f0806 	br	a894 <__adddf3+0x27c>
    ac74:	1000301e 	bne	r2,zero,ad38 <__adddf3+0x720>
    ac78:	4984b03a 	or	r2,r9,r6
    ac7c:	10007126 	beq	r2,zero,ae44 <__adddf3+0x82c>
    ac80:	4811883a 	mov	r8,r9
    ac84:	3023883a 	mov	r17,r6
    ac88:	3825883a 	mov	r18,r7
    ac8c:	0401ffc4 	movi	r16,2047
    ac90:	003e8006 	br	a694 <__adddf3+0x7c>
    ac94:	4462b03a 	or	r17,r8,r17
    ac98:	8822c03a 	cmpne	r17,r17,zero
    ac9c:	0007883a 	mov	r3,zero
    aca0:	003f8b06 	br	aad0 <__adddf3+0x4b8>
    aca4:	0141ffc4 	movi	r5,2047
    aca8:	11403b26 	beq	r2,r5,ad98 <__adddf3+0x780>
    acac:	0109c83a 	sub	r4,zero,r4
    acb0:	42002034 	orhi	r8,r8,128
    acb4:	01400e04 	movi	r5,56
    acb8:	29006716 	blt	r5,r4,ae58 <__adddf3+0x840>
    acbc:	014007c4 	movi	r5,31
    acc0:	29007016 	blt	r5,r4,ae84 <__adddf3+0x86c>
    acc4:	01400804 	movi	r5,32
    acc8:	290bc83a 	sub	r5,r5,r4
    accc:	4154983a 	sll	r10,r8,r5
    acd0:	890ed83a 	srl	r7,r17,r4
    acd4:	894a983a 	sll	r5,r17,r5
    acd8:	4108d83a 	srl	r4,r8,r4
    acdc:	51e2b03a 	or	r17,r10,r7
    ace0:	280ac03a 	cmpne	r5,r5,zero
    ace4:	8962b03a 	or	r17,r17,r5
    ace8:	89a3883a 	add	r17,r17,r6
    acec:	2253883a 	add	r9,r4,r9
    acf0:	898d803a 	cmpltu	r6,r17,r6
    acf4:	3251883a 	add	r8,r6,r9
    acf8:	1021883a 	mov	r16,r2
    acfc:	003ee506 	br	a894 <__adddf3+0x27c>
    ad00:	4984b03a 	or	r2,r9,r6
    ad04:	103e6326 	beq	r2,zero,a694 <__adddf3+0x7c>
    ad08:	8987c83a 	sub	r3,r17,r6
    ad0c:	88c9803a 	cmpltu	r4,r17,r3
    ad10:	4245c83a 	sub	r2,r8,r9
    ad14:	1105c83a 	sub	r2,r2,r4
    ad18:	1100202c 	andhi	r4,r2,128
    ad1c:	203ebb26 	beq	r4,zero,a80c <__adddf3+0x1f4>
    ad20:	3463c83a 	sub	r17,r6,r17
    ad24:	4a07c83a 	sub	r3,r9,r8
    ad28:	344d803a 	cmpltu	r6,r6,r17
    ad2c:	1991c83a 	sub	r8,r3,r6
    ad30:	3825883a 	mov	r18,r7
    ad34:	003e5706 	br	a694 <__adddf3+0x7c>
    ad38:	4984b03a 	or	r2,r9,r6
    ad3c:	10002e26 	beq	r2,zero,adf8 <__adddf3+0x7e0>
    ad40:	4004d0fa 	srli	r2,r8,3
    ad44:	8822d0fa 	srli	r17,r17,3
    ad48:	4010977a 	slli	r8,r8,29
    ad4c:	10c0022c 	andhi	r3,r2,8
    ad50:	4462b03a 	or	r17,r8,r17
    ad54:	18000826 	beq	r3,zero,ad78 <__adddf3+0x760>
    ad58:	4808d0fa 	srli	r4,r9,3
    ad5c:	20c0022c 	andhi	r3,r4,8
    ad60:	1800051e 	bne	r3,zero,ad78 <__adddf3+0x760>
    ad64:	300cd0fa 	srli	r6,r6,3
    ad68:	4806977a 	slli	r3,r9,29
    ad6c:	2005883a 	mov	r2,r4
    ad70:	3825883a 	mov	r18,r7
    ad74:	19a2b03a 	or	r17,r3,r6
    ad78:	8810d77a 	srli	r8,r17,29
    ad7c:	100490fa 	slli	r2,r2,3
    ad80:	882290fa 	slli	r17,r17,3
    ad84:	0401ffc4 	movi	r16,2047
    ad88:	4090b03a 	or	r8,r8,r2
    ad8c:	003e4106 	br	a694 <__adddf3+0x7c>
    ad90:	0141ffc4 	movi	r5,2047
    ad94:	117fc71e 	bne	r2,r5,acb4 <__adddf3+0x69c>
    ad98:	4811883a 	mov	r8,r9
    ad9c:	3023883a 	mov	r17,r6
    ada0:	1021883a 	mov	r16,r2
    ada4:	003e3b06 	br	a694 <__adddf3+0x7c>
    ada8:	10002f26 	beq	r2,zero,ae68 <__adddf3+0x850>
    adac:	4984b03a 	or	r2,r9,r6
    adb0:	10001126 	beq	r2,zero,adf8 <__adddf3+0x7e0>
    adb4:	4004d0fa 	srli	r2,r8,3
    adb8:	8822d0fa 	srli	r17,r17,3
    adbc:	4010977a 	slli	r8,r8,29
    adc0:	10c0022c 	andhi	r3,r2,8
    adc4:	4462b03a 	or	r17,r8,r17
    adc8:	183feb26 	beq	r3,zero,ad78 <__adddf3+0x760>
    adcc:	4808d0fa 	srli	r4,r9,3
    add0:	20c0022c 	andhi	r3,r4,8
    add4:	183fe81e 	bne	r3,zero,ad78 <__adddf3+0x760>
    add8:	300cd0fa 	srli	r6,r6,3
    addc:	4806977a 	slli	r3,r9,29
    ade0:	2005883a 	mov	r2,r4
    ade4:	19a2b03a 	or	r17,r3,r6
    ade8:	003fe306 	br	ad78 <__adddf3+0x760>
    adec:	0011883a 	mov	r8,zero
    adf0:	0005883a 	mov	r2,zero
    adf4:	003e3f06 	br	a6f4 <__adddf3+0xdc>
    adf8:	0401ffc4 	movi	r16,2047
    adfc:	003e2506 	br	a694 <__adddf3+0x7c>
    ae00:	0013883a 	mov	r9,zero
    ae04:	003f8406 	br	ac18 <__adddf3+0x600>
    ae08:	0005883a 	mov	r2,zero
    ae0c:	0007883a 	mov	r3,zero
    ae10:	003e8906 	br	a838 <__adddf3+0x220>
    ae14:	197ff804 	addi	r5,r3,-32
    ae18:	01000804 	movi	r4,32
    ae1c:	414ad83a 	srl	r5,r8,r5
    ae20:	19002426 	beq	r3,r4,aeb4 <__adddf3+0x89c>
    ae24:	01001004 	movi	r4,64
    ae28:	20c7c83a 	sub	r3,r4,r3
    ae2c:	40c6983a 	sll	r3,r8,r3
    ae30:	1c46b03a 	or	r3,r3,r17
    ae34:	1806c03a 	cmpne	r3,r3,zero
    ae38:	28e2b03a 	or	r17,r5,r3
    ae3c:	0007883a 	mov	r3,zero
    ae40:	003f2306 	br	aad0 <__adddf3+0x4b8>
    ae44:	0007883a 	mov	r3,zero
    ae48:	5811883a 	mov	r8,r11
    ae4c:	00bfffc4 	movi	r2,-1
    ae50:	0401ffc4 	movi	r16,2047
    ae54:	003e7806 	br	a838 <__adddf3+0x220>
    ae58:	4462b03a 	or	r17,r8,r17
    ae5c:	8822c03a 	cmpne	r17,r17,zero
    ae60:	0009883a 	mov	r4,zero
    ae64:	003fa006 	br	ace8 <__adddf3+0x6d0>
    ae68:	4811883a 	mov	r8,r9
    ae6c:	3023883a 	mov	r17,r6
    ae70:	0401ffc4 	movi	r16,2047
    ae74:	003e0706 	br	a694 <__adddf3+0x7c>
    ae78:	4811883a 	mov	r8,r9
    ae7c:	3023883a 	mov	r17,r6
    ae80:	003e0406 	br	a694 <__adddf3+0x7c>
    ae84:	21fff804 	addi	r7,r4,-32
    ae88:	01400804 	movi	r5,32
    ae8c:	41ced83a 	srl	r7,r8,r7
    ae90:	21400a26 	beq	r4,r5,aebc <__adddf3+0x8a4>
    ae94:	01401004 	movi	r5,64
    ae98:	2909c83a 	sub	r4,r5,r4
    ae9c:	4108983a 	sll	r4,r8,r4
    aea0:	2448b03a 	or	r4,r4,r17
    aea4:	2008c03a 	cmpne	r4,r4,zero
    aea8:	3922b03a 	or	r17,r7,r4
    aeac:	0009883a 	mov	r4,zero
    aeb0:	003f8d06 	br	ace8 <__adddf3+0x6d0>
    aeb4:	0007883a 	mov	r3,zero
    aeb8:	003fdd06 	br	ae30 <__adddf3+0x818>
    aebc:	0009883a 	mov	r4,zero
    aec0:	003ff706 	br	aea0 <__adddf3+0x888>

0000aec4 <__divdf3>:
    aec4:	defff204 	addi	sp,sp,-56
    aec8:	dd400915 	stw	r21,36(sp)
    aecc:	282ad53a 	srli	r21,r5,20
    aed0:	dd000815 	stw	r20,32(sp)
    aed4:	2828d7fa 	srli	r20,r5,31
    aed8:	dc000415 	stw	r16,16(sp)
    aedc:	04000434 	movhi	r16,16
    aee0:	df000c15 	stw	fp,48(sp)
    aee4:	843fffc4 	addi	r16,r16,-1
    aee8:	dfc00d15 	stw	ra,52(sp)
    aeec:	ddc00b15 	stw	r23,44(sp)
    aef0:	dd800a15 	stw	r22,40(sp)
    aef4:	dcc00715 	stw	r19,28(sp)
    aef8:	dc800615 	stw	r18,24(sp)
    aefc:	dc400515 	stw	r17,20(sp)
    af00:	ad41ffcc 	andi	r21,r21,2047
    af04:	2c20703a 	and	r16,r5,r16
    af08:	a7003fcc 	andi	fp,r20,255
    af0c:	a8006126 	beq	r21,zero,b094 <__divdf3+0x1d0>
    af10:	0081ffc4 	movi	r2,2047
    af14:	2025883a 	mov	r18,r4
    af18:	a8803726 	beq	r21,r2,aff8 <__divdf3+0x134>
    af1c:	80c00434 	orhi	r3,r16,16
    af20:	180690fa 	slli	r3,r3,3
    af24:	2020d77a 	srli	r16,r4,29
    af28:	202490fa 	slli	r18,r4,3
    af2c:	ad7f0044 	addi	r21,r21,-1023
    af30:	80e0b03a 	or	r16,r16,r3
    af34:	0027883a 	mov	r19,zero
    af38:	0013883a 	mov	r9,zero
    af3c:	3808d53a 	srli	r4,r7,20
    af40:	382cd7fa 	srli	r22,r7,31
    af44:	04400434 	movhi	r17,16
    af48:	8c7fffc4 	addi	r17,r17,-1
    af4c:	2101ffcc 	andi	r4,r4,2047
    af50:	3011883a 	mov	r8,r6
    af54:	3c62703a 	and	r17,r7,r17
    af58:	b5c03fcc 	andi	r23,r22,255
    af5c:	20006c26 	beq	r4,zero,b110 <__divdf3+0x24c>
    af60:	0081ffc4 	movi	r2,2047
    af64:	20806426 	beq	r4,r2,b0f8 <__divdf3+0x234>
    af68:	88c00434 	orhi	r3,r17,16
    af6c:	180690fa 	slli	r3,r3,3
    af70:	3022d77a 	srli	r17,r6,29
    af74:	301090fa 	slli	r8,r6,3
    af78:	213f0044 	addi	r4,r4,-1023
    af7c:	88e2b03a 	or	r17,r17,r3
    af80:	000d883a 	mov	r6,zero
    af84:	a584f03a 	xor	r2,r20,r22
    af88:	34cab03a 	or	r5,r6,r19
    af8c:	1007883a 	mov	r3,r2
    af90:	14c03fcc 	andi	r19,r2,255
    af94:	008003c4 	movi	r2,15
    af98:	a92bc83a 	sub	r21,r21,r4
    af9c:	11409036 	bltu	r2,r5,b1e0 <__divdf3+0x31c>
    afa0:	280a90ba 	slli	r5,r5,2
    afa4:	00800074 	movhi	r2,1
    afa8:	10abee04 	addi	r2,r2,-20552
    afac:	288b883a 	add	r5,r5,r2
    afb0:	28800017 	ldw	r2,0(r5)
    afb4:	1000683a 	jmp	r2
    afb8:	0000b1e0 	cmpeqi	zero,zero,711
    afbc:	0000b030 	cmpltui	zero,zero,704
    afc0:	0000b1d0 	cmplti	zero,zero,711
    afc4:	0000b024 	muli	zero,zero,704
    afc8:	0000b1d0 	cmplti	zero,zero,711
    afcc:	0000b1a4 	muli	zero,zero,710
    afd0:	0000b1d0 	cmplti	zero,zero,711
    afd4:	0000b024 	muli	zero,zero,704
    afd8:	0000b030 	cmpltui	zero,zero,704
    afdc:	0000b030 	cmpltui	zero,zero,704
    afe0:	0000b1a4 	muli	zero,zero,710
    afe4:	0000b024 	muli	zero,zero,704
    afe8:	0000b014 	movui	zero,704
    afec:	0000b014 	movui	zero,704
    aff0:	0000b014 	movui	zero,704
    aff4:	0000b4c4 	movi	zero,723
    aff8:	2404b03a 	or	r2,r4,r16
    affc:	1000661e 	bne	r2,zero,b198 <__divdf3+0x2d4>
    b000:	04c00204 	movi	r19,8
    b004:	0021883a 	mov	r16,zero
    b008:	0025883a 	mov	r18,zero
    b00c:	02400084 	movi	r9,2
    b010:	003fca06 	br	af3c <__divdf3+0x78>
    b014:	8023883a 	mov	r17,r16
    b018:	9011883a 	mov	r8,r18
    b01c:	e02f883a 	mov	r23,fp
    b020:	480d883a 	mov	r6,r9
    b024:	00800084 	movi	r2,2
    b028:	3081311e 	bne	r6,r2,b4f0 <__divdf3+0x62c>
    b02c:	b827883a 	mov	r19,r23
    b030:	98c0004c 	andi	r3,r19,1
    b034:	0081ffc4 	movi	r2,2047
    b038:	000b883a 	mov	r5,zero
    b03c:	0025883a 	mov	r18,zero
    b040:	1004953a 	slli	r2,r2,20
    b044:	18c03fcc 	andi	r3,r3,255
    b048:	04400434 	movhi	r17,16
    b04c:	8c7fffc4 	addi	r17,r17,-1
    b050:	180697fa 	slli	r3,r3,31
    b054:	2c4a703a 	and	r5,r5,r17
    b058:	288ab03a 	or	r5,r5,r2
    b05c:	28c6b03a 	or	r3,r5,r3
    b060:	9005883a 	mov	r2,r18
    b064:	dfc00d17 	ldw	ra,52(sp)
    b068:	df000c17 	ldw	fp,48(sp)
    b06c:	ddc00b17 	ldw	r23,44(sp)
    b070:	dd800a17 	ldw	r22,40(sp)
    b074:	dd400917 	ldw	r21,36(sp)
    b078:	dd000817 	ldw	r20,32(sp)
    b07c:	dcc00717 	ldw	r19,28(sp)
    b080:	dc800617 	ldw	r18,24(sp)
    b084:	dc400517 	ldw	r17,20(sp)
    b088:	dc000417 	ldw	r16,16(sp)
    b08c:	dec00e04 	addi	sp,sp,56
    b090:	f800283a 	ret
    b094:	2404b03a 	or	r2,r4,r16
    b098:	2027883a 	mov	r19,r4
    b09c:	10003926 	beq	r2,zero,b184 <__divdf3+0x2c0>
    b0a0:	80012e26 	beq	r16,zero,b55c <__divdf3+0x698>
    b0a4:	8009883a 	mov	r4,r16
    b0a8:	d9800315 	stw	r6,12(sp)
    b0ac:	d9c00215 	stw	r7,8(sp)
    b0b0:	000cc1c0 	call	cc1c <__clzsi2>
    b0b4:	d9800317 	ldw	r6,12(sp)
    b0b8:	d9c00217 	ldw	r7,8(sp)
    b0bc:	10fffd44 	addi	r3,r2,-11
    b0c0:	01000704 	movi	r4,28
    b0c4:	20c12116 	blt	r4,r3,b54c <__divdf3+0x688>
    b0c8:	01000744 	movi	r4,29
    b0cc:	147ffe04 	addi	r17,r2,-8
    b0d0:	20c9c83a 	sub	r4,r4,r3
    b0d4:	8460983a 	sll	r16,r16,r17
    b0d8:	9908d83a 	srl	r4,r19,r4
    b0dc:	9c64983a 	sll	r18,r19,r17
    b0e0:	2420b03a 	or	r16,r4,r16
    b0e4:	057f0084 	movi	r21,-1022
    b0e8:	a8ebc83a 	sub	r21,r21,r3
    b0ec:	0027883a 	mov	r19,zero
    b0f0:	0013883a 	mov	r9,zero
    b0f4:	003f9106 	br	af3c <__divdf3+0x78>
    b0f8:	3444b03a 	or	r2,r6,r17
    b0fc:	10001f1e 	bne	r2,zero,b17c <__divdf3+0x2b8>
    b100:	0023883a 	mov	r17,zero
    b104:	0011883a 	mov	r8,zero
    b108:	01800084 	movi	r6,2
    b10c:	003f9d06 	br	af84 <__divdf3+0xc0>
    b110:	3444b03a 	or	r2,r6,r17
    b114:	10001526 	beq	r2,zero,b16c <__divdf3+0x2a8>
    b118:	88011b26 	beq	r17,zero,b588 <__divdf3+0x6c4>
    b11c:	8809883a 	mov	r4,r17
    b120:	d9800315 	stw	r6,12(sp)
    b124:	da400115 	stw	r9,4(sp)
    b128:	000cc1c0 	call	cc1c <__clzsi2>
    b12c:	d9800317 	ldw	r6,12(sp)
    b130:	da400117 	ldw	r9,4(sp)
    b134:	10fffd44 	addi	r3,r2,-11
    b138:	01000704 	movi	r4,28
    b13c:	20c10e16 	blt	r4,r3,b578 <__divdf3+0x6b4>
    b140:	01000744 	movi	r4,29
    b144:	123ffe04 	addi	r8,r2,-8
    b148:	20c9c83a 	sub	r4,r4,r3
    b14c:	8a22983a 	sll	r17,r17,r8
    b150:	3108d83a 	srl	r4,r6,r4
    b154:	3210983a 	sll	r8,r6,r8
    b158:	2462b03a 	or	r17,r4,r17
    b15c:	013f0084 	movi	r4,-1022
    b160:	20c9c83a 	sub	r4,r4,r3
    b164:	000d883a 	mov	r6,zero
    b168:	003f8606 	br	af84 <__divdf3+0xc0>
    b16c:	0023883a 	mov	r17,zero
    b170:	0011883a 	mov	r8,zero
    b174:	01800044 	movi	r6,1
    b178:	003f8206 	br	af84 <__divdf3+0xc0>
    b17c:	018000c4 	movi	r6,3
    b180:	003f8006 	br	af84 <__divdf3+0xc0>
    b184:	04c00104 	movi	r19,4
    b188:	0021883a 	mov	r16,zero
    b18c:	0025883a 	mov	r18,zero
    b190:	02400044 	movi	r9,1
    b194:	003f6906 	br	af3c <__divdf3+0x78>
    b198:	04c00304 	movi	r19,12
    b19c:	024000c4 	movi	r9,3
    b1a0:	003f6606 	br	af3c <__divdf3+0x78>
    b1a4:	01400434 	movhi	r5,16
    b1a8:	0007883a 	mov	r3,zero
    b1ac:	297fffc4 	addi	r5,r5,-1
    b1b0:	04bfffc4 	movi	r18,-1
    b1b4:	0081ffc4 	movi	r2,2047
    b1b8:	003fa106 	br	b040 <__divdf3+0x17c>
    b1bc:	00c00044 	movi	r3,1
    b1c0:	1887c83a 	sub	r3,r3,r2
    b1c4:	01000e04 	movi	r4,56
    b1c8:	20c1210e 	bge	r4,r3,b650 <__divdf3+0x78c>
    b1cc:	98c0004c 	andi	r3,r19,1
    b1d0:	0005883a 	mov	r2,zero
    b1d4:	000b883a 	mov	r5,zero
    b1d8:	0025883a 	mov	r18,zero
    b1dc:	003f9806 	br	b040 <__divdf3+0x17c>
    b1e0:	8c00fd36 	bltu	r17,r16,b5d8 <__divdf3+0x714>
    b1e4:	8440fb26 	beq	r16,r17,b5d4 <__divdf3+0x710>
    b1e8:	8007883a 	mov	r3,r16
    b1ec:	ad7fffc4 	addi	r21,r21,-1
    b1f0:	0021883a 	mov	r16,zero
    b1f4:	400ad63a 	srli	r5,r8,24
    b1f8:	8822923a 	slli	r17,r17,8
    b1fc:	1809883a 	mov	r4,r3
    b200:	402c923a 	slli	r22,r8,8
    b204:	8978b03a 	or	fp,r17,r5
    b208:	e028d43a 	srli	r20,fp,16
    b20c:	d8c00015 	stw	r3,0(sp)
    b210:	e5ffffcc 	andi	r23,fp,65535
    b214:	a00b883a 	mov	r5,r20
    b218:	000a55c0 	call	a55c <__udivsi3>
    b21c:	d8c00017 	ldw	r3,0(sp)
    b220:	a00b883a 	mov	r5,r20
    b224:	d8800315 	stw	r2,12(sp)
    b228:	1809883a 	mov	r4,r3
    b22c:	000a5c00 	call	a5c0 <__umodsi3>
    b230:	d9800317 	ldw	r6,12(sp)
    b234:	1006943a 	slli	r3,r2,16
    b238:	9004d43a 	srli	r2,r18,16
    b23c:	b9a3383a 	mul	r17,r23,r6
    b240:	10c4b03a 	or	r2,r2,r3
    b244:	1440062e 	bgeu	r2,r17,b260 <__divdf3+0x39c>
    b248:	1705883a 	add	r2,r2,fp
    b24c:	30ffffc4 	addi	r3,r6,-1
    b250:	1700ee36 	bltu	r2,fp,b60c <__divdf3+0x748>
    b254:	1440ed2e 	bgeu	r2,r17,b60c <__divdf3+0x748>
    b258:	31bfff84 	addi	r6,r6,-2
    b25c:	1705883a 	add	r2,r2,fp
    b260:	1463c83a 	sub	r17,r2,r17
    b264:	a00b883a 	mov	r5,r20
    b268:	8809883a 	mov	r4,r17
    b26c:	d9800315 	stw	r6,12(sp)
    b270:	000a55c0 	call	a55c <__udivsi3>
    b274:	a00b883a 	mov	r5,r20
    b278:	8809883a 	mov	r4,r17
    b27c:	d8800215 	stw	r2,8(sp)
    b280:	000a5c00 	call	a5c0 <__umodsi3>
    b284:	d9c00217 	ldw	r7,8(sp)
    b288:	1004943a 	slli	r2,r2,16
    b28c:	94bfffcc 	andi	r18,r18,65535
    b290:	b9d1383a 	mul	r8,r23,r7
    b294:	90a4b03a 	or	r18,r18,r2
    b298:	d9800317 	ldw	r6,12(sp)
    b29c:	9200062e 	bgeu	r18,r8,b2b8 <__divdf3+0x3f4>
    b2a0:	9725883a 	add	r18,r18,fp
    b2a4:	38bfffc4 	addi	r2,r7,-1
    b2a8:	9700d636 	bltu	r18,fp,b604 <__divdf3+0x740>
    b2ac:	9200d52e 	bgeu	r18,r8,b604 <__divdf3+0x740>
    b2b0:	39ffff84 	addi	r7,r7,-2
    b2b4:	9725883a 	add	r18,r18,fp
    b2b8:	3004943a 	slli	r2,r6,16
    b2bc:	b012d43a 	srli	r9,r22,16
    b2c0:	b1bfffcc 	andi	r6,r22,65535
    b2c4:	11e2b03a 	or	r17,r2,r7
    b2c8:	8806d43a 	srli	r3,r17,16
    b2cc:	893fffcc 	andi	r4,r17,65535
    b2d0:	218b383a 	mul	r5,r4,r6
    b2d4:	30c5383a 	mul	r2,r6,r3
    b2d8:	2249383a 	mul	r4,r4,r9
    b2dc:	280ed43a 	srli	r7,r5,16
    b2e0:	9225c83a 	sub	r18,r18,r8
    b2e4:	2089883a 	add	r4,r4,r2
    b2e8:	3909883a 	add	r4,r7,r4
    b2ec:	1a47383a 	mul	r3,r3,r9
    b2f0:	2080022e 	bgeu	r4,r2,b2fc <__divdf3+0x438>
    b2f4:	00800074 	movhi	r2,1
    b2f8:	1887883a 	add	r3,r3,r2
    b2fc:	2004d43a 	srli	r2,r4,16
    b300:	2008943a 	slli	r4,r4,16
    b304:	297fffcc 	andi	r5,r5,65535
    b308:	10c7883a 	add	r3,r2,r3
    b30c:	2149883a 	add	r4,r4,r5
    b310:	90c0a536 	bltu	r18,r3,b5a8 <__divdf3+0x6e4>
    b314:	90c0bf26 	beq	r18,r3,b614 <__divdf3+0x750>
    b318:	90c7c83a 	sub	r3,r18,r3
    b31c:	810fc83a 	sub	r7,r16,r4
    b320:	81e5803a 	cmpltu	r18,r16,r7
    b324:	1ca5c83a 	sub	r18,r3,r18
    b328:	e480c126 	beq	fp,r18,b630 <__divdf3+0x76c>
    b32c:	a00b883a 	mov	r5,r20
    b330:	9009883a 	mov	r4,r18
    b334:	d9800315 	stw	r6,12(sp)
    b338:	d9c00215 	stw	r7,8(sp)
    b33c:	da400115 	stw	r9,4(sp)
    b340:	000a55c0 	call	a55c <__udivsi3>
    b344:	a00b883a 	mov	r5,r20
    b348:	9009883a 	mov	r4,r18
    b34c:	d8800015 	stw	r2,0(sp)
    b350:	000a5c00 	call	a5c0 <__umodsi3>
    b354:	d9c00217 	ldw	r7,8(sp)
    b358:	da000017 	ldw	r8,0(sp)
    b35c:	1006943a 	slli	r3,r2,16
    b360:	3804d43a 	srli	r2,r7,16
    b364:	ba21383a 	mul	r16,r23,r8
    b368:	d9800317 	ldw	r6,12(sp)
    b36c:	10c4b03a 	or	r2,r2,r3
    b370:	da400117 	ldw	r9,4(sp)
    b374:	1400062e 	bgeu	r2,r16,b390 <__divdf3+0x4cc>
    b378:	1705883a 	add	r2,r2,fp
    b37c:	40ffffc4 	addi	r3,r8,-1
    b380:	1700ad36 	bltu	r2,fp,b638 <__divdf3+0x774>
    b384:	1400ac2e 	bgeu	r2,r16,b638 <__divdf3+0x774>
    b388:	423fff84 	addi	r8,r8,-2
    b38c:	1705883a 	add	r2,r2,fp
    b390:	1421c83a 	sub	r16,r2,r16
    b394:	a00b883a 	mov	r5,r20
    b398:	8009883a 	mov	r4,r16
    b39c:	d9800315 	stw	r6,12(sp)
    b3a0:	d9c00215 	stw	r7,8(sp)
    b3a4:	da000015 	stw	r8,0(sp)
    b3a8:	da400115 	stw	r9,4(sp)
    b3ac:	000a55c0 	call	a55c <__udivsi3>
    b3b0:	8009883a 	mov	r4,r16
    b3b4:	a00b883a 	mov	r5,r20
    b3b8:	1025883a 	mov	r18,r2
    b3bc:	000a5c00 	call	a5c0 <__umodsi3>
    b3c0:	d9c00217 	ldw	r7,8(sp)
    b3c4:	1004943a 	slli	r2,r2,16
    b3c8:	bcaf383a 	mul	r23,r23,r18
    b3cc:	393fffcc 	andi	r4,r7,65535
    b3d0:	2088b03a 	or	r4,r4,r2
    b3d4:	d9800317 	ldw	r6,12(sp)
    b3d8:	da000017 	ldw	r8,0(sp)
    b3dc:	da400117 	ldw	r9,4(sp)
    b3e0:	25c0062e 	bgeu	r4,r23,b3fc <__divdf3+0x538>
    b3e4:	2709883a 	add	r4,r4,fp
    b3e8:	90bfffc4 	addi	r2,r18,-1
    b3ec:	27009436 	bltu	r4,fp,b640 <__divdf3+0x77c>
    b3f0:	25c0932e 	bgeu	r4,r23,b640 <__divdf3+0x77c>
    b3f4:	94bfff84 	addi	r18,r18,-2
    b3f8:	2709883a 	add	r4,r4,fp
    b3fc:	4004943a 	slli	r2,r8,16
    b400:	25efc83a 	sub	r23,r4,r23
    b404:	1490b03a 	or	r8,r2,r18
    b408:	4008d43a 	srli	r4,r8,16
    b40c:	40ffffcc 	andi	r3,r8,65535
    b410:	30c5383a 	mul	r2,r6,r3
    b414:	1a47383a 	mul	r3,r3,r9
    b418:	310d383a 	mul	r6,r6,r4
    b41c:	100ad43a 	srli	r5,r2,16
    b420:	4913383a 	mul	r9,r9,r4
    b424:	1987883a 	add	r3,r3,r6
    b428:	28c7883a 	add	r3,r5,r3
    b42c:	1980022e 	bgeu	r3,r6,b438 <__divdf3+0x574>
    b430:	01000074 	movhi	r4,1
    b434:	4913883a 	add	r9,r9,r4
    b438:	1808d43a 	srli	r4,r3,16
    b43c:	1806943a 	slli	r3,r3,16
    b440:	10bfffcc 	andi	r2,r2,65535
    b444:	2253883a 	add	r9,r4,r9
    b448:	1887883a 	add	r3,r3,r2
    b44c:	ba403836 	bltu	r23,r9,b530 <__divdf3+0x66c>
    b450:	ba403626 	beq	r23,r9,b52c <__divdf3+0x668>
    b454:	42000054 	ori	r8,r8,1
    b458:	a880ffc4 	addi	r2,r21,1023
    b45c:	00bf570e 	bge	zero,r2,b1bc <__divdf3+0x2f8>
    b460:	40c001cc 	andi	r3,r8,7
    b464:	18000726 	beq	r3,zero,b484 <__divdf3+0x5c0>
    b468:	40c003cc 	andi	r3,r8,15
    b46c:	01000104 	movi	r4,4
    b470:	19000426 	beq	r3,r4,b484 <__divdf3+0x5c0>
    b474:	4107883a 	add	r3,r8,r4
    b478:	1a11803a 	cmpltu	r8,r3,r8
    b47c:	8a23883a 	add	r17,r17,r8
    b480:	1811883a 	mov	r8,r3
    b484:	88c0402c 	andhi	r3,r17,256
    b488:	18000426 	beq	r3,zero,b49c <__divdf3+0x5d8>
    b48c:	00ffc034 	movhi	r3,65280
    b490:	18ffffc4 	addi	r3,r3,-1
    b494:	a8810004 	addi	r2,r21,1024
    b498:	88e2703a 	and	r17,r17,r3
    b49c:	00c1ff84 	movi	r3,2046
    b4a0:	18bee316 	blt	r3,r2,b030 <__divdf3+0x16c>
    b4a4:	8824977a 	slli	r18,r17,29
    b4a8:	4010d0fa 	srli	r8,r8,3
    b4ac:	8822927a 	slli	r17,r17,9
    b4b0:	1081ffcc 	andi	r2,r2,2047
    b4b4:	9224b03a 	or	r18,r18,r8
    b4b8:	880ad33a 	srli	r5,r17,12
    b4bc:	98c0004c 	andi	r3,r19,1
    b4c0:	003edf06 	br	b040 <__divdf3+0x17c>
    b4c4:	8080022c 	andhi	r2,r16,8
    b4c8:	10001226 	beq	r2,zero,b514 <__divdf3+0x650>
    b4cc:	8880022c 	andhi	r2,r17,8
    b4d0:	1000101e 	bne	r2,zero,b514 <__divdf3+0x650>
    b4d4:	00800434 	movhi	r2,16
    b4d8:	89400234 	orhi	r5,r17,8
    b4dc:	10bfffc4 	addi	r2,r2,-1
    b4e0:	b007883a 	mov	r3,r22
    b4e4:	288a703a 	and	r5,r5,r2
    b4e8:	4025883a 	mov	r18,r8
    b4ec:	003f3106 	br	b1b4 <__divdf3+0x2f0>
    b4f0:	008000c4 	movi	r2,3
    b4f4:	3080a626 	beq	r6,r2,b790 <__divdf3+0x8cc>
    b4f8:	00800044 	movi	r2,1
    b4fc:	3080521e 	bne	r6,r2,b648 <__divdf3+0x784>
    b500:	b807883a 	mov	r3,r23
    b504:	0005883a 	mov	r2,zero
    b508:	000b883a 	mov	r5,zero
    b50c:	0025883a 	mov	r18,zero
    b510:	003ecb06 	br	b040 <__divdf3+0x17c>
    b514:	00800434 	movhi	r2,16
    b518:	81400234 	orhi	r5,r16,8
    b51c:	10bfffc4 	addi	r2,r2,-1
    b520:	a007883a 	mov	r3,r20
    b524:	288a703a 	and	r5,r5,r2
    b528:	003f2206 	br	b1b4 <__divdf3+0x2f0>
    b52c:	183fca26 	beq	r3,zero,b458 <__divdf3+0x594>
    b530:	e5ef883a 	add	r23,fp,r23
    b534:	40bfffc4 	addi	r2,r8,-1
    b538:	bf00392e 	bgeu	r23,fp,b620 <__divdf3+0x75c>
    b53c:	1011883a 	mov	r8,r2
    b540:	ba7fc41e 	bne	r23,r9,b454 <__divdf3+0x590>
    b544:	b0ffc31e 	bne	r22,r3,b454 <__divdf3+0x590>
    b548:	003fc306 	br	b458 <__divdf3+0x594>
    b54c:	10bff604 	addi	r2,r2,-40
    b550:	98a0983a 	sll	r16,r19,r2
    b554:	0025883a 	mov	r18,zero
    b558:	003ee206 	br	b0e4 <__divdf3+0x220>
    b55c:	d9800315 	stw	r6,12(sp)
    b560:	d9c00215 	stw	r7,8(sp)
    b564:	000cc1c0 	call	cc1c <__clzsi2>
    b568:	10800804 	addi	r2,r2,32
    b56c:	d9c00217 	ldw	r7,8(sp)
    b570:	d9800317 	ldw	r6,12(sp)
    b574:	003ed106 	br	b0bc <__divdf3+0x1f8>
    b578:	10bff604 	addi	r2,r2,-40
    b57c:	30a2983a 	sll	r17,r6,r2
    b580:	0011883a 	mov	r8,zero
    b584:	003ef506 	br	b15c <__divdf3+0x298>
    b588:	3009883a 	mov	r4,r6
    b58c:	d9800315 	stw	r6,12(sp)
    b590:	da400115 	stw	r9,4(sp)
    b594:	000cc1c0 	call	cc1c <__clzsi2>
    b598:	10800804 	addi	r2,r2,32
    b59c:	da400117 	ldw	r9,4(sp)
    b5a0:	d9800317 	ldw	r6,12(sp)
    b5a4:	003ee306 	br	b134 <__divdf3+0x270>
    b5a8:	85a1883a 	add	r16,r16,r22
    b5ac:	8585803a 	cmpltu	r2,r16,r22
    b5b0:	1705883a 	add	r2,r2,fp
    b5b4:	14a5883a 	add	r18,r2,r18
    b5b8:	88bfffc4 	addi	r2,r17,-1
    b5bc:	e4800c2e 	bgeu	fp,r18,b5f0 <__divdf3+0x72c>
    b5c0:	90c03e36 	bltu	r18,r3,b6bc <__divdf3+0x7f8>
    b5c4:	1c806926 	beq	r3,r18,b76c <__divdf3+0x8a8>
    b5c8:	90c7c83a 	sub	r3,r18,r3
    b5cc:	1023883a 	mov	r17,r2
    b5d0:	003f5206 	br	b31c <__divdf3+0x458>
    b5d4:	923f0436 	bltu	r18,r8,b1e8 <__divdf3+0x324>
    b5d8:	800897fa 	slli	r4,r16,31
    b5dc:	9004d07a 	srli	r2,r18,1
    b5e0:	8006d07a 	srli	r3,r16,1
    b5e4:	902097fa 	slli	r16,r18,31
    b5e8:	20a4b03a 	or	r18,r4,r2
    b5ec:	003f0106 	br	b1f4 <__divdf3+0x330>
    b5f0:	e4bff51e 	bne	fp,r18,b5c8 <__divdf3+0x704>
    b5f4:	85bff22e 	bgeu	r16,r22,b5c0 <__divdf3+0x6fc>
    b5f8:	e0c7c83a 	sub	r3,fp,r3
    b5fc:	1023883a 	mov	r17,r2
    b600:	003f4606 	br	b31c <__divdf3+0x458>
    b604:	100f883a 	mov	r7,r2
    b608:	003f2b06 	br	b2b8 <__divdf3+0x3f4>
    b60c:	180d883a 	mov	r6,r3
    b610:	003f1306 	br	b260 <__divdf3+0x39c>
    b614:	813fe436 	bltu	r16,r4,b5a8 <__divdf3+0x6e4>
    b618:	0007883a 	mov	r3,zero
    b61c:	003f3f06 	br	b31c <__divdf3+0x458>
    b620:	ba402c36 	bltu	r23,r9,b6d4 <__divdf3+0x810>
    b624:	4dc05426 	beq	r9,r23,b778 <__divdf3+0x8b4>
    b628:	1011883a 	mov	r8,r2
    b62c:	003f8906 	br	b454 <__divdf3+0x590>
    b630:	023fffc4 	movi	r8,-1
    b634:	003f8806 	br	b458 <__divdf3+0x594>
    b638:	1811883a 	mov	r8,r3
    b63c:	003f5406 	br	b390 <__divdf3+0x4cc>
    b640:	1025883a 	mov	r18,r2
    b644:	003f6d06 	br	b3fc <__divdf3+0x538>
    b648:	b827883a 	mov	r19,r23
    b64c:	003f8206 	br	b458 <__divdf3+0x594>
    b650:	010007c4 	movi	r4,31
    b654:	20c02616 	blt	r4,r3,b6f0 <__divdf3+0x82c>
    b658:	00800804 	movi	r2,32
    b65c:	10c5c83a 	sub	r2,r2,r3
    b660:	888a983a 	sll	r5,r17,r2
    b664:	40c8d83a 	srl	r4,r8,r3
    b668:	4084983a 	sll	r2,r8,r2
    b66c:	88e2d83a 	srl	r17,r17,r3
    b670:	2906b03a 	or	r3,r5,r4
    b674:	1004c03a 	cmpne	r2,r2,zero
    b678:	1886b03a 	or	r3,r3,r2
    b67c:	188001cc 	andi	r2,r3,7
    b680:	10000726 	beq	r2,zero,b6a0 <__divdf3+0x7dc>
    b684:	188003cc 	andi	r2,r3,15
    b688:	01000104 	movi	r4,4
    b68c:	11000426 	beq	r2,r4,b6a0 <__divdf3+0x7dc>
    b690:	1805883a 	mov	r2,r3
    b694:	10c00104 	addi	r3,r2,4
    b698:	1885803a 	cmpltu	r2,r3,r2
    b69c:	88a3883a 	add	r17,r17,r2
    b6a0:	8880202c 	andhi	r2,r17,128
    b6a4:	10002726 	beq	r2,zero,b744 <__divdf3+0x880>
    b6a8:	98c0004c 	andi	r3,r19,1
    b6ac:	00800044 	movi	r2,1
    b6b0:	000b883a 	mov	r5,zero
    b6b4:	0025883a 	mov	r18,zero
    b6b8:	003e6106 	br	b040 <__divdf3+0x17c>
    b6bc:	85a1883a 	add	r16,r16,r22
    b6c0:	8585803a 	cmpltu	r2,r16,r22
    b6c4:	1705883a 	add	r2,r2,fp
    b6c8:	14a5883a 	add	r18,r2,r18
    b6cc:	8c7fff84 	addi	r17,r17,-2
    b6d0:	003f1106 	br	b318 <__divdf3+0x454>
    b6d4:	b589883a 	add	r4,r22,r22
    b6d8:	25ad803a 	cmpltu	r22,r4,r22
    b6dc:	b739883a 	add	fp,r22,fp
    b6e0:	40bfff84 	addi	r2,r8,-2
    b6e4:	bf2f883a 	add	r23,r23,fp
    b6e8:	202d883a 	mov	r22,r4
    b6ec:	003f9306 	br	b53c <__divdf3+0x678>
    b6f0:	013ff844 	movi	r4,-31
    b6f4:	2085c83a 	sub	r2,r4,r2
    b6f8:	8888d83a 	srl	r4,r17,r2
    b6fc:	00800804 	movi	r2,32
    b700:	18802126 	beq	r3,r2,b788 <__divdf3+0x8c4>
    b704:	00801004 	movi	r2,64
    b708:	10c5c83a 	sub	r2,r2,r3
    b70c:	8884983a 	sll	r2,r17,r2
    b710:	1204b03a 	or	r2,r2,r8
    b714:	1004c03a 	cmpne	r2,r2,zero
    b718:	2084b03a 	or	r2,r4,r2
    b71c:	144001cc 	andi	r17,r2,7
    b720:	88000d1e 	bne	r17,zero,b758 <__divdf3+0x894>
    b724:	000b883a 	mov	r5,zero
    b728:	1024d0fa 	srli	r18,r2,3
    b72c:	98c0004c 	andi	r3,r19,1
    b730:	0005883a 	mov	r2,zero
    b734:	9464b03a 	or	r18,r18,r17
    b738:	003e4106 	br	b040 <__divdf3+0x17c>
    b73c:	1007883a 	mov	r3,r2
    b740:	0023883a 	mov	r17,zero
    b744:	880a927a 	slli	r5,r17,9
    b748:	1805883a 	mov	r2,r3
    b74c:	8822977a 	slli	r17,r17,29
    b750:	280ad33a 	srli	r5,r5,12
    b754:	003ff406 	br	b728 <__divdf3+0x864>
    b758:	10c003cc 	andi	r3,r2,15
    b75c:	01000104 	movi	r4,4
    b760:	193ff626 	beq	r3,r4,b73c <__divdf3+0x878>
    b764:	0023883a 	mov	r17,zero
    b768:	003fca06 	br	b694 <__divdf3+0x7d0>
    b76c:	813fd336 	bltu	r16,r4,b6bc <__divdf3+0x7f8>
    b770:	1023883a 	mov	r17,r2
    b774:	003fa806 	br	b618 <__divdf3+0x754>
    b778:	b0ffd636 	bltu	r22,r3,b6d4 <__divdf3+0x810>
    b77c:	1011883a 	mov	r8,r2
    b780:	b0ff341e 	bne	r22,r3,b454 <__divdf3+0x590>
    b784:	003f3406 	br	b458 <__divdf3+0x594>
    b788:	0005883a 	mov	r2,zero
    b78c:	003fe006 	br	b710 <__divdf3+0x84c>
    b790:	00800434 	movhi	r2,16
    b794:	89400234 	orhi	r5,r17,8
    b798:	10bfffc4 	addi	r2,r2,-1
    b79c:	b807883a 	mov	r3,r23
    b7a0:	288a703a 	and	r5,r5,r2
    b7a4:	4025883a 	mov	r18,r8
    b7a8:	003e8206 	br	b1b4 <__divdf3+0x2f0>

0000b7ac <__eqdf2>:
    b7ac:	2804d53a 	srli	r2,r5,20
    b7b0:	3806d53a 	srli	r3,r7,20
    b7b4:	02000434 	movhi	r8,16
    b7b8:	423fffc4 	addi	r8,r8,-1
    b7bc:	1081ffcc 	andi	r2,r2,2047
    b7c0:	0281ffc4 	movi	r10,2047
    b7c4:	2a12703a 	and	r9,r5,r8
    b7c8:	18c1ffcc 	andi	r3,r3,2047
    b7cc:	3a10703a 	and	r8,r7,r8
    b7d0:	280ad7fa 	srli	r5,r5,31
    b7d4:	380ed7fa 	srli	r7,r7,31
    b7d8:	12801026 	beq	r2,r10,b81c <__eqdf2+0x70>
    b7dc:	0281ffc4 	movi	r10,2047
    b7e0:	1a800a26 	beq	r3,r10,b80c <__eqdf2+0x60>
    b7e4:	10c00226 	beq	r2,r3,b7f0 <__eqdf2+0x44>
    b7e8:	00800044 	movi	r2,1
    b7ec:	f800283a 	ret
    b7f0:	4a3ffd1e 	bne	r9,r8,b7e8 <__eqdf2+0x3c>
    b7f4:	21bffc1e 	bne	r4,r6,b7e8 <__eqdf2+0x3c>
    b7f8:	29c00c26 	beq	r5,r7,b82c <__eqdf2+0x80>
    b7fc:	103ffa1e 	bne	r2,zero,b7e8 <__eqdf2+0x3c>
    b800:	2244b03a 	or	r2,r4,r9
    b804:	1004c03a 	cmpne	r2,r2,zero
    b808:	f800283a 	ret
    b80c:	3214b03a 	or	r10,r6,r8
    b810:	503ff426 	beq	r10,zero,b7e4 <__eqdf2+0x38>
    b814:	00800044 	movi	r2,1
    b818:	f800283a 	ret
    b81c:	2254b03a 	or	r10,r4,r9
    b820:	503fee26 	beq	r10,zero,b7dc <__eqdf2+0x30>
    b824:	00800044 	movi	r2,1
    b828:	f800283a 	ret
    b82c:	0005883a 	mov	r2,zero
    b830:	f800283a 	ret

0000b834 <__gedf2>:
    b834:	2804d53a 	srli	r2,r5,20
    b838:	3806d53a 	srli	r3,r7,20
    b83c:	02000434 	movhi	r8,16
    b840:	423fffc4 	addi	r8,r8,-1
    b844:	1081ffcc 	andi	r2,r2,2047
    b848:	0241ffc4 	movi	r9,2047
    b84c:	2a14703a 	and	r10,r5,r8
    b850:	18c1ffcc 	andi	r3,r3,2047
    b854:	3a10703a 	and	r8,r7,r8
    b858:	280ad7fa 	srli	r5,r5,31
    b85c:	380ed7fa 	srli	r7,r7,31
    b860:	12401d26 	beq	r2,r9,b8d8 <__gedf2+0xa4>
    b864:	0241ffc4 	movi	r9,2047
    b868:	1a401226 	beq	r3,r9,b8b4 <__gedf2+0x80>
    b86c:	1000081e 	bne	r2,zero,b890 <__gedf2+0x5c>
    b870:	2296b03a 	or	r11,r4,r10
    b874:	5813003a 	cmpeq	r9,r11,zero
    b878:	1800091e 	bne	r3,zero,b8a0 <__gedf2+0x6c>
    b87c:	3218b03a 	or	r12,r6,r8
    b880:	6000071e 	bne	r12,zero,b8a0 <__gedf2+0x6c>
    b884:	0005883a 	mov	r2,zero
    b888:	5800101e 	bne	r11,zero,b8cc <__gedf2+0x98>
    b88c:	f800283a 	ret
    b890:	18000c1e 	bne	r3,zero,b8c4 <__gedf2+0x90>
    b894:	3212b03a 	or	r9,r6,r8
    b898:	48000c26 	beq	r9,zero,b8cc <__gedf2+0x98>
    b89c:	0013883a 	mov	r9,zero
    b8a0:	39c03fcc 	andi	r7,r7,255
    b8a4:	48000826 	beq	r9,zero,b8c8 <__gedf2+0x94>
    b8a8:	38000926 	beq	r7,zero,b8d0 <__gedf2+0x9c>
    b8ac:	00800044 	movi	r2,1
    b8b0:	f800283a 	ret
    b8b4:	3212b03a 	or	r9,r6,r8
    b8b8:	483fec26 	beq	r9,zero,b86c <__gedf2+0x38>
    b8bc:	00bfff84 	movi	r2,-2
    b8c0:	f800283a 	ret
    b8c4:	39c03fcc 	andi	r7,r7,255
    b8c8:	29c00626 	beq	r5,r7,b8e4 <__gedf2+0xb0>
    b8cc:	283ff726 	beq	r5,zero,b8ac <__gedf2+0x78>
    b8d0:	00bfffc4 	movi	r2,-1
    b8d4:	f800283a 	ret
    b8d8:	2292b03a 	or	r9,r4,r10
    b8dc:	483fe126 	beq	r9,zero,b864 <__gedf2+0x30>
    b8e0:	003ff606 	br	b8bc <__gedf2+0x88>
    b8e4:	18bff916 	blt	r3,r2,b8cc <__gedf2+0x98>
    b8e8:	10c00316 	blt	r2,r3,b8f8 <__gedf2+0xc4>
    b8ec:	42bff736 	bltu	r8,r10,b8cc <__gedf2+0x98>
    b8f0:	52000326 	beq	r10,r8,b900 <__gedf2+0xcc>
    b8f4:	5200042e 	bgeu	r10,r8,b908 <__gedf2+0xd4>
    b8f8:	283fec1e 	bne	r5,zero,b8ac <__gedf2+0x78>
    b8fc:	003ff406 	br	b8d0 <__gedf2+0x9c>
    b900:	313ff236 	bltu	r6,r4,b8cc <__gedf2+0x98>
    b904:	21bffc36 	bltu	r4,r6,b8f8 <__gedf2+0xc4>
    b908:	0005883a 	mov	r2,zero
    b90c:	f800283a 	ret

0000b910 <__ledf2>:
    b910:	2804d53a 	srli	r2,r5,20
    b914:	3810d53a 	srli	r8,r7,20
    b918:	00c00434 	movhi	r3,16
    b91c:	18ffffc4 	addi	r3,r3,-1
    b920:	1081ffcc 	andi	r2,r2,2047
    b924:	0241ffc4 	movi	r9,2047
    b928:	28d4703a 	and	r10,r5,r3
    b92c:	4201ffcc 	andi	r8,r8,2047
    b930:	38c6703a 	and	r3,r7,r3
    b934:	280ad7fa 	srli	r5,r5,31
    b938:	380ed7fa 	srli	r7,r7,31
    b93c:	12401f26 	beq	r2,r9,b9bc <__ledf2+0xac>
    b940:	0241ffc4 	movi	r9,2047
    b944:	42401426 	beq	r8,r9,b998 <__ledf2+0x88>
    b948:	1000091e 	bne	r2,zero,b970 <__ledf2+0x60>
    b94c:	2296b03a 	or	r11,r4,r10
    b950:	5813003a 	cmpeq	r9,r11,zero
    b954:	29403fcc 	andi	r5,r5,255
    b958:	40000a1e 	bne	r8,zero,b984 <__ledf2+0x74>
    b95c:	30d8b03a 	or	r12,r6,r3
    b960:	6000081e 	bne	r12,zero,b984 <__ledf2+0x74>
    b964:	0005883a 	mov	r2,zero
    b968:	5800111e 	bne	r11,zero,b9b0 <__ledf2+0xa0>
    b96c:	f800283a 	ret
    b970:	29403fcc 	andi	r5,r5,255
    b974:	40000c1e 	bne	r8,zero,b9a8 <__ledf2+0x98>
    b978:	30d2b03a 	or	r9,r6,r3
    b97c:	48000c26 	beq	r9,zero,b9b0 <__ledf2+0xa0>
    b980:	0013883a 	mov	r9,zero
    b984:	39c03fcc 	andi	r7,r7,255
    b988:	48000826 	beq	r9,zero,b9ac <__ledf2+0x9c>
    b98c:	38001126 	beq	r7,zero,b9d4 <__ledf2+0xc4>
    b990:	00800044 	movi	r2,1
    b994:	f800283a 	ret
    b998:	30d2b03a 	or	r9,r6,r3
    b99c:	483fea26 	beq	r9,zero,b948 <__ledf2+0x38>
    b9a0:	00800084 	movi	r2,2
    b9a4:	f800283a 	ret
    b9a8:	39c03fcc 	andi	r7,r7,255
    b9ac:	39400726 	beq	r7,r5,b9cc <__ledf2+0xbc>
    b9b0:	2800081e 	bne	r5,zero,b9d4 <__ledf2+0xc4>
    b9b4:	00800044 	movi	r2,1
    b9b8:	f800283a 	ret
    b9bc:	2292b03a 	or	r9,r4,r10
    b9c0:	483fdf26 	beq	r9,zero,b940 <__ledf2+0x30>
    b9c4:	00800084 	movi	r2,2
    b9c8:	f800283a 	ret
    b9cc:	4080030e 	bge	r8,r2,b9dc <__ledf2+0xcc>
    b9d0:	383fef26 	beq	r7,zero,b990 <__ledf2+0x80>
    b9d4:	00bfffc4 	movi	r2,-1
    b9d8:	f800283a 	ret
    b9dc:	123feb16 	blt	r2,r8,b98c <__ledf2+0x7c>
    b9e0:	1abff336 	bltu	r3,r10,b9b0 <__ledf2+0xa0>
    b9e4:	50c00326 	beq	r10,r3,b9f4 <__ledf2+0xe4>
    b9e8:	50c0042e 	bgeu	r10,r3,b9fc <__ledf2+0xec>
    b9ec:	283fe81e 	bne	r5,zero,b990 <__ledf2+0x80>
    b9f0:	003ff806 	br	b9d4 <__ledf2+0xc4>
    b9f4:	313fee36 	bltu	r6,r4,b9b0 <__ledf2+0xa0>
    b9f8:	21bffc36 	bltu	r4,r6,b9ec <__ledf2+0xdc>
    b9fc:	0005883a 	mov	r2,zero
    ba00:	f800283a 	ret

0000ba04 <__muldf3>:
    ba04:	defff304 	addi	sp,sp,-52
    ba08:	dd400815 	stw	r21,32(sp)
    ba0c:	282ad53a 	srli	r21,r5,20
    ba10:	dd800915 	stw	r22,36(sp)
    ba14:	282cd7fa 	srli	r22,r5,31
    ba18:	dc000315 	stw	r16,12(sp)
    ba1c:	04000434 	movhi	r16,16
    ba20:	dd000715 	stw	r20,28(sp)
    ba24:	843fffc4 	addi	r16,r16,-1
    ba28:	dfc00c15 	stw	ra,48(sp)
    ba2c:	df000b15 	stw	fp,44(sp)
    ba30:	ddc00a15 	stw	r23,40(sp)
    ba34:	dcc00615 	stw	r19,24(sp)
    ba38:	dc800515 	stw	r18,20(sp)
    ba3c:	dc400415 	stw	r17,16(sp)
    ba40:	ad41ffcc 	andi	r21,r21,2047
    ba44:	2c20703a 	and	r16,r5,r16
    ba48:	b029883a 	mov	r20,r22
    ba4c:	b2403fcc 	andi	r9,r22,255
    ba50:	a8006026 	beq	r21,zero,bbd4 <__muldf3+0x1d0>
    ba54:	0081ffc4 	movi	r2,2047
    ba58:	2027883a 	mov	r19,r4
    ba5c:	a8803626 	beq	r21,r2,bb38 <__muldf3+0x134>
    ba60:	80c00434 	orhi	r3,r16,16
    ba64:	180690fa 	slli	r3,r3,3
    ba68:	2020d77a 	srli	r16,r4,29
    ba6c:	202690fa 	slli	r19,r4,3
    ba70:	ad7f0044 	addi	r21,r21,-1023
    ba74:	80e0b03a 	or	r16,r16,r3
    ba78:	0025883a 	mov	r18,zero
    ba7c:	0039883a 	mov	fp,zero
    ba80:	3808d53a 	srli	r4,r7,20
    ba84:	382ed7fa 	srli	r23,r7,31
    ba88:	04400434 	movhi	r17,16
    ba8c:	8c7fffc4 	addi	r17,r17,-1
    ba90:	2101ffcc 	andi	r4,r4,2047
    ba94:	3011883a 	mov	r8,r6
    ba98:	3c62703a 	and	r17,r7,r17
    ba9c:	ba803fcc 	andi	r10,r23,255
    baa0:	20006d26 	beq	r4,zero,bc58 <__muldf3+0x254>
    baa4:	0081ffc4 	movi	r2,2047
    baa8:	20806526 	beq	r4,r2,bc40 <__muldf3+0x23c>
    baac:	88c00434 	orhi	r3,r17,16
    bab0:	180690fa 	slli	r3,r3,3
    bab4:	3022d77a 	srli	r17,r6,29
    bab8:	301090fa 	slli	r8,r6,3
    babc:	213f0044 	addi	r4,r4,-1023
    bac0:	88e2b03a 	or	r17,r17,r3
    bac4:	000b883a 	mov	r5,zero
    bac8:	a909883a 	add	r4,r21,r4
    bacc:	2c84b03a 	or	r2,r5,r18
    bad0:	00c003c4 	movi	r3,15
    bad4:	bdacf03a 	xor	r22,r23,r22
    bad8:	22c00044 	addi	r11,r4,1
    badc:	18809936 	bltu	r3,r2,bd44 <__muldf3+0x340>
    bae0:	100490ba 	slli	r2,r2,2
    bae4:	00c00074 	movhi	r3,1
    bae8:	18eebe04 	addi	r3,r3,-17672
    baec:	10c5883a 	add	r2,r2,r3
    baf0:	10800017 	ldw	r2,0(r2)
    baf4:	1000683a 	jmp	r2
    baf8:	0000bd44 	movi	zero,757
    bafc:	0000bb58 	cmpnei	zero,zero,749
    bb00:	0000bb58 	cmpnei	zero,zero,749
    bb04:	0000bb54 	movui	zero,749
    bb08:	0000bd20 	cmpeqi	zero,zero,756
    bb0c:	0000bd20 	cmpeqi	zero,zero,756
    bb10:	0000bd08 	cmpgei	zero,zero,756
    bb14:	0000bb54 	movui	zero,749
    bb18:	0000bd20 	cmpeqi	zero,zero,756
    bb1c:	0000bd08 	cmpgei	zero,zero,756
    bb20:	0000bd20 	cmpeqi	zero,zero,756
    bb24:	0000bb54 	movui	zero,749
    bb28:	0000bd30 	cmpltui	zero,zero,756
    bb2c:	0000bd30 	cmpltui	zero,zero,756
    bb30:	0000bd30 	cmpltui	zero,zero,756
    bb34:	0000bf4c 	andi	zero,zero,765
    bb38:	2404b03a 	or	r2,r4,r16
    bb3c:	10006f1e 	bne	r2,zero,bcfc <__muldf3+0x2f8>
    bb40:	04800204 	movi	r18,8
    bb44:	0021883a 	mov	r16,zero
    bb48:	0027883a 	mov	r19,zero
    bb4c:	07000084 	movi	fp,2
    bb50:	003fcb06 	br	ba80 <__muldf3+0x7c>
    bb54:	502d883a 	mov	r22,r10
    bb58:	00800084 	movi	r2,2
    bb5c:	28805726 	beq	r5,r2,bcbc <__muldf3+0x2b8>
    bb60:	008000c4 	movi	r2,3
    bb64:	28816626 	beq	r5,r2,c100 <__muldf3+0x6fc>
    bb68:	00800044 	movi	r2,1
    bb6c:	2881411e 	bne	r5,r2,c074 <__muldf3+0x670>
    bb70:	b029883a 	mov	r20,r22
    bb74:	0005883a 	mov	r2,zero
    bb78:	000b883a 	mov	r5,zero
    bb7c:	0027883a 	mov	r19,zero
    bb80:	1004953a 	slli	r2,r2,20
    bb84:	a0c03fcc 	andi	r3,r20,255
    bb88:	04400434 	movhi	r17,16
    bb8c:	8c7fffc4 	addi	r17,r17,-1
    bb90:	180697fa 	slli	r3,r3,31
    bb94:	2c4a703a 	and	r5,r5,r17
    bb98:	288ab03a 	or	r5,r5,r2
    bb9c:	28c6b03a 	or	r3,r5,r3
    bba0:	9805883a 	mov	r2,r19
    bba4:	dfc00c17 	ldw	ra,48(sp)
    bba8:	df000b17 	ldw	fp,44(sp)
    bbac:	ddc00a17 	ldw	r23,40(sp)
    bbb0:	dd800917 	ldw	r22,36(sp)
    bbb4:	dd400817 	ldw	r21,32(sp)
    bbb8:	dd000717 	ldw	r20,28(sp)
    bbbc:	dcc00617 	ldw	r19,24(sp)
    bbc0:	dc800517 	ldw	r18,20(sp)
    bbc4:	dc400417 	ldw	r17,16(sp)
    bbc8:	dc000317 	ldw	r16,12(sp)
    bbcc:	dec00d04 	addi	sp,sp,52
    bbd0:	f800283a 	ret
    bbd4:	2404b03a 	or	r2,r4,r16
    bbd8:	2025883a 	mov	r18,r4
    bbdc:	10004226 	beq	r2,zero,bce8 <__muldf3+0x2e4>
    bbe0:	8000fc26 	beq	r16,zero,bfd4 <__muldf3+0x5d0>
    bbe4:	8009883a 	mov	r4,r16
    bbe8:	d9800215 	stw	r6,8(sp)
    bbec:	d9c00015 	stw	r7,0(sp)
    bbf0:	da400115 	stw	r9,4(sp)
    bbf4:	000cc1c0 	call	cc1c <__clzsi2>
    bbf8:	d9800217 	ldw	r6,8(sp)
    bbfc:	d9c00017 	ldw	r7,0(sp)
    bc00:	da400117 	ldw	r9,4(sp)
    bc04:	10fffd44 	addi	r3,r2,-11
    bc08:	01000704 	movi	r4,28
    bc0c:	20c0ed16 	blt	r4,r3,bfc4 <__muldf3+0x5c0>
    bc10:	01000744 	movi	r4,29
    bc14:	147ffe04 	addi	r17,r2,-8
    bc18:	20c9c83a 	sub	r4,r4,r3
    bc1c:	8460983a 	sll	r16,r16,r17
    bc20:	9108d83a 	srl	r4,r18,r4
    bc24:	9466983a 	sll	r19,r18,r17
    bc28:	2420b03a 	or	r16,r4,r16
    bc2c:	013f0084 	movi	r4,-1022
    bc30:	20ebc83a 	sub	r21,r4,r3
    bc34:	0025883a 	mov	r18,zero
    bc38:	0039883a 	mov	fp,zero
    bc3c:	003f9006 	br	ba80 <__muldf3+0x7c>
    bc40:	3444b03a 	or	r2,r6,r17
    bc44:	1000261e 	bne	r2,zero,bce0 <__muldf3+0x2dc>
    bc48:	0023883a 	mov	r17,zero
    bc4c:	0011883a 	mov	r8,zero
    bc50:	01400084 	movi	r5,2
    bc54:	003f9c06 	br	bac8 <__muldf3+0xc4>
    bc58:	3444b03a 	or	r2,r6,r17
    bc5c:	10001c26 	beq	r2,zero,bcd0 <__muldf3+0x2cc>
    bc60:	8800ce26 	beq	r17,zero,bf9c <__muldf3+0x598>
    bc64:	8809883a 	mov	r4,r17
    bc68:	d9800215 	stw	r6,8(sp)
    bc6c:	da400115 	stw	r9,4(sp)
    bc70:	da800015 	stw	r10,0(sp)
    bc74:	000cc1c0 	call	cc1c <__clzsi2>
    bc78:	d9800217 	ldw	r6,8(sp)
    bc7c:	da400117 	ldw	r9,4(sp)
    bc80:	da800017 	ldw	r10,0(sp)
    bc84:	113ffd44 	addi	r4,r2,-11
    bc88:	00c00704 	movi	r3,28
    bc8c:	1900bf16 	blt	r3,r4,bf8c <__muldf3+0x588>
    bc90:	00c00744 	movi	r3,29
    bc94:	123ffe04 	addi	r8,r2,-8
    bc98:	1907c83a 	sub	r3,r3,r4
    bc9c:	8a22983a 	sll	r17,r17,r8
    bca0:	30c6d83a 	srl	r3,r6,r3
    bca4:	3210983a 	sll	r8,r6,r8
    bca8:	1c62b03a 	or	r17,r3,r17
    bcac:	017f0084 	movi	r5,-1022
    bcb0:	2909c83a 	sub	r4,r5,r4
    bcb4:	000b883a 	mov	r5,zero
    bcb8:	003f8306 	br	bac8 <__muldf3+0xc4>
    bcbc:	b029883a 	mov	r20,r22
    bcc0:	0081ffc4 	movi	r2,2047
    bcc4:	000b883a 	mov	r5,zero
    bcc8:	0027883a 	mov	r19,zero
    bccc:	003fac06 	br	bb80 <__muldf3+0x17c>
    bcd0:	0023883a 	mov	r17,zero
    bcd4:	0011883a 	mov	r8,zero
    bcd8:	01400044 	movi	r5,1
    bcdc:	003f7a06 	br	bac8 <__muldf3+0xc4>
    bce0:	014000c4 	movi	r5,3
    bce4:	003f7806 	br	bac8 <__muldf3+0xc4>
    bce8:	04800104 	movi	r18,4
    bcec:	0021883a 	mov	r16,zero
    bcf0:	0027883a 	mov	r19,zero
    bcf4:	07000044 	movi	fp,1
    bcf8:	003f6106 	br	ba80 <__muldf3+0x7c>
    bcfc:	04800304 	movi	r18,12
    bd00:	070000c4 	movi	fp,3
    bd04:	003f5e06 	br	ba80 <__muldf3+0x7c>
    bd08:	01400434 	movhi	r5,16
    bd0c:	0029883a 	mov	r20,zero
    bd10:	297fffc4 	addi	r5,r5,-1
    bd14:	04ffffc4 	movi	r19,-1
    bd18:	0081ffc4 	movi	r2,2047
    bd1c:	003f9806 	br	bb80 <__muldf3+0x17c>
    bd20:	8023883a 	mov	r17,r16
    bd24:	9811883a 	mov	r8,r19
    bd28:	e00b883a 	mov	r5,fp
    bd2c:	003f8a06 	br	bb58 <__muldf3+0x154>
    bd30:	8023883a 	mov	r17,r16
    bd34:	9811883a 	mov	r8,r19
    bd38:	482d883a 	mov	r22,r9
    bd3c:	e00b883a 	mov	r5,fp
    bd40:	003f8506 	br	bb58 <__muldf3+0x154>
    bd44:	980ad43a 	srli	r5,r19,16
    bd48:	401ad43a 	srli	r13,r8,16
    bd4c:	9cffffcc 	andi	r19,r19,65535
    bd50:	423fffcc 	andi	r8,r8,65535
    bd54:	44d9383a 	mul	r12,r8,r19
    bd58:	4145383a 	mul	r2,r8,r5
    bd5c:	6ccd383a 	mul	r6,r13,r19
    bd60:	6006d43a 	srli	r3,r12,16
    bd64:	2b5d383a 	mul	r14,r5,r13
    bd68:	308d883a 	add	r6,r6,r2
    bd6c:	198d883a 	add	r6,r3,r6
    bd70:	3080022e 	bgeu	r6,r2,bd7c <__muldf3+0x378>
    bd74:	00800074 	movhi	r2,1
    bd78:	709d883a 	add	r14,r14,r2
    bd7c:	8828d43a 	srli	r20,r17,16
    bd80:	8bffffcc 	andi	r15,r17,65535
    bd84:	7ce3383a 	mul	r17,r15,r19
    bd88:	7945383a 	mul	r2,r15,r5
    bd8c:	a4e7383a 	mul	r19,r20,r19
    bd90:	8814d43a 	srli	r10,r17,16
    bd94:	3012943a 	slli	r9,r6,16
    bd98:	98a7883a 	add	r19,r19,r2
    bd9c:	633fffcc 	andi	r12,r12,65535
    bda0:	54d5883a 	add	r10,r10,r19
    bda4:	3006d43a 	srli	r3,r6,16
    bda8:	4b13883a 	add	r9,r9,r12
    bdac:	2d0b383a 	mul	r5,r5,r20
    bdb0:	5080022e 	bgeu	r10,r2,bdbc <__muldf3+0x3b8>
    bdb4:	00800074 	movhi	r2,1
    bdb8:	288b883a 	add	r5,r5,r2
    bdbc:	802ad43a 	srli	r21,r16,16
    bdc0:	843fffcc 	andi	r16,r16,65535
    bdc4:	440d383a 	mul	r6,r8,r16
    bdc8:	4565383a 	mul	r18,r8,r21
    bdcc:	8359383a 	mul	r12,r16,r13
    bdd0:	500e943a 	slli	r7,r10,16
    bdd4:	3010d43a 	srli	r8,r6,16
    bdd8:	5026d43a 	srli	r19,r10,16
    bddc:	6499883a 	add	r12,r12,r18
    bde0:	8abfffcc 	andi	r10,r17,65535
    bde4:	3a95883a 	add	r10,r7,r10
    bde8:	4319883a 	add	r12,r8,r12
    bdec:	9967883a 	add	r19,r19,r5
    bdf0:	1a87883a 	add	r3,r3,r10
    bdf4:	6d5b383a 	mul	r13,r13,r21
    bdf8:	6480022e 	bgeu	r12,r18,be04 <__muldf3+0x400>
    bdfc:	00800074 	movhi	r2,1
    be00:	689b883a 	add	r13,r13,r2
    be04:	7c25383a 	mul	r18,r15,r16
    be08:	7d4b383a 	mul	r5,r15,r21
    be0c:	850f383a 	mul	r7,r16,r20
    be10:	901ed43a 	srli	r15,r18,16
    be14:	6004d43a 	srli	r2,r12,16
    be18:	6010943a 	slli	r8,r12,16
    be1c:	394f883a 	add	r7,r7,r5
    be20:	333fffcc 	andi	r12,r6,65535
    be24:	79df883a 	add	r15,r15,r7
    be28:	135b883a 	add	r13,r2,r13
    be2c:	a563383a 	mul	r17,r20,r21
    be30:	4305883a 	add	r2,r8,r12
    be34:	7940022e 	bgeu	r15,r5,be40 <__muldf3+0x43c>
    be38:	01400074 	movhi	r5,1
    be3c:	8963883a 	add	r17,r17,r5
    be40:	780a943a 	slli	r5,r15,16
    be44:	91bfffcc 	andi	r6,r18,65535
    be48:	70c7883a 	add	r3,r14,r3
    be4c:	298d883a 	add	r6,r5,r6
    be50:	1a8f803a 	cmpltu	r7,r3,r10
    be54:	34cb883a 	add	r5,r6,r19
    be58:	10c7883a 	add	r3,r2,r3
    be5c:	3955883a 	add	r10,r7,r5
    be60:	1885803a 	cmpltu	r2,r3,r2
    be64:	6a91883a 	add	r8,r13,r10
    be68:	780cd43a 	srli	r6,r15,16
    be6c:	1219883a 	add	r12,r2,r8
    be70:	2ccb803a 	cmpltu	r5,r5,r19
    be74:	51cf803a 	cmpltu	r7,r10,r7
    be78:	29ceb03a 	or	r7,r5,r7
    be7c:	4351803a 	cmpltu	r8,r8,r13
    be80:	608b803a 	cmpltu	r5,r12,r2
    be84:	4144b03a 	or	r2,r8,r5
    be88:	398f883a 	add	r7,r7,r6
    be8c:	3885883a 	add	r2,r7,r2
    be90:	1810927a 	slli	r8,r3,9
    be94:	1445883a 	add	r2,r2,r17
    be98:	1004927a 	slli	r2,r2,9
    be9c:	6022d5fa 	srli	r17,r12,23
    bea0:	1806d5fa 	srli	r3,r3,23
    bea4:	4252b03a 	or	r9,r8,r9
    bea8:	600a927a 	slli	r5,r12,9
    beac:	4810c03a 	cmpne	r8,r9,zero
    beb0:	1462b03a 	or	r17,r2,r17
    beb4:	40c6b03a 	or	r3,r8,r3
    beb8:	8880402c 	andhi	r2,r17,256
    bebc:	1950b03a 	or	r8,r3,r5
    bec0:	10000726 	beq	r2,zero,bee0 <__muldf3+0x4dc>
    bec4:	4006d07a 	srli	r3,r8,1
    bec8:	880497fa 	slli	r2,r17,31
    becc:	4200004c 	andi	r8,r8,1
    bed0:	8822d07a 	srli	r17,r17,1
    bed4:	1a10b03a 	or	r8,r3,r8
    bed8:	1210b03a 	or	r8,r2,r8
    bedc:	5809883a 	mov	r4,r11
    bee0:	2080ffc4 	addi	r2,r4,1023
    bee4:	0080440e 	bge	zero,r2,bff8 <__muldf3+0x5f4>
    bee8:	40c001cc 	andi	r3,r8,7
    beec:	18000726 	beq	r3,zero,bf0c <__muldf3+0x508>
    bef0:	40c003cc 	andi	r3,r8,15
    bef4:	01400104 	movi	r5,4
    bef8:	19400426 	beq	r3,r5,bf0c <__muldf3+0x508>
    befc:	4147883a 	add	r3,r8,r5
    bf00:	1a11803a 	cmpltu	r8,r3,r8
    bf04:	8a23883a 	add	r17,r17,r8
    bf08:	1811883a 	mov	r8,r3
    bf0c:	88c0402c 	andhi	r3,r17,256
    bf10:	18000426 	beq	r3,zero,bf24 <__muldf3+0x520>
    bf14:	00ffc034 	movhi	r3,65280
    bf18:	18ffffc4 	addi	r3,r3,-1
    bf1c:	20810004 	addi	r2,r4,1024
    bf20:	88e2703a 	and	r17,r17,r3
    bf24:	00c1ff84 	movi	r3,2046
    bf28:	18bf6416 	blt	r3,r2,bcbc <__muldf3+0x2b8>
    bf2c:	8826977a 	slli	r19,r17,29
    bf30:	4010d0fa 	srli	r8,r8,3
    bf34:	8822927a 	slli	r17,r17,9
    bf38:	1081ffcc 	andi	r2,r2,2047
    bf3c:	9a26b03a 	or	r19,r19,r8
    bf40:	880ad33a 	srli	r5,r17,12
    bf44:	b029883a 	mov	r20,r22
    bf48:	003f0d06 	br	bb80 <__muldf3+0x17c>
    bf4c:	8080022c 	andhi	r2,r16,8
    bf50:	10000926 	beq	r2,zero,bf78 <__muldf3+0x574>
    bf54:	8880022c 	andhi	r2,r17,8
    bf58:	1000071e 	bne	r2,zero,bf78 <__muldf3+0x574>
    bf5c:	00800434 	movhi	r2,16
    bf60:	89400234 	orhi	r5,r17,8
    bf64:	10bfffc4 	addi	r2,r2,-1
    bf68:	b829883a 	mov	r20,r23
    bf6c:	288a703a 	and	r5,r5,r2
    bf70:	4027883a 	mov	r19,r8
    bf74:	003f6806 	br	bd18 <__muldf3+0x314>
    bf78:	00800434 	movhi	r2,16
    bf7c:	81400234 	orhi	r5,r16,8
    bf80:	10bfffc4 	addi	r2,r2,-1
    bf84:	288a703a 	and	r5,r5,r2
    bf88:	003f6306 	br	bd18 <__muldf3+0x314>
    bf8c:	10bff604 	addi	r2,r2,-40
    bf90:	30a2983a 	sll	r17,r6,r2
    bf94:	0011883a 	mov	r8,zero
    bf98:	003f4406 	br	bcac <__muldf3+0x2a8>
    bf9c:	3009883a 	mov	r4,r6
    bfa0:	d9800215 	stw	r6,8(sp)
    bfa4:	da400115 	stw	r9,4(sp)
    bfa8:	da800015 	stw	r10,0(sp)
    bfac:	000cc1c0 	call	cc1c <__clzsi2>
    bfb0:	10800804 	addi	r2,r2,32
    bfb4:	da800017 	ldw	r10,0(sp)
    bfb8:	da400117 	ldw	r9,4(sp)
    bfbc:	d9800217 	ldw	r6,8(sp)
    bfc0:	003f3006 	br	bc84 <__muldf3+0x280>
    bfc4:	10bff604 	addi	r2,r2,-40
    bfc8:	90a0983a 	sll	r16,r18,r2
    bfcc:	0027883a 	mov	r19,zero
    bfd0:	003f1606 	br	bc2c <__muldf3+0x228>
    bfd4:	d9800215 	stw	r6,8(sp)
    bfd8:	d9c00015 	stw	r7,0(sp)
    bfdc:	da400115 	stw	r9,4(sp)
    bfe0:	000cc1c0 	call	cc1c <__clzsi2>
    bfe4:	10800804 	addi	r2,r2,32
    bfe8:	da400117 	ldw	r9,4(sp)
    bfec:	d9c00017 	ldw	r7,0(sp)
    bff0:	d9800217 	ldw	r6,8(sp)
    bff4:	003f0306 	br	bc04 <__muldf3+0x200>
    bff8:	00c00044 	movi	r3,1
    bffc:	1887c83a 	sub	r3,r3,r2
    c000:	01000e04 	movi	r4,56
    c004:	20feda16 	blt	r4,r3,bb70 <__muldf3+0x16c>
    c008:	010007c4 	movi	r4,31
    c00c:	20c01b16 	blt	r4,r3,c07c <__muldf3+0x678>
    c010:	00800804 	movi	r2,32
    c014:	10c5c83a 	sub	r2,r2,r3
    c018:	888a983a 	sll	r5,r17,r2
    c01c:	40c8d83a 	srl	r4,r8,r3
    c020:	4084983a 	sll	r2,r8,r2
    c024:	88e2d83a 	srl	r17,r17,r3
    c028:	2906b03a 	or	r3,r5,r4
    c02c:	1004c03a 	cmpne	r2,r2,zero
    c030:	1886b03a 	or	r3,r3,r2
    c034:	188001cc 	andi	r2,r3,7
    c038:	10000726 	beq	r2,zero,c058 <__muldf3+0x654>
    c03c:	188003cc 	andi	r2,r3,15
    c040:	01000104 	movi	r4,4
    c044:	11000426 	beq	r2,r4,c058 <__muldf3+0x654>
    c048:	1805883a 	mov	r2,r3
    c04c:	10c00104 	addi	r3,r2,4
    c050:	1885803a 	cmpltu	r2,r3,r2
    c054:	88a3883a 	add	r17,r17,r2
    c058:	8880202c 	andhi	r2,r17,128
    c05c:	10001c26 	beq	r2,zero,c0d0 <__muldf3+0x6cc>
    c060:	b029883a 	mov	r20,r22
    c064:	00800044 	movi	r2,1
    c068:	000b883a 	mov	r5,zero
    c06c:	0027883a 	mov	r19,zero
    c070:	003ec306 	br	bb80 <__muldf3+0x17c>
    c074:	5809883a 	mov	r4,r11
    c078:	003f9906 	br	bee0 <__muldf3+0x4dc>
    c07c:	013ff844 	movi	r4,-31
    c080:	2085c83a 	sub	r2,r4,r2
    c084:	8888d83a 	srl	r4,r17,r2
    c088:	00800804 	movi	r2,32
    c08c:	18801a26 	beq	r3,r2,c0f8 <__muldf3+0x6f4>
    c090:	00801004 	movi	r2,64
    c094:	10c5c83a 	sub	r2,r2,r3
    c098:	8884983a 	sll	r2,r17,r2
    c09c:	1204b03a 	or	r2,r2,r8
    c0a0:	1004c03a 	cmpne	r2,r2,zero
    c0a4:	2084b03a 	or	r2,r4,r2
    c0a8:	144001cc 	andi	r17,r2,7
    c0ac:	88000d1e 	bne	r17,zero,c0e4 <__muldf3+0x6e0>
    c0b0:	000b883a 	mov	r5,zero
    c0b4:	1026d0fa 	srli	r19,r2,3
    c0b8:	b029883a 	mov	r20,r22
    c0bc:	0005883a 	mov	r2,zero
    c0c0:	9c66b03a 	or	r19,r19,r17
    c0c4:	003eae06 	br	bb80 <__muldf3+0x17c>
    c0c8:	1007883a 	mov	r3,r2
    c0cc:	0023883a 	mov	r17,zero
    c0d0:	880a927a 	slli	r5,r17,9
    c0d4:	1805883a 	mov	r2,r3
    c0d8:	8822977a 	slli	r17,r17,29
    c0dc:	280ad33a 	srli	r5,r5,12
    c0e0:	003ff406 	br	c0b4 <__muldf3+0x6b0>
    c0e4:	10c003cc 	andi	r3,r2,15
    c0e8:	01000104 	movi	r4,4
    c0ec:	193ff626 	beq	r3,r4,c0c8 <__muldf3+0x6c4>
    c0f0:	0023883a 	mov	r17,zero
    c0f4:	003fd506 	br	c04c <__muldf3+0x648>
    c0f8:	0005883a 	mov	r2,zero
    c0fc:	003fe706 	br	c09c <__muldf3+0x698>
    c100:	00800434 	movhi	r2,16
    c104:	89400234 	orhi	r5,r17,8
    c108:	10bfffc4 	addi	r2,r2,-1
    c10c:	b029883a 	mov	r20,r22
    c110:	288a703a 	and	r5,r5,r2
    c114:	4027883a 	mov	r19,r8
    c118:	003eff06 	br	bd18 <__muldf3+0x314>

0000c11c <__subdf3>:
    c11c:	02000434 	movhi	r8,16
    c120:	423fffc4 	addi	r8,r8,-1
    c124:	defffb04 	addi	sp,sp,-20
    c128:	2a14703a 	and	r10,r5,r8
    c12c:	3812d53a 	srli	r9,r7,20
    c130:	3a10703a 	and	r8,r7,r8
    c134:	2006d77a 	srli	r3,r4,29
    c138:	3004d77a 	srli	r2,r6,29
    c13c:	dc000015 	stw	r16,0(sp)
    c140:	501490fa 	slli	r10,r10,3
    c144:	2820d53a 	srli	r16,r5,20
    c148:	401090fa 	slli	r8,r8,3
    c14c:	dc800215 	stw	r18,8(sp)
    c150:	dc400115 	stw	r17,4(sp)
    c154:	dfc00415 	stw	ra,16(sp)
    c158:	202290fa 	slli	r17,r4,3
    c15c:	dcc00315 	stw	r19,12(sp)
    c160:	4a41ffcc 	andi	r9,r9,2047
    c164:	0101ffc4 	movi	r4,2047
    c168:	2824d7fa 	srli	r18,r5,31
    c16c:	8401ffcc 	andi	r16,r16,2047
    c170:	50c6b03a 	or	r3,r10,r3
    c174:	380ed7fa 	srli	r7,r7,31
    c178:	408ab03a 	or	r5,r8,r2
    c17c:	300c90fa 	slli	r6,r6,3
    c180:	49009626 	beq	r9,r4,c3dc <__subdf3+0x2c0>
    c184:	39c0005c 	xori	r7,r7,1
    c188:	8245c83a 	sub	r2,r16,r9
    c18c:	3c807426 	beq	r7,r18,c360 <__subdf3+0x244>
    c190:	0080af0e 	bge	zero,r2,c450 <__subdf3+0x334>
    c194:	48002a1e 	bne	r9,zero,c240 <__subdf3+0x124>
    c198:	2988b03a 	or	r4,r5,r6
    c19c:	20009a1e 	bne	r4,zero,c408 <__subdf3+0x2ec>
    c1a0:	888001cc 	andi	r2,r17,7
    c1a4:	10000726 	beq	r2,zero,c1c4 <__subdf3+0xa8>
    c1a8:	888003cc 	andi	r2,r17,15
    c1ac:	01000104 	movi	r4,4
    c1b0:	11000426 	beq	r2,r4,c1c4 <__subdf3+0xa8>
    c1b4:	890b883a 	add	r5,r17,r4
    c1b8:	2c63803a 	cmpltu	r17,r5,r17
    c1bc:	1c47883a 	add	r3,r3,r17
    c1c0:	2823883a 	mov	r17,r5
    c1c4:	1880202c 	andhi	r2,r3,128
    c1c8:	10005926 	beq	r2,zero,c330 <__subdf3+0x214>
    c1cc:	84000044 	addi	r16,r16,1
    c1d0:	0081ffc4 	movi	r2,2047
    c1d4:	8080be26 	beq	r16,r2,c4d0 <__subdf3+0x3b4>
    c1d8:	017fe034 	movhi	r5,65408
    c1dc:	297fffc4 	addi	r5,r5,-1
    c1e0:	1946703a 	and	r3,r3,r5
    c1e4:	1804977a 	slli	r2,r3,29
    c1e8:	1806927a 	slli	r3,r3,9
    c1ec:	8822d0fa 	srli	r17,r17,3
    c1f0:	8401ffcc 	andi	r16,r16,2047
    c1f4:	180ad33a 	srli	r5,r3,12
    c1f8:	9100004c 	andi	r4,r18,1
    c1fc:	1444b03a 	or	r2,r2,r17
    c200:	80c1ffcc 	andi	r3,r16,2047
    c204:	1820953a 	slli	r16,r3,20
    c208:	20c03fcc 	andi	r3,r4,255
    c20c:	180897fa 	slli	r4,r3,31
    c210:	00c00434 	movhi	r3,16
    c214:	18ffffc4 	addi	r3,r3,-1
    c218:	28c6703a 	and	r3,r5,r3
    c21c:	1c06b03a 	or	r3,r3,r16
    c220:	1906b03a 	or	r3,r3,r4
    c224:	dfc00417 	ldw	ra,16(sp)
    c228:	dcc00317 	ldw	r19,12(sp)
    c22c:	dc800217 	ldw	r18,8(sp)
    c230:	dc400117 	ldw	r17,4(sp)
    c234:	dc000017 	ldw	r16,0(sp)
    c238:	dec00504 	addi	sp,sp,20
    c23c:	f800283a 	ret
    c240:	0101ffc4 	movi	r4,2047
    c244:	813fd626 	beq	r16,r4,c1a0 <__subdf3+0x84>
    c248:	29402034 	orhi	r5,r5,128
    c24c:	01000e04 	movi	r4,56
    c250:	2080a316 	blt	r4,r2,c4e0 <__subdf3+0x3c4>
    c254:	010007c4 	movi	r4,31
    c258:	2080c616 	blt	r4,r2,c574 <__subdf3+0x458>
    c25c:	01000804 	movi	r4,32
    c260:	2089c83a 	sub	r4,r4,r2
    c264:	2910983a 	sll	r8,r5,r4
    c268:	308ed83a 	srl	r7,r6,r2
    c26c:	3108983a 	sll	r4,r6,r4
    c270:	2884d83a 	srl	r2,r5,r2
    c274:	41ccb03a 	or	r6,r8,r7
    c278:	2008c03a 	cmpne	r4,r4,zero
    c27c:	310cb03a 	or	r6,r6,r4
    c280:	898dc83a 	sub	r6,r17,r6
    c284:	89a3803a 	cmpltu	r17,r17,r6
    c288:	1887c83a 	sub	r3,r3,r2
    c28c:	1c47c83a 	sub	r3,r3,r17
    c290:	3023883a 	mov	r17,r6
    c294:	1880202c 	andhi	r2,r3,128
    c298:	10002326 	beq	r2,zero,c328 <__subdf3+0x20c>
    c29c:	04c02034 	movhi	r19,128
    c2a0:	9cffffc4 	addi	r19,r19,-1
    c2a4:	1ce6703a 	and	r19,r3,r19
    c2a8:	98007a26 	beq	r19,zero,c494 <__subdf3+0x378>
    c2ac:	9809883a 	mov	r4,r19
    c2b0:	000cc1c0 	call	cc1c <__clzsi2>
    c2b4:	113ffe04 	addi	r4,r2,-8
    c2b8:	00c007c4 	movi	r3,31
    c2bc:	19007b16 	blt	r3,r4,c4ac <__subdf3+0x390>
    c2c0:	00800804 	movi	r2,32
    c2c4:	1105c83a 	sub	r2,r2,r4
    c2c8:	8884d83a 	srl	r2,r17,r2
    c2cc:	9906983a 	sll	r3,r19,r4
    c2d0:	8922983a 	sll	r17,r17,r4
    c2d4:	10c4b03a 	or	r2,r2,r3
    c2d8:	24007816 	blt	r4,r16,c4bc <__subdf3+0x3a0>
    c2dc:	2421c83a 	sub	r16,r4,r16
    c2e0:	80c00044 	addi	r3,r16,1
    c2e4:	010007c4 	movi	r4,31
    c2e8:	20c09516 	blt	r4,r3,c540 <__subdf3+0x424>
    c2ec:	01400804 	movi	r5,32
    c2f0:	28cbc83a 	sub	r5,r5,r3
    c2f4:	88c8d83a 	srl	r4,r17,r3
    c2f8:	8962983a 	sll	r17,r17,r5
    c2fc:	114a983a 	sll	r5,r2,r5
    c300:	10c6d83a 	srl	r3,r2,r3
    c304:	8804c03a 	cmpne	r2,r17,zero
    c308:	290ab03a 	or	r5,r5,r4
    c30c:	28a2b03a 	or	r17,r5,r2
    c310:	0021883a 	mov	r16,zero
    c314:	003fa206 	br	c1a0 <__subdf3+0x84>
    c318:	2090b03a 	or	r8,r4,r2
    c31c:	40018e26 	beq	r8,zero,c958 <__subdf3+0x83c>
    c320:	1007883a 	mov	r3,r2
    c324:	2023883a 	mov	r17,r4
    c328:	888001cc 	andi	r2,r17,7
    c32c:	103f9e1e 	bne	r2,zero,c1a8 <__subdf3+0x8c>
    c330:	1804977a 	slli	r2,r3,29
    c334:	8822d0fa 	srli	r17,r17,3
    c338:	1810d0fa 	srli	r8,r3,3
    c33c:	9100004c 	andi	r4,r18,1
    c340:	1444b03a 	or	r2,r2,r17
    c344:	00c1ffc4 	movi	r3,2047
    c348:	80c02826 	beq	r16,r3,c3ec <__subdf3+0x2d0>
    c34c:	01400434 	movhi	r5,16
    c350:	297fffc4 	addi	r5,r5,-1
    c354:	80e0703a 	and	r16,r16,r3
    c358:	414a703a 	and	r5,r8,r5
    c35c:	003fa806 	br	c200 <__subdf3+0xe4>
    c360:	0080630e 	bge	zero,r2,c4f0 <__subdf3+0x3d4>
    c364:	48003026 	beq	r9,zero,c428 <__subdf3+0x30c>
    c368:	0101ffc4 	movi	r4,2047
    c36c:	813f8c26 	beq	r16,r4,c1a0 <__subdf3+0x84>
    c370:	29402034 	orhi	r5,r5,128
    c374:	01000e04 	movi	r4,56
    c378:	2080a90e 	bge	r4,r2,c620 <__subdf3+0x504>
    c37c:	298cb03a 	or	r6,r5,r6
    c380:	3012c03a 	cmpne	r9,r6,zero
    c384:	0005883a 	mov	r2,zero
    c388:	4c53883a 	add	r9,r9,r17
    c38c:	4c63803a 	cmpltu	r17,r9,r17
    c390:	10c7883a 	add	r3,r2,r3
    c394:	88c7883a 	add	r3,r17,r3
    c398:	4823883a 	mov	r17,r9
    c39c:	1880202c 	andhi	r2,r3,128
    c3a0:	1000d026 	beq	r2,zero,c6e4 <__subdf3+0x5c8>
    c3a4:	84000044 	addi	r16,r16,1
    c3a8:	0081ffc4 	movi	r2,2047
    c3ac:	8080fe26 	beq	r16,r2,c7a8 <__subdf3+0x68c>
    c3b0:	00bfe034 	movhi	r2,65408
    c3b4:	10bfffc4 	addi	r2,r2,-1
    c3b8:	1886703a 	and	r3,r3,r2
    c3bc:	880ad07a 	srli	r5,r17,1
    c3c0:	180497fa 	slli	r2,r3,31
    c3c4:	8900004c 	andi	r4,r17,1
    c3c8:	2922b03a 	or	r17,r5,r4
    c3cc:	1806d07a 	srli	r3,r3,1
    c3d0:	1462b03a 	or	r17,r2,r17
    c3d4:	3825883a 	mov	r18,r7
    c3d8:	003f7106 	br	c1a0 <__subdf3+0x84>
    c3dc:	2984b03a 	or	r2,r5,r6
    c3e0:	103f6826 	beq	r2,zero,c184 <__subdf3+0x68>
    c3e4:	39c03fcc 	andi	r7,r7,255
    c3e8:	003f6706 	br	c188 <__subdf3+0x6c>
    c3ec:	4086b03a 	or	r3,r8,r2
    c3f0:	18015226 	beq	r3,zero,c93c <__subdf3+0x820>
    c3f4:	00c00434 	movhi	r3,16
    c3f8:	41400234 	orhi	r5,r8,8
    c3fc:	18ffffc4 	addi	r3,r3,-1
    c400:	28ca703a 	and	r5,r5,r3
    c404:	003f7e06 	br	c200 <__subdf3+0xe4>
    c408:	10bfffc4 	addi	r2,r2,-1
    c40c:	1000491e 	bne	r2,zero,c534 <__subdf3+0x418>
    c410:	898fc83a 	sub	r7,r17,r6
    c414:	89e3803a 	cmpltu	r17,r17,r7
    c418:	1947c83a 	sub	r3,r3,r5
    c41c:	1c47c83a 	sub	r3,r3,r17
    c420:	3823883a 	mov	r17,r7
    c424:	003f9b06 	br	c294 <__subdf3+0x178>
    c428:	2988b03a 	or	r4,r5,r6
    c42c:	203f5c26 	beq	r4,zero,c1a0 <__subdf3+0x84>
    c430:	10bfffc4 	addi	r2,r2,-1
    c434:	1000931e 	bne	r2,zero,c684 <__subdf3+0x568>
    c438:	898d883a 	add	r6,r17,r6
    c43c:	3463803a 	cmpltu	r17,r6,r17
    c440:	1947883a 	add	r3,r3,r5
    c444:	88c7883a 	add	r3,r17,r3
    c448:	3023883a 	mov	r17,r6
    c44c:	003fd306 	br	c39c <__subdf3+0x280>
    c450:	1000541e 	bne	r2,zero,c5a4 <__subdf3+0x488>
    c454:	80800044 	addi	r2,r16,1
    c458:	1081ffcc 	andi	r2,r2,2047
    c45c:	01000044 	movi	r4,1
    c460:	2080a20e 	bge	r4,r2,c6ec <__subdf3+0x5d0>
    c464:	8989c83a 	sub	r4,r17,r6
    c468:	8905803a 	cmpltu	r2,r17,r4
    c46c:	1967c83a 	sub	r19,r3,r5
    c470:	98a7c83a 	sub	r19,r19,r2
    c474:	9880202c 	andhi	r2,r19,128
    c478:	10006326 	beq	r2,zero,c608 <__subdf3+0x4ec>
    c47c:	3463c83a 	sub	r17,r6,r17
    c480:	28c7c83a 	sub	r3,r5,r3
    c484:	344d803a 	cmpltu	r6,r6,r17
    c488:	19a7c83a 	sub	r19,r3,r6
    c48c:	3825883a 	mov	r18,r7
    c490:	983f861e 	bne	r19,zero,c2ac <__subdf3+0x190>
    c494:	8809883a 	mov	r4,r17
    c498:	000cc1c0 	call	cc1c <__clzsi2>
    c49c:	10800804 	addi	r2,r2,32
    c4a0:	113ffe04 	addi	r4,r2,-8
    c4a4:	00c007c4 	movi	r3,31
    c4a8:	193f850e 	bge	r3,r4,c2c0 <__subdf3+0x1a4>
    c4ac:	10bff604 	addi	r2,r2,-40
    c4b0:	8884983a 	sll	r2,r17,r2
    c4b4:	0023883a 	mov	r17,zero
    c4b8:	243f880e 	bge	r4,r16,c2dc <__subdf3+0x1c0>
    c4bc:	00ffe034 	movhi	r3,65408
    c4c0:	18ffffc4 	addi	r3,r3,-1
    c4c4:	8121c83a 	sub	r16,r16,r4
    c4c8:	10c6703a 	and	r3,r2,r3
    c4cc:	003f3406 	br	c1a0 <__subdf3+0x84>
    c4d0:	9100004c 	andi	r4,r18,1
    c4d4:	000b883a 	mov	r5,zero
    c4d8:	0005883a 	mov	r2,zero
    c4dc:	003f4806 	br	c200 <__subdf3+0xe4>
    c4e0:	298cb03a 	or	r6,r5,r6
    c4e4:	300cc03a 	cmpne	r6,r6,zero
    c4e8:	0005883a 	mov	r2,zero
    c4ec:	003f6406 	br	c280 <__subdf3+0x164>
    c4f0:	10009a1e 	bne	r2,zero,c75c <__subdf3+0x640>
    c4f4:	82400044 	addi	r9,r16,1
    c4f8:	4881ffcc 	andi	r2,r9,2047
    c4fc:	02800044 	movi	r10,1
    c500:	5080670e 	bge	r10,r2,c6a0 <__subdf3+0x584>
    c504:	0081ffc4 	movi	r2,2047
    c508:	4880af26 	beq	r9,r2,c7c8 <__subdf3+0x6ac>
    c50c:	898d883a 	add	r6,r17,r6
    c510:	1945883a 	add	r2,r3,r5
    c514:	3447803a 	cmpltu	r3,r6,r17
    c518:	1887883a 	add	r3,r3,r2
    c51c:	182297fa 	slli	r17,r3,31
    c520:	300cd07a 	srli	r6,r6,1
    c524:	1806d07a 	srli	r3,r3,1
    c528:	4821883a 	mov	r16,r9
    c52c:	89a2b03a 	or	r17,r17,r6
    c530:	003f1b06 	br	c1a0 <__subdf3+0x84>
    c534:	0101ffc4 	movi	r4,2047
    c538:	813f441e 	bne	r16,r4,c24c <__subdf3+0x130>
    c53c:	003f1806 	br	c1a0 <__subdf3+0x84>
    c540:	843ff844 	addi	r16,r16,-31
    c544:	01400804 	movi	r5,32
    c548:	1408d83a 	srl	r4,r2,r16
    c54c:	19405026 	beq	r3,r5,c690 <__subdf3+0x574>
    c550:	01401004 	movi	r5,64
    c554:	28c7c83a 	sub	r3,r5,r3
    c558:	10c4983a 	sll	r2,r2,r3
    c55c:	88a2b03a 	or	r17,r17,r2
    c560:	8822c03a 	cmpne	r17,r17,zero
    c564:	2462b03a 	or	r17,r4,r17
    c568:	0007883a 	mov	r3,zero
    c56c:	0021883a 	mov	r16,zero
    c570:	003f6d06 	br	c328 <__subdf3+0x20c>
    c574:	11fff804 	addi	r7,r2,-32
    c578:	01000804 	movi	r4,32
    c57c:	29ced83a 	srl	r7,r5,r7
    c580:	11004526 	beq	r2,r4,c698 <__subdf3+0x57c>
    c584:	01001004 	movi	r4,64
    c588:	2089c83a 	sub	r4,r4,r2
    c58c:	2904983a 	sll	r2,r5,r4
    c590:	118cb03a 	or	r6,r2,r6
    c594:	300cc03a 	cmpne	r6,r6,zero
    c598:	398cb03a 	or	r6,r7,r6
    c59c:	0005883a 	mov	r2,zero
    c5a0:	003f3706 	br	c280 <__subdf3+0x164>
    c5a4:	80002a26 	beq	r16,zero,c650 <__subdf3+0x534>
    c5a8:	0101ffc4 	movi	r4,2047
    c5ac:	49006626 	beq	r9,r4,c748 <__subdf3+0x62c>
    c5b0:	0085c83a 	sub	r2,zero,r2
    c5b4:	18c02034 	orhi	r3,r3,128
    c5b8:	01000e04 	movi	r4,56
    c5bc:	20807e16 	blt	r4,r2,c7b8 <__subdf3+0x69c>
    c5c0:	010007c4 	movi	r4,31
    c5c4:	2080e716 	blt	r4,r2,c964 <__subdf3+0x848>
    c5c8:	01000804 	movi	r4,32
    c5cc:	2089c83a 	sub	r4,r4,r2
    c5d0:	1914983a 	sll	r10,r3,r4
    c5d4:	8890d83a 	srl	r8,r17,r2
    c5d8:	8908983a 	sll	r4,r17,r4
    c5dc:	1884d83a 	srl	r2,r3,r2
    c5e0:	5222b03a 	or	r17,r10,r8
    c5e4:	2006c03a 	cmpne	r3,r4,zero
    c5e8:	88e2b03a 	or	r17,r17,r3
    c5ec:	3463c83a 	sub	r17,r6,r17
    c5f0:	2885c83a 	sub	r2,r5,r2
    c5f4:	344d803a 	cmpltu	r6,r6,r17
    c5f8:	1187c83a 	sub	r3,r2,r6
    c5fc:	4821883a 	mov	r16,r9
    c600:	3825883a 	mov	r18,r7
    c604:	003f2306 	br	c294 <__subdf3+0x178>
    c608:	24d0b03a 	or	r8,r4,r19
    c60c:	40001b1e 	bne	r8,zero,c67c <__subdf3+0x560>
    c610:	0005883a 	mov	r2,zero
    c614:	0009883a 	mov	r4,zero
    c618:	0021883a 	mov	r16,zero
    c61c:	003f4906 	br	c344 <__subdf3+0x228>
    c620:	010007c4 	movi	r4,31
    c624:	20803a16 	blt	r4,r2,c710 <__subdf3+0x5f4>
    c628:	01000804 	movi	r4,32
    c62c:	2089c83a 	sub	r4,r4,r2
    c630:	2912983a 	sll	r9,r5,r4
    c634:	3090d83a 	srl	r8,r6,r2
    c638:	3108983a 	sll	r4,r6,r4
    c63c:	2884d83a 	srl	r2,r5,r2
    c640:	4a12b03a 	or	r9,r9,r8
    c644:	2008c03a 	cmpne	r4,r4,zero
    c648:	4912b03a 	or	r9,r9,r4
    c64c:	003f4e06 	br	c388 <__subdf3+0x26c>
    c650:	1c48b03a 	or	r4,r3,r17
    c654:	20003c26 	beq	r4,zero,c748 <__subdf3+0x62c>
    c658:	0084303a 	nor	r2,zero,r2
    c65c:	1000381e 	bne	r2,zero,c740 <__subdf3+0x624>
    c660:	3463c83a 	sub	r17,r6,r17
    c664:	28c5c83a 	sub	r2,r5,r3
    c668:	344d803a 	cmpltu	r6,r6,r17
    c66c:	1187c83a 	sub	r3,r2,r6
    c670:	4821883a 	mov	r16,r9
    c674:	3825883a 	mov	r18,r7
    c678:	003f0606 	br	c294 <__subdf3+0x178>
    c67c:	2023883a 	mov	r17,r4
    c680:	003f0906 	br	c2a8 <__subdf3+0x18c>
    c684:	0101ffc4 	movi	r4,2047
    c688:	813f3a1e 	bne	r16,r4,c374 <__subdf3+0x258>
    c68c:	003ec406 	br	c1a0 <__subdf3+0x84>
    c690:	0005883a 	mov	r2,zero
    c694:	003fb106 	br	c55c <__subdf3+0x440>
    c698:	0005883a 	mov	r2,zero
    c69c:	003fbc06 	br	c590 <__subdf3+0x474>
    c6a0:	1c44b03a 	or	r2,r3,r17
    c6a4:	80008e1e 	bne	r16,zero,c8e0 <__subdf3+0x7c4>
    c6a8:	1000c826 	beq	r2,zero,c9cc <__subdf3+0x8b0>
    c6ac:	2984b03a 	or	r2,r5,r6
    c6b0:	103ebb26 	beq	r2,zero,c1a0 <__subdf3+0x84>
    c6b4:	8989883a 	add	r4,r17,r6
    c6b8:	1945883a 	add	r2,r3,r5
    c6bc:	2447803a 	cmpltu	r3,r4,r17
    c6c0:	1887883a 	add	r3,r3,r2
    c6c4:	1880202c 	andhi	r2,r3,128
    c6c8:	2023883a 	mov	r17,r4
    c6cc:	103f1626 	beq	r2,zero,c328 <__subdf3+0x20c>
    c6d0:	00bfe034 	movhi	r2,65408
    c6d4:	10bfffc4 	addi	r2,r2,-1
    c6d8:	5021883a 	mov	r16,r10
    c6dc:	1886703a 	and	r3,r3,r2
    c6e0:	003eaf06 	br	c1a0 <__subdf3+0x84>
    c6e4:	3825883a 	mov	r18,r7
    c6e8:	003f0f06 	br	c328 <__subdf3+0x20c>
    c6ec:	1c44b03a 	or	r2,r3,r17
    c6f0:	8000251e 	bne	r16,zero,c788 <__subdf3+0x66c>
    c6f4:	1000661e 	bne	r2,zero,c890 <__subdf3+0x774>
    c6f8:	2990b03a 	or	r8,r5,r6
    c6fc:	40009626 	beq	r8,zero,c958 <__subdf3+0x83c>
    c700:	2807883a 	mov	r3,r5
    c704:	3023883a 	mov	r17,r6
    c708:	3825883a 	mov	r18,r7
    c70c:	003ea406 	br	c1a0 <__subdf3+0x84>
    c710:	127ff804 	addi	r9,r2,-32
    c714:	01000804 	movi	r4,32
    c718:	2a52d83a 	srl	r9,r5,r9
    c71c:	11008c26 	beq	r2,r4,c950 <__subdf3+0x834>
    c720:	01001004 	movi	r4,64
    c724:	2085c83a 	sub	r2,r4,r2
    c728:	2884983a 	sll	r2,r5,r2
    c72c:	118cb03a 	or	r6,r2,r6
    c730:	300cc03a 	cmpne	r6,r6,zero
    c734:	4992b03a 	or	r9,r9,r6
    c738:	0005883a 	mov	r2,zero
    c73c:	003f1206 	br	c388 <__subdf3+0x26c>
    c740:	0101ffc4 	movi	r4,2047
    c744:	493f9c1e 	bne	r9,r4,c5b8 <__subdf3+0x49c>
    c748:	2807883a 	mov	r3,r5
    c74c:	3023883a 	mov	r17,r6
    c750:	4821883a 	mov	r16,r9
    c754:	3825883a 	mov	r18,r7
    c758:	003e9106 	br	c1a0 <__subdf3+0x84>
    c75c:	80001f1e 	bne	r16,zero,c7dc <__subdf3+0x6c0>
    c760:	1c48b03a 	or	r4,r3,r17
    c764:	20005a26 	beq	r4,zero,c8d0 <__subdf3+0x7b4>
    c768:	0084303a 	nor	r2,zero,r2
    c76c:	1000561e 	bne	r2,zero,c8c8 <__subdf3+0x7ac>
    c770:	89a3883a 	add	r17,r17,r6
    c774:	1945883a 	add	r2,r3,r5
    c778:	898d803a 	cmpltu	r6,r17,r6
    c77c:	3087883a 	add	r3,r6,r2
    c780:	4821883a 	mov	r16,r9
    c784:	003f0506 	br	c39c <__subdf3+0x280>
    c788:	10002b1e 	bne	r2,zero,c838 <__subdf3+0x71c>
    c78c:	2984b03a 	or	r2,r5,r6
    c790:	10008026 	beq	r2,zero,c994 <__subdf3+0x878>
    c794:	2807883a 	mov	r3,r5
    c798:	3023883a 	mov	r17,r6
    c79c:	3825883a 	mov	r18,r7
    c7a0:	0401ffc4 	movi	r16,2047
    c7a4:	003e7e06 	br	c1a0 <__subdf3+0x84>
    c7a8:	3809883a 	mov	r4,r7
    c7ac:	0011883a 	mov	r8,zero
    c7b0:	0005883a 	mov	r2,zero
    c7b4:	003ee306 	br	c344 <__subdf3+0x228>
    c7b8:	1c62b03a 	or	r17,r3,r17
    c7bc:	8822c03a 	cmpne	r17,r17,zero
    c7c0:	0005883a 	mov	r2,zero
    c7c4:	003f8906 	br	c5ec <__subdf3+0x4d0>
    c7c8:	3809883a 	mov	r4,r7
    c7cc:	4821883a 	mov	r16,r9
    c7d0:	0011883a 	mov	r8,zero
    c7d4:	0005883a 	mov	r2,zero
    c7d8:	003eda06 	br	c344 <__subdf3+0x228>
    c7dc:	0101ffc4 	movi	r4,2047
    c7e0:	49003b26 	beq	r9,r4,c8d0 <__subdf3+0x7b4>
    c7e4:	0085c83a 	sub	r2,zero,r2
    c7e8:	18c02034 	orhi	r3,r3,128
    c7ec:	01000e04 	movi	r4,56
    c7f0:	20806e16 	blt	r4,r2,c9ac <__subdf3+0x890>
    c7f4:	010007c4 	movi	r4,31
    c7f8:	20807716 	blt	r4,r2,c9d8 <__subdf3+0x8bc>
    c7fc:	01000804 	movi	r4,32
    c800:	2089c83a 	sub	r4,r4,r2
    c804:	1914983a 	sll	r10,r3,r4
    c808:	8890d83a 	srl	r8,r17,r2
    c80c:	8908983a 	sll	r4,r17,r4
    c810:	1884d83a 	srl	r2,r3,r2
    c814:	5222b03a 	or	r17,r10,r8
    c818:	2006c03a 	cmpne	r3,r4,zero
    c81c:	88e2b03a 	or	r17,r17,r3
    c820:	89a3883a 	add	r17,r17,r6
    c824:	1145883a 	add	r2,r2,r5
    c828:	898d803a 	cmpltu	r6,r17,r6
    c82c:	3087883a 	add	r3,r6,r2
    c830:	4821883a 	mov	r16,r9
    c834:	003ed906 	br	c39c <__subdf3+0x280>
    c838:	2984b03a 	or	r2,r5,r6
    c83c:	10004226 	beq	r2,zero,c948 <__subdf3+0x82c>
    c840:	1808d0fa 	srli	r4,r3,3
    c844:	8822d0fa 	srli	r17,r17,3
    c848:	1806977a 	slli	r3,r3,29
    c84c:	2080022c 	andhi	r2,r4,8
    c850:	1c62b03a 	or	r17,r3,r17
    c854:	10000826 	beq	r2,zero,c878 <__subdf3+0x75c>
    c858:	2812d0fa 	srli	r9,r5,3
    c85c:	4880022c 	andhi	r2,r9,8
    c860:	1000051e 	bne	r2,zero,c878 <__subdf3+0x75c>
    c864:	300cd0fa 	srli	r6,r6,3
    c868:	2804977a 	slli	r2,r5,29
    c86c:	4809883a 	mov	r4,r9
    c870:	3825883a 	mov	r18,r7
    c874:	11a2b03a 	or	r17,r2,r6
    c878:	8806d77a 	srli	r3,r17,29
    c87c:	200890fa 	slli	r4,r4,3
    c880:	882290fa 	slli	r17,r17,3
    c884:	0401ffc4 	movi	r16,2047
    c888:	1906b03a 	or	r3,r3,r4
    c88c:	003e4406 	br	c1a0 <__subdf3+0x84>
    c890:	2984b03a 	or	r2,r5,r6
    c894:	103e4226 	beq	r2,zero,c1a0 <__subdf3+0x84>
    c898:	8989c83a 	sub	r4,r17,r6
    c89c:	8911803a 	cmpltu	r8,r17,r4
    c8a0:	1945c83a 	sub	r2,r3,r5
    c8a4:	1205c83a 	sub	r2,r2,r8
    c8a8:	1200202c 	andhi	r8,r2,128
    c8ac:	403e9a26 	beq	r8,zero,c318 <__subdf3+0x1fc>
    c8b0:	3463c83a 	sub	r17,r6,r17
    c8b4:	28c5c83a 	sub	r2,r5,r3
    c8b8:	344d803a 	cmpltu	r6,r6,r17
    c8bc:	1187c83a 	sub	r3,r2,r6
    c8c0:	3825883a 	mov	r18,r7
    c8c4:	003e3606 	br	c1a0 <__subdf3+0x84>
    c8c8:	0101ffc4 	movi	r4,2047
    c8cc:	493fc71e 	bne	r9,r4,c7ec <__subdf3+0x6d0>
    c8d0:	2807883a 	mov	r3,r5
    c8d4:	3023883a 	mov	r17,r6
    c8d8:	4821883a 	mov	r16,r9
    c8dc:	003e3006 	br	c1a0 <__subdf3+0x84>
    c8e0:	10003626 	beq	r2,zero,c9bc <__subdf3+0x8a0>
    c8e4:	2984b03a 	or	r2,r5,r6
    c8e8:	10001726 	beq	r2,zero,c948 <__subdf3+0x82c>
    c8ec:	1808d0fa 	srli	r4,r3,3
    c8f0:	8822d0fa 	srli	r17,r17,3
    c8f4:	1806977a 	slli	r3,r3,29
    c8f8:	2080022c 	andhi	r2,r4,8
    c8fc:	1c62b03a 	or	r17,r3,r17
    c900:	10000726 	beq	r2,zero,c920 <__subdf3+0x804>
    c904:	2812d0fa 	srli	r9,r5,3
    c908:	4880022c 	andhi	r2,r9,8
    c90c:	1000041e 	bne	r2,zero,c920 <__subdf3+0x804>
    c910:	300cd0fa 	srli	r6,r6,3
    c914:	2804977a 	slli	r2,r5,29
    c918:	4809883a 	mov	r4,r9
    c91c:	11a2b03a 	or	r17,r2,r6
    c920:	8806d77a 	srli	r3,r17,29
    c924:	200890fa 	slli	r4,r4,3
    c928:	882290fa 	slli	r17,r17,3
    c92c:	3825883a 	mov	r18,r7
    c930:	1906b03a 	or	r3,r3,r4
    c934:	0401ffc4 	movi	r16,2047
    c938:	003e1906 	br	c1a0 <__subdf3+0x84>
    c93c:	000b883a 	mov	r5,zero
    c940:	0005883a 	mov	r2,zero
    c944:	003e2e06 	br	c200 <__subdf3+0xe4>
    c948:	0401ffc4 	movi	r16,2047
    c94c:	003e1406 	br	c1a0 <__subdf3+0x84>
    c950:	0005883a 	mov	r2,zero
    c954:	003f7506 	br	c72c <__subdf3+0x610>
    c958:	0005883a 	mov	r2,zero
    c95c:	0009883a 	mov	r4,zero
    c960:	003e7806 	br	c344 <__subdf3+0x228>
    c964:	123ff804 	addi	r8,r2,-32
    c968:	01000804 	movi	r4,32
    c96c:	1a10d83a 	srl	r8,r3,r8
    c970:	11002526 	beq	r2,r4,ca08 <__subdf3+0x8ec>
    c974:	01001004 	movi	r4,64
    c978:	2085c83a 	sub	r2,r4,r2
    c97c:	1884983a 	sll	r2,r3,r2
    c980:	1444b03a 	or	r2,r2,r17
    c984:	1004c03a 	cmpne	r2,r2,zero
    c988:	40a2b03a 	or	r17,r8,r2
    c98c:	0005883a 	mov	r2,zero
    c990:	003f1606 	br	c5ec <__subdf3+0x4d0>
    c994:	02000434 	movhi	r8,16
    c998:	0009883a 	mov	r4,zero
    c99c:	423fffc4 	addi	r8,r8,-1
    c9a0:	00bfffc4 	movi	r2,-1
    c9a4:	0401ffc4 	movi	r16,2047
    c9a8:	003e6606 	br	c344 <__subdf3+0x228>
    c9ac:	1c62b03a 	or	r17,r3,r17
    c9b0:	8822c03a 	cmpne	r17,r17,zero
    c9b4:	0005883a 	mov	r2,zero
    c9b8:	003f9906 	br	c820 <__subdf3+0x704>
    c9bc:	2807883a 	mov	r3,r5
    c9c0:	3023883a 	mov	r17,r6
    c9c4:	0401ffc4 	movi	r16,2047
    c9c8:	003df506 	br	c1a0 <__subdf3+0x84>
    c9cc:	2807883a 	mov	r3,r5
    c9d0:	3023883a 	mov	r17,r6
    c9d4:	003df206 	br	c1a0 <__subdf3+0x84>
    c9d8:	123ff804 	addi	r8,r2,-32
    c9dc:	01000804 	movi	r4,32
    c9e0:	1a10d83a 	srl	r8,r3,r8
    c9e4:	11000a26 	beq	r2,r4,ca10 <__subdf3+0x8f4>
    c9e8:	01001004 	movi	r4,64
    c9ec:	2085c83a 	sub	r2,r4,r2
    c9f0:	1884983a 	sll	r2,r3,r2
    c9f4:	1444b03a 	or	r2,r2,r17
    c9f8:	1004c03a 	cmpne	r2,r2,zero
    c9fc:	40a2b03a 	or	r17,r8,r2
    ca00:	0005883a 	mov	r2,zero
    ca04:	003f8606 	br	c820 <__subdf3+0x704>
    ca08:	0005883a 	mov	r2,zero
    ca0c:	003fdc06 	br	c980 <__subdf3+0x864>
    ca10:	0005883a 	mov	r2,zero
    ca14:	003ff706 	br	c9f4 <__subdf3+0x8d8>

0000ca18 <__fixdfsi>:
    ca18:	280cd53a 	srli	r6,r5,20
    ca1c:	00c00434 	movhi	r3,16
    ca20:	18ffffc4 	addi	r3,r3,-1
    ca24:	3181ffcc 	andi	r6,r6,2047
    ca28:	01c0ff84 	movi	r7,1022
    ca2c:	28c6703a 	and	r3,r5,r3
    ca30:	280ad7fa 	srli	r5,r5,31
    ca34:	3980120e 	bge	r7,r6,ca80 <__fixdfsi+0x68>
    ca38:	00810744 	movi	r2,1053
    ca3c:	11800c16 	blt	r2,r6,ca70 <__fixdfsi+0x58>
    ca40:	00810cc4 	movi	r2,1075
    ca44:	1185c83a 	sub	r2,r2,r6
    ca48:	01c007c4 	movi	r7,31
    ca4c:	18c00434 	orhi	r3,r3,16
    ca50:	38800d16 	blt	r7,r2,ca88 <__fixdfsi+0x70>
    ca54:	31befb44 	addi	r6,r6,-1043
    ca58:	2084d83a 	srl	r2,r4,r2
    ca5c:	1986983a 	sll	r3,r3,r6
    ca60:	1884b03a 	or	r2,r3,r2
    ca64:	28000726 	beq	r5,zero,ca84 <__fixdfsi+0x6c>
    ca68:	0085c83a 	sub	r2,zero,r2
    ca6c:	f800283a 	ret
    ca70:	00a00034 	movhi	r2,32768
    ca74:	10bfffc4 	addi	r2,r2,-1
    ca78:	2885883a 	add	r2,r5,r2
    ca7c:	f800283a 	ret
    ca80:	0005883a 	mov	r2,zero
    ca84:	f800283a 	ret
    ca88:	008104c4 	movi	r2,1043
    ca8c:	1185c83a 	sub	r2,r2,r6
    ca90:	1884d83a 	srl	r2,r3,r2
    ca94:	003ff306 	br	ca64 <__fixdfsi+0x4c>

0000ca98 <__floatsidf>:
    ca98:	defffd04 	addi	sp,sp,-12
    ca9c:	dfc00215 	stw	ra,8(sp)
    caa0:	dc400115 	stw	r17,4(sp)
    caa4:	dc000015 	stw	r16,0(sp)
    caa8:	20002b26 	beq	r4,zero,cb58 <__floatsidf+0xc0>
    caac:	2023883a 	mov	r17,r4
    cab0:	2020d7fa 	srli	r16,r4,31
    cab4:	20002d16 	blt	r4,zero,cb6c <__floatsidf+0xd4>
    cab8:	8809883a 	mov	r4,r17
    cabc:	000cc1c0 	call	cc1c <__clzsi2>
    cac0:	01410784 	movi	r5,1054
    cac4:	288bc83a 	sub	r5,r5,r2
    cac8:	01010cc4 	movi	r4,1075
    cacc:	2149c83a 	sub	r4,r4,r5
    cad0:	00c007c4 	movi	r3,31
    cad4:	1900160e 	bge	r3,r4,cb30 <__floatsidf+0x98>
    cad8:	00c104c4 	movi	r3,1043
    cadc:	1947c83a 	sub	r3,r3,r5
    cae0:	88c6983a 	sll	r3,r17,r3
    cae4:	00800434 	movhi	r2,16
    cae8:	10bfffc4 	addi	r2,r2,-1
    caec:	1886703a 	and	r3,r3,r2
    caf0:	2941ffcc 	andi	r5,r5,2047
    caf4:	800d883a 	mov	r6,r16
    caf8:	0005883a 	mov	r2,zero
    cafc:	280a953a 	slli	r5,r5,20
    cb00:	31803fcc 	andi	r6,r6,255
    cb04:	01000434 	movhi	r4,16
    cb08:	300c97fa 	slli	r6,r6,31
    cb0c:	213fffc4 	addi	r4,r4,-1
    cb10:	1906703a 	and	r3,r3,r4
    cb14:	1946b03a 	or	r3,r3,r5
    cb18:	1986b03a 	or	r3,r3,r6
    cb1c:	dfc00217 	ldw	ra,8(sp)
    cb20:	dc400117 	ldw	r17,4(sp)
    cb24:	dc000017 	ldw	r16,0(sp)
    cb28:	dec00304 	addi	sp,sp,12
    cb2c:	f800283a 	ret
    cb30:	00c002c4 	movi	r3,11
    cb34:	1887c83a 	sub	r3,r3,r2
    cb38:	88c6d83a 	srl	r3,r17,r3
    cb3c:	8904983a 	sll	r2,r17,r4
    cb40:	01000434 	movhi	r4,16
    cb44:	213fffc4 	addi	r4,r4,-1
    cb48:	2941ffcc 	andi	r5,r5,2047
    cb4c:	1906703a 	and	r3,r3,r4
    cb50:	800d883a 	mov	r6,r16
    cb54:	003fe906 	br	cafc <__floatsidf+0x64>
    cb58:	000d883a 	mov	r6,zero
    cb5c:	000b883a 	mov	r5,zero
    cb60:	0007883a 	mov	r3,zero
    cb64:	0005883a 	mov	r2,zero
    cb68:	003fe406 	br	cafc <__floatsidf+0x64>
    cb6c:	0123c83a 	sub	r17,zero,r4
    cb70:	003fd106 	br	cab8 <__floatsidf+0x20>

0000cb74 <__floatunsidf>:
    cb74:	defffe04 	addi	sp,sp,-8
    cb78:	dc000015 	stw	r16,0(sp)
    cb7c:	dfc00115 	stw	ra,4(sp)
    cb80:	2021883a 	mov	r16,r4
    cb84:	20002226 	beq	r4,zero,cc10 <__floatunsidf+0x9c>
    cb88:	000cc1c0 	call	cc1c <__clzsi2>
    cb8c:	01010784 	movi	r4,1054
    cb90:	2089c83a 	sub	r4,r4,r2
    cb94:	01810cc4 	movi	r6,1075
    cb98:	310dc83a 	sub	r6,r6,r4
    cb9c:	00c007c4 	movi	r3,31
    cba0:	1980120e 	bge	r3,r6,cbec <__floatunsidf+0x78>
    cba4:	00c104c4 	movi	r3,1043
    cba8:	1907c83a 	sub	r3,r3,r4
    cbac:	80ca983a 	sll	r5,r16,r3
    cbb0:	00800434 	movhi	r2,16
    cbb4:	10bfffc4 	addi	r2,r2,-1
    cbb8:	2101ffcc 	andi	r4,r4,2047
    cbbc:	0021883a 	mov	r16,zero
    cbc0:	288a703a 	and	r5,r5,r2
    cbc4:	2008953a 	slli	r4,r4,20
    cbc8:	00c00434 	movhi	r3,16
    cbcc:	18ffffc4 	addi	r3,r3,-1
    cbd0:	28c6703a 	and	r3,r5,r3
    cbd4:	8005883a 	mov	r2,r16
    cbd8:	1906b03a 	or	r3,r3,r4
    cbdc:	dfc00117 	ldw	ra,4(sp)
    cbe0:	dc000017 	ldw	r16,0(sp)
    cbe4:	dec00204 	addi	sp,sp,8
    cbe8:	f800283a 	ret
    cbec:	00c002c4 	movi	r3,11
    cbf0:	188bc83a 	sub	r5,r3,r2
    cbf4:	814ad83a 	srl	r5,r16,r5
    cbf8:	00c00434 	movhi	r3,16
    cbfc:	18ffffc4 	addi	r3,r3,-1
    cc00:	81a0983a 	sll	r16,r16,r6
    cc04:	2101ffcc 	andi	r4,r4,2047
    cc08:	28ca703a 	and	r5,r5,r3
    cc0c:	003fed06 	br	cbc4 <__floatunsidf+0x50>
    cc10:	0009883a 	mov	r4,zero
    cc14:	000b883a 	mov	r5,zero
    cc18:	003fea06 	br	cbc4 <__floatunsidf+0x50>

0000cc1c <__clzsi2>:
    cc1c:	00bfffd4 	movui	r2,65535
    cc20:	11000536 	bltu	r2,r4,cc38 <__clzsi2+0x1c>
    cc24:	00803fc4 	movi	r2,255
    cc28:	11000f36 	bltu	r2,r4,cc68 <__clzsi2+0x4c>
    cc2c:	00800804 	movi	r2,32
    cc30:	0007883a 	mov	r3,zero
    cc34:	00000506 	br	cc4c <__clzsi2+0x30>
    cc38:	00804034 	movhi	r2,256
    cc3c:	10bfffc4 	addi	r2,r2,-1
    cc40:	11000c2e 	bgeu	r2,r4,cc74 <__clzsi2+0x58>
    cc44:	00800204 	movi	r2,8
    cc48:	00c00604 	movi	r3,24
    cc4c:	20c8d83a 	srl	r4,r4,r3
    cc50:	00c00074 	movhi	r3,1
    cc54:	18fdda04 	addi	r3,r3,-2200
    cc58:	1909883a 	add	r4,r3,r4
    cc5c:	20c00003 	ldbu	r3,0(r4)
    cc60:	10c5c83a 	sub	r2,r2,r3
    cc64:	f800283a 	ret
    cc68:	00800604 	movi	r2,24
    cc6c:	00c00204 	movi	r3,8
    cc70:	003ff606 	br	cc4c <__clzsi2+0x30>
    cc74:	00800404 	movi	r2,16
    cc78:	1007883a 	mov	r3,r2
    cc7c:	003ff306 	br	cc4c <__clzsi2+0x30>

0000cc80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cc80:	defffe04 	addi	sp,sp,-8
    cc84:	dfc00115 	stw	ra,4(sp)
    cc88:	df000015 	stw	fp,0(sp)
    cc8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cc90:	00800074 	movhi	r2,1
    cc94:	1084d904 	addi	r2,r2,4964
    cc98:	10800017 	ldw	r2,0(r2)
    cc9c:	10000526 	beq	r2,zero,ccb4 <alt_get_errno+0x34>
    cca0:	00800074 	movhi	r2,1
    cca4:	1084d904 	addi	r2,r2,4964
    cca8:	10800017 	ldw	r2,0(r2)
    ccac:	103ee83a 	callr	r2
    ccb0:	00000206 	br	ccbc <alt_get_errno+0x3c>
    ccb4:	00800074 	movhi	r2,1
    ccb8:	108b9f04 	addi	r2,r2,11900
}
    ccbc:	e037883a 	mov	sp,fp
    ccc0:	dfc00117 	ldw	ra,4(sp)
    ccc4:	df000017 	ldw	fp,0(sp)
    ccc8:	dec00204 	addi	sp,sp,8
    cccc:	f800283a 	ret

0000ccd0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    ccd0:	defffb04 	addi	sp,sp,-20
    ccd4:	dfc00415 	stw	ra,16(sp)
    ccd8:	df000315 	stw	fp,12(sp)
    ccdc:	df000304 	addi	fp,sp,12
    cce0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    cce4:	e0bfff17 	ldw	r2,-4(fp)
    cce8:	10000616 	blt	r2,zero,cd04 <close+0x34>
    ccec:	e0bfff17 	ldw	r2,-4(fp)
    ccf0:	10c00324 	muli	r3,r2,12
    ccf4:	00800074 	movhi	r2,1
    ccf8:	10805604 	addi	r2,r2,344
    ccfc:	1885883a 	add	r2,r3,r2
    cd00:	00000106 	br	cd08 <close+0x38>
    cd04:	0005883a 	mov	r2,zero
    cd08:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    cd0c:	e0bffd17 	ldw	r2,-12(fp)
    cd10:	10001926 	beq	r2,zero,cd78 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    cd14:	e0bffd17 	ldw	r2,-12(fp)
    cd18:	10800017 	ldw	r2,0(r2)
    cd1c:	10800417 	ldw	r2,16(r2)
    cd20:	10000626 	beq	r2,zero,cd3c <close+0x6c>
    cd24:	e0bffd17 	ldw	r2,-12(fp)
    cd28:	10800017 	ldw	r2,0(r2)
    cd2c:	10800417 	ldw	r2,16(r2)
    cd30:	e13ffd17 	ldw	r4,-12(fp)
    cd34:	103ee83a 	callr	r2
    cd38:	00000106 	br	cd40 <close+0x70>
    cd3c:	0005883a 	mov	r2,zero
    cd40:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    cd44:	e13fff17 	ldw	r4,-4(fp)
    cd48:	000d3e00 	call	d3e0 <alt_release_fd>
    if (rval < 0)
    cd4c:	e0bffe17 	ldw	r2,-8(fp)
    cd50:	1000070e 	bge	r2,zero,cd70 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    cd54:	000cc800 	call	cc80 <alt_get_errno>
    cd58:	1007883a 	mov	r3,r2
    cd5c:	e0bffe17 	ldw	r2,-8(fp)
    cd60:	0085c83a 	sub	r2,zero,r2
    cd64:	18800015 	stw	r2,0(r3)
      return -1;
    cd68:	00bfffc4 	movi	r2,-1
    cd6c:	00000706 	br	cd8c <close+0xbc>
    }
    return 0;
    cd70:	0005883a 	mov	r2,zero
    cd74:	00000506 	br	cd8c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    cd78:	000cc800 	call	cc80 <alt_get_errno>
    cd7c:	1007883a 	mov	r3,r2
    cd80:	00801444 	movi	r2,81
    cd84:	18800015 	stw	r2,0(r3)
    return -1;
    cd88:	00bfffc4 	movi	r2,-1
  }
}
    cd8c:	e037883a 	mov	sp,fp
    cd90:	dfc00117 	ldw	ra,4(sp)
    cd94:	df000017 	ldw	fp,0(sp)
    cd98:	dec00204 	addi	sp,sp,8
    cd9c:	f800283a 	ret

0000cda0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    cda0:	defffc04 	addi	sp,sp,-16
    cda4:	df000315 	stw	fp,12(sp)
    cda8:	df000304 	addi	fp,sp,12
    cdac:	e13ffd15 	stw	r4,-12(fp)
    cdb0:	e17ffe15 	stw	r5,-8(fp)
    cdb4:	e1bfff15 	stw	r6,-4(fp)
  return len;
    cdb8:	e0bfff17 	ldw	r2,-4(fp)
}
    cdbc:	e037883a 	mov	sp,fp
    cdc0:	df000017 	ldw	fp,0(sp)
    cdc4:	dec00104 	addi	sp,sp,4
    cdc8:	f800283a 	ret

0000cdcc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cdcc:	defffe04 	addi	sp,sp,-8
    cdd0:	dfc00115 	stw	ra,4(sp)
    cdd4:	df000015 	stw	fp,0(sp)
    cdd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cddc:	00800074 	movhi	r2,1
    cde0:	1084d904 	addi	r2,r2,4964
    cde4:	10800017 	ldw	r2,0(r2)
    cde8:	10000526 	beq	r2,zero,ce00 <alt_get_errno+0x34>
    cdec:	00800074 	movhi	r2,1
    cdf0:	1084d904 	addi	r2,r2,4964
    cdf4:	10800017 	ldw	r2,0(r2)
    cdf8:	103ee83a 	callr	r2
    cdfc:	00000206 	br	ce08 <alt_get_errno+0x3c>
    ce00:	00800074 	movhi	r2,1
    ce04:	108b9f04 	addi	r2,r2,11900
}
    ce08:	e037883a 	mov	sp,fp
    ce0c:	dfc00117 	ldw	ra,4(sp)
    ce10:	df000017 	ldw	fp,0(sp)
    ce14:	dec00204 	addi	sp,sp,8
    ce18:	f800283a 	ret

0000ce1c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    ce1c:	defffb04 	addi	sp,sp,-20
    ce20:	dfc00415 	stw	ra,16(sp)
    ce24:	df000315 	stw	fp,12(sp)
    ce28:	df000304 	addi	fp,sp,12
    ce2c:	e13ffe15 	stw	r4,-8(fp)
    ce30:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ce34:	e0bffe17 	ldw	r2,-8(fp)
    ce38:	10000616 	blt	r2,zero,ce54 <fstat+0x38>
    ce3c:	e0bffe17 	ldw	r2,-8(fp)
    ce40:	10c00324 	muli	r3,r2,12
    ce44:	00800074 	movhi	r2,1
    ce48:	10805604 	addi	r2,r2,344
    ce4c:	1885883a 	add	r2,r3,r2
    ce50:	00000106 	br	ce58 <fstat+0x3c>
    ce54:	0005883a 	mov	r2,zero
    ce58:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    ce5c:	e0bffd17 	ldw	r2,-12(fp)
    ce60:	10001026 	beq	r2,zero,cea4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    ce64:	e0bffd17 	ldw	r2,-12(fp)
    ce68:	10800017 	ldw	r2,0(r2)
    ce6c:	10800817 	ldw	r2,32(r2)
    ce70:	10000726 	beq	r2,zero,ce90 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    ce74:	e0bffd17 	ldw	r2,-12(fp)
    ce78:	10800017 	ldw	r2,0(r2)
    ce7c:	10800817 	ldw	r2,32(r2)
    ce80:	e17fff17 	ldw	r5,-4(fp)
    ce84:	e13ffd17 	ldw	r4,-12(fp)
    ce88:	103ee83a 	callr	r2
    ce8c:	00000a06 	br	ceb8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    ce90:	e0bfff17 	ldw	r2,-4(fp)
    ce94:	00c80004 	movi	r3,8192
    ce98:	10c00115 	stw	r3,4(r2)
      return 0;
    ce9c:	0005883a 	mov	r2,zero
    cea0:	00000506 	br	ceb8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    cea4:	000cdcc0 	call	cdcc <alt_get_errno>
    cea8:	1007883a 	mov	r3,r2
    ceac:	00801444 	movi	r2,81
    ceb0:	18800015 	stw	r2,0(r3)
    return -1;
    ceb4:	00bfffc4 	movi	r2,-1
  }
}
    ceb8:	e037883a 	mov	sp,fp
    cebc:	dfc00117 	ldw	ra,4(sp)
    cec0:	df000017 	ldw	fp,0(sp)
    cec4:	dec00204 	addi	sp,sp,8
    cec8:	f800283a 	ret

0000cecc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cecc:	defffe04 	addi	sp,sp,-8
    ced0:	dfc00115 	stw	ra,4(sp)
    ced4:	df000015 	stw	fp,0(sp)
    ced8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cedc:	00800074 	movhi	r2,1
    cee0:	1084d904 	addi	r2,r2,4964
    cee4:	10800017 	ldw	r2,0(r2)
    cee8:	10000526 	beq	r2,zero,cf00 <alt_get_errno+0x34>
    ceec:	00800074 	movhi	r2,1
    cef0:	1084d904 	addi	r2,r2,4964
    cef4:	10800017 	ldw	r2,0(r2)
    cef8:	103ee83a 	callr	r2
    cefc:	00000206 	br	cf08 <alt_get_errno+0x3c>
    cf00:	00800074 	movhi	r2,1
    cf04:	108b9f04 	addi	r2,r2,11900
}
    cf08:	e037883a 	mov	sp,fp
    cf0c:	dfc00117 	ldw	ra,4(sp)
    cf10:	df000017 	ldw	fp,0(sp)
    cf14:	dec00204 	addi	sp,sp,8
    cf18:	f800283a 	ret

0000cf1c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    cf1c:	deffed04 	addi	sp,sp,-76
    cf20:	dfc01215 	stw	ra,72(sp)
    cf24:	df001115 	stw	fp,68(sp)
    cf28:	df001104 	addi	fp,sp,68
    cf2c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    cf30:	e0bfff17 	ldw	r2,-4(fp)
    cf34:	10000616 	blt	r2,zero,cf50 <isatty+0x34>
    cf38:	e0bfff17 	ldw	r2,-4(fp)
    cf3c:	10c00324 	muli	r3,r2,12
    cf40:	00800074 	movhi	r2,1
    cf44:	10805604 	addi	r2,r2,344
    cf48:	1885883a 	add	r2,r3,r2
    cf4c:	00000106 	br	cf54 <isatty+0x38>
    cf50:	0005883a 	mov	r2,zero
    cf54:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    cf58:	e0bfef17 	ldw	r2,-68(fp)
    cf5c:	10000e26 	beq	r2,zero,cf98 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    cf60:	e0bfef17 	ldw	r2,-68(fp)
    cf64:	10800017 	ldw	r2,0(r2)
    cf68:	10800817 	ldw	r2,32(r2)
    cf6c:	1000021e 	bne	r2,zero,cf78 <isatty+0x5c>
    {
      return 1;
    cf70:	00800044 	movi	r2,1
    cf74:	00000d06 	br	cfac <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    cf78:	e0bff004 	addi	r2,fp,-64
    cf7c:	100b883a 	mov	r5,r2
    cf80:	e13fff17 	ldw	r4,-4(fp)
    cf84:	000ce1c0 	call	ce1c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    cf88:	e0bff117 	ldw	r2,-60(fp)
    cf8c:	10880020 	cmpeqi	r2,r2,8192
    cf90:	10803fcc 	andi	r2,r2,255
    cf94:	00000506 	br	cfac <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    cf98:	000cecc0 	call	cecc <alt_get_errno>
    cf9c:	1007883a 	mov	r3,r2
    cfa0:	00801444 	movi	r2,81
    cfa4:	18800015 	stw	r2,0(r3)
    return 0;
    cfa8:	0005883a 	mov	r2,zero
  }
}
    cfac:	e037883a 	mov	sp,fp
    cfb0:	dfc00117 	ldw	ra,4(sp)
    cfb4:	df000017 	ldw	fp,0(sp)
    cfb8:	dec00204 	addi	sp,sp,8
    cfbc:	f800283a 	ret

0000cfc0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    cfc0:	defffc04 	addi	sp,sp,-16
    cfc4:	df000315 	stw	fp,12(sp)
    cfc8:	df000304 	addi	fp,sp,12
    cfcc:	e13ffd15 	stw	r4,-12(fp)
    cfd0:	e17ffe15 	stw	r5,-8(fp)
    cfd4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    cfd8:	e0fffe17 	ldw	r3,-8(fp)
    cfdc:	e0bffd17 	ldw	r2,-12(fp)
    cfe0:	18800c26 	beq	r3,r2,d014 <alt_load_section+0x54>
  {
    while( to != end )
    cfe4:	00000806 	br	d008 <alt_load_section+0x48>
    {
      *to++ = *from++;
    cfe8:	e0bffe17 	ldw	r2,-8(fp)
    cfec:	10c00104 	addi	r3,r2,4
    cff0:	e0fffe15 	stw	r3,-8(fp)
    cff4:	e0fffd17 	ldw	r3,-12(fp)
    cff8:	19000104 	addi	r4,r3,4
    cffc:	e13ffd15 	stw	r4,-12(fp)
    d000:	18c00017 	ldw	r3,0(r3)
    d004:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    d008:	e0fffe17 	ldw	r3,-8(fp)
    d00c:	e0bfff17 	ldw	r2,-4(fp)
    d010:	18bff51e 	bne	r3,r2,cfe8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    d014:	0001883a 	nop
    d018:	e037883a 	mov	sp,fp
    d01c:	df000017 	ldw	fp,0(sp)
    d020:	dec00104 	addi	sp,sp,4
    d024:	f800283a 	ret

0000d028 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    d028:	defffe04 	addi	sp,sp,-8
    d02c:	dfc00115 	stw	ra,4(sp)
    d030:	df000015 	stw	fp,0(sp)
    d034:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    d038:	01800074 	movhi	r6,1
    d03c:	3184de04 	addi	r6,r6,4984
    d040:	01400074 	movhi	r5,1
    d044:	297e2304 	addi	r5,r5,-1908
    d048:	01000074 	movhi	r4,1
    d04c:	2104de04 	addi	r4,r4,4984
    d050:	000cfc00 	call	cfc0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    d054:	01800034 	movhi	r6,0
    d058:	31809104 	addi	r6,r6,580
    d05c:	01400034 	movhi	r5,0
    d060:	29400804 	addi	r5,r5,32
    d064:	01000034 	movhi	r4,0
    d068:	21000804 	addi	r4,r4,32
    d06c:	000cfc00 	call	cfc0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    d070:	01800074 	movhi	r6,1
    d074:	31be2304 	addi	r6,r6,-1908
    d078:	01400074 	movhi	r5,1
    d07c:	297d5804 	addi	r5,r5,-2720
    d080:	01000074 	movhi	r4,1
    d084:	213d5804 	addi	r4,r4,-2720
    d088:	000cfc00 	call	cfc0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    d08c:	000e3cc0 	call	e3cc <alt_dcache_flush_all>
  alt_icache_flush_all();
    d090:	000e5c80 	call	e5c8 <alt_icache_flush_all>
}
    d094:	0001883a 	nop
    d098:	e037883a 	mov	sp,fp
    d09c:	dfc00117 	ldw	ra,4(sp)
    d0a0:	df000017 	ldw	fp,0(sp)
    d0a4:	dec00204 	addi	sp,sp,8
    d0a8:	f800283a 	ret

0000d0ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d0ac:	defffe04 	addi	sp,sp,-8
    d0b0:	dfc00115 	stw	ra,4(sp)
    d0b4:	df000015 	stw	fp,0(sp)
    d0b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d0bc:	00800074 	movhi	r2,1
    d0c0:	1084d904 	addi	r2,r2,4964
    d0c4:	10800017 	ldw	r2,0(r2)
    d0c8:	10000526 	beq	r2,zero,d0e0 <alt_get_errno+0x34>
    d0cc:	00800074 	movhi	r2,1
    d0d0:	1084d904 	addi	r2,r2,4964
    d0d4:	10800017 	ldw	r2,0(r2)
    d0d8:	103ee83a 	callr	r2
    d0dc:	00000206 	br	d0e8 <alt_get_errno+0x3c>
    d0e0:	00800074 	movhi	r2,1
    d0e4:	108b9f04 	addi	r2,r2,11900
}
    d0e8:	e037883a 	mov	sp,fp
    d0ec:	dfc00117 	ldw	ra,4(sp)
    d0f0:	df000017 	ldw	fp,0(sp)
    d0f4:	dec00204 	addi	sp,sp,8
    d0f8:	f800283a 	ret

0000d0fc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    d0fc:	defff904 	addi	sp,sp,-28
    d100:	dfc00615 	stw	ra,24(sp)
    d104:	df000515 	stw	fp,20(sp)
    d108:	df000504 	addi	fp,sp,20
    d10c:	e13ffd15 	stw	r4,-12(fp)
    d110:	e17ffe15 	stw	r5,-8(fp)
    d114:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    d118:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d11c:	e0bffd17 	ldw	r2,-12(fp)
    d120:	10000616 	blt	r2,zero,d13c <lseek+0x40>
    d124:	e0bffd17 	ldw	r2,-12(fp)
    d128:	10c00324 	muli	r3,r2,12
    d12c:	00800074 	movhi	r2,1
    d130:	10805604 	addi	r2,r2,344
    d134:	1885883a 	add	r2,r3,r2
    d138:	00000106 	br	d140 <lseek+0x44>
    d13c:	0005883a 	mov	r2,zero
    d140:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    d144:	e0bffc17 	ldw	r2,-16(fp)
    d148:	10001026 	beq	r2,zero,d18c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    d14c:	e0bffc17 	ldw	r2,-16(fp)
    d150:	10800017 	ldw	r2,0(r2)
    d154:	10800717 	ldw	r2,28(r2)
    d158:	10000926 	beq	r2,zero,d180 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    d15c:	e0bffc17 	ldw	r2,-16(fp)
    d160:	10800017 	ldw	r2,0(r2)
    d164:	10800717 	ldw	r2,28(r2)
    d168:	e1bfff17 	ldw	r6,-4(fp)
    d16c:	e17ffe17 	ldw	r5,-8(fp)
    d170:	e13ffc17 	ldw	r4,-16(fp)
    d174:	103ee83a 	callr	r2
    d178:	e0bffb15 	stw	r2,-20(fp)
    d17c:	00000506 	br	d194 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    d180:	00bfde84 	movi	r2,-134
    d184:	e0bffb15 	stw	r2,-20(fp)
    d188:	00000206 	br	d194 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    d18c:	00bfebc4 	movi	r2,-81
    d190:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    d194:	e0bffb17 	ldw	r2,-20(fp)
    d198:	1000070e 	bge	r2,zero,d1b8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    d19c:	000d0ac0 	call	d0ac <alt_get_errno>
    d1a0:	1007883a 	mov	r3,r2
    d1a4:	e0bffb17 	ldw	r2,-20(fp)
    d1a8:	0085c83a 	sub	r2,zero,r2
    d1ac:	18800015 	stw	r2,0(r3)
    rc = -1;
    d1b0:	00bfffc4 	movi	r2,-1
    d1b4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    d1b8:	e0bffb17 	ldw	r2,-20(fp)
}
    d1bc:	e037883a 	mov	sp,fp
    d1c0:	dfc00117 	ldw	ra,4(sp)
    d1c4:	df000017 	ldw	fp,0(sp)
    d1c8:	dec00204 	addi	sp,sp,8
    d1cc:	f800283a 	ret

0000d1d0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    d1d0:	defffd04 	addi	sp,sp,-12
    d1d4:	dfc00215 	stw	ra,8(sp)
    d1d8:	df000115 	stw	fp,4(sp)
    d1dc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    d1e0:	0009883a 	mov	r4,zero
    d1e4:	000d6740 	call	d674 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    d1e8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    d1ec:	000d6ac0 	call	d6ac <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    d1f0:	01800074 	movhi	r6,1
    d1f4:	31be1d04 	addi	r6,r6,-1932
    d1f8:	01400074 	movhi	r5,1
    d1fc:	297e1d04 	addi	r5,r5,-1932
    d200:	01000074 	movhi	r4,1
    d204:	213e1d04 	addi	r4,r4,-1932
    d208:	000e9900 	call	e990 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    d20c:	000e5080 	call	e508 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    d210:	01000074 	movhi	r4,1
    d214:	21395a04 	addi	r4,r4,-6808
    d218:	000f1cc0 	call	f1cc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    d21c:	d0a6d217 	ldw	r2,-25784(gp)
    d220:	d0e6d317 	ldw	r3,-25780(gp)
    d224:	d126d417 	ldw	r4,-25776(gp)
    d228:	200d883a 	mov	r6,r4
    d22c:	180b883a 	mov	r5,r3
    d230:	1009883a 	mov	r4,r2
    d234:	00002900 	call	290 <main>
    d238:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    d23c:	01000044 	movi	r4,1
    d240:	000ccd00 	call	ccd0 <close>
  exit (result);
    d244:	e13fff17 	ldw	r4,-4(fp)
    d248:	000f1e00 	call	f1e0 <exit>

0000d24c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    d24c:	defffe04 	addi	sp,sp,-8
    d250:	df000115 	stw	fp,4(sp)
    d254:	df000104 	addi	fp,sp,4
    d258:	e13fff15 	stw	r4,-4(fp)
}
    d25c:	0001883a 	nop
    d260:	e037883a 	mov	sp,fp
    d264:	df000017 	ldw	fp,0(sp)
    d268:	dec00104 	addi	sp,sp,4
    d26c:	f800283a 	ret

0000d270 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    d270:	defffe04 	addi	sp,sp,-8
    d274:	df000115 	stw	fp,4(sp)
    d278:	df000104 	addi	fp,sp,4
    d27c:	e13fff15 	stw	r4,-4(fp)
}
    d280:	0001883a 	nop
    d284:	e037883a 	mov	sp,fp
    d288:	df000017 	ldw	fp,0(sp)
    d28c:	dec00104 	addi	sp,sp,4
    d290:	f800283a 	ret

0000d294 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d294:	defffe04 	addi	sp,sp,-8
    d298:	dfc00115 	stw	ra,4(sp)
    d29c:	df000015 	stw	fp,0(sp)
    d2a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d2a4:	00800074 	movhi	r2,1
    d2a8:	1084d904 	addi	r2,r2,4964
    d2ac:	10800017 	ldw	r2,0(r2)
    d2b0:	10000526 	beq	r2,zero,d2c8 <alt_get_errno+0x34>
    d2b4:	00800074 	movhi	r2,1
    d2b8:	1084d904 	addi	r2,r2,4964
    d2bc:	10800017 	ldw	r2,0(r2)
    d2c0:	103ee83a 	callr	r2
    d2c4:	00000206 	br	d2d0 <alt_get_errno+0x3c>
    d2c8:	00800074 	movhi	r2,1
    d2cc:	108b9f04 	addi	r2,r2,11900
}
    d2d0:	e037883a 	mov	sp,fp
    d2d4:	dfc00117 	ldw	ra,4(sp)
    d2d8:	df000017 	ldw	fp,0(sp)
    d2dc:	dec00204 	addi	sp,sp,8
    d2e0:	f800283a 	ret

0000d2e4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    d2e4:	defff904 	addi	sp,sp,-28
    d2e8:	dfc00615 	stw	ra,24(sp)
    d2ec:	df000515 	stw	fp,20(sp)
    d2f0:	df000504 	addi	fp,sp,20
    d2f4:	e13ffd15 	stw	r4,-12(fp)
    d2f8:	e17ffe15 	stw	r5,-8(fp)
    d2fc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d300:	e0bffd17 	ldw	r2,-12(fp)
    d304:	10000616 	blt	r2,zero,d320 <read+0x3c>
    d308:	e0bffd17 	ldw	r2,-12(fp)
    d30c:	10c00324 	muli	r3,r2,12
    d310:	00800074 	movhi	r2,1
    d314:	10805604 	addi	r2,r2,344
    d318:	1885883a 	add	r2,r3,r2
    d31c:	00000106 	br	d324 <read+0x40>
    d320:	0005883a 	mov	r2,zero
    d324:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d328:	e0bffb17 	ldw	r2,-20(fp)
    d32c:	10002226 	beq	r2,zero,d3b8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d330:	e0bffb17 	ldw	r2,-20(fp)
    d334:	10800217 	ldw	r2,8(r2)
    d338:	108000cc 	andi	r2,r2,3
    d33c:	10800060 	cmpeqi	r2,r2,1
    d340:	1000181e 	bne	r2,zero,d3a4 <read+0xc0>
        (fd->dev->read))
    d344:	e0bffb17 	ldw	r2,-20(fp)
    d348:	10800017 	ldw	r2,0(r2)
    d34c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d350:	10001426 	beq	r2,zero,d3a4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    d354:	e0bffb17 	ldw	r2,-20(fp)
    d358:	10800017 	ldw	r2,0(r2)
    d35c:	10800517 	ldw	r2,20(r2)
    d360:	e0ffff17 	ldw	r3,-4(fp)
    d364:	180d883a 	mov	r6,r3
    d368:	e17ffe17 	ldw	r5,-8(fp)
    d36c:	e13ffb17 	ldw	r4,-20(fp)
    d370:	103ee83a 	callr	r2
    d374:	e0bffc15 	stw	r2,-16(fp)
    d378:	e0bffc17 	ldw	r2,-16(fp)
    d37c:	1000070e 	bge	r2,zero,d39c <read+0xb8>
        {
          ALT_ERRNO = -rval;
    d380:	000d2940 	call	d294 <alt_get_errno>
    d384:	1007883a 	mov	r3,r2
    d388:	e0bffc17 	ldw	r2,-16(fp)
    d38c:	0085c83a 	sub	r2,zero,r2
    d390:	18800015 	stw	r2,0(r3)
          return -1;
    d394:	00bfffc4 	movi	r2,-1
    d398:	00000c06 	br	d3cc <read+0xe8>
        }
        return rval;
    d39c:	e0bffc17 	ldw	r2,-16(fp)
    d3a0:	00000a06 	br	d3cc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    d3a4:	000d2940 	call	d294 <alt_get_errno>
    d3a8:	1007883a 	mov	r3,r2
    d3ac:	00800344 	movi	r2,13
    d3b0:	18800015 	stw	r2,0(r3)
    d3b4:	00000406 	br	d3c8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    d3b8:	000d2940 	call	d294 <alt_get_errno>
    d3bc:	1007883a 	mov	r3,r2
    d3c0:	00801444 	movi	r2,81
    d3c4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d3c8:	00bfffc4 	movi	r2,-1
}
    d3cc:	e037883a 	mov	sp,fp
    d3d0:	dfc00117 	ldw	ra,4(sp)
    d3d4:	df000017 	ldw	fp,0(sp)
    d3d8:	dec00204 	addi	sp,sp,8
    d3dc:	f800283a 	ret

0000d3e0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    d3e0:	defffe04 	addi	sp,sp,-8
    d3e4:	df000115 	stw	fp,4(sp)
    d3e8:	df000104 	addi	fp,sp,4
    d3ec:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    d3f0:	e0bfff17 	ldw	r2,-4(fp)
    d3f4:	108000d0 	cmplti	r2,r2,3
    d3f8:	10000d1e 	bne	r2,zero,d430 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    d3fc:	00800074 	movhi	r2,1
    d400:	10805604 	addi	r2,r2,344
    d404:	e0ffff17 	ldw	r3,-4(fp)
    d408:	18c00324 	muli	r3,r3,12
    d40c:	10c5883a 	add	r2,r2,r3
    d410:	10800204 	addi	r2,r2,8
    d414:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    d418:	00800074 	movhi	r2,1
    d41c:	10805604 	addi	r2,r2,344
    d420:	e0ffff17 	ldw	r3,-4(fp)
    d424:	18c00324 	muli	r3,r3,12
    d428:	10c5883a 	add	r2,r2,r3
    d42c:	10000015 	stw	zero,0(r2)
  }
}
    d430:	0001883a 	nop
    d434:	e037883a 	mov	sp,fp
    d438:	df000017 	ldw	fp,0(sp)
    d43c:	dec00104 	addi	sp,sp,4
    d440:	f800283a 	ret

0000d444 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    d444:	defff904 	addi	sp,sp,-28
    d448:	df000615 	stw	fp,24(sp)
    d44c:	df000604 	addi	fp,sp,24
    d450:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d454:	0005303a 	rdctl	r2,status
    d458:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d45c:	e0fffe17 	ldw	r3,-8(fp)
    d460:	00bfff84 	movi	r2,-2
    d464:	1884703a 	and	r2,r3,r2
    d468:	1001703a 	wrctl	status,r2
  
  return context;
    d46c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    d470:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    d474:	d0a00c17 	ldw	r2,-32720(gp)
    d478:	10c000c4 	addi	r3,r2,3
    d47c:	00bfff04 	movi	r2,-4
    d480:	1884703a 	and	r2,r3,r2
    d484:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    d488:	d0e00c17 	ldw	r3,-32720(gp)
    d48c:	e0bfff17 	ldw	r2,-4(fp)
    d490:	1887883a 	add	r3,r3,r2
    d494:	00810034 	movhi	r2,1024
    d498:	10800004 	addi	r2,r2,0
    d49c:	10c0062e 	bgeu	r2,r3,d4b8 <sbrk+0x74>
    d4a0:	e0bffb17 	ldw	r2,-20(fp)
    d4a4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d4a8:	e0bffa17 	ldw	r2,-24(fp)
    d4ac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    d4b0:	00bfffc4 	movi	r2,-1
    d4b4:	00000b06 	br	d4e4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    d4b8:	d0a00c17 	ldw	r2,-32720(gp)
    d4bc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    d4c0:	d0e00c17 	ldw	r3,-32720(gp)
    d4c4:	e0bfff17 	ldw	r2,-4(fp)
    d4c8:	1885883a 	add	r2,r3,r2
    d4cc:	d0a00c15 	stw	r2,-32720(gp)
    d4d0:	e0bffb17 	ldw	r2,-20(fp)
    d4d4:	e0bffc15 	stw	r2,-16(fp)
    d4d8:	e0bffc17 	ldw	r2,-16(fp)
    d4dc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    d4e0:	e0bffd17 	ldw	r2,-12(fp)
} 
    d4e4:	e037883a 	mov	sp,fp
    d4e8:	df000017 	ldw	fp,0(sp)
    d4ec:	dec00104 	addi	sp,sp,4
    d4f0:	f800283a 	ret

0000d4f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d4f4:	defffe04 	addi	sp,sp,-8
    d4f8:	dfc00115 	stw	ra,4(sp)
    d4fc:	df000015 	stw	fp,0(sp)
    d500:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d504:	00800074 	movhi	r2,1
    d508:	1084d904 	addi	r2,r2,4964
    d50c:	10800017 	ldw	r2,0(r2)
    d510:	10000526 	beq	r2,zero,d528 <alt_get_errno+0x34>
    d514:	00800074 	movhi	r2,1
    d518:	1084d904 	addi	r2,r2,4964
    d51c:	10800017 	ldw	r2,0(r2)
    d520:	103ee83a 	callr	r2
    d524:	00000206 	br	d530 <alt_get_errno+0x3c>
    d528:	00800074 	movhi	r2,1
    d52c:	108b9f04 	addi	r2,r2,11900
}
    d530:	e037883a 	mov	sp,fp
    d534:	dfc00117 	ldw	ra,4(sp)
    d538:	df000017 	ldw	fp,0(sp)
    d53c:	dec00204 	addi	sp,sp,8
    d540:	f800283a 	ret

0000d544 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    d544:	defff904 	addi	sp,sp,-28
    d548:	dfc00615 	stw	ra,24(sp)
    d54c:	df000515 	stw	fp,20(sp)
    d550:	df000504 	addi	fp,sp,20
    d554:	e13ffd15 	stw	r4,-12(fp)
    d558:	e17ffe15 	stw	r5,-8(fp)
    d55c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d560:	e0bffd17 	ldw	r2,-12(fp)
    d564:	10000616 	blt	r2,zero,d580 <write+0x3c>
    d568:	e0bffd17 	ldw	r2,-12(fp)
    d56c:	10c00324 	muli	r3,r2,12
    d570:	00800074 	movhi	r2,1
    d574:	10805604 	addi	r2,r2,344
    d578:	1885883a 	add	r2,r3,r2
    d57c:	00000106 	br	d584 <write+0x40>
    d580:	0005883a 	mov	r2,zero
    d584:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d588:	e0bffb17 	ldw	r2,-20(fp)
    d58c:	10002126 	beq	r2,zero,d614 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    d590:	e0bffb17 	ldw	r2,-20(fp)
    d594:	10800217 	ldw	r2,8(r2)
    d598:	108000cc 	andi	r2,r2,3
    d59c:	10001826 	beq	r2,zero,d600 <write+0xbc>
    d5a0:	e0bffb17 	ldw	r2,-20(fp)
    d5a4:	10800017 	ldw	r2,0(r2)
    d5a8:	10800617 	ldw	r2,24(r2)
    d5ac:	10001426 	beq	r2,zero,d600 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    d5b0:	e0bffb17 	ldw	r2,-20(fp)
    d5b4:	10800017 	ldw	r2,0(r2)
    d5b8:	10800617 	ldw	r2,24(r2)
    d5bc:	e0ffff17 	ldw	r3,-4(fp)
    d5c0:	180d883a 	mov	r6,r3
    d5c4:	e17ffe17 	ldw	r5,-8(fp)
    d5c8:	e13ffb17 	ldw	r4,-20(fp)
    d5cc:	103ee83a 	callr	r2
    d5d0:	e0bffc15 	stw	r2,-16(fp)
    d5d4:	e0bffc17 	ldw	r2,-16(fp)
    d5d8:	1000070e 	bge	r2,zero,d5f8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    d5dc:	000d4f40 	call	d4f4 <alt_get_errno>
    d5e0:	1007883a 	mov	r3,r2
    d5e4:	e0bffc17 	ldw	r2,-16(fp)
    d5e8:	0085c83a 	sub	r2,zero,r2
    d5ec:	18800015 	stw	r2,0(r3)
        return -1;
    d5f0:	00bfffc4 	movi	r2,-1
    d5f4:	00000c06 	br	d628 <write+0xe4>
      }
      return rval;
    d5f8:	e0bffc17 	ldw	r2,-16(fp)
    d5fc:	00000a06 	br	d628 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    d600:	000d4f40 	call	d4f4 <alt_get_errno>
    d604:	1007883a 	mov	r3,r2
    d608:	00800344 	movi	r2,13
    d60c:	18800015 	stw	r2,0(r3)
    d610:	00000406 	br	d624 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    d614:	000d4f40 	call	d4f4 <alt_get_errno>
    d618:	1007883a 	mov	r3,r2
    d61c:	00801444 	movi	r2,81
    d620:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d624:	00bfffc4 	movi	r2,-1
}
    d628:	e037883a 	mov	sp,fp
    d62c:	dfc00117 	ldw	ra,4(sp)
    d630:	df000017 	ldw	fp,0(sp)
    d634:	dec00204 	addi	sp,sp,8
    d638:	f800283a 	ret

0000d63c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    d63c:	defffd04 	addi	sp,sp,-12
    d640:	dfc00215 	stw	ra,8(sp)
    d644:	df000115 	stw	fp,4(sp)
    d648:	df000104 	addi	fp,sp,4
    d64c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    d650:	01400074 	movhi	r5,1
    d654:	2944d604 	addi	r5,r5,4952
    d658:	e13fff17 	ldw	r4,-4(fp)
    d65c:	000e4640 	call	e464 <alt_dev_llist_insert>
}
    d660:	e037883a 	mov	sp,fp
    d664:	dfc00117 	ldw	ra,4(sp)
    d668:	df000017 	ldw	fp,0(sp)
    d66c:	dec00204 	addi	sp,sp,8
    d670:	f800283a 	ret

0000d674 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    d674:	defffd04 	addi	sp,sp,-12
    d678:	dfc00215 	stw	ra,8(sp)
    d67c:	df000115 	stw	fp,4(sp)
    d680:	df000104 	addi	fp,sp,4
    d684:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOSII_CORE, niosII_core);
    d688:	000ee240 	call	ee24 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    d68c:	00800044 	movi	r2,1
    d690:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    d694:	0001883a 	nop
    d698:	e037883a 	mov	sp,fp
    d69c:	dfc00117 	ldw	ra,4(sp)
    d6a0:	df000017 	ldw	fp,0(sp)
    d6a4:	dec00204 	addi	sp,sp,8
    d6a8:	f800283a 	ret

0000d6ac <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    d6ac:	defffe04 	addi	sp,sp,-8
    d6b0:	dfc00115 	stw	ra,4(sp)
    d6b4:	df000015 	stw	fp,0(sp)
    d6b8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_TIMER, Sys_Timer);
    d6bc:	01c0fa04 	movi	r7,1000
    d6c0:	01800044 	movi	r6,1
    d6c4:	000b883a 	mov	r5,zero
    d6c8:	01010134 	movhi	r4,1028
    d6cc:	21060004 	addi	r4,r4,6144
    d6d0:	000e2000 	call	e200 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, JTAG);
    d6d4:	000d883a 	mov	r6,zero
    d6d8:	000b883a 	mov	r5,zero
    d6dc:	01000074 	movhi	r4,1
    d6e0:	2100c004 	addi	r4,r4,768
    d6e4:	000d8740 	call	d874 <altera_avalon_jtag_uart_init>
    d6e8:	01000074 	movhi	r4,1
    d6ec:	2100b604 	addi	r4,r4,728
    d6f0:	000d63c0 	call	d63c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSTEMID, SystemID);
    d6f4:	0001883a 	nop
}
    d6f8:	0001883a 	nop
    d6fc:	e037883a 	mov	sp,fp
    d700:	dfc00117 	ldw	ra,4(sp)
    d704:	df000017 	ldw	fp,0(sp)
    d708:	dec00204 	addi	sp,sp,8
    d70c:	f800283a 	ret

0000d710 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    d710:	defffa04 	addi	sp,sp,-24
    d714:	dfc00515 	stw	ra,20(sp)
    d718:	df000415 	stw	fp,16(sp)
    d71c:	df000404 	addi	fp,sp,16
    d720:	e13ffd15 	stw	r4,-12(fp)
    d724:	e17ffe15 	stw	r5,-8(fp)
    d728:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d72c:	e0bffd17 	ldw	r2,-12(fp)
    d730:	10800017 	ldw	r2,0(r2)
    d734:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    d738:	e0bffc17 	ldw	r2,-16(fp)
    d73c:	10c00a04 	addi	r3,r2,40
    d740:	e0bffd17 	ldw	r2,-12(fp)
    d744:	10800217 	ldw	r2,8(r2)
    d748:	100f883a 	mov	r7,r2
    d74c:	e1bfff17 	ldw	r6,-4(fp)
    d750:	e17ffe17 	ldw	r5,-8(fp)
    d754:	1809883a 	mov	r4,r3
    d758:	000dd480 	call	dd48 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    d75c:	e037883a 	mov	sp,fp
    d760:	dfc00117 	ldw	ra,4(sp)
    d764:	df000017 	ldw	fp,0(sp)
    d768:	dec00204 	addi	sp,sp,8
    d76c:	f800283a 	ret

0000d770 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    d770:	defffa04 	addi	sp,sp,-24
    d774:	dfc00515 	stw	ra,20(sp)
    d778:	df000415 	stw	fp,16(sp)
    d77c:	df000404 	addi	fp,sp,16
    d780:	e13ffd15 	stw	r4,-12(fp)
    d784:	e17ffe15 	stw	r5,-8(fp)
    d788:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d78c:	e0bffd17 	ldw	r2,-12(fp)
    d790:	10800017 	ldw	r2,0(r2)
    d794:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    d798:	e0bffc17 	ldw	r2,-16(fp)
    d79c:	10c00a04 	addi	r3,r2,40
    d7a0:	e0bffd17 	ldw	r2,-12(fp)
    d7a4:	10800217 	ldw	r2,8(r2)
    d7a8:	100f883a 	mov	r7,r2
    d7ac:	e1bfff17 	ldw	r6,-4(fp)
    d7b0:	e17ffe17 	ldw	r5,-8(fp)
    d7b4:	1809883a 	mov	r4,r3
    d7b8:	000df640 	call	df64 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    d7bc:	e037883a 	mov	sp,fp
    d7c0:	dfc00117 	ldw	ra,4(sp)
    d7c4:	df000017 	ldw	fp,0(sp)
    d7c8:	dec00204 	addi	sp,sp,8
    d7cc:	f800283a 	ret

0000d7d0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    d7d0:	defffc04 	addi	sp,sp,-16
    d7d4:	dfc00315 	stw	ra,12(sp)
    d7d8:	df000215 	stw	fp,8(sp)
    d7dc:	df000204 	addi	fp,sp,8
    d7e0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d7e4:	e0bfff17 	ldw	r2,-4(fp)
    d7e8:	10800017 	ldw	r2,0(r2)
    d7ec:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    d7f0:	e0bffe17 	ldw	r2,-8(fp)
    d7f4:	10c00a04 	addi	r3,r2,40
    d7f8:	e0bfff17 	ldw	r2,-4(fp)
    d7fc:	10800217 	ldw	r2,8(r2)
    d800:	100b883a 	mov	r5,r2
    d804:	1809883a 	mov	r4,r3
    d808:	000dbf00 	call	dbf0 <altera_avalon_jtag_uart_close>
}
    d80c:	e037883a 	mov	sp,fp
    d810:	dfc00117 	ldw	ra,4(sp)
    d814:	df000017 	ldw	fp,0(sp)
    d818:	dec00204 	addi	sp,sp,8
    d81c:	f800283a 	ret

0000d820 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    d820:	defffa04 	addi	sp,sp,-24
    d824:	dfc00515 	stw	ra,20(sp)
    d828:	df000415 	stw	fp,16(sp)
    d82c:	df000404 	addi	fp,sp,16
    d830:	e13ffd15 	stw	r4,-12(fp)
    d834:	e17ffe15 	stw	r5,-8(fp)
    d838:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    d83c:	e0bffd17 	ldw	r2,-12(fp)
    d840:	10800017 	ldw	r2,0(r2)
    d844:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    d848:	e0bffc17 	ldw	r2,-16(fp)
    d84c:	10800a04 	addi	r2,r2,40
    d850:	e1bfff17 	ldw	r6,-4(fp)
    d854:	e17ffe17 	ldw	r5,-8(fp)
    d858:	1009883a 	mov	r4,r2
    d85c:	000dc580 	call	dc58 <altera_avalon_jtag_uart_ioctl>
}
    d860:	e037883a 	mov	sp,fp
    d864:	dfc00117 	ldw	ra,4(sp)
    d868:	df000017 	ldw	fp,0(sp)
    d86c:	dec00204 	addi	sp,sp,8
    d870:	f800283a 	ret

0000d874 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    d874:	defffa04 	addi	sp,sp,-24
    d878:	dfc00515 	stw	ra,20(sp)
    d87c:	df000415 	stw	fp,16(sp)
    d880:	df000404 	addi	fp,sp,16
    d884:	e13ffd15 	stw	r4,-12(fp)
    d888:	e17ffe15 	stw	r5,-8(fp)
    d88c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    d890:	e0bffd17 	ldw	r2,-12(fp)
    d894:	00c00044 	movi	r3,1
    d898:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    d89c:	e0bffd17 	ldw	r2,-12(fp)
    d8a0:	10800017 	ldw	r2,0(r2)
    d8a4:	10800104 	addi	r2,r2,4
    d8a8:	1007883a 	mov	r3,r2
    d8ac:	e0bffd17 	ldw	r2,-12(fp)
    d8b0:	10800817 	ldw	r2,32(r2)
    d8b4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    d8b8:	e0bffe17 	ldw	r2,-8(fp)
    d8bc:	e0ffff17 	ldw	r3,-4(fp)
    d8c0:	d8000015 	stw	zero,0(sp)
    d8c4:	e1fffd17 	ldw	r7,-12(fp)
    d8c8:	01800074 	movhi	r6,1
    d8cc:	31b64f04 	addi	r6,r6,-9924
    d8d0:	180b883a 	mov	r5,r3
    d8d4:	1009883a 	mov	r4,r2
    d8d8:	000e5fc0 	call	e5fc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    d8dc:	e0bffd17 	ldw	r2,-12(fp)
    d8e0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    d8e4:	e0bffd17 	ldw	r2,-12(fp)
    d8e8:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    d8ec:	00800074 	movhi	r2,1
    d8f0:	108ba404 	addi	r2,r2,11920
    d8f4:	10800017 	ldw	r2,0(r2)
    d8f8:	e1fffd17 	ldw	r7,-12(fp)
    d8fc:	01800074 	movhi	r6,1
    d900:	31b6d204 	addi	r6,r6,-9400
    d904:	100b883a 	mov	r5,r2
    d908:	1809883a 	mov	r4,r3
    d90c:	000e28c0 	call	e28c <alt_alarm_start>
    d910:	1000040e 	bge	r2,zero,d924 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    d914:	e0fffd17 	ldw	r3,-12(fp)
    d918:	00a00034 	movhi	r2,32768
    d91c:	10bfffc4 	addi	r2,r2,-1
    d920:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    d924:	0001883a 	nop
    d928:	e037883a 	mov	sp,fp
    d92c:	dfc00117 	ldw	ra,4(sp)
    d930:	df000017 	ldw	fp,0(sp)
    d934:	dec00204 	addi	sp,sp,8
    d938:	f800283a 	ret

0000d93c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    d93c:	defff804 	addi	sp,sp,-32
    d940:	df000715 	stw	fp,28(sp)
    d944:	df000704 	addi	fp,sp,28
    d948:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    d94c:	e0bfff17 	ldw	r2,-4(fp)
    d950:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    d954:	e0bffb17 	ldw	r2,-20(fp)
    d958:	10800017 	ldw	r2,0(r2)
    d95c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    d960:	e0bffc17 	ldw	r2,-16(fp)
    d964:	10800104 	addi	r2,r2,4
    d968:	10800037 	ldwio	r2,0(r2)
    d96c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    d970:	e0bffd17 	ldw	r2,-12(fp)
    d974:	1080c00c 	andi	r2,r2,768
    d978:	10006d26 	beq	r2,zero,db30 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    d97c:	e0bffd17 	ldw	r2,-12(fp)
    d980:	1080400c 	andi	r2,r2,256
    d984:	10003526 	beq	r2,zero,da5c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    d988:	00800074 	movhi	r2,1
    d98c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d990:	e0bffb17 	ldw	r2,-20(fp)
    d994:	10800a17 	ldw	r2,40(r2)
    d998:	10800044 	addi	r2,r2,1
    d99c:	1081ffcc 	andi	r2,r2,2047
    d9a0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    d9a4:	e0bffb17 	ldw	r2,-20(fp)
    d9a8:	10c00b17 	ldw	r3,44(r2)
    d9ac:	e0bffe17 	ldw	r2,-8(fp)
    d9b0:	18801526 	beq	r3,r2,da08 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    d9b4:	e0bffc17 	ldw	r2,-16(fp)
    d9b8:	10800037 	ldwio	r2,0(r2)
    d9bc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    d9c0:	e0bff917 	ldw	r2,-28(fp)
    d9c4:	10a0000c 	andi	r2,r2,32768
    d9c8:	10001126 	beq	r2,zero,da10 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    d9cc:	e0bffb17 	ldw	r2,-20(fp)
    d9d0:	10800a17 	ldw	r2,40(r2)
    d9d4:	e0fff917 	ldw	r3,-28(fp)
    d9d8:	1809883a 	mov	r4,r3
    d9dc:	e0fffb17 	ldw	r3,-20(fp)
    d9e0:	1885883a 	add	r2,r3,r2
    d9e4:	10800e04 	addi	r2,r2,56
    d9e8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d9ec:	e0bffb17 	ldw	r2,-20(fp)
    d9f0:	10800a17 	ldw	r2,40(r2)
    d9f4:	10800044 	addi	r2,r2,1
    d9f8:	10c1ffcc 	andi	r3,r2,2047
    d9fc:	e0bffb17 	ldw	r2,-20(fp)
    da00:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    da04:	003fe206 	br	d990 <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    da08:	0001883a 	nop
    da0c:	00000106 	br	da14 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    da10:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    da14:	e0bff917 	ldw	r2,-28(fp)
    da18:	10bfffec 	andhi	r2,r2,65535
    da1c:	10000f26 	beq	r2,zero,da5c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    da20:	e0bffb17 	ldw	r2,-20(fp)
    da24:	10c00817 	ldw	r3,32(r2)
    da28:	00bfff84 	movi	r2,-2
    da2c:	1886703a 	and	r3,r3,r2
    da30:	e0bffb17 	ldw	r2,-20(fp)
    da34:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    da38:	e0bffc17 	ldw	r2,-16(fp)
    da3c:	10800104 	addi	r2,r2,4
    da40:	1007883a 	mov	r3,r2
    da44:	e0bffb17 	ldw	r2,-20(fp)
    da48:	10800817 	ldw	r2,32(r2)
    da4c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    da50:	e0bffc17 	ldw	r2,-16(fp)
    da54:	10800104 	addi	r2,r2,4
    da58:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    da5c:	e0bffd17 	ldw	r2,-12(fp)
    da60:	1080800c 	andi	r2,r2,512
    da64:	103fbe26 	beq	r2,zero,d960 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    da68:	e0bffd17 	ldw	r2,-12(fp)
    da6c:	1004d43a 	srli	r2,r2,16
    da70:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    da74:	00001406 	br	dac8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    da78:	e0bffc17 	ldw	r2,-16(fp)
    da7c:	e0fffb17 	ldw	r3,-20(fp)
    da80:	18c00d17 	ldw	r3,52(r3)
    da84:	e13ffb17 	ldw	r4,-20(fp)
    da88:	20c7883a 	add	r3,r4,r3
    da8c:	18c20e04 	addi	r3,r3,2104
    da90:	18c00003 	ldbu	r3,0(r3)
    da94:	18c03fcc 	andi	r3,r3,255
    da98:	18c0201c 	xori	r3,r3,128
    da9c:	18ffe004 	addi	r3,r3,-128
    daa0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    daa4:	e0bffb17 	ldw	r2,-20(fp)
    daa8:	10800d17 	ldw	r2,52(r2)
    daac:	10800044 	addi	r2,r2,1
    dab0:	10c1ffcc 	andi	r3,r2,2047
    dab4:	e0bffb17 	ldw	r2,-20(fp)
    dab8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    dabc:	e0bffa17 	ldw	r2,-24(fp)
    dac0:	10bfffc4 	addi	r2,r2,-1
    dac4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    dac8:	e0bffa17 	ldw	r2,-24(fp)
    dacc:	10000526 	beq	r2,zero,dae4 <altera_avalon_jtag_uart_irq+0x1a8>
    dad0:	e0bffb17 	ldw	r2,-20(fp)
    dad4:	10c00d17 	ldw	r3,52(r2)
    dad8:	e0bffb17 	ldw	r2,-20(fp)
    dadc:	10800c17 	ldw	r2,48(r2)
    dae0:	18bfe51e 	bne	r3,r2,da78 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    dae4:	e0bffa17 	ldw	r2,-24(fp)
    dae8:	103f9d26 	beq	r2,zero,d960 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    daec:	e0bffb17 	ldw	r2,-20(fp)
    daf0:	10c00817 	ldw	r3,32(r2)
    daf4:	00bfff44 	movi	r2,-3
    daf8:	1886703a 	and	r3,r3,r2
    dafc:	e0bffb17 	ldw	r2,-20(fp)
    db00:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    db04:	e0bffb17 	ldw	r2,-20(fp)
    db08:	10800017 	ldw	r2,0(r2)
    db0c:	10800104 	addi	r2,r2,4
    db10:	1007883a 	mov	r3,r2
    db14:	e0bffb17 	ldw	r2,-20(fp)
    db18:	10800817 	ldw	r2,32(r2)
    db1c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    db20:	e0bffc17 	ldw	r2,-16(fp)
    db24:	10800104 	addi	r2,r2,4
    db28:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    db2c:	003f8c06 	br	d960 <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    db30:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    db34:	0001883a 	nop
    db38:	e037883a 	mov	sp,fp
    db3c:	df000017 	ldw	fp,0(sp)
    db40:	dec00104 	addi	sp,sp,4
    db44:	f800283a 	ret

0000db48 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    db48:	defff804 	addi	sp,sp,-32
    db4c:	df000715 	stw	fp,28(sp)
    db50:	df000704 	addi	fp,sp,28
    db54:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    db58:	e0bffb17 	ldw	r2,-20(fp)
    db5c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    db60:	e0bff917 	ldw	r2,-28(fp)
    db64:	10800017 	ldw	r2,0(r2)
    db68:	10800104 	addi	r2,r2,4
    db6c:	10800037 	ldwio	r2,0(r2)
    db70:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    db74:	e0bffa17 	ldw	r2,-24(fp)
    db78:	1081000c 	andi	r2,r2,1024
    db7c:	10000b26 	beq	r2,zero,dbac <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    db80:	e0bff917 	ldw	r2,-28(fp)
    db84:	10800017 	ldw	r2,0(r2)
    db88:	10800104 	addi	r2,r2,4
    db8c:	1007883a 	mov	r3,r2
    db90:	e0bff917 	ldw	r2,-28(fp)
    db94:	10800817 	ldw	r2,32(r2)
    db98:	10810014 	ori	r2,r2,1024
    db9c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    dba0:	e0bff917 	ldw	r2,-28(fp)
    dba4:	10000915 	stw	zero,36(r2)
    dba8:	00000a06 	br	dbd4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    dbac:	e0bff917 	ldw	r2,-28(fp)
    dbb0:	10c00917 	ldw	r3,36(r2)
    dbb4:	00a00034 	movhi	r2,32768
    dbb8:	10bfff04 	addi	r2,r2,-4
    dbbc:	10c00536 	bltu	r2,r3,dbd4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    dbc0:	e0bff917 	ldw	r2,-28(fp)
    dbc4:	10800917 	ldw	r2,36(r2)
    dbc8:	10c00044 	addi	r3,r2,1
    dbcc:	e0bff917 	ldw	r2,-28(fp)
    dbd0:	10c00915 	stw	r3,36(r2)
    dbd4:	00800074 	movhi	r2,1
    dbd8:	108ba404 	addi	r2,r2,11920
    dbdc:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    dbe0:	e037883a 	mov	sp,fp
    dbe4:	df000017 	ldw	fp,0(sp)
    dbe8:	dec00104 	addi	sp,sp,4
    dbec:	f800283a 	ret

0000dbf0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    dbf0:	defffd04 	addi	sp,sp,-12
    dbf4:	df000215 	stw	fp,8(sp)
    dbf8:	df000204 	addi	fp,sp,8
    dbfc:	e13ffe15 	stw	r4,-8(fp)
    dc00:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    dc04:	00000506 	br	dc1c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    dc08:	e0bfff17 	ldw	r2,-4(fp)
    dc0c:	1090000c 	andi	r2,r2,16384
    dc10:	10000226 	beq	r2,zero,dc1c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    dc14:	00bffd44 	movi	r2,-11
    dc18:	00000b06 	br	dc48 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    dc1c:	e0bffe17 	ldw	r2,-8(fp)
    dc20:	10c00d17 	ldw	r3,52(r2)
    dc24:	e0bffe17 	ldw	r2,-8(fp)
    dc28:	10800c17 	ldw	r2,48(r2)
    dc2c:	18800526 	beq	r3,r2,dc44 <altera_avalon_jtag_uart_close+0x54>
    dc30:	e0bffe17 	ldw	r2,-8(fp)
    dc34:	10c00917 	ldw	r3,36(r2)
    dc38:	e0bffe17 	ldw	r2,-8(fp)
    dc3c:	10800117 	ldw	r2,4(r2)
    dc40:	18bff136 	bltu	r3,r2,dc08 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    dc44:	0005883a 	mov	r2,zero
}
    dc48:	e037883a 	mov	sp,fp
    dc4c:	df000017 	ldw	fp,0(sp)
    dc50:	dec00104 	addi	sp,sp,4
    dc54:	f800283a 	ret

0000dc58 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    dc58:	defffa04 	addi	sp,sp,-24
    dc5c:	df000515 	stw	fp,20(sp)
    dc60:	df000504 	addi	fp,sp,20
    dc64:	e13ffd15 	stw	r4,-12(fp)
    dc68:	e17ffe15 	stw	r5,-8(fp)
    dc6c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    dc70:	00bff9c4 	movi	r2,-25
    dc74:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    dc78:	e0bffe17 	ldw	r2,-8(fp)
    dc7c:	10da8060 	cmpeqi	r3,r2,27137
    dc80:	1800031e 	bne	r3,zero,dc90 <altera_avalon_jtag_uart_ioctl+0x38>
    dc84:	109a80a0 	cmpeqi	r2,r2,27138
    dc88:	1000181e 	bne	r2,zero,dcec <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    dc8c:	00002906 	br	dd34 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    dc90:	e0bffd17 	ldw	r2,-12(fp)
    dc94:	10c00117 	ldw	r3,4(r2)
    dc98:	00a00034 	movhi	r2,32768
    dc9c:	10bfffc4 	addi	r2,r2,-1
    dca0:	18802126 	beq	r3,r2,dd28 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    dca4:	e0bfff17 	ldw	r2,-4(fp)
    dca8:	10800017 	ldw	r2,0(r2)
    dcac:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    dcb0:	e0bffc17 	ldw	r2,-16(fp)
    dcb4:	10800090 	cmplti	r2,r2,2
    dcb8:	1000061e 	bne	r2,zero,dcd4 <altera_avalon_jtag_uart_ioctl+0x7c>
    dcbc:	e0fffc17 	ldw	r3,-16(fp)
    dcc0:	00a00034 	movhi	r2,32768
    dcc4:	10bfffc4 	addi	r2,r2,-1
    dcc8:	18800226 	beq	r3,r2,dcd4 <altera_avalon_jtag_uart_ioctl+0x7c>
    dccc:	e0bffc17 	ldw	r2,-16(fp)
    dcd0:	00000206 	br	dcdc <altera_avalon_jtag_uart_ioctl+0x84>
    dcd4:	00a00034 	movhi	r2,32768
    dcd8:	10bfff84 	addi	r2,r2,-2
    dcdc:	e0fffd17 	ldw	r3,-12(fp)
    dce0:	18800115 	stw	r2,4(r3)
      rc = 0;
    dce4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    dce8:	00000f06 	br	dd28 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    dcec:	e0bffd17 	ldw	r2,-12(fp)
    dcf0:	10c00117 	ldw	r3,4(r2)
    dcf4:	00a00034 	movhi	r2,32768
    dcf8:	10bfffc4 	addi	r2,r2,-1
    dcfc:	18800c26 	beq	r3,r2,dd30 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    dd00:	e0bffd17 	ldw	r2,-12(fp)
    dd04:	10c00917 	ldw	r3,36(r2)
    dd08:	e0bffd17 	ldw	r2,-12(fp)
    dd0c:	10800117 	ldw	r2,4(r2)
    dd10:	1885803a 	cmpltu	r2,r3,r2
    dd14:	10c03fcc 	andi	r3,r2,255
    dd18:	e0bfff17 	ldw	r2,-4(fp)
    dd1c:	10c00015 	stw	r3,0(r2)
      rc = 0;
    dd20:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    dd24:	00000206 	br	dd30 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    dd28:	0001883a 	nop
    dd2c:	00000106 	br	dd34 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    dd30:	0001883a 	nop

  default:
    break;
  }

  return rc;
    dd34:	e0bffb17 	ldw	r2,-20(fp)
}
    dd38:	e037883a 	mov	sp,fp
    dd3c:	df000017 	ldw	fp,0(sp)
    dd40:	dec00104 	addi	sp,sp,4
    dd44:	f800283a 	ret

0000dd48 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    dd48:	defff304 	addi	sp,sp,-52
    dd4c:	dfc00c15 	stw	ra,48(sp)
    dd50:	df000b15 	stw	fp,44(sp)
    dd54:	df000b04 	addi	fp,sp,44
    dd58:	e13ffc15 	stw	r4,-16(fp)
    dd5c:	e17ffd15 	stw	r5,-12(fp)
    dd60:	e1bffe15 	stw	r6,-8(fp)
    dd64:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    dd68:	e0bffd17 	ldw	r2,-12(fp)
    dd6c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    dd70:	00004706 	br	de90 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    dd74:	e0bffc17 	ldw	r2,-16(fp)
    dd78:	10800a17 	ldw	r2,40(r2)
    dd7c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    dd80:	e0bffc17 	ldw	r2,-16(fp)
    dd84:	10800b17 	ldw	r2,44(r2)
    dd88:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    dd8c:	e0fff717 	ldw	r3,-36(fp)
    dd90:	e0bff817 	ldw	r2,-32(fp)
    dd94:	18800536 	bltu	r3,r2,ddac <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    dd98:	e0fff717 	ldw	r3,-36(fp)
    dd9c:	e0bff817 	ldw	r2,-32(fp)
    dda0:	1885c83a 	sub	r2,r3,r2
    dda4:	e0bff615 	stw	r2,-40(fp)
    dda8:	00000406 	br	ddbc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    ddac:	00c20004 	movi	r3,2048
    ddb0:	e0bff817 	ldw	r2,-32(fp)
    ddb4:	1885c83a 	sub	r2,r3,r2
    ddb8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    ddbc:	e0bff617 	ldw	r2,-40(fp)
    ddc0:	10001e26 	beq	r2,zero,de3c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    ddc4:	e0fffe17 	ldw	r3,-8(fp)
    ddc8:	e0bff617 	ldw	r2,-40(fp)
    ddcc:	1880022e 	bgeu	r3,r2,ddd8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    ddd0:	e0bffe17 	ldw	r2,-8(fp)
    ddd4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    ddd8:	e0bffc17 	ldw	r2,-16(fp)
    dddc:	10c00e04 	addi	r3,r2,56
    dde0:	e0bff817 	ldw	r2,-32(fp)
    dde4:	1885883a 	add	r2,r3,r2
    dde8:	e1bff617 	ldw	r6,-40(fp)
    ddec:	100b883a 	mov	r5,r2
    ddf0:	e13ff517 	ldw	r4,-44(fp)
    ddf4:	0005e2c0 	call	5e2c <memcpy>
      ptr   += n;
    ddf8:	e0fff517 	ldw	r3,-44(fp)
    ddfc:	e0bff617 	ldw	r2,-40(fp)
    de00:	1885883a 	add	r2,r3,r2
    de04:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    de08:	e0fffe17 	ldw	r3,-8(fp)
    de0c:	e0bff617 	ldw	r2,-40(fp)
    de10:	1885c83a 	sub	r2,r3,r2
    de14:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    de18:	e0fff817 	ldw	r3,-32(fp)
    de1c:	e0bff617 	ldw	r2,-40(fp)
    de20:	1885883a 	add	r2,r3,r2
    de24:	10c1ffcc 	andi	r3,r2,2047
    de28:	e0bffc17 	ldw	r2,-16(fp)
    de2c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    de30:	e0bffe17 	ldw	r2,-8(fp)
    de34:	00bfcf16 	blt	zero,r2,dd74 <altera_avalon_jtag_uart_read+0x2c>
    de38:	00000106 	br	de40 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    de3c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    de40:	e0fff517 	ldw	r3,-44(fp)
    de44:	e0bffd17 	ldw	r2,-12(fp)
    de48:	1880141e 	bne	r3,r2,de9c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    de4c:	e0bfff17 	ldw	r2,-4(fp)
    de50:	1090000c 	andi	r2,r2,16384
    de54:	1000131e 	bne	r2,zero,dea4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    de58:	0001883a 	nop
    de5c:	e0bffc17 	ldw	r2,-16(fp)
    de60:	10c00a17 	ldw	r3,40(r2)
    de64:	e0bff717 	ldw	r2,-36(fp)
    de68:	1880051e 	bne	r3,r2,de80 <altera_avalon_jtag_uart_read+0x138>
    de6c:	e0bffc17 	ldw	r2,-16(fp)
    de70:	10c00917 	ldw	r3,36(r2)
    de74:	e0bffc17 	ldw	r2,-16(fp)
    de78:	10800117 	ldw	r2,4(r2)
    de7c:	18bff736 	bltu	r3,r2,de5c <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    de80:	e0bffc17 	ldw	r2,-16(fp)
    de84:	10c00a17 	ldw	r3,40(r2)
    de88:	e0bff717 	ldw	r2,-36(fp)
    de8c:	18800726 	beq	r3,r2,deac <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    de90:	e0bffe17 	ldw	r2,-8(fp)
    de94:	00bfb716 	blt	zero,r2,dd74 <altera_avalon_jtag_uart_read+0x2c>
    de98:	00000506 	br	deb0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    de9c:	0001883a 	nop
    dea0:	00000306 	br	deb0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    dea4:	0001883a 	nop
    dea8:	00000106 	br	deb0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    deac:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    deb0:	e0fff517 	ldw	r3,-44(fp)
    deb4:	e0bffd17 	ldw	r2,-12(fp)
    deb8:	18801826 	beq	r3,r2,df1c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    debc:	0005303a 	rdctl	r2,status
    dec0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dec4:	e0fffb17 	ldw	r3,-20(fp)
    dec8:	00bfff84 	movi	r2,-2
    decc:	1884703a 	and	r2,r3,r2
    ded0:	1001703a 	wrctl	status,r2
  
  return context;
    ded4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    ded8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    dedc:	e0bffc17 	ldw	r2,-16(fp)
    dee0:	10800817 	ldw	r2,32(r2)
    dee4:	10c00054 	ori	r3,r2,1
    dee8:	e0bffc17 	ldw	r2,-16(fp)
    deec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    def0:	e0bffc17 	ldw	r2,-16(fp)
    def4:	10800017 	ldw	r2,0(r2)
    def8:	10800104 	addi	r2,r2,4
    defc:	1007883a 	mov	r3,r2
    df00:	e0bffc17 	ldw	r2,-16(fp)
    df04:	10800817 	ldw	r2,32(r2)
    df08:	18800035 	stwio	r2,0(r3)
    df0c:	e0bffa17 	ldw	r2,-24(fp)
    df10:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    df14:	e0bff917 	ldw	r2,-28(fp)
    df18:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    df1c:	e0fff517 	ldw	r3,-44(fp)
    df20:	e0bffd17 	ldw	r2,-12(fp)
    df24:	18800426 	beq	r3,r2,df38 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    df28:	e0fff517 	ldw	r3,-44(fp)
    df2c:	e0bffd17 	ldw	r2,-12(fp)
    df30:	1885c83a 	sub	r2,r3,r2
    df34:	00000606 	br	df50 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    df38:	e0bfff17 	ldw	r2,-4(fp)
    df3c:	1090000c 	andi	r2,r2,16384
    df40:	10000226 	beq	r2,zero,df4c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    df44:	00bffd44 	movi	r2,-11
    df48:	00000106 	br	df50 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    df4c:	00bffec4 	movi	r2,-5
}
    df50:	e037883a 	mov	sp,fp
    df54:	dfc00117 	ldw	ra,4(sp)
    df58:	df000017 	ldw	fp,0(sp)
    df5c:	dec00204 	addi	sp,sp,8
    df60:	f800283a 	ret

0000df64 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    df64:	defff304 	addi	sp,sp,-52
    df68:	dfc00c15 	stw	ra,48(sp)
    df6c:	df000b15 	stw	fp,44(sp)
    df70:	df000b04 	addi	fp,sp,44
    df74:	e13ffc15 	stw	r4,-16(fp)
    df78:	e17ffd15 	stw	r5,-12(fp)
    df7c:	e1bffe15 	stw	r6,-8(fp)
    df80:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    df84:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    df88:	e0bffd17 	ldw	r2,-12(fp)
    df8c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    df90:	00003706 	br	e070 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    df94:	e0bffc17 	ldw	r2,-16(fp)
    df98:	10800c17 	ldw	r2,48(r2)
    df9c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    dfa0:	e0bffc17 	ldw	r2,-16(fp)
    dfa4:	10800d17 	ldw	r2,52(r2)
    dfa8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    dfac:	e0fff917 	ldw	r3,-28(fp)
    dfb0:	e0bff517 	ldw	r2,-44(fp)
    dfb4:	1880062e 	bgeu	r3,r2,dfd0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    dfb8:	e0fff517 	ldw	r3,-44(fp)
    dfbc:	e0bff917 	ldw	r2,-28(fp)
    dfc0:	1885c83a 	sub	r2,r3,r2
    dfc4:	10bfffc4 	addi	r2,r2,-1
    dfc8:	e0bff615 	stw	r2,-40(fp)
    dfcc:	00000b06 	br	dffc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    dfd0:	e0bff517 	ldw	r2,-44(fp)
    dfd4:	10000526 	beq	r2,zero,dfec <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    dfd8:	00c20004 	movi	r3,2048
    dfdc:	e0bff917 	ldw	r2,-28(fp)
    dfe0:	1885c83a 	sub	r2,r3,r2
    dfe4:	e0bff615 	stw	r2,-40(fp)
    dfe8:	00000406 	br	dffc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    dfec:	00c1ffc4 	movi	r3,2047
    dff0:	e0bff917 	ldw	r2,-28(fp)
    dff4:	1885c83a 	sub	r2,r3,r2
    dff8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    dffc:	e0bff617 	ldw	r2,-40(fp)
    e000:	10001e26 	beq	r2,zero,e07c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    e004:	e0fffe17 	ldw	r3,-8(fp)
    e008:	e0bff617 	ldw	r2,-40(fp)
    e00c:	1880022e 	bgeu	r3,r2,e018 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    e010:	e0bffe17 	ldw	r2,-8(fp)
    e014:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    e018:	e0bffc17 	ldw	r2,-16(fp)
    e01c:	10c20e04 	addi	r3,r2,2104
    e020:	e0bff917 	ldw	r2,-28(fp)
    e024:	1885883a 	add	r2,r3,r2
    e028:	e1bff617 	ldw	r6,-40(fp)
    e02c:	e17ffd17 	ldw	r5,-12(fp)
    e030:	1009883a 	mov	r4,r2
    e034:	0005e2c0 	call	5e2c <memcpy>
      ptr   += n;
    e038:	e0fffd17 	ldw	r3,-12(fp)
    e03c:	e0bff617 	ldw	r2,-40(fp)
    e040:	1885883a 	add	r2,r3,r2
    e044:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    e048:	e0fffe17 	ldw	r3,-8(fp)
    e04c:	e0bff617 	ldw	r2,-40(fp)
    e050:	1885c83a 	sub	r2,r3,r2
    e054:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e058:	e0fff917 	ldw	r3,-28(fp)
    e05c:	e0bff617 	ldw	r2,-40(fp)
    e060:	1885883a 	add	r2,r3,r2
    e064:	10c1ffcc 	andi	r3,r2,2047
    e068:	e0bffc17 	ldw	r2,-16(fp)
    e06c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    e070:	e0bffe17 	ldw	r2,-8(fp)
    e074:	00bfc716 	blt	zero,r2,df94 <altera_avalon_jtag_uart_write+0x30>
    e078:	00000106 	br	e080 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    e07c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e080:	0005303a 	rdctl	r2,status
    e084:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e088:	e0fffb17 	ldw	r3,-20(fp)
    e08c:	00bfff84 	movi	r2,-2
    e090:	1884703a 	and	r2,r3,r2
    e094:	1001703a 	wrctl	status,r2
  
  return context;
    e098:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    e09c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    e0a0:	e0bffc17 	ldw	r2,-16(fp)
    e0a4:	10800817 	ldw	r2,32(r2)
    e0a8:	10c00094 	ori	r3,r2,2
    e0ac:	e0bffc17 	ldw	r2,-16(fp)
    e0b0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e0b4:	e0bffc17 	ldw	r2,-16(fp)
    e0b8:	10800017 	ldw	r2,0(r2)
    e0bc:	10800104 	addi	r2,r2,4
    e0c0:	1007883a 	mov	r3,r2
    e0c4:	e0bffc17 	ldw	r2,-16(fp)
    e0c8:	10800817 	ldw	r2,32(r2)
    e0cc:	18800035 	stwio	r2,0(r3)
    e0d0:	e0bffa17 	ldw	r2,-24(fp)
    e0d4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e0d8:	e0bff817 	ldw	r2,-32(fp)
    e0dc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    e0e0:	e0bffe17 	ldw	r2,-8(fp)
    e0e4:	0080100e 	bge	zero,r2,e128 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    e0e8:	e0bfff17 	ldw	r2,-4(fp)
    e0ec:	1090000c 	andi	r2,r2,16384
    e0f0:	1000101e 	bne	r2,zero,e134 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    e0f4:	0001883a 	nop
    e0f8:	e0bffc17 	ldw	r2,-16(fp)
    e0fc:	10c00d17 	ldw	r3,52(r2)
    e100:	e0bff517 	ldw	r2,-44(fp)
    e104:	1880051e 	bne	r3,r2,e11c <altera_avalon_jtag_uart_write+0x1b8>
    e108:	e0bffc17 	ldw	r2,-16(fp)
    e10c:	10c00917 	ldw	r3,36(r2)
    e110:	e0bffc17 	ldw	r2,-16(fp)
    e114:	10800117 	ldw	r2,4(r2)
    e118:	18bff736 	bltu	r3,r2,e0f8 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    e11c:	e0bffc17 	ldw	r2,-16(fp)
    e120:	10800917 	ldw	r2,36(r2)
    e124:	1000051e 	bne	r2,zero,e13c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    e128:	e0bffe17 	ldw	r2,-8(fp)
    e12c:	00bfd016 	blt	zero,r2,e070 <altera_avalon_jtag_uart_write+0x10c>
    e130:	00000306 	br	e140 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    e134:	0001883a 	nop
    e138:	00000106 	br	e140 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    e13c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    e140:	e0fffd17 	ldw	r3,-12(fp)
    e144:	e0bff717 	ldw	r2,-36(fp)
    e148:	18800426 	beq	r3,r2,e15c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    e14c:	e0fffd17 	ldw	r3,-12(fp)
    e150:	e0bff717 	ldw	r2,-36(fp)
    e154:	1885c83a 	sub	r2,r3,r2
    e158:	00000606 	br	e174 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    e15c:	e0bfff17 	ldw	r2,-4(fp)
    e160:	1090000c 	andi	r2,r2,16384
    e164:	10000226 	beq	r2,zero,e170 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    e168:	00bffd44 	movi	r2,-11
    e16c:	00000106 	br	e174 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    e170:	00bffec4 	movi	r2,-5
}
    e174:	e037883a 	mov	sp,fp
    e178:	dfc00117 	ldw	ra,4(sp)
    e17c:	df000017 	ldw	fp,0(sp)
    e180:	dec00204 	addi	sp,sp,8
    e184:	f800283a 	ret

0000e188 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    e188:	defffa04 	addi	sp,sp,-24
    e18c:	dfc00515 	stw	ra,20(sp)
    e190:	df000415 	stw	fp,16(sp)
    e194:	df000404 	addi	fp,sp,16
    e198:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    e19c:	0007883a 	mov	r3,zero
    e1a0:	e0bfff17 	ldw	r2,-4(fp)
    e1a4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    e1a8:	e0bfff17 	ldw	r2,-4(fp)
    e1ac:	10800104 	addi	r2,r2,4
    e1b0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e1b4:	0005303a 	rdctl	r2,status
    e1b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e1bc:	e0fffd17 	ldw	r3,-12(fp)
    e1c0:	00bfff84 	movi	r2,-2
    e1c4:	1884703a 	and	r2,r3,r2
    e1c8:	1001703a 	wrctl	status,r2
  
  return context;
    e1cc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    e1d0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    e1d4:	000ed1c0 	call	ed1c <alt_tick>
    e1d8:	e0bffc17 	ldw	r2,-16(fp)
    e1dc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e1e0:	e0bffe17 	ldw	r2,-8(fp)
    e1e4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    e1e8:	0001883a 	nop
    e1ec:	e037883a 	mov	sp,fp
    e1f0:	dfc00117 	ldw	ra,4(sp)
    e1f4:	df000017 	ldw	fp,0(sp)
    e1f8:	dec00204 	addi	sp,sp,8
    e1fc:	f800283a 	ret

0000e200 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    e200:	defff804 	addi	sp,sp,-32
    e204:	dfc00715 	stw	ra,28(sp)
    e208:	df000615 	stw	fp,24(sp)
    e20c:	df000604 	addi	fp,sp,24
    e210:	e13ffc15 	stw	r4,-16(fp)
    e214:	e17ffd15 	stw	r5,-12(fp)
    e218:	e1bffe15 	stw	r6,-8(fp)
    e21c:	e1ffff15 	stw	r7,-4(fp)
    e220:	e0bfff17 	ldw	r2,-4(fp)
    e224:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    e228:	00800074 	movhi	r2,1
    e22c:	108ba404 	addi	r2,r2,11920
    e230:	10800017 	ldw	r2,0(r2)
    e234:	1000041e 	bne	r2,zero,e248 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    e238:	00800074 	movhi	r2,1
    e23c:	108ba404 	addi	r2,r2,11920
    e240:	e0fffb17 	ldw	r3,-20(fp)
    e244:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    e248:	e0bffc17 	ldw	r2,-16(fp)
    e24c:	10800104 	addi	r2,r2,4
    e250:	00c001c4 	movi	r3,7
    e254:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    e258:	d8000015 	stw	zero,0(sp)
    e25c:	e1fffc17 	ldw	r7,-16(fp)
    e260:	01800074 	movhi	r6,1
    e264:	31b86204 	addi	r6,r6,-7800
    e268:	e17ffe17 	ldw	r5,-8(fp)
    e26c:	e13ffd17 	ldw	r4,-12(fp)
    e270:	000e5fc0 	call	e5fc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    e274:	0001883a 	nop
    e278:	e037883a 	mov	sp,fp
    e27c:	dfc00117 	ldw	ra,4(sp)
    e280:	df000017 	ldw	fp,0(sp)
    e284:	dec00204 	addi	sp,sp,8
    e288:	f800283a 	ret

0000e28c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    e28c:	defff504 	addi	sp,sp,-44
    e290:	df000a15 	stw	fp,40(sp)
    e294:	df000a04 	addi	fp,sp,40
    e298:	e13ffc15 	stw	r4,-16(fp)
    e29c:	e17ffd15 	stw	r5,-12(fp)
    e2a0:	e1bffe15 	stw	r6,-8(fp)
    e2a4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    e2a8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    e2ac:	00800074 	movhi	r2,1
    e2b0:	108ba404 	addi	r2,r2,11920
    e2b4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    e2b8:	10003f26 	beq	r2,zero,e3b8 <alt_alarm_start+0x12c>
  {
    if (alarm)
    e2bc:	e0bffc17 	ldw	r2,-16(fp)
    e2c0:	10003b26 	beq	r2,zero,e3b0 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    e2c4:	e0bffc17 	ldw	r2,-16(fp)
    e2c8:	e0fffe17 	ldw	r3,-8(fp)
    e2cc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    e2d0:	e0bffc17 	ldw	r2,-16(fp)
    e2d4:	e0ffff17 	ldw	r3,-4(fp)
    e2d8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e2dc:	0005303a 	rdctl	r2,status
    e2e0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e2e4:	e0fff917 	ldw	r3,-28(fp)
    e2e8:	00bfff84 	movi	r2,-2
    e2ec:	1884703a 	and	r2,r3,r2
    e2f0:	1001703a 	wrctl	status,r2
  
  return context;
    e2f4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    e2f8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    e2fc:	00800074 	movhi	r2,1
    e300:	108ba504 	addi	r2,r2,11924
    e304:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    e308:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    e30c:	e0fffd17 	ldw	r3,-12(fp)
    e310:	e0bff617 	ldw	r2,-40(fp)
    e314:	1885883a 	add	r2,r3,r2
    e318:	10c00044 	addi	r3,r2,1
    e31c:	e0bffc17 	ldw	r2,-16(fp)
    e320:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    e324:	e0bffc17 	ldw	r2,-16(fp)
    e328:	10c00217 	ldw	r3,8(r2)
    e32c:	e0bff617 	ldw	r2,-40(fp)
    e330:	1880042e 	bgeu	r3,r2,e344 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    e334:	e0bffc17 	ldw	r2,-16(fp)
    e338:	00c00044 	movi	r3,1
    e33c:	10c00405 	stb	r3,16(r2)
    e340:	00000206 	br	e34c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    e344:	e0bffc17 	ldw	r2,-16(fp)
    e348:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    e34c:	e0fffc17 	ldw	r3,-16(fp)
    e350:	00800074 	movhi	r2,1
    e354:	1084dc04 	addi	r2,r2,4976
    e358:	e0bffa15 	stw	r2,-24(fp)
    e35c:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    e360:	e0bffb17 	ldw	r2,-20(fp)
    e364:	e0fffa17 	ldw	r3,-24(fp)
    e368:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    e36c:	e0bffa17 	ldw	r2,-24(fp)
    e370:	10c00017 	ldw	r3,0(r2)
    e374:	e0bffb17 	ldw	r2,-20(fp)
    e378:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    e37c:	e0bffa17 	ldw	r2,-24(fp)
    e380:	10800017 	ldw	r2,0(r2)
    e384:	e0fffb17 	ldw	r3,-20(fp)
    e388:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    e38c:	e0bffa17 	ldw	r2,-24(fp)
    e390:	e0fffb17 	ldw	r3,-20(fp)
    e394:	10c00015 	stw	r3,0(r2)
    e398:	e0bff817 	ldw	r2,-32(fp)
    e39c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e3a0:	e0bff717 	ldw	r2,-36(fp)
    e3a4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    e3a8:	0005883a 	mov	r2,zero
    e3ac:	00000306 	br	e3bc <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    e3b0:	00bffa84 	movi	r2,-22
    e3b4:	00000106 	br	e3bc <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    e3b8:	00bfde84 	movi	r2,-134
  }
}
    e3bc:	e037883a 	mov	sp,fp
    e3c0:	df000017 	ldw	fp,0(sp)
    e3c4:	dec00104 	addi	sp,sp,4
    e3c8:	f800283a 	ret

0000e3cc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    e3cc:	defffe04 	addi	sp,sp,-8
    e3d0:	df000115 	stw	fp,4(sp)
    e3d4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    e3d8:	e03fff15 	stw	zero,-4(fp)
    e3dc:	00000506 	br	e3f4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    e3e0:	e0bfff17 	ldw	r2,-4(fp)
    e3e4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    e3e8:	e0bfff17 	ldw	r2,-4(fp)
    e3ec:	10800804 	addi	r2,r2,32
    e3f0:	e0bfff15 	stw	r2,-4(fp)
    e3f4:	e0bfff17 	ldw	r2,-4(fp)
    e3f8:	10820030 	cmpltui	r2,r2,2048
    e3fc:	103ff81e 	bne	r2,zero,e3e0 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    e400:	0001883a 	nop
    e404:	e037883a 	mov	sp,fp
    e408:	df000017 	ldw	fp,0(sp)
    e40c:	dec00104 	addi	sp,sp,4
    e410:	f800283a 	ret

0000e414 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e414:	defffe04 	addi	sp,sp,-8
    e418:	dfc00115 	stw	ra,4(sp)
    e41c:	df000015 	stw	fp,0(sp)
    e420:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e424:	00800074 	movhi	r2,1
    e428:	1084d904 	addi	r2,r2,4964
    e42c:	10800017 	ldw	r2,0(r2)
    e430:	10000526 	beq	r2,zero,e448 <alt_get_errno+0x34>
    e434:	00800074 	movhi	r2,1
    e438:	1084d904 	addi	r2,r2,4964
    e43c:	10800017 	ldw	r2,0(r2)
    e440:	103ee83a 	callr	r2
    e444:	00000206 	br	e450 <alt_get_errno+0x3c>
    e448:	00800074 	movhi	r2,1
    e44c:	108b9f04 	addi	r2,r2,11900
}
    e450:	e037883a 	mov	sp,fp
    e454:	dfc00117 	ldw	ra,4(sp)
    e458:	df000017 	ldw	fp,0(sp)
    e45c:	dec00204 	addi	sp,sp,8
    e460:	f800283a 	ret

0000e464 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    e464:	defffa04 	addi	sp,sp,-24
    e468:	dfc00515 	stw	ra,20(sp)
    e46c:	df000415 	stw	fp,16(sp)
    e470:	df000404 	addi	fp,sp,16
    e474:	e13ffe15 	stw	r4,-8(fp)
    e478:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    e47c:	e0bffe17 	ldw	r2,-8(fp)
    e480:	10000326 	beq	r2,zero,e490 <alt_dev_llist_insert+0x2c>
    e484:	e0bffe17 	ldw	r2,-8(fp)
    e488:	10800217 	ldw	r2,8(r2)
    e48c:	1000061e 	bne	r2,zero,e4a8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    e490:	000e4140 	call	e414 <alt_get_errno>
    e494:	1007883a 	mov	r3,r2
    e498:	00800584 	movi	r2,22
    e49c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    e4a0:	00bffa84 	movi	r2,-22
    e4a4:	00001306 	br	e4f4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    e4a8:	e0bffe17 	ldw	r2,-8(fp)
    e4ac:	e0ffff17 	ldw	r3,-4(fp)
    e4b0:	e0fffc15 	stw	r3,-16(fp)
    e4b4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    e4b8:	e0bffd17 	ldw	r2,-12(fp)
    e4bc:	e0fffc17 	ldw	r3,-16(fp)
    e4c0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    e4c4:	e0bffc17 	ldw	r2,-16(fp)
    e4c8:	10c00017 	ldw	r3,0(r2)
    e4cc:	e0bffd17 	ldw	r2,-12(fp)
    e4d0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    e4d4:	e0bffc17 	ldw	r2,-16(fp)
    e4d8:	10800017 	ldw	r2,0(r2)
    e4dc:	e0fffd17 	ldw	r3,-12(fp)
    e4e0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    e4e4:	e0bffc17 	ldw	r2,-16(fp)
    e4e8:	e0fffd17 	ldw	r3,-12(fp)
    e4ec:	10c00015 	stw	r3,0(r2)

  return 0;  
    e4f0:	0005883a 	mov	r2,zero
}
    e4f4:	e037883a 	mov	sp,fp
    e4f8:	dfc00117 	ldw	ra,4(sp)
    e4fc:	df000017 	ldw	fp,0(sp)
    e500:	dec00204 	addi	sp,sp,8
    e504:	f800283a 	ret

0000e508 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    e508:	defffd04 	addi	sp,sp,-12
    e50c:	dfc00215 	stw	ra,8(sp)
    e510:	df000115 	stw	fp,4(sp)
    e514:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    e518:	00800074 	movhi	r2,1
    e51c:	10bd5704 	addi	r2,r2,-2724
    e520:	e0bfff15 	stw	r2,-4(fp)
    e524:	00000606 	br	e540 <_do_ctors+0x38>
        (*ctor) (); 
    e528:	e0bfff17 	ldw	r2,-4(fp)
    e52c:	10800017 	ldw	r2,0(r2)
    e530:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    e534:	e0bfff17 	ldw	r2,-4(fp)
    e538:	10bfff04 	addi	r2,r2,-4
    e53c:	e0bfff15 	stw	r2,-4(fp)
    e540:	e0ffff17 	ldw	r3,-4(fp)
    e544:	00800074 	movhi	r2,1
    e548:	10bd5804 	addi	r2,r2,-2720
    e54c:	18bff62e 	bgeu	r3,r2,e528 <_do_ctors+0x20>
        (*ctor) (); 
}
    e550:	0001883a 	nop
    e554:	e037883a 	mov	sp,fp
    e558:	dfc00117 	ldw	ra,4(sp)
    e55c:	df000017 	ldw	fp,0(sp)
    e560:	dec00204 	addi	sp,sp,8
    e564:	f800283a 	ret

0000e568 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    e568:	defffd04 	addi	sp,sp,-12
    e56c:	dfc00215 	stw	ra,8(sp)
    e570:	df000115 	stw	fp,4(sp)
    e574:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    e578:	00800074 	movhi	r2,1
    e57c:	10bd5704 	addi	r2,r2,-2724
    e580:	e0bfff15 	stw	r2,-4(fp)
    e584:	00000606 	br	e5a0 <_do_dtors+0x38>
        (*dtor) (); 
    e588:	e0bfff17 	ldw	r2,-4(fp)
    e58c:	10800017 	ldw	r2,0(r2)
    e590:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    e594:	e0bfff17 	ldw	r2,-4(fp)
    e598:	10bfff04 	addi	r2,r2,-4
    e59c:	e0bfff15 	stw	r2,-4(fp)
    e5a0:	e0ffff17 	ldw	r3,-4(fp)
    e5a4:	00800074 	movhi	r2,1
    e5a8:	10bd5804 	addi	r2,r2,-2720
    e5ac:	18bff62e 	bgeu	r3,r2,e588 <_do_dtors+0x20>
        (*dtor) (); 
}
    e5b0:	0001883a 	nop
    e5b4:	e037883a 	mov	sp,fp
    e5b8:	dfc00117 	ldw	ra,4(sp)
    e5bc:	df000017 	ldw	fp,0(sp)
    e5c0:	dec00204 	addi	sp,sp,8
    e5c4:	f800283a 	ret

0000e5c8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    e5c8:	defffe04 	addi	sp,sp,-8
    e5cc:	dfc00115 	stw	ra,4(sp)
    e5d0:	df000015 	stw	fp,0(sp)
    e5d4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    e5d8:	01440004 	movi	r5,4096
    e5dc:	0009883a 	mov	r4,zero
    e5e0:	000f0a00 	call	f0a0 <alt_icache_flush>
#endif
}
    e5e4:	0001883a 	nop
    e5e8:	e037883a 	mov	sp,fp
    e5ec:	dfc00117 	ldw	ra,4(sp)
    e5f0:	df000017 	ldw	fp,0(sp)
    e5f4:	dec00204 	addi	sp,sp,8
    e5f8:	f800283a 	ret

0000e5fc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    e5fc:	defff904 	addi	sp,sp,-28
    e600:	dfc00615 	stw	ra,24(sp)
    e604:	df000515 	stw	fp,20(sp)
    e608:	df000504 	addi	fp,sp,20
    e60c:	e13ffc15 	stw	r4,-16(fp)
    e610:	e17ffd15 	stw	r5,-12(fp)
    e614:	e1bffe15 	stw	r6,-8(fp)
    e618:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    e61c:	e0800217 	ldw	r2,8(fp)
    e620:	d8800015 	stw	r2,0(sp)
    e624:	e1ffff17 	ldw	r7,-4(fp)
    e628:	e1bffe17 	ldw	r6,-8(fp)
    e62c:	e17ffd17 	ldw	r5,-12(fp)
    e630:	e13ffc17 	ldw	r4,-16(fp)
    e634:	000e7dc0 	call	e7dc <alt_iic_isr_register>
}  
    e638:	e037883a 	mov	sp,fp
    e63c:	dfc00117 	ldw	ra,4(sp)
    e640:	df000017 	ldw	fp,0(sp)
    e644:	dec00204 	addi	sp,sp,8
    e648:	f800283a 	ret

0000e64c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    e64c:	defff904 	addi	sp,sp,-28
    e650:	df000615 	stw	fp,24(sp)
    e654:	df000604 	addi	fp,sp,24
    e658:	e13ffe15 	stw	r4,-8(fp)
    e65c:	e17fff15 	stw	r5,-4(fp)
    e660:	e0bfff17 	ldw	r2,-4(fp)
    e664:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e668:	0005303a 	rdctl	r2,status
    e66c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e670:	e0fffb17 	ldw	r3,-20(fp)
    e674:	00bfff84 	movi	r2,-2
    e678:	1884703a 	and	r2,r3,r2
    e67c:	1001703a 	wrctl	status,r2
  
  return context;
    e680:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    e684:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    e688:	00c00044 	movi	r3,1
    e68c:	e0bffa17 	ldw	r2,-24(fp)
    e690:	1884983a 	sll	r2,r3,r2
    e694:	1007883a 	mov	r3,r2
    e698:	00800074 	movhi	r2,1
    e69c:	108ba304 	addi	r2,r2,11916
    e6a0:	10800017 	ldw	r2,0(r2)
    e6a4:	1886b03a 	or	r3,r3,r2
    e6a8:	00800074 	movhi	r2,1
    e6ac:	108ba304 	addi	r2,r2,11916
    e6b0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    e6b4:	00800074 	movhi	r2,1
    e6b8:	108ba304 	addi	r2,r2,11916
    e6bc:	10800017 	ldw	r2,0(r2)
    e6c0:	100170fa 	wrctl	ienable,r2
    e6c4:	e0bffc17 	ldw	r2,-16(fp)
    e6c8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e6cc:	e0bffd17 	ldw	r2,-12(fp)
    e6d0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    e6d4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    e6d8:	0001883a 	nop
}
    e6dc:	e037883a 	mov	sp,fp
    e6e0:	df000017 	ldw	fp,0(sp)
    e6e4:	dec00104 	addi	sp,sp,4
    e6e8:	f800283a 	ret

0000e6ec <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    e6ec:	defff904 	addi	sp,sp,-28
    e6f0:	df000615 	stw	fp,24(sp)
    e6f4:	df000604 	addi	fp,sp,24
    e6f8:	e13ffe15 	stw	r4,-8(fp)
    e6fc:	e17fff15 	stw	r5,-4(fp)
    e700:	e0bfff17 	ldw	r2,-4(fp)
    e704:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e708:	0005303a 	rdctl	r2,status
    e70c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e710:	e0fffb17 	ldw	r3,-20(fp)
    e714:	00bfff84 	movi	r2,-2
    e718:	1884703a 	and	r2,r3,r2
    e71c:	1001703a 	wrctl	status,r2
  
  return context;
    e720:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    e724:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    e728:	00c00044 	movi	r3,1
    e72c:	e0bffa17 	ldw	r2,-24(fp)
    e730:	1884983a 	sll	r2,r3,r2
    e734:	0084303a 	nor	r2,zero,r2
    e738:	1007883a 	mov	r3,r2
    e73c:	00800074 	movhi	r2,1
    e740:	108ba304 	addi	r2,r2,11916
    e744:	10800017 	ldw	r2,0(r2)
    e748:	1886703a 	and	r3,r3,r2
    e74c:	00800074 	movhi	r2,1
    e750:	108ba304 	addi	r2,r2,11916
    e754:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    e758:	00800074 	movhi	r2,1
    e75c:	108ba304 	addi	r2,r2,11916
    e760:	10800017 	ldw	r2,0(r2)
    e764:	100170fa 	wrctl	ienable,r2
    e768:	e0bffc17 	ldw	r2,-16(fp)
    e76c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e770:	e0bffd17 	ldw	r2,-12(fp)
    e774:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    e778:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    e77c:	0001883a 	nop
}
    e780:	e037883a 	mov	sp,fp
    e784:	df000017 	ldw	fp,0(sp)
    e788:	dec00104 	addi	sp,sp,4
    e78c:	f800283a 	ret

0000e790 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    e790:	defffc04 	addi	sp,sp,-16
    e794:	df000315 	stw	fp,12(sp)
    e798:	df000304 	addi	fp,sp,12
    e79c:	e13ffe15 	stw	r4,-8(fp)
    e7a0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    e7a4:	000530fa 	rdctl	r2,ienable
    e7a8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    e7ac:	00c00044 	movi	r3,1
    e7b0:	e0bfff17 	ldw	r2,-4(fp)
    e7b4:	1884983a 	sll	r2,r3,r2
    e7b8:	1007883a 	mov	r3,r2
    e7bc:	e0bffd17 	ldw	r2,-12(fp)
    e7c0:	1884703a 	and	r2,r3,r2
    e7c4:	1004c03a 	cmpne	r2,r2,zero
    e7c8:	10803fcc 	andi	r2,r2,255
}
    e7cc:	e037883a 	mov	sp,fp
    e7d0:	df000017 	ldw	fp,0(sp)
    e7d4:	dec00104 	addi	sp,sp,4
    e7d8:	f800283a 	ret

0000e7dc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    e7dc:	defff504 	addi	sp,sp,-44
    e7e0:	dfc00a15 	stw	ra,40(sp)
    e7e4:	df000915 	stw	fp,36(sp)
    e7e8:	df000904 	addi	fp,sp,36
    e7ec:	e13ffc15 	stw	r4,-16(fp)
    e7f0:	e17ffd15 	stw	r5,-12(fp)
    e7f4:	e1bffe15 	stw	r6,-8(fp)
    e7f8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    e7fc:	00bffa84 	movi	r2,-22
    e800:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    e804:	e0bffd17 	ldw	r2,-12(fp)
    e808:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    e80c:	e0bff817 	ldw	r2,-32(fp)
    e810:	10800808 	cmpgei	r2,r2,32
    e814:	1000271e 	bne	r2,zero,e8b4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e818:	0005303a 	rdctl	r2,status
    e81c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e820:	e0fffb17 	ldw	r3,-20(fp)
    e824:	00bfff84 	movi	r2,-2
    e828:	1884703a 	and	r2,r3,r2
    e82c:	1001703a 	wrctl	status,r2
  
  return context;
    e830:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    e834:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    e838:	00800074 	movhi	r2,1
    e83c:	108bb104 	addi	r2,r2,11972
    e840:	e0fff817 	ldw	r3,-32(fp)
    e844:	180690fa 	slli	r3,r3,3
    e848:	10c5883a 	add	r2,r2,r3
    e84c:	e0fffe17 	ldw	r3,-8(fp)
    e850:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    e854:	00800074 	movhi	r2,1
    e858:	108bb104 	addi	r2,r2,11972
    e85c:	e0fff817 	ldw	r3,-32(fp)
    e860:	180690fa 	slli	r3,r3,3
    e864:	10c5883a 	add	r2,r2,r3
    e868:	10800104 	addi	r2,r2,4
    e86c:	e0ffff17 	ldw	r3,-4(fp)
    e870:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    e874:	e0bffe17 	ldw	r2,-8(fp)
    e878:	10000526 	beq	r2,zero,e890 <alt_iic_isr_register+0xb4>
    e87c:	e0bff817 	ldw	r2,-32(fp)
    e880:	100b883a 	mov	r5,r2
    e884:	e13ffc17 	ldw	r4,-16(fp)
    e888:	000e64c0 	call	e64c <alt_ic_irq_enable>
    e88c:	00000406 	br	e8a0 <alt_iic_isr_register+0xc4>
    e890:	e0bff817 	ldw	r2,-32(fp)
    e894:	100b883a 	mov	r5,r2
    e898:	e13ffc17 	ldw	r4,-16(fp)
    e89c:	000e6ec0 	call	e6ec <alt_ic_irq_disable>
    e8a0:	e0bff715 	stw	r2,-36(fp)
    e8a4:	e0bffa17 	ldw	r2,-24(fp)
    e8a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e8ac:	e0bff917 	ldw	r2,-28(fp)
    e8b0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    e8b4:	e0bff717 	ldw	r2,-36(fp)
}
    e8b8:	e037883a 	mov	sp,fp
    e8bc:	dfc00117 	ldw	ra,4(sp)
    e8c0:	df000017 	ldw	fp,0(sp)
    e8c4:	dec00204 	addi	sp,sp,8
    e8c8:	f800283a 	ret

0000e8cc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    e8cc:	defff904 	addi	sp,sp,-28
    e8d0:	dfc00615 	stw	ra,24(sp)
    e8d4:	df000515 	stw	fp,20(sp)
    e8d8:	df000504 	addi	fp,sp,20
    e8dc:	e13ffc15 	stw	r4,-16(fp)
    e8e0:	e17ffd15 	stw	r5,-12(fp)
    e8e4:	e1bffe15 	stw	r6,-8(fp)
    e8e8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    e8ec:	e1bfff17 	ldw	r6,-4(fp)
    e8f0:	e17ffe17 	ldw	r5,-8(fp)
    e8f4:	e13ffd17 	ldw	r4,-12(fp)
    e8f8:	000eb280 	call	eb28 <open>
    e8fc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    e900:	e0bffb17 	ldw	r2,-20(fp)
    e904:	10001c16 	blt	r2,zero,e978 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    e908:	00800074 	movhi	r2,1
    e90c:	10805604 	addi	r2,r2,344
    e910:	e0fffb17 	ldw	r3,-20(fp)
    e914:	18c00324 	muli	r3,r3,12
    e918:	10c5883a 	add	r2,r2,r3
    e91c:	10c00017 	ldw	r3,0(r2)
    e920:	e0bffc17 	ldw	r2,-16(fp)
    e924:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    e928:	00800074 	movhi	r2,1
    e92c:	10805604 	addi	r2,r2,344
    e930:	e0fffb17 	ldw	r3,-20(fp)
    e934:	18c00324 	muli	r3,r3,12
    e938:	10c5883a 	add	r2,r2,r3
    e93c:	10800104 	addi	r2,r2,4
    e940:	10c00017 	ldw	r3,0(r2)
    e944:	e0bffc17 	ldw	r2,-16(fp)
    e948:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    e94c:	00800074 	movhi	r2,1
    e950:	10805604 	addi	r2,r2,344
    e954:	e0fffb17 	ldw	r3,-20(fp)
    e958:	18c00324 	muli	r3,r3,12
    e95c:	10c5883a 	add	r2,r2,r3
    e960:	10800204 	addi	r2,r2,8
    e964:	10c00017 	ldw	r3,0(r2)
    e968:	e0bffc17 	ldw	r2,-16(fp)
    e96c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    e970:	e13ffb17 	ldw	r4,-20(fp)
    e974:	000d3e00 	call	d3e0 <alt_release_fd>
  }
} 
    e978:	0001883a 	nop
    e97c:	e037883a 	mov	sp,fp
    e980:	dfc00117 	ldw	ra,4(sp)
    e984:	df000017 	ldw	fp,0(sp)
    e988:	dec00204 	addi	sp,sp,8
    e98c:	f800283a 	ret

0000e990 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    e990:	defffb04 	addi	sp,sp,-20
    e994:	dfc00415 	stw	ra,16(sp)
    e998:	df000315 	stw	fp,12(sp)
    e99c:	df000304 	addi	fp,sp,12
    e9a0:	e13ffd15 	stw	r4,-12(fp)
    e9a4:	e17ffe15 	stw	r5,-8(fp)
    e9a8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    e9ac:	01c07fc4 	movi	r7,511
    e9b0:	01800044 	movi	r6,1
    e9b4:	e17ffd17 	ldw	r5,-12(fp)
    e9b8:	01000074 	movhi	r4,1
    e9bc:	21005904 	addi	r4,r4,356
    e9c0:	000e8cc0 	call	e8cc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    e9c4:	01c07fc4 	movi	r7,511
    e9c8:	000d883a 	mov	r6,zero
    e9cc:	e17ffe17 	ldw	r5,-8(fp)
    e9d0:	01000074 	movhi	r4,1
    e9d4:	21005604 	addi	r4,r4,344
    e9d8:	000e8cc0 	call	e8cc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    e9dc:	01c07fc4 	movi	r7,511
    e9e0:	01800044 	movi	r6,1
    e9e4:	e17fff17 	ldw	r5,-4(fp)
    e9e8:	01000074 	movhi	r4,1
    e9ec:	21005c04 	addi	r4,r4,368
    e9f0:	000e8cc0 	call	e8cc <alt_open_fd>
}  
    e9f4:	0001883a 	nop
    e9f8:	e037883a 	mov	sp,fp
    e9fc:	dfc00117 	ldw	ra,4(sp)
    ea00:	df000017 	ldw	fp,0(sp)
    ea04:	dec00204 	addi	sp,sp,8
    ea08:	f800283a 	ret

0000ea0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ea0c:	defffe04 	addi	sp,sp,-8
    ea10:	dfc00115 	stw	ra,4(sp)
    ea14:	df000015 	stw	fp,0(sp)
    ea18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ea1c:	00800074 	movhi	r2,1
    ea20:	1084d904 	addi	r2,r2,4964
    ea24:	10800017 	ldw	r2,0(r2)
    ea28:	10000526 	beq	r2,zero,ea40 <alt_get_errno+0x34>
    ea2c:	00800074 	movhi	r2,1
    ea30:	1084d904 	addi	r2,r2,4964
    ea34:	10800017 	ldw	r2,0(r2)
    ea38:	103ee83a 	callr	r2
    ea3c:	00000206 	br	ea48 <alt_get_errno+0x3c>
    ea40:	00800074 	movhi	r2,1
    ea44:	108b9f04 	addi	r2,r2,11900
}
    ea48:	e037883a 	mov	sp,fp
    ea4c:	dfc00117 	ldw	ra,4(sp)
    ea50:	df000017 	ldw	fp,0(sp)
    ea54:	dec00204 	addi	sp,sp,8
    ea58:	f800283a 	ret

0000ea5c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    ea5c:	defffd04 	addi	sp,sp,-12
    ea60:	df000215 	stw	fp,8(sp)
    ea64:	df000204 	addi	fp,sp,8
    ea68:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    ea6c:	e0bfff17 	ldw	r2,-4(fp)
    ea70:	10800217 	ldw	r2,8(r2)
    ea74:	10d00034 	orhi	r3,r2,16384
    ea78:	e0bfff17 	ldw	r2,-4(fp)
    ea7c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    ea80:	e03ffe15 	stw	zero,-8(fp)
    ea84:	00001d06 	br	eafc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    ea88:	00800074 	movhi	r2,1
    ea8c:	10805604 	addi	r2,r2,344
    ea90:	e0fffe17 	ldw	r3,-8(fp)
    ea94:	18c00324 	muli	r3,r3,12
    ea98:	10c5883a 	add	r2,r2,r3
    ea9c:	10c00017 	ldw	r3,0(r2)
    eaa0:	e0bfff17 	ldw	r2,-4(fp)
    eaa4:	10800017 	ldw	r2,0(r2)
    eaa8:	1880111e 	bne	r3,r2,eaf0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    eaac:	00800074 	movhi	r2,1
    eab0:	10805604 	addi	r2,r2,344
    eab4:	e0fffe17 	ldw	r3,-8(fp)
    eab8:	18c00324 	muli	r3,r3,12
    eabc:	10c5883a 	add	r2,r2,r3
    eac0:	10800204 	addi	r2,r2,8
    eac4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    eac8:	1000090e 	bge	r2,zero,eaf0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    eacc:	e0bffe17 	ldw	r2,-8(fp)
    ead0:	10c00324 	muli	r3,r2,12
    ead4:	00800074 	movhi	r2,1
    ead8:	10805604 	addi	r2,r2,344
    eadc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    eae0:	e0bfff17 	ldw	r2,-4(fp)
    eae4:	18800226 	beq	r3,r2,eaf0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    eae8:	00bffcc4 	movi	r2,-13
    eaec:	00000a06 	br	eb18 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    eaf0:	e0bffe17 	ldw	r2,-8(fp)
    eaf4:	10800044 	addi	r2,r2,1
    eaf8:	e0bffe15 	stw	r2,-8(fp)
    eafc:	00800074 	movhi	r2,1
    eb00:	1084d804 	addi	r2,r2,4960
    eb04:	10800017 	ldw	r2,0(r2)
    eb08:	1007883a 	mov	r3,r2
    eb0c:	e0bffe17 	ldw	r2,-8(fp)
    eb10:	18bfdd2e 	bgeu	r3,r2,ea88 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    eb14:	0005883a 	mov	r2,zero
}
    eb18:	e037883a 	mov	sp,fp
    eb1c:	df000017 	ldw	fp,0(sp)
    eb20:	dec00104 	addi	sp,sp,4
    eb24:	f800283a 	ret

0000eb28 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    eb28:	defff604 	addi	sp,sp,-40
    eb2c:	dfc00915 	stw	ra,36(sp)
    eb30:	df000815 	stw	fp,32(sp)
    eb34:	df000804 	addi	fp,sp,32
    eb38:	e13ffd15 	stw	r4,-12(fp)
    eb3c:	e17ffe15 	stw	r5,-8(fp)
    eb40:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    eb44:	00bfffc4 	movi	r2,-1
    eb48:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    eb4c:	00bffb44 	movi	r2,-19
    eb50:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    eb54:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    eb58:	01400074 	movhi	r5,1
    eb5c:	2944d604 	addi	r5,r5,4952
    eb60:	e13ffd17 	ldw	r4,-12(fp)
    eb64:	000ee480 	call	ee48 <alt_find_dev>
    eb68:	e0bff815 	stw	r2,-32(fp)
    eb6c:	e0bff817 	ldw	r2,-32(fp)
    eb70:	1000051e 	bne	r2,zero,eb88 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    eb74:	e13ffd17 	ldw	r4,-12(fp)
    eb78:	000eed80 	call	eed8 <alt_find_file>
    eb7c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    eb80:	00800044 	movi	r2,1
    eb84:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    eb88:	e0bff817 	ldw	r2,-32(fp)
    eb8c:	10002926 	beq	r2,zero,ec34 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    eb90:	e13ff817 	ldw	r4,-32(fp)
    eb94:	000efec0 	call	efec <alt_get_fd>
    eb98:	e0bff915 	stw	r2,-28(fp)
    eb9c:	e0bff917 	ldw	r2,-28(fp)
    eba0:	1000030e 	bge	r2,zero,ebb0 <open+0x88>
    {
      status = index;
    eba4:	e0bff917 	ldw	r2,-28(fp)
    eba8:	e0bffa15 	stw	r2,-24(fp)
    ebac:	00002306 	br	ec3c <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
    ebb0:	e0bff917 	ldw	r2,-28(fp)
    ebb4:	10c00324 	muli	r3,r2,12
    ebb8:	00800074 	movhi	r2,1
    ebbc:	10805604 	addi	r2,r2,344
    ebc0:	1885883a 	add	r2,r3,r2
    ebc4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    ebc8:	e0fffe17 	ldw	r3,-8(fp)
    ebcc:	00900034 	movhi	r2,16384
    ebd0:	10bfffc4 	addi	r2,r2,-1
    ebd4:	1886703a 	and	r3,r3,r2
    ebd8:	e0bffc17 	ldw	r2,-16(fp)
    ebdc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    ebe0:	e0bffb17 	ldw	r2,-20(fp)
    ebe4:	1000051e 	bne	r2,zero,ebfc <open+0xd4>
    ebe8:	e13ffc17 	ldw	r4,-16(fp)
    ebec:	000ea5c0 	call	ea5c <alt_file_locked>
    ebf0:	e0bffa15 	stw	r2,-24(fp)
    ebf4:	e0bffa17 	ldw	r2,-24(fp)
    ebf8:	10001016 	blt	r2,zero,ec3c <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    ebfc:	e0bff817 	ldw	r2,-32(fp)
    ec00:	10800317 	ldw	r2,12(r2)
    ec04:	10000826 	beq	r2,zero,ec28 <open+0x100>
    ec08:	e0bff817 	ldw	r2,-32(fp)
    ec0c:	10800317 	ldw	r2,12(r2)
    ec10:	e1ffff17 	ldw	r7,-4(fp)
    ec14:	e1bffe17 	ldw	r6,-8(fp)
    ec18:	e17ffd17 	ldw	r5,-12(fp)
    ec1c:	e13ffc17 	ldw	r4,-16(fp)
    ec20:	103ee83a 	callr	r2
    ec24:	00000106 	br	ec2c <open+0x104>
    ec28:	0005883a 	mov	r2,zero
    ec2c:	e0bffa15 	stw	r2,-24(fp)
    ec30:	00000206 	br	ec3c <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
    ec34:	00bffb44 	movi	r2,-19
    ec38:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    ec3c:	e0bffa17 	ldw	r2,-24(fp)
    ec40:	1000090e 	bge	r2,zero,ec68 <open+0x140>
  {
    alt_release_fd (index);  
    ec44:	e13ff917 	ldw	r4,-28(fp)
    ec48:	000d3e00 	call	d3e0 <alt_release_fd>
    ALT_ERRNO = -status;
    ec4c:	000ea0c0 	call	ea0c <alt_get_errno>
    ec50:	1007883a 	mov	r3,r2
    ec54:	e0bffa17 	ldw	r2,-24(fp)
    ec58:	0085c83a 	sub	r2,zero,r2
    ec5c:	18800015 	stw	r2,0(r3)
    return -1;
    ec60:	00bfffc4 	movi	r2,-1
    ec64:	00000106 	br	ec6c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    ec68:	e0bff917 	ldw	r2,-28(fp)
}
    ec6c:	e037883a 	mov	sp,fp
    ec70:	dfc00117 	ldw	ra,4(sp)
    ec74:	df000017 	ldw	fp,0(sp)
    ec78:	dec00204 	addi	sp,sp,8
    ec7c:	f800283a 	ret

0000ec80 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    ec80:	defffa04 	addi	sp,sp,-24
    ec84:	df000515 	stw	fp,20(sp)
    ec88:	df000504 	addi	fp,sp,20
    ec8c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ec90:	0005303a 	rdctl	r2,status
    ec94:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ec98:	e0fffc17 	ldw	r3,-16(fp)
    ec9c:	00bfff84 	movi	r2,-2
    eca0:	1884703a 	and	r2,r3,r2
    eca4:	1001703a 	wrctl	status,r2
  
  return context;
    eca8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    ecac:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    ecb0:	e0bfff17 	ldw	r2,-4(fp)
    ecb4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    ecb8:	e0bffd17 	ldw	r2,-12(fp)
    ecbc:	10800017 	ldw	r2,0(r2)
    ecc0:	e0fffd17 	ldw	r3,-12(fp)
    ecc4:	18c00117 	ldw	r3,4(r3)
    ecc8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    eccc:	e0bffd17 	ldw	r2,-12(fp)
    ecd0:	10800117 	ldw	r2,4(r2)
    ecd4:	e0fffd17 	ldw	r3,-12(fp)
    ecd8:	18c00017 	ldw	r3,0(r3)
    ecdc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    ece0:	e0bffd17 	ldw	r2,-12(fp)
    ece4:	e0fffd17 	ldw	r3,-12(fp)
    ece8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    ecec:	e0bffd17 	ldw	r2,-12(fp)
    ecf0:	e0fffd17 	ldw	r3,-12(fp)
    ecf4:	10c00015 	stw	r3,0(r2)
    ecf8:	e0bffb17 	ldw	r2,-20(fp)
    ecfc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ed00:	e0bffe17 	ldw	r2,-8(fp)
    ed04:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    ed08:	0001883a 	nop
    ed0c:	e037883a 	mov	sp,fp
    ed10:	df000017 	ldw	fp,0(sp)
    ed14:	dec00104 	addi	sp,sp,4
    ed18:	f800283a 	ret

0000ed1c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    ed1c:	defffb04 	addi	sp,sp,-20
    ed20:	dfc00415 	stw	ra,16(sp)
    ed24:	df000315 	stw	fp,12(sp)
    ed28:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    ed2c:	d0a00e17 	ldw	r2,-32712(gp)
    ed30:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    ed34:	d0a6d717 	ldw	r2,-25764(gp)
    ed38:	10800044 	addi	r2,r2,1
    ed3c:	d0a6d715 	stw	r2,-25764(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    ed40:	00002e06 	br	edfc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    ed44:	e0bffd17 	ldw	r2,-12(fp)
    ed48:	10800017 	ldw	r2,0(r2)
    ed4c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    ed50:	e0bffd17 	ldw	r2,-12(fp)
    ed54:	10800403 	ldbu	r2,16(r2)
    ed58:	10803fcc 	andi	r2,r2,255
    ed5c:	10000426 	beq	r2,zero,ed70 <alt_tick+0x54>
    ed60:	d0a6d717 	ldw	r2,-25764(gp)
    ed64:	1000021e 	bne	r2,zero,ed70 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    ed68:	e0bffd17 	ldw	r2,-12(fp)
    ed6c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    ed70:	e0bffd17 	ldw	r2,-12(fp)
    ed74:	10800217 	ldw	r2,8(r2)
    ed78:	d0e6d717 	ldw	r3,-25764(gp)
    ed7c:	18801d36 	bltu	r3,r2,edf4 <alt_tick+0xd8>
    ed80:	e0bffd17 	ldw	r2,-12(fp)
    ed84:	10800403 	ldbu	r2,16(r2)
    ed88:	10803fcc 	andi	r2,r2,255
    ed8c:	1000191e 	bne	r2,zero,edf4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    ed90:	e0bffd17 	ldw	r2,-12(fp)
    ed94:	10800317 	ldw	r2,12(r2)
    ed98:	e0fffd17 	ldw	r3,-12(fp)
    ed9c:	18c00517 	ldw	r3,20(r3)
    eda0:	1809883a 	mov	r4,r3
    eda4:	103ee83a 	callr	r2
    eda8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    edac:	e0bfff17 	ldw	r2,-4(fp)
    edb0:	1000031e 	bne	r2,zero,edc0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    edb4:	e13ffd17 	ldw	r4,-12(fp)
    edb8:	000ec800 	call	ec80 <alt_alarm_stop>
    edbc:	00000d06 	br	edf4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    edc0:	e0bffd17 	ldw	r2,-12(fp)
    edc4:	10c00217 	ldw	r3,8(r2)
    edc8:	e0bfff17 	ldw	r2,-4(fp)
    edcc:	1887883a 	add	r3,r3,r2
    edd0:	e0bffd17 	ldw	r2,-12(fp)
    edd4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    edd8:	e0bffd17 	ldw	r2,-12(fp)
    eddc:	10c00217 	ldw	r3,8(r2)
    ede0:	d0a6d717 	ldw	r2,-25764(gp)
    ede4:	1880032e 	bgeu	r3,r2,edf4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    ede8:	e0bffd17 	ldw	r2,-12(fp)
    edec:	00c00044 	movi	r3,1
    edf0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    edf4:	e0bffe17 	ldw	r2,-8(fp)
    edf8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    edfc:	e0fffd17 	ldw	r3,-12(fp)
    ee00:	d0a00e04 	addi	r2,gp,-32712
    ee04:	18bfcf1e 	bne	r3,r2,ed44 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    ee08:	0001883a 	nop
}
    ee0c:	0001883a 	nop
    ee10:	e037883a 	mov	sp,fp
    ee14:	dfc00117 	ldw	ra,4(sp)
    ee18:	df000017 	ldw	fp,0(sp)
    ee1c:	dec00204 	addi	sp,sp,8
    ee20:	f800283a 	ret

0000ee24 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    ee24:	deffff04 	addi	sp,sp,-4
    ee28:	df000015 	stw	fp,0(sp)
    ee2c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    ee30:	000170fa 	wrctl	ienable,zero
}
    ee34:	0001883a 	nop
    ee38:	e037883a 	mov	sp,fp
    ee3c:	df000017 	ldw	fp,0(sp)
    ee40:	dec00104 	addi	sp,sp,4
    ee44:	f800283a 	ret

0000ee48 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    ee48:	defffa04 	addi	sp,sp,-24
    ee4c:	dfc00515 	stw	ra,20(sp)
    ee50:	df000415 	stw	fp,16(sp)
    ee54:	df000404 	addi	fp,sp,16
    ee58:	e13ffe15 	stw	r4,-8(fp)
    ee5c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    ee60:	e0bfff17 	ldw	r2,-4(fp)
    ee64:	10800017 	ldw	r2,0(r2)
    ee68:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    ee6c:	e13ffe17 	ldw	r4,-8(fp)
    ee70:	00004a00 	call	4a0 <strlen>
    ee74:	10800044 	addi	r2,r2,1
    ee78:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    ee7c:	00000d06 	br	eeb4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    ee80:	e0bffc17 	ldw	r2,-16(fp)
    ee84:	10800217 	ldw	r2,8(r2)
    ee88:	e0fffd17 	ldw	r3,-12(fp)
    ee8c:	180d883a 	mov	r6,r3
    ee90:	e17ffe17 	ldw	r5,-8(fp)
    ee94:	1009883a 	mov	r4,r2
    ee98:	000f2180 	call	f218 <memcmp>
    ee9c:	1000021e 	bne	r2,zero,eea8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    eea0:	e0bffc17 	ldw	r2,-16(fp)
    eea4:	00000706 	br	eec4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    eea8:	e0bffc17 	ldw	r2,-16(fp)
    eeac:	10800017 	ldw	r2,0(r2)
    eeb0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    eeb4:	e0fffc17 	ldw	r3,-16(fp)
    eeb8:	e0bfff17 	ldw	r2,-4(fp)
    eebc:	18bff01e 	bne	r3,r2,ee80 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    eec0:	0005883a 	mov	r2,zero
}
    eec4:	e037883a 	mov	sp,fp
    eec8:	dfc00117 	ldw	ra,4(sp)
    eecc:	df000017 	ldw	fp,0(sp)
    eed0:	dec00204 	addi	sp,sp,8
    eed4:	f800283a 	ret

0000eed8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    eed8:	defffb04 	addi	sp,sp,-20
    eedc:	dfc00415 	stw	ra,16(sp)
    eee0:	df000315 	stw	fp,12(sp)
    eee4:	df000304 	addi	fp,sp,12
    eee8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    eeec:	00800074 	movhi	r2,1
    eef0:	1084d404 	addi	r2,r2,4944
    eef4:	10800017 	ldw	r2,0(r2)
    eef8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    eefc:	00003106 	br	efc4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    ef00:	e0bffd17 	ldw	r2,-12(fp)
    ef04:	10800217 	ldw	r2,8(r2)
    ef08:	1009883a 	mov	r4,r2
    ef0c:	00004a00 	call	4a0 <strlen>
    ef10:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    ef14:	e0bffd17 	ldw	r2,-12(fp)
    ef18:	10c00217 	ldw	r3,8(r2)
    ef1c:	e0bffe17 	ldw	r2,-8(fp)
    ef20:	10bfffc4 	addi	r2,r2,-1
    ef24:	1885883a 	add	r2,r3,r2
    ef28:	10800003 	ldbu	r2,0(r2)
    ef2c:	10803fcc 	andi	r2,r2,255
    ef30:	1080201c 	xori	r2,r2,128
    ef34:	10bfe004 	addi	r2,r2,-128
    ef38:	10800bd8 	cmpnei	r2,r2,47
    ef3c:	1000031e 	bne	r2,zero,ef4c <alt_find_file+0x74>
    {
      len -= 1;
    ef40:	e0bffe17 	ldw	r2,-8(fp)
    ef44:	10bfffc4 	addi	r2,r2,-1
    ef48:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    ef4c:	e0bffe17 	ldw	r2,-8(fp)
    ef50:	e0ffff17 	ldw	r3,-4(fp)
    ef54:	1885883a 	add	r2,r3,r2
    ef58:	10800003 	ldbu	r2,0(r2)
    ef5c:	10803fcc 	andi	r2,r2,255
    ef60:	1080201c 	xori	r2,r2,128
    ef64:	10bfe004 	addi	r2,r2,-128
    ef68:	10800be0 	cmpeqi	r2,r2,47
    ef6c:	1000081e 	bne	r2,zero,ef90 <alt_find_file+0xb8>
    ef70:	e0bffe17 	ldw	r2,-8(fp)
    ef74:	e0ffff17 	ldw	r3,-4(fp)
    ef78:	1885883a 	add	r2,r3,r2
    ef7c:	10800003 	ldbu	r2,0(r2)
    ef80:	10803fcc 	andi	r2,r2,255
    ef84:	1080201c 	xori	r2,r2,128
    ef88:	10bfe004 	addi	r2,r2,-128
    ef8c:	10000a1e 	bne	r2,zero,efb8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    ef90:	e0bffd17 	ldw	r2,-12(fp)
    ef94:	10800217 	ldw	r2,8(r2)
    ef98:	e0fffe17 	ldw	r3,-8(fp)
    ef9c:	180d883a 	mov	r6,r3
    efa0:	e17fff17 	ldw	r5,-4(fp)
    efa4:	1009883a 	mov	r4,r2
    efa8:	000f2180 	call	f218 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    efac:	1000021e 	bne	r2,zero,efb8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    efb0:	e0bffd17 	ldw	r2,-12(fp)
    efb4:	00000806 	br	efd8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    efb8:	e0bffd17 	ldw	r2,-12(fp)
    efbc:	10800017 	ldw	r2,0(r2)
    efc0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    efc4:	e0fffd17 	ldw	r3,-12(fp)
    efc8:	00800074 	movhi	r2,1
    efcc:	1084d404 	addi	r2,r2,4944
    efd0:	18bfcb1e 	bne	r3,r2,ef00 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    efd4:	0005883a 	mov	r2,zero
}
    efd8:	e037883a 	mov	sp,fp
    efdc:	dfc00117 	ldw	ra,4(sp)
    efe0:	df000017 	ldw	fp,0(sp)
    efe4:	dec00204 	addi	sp,sp,8
    efe8:	f800283a 	ret

0000efec <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    efec:	defffc04 	addi	sp,sp,-16
    eff0:	df000315 	stw	fp,12(sp)
    eff4:	df000304 	addi	fp,sp,12
    eff8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    effc:	00bffa04 	movi	r2,-24
    f000:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    f004:	e03ffd15 	stw	zero,-12(fp)
    f008:	00001d06 	br	f080 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    f00c:	00800074 	movhi	r2,1
    f010:	10805604 	addi	r2,r2,344
    f014:	e0fffd17 	ldw	r3,-12(fp)
    f018:	18c00324 	muli	r3,r3,12
    f01c:	10c5883a 	add	r2,r2,r3
    f020:	10800017 	ldw	r2,0(r2)
    f024:	1000131e 	bne	r2,zero,f074 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    f028:	00800074 	movhi	r2,1
    f02c:	10805604 	addi	r2,r2,344
    f030:	e0fffd17 	ldw	r3,-12(fp)
    f034:	18c00324 	muli	r3,r3,12
    f038:	10c5883a 	add	r2,r2,r3
    f03c:	e0ffff17 	ldw	r3,-4(fp)
    f040:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    f044:	00800074 	movhi	r2,1
    f048:	1084d804 	addi	r2,r2,4960
    f04c:	10c00017 	ldw	r3,0(r2)
    f050:	e0bffd17 	ldw	r2,-12(fp)
    f054:	1880040e 	bge	r3,r2,f068 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    f058:	00800074 	movhi	r2,1
    f05c:	1084d804 	addi	r2,r2,4960
    f060:	e0fffd17 	ldw	r3,-12(fp)
    f064:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    f068:	e0bffd17 	ldw	r2,-12(fp)
    f06c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    f070:	00000606 	br	f08c <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    f074:	e0bffd17 	ldw	r2,-12(fp)
    f078:	10800044 	addi	r2,r2,1
    f07c:	e0bffd15 	stw	r2,-12(fp)
    f080:	e0bffd17 	ldw	r2,-12(fp)
    f084:	10800810 	cmplti	r2,r2,32
    f088:	103fe01e 	bne	r2,zero,f00c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    f08c:	e0bffe17 	ldw	r2,-8(fp)
}
    f090:	e037883a 	mov	sp,fp
    f094:	df000017 	ldw	fp,0(sp)
    f098:	dec00104 	addi	sp,sp,4
    f09c:	f800283a 	ret

0000f0a0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    f0a0:	defffb04 	addi	sp,sp,-20
    f0a4:	df000415 	stw	fp,16(sp)
    f0a8:	df000404 	addi	fp,sp,16
    f0ac:	e13ffe15 	stw	r4,-8(fp)
    f0b0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    f0b4:	e0bfff17 	ldw	r2,-4(fp)
    f0b8:	10840070 	cmpltui	r2,r2,4097
    f0bc:	1000021e 	bne	r2,zero,f0c8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    f0c0:	00840004 	movi	r2,4096
    f0c4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    f0c8:	e0fffe17 	ldw	r3,-8(fp)
    f0cc:	e0bfff17 	ldw	r2,-4(fp)
    f0d0:	1885883a 	add	r2,r3,r2
    f0d4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    f0d8:	e0bffe17 	ldw	r2,-8(fp)
    f0dc:	e0bffc15 	stw	r2,-16(fp)
    f0e0:	00000506 	br	f0f8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    f0e4:	e0bffc17 	ldw	r2,-16(fp)
    f0e8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    f0ec:	e0bffc17 	ldw	r2,-16(fp)
    f0f0:	10800804 	addi	r2,r2,32
    f0f4:	e0bffc15 	stw	r2,-16(fp)
    f0f8:	e0fffc17 	ldw	r3,-16(fp)
    f0fc:	e0bffd17 	ldw	r2,-12(fp)
    f100:	18bff836 	bltu	r3,r2,f0e4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    f104:	e0bffe17 	ldw	r2,-8(fp)
    f108:	108007cc 	andi	r2,r2,31
    f10c:	10000226 	beq	r2,zero,f118 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    f110:	e0bffc17 	ldw	r2,-16(fp)
    f114:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    f118:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    f11c:	0001883a 	nop
    f120:	e037883a 	mov	sp,fp
    f124:	df000017 	ldw	fp,0(sp)
    f128:	dec00104 	addi	sp,sp,4
    f12c:	f800283a 	ret

0000f130 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    f130:	defffe04 	addi	sp,sp,-8
    f134:	df000115 	stw	fp,4(sp)
    f138:	df000104 	addi	fp,sp,4
    f13c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    f140:	e0bfff17 	ldw	r2,-4(fp)
    f144:	10bffe84 	addi	r2,r2,-6
    f148:	10c00428 	cmpgeui	r3,r2,16
    f14c:	18001a1e 	bne	r3,zero,f1b8 <alt_exception_cause_generated_bad_addr+0x88>
    f150:	100690ba 	slli	r3,r2,2
    f154:	00800074 	movhi	r2,1
    f158:	10bc5a04 	addi	r2,r2,-3736
    f15c:	1885883a 	add	r2,r3,r2
    f160:	10800017 	ldw	r2,0(r2)
    f164:	1000683a 	jmp	r2
    f168:	0000f1a8 	cmpgeui	zero,zero,966
    f16c:	0000f1a8 	cmpgeui	zero,zero,966
    f170:	0000f1b8 	rdprs	zero,zero,966
    f174:	0000f1b8 	rdprs	zero,zero,966
    f178:	0000f1b8 	rdprs	zero,zero,966
    f17c:	0000f1a8 	cmpgeui	zero,zero,966
    f180:	0000f1b0 	cmpltui	zero,zero,966
    f184:	0000f1b8 	rdprs	zero,zero,966
    f188:	0000f1a8 	cmpgeui	zero,zero,966
    f18c:	0000f1a8 	cmpgeui	zero,zero,966
    f190:	0000f1b8 	rdprs	zero,zero,966
    f194:	0000f1a8 	cmpgeui	zero,zero,966
    f198:	0000f1b0 	cmpltui	zero,zero,966
    f19c:	0000f1b8 	rdprs	zero,zero,966
    f1a0:	0000f1b8 	rdprs	zero,zero,966
    f1a4:	0000f1a8 	cmpgeui	zero,zero,966
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    f1a8:	00800044 	movi	r2,1
    f1ac:	00000306 	br	f1bc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    f1b0:	0005883a 	mov	r2,zero
    f1b4:	00000106 	br	f1bc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    f1b8:	0005883a 	mov	r2,zero
  }
}
    f1bc:	e037883a 	mov	sp,fp
    f1c0:	df000017 	ldw	fp,0(sp)
    f1c4:	dec00104 	addi	sp,sp,4
    f1c8:	f800283a 	ret

0000f1cc <atexit>:
    f1cc:	200b883a 	mov	r5,r4
    f1d0:	000f883a 	mov	r7,zero
    f1d4:	000d883a 	mov	r6,zero
    f1d8:	0009883a 	mov	r4,zero
    f1dc:	000f2941 	jmpi	f294 <__register_exitproc>

0000f1e0 <exit>:
    f1e0:	defffe04 	addi	sp,sp,-8
    f1e4:	000b883a 	mov	r5,zero
    f1e8:	dc000015 	stw	r16,0(sp)
    f1ec:	dfc00115 	stw	ra,4(sp)
    f1f0:	2021883a 	mov	r16,r4
    f1f4:	000f3ac0 	call	f3ac <__call_exitprocs>
    f1f8:	00800074 	movhi	r2,1
    f1fc:	1084ce04 	addi	r2,r2,4920
    f200:	11000017 	ldw	r4,0(r2)
    f204:	20800f17 	ldw	r2,60(r4)
    f208:	10000126 	beq	r2,zero,f210 <exit+0x30>
    f20c:	103ee83a 	callr	r2
    f210:	8009883a 	mov	r4,r16
    f214:	000f52c0 	call	f52c <_exit>

0000f218 <memcmp>:
    f218:	01c000c4 	movi	r7,3
    f21c:	3980192e 	bgeu	r7,r6,f284 <memcmp+0x6c>
    f220:	2144b03a 	or	r2,r4,r5
    f224:	11c4703a 	and	r2,r2,r7
    f228:	10000f26 	beq	r2,zero,f268 <memcmp+0x50>
    f22c:	20800003 	ldbu	r2,0(r4)
    f230:	28c00003 	ldbu	r3,0(r5)
    f234:	10c0151e 	bne	r2,r3,f28c <memcmp+0x74>
    f238:	31bfff84 	addi	r6,r6,-2
    f23c:	01ffffc4 	movi	r7,-1
    f240:	00000406 	br	f254 <memcmp+0x3c>
    f244:	20800003 	ldbu	r2,0(r4)
    f248:	28c00003 	ldbu	r3,0(r5)
    f24c:	31bfffc4 	addi	r6,r6,-1
    f250:	10c00e1e 	bne	r2,r3,f28c <memcmp+0x74>
    f254:	21000044 	addi	r4,r4,1
    f258:	29400044 	addi	r5,r5,1
    f25c:	31fff91e 	bne	r6,r7,f244 <memcmp+0x2c>
    f260:	0005883a 	mov	r2,zero
    f264:	f800283a 	ret
    f268:	20c00017 	ldw	r3,0(r4)
    f26c:	28800017 	ldw	r2,0(r5)
    f270:	18bfee1e 	bne	r3,r2,f22c <memcmp+0x14>
    f274:	31bfff04 	addi	r6,r6,-4
    f278:	21000104 	addi	r4,r4,4
    f27c:	29400104 	addi	r5,r5,4
    f280:	39bff936 	bltu	r7,r6,f268 <memcmp+0x50>
    f284:	303fe91e 	bne	r6,zero,f22c <memcmp+0x14>
    f288:	003ff506 	br	f260 <memcmp+0x48>
    f28c:	10c5c83a 	sub	r2,r2,r3
    f290:	f800283a 	ret

0000f294 <__register_exitproc>:
    f294:	defffa04 	addi	sp,sp,-24
    f298:	dc000315 	stw	r16,12(sp)
    f29c:	04000074 	movhi	r16,1
    f2a0:	8404ce04 	addi	r16,r16,4920
    f2a4:	80c00017 	ldw	r3,0(r16)
    f2a8:	dc400415 	stw	r17,16(sp)
    f2ac:	dfc00515 	stw	ra,20(sp)
    f2b0:	18805217 	ldw	r2,328(r3)
    f2b4:	2023883a 	mov	r17,r4
    f2b8:	10003726 	beq	r2,zero,f398 <__register_exitproc+0x104>
    f2bc:	10c00117 	ldw	r3,4(r2)
    f2c0:	010007c4 	movi	r4,31
    f2c4:	20c00e16 	blt	r4,r3,f300 <__register_exitproc+0x6c>
    f2c8:	1a000044 	addi	r8,r3,1
    f2cc:	8800221e 	bne	r17,zero,f358 <__register_exitproc+0xc4>
    f2d0:	18c00084 	addi	r3,r3,2
    f2d4:	18c7883a 	add	r3,r3,r3
    f2d8:	18c7883a 	add	r3,r3,r3
    f2dc:	12000115 	stw	r8,4(r2)
    f2e0:	10c7883a 	add	r3,r2,r3
    f2e4:	19400015 	stw	r5,0(r3)
    f2e8:	0005883a 	mov	r2,zero
    f2ec:	dfc00517 	ldw	ra,20(sp)
    f2f0:	dc400417 	ldw	r17,16(sp)
    f2f4:	dc000317 	ldw	r16,12(sp)
    f2f8:	dec00604 	addi	sp,sp,24
    f2fc:	f800283a 	ret
    f300:	00800034 	movhi	r2,0
    f304:	10800004 	addi	r2,r2,0
    f308:	10002626 	beq	r2,zero,f3a4 <__register_exitproc+0x110>
    f30c:	01006404 	movi	r4,400
    f310:	d9400015 	stw	r5,0(sp)
    f314:	d9800115 	stw	r6,4(sp)
    f318:	d9c00215 	stw	r7,8(sp)
    f31c:	00000000 	call	0 <__alt_mem_SDRAM>
    f320:	d9400017 	ldw	r5,0(sp)
    f324:	d9800117 	ldw	r6,4(sp)
    f328:	d9c00217 	ldw	r7,8(sp)
    f32c:	10001d26 	beq	r2,zero,f3a4 <__register_exitproc+0x110>
    f330:	81000017 	ldw	r4,0(r16)
    f334:	10000115 	stw	zero,4(r2)
    f338:	02000044 	movi	r8,1
    f33c:	22405217 	ldw	r9,328(r4)
    f340:	0007883a 	mov	r3,zero
    f344:	12400015 	stw	r9,0(r2)
    f348:	20805215 	stw	r2,328(r4)
    f34c:	10006215 	stw	zero,392(r2)
    f350:	10006315 	stw	zero,396(r2)
    f354:	883fde26 	beq	r17,zero,f2d0 <__register_exitproc+0x3c>
    f358:	18c9883a 	add	r4,r3,r3
    f35c:	2109883a 	add	r4,r4,r4
    f360:	1109883a 	add	r4,r2,r4
    f364:	21802215 	stw	r6,136(r4)
    f368:	01800044 	movi	r6,1
    f36c:	12406217 	ldw	r9,392(r2)
    f370:	30cc983a 	sll	r6,r6,r3
    f374:	4992b03a 	or	r9,r9,r6
    f378:	12406215 	stw	r9,392(r2)
    f37c:	21c04215 	stw	r7,264(r4)
    f380:	01000084 	movi	r4,2
    f384:	893fd21e 	bne	r17,r4,f2d0 <__register_exitproc+0x3c>
    f388:	11006317 	ldw	r4,396(r2)
    f38c:	218cb03a 	or	r6,r4,r6
    f390:	11806315 	stw	r6,396(r2)
    f394:	003fce06 	br	f2d0 <__register_exitproc+0x3c>
    f398:	18805304 	addi	r2,r3,332
    f39c:	18805215 	stw	r2,328(r3)
    f3a0:	003fc606 	br	f2bc <__register_exitproc+0x28>
    f3a4:	00bfffc4 	movi	r2,-1
    f3a8:	003fd006 	br	f2ec <__register_exitproc+0x58>

0000f3ac <__call_exitprocs>:
    f3ac:	defff504 	addi	sp,sp,-44
    f3b0:	df000915 	stw	fp,36(sp)
    f3b4:	dd400615 	stw	r21,24(sp)
    f3b8:	dc800315 	stw	r18,12(sp)
    f3bc:	dfc00a15 	stw	ra,40(sp)
    f3c0:	ddc00815 	stw	r23,32(sp)
    f3c4:	dd800715 	stw	r22,28(sp)
    f3c8:	dd000515 	stw	r20,20(sp)
    f3cc:	dcc00415 	stw	r19,16(sp)
    f3d0:	dc400215 	stw	r17,8(sp)
    f3d4:	dc000115 	stw	r16,4(sp)
    f3d8:	d9000015 	stw	r4,0(sp)
    f3dc:	2839883a 	mov	fp,r5
    f3e0:	04800044 	movi	r18,1
    f3e4:	057fffc4 	movi	r21,-1
    f3e8:	00800074 	movhi	r2,1
    f3ec:	1084ce04 	addi	r2,r2,4920
    f3f0:	12000017 	ldw	r8,0(r2)
    f3f4:	45005217 	ldw	r20,328(r8)
    f3f8:	44c05204 	addi	r19,r8,328
    f3fc:	a0001c26 	beq	r20,zero,f470 <__call_exitprocs+0xc4>
    f400:	a0800117 	ldw	r2,4(r20)
    f404:	15ffffc4 	addi	r23,r2,-1
    f408:	b8000d16 	blt	r23,zero,f440 <__call_exitprocs+0x94>
    f40c:	14000044 	addi	r16,r2,1
    f410:	8421883a 	add	r16,r16,r16
    f414:	8421883a 	add	r16,r16,r16
    f418:	84402004 	addi	r17,r16,128
    f41c:	a463883a 	add	r17,r20,r17
    f420:	a421883a 	add	r16,r20,r16
    f424:	e0001e26 	beq	fp,zero,f4a0 <__call_exitprocs+0xf4>
    f428:	80804017 	ldw	r2,256(r16)
    f42c:	e0801c26 	beq	fp,r2,f4a0 <__call_exitprocs+0xf4>
    f430:	bdffffc4 	addi	r23,r23,-1
    f434:	843fff04 	addi	r16,r16,-4
    f438:	8c7fff04 	addi	r17,r17,-4
    f43c:	bd7ff91e 	bne	r23,r21,f424 <__call_exitprocs+0x78>
    f440:	00800034 	movhi	r2,0
    f444:	10800004 	addi	r2,r2,0
    f448:	10000926 	beq	r2,zero,f470 <__call_exitprocs+0xc4>
    f44c:	a0800117 	ldw	r2,4(r20)
    f450:	1000301e 	bne	r2,zero,f514 <__call_exitprocs+0x168>
    f454:	a0800017 	ldw	r2,0(r20)
    f458:	10003226 	beq	r2,zero,f524 <__call_exitprocs+0x178>
    f45c:	a009883a 	mov	r4,r20
    f460:	98800015 	stw	r2,0(r19)
    f464:	00000000 	call	0 <__alt_mem_SDRAM>
    f468:	9d000017 	ldw	r20,0(r19)
    f46c:	a03fe41e 	bne	r20,zero,f400 <__call_exitprocs+0x54>
    f470:	dfc00a17 	ldw	ra,40(sp)
    f474:	df000917 	ldw	fp,36(sp)
    f478:	ddc00817 	ldw	r23,32(sp)
    f47c:	dd800717 	ldw	r22,28(sp)
    f480:	dd400617 	ldw	r21,24(sp)
    f484:	dd000517 	ldw	r20,20(sp)
    f488:	dcc00417 	ldw	r19,16(sp)
    f48c:	dc800317 	ldw	r18,12(sp)
    f490:	dc400217 	ldw	r17,8(sp)
    f494:	dc000117 	ldw	r16,4(sp)
    f498:	dec00b04 	addi	sp,sp,44
    f49c:	f800283a 	ret
    f4a0:	a0800117 	ldw	r2,4(r20)
    f4a4:	80c00017 	ldw	r3,0(r16)
    f4a8:	10bfffc4 	addi	r2,r2,-1
    f4ac:	15c01426 	beq	r2,r23,f500 <__call_exitprocs+0x154>
    f4b0:	80000015 	stw	zero,0(r16)
    f4b4:	183fde26 	beq	r3,zero,f430 <__call_exitprocs+0x84>
    f4b8:	95c8983a 	sll	r4,r18,r23
    f4bc:	a0806217 	ldw	r2,392(r20)
    f4c0:	a5800117 	ldw	r22,4(r20)
    f4c4:	2084703a 	and	r2,r4,r2
    f4c8:	10000b26 	beq	r2,zero,f4f8 <__call_exitprocs+0x14c>
    f4cc:	a0806317 	ldw	r2,396(r20)
    f4d0:	2088703a 	and	r4,r4,r2
    f4d4:	20000c1e 	bne	r4,zero,f508 <__call_exitprocs+0x15c>
    f4d8:	89400017 	ldw	r5,0(r17)
    f4dc:	d9000017 	ldw	r4,0(sp)
    f4e0:	183ee83a 	callr	r3
    f4e4:	a0800117 	ldw	r2,4(r20)
    f4e8:	15bfbf1e 	bne	r2,r22,f3e8 <__call_exitprocs+0x3c>
    f4ec:	98800017 	ldw	r2,0(r19)
    f4f0:	153fcf26 	beq	r2,r20,f430 <__call_exitprocs+0x84>
    f4f4:	003fbc06 	br	f3e8 <__call_exitprocs+0x3c>
    f4f8:	183ee83a 	callr	r3
    f4fc:	003ff906 	br	f4e4 <__call_exitprocs+0x138>
    f500:	a5c00115 	stw	r23,4(r20)
    f504:	003feb06 	br	f4b4 <__call_exitprocs+0x108>
    f508:	89000017 	ldw	r4,0(r17)
    f50c:	183ee83a 	callr	r3
    f510:	003ff406 	br	f4e4 <__call_exitprocs+0x138>
    f514:	a0800017 	ldw	r2,0(r20)
    f518:	a027883a 	mov	r19,r20
    f51c:	1029883a 	mov	r20,r2
    f520:	003fb606 	br	f3fc <__call_exitprocs+0x50>
    f524:	0005883a 	mov	r2,zero
    f528:	003ffb06 	br	f518 <__call_exitprocs+0x16c>

0000f52c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    f52c:	defffd04 	addi	sp,sp,-12
    f530:	df000215 	stw	fp,8(sp)
    f534:	df000204 	addi	fp,sp,8
    f538:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    f53c:	0001883a 	nop
    f540:	e0bfff17 	ldw	r2,-4(fp)
    f544:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    f548:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    f54c:	10000226 	beq	r2,zero,f558 <_exit+0x2c>
    ALT_SIM_FAIL();
    f550:	002af070 	cmpltui	zero,zero,43969
    f554:	00000106 	br	f55c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    f558:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    f55c:	003fff06 	br	f55c <_exit+0x30>
