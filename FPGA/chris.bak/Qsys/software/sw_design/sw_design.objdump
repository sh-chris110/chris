
sw_design.elf:     file format elf32-littlenios2
sw_design.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000fc38 memsz 0x0000fc38 flags r-x
    LOAD off    0x00010c58 vaddr 0x0000fc58 paddr 0x00011770 align 2**12
         filesz 0x00001b18 memsz 0x00001b18 flags rw-
    LOAD off    0x00013288 vaddr 0x00013288 paddr 0x00013288 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f6ec  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000324  0000f934  0000f934  00010934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b18  0000fc58  00011770  00010c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  00013288  00013288  00013288  2**2
                  ALLOC, SMALL_DATA
  6 .SRAM         00000000  000133e8  000133e8  00012770  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00012770  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ef8  00000000  00000000  00012798  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00023ce3  00000000  00000000  00013690  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000919c  00000000  00000000  00037373  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b853  00000000  00000000  0004050f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000021b8  00000000  00000000  0004bd64  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003944  00000000  00000000  0004df1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017b46  00000000  00000000  00051860  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  000693a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018c0  00000000  00000000  00069408  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006df31  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000b  00000000  00000000  0006df34  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006df3f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006df40  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0006df41  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0006df45  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0006df49  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000004  00000000  00000000  0006df4d  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000004  00000000  00000000  0006df51  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000004  00000000  00000000  0006df55  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000a  00000000  00000000  0006df59  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001b  00000000  00000000  0006df63  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00056b88  00000000  00000000  0006df7e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
0000f934 l    d  .rodata	00000000 .rodata
0000fc58 l    d  .rwdata	00000000 .rwdata
00013288 l    d  .bss	00000000 .bss
000133e8 l    d  .SRAM	00000000 .SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../sw_design_bsp//obj/HAL/src/crt0.o
00000290 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000f99e l     O .rodata	00000010 zeroes.4404
00002724 l     F .text	000000bc __sbprintf
0000f9ae l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00002934 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00004464 l     F .text	00000008 __fp_unlock
00004478 l     F .text	0000019c __sinit.part.1
00004614 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000fc58 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0001009c l     O .rwdata	00000020 lc_ctype_charset
0001007c l     O .rwdata	00000020 lc_message_charset
000100bc l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000f9e0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00007a10 l     F .text	000000fc __sprint_r.part.0
0000fb14 l     O .rodata	00000010 blanks.4348
0000fb04 l     O .rodata	00000010 zeroes.4349
00008f9c l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000cc58 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000cd78 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000cda4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000cea4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000cf98 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000d084 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000d26c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00011760 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000d4fc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000d644 l     F .text	00000038 alt_dev_reg
000106a4 l     O .rwdata	00001060 JTAG
00011704 l     O .rwdata	0000002c UART_COM
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000d944 l     F .text	00000210 altera_avalon_jtag_uart_irq
0000db54 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000e194 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000e908 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000eb80 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000ee70 l     F .text	00000050 alt_get_errno
0000eec0 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000132bc g     O .bss	00000004 alt_instruction_exception_handler
00007054 g     F .text	00000074 _mprec_log10
00007140 g     F .text	0000008c __any_on
00009538 g     F .text	00000054 _isatty_r
0000f9ec g     O .rodata	00000028 __mprec_tinytens
0000d1a8 g     F .text	0000007c alt_main
000003a4 g     F .text	000000c0 _puts_r
000132e8 g     O .bss	00000100 alt_irq
0000958c g     F .text	00000060 _lseek_r
00011770 g       *ABS*	00000000 __flash_rwdata_start
0000b784 g     F .text	00000088 .hidden __eqdf2
000133e8 g       *ABS*	00000000 __alt_heap_start
00000368 g     F .text	0000003c printf
000097a4 g     F .text	0000009c _wcrtomb_r
000078d0 g     F .text	0000005c __sseek
000047b4 g     F .text	00000010 __sinit
0000964c g     F .text	00000140 __swbuf_r
0000527c g     F .text	0000007c _setlocale_r
0000461c g     F .text	00000068 __sfmoreglue
0000d248 g     F .text	00000024 __malloc_unlock
0000e4c4 g     F .text	00000090 alt_up_rs232_read_fd
00005f4c g     F .text	0000015c memmove
0000479c g     F .text	00000018 _cleanup
000061d0 g     F .text	000000a8 _Balloc
0000b80c g     F .text	000000dc .hidden __gtdf2
0000f288 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000094dc g     F .text	0000005c _fstat_r
000132a0 g     O .bss	00000004 errno
0000784c g     F .text	00000008 __seofread
000132a8 g     O .bss	00000004 alt_argv
00019730 g       *ABS*	00000000 _gp
0000d4cc g     F .text	00000030 usleep
00010524 g     O .rwdata	00000180 alt_fd_list
0000eabc g     F .text	00000090 alt_find_dev
00005e04 g     F .text	00000148 memcpy
0000446c g     F .text	0000000c _cleanup_r
0000ca70 g     F .text	000000dc .hidden __floatsidf
0000ec44 g     F .text	0000007c alt_io_redirect
0000b8e8 g     F .text	000000f4 .hidden __ltdf2
0000f934 g       *ABS*	00000000 __DTOR_END__
0000e450 g     F .text	00000074 alt_up_rs232_read_data
00000464 g     F .text	00000014 puts
0000f504 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00007730 g     F .text	00000074 __fpclassifyd
00006fb0 g     F .text	000000a4 __ratio
00008f80 g     F .text	0000001c __vfiprintf_internal
0000dd54 g     F .text	0000021c altera_avalon_jtag_uart_read
00000338 g     F .text	00000030 _printf_r
0000a534 g     F .text	00000064 .hidden __udivsi3
0000cef4 g     F .text	000000a4 isatty
0000fa3c g     O .rodata	000000c8 __mprec_tens
000052f8 g     F .text	0000000c __locale_charset
0000f474 g     F .text	00000090 alt_icache_flush
0001329c g     O .bss	00000004 __malloc_top_pad
00011738 g     O .rwdata	00000004 __mb_cur_max
00005328 g     F .text	0000000c _localeconv_r
000065dc g     F .text	0000003c __i2b
00004c38 g     F .text	000004bc __sfvwrite_r
000077a4 g     F .text	00000054 _sbrk_r
000095ec g     F .text	00000060 _read_r
00011758 g     O .rwdata	00000004 alt_max_fd
0000e3cc g     F .text	00000044 alt_up_rs232_check_parity
000091d0 g     F .text	000000f0 _fclose_r
00004434 g     F .text	00000030 fflush
00013298 g     O .bss	00000004 __malloc_max_sbrked_mem
0000ecc0 g     F .text	000001b0 alt_irq_register
0000a5f0 g     F .text	000008ac .hidden __adddf3
00006d58 g     F .text	0000010c __b2d
00009f04 g     F .text	00000538 .hidden __umoddi3
0000d0d4 g     F .text	000000d4 lseek
00011730 g     O .rwdata	00000004 _global_impure_ptr
000071cc g     F .text	00000564 _realloc_r
000133e8 g       *ABS*	00000000 __bss_end
0000f180 g     F .text	00000108 alt_tick
0000998c g     F .text	00000578 .hidden __udivdi3
00009438 g     F .text	00000024 _fputwc_r
0000fa14 g     O .rodata	00000028 __mprec_bigtens
000063c0 g     F .text	00000104 __s2b
0000cb4c g     F .text	000000a8 .hidden __floatunsidf
00006a98 g     F .text	00000060 __mcmp
000047d4 g     F .text	00000018 __fp_lock_all
0000f0e4 g     F .text	0000009c alt_alarm_stop
000132b0 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d8 alt_irq_handler
000104fc g     O .rwdata	00000028 alt_dev_null
0000e8c0 g     F .text	00000048 alt_dcache_flush_all
000064c4 g     F .text	00000068 __hi0bits
0000c9f0 g     F .text	00000080 .hidden __fixdfsi
00011770 g       *ABS*	00000000 __ram_rwdata_end
00011750 g     O .rwdata	00000008 alt_dev_list
0000d54c g     F .text	000000f8 write
0000fc58 g       *ABS*	00000000 __ram_rodata_end
0000cdf4 g     F .text	000000b0 fstat
0000e554 g     F .text	00000094 alt_up_rs232_write_fd
0000b8e8 g     F .text	000000f4 .hidden __ledf2
00006810 g     F .text	00000140 __pow5mult
00007b24 g     F .text	0000145c ___vfiprintf_internal_r
00013290 g     O .bss	00000004 __nlocale_changed
0000a598 g     F .text	00000058 .hidden __umodsi3
000133e8 g       *ABS*	00000000 end
0000d888 g     F .text	000000bc altera_avalon_jtag_uart_init
000001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
0000f934 g       *ABS*	00000000 __CTOR_LIST__
00014000 g       *ABS*	00000000 __alt_stack_pointer
0000e210 g     F .text	00000084 alt_avalon_timer_sc_init
0000cbf4 g     F .text	00000064 .hidden __clzsi2
0000df70 g     F .text	00000224 altera_avalon_jtag_uart_write
000047c4 g     F .text	00000004 __sfp_lock_acquire
00005d20 g     F .text	000000e4 memchr
00000510 g     F .text	000021f8 ___vfprintf_internal_r
00004928 g     F .text	00000310 _free_r
00005304 g     F .text	00000010 __locale_mb_cur_max
0000f780 g     F .text	00000180 __call_exitprocs
0001328c g     O .bss	00000004 __mlocale_changed
0001173c g     O .rwdata	00000004 __malloc_sbrk_base
00000248 g     F .text	0000004c _start
000132b4 g     O .bss	00000004 _alt_tick_rate
00006950 g     F .text	00000148 __lshift
000132b8 g     O .bss	00000004 _alt_nticks
0000d2bc g     F .text	000000fc read
0000d6b4 g     F .text	00000070 alt_sys_init
0000f668 g     F .text	00000118 __register_exitproc
0000e390 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00006618 g     F .text	000001f8 __multiply
0000dbfc g     F .text	00000068 altera_avalon_jtag_uart_close
0000fc58 g       *ABS*	00000000 __ram_rwdata_start
0000f934 g       *ABS*	00000000 __ram_rodata_start
000132c0 g     O .bss	00000028 __malloc_current_mallinfo
00006e64 g     F .text	0000014c __d2b
0000d724 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000f3c0 g     F .text	000000b4 alt_get_fd
0000e768 g     F .text	00000158 alt_busy_sleep
000090b8 g     F .text	00000054 _close_r
0000f5ec g     F .text	0000007c memcmp
0000d7e4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000133e8 g       *ABS*	00000000 __alt_stack_base
0000d834 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000027e0 g     F .text	00000154 __swsetup_r
0000ae9c g     F .text	000008e8 .hidden __divdf3
00004684 g     F .text	00000118 __sfp
000070c8 g     F .text	00000078 __copybits
000100f4 g     O .rwdata	00000408 __malloc_av_
000047d0 g     F .text	00000004 __sinit_lock_release
0000b9dc g     F .text	00000718 .hidden __muldf3
000077f8 g     F .text	00000054 __sread
0000e2f0 g     F .text	00000060 alt_up_rs232_disable_read_interrupt
0000f2ac g     F .text	00000114 alt_find_file
0000e958 g     F .text	000000a4 alt_dev_llist_insert
0000d224 g     F .text	00000024 __malloc_lock
0000d41c g     F .text	000000b0 sbrk
000043d8 g     F .text	0000005c _fflush_r
0000910c g     F .text	000000c4 _calloc_r
00013288 g       *ABS*	00000000 __bss_start
000060a8 g     F .text	00000128 memset
00000294 g     F .text	000000a4 main
000132ac g     O .bss	00000004 alt_envp
00013294 g     O .bss	00000004 __malloc_max_total_mem
0000d784 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000978c g     F .text	00000018 __swbuf
0000792c g     F .text	00000008 __sclose
00014000 g       *ABS*	00000000 __alt_heap_limit
000092c0 g     F .text	00000014 fclose
00002b34 g     F .text	00001688 _dtoa_r
00005514 g     F .text	0000080c _malloc_r
00009900 g     F .text	00000030 __ascii_wctomb
0001175c g     O .rwdata	00000004 alt_errno
000050f4 g     F .text	000000c4 _fwalk
0000a43c g     F .text	00000084 .hidden __divsi3
00004804 g     F .text	00000124 _malloc_trim_r
0000f934 g       *ABS*	00000000 __CTOR_END__
00007934 g     F .text	000000dc strcmp
0000f934 g       *ABS*	00000000 __flash_rodata_start
0000f934 g       *ABS*	00000000 __DTOR_LIST__
0000e5e8 g     F .text	00000040 alt_up_rs232_open_dev
0000b784 g     F .text	00000088 .hidden __nedf2
0000d67c g     F .text	00000038 alt_irq_init
0000d3b8 g     F .text	00000064 alt_release_fd
0000fb24 g     O .rodata	00000100 .hidden __clz_tab
00013288 g     O .bss	00000004 _PathLocale
0000f5a0 g     F .text	00000014 atexit
00009058 g     F .text	00000060 _write_r
00005334 g     F .text	00000018 setlocale
00011734 g     O .rwdata	00000004 _impure_ptr
000132a4 g     O .bss	00000004 alt_argc
000041bc g     F .text	0000021c __sflush_r
0000ea5c g     F .text	00000060 _do_dtors
00005320 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00006cf4 g     F .text	00000064 __ulp
000047ec g     F .text	00000018 __fp_unlock_all
00011748 g     O .rwdata	00000008 alt_fs_list
0000e294 g     F .text	0000005c alt_up_rs232_enable_read_interrupt
0000e410 g     F .text	00000040 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000534c g     F .text	0000000c localeconv
00011770 g       *ABS*	00000000 _edata
000133e8 g       *ABS*	00000000 _end
000092d4 g     F .text	00000164 __fputwc
00000248 g       *ABS*	00000000 __ram_exceptions_end
0000dc64 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00007854 g     F .text	0000007c __swrite
00011740 g     O .rwdata	00000004 __malloc_trim_threshold
00005314 g     F .text	0000000c __locale_msgcharset
0000f5b4 g     F .text	00000038 exit
000051b8 g     F .text	000000c4 _fwalk_reent
00006af8 g     F .text	000001fc __mdiff
0000a4c0 g     F .text	00000074 .hidden __modsi3
00014000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000047c8 g     F .text	00000004 __sfp_lock_release
0000f900 g     F .text	00000034 _exit
0000e628 g     F .text	00000140 alt_alarm_start
00005358 g     F .text	000001bc __smakebuf_r
00000478 g     F .text	00000098 strlen
0000ef8c g     F .text	00000158 open
0000b80c g     F .text	000000dc .hidden __gedf2
00011744 g     O .rwdata	00000004 __wctomb
00000000 g       *ABS*	00000000 __alt_mem_SRAM
00007b0c g     F .text	00000018 __sprint_r
0000eb4c g     F .text	00000034 alt_icache_flush_all
00011764 g     O .rwdata	00000004 alt_priority_mask
00002708 g     F .text	0000001c __vfprintf_internal
00009930 g     F .text	0000005c _wctomb_r
0000c0f4 g     F .text	000008fc .hidden __subdf3
0000652c g     F .text	000000b0 __lo0bits
00011768 g     O .rwdata	00000008 alt_alarm_list
0000e9fc g     F .text	00000060 _do_ctors
0000e350 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
00009840 g     F .text	000000c0 wcrtomb
0000cca8 g     F .text	000000d0 close
0000d000 g     F .text	00000084 alt_load
0000945c g     F .text	00000080 fputwc
000047cc g     F .text	00000004 __sinit_lock_acquire
000062a0 g     F .text	00000120 __multadd
00006278 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409214 	ori	at,at,584
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d40 	call	1d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	00800074 	movhi	r2,1
 140:	108cba04 	addi	r2,r2,13032
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	108cba04 	addi	r2,r2,13032
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	e17ffd17 	ldw	r5,-12(fp)
 174:	1009883a 	mov	r4,r2
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	0001883a 	nop
}
 1bc:	0001883a 	nop
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

000001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d4:	defffb04 	addi	sp,sp,-20
 1d8:	dfc00415 	stw	ra,16(sp)
 1dc:	df000315 	stw	fp,12(sp)
 1e0:	df000304 	addi	fp,sp,12
 1e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e8:	000531fa 	rdctl	r2,exception
 1ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1f0:	e0bffd17 	ldw	r2,-12(fp)
 1f4:	10801f0c 	andi	r2,r2,124
 1f8:	1004d0ba 	srli	r2,r2,2
 1fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 200:	0005333a 	rdctl	r2,badaddr
 204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 208:	d0a6e317 	ldw	r2,-25716(gp)
 20c:	10000726 	beq	r2,zero,22c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 210:	d0a6e317 	ldw	r2,-25716(gp)
 214:	e0fffd17 	ldw	r3,-12(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	e17fff17 	ldw	r5,-4(fp)
 220:	1809883a 	mov	r4,r3
 224:	103ee83a 	callr	r2
 228:	00000206 	br	234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 22c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 230:	0005883a 	mov	r2,zero
}
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     248:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     24c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     250:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     254:	00bffd16 	blt	zero,r2,24c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     258:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
     25c:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
     260:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     264:	d6a5cc14 	ori	gp,gp,38704
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     268:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     26c:	108ca214 	ori	r2,r2,12936

    movhi r3, %hi(__bss_end)
     270:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     274:	18ccfa14 	ori	r3,r3,13288

    beq r2, r3, 1f
     278:	10c00326 	beq	r2,r3,288 <_start+0x40>

0:
    stw zero, (r2)
     27c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     280:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     284:	10fffd36 	bltu	r2,r3,27c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     288:	000d0000 	call	d000 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     28c:	000d1a80 	call	d1a8 <alt_main>

00000290 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     290:	003fff06 	br	290 <alt_after_alt_main>

00000294 <main>:
#include "altera_up_avalon_rs232.h"
#include <unistd.h>
#include "alt_types.h"

int main()
{
     294:	defff204 	addi	sp,sp,-56
     298:	dfc00d15 	stw	ra,52(sp)
     29c:	df000c15 	stw	fp,48(sp)
     2a0:	df000c04 	addi	fp,sp,48
  printf("Hello from Nios II!\n");
     2a4:	01000074 	movhi	r4,1
     2a8:	213e4d04 	addi	r4,r4,-1740
     2ac:	00004640 	call	464 <puts>
  alt_up_rs232_dev rs232 = {0};
     2b0:	e03ff415 	stw	zero,-48(fp)
     2b4:	e03ff515 	stw	zero,-44(fp)
     2b8:	e03ff615 	stw	zero,-40(fp)
     2bc:	e03ff715 	stw	zero,-36(fp)
     2c0:	e03ff815 	stw	zero,-32(fp)
     2c4:	e03ff915 	stw	zero,-28(fp)
     2c8:	e03ffa15 	stw	zero,-24(fp)
     2cc:	e03ffb15 	stw	zero,-20(fp)
     2d0:	e03ffc15 	stw	zero,-16(fp)
     2d4:	e03ffd15 	stw	zero,-12(fp)
     2d8:	e03ffe15 	stw	zero,-8(fp)

  rs232.base = 0x00021028;
     2dc:	008000b4 	movhi	r2,2
     2e0:	10840a04 	addi	r2,r2,4136
     2e4:	e0bffe15 	stw	r2,-8(fp)
  alt_u8 data = '0';
     2e8:	00800c04 	movi	r2,48
     2ec:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 parity;

  while(1) {
	  alt_up_rs232_write_data(&rs232, '*');
     2f0:	01400a84 	movi	r5,42
     2f4:	e13ff404 	addi	r4,fp,-48
     2f8:	000e4100 	call	e410 <alt_up_rs232_write_data>
	  alt_up_rs232_read_data(&rs232, &data, &parity);
     2fc:	e0ffff44 	addi	r3,fp,-3
     300:	e0bfff04 	addi	r2,fp,-4
     304:	180d883a 	mov	r6,r3
     308:	100b883a 	mov	r5,r2
     30c:	e13ff404 	addi	r4,fp,-48
     310:	000e4500 	call	e450 <alt_up_rs232_read_data>
	  printf ("got char:[%c]\n", data);
     314:	e0bfff03 	ldbu	r2,-4(fp)
     318:	10803fcc 	andi	r2,r2,255
     31c:	100b883a 	mov	r5,r2
     320:	01000074 	movhi	r4,1
     324:	213e5204 	addi	r4,r4,-1720
     328:	00003680 	call	368 <printf>
  	  usleep(2);
     32c:	01000084 	movi	r4,2
     330:	000d4cc0 	call	d4cc <usleep>
  }
     334:	003fee06 	br	2f0 <main+0x5c>

00000338 <_printf_r>:
     338:	defffd04 	addi	sp,sp,-12
     33c:	2805883a 	mov	r2,r5
     340:	dfc00015 	stw	ra,0(sp)
     344:	d9800115 	stw	r6,4(sp)
     348:	d9c00215 	stw	r7,8(sp)
     34c:	21400217 	ldw	r5,8(r4)
     350:	d9c00104 	addi	r7,sp,4
     354:	100d883a 	mov	r6,r2
     358:	00005100 	call	510 <___vfprintf_internal_r>
     35c:	dfc00017 	ldw	ra,0(sp)
     360:	dec00304 	addi	sp,sp,12
     364:	f800283a 	ret

00000368 <printf>:
     368:	defffc04 	addi	sp,sp,-16
     36c:	dfc00015 	stw	ra,0(sp)
     370:	d9400115 	stw	r5,4(sp)
     374:	d9800215 	stw	r6,8(sp)
     378:	d9c00315 	stw	r7,12(sp)
     37c:	00800074 	movhi	r2,1
     380:	1085cd04 	addi	r2,r2,5940
     384:	10800017 	ldw	r2,0(r2)
     388:	200b883a 	mov	r5,r4
     38c:	d9800104 	addi	r6,sp,4
     390:	11000217 	ldw	r4,8(r2)
     394:	00027080 	call	2708 <__vfprintf_internal>
     398:	dfc00017 	ldw	ra,0(sp)
     39c:	dec00404 	addi	sp,sp,16
     3a0:	f800283a 	ret

000003a4 <_puts_r>:
     3a4:	defff604 	addi	sp,sp,-40
     3a8:	dc000715 	stw	r16,28(sp)
     3ac:	2021883a 	mov	r16,r4
     3b0:	2809883a 	mov	r4,r5
     3b4:	dc400815 	stw	r17,32(sp)
     3b8:	dfc00915 	stw	ra,36(sp)
     3bc:	2823883a 	mov	r17,r5
     3c0:	00004780 	call	478 <strlen>
     3c4:	10c00044 	addi	r3,r2,1
     3c8:	d8800115 	stw	r2,4(sp)
     3cc:	00800074 	movhi	r2,1
     3d0:	10be5604 	addi	r2,r2,-1704
     3d4:	d8800215 	stw	r2,8(sp)
     3d8:	00800044 	movi	r2,1
     3dc:	d8800315 	stw	r2,12(sp)
     3e0:	00800084 	movi	r2,2
     3e4:	dc400015 	stw	r17,0(sp)
     3e8:	d8c00615 	stw	r3,24(sp)
     3ec:	dec00415 	stw	sp,16(sp)
     3f0:	d8800515 	stw	r2,20(sp)
     3f4:	80000226 	beq	r16,zero,400 <_puts_r+0x5c>
     3f8:	80800e17 	ldw	r2,56(r16)
     3fc:	10001426 	beq	r2,zero,450 <_puts_r+0xac>
     400:	81400217 	ldw	r5,8(r16)
     404:	2880030b 	ldhu	r2,12(r5)
     408:	10c8000c 	andi	r3,r2,8192
     40c:	1800061e 	bne	r3,zero,428 <_puts_r+0x84>
     410:	29001917 	ldw	r4,100(r5)
     414:	00f7ffc4 	movi	r3,-8193
     418:	10880014 	ori	r2,r2,8192
     41c:	20c6703a 	and	r3,r4,r3
     420:	2880030d 	sth	r2,12(r5)
     424:	28c01915 	stw	r3,100(r5)
     428:	d9800404 	addi	r6,sp,16
     42c:	8009883a 	mov	r4,r16
     430:	0004c380 	call	4c38 <__sfvwrite_r>
     434:	1000091e 	bne	r2,zero,45c <_puts_r+0xb8>
     438:	00800284 	movi	r2,10
     43c:	dfc00917 	ldw	ra,36(sp)
     440:	dc400817 	ldw	r17,32(sp)
     444:	dc000717 	ldw	r16,28(sp)
     448:	dec00a04 	addi	sp,sp,40
     44c:	f800283a 	ret
     450:	8009883a 	mov	r4,r16
     454:	00047b40 	call	47b4 <__sinit>
     458:	003fe906 	br	400 <_puts_r+0x5c>
     45c:	00bfffc4 	movi	r2,-1
     460:	003ff606 	br	43c <_puts_r+0x98>

00000464 <puts>:
     464:	00800074 	movhi	r2,1
     468:	1085cd04 	addi	r2,r2,5940
     46c:	200b883a 	mov	r5,r4
     470:	11000017 	ldw	r4,0(r2)
     474:	00003a41 	jmpi	3a4 <_puts_r>

00000478 <strlen>:
     478:	208000cc 	andi	r2,r4,3
     47c:	10002026 	beq	r2,zero,500 <strlen+0x88>
     480:	20800007 	ldb	r2,0(r4)
     484:	10002026 	beq	r2,zero,508 <strlen+0x90>
     488:	2005883a 	mov	r2,r4
     48c:	00000206 	br	498 <strlen+0x20>
     490:	10c00007 	ldb	r3,0(r2)
     494:	18001826 	beq	r3,zero,4f8 <strlen+0x80>
     498:	10800044 	addi	r2,r2,1
     49c:	10c000cc 	andi	r3,r2,3
     4a0:	183ffb1e 	bne	r3,zero,490 <strlen+0x18>
     4a4:	10c00017 	ldw	r3,0(r2)
     4a8:	01ffbff4 	movhi	r7,65279
     4ac:	39ffbfc4 	addi	r7,r7,-257
     4b0:	00ca303a 	nor	r5,zero,r3
     4b4:	01a02074 	movhi	r6,32897
     4b8:	19c7883a 	add	r3,r3,r7
     4bc:	31a02004 	addi	r6,r6,-32640
     4c0:	1946703a 	and	r3,r3,r5
     4c4:	1986703a 	and	r3,r3,r6
     4c8:	1800091e 	bne	r3,zero,4f0 <strlen+0x78>
     4cc:	10800104 	addi	r2,r2,4
     4d0:	10c00017 	ldw	r3,0(r2)
     4d4:	19cb883a 	add	r5,r3,r7
     4d8:	00c6303a 	nor	r3,zero,r3
     4dc:	28c6703a 	and	r3,r5,r3
     4e0:	1986703a 	and	r3,r3,r6
     4e4:	183ff926 	beq	r3,zero,4cc <strlen+0x54>
     4e8:	00000106 	br	4f0 <strlen+0x78>
     4ec:	10800044 	addi	r2,r2,1
     4f0:	10c00007 	ldb	r3,0(r2)
     4f4:	183ffd1e 	bne	r3,zero,4ec <strlen+0x74>
     4f8:	1105c83a 	sub	r2,r2,r4
     4fc:	f800283a 	ret
     500:	2005883a 	mov	r2,r4
     504:	003fe706 	br	4a4 <strlen+0x2c>
     508:	0005883a 	mov	r2,zero
     50c:	f800283a 	ret

00000510 <___vfprintf_internal_r>:
     510:	deffb804 	addi	sp,sp,-288
     514:	dfc04715 	stw	ra,284(sp)
     518:	ddc04515 	stw	r23,276(sp)
     51c:	dd404315 	stw	r21,268(sp)
     520:	d9002c15 	stw	r4,176(sp)
     524:	282f883a 	mov	r23,r5
     528:	302b883a 	mov	r21,r6
     52c:	d9c02d15 	stw	r7,180(sp)
     530:	df004615 	stw	fp,280(sp)
     534:	dd804415 	stw	r22,272(sp)
     538:	dd004215 	stw	r20,264(sp)
     53c:	dcc04115 	stw	r19,260(sp)
     540:	dc804015 	stw	r18,256(sp)
     544:	dc403f15 	stw	r17,252(sp)
     548:	dc003e15 	stw	r16,248(sp)
     54c:	00053280 	call	5328 <_localeconv_r>
     550:	10800017 	ldw	r2,0(r2)
     554:	1009883a 	mov	r4,r2
     558:	d8803415 	stw	r2,208(sp)
     55c:	00004780 	call	478 <strlen>
     560:	d8803715 	stw	r2,220(sp)
     564:	d8802c17 	ldw	r2,176(sp)
     568:	10000226 	beq	r2,zero,574 <___vfprintf_internal_r+0x64>
     56c:	10800e17 	ldw	r2,56(r2)
     570:	1000f926 	beq	r2,zero,958 <___vfprintf_internal_r+0x448>
     574:	b880030b 	ldhu	r2,12(r23)
     578:	10c8000c 	andi	r3,r2,8192
     57c:	1800061e 	bne	r3,zero,598 <___vfprintf_internal_r+0x88>
     580:	b9001917 	ldw	r4,100(r23)
     584:	00f7ffc4 	movi	r3,-8193
     588:	10880014 	ori	r2,r2,8192
     58c:	20c6703a 	and	r3,r4,r3
     590:	b880030d 	sth	r2,12(r23)
     594:	b8c01915 	stw	r3,100(r23)
     598:	10c0020c 	andi	r3,r2,8
     59c:	1800c126 	beq	r3,zero,8a4 <___vfprintf_internal_r+0x394>
     5a0:	b8c00417 	ldw	r3,16(r23)
     5a4:	1800bf26 	beq	r3,zero,8a4 <___vfprintf_internal_r+0x394>
     5a8:	1080068c 	andi	r2,r2,26
     5ac:	00c00284 	movi	r3,10
     5b0:	10c0c426 	beq	r2,r3,8c4 <___vfprintf_internal_r+0x3b4>
     5b4:	d8c00404 	addi	r3,sp,16
     5b8:	05000074 	movhi	r20,1
     5bc:	d9001e04 	addi	r4,sp,120
     5c0:	a53e6784 	addi	r20,r20,-1634
     5c4:	d8c01e15 	stw	r3,120(sp)
     5c8:	d8002015 	stw	zero,128(sp)
     5cc:	d8001f15 	stw	zero,124(sp)
     5d0:	d8003315 	stw	zero,204(sp)
     5d4:	d8003615 	stw	zero,216(sp)
     5d8:	d8003815 	stw	zero,224(sp)
     5dc:	1811883a 	mov	r8,r3
     5e0:	d8003915 	stw	zero,228(sp)
     5e4:	d8003a15 	stw	zero,232(sp)
     5e8:	d8002f15 	stw	zero,188(sp)
     5ec:	d9002815 	stw	r4,160(sp)
     5f0:	a8800007 	ldb	r2,0(r21)
     5f4:	10027b26 	beq	r2,zero,fe4 <___vfprintf_internal_r+0xad4>
     5f8:	00c00944 	movi	r3,37
     5fc:	a821883a 	mov	r16,r21
     600:	10c0021e 	bne	r2,r3,60c <___vfprintf_internal_r+0xfc>
     604:	00001406 	br	658 <___vfprintf_internal_r+0x148>
     608:	10c00326 	beq	r2,r3,618 <___vfprintf_internal_r+0x108>
     60c:	84000044 	addi	r16,r16,1
     610:	80800007 	ldb	r2,0(r16)
     614:	103ffc1e 	bne	r2,zero,608 <___vfprintf_internal_r+0xf8>
     618:	8563c83a 	sub	r17,r16,r21
     61c:	88000e26 	beq	r17,zero,658 <___vfprintf_internal_r+0x148>
     620:	d8c02017 	ldw	r3,128(sp)
     624:	d8801f17 	ldw	r2,124(sp)
     628:	45400015 	stw	r21,0(r8)
     62c:	1c47883a 	add	r3,r3,r17
     630:	10800044 	addi	r2,r2,1
     634:	d8c02015 	stw	r3,128(sp)
     638:	44400115 	stw	r17,4(r8)
     63c:	d8801f15 	stw	r2,124(sp)
     640:	00c001c4 	movi	r3,7
     644:	1880a716 	blt	r3,r2,8e4 <___vfprintf_internal_r+0x3d4>
     648:	42000204 	addi	r8,r8,8
     64c:	d9402f17 	ldw	r5,188(sp)
     650:	2c4b883a 	add	r5,r5,r17
     654:	d9402f15 	stw	r5,188(sp)
     658:	80800007 	ldb	r2,0(r16)
     65c:	1000a826 	beq	r2,zero,900 <___vfprintf_internal_r+0x3f0>
     660:	84400047 	ldb	r17,1(r16)
     664:	00bfffc4 	movi	r2,-1
     668:	85400044 	addi	r21,r16,1
     66c:	d8002785 	stb	zero,158(sp)
     670:	0007883a 	mov	r3,zero
     674:	000f883a 	mov	r7,zero
     678:	d8802915 	stw	r2,164(sp)
     67c:	d8003115 	stw	zero,196(sp)
     680:	0025883a 	mov	r18,zero
     684:	01401604 	movi	r5,88
     688:	01800244 	movi	r6,9
     68c:	02800a84 	movi	r10,42
     690:	02401b04 	movi	r9,108
     694:	ad400044 	addi	r21,r21,1
     698:	88bff804 	addi	r2,r17,-32
     69c:	28830436 	bltu	r5,r2,12b0 <___vfprintf_internal_r+0xda0>
     6a0:	100490ba 	slli	r2,r2,2
     6a4:	01000034 	movhi	r4,0
     6a8:	2101ae04 	addi	r4,r4,1720
     6ac:	1105883a 	add	r2,r2,r4
     6b0:	10800017 	ldw	r2,0(r2)
     6b4:	1000683a 	jmp	r2
     6b8:	000011d0 	cmplti	zero,zero,71
     6bc:	000012b0 	cmpltui	zero,zero,74
     6c0:	000012b0 	cmpltui	zero,zero,74
     6c4:	000011f0 	cmpltui	zero,zero,71
     6c8:	000012b0 	cmpltui	zero,zero,74
     6cc:	000012b0 	cmpltui	zero,zero,74
     6d0:	000012b0 	cmpltui	zero,zero,74
     6d4:	000012b0 	cmpltui	zero,zero,74
     6d8:	000012b0 	cmpltui	zero,zero,74
     6dc:	000012b0 	cmpltui	zero,zero,74
     6e0:	00000964 	muli	zero,zero,37
     6e4:	0000110c 	andi	zero,zero,68
     6e8:	000012b0 	cmpltui	zero,zero,74
     6ec:	0000082c 	andhi	zero,zero,32
     6f0:	0000098c 	andi	zero,zero,38
     6f4:	000012b0 	cmpltui	zero,zero,74
     6f8:	000009cc 	andi	zero,zero,39
     6fc:	000009d8 	cmpnei	zero,zero,39
     700:	000009d8 	cmpnei	zero,zero,39
     704:	000009d8 	cmpnei	zero,zero,39
     708:	000009d8 	cmpnei	zero,zero,39
     70c:	000009d8 	cmpnei	zero,zero,39
     710:	000009d8 	cmpnei	zero,zero,39
     714:	000009d8 	cmpnei	zero,zero,39
     718:	000009d8 	cmpnei	zero,zero,39
     71c:	000009d8 	cmpnei	zero,zero,39
     720:	000012b0 	cmpltui	zero,zero,74
     724:	000012b0 	cmpltui	zero,zero,74
     728:	000012b0 	cmpltui	zero,zero,74
     72c:	000012b0 	cmpltui	zero,zero,74
     730:	000012b0 	cmpltui	zero,zero,74
     734:	000012b0 	cmpltui	zero,zero,74
     738:	000012b0 	cmpltui	zero,zero,74
     73c:	000012b0 	cmpltui	zero,zero,74
     740:	000012b0 	cmpltui	zero,zero,74
     744:	000012b0 	cmpltui	zero,zero,74
     748:	00000a0c 	andi	zero,zero,40
     74c:	00000ac8 	cmpgei	zero,zero,43
     750:	000012b0 	cmpltui	zero,zero,74
     754:	00000ac8 	cmpgei	zero,zero,43
     758:	000012b0 	cmpltui	zero,zero,74
     75c:	000012b0 	cmpltui	zero,zero,74
     760:	000012b0 	cmpltui	zero,zero,74
     764:	000012b0 	cmpltui	zero,zero,74
     768:	00000b68 	cmpgeui	zero,zero,45
     76c:	000012b0 	cmpltui	zero,zero,74
     770:	000012b0 	cmpltui	zero,zero,74
     774:	00000b74 	movhi	zero,45
     778:	000012b0 	cmpltui	zero,zero,74
     77c:	000012b0 	cmpltui	zero,zero,74
     780:	000012b0 	cmpltui	zero,zero,74
     784:	000012b0 	cmpltui	zero,zero,74
     788:	000012b0 	cmpltui	zero,zero,74
     78c:	00000fec 	andhi	zero,zero,63
     790:	000012b0 	cmpltui	zero,zero,74
     794:	000012b0 	cmpltui	zero,zero,74
     798:	0000104c 	andi	zero,zero,65
     79c:	000012b0 	cmpltui	zero,zero,74
     7a0:	000012b0 	cmpltui	zero,zero,74
     7a4:	000012b0 	cmpltui	zero,zero,74
     7a8:	000012b0 	cmpltui	zero,zero,74
     7ac:	000012b0 	cmpltui	zero,zero,74
     7b0:	000012b0 	cmpltui	zero,zero,74
     7b4:	000012b0 	cmpltui	zero,zero,74
     7b8:	000012b0 	cmpltui	zero,zero,74
     7bc:	000012b0 	cmpltui	zero,zero,74
     7c0:	000012b0 	cmpltui	zero,zero,74
     7c4:	0000125c 	xori	zero,zero,73
     7c8:	000011fc 	xorhi	zero,zero,71
     7cc:	00000ac8 	cmpgei	zero,zero,43
     7d0:	00000ac8 	cmpgei	zero,zero,43
     7d4:	00000ac8 	cmpgei	zero,zero,43
     7d8:	0000120c 	andi	zero,zero,72
     7dc:	000011fc 	xorhi	zero,zero,71
     7e0:	000012b0 	cmpltui	zero,zero,74
     7e4:	000012b0 	cmpltui	zero,zero,74
     7e8:	00001218 	cmpnei	zero,zero,72
     7ec:	000012b0 	cmpltui	zero,zero,74
     7f0:	00001228 	cmpgeui	zero,zero,72
     7f4:	000010fc 	xorhi	zero,zero,67
     7f8:	00000838 	rdprs	zero,zero,32
     7fc:	0000111c 	xori	zero,zero,68
     800:	000012b0 	cmpltui	zero,zero,74
     804:	00001128 	cmpgeui	zero,zero,68
     808:	000012b0 	cmpltui	zero,zero,74
     80c:	00001184 	movi	zero,70
     810:	000012b0 	cmpltui	zero,zero,74
     814:	000012b0 	cmpltui	zero,zero,74
     818:	00001194 	movui	zero,70
     81c:	d9003117 	ldw	r4,196(sp)
     820:	d8802d15 	stw	r2,180(sp)
     824:	0109c83a 	sub	r4,zero,r4
     828:	d9003115 	stw	r4,196(sp)
     82c:	94800114 	ori	r18,r18,4
     830:	ac400007 	ldb	r17,0(r21)
     834:	003f9706 	br	694 <___vfprintf_internal_r+0x184>
     838:	00800c04 	movi	r2,48
     83c:	d9002d17 	ldw	r4,180(sp)
     840:	d9402917 	ldw	r5,164(sp)
     844:	d8802705 	stb	r2,156(sp)
     848:	00801e04 	movi	r2,120
     84c:	d8802745 	stb	r2,157(sp)
     850:	d8002785 	stb	zero,158(sp)
     854:	20c00104 	addi	r3,r4,4
     858:	24c00017 	ldw	r19,0(r4)
     85c:	002d883a 	mov	r22,zero
     860:	90800094 	ori	r2,r18,2
     864:	28029a16 	blt	r5,zero,12d0 <___vfprintf_internal_r+0xdc0>
     868:	00bfdfc4 	movi	r2,-129
     86c:	90a4703a 	and	r18,r18,r2
     870:	d8c02d15 	stw	r3,180(sp)
     874:	94800094 	ori	r18,r18,2
     878:	9802871e 	bne	r19,zero,1298 <___vfprintf_internal_r+0xd88>
     87c:	00800074 	movhi	r2,1
     880:	10be6004 	addi	r2,r2,-1664
     884:	d8803915 	stw	r2,228(sp)
     888:	04401e04 	movi	r17,120
     88c:	d8802917 	ldw	r2,164(sp)
     890:	0039883a 	mov	fp,zero
     894:	1001e926 	beq	r2,zero,103c <___vfprintf_internal_r+0xb2c>
     898:	0027883a 	mov	r19,zero
     89c:	002d883a 	mov	r22,zero
     8a0:	00020506 	br	10b8 <___vfprintf_internal_r+0xba8>
     8a4:	d9002c17 	ldw	r4,176(sp)
     8a8:	b80b883a 	mov	r5,r23
     8ac:	00027e00 	call	27e0 <__swsetup_r>
     8b0:	1005ac1e 	bne	r2,zero,1f64 <___vfprintf_internal_r+0x1a54>
     8b4:	b880030b 	ldhu	r2,12(r23)
     8b8:	00c00284 	movi	r3,10
     8bc:	1080068c 	andi	r2,r2,26
     8c0:	10ff3c1e 	bne	r2,r3,5b4 <___vfprintf_internal_r+0xa4>
     8c4:	b880038f 	ldh	r2,14(r23)
     8c8:	103f3a16 	blt	r2,zero,5b4 <___vfprintf_internal_r+0xa4>
     8cc:	d9c02d17 	ldw	r7,180(sp)
     8d0:	d9002c17 	ldw	r4,176(sp)
     8d4:	a80d883a 	mov	r6,r21
     8d8:	b80b883a 	mov	r5,r23
     8dc:	00027240 	call	2724 <__sbprintf>
     8e0:	00001106 	br	928 <___vfprintf_internal_r+0x418>
     8e4:	d9002c17 	ldw	r4,176(sp)
     8e8:	d9801e04 	addi	r6,sp,120
     8ec:	b80b883a 	mov	r5,r23
     8f0:	0007b0c0 	call	7b0c <__sprint_r>
     8f4:	1000081e 	bne	r2,zero,918 <___vfprintf_internal_r+0x408>
     8f8:	da000404 	addi	r8,sp,16
     8fc:	003f5306 	br	64c <___vfprintf_internal_r+0x13c>
     900:	d8802017 	ldw	r2,128(sp)
     904:	10000426 	beq	r2,zero,918 <___vfprintf_internal_r+0x408>
     908:	d9002c17 	ldw	r4,176(sp)
     90c:	d9801e04 	addi	r6,sp,120
     910:	b80b883a 	mov	r5,r23
     914:	0007b0c0 	call	7b0c <__sprint_r>
     918:	b880030b 	ldhu	r2,12(r23)
     91c:	1080100c 	andi	r2,r2,64
     920:	1005901e 	bne	r2,zero,1f64 <___vfprintf_internal_r+0x1a54>
     924:	d8802f17 	ldw	r2,188(sp)
     928:	dfc04717 	ldw	ra,284(sp)
     92c:	df004617 	ldw	fp,280(sp)
     930:	ddc04517 	ldw	r23,276(sp)
     934:	dd804417 	ldw	r22,272(sp)
     938:	dd404317 	ldw	r21,268(sp)
     93c:	dd004217 	ldw	r20,264(sp)
     940:	dcc04117 	ldw	r19,260(sp)
     944:	dc804017 	ldw	r18,256(sp)
     948:	dc403f17 	ldw	r17,252(sp)
     94c:	dc003e17 	ldw	r16,248(sp)
     950:	dec04804 	addi	sp,sp,288
     954:	f800283a 	ret
     958:	d9002c17 	ldw	r4,176(sp)
     95c:	00047b40 	call	47b4 <__sinit>
     960:	003f0406 	br	574 <___vfprintf_internal_r+0x64>
     964:	d8802d17 	ldw	r2,180(sp)
     968:	d9002d17 	ldw	r4,180(sp)
     96c:	10800017 	ldw	r2,0(r2)
     970:	d8803115 	stw	r2,196(sp)
     974:	20800104 	addi	r2,r4,4
     978:	d9003117 	ldw	r4,196(sp)
     97c:	203fa716 	blt	r4,zero,81c <___vfprintf_internal_r+0x30c>
     980:	d8802d15 	stw	r2,180(sp)
     984:	ac400007 	ldb	r17,0(r21)
     988:	003f4206 	br	694 <___vfprintf_internal_r+0x184>
     98c:	ac400007 	ldb	r17,0(r21)
     990:	aac00044 	addi	r11,r21,1
     994:	8a872826 	beq	r17,r10,2638 <___vfprintf_internal_r+0x2128>
     998:	88bff404 	addi	r2,r17,-48
     99c:	0009883a 	mov	r4,zero
     9a0:	30867d36 	bltu	r6,r2,2398 <___vfprintf_internal_r+0x1e88>
     9a4:	5c400007 	ldb	r17,0(r11)
     9a8:	210002a4 	muli	r4,r4,10
     9ac:	5d400044 	addi	r21,r11,1
     9b0:	a817883a 	mov	r11,r21
     9b4:	2089883a 	add	r4,r4,r2
     9b8:	88bff404 	addi	r2,r17,-48
     9bc:	30bff92e 	bgeu	r6,r2,9a4 <___vfprintf_internal_r+0x494>
     9c0:	2005c916 	blt	r4,zero,20e8 <___vfprintf_internal_r+0x1bd8>
     9c4:	d9002915 	stw	r4,164(sp)
     9c8:	003f3306 	br	698 <___vfprintf_internal_r+0x188>
     9cc:	94802014 	ori	r18,r18,128
     9d0:	ac400007 	ldb	r17,0(r21)
     9d4:	003f2f06 	br	694 <___vfprintf_internal_r+0x184>
     9d8:	a809883a 	mov	r4,r21
     9dc:	d8003115 	stw	zero,196(sp)
     9e0:	88bff404 	addi	r2,r17,-48
     9e4:	0017883a 	mov	r11,zero
     9e8:	24400007 	ldb	r17,0(r4)
     9ec:	5ac002a4 	muli	r11,r11,10
     9f0:	ad400044 	addi	r21,r21,1
     9f4:	a809883a 	mov	r4,r21
     9f8:	12d7883a 	add	r11,r2,r11
     9fc:	88bff404 	addi	r2,r17,-48
     a00:	30bff92e 	bgeu	r6,r2,9e8 <___vfprintf_internal_r+0x4d8>
     a04:	dac03115 	stw	r11,196(sp)
     a08:	003f2306 	br	698 <___vfprintf_internal_r+0x188>
     a0c:	18c03fcc 	andi	r3,r3,255
     a10:	18072b1e 	bne	r3,zero,26c0 <___vfprintf_internal_r+0x21b0>
     a14:	94800414 	ori	r18,r18,16
     a18:	9080080c 	andi	r2,r18,32
     a1c:	10037b26 	beq	r2,zero,180c <___vfprintf_internal_r+0x12fc>
     a20:	d9402d17 	ldw	r5,180(sp)
     a24:	28800117 	ldw	r2,4(r5)
     a28:	2cc00017 	ldw	r19,0(r5)
     a2c:	29400204 	addi	r5,r5,8
     a30:	d9402d15 	stw	r5,180(sp)
     a34:	102d883a 	mov	r22,r2
     a38:	10044b16 	blt	r2,zero,1b68 <___vfprintf_internal_r+0x1658>
     a3c:	d9402917 	ldw	r5,164(sp)
     a40:	df002783 	ldbu	fp,158(sp)
     a44:	2803bc16 	blt	r5,zero,1938 <___vfprintf_internal_r+0x1428>
     a48:	00ffdfc4 	movi	r3,-129
     a4c:	9d84b03a 	or	r2,r19,r22
     a50:	90e4703a 	and	r18,r18,r3
     a54:	10017726 	beq	r2,zero,1034 <___vfprintf_internal_r+0xb24>
     a58:	b0038326 	beq	r22,zero,1868 <___vfprintf_internal_r+0x1358>
     a5c:	dc402a15 	stw	r17,168(sp)
     a60:	dc001e04 	addi	r16,sp,120
     a64:	b023883a 	mov	r17,r22
     a68:	402d883a 	mov	r22,r8
     a6c:	9809883a 	mov	r4,r19
     a70:	880b883a 	mov	r5,r17
     a74:	01800284 	movi	r6,10
     a78:	000f883a 	mov	r7,zero
     a7c:	0009f040 	call	9f04 <__umoddi3>
     a80:	10800c04 	addi	r2,r2,48
     a84:	843fffc4 	addi	r16,r16,-1
     a88:	9809883a 	mov	r4,r19
     a8c:	880b883a 	mov	r5,r17
     a90:	80800005 	stb	r2,0(r16)
     a94:	01800284 	movi	r6,10
     a98:	000f883a 	mov	r7,zero
     a9c:	000998c0 	call	998c <__udivdi3>
     aa0:	1027883a 	mov	r19,r2
     aa4:	10c4b03a 	or	r2,r2,r3
     aa8:	1823883a 	mov	r17,r3
     aac:	103fef1e 	bne	r2,zero,a6c <___vfprintf_internal_r+0x55c>
     ab0:	d8c02817 	ldw	r3,160(sp)
     ab4:	dc402a17 	ldw	r17,168(sp)
     ab8:	b011883a 	mov	r8,r22
     abc:	1c07c83a 	sub	r3,r3,r16
     ac0:	d8c02e15 	stw	r3,184(sp)
     ac4:	00005906 	br	c2c <___vfprintf_internal_r+0x71c>
     ac8:	18c03fcc 	andi	r3,r3,255
     acc:	1806fa1e 	bne	r3,zero,26b8 <___vfprintf_internal_r+0x21a8>
     ad0:	9080020c 	andi	r2,r18,8
     ad4:	10048a26 	beq	r2,zero,1d00 <___vfprintf_internal_r+0x17f0>
     ad8:	d8c02d17 	ldw	r3,180(sp)
     adc:	d9002d17 	ldw	r4,180(sp)
     ae0:	d9402d17 	ldw	r5,180(sp)
     ae4:	18c00017 	ldw	r3,0(r3)
     ae8:	21000117 	ldw	r4,4(r4)
     aec:	29400204 	addi	r5,r5,8
     af0:	d8c03615 	stw	r3,216(sp)
     af4:	d9003815 	stw	r4,224(sp)
     af8:	d9402d15 	stw	r5,180(sp)
     afc:	d9003617 	ldw	r4,216(sp)
     b00:	d9403817 	ldw	r5,224(sp)
     b04:	da003d15 	stw	r8,244(sp)
     b08:	04000044 	movi	r16,1
     b0c:	00077300 	call	7730 <__fpclassifyd>
     b10:	da003d17 	ldw	r8,244(sp)
     b14:	14041f1e 	bne	r2,r16,1b94 <___vfprintf_internal_r+0x1684>
     b18:	d9003617 	ldw	r4,216(sp)
     b1c:	d9403817 	ldw	r5,224(sp)
     b20:	000d883a 	mov	r6,zero
     b24:	000f883a 	mov	r7,zero
     b28:	000b8e80 	call	b8e8 <__ledf2>
     b2c:	da003d17 	ldw	r8,244(sp)
     b30:	1005be16 	blt	r2,zero,222c <___vfprintf_internal_r+0x1d1c>
     b34:	df002783 	ldbu	fp,158(sp)
     b38:	008011c4 	movi	r2,71
     b3c:	1445330e 	bge	r2,r17,200c <___vfprintf_internal_r+0x1afc>
     b40:	04000074 	movhi	r16,1
     b44:	843e5804 	addi	r16,r16,-1696
     b48:	00c000c4 	movi	r3,3
     b4c:	00bfdfc4 	movi	r2,-129
     b50:	d8c02a15 	stw	r3,168(sp)
     b54:	90a4703a 	and	r18,r18,r2
     b58:	d8c02e15 	stw	r3,184(sp)
     b5c:	d8002915 	stw	zero,164(sp)
     b60:	d8003215 	stw	zero,200(sp)
     b64:	00003706 	br	c44 <___vfprintf_internal_r+0x734>
     b68:	94800214 	ori	r18,r18,8
     b6c:	ac400007 	ldb	r17,0(r21)
     b70:	003ec806 	br	694 <___vfprintf_internal_r+0x184>
     b74:	18c03fcc 	andi	r3,r3,255
     b78:	1806db1e 	bne	r3,zero,26e8 <___vfprintf_internal_r+0x21d8>
     b7c:	94800414 	ori	r18,r18,16
     b80:	9080080c 	andi	r2,r18,32
     b84:	1002d826 	beq	r2,zero,16e8 <___vfprintf_internal_r+0x11d8>
     b88:	d9402d17 	ldw	r5,180(sp)
     b8c:	d8c02917 	ldw	r3,164(sp)
     b90:	d8002785 	stb	zero,158(sp)
     b94:	28800204 	addi	r2,r5,8
     b98:	2cc00017 	ldw	r19,0(r5)
     b9c:	2d800117 	ldw	r22,4(r5)
     ba0:	18048f16 	blt	r3,zero,1de0 <___vfprintf_internal_r+0x18d0>
     ba4:	013fdfc4 	movi	r4,-129
     ba8:	9d86b03a 	or	r3,r19,r22
     bac:	d8802d15 	stw	r2,180(sp)
     bb0:	9124703a 	and	r18,r18,r4
     bb4:	1802d91e 	bne	r3,zero,171c <___vfprintf_internal_r+0x120c>
     bb8:	d8c02917 	ldw	r3,164(sp)
     bbc:	0039883a 	mov	fp,zero
     bc0:	1805c326 	beq	r3,zero,22d0 <___vfprintf_internal_r+0x1dc0>
     bc4:	0027883a 	mov	r19,zero
     bc8:	002d883a 	mov	r22,zero
     bcc:	dc001e04 	addi	r16,sp,120
     bd0:	9806d0fa 	srli	r3,r19,3
     bd4:	b008977a 	slli	r4,r22,29
     bd8:	b02cd0fa 	srli	r22,r22,3
     bdc:	9cc001cc 	andi	r19,r19,7
     be0:	98800c04 	addi	r2,r19,48
     be4:	843fffc4 	addi	r16,r16,-1
     be8:	20e6b03a 	or	r19,r4,r3
     bec:	80800005 	stb	r2,0(r16)
     bf0:	9d86b03a 	or	r3,r19,r22
     bf4:	183ff61e 	bne	r3,zero,bd0 <___vfprintf_internal_r+0x6c0>
     bf8:	90c0004c 	andi	r3,r18,1
     bfc:	18013b26 	beq	r3,zero,10ec <___vfprintf_internal_r+0xbdc>
     c00:	10803fcc 	andi	r2,r2,255
     c04:	1080201c 	xori	r2,r2,128
     c08:	10bfe004 	addi	r2,r2,-128
     c0c:	00c00c04 	movi	r3,48
     c10:	10c13626 	beq	r2,r3,10ec <___vfprintf_internal_r+0xbdc>
     c14:	80ffffc5 	stb	r3,-1(r16)
     c18:	d8c02817 	ldw	r3,160(sp)
     c1c:	80bfffc4 	addi	r2,r16,-1
     c20:	1021883a 	mov	r16,r2
     c24:	1887c83a 	sub	r3,r3,r2
     c28:	d8c02e15 	stw	r3,184(sp)
     c2c:	d8802e17 	ldw	r2,184(sp)
     c30:	d9002917 	ldw	r4,164(sp)
     c34:	1100010e 	bge	r2,r4,c3c <___vfprintf_internal_r+0x72c>
     c38:	2005883a 	mov	r2,r4
     c3c:	d8802a15 	stw	r2,168(sp)
     c40:	d8003215 	stw	zero,200(sp)
     c44:	e7003fcc 	andi	fp,fp,255
     c48:	e700201c 	xori	fp,fp,128
     c4c:	e73fe004 	addi	fp,fp,-128
     c50:	e0000326 	beq	fp,zero,c60 <___vfprintf_internal_r+0x750>
     c54:	d8c02a17 	ldw	r3,168(sp)
     c58:	18c00044 	addi	r3,r3,1
     c5c:	d8c02a15 	stw	r3,168(sp)
     c60:	90c0008c 	andi	r3,r18,2
     c64:	d8c02b15 	stw	r3,172(sp)
     c68:	18000326 	beq	r3,zero,c78 <___vfprintf_internal_r+0x768>
     c6c:	d8c02a17 	ldw	r3,168(sp)
     c70:	18c00084 	addi	r3,r3,2
     c74:	d8c02a15 	stw	r3,168(sp)
     c78:	90c0210c 	andi	r3,r18,132
     c7c:	d8c03015 	stw	r3,192(sp)
     c80:	1801a31e 	bne	r3,zero,1310 <___vfprintf_internal_r+0xe00>
     c84:	d9003117 	ldw	r4,196(sp)
     c88:	d8c02a17 	ldw	r3,168(sp)
     c8c:	20e7c83a 	sub	r19,r4,r3
     c90:	04c19f0e 	bge	zero,r19,1310 <___vfprintf_internal_r+0xe00>
     c94:	02400404 	movi	r9,16
     c98:	d8c02017 	ldw	r3,128(sp)
     c9c:	d8801f17 	ldw	r2,124(sp)
     ca0:	4cc50d0e 	bge	r9,r19,20d8 <___vfprintf_internal_r+0x1bc8>
     ca4:	01400074 	movhi	r5,1
     ca8:	297e6b84 	addi	r5,r5,-1618
     cac:	dc403b15 	stw	r17,236(sp)
     cb0:	d9403515 	stw	r5,212(sp)
     cb4:	9823883a 	mov	r17,r19
     cb8:	482d883a 	mov	r22,r9
     cbc:	9027883a 	mov	r19,r18
     cc0:	070001c4 	movi	fp,7
     cc4:	8025883a 	mov	r18,r16
     cc8:	dc002c17 	ldw	r16,176(sp)
     ccc:	00000306 	br	cdc <___vfprintf_internal_r+0x7cc>
     cd0:	8c7ffc04 	addi	r17,r17,-16
     cd4:	42000204 	addi	r8,r8,8
     cd8:	b440130e 	bge	r22,r17,d28 <___vfprintf_internal_r+0x818>
     cdc:	01000074 	movhi	r4,1
     ce0:	18c00404 	addi	r3,r3,16
     ce4:	10800044 	addi	r2,r2,1
     ce8:	213e6b84 	addi	r4,r4,-1618
     cec:	41000015 	stw	r4,0(r8)
     cf0:	45800115 	stw	r22,4(r8)
     cf4:	d8c02015 	stw	r3,128(sp)
     cf8:	d8801f15 	stw	r2,124(sp)
     cfc:	e0bff40e 	bge	fp,r2,cd0 <___vfprintf_internal_r+0x7c0>
     d00:	d9801e04 	addi	r6,sp,120
     d04:	b80b883a 	mov	r5,r23
     d08:	8009883a 	mov	r4,r16
     d0c:	0007b0c0 	call	7b0c <__sprint_r>
     d10:	103f011e 	bne	r2,zero,918 <___vfprintf_internal_r+0x408>
     d14:	8c7ffc04 	addi	r17,r17,-16
     d18:	d8c02017 	ldw	r3,128(sp)
     d1c:	d8801f17 	ldw	r2,124(sp)
     d20:	da000404 	addi	r8,sp,16
     d24:	b47fed16 	blt	r22,r17,cdc <___vfprintf_internal_r+0x7cc>
     d28:	9021883a 	mov	r16,r18
     d2c:	9825883a 	mov	r18,r19
     d30:	8827883a 	mov	r19,r17
     d34:	dc403b17 	ldw	r17,236(sp)
     d38:	d9403517 	ldw	r5,212(sp)
     d3c:	98c7883a 	add	r3,r19,r3
     d40:	10800044 	addi	r2,r2,1
     d44:	41400015 	stw	r5,0(r8)
     d48:	44c00115 	stw	r19,4(r8)
     d4c:	d8c02015 	stw	r3,128(sp)
     d50:	d8801f15 	stw	r2,124(sp)
     d54:	010001c4 	movi	r4,7
     d58:	2082a316 	blt	r4,r2,17e8 <___vfprintf_internal_r+0x12d8>
     d5c:	df002787 	ldb	fp,158(sp)
     d60:	42000204 	addi	r8,r8,8
     d64:	e0000c26 	beq	fp,zero,d98 <___vfprintf_internal_r+0x888>
     d68:	d8801f17 	ldw	r2,124(sp)
     d6c:	d9002784 	addi	r4,sp,158
     d70:	18c00044 	addi	r3,r3,1
     d74:	10800044 	addi	r2,r2,1
     d78:	41000015 	stw	r4,0(r8)
     d7c:	01000044 	movi	r4,1
     d80:	41000115 	stw	r4,4(r8)
     d84:	d8c02015 	stw	r3,128(sp)
     d88:	d8801f15 	stw	r2,124(sp)
     d8c:	010001c4 	movi	r4,7
     d90:	20823c16 	blt	r4,r2,1684 <___vfprintf_internal_r+0x1174>
     d94:	42000204 	addi	r8,r8,8
     d98:	d8802b17 	ldw	r2,172(sp)
     d9c:	10000c26 	beq	r2,zero,dd0 <___vfprintf_internal_r+0x8c0>
     da0:	d8801f17 	ldw	r2,124(sp)
     da4:	d9002704 	addi	r4,sp,156
     da8:	18c00084 	addi	r3,r3,2
     dac:	10800044 	addi	r2,r2,1
     db0:	41000015 	stw	r4,0(r8)
     db4:	01000084 	movi	r4,2
     db8:	41000115 	stw	r4,4(r8)
     dbc:	d8c02015 	stw	r3,128(sp)
     dc0:	d8801f15 	stw	r2,124(sp)
     dc4:	010001c4 	movi	r4,7
     dc8:	20823616 	blt	r4,r2,16a4 <___vfprintf_internal_r+0x1194>
     dcc:	42000204 	addi	r8,r8,8
     dd0:	d9003017 	ldw	r4,192(sp)
     dd4:	00802004 	movi	r2,128
     dd8:	20819926 	beq	r4,r2,1440 <___vfprintf_internal_r+0xf30>
     ddc:	d9402917 	ldw	r5,164(sp)
     de0:	d8802e17 	ldw	r2,184(sp)
     de4:	28adc83a 	sub	r22,r5,r2
     de8:	0580310e 	bge	zero,r22,eb0 <___vfprintf_internal_r+0x9a0>
     dec:	07000404 	movi	fp,16
     df0:	d8801f17 	ldw	r2,124(sp)
     df4:	e584140e 	bge	fp,r22,1e48 <___vfprintf_internal_r+0x1938>
     df8:	01400074 	movhi	r5,1
     dfc:	297e6784 	addi	r5,r5,-1634
     e00:	dc402915 	stw	r17,164(sp)
     e04:	d9402b15 	stw	r5,172(sp)
     e08:	b023883a 	mov	r17,r22
     e0c:	04c001c4 	movi	r19,7
     e10:	a82d883a 	mov	r22,r21
     e14:	902b883a 	mov	r21,r18
     e18:	8025883a 	mov	r18,r16
     e1c:	dc002c17 	ldw	r16,176(sp)
     e20:	00000306 	br	e30 <___vfprintf_internal_r+0x920>
     e24:	8c7ffc04 	addi	r17,r17,-16
     e28:	42000204 	addi	r8,r8,8
     e2c:	e440110e 	bge	fp,r17,e74 <___vfprintf_internal_r+0x964>
     e30:	18c00404 	addi	r3,r3,16
     e34:	10800044 	addi	r2,r2,1
     e38:	45000015 	stw	r20,0(r8)
     e3c:	47000115 	stw	fp,4(r8)
     e40:	d8c02015 	stw	r3,128(sp)
     e44:	d8801f15 	stw	r2,124(sp)
     e48:	98bff60e 	bge	r19,r2,e24 <___vfprintf_internal_r+0x914>
     e4c:	d9801e04 	addi	r6,sp,120
     e50:	b80b883a 	mov	r5,r23
     e54:	8009883a 	mov	r4,r16
     e58:	0007b0c0 	call	7b0c <__sprint_r>
     e5c:	103eae1e 	bne	r2,zero,918 <___vfprintf_internal_r+0x408>
     e60:	8c7ffc04 	addi	r17,r17,-16
     e64:	d8c02017 	ldw	r3,128(sp)
     e68:	d8801f17 	ldw	r2,124(sp)
     e6c:	da000404 	addi	r8,sp,16
     e70:	e47fef16 	blt	fp,r17,e30 <___vfprintf_internal_r+0x920>
     e74:	9021883a 	mov	r16,r18
     e78:	a825883a 	mov	r18,r21
     e7c:	b02b883a 	mov	r21,r22
     e80:	882d883a 	mov	r22,r17
     e84:	dc402917 	ldw	r17,164(sp)
     e88:	d9002b17 	ldw	r4,172(sp)
     e8c:	1d87883a 	add	r3,r3,r22
     e90:	10800044 	addi	r2,r2,1
     e94:	41000015 	stw	r4,0(r8)
     e98:	45800115 	stw	r22,4(r8)
     e9c:	d8c02015 	stw	r3,128(sp)
     ea0:	d8801f15 	stw	r2,124(sp)
     ea4:	010001c4 	movi	r4,7
     ea8:	2081ee16 	blt	r4,r2,1664 <___vfprintf_internal_r+0x1154>
     eac:	42000204 	addi	r8,r8,8
     eb0:	9080400c 	andi	r2,r18,256
     eb4:	1001181e 	bne	r2,zero,1318 <___vfprintf_internal_r+0xe08>
     eb8:	d9402e17 	ldw	r5,184(sp)
     ebc:	d8801f17 	ldw	r2,124(sp)
     ec0:	44000015 	stw	r16,0(r8)
     ec4:	1947883a 	add	r3,r3,r5
     ec8:	10800044 	addi	r2,r2,1
     ecc:	41400115 	stw	r5,4(r8)
     ed0:	d8c02015 	stw	r3,128(sp)
     ed4:	d8801f15 	stw	r2,124(sp)
     ed8:	010001c4 	movi	r4,7
     edc:	2081d316 	blt	r4,r2,162c <___vfprintf_internal_r+0x111c>
     ee0:	42000204 	addi	r8,r8,8
     ee4:	9480010c 	andi	r18,r18,4
     ee8:	90003226 	beq	r18,zero,fb4 <___vfprintf_internal_r+0xaa4>
     eec:	d9403117 	ldw	r5,196(sp)
     ef0:	d8802a17 	ldw	r2,168(sp)
     ef4:	28a1c83a 	sub	r16,r5,r2
     ef8:	04002e0e 	bge	zero,r16,fb4 <___vfprintf_internal_r+0xaa4>
     efc:	04400404 	movi	r17,16
     f00:	d8801f17 	ldw	r2,124(sp)
     f04:	8c04a20e 	bge	r17,r16,2190 <___vfprintf_internal_r+0x1c80>
     f08:	01400074 	movhi	r5,1
     f0c:	297e6b84 	addi	r5,r5,-1618
     f10:	d9403515 	stw	r5,212(sp)
     f14:	048001c4 	movi	r18,7
     f18:	dcc02c17 	ldw	r19,176(sp)
     f1c:	00000306 	br	f2c <___vfprintf_internal_r+0xa1c>
     f20:	843ffc04 	addi	r16,r16,-16
     f24:	42000204 	addi	r8,r8,8
     f28:	8c00130e 	bge	r17,r16,f78 <___vfprintf_internal_r+0xa68>
     f2c:	01000074 	movhi	r4,1
     f30:	18c00404 	addi	r3,r3,16
     f34:	10800044 	addi	r2,r2,1
     f38:	213e6b84 	addi	r4,r4,-1618
     f3c:	41000015 	stw	r4,0(r8)
     f40:	44400115 	stw	r17,4(r8)
     f44:	d8c02015 	stw	r3,128(sp)
     f48:	d8801f15 	stw	r2,124(sp)
     f4c:	90bff40e 	bge	r18,r2,f20 <___vfprintf_internal_r+0xa10>
     f50:	d9801e04 	addi	r6,sp,120
     f54:	b80b883a 	mov	r5,r23
     f58:	9809883a 	mov	r4,r19
     f5c:	0007b0c0 	call	7b0c <__sprint_r>
     f60:	103e6d1e 	bne	r2,zero,918 <___vfprintf_internal_r+0x408>
     f64:	843ffc04 	addi	r16,r16,-16
     f68:	d8c02017 	ldw	r3,128(sp)
     f6c:	d8801f17 	ldw	r2,124(sp)
     f70:	da000404 	addi	r8,sp,16
     f74:	8c3fed16 	blt	r17,r16,f2c <___vfprintf_internal_r+0xa1c>
     f78:	d9403517 	ldw	r5,212(sp)
     f7c:	1c07883a 	add	r3,r3,r16
     f80:	10800044 	addi	r2,r2,1
     f84:	41400015 	stw	r5,0(r8)
     f88:	44000115 	stw	r16,4(r8)
     f8c:	d8c02015 	stw	r3,128(sp)
     f90:	d8801f15 	stw	r2,124(sp)
     f94:	010001c4 	movi	r4,7
     f98:	2080060e 	bge	r4,r2,fb4 <___vfprintf_internal_r+0xaa4>
     f9c:	d9002c17 	ldw	r4,176(sp)
     fa0:	d9801e04 	addi	r6,sp,120
     fa4:	b80b883a 	mov	r5,r23
     fa8:	0007b0c0 	call	7b0c <__sprint_r>
     fac:	103e5a1e 	bne	r2,zero,918 <___vfprintf_internal_r+0x408>
     fb0:	d8c02017 	ldw	r3,128(sp)
     fb4:	d8803117 	ldw	r2,196(sp)
     fb8:	d9002a17 	ldw	r4,168(sp)
     fbc:	1100010e 	bge	r2,r4,fc4 <___vfprintf_internal_r+0xab4>
     fc0:	2005883a 	mov	r2,r4
     fc4:	d9402f17 	ldw	r5,188(sp)
     fc8:	288b883a 	add	r5,r5,r2
     fcc:	d9402f15 	stw	r5,188(sp)
     fd0:	18019e1e 	bne	r3,zero,164c <___vfprintf_internal_r+0x113c>
     fd4:	a8800007 	ldb	r2,0(r21)
     fd8:	d8001f15 	stw	zero,124(sp)
     fdc:	da000404 	addi	r8,sp,16
     fe0:	103d851e 	bne	r2,zero,5f8 <___vfprintf_internal_r+0xe8>
     fe4:	a821883a 	mov	r16,r21
     fe8:	003d9b06 	br	658 <___vfprintf_internal_r+0x148>
     fec:	18c03fcc 	andi	r3,r3,255
     ff0:	1805c11e 	bne	r3,zero,26f8 <___vfprintf_internal_r+0x21e8>
     ff4:	94800414 	ori	r18,r18,16
     ff8:	9080080c 	andi	r2,r18,32
     ffc:	10020c26 	beq	r2,zero,1830 <___vfprintf_internal_r+0x1320>
    1000:	d8802d17 	ldw	r2,180(sp)
    1004:	d9002917 	ldw	r4,164(sp)
    1008:	d8002785 	stb	zero,158(sp)
    100c:	10c00204 	addi	r3,r2,8
    1010:	14c00017 	ldw	r19,0(r2)
    1014:	15800117 	ldw	r22,4(r2)
    1018:	20040f16 	blt	r4,zero,2058 <___vfprintf_internal_r+0x1b48>
    101c:	013fdfc4 	movi	r4,-129
    1020:	9d84b03a 	or	r2,r19,r22
    1024:	d8c02d15 	stw	r3,180(sp)
    1028:	9124703a 	and	r18,r18,r4
    102c:	0039883a 	mov	fp,zero
    1030:	103e891e 	bne	r2,zero,a58 <___vfprintf_internal_r+0x548>
    1034:	d9002917 	ldw	r4,164(sp)
    1038:	2002c11e 	bne	r4,zero,1b40 <___vfprintf_internal_r+0x1630>
    103c:	d8002915 	stw	zero,164(sp)
    1040:	d8002e15 	stw	zero,184(sp)
    1044:	dc001e04 	addi	r16,sp,120
    1048:	003ef806 	br	c2c <___vfprintf_internal_r+0x71c>
    104c:	18c03fcc 	andi	r3,r3,255
    1050:	18059d1e 	bne	r3,zero,26c8 <___vfprintf_internal_r+0x21b8>
    1054:	01400074 	movhi	r5,1
    1058:	297e5b04 	addi	r5,r5,-1684
    105c:	d9403915 	stw	r5,228(sp)
    1060:	9080080c 	andi	r2,r18,32
    1064:	10005226 	beq	r2,zero,11b0 <___vfprintf_internal_r+0xca0>
    1068:	d8802d17 	ldw	r2,180(sp)
    106c:	14c00017 	ldw	r19,0(r2)
    1070:	15800117 	ldw	r22,4(r2)
    1074:	10800204 	addi	r2,r2,8
    1078:	d8802d15 	stw	r2,180(sp)
    107c:	9080004c 	andi	r2,r18,1
    1080:	10019026 	beq	r2,zero,16c4 <___vfprintf_internal_r+0x11b4>
    1084:	9d84b03a 	or	r2,r19,r22
    1088:	10036926 	beq	r2,zero,1e30 <___vfprintf_internal_r+0x1920>
    108c:	d8c02917 	ldw	r3,164(sp)
    1090:	00800c04 	movi	r2,48
    1094:	d8802705 	stb	r2,156(sp)
    1098:	dc402745 	stb	r17,157(sp)
    109c:	d8002785 	stb	zero,158(sp)
    10a0:	90800094 	ori	r2,r18,2
    10a4:	18045d16 	blt	r3,zero,221c <___vfprintf_internal_r+0x1d0c>
    10a8:	00bfdfc4 	movi	r2,-129
    10ac:	90a4703a 	and	r18,r18,r2
    10b0:	94800094 	ori	r18,r18,2
    10b4:	0039883a 	mov	fp,zero
    10b8:	d9003917 	ldw	r4,228(sp)
    10bc:	dc001e04 	addi	r16,sp,120
    10c0:	988003cc 	andi	r2,r19,15
    10c4:	b006973a 	slli	r3,r22,28
    10c8:	2085883a 	add	r2,r4,r2
    10cc:	9826d13a 	srli	r19,r19,4
    10d0:	10800003 	ldbu	r2,0(r2)
    10d4:	b02cd13a 	srli	r22,r22,4
    10d8:	843fffc4 	addi	r16,r16,-1
    10dc:	1ce6b03a 	or	r19,r3,r19
    10e0:	80800005 	stb	r2,0(r16)
    10e4:	9d84b03a 	or	r2,r19,r22
    10e8:	103ff51e 	bne	r2,zero,10c0 <___vfprintf_internal_r+0xbb0>
    10ec:	d8c02817 	ldw	r3,160(sp)
    10f0:	1c07c83a 	sub	r3,r3,r16
    10f4:	d8c02e15 	stw	r3,184(sp)
    10f8:	003ecc06 	br	c2c <___vfprintf_internal_r+0x71c>
    10fc:	18c03fcc 	andi	r3,r3,255
    1100:	183e9f26 	beq	r3,zero,b80 <___vfprintf_internal_r+0x670>
    1104:	d9c02785 	stb	r7,158(sp)
    1108:	003e9d06 	br	b80 <___vfprintf_internal_r+0x670>
    110c:	00c00044 	movi	r3,1
    1110:	01c00ac4 	movi	r7,43
    1114:	ac400007 	ldb	r17,0(r21)
    1118:	003d5e06 	br	694 <___vfprintf_internal_r+0x184>
    111c:	94800814 	ori	r18,r18,32
    1120:	ac400007 	ldb	r17,0(r21)
    1124:	003d5b06 	br	694 <___vfprintf_internal_r+0x184>
    1128:	d8c02d17 	ldw	r3,180(sp)
    112c:	d8002785 	stb	zero,158(sp)
    1130:	1c000017 	ldw	r16,0(r3)
    1134:	1cc00104 	addi	r19,r3,4
    1138:	80041926 	beq	r16,zero,21a0 <___vfprintf_internal_r+0x1c90>
    113c:	d9002917 	ldw	r4,164(sp)
    1140:	2003d016 	blt	r4,zero,2084 <___vfprintf_internal_r+0x1b74>
    1144:	200d883a 	mov	r6,r4
    1148:	000b883a 	mov	r5,zero
    114c:	8009883a 	mov	r4,r16
    1150:	da003d15 	stw	r8,244(sp)
    1154:	0005d200 	call	5d20 <memchr>
    1158:	da003d17 	ldw	r8,244(sp)
    115c:	10045426 	beq	r2,zero,22b0 <___vfprintf_internal_r+0x1da0>
    1160:	1405c83a 	sub	r2,r2,r16
    1164:	d8802e15 	stw	r2,184(sp)
    1168:	1003cc16 	blt	r2,zero,209c <___vfprintf_internal_r+0x1b8c>
    116c:	df002783 	ldbu	fp,158(sp)
    1170:	d8802a15 	stw	r2,168(sp)
    1174:	dcc02d15 	stw	r19,180(sp)
    1178:	d8002915 	stw	zero,164(sp)
    117c:	d8003215 	stw	zero,200(sp)
    1180:	003eb006 	br	c44 <___vfprintf_internal_r+0x734>
    1184:	18c03fcc 	andi	r3,r3,255
    1188:	183f9b26 	beq	r3,zero,ff8 <___vfprintf_internal_r+0xae8>
    118c:	d9c02785 	stb	r7,158(sp)
    1190:	003f9906 	br	ff8 <___vfprintf_internal_r+0xae8>
    1194:	18c03fcc 	andi	r3,r3,255
    1198:	1805551e 	bne	r3,zero,26f0 <___vfprintf_internal_r+0x21e0>
    119c:	01400074 	movhi	r5,1
    11a0:	297e6004 	addi	r5,r5,-1664
    11a4:	d9403915 	stw	r5,228(sp)
    11a8:	9080080c 	andi	r2,r18,32
    11ac:	103fae1e 	bne	r2,zero,1068 <___vfprintf_internal_r+0xb58>
    11b0:	9080040c 	andi	r2,r18,16
    11b4:	1002de26 	beq	r2,zero,1d30 <___vfprintf_internal_r+0x1820>
    11b8:	d8c02d17 	ldw	r3,180(sp)
    11bc:	002d883a 	mov	r22,zero
    11c0:	1cc00017 	ldw	r19,0(r3)
    11c4:	18c00104 	addi	r3,r3,4
    11c8:	d8c02d15 	stw	r3,180(sp)
    11cc:	003fab06 	br	107c <___vfprintf_internal_r+0xb6c>
    11d0:	38803fcc 	andi	r2,r7,255
    11d4:	1080201c 	xori	r2,r2,128
    11d8:	10bfe004 	addi	r2,r2,-128
    11dc:	1002d21e 	bne	r2,zero,1d28 <___vfprintf_internal_r+0x1818>
    11e0:	00c00044 	movi	r3,1
    11e4:	01c00804 	movi	r7,32
    11e8:	ac400007 	ldb	r17,0(r21)
    11ec:	003d2906 	br	694 <___vfprintf_internal_r+0x184>
    11f0:	94800054 	ori	r18,r18,1
    11f4:	ac400007 	ldb	r17,0(r21)
    11f8:	003d2606 	br	694 <___vfprintf_internal_r+0x184>
    11fc:	18c03fcc 	andi	r3,r3,255
    1200:	183e0526 	beq	r3,zero,a18 <___vfprintf_internal_r+0x508>
    1204:	d9c02785 	stb	r7,158(sp)
    1208:	003e0306 	br	a18 <___vfprintf_internal_r+0x508>
    120c:	94801014 	ori	r18,r18,64
    1210:	ac400007 	ldb	r17,0(r21)
    1214:	003d1f06 	br	694 <___vfprintf_internal_r+0x184>
    1218:	ac400007 	ldb	r17,0(r21)
    121c:	8a438726 	beq	r17,r9,203c <___vfprintf_internal_r+0x1b2c>
    1220:	94800414 	ori	r18,r18,16
    1224:	003d1b06 	br	694 <___vfprintf_internal_r+0x184>
    1228:	18c03fcc 	andi	r3,r3,255
    122c:	1805341e 	bne	r3,zero,2700 <___vfprintf_internal_r+0x21f0>
    1230:	9080080c 	andi	r2,r18,32
    1234:	1002cd26 	beq	r2,zero,1d6c <___vfprintf_internal_r+0x185c>
    1238:	d9402d17 	ldw	r5,180(sp)
    123c:	d9002f17 	ldw	r4,188(sp)
    1240:	28800017 	ldw	r2,0(r5)
    1244:	2007d7fa 	srai	r3,r4,31
    1248:	29400104 	addi	r5,r5,4
    124c:	d9402d15 	stw	r5,180(sp)
    1250:	11000015 	stw	r4,0(r2)
    1254:	10c00115 	stw	r3,4(r2)
    1258:	003ce506 	br	5f0 <___vfprintf_internal_r+0xe0>
    125c:	d8c02d17 	ldw	r3,180(sp)
    1260:	d9002d17 	ldw	r4,180(sp)
    1264:	d8002785 	stb	zero,158(sp)
    1268:	18800017 	ldw	r2,0(r3)
    126c:	21000104 	addi	r4,r4,4
    1270:	00c00044 	movi	r3,1
    1274:	d8c02a15 	stw	r3,168(sp)
    1278:	d8801405 	stb	r2,80(sp)
    127c:	d9002d15 	stw	r4,180(sp)
    1280:	d8c02e15 	stw	r3,184(sp)
    1284:	d8002915 	stw	zero,164(sp)
    1288:	d8003215 	stw	zero,200(sp)
    128c:	dc001404 	addi	r16,sp,80
    1290:	0039883a 	mov	fp,zero
    1294:	003e7206 	br	c60 <___vfprintf_internal_r+0x750>
    1298:	01000074 	movhi	r4,1
    129c:	213e6004 	addi	r4,r4,-1664
    12a0:	0039883a 	mov	fp,zero
    12a4:	d9003915 	stw	r4,228(sp)
    12a8:	04401e04 	movi	r17,120
    12ac:	003f8206 	br	10b8 <___vfprintf_internal_r+0xba8>
    12b0:	18c03fcc 	andi	r3,r3,255
    12b4:	1805061e 	bne	r3,zero,26d0 <___vfprintf_internal_r+0x21c0>
    12b8:	883d9126 	beq	r17,zero,900 <___vfprintf_internal_r+0x3f0>
    12bc:	00c00044 	movi	r3,1
    12c0:	d8c02a15 	stw	r3,168(sp)
    12c4:	dc401405 	stb	r17,80(sp)
    12c8:	d8002785 	stb	zero,158(sp)
    12cc:	003fec06 	br	1280 <___vfprintf_internal_r+0xd70>
    12d0:	01400074 	movhi	r5,1
    12d4:	297e6004 	addi	r5,r5,-1664
    12d8:	d9403915 	stw	r5,228(sp)
    12dc:	d8c02d15 	stw	r3,180(sp)
    12e0:	1025883a 	mov	r18,r2
    12e4:	04401e04 	movi	r17,120
    12e8:	9d84b03a 	or	r2,r19,r22
    12ec:	1000fc1e 	bne	r2,zero,16e0 <___vfprintf_internal_r+0x11d0>
    12f0:	0039883a 	mov	fp,zero
    12f4:	00800084 	movi	r2,2
    12f8:	10803fcc 	andi	r2,r2,255
    12fc:	00c00044 	movi	r3,1
    1300:	10c20f26 	beq	r2,r3,1b40 <___vfprintf_internal_r+0x1630>
    1304:	00c00084 	movi	r3,2
    1308:	10fd6326 	beq	r2,r3,898 <___vfprintf_internal_r+0x388>
    130c:	003e2d06 	br	bc4 <___vfprintf_internal_r+0x6b4>
    1310:	d8c02017 	ldw	r3,128(sp)
    1314:	003e9306 	br	d64 <___vfprintf_internal_r+0x854>
    1318:	00801944 	movi	r2,101
    131c:	14407e0e 	bge	r2,r17,1518 <___vfprintf_internal_r+0x1008>
    1320:	d9003617 	ldw	r4,216(sp)
    1324:	d9403817 	ldw	r5,224(sp)
    1328:	000d883a 	mov	r6,zero
    132c:	000f883a 	mov	r7,zero
    1330:	d8c03c15 	stw	r3,240(sp)
    1334:	da003d15 	stw	r8,244(sp)
    1338:	000b7840 	call	b784 <__eqdf2>
    133c:	d8c03c17 	ldw	r3,240(sp)
    1340:	da003d17 	ldw	r8,244(sp)
    1344:	1000f71e 	bne	r2,zero,1724 <___vfprintf_internal_r+0x1214>
    1348:	d8801f17 	ldw	r2,124(sp)
    134c:	01000074 	movhi	r4,1
    1350:	213e6704 	addi	r4,r4,-1636
    1354:	18c00044 	addi	r3,r3,1
    1358:	10800044 	addi	r2,r2,1
    135c:	41000015 	stw	r4,0(r8)
    1360:	01000044 	movi	r4,1
    1364:	41000115 	stw	r4,4(r8)
    1368:	d8c02015 	stw	r3,128(sp)
    136c:	d8801f15 	stw	r2,124(sp)
    1370:	010001c4 	movi	r4,7
    1374:	2082b816 	blt	r4,r2,1e58 <___vfprintf_internal_r+0x1948>
    1378:	42000204 	addi	r8,r8,8
    137c:	d8802617 	ldw	r2,152(sp)
    1380:	d9403317 	ldw	r5,204(sp)
    1384:	11400216 	blt	r2,r5,1390 <___vfprintf_internal_r+0xe80>
    1388:	9080004c 	andi	r2,r18,1
    138c:	103ed526 	beq	r2,zero,ee4 <___vfprintf_internal_r+0x9d4>
    1390:	d8803717 	ldw	r2,220(sp)
    1394:	d9003417 	ldw	r4,208(sp)
    1398:	d9403717 	ldw	r5,220(sp)
    139c:	1887883a 	add	r3,r3,r2
    13a0:	d8801f17 	ldw	r2,124(sp)
    13a4:	41000015 	stw	r4,0(r8)
    13a8:	41400115 	stw	r5,4(r8)
    13ac:	10800044 	addi	r2,r2,1
    13b0:	d8c02015 	stw	r3,128(sp)
    13b4:	d8801f15 	stw	r2,124(sp)
    13b8:	010001c4 	movi	r4,7
    13bc:	20832916 	blt	r4,r2,2064 <___vfprintf_internal_r+0x1b54>
    13c0:	42000204 	addi	r8,r8,8
    13c4:	d8803317 	ldw	r2,204(sp)
    13c8:	143fffc4 	addi	r16,r2,-1
    13cc:	043ec50e 	bge	zero,r16,ee4 <___vfprintf_internal_r+0x9d4>
    13d0:	04400404 	movi	r17,16
    13d4:	d8801f17 	ldw	r2,124(sp)
    13d8:	8c00880e 	bge	r17,r16,15fc <___vfprintf_internal_r+0x10ec>
    13dc:	01400074 	movhi	r5,1
    13e0:	297e6784 	addi	r5,r5,-1634
    13e4:	d9402b15 	stw	r5,172(sp)
    13e8:	058001c4 	movi	r22,7
    13ec:	dcc02c17 	ldw	r19,176(sp)
    13f0:	00000306 	br	1400 <___vfprintf_internal_r+0xef0>
    13f4:	42000204 	addi	r8,r8,8
    13f8:	843ffc04 	addi	r16,r16,-16
    13fc:	8c00820e 	bge	r17,r16,1608 <___vfprintf_internal_r+0x10f8>
    1400:	18c00404 	addi	r3,r3,16
    1404:	10800044 	addi	r2,r2,1
    1408:	45000015 	stw	r20,0(r8)
    140c:	44400115 	stw	r17,4(r8)
    1410:	d8c02015 	stw	r3,128(sp)
    1414:	d8801f15 	stw	r2,124(sp)
    1418:	b0bff60e 	bge	r22,r2,13f4 <___vfprintf_internal_r+0xee4>
    141c:	d9801e04 	addi	r6,sp,120
    1420:	b80b883a 	mov	r5,r23
    1424:	9809883a 	mov	r4,r19
    1428:	0007b0c0 	call	7b0c <__sprint_r>
    142c:	103d3a1e 	bne	r2,zero,918 <___vfprintf_internal_r+0x408>
    1430:	d8c02017 	ldw	r3,128(sp)
    1434:	d8801f17 	ldw	r2,124(sp)
    1438:	da000404 	addi	r8,sp,16
    143c:	003fee06 	br	13f8 <___vfprintf_internal_r+0xee8>
    1440:	d9403117 	ldw	r5,196(sp)
    1444:	d8802a17 	ldw	r2,168(sp)
    1448:	28adc83a 	sub	r22,r5,r2
    144c:	05be630e 	bge	zero,r22,ddc <___vfprintf_internal_r+0x8cc>
    1450:	07000404 	movi	fp,16
    1454:	d8801f17 	ldw	r2,124(sp)
    1458:	e5838f0e 	bge	fp,r22,2298 <___vfprintf_internal_r+0x1d88>
    145c:	01400074 	movhi	r5,1
    1460:	297e6784 	addi	r5,r5,-1634
    1464:	dc403015 	stw	r17,192(sp)
    1468:	d9402b15 	stw	r5,172(sp)
    146c:	b023883a 	mov	r17,r22
    1470:	04c001c4 	movi	r19,7
    1474:	a82d883a 	mov	r22,r21
    1478:	902b883a 	mov	r21,r18
    147c:	8025883a 	mov	r18,r16
    1480:	dc002c17 	ldw	r16,176(sp)
    1484:	00000306 	br	1494 <___vfprintf_internal_r+0xf84>
    1488:	8c7ffc04 	addi	r17,r17,-16
    148c:	42000204 	addi	r8,r8,8
    1490:	e440110e 	bge	fp,r17,14d8 <___vfprintf_internal_r+0xfc8>
    1494:	18c00404 	addi	r3,r3,16
    1498:	10800044 	addi	r2,r2,1
    149c:	45000015 	stw	r20,0(r8)
    14a0:	47000115 	stw	fp,4(r8)
    14a4:	d8c02015 	stw	r3,128(sp)
    14a8:	d8801f15 	stw	r2,124(sp)
    14ac:	98bff60e 	bge	r19,r2,1488 <___vfprintf_internal_r+0xf78>
    14b0:	d9801e04 	addi	r6,sp,120
    14b4:	b80b883a 	mov	r5,r23
    14b8:	8009883a 	mov	r4,r16
    14bc:	0007b0c0 	call	7b0c <__sprint_r>
    14c0:	103d151e 	bne	r2,zero,918 <___vfprintf_internal_r+0x408>
    14c4:	8c7ffc04 	addi	r17,r17,-16
    14c8:	d8c02017 	ldw	r3,128(sp)
    14cc:	d8801f17 	ldw	r2,124(sp)
    14d0:	da000404 	addi	r8,sp,16
    14d4:	e47fef16 	blt	fp,r17,1494 <___vfprintf_internal_r+0xf84>
    14d8:	9021883a 	mov	r16,r18
    14dc:	a825883a 	mov	r18,r21
    14e0:	b02b883a 	mov	r21,r22
    14e4:	882d883a 	mov	r22,r17
    14e8:	dc403017 	ldw	r17,192(sp)
    14ec:	d9002b17 	ldw	r4,172(sp)
    14f0:	1d87883a 	add	r3,r3,r22
    14f4:	10800044 	addi	r2,r2,1
    14f8:	41000015 	stw	r4,0(r8)
    14fc:	45800115 	stw	r22,4(r8)
    1500:	d8c02015 	stw	r3,128(sp)
    1504:	d8801f15 	stw	r2,124(sp)
    1508:	010001c4 	movi	r4,7
    150c:	20818e16 	blt	r4,r2,1b48 <___vfprintf_internal_r+0x1638>
    1510:	42000204 	addi	r8,r8,8
    1514:	003e3106 	br	ddc <___vfprintf_internal_r+0x8cc>
    1518:	d9403317 	ldw	r5,204(sp)
    151c:	00800044 	movi	r2,1
    1520:	18c00044 	addi	r3,r3,1
    1524:	1141530e 	bge	r2,r5,1a74 <___vfprintf_internal_r+0x1564>
    1528:	dc401f17 	ldw	r17,124(sp)
    152c:	00800044 	movi	r2,1
    1530:	40800115 	stw	r2,4(r8)
    1534:	8c400044 	addi	r17,r17,1
    1538:	44000015 	stw	r16,0(r8)
    153c:	d8c02015 	stw	r3,128(sp)
    1540:	dc401f15 	stw	r17,124(sp)
    1544:	008001c4 	movi	r2,7
    1548:	14416b16 	blt	r2,r17,1af8 <___vfprintf_internal_r+0x15e8>
    154c:	42000204 	addi	r8,r8,8
    1550:	d8803717 	ldw	r2,220(sp)
    1554:	d9003417 	ldw	r4,208(sp)
    1558:	8c400044 	addi	r17,r17,1
    155c:	10c7883a 	add	r3,r2,r3
    1560:	40800115 	stw	r2,4(r8)
    1564:	41000015 	stw	r4,0(r8)
    1568:	d8c02015 	stw	r3,128(sp)
    156c:	dc401f15 	stw	r17,124(sp)
    1570:	008001c4 	movi	r2,7
    1574:	14416916 	blt	r2,r17,1b1c <___vfprintf_internal_r+0x160c>
    1578:	45800204 	addi	r22,r8,8
    157c:	d9003617 	ldw	r4,216(sp)
    1580:	d9403817 	ldw	r5,224(sp)
    1584:	000d883a 	mov	r6,zero
    1588:	000f883a 	mov	r7,zero
    158c:	d8c03c15 	stw	r3,240(sp)
    1590:	000b7840 	call	b784 <__eqdf2>
    1594:	d8c03c17 	ldw	r3,240(sp)
    1598:	1000bc26 	beq	r2,zero,188c <___vfprintf_internal_r+0x137c>
    159c:	d9403317 	ldw	r5,204(sp)
    15a0:	84000044 	addi	r16,r16,1
    15a4:	8c400044 	addi	r17,r17,1
    15a8:	28bfffc4 	addi	r2,r5,-1
    15ac:	1887883a 	add	r3,r3,r2
    15b0:	b0800115 	stw	r2,4(r22)
    15b4:	b4000015 	stw	r16,0(r22)
    15b8:	d8c02015 	stw	r3,128(sp)
    15bc:	dc401f15 	stw	r17,124(sp)
    15c0:	008001c4 	movi	r2,7
    15c4:	14414316 	blt	r2,r17,1ad4 <___vfprintf_internal_r+0x15c4>
    15c8:	b5800204 	addi	r22,r22,8
    15cc:	d9003a17 	ldw	r4,232(sp)
    15d0:	df0022c4 	addi	fp,sp,139
    15d4:	8c400044 	addi	r17,r17,1
    15d8:	20c7883a 	add	r3,r4,r3
    15dc:	b7000015 	stw	fp,0(r22)
    15e0:	b1000115 	stw	r4,4(r22)
    15e4:	d8c02015 	stw	r3,128(sp)
    15e8:	dc401f15 	stw	r17,124(sp)
    15ec:	008001c4 	movi	r2,7
    15f0:	14400e16 	blt	r2,r17,162c <___vfprintf_internal_r+0x111c>
    15f4:	b2000204 	addi	r8,r22,8
    15f8:	003e3a06 	br	ee4 <___vfprintf_internal_r+0x9d4>
    15fc:	01000074 	movhi	r4,1
    1600:	213e6784 	addi	r4,r4,-1634
    1604:	d9002b15 	stw	r4,172(sp)
    1608:	d9002b17 	ldw	r4,172(sp)
    160c:	1c07883a 	add	r3,r3,r16
    1610:	44000115 	stw	r16,4(r8)
    1614:	41000015 	stw	r4,0(r8)
    1618:	10800044 	addi	r2,r2,1
    161c:	d8c02015 	stw	r3,128(sp)
    1620:	d8801f15 	stw	r2,124(sp)
    1624:	010001c4 	movi	r4,7
    1628:	20be2d0e 	bge	r4,r2,ee0 <___vfprintf_internal_r+0x9d0>
    162c:	d9002c17 	ldw	r4,176(sp)
    1630:	d9801e04 	addi	r6,sp,120
    1634:	b80b883a 	mov	r5,r23
    1638:	0007b0c0 	call	7b0c <__sprint_r>
    163c:	103cb61e 	bne	r2,zero,918 <___vfprintf_internal_r+0x408>
    1640:	d8c02017 	ldw	r3,128(sp)
    1644:	da000404 	addi	r8,sp,16
    1648:	003e2606 	br	ee4 <___vfprintf_internal_r+0x9d4>
    164c:	d9002c17 	ldw	r4,176(sp)
    1650:	d9801e04 	addi	r6,sp,120
    1654:	b80b883a 	mov	r5,r23
    1658:	0007b0c0 	call	7b0c <__sprint_r>
    165c:	103e5d26 	beq	r2,zero,fd4 <___vfprintf_internal_r+0xac4>
    1660:	003cad06 	br	918 <___vfprintf_internal_r+0x408>
    1664:	d9002c17 	ldw	r4,176(sp)
    1668:	d9801e04 	addi	r6,sp,120
    166c:	b80b883a 	mov	r5,r23
    1670:	0007b0c0 	call	7b0c <__sprint_r>
    1674:	103ca81e 	bne	r2,zero,918 <___vfprintf_internal_r+0x408>
    1678:	d8c02017 	ldw	r3,128(sp)
    167c:	da000404 	addi	r8,sp,16
    1680:	003e0b06 	br	eb0 <___vfprintf_internal_r+0x9a0>
    1684:	d9002c17 	ldw	r4,176(sp)
    1688:	d9801e04 	addi	r6,sp,120
    168c:	b80b883a 	mov	r5,r23
    1690:	0007b0c0 	call	7b0c <__sprint_r>
    1694:	103ca01e 	bne	r2,zero,918 <___vfprintf_internal_r+0x408>
    1698:	d8c02017 	ldw	r3,128(sp)
    169c:	da000404 	addi	r8,sp,16
    16a0:	003dbd06 	br	d98 <___vfprintf_internal_r+0x888>
    16a4:	d9002c17 	ldw	r4,176(sp)
    16a8:	d9801e04 	addi	r6,sp,120
    16ac:	b80b883a 	mov	r5,r23
    16b0:	0007b0c0 	call	7b0c <__sprint_r>
    16b4:	103c981e 	bne	r2,zero,918 <___vfprintf_internal_r+0x408>
    16b8:	d8c02017 	ldw	r3,128(sp)
    16bc:	da000404 	addi	r8,sp,16
    16c0:	003dc306 	br	dd0 <___vfprintf_internal_r+0x8c0>
    16c4:	d8802917 	ldw	r2,164(sp)
    16c8:	d8002785 	stb	zero,158(sp)
    16cc:	103f0616 	blt	r2,zero,12e8 <___vfprintf_internal_r+0xdd8>
    16d0:	00ffdfc4 	movi	r3,-129
    16d4:	9d84b03a 	or	r2,r19,r22
    16d8:	90e4703a 	and	r18,r18,r3
    16dc:	103c6b26 	beq	r2,zero,88c <___vfprintf_internal_r+0x37c>
    16e0:	0039883a 	mov	fp,zero
    16e4:	003e7406 	br	10b8 <___vfprintf_internal_r+0xba8>
    16e8:	9080040c 	andi	r2,r18,16
    16ec:	1001b326 	beq	r2,zero,1dbc <___vfprintf_internal_r+0x18ac>
    16f0:	d9002d17 	ldw	r4,180(sp)
    16f4:	d9402917 	ldw	r5,164(sp)
    16f8:	d8002785 	stb	zero,158(sp)
    16fc:	20800104 	addi	r2,r4,4
    1700:	24c00017 	ldw	r19,0(r4)
    1704:	002d883a 	mov	r22,zero
    1708:	2801b516 	blt	r5,zero,1de0 <___vfprintf_internal_r+0x18d0>
    170c:	00ffdfc4 	movi	r3,-129
    1710:	d8802d15 	stw	r2,180(sp)
    1714:	90e4703a 	and	r18,r18,r3
    1718:	983d2726 	beq	r19,zero,bb8 <___vfprintf_internal_r+0x6a8>
    171c:	0039883a 	mov	fp,zero
    1720:	003d2a06 	br	bcc <___vfprintf_internal_r+0x6bc>
    1724:	dc402617 	ldw	r17,152(sp)
    1728:	0441d30e 	bge	zero,r17,1e78 <___vfprintf_internal_r+0x1968>
    172c:	dc403217 	ldw	r17,200(sp)
    1730:	d8803317 	ldw	r2,204(sp)
    1734:	1440010e 	bge	r2,r17,173c <___vfprintf_internal_r+0x122c>
    1738:	1023883a 	mov	r17,r2
    173c:	04400a0e 	bge	zero,r17,1768 <___vfprintf_internal_r+0x1258>
    1740:	d8801f17 	ldw	r2,124(sp)
    1744:	1c47883a 	add	r3,r3,r17
    1748:	44000015 	stw	r16,0(r8)
    174c:	10800044 	addi	r2,r2,1
    1750:	44400115 	stw	r17,4(r8)
    1754:	d8c02015 	stw	r3,128(sp)
    1758:	d8801f15 	stw	r2,124(sp)
    175c:	010001c4 	movi	r4,7
    1760:	20826516 	blt	r4,r2,20f8 <___vfprintf_internal_r+0x1be8>
    1764:	42000204 	addi	r8,r8,8
    1768:	88026116 	blt	r17,zero,20f0 <___vfprintf_internal_r+0x1be0>
    176c:	d9003217 	ldw	r4,200(sp)
    1770:	2463c83a 	sub	r17,r4,r17
    1774:	04407b0e 	bge	zero,r17,1964 <___vfprintf_internal_r+0x1454>
    1778:	05800404 	movi	r22,16
    177c:	d8801f17 	ldw	r2,124(sp)
    1780:	b4419d0e 	bge	r22,r17,1df8 <___vfprintf_internal_r+0x18e8>
    1784:	01000074 	movhi	r4,1
    1788:	213e6784 	addi	r4,r4,-1634
    178c:	d9002b15 	stw	r4,172(sp)
    1790:	070001c4 	movi	fp,7
    1794:	dcc02c17 	ldw	r19,176(sp)
    1798:	00000306 	br	17a8 <___vfprintf_internal_r+0x1298>
    179c:	42000204 	addi	r8,r8,8
    17a0:	8c7ffc04 	addi	r17,r17,-16
    17a4:	b441970e 	bge	r22,r17,1e04 <___vfprintf_internal_r+0x18f4>
    17a8:	18c00404 	addi	r3,r3,16
    17ac:	10800044 	addi	r2,r2,1
    17b0:	45000015 	stw	r20,0(r8)
    17b4:	45800115 	stw	r22,4(r8)
    17b8:	d8c02015 	stw	r3,128(sp)
    17bc:	d8801f15 	stw	r2,124(sp)
    17c0:	e0bff60e 	bge	fp,r2,179c <___vfprintf_internal_r+0x128c>
    17c4:	d9801e04 	addi	r6,sp,120
    17c8:	b80b883a 	mov	r5,r23
    17cc:	9809883a 	mov	r4,r19
    17d0:	0007b0c0 	call	7b0c <__sprint_r>
    17d4:	103c501e 	bne	r2,zero,918 <___vfprintf_internal_r+0x408>
    17d8:	d8c02017 	ldw	r3,128(sp)
    17dc:	d8801f17 	ldw	r2,124(sp)
    17e0:	da000404 	addi	r8,sp,16
    17e4:	003fee06 	br	17a0 <___vfprintf_internal_r+0x1290>
    17e8:	d9002c17 	ldw	r4,176(sp)
    17ec:	d9801e04 	addi	r6,sp,120
    17f0:	b80b883a 	mov	r5,r23
    17f4:	0007b0c0 	call	7b0c <__sprint_r>
    17f8:	103c471e 	bne	r2,zero,918 <___vfprintf_internal_r+0x408>
    17fc:	d8c02017 	ldw	r3,128(sp)
    1800:	df002787 	ldb	fp,158(sp)
    1804:	da000404 	addi	r8,sp,16
    1808:	003d5606 	br	d64 <___vfprintf_internal_r+0x854>
    180c:	9080040c 	andi	r2,r18,16
    1810:	10016126 	beq	r2,zero,1d98 <___vfprintf_internal_r+0x1888>
    1814:	d8802d17 	ldw	r2,180(sp)
    1818:	14c00017 	ldw	r19,0(r2)
    181c:	10800104 	addi	r2,r2,4
    1820:	d8802d15 	stw	r2,180(sp)
    1824:	982dd7fa 	srai	r22,r19,31
    1828:	b005883a 	mov	r2,r22
    182c:	003c8206 	br	a38 <___vfprintf_internal_r+0x528>
    1830:	9080040c 	andi	r2,r18,16
    1834:	10003526 	beq	r2,zero,190c <___vfprintf_internal_r+0x13fc>
    1838:	d9402d17 	ldw	r5,180(sp)
    183c:	d8c02917 	ldw	r3,164(sp)
    1840:	d8002785 	stb	zero,158(sp)
    1844:	28800104 	addi	r2,r5,4
    1848:	2cc00017 	ldw	r19,0(r5)
    184c:	002d883a 	mov	r22,zero
    1850:	18003716 	blt	r3,zero,1930 <___vfprintf_internal_r+0x1420>
    1854:	00ffdfc4 	movi	r3,-129
    1858:	d8802d15 	stw	r2,180(sp)
    185c:	90e4703a 	and	r18,r18,r3
    1860:	0039883a 	mov	fp,zero
    1864:	983df326 	beq	r19,zero,1034 <___vfprintf_internal_r+0xb24>
    1868:	00800244 	movi	r2,9
    186c:	14fc7b36 	bltu	r2,r19,a5c <___vfprintf_internal_r+0x54c>
    1870:	d8c02817 	ldw	r3,160(sp)
    1874:	dc001dc4 	addi	r16,sp,119
    1878:	9cc00c04 	addi	r19,r19,48
    187c:	1c07c83a 	sub	r3,r3,r16
    1880:	dcc01dc5 	stb	r19,119(sp)
    1884:	d8c02e15 	stw	r3,184(sp)
    1888:	003ce806 	br	c2c <___vfprintf_internal_r+0x71c>
    188c:	d8803317 	ldw	r2,204(sp)
    1890:	143fffc4 	addi	r16,r2,-1
    1894:	043f4d0e 	bge	zero,r16,15cc <___vfprintf_internal_r+0x10bc>
    1898:	07000404 	movi	fp,16
    189c:	e400810e 	bge	fp,r16,1aa4 <___vfprintf_internal_r+0x1594>
    18a0:	01400074 	movhi	r5,1
    18a4:	297e6784 	addi	r5,r5,-1634
    18a8:	d9402b15 	stw	r5,172(sp)
    18ac:	01c001c4 	movi	r7,7
    18b0:	dcc02c17 	ldw	r19,176(sp)
    18b4:	00000306 	br	18c4 <___vfprintf_internal_r+0x13b4>
    18b8:	b5800204 	addi	r22,r22,8
    18bc:	843ffc04 	addi	r16,r16,-16
    18c0:	e4007b0e 	bge	fp,r16,1ab0 <___vfprintf_internal_r+0x15a0>
    18c4:	18c00404 	addi	r3,r3,16
    18c8:	8c400044 	addi	r17,r17,1
    18cc:	b5000015 	stw	r20,0(r22)
    18d0:	b7000115 	stw	fp,4(r22)
    18d4:	d8c02015 	stw	r3,128(sp)
    18d8:	dc401f15 	stw	r17,124(sp)
    18dc:	3c7ff60e 	bge	r7,r17,18b8 <___vfprintf_internal_r+0x13a8>
    18e0:	d9801e04 	addi	r6,sp,120
    18e4:	b80b883a 	mov	r5,r23
    18e8:	9809883a 	mov	r4,r19
    18ec:	d9c03c15 	stw	r7,240(sp)
    18f0:	0007b0c0 	call	7b0c <__sprint_r>
    18f4:	d9c03c17 	ldw	r7,240(sp)
    18f8:	103c071e 	bne	r2,zero,918 <___vfprintf_internal_r+0x408>
    18fc:	d8c02017 	ldw	r3,128(sp)
    1900:	dc401f17 	ldw	r17,124(sp)
    1904:	dd800404 	addi	r22,sp,16
    1908:	003fec06 	br	18bc <___vfprintf_internal_r+0x13ac>
    190c:	9080100c 	andi	r2,r18,64
    1910:	d8002785 	stb	zero,158(sp)
    1914:	10010e26 	beq	r2,zero,1d50 <___vfprintf_internal_r+0x1840>
    1918:	d9002d17 	ldw	r4,180(sp)
    191c:	d9402917 	ldw	r5,164(sp)
    1920:	002d883a 	mov	r22,zero
    1924:	20800104 	addi	r2,r4,4
    1928:	24c0000b 	ldhu	r19,0(r4)
    192c:	283fc90e 	bge	r5,zero,1854 <___vfprintf_internal_r+0x1344>
    1930:	d8802d15 	stw	r2,180(sp)
    1934:	0039883a 	mov	fp,zero
    1938:	9d84b03a 	or	r2,r19,r22
    193c:	103c461e 	bne	r2,zero,a58 <___vfprintf_internal_r+0x548>
    1940:	00800044 	movi	r2,1
    1944:	003e6c06 	br	12f8 <___vfprintf_internal_r+0xde8>
    1948:	d9002c17 	ldw	r4,176(sp)
    194c:	d9801e04 	addi	r6,sp,120
    1950:	b80b883a 	mov	r5,r23
    1954:	0007b0c0 	call	7b0c <__sprint_r>
    1958:	103bef1e 	bne	r2,zero,918 <___vfprintf_internal_r+0x408>
    195c:	d8c02017 	ldw	r3,128(sp)
    1960:	da000404 	addi	r8,sp,16
    1964:	d9003217 	ldw	r4,200(sp)
    1968:	d8802617 	ldw	r2,152(sp)
    196c:	d9403317 	ldw	r5,204(sp)
    1970:	8123883a 	add	r17,r16,r4
    1974:	11400216 	blt	r2,r5,1980 <___vfprintf_internal_r+0x1470>
    1978:	9100004c 	andi	r4,r18,1
    197c:	20000d26 	beq	r4,zero,19b4 <___vfprintf_internal_r+0x14a4>
    1980:	d9003717 	ldw	r4,220(sp)
    1984:	d9403417 	ldw	r5,208(sp)
    1988:	1907883a 	add	r3,r3,r4
    198c:	d9001f17 	ldw	r4,124(sp)
    1990:	41400015 	stw	r5,0(r8)
    1994:	d9403717 	ldw	r5,220(sp)
    1998:	21000044 	addi	r4,r4,1
    199c:	d8c02015 	stw	r3,128(sp)
    19a0:	41400115 	stw	r5,4(r8)
    19a4:	d9001f15 	stw	r4,124(sp)
    19a8:	014001c4 	movi	r5,7
    19ac:	2901e816 	blt	r5,r4,2150 <___vfprintf_internal_r+0x1c40>
    19b0:	42000204 	addi	r8,r8,8
    19b4:	d9003317 	ldw	r4,204(sp)
    19b8:	8121883a 	add	r16,r16,r4
    19bc:	2085c83a 	sub	r2,r4,r2
    19c0:	8461c83a 	sub	r16,r16,r17
    19c4:	1400010e 	bge	r2,r16,19cc <___vfprintf_internal_r+0x14bc>
    19c8:	1021883a 	mov	r16,r2
    19cc:	04000a0e 	bge	zero,r16,19f8 <___vfprintf_internal_r+0x14e8>
    19d0:	d9001f17 	ldw	r4,124(sp)
    19d4:	1c07883a 	add	r3,r3,r16
    19d8:	44400015 	stw	r17,0(r8)
    19dc:	21000044 	addi	r4,r4,1
    19e0:	44000115 	stw	r16,4(r8)
    19e4:	d8c02015 	stw	r3,128(sp)
    19e8:	d9001f15 	stw	r4,124(sp)
    19ec:	014001c4 	movi	r5,7
    19f0:	2901fb16 	blt	r5,r4,21e0 <___vfprintf_internal_r+0x1cd0>
    19f4:	42000204 	addi	r8,r8,8
    19f8:	8001f716 	blt	r16,zero,21d8 <___vfprintf_internal_r+0x1cc8>
    19fc:	1421c83a 	sub	r16,r2,r16
    1a00:	043d380e 	bge	zero,r16,ee4 <___vfprintf_internal_r+0x9d4>
    1a04:	04400404 	movi	r17,16
    1a08:	d8801f17 	ldw	r2,124(sp)
    1a0c:	8c3efb0e 	bge	r17,r16,15fc <___vfprintf_internal_r+0x10ec>
    1a10:	01400074 	movhi	r5,1
    1a14:	297e6784 	addi	r5,r5,-1634
    1a18:	d9402b15 	stw	r5,172(sp)
    1a1c:	058001c4 	movi	r22,7
    1a20:	dcc02c17 	ldw	r19,176(sp)
    1a24:	00000306 	br	1a34 <___vfprintf_internal_r+0x1524>
    1a28:	42000204 	addi	r8,r8,8
    1a2c:	843ffc04 	addi	r16,r16,-16
    1a30:	8c3ef50e 	bge	r17,r16,1608 <___vfprintf_internal_r+0x10f8>
    1a34:	18c00404 	addi	r3,r3,16
    1a38:	10800044 	addi	r2,r2,1
    1a3c:	45000015 	stw	r20,0(r8)
    1a40:	44400115 	stw	r17,4(r8)
    1a44:	d8c02015 	stw	r3,128(sp)
    1a48:	d8801f15 	stw	r2,124(sp)
    1a4c:	b0bff60e 	bge	r22,r2,1a28 <___vfprintf_internal_r+0x1518>
    1a50:	d9801e04 	addi	r6,sp,120
    1a54:	b80b883a 	mov	r5,r23
    1a58:	9809883a 	mov	r4,r19
    1a5c:	0007b0c0 	call	7b0c <__sprint_r>
    1a60:	103bad1e 	bne	r2,zero,918 <___vfprintf_internal_r+0x408>
    1a64:	d8c02017 	ldw	r3,128(sp)
    1a68:	d8801f17 	ldw	r2,124(sp)
    1a6c:	da000404 	addi	r8,sp,16
    1a70:	003fee06 	br	1a2c <___vfprintf_internal_r+0x151c>
    1a74:	9088703a 	and	r4,r18,r2
    1a78:	203eab1e 	bne	r4,zero,1528 <___vfprintf_internal_r+0x1018>
    1a7c:	dc401f17 	ldw	r17,124(sp)
    1a80:	40800115 	stw	r2,4(r8)
    1a84:	44000015 	stw	r16,0(r8)
    1a88:	8c400044 	addi	r17,r17,1
    1a8c:	d8c02015 	stw	r3,128(sp)
    1a90:	dc401f15 	stw	r17,124(sp)
    1a94:	008001c4 	movi	r2,7
    1a98:	14400e16 	blt	r2,r17,1ad4 <___vfprintf_internal_r+0x15c4>
    1a9c:	45800204 	addi	r22,r8,8
    1aa0:	003eca06 	br	15cc <___vfprintf_internal_r+0x10bc>
    1aa4:	01000074 	movhi	r4,1
    1aa8:	213e6784 	addi	r4,r4,-1634
    1aac:	d9002b15 	stw	r4,172(sp)
    1ab0:	d8802b17 	ldw	r2,172(sp)
    1ab4:	1c07883a 	add	r3,r3,r16
    1ab8:	8c400044 	addi	r17,r17,1
    1abc:	b0800015 	stw	r2,0(r22)
    1ac0:	b4000115 	stw	r16,4(r22)
    1ac4:	d8c02015 	stw	r3,128(sp)
    1ac8:	dc401f15 	stw	r17,124(sp)
    1acc:	008001c4 	movi	r2,7
    1ad0:	147ebd0e 	bge	r2,r17,15c8 <___vfprintf_internal_r+0x10b8>
    1ad4:	d9002c17 	ldw	r4,176(sp)
    1ad8:	d9801e04 	addi	r6,sp,120
    1adc:	b80b883a 	mov	r5,r23
    1ae0:	0007b0c0 	call	7b0c <__sprint_r>
    1ae4:	103b8c1e 	bne	r2,zero,918 <___vfprintf_internal_r+0x408>
    1ae8:	d8c02017 	ldw	r3,128(sp)
    1aec:	dc401f17 	ldw	r17,124(sp)
    1af0:	dd800404 	addi	r22,sp,16
    1af4:	003eb506 	br	15cc <___vfprintf_internal_r+0x10bc>
    1af8:	d9002c17 	ldw	r4,176(sp)
    1afc:	d9801e04 	addi	r6,sp,120
    1b00:	b80b883a 	mov	r5,r23
    1b04:	0007b0c0 	call	7b0c <__sprint_r>
    1b08:	103b831e 	bne	r2,zero,918 <___vfprintf_internal_r+0x408>
    1b0c:	d8c02017 	ldw	r3,128(sp)
    1b10:	dc401f17 	ldw	r17,124(sp)
    1b14:	da000404 	addi	r8,sp,16
    1b18:	003e8d06 	br	1550 <___vfprintf_internal_r+0x1040>
    1b1c:	d9002c17 	ldw	r4,176(sp)
    1b20:	d9801e04 	addi	r6,sp,120
    1b24:	b80b883a 	mov	r5,r23
    1b28:	0007b0c0 	call	7b0c <__sprint_r>
    1b2c:	103b7a1e 	bne	r2,zero,918 <___vfprintf_internal_r+0x408>
    1b30:	d8c02017 	ldw	r3,128(sp)
    1b34:	dc401f17 	ldw	r17,124(sp)
    1b38:	dd800404 	addi	r22,sp,16
    1b3c:	003e8f06 	br	157c <___vfprintf_internal_r+0x106c>
    1b40:	0027883a 	mov	r19,zero
    1b44:	003f4a06 	br	1870 <___vfprintf_internal_r+0x1360>
    1b48:	d9002c17 	ldw	r4,176(sp)
    1b4c:	d9801e04 	addi	r6,sp,120
    1b50:	b80b883a 	mov	r5,r23
    1b54:	0007b0c0 	call	7b0c <__sprint_r>
    1b58:	103b6f1e 	bne	r2,zero,918 <___vfprintf_internal_r+0x408>
    1b5c:	d8c02017 	ldw	r3,128(sp)
    1b60:	da000404 	addi	r8,sp,16
    1b64:	003c9d06 	br	ddc <___vfprintf_internal_r+0x8cc>
    1b68:	04e7c83a 	sub	r19,zero,r19
    1b6c:	9804c03a 	cmpne	r2,r19,zero
    1b70:	05adc83a 	sub	r22,zero,r22
    1b74:	b0adc83a 	sub	r22,r22,r2
    1b78:	d8802917 	ldw	r2,164(sp)
    1b7c:	07000b44 	movi	fp,45
    1b80:	df002785 	stb	fp,158(sp)
    1b84:	10017b16 	blt	r2,zero,2174 <___vfprintf_internal_r+0x1c64>
    1b88:	00bfdfc4 	movi	r2,-129
    1b8c:	90a4703a 	and	r18,r18,r2
    1b90:	003bb106 	br	a58 <___vfprintf_internal_r+0x548>
    1b94:	d9003617 	ldw	r4,216(sp)
    1b98:	d9403817 	ldw	r5,224(sp)
    1b9c:	da003d15 	stw	r8,244(sp)
    1ba0:	00077300 	call	7730 <__fpclassifyd>
    1ba4:	da003d17 	ldw	r8,244(sp)
    1ba8:	1000f026 	beq	r2,zero,1f6c <___vfprintf_internal_r+0x1a5c>
    1bac:	d9002917 	ldw	r4,164(sp)
    1bb0:	05bff7c4 	movi	r22,-33
    1bb4:	00bfffc4 	movi	r2,-1
    1bb8:	8dac703a 	and	r22,r17,r22
    1bbc:	20820026 	beq	r4,r2,23c0 <___vfprintf_internal_r+0x1eb0>
    1bc0:	008011c4 	movi	r2,71
    1bc4:	b081f726 	beq	r22,r2,23a4 <___vfprintf_internal_r+0x1e94>
    1bc8:	d9003817 	ldw	r4,224(sp)
    1bcc:	90c04014 	ori	r3,r18,256
    1bd0:	d8c02b15 	stw	r3,172(sp)
    1bd4:	20021516 	blt	r4,zero,242c <___vfprintf_internal_r+0x1f1c>
    1bd8:	dcc03817 	ldw	r19,224(sp)
    1bdc:	d8002a05 	stb	zero,168(sp)
    1be0:	00801984 	movi	r2,102
    1be4:	8881f926 	beq	r17,r2,23cc <___vfprintf_internal_r+0x1ebc>
    1be8:	00801184 	movi	r2,70
    1bec:	88821c26 	beq	r17,r2,2460 <___vfprintf_internal_r+0x1f50>
    1bf0:	00801144 	movi	r2,69
    1bf4:	b081ef26 	beq	r22,r2,23b4 <___vfprintf_internal_r+0x1ea4>
    1bf8:	d8c02917 	ldw	r3,164(sp)
    1bfc:	d8802104 	addi	r2,sp,132
    1c00:	d8800315 	stw	r2,12(sp)
    1c04:	d9403617 	ldw	r5,216(sp)
    1c08:	d8802504 	addi	r2,sp,148
    1c0c:	d9002c17 	ldw	r4,176(sp)
    1c10:	d8800215 	stw	r2,8(sp)
    1c14:	d8802604 	addi	r2,sp,152
    1c18:	d8c00015 	stw	r3,0(sp)
    1c1c:	d8800115 	stw	r2,4(sp)
    1c20:	01c00084 	movi	r7,2
    1c24:	980d883a 	mov	r6,r19
    1c28:	d8c03c15 	stw	r3,240(sp)
    1c2c:	da003d15 	stw	r8,244(sp)
    1c30:	0002b340 	call	2b34 <_dtoa_r>
    1c34:	1021883a 	mov	r16,r2
    1c38:	008019c4 	movi	r2,103
    1c3c:	d8c03c17 	ldw	r3,240(sp)
    1c40:	da003d17 	ldw	r8,244(sp)
    1c44:	88817126 	beq	r17,r2,220c <___vfprintf_internal_r+0x1cfc>
    1c48:	008011c4 	movi	r2,71
    1c4c:	88829226 	beq	r17,r2,2698 <___vfprintf_internal_r+0x2188>
    1c50:	80f9883a 	add	fp,r16,r3
    1c54:	d9003617 	ldw	r4,216(sp)
    1c58:	000d883a 	mov	r6,zero
    1c5c:	000f883a 	mov	r7,zero
    1c60:	980b883a 	mov	r5,r19
    1c64:	da003d15 	stw	r8,244(sp)
    1c68:	000b7840 	call	b784 <__eqdf2>
    1c6c:	da003d17 	ldw	r8,244(sp)
    1c70:	10018d26 	beq	r2,zero,22a8 <___vfprintf_internal_r+0x1d98>
    1c74:	d8802117 	ldw	r2,132(sp)
    1c78:	1700062e 	bgeu	r2,fp,1c94 <___vfprintf_internal_r+0x1784>
    1c7c:	01000c04 	movi	r4,48
    1c80:	10c00044 	addi	r3,r2,1
    1c84:	d8c02115 	stw	r3,132(sp)
    1c88:	11000005 	stb	r4,0(r2)
    1c8c:	d8802117 	ldw	r2,132(sp)
    1c90:	173ffb36 	bltu	r2,fp,1c80 <___vfprintf_internal_r+0x1770>
    1c94:	1405c83a 	sub	r2,r2,r16
    1c98:	d8803315 	stw	r2,204(sp)
    1c9c:	008011c4 	movi	r2,71
    1ca0:	b0817626 	beq	r22,r2,227c <___vfprintf_internal_r+0x1d6c>
    1ca4:	00801944 	movi	r2,101
    1ca8:	1442810e 	bge	r2,r17,26b0 <___vfprintf_internal_r+0x21a0>
    1cac:	d8c02617 	ldw	r3,152(sp)
    1cb0:	00801984 	movi	r2,102
    1cb4:	d8c03215 	stw	r3,200(sp)
    1cb8:	8881fe26 	beq	r17,r2,24b4 <___vfprintf_internal_r+0x1fa4>
    1cbc:	d8c03217 	ldw	r3,200(sp)
    1cc0:	d9003317 	ldw	r4,204(sp)
    1cc4:	1901dd16 	blt	r3,r4,243c <___vfprintf_internal_r+0x1f2c>
    1cc8:	9480004c 	andi	r18,r18,1
    1ccc:	90022b1e 	bne	r18,zero,257c <___vfprintf_internal_r+0x206c>
    1cd0:	1805883a 	mov	r2,r3
    1cd4:	18028016 	blt	r3,zero,26d8 <___vfprintf_internal_r+0x21c8>
    1cd8:	d8c03217 	ldw	r3,200(sp)
    1cdc:	044019c4 	movi	r17,103
    1ce0:	d8c02e15 	stw	r3,184(sp)
    1ce4:	df002a07 	ldb	fp,168(sp)
    1ce8:	e001531e 	bne	fp,zero,2238 <___vfprintf_internal_r+0x1d28>
    1cec:	df002783 	ldbu	fp,158(sp)
    1cf0:	d8802a15 	stw	r2,168(sp)
    1cf4:	dc802b17 	ldw	r18,172(sp)
    1cf8:	d8002915 	stw	zero,164(sp)
    1cfc:	003bd106 	br	c44 <___vfprintf_internal_r+0x734>
    1d00:	d8802d17 	ldw	r2,180(sp)
    1d04:	d8c02d17 	ldw	r3,180(sp)
    1d08:	d9002d17 	ldw	r4,180(sp)
    1d0c:	10800017 	ldw	r2,0(r2)
    1d10:	18c00117 	ldw	r3,4(r3)
    1d14:	21000204 	addi	r4,r4,8
    1d18:	d8803615 	stw	r2,216(sp)
    1d1c:	d8c03815 	stw	r3,224(sp)
    1d20:	d9002d15 	stw	r4,180(sp)
    1d24:	003b7506 	br	afc <___vfprintf_internal_r+0x5ec>
    1d28:	ac400007 	ldb	r17,0(r21)
    1d2c:	003a5906 	br	694 <___vfprintf_internal_r+0x184>
    1d30:	9080100c 	andi	r2,r18,64
    1d34:	1000a826 	beq	r2,zero,1fd8 <___vfprintf_internal_r+0x1ac8>
    1d38:	d9002d17 	ldw	r4,180(sp)
    1d3c:	002d883a 	mov	r22,zero
    1d40:	24c0000b 	ldhu	r19,0(r4)
    1d44:	21000104 	addi	r4,r4,4
    1d48:	d9002d15 	stw	r4,180(sp)
    1d4c:	003ccb06 	br	107c <___vfprintf_internal_r+0xb6c>
    1d50:	d8c02d17 	ldw	r3,180(sp)
    1d54:	d9002917 	ldw	r4,164(sp)
    1d58:	002d883a 	mov	r22,zero
    1d5c:	18800104 	addi	r2,r3,4
    1d60:	1cc00017 	ldw	r19,0(r3)
    1d64:	203ebb0e 	bge	r4,zero,1854 <___vfprintf_internal_r+0x1344>
    1d68:	003ef106 	br	1930 <___vfprintf_internal_r+0x1420>
    1d6c:	9080040c 	andi	r2,r18,16
    1d70:	1000921e 	bne	r2,zero,1fbc <___vfprintf_internal_r+0x1aac>
    1d74:	9480100c 	andi	r18,r18,64
    1d78:	90013926 	beq	r18,zero,2260 <___vfprintf_internal_r+0x1d50>
    1d7c:	d9002d17 	ldw	r4,180(sp)
    1d80:	d9402f17 	ldw	r5,188(sp)
    1d84:	20800017 	ldw	r2,0(r4)
    1d88:	21000104 	addi	r4,r4,4
    1d8c:	d9002d15 	stw	r4,180(sp)
    1d90:	1140000d 	sth	r5,0(r2)
    1d94:	003a1606 	br	5f0 <___vfprintf_internal_r+0xe0>
    1d98:	9080100c 	andi	r2,r18,64
    1d9c:	10008026 	beq	r2,zero,1fa0 <___vfprintf_internal_r+0x1a90>
    1da0:	d8c02d17 	ldw	r3,180(sp)
    1da4:	1cc0000f 	ldh	r19,0(r3)
    1da8:	18c00104 	addi	r3,r3,4
    1dac:	d8c02d15 	stw	r3,180(sp)
    1db0:	982dd7fa 	srai	r22,r19,31
    1db4:	b005883a 	mov	r2,r22
    1db8:	003b1f06 	br	a38 <___vfprintf_internal_r+0x528>
    1dbc:	9080100c 	andi	r2,r18,64
    1dc0:	d8002785 	stb	zero,158(sp)
    1dc4:	10008a1e 	bne	r2,zero,1ff0 <___vfprintf_internal_r+0x1ae0>
    1dc8:	d9402d17 	ldw	r5,180(sp)
    1dcc:	d8c02917 	ldw	r3,164(sp)
    1dd0:	002d883a 	mov	r22,zero
    1dd4:	28800104 	addi	r2,r5,4
    1dd8:	2cc00017 	ldw	r19,0(r5)
    1ddc:	183e4b0e 	bge	r3,zero,170c <___vfprintf_internal_r+0x11fc>
    1de0:	9d86b03a 	or	r3,r19,r22
    1de4:	d8802d15 	stw	r2,180(sp)
    1de8:	183e4c1e 	bne	r3,zero,171c <___vfprintf_internal_r+0x120c>
    1dec:	0039883a 	mov	fp,zero
    1df0:	0005883a 	mov	r2,zero
    1df4:	003d4006 	br	12f8 <___vfprintf_internal_r+0xde8>
    1df8:	01400074 	movhi	r5,1
    1dfc:	297e6784 	addi	r5,r5,-1634
    1e00:	d9402b15 	stw	r5,172(sp)
    1e04:	d9402b17 	ldw	r5,172(sp)
    1e08:	1c47883a 	add	r3,r3,r17
    1e0c:	10800044 	addi	r2,r2,1
    1e10:	41400015 	stw	r5,0(r8)
    1e14:	44400115 	stw	r17,4(r8)
    1e18:	d8c02015 	stw	r3,128(sp)
    1e1c:	d8801f15 	stw	r2,124(sp)
    1e20:	010001c4 	movi	r4,7
    1e24:	20bec816 	blt	r4,r2,1948 <___vfprintf_internal_r+0x1438>
    1e28:	42000204 	addi	r8,r8,8
    1e2c:	003ecd06 	br	1964 <___vfprintf_internal_r+0x1454>
    1e30:	d9002917 	ldw	r4,164(sp)
    1e34:	d8002785 	stb	zero,158(sp)
    1e38:	203d2d16 	blt	r4,zero,12f0 <___vfprintf_internal_r+0xde0>
    1e3c:	00bfdfc4 	movi	r2,-129
    1e40:	90a4703a 	and	r18,r18,r2
    1e44:	003a9106 	br	88c <___vfprintf_internal_r+0x37c>
    1e48:	01000074 	movhi	r4,1
    1e4c:	213e6784 	addi	r4,r4,-1634
    1e50:	d9002b15 	stw	r4,172(sp)
    1e54:	003c0c06 	br	e88 <___vfprintf_internal_r+0x978>
    1e58:	d9002c17 	ldw	r4,176(sp)
    1e5c:	d9801e04 	addi	r6,sp,120
    1e60:	b80b883a 	mov	r5,r23
    1e64:	0007b0c0 	call	7b0c <__sprint_r>
    1e68:	103aab1e 	bne	r2,zero,918 <___vfprintf_internal_r+0x408>
    1e6c:	d8c02017 	ldw	r3,128(sp)
    1e70:	da000404 	addi	r8,sp,16
    1e74:	003d4106 	br	137c <___vfprintf_internal_r+0xe6c>
    1e78:	d8801f17 	ldw	r2,124(sp)
    1e7c:	01400074 	movhi	r5,1
    1e80:	01000044 	movi	r4,1
    1e84:	18c00044 	addi	r3,r3,1
    1e88:	10800044 	addi	r2,r2,1
    1e8c:	297e6704 	addi	r5,r5,-1636
    1e90:	41000115 	stw	r4,4(r8)
    1e94:	41400015 	stw	r5,0(r8)
    1e98:	d8c02015 	stw	r3,128(sp)
    1e9c:	d8801f15 	stw	r2,124(sp)
    1ea0:	010001c4 	movi	r4,7
    1ea4:	20805c16 	blt	r4,r2,2018 <___vfprintf_internal_r+0x1b08>
    1ea8:	42000204 	addi	r8,r8,8
    1eac:	8800041e 	bne	r17,zero,1ec0 <___vfprintf_internal_r+0x19b0>
    1eb0:	d8803317 	ldw	r2,204(sp)
    1eb4:	1000021e 	bne	r2,zero,1ec0 <___vfprintf_internal_r+0x19b0>
    1eb8:	9080004c 	andi	r2,r18,1
    1ebc:	103c0926 	beq	r2,zero,ee4 <___vfprintf_internal_r+0x9d4>
    1ec0:	d9003717 	ldw	r4,220(sp)
    1ec4:	d8801f17 	ldw	r2,124(sp)
    1ec8:	d9403417 	ldw	r5,208(sp)
    1ecc:	20c7883a 	add	r3,r4,r3
    1ed0:	10800044 	addi	r2,r2,1
    1ed4:	41000115 	stw	r4,4(r8)
    1ed8:	41400015 	stw	r5,0(r8)
    1edc:	d8c02015 	stw	r3,128(sp)
    1ee0:	d8801f15 	stw	r2,124(sp)
    1ee4:	010001c4 	movi	r4,7
    1ee8:	20812116 	blt	r4,r2,2370 <___vfprintf_internal_r+0x1e60>
    1eec:	42000204 	addi	r8,r8,8
    1ef0:	0463c83a 	sub	r17,zero,r17
    1ef4:	0440730e 	bge	zero,r17,20c4 <___vfprintf_internal_r+0x1bb4>
    1ef8:	05800404 	movi	r22,16
    1efc:	b440860e 	bge	r22,r17,2118 <___vfprintf_internal_r+0x1c08>
    1f00:	01400074 	movhi	r5,1
    1f04:	297e6784 	addi	r5,r5,-1634
    1f08:	d9402b15 	stw	r5,172(sp)
    1f0c:	070001c4 	movi	fp,7
    1f10:	dcc02c17 	ldw	r19,176(sp)
    1f14:	00000306 	br	1f24 <___vfprintf_internal_r+0x1a14>
    1f18:	42000204 	addi	r8,r8,8
    1f1c:	8c7ffc04 	addi	r17,r17,-16
    1f20:	b440800e 	bge	r22,r17,2124 <___vfprintf_internal_r+0x1c14>
    1f24:	18c00404 	addi	r3,r3,16
    1f28:	10800044 	addi	r2,r2,1
    1f2c:	45000015 	stw	r20,0(r8)
    1f30:	45800115 	stw	r22,4(r8)
    1f34:	d8c02015 	stw	r3,128(sp)
    1f38:	d8801f15 	stw	r2,124(sp)
    1f3c:	e0bff60e 	bge	fp,r2,1f18 <___vfprintf_internal_r+0x1a08>
    1f40:	d9801e04 	addi	r6,sp,120
    1f44:	b80b883a 	mov	r5,r23
    1f48:	9809883a 	mov	r4,r19
    1f4c:	0007b0c0 	call	7b0c <__sprint_r>
    1f50:	103a711e 	bne	r2,zero,918 <___vfprintf_internal_r+0x408>
    1f54:	d8c02017 	ldw	r3,128(sp)
    1f58:	d8801f17 	ldw	r2,124(sp)
    1f5c:	da000404 	addi	r8,sp,16
    1f60:	003fee06 	br	1f1c <___vfprintf_internal_r+0x1a0c>
    1f64:	00bfffc4 	movi	r2,-1
    1f68:	003a6f06 	br	928 <___vfprintf_internal_r+0x418>
    1f6c:	008011c4 	movi	r2,71
    1f70:	1440b816 	blt	r2,r17,2254 <___vfprintf_internal_r+0x1d44>
    1f74:	04000074 	movhi	r16,1
    1f78:	843e5904 	addi	r16,r16,-1692
    1f7c:	00c000c4 	movi	r3,3
    1f80:	00bfdfc4 	movi	r2,-129
    1f84:	d8c02a15 	stw	r3,168(sp)
    1f88:	90a4703a 	and	r18,r18,r2
    1f8c:	df002783 	ldbu	fp,158(sp)
    1f90:	d8c02e15 	stw	r3,184(sp)
    1f94:	d8002915 	stw	zero,164(sp)
    1f98:	d8003215 	stw	zero,200(sp)
    1f9c:	003b2906 	br	c44 <___vfprintf_internal_r+0x734>
    1fa0:	d9002d17 	ldw	r4,180(sp)
    1fa4:	24c00017 	ldw	r19,0(r4)
    1fa8:	21000104 	addi	r4,r4,4
    1fac:	d9002d15 	stw	r4,180(sp)
    1fb0:	982dd7fa 	srai	r22,r19,31
    1fb4:	b005883a 	mov	r2,r22
    1fb8:	003a9f06 	br	a38 <___vfprintf_internal_r+0x528>
    1fbc:	d9402d17 	ldw	r5,180(sp)
    1fc0:	d8c02f17 	ldw	r3,188(sp)
    1fc4:	28800017 	ldw	r2,0(r5)
    1fc8:	29400104 	addi	r5,r5,4
    1fcc:	d9402d15 	stw	r5,180(sp)
    1fd0:	10c00015 	stw	r3,0(r2)
    1fd4:	00398606 	br	5f0 <___vfprintf_internal_r+0xe0>
    1fd8:	d9402d17 	ldw	r5,180(sp)
    1fdc:	002d883a 	mov	r22,zero
    1fe0:	2cc00017 	ldw	r19,0(r5)
    1fe4:	29400104 	addi	r5,r5,4
    1fe8:	d9402d15 	stw	r5,180(sp)
    1fec:	003c2306 	br	107c <___vfprintf_internal_r+0xb6c>
    1ff0:	d8c02d17 	ldw	r3,180(sp)
    1ff4:	d9002917 	ldw	r4,164(sp)
    1ff8:	002d883a 	mov	r22,zero
    1ffc:	18800104 	addi	r2,r3,4
    2000:	1cc0000b 	ldhu	r19,0(r3)
    2004:	203dc10e 	bge	r4,zero,170c <___vfprintf_internal_r+0x11fc>
    2008:	003f7506 	br	1de0 <___vfprintf_internal_r+0x18d0>
    200c:	04000074 	movhi	r16,1
    2010:	843e5704 	addi	r16,r16,-1700
    2014:	003acc06 	br	b48 <___vfprintf_internal_r+0x638>
    2018:	d9002c17 	ldw	r4,176(sp)
    201c:	d9801e04 	addi	r6,sp,120
    2020:	b80b883a 	mov	r5,r23
    2024:	0007b0c0 	call	7b0c <__sprint_r>
    2028:	103a3b1e 	bne	r2,zero,918 <___vfprintf_internal_r+0x408>
    202c:	dc402617 	ldw	r17,152(sp)
    2030:	d8c02017 	ldw	r3,128(sp)
    2034:	da000404 	addi	r8,sp,16
    2038:	003f9c06 	br	1eac <___vfprintf_internal_r+0x199c>
    203c:	ac400043 	ldbu	r17,1(r21)
    2040:	94800814 	ori	r18,r18,32
    2044:	ad400044 	addi	r21,r21,1
    2048:	8c403fcc 	andi	r17,r17,255
    204c:	8c40201c 	xori	r17,r17,128
    2050:	8c7fe004 	addi	r17,r17,-128
    2054:	00398f06 	br	694 <___vfprintf_internal_r+0x184>
    2058:	d8c02d15 	stw	r3,180(sp)
    205c:	0039883a 	mov	fp,zero
    2060:	003e3506 	br	1938 <___vfprintf_internal_r+0x1428>
    2064:	d9002c17 	ldw	r4,176(sp)
    2068:	d9801e04 	addi	r6,sp,120
    206c:	b80b883a 	mov	r5,r23
    2070:	0007b0c0 	call	7b0c <__sprint_r>
    2074:	103a281e 	bne	r2,zero,918 <___vfprintf_internal_r+0x408>
    2078:	d8c02017 	ldw	r3,128(sp)
    207c:	da000404 	addi	r8,sp,16
    2080:	003cd006 	br	13c4 <___vfprintf_internal_r+0xeb4>
    2084:	8009883a 	mov	r4,r16
    2088:	da003d15 	stw	r8,244(sp)
    208c:	00004780 	call	478 <strlen>
    2090:	d8802e15 	stw	r2,184(sp)
    2094:	da003d17 	ldw	r8,244(sp)
    2098:	103c340e 	bge	r2,zero,116c <___vfprintf_internal_r+0xc5c>
    209c:	0005883a 	mov	r2,zero
    20a0:	003c3206 	br	116c <___vfprintf_internal_r+0xc5c>
    20a4:	d9002c17 	ldw	r4,176(sp)
    20a8:	d9801e04 	addi	r6,sp,120
    20ac:	b80b883a 	mov	r5,r23
    20b0:	0007b0c0 	call	7b0c <__sprint_r>
    20b4:	103a181e 	bne	r2,zero,918 <___vfprintf_internal_r+0x408>
    20b8:	d8c02017 	ldw	r3,128(sp)
    20bc:	d8801f17 	ldw	r2,124(sp)
    20c0:	da000404 	addi	r8,sp,16
    20c4:	d9403317 	ldw	r5,204(sp)
    20c8:	10800044 	addi	r2,r2,1
    20cc:	44000015 	stw	r16,0(r8)
    20d0:	28c7883a 	add	r3,r5,r3
    20d4:	003b7d06 	br	ecc <___vfprintf_internal_r+0x9bc>
    20d8:	01000074 	movhi	r4,1
    20dc:	213e6b84 	addi	r4,r4,-1618
    20e0:	d9003515 	stw	r4,212(sp)
    20e4:	003b1406 	br	d38 <___vfprintf_internal_r+0x828>
    20e8:	013fffc4 	movi	r4,-1
    20ec:	003a3506 	br	9c4 <___vfprintf_internal_r+0x4b4>
    20f0:	0023883a 	mov	r17,zero
    20f4:	003d9d06 	br	176c <___vfprintf_internal_r+0x125c>
    20f8:	d9002c17 	ldw	r4,176(sp)
    20fc:	d9801e04 	addi	r6,sp,120
    2100:	b80b883a 	mov	r5,r23
    2104:	0007b0c0 	call	7b0c <__sprint_r>
    2108:	103a031e 	bne	r2,zero,918 <___vfprintf_internal_r+0x408>
    210c:	d8c02017 	ldw	r3,128(sp)
    2110:	da000404 	addi	r8,sp,16
    2114:	003d9406 	br	1768 <___vfprintf_internal_r+0x1258>
    2118:	01000074 	movhi	r4,1
    211c:	213e6784 	addi	r4,r4,-1634
    2120:	d9002b15 	stw	r4,172(sp)
    2124:	d9002b17 	ldw	r4,172(sp)
    2128:	1c47883a 	add	r3,r3,r17
    212c:	10800044 	addi	r2,r2,1
    2130:	41000015 	stw	r4,0(r8)
    2134:	44400115 	stw	r17,4(r8)
    2138:	d8c02015 	stw	r3,128(sp)
    213c:	d8801f15 	stw	r2,124(sp)
    2140:	010001c4 	movi	r4,7
    2144:	20bfd716 	blt	r4,r2,20a4 <___vfprintf_internal_r+0x1b94>
    2148:	42000204 	addi	r8,r8,8
    214c:	003fdd06 	br	20c4 <___vfprintf_internal_r+0x1bb4>
    2150:	d9002c17 	ldw	r4,176(sp)
    2154:	d9801e04 	addi	r6,sp,120
    2158:	b80b883a 	mov	r5,r23
    215c:	0007b0c0 	call	7b0c <__sprint_r>
    2160:	1039ed1e 	bne	r2,zero,918 <___vfprintf_internal_r+0x408>
    2164:	d8802617 	ldw	r2,152(sp)
    2168:	d8c02017 	ldw	r3,128(sp)
    216c:	da000404 	addi	r8,sp,16
    2170:	003e1006 	br	19b4 <___vfprintf_internal_r+0x14a4>
    2174:	00800044 	movi	r2,1
    2178:	10803fcc 	andi	r2,r2,255
    217c:	00c00044 	movi	r3,1
    2180:	10fa3526 	beq	r2,r3,a58 <___vfprintf_internal_r+0x548>
    2184:	00c00084 	movi	r3,2
    2188:	10fbcb26 	beq	r2,r3,10b8 <___vfprintf_internal_r+0xba8>
    218c:	003a8f06 	br	bcc <___vfprintf_internal_r+0x6bc>
    2190:	01000074 	movhi	r4,1
    2194:	213e6b84 	addi	r4,r4,-1618
    2198:	d9003515 	stw	r4,212(sp)
    219c:	003b7606 	br	f78 <___vfprintf_internal_r+0xa68>
    21a0:	d8802917 	ldw	r2,164(sp)
    21a4:	00c00184 	movi	r3,6
    21a8:	1880012e 	bgeu	r3,r2,21b0 <___vfprintf_internal_r+0x1ca0>
    21ac:	1805883a 	mov	r2,r3
    21b0:	d8802e15 	stw	r2,184(sp)
    21b4:	1000ef16 	blt	r2,zero,2574 <___vfprintf_internal_r+0x2064>
    21b8:	04000074 	movhi	r16,1
    21bc:	d8802a15 	stw	r2,168(sp)
    21c0:	dcc02d15 	stw	r19,180(sp)
    21c4:	d8002915 	stw	zero,164(sp)
    21c8:	d8003215 	stw	zero,200(sp)
    21cc:	843e6504 	addi	r16,r16,-1644
    21d0:	0039883a 	mov	fp,zero
    21d4:	003aa206 	br	c60 <___vfprintf_internal_r+0x750>
    21d8:	0021883a 	mov	r16,zero
    21dc:	003e0706 	br	19fc <___vfprintf_internal_r+0x14ec>
    21e0:	d9002c17 	ldw	r4,176(sp)
    21e4:	d9801e04 	addi	r6,sp,120
    21e8:	b80b883a 	mov	r5,r23
    21ec:	0007b0c0 	call	7b0c <__sprint_r>
    21f0:	1039c91e 	bne	r2,zero,918 <___vfprintf_internal_r+0x408>
    21f4:	d8802617 	ldw	r2,152(sp)
    21f8:	d9403317 	ldw	r5,204(sp)
    21fc:	d8c02017 	ldw	r3,128(sp)
    2200:	da000404 	addi	r8,sp,16
    2204:	2885c83a 	sub	r2,r5,r2
    2208:	003dfb06 	br	19f8 <___vfprintf_internal_r+0x14e8>
    220c:	9080004c 	andi	r2,r18,1
    2210:	103e8f1e 	bne	r2,zero,1c50 <___vfprintf_internal_r+0x1740>
    2214:	d8802117 	ldw	r2,132(sp)
    2218:	003e9e06 	br	1c94 <___vfprintf_internal_r+0x1784>
    221c:	1025883a 	mov	r18,r2
    2220:	0039883a 	mov	fp,zero
    2224:	00800084 	movi	r2,2
    2228:	003fd306 	br	2178 <___vfprintf_internal_r+0x1c68>
    222c:	07000b44 	movi	fp,45
    2230:	df002785 	stb	fp,158(sp)
    2234:	003a4006 	br	b38 <___vfprintf_internal_r+0x628>
    2238:	00c00b44 	movi	r3,45
    223c:	d8c02785 	stb	r3,158(sp)
    2240:	d8802a15 	stw	r2,168(sp)
    2244:	dc802b17 	ldw	r18,172(sp)
    2248:	d8002915 	stw	zero,164(sp)
    224c:	07000b44 	movi	fp,45
    2250:	003a8006 	br	c54 <___vfprintf_internal_r+0x744>
    2254:	04000074 	movhi	r16,1
    2258:	843e5a04 	addi	r16,r16,-1688
    225c:	003f4706 	br	1f7c <___vfprintf_internal_r+0x1a6c>
    2260:	d8c02d17 	ldw	r3,180(sp)
    2264:	d9002f17 	ldw	r4,188(sp)
    2268:	18800017 	ldw	r2,0(r3)
    226c:	18c00104 	addi	r3,r3,4
    2270:	d8c02d15 	stw	r3,180(sp)
    2274:	11000015 	stw	r4,0(r2)
    2278:	0038dd06 	br	5f0 <___vfprintf_internal_r+0xe0>
    227c:	dd802617 	ldw	r22,152(sp)
    2280:	00bfff44 	movi	r2,-3
    2284:	b0801c16 	blt	r22,r2,22f8 <___vfprintf_internal_r+0x1de8>
    2288:	d9402917 	ldw	r5,164(sp)
    228c:	2d801a16 	blt	r5,r22,22f8 <___vfprintf_internal_r+0x1de8>
    2290:	dd803215 	stw	r22,200(sp)
    2294:	003e8906 	br	1cbc <___vfprintf_internal_r+0x17ac>
    2298:	01000074 	movhi	r4,1
    229c:	213e6784 	addi	r4,r4,-1634
    22a0:	d9002b15 	stw	r4,172(sp)
    22a4:	003c9106 	br	14ec <___vfprintf_internal_r+0xfdc>
    22a8:	e005883a 	mov	r2,fp
    22ac:	003e7906 	br	1c94 <___vfprintf_internal_r+0x1784>
    22b0:	d9402917 	ldw	r5,164(sp)
    22b4:	df002783 	ldbu	fp,158(sp)
    22b8:	dcc02d15 	stw	r19,180(sp)
    22bc:	d9402a15 	stw	r5,168(sp)
    22c0:	d9402e15 	stw	r5,184(sp)
    22c4:	d8002915 	stw	zero,164(sp)
    22c8:	d8003215 	stw	zero,200(sp)
    22cc:	003a5d06 	br	c44 <___vfprintf_internal_r+0x734>
    22d0:	9080004c 	andi	r2,r18,1
    22d4:	0039883a 	mov	fp,zero
    22d8:	10000426 	beq	r2,zero,22ec <___vfprintf_internal_r+0x1ddc>
    22dc:	00800c04 	movi	r2,48
    22e0:	dc001dc4 	addi	r16,sp,119
    22e4:	d8801dc5 	stb	r2,119(sp)
    22e8:	003b8006 	br	10ec <___vfprintf_internal_r+0xbdc>
    22ec:	d8002e15 	stw	zero,184(sp)
    22f0:	dc001e04 	addi	r16,sp,120
    22f4:	003a4d06 	br	c2c <___vfprintf_internal_r+0x71c>
    22f8:	8c7fff84 	addi	r17,r17,-2
    22fc:	b5bfffc4 	addi	r22,r22,-1
    2300:	dd802615 	stw	r22,152(sp)
    2304:	dc4022c5 	stb	r17,139(sp)
    2308:	b000bf16 	blt	r22,zero,2608 <___vfprintf_internal_r+0x20f8>
    230c:	00800ac4 	movi	r2,43
    2310:	d8802305 	stb	r2,140(sp)
    2314:	00800244 	movi	r2,9
    2318:	15807016 	blt	r2,r22,24dc <___vfprintf_internal_r+0x1fcc>
    231c:	00800c04 	movi	r2,48
    2320:	b5800c04 	addi	r22,r22,48
    2324:	d8802345 	stb	r2,141(sp)
    2328:	dd802385 	stb	r22,142(sp)
    232c:	d88023c4 	addi	r2,sp,143
    2330:	df0022c4 	addi	fp,sp,139
    2334:	d8c03317 	ldw	r3,204(sp)
    2338:	1739c83a 	sub	fp,r2,fp
    233c:	d9003317 	ldw	r4,204(sp)
    2340:	e0c7883a 	add	r3,fp,r3
    2344:	df003a15 	stw	fp,232(sp)
    2348:	d8c02e15 	stw	r3,184(sp)
    234c:	00800044 	movi	r2,1
    2350:	1100b30e 	bge	r2,r4,2620 <___vfprintf_internal_r+0x2110>
    2354:	d8c02e17 	ldw	r3,184(sp)
    2358:	18c00044 	addi	r3,r3,1
    235c:	d8c02e15 	stw	r3,184(sp)
    2360:	1805883a 	mov	r2,r3
    2364:	1800ac16 	blt	r3,zero,2618 <___vfprintf_internal_r+0x2108>
    2368:	d8003215 	stw	zero,200(sp)
    236c:	003e5d06 	br	1ce4 <___vfprintf_internal_r+0x17d4>
    2370:	d9002c17 	ldw	r4,176(sp)
    2374:	d9801e04 	addi	r6,sp,120
    2378:	b80b883a 	mov	r5,r23
    237c:	0007b0c0 	call	7b0c <__sprint_r>
    2380:	1039651e 	bne	r2,zero,918 <___vfprintf_internal_r+0x408>
    2384:	dc402617 	ldw	r17,152(sp)
    2388:	d8c02017 	ldw	r3,128(sp)
    238c:	d8801f17 	ldw	r2,124(sp)
    2390:	da000404 	addi	r8,sp,16
    2394:	003ed606 	br	1ef0 <___vfprintf_internal_r+0x19e0>
    2398:	582b883a 	mov	r21,r11
    239c:	d8002915 	stw	zero,164(sp)
    23a0:	0038bd06 	br	698 <___vfprintf_internal_r+0x188>
    23a4:	d8802917 	ldw	r2,164(sp)
    23a8:	103e071e 	bne	r2,zero,1bc8 <___vfprintf_internal_r+0x16b8>
    23ac:	dc002915 	stw	r16,164(sp)
    23b0:	003e0506 	br	1bc8 <___vfprintf_internal_r+0x16b8>
    23b4:	d9002917 	ldw	r4,164(sp)
    23b8:	20c00044 	addi	r3,r4,1
    23bc:	003e0f06 	br	1bfc <___vfprintf_internal_r+0x16ec>
    23c0:	01400184 	movi	r5,6
    23c4:	d9402915 	stw	r5,164(sp)
    23c8:	003dff06 	br	1bc8 <___vfprintf_internal_r+0x16b8>
    23cc:	d8802104 	addi	r2,sp,132
    23d0:	d8800315 	stw	r2,12(sp)
    23d4:	d8802504 	addi	r2,sp,148
    23d8:	d8800215 	stw	r2,8(sp)
    23dc:	d8802604 	addi	r2,sp,152
    23e0:	d8800115 	stw	r2,4(sp)
    23e4:	d8802917 	ldw	r2,164(sp)
    23e8:	d9403617 	ldw	r5,216(sp)
    23ec:	d9002c17 	ldw	r4,176(sp)
    23f0:	d8800015 	stw	r2,0(sp)
    23f4:	01c000c4 	movi	r7,3
    23f8:	980d883a 	mov	r6,r19
    23fc:	da003d15 	stw	r8,244(sp)
    2400:	0002b340 	call	2b34 <_dtoa_r>
    2404:	d8c02917 	ldw	r3,164(sp)
    2408:	da003d17 	ldw	r8,244(sp)
    240c:	1021883a 	mov	r16,r2
    2410:	10f9883a 	add	fp,r2,r3
    2414:	81000007 	ldb	r4,0(r16)
    2418:	00800c04 	movi	r2,48
    241c:	20805e26 	beq	r4,r2,2598 <___vfprintf_internal_r+0x2088>
    2420:	d8c02617 	ldw	r3,152(sp)
    2424:	e0f9883a 	add	fp,fp,r3
    2428:	003e0a06 	br	1c54 <___vfprintf_internal_r+0x1744>
    242c:	00c00b44 	movi	r3,45
    2430:	24e0003c 	xorhi	r19,r4,32768
    2434:	d8c02a05 	stb	r3,168(sp)
    2438:	003de906 	br	1be0 <___vfprintf_internal_r+0x16d0>
    243c:	d8c03217 	ldw	r3,200(sp)
    2440:	00c07a0e 	bge	zero,r3,262c <___vfprintf_internal_r+0x211c>
    2444:	00800044 	movi	r2,1
    2448:	d9003317 	ldw	r4,204(sp)
    244c:	1105883a 	add	r2,r2,r4
    2450:	d8802e15 	stw	r2,184(sp)
    2454:	10004e16 	blt	r2,zero,2590 <___vfprintf_internal_r+0x2080>
    2458:	044019c4 	movi	r17,103
    245c:	003e2106 	br	1ce4 <___vfprintf_internal_r+0x17d4>
    2460:	d9002917 	ldw	r4,164(sp)
    2464:	d8802104 	addi	r2,sp,132
    2468:	d8800315 	stw	r2,12(sp)
    246c:	d9000015 	stw	r4,0(sp)
    2470:	d8802504 	addi	r2,sp,148
    2474:	d9403617 	ldw	r5,216(sp)
    2478:	d9002c17 	ldw	r4,176(sp)
    247c:	d8800215 	stw	r2,8(sp)
    2480:	d8802604 	addi	r2,sp,152
    2484:	d8800115 	stw	r2,4(sp)
    2488:	01c000c4 	movi	r7,3
    248c:	980d883a 	mov	r6,r19
    2490:	da003d15 	stw	r8,244(sp)
    2494:	0002b340 	call	2b34 <_dtoa_r>
    2498:	d8c02917 	ldw	r3,164(sp)
    249c:	da003d17 	ldw	r8,244(sp)
    24a0:	1021883a 	mov	r16,r2
    24a4:	00801184 	movi	r2,70
    24a8:	80f9883a 	add	fp,r16,r3
    24ac:	88bfd926 	beq	r17,r2,2414 <___vfprintf_internal_r+0x1f04>
    24b0:	003de806 	br	1c54 <___vfprintf_internal_r+0x1744>
    24b4:	d9002917 	ldw	r4,164(sp)
    24b8:	00c04d0e 	bge	zero,r3,25f0 <___vfprintf_internal_r+0x20e0>
    24bc:	2000441e 	bne	r4,zero,25d0 <___vfprintf_internal_r+0x20c0>
    24c0:	9480004c 	andi	r18,r18,1
    24c4:	9000421e 	bne	r18,zero,25d0 <___vfprintf_internal_r+0x20c0>
    24c8:	1805883a 	mov	r2,r3
    24cc:	18007016 	blt	r3,zero,2690 <___vfprintf_internal_r+0x2180>
    24d0:	d8c03217 	ldw	r3,200(sp)
    24d4:	d8c02e15 	stw	r3,184(sp)
    24d8:	003e0206 	br	1ce4 <___vfprintf_internal_r+0x17d4>
    24dc:	df0022c4 	addi	fp,sp,139
    24e0:	dc002915 	stw	r16,164(sp)
    24e4:	4027883a 	mov	r19,r8
    24e8:	e021883a 	mov	r16,fp
    24ec:	b009883a 	mov	r4,r22
    24f0:	01400284 	movi	r5,10
    24f4:	000a4c00 	call	a4c0 <__modsi3>
    24f8:	10800c04 	addi	r2,r2,48
    24fc:	843fffc4 	addi	r16,r16,-1
    2500:	b009883a 	mov	r4,r22
    2504:	01400284 	movi	r5,10
    2508:	80800005 	stb	r2,0(r16)
    250c:	000a43c0 	call	a43c <__divsi3>
    2510:	102d883a 	mov	r22,r2
    2514:	00800244 	movi	r2,9
    2518:	15bff416 	blt	r2,r22,24ec <___vfprintf_internal_r+0x1fdc>
    251c:	9811883a 	mov	r8,r19
    2520:	b0800c04 	addi	r2,r22,48
    2524:	8027883a 	mov	r19,r16
    2528:	997fffc4 	addi	r5,r19,-1
    252c:	98bfffc5 	stb	r2,-1(r19)
    2530:	dc002917 	ldw	r16,164(sp)
    2534:	2f006a2e 	bgeu	r5,fp,26e0 <___vfprintf_internal_r+0x21d0>
    2538:	d9c02384 	addi	r7,sp,142
    253c:	3ccfc83a 	sub	r7,r7,r19
    2540:	d9002344 	addi	r4,sp,141
    2544:	e1cf883a 	add	r7,fp,r7
    2548:	00000106 	br	2550 <___vfprintf_internal_r+0x2040>
    254c:	28800003 	ldbu	r2,0(r5)
    2550:	20800005 	stb	r2,0(r4)
    2554:	21000044 	addi	r4,r4,1
    2558:	29400044 	addi	r5,r5,1
    255c:	393ffb1e 	bne	r7,r4,254c <___vfprintf_internal_r+0x203c>
    2560:	d8802304 	addi	r2,sp,140
    2564:	14c5c83a 	sub	r2,r2,r19
    2568:	d8c02344 	addi	r3,sp,141
    256c:	1885883a 	add	r2,r3,r2
    2570:	003f7006 	br	2334 <___vfprintf_internal_r+0x1e24>
    2574:	0005883a 	mov	r2,zero
    2578:	003f0f06 	br	21b8 <___vfprintf_internal_r+0x1ca8>
    257c:	d8c03217 	ldw	r3,200(sp)
    2580:	18c00044 	addi	r3,r3,1
    2584:	d8c02e15 	stw	r3,184(sp)
    2588:	1805883a 	mov	r2,r3
    258c:	183fb20e 	bge	r3,zero,2458 <___vfprintf_internal_r+0x1f48>
    2590:	0005883a 	mov	r2,zero
    2594:	003fb006 	br	2458 <___vfprintf_internal_r+0x1f48>
    2598:	d9003617 	ldw	r4,216(sp)
    259c:	000d883a 	mov	r6,zero
    25a0:	000f883a 	mov	r7,zero
    25a4:	980b883a 	mov	r5,r19
    25a8:	d8c03c15 	stw	r3,240(sp)
    25ac:	da003d15 	stw	r8,244(sp)
    25b0:	000b7840 	call	b784 <__eqdf2>
    25b4:	d8c03c17 	ldw	r3,240(sp)
    25b8:	da003d17 	ldw	r8,244(sp)
    25bc:	103f9826 	beq	r2,zero,2420 <___vfprintf_internal_r+0x1f10>
    25c0:	00800044 	movi	r2,1
    25c4:	10c7c83a 	sub	r3,r2,r3
    25c8:	d8c02615 	stw	r3,152(sp)
    25cc:	003f9506 	br	2424 <___vfprintf_internal_r+0x1f14>
    25d0:	d9002917 	ldw	r4,164(sp)
    25d4:	d8c03217 	ldw	r3,200(sp)
    25d8:	20800044 	addi	r2,r4,1
    25dc:	1885883a 	add	r2,r3,r2
    25e0:	d8802e15 	stw	r2,184(sp)
    25e4:	103dbf0e 	bge	r2,zero,1ce4 <___vfprintf_internal_r+0x17d4>
    25e8:	0005883a 	mov	r2,zero
    25ec:	003dbd06 	br	1ce4 <___vfprintf_internal_r+0x17d4>
    25f0:	2000211e 	bne	r4,zero,2678 <___vfprintf_internal_r+0x2168>
    25f4:	9480004c 	andi	r18,r18,1
    25f8:	90001f1e 	bne	r18,zero,2678 <___vfprintf_internal_r+0x2168>
    25fc:	00800044 	movi	r2,1
    2600:	d8802e15 	stw	r2,184(sp)
    2604:	003db706 	br	1ce4 <___vfprintf_internal_r+0x17d4>
    2608:	00800b44 	movi	r2,45
    260c:	05adc83a 	sub	r22,zero,r22
    2610:	d8802305 	stb	r2,140(sp)
    2614:	003f3f06 	br	2314 <___vfprintf_internal_r+0x1e04>
    2618:	0005883a 	mov	r2,zero
    261c:	003f5206 	br	2368 <___vfprintf_internal_r+0x1e58>
    2620:	90a4703a 	and	r18,r18,r2
    2624:	903f4e26 	beq	r18,zero,2360 <___vfprintf_internal_r+0x1e50>
    2628:	003f4a06 	br	2354 <___vfprintf_internal_r+0x1e44>
    262c:	00800084 	movi	r2,2
    2630:	10c5c83a 	sub	r2,r2,r3
    2634:	003f8406 	br	2448 <___vfprintf_internal_r+0x1f38>
    2638:	d8802d17 	ldw	r2,180(sp)
    263c:	d9002d17 	ldw	r4,180(sp)
    2640:	ac400043 	ldbu	r17,1(r21)
    2644:	10800017 	ldw	r2,0(r2)
    2648:	582b883a 	mov	r21,r11
    264c:	d8802915 	stw	r2,164(sp)
    2650:	20800104 	addi	r2,r4,4
    2654:	d9002917 	ldw	r4,164(sp)
    2658:	d8802d15 	stw	r2,180(sp)
    265c:	203e7a0e 	bge	r4,zero,2048 <___vfprintf_internal_r+0x1b38>
    2660:	8c403fcc 	andi	r17,r17,255
    2664:	00bfffc4 	movi	r2,-1
    2668:	8c40201c 	xori	r17,r17,128
    266c:	d8802915 	stw	r2,164(sp)
    2670:	8c7fe004 	addi	r17,r17,-128
    2674:	00380706 	br	694 <___vfprintf_internal_r+0x184>
    2678:	d8c02917 	ldw	r3,164(sp)
    267c:	18c00084 	addi	r3,r3,2
    2680:	d8c02e15 	stw	r3,184(sp)
    2684:	1805883a 	mov	r2,r3
    2688:	183d960e 	bge	r3,zero,1ce4 <___vfprintf_internal_r+0x17d4>
    268c:	003fd606 	br	25e8 <___vfprintf_internal_r+0x20d8>
    2690:	0005883a 	mov	r2,zero
    2694:	003f8e06 	br	24d0 <___vfprintf_internal_r+0x1fc0>
    2698:	9080004c 	andi	r2,r18,1
    269c:	103f811e 	bne	r2,zero,24a4 <___vfprintf_internal_r+0x1f94>
    26a0:	d8802117 	ldw	r2,132(sp)
    26a4:	1405c83a 	sub	r2,r2,r16
    26a8:	d8803315 	stw	r2,204(sp)
    26ac:	b47ef326 	beq	r22,r17,227c <___vfprintf_internal_r+0x1d6c>
    26b0:	dd802617 	ldw	r22,152(sp)
    26b4:	003f1106 	br	22fc <___vfprintf_internal_r+0x1dec>
    26b8:	d9c02785 	stb	r7,158(sp)
    26bc:	00390406 	br	ad0 <___vfprintf_internal_r+0x5c0>
    26c0:	d9c02785 	stb	r7,158(sp)
    26c4:	0038d306 	br	a14 <___vfprintf_internal_r+0x504>
    26c8:	d9c02785 	stb	r7,158(sp)
    26cc:	003a6106 	br	1054 <___vfprintf_internal_r+0xb44>
    26d0:	d9c02785 	stb	r7,158(sp)
    26d4:	003af806 	br	12b8 <___vfprintf_internal_r+0xda8>
    26d8:	0005883a 	mov	r2,zero
    26dc:	003d7e06 	br	1cd8 <___vfprintf_internal_r+0x17c8>
    26e0:	d8802344 	addi	r2,sp,141
    26e4:	003f1306 	br	2334 <___vfprintf_internal_r+0x1e24>
    26e8:	d9c02785 	stb	r7,158(sp)
    26ec:	00392306 	br	b7c <___vfprintf_internal_r+0x66c>
    26f0:	d9c02785 	stb	r7,158(sp)
    26f4:	003aa906 	br	119c <___vfprintf_internal_r+0xc8c>
    26f8:	d9c02785 	stb	r7,158(sp)
    26fc:	003a3d06 	br	ff4 <___vfprintf_internal_r+0xae4>
    2700:	d9c02785 	stb	r7,158(sp)
    2704:	003aca06 	br	1230 <___vfprintf_internal_r+0xd20>

00002708 <__vfprintf_internal>:
    2708:	00800074 	movhi	r2,1
    270c:	1085cd04 	addi	r2,r2,5940
    2710:	300f883a 	mov	r7,r6
    2714:	280d883a 	mov	r6,r5
    2718:	200b883a 	mov	r5,r4
    271c:	11000017 	ldw	r4,0(r2)
    2720:	00005101 	jmpi	510 <___vfprintf_internal_r>

00002724 <__sbprintf>:
    2724:	2880030b 	ldhu	r2,12(r5)
    2728:	2ac01917 	ldw	r11,100(r5)
    272c:	2a80038b 	ldhu	r10,14(r5)
    2730:	2a400717 	ldw	r9,28(r5)
    2734:	2a000917 	ldw	r8,36(r5)
    2738:	defee204 	addi	sp,sp,-1144
    273c:	00c10004 	movi	r3,1024
    2740:	dc011a15 	stw	r16,1128(sp)
    2744:	10bfff4c 	andi	r2,r2,65533
    2748:	2821883a 	mov	r16,r5
    274c:	d8cb883a 	add	r5,sp,r3
    2750:	dc811c15 	stw	r18,1136(sp)
    2754:	dc411b15 	stw	r17,1132(sp)
    2758:	dfc11d15 	stw	ra,1140(sp)
    275c:	2025883a 	mov	r18,r4
    2760:	d881030d 	sth	r2,1036(sp)
    2764:	dac11915 	stw	r11,1124(sp)
    2768:	da81038d 	sth	r10,1038(sp)
    276c:	da410715 	stw	r9,1052(sp)
    2770:	da010915 	stw	r8,1060(sp)
    2774:	dec10015 	stw	sp,1024(sp)
    2778:	dec10415 	stw	sp,1040(sp)
    277c:	d8c10215 	stw	r3,1032(sp)
    2780:	d8c10515 	stw	r3,1044(sp)
    2784:	d8010615 	stw	zero,1048(sp)
    2788:	00005100 	call	510 <___vfprintf_internal_r>
    278c:	1023883a 	mov	r17,r2
    2790:	10000416 	blt	r2,zero,27a4 <__sbprintf+0x80>
    2794:	d9410004 	addi	r5,sp,1024
    2798:	9009883a 	mov	r4,r18
    279c:	00043d80 	call	43d8 <_fflush_r>
    27a0:	10000d1e 	bne	r2,zero,27d8 <__sbprintf+0xb4>
    27a4:	d881030b 	ldhu	r2,1036(sp)
    27a8:	1080100c 	andi	r2,r2,64
    27ac:	10000326 	beq	r2,zero,27bc <__sbprintf+0x98>
    27b0:	8080030b 	ldhu	r2,12(r16)
    27b4:	10801014 	ori	r2,r2,64
    27b8:	8080030d 	sth	r2,12(r16)
    27bc:	8805883a 	mov	r2,r17
    27c0:	dfc11d17 	ldw	ra,1140(sp)
    27c4:	dc811c17 	ldw	r18,1136(sp)
    27c8:	dc411b17 	ldw	r17,1132(sp)
    27cc:	dc011a17 	ldw	r16,1128(sp)
    27d0:	dec11e04 	addi	sp,sp,1144
    27d4:	f800283a 	ret
    27d8:	047fffc4 	movi	r17,-1
    27dc:	003ff106 	br	27a4 <__sbprintf+0x80>

000027e0 <__swsetup_r>:
    27e0:	00800074 	movhi	r2,1
    27e4:	defffd04 	addi	sp,sp,-12
    27e8:	1085cd04 	addi	r2,r2,5940
    27ec:	dc400115 	stw	r17,4(sp)
    27f0:	2023883a 	mov	r17,r4
    27f4:	11000017 	ldw	r4,0(r2)
    27f8:	dc000015 	stw	r16,0(sp)
    27fc:	dfc00215 	stw	ra,8(sp)
    2800:	2821883a 	mov	r16,r5
    2804:	20000226 	beq	r4,zero,2810 <__swsetup_r+0x30>
    2808:	20800e17 	ldw	r2,56(r4)
    280c:	10003126 	beq	r2,zero,28d4 <__swsetup_r+0xf4>
    2810:	8080030b 	ldhu	r2,12(r16)
    2814:	10c0020c 	andi	r3,r2,8
    2818:	1009883a 	mov	r4,r2
    281c:	18000f26 	beq	r3,zero,285c <__swsetup_r+0x7c>
    2820:	80c00417 	ldw	r3,16(r16)
    2824:	18001526 	beq	r3,zero,287c <__swsetup_r+0x9c>
    2828:	1100004c 	andi	r4,r2,1
    282c:	20001c1e 	bne	r4,zero,28a0 <__swsetup_r+0xc0>
    2830:	1080008c 	andi	r2,r2,2
    2834:	1000291e 	bne	r2,zero,28dc <__swsetup_r+0xfc>
    2838:	80800517 	ldw	r2,20(r16)
    283c:	80800215 	stw	r2,8(r16)
    2840:	18001c26 	beq	r3,zero,28b4 <__swsetup_r+0xd4>
    2844:	0005883a 	mov	r2,zero
    2848:	dfc00217 	ldw	ra,8(sp)
    284c:	dc400117 	ldw	r17,4(sp)
    2850:	dc000017 	ldw	r16,0(sp)
    2854:	dec00304 	addi	sp,sp,12
    2858:	f800283a 	ret
    285c:	2080040c 	andi	r2,r4,16
    2860:	10002e26 	beq	r2,zero,291c <__swsetup_r+0x13c>
    2864:	2080010c 	andi	r2,r4,4
    2868:	10001e1e 	bne	r2,zero,28e4 <__swsetup_r+0x104>
    286c:	80c00417 	ldw	r3,16(r16)
    2870:	20800214 	ori	r2,r4,8
    2874:	8080030d 	sth	r2,12(r16)
    2878:	183feb1e 	bne	r3,zero,2828 <__swsetup_r+0x48>
    287c:	1100a00c 	andi	r4,r2,640
    2880:	01408004 	movi	r5,512
    2884:	217fe826 	beq	r4,r5,2828 <__swsetup_r+0x48>
    2888:	800b883a 	mov	r5,r16
    288c:	8809883a 	mov	r4,r17
    2890:	00053580 	call	5358 <__smakebuf_r>
    2894:	8080030b 	ldhu	r2,12(r16)
    2898:	80c00417 	ldw	r3,16(r16)
    289c:	003fe206 	br	2828 <__swsetup_r+0x48>
    28a0:	80800517 	ldw	r2,20(r16)
    28a4:	80000215 	stw	zero,8(r16)
    28a8:	0085c83a 	sub	r2,zero,r2
    28ac:	80800615 	stw	r2,24(r16)
    28b0:	183fe41e 	bne	r3,zero,2844 <__swsetup_r+0x64>
    28b4:	80c0030b 	ldhu	r3,12(r16)
    28b8:	0005883a 	mov	r2,zero
    28bc:	1900200c 	andi	r4,r3,128
    28c0:	203fe126 	beq	r4,zero,2848 <__swsetup_r+0x68>
    28c4:	18c01014 	ori	r3,r3,64
    28c8:	80c0030d 	sth	r3,12(r16)
    28cc:	00bfffc4 	movi	r2,-1
    28d0:	003fdd06 	br	2848 <__swsetup_r+0x68>
    28d4:	00047b40 	call	47b4 <__sinit>
    28d8:	003fcd06 	br	2810 <__swsetup_r+0x30>
    28dc:	0005883a 	mov	r2,zero
    28e0:	003fd606 	br	283c <__swsetup_r+0x5c>
    28e4:	81400c17 	ldw	r5,48(r16)
    28e8:	28000626 	beq	r5,zero,2904 <__swsetup_r+0x124>
    28ec:	80801004 	addi	r2,r16,64
    28f0:	28800326 	beq	r5,r2,2900 <__swsetup_r+0x120>
    28f4:	8809883a 	mov	r4,r17
    28f8:	00049280 	call	4928 <_free_r>
    28fc:	8100030b 	ldhu	r4,12(r16)
    2900:	80000c15 	stw	zero,48(r16)
    2904:	80c00417 	ldw	r3,16(r16)
    2908:	00bff6c4 	movi	r2,-37
    290c:	1108703a 	and	r4,r2,r4
    2910:	80000115 	stw	zero,4(r16)
    2914:	80c00015 	stw	r3,0(r16)
    2918:	003fd506 	br	2870 <__swsetup_r+0x90>
    291c:	00800244 	movi	r2,9
    2920:	88800015 	stw	r2,0(r17)
    2924:	20801014 	ori	r2,r4,64
    2928:	8080030d 	sth	r2,12(r16)
    292c:	00bfffc4 	movi	r2,-1
    2930:	003fc506 	br	2848 <__swsetup_r+0x68>

00002934 <quorem>:
    2934:	defff704 	addi	sp,sp,-36
    2938:	dc800215 	stw	r18,8(sp)
    293c:	20800417 	ldw	r2,16(r4)
    2940:	2c800417 	ldw	r18,16(r5)
    2944:	dfc00815 	stw	ra,32(sp)
    2948:	ddc00715 	stw	r23,28(sp)
    294c:	dd800615 	stw	r22,24(sp)
    2950:	dd400515 	stw	r21,20(sp)
    2954:	dd000415 	stw	r20,16(sp)
    2958:	dcc00315 	stw	r19,12(sp)
    295c:	dc400115 	stw	r17,4(sp)
    2960:	dc000015 	stw	r16,0(sp)
    2964:	14807116 	blt	r2,r18,2b2c <quorem+0x1f8>
    2968:	94bfffc4 	addi	r18,r18,-1
    296c:	94ad883a 	add	r22,r18,r18
    2970:	b5ad883a 	add	r22,r22,r22
    2974:	2c400504 	addi	r17,r5,20
    2978:	8da9883a 	add	r20,r17,r22
    297c:	25400504 	addi	r21,r4,20
    2980:	282f883a 	mov	r23,r5
    2984:	adad883a 	add	r22,r21,r22
    2988:	a1400017 	ldw	r5,0(r20)
    298c:	2021883a 	mov	r16,r4
    2990:	b1000017 	ldw	r4,0(r22)
    2994:	29400044 	addi	r5,r5,1
    2998:	000a5340 	call	a534 <__udivsi3>
    299c:	1027883a 	mov	r19,r2
    29a0:	10002c26 	beq	r2,zero,2a54 <quorem+0x120>
    29a4:	a813883a 	mov	r9,r21
    29a8:	880b883a 	mov	r5,r17
    29ac:	0009883a 	mov	r4,zero
    29b0:	000d883a 	mov	r6,zero
    29b4:	2a000017 	ldw	r8,0(r5)
    29b8:	49c00017 	ldw	r7,0(r9)
    29bc:	29400104 	addi	r5,r5,4
    29c0:	40bfffcc 	andi	r2,r8,65535
    29c4:	14c5383a 	mul	r2,r2,r19
    29c8:	4010d43a 	srli	r8,r8,16
    29cc:	38ffffcc 	andi	r3,r7,65535
    29d0:	1105883a 	add	r2,r2,r4
    29d4:	1008d43a 	srli	r4,r2,16
    29d8:	44d1383a 	mul	r8,r8,r19
    29dc:	198d883a 	add	r6,r3,r6
    29e0:	10ffffcc 	andi	r3,r2,65535
    29e4:	30c7c83a 	sub	r3,r6,r3
    29e8:	380ed43a 	srli	r7,r7,16
    29ec:	4105883a 	add	r2,r8,r4
    29f0:	180dd43a 	srai	r6,r3,16
    29f4:	113fffcc 	andi	r4,r2,65535
    29f8:	390fc83a 	sub	r7,r7,r4
    29fc:	398d883a 	add	r6,r7,r6
    2a00:	300e943a 	slli	r7,r6,16
    2a04:	18ffffcc 	andi	r3,r3,65535
    2a08:	1008d43a 	srli	r4,r2,16
    2a0c:	38ceb03a 	or	r7,r7,r3
    2a10:	49c00015 	stw	r7,0(r9)
    2a14:	300dd43a 	srai	r6,r6,16
    2a18:	4a400104 	addi	r9,r9,4
    2a1c:	a17fe52e 	bgeu	r20,r5,29b4 <quorem+0x80>
    2a20:	b0800017 	ldw	r2,0(r22)
    2a24:	10000b1e 	bne	r2,zero,2a54 <quorem+0x120>
    2a28:	b0bfff04 	addi	r2,r22,-4
    2a2c:	a880082e 	bgeu	r21,r2,2a50 <quorem+0x11c>
    2a30:	b0ffff17 	ldw	r3,-4(r22)
    2a34:	18000326 	beq	r3,zero,2a44 <quorem+0x110>
    2a38:	00000506 	br	2a50 <quorem+0x11c>
    2a3c:	10c00017 	ldw	r3,0(r2)
    2a40:	1800031e 	bne	r3,zero,2a50 <quorem+0x11c>
    2a44:	10bfff04 	addi	r2,r2,-4
    2a48:	94bfffc4 	addi	r18,r18,-1
    2a4c:	a8bffb36 	bltu	r21,r2,2a3c <quorem+0x108>
    2a50:	84800415 	stw	r18,16(r16)
    2a54:	b80b883a 	mov	r5,r23
    2a58:	8009883a 	mov	r4,r16
    2a5c:	0006a980 	call	6a98 <__mcmp>
    2a60:	10002616 	blt	r2,zero,2afc <quorem+0x1c8>
    2a64:	9cc00044 	addi	r19,r19,1
    2a68:	a805883a 	mov	r2,r21
    2a6c:	000b883a 	mov	r5,zero
    2a70:	11000017 	ldw	r4,0(r2)
    2a74:	89800017 	ldw	r6,0(r17)
    2a78:	10800104 	addi	r2,r2,4
    2a7c:	20ffffcc 	andi	r3,r4,65535
    2a80:	194b883a 	add	r5,r3,r5
    2a84:	30ffffcc 	andi	r3,r6,65535
    2a88:	28c7c83a 	sub	r3,r5,r3
    2a8c:	300cd43a 	srli	r6,r6,16
    2a90:	2008d43a 	srli	r4,r4,16
    2a94:	180bd43a 	srai	r5,r3,16
    2a98:	18ffffcc 	andi	r3,r3,65535
    2a9c:	2189c83a 	sub	r4,r4,r6
    2aa0:	2149883a 	add	r4,r4,r5
    2aa4:	200c943a 	slli	r6,r4,16
    2aa8:	8c400104 	addi	r17,r17,4
    2aac:	200bd43a 	srai	r5,r4,16
    2ab0:	30c6b03a 	or	r3,r6,r3
    2ab4:	10ffff15 	stw	r3,-4(r2)
    2ab8:	a47fed2e 	bgeu	r20,r17,2a70 <quorem+0x13c>
    2abc:	9485883a 	add	r2,r18,r18
    2ac0:	1085883a 	add	r2,r2,r2
    2ac4:	a887883a 	add	r3,r21,r2
    2ac8:	18800017 	ldw	r2,0(r3)
    2acc:	10000b1e 	bne	r2,zero,2afc <quorem+0x1c8>
    2ad0:	18bfff04 	addi	r2,r3,-4
    2ad4:	a880082e 	bgeu	r21,r2,2af8 <quorem+0x1c4>
    2ad8:	18ffff17 	ldw	r3,-4(r3)
    2adc:	18000326 	beq	r3,zero,2aec <quorem+0x1b8>
    2ae0:	00000506 	br	2af8 <quorem+0x1c4>
    2ae4:	10c00017 	ldw	r3,0(r2)
    2ae8:	1800031e 	bne	r3,zero,2af8 <quorem+0x1c4>
    2aec:	10bfff04 	addi	r2,r2,-4
    2af0:	94bfffc4 	addi	r18,r18,-1
    2af4:	a8bffb36 	bltu	r21,r2,2ae4 <quorem+0x1b0>
    2af8:	84800415 	stw	r18,16(r16)
    2afc:	9805883a 	mov	r2,r19
    2b00:	dfc00817 	ldw	ra,32(sp)
    2b04:	ddc00717 	ldw	r23,28(sp)
    2b08:	dd800617 	ldw	r22,24(sp)
    2b0c:	dd400517 	ldw	r21,20(sp)
    2b10:	dd000417 	ldw	r20,16(sp)
    2b14:	dcc00317 	ldw	r19,12(sp)
    2b18:	dc800217 	ldw	r18,8(sp)
    2b1c:	dc400117 	ldw	r17,4(sp)
    2b20:	dc000017 	ldw	r16,0(sp)
    2b24:	dec00904 	addi	sp,sp,36
    2b28:	f800283a 	ret
    2b2c:	0005883a 	mov	r2,zero
    2b30:	003ff306 	br	2b00 <quorem+0x1cc>

00002b34 <_dtoa_r>:
    2b34:	20801017 	ldw	r2,64(r4)
    2b38:	deffde04 	addi	sp,sp,-136
    2b3c:	df002015 	stw	fp,128(sp)
    2b40:	dcc01b15 	stw	r19,108(sp)
    2b44:	dc801a15 	stw	r18,104(sp)
    2b48:	dc401915 	stw	r17,100(sp)
    2b4c:	dc001815 	stw	r16,96(sp)
    2b50:	dfc02115 	stw	ra,132(sp)
    2b54:	ddc01f15 	stw	r23,124(sp)
    2b58:	dd801e15 	stw	r22,120(sp)
    2b5c:	dd401d15 	stw	r21,116(sp)
    2b60:	dd001c15 	stw	r20,112(sp)
    2b64:	d9c00315 	stw	r7,12(sp)
    2b68:	2039883a 	mov	fp,r4
    2b6c:	3023883a 	mov	r17,r6
    2b70:	2825883a 	mov	r18,r5
    2b74:	dc002417 	ldw	r16,144(sp)
    2b78:	3027883a 	mov	r19,r6
    2b7c:	10000826 	beq	r2,zero,2ba0 <_dtoa_r+0x6c>
    2b80:	21801117 	ldw	r6,68(r4)
    2b84:	00c00044 	movi	r3,1
    2b88:	100b883a 	mov	r5,r2
    2b8c:	1986983a 	sll	r3,r3,r6
    2b90:	11800115 	stw	r6,4(r2)
    2b94:	10c00215 	stw	r3,8(r2)
    2b98:	00062780 	call	6278 <_Bfree>
    2b9c:	e0001015 	stw	zero,64(fp)
    2ba0:	88002e16 	blt	r17,zero,2c5c <_dtoa_r+0x128>
    2ba4:	80000015 	stw	zero,0(r16)
    2ba8:	889ffc2c 	andhi	r2,r17,32752
    2bac:	00dffc34 	movhi	r3,32752
    2bb0:	10c01c26 	beq	r2,r3,2c24 <_dtoa_r+0xf0>
    2bb4:	000d883a 	mov	r6,zero
    2bb8:	000f883a 	mov	r7,zero
    2bbc:	9009883a 	mov	r4,r18
    2bc0:	980b883a 	mov	r5,r19
    2bc4:	000b7840 	call	b784 <__eqdf2>
    2bc8:	10002b1e 	bne	r2,zero,2c78 <_dtoa_r+0x144>
    2bcc:	d9c02317 	ldw	r7,140(sp)
    2bd0:	00800044 	movi	r2,1
    2bd4:	38800015 	stw	r2,0(r7)
    2bd8:	d8802517 	ldw	r2,148(sp)
    2bdc:	10019e26 	beq	r2,zero,3258 <_dtoa_r+0x724>
    2be0:	d8c02517 	ldw	r3,148(sp)
    2be4:	00800074 	movhi	r2,1
    2be8:	10be6744 	addi	r2,r2,-1635
    2bec:	18800015 	stw	r2,0(r3)
    2bf0:	10bfffc4 	addi	r2,r2,-1
    2bf4:	dfc02117 	ldw	ra,132(sp)
    2bf8:	df002017 	ldw	fp,128(sp)
    2bfc:	ddc01f17 	ldw	r23,124(sp)
    2c00:	dd801e17 	ldw	r22,120(sp)
    2c04:	dd401d17 	ldw	r21,116(sp)
    2c08:	dd001c17 	ldw	r20,112(sp)
    2c0c:	dcc01b17 	ldw	r19,108(sp)
    2c10:	dc801a17 	ldw	r18,104(sp)
    2c14:	dc401917 	ldw	r17,100(sp)
    2c18:	dc001817 	ldw	r16,96(sp)
    2c1c:	dec02204 	addi	sp,sp,136
    2c20:	f800283a 	ret
    2c24:	d8c02317 	ldw	r3,140(sp)
    2c28:	0089c3c4 	movi	r2,9999
    2c2c:	18800015 	stw	r2,0(r3)
    2c30:	90017726 	beq	r18,zero,3210 <_dtoa_r+0x6dc>
    2c34:	00800074 	movhi	r2,1
    2c38:	10be7304 	addi	r2,r2,-1588
    2c3c:	d9002517 	ldw	r4,148(sp)
    2c40:	203fec26 	beq	r4,zero,2bf4 <_dtoa_r+0xc0>
    2c44:	10c000c7 	ldb	r3,3(r2)
    2c48:	1801781e 	bne	r3,zero,322c <_dtoa_r+0x6f8>
    2c4c:	10c000c4 	addi	r3,r2,3
    2c50:	d9802517 	ldw	r6,148(sp)
    2c54:	30c00015 	stw	r3,0(r6)
    2c58:	003fe606 	br	2bf4 <_dtoa_r+0xc0>
    2c5c:	04e00034 	movhi	r19,32768
    2c60:	9cffffc4 	addi	r19,r19,-1
    2c64:	00800044 	movi	r2,1
    2c68:	8ce6703a 	and	r19,r17,r19
    2c6c:	80800015 	stw	r2,0(r16)
    2c70:	9823883a 	mov	r17,r19
    2c74:	003fcc06 	br	2ba8 <_dtoa_r+0x74>
    2c78:	d8800204 	addi	r2,sp,8
    2c7c:	d8800015 	stw	r2,0(sp)
    2c80:	d9c00104 	addi	r7,sp,4
    2c84:	900b883a 	mov	r5,r18
    2c88:	980d883a 	mov	r6,r19
    2c8c:	e009883a 	mov	r4,fp
    2c90:	8820d53a 	srli	r16,r17,20
    2c94:	0006e640 	call	6e64 <__d2b>
    2c98:	d8800915 	stw	r2,36(sp)
    2c9c:	8001651e 	bne	r16,zero,3234 <_dtoa_r+0x700>
    2ca0:	dd800217 	ldw	r22,8(sp)
    2ca4:	dc000117 	ldw	r16,4(sp)
    2ca8:	00800804 	movi	r2,32
    2cac:	b421883a 	add	r16,r22,r16
    2cb0:	80c10c84 	addi	r3,r16,1074
    2cb4:	10c2d10e 	bge	r2,r3,37fc <_dtoa_r+0xcc8>
    2cb8:	00801004 	movi	r2,64
    2cbc:	81010484 	addi	r4,r16,1042
    2cc0:	10c7c83a 	sub	r3,r2,r3
    2cc4:	9108d83a 	srl	r4,r18,r4
    2cc8:	88e2983a 	sll	r17,r17,r3
    2ccc:	2448b03a 	or	r4,r4,r17
    2cd0:	000cb4c0 	call	cb4c <__floatunsidf>
    2cd4:	017f8434 	movhi	r5,65040
    2cd8:	01800044 	movi	r6,1
    2cdc:	1009883a 	mov	r4,r2
    2ce0:	194b883a 	add	r5,r3,r5
    2ce4:	843fffc4 	addi	r16,r16,-1
    2ce8:	d9801115 	stw	r6,68(sp)
    2cec:	000d883a 	mov	r6,zero
    2cf0:	01cffe34 	movhi	r7,16376
    2cf4:	000c0f40 	call	c0f4 <__subdf3>
    2cf8:	0198dbf4 	movhi	r6,25455
    2cfc:	01cff4f4 	movhi	r7,16339
    2d00:	3190d844 	addi	r6,r6,17249
    2d04:	39e1e9c4 	addi	r7,r7,-30809
    2d08:	1009883a 	mov	r4,r2
    2d0c:	180b883a 	mov	r5,r3
    2d10:	000b9dc0 	call	b9dc <__muldf3>
    2d14:	01a2d874 	movhi	r6,35681
    2d18:	01cff1f4 	movhi	r7,16327
    2d1c:	31b22cc4 	addi	r6,r6,-14157
    2d20:	39e28a04 	addi	r7,r7,-30168
    2d24:	180b883a 	mov	r5,r3
    2d28:	1009883a 	mov	r4,r2
    2d2c:	000a5f00 	call	a5f0 <__adddf3>
    2d30:	8009883a 	mov	r4,r16
    2d34:	1029883a 	mov	r20,r2
    2d38:	1823883a 	mov	r17,r3
    2d3c:	000ca700 	call	ca70 <__floatsidf>
    2d40:	019427f4 	movhi	r6,20639
    2d44:	01cff4f4 	movhi	r7,16339
    2d48:	319e7ec4 	addi	r6,r6,31227
    2d4c:	39d104c4 	addi	r7,r7,17427
    2d50:	1009883a 	mov	r4,r2
    2d54:	180b883a 	mov	r5,r3
    2d58:	000b9dc0 	call	b9dc <__muldf3>
    2d5c:	100d883a 	mov	r6,r2
    2d60:	180f883a 	mov	r7,r3
    2d64:	a009883a 	mov	r4,r20
    2d68:	880b883a 	mov	r5,r17
    2d6c:	000a5f00 	call	a5f0 <__adddf3>
    2d70:	1009883a 	mov	r4,r2
    2d74:	180b883a 	mov	r5,r3
    2d78:	1029883a 	mov	r20,r2
    2d7c:	1823883a 	mov	r17,r3
    2d80:	000c9f00 	call	c9f0 <__fixdfsi>
    2d84:	000d883a 	mov	r6,zero
    2d88:	000f883a 	mov	r7,zero
    2d8c:	a009883a 	mov	r4,r20
    2d90:	880b883a 	mov	r5,r17
    2d94:	d8800515 	stw	r2,20(sp)
    2d98:	000b8e80 	call	b8e8 <__ledf2>
    2d9c:	10028716 	blt	r2,zero,37bc <_dtoa_r+0xc88>
    2da0:	d8c00517 	ldw	r3,20(sp)
    2da4:	00800584 	movi	r2,22
    2da8:	10c27536 	bltu	r2,r3,3780 <_dtoa_r+0xc4c>
    2dac:	180490fa 	slli	r2,r3,3
    2db0:	00c00074 	movhi	r3,1
    2db4:	18fe8f04 	addi	r3,r3,-1476
    2db8:	1885883a 	add	r2,r3,r2
    2dbc:	11000017 	ldw	r4,0(r2)
    2dc0:	11400117 	ldw	r5,4(r2)
    2dc4:	900d883a 	mov	r6,r18
    2dc8:	980f883a 	mov	r7,r19
    2dcc:	000b80c0 	call	b80c <__gedf2>
    2dd0:	00828d0e 	bge	zero,r2,3808 <_dtoa_r+0xcd4>
    2dd4:	d9000517 	ldw	r4,20(sp)
    2dd8:	d8000e15 	stw	zero,56(sp)
    2ddc:	213fffc4 	addi	r4,r4,-1
    2de0:	d9000515 	stw	r4,20(sp)
    2de4:	b42dc83a 	sub	r22,r22,r16
    2de8:	b5bfffc4 	addi	r22,r22,-1
    2dec:	b0026f16 	blt	r22,zero,37ac <_dtoa_r+0xc78>
    2df0:	d8000815 	stw	zero,32(sp)
    2df4:	d9c00517 	ldw	r7,20(sp)
    2df8:	38026416 	blt	r7,zero,378c <_dtoa_r+0xc58>
    2dfc:	b1ed883a 	add	r22,r22,r7
    2e00:	d9c00d15 	stw	r7,52(sp)
    2e04:	d8000a15 	stw	zero,40(sp)
    2e08:	d9800317 	ldw	r6,12(sp)
    2e0c:	00800244 	movi	r2,9
    2e10:	11811436 	bltu	r2,r6,3264 <_dtoa_r+0x730>
    2e14:	00800144 	movi	r2,5
    2e18:	1184e10e 	bge	r2,r6,41a0 <_dtoa_r+0x166c>
    2e1c:	31bfff04 	addi	r6,r6,-4
    2e20:	d9800315 	stw	r6,12(sp)
    2e24:	0023883a 	mov	r17,zero
    2e28:	d9800317 	ldw	r6,12(sp)
    2e2c:	008000c4 	movi	r2,3
    2e30:	30836726 	beq	r6,r2,3bd0 <_dtoa_r+0x109c>
    2e34:	1183410e 	bge	r2,r6,3b3c <_dtoa_r+0x1008>
    2e38:	d9c00317 	ldw	r7,12(sp)
    2e3c:	00800104 	movi	r2,4
    2e40:	38827c26 	beq	r7,r2,3834 <_dtoa_r+0xd00>
    2e44:	00800144 	movi	r2,5
    2e48:	3884c41e 	bne	r7,r2,415c <_dtoa_r+0x1628>
    2e4c:	00800044 	movi	r2,1
    2e50:	d8800b15 	stw	r2,44(sp)
    2e54:	d8c00517 	ldw	r3,20(sp)
    2e58:	d9002217 	ldw	r4,136(sp)
    2e5c:	1907883a 	add	r3,r3,r4
    2e60:	19800044 	addi	r6,r3,1
    2e64:	d8c00c15 	stw	r3,48(sp)
    2e68:	d9800615 	stw	r6,24(sp)
    2e6c:	0183a40e 	bge	zero,r6,3d00 <_dtoa_r+0x11cc>
    2e70:	d9800617 	ldw	r6,24(sp)
    2e74:	3021883a 	mov	r16,r6
    2e78:	e0001115 	stw	zero,68(fp)
    2e7c:	008005c4 	movi	r2,23
    2e80:	1184c92e 	bgeu	r2,r6,41a8 <_dtoa_r+0x1674>
    2e84:	00c00044 	movi	r3,1
    2e88:	00800104 	movi	r2,4
    2e8c:	1085883a 	add	r2,r2,r2
    2e90:	11000504 	addi	r4,r2,20
    2e94:	180b883a 	mov	r5,r3
    2e98:	18c00044 	addi	r3,r3,1
    2e9c:	313ffb2e 	bgeu	r6,r4,2e8c <_dtoa_r+0x358>
    2ea0:	e1401115 	stw	r5,68(fp)
    2ea4:	e009883a 	mov	r4,fp
    2ea8:	00061d00 	call	61d0 <_Balloc>
    2eac:	d8800715 	stw	r2,28(sp)
    2eb0:	e0801015 	stw	r2,64(fp)
    2eb4:	00800384 	movi	r2,14
    2eb8:	1400f736 	bltu	r2,r16,3298 <_dtoa_r+0x764>
    2ebc:	8800f626 	beq	r17,zero,3298 <_dtoa_r+0x764>
    2ec0:	d9c00517 	ldw	r7,20(sp)
    2ec4:	01c39a0e 	bge	zero,r7,3d30 <_dtoa_r+0x11fc>
    2ec8:	388003cc 	andi	r2,r7,15
    2ecc:	100490fa 	slli	r2,r2,3
    2ed0:	382bd13a 	srai	r21,r7,4
    2ed4:	00c00074 	movhi	r3,1
    2ed8:	18fe8f04 	addi	r3,r3,-1476
    2edc:	1885883a 	add	r2,r3,r2
    2ee0:	a8c0040c 	andi	r3,r21,16
    2ee4:	12400017 	ldw	r9,0(r2)
    2ee8:	12000117 	ldw	r8,4(r2)
    2eec:	18037926 	beq	r3,zero,3cd4 <_dtoa_r+0x11a0>
    2ef0:	00800074 	movhi	r2,1
    2ef4:	10be8504 	addi	r2,r2,-1516
    2ef8:	11800817 	ldw	r6,32(r2)
    2efc:	11c00917 	ldw	r7,36(r2)
    2f00:	9009883a 	mov	r4,r18
    2f04:	980b883a 	mov	r5,r19
    2f08:	da001715 	stw	r8,92(sp)
    2f0c:	da401615 	stw	r9,88(sp)
    2f10:	000ae9c0 	call	ae9c <__divdf3>
    2f14:	da001717 	ldw	r8,92(sp)
    2f18:	da401617 	ldw	r9,88(sp)
    2f1c:	ad4003cc 	andi	r21,r21,15
    2f20:	040000c4 	movi	r16,3
    2f24:	1023883a 	mov	r17,r2
    2f28:	1829883a 	mov	r20,r3
    2f2c:	a8001126 	beq	r21,zero,2f74 <_dtoa_r+0x440>
    2f30:	05c00074 	movhi	r23,1
    2f34:	bdfe8504 	addi	r23,r23,-1516
    2f38:	4805883a 	mov	r2,r9
    2f3c:	4007883a 	mov	r3,r8
    2f40:	a980004c 	andi	r6,r21,1
    2f44:	1009883a 	mov	r4,r2
    2f48:	a82bd07a 	srai	r21,r21,1
    2f4c:	180b883a 	mov	r5,r3
    2f50:	30000426 	beq	r6,zero,2f64 <_dtoa_r+0x430>
    2f54:	b9800017 	ldw	r6,0(r23)
    2f58:	b9c00117 	ldw	r7,4(r23)
    2f5c:	84000044 	addi	r16,r16,1
    2f60:	000b9dc0 	call	b9dc <__muldf3>
    2f64:	bdc00204 	addi	r23,r23,8
    2f68:	a83ff51e 	bne	r21,zero,2f40 <_dtoa_r+0x40c>
    2f6c:	1013883a 	mov	r9,r2
    2f70:	1811883a 	mov	r8,r3
    2f74:	480d883a 	mov	r6,r9
    2f78:	400f883a 	mov	r7,r8
    2f7c:	8809883a 	mov	r4,r17
    2f80:	a00b883a 	mov	r5,r20
    2f84:	000ae9c0 	call	ae9c <__divdf3>
    2f88:	d8800f15 	stw	r2,60(sp)
    2f8c:	d8c01015 	stw	r3,64(sp)
    2f90:	d8c00e17 	ldw	r3,56(sp)
    2f94:	18000626 	beq	r3,zero,2fb0 <_dtoa_r+0x47c>
    2f98:	d9000f17 	ldw	r4,60(sp)
    2f9c:	d9401017 	ldw	r5,64(sp)
    2fa0:	000d883a 	mov	r6,zero
    2fa4:	01cffc34 	movhi	r7,16368
    2fa8:	000b8e80 	call	b8e8 <__ledf2>
    2fac:	10040b16 	blt	r2,zero,3fdc <_dtoa_r+0x14a8>
    2fb0:	8009883a 	mov	r4,r16
    2fb4:	000ca700 	call	ca70 <__floatsidf>
    2fb8:	d9800f17 	ldw	r6,60(sp)
    2fbc:	d9c01017 	ldw	r7,64(sp)
    2fc0:	1009883a 	mov	r4,r2
    2fc4:	180b883a 	mov	r5,r3
    2fc8:	000b9dc0 	call	b9dc <__muldf3>
    2fcc:	000d883a 	mov	r6,zero
    2fd0:	01d00734 	movhi	r7,16412
    2fd4:	1009883a 	mov	r4,r2
    2fd8:	180b883a 	mov	r5,r3
    2fdc:	000a5f00 	call	a5f0 <__adddf3>
    2fe0:	1021883a 	mov	r16,r2
    2fe4:	d8800617 	ldw	r2,24(sp)
    2fe8:	047f3034 	movhi	r17,64704
    2fec:	1c63883a 	add	r17,r3,r17
    2ff0:	10031826 	beq	r2,zero,3c54 <_dtoa_r+0x1120>
    2ff4:	d8c00517 	ldw	r3,20(sp)
    2ff8:	db000617 	ldw	r12,24(sp)
    2ffc:	d8c01315 	stw	r3,76(sp)
    3000:	d9000b17 	ldw	r4,44(sp)
    3004:	20038f26 	beq	r4,zero,3e44 <_dtoa_r+0x1310>
    3008:	60bfffc4 	addi	r2,r12,-1
    300c:	100490fa 	slli	r2,r2,3
    3010:	00c00074 	movhi	r3,1
    3014:	18fe8f04 	addi	r3,r3,-1476
    3018:	1885883a 	add	r2,r3,r2
    301c:	11800017 	ldw	r6,0(r2)
    3020:	11c00117 	ldw	r7,4(r2)
    3024:	d8800717 	ldw	r2,28(sp)
    3028:	0009883a 	mov	r4,zero
    302c:	014ff834 	movhi	r5,16352
    3030:	db001615 	stw	r12,88(sp)
    3034:	15c00044 	addi	r23,r2,1
    3038:	000ae9c0 	call	ae9c <__divdf3>
    303c:	800d883a 	mov	r6,r16
    3040:	880f883a 	mov	r7,r17
    3044:	1009883a 	mov	r4,r2
    3048:	180b883a 	mov	r5,r3
    304c:	000c0f40 	call	c0f4 <__subdf3>
    3050:	d9401017 	ldw	r5,64(sp)
    3054:	d9000f17 	ldw	r4,60(sp)
    3058:	102b883a 	mov	r21,r2
    305c:	d8c01215 	stw	r3,72(sp)
    3060:	000c9f00 	call	c9f0 <__fixdfsi>
    3064:	1009883a 	mov	r4,r2
    3068:	1029883a 	mov	r20,r2
    306c:	000ca700 	call	ca70 <__floatsidf>
    3070:	d9000f17 	ldw	r4,60(sp)
    3074:	d9401017 	ldw	r5,64(sp)
    3078:	100d883a 	mov	r6,r2
    307c:	180f883a 	mov	r7,r3
    3080:	000c0f40 	call	c0f4 <__subdf3>
    3084:	1823883a 	mov	r17,r3
    3088:	d8c00717 	ldw	r3,28(sp)
    308c:	d9401217 	ldw	r5,72(sp)
    3090:	a2000c04 	addi	r8,r20,48
    3094:	1021883a 	mov	r16,r2
    3098:	1a000005 	stb	r8,0(r3)
    309c:	800d883a 	mov	r6,r16
    30a0:	880f883a 	mov	r7,r17
    30a4:	a809883a 	mov	r4,r21
    30a8:	4029883a 	mov	r20,r8
    30ac:	000b80c0 	call	b80c <__gedf2>
    30b0:	00841d16 	blt	zero,r2,4128 <_dtoa_r+0x15f4>
    30b4:	800d883a 	mov	r6,r16
    30b8:	880f883a 	mov	r7,r17
    30bc:	0009883a 	mov	r4,zero
    30c0:	014ffc34 	movhi	r5,16368
    30c4:	000c0f40 	call	c0f4 <__subdf3>
    30c8:	d9401217 	ldw	r5,72(sp)
    30cc:	100d883a 	mov	r6,r2
    30d0:	180f883a 	mov	r7,r3
    30d4:	a809883a 	mov	r4,r21
    30d8:	000b80c0 	call	b80c <__gedf2>
    30dc:	db001617 	ldw	r12,88(sp)
    30e0:	00840e16 	blt	zero,r2,411c <_dtoa_r+0x15e8>
    30e4:	00800044 	movi	r2,1
    30e8:	13006b0e 	bge	r2,r12,3298 <_dtoa_r+0x764>
    30ec:	d9000717 	ldw	r4,28(sp)
    30f0:	dd800f15 	stw	r22,60(sp)
    30f4:	dcc01015 	stw	r19,64(sp)
    30f8:	2319883a 	add	r12,r4,r12
    30fc:	dcc01217 	ldw	r19,72(sp)
    3100:	602d883a 	mov	r22,r12
    3104:	dc801215 	stw	r18,72(sp)
    3108:	b825883a 	mov	r18,r23
    310c:	00000906 	br	3134 <_dtoa_r+0x600>
    3110:	000c0f40 	call	c0f4 <__subdf3>
    3114:	a80d883a 	mov	r6,r21
    3118:	980f883a 	mov	r7,r19
    311c:	1009883a 	mov	r4,r2
    3120:	180b883a 	mov	r5,r3
    3124:	000b8e80 	call	b8e8 <__ledf2>
    3128:	1003e816 	blt	r2,zero,40cc <_dtoa_r+0x1598>
    312c:	b825883a 	mov	r18,r23
    3130:	bd83e926 	beq	r23,r22,40d8 <_dtoa_r+0x15a4>
    3134:	a809883a 	mov	r4,r21
    3138:	980b883a 	mov	r5,r19
    313c:	000d883a 	mov	r6,zero
    3140:	01d00934 	movhi	r7,16420
    3144:	000b9dc0 	call	b9dc <__muldf3>
    3148:	000d883a 	mov	r6,zero
    314c:	01d00934 	movhi	r7,16420
    3150:	8009883a 	mov	r4,r16
    3154:	880b883a 	mov	r5,r17
    3158:	102b883a 	mov	r21,r2
    315c:	1827883a 	mov	r19,r3
    3160:	000b9dc0 	call	b9dc <__muldf3>
    3164:	180b883a 	mov	r5,r3
    3168:	1009883a 	mov	r4,r2
    316c:	1821883a 	mov	r16,r3
    3170:	1023883a 	mov	r17,r2
    3174:	000c9f00 	call	c9f0 <__fixdfsi>
    3178:	1009883a 	mov	r4,r2
    317c:	1029883a 	mov	r20,r2
    3180:	000ca700 	call	ca70 <__floatsidf>
    3184:	8809883a 	mov	r4,r17
    3188:	800b883a 	mov	r5,r16
    318c:	100d883a 	mov	r6,r2
    3190:	180f883a 	mov	r7,r3
    3194:	000c0f40 	call	c0f4 <__subdf3>
    3198:	a5000c04 	addi	r20,r20,48
    319c:	a80d883a 	mov	r6,r21
    31a0:	980f883a 	mov	r7,r19
    31a4:	1009883a 	mov	r4,r2
    31a8:	180b883a 	mov	r5,r3
    31ac:	95000005 	stb	r20,0(r18)
    31b0:	1021883a 	mov	r16,r2
    31b4:	1823883a 	mov	r17,r3
    31b8:	000b8e80 	call	b8e8 <__ledf2>
    31bc:	bdc00044 	addi	r23,r23,1
    31c0:	800d883a 	mov	r6,r16
    31c4:	880f883a 	mov	r7,r17
    31c8:	0009883a 	mov	r4,zero
    31cc:	014ffc34 	movhi	r5,16368
    31d0:	103fcf0e 	bge	r2,zero,3110 <_dtoa_r+0x5dc>
    31d4:	d8c01317 	ldw	r3,76(sp)
    31d8:	d8c00515 	stw	r3,20(sp)
    31dc:	d9400917 	ldw	r5,36(sp)
    31e0:	e009883a 	mov	r4,fp
    31e4:	00062780 	call	6278 <_Bfree>
    31e8:	d9000517 	ldw	r4,20(sp)
    31ec:	d9802317 	ldw	r6,140(sp)
    31f0:	d9c02517 	ldw	r7,148(sp)
    31f4:	b8000005 	stb	zero,0(r23)
    31f8:	20800044 	addi	r2,r4,1
    31fc:	30800015 	stw	r2,0(r6)
    3200:	3802aa26 	beq	r7,zero,3cac <_dtoa_r+0x1178>
    3204:	3dc00015 	stw	r23,0(r7)
    3208:	d8800717 	ldw	r2,28(sp)
    320c:	003e7906 	br	2bf4 <_dtoa_r+0xc0>
    3210:	00800434 	movhi	r2,16
    3214:	10bfffc4 	addi	r2,r2,-1
    3218:	88a2703a 	and	r17,r17,r2
    321c:	883e851e 	bne	r17,zero,2c34 <_dtoa_r+0x100>
    3220:	00800074 	movhi	r2,1
    3224:	10be7004 	addi	r2,r2,-1600
    3228:	003e8406 	br	2c3c <_dtoa_r+0x108>
    322c:	10c00204 	addi	r3,r2,8
    3230:	003e8706 	br	2c50 <_dtoa_r+0x11c>
    3234:	01400434 	movhi	r5,16
    3238:	297fffc4 	addi	r5,r5,-1
    323c:	994a703a 	and	r5,r19,r5
    3240:	9009883a 	mov	r4,r18
    3244:	843f0044 	addi	r16,r16,-1023
    3248:	294ffc34 	orhi	r5,r5,16368
    324c:	dd800217 	ldw	r22,8(sp)
    3250:	d8001115 	stw	zero,68(sp)
    3254:	003ea506 	br	2cec <_dtoa_r+0x1b8>
    3258:	00800074 	movhi	r2,1
    325c:	10be6704 	addi	r2,r2,-1636
    3260:	003e6406 	br	2bf4 <_dtoa_r+0xc0>
    3264:	e0001115 	stw	zero,68(fp)
    3268:	000b883a 	mov	r5,zero
    326c:	e009883a 	mov	r4,fp
    3270:	00061d00 	call	61d0 <_Balloc>
    3274:	01bfffc4 	movi	r6,-1
    3278:	01c00044 	movi	r7,1
    327c:	d8800715 	stw	r2,28(sp)
    3280:	d9800c15 	stw	r6,48(sp)
    3284:	e0801015 	stw	r2,64(fp)
    3288:	d8000315 	stw	zero,12(sp)
    328c:	d9c00b15 	stw	r7,44(sp)
    3290:	d9800615 	stw	r6,24(sp)
    3294:	d8002215 	stw	zero,136(sp)
    3298:	d8800117 	ldw	r2,4(sp)
    329c:	10008916 	blt	r2,zero,34c4 <_dtoa_r+0x990>
    32a0:	d9000517 	ldw	r4,20(sp)
    32a4:	00c00384 	movi	r3,14
    32a8:	19008616 	blt	r3,r4,34c4 <_dtoa_r+0x990>
    32ac:	200490fa 	slli	r2,r4,3
    32b0:	00c00074 	movhi	r3,1
    32b4:	d9802217 	ldw	r6,136(sp)
    32b8:	18fe8f04 	addi	r3,r3,-1476
    32bc:	1885883a 	add	r2,r3,r2
    32c0:	14000017 	ldw	r16,0(r2)
    32c4:	14400117 	ldw	r17,4(r2)
    32c8:	30016316 	blt	r6,zero,3858 <_dtoa_r+0xd24>
    32cc:	800d883a 	mov	r6,r16
    32d0:	880f883a 	mov	r7,r17
    32d4:	9009883a 	mov	r4,r18
    32d8:	980b883a 	mov	r5,r19
    32dc:	000ae9c0 	call	ae9c <__divdf3>
    32e0:	180b883a 	mov	r5,r3
    32e4:	1009883a 	mov	r4,r2
    32e8:	000c9f00 	call	c9f0 <__fixdfsi>
    32ec:	1009883a 	mov	r4,r2
    32f0:	102b883a 	mov	r21,r2
    32f4:	000ca700 	call	ca70 <__floatsidf>
    32f8:	800d883a 	mov	r6,r16
    32fc:	880f883a 	mov	r7,r17
    3300:	1009883a 	mov	r4,r2
    3304:	180b883a 	mov	r5,r3
    3308:	000b9dc0 	call	b9dc <__muldf3>
    330c:	100d883a 	mov	r6,r2
    3310:	180f883a 	mov	r7,r3
    3314:	9009883a 	mov	r4,r18
    3318:	980b883a 	mov	r5,r19
    331c:	000c0f40 	call	c0f4 <__subdf3>
    3320:	d9c00717 	ldw	r7,28(sp)
    3324:	1009883a 	mov	r4,r2
    3328:	a8800c04 	addi	r2,r21,48
    332c:	38800005 	stb	r2,0(r7)
    3330:	3dc00044 	addi	r23,r7,1
    3334:	d9c00617 	ldw	r7,24(sp)
    3338:	01800044 	movi	r6,1
    333c:	180b883a 	mov	r5,r3
    3340:	2005883a 	mov	r2,r4
    3344:	39803826 	beq	r7,r6,3428 <_dtoa_r+0x8f4>
    3348:	000d883a 	mov	r6,zero
    334c:	01d00934 	movhi	r7,16420
    3350:	000b9dc0 	call	b9dc <__muldf3>
    3354:	000d883a 	mov	r6,zero
    3358:	000f883a 	mov	r7,zero
    335c:	1009883a 	mov	r4,r2
    3360:	180b883a 	mov	r5,r3
    3364:	1025883a 	mov	r18,r2
    3368:	1827883a 	mov	r19,r3
    336c:	000b7840 	call	b784 <__eqdf2>
    3370:	103f9a26 	beq	r2,zero,31dc <_dtoa_r+0x6a8>
    3374:	d9c00617 	ldw	r7,24(sp)
    3378:	d8c00717 	ldw	r3,28(sp)
    337c:	b829883a 	mov	r20,r23
    3380:	38bfffc4 	addi	r2,r7,-1
    3384:	18ad883a 	add	r22,r3,r2
    3388:	00000a06 	br	33b4 <_dtoa_r+0x880>
    338c:	000b9dc0 	call	b9dc <__muldf3>
    3390:	000d883a 	mov	r6,zero
    3394:	000f883a 	mov	r7,zero
    3398:	1009883a 	mov	r4,r2
    339c:	180b883a 	mov	r5,r3
    33a0:	1025883a 	mov	r18,r2
    33a4:	1827883a 	mov	r19,r3
    33a8:	b829883a 	mov	r20,r23
    33ac:	000b7840 	call	b784 <__eqdf2>
    33b0:	103f8a26 	beq	r2,zero,31dc <_dtoa_r+0x6a8>
    33b4:	800d883a 	mov	r6,r16
    33b8:	880f883a 	mov	r7,r17
    33bc:	9009883a 	mov	r4,r18
    33c0:	980b883a 	mov	r5,r19
    33c4:	000ae9c0 	call	ae9c <__divdf3>
    33c8:	180b883a 	mov	r5,r3
    33cc:	1009883a 	mov	r4,r2
    33d0:	000c9f00 	call	c9f0 <__fixdfsi>
    33d4:	1009883a 	mov	r4,r2
    33d8:	102b883a 	mov	r21,r2
    33dc:	000ca700 	call	ca70 <__floatsidf>
    33e0:	800d883a 	mov	r6,r16
    33e4:	880f883a 	mov	r7,r17
    33e8:	1009883a 	mov	r4,r2
    33ec:	180b883a 	mov	r5,r3
    33f0:	000b9dc0 	call	b9dc <__muldf3>
    33f4:	100d883a 	mov	r6,r2
    33f8:	180f883a 	mov	r7,r3
    33fc:	9009883a 	mov	r4,r18
    3400:	980b883a 	mov	r5,r19
    3404:	000c0f40 	call	c0f4 <__subdf3>
    3408:	aa000c04 	addi	r8,r21,48
    340c:	a2000005 	stb	r8,0(r20)
    3410:	000d883a 	mov	r6,zero
    3414:	01d00934 	movhi	r7,16420
    3418:	1009883a 	mov	r4,r2
    341c:	180b883a 	mov	r5,r3
    3420:	a5c00044 	addi	r23,r20,1
    3424:	b53fd91e 	bne	r22,r20,338c <_dtoa_r+0x858>
    3428:	100d883a 	mov	r6,r2
    342c:	180f883a 	mov	r7,r3
    3430:	1009883a 	mov	r4,r2
    3434:	180b883a 	mov	r5,r3
    3438:	000a5f00 	call	a5f0 <__adddf3>
    343c:	100d883a 	mov	r6,r2
    3440:	180f883a 	mov	r7,r3
    3444:	8009883a 	mov	r4,r16
    3448:	880b883a 	mov	r5,r17
    344c:	1027883a 	mov	r19,r2
    3450:	1825883a 	mov	r18,r3
    3454:	000b8e80 	call	b8e8 <__ledf2>
    3458:	10000816 	blt	r2,zero,347c <_dtoa_r+0x948>
    345c:	980d883a 	mov	r6,r19
    3460:	900f883a 	mov	r7,r18
    3464:	8009883a 	mov	r4,r16
    3468:	880b883a 	mov	r5,r17
    346c:	000b7840 	call	b784 <__eqdf2>
    3470:	103f5a1e 	bne	r2,zero,31dc <_dtoa_r+0x6a8>
    3474:	ad40004c 	andi	r21,r21,1
    3478:	a83f5826 	beq	r21,zero,31dc <_dtoa_r+0x6a8>
    347c:	bd3fffc3 	ldbu	r20,-1(r23)
    3480:	b8bfffc4 	addi	r2,r23,-1
    3484:	1007883a 	mov	r3,r2
    3488:	01400e44 	movi	r5,57
    348c:	d9800717 	ldw	r6,28(sp)
    3490:	00000506 	br	34a8 <_dtoa_r+0x974>
    3494:	18ffffc4 	addi	r3,r3,-1
    3498:	11824726 	beq	r2,r6,3db8 <_dtoa_r+0x1284>
    349c:	1d000003 	ldbu	r20,0(r3)
    34a0:	102f883a 	mov	r23,r2
    34a4:	10bfffc4 	addi	r2,r2,-1
    34a8:	a1003fcc 	andi	r4,r20,255
    34ac:	2100201c 	xori	r4,r4,128
    34b0:	213fe004 	addi	r4,r4,-128
    34b4:	217ff726 	beq	r4,r5,3494 <_dtoa_r+0x960>
    34b8:	a2000044 	addi	r8,r20,1
    34bc:	12000005 	stb	r8,0(r2)
    34c0:	003f4606 	br	31dc <_dtoa_r+0x6a8>
    34c4:	d9000b17 	ldw	r4,44(sp)
    34c8:	2000c826 	beq	r4,zero,37ec <_dtoa_r+0xcb8>
    34cc:	d9800317 	ldw	r6,12(sp)
    34d0:	00c00044 	movi	r3,1
    34d4:	1980f90e 	bge	r3,r6,38bc <_dtoa_r+0xd88>
    34d8:	d8800617 	ldw	r2,24(sp)
    34dc:	d8c00a17 	ldw	r3,40(sp)
    34e0:	157fffc4 	addi	r21,r2,-1
    34e4:	1d41f316 	blt	r3,r21,3cb4 <_dtoa_r+0x1180>
    34e8:	1d6bc83a 	sub	r21,r3,r21
    34ec:	d9c00617 	ldw	r7,24(sp)
    34f0:	3802aa16 	blt	r7,zero,3f9c <_dtoa_r+0x1468>
    34f4:	dd000817 	ldw	r20,32(sp)
    34f8:	d8800617 	ldw	r2,24(sp)
    34fc:	d8c00817 	ldw	r3,32(sp)
    3500:	01400044 	movi	r5,1
    3504:	e009883a 	mov	r4,fp
    3508:	1887883a 	add	r3,r3,r2
    350c:	d8c00815 	stw	r3,32(sp)
    3510:	b0ad883a 	add	r22,r22,r2
    3514:	00065dc0 	call	65dc <__i2b>
    3518:	1023883a 	mov	r17,r2
    351c:	a0000826 	beq	r20,zero,3540 <_dtoa_r+0xa0c>
    3520:	0580070e 	bge	zero,r22,3540 <_dtoa_r+0xa0c>
    3524:	a005883a 	mov	r2,r20
    3528:	b500b916 	blt	r22,r20,3810 <_dtoa_r+0xcdc>
    352c:	d9000817 	ldw	r4,32(sp)
    3530:	a0a9c83a 	sub	r20,r20,r2
    3534:	b0adc83a 	sub	r22,r22,r2
    3538:	2089c83a 	sub	r4,r4,r2
    353c:	d9000815 	stw	r4,32(sp)
    3540:	d9800a17 	ldw	r6,40(sp)
    3544:	0181810e 	bge	zero,r6,3b4c <_dtoa_r+0x1018>
    3548:	d9c00b17 	ldw	r7,44(sp)
    354c:	3800b326 	beq	r7,zero,381c <_dtoa_r+0xce8>
    3550:	a800b226 	beq	r21,zero,381c <_dtoa_r+0xce8>
    3554:	880b883a 	mov	r5,r17
    3558:	a80d883a 	mov	r6,r21
    355c:	e009883a 	mov	r4,fp
    3560:	00068100 	call	6810 <__pow5mult>
    3564:	d9800917 	ldw	r6,36(sp)
    3568:	100b883a 	mov	r5,r2
    356c:	e009883a 	mov	r4,fp
    3570:	1023883a 	mov	r17,r2
    3574:	00066180 	call	6618 <__multiply>
    3578:	1021883a 	mov	r16,r2
    357c:	d8800a17 	ldw	r2,40(sp)
    3580:	d9400917 	ldw	r5,36(sp)
    3584:	e009883a 	mov	r4,fp
    3588:	1545c83a 	sub	r2,r2,r21
    358c:	d8800a15 	stw	r2,40(sp)
    3590:	00062780 	call	6278 <_Bfree>
    3594:	d8c00a17 	ldw	r3,40(sp)
    3598:	18009f1e 	bne	r3,zero,3818 <_dtoa_r+0xce4>
    359c:	05c00044 	movi	r23,1
    35a0:	e009883a 	mov	r4,fp
    35a4:	b80b883a 	mov	r5,r23
    35a8:	00065dc0 	call	65dc <__i2b>
    35ac:	d9000d17 	ldw	r4,52(sp)
    35b0:	102b883a 	mov	r21,r2
    35b4:	2000ce26 	beq	r4,zero,38f0 <_dtoa_r+0xdbc>
    35b8:	200d883a 	mov	r6,r4
    35bc:	100b883a 	mov	r5,r2
    35c0:	e009883a 	mov	r4,fp
    35c4:	00068100 	call	6810 <__pow5mult>
    35c8:	d9800317 	ldw	r6,12(sp)
    35cc:	102b883a 	mov	r21,r2
    35d0:	b981810e 	bge	r23,r6,3bd8 <_dtoa_r+0x10a4>
    35d4:	0027883a 	mov	r19,zero
    35d8:	a8800417 	ldw	r2,16(r21)
    35dc:	05c00804 	movi	r23,32
    35e0:	10800104 	addi	r2,r2,4
    35e4:	1085883a 	add	r2,r2,r2
    35e8:	1085883a 	add	r2,r2,r2
    35ec:	a885883a 	add	r2,r21,r2
    35f0:	11000017 	ldw	r4,0(r2)
    35f4:	00064c40 	call	64c4 <__hi0bits>
    35f8:	b885c83a 	sub	r2,r23,r2
    35fc:	1585883a 	add	r2,r2,r22
    3600:	108007cc 	andi	r2,r2,31
    3604:	1000b326 	beq	r2,zero,38d4 <_dtoa_r+0xda0>
    3608:	00c00804 	movi	r3,32
    360c:	1887c83a 	sub	r3,r3,r2
    3610:	01000104 	movi	r4,4
    3614:	20c2cd0e 	bge	r4,r3,414c <_dtoa_r+0x1618>
    3618:	00c00704 	movi	r3,28
    361c:	1885c83a 	sub	r2,r3,r2
    3620:	d8c00817 	ldw	r3,32(sp)
    3624:	a0a9883a 	add	r20,r20,r2
    3628:	b0ad883a 	add	r22,r22,r2
    362c:	1887883a 	add	r3,r3,r2
    3630:	d8c00815 	stw	r3,32(sp)
    3634:	d9800817 	ldw	r6,32(sp)
    3638:	0180040e 	bge	zero,r6,364c <_dtoa_r+0xb18>
    363c:	800b883a 	mov	r5,r16
    3640:	e009883a 	mov	r4,fp
    3644:	00069500 	call	6950 <__lshift>
    3648:	1021883a 	mov	r16,r2
    364c:	0580050e 	bge	zero,r22,3664 <_dtoa_r+0xb30>
    3650:	a80b883a 	mov	r5,r21
    3654:	b00d883a 	mov	r6,r22
    3658:	e009883a 	mov	r4,fp
    365c:	00069500 	call	6950 <__lshift>
    3660:	102b883a 	mov	r21,r2
    3664:	d9c00e17 	ldw	r7,56(sp)
    3668:	3801211e 	bne	r7,zero,3af0 <_dtoa_r+0xfbc>
    366c:	d9800617 	ldw	r6,24(sp)
    3670:	0181380e 	bge	zero,r6,3b54 <_dtoa_r+0x1020>
    3674:	d8c00b17 	ldw	r3,44(sp)
    3678:	1800ab1e 	bne	r3,zero,3928 <_dtoa_r+0xdf4>
    367c:	dc800717 	ldw	r18,28(sp)
    3680:	dcc00617 	ldw	r19,24(sp)
    3684:	9029883a 	mov	r20,r18
    3688:	00000206 	br	3694 <_dtoa_r+0xb60>
    368c:	00062a00 	call	62a0 <__multadd>
    3690:	1021883a 	mov	r16,r2
    3694:	a80b883a 	mov	r5,r21
    3698:	8009883a 	mov	r4,r16
    369c:	00029340 	call	2934 <quorem>
    36a0:	10800c04 	addi	r2,r2,48
    36a4:	90800005 	stb	r2,0(r18)
    36a8:	94800044 	addi	r18,r18,1
    36ac:	9507c83a 	sub	r3,r18,r20
    36b0:	000f883a 	mov	r7,zero
    36b4:	01800284 	movi	r6,10
    36b8:	800b883a 	mov	r5,r16
    36bc:	e009883a 	mov	r4,fp
    36c0:	1cfff216 	blt	r3,r19,368c <_dtoa_r+0xb58>
    36c4:	1011883a 	mov	r8,r2
    36c8:	d8800617 	ldw	r2,24(sp)
    36cc:	0082370e 	bge	zero,r2,3fac <_dtoa_r+0x1478>
    36d0:	d9000717 	ldw	r4,28(sp)
    36d4:	0025883a 	mov	r18,zero
    36d8:	20af883a 	add	r23,r4,r2
    36dc:	01800044 	movi	r6,1
    36e0:	800b883a 	mov	r5,r16
    36e4:	e009883a 	mov	r4,fp
    36e8:	da001715 	stw	r8,92(sp)
    36ec:	00069500 	call	6950 <__lshift>
    36f0:	a80b883a 	mov	r5,r21
    36f4:	1009883a 	mov	r4,r2
    36f8:	d8800915 	stw	r2,36(sp)
    36fc:	0006a980 	call	6a98 <__mcmp>
    3700:	da001717 	ldw	r8,92(sp)
    3704:	0081800e 	bge	zero,r2,3d08 <_dtoa_r+0x11d4>
    3708:	b93fffc3 	ldbu	r4,-1(r23)
    370c:	b8bfffc4 	addi	r2,r23,-1
    3710:	1007883a 	mov	r3,r2
    3714:	01800e44 	movi	r6,57
    3718:	d9c00717 	ldw	r7,28(sp)
    371c:	00000506 	br	3734 <_dtoa_r+0xc00>
    3720:	18ffffc4 	addi	r3,r3,-1
    3724:	11c12326 	beq	r2,r7,3bb4 <_dtoa_r+0x1080>
    3728:	19000003 	ldbu	r4,0(r3)
    372c:	102f883a 	mov	r23,r2
    3730:	10bfffc4 	addi	r2,r2,-1
    3734:	21403fcc 	andi	r5,r4,255
    3738:	2940201c 	xori	r5,r5,128
    373c:	297fe004 	addi	r5,r5,-128
    3740:	29bff726 	beq	r5,r6,3720 <_dtoa_r+0xbec>
    3744:	21000044 	addi	r4,r4,1
    3748:	11000005 	stb	r4,0(r2)
    374c:	a80b883a 	mov	r5,r21
    3750:	e009883a 	mov	r4,fp
    3754:	00062780 	call	6278 <_Bfree>
    3758:	883ea026 	beq	r17,zero,31dc <_dtoa_r+0x6a8>
    375c:	90000426 	beq	r18,zero,3770 <_dtoa_r+0xc3c>
    3760:	94400326 	beq	r18,r17,3770 <_dtoa_r+0xc3c>
    3764:	900b883a 	mov	r5,r18
    3768:	e009883a 	mov	r4,fp
    376c:	00062780 	call	6278 <_Bfree>
    3770:	880b883a 	mov	r5,r17
    3774:	e009883a 	mov	r4,fp
    3778:	00062780 	call	6278 <_Bfree>
    377c:	003e9706 	br	31dc <_dtoa_r+0x6a8>
    3780:	01800044 	movi	r6,1
    3784:	d9800e15 	stw	r6,56(sp)
    3788:	003d9606 	br	2de4 <_dtoa_r+0x2b0>
    378c:	d8800817 	ldw	r2,32(sp)
    3790:	d8c00517 	ldw	r3,20(sp)
    3794:	d8000d15 	stw	zero,52(sp)
    3798:	10c5c83a 	sub	r2,r2,r3
    379c:	00c9c83a 	sub	r4,zero,r3
    37a0:	d8800815 	stw	r2,32(sp)
    37a4:	d9000a15 	stw	r4,40(sp)
    37a8:	003d9706 	br	2e08 <_dtoa_r+0x2d4>
    37ac:	05adc83a 	sub	r22,zero,r22
    37b0:	dd800815 	stw	r22,32(sp)
    37b4:	002d883a 	mov	r22,zero
    37b8:	003d8e06 	br	2df4 <_dtoa_r+0x2c0>
    37bc:	d9000517 	ldw	r4,20(sp)
    37c0:	000ca700 	call	ca70 <__floatsidf>
    37c4:	100d883a 	mov	r6,r2
    37c8:	180f883a 	mov	r7,r3
    37cc:	a009883a 	mov	r4,r20
    37d0:	880b883a 	mov	r5,r17
    37d4:	000b7840 	call	b784 <__eqdf2>
    37d8:	103d7126 	beq	r2,zero,2da0 <_dtoa_r+0x26c>
    37dc:	d9c00517 	ldw	r7,20(sp)
    37e0:	39ffffc4 	addi	r7,r7,-1
    37e4:	d9c00515 	stw	r7,20(sp)
    37e8:	003d6d06 	br	2da0 <_dtoa_r+0x26c>
    37ec:	dd400a17 	ldw	r21,40(sp)
    37f0:	dd000817 	ldw	r20,32(sp)
    37f4:	0023883a 	mov	r17,zero
    37f8:	003f4806 	br	351c <_dtoa_r+0x9e8>
    37fc:	10e3c83a 	sub	r17,r2,r3
    3800:	9448983a 	sll	r4,r18,r17
    3804:	003d3206 	br	2cd0 <_dtoa_r+0x19c>
    3808:	d8000e15 	stw	zero,56(sp)
    380c:	003d7506 	br	2de4 <_dtoa_r+0x2b0>
    3810:	b005883a 	mov	r2,r22
    3814:	003f4506 	br	352c <_dtoa_r+0x9f8>
    3818:	dc000915 	stw	r16,36(sp)
    381c:	d9800a17 	ldw	r6,40(sp)
    3820:	d9400917 	ldw	r5,36(sp)
    3824:	e009883a 	mov	r4,fp
    3828:	00068100 	call	6810 <__pow5mult>
    382c:	1021883a 	mov	r16,r2
    3830:	003f5a06 	br	359c <_dtoa_r+0xa68>
    3834:	01c00044 	movi	r7,1
    3838:	d9c00b15 	stw	r7,44(sp)
    383c:	d8802217 	ldw	r2,136(sp)
    3840:	0081280e 	bge	zero,r2,3ce4 <_dtoa_r+0x11b0>
    3844:	100d883a 	mov	r6,r2
    3848:	1021883a 	mov	r16,r2
    384c:	d8800c15 	stw	r2,48(sp)
    3850:	d8800615 	stw	r2,24(sp)
    3854:	003d8806 	br	2e78 <_dtoa_r+0x344>
    3858:	d8800617 	ldw	r2,24(sp)
    385c:	00be9b16 	blt	zero,r2,32cc <_dtoa_r+0x798>
    3860:	10010f1e 	bne	r2,zero,3ca0 <_dtoa_r+0x116c>
    3864:	880b883a 	mov	r5,r17
    3868:	000d883a 	mov	r6,zero
    386c:	01d00534 	movhi	r7,16404
    3870:	8009883a 	mov	r4,r16
    3874:	000b9dc0 	call	b9dc <__muldf3>
    3878:	900d883a 	mov	r6,r18
    387c:	980f883a 	mov	r7,r19
    3880:	1009883a 	mov	r4,r2
    3884:	180b883a 	mov	r5,r3
    3888:	000b80c0 	call	b80c <__gedf2>
    388c:	002b883a 	mov	r21,zero
    3890:	0023883a 	mov	r17,zero
    3894:	1000bf16 	blt	r2,zero,3b94 <_dtoa_r+0x1060>
    3898:	d9802217 	ldw	r6,136(sp)
    389c:	ddc00717 	ldw	r23,28(sp)
    38a0:	018c303a 	nor	r6,zero,r6
    38a4:	d9800515 	stw	r6,20(sp)
    38a8:	a80b883a 	mov	r5,r21
    38ac:	e009883a 	mov	r4,fp
    38b0:	00062780 	call	6278 <_Bfree>
    38b4:	883e4926 	beq	r17,zero,31dc <_dtoa_r+0x6a8>
    38b8:	003fad06 	br	3770 <_dtoa_r+0xc3c>
    38bc:	d9c01117 	ldw	r7,68(sp)
    38c0:	3801bc26 	beq	r7,zero,3fb4 <_dtoa_r+0x1480>
    38c4:	10810cc4 	addi	r2,r2,1075
    38c8:	dd400a17 	ldw	r21,40(sp)
    38cc:	dd000817 	ldw	r20,32(sp)
    38d0:	003f0a06 	br	34fc <_dtoa_r+0x9c8>
    38d4:	00800704 	movi	r2,28
    38d8:	d9000817 	ldw	r4,32(sp)
    38dc:	a0a9883a 	add	r20,r20,r2
    38e0:	b0ad883a 	add	r22,r22,r2
    38e4:	2089883a 	add	r4,r4,r2
    38e8:	d9000815 	stw	r4,32(sp)
    38ec:	003f5106 	br	3634 <_dtoa_r+0xb00>
    38f0:	d8c00317 	ldw	r3,12(sp)
    38f4:	b8c1fc0e 	bge	r23,r3,40e8 <_dtoa_r+0x15b4>
    38f8:	0027883a 	mov	r19,zero
    38fc:	b805883a 	mov	r2,r23
    3900:	003f3e06 	br	35fc <_dtoa_r+0xac8>
    3904:	880b883a 	mov	r5,r17
    3908:	e009883a 	mov	r4,fp
    390c:	000f883a 	mov	r7,zero
    3910:	01800284 	movi	r6,10
    3914:	00062a00 	call	62a0 <__multadd>
    3918:	d9000c17 	ldw	r4,48(sp)
    391c:	1023883a 	mov	r17,r2
    3920:	0102040e 	bge	zero,r4,4134 <_dtoa_r+0x1600>
    3924:	d9000615 	stw	r4,24(sp)
    3928:	0500050e 	bge	zero,r20,3940 <_dtoa_r+0xe0c>
    392c:	880b883a 	mov	r5,r17
    3930:	a00d883a 	mov	r6,r20
    3934:	e009883a 	mov	r4,fp
    3938:	00069500 	call	6950 <__lshift>
    393c:	1023883a 	mov	r17,r2
    3940:	9801241e 	bne	r19,zero,3dd4 <_dtoa_r+0x12a0>
    3944:	8829883a 	mov	r20,r17
    3948:	d9000617 	ldw	r4,24(sp)
    394c:	dcc00717 	ldw	r19,28(sp)
    3950:	9480004c 	andi	r18,r18,1
    3954:	20bfffc4 	addi	r2,r4,-1
    3958:	9885883a 	add	r2,r19,r2
    395c:	d8800415 	stw	r2,16(sp)
    3960:	dc800615 	stw	r18,24(sp)
    3964:	a80b883a 	mov	r5,r21
    3968:	8009883a 	mov	r4,r16
    396c:	00029340 	call	2934 <quorem>
    3970:	880b883a 	mov	r5,r17
    3974:	8009883a 	mov	r4,r16
    3978:	102f883a 	mov	r23,r2
    397c:	0006a980 	call	6a98 <__mcmp>
    3980:	a80b883a 	mov	r5,r21
    3984:	a00d883a 	mov	r6,r20
    3988:	e009883a 	mov	r4,fp
    398c:	102d883a 	mov	r22,r2
    3990:	0006af80 	call	6af8 <__mdiff>
    3994:	1007883a 	mov	r3,r2
    3998:	10800317 	ldw	r2,12(r2)
    399c:	bc800c04 	addi	r18,r23,48
    39a0:	180b883a 	mov	r5,r3
    39a4:	10004e1e 	bne	r2,zero,3ae0 <_dtoa_r+0xfac>
    39a8:	8009883a 	mov	r4,r16
    39ac:	d8c01615 	stw	r3,88(sp)
    39b0:	0006a980 	call	6a98 <__mcmp>
    39b4:	d8c01617 	ldw	r3,88(sp)
    39b8:	e009883a 	mov	r4,fp
    39bc:	d8801615 	stw	r2,88(sp)
    39c0:	180b883a 	mov	r5,r3
    39c4:	00062780 	call	6278 <_Bfree>
    39c8:	d8801617 	ldw	r2,88(sp)
    39cc:	1000041e 	bne	r2,zero,39e0 <_dtoa_r+0xeac>
    39d0:	d9800317 	ldw	r6,12(sp)
    39d4:	3000021e 	bne	r6,zero,39e0 <_dtoa_r+0xeac>
    39d8:	d8c00617 	ldw	r3,24(sp)
    39dc:	18003726 	beq	r3,zero,3abc <_dtoa_r+0xf88>
    39e0:	b0002016 	blt	r22,zero,3a64 <_dtoa_r+0xf30>
    39e4:	b000041e 	bne	r22,zero,39f8 <_dtoa_r+0xec4>
    39e8:	d9000317 	ldw	r4,12(sp)
    39ec:	2000021e 	bne	r4,zero,39f8 <_dtoa_r+0xec4>
    39f0:	d8c00617 	ldw	r3,24(sp)
    39f4:	18001b26 	beq	r3,zero,3a64 <_dtoa_r+0xf30>
    39f8:	00810716 	blt	zero,r2,3e18 <_dtoa_r+0x12e4>
    39fc:	d8c00417 	ldw	r3,16(sp)
    3a00:	9d800044 	addi	r22,r19,1
    3a04:	9c800005 	stb	r18,0(r19)
    3a08:	b02f883a 	mov	r23,r22
    3a0c:	98c10626 	beq	r19,r3,3e28 <_dtoa_r+0x12f4>
    3a10:	800b883a 	mov	r5,r16
    3a14:	000f883a 	mov	r7,zero
    3a18:	01800284 	movi	r6,10
    3a1c:	e009883a 	mov	r4,fp
    3a20:	00062a00 	call	62a0 <__multadd>
    3a24:	1021883a 	mov	r16,r2
    3a28:	000f883a 	mov	r7,zero
    3a2c:	01800284 	movi	r6,10
    3a30:	880b883a 	mov	r5,r17
    3a34:	e009883a 	mov	r4,fp
    3a38:	8d002526 	beq	r17,r20,3ad0 <_dtoa_r+0xf9c>
    3a3c:	00062a00 	call	62a0 <__multadd>
    3a40:	a00b883a 	mov	r5,r20
    3a44:	000f883a 	mov	r7,zero
    3a48:	01800284 	movi	r6,10
    3a4c:	e009883a 	mov	r4,fp
    3a50:	1023883a 	mov	r17,r2
    3a54:	00062a00 	call	62a0 <__multadd>
    3a58:	1029883a 	mov	r20,r2
    3a5c:	b027883a 	mov	r19,r22
    3a60:	003fc006 	br	3964 <_dtoa_r+0xe30>
    3a64:	9011883a 	mov	r8,r18
    3a68:	00800e0e 	bge	zero,r2,3aa4 <_dtoa_r+0xf70>
    3a6c:	800b883a 	mov	r5,r16
    3a70:	01800044 	movi	r6,1
    3a74:	e009883a 	mov	r4,fp
    3a78:	da001715 	stw	r8,92(sp)
    3a7c:	00069500 	call	6950 <__lshift>
    3a80:	a80b883a 	mov	r5,r21
    3a84:	1009883a 	mov	r4,r2
    3a88:	1021883a 	mov	r16,r2
    3a8c:	0006a980 	call	6a98 <__mcmp>
    3a90:	da001717 	ldw	r8,92(sp)
    3a94:	0081960e 	bge	zero,r2,40f0 <_dtoa_r+0x15bc>
    3a98:	00800e44 	movi	r2,57
    3a9c:	40817026 	beq	r8,r2,4060 <_dtoa_r+0x152c>
    3aa0:	ba000c44 	addi	r8,r23,49
    3aa4:	8825883a 	mov	r18,r17
    3aa8:	9dc00044 	addi	r23,r19,1
    3aac:	9a000005 	stb	r8,0(r19)
    3ab0:	a023883a 	mov	r17,r20
    3ab4:	dc000915 	stw	r16,36(sp)
    3ab8:	003f2406 	br	374c <_dtoa_r+0xc18>
    3abc:	00800e44 	movi	r2,57
    3ac0:	9011883a 	mov	r8,r18
    3ac4:	90816626 	beq	r18,r2,4060 <_dtoa_r+0x152c>
    3ac8:	05bff516 	blt	zero,r22,3aa0 <_dtoa_r+0xf6c>
    3acc:	003ff506 	br	3aa4 <_dtoa_r+0xf70>
    3ad0:	00062a00 	call	62a0 <__multadd>
    3ad4:	1023883a 	mov	r17,r2
    3ad8:	1029883a 	mov	r20,r2
    3adc:	003fdf06 	br	3a5c <_dtoa_r+0xf28>
    3ae0:	e009883a 	mov	r4,fp
    3ae4:	00062780 	call	6278 <_Bfree>
    3ae8:	00800044 	movi	r2,1
    3aec:	003fbc06 	br	39e0 <_dtoa_r+0xeac>
    3af0:	a80b883a 	mov	r5,r21
    3af4:	8009883a 	mov	r4,r16
    3af8:	0006a980 	call	6a98 <__mcmp>
    3afc:	103edb0e 	bge	r2,zero,366c <_dtoa_r+0xb38>
    3b00:	800b883a 	mov	r5,r16
    3b04:	000f883a 	mov	r7,zero
    3b08:	01800284 	movi	r6,10
    3b0c:	e009883a 	mov	r4,fp
    3b10:	00062a00 	call	62a0 <__multadd>
    3b14:	1021883a 	mov	r16,r2
    3b18:	d8800517 	ldw	r2,20(sp)
    3b1c:	d8c00b17 	ldw	r3,44(sp)
    3b20:	10bfffc4 	addi	r2,r2,-1
    3b24:	d8800515 	stw	r2,20(sp)
    3b28:	183f761e 	bne	r3,zero,3904 <_dtoa_r+0xdd0>
    3b2c:	d9000c17 	ldw	r4,48(sp)
    3b30:	0101730e 	bge	zero,r4,4100 <_dtoa_r+0x15cc>
    3b34:	d9000615 	stw	r4,24(sp)
    3b38:	003ed006 	br	367c <_dtoa_r+0xb48>
    3b3c:	00800084 	movi	r2,2
    3b40:	3081861e 	bne	r6,r2,415c <_dtoa_r+0x1628>
    3b44:	d8000b15 	stw	zero,44(sp)
    3b48:	003f3c06 	br	383c <_dtoa_r+0xd08>
    3b4c:	dc000917 	ldw	r16,36(sp)
    3b50:	003e9206 	br	359c <_dtoa_r+0xa68>
    3b54:	d9c00317 	ldw	r7,12(sp)
    3b58:	00800084 	movi	r2,2
    3b5c:	11fec50e 	bge	r2,r7,3674 <_dtoa_r+0xb40>
    3b60:	d9000617 	ldw	r4,24(sp)
    3b64:	20013c1e 	bne	r4,zero,4058 <_dtoa_r+0x1524>
    3b68:	a80b883a 	mov	r5,r21
    3b6c:	000f883a 	mov	r7,zero
    3b70:	01800144 	movi	r6,5
    3b74:	e009883a 	mov	r4,fp
    3b78:	00062a00 	call	62a0 <__multadd>
    3b7c:	100b883a 	mov	r5,r2
    3b80:	8009883a 	mov	r4,r16
    3b84:	102b883a 	mov	r21,r2
    3b88:	0006a980 	call	6a98 <__mcmp>
    3b8c:	dc000915 	stw	r16,36(sp)
    3b90:	00bf410e 	bge	zero,r2,3898 <_dtoa_r+0xd64>
    3b94:	d9c00717 	ldw	r7,28(sp)
    3b98:	00800c44 	movi	r2,49
    3b9c:	38800005 	stb	r2,0(r7)
    3ba0:	d8800517 	ldw	r2,20(sp)
    3ba4:	3dc00044 	addi	r23,r7,1
    3ba8:	10800044 	addi	r2,r2,1
    3bac:	d8800515 	stw	r2,20(sp)
    3bb0:	003f3d06 	br	38a8 <_dtoa_r+0xd74>
    3bb4:	d9800517 	ldw	r6,20(sp)
    3bb8:	d9c00717 	ldw	r7,28(sp)
    3bbc:	00800c44 	movi	r2,49
    3bc0:	31800044 	addi	r6,r6,1
    3bc4:	d9800515 	stw	r6,20(sp)
    3bc8:	38800005 	stb	r2,0(r7)
    3bcc:	003edf06 	br	374c <_dtoa_r+0xc18>
    3bd0:	d8000b15 	stw	zero,44(sp)
    3bd4:	003c9f06 	br	2e54 <_dtoa_r+0x320>
    3bd8:	903e7e1e 	bne	r18,zero,35d4 <_dtoa_r+0xaa0>
    3bdc:	00800434 	movhi	r2,16
    3be0:	10bfffc4 	addi	r2,r2,-1
    3be4:	9884703a 	and	r2,r19,r2
    3be8:	1000ea1e 	bne	r2,zero,3f94 <_dtoa_r+0x1460>
    3bec:	9cdffc2c 	andhi	r19,r19,32752
    3bf0:	9800e826 	beq	r19,zero,3f94 <_dtoa_r+0x1460>
    3bf4:	d9c00817 	ldw	r7,32(sp)
    3bf8:	b5800044 	addi	r22,r22,1
    3bfc:	04c00044 	movi	r19,1
    3c00:	39c00044 	addi	r7,r7,1
    3c04:	d9c00815 	stw	r7,32(sp)
    3c08:	d8800d17 	ldw	r2,52(sp)
    3c0c:	103e721e 	bne	r2,zero,35d8 <_dtoa_r+0xaa4>
    3c10:	00800044 	movi	r2,1
    3c14:	003e7906 	br	35fc <_dtoa_r+0xac8>
    3c18:	8009883a 	mov	r4,r16
    3c1c:	000ca700 	call	ca70 <__floatsidf>
    3c20:	d9800f17 	ldw	r6,60(sp)
    3c24:	d9c01017 	ldw	r7,64(sp)
    3c28:	1009883a 	mov	r4,r2
    3c2c:	180b883a 	mov	r5,r3
    3c30:	000b9dc0 	call	b9dc <__muldf3>
    3c34:	000d883a 	mov	r6,zero
    3c38:	01d00734 	movhi	r7,16412
    3c3c:	1009883a 	mov	r4,r2
    3c40:	180b883a 	mov	r5,r3
    3c44:	000a5f00 	call	a5f0 <__adddf3>
    3c48:	047f3034 	movhi	r17,64704
    3c4c:	1021883a 	mov	r16,r2
    3c50:	1c63883a 	add	r17,r3,r17
    3c54:	d9000f17 	ldw	r4,60(sp)
    3c58:	d9401017 	ldw	r5,64(sp)
    3c5c:	000d883a 	mov	r6,zero
    3c60:	01d00534 	movhi	r7,16404
    3c64:	000c0f40 	call	c0f4 <__subdf3>
    3c68:	800d883a 	mov	r6,r16
    3c6c:	880f883a 	mov	r7,r17
    3c70:	1009883a 	mov	r4,r2
    3c74:	180b883a 	mov	r5,r3
    3c78:	102b883a 	mov	r21,r2
    3c7c:	1829883a 	mov	r20,r3
    3c80:	000b80c0 	call	b80c <__gedf2>
    3c84:	00806c16 	blt	zero,r2,3e38 <_dtoa_r+0x1304>
    3c88:	89e0003c 	xorhi	r7,r17,32768
    3c8c:	800d883a 	mov	r6,r16
    3c90:	a809883a 	mov	r4,r21
    3c94:	a00b883a 	mov	r5,r20
    3c98:	000b8e80 	call	b8e8 <__ledf2>
    3c9c:	103d7e0e 	bge	r2,zero,3298 <_dtoa_r+0x764>
    3ca0:	002b883a 	mov	r21,zero
    3ca4:	0023883a 	mov	r17,zero
    3ca8:	003efb06 	br	3898 <_dtoa_r+0xd64>
    3cac:	d8800717 	ldw	r2,28(sp)
    3cb0:	003bd006 	br	2bf4 <_dtoa_r+0xc0>
    3cb4:	d9000a17 	ldw	r4,40(sp)
    3cb8:	d9800d17 	ldw	r6,52(sp)
    3cbc:	dd400a15 	stw	r21,40(sp)
    3cc0:	a905c83a 	sub	r2,r21,r4
    3cc4:	308d883a 	add	r6,r6,r2
    3cc8:	d9800d15 	stw	r6,52(sp)
    3ccc:	002b883a 	mov	r21,zero
    3cd0:	003e0606 	br	34ec <_dtoa_r+0x9b8>
    3cd4:	9023883a 	mov	r17,r18
    3cd8:	9829883a 	mov	r20,r19
    3cdc:	04000084 	movi	r16,2
    3ce0:	003c9206 	br	2f2c <_dtoa_r+0x3f8>
    3ce4:	04000044 	movi	r16,1
    3ce8:	dc000c15 	stw	r16,48(sp)
    3cec:	dc000615 	stw	r16,24(sp)
    3cf0:	dc002215 	stw	r16,136(sp)
    3cf4:	e0001115 	stw	zero,68(fp)
    3cf8:	000b883a 	mov	r5,zero
    3cfc:	003c6906 	br	2ea4 <_dtoa_r+0x370>
    3d00:	3021883a 	mov	r16,r6
    3d04:	003ffb06 	br	3cf4 <_dtoa_r+0x11c0>
    3d08:	1000021e 	bne	r2,zero,3d14 <_dtoa_r+0x11e0>
    3d0c:	4200004c 	andi	r8,r8,1
    3d10:	403e7d1e 	bne	r8,zero,3708 <_dtoa_r+0xbd4>
    3d14:	01000c04 	movi	r4,48
    3d18:	00000106 	br	3d20 <_dtoa_r+0x11ec>
    3d1c:	102f883a 	mov	r23,r2
    3d20:	b8bfffc4 	addi	r2,r23,-1
    3d24:	10c00007 	ldb	r3,0(r2)
    3d28:	193ffc26 	beq	r3,r4,3d1c <_dtoa_r+0x11e8>
    3d2c:	003e8706 	br	374c <_dtoa_r+0xc18>
    3d30:	d8800517 	ldw	r2,20(sp)
    3d34:	00a3c83a 	sub	r17,zero,r2
    3d38:	8800a426 	beq	r17,zero,3fcc <_dtoa_r+0x1498>
    3d3c:	888003cc 	andi	r2,r17,15
    3d40:	100490fa 	slli	r2,r2,3
    3d44:	00c00074 	movhi	r3,1
    3d48:	18fe8f04 	addi	r3,r3,-1476
    3d4c:	1885883a 	add	r2,r3,r2
    3d50:	11800017 	ldw	r6,0(r2)
    3d54:	11c00117 	ldw	r7,4(r2)
    3d58:	9009883a 	mov	r4,r18
    3d5c:	980b883a 	mov	r5,r19
    3d60:	8823d13a 	srai	r17,r17,4
    3d64:	000b9dc0 	call	b9dc <__muldf3>
    3d68:	d8800f15 	stw	r2,60(sp)
    3d6c:	d8c01015 	stw	r3,64(sp)
    3d70:	8800e826 	beq	r17,zero,4114 <_dtoa_r+0x15e0>
    3d74:	05000074 	movhi	r20,1
    3d78:	a53e8504 	addi	r20,r20,-1516
    3d7c:	04000084 	movi	r16,2
    3d80:	8980004c 	andi	r6,r17,1
    3d84:	1009883a 	mov	r4,r2
    3d88:	8823d07a 	srai	r17,r17,1
    3d8c:	180b883a 	mov	r5,r3
    3d90:	30000426 	beq	r6,zero,3da4 <_dtoa_r+0x1270>
    3d94:	a1800017 	ldw	r6,0(r20)
    3d98:	a1c00117 	ldw	r7,4(r20)
    3d9c:	84000044 	addi	r16,r16,1
    3da0:	000b9dc0 	call	b9dc <__muldf3>
    3da4:	a5000204 	addi	r20,r20,8
    3da8:	883ff51e 	bne	r17,zero,3d80 <_dtoa_r+0x124c>
    3dac:	d8800f15 	stw	r2,60(sp)
    3db0:	d8c01015 	stw	r3,64(sp)
    3db4:	003c7606 	br	2f90 <_dtoa_r+0x45c>
    3db8:	00c00c04 	movi	r3,48
    3dbc:	10c00005 	stb	r3,0(r2)
    3dc0:	d8c00517 	ldw	r3,20(sp)
    3dc4:	bd3fffc3 	ldbu	r20,-1(r23)
    3dc8:	18c00044 	addi	r3,r3,1
    3dcc:	d8c00515 	stw	r3,20(sp)
    3dd0:	003db906 	br	34b8 <_dtoa_r+0x984>
    3dd4:	89400117 	ldw	r5,4(r17)
    3dd8:	e009883a 	mov	r4,fp
    3ddc:	00061d00 	call	61d0 <_Balloc>
    3de0:	89800417 	ldw	r6,16(r17)
    3de4:	89400304 	addi	r5,r17,12
    3de8:	11000304 	addi	r4,r2,12
    3dec:	31800084 	addi	r6,r6,2
    3df0:	318d883a 	add	r6,r6,r6
    3df4:	318d883a 	add	r6,r6,r6
    3df8:	1027883a 	mov	r19,r2
    3dfc:	0005e040 	call	5e04 <memcpy>
    3e00:	01800044 	movi	r6,1
    3e04:	980b883a 	mov	r5,r19
    3e08:	e009883a 	mov	r4,fp
    3e0c:	00069500 	call	6950 <__lshift>
    3e10:	1029883a 	mov	r20,r2
    3e14:	003ecc06 	br	3948 <_dtoa_r+0xe14>
    3e18:	00800e44 	movi	r2,57
    3e1c:	90809026 	beq	r18,r2,4060 <_dtoa_r+0x152c>
    3e20:	92000044 	addi	r8,r18,1
    3e24:	003f1f06 	br	3aa4 <_dtoa_r+0xf70>
    3e28:	9011883a 	mov	r8,r18
    3e2c:	8825883a 	mov	r18,r17
    3e30:	a023883a 	mov	r17,r20
    3e34:	003e2906 	br	36dc <_dtoa_r+0xba8>
    3e38:	002b883a 	mov	r21,zero
    3e3c:	0023883a 	mov	r17,zero
    3e40:	003f5406 	br	3b94 <_dtoa_r+0x1060>
    3e44:	61bfffc4 	addi	r6,r12,-1
    3e48:	300490fa 	slli	r2,r6,3
    3e4c:	00c00074 	movhi	r3,1
    3e50:	18fe8f04 	addi	r3,r3,-1476
    3e54:	1885883a 	add	r2,r3,r2
    3e58:	11000017 	ldw	r4,0(r2)
    3e5c:	11400117 	ldw	r5,4(r2)
    3e60:	d8800717 	ldw	r2,28(sp)
    3e64:	880f883a 	mov	r7,r17
    3e68:	d9801215 	stw	r6,72(sp)
    3e6c:	800d883a 	mov	r6,r16
    3e70:	db001615 	stw	r12,88(sp)
    3e74:	15c00044 	addi	r23,r2,1
    3e78:	000b9dc0 	call	b9dc <__muldf3>
    3e7c:	d9401017 	ldw	r5,64(sp)
    3e80:	d9000f17 	ldw	r4,60(sp)
    3e84:	d8c01515 	stw	r3,84(sp)
    3e88:	d8801415 	stw	r2,80(sp)
    3e8c:	000c9f00 	call	c9f0 <__fixdfsi>
    3e90:	1009883a 	mov	r4,r2
    3e94:	1021883a 	mov	r16,r2
    3e98:	000ca700 	call	ca70 <__floatsidf>
    3e9c:	d9000f17 	ldw	r4,60(sp)
    3ea0:	d9401017 	ldw	r5,64(sp)
    3ea4:	100d883a 	mov	r6,r2
    3ea8:	180f883a 	mov	r7,r3
    3eac:	000c0f40 	call	c0f4 <__subdf3>
    3eb0:	1829883a 	mov	r20,r3
    3eb4:	d8c00717 	ldw	r3,28(sp)
    3eb8:	84000c04 	addi	r16,r16,48
    3ebc:	1023883a 	mov	r17,r2
    3ec0:	1c000005 	stb	r16,0(r3)
    3ec4:	db001617 	ldw	r12,88(sp)
    3ec8:	00800044 	movi	r2,1
    3ecc:	60802226 	beq	r12,r2,3f58 <_dtoa_r+0x1424>
    3ed0:	d9c00717 	ldw	r7,28(sp)
    3ed4:	8805883a 	mov	r2,r17
    3ed8:	b82b883a 	mov	r21,r23
    3edc:	3b19883a 	add	r12,r7,r12
    3ee0:	6023883a 	mov	r17,r12
    3ee4:	a007883a 	mov	r3,r20
    3ee8:	dc800f15 	stw	r18,60(sp)
    3eec:	000d883a 	mov	r6,zero
    3ef0:	01d00934 	movhi	r7,16420
    3ef4:	1009883a 	mov	r4,r2
    3ef8:	180b883a 	mov	r5,r3
    3efc:	000b9dc0 	call	b9dc <__muldf3>
    3f00:	180b883a 	mov	r5,r3
    3f04:	1009883a 	mov	r4,r2
    3f08:	1829883a 	mov	r20,r3
    3f0c:	1025883a 	mov	r18,r2
    3f10:	000c9f00 	call	c9f0 <__fixdfsi>
    3f14:	1009883a 	mov	r4,r2
    3f18:	1021883a 	mov	r16,r2
    3f1c:	000ca700 	call	ca70 <__floatsidf>
    3f20:	100d883a 	mov	r6,r2
    3f24:	180f883a 	mov	r7,r3
    3f28:	9009883a 	mov	r4,r18
    3f2c:	a00b883a 	mov	r5,r20
    3f30:	84000c04 	addi	r16,r16,48
    3f34:	000c0f40 	call	c0f4 <__subdf3>
    3f38:	ad400044 	addi	r21,r21,1
    3f3c:	ac3fffc5 	stb	r16,-1(r21)
    3f40:	ac7fea1e 	bne	r21,r17,3eec <_dtoa_r+0x13b8>
    3f44:	1023883a 	mov	r17,r2
    3f48:	d8801217 	ldw	r2,72(sp)
    3f4c:	dc800f17 	ldw	r18,60(sp)
    3f50:	1829883a 	mov	r20,r3
    3f54:	b8af883a 	add	r23,r23,r2
    3f58:	d9001417 	ldw	r4,80(sp)
    3f5c:	d9401517 	ldw	r5,84(sp)
    3f60:	000d883a 	mov	r6,zero
    3f64:	01cff834 	movhi	r7,16352
    3f68:	000a5f00 	call	a5f0 <__adddf3>
    3f6c:	880d883a 	mov	r6,r17
    3f70:	a00f883a 	mov	r7,r20
    3f74:	1009883a 	mov	r4,r2
    3f78:	180b883a 	mov	r5,r3
    3f7c:	000b8e80 	call	b8e8 <__ledf2>
    3f80:	10003e0e 	bge	r2,zero,407c <_dtoa_r+0x1548>
    3f84:	d9001317 	ldw	r4,76(sp)
    3f88:	bd3fffc3 	ldbu	r20,-1(r23)
    3f8c:	d9000515 	stw	r4,20(sp)
    3f90:	003d3b06 	br	3480 <_dtoa_r+0x94c>
    3f94:	0027883a 	mov	r19,zero
    3f98:	003f1b06 	br	3c08 <_dtoa_r+0x10d4>
    3f9c:	d8800817 	ldw	r2,32(sp)
    3fa0:	11e9c83a 	sub	r20,r2,r7
    3fa4:	0005883a 	mov	r2,zero
    3fa8:	003d5406 	br	34fc <_dtoa_r+0x9c8>
    3fac:	00800044 	movi	r2,1
    3fb0:	003dc706 	br	36d0 <_dtoa_r+0xb9c>
    3fb4:	d8c00217 	ldw	r3,8(sp)
    3fb8:	00800d84 	movi	r2,54
    3fbc:	dd400a17 	ldw	r21,40(sp)
    3fc0:	10c5c83a 	sub	r2,r2,r3
    3fc4:	dd000817 	ldw	r20,32(sp)
    3fc8:	003d4c06 	br	34fc <_dtoa_r+0x9c8>
    3fcc:	dc800f15 	stw	r18,60(sp)
    3fd0:	dcc01015 	stw	r19,64(sp)
    3fd4:	04000084 	movi	r16,2
    3fd8:	003bed06 	br	2f90 <_dtoa_r+0x45c>
    3fdc:	d9000617 	ldw	r4,24(sp)
    3fe0:	203f0d26 	beq	r4,zero,3c18 <_dtoa_r+0x10e4>
    3fe4:	d9800c17 	ldw	r6,48(sp)
    3fe8:	01bcab0e 	bge	zero,r6,3298 <_dtoa_r+0x764>
    3fec:	d9401017 	ldw	r5,64(sp)
    3ff0:	d9000f17 	ldw	r4,60(sp)
    3ff4:	000d883a 	mov	r6,zero
    3ff8:	01d00934 	movhi	r7,16420
    3ffc:	000b9dc0 	call	b9dc <__muldf3>
    4000:	81000044 	addi	r4,r16,1
    4004:	d8800f15 	stw	r2,60(sp)
    4008:	d8c01015 	stw	r3,64(sp)
    400c:	000ca700 	call	ca70 <__floatsidf>
    4010:	d9800f17 	ldw	r6,60(sp)
    4014:	d9c01017 	ldw	r7,64(sp)
    4018:	1009883a 	mov	r4,r2
    401c:	180b883a 	mov	r5,r3
    4020:	000b9dc0 	call	b9dc <__muldf3>
    4024:	01d00734 	movhi	r7,16412
    4028:	000d883a 	mov	r6,zero
    402c:	1009883a 	mov	r4,r2
    4030:	180b883a 	mov	r5,r3
    4034:	000a5f00 	call	a5f0 <__adddf3>
    4038:	d9c00517 	ldw	r7,20(sp)
    403c:	047f3034 	movhi	r17,64704
    4040:	1021883a 	mov	r16,r2
    4044:	39ffffc4 	addi	r7,r7,-1
    4048:	d9c01315 	stw	r7,76(sp)
    404c:	1c63883a 	add	r17,r3,r17
    4050:	db000c17 	ldw	r12,48(sp)
    4054:	003bea06 	br	3000 <_dtoa_r+0x4cc>
    4058:	dc000915 	stw	r16,36(sp)
    405c:	003e0e06 	br	3898 <_dtoa_r+0xd64>
    4060:	01000e44 	movi	r4,57
    4064:	8825883a 	mov	r18,r17
    4068:	9dc00044 	addi	r23,r19,1
    406c:	99000005 	stb	r4,0(r19)
    4070:	a023883a 	mov	r17,r20
    4074:	dc000915 	stw	r16,36(sp)
    4078:	003da406 	br	370c <_dtoa_r+0xbd8>
    407c:	d9801417 	ldw	r6,80(sp)
    4080:	d9c01517 	ldw	r7,84(sp)
    4084:	0009883a 	mov	r4,zero
    4088:	014ff834 	movhi	r5,16352
    408c:	000c0f40 	call	c0f4 <__subdf3>
    4090:	880d883a 	mov	r6,r17
    4094:	a00f883a 	mov	r7,r20
    4098:	1009883a 	mov	r4,r2
    409c:	180b883a 	mov	r5,r3
    40a0:	000b80c0 	call	b80c <__gedf2>
    40a4:	00bc7c0e 	bge	zero,r2,3298 <_dtoa_r+0x764>
    40a8:	01000c04 	movi	r4,48
    40ac:	00000106 	br	40b4 <_dtoa_r+0x1580>
    40b0:	102f883a 	mov	r23,r2
    40b4:	b8bfffc4 	addi	r2,r23,-1
    40b8:	10c00007 	ldb	r3,0(r2)
    40bc:	193ffc26 	beq	r3,r4,40b0 <_dtoa_r+0x157c>
    40c0:	d9801317 	ldw	r6,76(sp)
    40c4:	d9800515 	stw	r6,20(sp)
    40c8:	003c4406 	br	31dc <_dtoa_r+0x6a8>
    40cc:	d9801317 	ldw	r6,76(sp)
    40d0:	d9800515 	stw	r6,20(sp)
    40d4:	003cea06 	br	3480 <_dtoa_r+0x94c>
    40d8:	dd800f17 	ldw	r22,60(sp)
    40dc:	dcc01017 	ldw	r19,64(sp)
    40e0:	dc801217 	ldw	r18,72(sp)
    40e4:	003c6c06 	br	3298 <_dtoa_r+0x764>
    40e8:	903e031e 	bne	r18,zero,38f8 <_dtoa_r+0xdc4>
    40ec:	003ebb06 	br	3bdc <_dtoa_r+0x10a8>
    40f0:	103e6c1e 	bne	r2,zero,3aa4 <_dtoa_r+0xf70>
    40f4:	4080004c 	andi	r2,r8,1
    40f8:	103e6a26 	beq	r2,zero,3aa4 <_dtoa_r+0xf70>
    40fc:	003e6606 	br	3a98 <_dtoa_r+0xf64>
    4100:	d8c00317 	ldw	r3,12(sp)
    4104:	00800084 	movi	r2,2
    4108:	10c02916 	blt	r2,r3,41b0 <_dtoa_r+0x167c>
    410c:	d9000c17 	ldw	r4,48(sp)
    4110:	003e8806 	br	3b34 <_dtoa_r+0x1000>
    4114:	04000084 	movi	r16,2
    4118:	003b9d06 	br	2f90 <_dtoa_r+0x45c>
    411c:	d9001317 	ldw	r4,76(sp)
    4120:	d9000515 	stw	r4,20(sp)
    4124:	003cd606 	br	3480 <_dtoa_r+0x94c>
    4128:	d8801317 	ldw	r2,76(sp)
    412c:	d8800515 	stw	r2,20(sp)
    4130:	003c2a06 	br	31dc <_dtoa_r+0x6a8>
    4134:	d9800317 	ldw	r6,12(sp)
    4138:	00800084 	movi	r2,2
    413c:	11801516 	blt	r2,r6,4194 <_dtoa_r+0x1660>
    4140:	d9c00c17 	ldw	r7,48(sp)
    4144:	d9c00615 	stw	r7,24(sp)
    4148:	003df706 	br	3928 <_dtoa_r+0xdf4>
    414c:	193d3926 	beq	r3,r4,3634 <_dtoa_r+0xb00>
    4150:	00c00f04 	movi	r3,60
    4154:	1885c83a 	sub	r2,r3,r2
    4158:	003ddf06 	br	38d8 <_dtoa_r+0xda4>
    415c:	e009883a 	mov	r4,fp
    4160:	e0001115 	stw	zero,68(fp)
    4164:	000b883a 	mov	r5,zero
    4168:	00061d00 	call	61d0 <_Balloc>
    416c:	d8800715 	stw	r2,28(sp)
    4170:	d8c00717 	ldw	r3,28(sp)
    4174:	00bfffc4 	movi	r2,-1
    4178:	01000044 	movi	r4,1
    417c:	d8800c15 	stw	r2,48(sp)
    4180:	e0c01015 	stw	r3,64(fp)
    4184:	d9000b15 	stw	r4,44(sp)
    4188:	d8800615 	stw	r2,24(sp)
    418c:	d8002215 	stw	zero,136(sp)
    4190:	003c4106 	br	3298 <_dtoa_r+0x764>
    4194:	d8c00c17 	ldw	r3,48(sp)
    4198:	d8c00615 	stw	r3,24(sp)
    419c:	003e7006 	br	3b60 <_dtoa_r+0x102c>
    41a0:	04400044 	movi	r17,1
    41a4:	003b2006 	br	2e28 <_dtoa_r+0x2f4>
    41a8:	000b883a 	mov	r5,zero
    41ac:	003b3d06 	br	2ea4 <_dtoa_r+0x370>
    41b0:	d8800c17 	ldw	r2,48(sp)
    41b4:	d8800615 	stw	r2,24(sp)
    41b8:	003e6906 	br	3b60 <_dtoa_r+0x102c>

000041bc <__sflush_r>:
    41bc:	2880030b 	ldhu	r2,12(r5)
    41c0:	defffb04 	addi	sp,sp,-20
    41c4:	dcc00315 	stw	r19,12(sp)
    41c8:	dc400115 	stw	r17,4(sp)
    41cc:	dfc00415 	stw	ra,16(sp)
    41d0:	dc800215 	stw	r18,8(sp)
    41d4:	dc000015 	stw	r16,0(sp)
    41d8:	10c0020c 	andi	r3,r2,8
    41dc:	2823883a 	mov	r17,r5
    41e0:	2027883a 	mov	r19,r4
    41e4:	1800311e 	bne	r3,zero,42ac <__sflush_r+0xf0>
    41e8:	28c00117 	ldw	r3,4(r5)
    41ec:	10820014 	ori	r2,r2,2048
    41f0:	2880030d 	sth	r2,12(r5)
    41f4:	00c04b0e 	bge	zero,r3,4324 <__sflush_r+0x168>
    41f8:	8a000a17 	ldw	r8,40(r17)
    41fc:	40002326 	beq	r8,zero,428c <__sflush_r+0xd0>
    4200:	9c000017 	ldw	r16,0(r19)
    4204:	10c4000c 	andi	r3,r2,4096
    4208:	98000015 	stw	zero,0(r19)
    420c:	18004826 	beq	r3,zero,4330 <__sflush_r+0x174>
    4210:	89801417 	ldw	r6,80(r17)
    4214:	10c0010c 	andi	r3,r2,4
    4218:	18000626 	beq	r3,zero,4234 <__sflush_r+0x78>
    421c:	88c00117 	ldw	r3,4(r17)
    4220:	88800c17 	ldw	r2,48(r17)
    4224:	30cdc83a 	sub	r6,r6,r3
    4228:	10000226 	beq	r2,zero,4234 <__sflush_r+0x78>
    422c:	88800f17 	ldw	r2,60(r17)
    4230:	308dc83a 	sub	r6,r6,r2
    4234:	89400717 	ldw	r5,28(r17)
    4238:	000f883a 	mov	r7,zero
    423c:	9809883a 	mov	r4,r19
    4240:	403ee83a 	callr	r8
    4244:	00ffffc4 	movi	r3,-1
    4248:	10c04426 	beq	r2,r3,435c <__sflush_r+0x1a0>
    424c:	88c0030b 	ldhu	r3,12(r17)
    4250:	89000417 	ldw	r4,16(r17)
    4254:	88000115 	stw	zero,4(r17)
    4258:	197dffcc 	andi	r5,r3,63487
    425c:	8940030d 	sth	r5,12(r17)
    4260:	89000015 	stw	r4,0(r17)
    4264:	18c4000c 	andi	r3,r3,4096
    4268:	18002c1e 	bne	r3,zero,431c <__sflush_r+0x160>
    426c:	89400c17 	ldw	r5,48(r17)
    4270:	9c000015 	stw	r16,0(r19)
    4274:	28000526 	beq	r5,zero,428c <__sflush_r+0xd0>
    4278:	88801004 	addi	r2,r17,64
    427c:	28800226 	beq	r5,r2,4288 <__sflush_r+0xcc>
    4280:	9809883a 	mov	r4,r19
    4284:	00049280 	call	4928 <_free_r>
    4288:	88000c15 	stw	zero,48(r17)
    428c:	0005883a 	mov	r2,zero
    4290:	dfc00417 	ldw	ra,16(sp)
    4294:	dcc00317 	ldw	r19,12(sp)
    4298:	dc800217 	ldw	r18,8(sp)
    429c:	dc400117 	ldw	r17,4(sp)
    42a0:	dc000017 	ldw	r16,0(sp)
    42a4:	dec00504 	addi	sp,sp,20
    42a8:	f800283a 	ret
    42ac:	2c800417 	ldw	r18,16(r5)
    42b0:	903ff626 	beq	r18,zero,428c <__sflush_r+0xd0>
    42b4:	2c000017 	ldw	r16,0(r5)
    42b8:	108000cc 	andi	r2,r2,3
    42bc:	2c800015 	stw	r18,0(r5)
    42c0:	84a1c83a 	sub	r16,r16,r18
    42c4:	1000131e 	bne	r2,zero,4314 <__sflush_r+0x158>
    42c8:	28800517 	ldw	r2,20(r5)
    42cc:	88800215 	stw	r2,8(r17)
    42d0:	04000316 	blt	zero,r16,42e0 <__sflush_r+0x124>
    42d4:	003fed06 	br	428c <__sflush_r+0xd0>
    42d8:	90a5883a 	add	r18,r18,r2
    42dc:	043feb0e 	bge	zero,r16,428c <__sflush_r+0xd0>
    42e0:	88800917 	ldw	r2,36(r17)
    42e4:	89400717 	ldw	r5,28(r17)
    42e8:	800f883a 	mov	r7,r16
    42ec:	900d883a 	mov	r6,r18
    42f0:	9809883a 	mov	r4,r19
    42f4:	103ee83a 	callr	r2
    42f8:	80a1c83a 	sub	r16,r16,r2
    42fc:	00bff616 	blt	zero,r2,42d8 <__sflush_r+0x11c>
    4300:	88c0030b 	ldhu	r3,12(r17)
    4304:	00bfffc4 	movi	r2,-1
    4308:	18c01014 	ori	r3,r3,64
    430c:	88c0030d 	sth	r3,12(r17)
    4310:	003fdf06 	br	4290 <__sflush_r+0xd4>
    4314:	0005883a 	mov	r2,zero
    4318:	003fec06 	br	42cc <__sflush_r+0x110>
    431c:	88801415 	stw	r2,80(r17)
    4320:	003fd206 	br	426c <__sflush_r+0xb0>
    4324:	28c00f17 	ldw	r3,60(r5)
    4328:	00ffb316 	blt	zero,r3,41f8 <__sflush_r+0x3c>
    432c:	003fd706 	br	428c <__sflush_r+0xd0>
    4330:	89400717 	ldw	r5,28(r17)
    4334:	000d883a 	mov	r6,zero
    4338:	01c00044 	movi	r7,1
    433c:	9809883a 	mov	r4,r19
    4340:	403ee83a 	callr	r8
    4344:	100d883a 	mov	r6,r2
    4348:	00bfffc4 	movi	r2,-1
    434c:	30801426 	beq	r6,r2,43a0 <__sflush_r+0x1e4>
    4350:	8880030b 	ldhu	r2,12(r17)
    4354:	8a000a17 	ldw	r8,40(r17)
    4358:	003fae06 	br	4214 <__sflush_r+0x58>
    435c:	98c00017 	ldw	r3,0(r19)
    4360:	183fba26 	beq	r3,zero,424c <__sflush_r+0x90>
    4364:	01000744 	movi	r4,29
    4368:	19000626 	beq	r3,r4,4384 <__sflush_r+0x1c8>
    436c:	01000584 	movi	r4,22
    4370:	19000426 	beq	r3,r4,4384 <__sflush_r+0x1c8>
    4374:	88c0030b 	ldhu	r3,12(r17)
    4378:	18c01014 	ori	r3,r3,64
    437c:	88c0030d 	sth	r3,12(r17)
    4380:	003fc306 	br	4290 <__sflush_r+0xd4>
    4384:	8880030b 	ldhu	r2,12(r17)
    4388:	88c00417 	ldw	r3,16(r17)
    438c:	88000115 	stw	zero,4(r17)
    4390:	10bdffcc 	andi	r2,r2,63487
    4394:	8880030d 	sth	r2,12(r17)
    4398:	88c00015 	stw	r3,0(r17)
    439c:	003fb306 	br	426c <__sflush_r+0xb0>
    43a0:	98800017 	ldw	r2,0(r19)
    43a4:	103fea26 	beq	r2,zero,4350 <__sflush_r+0x194>
    43a8:	00c00744 	movi	r3,29
    43ac:	10c00226 	beq	r2,r3,43b8 <__sflush_r+0x1fc>
    43b0:	00c00584 	movi	r3,22
    43b4:	10c0031e 	bne	r2,r3,43c4 <__sflush_r+0x208>
    43b8:	9c000015 	stw	r16,0(r19)
    43bc:	0005883a 	mov	r2,zero
    43c0:	003fb306 	br	4290 <__sflush_r+0xd4>
    43c4:	88c0030b 	ldhu	r3,12(r17)
    43c8:	3005883a 	mov	r2,r6
    43cc:	18c01014 	ori	r3,r3,64
    43d0:	88c0030d 	sth	r3,12(r17)
    43d4:	003fae06 	br	4290 <__sflush_r+0xd4>

000043d8 <_fflush_r>:
    43d8:	defffd04 	addi	sp,sp,-12
    43dc:	dc000115 	stw	r16,4(sp)
    43e0:	dfc00215 	stw	ra,8(sp)
    43e4:	2021883a 	mov	r16,r4
    43e8:	20000226 	beq	r4,zero,43f4 <_fflush_r+0x1c>
    43ec:	20800e17 	ldw	r2,56(r4)
    43f0:	10000c26 	beq	r2,zero,4424 <_fflush_r+0x4c>
    43f4:	2880030f 	ldh	r2,12(r5)
    43f8:	1000051e 	bne	r2,zero,4410 <_fflush_r+0x38>
    43fc:	0005883a 	mov	r2,zero
    4400:	dfc00217 	ldw	ra,8(sp)
    4404:	dc000117 	ldw	r16,4(sp)
    4408:	dec00304 	addi	sp,sp,12
    440c:	f800283a 	ret
    4410:	8009883a 	mov	r4,r16
    4414:	dfc00217 	ldw	ra,8(sp)
    4418:	dc000117 	ldw	r16,4(sp)
    441c:	dec00304 	addi	sp,sp,12
    4420:	00041bc1 	jmpi	41bc <__sflush_r>
    4424:	d9400015 	stw	r5,0(sp)
    4428:	00047b40 	call	47b4 <__sinit>
    442c:	d9400017 	ldw	r5,0(sp)
    4430:	003ff006 	br	43f4 <_fflush_r+0x1c>

00004434 <fflush>:
    4434:	20000526 	beq	r4,zero,444c <fflush+0x18>
    4438:	00800074 	movhi	r2,1
    443c:	1085cd04 	addi	r2,r2,5940
    4440:	200b883a 	mov	r5,r4
    4444:	11000017 	ldw	r4,0(r2)
    4448:	00043d81 	jmpi	43d8 <_fflush_r>
    444c:	00800074 	movhi	r2,1
    4450:	1085cc04 	addi	r2,r2,5936
    4454:	11000017 	ldw	r4,0(r2)
    4458:	01400034 	movhi	r5,0
    445c:	2950f604 	addi	r5,r5,17368
    4460:	00051b81 	jmpi	51b8 <_fwalk_reent>

00004464 <__fp_unlock>:
    4464:	0005883a 	mov	r2,zero
    4468:	f800283a 	ret

0000446c <_cleanup_r>:
    446c:	01400074 	movhi	r5,1
    4470:	29647404 	addi	r5,r5,-28208
    4474:	00051b81 	jmpi	51b8 <_fwalk_reent>

00004478 <__sinit.part.1>:
    4478:	defff704 	addi	sp,sp,-36
    447c:	00c00034 	movhi	r3,0
    4480:	dfc00815 	stw	ra,32(sp)
    4484:	ddc00715 	stw	r23,28(sp)
    4488:	dd800615 	stw	r22,24(sp)
    448c:	dd400515 	stw	r21,20(sp)
    4490:	dd000415 	stw	r20,16(sp)
    4494:	dcc00315 	stw	r19,12(sp)
    4498:	dc800215 	stw	r18,8(sp)
    449c:	dc400115 	stw	r17,4(sp)
    44a0:	dc000015 	stw	r16,0(sp)
    44a4:	18d11b04 	addi	r3,r3,17516
    44a8:	24000117 	ldw	r16,4(r4)
    44ac:	20c00f15 	stw	r3,60(r4)
    44b0:	2080bb04 	addi	r2,r4,748
    44b4:	00c000c4 	movi	r3,3
    44b8:	20c0b915 	stw	r3,740(r4)
    44bc:	2080ba15 	stw	r2,744(r4)
    44c0:	2000b815 	stw	zero,736(r4)
    44c4:	05c00204 	movi	r23,8
    44c8:	00800104 	movi	r2,4
    44cc:	2025883a 	mov	r18,r4
    44d0:	b80d883a 	mov	r6,r23
    44d4:	81001704 	addi	r4,r16,92
    44d8:	000b883a 	mov	r5,zero
    44dc:	80000015 	stw	zero,0(r16)
    44e0:	80000115 	stw	zero,4(r16)
    44e4:	80000215 	stw	zero,8(r16)
    44e8:	8080030d 	sth	r2,12(r16)
    44ec:	80001915 	stw	zero,100(r16)
    44f0:	8000038d 	sth	zero,14(r16)
    44f4:	80000415 	stw	zero,16(r16)
    44f8:	80000515 	stw	zero,20(r16)
    44fc:	80000615 	stw	zero,24(r16)
    4500:	00060a80 	call	60a8 <memset>
    4504:	05800034 	movhi	r22,0
    4508:	94400217 	ldw	r17,8(r18)
    450c:	05400034 	movhi	r21,0
    4510:	05000034 	movhi	r20,0
    4514:	04c00034 	movhi	r19,0
    4518:	b59dfe04 	addi	r22,r22,30712
    451c:	ad5e1504 	addi	r21,r21,30804
    4520:	a51e3404 	addi	r20,r20,30928
    4524:	9cde4b04 	addi	r19,r19,31020
    4528:	85800815 	stw	r22,32(r16)
    452c:	85400915 	stw	r21,36(r16)
    4530:	85000a15 	stw	r20,40(r16)
    4534:	84c00b15 	stw	r19,44(r16)
    4538:	84000715 	stw	r16,28(r16)
    453c:	00800284 	movi	r2,10
    4540:	8880030d 	sth	r2,12(r17)
    4544:	00800044 	movi	r2,1
    4548:	b80d883a 	mov	r6,r23
    454c:	89001704 	addi	r4,r17,92
    4550:	000b883a 	mov	r5,zero
    4554:	88000015 	stw	zero,0(r17)
    4558:	88000115 	stw	zero,4(r17)
    455c:	88000215 	stw	zero,8(r17)
    4560:	88001915 	stw	zero,100(r17)
    4564:	8880038d 	sth	r2,14(r17)
    4568:	88000415 	stw	zero,16(r17)
    456c:	88000515 	stw	zero,20(r17)
    4570:	88000615 	stw	zero,24(r17)
    4574:	00060a80 	call	60a8 <memset>
    4578:	94000317 	ldw	r16,12(r18)
    457c:	00800484 	movi	r2,18
    4580:	8c400715 	stw	r17,28(r17)
    4584:	8d800815 	stw	r22,32(r17)
    4588:	8d400915 	stw	r21,36(r17)
    458c:	8d000a15 	stw	r20,40(r17)
    4590:	8cc00b15 	stw	r19,44(r17)
    4594:	8080030d 	sth	r2,12(r16)
    4598:	00800084 	movi	r2,2
    459c:	80000015 	stw	zero,0(r16)
    45a0:	80000115 	stw	zero,4(r16)
    45a4:	80000215 	stw	zero,8(r16)
    45a8:	80001915 	stw	zero,100(r16)
    45ac:	8080038d 	sth	r2,14(r16)
    45b0:	80000415 	stw	zero,16(r16)
    45b4:	80000515 	stw	zero,20(r16)
    45b8:	80000615 	stw	zero,24(r16)
    45bc:	b80d883a 	mov	r6,r23
    45c0:	000b883a 	mov	r5,zero
    45c4:	81001704 	addi	r4,r16,92
    45c8:	00060a80 	call	60a8 <memset>
    45cc:	00800044 	movi	r2,1
    45d0:	84000715 	stw	r16,28(r16)
    45d4:	85800815 	stw	r22,32(r16)
    45d8:	85400915 	stw	r21,36(r16)
    45dc:	85000a15 	stw	r20,40(r16)
    45e0:	84c00b15 	stw	r19,44(r16)
    45e4:	90800e15 	stw	r2,56(r18)
    45e8:	dfc00817 	ldw	ra,32(sp)
    45ec:	ddc00717 	ldw	r23,28(sp)
    45f0:	dd800617 	ldw	r22,24(sp)
    45f4:	dd400517 	ldw	r21,20(sp)
    45f8:	dd000417 	ldw	r20,16(sp)
    45fc:	dcc00317 	ldw	r19,12(sp)
    4600:	dc800217 	ldw	r18,8(sp)
    4604:	dc400117 	ldw	r17,4(sp)
    4608:	dc000017 	ldw	r16,0(sp)
    460c:	dec00904 	addi	sp,sp,36
    4610:	f800283a 	ret

00004614 <__fp_lock>:
    4614:	0005883a 	mov	r2,zero
    4618:	f800283a 	ret

0000461c <__sfmoreglue>:
    461c:	defffc04 	addi	sp,sp,-16
    4620:	dc400115 	stw	r17,4(sp)
    4624:	2c7fffc4 	addi	r17,r5,-1
    4628:	8c401a24 	muli	r17,r17,104
    462c:	dc800215 	stw	r18,8(sp)
    4630:	2825883a 	mov	r18,r5
    4634:	89401d04 	addi	r5,r17,116
    4638:	dc000015 	stw	r16,0(sp)
    463c:	dfc00315 	stw	ra,12(sp)
    4640:	00055140 	call	5514 <_malloc_r>
    4644:	1021883a 	mov	r16,r2
    4648:	10000726 	beq	r2,zero,4668 <__sfmoreglue+0x4c>
    464c:	11000304 	addi	r4,r2,12
    4650:	10000015 	stw	zero,0(r2)
    4654:	14800115 	stw	r18,4(r2)
    4658:	11000215 	stw	r4,8(r2)
    465c:	89801a04 	addi	r6,r17,104
    4660:	000b883a 	mov	r5,zero
    4664:	00060a80 	call	60a8 <memset>
    4668:	8005883a 	mov	r2,r16
    466c:	dfc00317 	ldw	ra,12(sp)
    4670:	dc800217 	ldw	r18,8(sp)
    4674:	dc400117 	ldw	r17,4(sp)
    4678:	dc000017 	ldw	r16,0(sp)
    467c:	dec00404 	addi	sp,sp,16
    4680:	f800283a 	ret

00004684 <__sfp>:
    4684:	defffb04 	addi	sp,sp,-20
    4688:	dc000015 	stw	r16,0(sp)
    468c:	04000074 	movhi	r16,1
    4690:	8405cc04 	addi	r16,r16,5936
    4694:	dcc00315 	stw	r19,12(sp)
    4698:	2027883a 	mov	r19,r4
    469c:	81000017 	ldw	r4,0(r16)
    46a0:	dfc00415 	stw	ra,16(sp)
    46a4:	dc800215 	stw	r18,8(sp)
    46a8:	20800e17 	ldw	r2,56(r4)
    46ac:	dc400115 	stw	r17,4(sp)
    46b0:	1000021e 	bne	r2,zero,46bc <__sfp+0x38>
    46b4:	00044780 	call	4478 <__sinit.part.1>
    46b8:	81000017 	ldw	r4,0(r16)
    46bc:	2480b804 	addi	r18,r4,736
    46c0:	047fffc4 	movi	r17,-1
    46c4:	91000117 	ldw	r4,4(r18)
    46c8:	94000217 	ldw	r16,8(r18)
    46cc:	213fffc4 	addi	r4,r4,-1
    46d0:	20000a16 	blt	r4,zero,46fc <__sfp+0x78>
    46d4:	8080030f 	ldh	r2,12(r16)
    46d8:	10000c26 	beq	r2,zero,470c <__sfp+0x88>
    46dc:	80c01d04 	addi	r3,r16,116
    46e0:	00000206 	br	46ec <__sfp+0x68>
    46e4:	18bfe60f 	ldh	r2,-104(r3)
    46e8:	10000826 	beq	r2,zero,470c <__sfp+0x88>
    46ec:	213fffc4 	addi	r4,r4,-1
    46f0:	1c3ffd04 	addi	r16,r3,-12
    46f4:	18c01a04 	addi	r3,r3,104
    46f8:	247ffa1e 	bne	r4,r17,46e4 <__sfp+0x60>
    46fc:	90800017 	ldw	r2,0(r18)
    4700:	10001d26 	beq	r2,zero,4778 <__sfp+0xf4>
    4704:	1025883a 	mov	r18,r2
    4708:	003fee06 	br	46c4 <__sfp+0x40>
    470c:	00bfffc4 	movi	r2,-1
    4710:	8080038d 	sth	r2,14(r16)
    4714:	00800044 	movi	r2,1
    4718:	8080030d 	sth	r2,12(r16)
    471c:	80001915 	stw	zero,100(r16)
    4720:	80000015 	stw	zero,0(r16)
    4724:	80000215 	stw	zero,8(r16)
    4728:	80000115 	stw	zero,4(r16)
    472c:	80000415 	stw	zero,16(r16)
    4730:	80000515 	stw	zero,20(r16)
    4734:	80000615 	stw	zero,24(r16)
    4738:	01800204 	movi	r6,8
    473c:	000b883a 	mov	r5,zero
    4740:	81001704 	addi	r4,r16,92
    4744:	00060a80 	call	60a8 <memset>
    4748:	8005883a 	mov	r2,r16
    474c:	80000c15 	stw	zero,48(r16)
    4750:	80000d15 	stw	zero,52(r16)
    4754:	80001115 	stw	zero,68(r16)
    4758:	80001215 	stw	zero,72(r16)
    475c:	dfc00417 	ldw	ra,16(sp)
    4760:	dcc00317 	ldw	r19,12(sp)
    4764:	dc800217 	ldw	r18,8(sp)
    4768:	dc400117 	ldw	r17,4(sp)
    476c:	dc000017 	ldw	r16,0(sp)
    4770:	dec00504 	addi	sp,sp,20
    4774:	f800283a 	ret
    4778:	01400104 	movi	r5,4
    477c:	9809883a 	mov	r4,r19
    4780:	000461c0 	call	461c <__sfmoreglue>
    4784:	90800015 	stw	r2,0(r18)
    4788:	103fde1e 	bne	r2,zero,4704 <__sfp+0x80>
    478c:	00800304 	movi	r2,12
    4790:	98800015 	stw	r2,0(r19)
    4794:	0005883a 	mov	r2,zero
    4798:	003ff006 	br	475c <__sfp+0xd8>

0000479c <_cleanup>:
    479c:	00800074 	movhi	r2,1
    47a0:	1085cc04 	addi	r2,r2,5936
    47a4:	11000017 	ldw	r4,0(r2)
    47a8:	01400074 	movhi	r5,1
    47ac:	29647404 	addi	r5,r5,-28208
    47b0:	00051b81 	jmpi	51b8 <_fwalk_reent>

000047b4 <__sinit>:
    47b4:	20800e17 	ldw	r2,56(r4)
    47b8:	10000126 	beq	r2,zero,47c0 <__sinit+0xc>
    47bc:	f800283a 	ret
    47c0:	00044781 	jmpi	4478 <__sinit.part.1>

000047c4 <__sfp_lock_acquire>:
    47c4:	f800283a 	ret

000047c8 <__sfp_lock_release>:
    47c8:	f800283a 	ret

000047cc <__sinit_lock_acquire>:
    47cc:	f800283a 	ret

000047d0 <__sinit_lock_release>:
    47d0:	f800283a 	ret

000047d4 <__fp_lock_all>:
    47d4:	00800074 	movhi	r2,1
    47d8:	1085cd04 	addi	r2,r2,5940
    47dc:	11000017 	ldw	r4,0(r2)
    47e0:	01400034 	movhi	r5,0
    47e4:	29518504 	addi	r5,r5,17940
    47e8:	00050f41 	jmpi	50f4 <_fwalk>

000047ec <__fp_unlock_all>:
    47ec:	00800074 	movhi	r2,1
    47f0:	1085cd04 	addi	r2,r2,5940
    47f4:	11000017 	ldw	r4,0(r2)
    47f8:	01400034 	movhi	r5,0
    47fc:	29511904 	addi	r5,r5,17508
    4800:	00050f41 	jmpi	50f4 <_fwalk>

00004804 <_malloc_trim_r>:
    4804:	defffb04 	addi	sp,sp,-20
    4808:	dcc00315 	stw	r19,12(sp)
    480c:	04c00074 	movhi	r19,1
    4810:	dc800215 	stw	r18,8(sp)
    4814:	dc400115 	stw	r17,4(sp)
    4818:	dc000015 	stw	r16,0(sp)
    481c:	dfc00415 	stw	ra,16(sp)
    4820:	2821883a 	mov	r16,r5
    4824:	9cc03d04 	addi	r19,r19,244
    4828:	2025883a 	mov	r18,r4
    482c:	000d2240 	call	d224 <__malloc_lock>
    4830:	98800217 	ldw	r2,8(r19)
    4834:	14400117 	ldw	r17,4(r2)
    4838:	00bfff04 	movi	r2,-4
    483c:	88a2703a 	and	r17,r17,r2
    4840:	8c21c83a 	sub	r16,r17,r16
    4844:	8403fbc4 	addi	r16,r16,4079
    4848:	8020d33a 	srli	r16,r16,12
    484c:	0083ffc4 	movi	r2,4095
    4850:	843fffc4 	addi	r16,r16,-1
    4854:	8020933a 	slli	r16,r16,12
    4858:	1400060e 	bge	r2,r16,4874 <_malloc_trim_r+0x70>
    485c:	000b883a 	mov	r5,zero
    4860:	9009883a 	mov	r4,r18
    4864:	00077a40 	call	77a4 <_sbrk_r>
    4868:	98c00217 	ldw	r3,8(r19)
    486c:	1c47883a 	add	r3,r3,r17
    4870:	10c00a26 	beq	r2,r3,489c <_malloc_trim_r+0x98>
    4874:	9009883a 	mov	r4,r18
    4878:	000d2480 	call	d248 <__malloc_unlock>
    487c:	0005883a 	mov	r2,zero
    4880:	dfc00417 	ldw	ra,16(sp)
    4884:	dcc00317 	ldw	r19,12(sp)
    4888:	dc800217 	ldw	r18,8(sp)
    488c:	dc400117 	ldw	r17,4(sp)
    4890:	dc000017 	ldw	r16,0(sp)
    4894:	dec00504 	addi	sp,sp,20
    4898:	f800283a 	ret
    489c:	040bc83a 	sub	r5,zero,r16
    48a0:	9009883a 	mov	r4,r18
    48a4:	00077a40 	call	77a4 <_sbrk_r>
    48a8:	00ffffc4 	movi	r3,-1
    48ac:	10c00d26 	beq	r2,r3,48e4 <_malloc_trim_r+0xe0>
    48b0:	00c00074 	movhi	r3,1
    48b4:	18ccb004 	addi	r3,r3,12992
    48b8:	18800017 	ldw	r2,0(r3)
    48bc:	99000217 	ldw	r4,8(r19)
    48c0:	8c23c83a 	sub	r17,r17,r16
    48c4:	8c400054 	ori	r17,r17,1
    48c8:	1421c83a 	sub	r16,r2,r16
    48cc:	24400115 	stw	r17,4(r4)
    48d0:	9009883a 	mov	r4,r18
    48d4:	1c000015 	stw	r16,0(r3)
    48d8:	000d2480 	call	d248 <__malloc_unlock>
    48dc:	00800044 	movi	r2,1
    48e0:	003fe706 	br	4880 <_malloc_trim_r+0x7c>
    48e4:	000b883a 	mov	r5,zero
    48e8:	9009883a 	mov	r4,r18
    48ec:	00077a40 	call	77a4 <_sbrk_r>
    48f0:	99000217 	ldw	r4,8(r19)
    48f4:	014003c4 	movi	r5,15
    48f8:	1107c83a 	sub	r3,r2,r4
    48fc:	28ffdd0e 	bge	r5,r3,4874 <_malloc_trim_r+0x70>
    4900:	01400074 	movhi	r5,1
    4904:	2945cf04 	addi	r5,r5,5948
    4908:	29400017 	ldw	r5,0(r5)
    490c:	18c00054 	ori	r3,r3,1
    4910:	20c00115 	stw	r3,4(r4)
    4914:	00c00074 	movhi	r3,1
    4918:	1145c83a 	sub	r2,r2,r5
    491c:	18ccb004 	addi	r3,r3,12992
    4920:	18800015 	stw	r2,0(r3)
    4924:	003fd306 	br	4874 <_malloc_trim_r+0x70>

00004928 <_free_r>:
    4928:	28004126 	beq	r5,zero,4a30 <_free_r+0x108>
    492c:	defffd04 	addi	sp,sp,-12
    4930:	dc400115 	stw	r17,4(sp)
    4934:	dc000015 	stw	r16,0(sp)
    4938:	2023883a 	mov	r17,r4
    493c:	2821883a 	mov	r16,r5
    4940:	dfc00215 	stw	ra,8(sp)
    4944:	000d2240 	call	d224 <__malloc_lock>
    4948:	81ffff17 	ldw	r7,-4(r16)
    494c:	00bfff84 	movi	r2,-2
    4950:	01000074 	movhi	r4,1
    4954:	81bffe04 	addi	r6,r16,-8
    4958:	3884703a 	and	r2,r7,r2
    495c:	21003d04 	addi	r4,r4,244
    4960:	308b883a 	add	r5,r6,r2
    4964:	2a400117 	ldw	r9,4(r5)
    4968:	22000217 	ldw	r8,8(r4)
    496c:	00ffff04 	movi	r3,-4
    4970:	48c6703a 	and	r3,r9,r3
    4974:	2a005726 	beq	r5,r8,4ad4 <_free_r+0x1ac>
    4978:	28c00115 	stw	r3,4(r5)
    497c:	39c0004c 	andi	r7,r7,1
    4980:	3800091e 	bne	r7,zero,49a8 <_free_r+0x80>
    4984:	823ffe17 	ldw	r8,-8(r16)
    4988:	22400204 	addi	r9,r4,8
    498c:	320dc83a 	sub	r6,r6,r8
    4990:	31c00217 	ldw	r7,8(r6)
    4994:	1205883a 	add	r2,r2,r8
    4998:	3a406526 	beq	r7,r9,4b30 <_free_r+0x208>
    499c:	32000317 	ldw	r8,12(r6)
    49a0:	3a000315 	stw	r8,12(r7)
    49a4:	41c00215 	stw	r7,8(r8)
    49a8:	28cf883a 	add	r7,r5,r3
    49ac:	39c00117 	ldw	r7,4(r7)
    49b0:	39c0004c 	andi	r7,r7,1
    49b4:	38003a26 	beq	r7,zero,4aa0 <_free_r+0x178>
    49b8:	10c00054 	ori	r3,r2,1
    49bc:	30c00115 	stw	r3,4(r6)
    49c0:	3087883a 	add	r3,r6,r2
    49c4:	18800015 	stw	r2,0(r3)
    49c8:	00c07fc4 	movi	r3,511
    49cc:	18801936 	bltu	r3,r2,4a34 <_free_r+0x10c>
    49d0:	1004d0fa 	srli	r2,r2,3
    49d4:	01c00044 	movi	r7,1
    49d8:	21400117 	ldw	r5,4(r4)
    49dc:	10c00044 	addi	r3,r2,1
    49e0:	18c7883a 	add	r3,r3,r3
    49e4:	1005d0ba 	srai	r2,r2,2
    49e8:	18c7883a 	add	r3,r3,r3
    49ec:	18c7883a 	add	r3,r3,r3
    49f0:	1907883a 	add	r3,r3,r4
    49f4:	3884983a 	sll	r2,r7,r2
    49f8:	19c00017 	ldw	r7,0(r3)
    49fc:	1a3ffe04 	addi	r8,r3,-8
    4a00:	1144b03a 	or	r2,r2,r5
    4a04:	32000315 	stw	r8,12(r6)
    4a08:	31c00215 	stw	r7,8(r6)
    4a0c:	20800115 	stw	r2,4(r4)
    4a10:	19800015 	stw	r6,0(r3)
    4a14:	39800315 	stw	r6,12(r7)
    4a18:	8809883a 	mov	r4,r17
    4a1c:	dfc00217 	ldw	ra,8(sp)
    4a20:	dc400117 	ldw	r17,4(sp)
    4a24:	dc000017 	ldw	r16,0(sp)
    4a28:	dec00304 	addi	sp,sp,12
    4a2c:	000d2481 	jmpi	d248 <__malloc_unlock>
    4a30:	f800283a 	ret
    4a34:	100ad27a 	srli	r5,r2,9
    4a38:	00c00104 	movi	r3,4
    4a3c:	19404a36 	bltu	r3,r5,4b68 <_free_r+0x240>
    4a40:	100ad1ba 	srli	r5,r2,6
    4a44:	28c00e44 	addi	r3,r5,57
    4a48:	18c7883a 	add	r3,r3,r3
    4a4c:	29400e04 	addi	r5,r5,56
    4a50:	18c7883a 	add	r3,r3,r3
    4a54:	18c7883a 	add	r3,r3,r3
    4a58:	1909883a 	add	r4,r3,r4
    4a5c:	20c00017 	ldw	r3,0(r4)
    4a60:	01c00074 	movhi	r7,1
    4a64:	213ffe04 	addi	r4,r4,-8
    4a68:	39c03d04 	addi	r7,r7,244
    4a6c:	20c04426 	beq	r4,r3,4b80 <_free_r+0x258>
    4a70:	01ffff04 	movi	r7,-4
    4a74:	19400117 	ldw	r5,4(r3)
    4a78:	29ca703a 	and	r5,r5,r7
    4a7c:	1140022e 	bgeu	r2,r5,4a88 <_free_r+0x160>
    4a80:	18c00217 	ldw	r3,8(r3)
    4a84:	20fffb1e 	bne	r4,r3,4a74 <_free_r+0x14c>
    4a88:	19000317 	ldw	r4,12(r3)
    4a8c:	31000315 	stw	r4,12(r6)
    4a90:	30c00215 	stw	r3,8(r6)
    4a94:	21800215 	stw	r6,8(r4)
    4a98:	19800315 	stw	r6,12(r3)
    4a9c:	003fde06 	br	4a18 <_free_r+0xf0>
    4aa0:	29c00217 	ldw	r7,8(r5)
    4aa4:	10c5883a 	add	r2,r2,r3
    4aa8:	00c00074 	movhi	r3,1
    4aac:	18c03f04 	addi	r3,r3,252
    4ab0:	38c03b26 	beq	r7,r3,4ba0 <_free_r+0x278>
    4ab4:	2a000317 	ldw	r8,12(r5)
    4ab8:	11400054 	ori	r5,r2,1
    4abc:	3087883a 	add	r3,r6,r2
    4ac0:	3a000315 	stw	r8,12(r7)
    4ac4:	41c00215 	stw	r7,8(r8)
    4ac8:	31400115 	stw	r5,4(r6)
    4acc:	18800015 	stw	r2,0(r3)
    4ad0:	003fbd06 	br	49c8 <_free_r+0xa0>
    4ad4:	39c0004c 	andi	r7,r7,1
    4ad8:	10c5883a 	add	r2,r2,r3
    4adc:	3800071e 	bne	r7,zero,4afc <_free_r+0x1d4>
    4ae0:	81fffe17 	ldw	r7,-8(r16)
    4ae4:	31cdc83a 	sub	r6,r6,r7
    4ae8:	30c00317 	ldw	r3,12(r6)
    4aec:	31400217 	ldw	r5,8(r6)
    4af0:	11c5883a 	add	r2,r2,r7
    4af4:	28c00315 	stw	r3,12(r5)
    4af8:	19400215 	stw	r5,8(r3)
    4afc:	10c00054 	ori	r3,r2,1
    4b00:	30c00115 	stw	r3,4(r6)
    4b04:	00c00074 	movhi	r3,1
    4b08:	18c5d004 	addi	r3,r3,5952
    4b0c:	18c00017 	ldw	r3,0(r3)
    4b10:	21800215 	stw	r6,8(r4)
    4b14:	10ffc036 	bltu	r2,r3,4a18 <_free_r+0xf0>
    4b18:	00800074 	movhi	r2,1
    4b1c:	108ca704 	addi	r2,r2,12956
    4b20:	11400017 	ldw	r5,0(r2)
    4b24:	8809883a 	mov	r4,r17
    4b28:	00048040 	call	4804 <_malloc_trim_r>
    4b2c:	003fba06 	br	4a18 <_free_r+0xf0>
    4b30:	28c9883a 	add	r4,r5,r3
    4b34:	21000117 	ldw	r4,4(r4)
    4b38:	2100004c 	andi	r4,r4,1
    4b3c:	2000391e 	bne	r4,zero,4c24 <_free_r+0x2fc>
    4b40:	29c00217 	ldw	r7,8(r5)
    4b44:	29000317 	ldw	r4,12(r5)
    4b48:	1885883a 	add	r2,r3,r2
    4b4c:	10c00054 	ori	r3,r2,1
    4b50:	39000315 	stw	r4,12(r7)
    4b54:	21c00215 	stw	r7,8(r4)
    4b58:	30c00115 	stw	r3,4(r6)
    4b5c:	308d883a 	add	r6,r6,r2
    4b60:	30800015 	stw	r2,0(r6)
    4b64:	003fac06 	br	4a18 <_free_r+0xf0>
    4b68:	00c00504 	movi	r3,20
    4b6c:	19401536 	bltu	r3,r5,4bc4 <_free_r+0x29c>
    4b70:	28c01704 	addi	r3,r5,92
    4b74:	18c7883a 	add	r3,r3,r3
    4b78:	294016c4 	addi	r5,r5,91
    4b7c:	003fb406 	br	4a50 <_free_r+0x128>
    4b80:	280bd0ba 	srai	r5,r5,2
    4b84:	00c00044 	movi	r3,1
    4b88:	38800117 	ldw	r2,4(r7)
    4b8c:	194a983a 	sll	r5,r3,r5
    4b90:	2007883a 	mov	r3,r4
    4b94:	2884b03a 	or	r2,r5,r2
    4b98:	38800115 	stw	r2,4(r7)
    4b9c:	003fbb06 	br	4a8c <_free_r+0x164>
    4ba0:	21800515 	stw	r6,20(r4)
    4ba4:	21800415 	stw	r6,16(r4)
    4ba8:	10c00054 	ori	r3,r2,1
    4bac:	31c00315 	stw	r7,12(r6)
    4bb0:	31c00215 	stw	r7,8(r6)
    4bb4:	30c00115 	stw	r3,4(r6)
    4bb8:	308d883a 	add	r6,r6,r2
    4bbc:	30800015 	stw	r2,0(r6)
    4bc0:	003f9506 	br	4a18 <_free_r+0xf0>
    4bc4:	00c01504 	movi	r3,84
    4bc8:	19400536 	bltu	r3,r5,4be0 <_free_r+0x2b8>
    4bcc:	100ad33a 	srli	r5,r2,12
    4bd0:	28c01bc4 	addi	r3,r5,111
    4bd4:	18c7883a 	add	r3,r3,r3
    4bd8:	29401b84 	addi	r5,r5,110
    4bdc:	003f9c06 	br	4a50 <_free_r+0x128>
    4be0:	00c05504 	movi	r3,340
    4be4:	19400536 	bltu	r3,r5,4bfc <_free_r+0x2d4>
    4be8:	100ad3fa 	srli	r5,r2,15
    4bec:	28c01e04 	addi	r3,r5,120
    4bf0:	18c7883a 	add	r3,r3,r3
    4bf4:	29401dc4 	addi	r5,r5,119
    4bf8:	003f9506 	br	4a50 <_free_r+0x128>
    4bfc:	00c15504 	movi	r3,1364
    4c00:	19400536 	bltu	r3,r5,4c18 <_free_r+0x2f0>
    4c04:	100ad4ba 	srli	r5,r2,18
    4c08:	28c01f44 	addi	r3,r5,125
    4c0c:	18c7883a 	add	r3,r3,r3
    4c10:	29401f04 	addi	r5,r5,124
    4c14:	003f8e06 	br	4a50 <_free_r+0x128>
    4c18:	00c03f84 	movi	r3,254
    4c1c:	01401f84 	movi	r5,126
    4c20:	003f8b06 	br	4a50 <_free_r+0x128>
    4c24:	10c00054 	ori	r3,r2,1
    4c28:	30c00115 	stw	r3,4(r6)
    4c2c:	308d883a 	add	r6,r6,r2
    4c30:	30800015 	stw	r2,0(r6)
    4c34:	003f7806 	br	4a18 <_free_r+0xf0>

00004c38 <__sfvwrite_r>:
    4c38:	30800217 	ldw	r2,8(r6)
    4c3c:	10006726 	beq	r2,zero,4ddc <__sfvwrite_r+0x1a4>
    4c40:	28c0030b 	ldhu	r3,12(r5)
    4c44:	defff404 	addi	sp,sp,-48
    4c48:	dd400715 	stw	r21,28(sp)
    4c4c:	dd000615 	stw	r20,24(sp)
    4c50:	dc000215 	stw	r16,8(sp)
    4c54:	dfc00b15 	stw	ra,44(sp)
    4c58:	df000a15 	stw	fp,40(sp)
    4c5c:	ddc00915 	stw	r23,36(sp)
    4c60:	dd800815 	stw	r22,32(sp)
    4c64:	dcc00515 	stw	r19,20(sp)
    4c68:	dc800415 	stw	r18,16(sp)
    4c6c:	dc400315 	stw	r17,12(sp)
    4c70:	1880020c 	andi	r2,r3,8
    4c74:	2821883a 	mov	r16,r5
    4c78:	202b883a 	mov	r21,r4
    4c7c:	3029883a 	mov	r20,r6
    4c80:	10002726 	beq	r2,zero,4d20 <__sfvwrite_r+0xe8>
    4c84:	28800417 	ldw	r2,16(r5)
    4c88:	10002526 	beq	r2,zero,4d20 <__sfvwrite_r+0xe8>
    4c8c:	1880008c 	andi	r2,r3,2
    4c90:	a4400017 	ldw	r17,0(r20)
    4c94:	10002a26 	beq	r2,zero,4d40 <__sfvwrite_r+0x108>
    4c98:	05a00034 	movhi	r22,32768
    4c9c:	0027883a 	mov	r19,zero
    4ca0:	0025883a 	mov	r18,zero
    4ca4:	b5bf0004 	addi	r22,r22,-1024
    4ca8:	980d883a 	mov	r6,r19
    4cac:	a809883a 	mov	r4,r21
    4cb0:	90004626 	beq	r18,zero,4dcc <__sfvwrite_r+0x194>
    4cb4:	900f883a 	mov	r7,r18
    4cb8:	b480022e 	bgeu	r22,r18,4cc4 <__sfvwrite_r+0x8c>
    4cbc:	01e00034 	movhi	r7,32768
    4cc0:	39ff0004 	addi	r7,r7,-1024
    4cc4:	80800917 	ldw	r2,36(r16)
    4cc8:	81400717 	ldw	r5,28(r16)
    4ccc:	103ee83a 	callr	r2
    4cd0:	0080570e 	bge	zero,r2,4e30 <__sfvwrite_r+0x1f8>
    4cd4:	a0c00217 	ldw	r3,8(r20)
    4cd8:	98a7883a 	add	r19,r19,r2
    4cdc:	90a5c83a 	sub	r18,r18,r2
    4ce0:	1885c83a 	sub	r2,r3,r2
    4ce4:	a0800215 	stw	r2,8(r20)
    4ce8:	103fef1e 	bne	r2,zero,4ca8 <__sfvwrite_r+0x70>
    4cec:	0005883a 	mov	r2,zero
    4cf0:	dfc00b17 	ldw	ra,44(sp)
    4cf4:	df000a17 	ldw	fp,40(sp)
    4cf8:	ddc00917 	ldw	r23,36(sp)
    4cfc:	dd800817 	ldw	r22,32(sp)
    4d00:	dd400717 	ldw	r21,28(sp)
    4d04:	dd000617 	ldw	r20,24(sp)
    4d08:	dcc00517 	ldw	r19,20(sp)
    4d0c:	dc800417 	ldw	r18,16(sp)
    4d10:	dc400317 	ldw	r17,12(sp)
    4d14:	dc000217 	ldw	r16,8(sp)
    4d18:	dec00c04 	addi	sp,sp,48
    4d1c:	f800283a 	ret
    4d20:	800b883a 	mov	r5,r16
    4d24:	a809883a 	mov	r4,r21
    4d28:	00027e00 	call	27e0 <__swsetup_r>
    4d2c:	1000eb1e 	bne	r2,zero,50dc <__sfvwrite_r+0x4a4>
    4d30:	80c0030b 	ldhu	r3,12(r16)
    4d34:	a4400017 	ldw	r17,0(r20)
    4d38:	1880008c 	andi	r2,r3,2
    4d3c:	103fd61e 	bne	r2,zero,4c98 <__sfvwrite_r+0x60>
    4d40:	1880004c 	andi	r2,r3,1
    4d44:	10003f1e 	bne	r2,zero,4e44 <__sfvwrite_r+0x20c>
    4d48:	0039883a 	mov	fp,zero
    4d4c:	0025883a 	mov	r18,zero
    4d50:	90001a26 	beq	r18,zero,4dbc <__sfvwrite_r+0x184>
    4d54:	1880800c 	andi	r2,r3,512
    4d58:	84c00217 	ldw	r19,8(r16)
    4d5c:	10002126 	beq	r2,zero,4de4 <__sfvwrite_r+0x1ac>
    4d60:	982f883a 	mov	r23,r19
    4d64:	94c09336 	bltu	r18,r19,4fb4 <__sfvwrite_r+0x37c>
    4d68:	1881200c 	andi	r2,r3,1152
    4d6c:	10009e1e 	bne	r2,zero,4fe8 <__sfvwrite_r+0x3b0>
    4d70:	81000017 	ldw	r4,0(r16)
    4d74:	b80d883a 	mov	r6,r23
    4d78:	e00b883a 	mov	r5,fp
    4d7c:	0005f4c0 	call	5f4c <memmove>
    4d80:	80c00217 	ldw	r3,8(r16)
    4d84:	81000017 	ldw	r4,0(r16)
    4d88:	9005883a 	mov	r2,r18
    4d8c:	1ce7c83a 	sub	r19,r3,r19
    4d90:	25cf883a 	add	r7,r4,r23
    4d94:	84c00215 	stw	r19,8(r16)
    4d98:	81c00015 	stw	r7,0(r16)
    4d9c:	a0c00217 	ldw	r3,8(r20)
    4da0:	e0b9883a 	add	fp,fp,r2
    4da4:	90a5c83a 	sub	r18,r18,r2
    4da8:	18a7c83a 	sub	r19,r3,r2
    4dac:	a4c00215 	stw	r19,8(r20)
    4db0:	983fce26 	beq	r19,zero,4cec <__sfvwrite_r+0xb4>
    4db4:	80c0030b 	ldhu	r3,12(r16)
    4db8:	903fe61e 	bne	r18,zero,4d54 <__sfvwrite_r+0x11c>
    4dbc:	8f000017 	ldw	fp,0(r17)
    4dc0:	8c800117 	ldw	r18,4(r17)
    4dc4:	8c400204 	addi	r17,r17,8
    4dc8:	003fe106 	br	4d50 <__sfvwrite_r+0x118>
    4dcc:	8cc00017 	ldw	r19,0(r17)
    4dd0:	8c800117 	ldw	r18,4(r17)
    4dd4:	8c400204 	addi	r17,r17,8
    4dd8:	003fb306 	br	4ca8 <__sfvwrite_r+0x70>
    4ddc:	0005883a 	mov	r2,zero
    4de0:	f800283a 	ret
    4de4:	81000017 	ldw	r4,0(r16)
    4de8:	80800417 	ldw	r2,16(r16)
    4dec:	11005736 	bltu	r2,r4,4f4c <__sfvwrite_r+0x314>
    4df0:	85c00517 	ldw	r23,20(r16)
    4df4:	95c05536 	bltu	r18,r23,4f4c <__sfvwrite_r+0x314>
    4df8:	00a00034 	movhi	r2,32768
    4dfc:	10bfffc4 	addi	r2,r2,-1
    4e00:	9009883a 	mov	r4,r18
    4e04:	1480012e 	bgeu	r2,r18,4e0c <__sfvwrite_r+0x1d4>
    4e08:	1009883a 	mov	r4,r2
    4e0c:	b80b883a 	mov	r5,r23
    4e10:	000a43c0 	call	a43c <__divsi3>
    4e14:	15cf383a 	mul	r7,r2,r23
    4e18:	81400717 	ldw	r5,28(r16)
    4e1c:	80800917 	ldw	r2,36(r16)
    4e20:	e00d883a 	mov	r6,fp
    4e24:	a809883a 	mov	r4,r21
    4e28:	103ee83a 	callr	r2
    4e2c:	00bfdb16 	blt	zero,r2,4d9c <__sfvwrite_r+0x164>
    4e30:	8080030b 	ldhu	r2,12(r16)
    4e34:	10801014 	ori	r2,r2,64
    4e38:	8080030d 	sth	r2,12(r16)
    4e3c:	00bfffc4 	movi	r2,-1
    4e40:	003fab06 	br	4cf0 <__sfvwrite_r+0xb8>
    4e44:	0027883a 	mov	r19,zero
    4e48:	0011883a 	mov	r8,zero
    4e4c:	0039883a 	mov	fp,zero
    4e50:	0025883a 	mov	r18,zero
    4e54:	90001f26 	beq	r18,zero,4ed4 <__sfvwrite_r+0x29c>
    4e58:	40005a26 	beq	r8,zero,4fc4 <__sfvwrite_r+0x38c>
    4e5c:	982d883a 	mov	r22,r19
    4e60:	94c0012e 	bgeu	r18,r19,4e68 <__sfvwrite_r+0x230>
    4e64:	902d883a 	mov	r22,r18
    4e68:	81000017 	ldw	r4,0(r16)
    4e6c:	80800417 	ldw	r2,16(r16)
    4e70:	b02f883a 	mov	r23,r22
    4e74:	81c00517 	ldw	r7,20(r16)
    4e78:	1100032e 	bgeu	r2,r4,4e88 <__sfvwrite_r+0x250>
    4e7c:	80c00217 	ldw	r3,8(r16)
    4e80:	38c7883a 	add	r3,r7,r3
    4e84:	1d801816 	blt	r3,r22,4ee8 <__sfvwrite_r+0x2b0>
    4e88:	b1c03e16 	blt	r22,r7,4f84 <__sfvwrite_r+0x34c>
    4e8c:	80800917 	ldw	r2,36(r16)
    4e90:	81400717 	ldw	r5,28(r16)
    4e94:	e00d883a 	mov	r6,fp
    4e98:	da000115 	stw	r8,4(sp)
    4e9c:	a809883a 	mov	r4,r21
    4ea0:	103ee83a 	callr	r2
    4ea4:	102f883a 	mov	r23,r2
    4ea8:	da000117 	ldw	r8,4(sp)
    4eac:	00bfe00e 	bge	zero,r2,4e30 <__sfvwrite_r+0x1f8>
    4eb0:	9de7c83a 	sub	r19,r19,r23
    4eb4:	98001f26 	beq	r19,zero,4f34 <__sfvwrite_r+0x2fc>
    4eb8:	a0800217 	ldw	r2,8(r20)
    4ebc:	e5f9883a 	add	fp,fp,r23
    4ec0:	95e5c83a 	sub	r18,r18,r23
    4ec4:	15efc83a 	sub	r23,r2,r23
    4ec8:	a5c00215 	stw	r23,8(r20)
    4ecc:	b83f8726 	beq	r23,zero,4cec <__sfvwrite_r+0xb4>
    4ed0:	903fe11e 	bne	r18,zero,4e58 <__sfvwrite_r+0x220>
    4ed4:	8f000017 	ldw	fp,0(r17)
    4ed8:	8c800117 	ldw	r18,4(r17)
    4edc:	0011883a 	mov	r8,zero
    4ee0:	8c400204 	addi	r17,r17,8
    4ee4:	003fdb06 	br	4e54 <__sfvwrite_r+0x21c>
    4ee8:	180d883a 	mov	r6,r3
    4eec:	e00b883a 	mov	r5,fp
    4ef0:	da000115 	stw	r8,4(sp)
    4ef4:	d8c00015 	stw	r3,0(sp)
    4ef8:	0005f4c0 	call	5f4c <memmove>
    4efc:	d8c00017 	ldw	r3,0(sp)
    4f00:	80800017 	ldw	r2,0(r16)
    4f04:	800b883a 	mov	r5,r16
    4f08:	a809883a 	mov	r4,r21
    4f0c:	10c5883a 	add	r2,r2,r3
    4f10:	80800015 	stw	r2,0(r16)
    4f14:	d8c00015 	stw	r3,0(sp)
    4f18:	00043d80 	call	43d8 <_fflush_r>
    4f1c:	d8c00017 	ldw	r3,0(sp)
    4f20:	da000117 	ldw	r8,4(sp)
    4f24:	103fc21e 	bne	r2,zero,4e30 <__sfvwrite_r+0x1f8>
    4f28:	182f883a 	mov	r23,r3
    4f2c:	9de7c83a 	sub	r19,r19,r23
    4f30:	983fe11e 	bne	r19,zero,4eb8 <__sfvwrite_r+0x280>
    4f34:	800b883a 	mov	r5,r16
    4f38:	a809883a 	mov	r4,r21
    4f3c:	00043d80 	call	43d8 <_fflush_r>
    4f40:	103fbb1e 	bne	r2,zero,4e30 <__sfvwrite_r+0x1f8>
    4f44:	0011883a 	mov	r8,zero
    4f48:	003fdb06 	br	4eb8 <__sfvwrite_r+0x280>
    4f4c:	94c0012e 	bgeu	r18,r19,4f54 <__sfvwrite_r+0x31c>
    4f50:	9027883a 	mov	r19,r18
    4f54:	980d883a 	mov	r6,r19
    4f58:	e00b883a 	mov	r5,fp
    4f5c:	0005f4c0 	call	5f4c <memmove>
    4f60:	80800217 	ldw	r2,8(r16)
    4f64:	80c00017 	ldw	r3,0(r16)
    4f68:	14c5c83a 	sub	r2,r2,r19
    4f6c:	1cc7883a 	add	r3,r3,r19
    4f70:	80800215 	stw	r2,8(r16)
    4f74:	80c00015 	stw	r3,0(r16)
    4f78:	10004326 	beq	r2,zero,5088 <__sfvwrite_r+0x450>
    4f7c:	9805883a 	mov	r2,r19
    4f80:	003f8606 	br	4d9c <__sfvwrite_r+0x164>
    4f84:	b00d883a 	mov	r6,r22
    4f88:	e00b883a 	mov	r5,fp
    4f8c:	da000115 	stw	r8,4(sp)
    4f90:	0005f4c0 	call	5f4c <memmove>
    4f94:	80800217 	ldw	r2,8(r16)
    4f98:	80c00017 	ldw	r3,0(r16)
    4f9c:	da000117 	ldw	r8,4(sp)
    4fa0:	1585c83a 	sub	r2,r2,r22
    4fa4:	1dad883a 	add	r22,r3,r22
    4fa8:	80800215 	stw	r2,8(r16)
    4fac:	85800015 	stw	r22,0(r16)
    4fb0:	003fbf06 	br	4eb0 <__sfvwrite_r+0x278>
    4fb4:	81000017 	ldw	r4,0(r16)
    4fb8:	9027883a 	mov	r19,r18
    4fbc:	902f883a 	mov	r23,r18
    4fc0:	003f6c06 	br	4d74 <__sfvwrite_r+0x13c>
    4fc4:	900d883a 	mov	r6,r18
    4fc8:	01400284 	movi	r5,10
    4fcc:	e009883a 	mov	r4,fp
    4fd0:	0005d200 	call	5d20 <memchr>
    4fd4:	10003e26 	beq	r2,zero,50d0 <__sfvwrite_r+0x498>
    4fd8:	10800044 	addi	r2,r2,1
    4fdc:	1727c83a 	sub	r19,r2,fp
    4fe0:	02000044 	movi	r8,1
    4fe4:	003f9d06 	br	4e5c <__sfvwrite_r+0x224>
    4fe8:	80800517 	ldw	r2,20(r16)
    4fec:	81400417 	ldw	r5,16(r16)
    4ff0:	81c00017 	ldw	r7,0(r16)
    4ff4:	10a7883a 	add	r19,r2,r2
    4ff8:	9885883a 	add	r2,r19,r2
    4ffc:	1026d7fa 	srli	r19,r2,31
    5000:	396dc83a 	sub	r22,r7,r5
    5004:	b1000044 	addi	r4,r22,1
    5008:	9885883a 	add	r2,r19,r2
    500c:	1027d07a 	srai	r19,r2,1
    5010:	2485883a 	add	r2,r4,r18
    5014:	980d883a 	mov	r6,r19
    5018:	9880022e 	bgeu	r19,r2,5024 <__sfvwrite_r+0x3ec>
    501c:	1027883a 	mov	r19,r2
    5020:	100d883a 	mov	r6,r2
    5024:	18c1000c 	andi	r3,r3,1024
    5028:	18001c26 	beq	r3,zero,509c <__sfvwrite_r+0x464>
    502c:	300b883a 	mov	r5,r6
    5030:	a809883a 	mov	r4,r21
    5034:	00055140 	call	5514 <_malloc_r>
    5038:	102f883a 	mov	r23,r2
    503c:	10002926 	beq	r2,zero,50e4 <__sfvwrite_r+0x4ac>
    5040:	81400417 	ldw	r5,16(r16)
    5044:	b00d883a 	mov	r6,r22
    5048:	1009883a 	mov	r4,r2
    504c:	0005e040 	call	5e04 <memcpy>
    5050:	8080030b 	ldhu	r2,12(r16)
    5054:	00fedfc4 	movi	r3,-1153
    5058:	10c4703a 	and	r2,r2,r3
    505c:	10802014 	ori	r2,r2,128
    5060:	8080030d 	sth	r2,12(r16)
    5064:	bd89883a 	add	r4,r23,r22
    5068:	9d8fc83a 	sub	r7,r19,r22
    506c:	85c00415 	stw	r23,16(r16)
    5070:	84c00515 	stw	r19,20(r16)
    5074:	81000015 	stw	r4,0(r16)
    5078:	9027883a 	mov	r19,r18
    507c:	81c00215 	stw	r7,8(r16)
    5080:	902f883a 	mov	r23,r18
    5084:	003f3b06 	br	4d74 <__sfvwrite_r+0x13c>
    5088:	800b883a 	mov	r5,r16
    508c:	a809883a 	mov	r4,r21
    5090:	00043d80 	call	43d8 <_fflush_r>
    5094:	103fb926 	beq	r2,zero,4f7c <__sfvwrite_r+0x344>
    5098:	003f6506 	br	4e30 <__sfvwrite_r+0x1f8>
    509c:	a809883a 	mov	r4,r21
    50a0:	00071cc0 	call	71cc <_realloc_r>
    50a4:	102f883a 	mov	r23,r2
    50a8:	103fee1e 	bne	r2,zero,5064 <__sfvwrite_r+0x42c>
    50ac:	81400417 	ldw	r5,16(r16)
    50b0:	a809883a 	mov	r4,r21
    50b4:	00049280 	call	4928 <_free_r>
    50b8:	8080030b 	ldhu	r2,12(r16)
    50bc:	00ffdfc4 	movi	r3,-129
    50c0:	1884703a 	and	r2,r3,r2
    50c4:	00c00304 	movi	r3,12
    50c8:	a8c00015 	stw	r3,0(r21)
    50cc:	003f5906 	br	4e34 <__sfvwrite_r+0x1fc>
    50d0:	94c00044 	addi	r19,r18,1
    50d4:	02000044 	movi	r8,1
    50d8:	003f6006 	br	4e5c <__sfvwrite_r+0x224>
    50dc:	00bfffc4 	movi	r2,-1
    50e0:	003f0306 	br	4cf0 <__sfvwrite_r+0xb8>
    50e4:	00800304 	movi	r2,12
    50e8:	a8800015 	stw	r2,0(r21)
    50ec:	8080030b 	ldhu	r2,12(r16)
    50f0:	003f5006 	br	4e34 <__sfvwrite_r+0x1fc>

000050f4 <_fwalk>:
    50f4:	defff704 	addi	sp,sp,-36
    50f8:	dd000415 	stw	r20,16(sp)
    50fc:	dfc00815 	stw	ra,32(sp)
    5100:	ddc00715 	stw	r23,28(sp)
    5104:	dd800615 	stw	r22,24(sp)
    5108:	dd400515 	stw	r21,20(sp)
    510c:	dcc00315 	stw	r19,12(sp)
    5110:	dc800215 	stw	r18,8(sp)
    5114:	dc400115 	stw	r17,4(sp)
    5118:	dc000015 	stw	r16,0(sp)
    511c:	2500b804 	addi	r20,r4,736
    5120:	a0002326 	beq	r20,zero,51b0 <_fwalk+0xbc>
    5124:	282b883a 	mov	r21,r5
    5128:	002f883a 	mov	r23,zero
    512c:	05800044 	movi	r22,1
    5130:	04ffffc4 	movi	r19,-1
    5134:	a4400117 	ldw	r17,4(r20)
    5138:	a4800217 	ldw	r18,8(r20)
    513c:	8c7fffc4 	addi	r17,r17,-1
    5140:	88000d16 	blt	r17,zero,5178 <_fwalk+0x84>
    5144:	94000304 	addi	r16,r18,12
    5148:	94800384 	addi	r18,r18,14
    514c:	8080000b 	ldhu	r2,0(r16)
    5150:	8c7fffc4 	addi	r17,r17,-1
    5154:	813ffd04 	addi	r4,r16,-12
    5158:	b080042e 	bgeu	r22,r2,516c <_fwalk+0x78>
    515c:	9080000f 	ldh	r2,0(r18)
    5160:	14c00226 	beq	r2,r19,516c <_fwalk+0x78>
    5164:	a83ee83a 	callr	r21
    5168:	b8aeb03a 	or	r23,r23,r2
    516c:	84001a04 	addi	r16,r16,104
    5170:	94801a04 	addi	r18,r18,104
    5174:	8cfff51e 	bne	r17,r19,514c <_fwalk+0x58>
    5178:	a5000017 	ldw	r20,0(r20)
    517c:	a03fed1e 	bne	r20,zero,5134 <_fwalk+0x40>
    5180:	b805883a 	mov	r2,r23
    5184:	dfc00817 	ldw	ra,32(sp)
    5188:	ddc00717 	ldw	r23,28(sp)
    518c:	dd800617 	ldw	r22,24(sp)
    5190:	dd400517 	ldw	r21,20(sp)
    5194:	dd000417 	ldw	r20,16(sp)
    5198:	dcc00317 	ldw	r19,12(sp)
    519c:	dc800217 	ldw	r18,8(sp)
    51a0:	dc400117 	ldw	r17,4(sp)
    51a4:	dc000017 	ldw	r16,0(sp)
    51a8:	dec00904 	addi	sp,sp,36
    51ac:	f800283a 	ret
    51b0:	002f883a 	mov	r23,zero
    51b4:	003ff206 	br	5180 <_fwalk+0x8c>

000051b8 <_fwalk_reent>:
    51b8:	defff704 	addi	sp,sp,-36
    51bc:	dd000415 	stw	r20,16(sp)
    51c0:	dfc00815 	stw	ra,32(sp)
    51c4:	ddc00715 	stw	r23,28(sp)
    51c8:	dd800615 	stw	r22,24(sp)
    51cc:	dd400515 	stw	r21,20(sp)
    51d0:	dcc00315 	stw	r19,12(sp)
    51d4:	dc800215 	stw	r18,8(sp)
    51d8:	dc400115 	stw	r17,4(sp)
    51dc:	dc000015 	stw	r16,0(sp)
    51e0:	2500b804 	addi	r20,r4,736
    51e4:	a0002326 	beq	r20,zero,5274 <_fwalk_reent+0xbc>
    51e8:	282b883a 	mov	r21,r5
    51ec:	2027883a 	mov	r19,r4
    51f0:	002f883a 	mov	r23,zero
    51f4:	05800044 	movi	r22,1
    51f8:	04bfffc4 	movi	r18,-1
    51fc:	a4400117 	ldw	r17,4(r20)
    5200:	a4000217 	ldw	r16,8(r20)
    5204:	8c7fffc4 	addi	r17,r17,-1
    5208:	88000c16 	blt	r17,zero,523c <_fwalk_reent+0x84>
    520c:	84000304 	addi	r16,r16,12
    5210:	8080000b 	ldhu	r2,0(r16)
    5214:	8c7fffc4 	addi	r17,r17,-1
    5218:	817ffd04 	addi	r5,r16,-12
    521c:	b080052e 	bgeu	r22,r2,5234 <_fwalk_reent+0x7c>
    5220:	8080008f 	ldh	r2,2(r16)
    5224:	9809883a 	mov	r4,r19
    5228:	14800226 	beq	r2,r18,5234 <_fwalk_reent+0x7c>
    522c:	a83ee83a 	callr	r21
    5230:	b8aeb03a 	or	r23,r23,r2
    5234:	84001a04 	addi	r16,r16,104
    5238:	8cbff51e 	bne	r17,r18,5210 <_fwalk_reent+0x58>
    523c:	a5000017 	ldw	r20,0(r20)
    5240:	a03fee1e 	bne	r20,zero,51fc <_fwalk_reent+0x44>
    5244:	b805883a 	mov	r2,r23
    5248:	dfc00817 	ldw	ra,32(sp)
    524c:	ddc00717 	ldw	r23,28(sp)
    5250:	dd800617 	ldw	r22,24(sp)
    5254:	dd400517 	ldw	r21,20(sp)
    5258:	dd000417 	ldw	r20,16(sp)
    525c:	dcc00317 	ldw	r19,12(sp)
    5260:	dc800217 	ldw	r18,8(sp)
    5264:	dc400117 	ldw	r17,4(sp)
    5268:	dc000017 	ldw	r16,0(sp)
    526c:	dec00904 	addi	sp,sp,36
    5270:	f800283a 	ret
    5274:	002f883a 	mov	r23,zero
    5278:	003ff206 	br	5244 <_fwalk_reent+0x8c>

0000527c <_setlocale_r>:
    527c:	30001b26 	beq	r6,zero,52ec <_setlocale_r+0x70>
    5280:	01400074 	movhi	r5,1
    5284:	defffe04 	addi	sp,sp,-8
    5288:	297e7504 	addi	r5,r5,-1580
    528c:	3009883a 	mov	r4,r6
    5290:	dc000015 	stw	r16,0(sp)
    5294:	dfc00115 	stw	ra,4(sp)
    5298:	3021883a 	mov	r16,r6
    529c:	00079340 	call	7934 <strcmp>
    52a0:	1000061e 	bne	r2,zero,52bc <_setlocale_r+0x40>
    52a4:	00800074 	movhi	r2,1
    52a8:	10be7404 	addi	r2,r2,-1584
    52ac:	dfc00117 	ldw	ra,4(sp)
    52b0:	dc000017 	ldw	r16,0(sp)
    52b4:	dec00204 	addi	sp,sp,8
    52b8:	f800283a 	ret
    52bc:	01400074 	movhi	r5,1
    52c0:	297e7404 	addi	r5,r5,-1584
    52c4:	8009883a 	mov	r4,r16
    52c8:	00079340 	call	7934 <strcmp>
    52cc:	103ff526 	beq	r2,zero,52a4 <_setlocale_r+0x28>
    52d0:	01400074 	movhi	r5,1
    52d4:	297e5f04 	addi	r5,r5,-1668
    52d8:	8009883a 	mov	r4,r16
    52dc:	00079340 	call	7934 <strcmp>
    52e0:	103ff026 	beq	r2,zero,52a4 <_setlocale_r+0x28>
    52e4:	0005883a 	mov	r2,zero
    52e8:	003ff006 	br	52ac <_setlocale_r+0x30>
    52ec:	00800074 	movhi	r2,1
    52f0:	10be7404 	addi	r2,r2,-1584
    52f4:	f800283a 	ret

000052f8 <__locale_charset>:
    52f8:	00800074 	movhi	r2,1
    52fc:	10802704 	addi	r2,r2,156
    5300:	f800283a 	ret

00005304 <__locale_mb_cur_max>:
    5304:	00800074 	movhi	r2,1
    5308:	1085ce04 	addi	r2,r2,5944
    530c:	10800017 	ldw	r2,0(r2)
    5310:	f800283a 	ret

00005314 <__locale_msgcharset>:
    5314:	00800074 	movhi	r2,1
    5318:	10801f04 	addi	r2,r2,124
    531c:	f800283a 	ret

00005320 <__locale_cjk_lang>:
    5320:	0005883a 	mov	r2,zero
    5324:	f800283a 	ret

00005328 <_localeconv_r>:
    5328:	00800074 	movhi	r2,1
    532c:	10802f04 	addi	r2,r2,188
    5330:	f800283a 	ret

00005334 <setlocale>:
    5334:	00800074 	movhi	r2,1
    5338:	1085cd04 	addi	r2,r2,5940
    533c:	280d883a 	mov	r6,r5
    5340:	200b883a 	mov	r5,r4
    5344:	11000017 	ldw	r4,0(r2)
    5348:	000527c1 	jmpi	527c <_setlocale_r>

0000534c <localeconv>:
    534c:	00800074 	movhi	r2,1
    5350:	10802f04 	addi	r2,r2,188
    5354:	f800283a 	ret

00005358 <__smakebuf_r>:
    5358:	2880030b 	ldhu	r2,12(r5)
    535c:	10c0008c 	andi	r3,r2,2
    5360:	1800411e 	bne	r3,zero,5468 <__smakebuf_r+0x110>
    5364:	deffec04 	addi	sp,sp,-80
    5368:	dc000f15 	stw	r16,60(sp)
    536c:	2821883a 	mov	r16,r5
    5370:	2940038f 	ldh	r5,14(r5)
    5374:	dc401015 	stw	r17,64(sp)
    5378:	dfc01315 	stw	ra,76(sp)
    537c:	dcc01215 	stw	r19,72(sp)
    5380:	dc801115 	stw	r18,68(sp)
    5384:	2023883a 	mov	r17,r4
    5388:	28001c16 	blt	r5,zero,53fc <__smakebuf_r+0xa4>
    538c:	d80d883a 	mov	r6,sp
    5390:	00094dc0 	call	94dc <_fstat_r>
    5394:	10001816 	blt	r2,zero,53f8 <__smakebuf_r+0xa0>
    5398:	d8800117 	ldw	r2,4(sp)
    539c:	00e00014 	movui	r3,32768
    53a0:	10bc000c 	andi	r2,r2,61440
    53a4:	14c80020 	cmpeqi	r19,r2,8192
    53a8:	10c03726 	beq	r2,r3,5488 <__smakebuf_r+0x130>
    53ac:	80c0030b 	ldhu	r3,12(r16)
    53b0:	18c20014 	ori	r3,r3,2048
    53b4:	80c0030d 	sth	r3,12(r16)
    53b8:	00c80004 	movi	r3,8192
    53bc:	10c0521e 	bne	r2,r3,5508 <__smakebuf_r+0x1b0>
    53c0:	8140038f 	ldh	r5,14(r16)
    53c4:	8809883a 	mov	r4,r17
    53c8:	00095380 	call	9538 <_isatty_r>
    53cc:	10004c26 	beq	r2,zero,5500 <__smakebuf_r+0x1a8>
    53d0:	8080030b 	ldhu	r2,12(r16)
    53d4:	80c010c4 	addi	r3,r16,67
    53d8:	80c00015 	stw	r3,0(r16)
    53dc:	10800054 	ori	r2,r2,1
    53e0:	8080030d 	sth	r2,12(r16)
    53e4:	00800044 	movi	r2,1
    53e8:	80c00415 	stw	r3,16(r16)
    53ec:	80800515 	stw	r2,20(r16)
    53f0:	04810004 	movi	r18,1024
    53f4:	00000706 	br	5414 <__smakebuf_r+0xbc>
    53f8:	8080030b 	ldhu	r2,12(r16)
    53fc:	10c0200c 	andi	r3,r2,128
    5400:	18001f1e 	bne	r3,zero,5480 <__smakebuf_r+0x128>
    5404:	04810004 	movi	r18,1024
    5408:	10820014 	ori	r2,r2,2048
    540c:	8080030d 	sth	r2,12(r16)
    5410:	0027883a 	mov	r19,zero
    5414:	900b883a 	mov	r5,r18
    5418:	8809883a 	mov	r4,r17
    541c:	00055140 	call	5514 <_malloc_r>
    5420:	10002c26 	beq	r2,zero,54d4 <__smakebuf_r+0x17c>
    5424:	80c0030b 	ldhu	r3,12(r16)
    5428:	01000034 	movhi	r4,0
    542c:	21111b04 	addi	r4,r4,17516
    5430:	89000f15 	stw	r4,60(r17)
    5434:	18c02014 	ori	r3,r3,128
    5438:	80c0030d 	sth	r3,12(r16)
    543c:	80800015 	stw	r2,0(r16)
    5440:	80800415 	stw	r2,16(r16)
    5444:	84800515 	stw	r18,20(r16)
    5448:	98001a1e 	bne	r19,zero,54b4 <__smakebuf_r+0x15c>
    544c:	dfc01317 	ldw	ra,76(sp)
    5450:	dcc01217 	ldw	r19,72(sp)
    5454:	dc801117 	ldw	r18,68(sp)
    5458:	dc401017 	ldw	r17,64(sp)
    545c:	dc000f17 	ldw	r16,60(sp)
    5460:	dec01404 	addi	sp,sp,80
    5464:	f800283a 	ret
    5468:	288010c4 	addi	r2,r5,67
    546c:	28800015 	stw	r2,0(r5)
    5470:	28800415 	stw	r2,16(r5)
    5474:	00800044 	movi	r2,1
    5478:	28800515 	stw	r2,20(r5)
    547c:	f800283a 	ret
    5480:	04801004 	movi	r18,64
    5484:	003fe006 	br	5408 <__smakebuf_r+0xb0>
    5488:	81000a17 	ldw	r4,40(r16)
    548c:	00c00034 	movhi	r3,0
    5490:	18de3404 	addi	r3,r3,30928
    5494:	20ffc51e 	bne	r4,r3,53ac <__smakebuf_r+0x54>
    5498:	8080030b 	ldhu	r2,12(r16)
    549c:	04810004 	movi	r18,1024
    54a0:	84801315 	stw	r18,76(r16)
    54a4:	1484b03a 	or	r2,r2,r18
    54a8:	8080030d 	sth	r2,12(r16)
    54ac:	0027883a 	mov	r19,zero
    54b0:	003fd806 	br	5414 <__smakebuf_r+0xbc>
    54b4:	8140038f 	ldh	r5,14(r16)
    54b8:	8809883a 	mov	r4,r17
    54bc:	00095380 	call	9538 <_isatty_r>
    54c0:	103fe226 	beq	r2,zero,544c <__smakebuf_r+0xf4>
    54c4:	8080030b 	ldhu	r2,12(r16)
    54c8:	10800054 	ori	r2,r2,1
    54cc:	8080030d 	sth	r2,12(r16)
    54d0:	003fde06 	br	544c <__smakebuf_r+0xf4>
    54d4:	8080030b 	ldhu	r2,12(r16)
    54d8:	10c0800c 	andi	r3,r2,512
    54dc:	183fdb1e 	bne	r3,zero,544c <__smakebuf_r+0xf4>
    54e0:	10800094 	ori	r2,r2,2
    54e4:	80c010c4 	addi	r3,r16,67
    54e8:	8080030d 	sth	r2,12(r16)
    54ec:	00800044 	movi	r2,1
    54f0:	80c00015 	stw	r3,0(r16)
    54f4:	80c00415 	stw	r3,16(r16)
    54f8:	80800515 	stw	r2,20(r16)
    54fc:	003fd306 	br	544c <__smakebuf_r+0xf4>
    5500:	04810004 	movi	r18,1024
    5504:	003fc306 	br	5414 <__smakebuf_r+0xbc>
    5508:	0027883a 	mov	r19,zero
    550c:	04810004 	movi	r18,1024
    5510:	003fc006 	br	5414 <__smakebuf_r+0xbc>

00005514 <_malloc_r>:
    5514:	defff504 	addi	sp,sp,-44
    5518:	dc800315 	stw	r18,12(sp)
    551c:	dfc00a15 	stw	ra,40(sp)
    5520:	df000915 	stw	fp,36(sp)
    5524:	ddc00815 	stw	r23,32(sp)
    5528:	dd800715 	stw	r22,28(sp)
    552c:	dd400615 	stw	r21,24(sp)
    5530:	dd000515 	stw	r20,20(sp)
    5534:	dcc00415 	stw	r19,16(sp)
    5538:	dc400215 	stw	r17,8(sp)
    553c:	dc000115 	stw	r16,4(sp)
    5540:	288002c4 	addi	r2,r5,11
    5544:	00c00584 	movi	r3,22
    5548:	2025883a 	mov	r18,r4
    554c:	18807f2e 	bgeu	r3,r2,574c <_malloc_r+0x238>
    5550:	047ffe04 	movi	r17,-8
    5554:	1462703a 	and	r17,r2,r17
    5558:	8800a316 	blt	r17,zero,57e8 <_malloc_r+0x2d4>
    555c:	8940a236 	bltu	r17,r5,57e8 <_malloc_r+0x2d4>
    5560:	000d2240 	call	d224 <__malloc_lock>
    5564:	00807dc4 	movi	r2,503
    5568:	1441e92e 	bgeu	r2,r17,5d10 <_malloc_r+0x7fc>
    556c:	8804d27a 	srli	r2,r17,9
    5570:	1000a126 	beq	r2,zero,57f8 <_malloc_r+0x2e4>
    5574:	00c00104 	movi	r3,4
    5578:	18811e36 	bltu	r3,r2,59f4 <_malloc_r+0x4e0>
    557c:	8804d1ba 	srli	r2,r17,6
    5580:	12000e44 	addi	r8,r2,57
    5584:	11c00e04 	addi	r7,r2,56
    5588:	4209883a 	add	r4,r8,r8
    558c:	04c00074 	movhi	r19,1
    5590:	2109883a 	add	r4,r4,r4
    5594:	9cc03d04 	addi	r19,r19,244
    5598:	2109883a 	add	r4,r4,r4
    559c:	9909883a 	add	r4,r19,r4
    55a0:	24000117 	ldw	r16,4(r4)
    55a4:	213ffe04 	addi	r4,r4,-8
    55a8:	24009726 	beq	r4,r16,5808 <_malloc_r+0x2f4>
    55ac:	80800117 	ldw	r2,4(r16)
    55b0:	01bfff04 	movi	r6,-4
    55b4:	014003c4 	movi	r5,15
    55b8:	1184703a 	and	r2,r2,r6
    55bc:	1447c83a 	sub	r3,r2,r17
    55c0:	28c00716 	blt	r5,r3,55e0 <_malloc_r+0xcc>
    55c4:	1800920e 	bge	r3,zero,5810 <_malloc_r+0x2fc>
    55c8:	84000317 	ldw	r16,12(r16)
    55cc:	24008e26 	beq	r4,r16,5808 <_malloc_r+0x2f4>
    55d0:	80800117 	ldw	r2,4(r16)
    55d4:	1184703a 	and	r2,r2,r6
    55d8:	1447c83a 	sub	r3,r2,r17
    55dc:	28fff90e 	bge	r5,r3,55c4 <_malloc_r+0xb0>
    55e0:	3809883a 	mov	r4,r7
    55e4:	01800074 	movhi	r6,1
    55e8:	9c000417 	ldw	r16,16(r19)
    55ec:	31803d04 	addi	r6,r6,244
    55f0:	32000204 	addi	r8,r6,8
    55f4:	82013426 	beq	r16,r8,5ac8 <_malloc_r+0x5b4>
    55f8:	80c00117 	ldw	r3,4(r16)
    55fc:	00bfff04 	movi	r2,-4
    5600:	188e703a 	and	r7,r3,r2
    5604:	3c45c83a 	sub	r2,r7,r17
    5608:	00c003c4 	movi	r3,15
    560c:	18811f16 	blt	r3,r2,5a8c <_malloc_r+0x578>
    5610:	32000515 	stw	r8,20(r6)
    5614:	32000415 	stw	r8,16(r6)
    5618:	10007f0e 	bge	r2,zero,5818 <_malloc_r+0x304>
    561c:	00807fc4 	movi	r2,511
    5620:	11c0fd36 	bltu	r2,r7,5a18 <_malloc_r+0x504>
    5624:	3806d0fa 	srli	r3,r7,3
    5628:	01c00044 	movi	r7,1
    562c:	30800117 	ldw	r2,4(r6)
    5630:	19400044 	addi	r5,r3,1
    5634:	294b883a 	add	r5,r5,r5
    5638:	1807d0ba 	srai	r3,r3,2
    563c:	294b883a 	add	r5,r5,r5
    5640:	294b883a 	add	r5,r5,r5
    5644:	298b883a 	add	r5,r5,r6
    5648:	38c6983a 	sll	r3,r7,r3
    564c:	29c00017 	ldw	r7,0(r5)
    5650:	2a7ffe04 	addi	r9,r5,-8
    5654:	1886b03a 	or	r3,r3,r2
    5658:	82400315 	stw	r9,12(r16)
    565c:	81c00215 	stw	r7,8(r16)
    5660:	30c00115 	stw	r3,4(r6)
    5664:	2c000015 	stw	r16,0(r5)
    5668:	3c000315 	stw	r16,12(r7)
    566c:	2005d0ba 	srai	r2,r4,2
    5670:	01400044 	movi	r5,1
    5674:	288a983a 	sll	r5,r5,r2
    5678:	19406f36 	bltu	r3,r5,5838 <_malloc_r+0x324>
    567c:	28c4703a 	and	r2,r5,r3
    5680:	10000a1e 	bne	r2,zero,56ac <_malloc_r+0x198>
    5684:	00bfff04 	movi	r2,-4
    5688:	294b883a 	add	r5,r5,r5
    568c:	2088703a 	and	r4,r4,r2
    5690:	28c4703a 	and	r2,r5,r3
    5694:	21000104 	addi	r4,r4,4
    5698:	1000041e 	bne	r2,zero,56ac <_malloc_r+0x198>
    569c:	294b883a 	add	r5,r5,r5
    56a0:	28c4703a 	and	r2,r5,r3
    56a4:	21000104 	addi	r4,r4,4
    56a8:	103ffc26 	beq	r2,zero,569c <_malloc_r+0x188>
    56ac:	02bfff04 	movi	r10,-4
    56b0:	024003c4 	movi	r9,15
    56b4:	21800044 	addi	r6,r4,1
    56b8:	318d883a 	add	r6,r6,r6
    56bc:	318d883a 	add	r6,r6,r6
    56c0:	318d883a 	add	r6,r6,r6
    56c4:	998d883a 	add	r6,r19,r6
    56c8:	333ffe04 	addi	r12,r6,-8
    56cc:	2017883a 	mov	r11,r4
    56d0:	31800104 	addi	r6,r6,4
    56d4:	34000017 	ldw	r16,0(r6)
    56d8:	31fffd04 	addi	r7,r6,-12
    56dc:	81c0041e 	bne	r16,r7,56f0 <_malloc_r+0x1dc>
    56e0:	0000fb06 	br	5ad0 <_malloc_r+0x5bc>
    56e4:	1801030e 	bge	r3,zero,5af4 <_malloc_r+0x5e0>
    56e8:	84000317 	ldw	r16,12(r16)
    56ec:	81c0f826 	beq	r16,r7,5ad0 <_malloc_r+0x5bc>
    56f0:	80800117 	ldw	r2,4(r16)
    56f4:	1284703a 	and	r2,r2,r10
    56f8:	1447c83a 	sub	r3,r2,r17
    56fc:	48fff90e 	bge	r9,r3,56e4 <_malloc_r+0x1d0>
    5700:	80800317 	ldw	r2,12(r16)
    5704:	81000217 	ldw	r4,8(r16)
    5708:	89400054 	ori	r5,r17,1
    570c:	81400115 	stw	r5,4(r16)
    5710:	20800315 	stw	r2,12(r4)
    5714:	11000215 	stw	r4,8(r2)
    5718:	8463883a 	add	r17,r16,r17
    571c:	9c400515 	stw	r17,20(r19)
    5720:	9c400415 	stw	r17,16(r19)
    5724:	18800054 	ori	r2,r3,1
    5728:	88800115 	stw	r2,4(r17)
    572c:	8a000315 	stw	r8,12(r17)
    5730:	8a000215 	stw	r8,8(r17)
    5734:	88e3883a 	add	r17,r17,r3
    5738:	88c00015 	stw	r3,0(r17)
    573c:	9009883a 	mov	r4,r18
    5740:	000d2480 	call	d248 <__malloc_unlock>
    5744:	80800204 	addi	r2,r16,8
    5748:	00001b06 	br	57b8 <_malloc_r+0x2a4>
    574c:	04400404 	movi	r17,16
    5750:	89402536 	bltu	r17,r5,57e8 <_malloc_r+0x2d4>
    5754:	000d2240 	call	d224 <__malloc_lock>
    5758:	00800184 	movi	r2,6
    575c:	01000084 	movi	r4,2
    5760:	04c00074 	movhi	r19,1
    5764:	1085883a 	add	r2,r2,r2
    5768:	9cc03d04 	addi	r19,r19,244
    576c:	1085883a 	add	r2,r2,r2
    5770:	9885883a 	add	r2,r19,r2
    5774:	14000117 	ldw	r16,4(r2)
    5778:	10fffe04 	addi	r3,r2,-8
    577c:	80c0d926 	beq	r16,r3,5ae4 <_malloc_r+0x5d0>
    5780:	80c00117 	ldw	r3,4(r16)
    5784:	81000317 	ldw	r4,12(r16)
    5788:	00bfff04 	movi	r2,-4
    578c:	1884703a 	and	r2,r3,r2
    5790:	81400217 	ldw	r5,8(r16)
    5794:	8085883a 	add	r2,r16,r2
    5798:	10c00117 	ldw	r3,4(r2)
    579c:	29000315 	stw	r4,12(r5)
    57a0:	21400215 	stw	r5,8(r4)
    57a4:	18c00054 	ori	r3,r3,1
    57a8:	10c00115 	stw	r3,4(r2)
    57ac:	9009883a 	mov	r4,r18
    57b0:	000d2480 	call	d248 <__malloc_unlock>
    57b4:	80800204 	addi	r2,r16,8
    57b8:	dfc00a17 	ldw	ra,40(sp)
    57bc:	df000917 	ldw	fp,36(sp)
    57c0:	ddc00817 	ldw	r23,32(sp)
    57c4:	dd800717 	ldw	r22,28(sp)
    57c8:	dd400617 	ldw	r21,24(sp)
    57cc:	dd000517 	ldw	r20,20(sp)
    57d0:	dcc00417 	ldw	r19,16(sp)
    57d4:	dc800317 	ldw	r18,12(sp)
    57d8:	dc400217 	ldw	r17,8(sp)
    57dc:	dc000117 	ldw	r16,4(sp)
    57e0:	dec00b04 	addi	sp,sp,44
    57e4:	f800283a 	ret
    57e8:	00800304 	movi	r2,12
    57ec:	90800015 	stw	r2,0(r18)
    57f0:	0005883a 	mov	r2,zero
    57f4:	003ff006 	br	57b8 <_malloc_r+0x2a4>
    57f8:	01002004 	movi	r4,128
    57fc:	02001004 	movi	r8,64
    5800:	01c00fc4 	movi	r7,63
    5804:	003f6106 	br	558c <_malloc_r+0x78>
    5808:	4009883a 	mov	r4,r8
    580c:	003f7506 	br	55e4 <_malloc_r+0xd0>
    5810:	81000317 	ldw	r4,12(r16)
    5814:	003fde06 	br	5790 <_malloc_r+0x27c>
    5818:	81c5883a 	add	r2,r16,r7
    581c:	11400117 	ldw	r5,4(r2)
    5820:	9009883a 	mov	r4,r18
    5824:	29400054 	ori	r5,r5,1
    5828:	11400115 	stw	r5,4(r2)
    582c:	000d2480 	call	d248 <__malloc_unlock>
    5830:	80800204 	addi	r2,r16,8
    5834:	003fe006 	br	57b8 <_malloc_r+0x2a4>
    5838:	9c000217 	ldw	r16,8(r19)
    583c:	00bfff04 	movi	r2,-4
    5840:	85800117 	ldw	r22,4(r16)
    5844:	b0ac703a 	and	r22,r22,r2
    5848:	b4400336 	bltu	r22,r17,5858 <_malloc_r+0x344>
    584c:	b445c83a 	sub	r2,r22,r17
    5850:	00c003c4 	movi	r3,15
    5854:	18805d16 	blt	r3,r2,59cc <_malloc_r+0x4b8>
    5858:	05c00074 	movhi	r23,1
    585c:	00800074 	movhi	r2,1
    5860:	108ca704 	addi	r2,r2,12956
    5864:	bdc5cf04 	addi	r23,r23,5948
    5868:	15400017 	ldw	r21,0(r2)
    586c:	b8c00017 	ldw	r3,0(r23)
    5870:	00bfffc4 	movi	r2,-1
    5874:	858d883a 	add	r6,r16,r22
    5878:	8d6b883a 	add	r21,r17,r21
    587c:	1880ea26 	beq	r3,r2,5c28 <_malloc_r+0x714>
    5880:	ad4403c4 	addi	r21,r21,4111
    5884:	00bc0004 	movi	r2,-4096
    5888:	a8aa703a 	and	r21,r21,r2
    588c:	a80b883a 	mov	r5,r21
    5890:	9009883a 	mov	r4,r18
    5894:	d9800015 	stw	r6,0(sp)
    5898:	00077a40 	call	77a4 <_sbrk_r>
    589c:	1029883a 	mov	r20,r2
    58a0:	00bfffc4 	movi	r2,-1
    58a4:	d9800017 	ldw	r6,0(sp)
    58a8:	a080e826 	beq	r20,r2,5c4c <_malloc_r+0x738>
    58ac:	a180a636 	bltu	r20,r6,5b48 <_malloc_r+0x634>
    58b0:	07000074 	movhi	fp,1
    58b4:	e70cb004 	addi	fp,fp,12992
    58b8:	e0800017 	ldw	r2,0(fp)
    58bc:	a887883a 	add	r3,r21,r2
    58c0:	e0c00015 	stw	r3,0(fp)
    58c4:	3500e626 	beq	r6,r20,5c60 <_malloc_r+0x74c>
    58c8:	b9000017 	ldw	r4,0(r23)
    58cc:	00bfffc4 	movi	r2,-1
    58d0:	2080ee26 	beq	r4,r2,5c8c <_malloc_r+0x778>
    58d4:	a185c83a 	sub	r2,r20,r6
    58d8:	10c5883a 	add	r2,r2,r3
    58dc:	e0800015 	stw	r2,0(fp)
    58e0:	a0c001cc 	andi	r3,r20,7
    58e4:	1800bc26 	beq	r3,zero,5bd8 <_malloc_r+0x6c4>
    58e8:	a0e9c83a 	sub	r20,r20,r3
    58ec:	00840204 	movi	r2,4104
    58f0:	a5000204 	addi	r20,r20,8
    58f4:	10c7c83a 	sub	r3,r2,r3
    58f8:	a545883a 	add	r2,r20,r21
    58fc:	1083ffcc 	andi	r2,r2,4095
    5900:	18abc83a 	sub	r21,r3,r2
    5904:	a80b883a 	mov	r5,r21
    5908:	9009883a 	mov	r4,r18
    590c:	00077a40 	call	77a4 <_sbrk_r>
    5910:	00ffffc4 	movi	r3,-1
    5914:	10c0e126 	beq	r2,r3,5c9c <_malloc_r+0x788>
    5918:	1505c83a 	sub	r2,r2,r20
    591c:	1545883a 	add	r2,r2,r21
    5920:	10800054 	ori	r2,r2,1
    5924:	e0c00017 	ldw	r3,0(fp)
    5928:	9d000215 	stw	r20,8(r19)
    592c:	a0800115 	stw	r2,4(r20)
    5930:	a8c7883a 	add	r3,r21,r3
    5934:	e0c00015 	stw	r3,0(fp)
    5938:	84c00e26 	beq	r16,r19,5974 <_malloc_r+0x460>
    593c:	018003c4 	movi	r6,15
    5940:	3580a72e 	bgeu	r6,r22,5be0 <_malloc_r+0x6cc>
    5944:	81400117 	ldw	r5,4(r16)
    5948:	013ffe04 	movi	r4,-8
    594c:	b0bffd04 	addi	r2,r22,-12
    5950:	1104703a 	and	r2,r2,r4
    5954:	2900004c 	andi	r4,r5,1
    5958:	2088b03a 	or	r4,r4,r2
    595c:	81000115 	stw	r4,4(r16)
    5960:	01400144 	movi	r5,5
    5964:	8089883a 	add	r4,r16,r2
    5968:	21400115 	stw	r5,4(r4)
    596c:	21400215 	stw	r5,8(r4)
    5970:	3080cd36 	bltu	r6,r2,5ca8 <_malloc_r+0x794>
    5974:	00800074 	movhi	r2,1
    5978:	108ca604 	addi	r2,r2,12952
    597c:	11000017 	ldw	r4,0(r2)
    5980:	20c0012e 	bgeu	r4,r3,5988 <_malloc_r+0x474>
    5984:	10c00015 	stw	r3,0(r2)
    5988:	00800074 	movhi	r2,1
    598c:	108ca504 	addi	r2,r2,12948
    5990:	11000017 	ldw	r4,0(r2)
    5994:	9c000217 	ldw	r16,8(r19)
    5998:	20c0012e 	bgeu	r4,r3,59a0 <_malloc_r+0x48c>
    599c:	10c00015 	stw	r3,0(r2)
    59a0:	80c00117 	ldw	r3,4(r16)
    59a4:	00bfff04 	movi	r2,-4
    59a8:	1886703a 	and	r3,r3,r2
    59ac:	1c45c83a 	sub	r2,r3,r17
    59b0:	1c400236 	bltu	r3,r17,59bc <_malloc_r+0x4a8>
    59b4:	00c003c4 	movi	r3,15
    59b8:	18800416 	blt	r3,r2,59cc <_malloc_r+0x4b8>
    59bc:	9009883a 	mov	r4,r18
    59c0:	000d2480 	call	d248 <__malloc_unlock>
    59c4:	0005883a 	mov	r2,zero
    59c8:	003f7b06 	br	57b8 <_malloc_r+0x2a4>
    59cc:	88c00054 	ori	r3,r17,1
    59d0:	80c00115 	stw	r3,4(r16)
    59d4:	8463883a 	add	r17,r16,r17
    59d8:	10800054 	ori	r2,r2,1
    59dc:	9c400215 	stw	r17,8(r19)
    59e0:	88800115 	stw	r2,4(r17)
    59e4:	9009883a 	mov	r4,r18
    59e8:	000d2480 	call	d248 <__malloc_unlock>
    59ec:	80800204 	addi	r2,r16,8
    59f0:	003f7106 	br	57b8 <_malloc_r+0x2a4>
    59f4:	00c00504 	movi	r3,20
    59f8:	18804a2e 	bgeu	r3,r2,5b24 <_malloc_r+0x610>
    59fc:	00c01504 	movi	r3,84
    5a00:	18806e36 	bltu	r3,r2,5bbc <_malloc_r+0x6a8>
    5a04:	8804d33a 	srli	r2,r17,12
    5a08:	12001bc4 	addi	r8,r2,111
    5a0c:	11c01b84 	addi	r7,r2,110
    5a10:	4209883a 	add	r4,r8,r8
    5a14:	003edd06 	br	558c <_malloc_r+0x78>
    5a18:	3804d27a 	srli	r2,r7,9
    5a1c:	00c00104 	movi	r3,4
    5a20:	1880442e 	bgeu	r3,r2,5b34 <_malloc_r+0x620>
    5a24:	00c00504 	movi	r3,20
    5a28:	18808136 	bltu	r3,r2,5c30 <_malloc_r+0x71c>
    5a2c:	11401704 	addi	r5,r2,92
    5a30:	10c016c4 	addi	r3,r2,91
    5a34:	294b883a 	add	r5,r5,r5
    5a38:	294b883a 	add	r5,r5,r5
    5a3c:	294b883a 	add	r5,r5,r5
    5a40:	994b883a 	add	r5,r19,r5
    5a44:	28800017 	ldw	r2,0(r5)
    5a48:	01800074 	movhi	r6,1
    5a4c:	297ffe04 	addi	r5,r5,-8
    5a50:	31803d04 	addi	r6,r6,244
    5a54:	28806526 	beq	r5,r2,5bec <_malloc_r+0x6d8>
    5a58:	01bfff04 	movi	r6,-4
    5a5c:	10c00117 	ldw	r3,4(r2)
    5a60:	1986703a 	and	r3,r3,r6
    5a64:	38c0022e 	bgeu	r7,r3,5a70 <_malloc_r+0x55c>
    5a68:	10800217 	ldw	r2,8(r2)
    5a6c:	28bffb1e 	bne	r5,r2,5a5c <_malloc_r+0x548>
    5a70:	11400317 	ldw	r5,12(r2)
    5a74:	98c00117 	ldw	r3,4(r19)
    5a78:	81400315 	stw	r5,12(r16)
    5a7c:	80800215 	stw	r2,8(r16)
    5a80:	2c000215 	stw	r16,8(r5)
    5a84:	14000315 	stw	r16,12(r2)
    5a88:	003ef806 	br	566c <_malloc_r+0x158>
    5a8c:	88c00054 	ori	r3,r17,1
    5a90:	80c00115 	stw	r3,4(r16)
    5a94:	8463883a 	add	r17,r16,r17
    5a98:	34400515 	stw	r17,20(r6)
    5a9c:	34400415 	stw	r17,16(r6)
    5aa0:	10c00054 	ori	r3,r2,1
    5aa4:	8a000315 	stw	r8,12(r17)
    5aa8:	8a000215 	stw	r8,8(r17)
    5aac:	88c00115 	stw	r3,4(r17)
    5ab0:	88a3883a 	add	r17,r17,r2
    5ab4:	88800015 	stw	r2,0(r17)
    5ab8:	9009883a 	mov	r4,r18
    5abc:	000d2480 	call	d248 <__malloc_unlock>
    5ac0:	80800204 	addi	r2,r16,8
    5ac4:	003f3c06 	br	57b8 <_malloc_r+0x2a4>
    5ac8:	30c00117 	ldw	r3,4(r6)
    5acc:	003ee706 	br	566c <_malloc_r+0x158>
    5ad0:	5ac00044 	addi	r11,r11,1
    5ad4:	588000cc 	andi	r2,r11,3
    5ad8:	31800204 	addi	r6,r6,8
    5adc:	103efd1e 	bne	r2,zero,56d4 <_malloc_r+0x1c0>
    5ae0:	00002406 	br	5b74 <_malloc_r+0x660>
    5ae4:	14000317 	ldw	r16,12(r2)
    5ae8:	143f251e 	bne	r2,r16,5780 <_malloc_r+0x26c>
    5aec:	21000084 	addi	r4,r4,2
    5af0:	003ebc06 	br	55e4 <_malloc_r+0xd0>
    5af4:	8085883a 	add	r2,r16,r2
    5af8:	10c00117 	ldw	r3,4(r2)
    5afc:	81000317 	ldw	r4,12(r16)
    5b00:	81400217 	ldw	r5,8(r16)
    5b04:	18c00054 	ori	r3,r3,1
    5b08:	10c00115 	stw	r3,4(r2)
    5b0c:	29000315 	stw	r4,12(r5)
    5b10:	21400215 	stw	r5,8(r4)
    5b14:	9009883a 	mov	r4,r18
    5b18:	000d2480 	call	d248 <__malloc_unlock>
    5b1c:	80800204 	addi	r2,r16,8
    5b20:	003f2506 	br	57b8 <_malloc_r+0x2a4>
    5b24:	12001704 	addi	r8,r2,92
    5b28:	11c016c4 	addi	r7,r2,91
    5b2c:	4209883a 	add	r4,r8,r8
    5b30:	003e9606 	br	558c <_malloc_r+0x78>
    5b34:	3804d1ba 	srli	r2,r7,6
    5b38:	11400e44 	addi	r5,r2,57
    5b3c:	10c00e04 	addi	r3,r2,56
    5b40:	294b883a 	add	r5,r5,r5
    5b44:	003fbc06 	br	5a38 <_malloc_r+0x524>
    5b48:	84ff5926 	beq	r16,r19,58b0 <_malloc_r+0x39c>
    5b4c:	00800074 	movhi	r2,1
    5b50:	10803d04 	addi	r2,r2,244
    5b54:	14000217 	ldw	r16,8(r2)
    5b58:	00bfff04 	movi	r2,-4
    5b5c:	80c00117 	ldw	r3,4(r16)
    5b60:	1886703a 	and	r3,r3,r2
    5b64:	003f9106 	br	59ac <_malloc_r+0x498>
    5b68:	60800217 	ldw	r2,8(r12)
    5b6c:	213fffc4 	addi	r4,r4,-1
    5b70:	1300651e 	bne	r2,r12,5d08 <_malloc_r+0x7f4>
    5b74:	208000cc 	andi	r2,r4,3
    5b78:	633ffe04 	addi	r12,r12,-8
    5b7c:	103ffa1e 	bne	r2,zero,5b68 <_malloc_r+0x654>
    5b80:	98800117 	ldw	r2,4(r19)
    5b84:	0146303a 	nor	r3,zero,r5
    5b88:	1884703a 	and	r2,r3,r2
    5b8c:	98800115 	stw	r2,4(r19)
    5b90:	294b883a 	add	r5,r5,r5
    5b94:	117f2836 	bltu	r2,r5,5838 <_malloc_r+0x324>
    5b98:	283f2726 	beq	r5,zero,5838 <_malloc_r+0x324>
    5b9c:	2886703a 	and	r3,r5,r2
    5ba0:	5809883a 	mov	r4,r11
    5ba4:	183ec31e 	bne	r3,zero,56b4 <_malloc_r+0x1a0>
    5ba8:	294b883a 	add	r5,r5,r5
    5bac:	2886703a 	and	r3,r5,r2
    5bb0:	21000104 	addi	r4,r4,4
    5bb4:	183ffc26 	beq	r3,zero,5ba8 <_malloc_r+0x694>
    5bb8:	003ebe06 	br	56b4 <_malloc_r+0x1a0>
    5bbc:	00c05504 	movi	r3,340
    5bc0:	18801236 	bltu	r3,r2,5c0c <_malloc_r+0x6f8>
    5bc4:	8804d3fa 	srli	r2,r17,15
    5bc8:	12001e04 	addi	r8,r2,120
    5bcc:	11c01dc4 	addi	r7,r2,119
    5bd0:	4209883a 	add	r4,r8,r8
    5bd4:	003e6d06 	br	558c <_malloc_r+0x78>
    5bd8:	00c40004 	movi	r3,4096
    5bdc:	003f4606 	br	58f8 <_malloc_r+0x3e4>
    5be0:	00800044 	movi	r2,1
    5be4:	a0800115 	stw	r2,4(r20)
    5be8:	003f7406 	br	59bc <_malloc_r+0x4a8>
    5bec:	1805d0ba 	srai	r2,r3,2
    5bf0:	01c00044 	movi	r7,1
    5bf4:	30c00117 	ldw	r3,4(r6)
    5bf8:	388e983a 	sll	r7,r7,r2
    5bfc:	2805883a 	mov	r2,r5
    5c00:	38c6b03a 	or	r3,r7,r3
    5c04:	30c00115 	stw	r3,4(r6)
    5c08:	003f9b06 	br	5a78 <_malloc_r+0x564>
    5c0c:	00c15504 	movi	r3,1364
    5c10:	18801a36 	bltu	r3,r2,5c7c <_malloc_r+0x768>
    5c14:	8804d4ba 	srli	r2,r17,18
    5c18:	12001f44 	addi	r8,r2,125
    5c1c:	11c01f04 	addi	r7,r2,124
    5c20:	4209883a 	add	r4,r8,r8
    5c24:	003e5906 	br	558c <_malloc_r+0x78>
    5c28:	ad400404 	addi	r21,r21,16
    5c2c:	003f1706 	br	588c <_malloc_r+0x378>
    5c30:	00c01504 	movi	r3,84
    5c34:	18802336 	bltu	r3,r2,5cc4 <_malloc_r+0x7b0>
    5c38:	3804d33a 	srli	r2,r7,12
    5c3c:	11401bc4 	addi	r5,r2,111
    5c40:	10c01b84 	addi	r3,r2,110
    5c44:	294b883a 	add	r5,r5,r5
    5c48:	003f7b06 	br	5a38 <_malloc_r+0x524>
    5c4c:	9c000217 	ldw	r16,8(r19)
    5c50:	00bfff04 	movi	r2,-4
    5c54:	80c00117 	ldw	r3,4(r16)
    5c58:	1886703a 	and	r3,r3,r2
    5c5c:	003f5306 	br	59ac <_malloc_r+0x498>
    5c60:	3083ffcc 	andi	r2,r6,4095
    5c64:	103f181e 	bne	r2,zero,58c8 <_malloc_r+0x3b4>
    5c68:	99000217 	ldw	r4,8(r19)
    5c6c:	b545883a 	add	r2,r22,r21
    5c70:	10800054 	ori	r2,r2,1
    5c74:	20800115 	stw	r2,4(r4)
    5c78:	003f3e06 	br	5974 <_malloc_r+0x460>
    5c7c:	01003f84 	movi	r4,254
    5c80:	02001fc4 	movi	r8,127
    5c84:	01c01f84 	movi	r7,126
    5c88:	003e4006 	br	558c <_malloc_r+0x78>
    5c8c:	00800074 	movhi	r2,1
    5c90:	1085cf04 	addi	r2,r2,5948
    5c94:	15000015 	stw	r20,0(r2)
    5c98:	003f1106 	br	58e0 <_malloc_r+0x3cc>
    5c9c:	00800044 	movi	r2,1
    5ca0:	002b883a 	mov	r21,zero
    5ca4:	003f1f06 	br	5924 <_malloc_r+0x410>
    5ca8:	81400204 	addi	r5,r16,8
    5cac:	9009883a 	mov	r4,r18
    5cb0:	00049280 	call	4928 <_free_r>
    5cb4:	00800074 	movhi	r2,1
    5cb8:	108cb004 	addi	r2,r2,12992
    5cbc:	10c00017 	ldw	r3,0(r2)
    5cc0:	003f2c06 	br	5974 <_malloc_r+0x460>
    5cc4:	00c05504 	movi	r3,340
    5cc8:	18800536 	bltu	r3,r2,5ce0 <_malloc_r+0x7cc>
    5ccc:	3804d3fa 	srli	r2,r7,15
    5cd0:	11401e04 	addi	r5,r2,120
    5cd4:	10c01dc4 	addi	r3,r2,119
    5cd8:	294b883a 	add	r5,r5,r5
    5cdc:	003f5606 	br	5a38 <_malloc_r+0x524>
    5ce0:	00c15504 	movi	r3,1364
    5ce4:	18800536 	bltu	r3,r2,5cfc <_malloc_r+0x7e8>
    5ce8:	3804d4ba 	srli	r2,r7,18
    5cec:	11401f44 	addi	r5,r2,125
    5cf0:	10c01f04 	addi	r3,r2,124
    5cf4:	294b883a 	add	r5,r5,r5
    5cf8:	003f4f06 	br	5a38 <_malloc_r+0x524>
    5cfc:	01403f84 	movi	r5,254
    5d00:	00c01f84 	movi	r3,126
    5d04:	003f4c06 	br	5a38 <_malloc_r+0x524>
    5d08:	98800117 	ldw	r2,4(r19)
    5d0c:	003fa006 	br	5b90 <_malloc_r+0x67c>
    5d10:	8808d0fa 	srli	r4,r17,3
    5d14:	20800044 	addi	r2,r4,1
    5d18:	1085883a 	add	r2,r2,r2
    5d1c:	003e9006 	br	5760 <_malloc_r+0x24c>

00005d20 <memchr>:
    5d20:	208000cc 	andi	r2,r4,3
    5d24:	280f883a 	mov	r7,r5
    5d28:	10003426 	beq	r2,zero,5dfc <memchr+0xdc>
    5d2c:	30bfffc4 	addi	r2,r6,-1
    5d30:	30001a26 	beq	r6,zero,5d9c <memchr+0x7c>
    5d34:	20c00003 	ldbu	r3,0(r4)
    5d38:	29803fcc 	andi	r6,r5,255
    5d3c:	30c0051e 	bne	r6,r3,5d54 <memchr+0x34>
    5d40:	00001806 	br	5da4 <memchr+0x84>
    5d44:	10001526 	beq	r2,zero,5d9c <memchr+0x7c>
    5d48:	20c00003 	ldbu	r3,0(r4)
    5d4c:	10bfffc4 	addi	r2,r2,-1
    5d50:	30c01426 	beq	r6,r3,5da4 <memchr+0x84>
    5d54:	21000044 	addi	r4,r4,1
    5d58:	20c000cc 	andi	r3,r4,3
    5d5c:	183ff91e 	bne	r3,zero,5d44 <memchr+0x24>
    5d60:	020000c4 	movi	r8,3
    5d64:	40801136 	bltu	r8,r2,5dac <memchr+0x8c>
    5d68:	10000c26 	beq	r2,zero,5d9c <memchr+0x7c>
    5d6c:	20c00003 	ldbu	r3,0(r4)
    5d70:	29403fcc 	andi	r5,r5,255
    5d74:	28c00b26 	beq	r5,r3,5da4 <memchr+0x84>
    5d78:	20c00044 	addi	r3,r4,1
    5d7c:	39803fcc 	andi	r6,r7,255
    5d80:	2089883a 	add	r4,r4,r2
    5d84:	00000306 	br	5d94 <memchr+0x74>
    5d88:	18c00044 	addi	r3,r3,1
    5d8c:	197fffc3 	ldbu	r5,-1(r3)
    5d90:	31400526 	beq	r6,r5,5da8 <memchr+0x88>
    5d94:	1805883a 	mov	r2,r3
    5d98:	20fffb1e 	bne	r4,r3,5d88 <memchr+0x68>
    5d9c:	0005883a 	mov	r2,zero
    5da0:	f800283a 	ret
    5da4:	2005883a 	mov	r2,r4
    5da8:	f800283a 	ret
    5dac:	28c03fcc 	andi	r3,r5,255
    5db0:	1812923a 	slli	r9,r3,8
    5db4:	02ffbff4 	movhi	r11,65279
    5db8:	02a02074 	movhi	r10,32897
    5dbc:	48d2b03a 	or	r9,r9,r3
    5dc0:	4806943a 	slli	r3,r9,16
    5dc4:	5affbfc4 	addi	r11,r11,-257
    5dc8:	52a02004 	addi	r10,r10,-32640
    5dcc:	48d2b03a 	or	r9,r9,r3
    5dd0:	20c00017 	ldw	r3,0(r4)
    5dd4:	48c6f03a 	xor	r3,r9,r3
    5dd8:	1acd883a 	add	r6,r3,r11
    5ddc:	00c6303a 	nor	r3,zero,r3
    5de0:	30c6703a 	and	r3,r6,r3
    5de4:	1a86703a 	and	r3,r3,r10
    5de8:	183fe01e 	bne	r3,zero,5d6c <memchr+0x4c>
    5dec:	10bfff04 	addi	r2,r2,-4
    5df0:	21000104 	addi	r4,r4,4
    5df4:	40bff636 	bltu	r8,r2,5dd0 <memchr+0xb0>
    5df8:	003fdb06 	br	5d68 <memchr+0x48>
    5dfc:	3005883a 	mov	r2,r6
    5e00:	003fd706 	br	5d60 <memchr+0x40>

00005e04 <memcpy>:
    5e04:	defffd04 	addi	sp,sp,-12
    5e08:	dfc00215 	stw	ra,8(sp)
    5e0c:	dc400115 	stw	r17,4(sp)
    5e10:	dc000015 	stw	r16,0(sp)
    5e14:	00c003c4 	movi	r3,15
    5e18:	2005883a 	mov	r2,r4
    5e1c:	1980452e 	bgeu	r3,r6,5f34 <memcpy+0x130>
    5e20:	2906b03a 	or	r3,r5,r4
    5e24:	18c000cc 	andi	r3,r3,3
    5e28:	1800441e 	bne	r3,zero,5f3c <memcpy+0x138>
    5e2c:	347ffc04 	addi	r17,r6,-16
    5e30:	8822d13a 	srli	r17,r17,4
    5e34:	28c00104 	addi	r3,r5,4
    5e38:	23400104 	addi	r13,r4,4
    5e3c:	8820913a 	slli	r16,r17,4
    5e40:	2b000204 	addi	r12,r5,8
    5e44:	22c00204 	addi	r11,r4,8
    5e48:	84000504 	addi	r16,r16,20
    5e4c:	2a800304 	addi	r10,r5,12
    5e50:	22400304 	addi	r9,r4,12
    5e54:	2c21883a 	add	r16,r5,r16
    5e58:	2811883a 	mov	r8,r5
    5e5c:	200f883a 	mov	r7,r4
    5e60:	41000017 	ldw	r4,0(r8)
    5e64:	1fc00017 	ldw	ra,0(r3)
    5e68:	63c00017 	ldw	r15,0(r12)
    5e6c:	39000015 	stw	r4,0(r7)
    5e70:	53800017 	ldw	r14,0(r10)
    5e74:	6fc00015 	stw	ra,0(r13)
    5e78:	5bc00015 	stw	r15,0(r11)
    5e7c:	4b800015 	stw	r14,0(r9)
    5e80:	18c00404 	addi	r3,r3,16
    5e84:	39c00404 	addi	r7,r7,16
    5e88:	42000404 	addi	r8,r8,16
    5e8c:	6b400404 	addi	r13,r13,16
    5e90:	63000404 	addi	r12,r12,16
    5e94:	5ac00404 	addi	r11,r11,16
    5e98:	52800404 	addi	r10,r10,16
    5e9c:	4a400404 	addi	r9,r9,16
    5ea0:	1c3fef1e 	bne	r3,r16,5e60 <memcpy+0x5c>
    5ea4:	89c00044 	addi	r7,r17,1
    5ea8:	380e913a 	slli	r7,r7,4
    5eac:	310003cc 	andi	r4,r6,15
    5eb0:	02c000c4 	movi	r11,3
    5eb4:	11c7883a 	add	r3,r2,r7
    5eb8:	29cb883a 	add	r5,r5,r7
    5ebc:	5900212e 	bgeu	r11,r4,5f44 <memcpy+0x140>
    5ec0:	1813883a 	mov	r9,r3
    5ec4:	2811883a 	mov	r8,r5
    5ec8:	200f883a 	mov	r7,r4
    5ecc:	42800017 	ldw	r10,0(r8)
    5ed0:	4a400104 	addi	r9,r9,4
    5ed4:	39ffff04 	addi	r7,r7,-4
    5ed8:	4abfff15 	stw	r10,-4(r9)
    5edc:	42000104 	addi	r8,r8,4
    5ee0:	59fffa36 	bltu	r11,r7,5ecc <memcpy+0xc8>
    5ee4:	213fff04 	addi	r4,r4,-4
    5ee8:	2008d0ba 	srli	r4,r4,2
    5eec:	318000cc 	andi	r6,r6,3
    5ef0:	21000044 	addi	r4,r4,1
    5ef4:	2109883a 	add	r4,r4,r4
    5ef8:	2109883a 	add	r4,r4,r4
    5efc:	1907883a 	add	r3,r3,r4
    5f00:	290b883a 	add	r5,r5,r4
    5f04:	30000626 	beq	r6,zero,5f20 <memcpy+0x11c>
    5f08:	198d883a 	add	r6,r3,r6
    5f0c:	29c00003 	ldbu	r7,0(r5)
    5f10:	18c00044 	addi	r3,r3,1
    5f14:	29400044 	addi	r5,r5,1
    5f18:	19ffffc5 	stb	r7,-1(r3)
    5f1c:	19bffb1e 	bne	r3,r6,5f0c <memcpy+0x108>
    5f20:	dfc00217 	ldw	ra,8(sp)
    5f24:	dc400117 	ldw	r17,4(sp)
    5f28:	dc000017 	ldw	r16,0(sp)
    5f2c:	dec00304 	addi	sp,sp,12
    5f30:	f800283a 	ret
    5f34:	2007883a 	mov	r3,r4
    5f38:	003ff206 	br	5f04 <memcpy+0x100>
    5f3c:	2007883a 	mov	r3,r4
    5f40:	003ff106 	br	5f08 <memcpy+0x104>
    5f44:	200d883a 	mov	r6,r4
    5f48:	003fee06 	br	5f04 <memcpy+0x100>

00005f4c <memmove>:
    5f4c:	2005883a 	mov	r2,r4
    5f50:	29000b2e 	bgeu	r5,r4,5f80 <memmove+0x34>
    5f54:	298f883a 	add	r7,r5,r6
    5f58:	21c0092e 	bgeu	r4,r7,5f80 <memmove+0x34>
    5f5c:	2187883a 	add	r3,r4,r6
    5f60:	198bc83a 	sub	r5,r3,r6
    5f64:	30004826 	beq	r6,zero,6088 <memmove+0x13c>
    5f68:	39ffffc4 	addi	r7,r7,-1
    5f6c:	39000003 	ldbu	r4,0(r7)
    5f70:	18ffffc4 	addi	r3,r3,-1
    5f74:	19000005 	stb	r4,0(r3)
    5f78:	28fffb1e 	bne	r5,r3,5f68 <memmove+0x1c>
    5f7c:	f800283a 	ret
    5f80:	00c003c4 	movi	r3,15
    5f84:	1980412e 	bgeu	r3,r6,608c <memmove+0x140>
    5f88:	2886b03a 	or	r3,r5,r2
    5f8c:	18c000cc 	andi	r3,r3,3
    5f90:	1800401e 	bne	r3,zero,6094 <memmove+0x148>
    5f94:	33fffc04 	addi	r15,r6,-16
    5f98:	781ed13a 	srli	r15,r15,4
    5f9c:	28c00104 	addi	r3,r5,4
    5fa0:	13400104 	addi	r13,r2,4
    5fa4:	781c913a 	slli	r14,r15,4
    5fa8:	2b000204 	addi	r12,r5,8
    5fac:	12c00204 	addi	r11,r2,8
    5fb0:	73800504 	addi	r14,r14,20
    5fb4:	2a800304 	addi	r10,r5,12
    5fb8:	12400304 	addi	r9,r2,12
    5fbc:	2b9d883a 	add	r14,r5,r14
    5fc0:	2811883a 	mov	r8,r5
    5fc4:	100f883a 	mov	r7,r2
    5fc8:	41000017 	ldw	r4,0(r8)
    5fcc:	39c00404 	addi	r7,r7,16
    5fd0:	18c00404 	addi	r3,r3,16
    5fd4:	393ffc15 	stw	r4,-16(r7)
    5fd8:	193ffc17 	ldw	r4,-16(r3)
    5fdc:	6b400404 	addi	r13,r13,16
    5fe0:	5ac00404 	addi	r11,r11,16
    5fe4:	693ffc15 	stw	r4,-16(r13)
    5fe8:	61000017 	ldw	r4,0(r12)
    5fec:	4a400404 	addi	r9,r9,16
    5ff0:	42000404 	addi	r8,r8,16
    5ff4:	593ffc15 	stw	r4,-16(r11)
    5ff8:	51000017 	ldw	r4,0(r10)
    5ffc:	63000404 	addi	r12,r12,16
    6000:	52800404 	addi	r10,r10,16
    6004:	493ffc15 	stw	r4,-16(r9)
    6008:	1bbfef1e 	bne	r3,r14,5fc8 <memmove+0x7c>
    600c:	79000044 	addi	r4,r15,1
    6010:	2008913a 	slli	r4,r4,4
    6014:	328003cc 	andi	r10,r6,15
    6018:	02c000c4 	movi	r11,3
    601c:	1107883a 	add	r3,r2,r4
    6020:	290b883a 	add	r5,r5,r4
    6024:	5a801e2e 	bgeu	r11,r10,60a0 <memmove+0x154>
    6028:	1813883a 	mov	r9,r3
    602c:	2811883a 	mov	r8,r5
    6030:	500f883a 	mov	r7,r10
    6034:	41000017 	ldw	r4,0(r8)
    6038:	4a400104 	addi	r9,r9,4
    603c:	39ffff04 	addi	r7,r7,-4
    6040:	493fff15 	stw	r4,-4(r9)
    6044:	42000104 	addi	r8,r8,4
    6048:	59fffa36 	bltu	r11,r7,6034 <memmove+0xe8>
    604c:	513fff04 	addi	r4,r10,-4
    6050:	2008d0ba 	srli	r4,r4,2
    6054:	318000cc 	andi	r6,r6,3
    6058:	21000044 	addi	r4,r4,1
    605c:	2109883a 	add	r4,r4,r4
    6060:	2109883a 	add	r4,r4,r4
    6064:	1907883a 	add	r3,r3,r4
    6068:	290b883a 	add	r5,r5,r4
    606c:	30000b26 	beq	r6,zero,609c <memmove+0x150>
    6070:	198d883a 	add	r6,r3,r6
    6074:	29c00003 	ldbu	r7,0(r5)
    6078:	18c00044 	addi	r3,r3,1
    607c:	29400044 	addi	r5,r5,1
    6080:	19ffffc5 	stb	r7,-1(r3)
    6084:	19bffb1e 	bne	r3,r6,6074 <memmove+0x128>
    6088:	f800283a 	ret
    608c:	1007883a 	mov	r3,r2
    6090:	003ff606 	br	606c <memmove+0x120>
    6094:	1007883a 	mov	r3,r2
    6098:	003ff506 	br	6070 <memmove+0x124>
    609c:	f800283a 	ret
    60a0:	500d883a 	mov	r6,r10
    60a4:	003ff106 	br	606c <memmove+0x120>

000060a8 <memset>:
    60a8:	20c000cc 	andi	r3,r4,3
    60ac:	2005883a 	mov	r2,r4
    60b0:	18004426 	beq	r3,zero,61c4 <memset+0x11c>
    60b4:	31ffffc4 	addi	r7,r6,-1
    60b8:	30004026 	beq	r6,zero,61bc <memset+0x114>
    60bc:	2813883a 	mov	r9,r5
    60c0:	200d883a 	mov	r6,r4
    60c4:	2007883a 	mov	r3,r4
    60c8:	00000406 	br	60dc <memset+0x34>
    60cc:	3a3fffc4 	addi	r8,r7,-1
    60d0:	31800044 	addi	r6,r6,1
    60d4:	38003926 	beq	r7,zero,61bc <memset+0x114>
    60d8:	400f883a 	mov	r7,r8
    60dc:	18c00044 	addi	r3,r3,1
    60e0:	32400005 	stb	r9,0(r6)
    60e4:	1a0000cc 	andi	r8,r3,3
    60e8:	403ff81e 	bne	r8,zero,60cc <memset+0x24>
    60ec:	010000c4 	movi	r4,3
    60f0:	21c02d2e 	bgeu	r4,r7,61a8 <memset+0x100>
    60f4:	29003fcc 	andi	r4,r5,255
    60f8:	200c923a 	slli	r6,r4,8
    60fc:	3108b03a 	or	r4,r6,r4
    6100:	200c943a 	slli	r6,r4,16
    6104:	218cb03a 	or	r6,r4,r6
    6108:	010003c4 	movi	r4,15
    610c:	21c0182e 	bgeu	r4,r7,6170 <memset+0xc8>
    6110:	3b3ffc04 	addi	r12,r7,-16
    6114:	6018d13a 	srli	r12,r12,4
    6118:	1a000104 	addi	r8,r3,4
    611c:	1ac00204 	addi	r11,r3,8
    6120:	6008913a 	slli	r4,r12,4
    6124:	1a800304 	addi	r10,r3,12
    6128:	1813883a 	mov	r9,r3
    612c:	21000504 	addi	r4,r4,20
    6130:	1909883a 	add	r4,r3,r4
    6134:	49800015 	stw	r6,0(r9)
    6138:	41800015 	stw	r6,0(r8)
    613c:	59800015 	stw	r6,0(r11)
    6140:	51800015 	stw	r6,0(r10)
    6144:	42000404 	addi	r8,r8,16
    6148:	4a400404 	addi	r9,r9,16
    614c:	5ac00404 	addi	r11,r11,16
    6150:	52800404 	addi	r10,r10,16
    6154:	413ff71e 	bne	r8,r4,6134 <memset+0x8c>
    6158:	63000044 	addi	r12,r12,1
    615c:	6018913a 	slli	r12,r12,4
    6160:	39c003cc 	andi	r7,r7,15
    6164:	010000c4 	movi	r4,3
    6168:	1b07883a 	add	r3,r3,r12
    616c:	21c00e2e 	bgeu	r4,r7,61a8 <memset+0x100>
    6170:	1813883a 	mov	r9,r3
    6174:	3811883a 	mov	r8,r7
    6178:	010000c4 	movi	r4,3
    617c:	49800015 	stw	r6,0(r9)
    6180:	423fff04 	addi	r8,r8,-4
    6184:	4a400104 	addi	r9,r9,4
    6188:	223ffc36 	bltu	r4,r8,617c <memset+0xd4>
    618c:	393fff04 	addi	r4,r7,-4
    6190:	2008d0ba 	srli	r4,r4,2
    6194:	39c000cc 	andi	r7,r7,3
    6198:	21000044 	addi	r4,r4,1
    619c:	2109883a 	add	r4,r4,r4
    61a0:	2109883a 	add	r4,r4,r4
    61a4:	1907883a 	add	r3,r3,r4
    61a8:	38000526 	beq	r7,zero,61c0 <memset+0x118>
    61ac:	19cf883a 	add	r7,r3,r7
    61b0:	19400005 	stb	r5,0(r3)
    61b4:	18c00044 	addi	r3,r3,1
    61b8:	38fffd1e 	bne	r7,r3,61b0 <memset+0x108>
    61bc:	f800283a 	ret
    61c0:	f800283a 	ret
    61c4:	2007883a 	mov	r3,r4
    61c8:	300f883a 	mov	r7,r6
    61cc:	003fc706 	br	60ec <memset+0x44>

000061d0 <_Balloc>:
    61d0:	20801317 	ldw	r2,76(r4)
    61d4:	defffc04 	addi	sp,sp,-16
    61d8:	dc400115 	stw	r17,4(sp)
    61dc:	dc000015 	stw	r16,0(sp)
    61e0:	dfc00315 	stw	ra,12(sp)
    61e4:	dc800215 	stw	r18,8(sp)
    61e8:	2023883a 	mov	r17,r4
    61ec:	2821883a 	mov	r16,r5
    61f0:	10000f26 	beq	r2,zero,6230 <_Balloc+0x60>
    61f4:	8407883a 	add	r3,r16,r16
    61f8:	18c7883a 	add	r3,r3,r3
    61fc:	10c7883a 	add	r3,r2,r3
    6200:	18800017 	ldw	r2,0(r3)
    6204:	10001126 	beq	r2,zero,624c <_Balloc+0x7c>
    6208:	11000017 	ldw	r4,0(r2)
    620c:	19000015 	stw	r4,0(r3)
    6210:	10000415 	stw	zero,16(r2)
    6214:	10000315 	stw	zero,12(r2)
    6218:	dfc00317 	ldw	ra,12(sp)
    621c:	dc800217 	ldw	r18,8(sp)
    6220:	dc400117 	ldw	r17,4(sp)
    6224:	dc000017 	ldw	r16,0(sp)
    6228:	dec00404 	addi	sp,sp,16
    622c:	f800283a 	ret
    6230:	01800844 	movi	r6,33
    6234:	01400104 	movi	r5,4
    6238:	000910c0 	call	910c <_calloc_r>
    623c:	88801315 	stw	r2,76(r17)
    6240:	103fec1e 	bne	r2,zero,61f4 <_Balloc+0x24>
    6244:	0005883a 	mov	r2,zero
    6248:	003ff306 	br	6218 <_Balloc+0x48>
    624c:	01400044 	movi	r5,1
    6250:	2c24983a 	sll	r18,r5,r16
    6254:	8809883a 	mov	r4,r17
    6258:	91800144 	addi	r6,r18,5
    625c:	318d883a 	add	r6,r6,r6
    6260:	318d883a 	add	r6,r6,r6
    6264:	000910c0 	call	910c <_calloc_r>
    6268:	103ff626 	beq	r2,zero,6244 <_Balloc+0x74>
    626c:	14000115 	stw	r16,4(r2)
    6270:	14800215 	stw	r18,8(r2)
    6274:	003fe606 	br	6210 <_Balloc+0x40>

00006278 <_Bfree>:
    6278:	28000826 	beq	r5,zero,629c <_Bfree+0x24>
    627c:	28c00117 	ldw	r3,4(r5)
    6280:	20801317 	ldw	r2,76(r4)
    6284:	18c7883a 	add	r3,r3,r3
    6288:	18c7883a 	add	r3,r3,r3
    628c:	10c5883a 	add	r2,r2,r3
    6290:	10c00017 	ldw	r3,0(r2)
    6294:	28c00015 	stw	r3,0(r5)
    6298:	11400015 	stw	r5,0(r2)
    629c:	f800283a 	ret

000062a0 <__multadd>:
    62a0:	defffa04 	addi	sp,sp,-24
    62a4:	dc800315 	stw	r18,12(sp)
    62a8:	dc400215 	stw	r17,8(sp)
    62ac:	dc000115 	stw	r16,4(sp)
    62b0:	2823883a 	mov	r17,r5
    62b4:	2c000417 	ldw	r16,16(r5)
    62b8:	dfc00515 	stw	ra,20(sp)
    62bc:	dcc00415 	stw	r19,16(sp)
    62c0:	2025883a 	mov	r18,r4
    62c4:	29400504 	addi	r5,r5,20
    62c8:	0011883a 	mov	r8,zero
    62cc:	28c00017 	ldw	r3,0(r5)
    62d0:	29400104 	addi	r5,r5,4
    62d4:	42000044 	addi	r8,r8,1
    62d8:	18bfffcc 	andi	r2,r3,65535
    62dc:	1185383a 	mul	r2,r2,r6
    62e0:	1806d43a 	srli	r3,r3,16
    62e4:	11cf883a 	add	r7,r2,r7
    62e8:	3808d43a 	srli	r4,r7,16
    62ec:	1987383a 	mul	r3,r3,r6
    62f0:	38bfffcc 	andi	r2,r7,65535
    62f4:	1907883a 	add	r3,r3,r4
    62f8:	1808943a 	slli	r4,r3,16
    62fc:	180ed43a 	srli	r7,r3,16
    6300:	2085883a 	add	r2,r4,r2
    6304:	28bfff15 	stw	r2,-4(r5)
    6308:	443ff016 	blt	r8,r16,62cc <__multadd+0x2c>
    630c:	38000926 	beq	r7,zero,6334 <__multadd+0x94>
    6310:	88800217 	ldw	r2,8(r17)
    6314:	80800f0e 	bge	r16,r2,6354 <__multadd+0xb4>
    6318:	80800144 	addi	r2,r16,5
    631c:	1085883a 	add	r2,r2,r2
    6320:	1085883a 	add	r2,r2,r2
    6324:	8885883a 	add	r2,r17,r2
    6328:	11c00015 	stw	r7,0(r2)
    632c:	84000044 	addi	r16,r16,1
    6330:	8c000415 	stw	r16,16(r17)
    6334:	8805883a 	mov	r2,r17
    6338:	dfc00517 	ldw	ra,20(sp)
    633c:	dcc00417 	ldw	r19,16(sp)
    6340:	dc800317 	ldw	r18,12(sp)
    6344:	dc400217 	ldw	r17,8(sp)
    6348:	dc000117 	ldw	r16,4(sp)
    634c:	dec00604 	addi	sp,sp,24
    6350:	f800283a 	ret
    6354:	89400117 	ldw	r5,4(r17)
    6358:	9009883a 	mov	r4,r18
    635c:	d9c00015 	stw	r7,0(sp)
    6360:	29400044 	addi	r5,r5,1
    6364:	00061d00 	call	61d0 <_Balloc>
    6368:	89800417 	ldw	r6,16(r17)
    636c:	89400304 	addi	r5,r17,12
    6370:	11000304 	addi	r4,r2,12
    6374:	31800084 	addi	r6,r6,2
    6378:	318d883a 	add	r6,r6,r6
    637c:	318d883a 	add	r6,r6,r6
    6380:	1027883a 	mov	r19,r2
    6384:	0005e040 	call	5e04 <memcpy>
    6388:	d9c00017 	ldw	r7,0(sp)
    638c:	88000a26 	beq	r17,zero,63b8 <__multadd+0x118>
    6390:	88c00117 	ldw	r3,4(r17)
    6394:	90801317 	ldw	r2,76(r18)
    6398:	18c7883a 	add	r3,r3,r3
    639c:	18c7883a 	add	r3,r3,r3
    63a0:	10c5883a 	add	r2,r2,r3
    63a4:	10c00017 	ldw	r3,0(r2)
    63a8:	88c00015 	stw	r3,0(r17)
    63ac:	14400015 	stw	r17,0(r2)
    63b0:	9823883a 	mov	r17,r19
    63b4:	003fd806 	br	6318 <__multadd+0x78>
    63b8:	9823883a 	mov	r17,r19
    63bc:	003fd606 	br	6318 <__multadd+0x78>

000063c0 <__s2b>:
    63c0:	defff904 	addi	sp,sp,-28
    63c4:	dc400115 	stw	r17,4(sp)
    63c8:	dc000015 	stw	r16,0(sp)
    63cc:	2023883a 	mov	r17,r4
    63d0:	2821883a 	mov	r16,r5
    63d4:	39000204 	addi	r4,r7,8
    63d8:	01400244 	movi	r5,9
    63dc:	dcc00315 	stw	r19,12(sp)
    63e0:	dc800215 	stw	r18,8(sp)
    63e4:	dfc00615 	stw	ra,24(sp)
    63e8:	dd400515 	stw	r21,20(sp)
    63ec:	dd000415 	stw	r20,16(sp)
    63f0:	3825883a 	mov	r18,r7
    63f4:	3027883a 	mov	r19,r6
    63f8:	000a43c0 	call	a43c <__divsi3>
    63fc:	00c00044 	movi	r3,1
    6400:	000b883a 	mov	r5,zero
    6404:	1880030e 	bge	r3,r2,6414 <__s2b+0x54>
    6408:	18c7883a 	add	r3,r3,r3
    640c:	29400044 	addi	r5,r5,1
    6410:	18bffd16 	blt	r3,r2,6408 <__s2b+0x48>
    6414:	8809883a 	mov	r4,r17
    6418:	00061d00 	call	61d0 <_Balloc>
    641c:	d8c00717 	ldw	r3,28(sp)
    6420:	10c00515 	stw	r3,20(r2)
    6424:	00c00044 	movi	r3,1
    6428:	10c00415 	stw	r3,16(r2)
    642c:	00c00244 	movi	r3,9
    6430:	1cc0210e 	bge	r3,r19,64b8 <__s2b+0xf8>
    6434:	80eb883a 	add	r21,r16,r3
    6438:	a829883a 	mov	r20,r21
    643c:	84e1883a 	add	r16,r16,r19
    6440:	a1c00007 	ldb	r7,0(r20)
    6444:	01800284 	movi	r6,10
    6448:	a5000044 	addi	r20,r20,1
    644c:	100b883a 	mov	r5,r2
    6450:	39fff404 	addi	r7,r7,-48
    6454:	8809883a 	mov	r4,r17
    6458:	00062a00 	call	62a0 <__multadd>
    645c:	a43ff81e 	bne	r20,r16,6440 <__s2b+0x80>
    6460:	ace1883a 	add	r16,r21,r19
    6464:	843ffe04 	addi	r16,r16,-8
    6468:	9c800a0e 	bge	r19,r18,6494 <__s2b+0xd4>
    646c:	94e5c83a 	sub	r18,r18,r19
    6470:	84a5883a 	add	r18,r16,r18
    6474:	81c00007 	ldb	r7,0(r16)
    6478:	01800284 	movi	r6,10
    647c:	84000044 	addi	r16,r16,1
    6480:	100b883a 	mov	r5,r2
    6484:	39fff404 	addi	r7,r7,-48
    6488:	8809883a 	mov	r4,r17
    648c:	00062a00 	call	62a0 <__multadd>
    6490:	84bff81e 	bne	r16,r18,6474 <__s2b+0xb4>
    6494:	dfc00617 	ldw	ra,24(sp)
    6498:	dd400517 	ldw	r21,20(sp)
    649c:	dd000417 	ldw	r20,16(sp)
    64a0:	dcc00317 	ldw	r19,12(sp)
    64a4:	dc800217 	ldw	r18,8(sp)
    64a8:	dc400117 	ldw	r17,4(sp)
    64ac:	dc000017 	ldw	r16,0(sp)
    64b0:	dec00704 	addi	sp,sp,28
    64b4:	f800283a 	ret
    64b8:	84000284 	addi	r16,r16,10
    64bc:	1827883a 	mov	r19,r3
    64c0:	003fe906 	br	6468 <__s2b+0xa8>

000064c4 <__hi0bits>:
    64c4:	20bfffec 	andhi	r2,r4,65535
    64c8:	1000141e 	bne	r2,zero,651c <__hi0bits+0x58>
    64cc:	2008943a 	slli	r4,r4,16
    64d0:	00800404 	movi	r2,16
    64d4:	20ffc02c 	andhi	r3,r4,65280
    64d8:	1800021e 	bne	r3,zero,64e4 <__hi0bits+0x20>
    64dc:	2008923a 	slli	r4,r4,8
    64e0:	10800204 	addi	r2,r2,8
    64e4:	20fc002c 	andhi	r3,r4,61440
    64e8:	1800021e 	bne	r3,zero,64f4 <__hi0bits+0x30>
    64ec:	2008913a 	slli	r4,r4,4
    64f0:	10800104 	addi	r2,r2,4
    64f4:	20f0002c 	andhi	r3,r4,49152
    64f8:	1800031e 	bne	r3,zero,6508 <__hi0bits+0x44>
    64fc:	2109883a 	add	r4,r4,r4
    6500:	10800084 	addi	r2,r2,2
    6504:	2109883a 	add	r4,r4,r4
    6508:	20000316 	blt	r4,zero,6518 <__hi0bits+0x54>
    650c:	2110002c 	andhi	r4,r4,16384
    6510:	2000041e 	bne	r4,zero,6524 <__hi0bits+0x60>
    6514:	00800804 	movi	r2,32
    6518:	f800283a 	ret
    651c:	0005883a 	mov	r2,zero
    6520:	003fec06 	br	64d4 <__hi0bits+0x10>
    6524:	10800044 	addi	r2,r2,1
    6528:	f800283a 	ret

0000652c <__lo0bits>:
    652c:	20c00017 	ldw	r3,0(r4)
    6530:	188001cc 	andi	r2,r3,7
    6534:	10000826 	beq	r2,zero,6558 <__lo0bits+0x2c>
    6538:	1880004c 	andi	r2,r3,1
    653c:	1000211e 	bne	r2,zero,65c4 <__lo0bits+0x98>
    6540:	1880008c 	andi	r2,r3,2
    6544:	1000211e 	bne	r2,zero,65cc <__lo0bits+0xa0>
    6548:	1806d0ba 	srli	r3,r3,2
    654c:	00800084 	movi	r2,2
    6550:	20c00015 	stw	r3,0(r4)
    6554:	f800283a 	ret
    6558:	18bfffcc 	andi	r2,r3,65535
    655c:	10001326 	beq	r2,zero,65ac <__lo0bits+0x80>
    6560:	0005883a 	mov	r2,zero
    6564:	19403fcc 	andi	r5,r3,255
    6568:	2800021e 	bne	r5,zero,6574 <__lo0bits+0x48>
    656c:	1806d23a 	srli	r3,r3,8
    6570:	10800204 	addi	r2,r2,8
    6574:	194003cc 	andi	r5,r3,15
    6578:	2800021e 	bne	r5,zero,6584 <__lo0bits+0x58>
    657c:	1806d13a 	srli	r3,r3,4
    6580:	10800104 	addi	r2,r2,4
    6584:	194000cc 	andi	r5,r3,3
    6588:	2800021e 	bne	r5,zero,6594 <__lo0bits+0x68>
    658c:	1806d0ba 	srli	r3,r3,2
    6590:	10800084 	addi	r2,r2,2
    6594:	1940004c 	andi	r5,r3,1
    6598:	2800081e 	bne	r5,zero,65bc <__lo0bits+0x90>
    659c:	1806d07a 	srli	r3,r3,1
    65a0:	1800051e 	bne	r3,zero,65b8 <__lo0bits+0x8c>
    65a4:	00800804 	movi	r2,32
    65a8:	f800283a 	ret
    65ac:	1806d43a 	srli	r3,r3,16
    65b0:	00800404 	movi	r2,16
    65b4:	003feb06 	br	6564 <__lo0bits+0x38>
    65b8:	10800044 	addi	r2,r2,1
    65bc:	20c00015 	stw	r3,0(r4)
    65c0:	f800283a 	ret
    65c4:	0005883a 	mov	r2,zero
    65c8:	f800283a 	ret
    65cc:	1806d07a 	srli	r3,r3,1
    65d0:	00800044 	movi	r2,1
    65d4:	20c00015 	stw	r3,0(r4)
    65d8:	f800283a 	ret

000065dc <__i2b>:
    65dc:	defffd04 	addi	sp,sp,-12
    65e0:	dc000015 	stw	r16,0(sp)
    65e4:	04000044 	movi	r16,1
    65e8:	dc400115 	stw	r17,4(sp)
    65ec:	2823883a 	mov	r17,r5
    65f0:	800b883a 	mov	r5,r16
    65f4:	dfc00215 	stw	ra,8(sp)
    65f8:	00061d00 	call	61d0 <_Balloc>
    65fc:	14400515 	stw	r17,20(r2)
    6600:	14000415 	stw	r16,16(r2)
    6604:	dfc00217 	ldw	ra,8(sp)
    6608:	dc400117 	ldw	r17,4(sp)
    660c:	dc000017 	ldw	r16,0(sp)
    6610:	dec00304 	addi	sp,sp,12
    6614:	f800283a 	ret

00006618 <__multiply>:
    6618:	defffa04 	addi	sp,sp,-24
    661c:	dcc00315 	stw	r19,12(sp)
    6620:	dc800215 	stw	r18,8(sp)
    6624:	34c00417 	ldw	r19,16(r6)
    6628:	2c800417 	ldw	r18,16(r5)
    662c:	dd000415 	stw	r20,16(sp)
    6630:	dc400115 	stw	r17,4(sp)
    6634:	dfc00515 	stw	ra,20(sp)
    6638:	dc000015 	stw	r16,0(sp)
    663c:	2829883a 	mov	r20,r5
    6640:	3023883a 	mov	r17,r6
    6644:	94c0050e 	bge	r18,r19,665c <__multiply+0x44>
    6648:	9007883a 	mov	r3,r18
    664c:	3029883a 	mov	r20,r6
    6650:	9825883a 	mov	r18,r19
    6654:	2823883a 	mov	r17,r5
    6658:	1827883a 	mov	r19,r3
    665c:	a0800217 	ldw	r2,8(r20)
    6660:	94e1883a 	add	r16,r18,r19
    6664:	a1400117 	ldw	r5,4(r20)
    6668:	1400010e 	bge	r2,r16,6670 <__multiply+0x58>
    666c:	29400044 	addi	r5,r5,1
    6670:	00061d00 	call	61d0 <_Balloc>
    6674:	8415883a 	add	r10,r16,r16
    6678:	12c00504 	addi	r11,r2,20
    667c:	5295883a 	add	r10,r10,r10
    6680:	5a95883a 	add	r10,r11,r10
    6684:	5807883a 	mov	r3,r11
    6688:	5a80032e 	bgeu	r11,r10,6698 <__multiply+0x80>
    668c:	18000015 	stw	zero,0(r3)
    6690:	18c00104 	addi	r3,r3,4
    6694:	1abffd36 	bltu	r3,r10,668c <__multiply+0x74>
    6698:	9ce7883a 	add	r19,r19,r19
    669c:	94a5883a 	add	r18,r18,r18
    66a0:	89800504 	addi	r6,r17,20
    66a4:	9ce7883a 	add	r19,r19,r19
    66a8:	a3400504 	addi	r13,r20,20
    66ac:	94a5883a 	add	r18,r18,r18
    66b0:	34d9883a 	add	r12,r6,r19
    66b4:	6c93883a 	add	r9,r13,r18
    66b8:	3300422e 	bgeu	r6,r12,67c4 <__multiply+0x1ac>
    66bc:	37c00017 	ldw	ra,0(r6)
    66c0:	fbffffcc 	andi	r15,ra,65535
    66c4:	78001b26 	beq	r15,zero,6734 <__multiply+0x11c>
    66c8:	5811883a 	mov	r8,r11
    66cc:	681d883a 	mov	r14,r13
    66d0:	000f883a 	mov	r7,zero
    66d4:	71000017 	ldw	r4,0(r14)
    66d8:	40c00017 	ldw	r3,0(r8)
    66dc:	73800104 	addi	r14,r14,4
    66e0:	217fffcc 	andi	r5,r4,65535
    66e4:	2bcb383a 	mul	r5,r5,r15
    66e8:	2008d43a 	srli	r4,r4,16
    66ec:	1c7fffcc 	andi	r17,r3,65535
    66f0:	2c4b883a 	add	r5,r5,r17
    66f4:	29cb883a 	add	r5,r5,r7
    66f8:	23c9383a 	mul	r4,r4,r15
    66fc:	1806d43a 	srli	r3,r3,16
    6700:	280ed43a 	srli	r7,r5,16
    6704:	297fffcc 	andi	r5,r5,65535
    6708:	20c7883a 	add	r3,r4,r3
    670c:	19c7883a 	add	r3,r3,r7
    6710:	1808943a 	slli	r4,r3,16
    6714:	4023883a 	mov	r17,r8
    6718:	180ed43a 	srli	r7,r3,16
    671c:	214ab03a 	or	r5,r4,r5
    6720:	41400015 	stw	r5,0(r8)
    6724:	42000104 	addi	r8,r8,4
    6728:	727fea36 	bltu	r14,r9,66d4 <__multiply+0xbc>
    672c:	89c00115 	stw	r7,4(r17)
    6730:	37c00017 	ldw	ra,0(r6)
    6734:	f83ed43a 	srli	ra,ra,16
    6738:	f8001f26 	beq	ra,zero,67b8 <__multiply+0x1a0>
    673c:	58c00017 	ldw	r3,0(r11)
    6740:	681d883a 	mov	r14,r13
    6744:	581f883a 	mov	r15,r11
    6748:	1811883a 	mov	r8,r3
    674c:	5825883a 	mov	r18,r11
    6750:	000f883a 	mov	r7,zero
    6754:	00000106 	br	675c <__multiply+0x144>
    6758:	8825883a 	mov	r18,r17
    675c:	7140000b 	ldhu	r5,0(r14)
    6760:	4010d43a 	srli	r8,r8,16
    6764:	193fffcc 	andi	r4,r3,65535
    6768:	2fcb383a 	mul	r5,r5,ra
    676c:	7bc00104 	addi	r15,r15,4
    6770:	73800104 	addi	r14,r14,4
    6774:	2a0b883a 	add	r5,r5,r8
    6778:	29cb883a 	add	r5,r5,r7
    677c:	2806943a 	slli	r3,r5,16
    6780:	94400104 	addi	r17,r18,4
    6784:	280ad43a 	srli	r5,r5,16
    6788:	1908b03a 	or	r4,r3,r4
    678c:	793fff15 	stw	r4,-4(r15)
    6790:	70ffff17 	ldw	r3,-4(r14)
    6794:	8a000017 	ldw	r8,0(r17)
    6798:	1806d43a 	srli	r3,r3,16
    679c:	413fffcc 	andi	r4,r8,65535
    67a0:	1fc7383a 	mul	r3,r3,ra
    67a4:	1907883a 	add	r3,r3,r4
    67a8:	1947883a 	add	r3,r3,r5
    67ac:	180ed43a 	srli	r7,r3,16
    67b0:	727fe936 	bltu	r14,r9,6758 <__multiply+0x140>
    67b4:	90c00115 	stw	r3,4(r18)
    67b8:	31800104 	addi	r6,r6,4
    67bc:	5ac00104 	addi	r11,r11,4
    67c0:	333fbe36 	bltu	r6,r12,66bc <__multiply+0xa4>
    67c4:	0400090e 	bge	zero,r16,67ec <__multiply+0x1d4>
    67c8:	50ffff17 	ldw	r3,-4(r10)
    67cc:	52bfff04 	addi	r10,r10,-4
    67d0:	18000326 	beq	r3,zero,67e0 <__multiply+0x1c8>
    67d4:	00000506 	br	67ec <__multiply+0x1d4>
    67d8:	50c00017 	ldw	r3,0(r10)
    67dc:	1800031e 	bne	r3,zero,67ec <__multiply+0x1d4>
    67e0:	843fffc4 	addi	r16,r16,-1
    67e4:	52bfff04 	addi	r10,r10,-4
    67e8:	803ffb1e 	bne	r16,zero,67d8 <__multiply+0x1c0>
    67ec:	14000415 	stw	r16,16(r2)
    67f0:	dfc00517 	ldw	ra,20(sp)
    67f4:	dd000417 	ldw	r20,16(sp)
    67f8:	dcc00317 	ldw	r19,12(sp)
    67fc:	dc800217 	ldw	r18,8(sp)
    6800:	dc400117 	ldw	r17,4(sp)
    6804:	dc000017 	ldw	r16,0(sp)
    6808:	dec00604 	addi	sp,sp,24
    680c:	f800283a 	ret

00006810 <__pow5mult>:
    6810:	defffa04 	addi	sp,sp,-24
    6814:	dcc00315 	stw	r19,12(sp)
    6818:	dc000015 	stw	r16,0(sp)
    681c:	dfc00515 	stw	ra,20(sp)
    6820:	dd000415 	stw	r20,16(sp)
    6824:	dc800215 	stw	r18,8(sp)
    6828:	dc400115 	stw	r17,4(sp)
    682c:	308000cc 	andi	r2,r6,3
    6830:	3021883a 	mov	r16,r6
    6834:	2027883a 	mov	r19,r4
    6838:	10002f1e 	bne	r2,zero,68f8 <__pow5mult+0xe8>
    683c:	2825883a 	mov	r18,r5
    6840:	8021d0ba 	srai	r16,r16,2
    6844:	80001a26 	beq	r16,zero,68b0 <__pow5mult+0xa0>
    6848:	9c401217 	ldw	r17,72(r19)
    684c:	8800061e 	bne	r17,zero,6868 <__pow5mult+0x58>
    6850:	00003406 	br	6924 <__pow5mult+0x114>
    6854:	8021d07a 	srai	r16,r16,1
    6858:	80001526 	beq	r16,zero,68b0 <__pow5mult+0xa0>
    685c:	88800017 	ldw	r2,0(r17)
    6860:	10001c26 	beq	r2,zero,68d4 <__pow5mult+0xc4>
    6864:	1023883a 	mov	r17,r2
    6868:	8080004c 	andi	r2,r16,1
    686c:	103ff926 	beq	r2,zero,6854 <__pow5mult+0x44>
    6870:	880d883a 	mov	r6,r17
    6874:	900b883a 	mov	r5,r18
    6878:	9809883a 	mov	r4,r19
    687c:	00066180 	call	6618 <__multiply>
    6880:	90001b26 	beq	r18,zero,68f0 <__pow5mult+0xe0>
    6884:	91000117 	ldw	r4,4(r18)
    6888:	98c01317 	ldw	r3,76(r19)
    688c:	8021d07a 	srai	r16,r16,1
    6890:	2109883a 	add	r4,r4,r4
    6894:	2109883a 	add	r4,r4,r4
    6898:	1907883a 	add	r3,r3,r4
    689c:	19000017 	ldw	r4,0(r3)
    68a0:	91000015 	stw	r4,0(r18)
    68a4:	1c800015 	stw	r18,0(r3)
    68a8:	1025883a 	mov	r18,r2
    68ac:	803feb1e 	bne	r16,zero,685c <__pow5mult+0x4c>
    68b0:	9005883a 	mov	r2,r18
    68b4:	dfc00517 	ldw	ra,20(sp)
    68b8:	dd000417 	ldw	r20,16(sp)
    68bc:	dcc00317 	ldw	r19,12(sp)
    68c0:	dc800217 	ldw	r18,8(sp)
    68c4:	dc400117 	ldw	r17,4(sp)
    68c8:	dc000017 	ldw	r16,0(sp)
    68cc:	dec00604 	addi	sp,sp,24
    68d0:	f800283a 	ret
    68d4:	880d883a 	mov	r6,r17
    68d8:	880b883a 	mov	r5,r17
    68dc:	9809883a 	mov	r4,r19
    68e0:	00066180 	call	6618 <__multiply>
    68e4:	88800015 	stw	r2,0(r17)
    68e8:	10000015 	stw	zero,0(r2)
    68ec:	003fdd06 	br	6864 <__pow5mult+0x54>
    68f0:	1025883a 	mov	r18,r2
    68f4:	003fd706 	br	6854 <__pow5mult+0x44>
    68f8:	10bfffc4 	addi	r2,r2,-1
    68fc:	1085883a 	add	r2,r2,r2
    6900:	00c00074 	movhi	r3,1
    6904:	18fe7804 	addi	r3,r3,-1568
    6908:	1085883a 	add	r2,r2,r2
    690c:	1885883a 	add	r2,r3,r2
    6910:	11800017 	ldw	r6,0(r2)
    6914:	000f883a 	mov	r7,zero
    6918:	00062a00 	call	62a0 <__multadd>
    691c:	1025883a 	mov	r18,r2
    6920:	003fc706 	br	6840 <__pow5mult+0x30>
    6924:	05000044 	movi	r20,1
    6928:	a00b883a 	mov	r5,r20
    692c:	9809883a 	mov	r4,r19
    6930:	00061d00 	call	61d0 <_Balloc>
    6934:	1023883a 	mov	r17,r2
    6938:	00809c44 	movi	r2,625
    693c:	88800515 	stw	r2,20(r17)
    6940:	8d000415 	stw	r20,16(r17)
    6944:	9c401215 	stw	r17,72(r19)
    6948:	88000015 	stw	zero,0(r17)
    694c:	003fc606 	br	6868 <__pow5mult+0x58>

00006950 <__lshift>:
    6950:	defff904 	addi	sp,sp,-28
    6954:	dd400515 	stw	r21,20(sp)
    6958:	dcc00315 	stw	r19,12(sp)
    695c:	302bd17a 	srai	r21,r6,5
    6960:	2cc00417 	ldw	r19,16(r5)
    6964:	28800217 	ldw	r2,8(r5)
    6968:	dd000415 	stw	r20,16(sp)
    696c:	ace7883a 	add	r19,r21,r19
    6970:	dc800215 	stw	r18,8(sp)
    6974:	dc400115 	stw	r17,4(sp)
    6978:	dc000015 	stw	r16,0(sp)
    697c:	dfc00615 	stw	ra,24(sp)
    6980:	9c000044 	addi	r16,r19,1
    6984:	2823883a 	mov	r17,r5
    6988:	3029883a 	mov	r20,r6
    698c:	2025883a 	mov	r18,r4
    6990:	29400117 	ldw	r5,4(r5)
    6994:	1400030e 	bge	r2,r16,69a4 <__lshift+0x54>
    6998:	1085883a 	add	r2,r2,r2
    699c:	29400044 	addi	r5,r5,1
    69a0:	143ffd16 	blt	r2,r16,6998 <__lshift+0x48>
    69a4:	9009883a 	mov	r4,r18
    69a8:	00061d00 	call	61d0 <_Balloc>
    69ac:	10c00504 	addi	r3,r2,20
    69b0:	0540070e 	bge	zero,r21,69d0 <__lshift+0x80>
    69b4:	ad6b883a 	add	r21,r21,r21
    69b8:	ad6b883a 	add	r21,r21,r21
    69bc:	1809883a 	mov	r4,r3
    69c0:	1d47883a 	add	r3,r3,r21
    69c4:	20000015 	stw	zero,0(r4)
    69c8:	21000104 	addi	r4,r4,4
    69cc:	193ffd1e 	bne	r3,r4,69c4 <__lshift+0x74>
    69d0:	8a000417 	ldw	r8,16(r17)
    69d4:	89000504 	addi	r4,r17,20
    69d8:	a18007cc 	andi	r6,r20,31
    69dc:	4211883a 	add	r8,r8,r8
    69e0:	4211883a 	add	r8,r8,r8
    69e4:	2211883a 	add	r8,r4,r8
    69e8:	30002326 	beq	r6,zero,6a78 <__lshift+0x128>
    69ec:	02400804 	movi	r9,32
    69f0:	4993c83a 	sub	r9,r9,r6
    69f4:	000b883a 	mov	r5,zero
    69f8:	21c00017 	ldw	r7,0(r4)
    69fc:	1815883a 	mov	r10,r3
    6a00:	18c00104 	addi	r3,r3,4
    6a04:	398e983a 	sll	r7,r7,r6
    6a08:	21000104 	addi	r4,r4,4
    6a0c:	394ab03a 	or	r5,r7,r5
    6a10:	197fff15 	stw	r5,-4(r3)
    6a14:	217fff17 	ldw	r5,-4(r4)
    6a18:	2a4ad83a 	srl	r5,r5,r9
    6a1c:	223ff636 	bltu	r4,r8,69f8 <__lshift+0xa8>
    6a20:	51400115 	stw	r5,4(r10)
    6a24:	28001a1e 	bne	r5,zero,6a90 <__lshift+0x140>
    6a28:	843fffc4 	addi	r16,r16,-1
    6a2c:	14000415 	stw	r16,16(r2)
    6a30:	88000826 	beq	r17,zero,6a54 <__lshift+0x104>
    6a34:	89000117 	ldw	r4,4(r17)
    6a38:	90c01317 	ldw	r3,76(r18)
    6a3c:	2109883a 	add	r4,r4,r4
    6a40:	2109883a 	add	r4,r4,r4
    6a44:	1907883a 	add	r3,r3,r4
    6a48:	19000017 	ldw	r4,0(r3)
    6a4c:	89000015 	stw	r4,0(r17)
    6a50:	1c400015 	stw	r17,0(r3)
    6a54:	dfc00617 	ldw	ra,24(sp)
    6a58:	dd400517 	ldw	r21,20(sp)
    6a5c:	dd000417 	ldw	r20,16(sp)
    6a60:	dcc00317 	ldw	r19,12(sp)
    6a64:	dc800217 	ldw	r18,8(sp)
    6a68:	dc400117 	ldw	r17,4(sp)
    6a6c:	dc000017 	ldw	r16,0(sp)
    6a70:	dec00704 	addi	sp,sp,28
    6a74:	f800283a 	ret
    6a78:	21400017 	ldw	r5,0(r4)
    6a7c:	18c00104 	addi	r3,r3,4
    6a80:	21000104 	addi	r4,r4,4
    6a84:	197fff15 	stw	r5,-4(r3)
    6a88:	223ffb36 	bltu	r4,r8,6a78 <__lshift+0x128>
    6a8c:	003fe606 	br	6a28 <__lshift+0xd8>
    6a90:	9c000084 	addi	r16,r19,2
    6a94:	003fe406 	br	6a28 <__lshift+0xd8>

00006a98 <__mcmp>:
    6a98:	20800417 	ldw	r2,16(r4)
    6a9c:	28c00417 	ldw	r3,16(r5)
    6aa0:	10c5c83a 	sub	r2,r2,r3
    6aa4:	1000111e 	bne	r2,zero,6aec <__mcmp+0x54>
    6aa8:	18c7883a 	add	r3,r3,r3
    6aac:	18c7883a 	add	r3,r3,r3
    6ab0:	21000504 	addi	r4,r4,20
    6ab4:	29400504 	addi	r5,r5,20
    6ab8:	20c5883a 	add	r2,r4,r3
    6abc:	28cb883a 	add	r5,r5,r3
    6ac0:	00000106 	br	6ac8 <__mcmp+0x30>
    6ac4:	20800a2e 	bgeu	r4,r2,6af0 <__mcmp+0x58>
    6ac8:	10bfff04 	addi	r2,r2,-4
    6acc:	297fff04 	addi	r5,r5,-4
    6ad0:	11800017 	ldw	r6,0(r2)
    6ad4:	28c00017 	ldw	r3,0(r5)
    6ad8:	30fffa26 	beq	r6,r3,6ac4 <__mcmp+0x2c>
    6adc:	30c00236 	bltu	r6,r3,6ae8 <__mcmp+0x50>
    6ae0:	00800044 	movi	r2,1
    6ae4:	f800283a 	ret
    6ae8:	00bfffc4 	movi	r2,-1
    6aec:	f800283a 	ret
    6af0:	0005883a 	mov	r2,zero
    6af4:	f800283a 	ret

00006af8 <__mdiff>:
    6af8:	28c00417 	ldw	r3,16(r5)
    6afc:	30800417 	ldw	r2,16(r6)
    6b00:	defffa04 	addi	sp,sp,-24
    6b04:	dcc00315 	stw	r19,12(sp)
    6b08:	dc800215 	stw	r18,8(sp)
    6b0c:	dfc00515 	stw	ra,20(sp)
    6b10:	dd000415 	stw	r20,16(sp)
    6b14:	dc400115 	stw	r17,4(sp)
    6b18:	dc000015 	stw	r16,0(sp)
    6b1c:	1887c83a 	sub	r3,r3,r2
    6b20:	2825883a 	mov	r18,r5
    6b24:	3027883a 	mov	r19,r6
    6b28:	1800141e 	bne	r3,zero,6b7c <__mdiff+0x84>
    6b2c:	1085883a 	add	r2,r2,r2
    6b30:	1085883a 	add	r2,r2,r2
    6b34:	2a000504 	addi	r8,r5,20
    6b38:	34000504 	addi	r16,r6,20
    6b3c:	4087883a 	add	r3,r8,r2
    6b40:	8085883a 	add	r2,r16,r2
    6b44:	00000106 	br	6b4c <__mdiff+0x54>
    6b48:	40c0592e 	bgeu	r8,r3,6cb0 <__mdiff+0x1b8>
    6b4c:	18ffff04 	addi	r3,r3,-4
    6b50:	10bfff04 	addi	r2,r2,-4
    6b54:	19c00017 	ldw	r7,0(r3)
    6b58:	11400017 	ldw	r5,0(r2)
    6b5c:	397ffa26 	beq	r7,r5,6b48 <__mdiff+0x50>
    6b60:	3940592e 	bgeu	r7,r5,6cc8 <__mdiff+0x1d0>
    6b64:	9005883a 	mov	r2,r18
    6b68:	4023883a 	mov	r17,r8
    6b6c:	9825883a 	mov	r18,r19
    6b70:	05000044 	movi	r20,1
    6b74:	1027883a 	mov	r19,r2
    6b78:	00000406 	br	6b8c <__mdiff+0x94>
    6b7c:	18005616 	blt	r3,zero,6cd8 <__mdiff+0x1e0>
    6b80:	34400504 	addi	r17,r6,20
    6b84:	2c000504 	addi	r16,r5,20
    6b88:	0029883a 	mov	r20,zero
    6b8c:	91400117 	ldw	r5,4(r18)
    6b90:	00061d00 	call	61d0 <_Balloc>
    6b94:	92400417 	ldw	r9,16(r18)
    6b98:	9b000417 	ldw	r12,16(r19)
    6b9c:	12c00504 	addi	r11,r2,20
    6ba0:	4a51883a 	add	r8,r9,r9
    6ba4:	6319883a 	add	r12,r12,r12
    6ba8:	4211883a 	add	r8,r8,r8
    6bac:	6319883a 	add	r12,r12,r12
    6bb0:	15000315 	stw	r20,12(r2)
    6bb4:	8211883a 	add	r8,r16,r8
    6bb8:	8b19883a 	add	r12,r17,r12
    6bbc:	0007883a 	mov	r3,zero
    6bc0:	81400017 	ldw	r5,0(r16)
    6bc4:	89c00017 	ldw	r7,0(r17)
    6bc8:	59800104 	addi	r6,r11,4
    6bcc:	293fffcc 	andi	r4,r5,65535
    6bd0:	20c7883a 	add	r3,r4,r3
    6bd4:	393fffcc 	andi	r4,r7,65535
    6bd8:	1909c83a 	sub	r4,r3,r4
    6bdc:	280ad43a 	srli	r5,r5,16
    6be0:	380ed43a 	srli	r7,r7,16
    6be4:	2007d43a 	srai	r3,r4,16
    6be8:	213fffcc 	andi	r4,r4,65535
    6bec:	29cbc83a 	sub	r5,r5,r7
    6bf0:	28c7883a 	add	r3,r5,r3
    6bf4:	180a943a 	slli	r5,r3,16
    6bf8:	8c400104 	addi	r17,r17,4
    6bfc:	84000104 	addi	r16,r16,4
    6c00:	2908b03a 	or	r4,r5,r4
    6c04:	59000015 	stw	r4,0(r11)
    6c08:	1807d43a 	srai	r3,r3,16
    6c0c:	3015883a 	mov	r10,r6
    6c10:	3017883a 	mov	r11,r6
    6c14:	8b3fea36 	bltu	r17,r12,6bc0 <__mdiff+0xc8>
    6c18:	8200162e 	bgeu	r16,r8,6c74 <__mdiff+0x17c>
    6c1c:	8017883a 	mov	r11,r16
    6c20:	59400017 	ldw	r5,0(r11)
    6c24:	31800104 	addi	r6,r6,4
    6c28:	5ac00104 	addi	r11,r11,4
    6c2c:	293fffcc 	andi	r4,r5,65535
    6c30:	20c7883a 	add	r3,r4,r3
    6c34:	280ed43a 	srli	r7,r5,16
    6c38:	180bd43a 	srai	r5,r3,16
    6c3c:	193fffcc 	andi	r4,r3,65535
    6c40:	3947883a 	add	r3,r7,r5
    6c44:	180a943a 	slli	r5,r3,16
    6c48:	1807d43a 	srai	r3,r3,16
    6c4c:	2908b03a 	or	r4,r5,r4
    6c50:	313fff15 	stw	r4,-4(r6)
    6c54:	5a3ff236 	bltu	r11,r8,6c20 <__mdiff+0x128>
    6c58:	0406303a 	nor	r3,zero,r16
    6c5c:	1a07883a 	add	r3,r3,r8
    6c60:	1806d0ba 	srli	r3,r3,2
    6c64:	18c00044 	addi	r3,r3,1
    6c68:	18c7883a 	add	r3,r3,r3
    6c6c:	18c7883a 	add	r3,r3,r3
    6c70:	50d5883a 	add	r10,r10,r3
    6c74:	50ffff04 	addi	r3,r10,-4
    6c78:	2000041e 	bne	r4,zero,6c8c <__mdiff+0x194>
    6c7c:	18ffff04 	addi	r3,r3,-4
    6c80:	19000017 	ldw	r4,0(r3)
    6c84:	4a7fffc4 	addi	r9,r9,-1
    6c88:	203ffc26 	beq	r4,zero,6c7c <__mdiff+0x184>
    6c8c:	12400415 	stw	r9,16(r2)
    6c90:	dfc00517 	ldw	ra,20(sp)
    6c94:	dd000417 	ldw	r20,16(sp)
    6c98:	dcc00317 	ldw	r19,12(sp)
    6c9c:	dc800217 	ldw	r18,8(sp)
    6ca0:	dc400117 	ldw	r17,4(sp)
    6ca4:	dc000017 	ldw	r16,0(sp)
    6ca8:	dec00604 	addi	sp,sp,24
    6cac:	f800283a 	ret
    6cb0:	000b883a 	mov	r5,zero
    6cb4:	00061d00 	call	61d0 <_Balloc>
    6cb8:	00c00044 	movi	r3,1
    6cbc:	10c00415 	stw	r3,16(r2)
    6cc0:	10000515 	stw	zero,20(r2)
    6cc4:	003ff206 	br	6c90 <__mdiff+0x198>
    6cc8:	8023883a 	mov	r17,r16
    6ccc:	0029883a 	mov	r20,zero
    6cd0:	4021883a 	mov	r16,r8
    6cd4:	003fad06 	br	6b8c <__mdiff+0x94>
    6cd8:	9005883a 	mov	r2,r18
    6cdc:	94400504 	addi	r17,r18,20
    6ce0:	9c000504 	addi	r16,r19,20
    6ce4:	9825883a 	mov	r18,r19
    6ce8:	05000044 	movi	r20,1
    6cec:	1027883a 	mov	r19,r2
    6cf0:	003fa606 	br	6b8c <__mdiff+0x94>

00006cf4 <__ulp>:
    6cf4:	295ffc2c 	andhi	r5,r5,32752
    6cf8:	00bf3034 	movhi	r2,64704
    6cfc:	2887883a 	add	r3,r5,r2
    6d00:	00c0020e 	bge	zero,r3,6d0c <__ulp+0x18>
    6d04:	0005883a 	mov	r2,zero
    6d08:	f800283a 	ret
    6d0c:	00c7c83a 	sub	r3,zero,r3
    6d10:	1807d53a 	srai	r3,r3,20
    6d14:	008004c4 	movi	r2,19
    6d18:	10c00b0e 	bge	r2,r3,6d48 <__ulp+0x54>
    6d1c:	18bffb04 	addi	r2,r3,-20
    6d20:	01000784 	movi	r4,30
    6d24:	0007883a 	mov	r3,zero
    6d28:	20800516 	blt	r4,r2,6d40 <__ulp+0x4c>
    6d2c:	010007c4 	movi	r4,31
    6d30:	2089c83a 	sub	r4,r4,r2
    6d34:	00800044 	movi	r2,1
    6d38:	1104983a 	sll	r2,r2,r4
    6d3c:	f800283a 	ret
    6d40:	00800044 	movi	r2,1
    6d44:	f800283a 	ret
    6d48:	01400234 	movhi	r5,8
    6d4c:	28c7d83a 	sra	r3,r5,r3
    6d50:	0005883a 	mov	r2,zero
    6d54:	f800283a 	ret

00006d58 <__b2d>:
    6d58:	defffa04 	addi	sp,sp,-24
    6d5c:	dc000015 	stw	r16,0(sp)
    6d60:	24000417 	ldw	r16,16(r4)
    6d64:	dc400115 	stw	r17,4(sp)
    6d68:	24400504 	addi	r17,r4,20
    6d6c:	8421883a 	add	r16,r16,r16
    6d70:	8421883a 	add	r16,r16,r16
    6d74:	8c21883a 	add	r16,r17,r16
    6d78:	dc800215 	stw	r18,8(sp)
    6d7c:	84bfff17 	ldw	r18,-4(r16)
    6d80:	dd000415 	stw	r20,16(sp)
    6d84:	dcc00315 	stw	r19,12(sp)
    6d88:	9009883a 	mov	r4,r18
    6d8c:	2829883a 	mov	r20,r5
    6d90:	dfc00515 	stw	ra,20(sp)
    6d94:	00064c40 	call	64c4 <__hi0bits>
    6d98:	00c00804 	movi	r3,32
    6d9c:	1889c83a 	sub	r4,r3,r2
    6da0:	a1000015 	stw	r4,0(r20)
    6da4:	01000284 	movi	r4,10
    6da8:	84ffff04 	addi	r19,r16,-4
    6dac:	20801216 	blt	r4,r2,6df8 <__b2d+0xa0>
    6db0:	018002c4 	movi	r6,11
    6db4:	308dc83a 	sub	r6,r6,r2
    6db8:	9186d83a 	srl	r3,r18,r6
    6dbc:	18cffc34 	orhi	r3,r3,16368
    6dc0:	8cc0212e 	bgeu	r17,r19,6e48 <__b2d+0xf0>
    6dc4:	813ffe17 	ldw	r4,-8(r16)
    6dc8:	218cd83a 	srl	r6,r4,r6
    6dcc:	10800544 	addi	r2,r2,21
    6dd0:	9084983a 	sll	r2,r18,r2
    6dd4:	1184b03a 	or	r2,r2,r6
    6dd8:	dfc00517 	ldw	ra,20(sp)
    6ddc:	dd000417 	ldw	r20,16(sp)
    6de0:	dcc00317 	ldw	r19,12(sp)
    6de4:	dc800217 	ldw	r18,8(sp)
    6de8:	dc400117 	ldw	r17,4(sp)
    6dec:	dc000017 	ldw	r16,0(sp)
    6df0:	dec00604 	addi	sp,sp,24
    6df4:	f800283a 	ret
    6df8:	8cc00f2e 	bgeu	r17,r19,6e38 <__b2d+0xe0>
    6dfc:	117ffd44 	addi	r5,r2,-11
    6e00:	80bffe17 	ldw	r2,-8(r16)
    6e04:	28000e26 	beq	r5,zero,6e40 <__b2d+0xe8>
    6e08:	1949c83a 	sub	r4,r3,r5
    6e0c:	9164983a 	sll	r18,r18,r5
    6e10:	1106d83a 	srl	r3,r2,r4
    6e14:	81bffe04 	addi	r6,r16,-8
    6e18:	948ffc34 	orhi	r18,r18,16368
    6e1c:	90c6b03a 	or	r3,r18,r3
    6e20:	89800e2e 	bgeu	r17,r6,6e5c <__b2d+0x104>
    6e24:	81bffd17 	ldw	r6,-12(r16)
    6e28:	1144983a 	sll	r2,r2,r5
    6e2c:	310ad83a 	srl	r5,r6,r4
    6e30:	2884b03a 	or	r2,r5,r2
    6e34:	003fe806 	br	6dd8 <__b2d+0x80>
    6e38:	10bffd44 	addi	r2,r2,-11
    6e3c:	1000041e 	bne	r2,zero,6e50 <__b2d+0xf8>
    6e40:	90cffc34 	orhi	r3,r18,16368
    6e44:	003fe406 	br	6dd8 <__b2d+0x80>
    6e48:	000d883a 	mov	r6,zero
    6e4c:	003fdf06 	br	6dcc <__b2d+0x74>
    6e50:	90a4983a 	sll	r18,r18,r2
    6e54:	0005883a 	mov	r2,zero
    6e58:	003ff906 	br	6e40 <__b2d+0xe8>
    6e5c:	1144983a 	sll	r2,r2,r5
    6e60:	003fdd06 	br	6dd8 <__b2d+0x80>

00006e64 <__d2b>:
    6e64:	defff804 	addi	sp,sp,-32
    6e68:	dc000215 	stw	r16,8(sp)
    6e6c:	3021883a 	mov	r16,r6
    6e70:	dc400315 	stw	r17,12(sp)
    6e74:	8022907a 	slli	r17,r16,1
    6e78:	dd000615 	stw	r20,24(sp)
    6e7c:	2829883a 	mov	r20,r5
    6e80:	01400044 	movi	r5,1
    6e84:	dcc00515 	stw	r19,20(sp)
    6e88:	dc800415 	stw	r18,16(sp)
    6e8c:	dfc00715 	stw	ra,28(sp)
    6e90:	3825883a 	mov	r18,r7
    6e94:	8822d57a 	srli	r17,r17,21
    6e98:	00061d00 	call	61d0 <_Balloc>
    6e9c:	1027883a 	mov	r19,r2
    6ea0:	00800434 	movhi	r2,16
    6ea4:	10bfffc4 	addi	r2,r2,-1
    6ea8:	808c703a 	and	r6,r16,r2
    6eac:	88000126 	beq	r17,zero,6eb4 <__d2b+0x50>
    6eb0:	31800434 	orhi	r6,r6,16
    6eb4:	d9800015 	stw	r6,0(sp)
    6eb8:	a0002426 	beq	r20,zero,6f4c <__d2b+0xe8>
    6ebc:	d9000104 	addi	r4,sp,4
    6ec0:	dd000115 	stw	r20,4(sp)
    6ec4:	000652c0 	call	652c <__lo0bits>
    6ec8:	d8c00017 	ldw	r3,0(sp)
    6ecc:	10002f1e 	bne	r2,zero,6f8c <__d2b+0x128>
    6ed0:	d9000117 	ldw	r4,4(sp)
    6ed4:	99000515 	stw	r4,20(r19)
    6ed8:	1821003a 	cmpeq	r16,r3,zero
    6edc:	01000084 	movi	r4,2
    6ee0:	2421c83a 	sub	r16,r4,r16
    6ee4:	98c00615 	stw	r3,24(r19)
    6ee8:	9c000415 	stw	r16,16(r19)
    6eec:	88001f1e 	bne	r17,zero,6f6c <__d2b+0x108>
    6ef0:	10bef384 	addi	r2,r2,-1074
    6ef4:	90800015 	stw	r2,0(r18)
    6ef8:	00900034 	movhi	r2,16384
    6efc:	10bfffc4 	addi	r2,r2,-1
    6f00:	8085883a 	add	r2,r16,r2
    6f04:	1085883a 	add	r2,r2,r2
    6f08:	1085883a 	add	r2,r2,r2
    6f0c:	9885883a 	add	r2,r19,r2
    6f10:	11000517 	ldw	r4,20(r2)
    6f14:	8020917a 	slli	r16,r16,5
    6f18:	00064c40 	call	64c4 <__hi0bits>
    6f1c:	d8c00817 	ldw	r3,32(sp)
    6f20:	8085c83a 	sub	r2,r16,r2
    6f24:	18800015 	stw	r2,0(r3)
    6f28:	9805883a 	mov	r2,r19
    6f2c:	dfc00717 	ldw	ra,28(sp)
    6f30:	dd000617 	ldw	r20,24(sp)
    6f34:	dcc00517 	ldw	r19,20(sp)
    6f38:	dc800417 	ldw	r18,16(sp)
    6f3c:	dc400317 	ldw	r17,12(sp)
    6f40:	dc000217 	ldw	r16,8(sp)
    6f44:	dec00804 	addi	sp,sp,32
    6f48:	f800283a 	ret
    6f4c:	d809883a 	mov	r4,sp
    6f50:	000652c0 	call	652c <__lo0bits>
    6f54:	d8c00017 	ldw	r3,0(sp)
    6f58:	04000044 	movi	r16,1
    6f5c:	9c000415 	stw	r16,16(r19)
    6f60:	98c00515 	stw	r3,20(r19)
    6f64:	10800804 	addi	r2,r2,32
    6f68:	883fe126 	beq	r17,zero,6ef0 <__d2b+0x8c>
    6f6c:	00c00d44 	movi	r3,53
    6f70:	8c7ef344 	addi	r17,r17,-1075
    6f74:	88a3883a 	add	r17,r17,r2
    6f78:	1885c83a 	sub	r2,r3,r2
    6f7c:	d8c00817 	ldw	r3,32(sp)
    6f80:	94400015 	stw	r17,0(r18)
    6f84:	18800015 	stw	r2,0(r3)
    6f88:	003fe706 	br	6f28 <__d2b+0xc4>
    6f8c:	01000804 	movi	r4,32
    6f90:	2089c83a 	sub	r4,r4,r2
    6f94:	1908983a 	sll	r4,r3,r4
    6f98:	d9400117 	ldw	r5,4(sp)
    6f9c:	1886d83a 	srl	r3,r3,r2
    6fa0:	2148b03a 	or	r4,r4,r5
    6fa4:	99000515 	stw	r4,20(r19)
    6fa8:	d8c00015 	stw	r3,0(sp)
    6fac:	003fca06 	br	6ed8 <__d2b+0x74>

00006fb0 <__ratio>:
    6fb0:	defff904 	addi	sp,sp,-28
    6fb4:	dc400315 	stw	r17,12(sp)
    6fb8:	2823883a 	mov	r17,r5
    6fbc:	d9400104 	addi	r5,sp,4
    6fc0:	dfc00615 	stw	ra,24(sp)
    6fc4:	dcc00515 	stw	r19,20(sp)
    6fc8:	dc800415 	stw	r18,16(sp)
    6fcc:	2027883a 	mov	r19,r4
    6fd0:	dc000215 	stw	r16,8(sp)
    6fd4:	0006d580 	call	6d58 <__b2d>
    6fd8:	d80b883a 	mov	r5,sp
    6fdc:	8809883a 	mov	r4,r17
    6fe0:	1025883a 	mov	r18,r2
    6fe4:	1821883a 	mov	r16,r3
    6fe8:	0006d580 	call	6d58 <__b2d>
    6fec:	8a000417 	ldw	r8,16(r17)
    6ff0:	99000417 	ldw	r4,16(r19)
    6ff4:	d9400117 	ldw	r5,4(sp)
    6ff8:	2209c83a 	sub	r4,r4,r8
    6ffc:	2010917a 	slli	r8,r4,5
    7000:	d9000017 	ldw	r4,0(sp)
    7004:	2909c83a 	sub	r4,r5,r4
    7008:	4109883a 	add	r4,r8,r4
    700c:	01000e0e 	bge	zero,r4,7048 <__ratio+0x98>
    7010:	2008953a 	slli	r4,r4,20
    7014:	2421883a 	add	r16,r4,r16
    7018:	100d883a 	mov	r6,r2
    701c:	180f883a 	mov	r7,r3
    7020:	9009883a 	mov	r4,r18
    7024:	800b883a 	mov	r5,r16
    7028:	000ae9c0 	call	ae9c <__divdf3>
    702c:	dfc00617 	ldw	ra,24(sp)
    7030:	dcc00517 	ldw	r19,20(sp)
    7034:	dc800417 	ldw	r18,16(sp)
    7038:	dc400317 	ldw	r17,12(sp)
    703c:	dc000217 	ldw	r16,8(sp)
    7040:	dec00704 	addi	sp,sp,28
    7044:	f800283a 	ret
    7048:	2008953a 	slli	r4,r4,20
    704c:	1907c83a 	sub	r3,r3,r4
    7050:	003ff106 	br	7018 <__ratio+0x68>

00007054 <_mprec_log10>:
    7054:	defffe04 	addi	sp,sp,-8
    7058:	dc000015 	stw	r16,0(sp)
    705c:	dfc00115 	stw	ra,4(sp)
    7060:	008005c4 	movi	r2,23
    7064:	2021883a 	mov	r16,r4
    7068:	11000d0e 	bge	r2,r4,70a0 <_mprec_log10+0x4c>
    706c:	0005883a 	mov	r2,zero
    7070:	00cffc34 	movhi	r3,16368
    7074:	843fffc4 	addi	r16,r16,-1
    7078:	000d883a 	mov	r6,zero
    707c:	01d00934 	movhi	r7,16420
    7080:	1009883a 	mov	r4,r2
    7084:	180b883a 	mov	r5,r3
    7088:	000b9dc0 	call	b9dc <__muldf3>
    708c:	803ff91e 	bne	r16,zero,7074 <_mprec_log10+0x20>
    7090:	dfc00117 	ldw	ra,4(sp)
    7094:	dc000017 	ldw	r16,0(sp)
    7098:	dec00204 	addi	sp,sp,8
    709c:	f800283a 	ret
    70a0:	202090fa 	slli	r16,r4,3
    70a4:	00800074 	movhi	r2,1
    70a8:	10be8f04 	addi	r2,r2,-1476
    70ac:	1421883a 	add	r16,r2,r16
    70b0:	80800017 	ldw	r2,0(r16)
    70b4:	80c00117 	ldw	r3,4(r16)
    70b8:	dfc00117 	ldw	ra,4(sp)
    70bc:	dc000017 	ldw	r16,0(sp)
    70c0:	dec00204 	addi	sp,sp,8
    70c4:	f800283a 	ret

000070c8 <__copybits>:
    70c8:	297fffc4 	addi	r5,r5,-1
    70cc:	280fd17a 	srai	r7,r5,5
    70d0:	30c00417 	ldw	r3,16(r6)
    70d4:	30800504 	addi	r2,r6,20
    70d8:	39c00044 	addi	r7,r7,1
    70dc:	18c7883a 	add	r3,r3,r3
    70e0:	39cf883a 	add	r7,r7,r7
    70e4:	18c7883a 	add	r3,r3,r3
    70e8:	39cf883a 	add	r7,r7,r7
    70ec:	10c7883a 	add	r3,r2,r3
    70f0:	21cf883a 	add	r7,r4,r7
    70f4:	10c00d2e 	bgeu	r2,r3,712c <__copybits+0x64>
    70f8:	200b883a 	mov	r5,r4
    70fc:	12000017 	ldw	r8,0(r2)
    7100:	29400104 	addi	r5,r5,4
    7104:	10800104 	addi	r2,r2,4
    7108:	2a3fff15 	stw	r8,-4(r5)
    710c:	10fffb36 	bltu	r2,r3,70fc <__copybits+0x34>
    7110:	1985c83a 	sub	r2,r3,r6
    7114:	10bffac4 	addi	r2,r2,-21
    7118:	1004d0ba 	srli	r2,r2,2
    711c:	10800044 	addi	r2,r2,1
    7120:	1085883a 	add	r2,r2,r2
    7124:	1085883a 	add	r2,r2,r2
    7128:	2089883a 	add	r4,r4,r2
    712c:	21c0032e 	bgeu	r4,r7,713c <__copybits+0x74>
    7130:	20000015 	stw	zero,0(r4)
    7134:	21000104 	addi	r4,r4,4
    7138:	21fffd36 	bltu	r4,r7,7130 <__copybits+0x68>
    713c:	f800283a 	ret

00007140 <__any_on>:
    7140:	20c00417 	ldw	r3,16(r4)
    7144:	2805d17a 	srai	r2,r5,5
    7148:	21000504 	addi	r4,r4,20
    714c:	18800d0e 	bge	r3,r2,7184 <__any_on+0x44>
    7150:	18c7883a 	add	r3,r3,r3
    7154:	18c7883a 	add	r3,r3,r3
    7158:	20c7883a 	add	r3,r4,r3
    715c:	20c0192e 	bgeu	r4,r3,71c4 <__any_on+0x84>
    7160:	18bfff17 	ldw	r2,-4(r3)
    7164:	18ffff04 	addi	r3,r3,-4
    7168:	1000041e 	bne	r2,zero,717c <__any_on+0x3c>
    716c:	20c0142e 	bgeu	r4,r3,71c0 <__any_on+0x80>
    7170:	18ffff04 	addi	r3,r3,-4
    7174:	19400017 	ldw	r5,0(r3)
    7178:	283ffc26 	beq	r5,zero,716c <__any_on+0x2c>
    717c:	00800044 	movi	r2,1
    7180:	f800283a 	ret
    7184:	10c00a0e 	bge	r2,r3,71b0 <__any_on+0x70>
    7188:	1085883a 	add	r2,r2,r2
    718c:	1085883a 	add	r2,r2,r2
    7190:	294007cc 	andi	r5,r5,31
    7194:	2087883a 	add	r3,r4,r2
    7198:	283ff026 	beq	r5,zero,715c <__any_on+0x1c>
    719c:	19800017 	ldw	r6,0(r3)
    71a0:	3144d83a 	srl	r2,r6,r5
    71a4:	114a983a 	sll	r5,r2,r5
    71a8:	317ff41e 	bne	r6,r5,717c <__any_on+0x3c>
    71ac:	003feb06 	br	715c <__any_on+0x1c>
    71b0:	1085883a 	add	r2,r2,r2
    71b4:	1085883a 	add	r2,r2,r2
    71b8:	2087883a 	add	r3,r4,r2
    71bc:	003fe706 	br	715c <__any_on+0x1c>
    71c0:	f800283a 	ret
    71c4:	0005883a 	mov	r2,zero
    71c8:	f800283a 	ret

000071cc <_realloc_r>:
    71cc:	defff604 	addi	sp,sp,-40
    71d0:	dc400115 	stw	r17,4(sp)
    71d4:	dfc00915 	stw	ra,36(sp)
    71d8:	df000815 	stw	fp,32(sp)
    71dc:	ddc00715 	stw	r23,28(sp)
    71e0:	dd800615 	stw	r22,24(sp)
    71e4:	dd400515 	stw	r21,20(sp)
    71e8:	dd000415 	stw	r20,16(sp)
    71ec:	dcc00315 	stw	r19,12(sp)
    71f0:	dc800215 	stw	r18,8(sp)
    71f4:	dc000015 	stw	r16,0(sp)
    71f8:	3023883a 	mov	r17,r6
    71fc:	2800b626 	beq	r5,zero,74d8 <_realloc_r+0x30c>
    7200:	2829883a 	mov	r20,r5
    7204:	2025883a 	mov	r18,r4
    7208:	000d2240 	call	d224 <__malloc_lock>
    720c:	a0ffff17 	ldw	r3,-4(r20)
    7210:	043fff04 	movi	r16,-4
    7214:	888002c4 	addi	r2,r17,11
    7218:	01000584 	movi	r4,22
    721c:	a57ffe04 	addi	r21,r20,-8
    7220:	1c20703a 	and	r16,r3,r16
    7224:	2080332e 	bgeu	r4,r2,72f4 <_realloc_r+0x128>
    7228:	05bffe04 	movi	r22,-8
    722c:	15ac703a 	and	r22,r2,r22
    7230:	b005883a 	mov	r2,r22
    7234:	b0005716 	blt	r22,zero,7394 <_realloc_r+0x1c8>
    7238:	b4405636 	bltu	r22,r17,7394 <_realloc_r+0x1c8>
    723c:	8080300e 	bge	r16,r2,7300 <_realloc_r+0x134>
    7240:	07000074 	movhi	fp,1
    7244:	e7003d04 	addi	fp,fp,244
    7248:	e2000217 	ldw	r8,8(fp)
    724c:	ac09883a 	add	r4,r21,r16
    7250:	22006126 	beq	r4,r8,73d8 <_realloc_r+0x20c>
    7254:	22400117 	ldw	r9,4(r4)
    7258:	01ffff84 	movi	r7,-2
    725c:	49ce703a 	and	r7,r9,r7
    7260:	21cf883a 	add	r7,r4,r7
    7264:	39800117 	ldw	r6,4(r7)
    7268:	3180004c 	andi	r6,r6,1
    726c:	30003e26 	beq	r6,zero,7368 <_realloc_r+0x19c>
    7270:	18c0004c 	andi	r3,r3,1
    7274:	18008126 	beq	r3,zero,747c <_realloc_r+0x2b0>
    7278:	880b883a 	mov	r5,r17
    727c:	9009883a 	mov	r4,r18
    7280:	00055140 	call	5514 <_malloc_r>
    7284:	1023883a 	mov	r17,r2
    7288:	10011e26 	beq	r2,zero,7704 <_realloc_r+0x538>
    728c:	a0ffff17 	ldw	r3,-4(r20)
    7290:	113ffe04 	addi	r4,r2,-8
    7294:	00bfff84 	movi	r2,-2
    7298:	1884703a 	and	r2,r3,r2
    729c:	a885883a 	add	r2,r21,r2
    72a0:	2080ee26 	beq	r4,r2,765c <_realloc_r+0x490>
    72a4:	81bfff04 	addi	r6,r16,-4
    72a8:	00800904 	movi	r2,36
    72ac:	1180b836 	bltu	r2,r6,7590 <_realloc_r+0x3c4>
    72b0:	00c004c4 	movi	r3,19
    72b4:	19809536 	bltu	r3,r6,750c <_realloc_r+0x340>
    72b8:	8805883a 	mov	r2,r17
    72bc:	a007883a 	mov	r3,r20
    72c0:	19000017 	ldw	r4,0(r3)
    72c4:	11000015 	stw	r4,0(r2)
    72c8:	19000117 	ldw	r4,4(r3)
    72cc:	11000115 	stw	r4,4(r2)
    72d0:	18c00217 	ldw	r3,8(r3)
    72d4:	10c00215 	stw	r3,8(r2)
    72d8:	a00b883a 	mov	r5,r20
    72dc:	9009883a 	mov	r4,r18
    72e0:	00049280 	call	4928 <_free_r>
    72e4:	9009883a 	mov	r4,r18
    72e8:	000d2480 	call	d248 <__malloc_unlock>
    72ec:	8805883a 	mov	r2,r17
    72f0:	00001106 	br	7338 <_realloc_r+0x16c>
    72f4:	00800404 	movi	r2,16
    72f8:	102d883a 	mov	r22,r2
    72fc:	003fce06 	br	7238 <_realloc_r+0x6c>
    7300:	a023883a 	mov	r17,r20
    7304:	858fc83a 	sub	r7,r16,r22
    7308:	008003c4 	movi	r2,15
    730c:	18c0004c 	andi	r3,r3,1
    7310:	11c02436 	bltu	r2,r7,73a4 <_realloc_r+0x1d8>
    7314:	1c06b03a 	or	r3,r3,r16
    7318:	a8c00115 	stw	r3,4(r21)
    731c:	ac21883a 	add	r16,r21,r16
    7320:	80800117 	ldw	r2,4(r16)
    7324:	10800054 	ori	r2,r2,1
    7328:	80800115 	stw	r2,4(r16)
    732c:	9009883a 	mov	r4,r18
    7330:	000d2480 	call	d248 <__malloc_unlock>
    7334:	8805883a 	mov	r2,r17
    7338:	dfc00917 	ldw	ra,36(sp)
    733c:	df000817 	ldw	fp,32(sp)
    7340:	ddc00717 	ldw	r23,28(sp)
    7344:	dd800617 	ldw	r22,24(sp)
    7348:	dd400517 	ldw	r21,20(sp)
    734c:	dd000417 	ldw	r20,16(sp)
    7350:	dcc00317 	ldw	r19,12(sp)
    7354:	dc800217 	ldw	r18,8(sp)
    7358:	dc400117 	ldw	r17,4(sp)
    735c:	dc000017 	ldw	r16,0(sp)
    7360:	dec00a04 	addi	sp,sp,40
    7364:	f800283a 	ret
    7368:	017fff04 	movi	r5,-4
    736c:	494a703a 	and	r5,r9,r5
    7370:	814d883a 	add	r6,r16,r5
    7374:	30801e16 	blt	r6,r2,73f0 <_realloc_r+0x224>
    7378:	20800317 	ldw	r2,12(r4)
    737c:	21000217 	ldw	r4,8(r4)
    7380:	a023883a 	mov	r17,r20
    7384:	3021883a 	mov	r16,r6
    7388:	20800315 	stw	r2,12(r4)
    738c:	11000215 	stw	r4,8(r2)
    7390:	003fdc06 	br	7304 <_realloc_r+0x138>
    7394:	00800304 	movi	r2,12
    7398:	90800015 	stw	r2,0(r18)
    739c:	0005883a 	mov	r2,zero
    73a0:	003fe506 	br	7338 <_realloc_r+0x16c>
    73a4:	1d86b03a 	or	r3,r3,r22
    73a8:	a8c00115 	stw	r3,4(r21)
    73ac:	ad8b883a 	add	r5,r21,r22
    73b0:	38c00054 	ori	r3,r7,1
    73b4:	28c00115 	stw	r3,4(r5)
    73b8:	29cf883a 	add	r7,r5,r7
    73bc:	38c00117 	ldw	r3,4(r7)
    73c0:	29400204 	addi	r5,r5,8
    73c4:	9009883a 	mov	r4,r18
    73c8:	18800054 	ori	r2,r3,1
    73cc:	38800115 	stw	r2,4(r7)
    73d0:	00049280 	call	4928 <_free_r>
    73d4:	003fd506 	br	732c <_realloc_r+0x160>
    73d8:	21c00117 	ldw	r7,4(r4)
    73dc:	017fff04 	movi	r5,-4
    73e0:	b1800404 	addi	r6,r22,16
    73e4:	394a703a 	and	r5,r7,r5
    73e8:	814f883a 	add	r7,r16,r5
    73ec:	39805b0e 	bge	r7,r6,755c <_realloc_r+0x390>
    73f0:	18c0004c 	andi	r3,r3,1
    73f4:	183fa01e 	bne	r3,zero,7278 <_realloc_r+0xac>
    73f8:	a4fffe17 	ldw	r19,-8(r20)
    73fc:	00ffff04 	movi	r3,-4
    7400:	ace7c83a 	sub	r19,r21,r19
    7404:	99800117 	ldw	r6,4(r19)
    7408:	30c6703a 	and	r3,r6,r3
    740c:	20002026 	beq	r4,zero,7490 <_realloc_r+0x2c4>
    7410:	80ef883a 	add	r23,r16,r3
    7414:	b96f883a 	add	r23,r23,r5
    7418:	22006126 	beq	r4,r8,75a0 <_realloc_r+0x3d4>
    741c:	b8801c16 	blt	r23,r2,7490 <_realloc_r+0x2c4>
    7420:	20800317 	ldw	r2,12(r4)
    7424:	20c00217 	ldw	r3,8(r4)
    7428:	81bfff04 	addi	r6,r16,-4
    742c:	01000904 	movi	r4,36
    7430:	18800315 	stw	r2,12(r3)
    7434:	10c00215 	stw	r3,8(r2)
    7438:	98c00217 	ldw	r3,8(r19)
    743c:	98800317 	ldw	r2,12(r19)
    7440:	9c400204 	addi	r17,r19,8
    7444:	18800315 	stw	r2,12(r3)
    7448:	10c00215 	stw	r3,8(r2)
    744c:	21801b36 	bltu	r4,r6,74bc <_realloc_r+0x2f0>
    7450:	008004c4 	movi	r2,19
    7454:	1180362e 	bgeu	r2,r6,7530 <_realloc_r+0x364>
    7458:	a0800017 	ldw	r2,0(r20)
    745c:	98800215 	stw	r2,8(r19)
    7460:	a0800117 	ldw	r2,4(r20)
    7464:	98800315 	stw	r2,12(r19)
    7468:	008006c4 	movi	r2,27
    746c:	11808136 	bltu	r2,r6,7674 <_realloc_r+0x4a8>
    7470:	98800404 	addi	r2,r19,16
    7474:	a5000204 	addi	r20,r20,8
    7478:	00002e06 	br	7534 <_realloc_r+0x368>
    747c:	a4fffe17 	ldw	r19,-8(r20)
    7480:	00ffff04 	movi	r3,-4
    7484:	ace7c83a 	sub	r19,r21,r19
    7488:	99000117 	ldw	r4,4(r19)
    748c:	20c6703a 	and	r3,r4,r3
    7490:	983f7926 	beq	r19,zero,7278 <_realloc_r+0xac>
    7494:	80ef883a 	add	r23,r16,r3
    7498:	b8bf7716 	blt	r23,r2,7278 <_realloc_r+0xac>
    749c:	98800317 	ldw	r2,12(r19)
    74a0:	98c00217 	ldw	r3,8(r19)
    74a4:	81bfff04 	addi	r6,r16,-4
    74a8:	01000904 	movi	r4,36
    74ac:	18800315 	stw	r2,12(r3)
    74b0:	10c00215 	stw	r3,8(r2)
    74b4:	9c400204 	addi	r17,r19,8
    74b8:	21bfe52e 	bgeu	r4,r6,7450 <_realloc_r+0x284>
    74bc:	a00b883a 	mov	r5,r20
    74c0:	8809883a 	mov	r4,r17
    74c4:	0005f4c0 	call	5f4c <memmove>
    74c8:	98c00117 	ldw	r3,4(r19)
    74cc:	b821883a 	mov	r16,r23
    74d0:	982b883a 	mov	r21,r19
    74d4:	003f8b06 	br	7304 <_realloc_r+0x138>
    74d8:	300b883a 	mov	r5,r6
    74dc:	dfc00917 	ldw	ra,36(sp)
    74e0:	df000817 	ldw	fp,32(sp)
    74e4:	ddc00717 	ldw	r23,28(sp)
    74e8:	dd800617 	ldw	r22,24(sp)
    74ec:	dd400517 	ldw	r21,20(sp)
    74f0:	dd000417 	ldw	r20,16(sp)
    74f4:	dcc00317 	ldw	r19,12(sp)
    74f8:	dc800217 	ldw	r18,8(sp)
    74fc:	dc400117 	ldw	r17,4(sp)
    7500:	dc000017 	ldw	r16,0(sp)
    7504:	dec00a04 	addi	sp,sp,40
    7508:	00055141 	jmpi	5514 <_malloc_r>
    750c:	a0c00017 	ldw	r3,0(r20)
    7510:	88c00015 	stw	r3,0(r17)
    7514:	a0c00117 	ldw	r3,4(r20)
    7518:	88c00115 	stw	r3,4(r17)
    751c:	00c006c4 	movi	r3,27
    7520:	19804636 	bltu	r3,r6,763c <_realloc_r+0x470>
    7524:	88800204 	addi	r2,r17,8
    7528:	a0c00204 	addi	r3,r20,8
    752c:	003f6406 	br	72c0 <_realloc_r+0xf4>
    7530:	8805883a 	mov	r2,r17
    7534:	a0c00017 	ldw	r3,0(r20)
    7538:	b821883a 	mov	r16,r23
    753c:	982b883a 	mov	r21,r19
    7540:	10c00015 	stw	r3,0(r2)
    7544:	a0c00117 	ldw	r3,4(r20)
    7548:	10c00115 	stw	r3,4(r2)
    754c:	a0c00217 	ldw	r3,8(r20)
    7550:	10c00215 	stw	r3,8(r2)
    7554:	98c00117 	ldw	r3,4(r19)
    7558:	003f6a06 	br	7304 <_realloc_r+0x138>
    755c:	adab883a 	add	r21,r21,r22
    7560:	3d85c83a 	sub	r2,r7,r22
    7564:	e5400215 	stw	r21,8(fp)
    7568:	10800054 	ori	r2,r2,1
    756c:	a8800115 	stw	r2,4(r21)
    7570:	a0bfff17 	ldw	r2,-4(r20)
    7574:	9009883a 	mov	r4,r18
    7578:	1080004c 	andi	r2,r2,1
    757c:	1584b03a 	or	r2,r2,r22
    7580:	a0bfff15 	stw	r2,-4(r20)
    7584:	000d2480 	call	d248 <__malloc_unlock>
    7588:	a005883a 	mov	r2,r20
    758c:	003f6a06 	br	7338 <_realloc_r+0x16c>
    7590:	a00b883a 	mov	r5,r20
    7594:	8809883a 	mov	r4,r17
    7598:	0005f4c0 	call	5f4c <memmove>
    759c:	003f4e06 	br	72d8 <_realloc_r+0x10c>
    75a0:	b1000404 	addi	r4,r22,16
    75a4:	b93fba16 	blt	r23,r4,7490 <_realloc_r+0x2c4>
    75a8:	98800317 	ldw	r2,12(r19)
    75ac:	98c00217 	ldw	r3,8(r19)
    75b0:	81bfff04 	addi	r6,r16,-4
    75b4:	01000904 	movi	r4,36
    75b8:	18800315 	stw	r2,12(r3)
    75bc:	10c00215 	stw	r3,8(r2)
    75c0:	9c400204 	addi	r17,r19,8
    75c4:	21804336 	bltu	r4,r6,76d4 <_realloc_r+0x508>
    75c8:	008004c4 	movi	r2,19
    75cc:	11803f2e 	bgeu	r2,r6,76cc <_realloc_r+0x500>
    75d0:	a0800017 	ldw	r2,0(r20)
    75d4:	98800215 	stw	r2,8(r19)
    75d8:	a0800117 	ldw	r2,4(r20)
    75dc:	98800315 	stw	r2,12(r19)
    75e0:	008006c4 	movi	r2,27
    75e4:	11803f36 	bltu	r2,r6,76e4 <_realloc_r+0x518>
    75e8:	98800404 	addi	r2,r19,16
    75ec:	a5000204 	addi	r20,r20,8
    75f0:	a0c00017 	ldw	r3,0(r20)
    75f4:	10c00015 	stw	r3,0(r2)
    75f8:	a0c00117 	ldw	r3,4(r20)
    75fc:	10c00115 	stw	r3,4(r2)
    7600:	a0c00217 	ldw	r3,8(r20)
    7604:	10c00215 	stw	r3,8(r2)
    7608:	9d87883a 	add	r3,r19,r22
    760c:	bd85c83a 	sub	r2,r23,r22
    7610:	e0c00215 	stw	r3,8(fp)
    7614:	10800054 	ori	r2,r2,1
    7618:	18800115 	stw	r2,4(r3)
    761c:	98800117 	ldw	r2,4(r19)
    7620:	9009883a 	mov	r4,r18
    7624:	1080004c 	andi	r2,r2,1
    7628:	1584b03a 	or	r2,r2,r22
    762c:	98800115 	stw	r2,4(r19)
    7630:	000d2480 	call	d248 <__malloc_unlock>
    7634:	8805883a 	mov	r2,r17
    7638:	003f3f06 	br	7338 <_realloc_r+0x16c>
    763c:	a0c00217 	ldw	r3,8(r20)
    7640:	88c00215 	stw	r3,8(r17)
    7644:	a0c00317 	ldw	r3,12(r20)
    7648:	88c00315 	stw	r3,12(r17)
    764c:	30801126 	beq	r6,r2,7694 <_realloc_r+0x4c8>
    7650:	88800404 	addi	r2,r17,16
    7654:	a0c00404 	addi	r3,r20,16
    7658:	003f1906 	br	72c0 <_realloc_r+0xf4>
    765c:	893fff17 	ldw	r4,-4(r17)
    7660:	00bfff04 	movi	r2,-4
    7664:	a023883a 	mov	r17,r20
    7668:	2084703a 	and	r2,r4,r2
    766c:	80a1883a 	add	r16,r16,r2
    7670:	003f2406 	br	7304 <_realloc_r+0x138>
    7674:	a0800217 	ldw	r2,8(r20)
    7678:	98800415 	stw	r2,16(r19)
    767c:	a0800317 	ldw	r2,12(r20)
    7680:	98800515 	stw	r2,20(r19)
    7684:	31000a26 	beq	r6,r4,76b0 <_realloc_r+0x4e4>
    7688:	98800604 	addi	r2,r19,24
    768c:	a5000404 	addi	r20,r20,16
    7690:	003fa806 	br	7534 <_realloc_r+0x368>
    7694:	a1000417 	ldw	r4,16(r20)
    7698:	88800604 	addi	r2,r17,24
    769c:	a0c00604 	addi	r3,r20,24
    76a0:	89000415 	stw	r4,16(r17)
    76a4:	a1000517 	ldw	r4,20(r20)
    76a8:	89000515 	stw	r4,20(r17)
    76ac:	003f0406 	br	72c0 <_realloc_r+0xf4>
    76b0:	a0c00417 	ldw	r3,16(r20)
    76b4:	a5000604 	addi	r20,r20,24
    76b8:	98800804 	addi	r2,r19,32
    76bc:	98c00615 	stw	r3,24(r19)
    76c0:	a0ffff17 	ldw	r3,-4(r20)
    76c4:	98c00715 	stw	r3,28(r19)
    76c8:	003f9a06 	br	7534 <_realloc_r+0x368>
    76cc:	8805883a 	mov	r2,r17
    76d0:	003fc706 	br	75f0 <_realloc_r+0x424>
    76d4:	a00b883a 	mov	r5,r20
    76d8:	8809883a 	mov	r4,r17
    76dc:	0005f4c0 	call	5f4c <memmove>
    76e0:	003fc906 	br	7608 <_realloc_r+0x43c>
    76e4:	a0800217 	ldw	r2,8(r20)
    76e8:	98800415 	stw	r2,16(r19)
    76ec:	a0800317 	ldw	r2,12(r20)
    76f0:	98800515 	stw	r2,20(r19)
    76f4:	31000726 	beq	r6,r4,7714 <_realloc_r+0x548>
    76f8:	98800604 	addi	r2,r19,24
    76fc:	a5000404 	addi	r20,r20,16
    7700:	003fbb06 	br	75f0 <_realloc_r+0x424>
    7704:	9009883a 	mov	r4,r18
    7708:	000d2480 	call	d248 <__malloc_unlock>
    770c:	0005883a 	mov	r2,zero
    7710:	003f0906 	br	7338 <_realloc_r+0x16c>
    7714:	a0c00417 	ldw	r3,16(r20)
    7718:	a5000604 	addi	r20,r20,24
    771c:	98800804 	addi	r2,r19,32
    7720:	98c00615 	stw	r3,24(r19)
    7724:	a0ffff17 	ldw	r3,-4(r20)
    7728:	98c00715 	stw	r3,28(r19)
    772c:	003fb006 	br	75f0 <_realloc_r+0x424>

00007730 <__fpclassifyd>:
    7730:	00a00034 	movhi	r2,32768
    7734:	10bfffc4 	addi	r2,r2,-1
    7738:	2884703a 	and	r2,r5,r2
    773c:	10000726 	beq	r2,zero,775c <__fpclassifyd+0x2c>
    7740:	00fffc34 	movhi	r3,65520
    7744:	019ff834 	movhi	r6,32736
    7748:	28c7883a 	add	r3,r5,r3
    774c:	31bfffc4 	addi	r6,r6,-1
    7750:	30c00536 	bltu	r6,r3,7768 <__fpclassifyd+0x38>
    7754:	00800104 	movi	r2,4
    7758:	f800283a 	ret
    775c:	2000021e 	bne	r4,zero,7768 <__fpclassifyd+0x38>
    7760:	00800084 	movi	r2,2
    7764:	f800283a 	ret
    7768:	00dffc34 	movhi	r3,32752
    776c:	019ff834 	movhi	r6,32736
    7770:	28cb883a 	add	r5,r5,r3
    7774:	31bfffc4 	addi	r6,r6,-1
    7778:	317ff62e 	bgeu	r6,r5,7754 <__fpclassifyd+0x24>
    777c:	01400434 	movhi	r5,16
    7780:	297fffc4 	addi	r5,r5,-1
    7784:	28800236 	bltu	r5,r2,7790 <__fpclassifyd+0x60>
    7788:	008000c4 	movi	r2,3
    778c:	f800283a 	ret
    7790:	10c00226 	beq	r2,r3,779c <__fpclassifyd+0x6c>
    7794:	0005883a 	mov	r2,zero
    7798:	f800283a 	ret
    779c:	2005003a 	cmpeq	r2,r4,zero
    77a0:	f800283a 	ret

000077a4 <_sbrk_r>:
    77a4:	defffd04 	addi	sp,sp,-12
    77a8:	dc000015 	stw	r16,0(sp)
    77ac:	04000074 	movhi	r16,1
    77b0:	dc400115 	stw	r17,4(sp)
    77b4:	840ca804 	addi	r16,r16,12960
    77b8:	2023883a 	mov	r17,r4
    77bc:	2809883a 	mov	r4,r5
    77c0:	dfc00215 	stw	ra,8(sp)
    77c4:	80000015 	stw	zero,0(r16)
    77c8:	000d41c0 	call	d41c <sbrk>
    77cc:	00ffffc4 	movi	r3,-1
    77d0:	10c00526 	beq	r2,r3,77e8 <_sbrk_r+0x44>
    77d4:	dfc00217 	ldw	ra,8(sp)
    77d8:	dc400117 	ldw	r17,4(sp)
    77dc:	dc000017 	ldw	r16,0(sp)
    77e0:	dec00304 	addi	sp,sp,12
    77e4:	f800283a 	ret
    77e8:	80c00017 	ldw	r3,0(r16)
    77ec:	183ff926 	beq	r3,zero,77d4 <_sbrk_r+0x30>
    77f0:	88c00015 	stw	r3,0(r17)
    77f4:	003ff706 	br	77d4 <_sbrk_r+0x30>

000077f8 <__sread>:
    77f8:	defffe04 	addi	sp,sp,-8
    77fc:	dc000015 	stw	r16,0(sp)
    7800:	2821883a 	mov	r16,r5
    7804:	2940038f 	ldh	r5,14(r5)
    7808:	dfc00115 	stw	ra,4(sp)
    780c:	00095ec0 	call	95ec <_read_r>
    7810:	10000716 	blt	r2,zero,7830 <__sread+0x38>
    7814:	80c01417 	ldw	r3,80(r16)
    7818:	1887883a 	add	r3,r3,r2
    781c:	80c01415 	stw	r3,80(r16)
    7820:	dfc00117 	ldw	ra,4(sp)
    7824:	dc000017 	ldw	r16,0(sp)
    7828:	dec00204 	addi	sp,sp,8
    782c:	f800283a 	ret
    7830:	80c0030b 	ldhu	r3,12(r16)
    7834:	18fbffcc 	andi	r3,r3,61439
    7838:	80c0030d 	sth	r3,12(r16)
    783c:	dfc00117 	ldw	ra,4(sp)
    7840:	dc000017 	ldw	r16,0(sp)
    7844:	dec00204 	addi	sp,sp,8
    7848:	f800283a 	ret

0000784c <__seofread>:
    784c:	0005883a 	mov	r2,zero
    7850:	f800283a 	ret

00007854 <__swrite>:
    7854:	2880030b 	ldhu	r2,12(r5)
    7858:	defffb04 	addi	sp,sp,-20
    785c:	dcc00315 	stw	r19,12(sp)
    7860:	dc800215 	stw	r18,8(sp)
    7864:	dc400115 	stw	r17,4(sp)
    7868:	dc000015 	stw	r16,0(sp)
    786c:	dfc00415 	stw	ra,16(sp)
    7870:	10c0400c 	andi	r3,r2,256
    7874:	2821883a 	mov	r16,r5
    7878:	2023883a 	mov	r17,r4
    787c:	3025883a 	mov	r18,r6
    7880:	3827883a 	mov	r19,r7
    7884:	18000526 	beq	r3,zero,789c <__swrite+0x48>
    7888:	2940038f 	ldh	r5,14(r5)
    788c:	01c00084 	movi	r7,2
    7890:	000d883a 	mov	r6,zero
    7894:	000958c0 	call	958c <_lseek_r>
    7898:	8080030b 	ldhu	r2,12(r16)
    789c:	8140038f 	ldh	r5,14(r16)
    78a0:	10bbffcc 	andi	r2,r2,61439
    78a4:	980f883a 	mov	r7,r19
    78a8:	900d883a 	mov	r6,r18
    78ac:	8809883a 	mov	r4,r17
    78b0:	8080030d 	sth	r2,12(r16)
    78b4:	dfc00417 	ldw	ra,16(sp)
    78b8:	dcc00317 	ldw	r19,12(sp)
    78bc:	dc800217 	ldw	r18,8(sp)
    78c0:	dc400117 	ldw	r17,4(sp)
    78c4:	dc000017 	ldw	r16,0(sp)
    78c8:	dec00504 	addi	sp,sp,20
    78cc:	00090581 	jmpi	9058 <_write_r>

000078d0 <__sseek>:
    78d0:	defffe04 	addi	sp,sp,-8
    78d4:	dc000015 	stw	r16,0(sp)
    78d8:	2821883a 	mov	r16,r5
    78dc:	2940038f 	ldh	r5,14(r5)
    78e0:	dfc00115 	stw	ra,4(sp)
    78e4:	000958c0 	call	958c <_lseek_r>
    78e8:	00ffffc4 	movi	r3,-1
    78ec:	10c00826 	beq	r2,r3,7910 <__sseek+0x40>
    78f0:	80c0030b 	ldhu	r3,12(r16)
    78f4:	80801415 	stw	r2,80(r16)
    78f8:	18c40014 	ori	r3,r3,4096
    78fc:	80c0030d 	sth	r3,12(r16)
    7900:	dfc00117 	ldw	ra,4(sp)
    7904:	dc000017 	ldw	r16,0(sp)
    7908:	dec00204 	addi	sp,sp,8
    790c:	f800283a 	ret
    7910:	80c0030b 	ldhu	r3,12(r16)
    7914:	18fbffcc 	andi	r3,r3,61439
    7918:	80c0030d 	sth	r3,12(r16)
    791c:	dfc00117 	ldw	ra,4(sp)
    7920:	dc000017 	ldw	r16,0(sp)
    7924:	dec00204 	addi	sp,sp,8
    7928:	f800283a 	ret

0000792c <__sclose>:
    792c:	2940038f 	ldh	r5,14(r5)
    7930:	00090b81 	jmpi	90b8 <_close_r>

00007934 <strcmp>:
    7934:	2144b03a 	or	r2,r4,r5
    7938:	108000cc 	andi	r2,r2,3
    793c:	1000171e 	bne	r2,zero,799c <strcmp+0x68>
    7940:	20800017 	ldw	r2,0(r4)
    7944:	28c00017 	ldw	r3,0(r5)
    7948:	10c0141e 	bne	r2,r3,799c <strcmp+0x68>
    794c:	027fbff4 	movhi	r9,65279
    7950:	4a7fbfc4 	addi	r9,r9,-257
    7954:	0086303a 	nor	r3,zero,r2
    7958:	02202074 	movhi	r8,32897
    795c:	1245883a 	add	r2,r2,r9
    7960:	42202004 	addi	r8,r8,-32640
    7964:	10c4703a 	and	r2,r2,r3
    7968:	1204703a 	and	r2,r2,r8
    796c:	10000226 	beq	r2,zero,7978 <strcmp+0x44>
    7970:	00002306 	br	7a00 <strcmp+0xcc>
    7974:	1000221e 	bne	r2,zero,7a00 <strcmp+0xcc>
    7978:	21000104 	addi	r4,r4,4
    797c:	20c00017 	ldw	r3,0(r4)
    7980:	29400104 	addi	r5,r5,4
    7984:	29800017 	ldw	r6,0(r5)
    7988:	1a4f883a 	add	r7,r3,r9
    798c:	00c4303a 	nor	r2,zero,r3
    7990:	3884703a 	and	r2,r7,r2
    7994:	1204703a 	and	r2,r2,r8
    7998:	19bff626 	beq	r3,r6,7974 <strcmp+0x40>
    799c:	20800003 	ldbu	r2,0(r4)
    79a0:	10c03fcc 	andi	r3,r2,255
    79a4:	18c0201c 	xori	r3,r3,128
    79a8:	18ffe004 	addi	r3,r3,-128
    79ac:	18000c26 	beq	r3,zero,79e0 <strcmp+0xac>
    79b0:	29800007 	ldb	r6,0(r5)
    79b4:	19800326 	beq	r3,r6,79c4 <strcmp+0x90>
    79b8:	00001306 	br	7a08 <strcmp+0xd4>
    79bc:	29800007 	ldb	r6,0(r5)
    79c0:	11800b1e 	bne	r2,r6,79f0 <strcmp+0xbc>
    79c4:	21000044 	addi	r4,r4,1
    79c8:	20c00003 	ldbu	r3,0(r4)
    79cc:	29400044 	addi	r5,r5,1
    79d0:	18803fcc 	andi	r2,r3,255
    79d4:	1080201c 	xori	r2,r2,128
    79d8:	10bfe004 	addi	r2,r2,-128
    79dc:	103ff71e 	bne	r2,zero,79bc <strcmp+0x88>
    79e0:	0007883a 	mov	r3,zero
    79e4:	28800003 	ldbu	r2,0(r5)
    79e8:	1885c83a 	sub	r2,r3,r2
    79ec:	f800283a 	ret
    79f0:	28800003 	ldbu	r2,0(r5)
    79f4:	18c03fcc 	andi	r3,r3,255
    79f8:	1885c83a 	sub	r2,r3,r2
    79fc:	f800283a 	ret
    7a00:	0005883a 	mov	r2,zero
    7a04:	f800283a 	ret
    7a08:	10c03fcc 	andi	r3,r2,255
    7a0c:	003ff506 	br	79e4 <strcmp+0xb0>

00007a10 <__sprint_r.part.0>:
    7a10:	28801917 	ldw	r2,100(r5)
    7a14:	defff604 	addi	sp,sp,-40
    7a18:	dd400515 	stw	r21,20(sp)
    7a1c:	dfc00915 	stw	ra,36(sp)
    7a20:	df000815 	stw	fp,32(sp)
    7a24:	ddc00715 	stw	r23,28(sp)
    7a28:	dd800615 	stw	r22,24(sp)
    7a2c:	dd000415 	stw	r20,16(sp)
    7a30:	dcc00315 	stw	r19,12(sp)
    7a34:	dc800215 	stw	r18,8(sp)
    7a38:	dc400115 	stw	r17,4(sp)
    7a3c:	dc000015 	stw	r16,0(sp)
    7a40:	1088000c 	andi	r2,r2,8192
    7a44:	302b883a 	mov	r21,r6
    7a48:	10002e26 	beq	r2,zero,7b04 <__sprint_r.part.0+0xf4>
    7a4c:	30800217 	ldw	r2,8(r6)
    7a50:	35800017 	ldw	r22,0(r6)
    7a54:	10002926 	beq	r2,zero,7afc <__sprint_r.part.0+0xec>
    7a58:	2827883a 	mov	r19,r5
    7a5c:	2029883a 	mov	r20,r4
    7a60:	b5c00104 	addi	r23,r22,4
    7a64:	04bfffc4 	movi	r18,-1
    7a68:	bc400017 	ldw	r17,0(r23)
    7a6c:	b4000017 	ldw	r16,0(r22)
    7a70:	0039883a 	mov	fp,zero
    7a74:	8822d0ba 	srli	r17,r17,2
    7a78:	8800031e 	bne	r17,zero,7a88 <__sprint_r.part.0+0x78>
    7a7c:	00001806 	br	7ae0 <__sprint_r.part.0+0xd0>
    7a80:	84000104 	addi	r16,r16,4
    7a84:	8f001526 	beq	r17,fp,7adc <__sprint_r.part.0+0xcc>
    7a88:	81400017 	ldw	r5,0(r16)
    7a8c:	980d883a 	mov	r6,r19
    7a90:	a009883a 	mov	r4,r20
    7a94:	00094380 	call	9438 <_fputwc_r>
    7a98:	e7000044 	addi	fp,fp,1
    7a9c:	14bff81e 	bne	r2,r18,7a80 <__sprint_r.part.0+0x70>
    7aa0:	9005883a 	mov	r2,r18
    7aa4:	a8000215 	stw	zero,8(r21)
    7aa8:	a8000115 	stw	zero,4(r21)
    7aac:	dfc00917 	ldw	ra,36(sp)
    7ab0:	df000817 	ldw	fp,32(sp)
    7ab4:	ddc00717 	ldw	r23,28(sp)
    7ab8:	dd800617 	ldw	r22,24(sp)
    7abc:	dd400517 	ldw	r21,20(sp)
    7ac0:	dd000417 	ldw	r20,16(sp)
    7ac4:	dcc00317 	ldw	r19,12(sp)
    7ac8:	dc800217 	ldw	r18,8(sp)
    7acc:	dc400117 	ldw	r17,4(sp)
    7ad0:	dc000017 	ldw	r16,0(sp)
    7ad4:	dec00a04 	addi	sp,sp,40
    7ad8:	f800283a 	ret
    7adc:	a8800217 	ldw	r2,8(r21)
    7ae0:	8c63883a 	add	r17,r17,r17
    7ae4:	8c63883a 	add	r17,r17,r17
    7ae8:	1445c83a 	sub	r2,r2,r17
    7aec:	a8800215 	stw	r2,8(r21)
    7af0:	b5800204 	addi	r22,r22,8
    7af4:	bdc00204 	addi	r23,r23,8
    7af8:	103fdb1e 	bne	r2,zero,7a68 <__sprint_r.part.0+0x58>
    7afc:	0005883a 	mov	r2,zero
    7b00:	003fe806 	br	7aa4 <__sprint_r.part.0+0x94>
    7b04:	0004c380 	call	4c38 <__sfvwrite_r>
    7b08:	003fe606 	br	7aa4 <__sprint_r.part.0+0x94>

00007b0c <__sprint_r>:
    7b0c:	30c00217 	ldw	r3,8(r6)
    7b10:	18000126 	beq	r3,zero,7b18 <__sprint_r+0xc>
    7b14:	0007a101 	jmpi	7a10 <__sprint_r.part.0>
    7b18:	30000115 	stw	zero,4(r6)
    7b1c:	0005883a 	mov	r2,zero
    7b20:	f800283a 	ret

00007b24 <___vfiprintf_internal_r>:
    7b24:	deffc904 	addi	sp,sp,-220
    7b28:	df003515 	stw	fp,212(sp)
    7b2c:	dd003115 	stw	r20,196(sp)
    7b30:	dfc03615 	stw	ra,216(sp)
    7b34:	ddc03415 	stw	r23,208(sp)
    7b38:	dd803315 	stw	r22,204(sp)
    7b3c:	dd403215 	stw	r21,200(sp)
    7b40:	dcc03015 	stw	r19,192(sp)
    7b44:	dc802f15 	stw	r18,188(sp)
    7b48:	dc402e15 	stw	r17,184(sp)
    7b4c:	dc002d15 	stw	r16,180(sp)
    7b50:	d9002015 	stw	r4,128(sp)
    7b54:	d9c02215 	stw	r7,136(sp)
    7b58:	2829883a 	mov	r20,r5
    7b5c:	3039883a 	mov	fp,r6
    7b60:	20000226 	beq	r4,zero,7b6c <___vfiprintf_internal_r+0x48>
    7b64:	20800e17 	ldw	r2,56(r4)
    7b68:	1000cf26 	beq	r2,zero,7ea8 <___vfiprintf_internal_r+0x384>
    7b6c:	a080030b 	ldhu	r2,12(r20)
    7b70:	10c8000c 	andi	r3,r2,8192
    7b74:	1800061e 	bne	r3,zero,7b90 <___vfiprintf_internal_r+0x6c>
    7b78:	a1001917 	ldw	r4,100(r20)
    7b7c:	00f7ffc4 	movi	r3,-8193
    7b80:	10880014 	ori	r2,r2,8192
    7b84:	20c6703a 	and	r3,r4,r3
    7b88:	a080030d 	sth	r2,12(r20)
    7b8c:	a0c01915 	stw	r3,100(r20)
    7b90:	10c0020c 	andi	r3,r2,8
    7b94:	1800a926 	beq	r3,zero,7e3c <___vfiprintf_internal_r+0x318>
    7b98:	a0c00417 	ldw	r3,16(r20)
    7b9c:	1800a726 	beq	r3,zero,7e3c <___vfiprintf_internal_r+0x318>
    7ba0:	1080068c 	andi	r2,r2,26
    7ba4:	00c00284 	movi	r3,10
    7ba8:	10c0ac26 	beq	r2,r3,7e5c <___vfiprintf_internal_r+0x338>
    7bac:	da801a04 	addi	r10,sp,104
    7bb0:	da801e15 	stw	r10,120(sp)
    7bb4:	d8801e17 	ldw	r2,120(sp)
    7bb8:	da8019c4 	addi	r10,sp,103
    7bbc:	05800074 	movhi	r22,1
    7bc0:	05c00074 	movhi	r23,1
    7bc4:	da801f15 	stw	r10,124(sp)
    7bc8:	1295c83a 	sub	r10,r2,r10
    7bcc:	b5bec504 	addi	r22,r22,-1260
    7bd0:	bdfec104 	addi	r23,r23,-1276
    7bd4:	dec01a15 	stw	sp,104(sp)
    7bd8:	d8001c15 	stw	zero,112(sp)
    7bdc:	d8001b15 	stw	zero,108(sp)
    7be0:	d8002615 	stw	zero,152(sp)
    7be4:	d8002315 	stw	zero,140(sp)
    7be8:	da802715 	stw	r10,156(sp)
    7bec:	d811883a 	mov	r8,sp
    7bf0:	dd002115 	stw	r20,132(sp)
    7bf4:	e021883a 	mov	r16,fp
    7bf8:	80800007 	ldb	r2,0(r16)
    7bfc:	1003ea26 	beq	r2,zero,8ba8 <___vfiprintf_internal_r+0x1084>
    7c00:	00c00944 	movi	r3,37
    7c04:	8025883a 	mov	r18,r16
    7c08:	10c0021e 	bne	r2,r3,7c14 <___vfiprintf_internal_r+0xf0>
    7c0c:	00001606 	br	7c68 <___vfiprintf_internal_r+0x144>
    7c10:	10c00326 	beq	r2,r3,7c20 <___vfiprintf_internal_r+0xfc>
    7c14:	94800044 	addi	r18,r18,1
    7c18:	90800007 	ldb	r2,0(r18)
    7c1c:	103ffc1e 	bne	r2,zero,7c10 <___vfiprintf_internal_r+0xec>
    7c20:	9423c83a 	sub	r17,r18,r16
    7c24:	88001026 	beq	r17,zero,7c68 <___vfiprintf_internal_r+0x144>
    7c28:	d8c01c17 	ldw	r3,112(sp)
    7c2c:	d8801b17 	ldw	r2,108(sp)
    7c30:	44000015 	stw	r16,0(r8)
    7c34:	88c7883a 	add	r3,r17,r3
    7c38:	10800044 	addi	r2,r2,1
    7c3c:	44400115 	stw	r17,4(r8)
    7c40:	d8c01c15 	stw	r3,112(sp)
    7c44:	d8801b15 	stw	r2,108(sp)
    7c48:	010001c4 	movi	r4,7
    7c4c:	2080760e 	bge	r4,r2,7e28 <___vfiprintf_internal_r+0x304>
    7c50:	1803821e 	bne	r3,zero,8a5c <___vfiprintf_internal_r+0xf38>
    7c54:	da802317 	ldw	r10,140(sp)
    7c58:	d8001b15 	stw	zero,108(sp)
    7c5c:	d811883a 	mov	r8,sp
    7c60:	5455883a 	add	r10,r10,r17
    7c64:	da802315 	stw	r10,140(sp)
    7c68:	90800007 	ldb	r2,0(r18)
    7c6c:	10044626 	beq	r2,zero,8d88 <___vfiprintf_internal_r+0x1264>
    7c70:	90c00047 	ldb	r3,1(r18)
    7c74:	94000044 	addi	r16,r18,1
    7c78:	d8001d85 	stb	zero,118(sp)
    7c7c:	0009883a 	mov	r4,zero
    7c80:	000f883a 	mov	r7,zero
    7c84:	027fffc4 	movi	r9,-1
    7c88:	0023883a 	mov	r17,zero
    7c8c:	0029883a 	mov	r20,zero
    7c90:	01401604 	movi	r5,88
    7c94:	01800244 	movi	r6,9
    7c98:	03400a84 	movi	r13,42
    7c9c:	03001b04 	movi	r12,108
    7ca0:	84000044 	addi	r16,r16,1
    7ca4:	18bff804 	addi	r2,r3,-32
    7ca8:	28827336 	bltu	r5,r2,8678 <___vfiprintf_internal_r+0xb54>
    7cac:	100490ba 	slli	r2,r2,2
    7cb0:	02800034 	movhi	r10,0
    7cb4:	529f3104 	addi	r10,r10,31940
    7cb8:	1285883a 	add	r2,r2,r10
    7cbc:	10800017 	ldw	r2,0(r2)
    7cc0:	1000683a 	jmp	r2
    7cc4:	000083ac 	andhi	zero,zero,526
    7cc8:	00008678 	rdprs	zero,zero,537
    7ccc:	00008678 	rdprs	zero,zero,537
    7cd0:	000083cc 	andi	zero,zero,527
    7cd4:	00008678 	rdprs	zero,zero,537
    7cd8:	00008678 	rdprs	zero,zero,537
    7cdc:	00008678 	rdprs	zero,zero,537
    7ce0:	00008678 	rdprs	zero,zero,537
    7ce4:	00008678 	rdprs	zero,zero,537
    7ce8:	00008678 	rdprs	zero,zero,537
    7cec:	000085b4 	movhi	zero,534
    7cf0:	000085d0 	cmplti	zero,zero,535
    7cf4:	00008678 	rdprs	zero,zero,537
    7cf8:	00007eb8 	rdprs	zero,zero,506
    7cfc:	000085e0 	cmpeqi	zero,zero,535
    7d00:	00008678 	rdprs	zero,zero,537
    7d04:	000083d8 	cmpnei	zero,zero,527
    7d08:	000083e4 	muli	zero,zero,527
    7d0c:	000083e4 	muli	zero,zero,527
    7d10:	000083e4 	muli	zero,zero,527
    7d14:	000083e4 	muli	zero,zero,527
    7d18:	000083e4 	muli	zero,zero,527
    7d1c:	000083e4 	muli	zero,zero,527
    7d20:	000083e4 	muli	zero,zero,527
    7d24:	000083e4 	muli	zero,zero,527
    7d28:	000083e4 	muli	zero,zero,527
    7d2c:	00008678 	rdprs	zero,zero,537
    7d30:	00008678 	rdprs	zero,zero,537
    7d34:	00008678 	rdprs	zero,zero,537
    7d38:	00008678 	rdprs	zero,zero,537
    7d3c:	00008678 	rdprs	zero,zero,537
    7d40:	00008678 	rdprs	zero,zero,537
    7d44:	00008678 	rdprs	zero,zero,537
    7d48:	00008678 	rdprs	zero,zero,537
    7d4c:	00008678 	rdprs	zero,zero,537
    7d50:	00008678 	rdprs	zero,zero,537
    7d54:	00008410 	cmplti	zero,zero,528
    7d58:	00008678 	rdprs	zero,zero,537
    7d5c:	00008678 	rdprs	zero,zero,537
    7d60:	00008678 	rdprs	zero,zero,537
    7d64:	00008678 	rdprs	zero,zero,537
    7d68:	00008678 	rdprs	zero,zero,537
    7d6c:	00008678 	rdprs	zero,zero,537
    7d70:	00008678 	rdprs	zero,zero,537
    7d74:	00008678 	rdprs	zero,zero,537
    7d78:	00008678 	rdprs	zero,zero,537
    7d7c:	00008678 	rdprs	zero,zero,537
    7d80:	00008448 	cmpgei	zero,zero,529
    7d84:	00008678 	rdprs	zero,zero,537
    7d88:	00008678 	rdprs	zero,zero,537
    7d8c:	00008678 	rdprs	zero,zero,537
    7d90:	00008678 	rdprs	zero,zero,537
    7d94:	00008678 	rdprs	zero,zero,537
    7d98:	000084a0 	cmpeqi	zero,zero,530
    7d9c:	00008678 	rdprs	zero,zero,537
    7da0:	00008678 	rdprs	zero,zero,537
    7da4:	00008510 	cmplti	zero,zero,532
    7da8:	00008678 	rdprs	zero,zero,537
    7dac:	00008678 	rdprs	zero,zero,537
    7db0:	00008678 	rdprs	zero,zero,537
    7db4:	00008678 	rdprs	zero,zero,537
    7db8:	00008678 	rdprs	zero,zero,537
    7dbc:	00008678 	rdprs	zero,zero,537
    7dc0:	00008678 	rdprs	zero,zero,537
    7dc4:	00008678 	rdprs	zero,zero,537
    7dc8:	00008678 	rdprs	zero,zero,537
    7dcc:	00008678 	rdprs	zero,zero,537
    7dd0:	000082bc 	xorhi	zero,zero,522
    7dd4:	000082e8 	cmpgeui	zero,zero,523
    7dd8:	00008678 	rdprs	zero,zero,537
    7ddc:	00008678 	rdprs	zero,zero,537
    7de0:	00008678 	rdprs	zero,zero,537
    7de4:	00008620 	cmpeqi	zero,zero,536
    7de8:	000082e8 	cmpgeui	zero,zero,523
    7dec:	00008678 	rdprs	zero,zero,537
    7df0:	00008678 	rdprs	zero,zero,537
    7df4:	0000817c 	xorhi	zero,zero,517
    7df8:	00008678 	rdprs	zero,zero,537
    7dfc:	0000818c 	andi	zero,zero,518
    7e00:	000081c8 	cmpgei	zero,zero,519
    7e04:	00007ec4 	movi	zero,507
    7e08:	00008170 	cmpltui	zero,zero,517
    7e0c:	00008678 	rdprs	zero,zero,537
    7e10:	0000854c 	andi	zero,zero,533
    7e14:	00008678 	rdprs	zero,zero,537
    7e18:	000085a4 	muli	zero,zero,534
    7e1c:	00008678 	rdprs	zero,zero,537
    7e20:	00008678 	rdprs	zero,zero,537
    7e24:	00008268 	cmpgeui	zero,zero,521
    7e28:	42000204 	addi	r8,r8,8
    7e2c:	da802317 	ldw	r10,140(sp)
    7e30:	5455883a 	add	r10,r10,r17
    7e34:	da802315 	stw	r10,140(sp)
    7e38:	003f8b06 	br	7c68 <___vfiprintf_internal_r+0x144>
    7e3c:	d9002017 	ldw	r4,128(sp)
    7e40:	a00b883a 	mov	r5,r20
    7e44:	00027e00 	call	27e0 <__swsetup_r>
    7e48:	1003b11e 	bne	r2,zero,8d10 <___vfiprintf_internal_r+0x11ec>
    7e4c:	a080030b 	ldhu	r2,12(r20)
    7e50:	00c00284 	movi	r3,10
    7e54:	1080068c 	andi	r2,r2,26
    7e58:	10ff541e 	bne	r2,r3,7bac <___vfiprintf_internal_r+0x88>
    7e5c:	a080038f 	ldh	r2,14(r20)
    7e60:	103f5216 	blt	r2,zero,7bac <___vfiprintf_internal_r+0x88>
    7e64:	d9c02217 	ldw	r7,136(sp)
    7e68:	d9002017 	ldw	r4,128(sp)
    7e6c:	e00d883a 	mov	r6,fp
    7e70:	a00b883a 	mov	r5,r20
    7e74:	0008f9c0 	call	8f9c <__sbprintf>
    7e78:	dfc03617 	ldw	ra,216(sp)
    7e7c:	df003517 	ldw	fp,212(sp)
    7e80:	ddc03417 	ldw	r23,208(sp)
    7e84:	dd803317 	ldw	r22,204(sp)
    7e88:	dd403217 	ldw	r21,200(sp)
    7e8c:	dd003117 	ldw	r20,196(sp)
    7e90:	dcc03017 	ldw	r19,192(sp)
    7e94:	dc802f17 	ldw	r18,188(sp)
    7e98:	dc402e17 	ldw	r17,184(sp)
    7e9c:	dc002d17 	ldw	r16,180(sp)
    7ea0:	dec03704 	addi	sp,sp,220
    7ea4:	f800283a 	ret
    7ea8:	00047b40 	call	47b4 <__sinit>
    7eac:	003f2f06 	br	7b6c <___vfiprintf_internal_r+0x48>
    7eb0:	0463c83a 	sub	r17,zero,r17
    7eb4:	d8802215 	stw	r2,136(sp)
    7eb8:	a5000114 	ori	r20,r20,4
    7ebc:	80c00007 	ldb	r3,0(r16)
    7ec0:	003f7706 	br	7ca0 <___vfiprintf_internal_r+0x17c>
    7ec4:	00800c04 	movi	r2,48
    7ec8:	da802217 	ldw	r10,136(sp)
    7ecc:	d8801d05 	stb	r2,116(sp)
    7ed0:	00801e04 	movi	r2,120
    7ed4:	d8801d45 	stb	r2,117(sp)
    7ed8:	d8001d85 	stb	zero,118(sp)
    7edc:	50c00104 	addi	r3,r10,4
    7ee0:	54800017 	ldw	r18,0(r10)
    7ee4:	0027883a 	mov	r19,zero
    7ee8:	a0800094 	ori	r2,r20,2
    7eec:	48030b16 	blt	r9,zero,8b1c <___vfiprintf_internal_r+0xff8>
    7ef0:	00bfdfc4 	movi	r2,-129
    7ef4:	a096703a 	and	r11,r20,r2
    7ef8:	d8c02215 	stw	r3,136(sp)
    7efc:	5d000094 	ori	r20,r11,2
    7f00:	90032b1e 	bne	r18,zero,8bb0 <___vfiprintf_internal_r+0x108c>
    7f04:	00800074 	movhi	r2,1
    7f08:	10be6004 	addi	r2,r2,-1664
    7f0c:	d8802615 	stw	r2,152(sp)
    7f10:	0039883a 	mov	fp,zero
    7f14:	48017b1e 	bne	r9,zero,8504 <___vfiprintf_internal_r+0x9e0>
    7f18:	0013883a 	mov	r9,zero
    7f1c:	0027883a 	mov	r19,zero
    7f20:	dd401a04 	addi	r21,sp,104
    7f24:	4825883a 	mov	r18,r9
    7f28:	4cc0010e 	bge	r9,r19,7f30 <___vfiprintf_internal_r+0x40c>
    7f2c:	9825883a 	mov	r18,r19
    7f30:	e7003fcc 	andi	fp,fp,255
    7f34:	e700201c 	xori	fp,fp,128
    7f38:	e73fe004 	addi	fp,fp,-128
    7f3c:	e0000126 	beq	fp,zero,7f44 <___vfiprintf_internal_r+0x420>
    7f40:	94800044 	addi	r18,r18,1
    7f44:	a380008c 	andi	r14,r20,2
    7f48:	70000126 	beq	r14,zero,7f50 <___vfiprintf_internal_r+0x42c>
    7f4c:	94800084 	addi	r18,r18,2
    7f50:	a700210c 	andi	fp,r20,132
    7f54:	e001df1e 	bne	fp,zero,86d4 <___vfiprintf_internal_r+0xbb0>
    7f58:	8c87c83a 	sub	r3,r17,r18
    7f5c:	00c1dd0e 	bge	zero,r3,86d4 <___vfiprintf_internal_r+0xbb0>
    7f60:	01c00404 	movi	r7,16
    7f64:	d8801c17 	ldw	r2,112(sp)
    7f68:	38c3ad0e 	bge	r7,r3,8e20 <___vfiprintf_internal_r+0x12fc>
    7f6c:	02800074 	movhi	r10,1
    7f70:	52bec504 	addi	r10,r10,-1260
    7f74:	dc002915 	stw	r16,164(sp)
    7f78:	d9801b17 	ldw	r6,108(sp)
    7f7c:	da802415 	stw	r10,144(sp)
    7f80:	03c001c4 	movi	r15,7
    7f84:	da402515 	stw	r9,148(sp)
    7f88:	db802815 	stw	r14,160(sp)
    7f8c:	1821883a 	mov	r16,r3
    7f90:	00000506 	br	7fa8 <___vfiprintf_internal_r+0x484>
    7f94:	31400084 	addi	r5,r6,2
    7f98:	42000204 	addi	r8,r8,8
    7f9c:	200d883a 	mov	r6,r4
    7fa0:	843ffc04 	addi	r16,r16,-16
    7fa4:	3c000d0e 	bge	r7,r16,7fdc <___vfiprintf_internal_r+0x4b8>
    7fa8:	10800404 	addi	r2,r2,16
    7fac:	31000044 	addi	r4,r6,1
    7fb0:	45800015 	stw	r22,0(r8)
    7fb4:	41c00115 	stw	r7,4(r8)
    7fb8:	d8801c15 	stw	r2,112(sp)
    7fbc:	d9001b15 	stw	r4,108(sp)
    7fc0:	793ff40e 	bge	r15,r4,7f94 <___vfiprintf_internal_r+0x470>
    7fc4:	1001b51e 	bne	r2,zero,869c <___vfiprintf_internal_r+0xb78>
    7fc8:	843ffc04 	addi	r16,r16,-16
    7fcc:	000d883a 	mov	r6,zero
    7fd0:	01400044 	movi	r5,1
    7fd4:	d811883a 	mov	r8,sp
    7fd8:	3c3ff316 	blt	r7,r16,7fa8 <___vfiprintf_internal_r+0x484>
    7fdc:	8007883a 	mov	r3,r16
    7fe0:	da402517 	ldw	r9,148(sp)
    7fe4:	db802817 	ldw	r14,160(sp)
    7fe8:	dc002917 	ldw	r16,164(sp)
    7fec:	da802417 	ldw	r10,144(sp)
    7ff0:	1885883a 	add	r2,r3,r2
    7ff4:	40c00115 	stw	r3,4(r8)
    7ff8:	42800015 	stw	r10,0(r8)
    7ffc:	d8801c15 	stw	r2,112(sp)
    8000:	d9401b15 	stw	r5,108(sp)
    8004:	00c001c4 	movi	r3,7
    8008:	19426016 	blt	r3,r5,898c <___vfiprintf_internal_r+0xe68>
    800c:	d8c01d87 	ldb	r3,118(sp)
    8010:	42000204 	addi	r8,r8,8
    8014:	29000044 	addi	r4,r5,1
    8018:	1801b31e 	bne	r3,zero,86e8 <___vfiprintf_internal_r+0xbc4>
    801c:	7001c026 	beq	r14,zero,8720 <___vfiprintf_internal_r+0xbfc>
    8020:	d8c01d04 	addi	r3,sp,116
    8024:	10800084 	addi	r2,r2,2
    8028:	40c00015 	stw	r3,0(r8)
    802c:	00c00084 	movi	r3,2
    8030:	40c00115 	stw	r3,4(r8)
    8034:	d8801c15 	stw	r2,112(sp)
    8038:	d9001b15 	stw	r4,108(sp)
    803c:	00c001c4 	movi	r3,7
    8040:	1902650e 	bge	r3,r4,89d8 <___vfiprintf_internal_r+0xeb4>
    8044:	10029a1e 	bne	r2,zero,8ab0 <___vfiprintf_internal_r+0xf8c>
    8048:	00c02004 	movi	r3,128
    804c:	01000044 	movi	r4,1
    8050:	000b883a 	mov	r5,zero
    8054:	d811883a 	mov	r8,sp
    8058:	e0c1b31e 	bne	fp,r3,8728 <___vfiprintf_internal_r+0xc04>
    805c:	8cb9c83a 	sub	fp,r17,r18
    8060:	0701b10e 	bge	zero,fp,8728 <___vfiprintf_internal_r+0xc04>
    8064:	01c00404 	movi	r7,16
    8068:	3f03890e 	bge	r7,fp,8e90 <___vfiprintf_internal_r+0x136c>
    806c:	00c00074 	movhi	r3,1
    8070:	18fec104 	addi	r3,r3,-1276
    8074:	d8c02415 	stw	r3,144(sp)
    8078:	8007883a 	mov	r3,r16
    807c:	034001c4 	movi	r13,7
    8080:	e021883a 	mov	r16,fp
    8084:	da402515 	stw	r9,148(sp)
    8088:	1839883a 	mov	fp,r3
    808c:	00000506 	br	80a4 <___vfiprintf_internal_r+0x580>
    8090:	29800084 	addi	r6,r5,2
    8094:	42000204 	addi	r8,r8,8
    8098:	180b883a 	mov	r5,r3
    809c:	843ffc04 	addi	r16,r16,-16
    80a0:	3c000d0e 	bge	r7,r16,80d8 <___vfiprintf_internal_r+0x5b4>
    80a4:	10800404 	addi	r2,r2,16
    80a8:	28c00044 	addi	r3,r5,1
    80ac:	45c00015 	stw	r23,0(r8)
    80b0:	41c00115 	stw	r7,4(r8)
    80b4:	d8801c15 	stw	r2,112(sp)
    80b8:	d8c01b15 	stw	r3,108(sp)
    80bc:	68fff40e 	bge	r13,r3,8090 <___vfiprintf_internal_r+0x56c>
    80c0:	1002241e 	bne	r2,zero,8954 <___vfiprintf_internal_r+0xe30>
    80c4:	843ffc04 	addi	r16,r16,-16
    80c8:	01800044 	movi	r6,1
    80cc:	000b883a 	mov	r5,zero
    80d0:	d811883a 	mov	r8,sp
    80d4:	3c3ff316 	blt	r7,r16,80a4 <___vfiprintf_internal_r+0x580>
    80d8:	da402517 	ldw	r9,148(sp)
    80dc:	e007883a 	mov	r3,fp
    80e0:	8039883a 	mov	fp,r16
    80e4:	1821883a 	mov	r16,r3
    80e8:	d8c02417 	ldw	r3,144(sp)
    80ec:	1705883a 	add	r2,r2,fp
    80f0:	47000115 	stw	fp,4(r8)
    80f4:	40c00015 	stw	r3,0(r8)
    80f8:	d8801c15 	stw	r2,112(sp)
    80fc:	d9801b15 	stw	r6,108(sp)
    8100:	00c001c4 	movi	r3,7
    8104:	19827616 	blt	r3,r6,8ae0 <___vfiprintf_internal_r+0xfbc>
    8108:	4cf9c83a 	sub	fp,r9,r19
    810c:	42000204 	addi	r8,r8,8
    8110:	31000044 	addi	r4,r6,1
    8114:	300b883a 	mov	r5,r6
    8118:	07018516 	blt	zero,fp,8730 <___vfiprintf_internal_r+0xc0c>
    811c:	9885883a 	add	r2,r19,r2
    8120:	45400015 	stw	r21,0(r8)
    8124:	44c00115 	stw	r19,4(r8)
    8128:	d8801c15 	stw	r2,112(sp)
    812c:	d9001b15 	stw	r4,108(sp)
    8130:	00c001c4 	movi	r3,7
    8134:	1901dd0e 	bge	r3,r4,88ac <___vfiprintf_internal_r+0xd88>
    8138:	1002401e 	bne	r2,zero,8a3c <___vfiprintf_internal_r+0xf18>
    813c:	d8001b15 	stw	zero,108(sp)
    8140:	a2c0010c 	andi	r11,r20,4
    8144:	58000226 	beq	r11,zero,8150 <___vfiprintf_internal_r+0x62c>
    8148:	8ca7c83a 	sub	r19,r17,r18
    814c:	04c2f216 	blt	zero,r19,8d18 <___vfiprintf_internal_r+0x11f4>
    8150:	8c80010e 	bge	r17,r18,8158 <___vfiprintf_internal_r+0x634>
    8154:	9023883a 	mov	r17,r18
    8158:	da802317 	ldw	r10,140(sp)
    815c:	5455883a 	add	r10,r10,r17
    8160:	da802315 	stw	r10,140(sp)
    8164:	d8001b15 	stw	zero,108(sp)
    8168:	d811883a 	mov	r8,sp
    816c:	003ea206 	br	7bf8 <___vfiprintf_internal_r+0xd4>
    8170:	a5000814 	ori	r20,r20,32
    8174:	80c00007 	ldb	r3,0(r16)
    8178:	003ec906 	br	7ca0 <___vfiprintf_internal_r+0x17c>
    817c:	80c00007 	ldb	r3,0(r16)
    8180:	1b030926 	beq	r3,r12,8da8 <___vfiprintf_internal_r+0x1284>
    8184:	a5000414 	ori	r20,r20,16
    8188:	003ec506 	br	7ca0 <___vfiprintf_internal_r+0x17c>
    818c:	21003fcc 	andi	r4,r4,255
    8190:	20035e1e 	bne	r4,zero,8f0c <___vfiprintf_internal_r+0x13e8>
    8194:	a080080c 	andi	r2,r20,32
    8198:	1002a526 	beq	r2,zero,8c30 <___vfiprintf_internal_r+0x110c>
    819c:	da802217 	ldw	r10,136(sp)
    81a0:	50800017 	ldw	r2,0(r10)
    81a4:	da802317 	ldw	r10,140(sp)
    81a8:	5007d7fa 	srai	r3,r10,31
    81ac:	da802217 	ldw	r10,136(sp)
    81b0:	10c00115 	stw	r3,4(r2)
    81b4:	52800104 	addi	r10,r10,4
    81b8:	da802215 	stw	r10,136(sp)
    81bc:	da802317 	ldw	r10,140(sp)
    81c0:	12800015 	stw	r10,0(r2)
    81c4:	003e8c06 	br	7bf8 <___vfiprintf_internal_r+0xd4>
    81c8:	21003fcc 	andi	r4,r4,255
    81cc:	2003511e 	bne	r4,zero,8f14 <___vfiprintf_internal_r+0x13f0>
    81d0:	a080080c 	andi	r2,r20,32
    81d4:	1000a126 	beq	r2,zero,845c <___vfiprintf_internal_r+0x938>
    81d8:	da802217 	ldw	r10,136(sp)
    81dc:	d8001d85 	stb	zero,118(sp)
    81e0:	50800204 	addi	r2,r10,8
    81e4:	54800017 	ldw	r18,0(r10)
    81e8:	54c00117 	ldw	r19,4(r10)
    81ec:	4802b416 	blt	r9,zero,8cc0 <___vfiprintf_internal_r+0x119c>
    81f0:	013fdfc4 	movi	r4,-129
    81f4:	94c6b03a 	or	r3,r18,r19
    81f8:	d8802215 	stw	r2,136(sp)
    81fc:	a128703a 	and	r20,r20,r4
    8200:	1800a226 	beq	r3,zero,848c <___vfiprintf_internal_r+0x968>
    8204:	0039883a 	mov	fp,zero
    8208:	dd401a04 	addi	r21,sp,104
    820c:	9006d0fa 	srli	r3,r18,3
    8210:	9808977a 	slli	r4,r19,29
    8214:	9826d0fa 	srli	r19,r19,3
    8218:	948001cc 	andi	r18,r18,7
    821c:	90800c04 	addi	r2,r18,48
    8220:	ad7fffc4 	addi	r21,r21,-1
    8224:	20e4b03a 	or	r18,r4,r3
    8228:	a8800005 	stb	r2,0(r21)
    822c:	94c6b03a 	or	r3,r18,r19
    8230:	183ff61e 	bne	r3,zero,820c <___vfiprintf_internal_r+0x6e8>
    8234:	a0c0004c 	andi	r3,r20,1
    8238:	18005926 	beq	r3,zero,83a0 <___vfiprintf_internal_r+0x87c>
    823c:	10803fcc 	andi	r2,r2,255
    8240:	1080201c 	xori	r2,r2,128
    8244:	10bfe004 	addi	r2,r2,-128
    8248:	00c00c04 	movi	r3,48
    824c:	10c05426 	beq	r2,r3,83a0 <___vfiprintf_internal_r+0x87c>
    8250:	da801e17 	ldw	r10,120(sp)
    8254:	a8bfffc4 	addi	r2,r21,-1
    8258:	a8ffffc5 	stb	r3,-1(r21)
    825c:	50a7c83a 	sub	r19,r10,r2
    8260:	102b883a 	mov	r21,r2
    8264:	003f2f06 	br	7f24 <___vfiprintf_internal_r+0x400>
    8268:	21003fcc 	andi	r4,r4,255
    826c:	2003421e 	bne	r4,zero,8f78 <___vfiprintf_internal_r+0x1454>
    8270:	00800074 	movhi	r2,1
    8274:	10be6004 	addi	r2,r2,-1664
    8278:	d8802615 	stw	r2,152(sp)
    827c:	a080080c 	andi	r2,r20,32
    8280:	1000aa26 	beq	r2,zero,852c <___vfiprintf_internal_r+0xa08>
    8284:	da802217 	ldw	r10,136(sp)
    8288:	54800017 	ldw	r18,0(r10)
    828c:	54c00117 	ldw	r19,4(r10)
    8290:	52800204 	addi	r10,r10,8
    8294:	da802215 	stw	r10,136(sp)
    8298:	a080004c 	andi	r2,r20,1
    829c:	1001d226 	beq	r2,zero,89e8 <___vfiprintf_internal_r+0xec4>
    82a0:	94c4b03a 	or	r2,r18,r19
    82a4:	1002351e 	bne	r2,zero,8b7c <___vfiprintf_internal_r+0x1058>
    82a8:	d8001d85 	stb	zero,118(sp)
    82ac:	48022216 	blt	r9,zero,8b38 <___vfiprintf_internal_r+0x1014>
    82b0:	00bfdfc4 	movi	r2,-129
    82b4:	a0a8703a 	and	r20,r20,r2
    82b8:	003f1506 	br	7f10 <___vfiprintf_internal_r+0x3ec>
    82bc:	da802217 	ldw	r10,136(sp)
    82c0:	04800044 	movi	r18,1
    82c4:	d8001d85 	stb	zero,118(sp)
    82c8:	50800017 	ldw	r2,0(r10)
    82cc:	52800104 	addi	r10,r10,4
    82d0:	da802215 	stw	r10,136(sp)
    82d4:	d8801005 	stb	r2,64(sp)
    82d8:	9027883a 	mov	r19,r18
    82dc:	dd401004 	addi	r21,sp,64
    82e0:	0013883a 	mov	r9,zero
    82e4:	003f1706 	br	7f44 <___vfiprintf_internal_r+0x420>
    82e8:	21003fcc 	andi	r4,r4,255
    82ec:	2003201e 	bne	r4,zero,8f70 <___vfiprintf_internal_r+0x144c>
    82f0:	a080080c 	andi	r2,r20,32
    82f4:	10004b26 	beq	r2,zero,8424 <___vfiprintf_internal_r+0x900>
    82f8:	da802217 	ldw	r10,136(sp)
    82fc:	50800117 	ldw	r2,4(r10)
    8300:	54800017 	ldw	r18,0(r10)
    8304:	52800204 	addi	r10,r10,8
    8308:	da802215 	stw	r10,136(sp)
    830c:	1027883a 	mov	r19,r2
    8310:	10022c16 	blt	r2,zero,8bc4 <___vfiprintf_internal_r+0x10a0>
    8314:	df001d83 	ldbu	fp,118(sp)
    8318:	48007216 	blt	r9,zero,84e4 <___vfiprintf_internal_r+0x9c0>
    831c:	00ffdfc4 	movi	r3,-129
    8320:	94c4b03a 	or	r2,r18,r19
    8324:	a0e8703a 	and	r20,r20,r3
    8328:	1000cc26 	beq	r2,zero,865c <___vfiprintf_internal_r+0xb38>
    832c:	98021026 	beq	r19,zero,8b70 <___vfiprintf_internal_r+0x104c>
    8330:	dc402415 	stw	r17,144(sp)
    8334:	dc002515 	stw	r16,148(sp)
    8338:	9823883a 	mov	r17,r19
    833c:	9021883a 	mov	r16,r18
    8340:	dd401a04 	addi	r21,sp,104
    8344:	4825883a 	mov	r18,r9
    8348:	4027883a 	mov	r19,r8
    834c:	8009883a 	mov	r4,r16
    8350:	880b883a 	mov	r5,r17
    8354:	01800284 	movi	r6,10
    8358:	000f883a 	mov	r7,zero
    835c:	0009f040 	call	9f04 <__umoddi3>
    8360:	10800c04 	addi	r2,r2,48
    8364:	ad7fffc4 	addi	r21,r21,-1
    8368:	8009883a 	mov	r4,r16
    836c:	880b883a 	mov	r5,r17
    8370:	a8800005 	stb	r2,0(r21)
    8374:	01800284 	movi	r6,10
    8378:	000f883a 	mov	r7,zero
    837c:	000998c0 	call	998c <__udivdi3>
    8380:	1021883a 	mov	r16,r2
    8384:	10c4b03a 	or	r2,r2,r3
    8388:	1823883a 	mov	r17,r3
    838c:	103fef1e 	bne	r2,zero,834c <___vfiprintf_internal_r+0x828>
    8390:	dc402417 	ldw	r17,144(sp)
    8394:	dc002517 	ldw	r16,148(sp)
    8398:	9013883a 	mov	r9,r18
    839c:	9811883a 	mov	r8,r19
    83a0:	da801e17 	ldw	r10,120(sp)
    83a4:	5567c83a 	sub	r19,r10,r21
    83a8:	003ede06 	br	7f24 <___vfiprintf_internal_r+0x400>
    83ac:	38803fcc 	andi	r2,r7,255
    83b0:	1080201c 	xori	r2,r2,128
    83b4:	10bfe004 	addi	r2,r2,-128
    83b8:	1002371e 	bne	r2,zero,8c98 <___vfiprintf_internal_r+0x1174>
    83bc:	01000044 	movi	r4,1
    83c0:	01c00804 	movi	r7,32
    83c4:	80c00007 	ldb	r3,0(r16)
    83c8:	003e3506 	br	7ca0 <___vfiprintf_internal_r+0x17c>
    83cc:	a5000054 	ori	r20,r20,1
    83d0:	80c00007 	ldb	r3,0(r16)
    83d4:	003e3206 	br	7ca0 <___vfiprintf_internal_r+0x17c>
    83d8:	a5002014 	ori	r20,r20,128
    83dc:	80c00007 	ldb	r3,0(r16)
    83e0:	003e2f06 	br	7ca0 <___vfiprintf_internal_r+0x17c>
    83e4:	8015883a 	mov	r10,r16
    83e8:	0023883a 	mov	r17,zero
    83ec:	18bff404 	addi	r2,r3,-48
    83f0:	50c00007 	ldb	r3,0(r10)
    83f4:	8c4002a4 	muli	r17,r17,10
    83f8:	84000044 	addi	r16,r16,1
    83fc:	8015883a 	mov	r10,r16
    8400:	1463883a 	add	r17,r2,r17
    8404:	18bff404 	addi	r2,r3,-48
    8408:	30bff92e 	bgeu	r6,r2,83f0 <___vfiprintf_internal_r+0x8cc>
    840c:	003e2506 	br	7ca4 <___vfiprintf_internal_r+0x180>
    8410:	21003fcc 	andi	r4,r4,255
    8414:	2002d41e 	bne	r4,zero,8f68 <___vfiprintf_internal_r+0x1444>
    8418:	a5000414 	ori	r20,r20,16
    841c:	a080080c 	andi	r2,r20,32
    8420:	103fb51e 	bne	r2,zero,82f8 <___vfiprintf_internal_r+0x7d4>
    8424:	a080040c 	andi	r2,r20,16
    8428:	1001f826 	beq	r2,zero,8c0c <___vfiprintf_internal_r+0x10e8>
    842c:	da802217 	ldw	r10,136(sp)
    8430:	54800017 	ldw	r18,0(r10)
    8434:	52800104 	addi	r10,r10,4
    8438:	da802215 	stw	r10,136(sp)
    843c:	9027d7fa 	srai	r19,r18,31
    8440:	9805883a 	mov	r2,r19
    8444:	003fb206 	br	8310 <___vfiprintf_internal_r+0x7ec>
    8448:	21003fcc 	andi	r4,r4,255
    844c:	2002c41e 	bne	r4,zero,8f60 <___vfiprintf_internal_r+0x143c>
    8450:	a5000414 	ori	r20,r20,16
    8454:	a080080c 	andi	r2,r20,32
    8458:	103f5f1e 	bne	r2,zero,81d8 <___vfiprintf_internal_r+0x6b4>
    845c:	a080040c 	andi	r2,r20,16
    8460:	10020f26 	beq	r2,zero,8ca0 <___vfiprintf_internal_r+0x117c>
    8464:	da802217 	ldw	r10,136(sp)
    8468:	d8001d85 	stb	zero,118(sp)
    846c:	0027883a 	mov	r19,zero
    8470:	50800104 	addi	r2,r10,4
    8474:	54800017 	ldw	r18,0(r10)
    8478:	48021116 	blt	r9,zero,8cc0 <___vfiprintf_internal_r+0x119c>
    847c:	00ffdfc4 	movi	r3,-129
    8480:	d8802215 	stw	r2,136(sp)
    8484:	a0e8703a 	and	r20,r20,r3
    8488:	903f5e1e 	bne	r18,zero,8204 <___vfiprintf_internal_r+0x6e0>
    848c:	0039883a 	mov	fp,zero
    8490:	4802a626 	beq	r9,zero,8f2c <___vfiprintf_internal_r+0x1408>
    8494:	0025883a 	mov	r18,zero
    8498:	0027883a 	mov	r19,zero
    849c:	003f5a06 	br	8208 <___vfiprintf_internal_r+0x6e4>
    84a0:	21003fcc 	andi	r4,r4,255
    84a4:	20029f1e 	bne	r4,zero,8f24 <___vfiprintf_internal_r+0x1400>
    84a8:	a5000414 	ori	r20,r20,16
    84ac:	a080080c 	andi	r2,r20,32
    84b0:	10005e1e 	bne	r2,zero,862c <___vfiprintf_internal_r+0xb08>
    84b4:	a080040c 	andi	r2,r20,16
    84b8:	1001a21e 	bne	r2,zero,8b44 <___vfiprintf_internal_r+0x1020>
    84bc:	a080100c 	andi	r2,r20,64
    84c0:	d8001d85 	stb	zero,118(sp)
    84c4:	da802217 	ldw	r10,136(sp)
    84c8:	1002231e 	bne	r2,zero,8d58 <___vfiprintf_internal_r+0x1234>
    84cc:	50800104 	addi	r2,r10,4
    84d0:	54800017 	ldw	r18,0(r10)
    84d4:	0027883a 	mov	r19,zero
    84d8:	4801a00e 	bge	r9,zero,8b5c <___vfiprintf_internal_r+0x1038>
    84dc:	d8802215 	stw	r2,136(sp)
    84e0:	0039883a 	mov	fp,zero
    84e4:	94c4b03a 	or	r2,r18,r19
    84e8:	103f901e 	bne	r2,zero,832c <___vfiprintf_internal_r+0x808>
    84ec:	00800044 	movi	r2,1
    84f0:	10803fcc 	andi	r2,r2,255
    84f4:	00c00044 	movi	r3,1
    84f8:	10c05926 	beq	r2,r3,8660 <___vfiprintf_internal_r+0xb3c>
    84fc:	00c00084 	movi	r3,2
    8500:	10ffe41e 	bne	r2,r3,8494 <___vfiprintf_internal_r+0x970>
    8504:	0025883a 	mov	r18,zero
    8508:	0027883a 	mov	r19,zero
    850c:	00013d06 	br	8a04 <___vfiprintf_internal_r+0xee0>
    8510:	21003fcc 	andi	r4,r4,255
    8514:	2002811e 	bne	r4,zero,8f1c <___vfiprintf_internal_r+0x13f8>
    8518:	00800074 	movhi	r2,1
    851c:	10be5b04 	addi	r2,r2,-1684
    8520:	d8802615 	stw	r2,152(sp)
    8524:	a080080c 	andi	r2,r20,32
    8528:	103f561e 	bne	r2,zero,8284 <___vfiprintf_internal_r+0x760>
    852c:	a080040c 	andi	r2,r20,16
    8530:	1001d126 	beq	r2,zero,8c78 <___vfiprintf_internal_r+0x1154>
    8534:	da802217 	ldw	r10,136(sp)
    8538:	0027883a 	mov	r19,zero
    853c:	54800017 	ldw	r18,0(r10)
    8540:	52800104 	addi	r10,r10,4
    8544:	da802215 	stw	r10,136(sp)
    8548:	003f5306 	br	8298 <___vfiprintf_internal_r+0x774>
    854c:	da802217 	ldw	r10,136(sp)
    8550:	d8001d85 	stb	zero,118(sp)
    8554:	55400017 	ldw	r21,0(r10)
    8558:	50c00104 	addi	r3,r10,4
    855c:	a8024226 	beq	r21,zero,8e68 <___vfiprintf_internal_r+0x1344>
    8560:	48021816 	blt	r9,zero,8dc4 <___vfiprintf_internal_r+0x12a0>
    8564:	480d883a 	mov	r6,r9
    8568:	000b883a 	mov	r5,zero
    856c:	a809883a 	mov	r4,r21
    8570:	d8c02a15 	stw	r3,168(sp)
    8574:	da002b15 	stw	r8,172(sp)
    8578:	da402c15 	stw	r9,176(sp)
    857c:	0005d200 	call	5d20 <memchr>
    8580:	d8c02a17 	ldw	r3,168(sp)
    8584:	da002b17 	ldw	r8,172(sp)
    8588:	da402c17 	ldw	r9,176(sp)
    858c:	10024826 	beq	r2,zero,8eb0 <___vfiprintf_internal_r+0x138c>
    8590:	1567c83a 	sub	r19,r2,r21
    8594:	df001d83 	ldbu	fp,118(sp)
    8598:	d8c02215 	stw	r3,136(sp)
    859c:	0013883a 	mov	r9,zero
    85a0:	003e6006 	br	7f24 <___vfiprintf_internal_r+0x400>
    85a4:	21003fcc 	andi	r4,r4,255
    85a8:	203fc026 	beq	r4,zero,84ac <___vfiprintf_internal_r+0x988>
    85ac:	d9c01d85 	stb	r7,118(sp)
    85b0:	003fbe06 	br	84ac <___vfiprintf_internal_r+0x988>
    85b4:	da802217 	ldw	r10,136(sp)
    85b8:	54400017 	ldw	r17,0(r10)
    85bc:	50800104 	addi	r2,r10,4
    85c0:	883e3b16 	blt	r17,zero,7eb0 <___vfiprintf_internal_r+0x38c>
    85c4:	d8802215 	stw	r2,136(sp)
    85c8:	80c00007 	ldb	r3,0(r16)
    85cc:	003db406 	br	7ca0 <___vfiprintf_internal_r+0x17c>
    85d0:	01000044 	movi	r4,1
    85d4:	01c00ac4 	movi	r7,43
    85d8:	80c00007 	ldb	r3,0(r16)
    85dc:	003db006 	br	7ca0 <___vfiprintf_internal_r+0x17c>
    85e0:	80c00007 	ldb	r3,0(r16)
    85e4:	82800044 	addi	r10,r16,1
    85e8:	1b423c26 	beq	r3,r13,8edc <___vfiprintf_internal_r+0x13b8>
    85ec:	18bff404 	addi	r2,r3,-48
    85f0:	0013883a 	mov	r9,zero
    85f4:	30822b36 	bltu	r6,r2,8ea4 <___vfiprintf_internal_r+0x1380>
    85f8:	50c00007 	ldb	r3,0(r10)
    85fc:	4a4002a4 	muli	r9,r9,10
    8600:	54000044 	addi	r16,r10,1
    8604:	8015883a 	mov	r10,r16
    8608:	4893883a 	add	r9,r9,r2
    860c:	18bff404 	addi	r2,r3,-48
    8610:	30bff92e 	bgeu	r6,r2,85f8 <___vfiprintf_internal_r+0xad4>
    8614:	483da30e 	bge	r9,zero,7ca4 <___vfiprintf_internal_r+0x180>
    8618:	027fffc4 	movi	r9,-1
    861c:	003da106 	br	7ca4 <___vfiprintf_internal_r+0x180>
    8620:	a5001014 	ori	r20,r20,64
    8624:	80c00007 	ldb	r3,0(r16)
    8628:	003d9d06 	br	7ca0 <___vfiprintf_internal_r+0x17c>
    862c:	da802217 	ldw	r10,136(sp)
    8630:	d8001d85 	stb	zero,118(sp)
    8634:	50c00204 	addi	r3,r10,8
    8638:	54800017 	ldw	r18,0(r10)
    863c:	54c00117 	ldw	r19,4(r10)
    8640:	4801ca16 	blt	r9,zero,8d6c <___vfiprintf_internal_r+0x1248>
    8644:	013fdfc4 	movi	r4,-129
    8648:	94c4b03a 	or	r2,r18,r19
    864c:	d8c02215 	stw	r3,136(sp)
    8650:	a128703a 	and	r20,r20,r4
    8654:	0039883a 	mov	fp,zero
    8658:	103f341e 	bne	r2,zero,832c <___vfiprintf_internal_r+0x808>
    865c:	483e2e26 	beq	r9,zero,7f18 <___vfiprintf_internal_r+0x3f4>
    8660:	0025883a 	mov	r18,zero
    8664:	94800c04 	addi	r18,r18,48
    8668:	dc8019c5 	stb	r18,103(sp)
    866c:	dcc02717 	ldw	r19,156(sp)
    8670:	dd4019c4 	addi	r21,sp,103
    8674:	003e2b06 	br	7f24 <___vfiprintf_internal_r+0x400>
    8678:	21003fcc 	andi	r4,r4,255
    867c:	2002361e 	bne	r4,zero,8f58 <___vfiprintf_internal_r+0x1434>
    8680:	1801c126 	beq	r3,zero,8d88 <___vfiprintf_internal_r+0x1264>
    8684:	04800044 	movi	r18,1
    8688:	d8c01005 	stb	r3,64(sp)
    868c:	d8001d85 	stb	zero,118(sp)
    8690:	9027883a 	mov	r19,r18
    8694:	dd401004 	addi	r21,sp,64
    8698:	003f1106 	br	82e0 <___vfiprintf_internal_r+0x7bc>
    869c:	d9402117 	ldw	r5,132(sp)
    86a0:	d9002017 	ldw	r4,128(sp)
    86a4:	d9801a04 	addi	r6,sp,104
    86a8:	d9c02b15 	stw	r7,172(sp)
    86ac:	dbc02a15 	stw	r15,168(sp)
    86b0:	0007a100 	call	7a10 <__sprint_r.part.0>
    86b4:	d9c02b17 	ldw	r7,172(sp)
    86b8:	dbc02a17 	ldw	r15,168(sp)
    86bc:	10006d1e 	bne	r2,zero,8874 <___vfiprintf_internal_r+0xd50>
    86c0:	d9801b17 	ldw	r6,108(sp)
    86c4:	d8801c17 	ldw	r2,112(sp)
    86c8:	d811883a 	mov	r8,sp
    86cc:	31400044 	addi	r5,r6,1
    86d0:	003e3306 	br	7fa0 <___vfiprintf_internal_r+0x47c>
    86d4:	d9401b17 	ldw	r5,108(sp)
    86d8:	d8801c17 	ldw	r2,112(sp)
    86dc:	29000044 	addi	r4,r5,1
    86e0:	d8c01d87 	ldb	r3,118(sp)
    86e4:	183e4d26 	beq	r3,zero,801c <___vfiprintf_internal_r+0x4f8>
    86e8:	00c00044 	movi	r3,1
    86ec:	d9401d84 	addi	r5,sp,118
    86f0:	10c5883a 	add	r2,r2,r3
    86f4:	41400015 	stw	r5,0(r8)
    86f8:	40c00115 	stw	r3,4(r8)
    86fc:	d8801c15 	stw	r2,112(sp)
    8700:	d9001b15 	stw	r4,108(sp)
    8704:	014001c4 	movi	r5,7
    8708:	2900a90e 	bge	r5,r4,89b0 <___vfiprintf_internal_r+0xe8c>
    870c:	1000da1e 	bne	r2,zero,8a78 <___vfiprintf_internal_r+0xf54>
    8710:	7000ab1e 	bne	r14,zero,89c0 <___vfiprintf_internal_r+0xe9c>
    8714:	000b883a 	mov	r5,zero
    8718:	1809883a 	mov	r4,r3
    871c:	d811883a 	mov	r8,sp
    8720:	00c02004 	movi	r3,128
    8724:	e0fe4d26 	beq	fp,r3,805c <___vfiprintf_internal_r+0x538>
    8728:	4cf9c83a 	sub	fp,r9,r19
    872c:	073e7b0e 	bge	zero,fp,811c <___vfiprintf_internal_r+0x5f8>
    8730:	01c00404 	movi	r7,16
    8734:	3f01900e 	bge	r7,fp,8d78 <___vfiprintf_internal_r+0x1254>
    8738:	00c00074 	movhi	r3,1
    873c:	18fec104 	addi	r3,r3,-1276
    8740:	d8c02415 	stw	r3,144(sp)
    8744:	034001c4 	movi	r13,7
    8748:	00000506 	br	8760 <___vfiprintf_internal_r+0xc3c>
    874c:	29000084 	addi	r4,r5,2
    8750:	42000204 	addi	r8,r8,8
    8754:	180b883a 	mov	r5,r3
    8758:	e73ffc04 	addi	fp,fp,-16
    875c:	3f000d0e 	bge	r7,fp,8794 <___vfiprintf_internal_r+0xc70>
    8760:	10800404 	addi	r2,r2,16
    8764:	28c00044 	addi	r3,r5,1
    8768:	45c00015 	stw	r23,0(r8)
    876c:	41c00115 	stw	r7,4(r8)
    8770:	d8801c15 	stw	r2,112(sp)
    8774:	d8c01b15 	stw	r3,108(sp)
    8778:	68fff40e 	bge	r13,r3,874c <___vfiprintf_internal_r+0xc28>
    877c:	1000101e 	bne	r2,zero,87c0 <___vfiprintf_internal_r+0xc9c>
    8780:	e73ffc04 	addi	fp,fp,-16
    8784:	01000044 	movi	r4,1
    8788:	000b883a 	mov	r5,zero
    878c:	d811883a 	mov	r8,sp
    8790:	3f3ff316 	blt	r7,fp,8760 <___vfiprintf_internal_r+0xc3c>
    8794:	da802417 	ldw	r10,144(sp)
    8798:	1705883a 	add	r2,r2,fp
    879c:	47000115 	stw	fp,4(r8)
    87a0:	42800015 	stw	r10,0(r8)
    87a4:	d8801c15 	stw	r2,112(sp)
    87a8:	d9001b15 	stw	r4,108(sp)
    87ac:	00c001c4 	movi	r3,7
    87b0:	19003616 	blt	r3,r4,888c <___vfiprintf_internal_r+0xd68>
    87b4:	42000204 	addi	r8,r8,8
    87b8:	21000044 	addi	r4,r4,1
    87bc:	003e5706 	br	811c <___vfiprintf_internal_r+0x5f8>
    87c0:	d9402117 	ldw	r5,132(sp)
    87c4:	d9002017 	ldw	r4,128(sp)
    87c8:	d9801a04 	addi	r6,sp,104
    87cc:	d9c02b15 	stw	r7,172(sp)
    87d0:	db402a15 	stw	r13,168(sp)
    87d4:	0007a100 	call	7a10 <__sprint_r.part.0>
    87d8:	d9c02b17 	ldw	r7,172(sp)
    87dc:	db402a17 	ldw	r13,168(sp)
    87e0:	1000241e 	bne	r2,zero,8874 <___vfiprintf_internal_r+0xd50>
    87e4:	d9401b17 	ldw	r5,108(sp)
    87e8:	d8801c17 	ldw	r2,112(sp)
    87ec:	d811883a 	mov	r8,sp
    87f0:	29000044 	addi	r4,r5,1
    87f4:	003fd806 	br	8758 <___vfiprintf_internal_r+0xc34>
    87f8:	d9401b17 	ldw	r5,108(sp)
    87fc:	00c00074 	movhi	r3,1
    8800:	18fec504 	addi	r3,r3,-1260
    8804:	d8c02415 	stw	r3,144(sp)
    8808:	29400044 	addi	r5,r5,1
    880c:	d8c02417 	ldw	r3,144(sp)
    8810:	14c5883a 	add	r2,r2,r19
    8814:	44c00115 	stw	r19,4(r8)
    8818:	40c00015 	stw	r3,0(r8)
    881c:	d8801c15 	stw	r2,112(sp)
    8820:	d9401b15 	stw	r5,108(sp)
    8824:	00c001c4 	movi	r3,7
    8828:	1940070e 	bge	r3,r5,8848 <___vfiprintf_internal_r+0xd24>
    882c:	103e4826 	beq	r2,zero,8150 <___vfiprintf_internal_r+0x62c>
    8830:	d9402117 	ldw	r5,132(sp)
    8834:	d9002017 	ldw	r4,128(sp)
    8838:	d9801a04 	addi	r6,sp,104
    883c:	0007a100 	call	7a10 <__sprint_r.part.0>
    8840:	10000c1e 	bne	r2,zero,8874 <___vfiprintf_internal_r+0xd50>
    8844:	d8801c17 	ldw	r2,112(sp)
    8848:	8c80010e 	bge	r17,r18,8850 <___vfiprintf_internal_r+0xd2c>
    884c:	9023883a 	mov	r17,r18
    8850:	da802317 	ldw	r10,140(sp)
    8854:	5455883a 	add	r10,r10,r17
    8858:	da802315 	stw	r10,140(sp)
    885c:	103e4126 	beq	r2,zero,8164 <___vfiprintf_internal_r+0x640>
    8860:	d9402117 	ldw	r5,132(sp)
    8864:	d9002017 	ldw	r4,128(sp)
    8868:	d9801a04 	addi	r6,sp,104
    886c:	0007a100 	call	7a10 <__sprint_r.part.0>
    8870:	103e3c26 	beq	r2,zero,8164 <___vfiprintf_internal_r+0x640>
    8874:	dd002117 	ldw	r20,132(sp)
    8878:	a080030b 	ldhu	r2,12(r20)
    887c:	1080100c 	andi	r2,r2,64
    8880:	1001231e 	bne	r2,zero,8d10 <___vfiprintf_internal_r+0x11ec>
    8884:	d8802317 	ldw	r2,140(sp)
    8888:	003d7b06 	br	7e78 <___vfiprintf_internal_r+0x354>
    888c:	1000991e 	bne	r2,zero,8af4 <___vfiprintf_internal_r+0xfd0>
    8890:	00c00044 	movi	r3,1
    8894:	9805883a 	mov	r2,r19
    8898:	dd400015 	stw	r21,0(sp)
    889c:	dcc00115 	stw	r19,4(sp)
    88a0:	dcc01c15 	stw	r19,112(sp)
    88a4:	d8c01b15 	stw	r3,108(sp)
    88a8:	d811883a 	mov	r8,sp
    88ac:	42000204 	addi	r8,r8,8
    88b0:	a2c0010c 	andi	r11,r20,4
    88b4:	583fe426 	beq	r11,zero,8848 <___vfiprintf_internal_r+0xd24>
    88b8:	8ca7c83a 	sub	r19,r17,r18
    88bc:	04ffe20e 	bge	zero,r19,8848 <___vfiprintf_internal_r+0xd24>
    88c0:	01c00404 	movi	r7,16
    88c4:	3cffcc0e 	bge	r7,r19,87f8 <___vfiprintf_internal_r+0xcd4>
    88c8:	02800074 	movhi	r10,1
    88cc:	52bec504 	addi	r10,r10,-1260
    88d0:	d9001b17 	ldw	r4,108(sp)
    88d4:	da802415 	stw	r10,144(sp)
    88d8:	382b883a 	mov	r21,r7
    88dc:	050001c4 	movi	r20,7
    88e0:	df002017 	ldw	fp,128(sp)
    88e4:	00000506 	br	88fc <___vfiprintf_internal_r+0xdd8>
    88e8:	21400084 	addi	r5,r4,2
    88ec:	42000204 	addi	r8,r8,8
    88f0:	1809883a 	mov	r4,r3
    88f4:	9cfffc04 	addi	r19,r19,-16
    88f8:	acffc40e 	bge	r21,r19,880c <___vfiprintf_internal_r+0xce8>
    88fc:	10800404 	addi	r2,r2,16
    8900:	20c00044 	addi	r3,r4,1
    8904:	45800015 	stw	r22,0(r8)
    8908:	45400115 	stw	r21,4(r8)
    890c:	d8801c15 	stw	r2,112(sp)
    8910:	d8c01b15 	stw	r3,108(sp)
    8914:	a0fff40e 	bge	r20,r3,88e8 <___vfiprintf_internal_r+0xdc4>
    8918:	1000041e 	bne	r2,zero,892c <___vfiprintf_internal_r+0xe08>
    891c:	01400044 	movi	r5,1
    8920:	0009883a 	mov	r4,zero
    8924:	d811883a 	mov	r8,sp
    8928:	003ff206 	br	88f4 <___vfiprintf_internal_r+0xdd0>
    892c:	d9402117 	ldw	r5,132(sp)
    8930:	d9801a04 	addi	r6,sp,104
    8934:	e009883a 	mov	r4,fp
    8938:	0007a100 	call	7a10 <__sprint_r.part.0>
    893c:	103fcd1e 	bne	r2,zero,8874 <___vfiprintf_internal_r+0xd50>
    8940:	d9001b17 	ldw	r4,108(sp)
    8944:	d8801c17 	ldw	r2,112(sp)
    8948:	d811883a 	mov	r8,sp
    894c:	21400044 	addi	r5,r4,1
    8950:	003fe806 	br	88f4 <___vfiprintf_internal_r+0xdd0>
    8954:	d9402117 	ldw	r5,132(sp)
    8958:	d9002017 	ldw	r4,128(sp)
    895c:	d9801a04 	addi	r6,sp,104
    8960:	d9c02b15 	stw	r7,172(sp)
    8964:	db402a15 	stw	r13,168(sp)
    8968:	0007a100 	call	7a10 <__sprint_r.part.0>
    896c:	d9c02b17 	ldw	r7,172(sp)
    8970:	db402a17 	ldw	r13,168(sp)
    8974:	103fbf1e 	bne	r2,zero,8874 <___vfiprintf_internal_r+0xd50>
    8978:	d9401b17 	ldw	r5,108(sp)
    897c:	d8801c17 	ldw	r2,112(sp)
    8980:	d811883a 	mov	r8,sp
    8984:	29800044 	addi	r6,r5,1
    8988:	003dc406 	br	809c <___vfiprintf_internal_r+0x578>
    898c:	1000d21e 	bne	r2,zero,8cd8 <___vfiprintf_internal_r+0x11b4>
    8990:	d8c01d87 	ldb	r3,118(sp)
    8994:	18009526 	beq	r3,zero,8bec <___vfiprintf_internal_r+0x10c8>
    8998:	00800044 	movi	r2,1
    899c:	d8c01d84 	addi	r3,sp,118
    89a0:	1009883a 	mov	r4,r2
    89a4:	d8c00015 	stw	r3,0(sp)
    89a8:	d8800115 	stw	r2,4(sp)
    89ac:	d811883a 	mov	r8,sp
    89b0:	200b883a 	mov	r5,r4
    89b4:	42000204 	addi	r8,r8,8
    89b8:	21000044 	addi	r4,r4,1
    89bc:	003d9706 	br	801c <___vfiprintf_internal_r+0x4f8>
    89c0:	d9001d04 	addi	r4,sp,116
    89c4:	00800084 	movi	r2,2
    89c8:	d9000015 	stw	r4,0(sp)
    89cc:	d8800115 	stw	r2,4(sp)
    89d0:	1809883a 	mov	r4,r3
    89d4:	d811883a 	mov	r8,sp
    89d8:	200b883a 	mov	r5,r4
    89dc:	42000204 	addi	r8,r8,8
    89e0:	21000044 	addi	r4,r4,1
    89e4:	003f4e06 	br	8720 <___vfiprintf_internal_r+0xbfc>
    89e8:	d8001d85 	stb	zero,118(sp)
    89ec:	48005016 	blt	r9,zero,8b30 <___vfiprintf_internal_r+0x100c>
    89f0:	00ffdfc4 	movi	r3,-129
    89f4:	94c4b03a 	or	r2,r18,r19
    89f8:	a0e8703a 	and	r20,r20,r3
    89fc:	103d4426 	beq	r2,zero,7f10 <___vfiprintf_internal_r+0x3ec>
    8a00:	0039883a 	mov	fp,zero
    8a04:	d9002617 	ldw	r4,152(sp)
    8a08:	dd401a04 	addi	r21,sp,104
    8a0c:	908003cc 	andi	r2,r18,15
    8a10:	9806973a 	slli	r3,r19,28
    8a14:	2085883a 	add	r2,r4,r2
    8a18:	9024d13a 	srli	r18,r18,4
    8a1c:	10800003 	ldbu	r2,0(r2)
    8a20:	9826d13a 	srli	r19,r19,4
    8a24:	ad7fffc4 	addi	r21,r21,-1
    8a28:	1ca4b03a 	or	r18,r3,r18
    8a2c:	a8800005 	stb	r2,0(r21)
    8a30:	94c4b03a 	or	r2,r18,r19
    8a34:	103ff51e 	bne	r2,zero,8a0c <___vfiprintf_internal_r+0xee8>
    8a38:	003e5906 	br	83a0 <___vfiprintf_internal_r+0x87c>
    8a3c:	d9402117 	ldw	r5,132(sp)
    8a40:	d9002017 	ldw	r4,128(sp)
    8a44:	d9801a04 	addi	r6,sp,104
    8a48:	0007a100 	call	7a10 <__sprint_r.part.0>
    8a4c:	103f891e 	bne	r2,zero,8874 <___vfiprintf_internal_r+0xd50>
    8a50:	d8801c17 	ldw	r2,112(sp)
    8a54:	d811883a 	mov	r8,sp
    8a58:	003f9506 	br	88b0 <___vfiprintf_internal_r+0xd8c>
    8a5c:	d9402117 	ldw	r5,132(sp)
    8a60:	d9002017 	ldw	r4,128(sp)
    8a64:	d9801a04 	addi	r6,sp,104
    8a68:	0007a100 	call	7a10 <__sprint_r.part.0>
    8a6c:	103f811e 	bne	r2,zero,8874 <___vfiprintf_internal_r+0xd50>
    8a70:	d811883a 	mov	r8,sp
    8a74:	003ced06 	br	7e2c <___vfiprintf_internal_r+0x308>
    8a78:	d9402117 	ldw	r5,132(sp)
    8a7c:	d9002017 	ldw	r4,128(sp)
    8a80:	d9801a04 	addi	r6,sp,104
    8a84:	da402c15 	stw	r9,176(sp)
    8a88:	db802a15 	stw	r14,168(sp)
    8a8c:	0007a100 	call	7a10 <__sprint_r.part.0>
    8a90:	da402c17 	ldw	r9,176(sp)
    8a94:	db802a17 	ldw	r14,168(sp)
    8a98:	103f761e 	bne	r2,zero,8874 <___vfiprintf_internal_r+0xd50>
    8a9c:	d9401b17 	ldw	r5,108(sp)
    8aa0:	d8801c17 	ldw	r2,112(sp)
    8aa4:	d811883a 	mov	r8,sp
    8aa8:	29000044 	addi	r4,r5,1
    8aac:	003d5b06 	br	801c <___vfiprintf_internal_r+0x4f8>
    8ab0:	d9402117 	ldw	r5,132(sp)
    8ab4:	d9002017 	ldw	r4,128(sp)
    8ab8:	d9801a04 	addi	r6,sp,104
    8abc:	da402c15 	stw	r9,176(sp)
    8ac0:	0007a100 	call	7a10 <__sprint_r.part.0>
    8ac4:	da402c17 	ldw	r9,176(sp)
    8ac8:	103f6a1e 	bne	r2,zero,8874 <___vfiprintf_internal_r+0xd50>
    8acc:	d9401b17 	ldw	r5,108(sp)
    8ad0:	d8801c17 	ldw	r2,112(sp)
    8ad4:	d811883a 	mov	r8,sp
    8ad8:	29000044 	addi	r4,r5,1
    8adc:	003f1006 	br	8720 <___vfiprintf_internal_r+0xbfc>
    8ae0:	1000c31e 	bne	r2,zero,8df0 <___vfiprintf_internal_r+0x12cc>
    8ae4:	01000044 	movi	r4,1
    8ae8:	000b883a 	mov	r5,zero
    8aec:	d811883a 	mov	r8,sp
    8af0:	003f0d06 	br	8728 <___vfiprintf_internal_r+0xc04>
    8af4:	d9402117 	ldw	r5,132(sp)
    8af8:	d9002017 	ldw	r4,128(sp)
    8afc:	d9801a04 	addi	r6,sp,104
    8b00:	0007a100 	call	7a10 <__sprint_r.part.0>
    8b04:	103f5b1e 	bne	r2,zero,8874 <___vfiprintf_internal_r+0xd50>
    8b08:	d9001b17 	ldw	r4,108(sp)
    8b0c:	d8801c17 	ldw	r2,112(sp)
    8b10:	d811883a 	mov	r8,sp
    8b14:	21000044 	addi	r4,r4,1
    8b18:	003d8006 	br	811c <___vfiprintf_internal_r+0x5f8>
    8b1c:	01000074 	movhi	r4,1
    8b20:	213e6004 	addi	r4,r4,-1664
    8b24:	d9002615 	stw	r4,152(sp)
    8b28:	d8c02215 	stw	r3,136(sp)
    8b2c:	1029883a 	mov	r20,r2
    8b30:	94c4b03a 	or	r2,r18,r19
    8b34:	103fb21e 	bne	r2,zero,8a00 <___vfiprintf_internal_r+0xedc>
    8b38:	0039883a 	mov	fp,zero
    8b3c:	00800084 	movi	r2,2
    8b40:	003e6b06 	br	84f0 <___vfiprintf_internal_r+0x9cc>
    8b44:	da802217 	ldw	r10,136(sp)
    8b48:	d8001d85 	stb	zero,118(sp)
    8b4c:	0027883a 	mov	r19,zero
    8b50:	50800104 	addi	r2,r10,4
    8b54:	54800017 	ldw	r18,0(r10)
    8b58:	483e6016 	blt	r9,zero,84dc <___vfiprintf_internal_r+0x9b8>
    8b5c:	00ffdfc4 	movi	r3,-129
    8b60:	d8802215 	stw	r2,136(sp)
    8b64:	a0e8703a 	and	r20,r20,r3
    8b68:	0039883a 	mov	fp,zero
    8b6c:	903ebb26 	beq	r18,zero,865c <___vfiprintf_internal_r+0xb38>
    8b70:	00800244 	movi	r2,9
    8b74:	14bdee36 	bltu	r2,r18,8330 <___vfiprintf_internal_r+0x80c>
    8b78:	003eba06 	br	8664 <___vfiprintf_internal_r+0xb40>
    8b7c:	00800c04 	movi	r2,48
    8b80:	d8c01d45 	stb	r3,117(sp)
    8b84:	d8801d05 	stb	r2,116(sp)
    8b88:	d8001d85 	stb	zero,118(sp)
    8b8c:	a0c00094 	ori	r3,r20,2
    8b90:	4800a916 	blt	r9,zero,8e38 <___vfiprintf_internal_r+0x1314>
    8b94:	00bfdfc4 	movi	r2,-129
    8b98:	a096703a 	and	r11,r20,r2
    8b9c:	5d000094 	ori	r20,r11,2
    8ba0:	0039883a 	mov	fp,zero
    8ba4:	003f9706 	br	8a04 <___vfiprintf_internal_r+0xee0>
    8ba8:	8025883a 	mov	r18,r16
    8bac:	003c2e06 	br	7c68 <___vfiprintf_internal_r+0x144>
    8bb0:	00800074 	movhi	r2,1
    8bb4:	10be6004 	addi	r2,r2,-1664
    8bb8:	0039883a 	mov	fp,zero
    8bbc:	d8802615 	stw	r2,152(sp)
    8bc0:	003f9006 	br	8a04 <___vfiprintf_internal_r+0xee0>
    8bc4:	04a5c83a 	sub	r18,zero,r18
    8bc8:	07000b44 	movi	fp,45
    8bcc:	9004c03a 	cmpne	r2,r18,zero
    8bd0:	04e7c83a 	sub	r19,zero,r19
    8bd4:	df001d85 	stb	fp,118(sp)
    8bd8:	98a7c83a 	sub	r19,r19,r2
    8bdc:	48009f16 	blt	r9,zero,8e5c <___vfiprintf_internal_r+0x1338>
    8be0:	00bfdfc4 	movi	r2,-129
    8be4:	a0a8703a 	and	r20,r20,r2
    8be8:	003dd006 	br	832c <___vfiprintf_internal_r+0x808>
    8bec:	70004c26 	beq	r14,zero,8d20 <___vfiprintf_internal_r+0x11fc>
    8bf0:	00800084 	movi	r2,2
    8bf4:	d8c01d04 	addi	r3,sp,116
    8bf8:	d8c00015 	stw	r3,0(sp)
    8bfc:	d8800115 	stw	r2,4(sp)
    8c00:	01000044 	movi	r4,1
    8c04:	d811883a 	mov	r8,sp
    8c08:	003f7306 	br	89d8 <___vfiprintf_internal_r+0xeb4>
    8c0c:	a080100c 	andi	r2,r20,64
    8c10:	da802217 	ldw	r10,136(sp)
    8c14:	103e0626 	beq	r2,zero,8430 <___vfiprintf_internal_r+0x90c>
    8c18:	5480000f 	ldh	r18,0(r10)
    8c1c:	52800104 	addi	r10,r10,4
    8c20:	da802215 	stw	r10,136(sp)
    8c24:	9027d7fa 	srai	r19,r18,31
    8c28:	9805883a 	mov	r2,r19
    8c2c:	003db806 	br	8310 <___vfiprintf_internal_r+0x7ec>
    8c30:	a080040c 	andi	r2,r20,16
    8c34:	1000091e 	bne	r2,zero,8c5c <___vfiprintf_internal_r+0x1138>
    8c38:	a2c0100c 	andi	r11,r20,64
    8c3c:	58000726 	beq	r11,zero,8c5c <___vfiprintf_internal_r+0x1138>
    8c40:	da802217 	ldw	r10,136(sp)
    8c44:	50800017 	ldw	r2,0(r10)
    8c48:	52800104 	addi	r10,r10,4
    8c4c:	da802215 	stw	r10,136(sp)
    8c50:	da802317 	ldw	r10,140(sp)
    8c54:	1280000d 	sth	r10,0(r2)
    8c58:	003be706 	br	7bf8 <___vfiprintf_internal_r+0xd4>
    8c5c:	da802217 	ldw	r10,136(sp)
    8c60:	50800017 	ldw	r2,0(r10)
    8c64:	52800104 	addi	r10,r10,4
    8c68:	da802215 	stw	r10,136(sp)
    8c6c:	da802317 	ldw	r10,140(sp)
    8c70:	12800015 	stw	r10,0(r2)
    8c74:	003be006 	br	7bf8 <___vfiprintf_internal_r+0xd4>
    8c78:	a080100c 	andi	r2,r20,64
    8c7c:	da802217 	ldw	r10,136(sp)
    8c80:	10003026 	beq	r2,zero,8d44 <___vfiprintf_internal_r+0x1220>
    8c84:	5480000b 	ldhu	r18,0(r10)
    8c88:	52800104 	addi	r10,r10,4
    8c8c:	0027883a 	mov	r19,zero
    8c90:	da802215 	stw	r10,136(sp)
    8c94:	003d8006 	br	8298 <___vfiprintf_internal_r+0x774>
    8c98:	80c00007 	ldb	r3,0(r16)
    8c9c:	003c0006 	br	7ca0 <___vfiprintf_internal_r+0x17c>
    8ca0:	a080100c 	andi	r2,r20,64
    8ca4:	d8001d85 	stb	zero,118(sp)
    8ca8:	da802217 	ldw	r10,136(sp)
    8cac:	1000201e 	bne	r2,zero,8d30 <___vfiprintf_internal_r+0x120c>
    8cb0:	50800104 	addi	r2,r10,4
    8cb4:	54800017 	ldw	r18,0(r10)
    8cb8:	0027883a 	mov	r19,zero
    8cbc:	483def0e 	bge	r9,zero,847c <___vfiprintf_internal_r+0x958>
    8cc0:	94c6b03a 	or	r3,r18,r19
    8cc4:	d8802215 	stw	r2,136(sp)
    8cc8:	183d4e1e 	bne	r3,zero,8204 <___vfiprintf_internal_r+0x6e0>
    8ccc:	0039883a 	mov	fp,zero
    8cd0:	0005883a 	mov	r2,zero
    8cd4:	003e0606 	br	84f0 <___vfiprintf_internal_r+0x9cc>
    8cd8:	d9402117 	ldw	r5,132(sp)
    8cdc:	d9002017 	ldw	r4,128(sp)
    8ce0:	d9801a04 	addi	r6,sp,104
    8ce4:	da402c15 	stw	r9,176(sp)
    8ce8:	db802a15 	stw	r14,168(sp)
    8cec:	0007a100 	call	7a10 <__sprint_r.part.0>
    8cf0:	da402c17 	ldw	r9,176(sp)
    8cf4:	db802a17 	ldw	r14,168(sp)
    8cf8:	103ede1e 	bne	r2,zero,8874 <___vfiprintf_internal_r+0xd50>
    8cfc:	d9401b17 	ldw	r5,108(sp)
    8d00:	d8801c17 	ldw	r2,112(sp)
    8d04:	d811883a 	mov	r8,sp
    8d08:	29000044 	addi	r4,r5,1
    8d0c:	003e7406 	br	86e0 <___vfiprintf_internal_r+0xbbc>
    8d10:	00bfffc4 	movi	r2,-1
    8d14:	003c5806 	br	7e78 <___vfiprintf_internal_r+0x354>
    8d18:	d811883a 	mov	r8,sp
    8d1c:	003ee806 	br	88c0 <___vfiprintf_internal_r+0xd9c>
    8d20:	000b883a 	mov	r5,zero
    8d24:	01000044 	movi	r4,1
    8d28:	d811883a 	mov	r8,sp
    8d2c:	003e7c06 	br	8720 <___vfiprintf_internal_r+0xbfc>
    8d30:	50800104 	addi	r2,r10,4
    8d34:	5480000b 	ldhu	r18,0(r10)
    8d38:	0027883a 	mov	r19,zero
    8d3c:	483dcf0e 	bge	r9,zero,847c <___vfiprintf_internal_r+0x958>
    8d40:	003fdf06 	br	8cc0 <___vfiprintf_internal_r+0x119c>
    8d44:	54800017 	ldw	r18,0(r10)
    8d48:	52800104 	addi	r10,r10,4
    8d4c:	0027883a 	mov	r19,zero
    8d50:	da802215 	stw	r10,136(sp)
    8d54:	003d5006 	br	8298 <___vfiprintf_internal_r+0x774>
    8d58:	50800104 	addi	r2,r10,4
    8d5c:	5480000b 	ldhu	r18,0(r10)
    8d60:	0027883a 	mov	r19,zero
    8d64:	483f7d0e 	bge	r9,zero,8b5c <___vfiprintf_internal_r+0x1038>
    8d68:	003ddc06 	br	84dc <___vfiprintf_internal_r+0x9b8>
    8d6c:	d8c02215 	stw	r3,136(sp)
    8d70:	0039883a 	mov	fp,zero
    8d74:	003ddb06 	br	84e4 <___vfiprintf_internal_r+0x9c0>
    8d78:	02800074 	movhi	r10,1
    8d7c:	52bec104 	addi	r10,r10,-1276
    8d80:	da802415 	stw	r10,144(sp)
    8d84:	003e8306 	br	8794 <___vfiprintf_internal_r+0xc70>
    8d88:	d8801c17 	ldw	r2,112(sp)
    8d8c:	dd002117 	ldw	r20,132(sp)
    8d90:	103eb926 	beq	r2,zero,8878 <___vfiprintf_internal_r+0xd54>
    8d94:	d9002017 	ldw	r4,128(sp)
    8d98:	d9801a04 	addi	r6,sp,104
    8d9c:	a00b883a 	mov	r5,r20
    8da0:	0007a100 	call	7a10 <__sprint_r.part.0>
    8da4:	003eb406 	br	8878 <___vfiprintf_internal_r+0xd54>
    8da8:	80c00043 	ldbu	r3,1(r16)
    8dac:	a5000814 	ori	r20,r20,32
    8db0:	84000044 	addi	r16,r16,1
    8db4:	18c03fcc 	andi	r3,r3,255
    8db8:	18c0201c 	xori	r3,r3,128
    8dbc:	18ffe004 	addi	r3,r3,-128
    8dc0:	003bb706 	br	7ca0 <___vfiprintf_internal_r+0x17c>
    8dc4:	a809883a 	mov	r4,r21
    8dc8:	d8c02a15 	stw	r3,168(sp)
    8dcc:	da002b15 	stw	r8,172(sp)
    8dd0:	00004780 	call	478 <strlen>
    8dd4:	d8c02a17 	ldw	r3,168(sp)
    8dd8:	1027883a 	mov	r19,r2
    8ddc:	df001d83 	ldbu	fp,118(sp)
    8de0:	d8c02215 	stw	r3,136(sp)
    8de4:	0013883a 	mov	r9,zero
    8de8:	da002b17 	ldw	r8,172(sp)
    8dec:	003c4d06 	br	7f24 <___vfiprintf_internal_r+0x400>
    8df0:	d9402117 	ldw	r5,132(sp)
    8df4:	d9002017 	ldw	r4,128(sp)
    8df8:	d9801a04 	addi	r6,sp,104
    8dfc:	da402c15 	stw	r9,176(sp)
    8e00:	0007a100 	call	7a10 <__sprint_r.part.0>
    8e04:	da402c17 	ldw	r9,176(sp)
    8e08:	103e9a1e 	bne	r2,zero,8874 <___vfiprintf_internal_r+0xd50>
    8e0c:	d9401b17 	ldw	r5,108(sp)
    8e10:	d8801c17 	ldw	r2,112(sp)
    8e14:	d811883a 	mov	r8,sp
    8e18:	29000044 	addi	r4,r5,1
    8e1c:	003e4206 	br	8728 <___vfiprintf_internal_r+0xc04>
    8e20:	d9401b17 	ldw	r5,108(sp)
    8e24:	01000074 	movhi	r4,1
    8e28:	213ec504 	addi	r4,r4,-1260
    8e2c:	d9002415 	stw	r4,144(sp)
    8e30:	29400044 	addi	r5,r5,1
    8e34:	003c6d06 	br	7fec <___vfiprintf_internal_r+0x4c8>
    8e38:	0039883a 	mov	fp,zero
    8e3c:	00800084 	movi	r2,2
    8e40:	10803fcc 	andi	r2,r2,255
    8e44:	01000044 	movi	r4,1
    8e48:	11001e26 	beq	r2,r4,8ec4 <___vfiprintf_internal_r+0x13a0>
    8e4c:	01000084 	movi	r4,2
    8e50:	11001e1e 	bne	r2,r4,8ecc <___vfiprintf_internal_r+0x13a8>
    8e54:	1829883a 	mov	r20,r3
    8e58:	003eea06 	br	8a04 <___vfiprintf_internal_r+0xee0>
    8e5c:	a007883a 	mov	r3,r20
    8e60:	00800044 	movi	r2,1
    8e64:	003ff606 	br	8e40 <___vfiprintf_internal_r+0x131c>
    8e68:	00800184 	movi	r2,6
    8e6c:	1240012e 	bgeu	r2,r9,8e74 <___vfiprintf_internal_r+0x1350>
    8e70:	1013883a 	mov	r9,r2
    8e74:	4827883a 	mov	r19,r9
    8e78:	4825883a 	mov	r18,r9
    8e7c:	48001516 	blt	r9,zero,8ed4 <___vfiprintf_internal_r+0x13b0>
    8e80:	05400074 	movhi	r21,1
    8e84:	d8c02215 	stw	r3,136(sp)
    8e88:	ad7e6504 	addi	r21,r21,-1644
    8e8c:	003d1406 	br	82e0 <___vfiprintf_internal_r+0x7bc>
    8e90:	02800074 	movhi	r10,1
    8e94:	52bec104 	addi	r10,r10,-1276
    8e98:	da802415 	stw	r10,144(sp)
    8e9c:	200d883a 	mov	r6,r4
    8ea0:	003c9106 	br	80e8 <___vfiprintf_internal_r+0x5c4>
    8ea4:	5021883a 	mov	r16,r10
    8ea8:	0013883a 	mov	r9,zero
    8eac:	003b7d06 	br	7ca4 <___vfiprintf_internal_r+0x180>
    8eb0:	4827883a 	mov	r19,r9
    8eb4:	df001d83 	ldbu	fp,118(sp)
    8eb8:	d8c02215 	stw	r3,136(sp)
    8ebc:	0013883a 	mov	r9,zero
    8ec0:	003c1806 	br	7f24 <___vfiprintf_internal_r+0x400>
    8ec4:	1829883a 	mov	r20,r3
    8ec8:	003d1806 	br	832c <___vfiprintf_internal_r+0x808>
    8ecc:	1829883a 	mov	r20,r3
    8ed0:	003ccd06 	br	8208 <___vfiprintf_internal_r+0x6e4>
    8ed4:	0025883a 	mov	r18,zero
    8ed8:	003fe906 	br	8e80 <___vfiprintf_internal_r+0x135c>
    8edc:	d8802217 	ldw	r2,136(sp)
    8ee0:	80c00043 	ldbu	r3,1(r16)
    8ee4:	5021883a 	mov	r16,r10
    8ee8:	12400017 	ldw	r9,0(r2)
    8eec:	10800104 	addi	r2,r2,4
    8ef0:	d8802215 	stw	r2,136(sp)
    8ef4:	483faf0e 	bge	r9,zero,8db4 <___vfiprintf_internal_r+0x1290>
    8ef8:	18c03fcc 	andi	r3,r3,255
    8efc:	18c0201c 	xori	r3,r3,128
    8f00:	027fffc4 	movi	r9,-1
    8f04:	18ffe004 	addi	r3,r3,-128
    8f08:	003b6506 	br	7ca0 <___vfiprintf_internal_r+0x17c>
    8f0c:	d9c01d85 	stb	r7,118(sp)
    8f10:	003ca006 	br	8194 <___vfiprintf_internal_r+0x670>
    8f14:	d9c01d85 	stb	r7,118(sp)
    8f18:	003cad06 	br	81d0 <___vfiprintf_internal_r+0x6ac>
    8f1c:	d9c01d85 	stb	r7,118(sp)
    8f20:	003d7d06 	br	8518 <___vfiprintf_internal_r+0x9f4>
    8f24:	d9c01d85 	stb	r7,118(sp)
    8f28:	003d5f06 	br	84a8 <___vfiprintf_internal_r+0x984>
    8f2c:	a080004c 	andi	r2,r20,1
    8f30:	0039883a 	mov	fp,zero
    8f34:	10000526 	beq	r2,zero,8f4c <___vfiprintf_internal_r+0x1428>
    8f38:	00800c04 	movi	r2,48
    8f3c:	d88019c5 	stb	r2,103(sp)
    8f40:	dcc02717 	ldw	r19,156(sp)
    8f44:	dd4019c4 	addi	r21,sp,103
    8f48:	003bf606 	br	7f24 <___vfiprintf_internal_r+0x400>
    8f4c:	0027883a 	mov	r19,zero
    8f50:	dd401a04 	addi	r21,sp,104
    8f54:	003bf306 	br	7f24 <___vfiprintf_internal_r+0x400>
    8f58:	d9c01d85 	stb	r7,118(sp)
    8f5c:	003dc806 	br	8680 <___vfiprintf_internal_r+0xb5c>
    8f60:	d9c01d85 	stb	r7,118(sp)
    8f64:	003d3a06 	br	8450 <___vfiprintf_internal_r+0x92c>
    8f68:	d9c01d85 	stb	r7,118(sp)
    8f6c:	003d2a06 	br	8418 <___vfiprintf_internal_r+0x8f4>
    8f70:	d9c01d85 	stb	r7,118(sp)
    8f74:	003cde06 	br	82f0 <___vfiprintf_internal_r+0x7cc>
    8f78:	d9c01d85 	stb	r7,118(sp)
    8f7c:	003cbc06 	br	8270 <___vfiprintf_internal_r+0x74c>

00008f80 <__vfiprintf_internal>:
    8f80:	00800074 	movhi	r2,1
    8f84:	1085cd04 	addi	r2,r2,5940
    8f88:	300f883a 	mov	r7,r6
    8f8c:	280d883a 	mov	r6,r5
    8f90:	200b883a 	mov	r5,r4
    8f94:	11000017 	ldw	r4,0(r2)
    8f98:	0007b241 	jmpi	7b24 <___vfiprintf_internal_r>

00008f9c <__sbprintf>:
    8f9c:	2880030b 	ldhu	r2,12(r5)
    8fa0:	2ac01917 	ldw	r11,100(r5)
    8fa4:	2a80038b 	ldhu	r10,14(r5)
    8fa8:	2a400717 	ldw	r9,28(r5)
    8fac:	2a000917 	ldw	r8,36(r5)
    8fb0:	defee204 	addi	sp,sp,-1144
    8fb4:	00c10004 	movi	r3,1024
    8fb8:	dc011a15 	stw	r16,1128(sp)
    8fbc:	10bfff4c 	andi	r2,r2,65533
    8fc0:	2821883a 	mov	r16,r5
    8fc4:	d8cb883a 	add	r5,sp,r3
    8fc8:	dc811c15 	stw	r18,1136(sp)
    8fcc:	dc411b15 	stw	r17,1132(sp)
    8fd0:	dfc11d15 	stw	ra,1140(sp)
    8fd4:	2025883a 	mov	r18,r4
    8fd8:	d881030d 	sth	r2,1036(sp)
    8fdc:	dac11915 	stw	r11,1124(sp)
    8fe0:	da81038d 	sth	r10,1038(sp)
    8fe4:	da410715 	stw	r9,1052(sp)
    8fe8:	da010915 	stw	r8,1060(sp)
    8fec:	dec10015 	stw	sp,1024(sp)
    8ff0:	dec10415 	stw	sp,1040(sp)
    8ff4:	d8c10215 	stw	r3,1032(sp)
    8ff8:	d8c10515 	stw	r3,1044(sp)
    8ffc:	d8010615 	stw	zero,1048(sp)
    9000:	0007b240 	call	7b24 <___vfiprintf_internal_r>
    9004:	1023883a 	mov	r17,r2
    9008:	10000416 	blt	r2,zero,901c <__sbprintf+0x80>
    900c:	d9410004 	addi	r5,sp,1024
    9010:	9009883a 	mov	r4,r18
    9014:	00043d80 	call	43d8 <_fflush_r>
    9018:	10000d1e 	bne	r2,zero,9050 <__sbprintf+0xb4>
    901c:	d881030b 	ldhu	r2,1036(sp)
    9020:	1080100c 	andi	r2,r2,64
    9024:	10000326 	beq	r2,zero,9034 <__sbprintf+0x98>
    9028:	8080030b 	ldhu	r2,12(r16)
    902c:	10801014 	ori	r2,r2,64
    9030:	8080030d 	sth	r2,12(r16)
    9034:	8805883a 	mov	r2,r17
    9038:	dfc11d17 	ldw	ra,1140(sp)
    903c:	dc811c17 	ldw	r18,1136(sp)
    9040:	dc411b17 	ldw	r17,1132(sp)
    9044:	dc011a17 	ldw	r16,1128(sp)
    9048:	dec11e04 	addi	sp,sp,1144
    904c:	f800283a 	ret
    9050:	047fffc4 	movi	r17,-1
    9054:	003ff106 	br	901c <__sbprintf+0x80>

00009058 <_write_r>:
    9058:	defffd04 	addi	sp,sp,-12
    905c:	2805883a 	mov	r2,r5
    9060:	dc000015 	stw	r16,0(sp)
    9064:	04000074 	movhi	r16,1
    9068:	dc400115 	stw	r17,4(sp)
    906c:	300b883a 	mov	r5,r6
    9070:	840ca804 	addi	r16,r16,12960
    9074:	2023883a 	mov	r17,r4
    9078:	380d883a 	mov	r6,r7
    907c:	1009883a 	mov	r4,r2
    9080:	dfc00215 	stw	ra,8(sp)
    9084:	80000015 	stw	zero,0(r16)
    9088:	000d54c0 	call	d54c <write>
    908c:	00ffffc4 	movi	r3,-1
    9090:	10c00526 	beq	r2,r3,90a8 <_write_r+0x50>
    9094:	dfc00217 	ldw	ra,8(sp)
    9098:	dc400117 	ldw	r17,4(sp)
    909c:	dc000017 	ldw	r16,0(sp)
    90a0:	dec00304 	addi	sp,sp,12
    90a4:	f800283a 	ret
    90a8:	80c00017 	ldw	r3,0(r16)
    90ac:	183ff926 	beq	r3,zero,9094 <_write_r+0x3c>
    90b0:	88c00015 	stw	r3,0(r17)
    90b4:	003ff706 	br	9094 <_write_r+0x3c>

000090b8 <_close_r>:
    90b8:	defffd04 	addi	sp,sp,-12
    90bc:	dc000015 	stw	r16,0(sp)
    90c0:	04000074 	movhi	r16,1
    90c4:	dc400115 	stw	r17,4(sp)
    90c8:	840ca804 	addi	r16,r16,12960
    90cc:	2023883a 	mov	r17,r4
    90d0:	2809883a 	mov	r4,r5
    90d4:	dfc00215 	stw	ra,8(sp)
    90d8:	80000015 	stw	zero,0(r16)
    90dc:	000cca80 	call	cca8 <close>
    90e0:	00ffffc4 	movi	r3,-1
    90e4:	10c00526 	beq	r2,r3,90fc <_close_r+0x44>
    90e8:	dfc00217 	ldw	ra,8(sp)
    90ec:	dc400117 	ldw	r17,4(sp)
    90f0:	dc000017 	ldw	r16,0(sp)
    90f4:	dec00304 	addi	sp,sp,12
    90f8:	f800283a 	ret
    90fc:	80c00017 	ldw	r3,0(r16)
    9100:	183ff926 	beq	r3,zero,90e8 <_close_r+0x30>
    9104:	88c00015 	stw	r3,0(r17)
    9108:	003ff706 	br	90e8 <_close_r+0x30>

0000910c <_calloc_r>:
    910c:	298b383a 	mul	r5,r5,r6
    9110:	defffe04 	addi	sp,sp,-8
    9114:	dfc00115 	stw	ra,4(sp)
    9118:	dc000015 	stw	r16,0(sp)
    911c:	00055140 	call	5514 <_malloc_r>
    9120:	10002926 	beq	r2,zero,91c8 <_calloc_r+0xbc>
    9124:	11bfff17 	ldw	r6,-4(r2)
    9128:	1021883a 	mov	r16,r2
    912c:	00bfff04 	movi	r2,-4
    9130:	308c703a 	and	r6,r6,r2
    9134:	00c00904 	movi	r3,36
    9138:	308d883a 	add	r6,r6,r2
    913c:	19801636 	bltu	r3,r6,9198 <_calloc_r+0x8c>
    9140:	008004c4 	movi	r2,19
    9144:	11800b2e 	bgeu	r2,r6,9174 <_calloc_r+0x68>
    9148:	80000015 	stw	zero,0(r16)
    914c:	80000115 	stw	zero,4(r16)
    9150:	008006c4 	movi	r2,27
    9154:	11801a2e 	bgeu	r2,r6,91c0 <_calloc_r+0xb4>
    9158:	80000215 	stw	zero,8(r16)
    915c:	80000315 	stw	zero,12(r16)
    9160:	30c0151e 	bne	r6,r3,91b8 <_calloc_r+0xac>
    9164:	80000415 	stw	zero,16(r16)
    9168:	80800604 	addi	r2,r16,24
    916c:	80000515 	stw	zero,20(r16)
    9170:	00000106 	br	9178 <_calloc_r+0x6c>
    9174:	8005883a 	mov	r2,r16
    9178:	10000015 	stw	zero,0(r2)
    917c:	10000115 	stw	zero,4(r2)
    9180:	10000215 	stw	zero,8(r2)
    9184:	8005883a 	mov	r2,r16
    9188:	dfc00117 	ldw	ra,4(sp)
    918c:	dc000017 	ldw	r16,0(sp)
    9190:	dec00204 	addi	sp,sp,8
    9194:	f800283a 	ret
    9198:	000b883a 	mov	r5,zero
    919c:	8009883a 	mov	r4,r16
    91a0:	00060a80 	call	60a8 <memset>
    91a4:	8005883a 	mov	r2,r16
    91a8:	dfc00117 	ldw	ra,4(sp)
    91ac:	dc000017 	ldw	r16,0(sp)
    91b0:	dec00204 	addi	sp,sp,8
    91b4:	f800283a 	ret
    91b8:	80800404 	addi	r2,r16,16
    91bc:	003fee06 	br	9178 <_calloc_r+0x6c>
    91c0:	80800204 	addi	r2,r16,8
    91c4:	003fec06 	br	9178 <_calloc_r+0x6c>
    91c8:	0005883a 	mov	r2,zero
    91cc:	003fee06 	br	9188 <_calloc_r+0x7c>

000091d0 <_fclose_r>:
    91d0:	28003926 	beq	r5,zero,92b8 <_fclose_r+0xe8>
    91d4:	defffc04 	addi	sp,sp,-16
    91d8:	dc400115 	stw	r17,4(sp)
    91dc:	dc000015 	stw	r16,0(sp)
    91e0:	dfc00315 	stw	ra,12(sp)
    91e4:	dc800215 	stw	r18,8(sp)
    91e8:	2023883a 	mov	r17,r4
    91ec:	2821883a 	mov	r16,r5
    91f0:	20000226 	beq	r4,zero,91fc <_fclose_r+0x2c>
    91f4:	20800e17 	ldw	r2,56(r4)
    91f8:	10002726 	beq	r2,zero,9298 <_fclose_r+0xc8>
    91fc:	8080030f 	ldh	r2,12(r16)
    9200:	1000071e 	bne	r2,zero,9220 <_fclose_r+0x50>
    9204:	0005883a 	mov	r2,zero
    9208:	dfc00317 	ldw	ra,12(sp)
    920c:	dc800217 	ldw	r18,8(sp)
    9210:	dc400117 	ldw	r17,4(sp)
    9214:	dc000017 	ldw	r16,0(sp)
    9218:	dec00404 	addi	sp,sp,16
    921c:	f800283a 	ret
    9220:	800b883a 	mov	r5,r16
    9224:	8809883a 	mov	r4,r17
    9228:	00041bc0 	call	41bc <__sflush_r>
    922c:	1025883a 	mov	r18,r2
    9230:	80800b17 	ldw	r2,44(r16)
    9234:	10000426 	beq	r2,zero,9248 <_fclose_r+0x78>
    9238:	81400717 	ldw	r5,28(r16)
    923c:	8809883a 	mov	r4,r17
    9240:	103ee83a 	callr	r2
    9244:	10001616 	blt	r2,zero,92a0 <_fclose_r+0xd0>
    9248:	8080030b 	ldhu	r2,12(r16)
    924c:	1080200c 	andi	r2,r2,128
    9250:	1000151e 	bne	r2,zero,92a8 <_fclose_r+0xd8>
    9254:	81400c17 	ldw	r5,48(r16)
    9258:	28000526 	beq	r5,zero,9270 <_fclose_r+0xa0>
    925c:	80801004 	addi	r2,r16,64
    9260:	28800226 	beq	r5,r2,926c <_fclose_r+0x9c>
    9264:	8809883a 	mov	r4,r17
    9268:	00049280 	call	4928 <_free_r>
    926c:	80000c15 	stw	zero,48(r16)
    9270:	81401117 	ldw	r5,68(r16)
    9274:	28000326 	beq	r5,zero,9284 <_fclose_r+0xb4>
    9278:	8809883a 	mov	r4,r17
    927c:	00049280 	call	4928 <_free_r>
    9280:	80001115 	stw	zero,68(r16)
    9284:	00047c40 	call	47c4 <__sfp_lock_acquire>
    9288:	8000030d 	sth	zero,12(r16)
    928c:	00047c80 	call	47c8 <__sfp_lock_release>
    9290:	9005883a 	mov	r2,r18
    9294:	003fdc06 	br	9208 <_fclose_r+0x38>
    9298:	00047b40 	call	47b4 <__sinit>
    929c:	003fd706 	br	91fc <_fclose_r+0x2c>
    92a0:	04bfffc4 	movi	r18,-1
    92a4:	003fe806 	br	9248 <_fclose_r+0x78>
    92a8:	81400417 	ldw	r5,16(r16)
    92ac:	8809883a 	mov	r4,r17
    92b0:	00049280 	call	4928 <_free_r>
    92b4:	003fe706 	br	9254 <_fclose_r+0x84>
    92b8:	0005883a 	mov	r2,zero
    92bc:	f800283a 	ret

000092c0 <fclose>:
    92c0:	00800074 	movhi	r2,1
    92c4:	1085cd04 	addi	r2,r2,5940
    92c8:	200b883a 	mov	r5,r4
    92cc:	11000017 	ldw	r4,0(r2)
    92d0:	00091d01 	jmpi	91d0 <_fclose_r>

000092d4 <__fputwc>:
    92d4:	defff804 	addi	sp,sp,-32
    92d8:	dcc00415 	stw	r19,16(sp)
    92dc:	dc800315 	stw	r18,12(sp)
    92e0:	dc000115 	stw	r16,4(sp)
    92e4:	dfc00715 	stw	ra,28(sp)
    92e8:	dd400615 	stw	r21,24(sp)
    92ec:	dd000515 	stw	r20,20(sp)
    92f0:	dc400215 	stw	r17,8(sp)
    92f4:	2027883a 	mov	r19,r4
    92f8:	2825883a 	mov	r18,r5
    92fc:	3021883a 	mov	r16,r6
    9300:	00053040 	call	5304 <__locale_mb_cur_max>
    9304:	00c00044 	movi	r3,1
    9308:	10c03e26 	beq	r2,r3,9404 <__fputwc+0x130>
    930c:	81c01704 	addi	r7,r16,92
    9310:	900d883a 	mov	r6,r18
    9314:	d80b883a 	mov	r5,sp
    9318:	9809883a 	mov	r4,r19
    931c:	00097a40 	call	97a4 <_wcrtomb_r>
    9320:	1029883a 	mov	r20,r2
    9324:	00bfffc4 	movi	r2,-1
    9328:	a0802026 	beq	r20,r2,93ac <__fputwc+0xd8>
    932c:	d9400003 	ldbu	r5,0(sp)
    9330:	a0001c26 	beq	r20,zero,93a4 <__fputwc+0xd0>
    9334:	0023883a 	mov	r17,zero
    9338:	05400284 	movi	r21,10
    933c:	00000906 	br	9364 <__fputwc+0x90>
    9340:	80800017 	ldw	r2,0(r16)
    9344:	11400005 	stb	r5,0(r2)
    9348:	80c00017 	ldw	r3,0(r16)
    934c:	18c00044 	addi	r3,r3,1
    9350:	80c00015 	stw	r3,0(r16)
    9354:	8c400044 	addi	r17,r17,1
    9358:	dc45883a 	add	r2,sp,r17
    935c:	8d00112e 	bgeu	r17,r20,93a4 <__fputwc+0xd0>
    9360:	11400003 	ldbu	r5,0(r2)
    9364:	80c00217 	ldw	r3,8(r16)
    9368:	18ffffc4 	addi	r3,r3,-1
    936c:	80c00215 	stw	r3,8(r16)
    9370:	183ff30e 	bge	r3,zero,9340 <__fputwc+0x6c>
    9374:	80800617 	ldw	r2,24(r16)
    9378:	18801916 	blt	r3,r2,93e0 <__fputwc+0x10c>
    937c:	80800017 	ldw	r2,0(r16)
    9380:	11400005 	stb	r5,0(r2)
    9384:	80800017 	ldw	r2,0(r16)
    9388:	10c00003 	ldbu	r3,0(r2)
    938c:	10800044 	addi	r2,r2,1
    9390:	1d402326 	beq	r3,r21,9420 <__fputwc+0x14c>
    9394:	80800015 	stw	r2,0(r16)
    9398:	8c400044 	addi	r17,r17,1
    939c:	dc45883a 	add	r2,sp,r17
    93a0:	8d3fef36 	bltu	r17,r20,9360 <__fputwc+0x8c>
    93a4:	9005883a 	mov	r2,r18
    93a8:	00000406 	br	93bc <__fputwc+0xe8>
    93ac:	80c0030b 	ldhu	r3,12(r16)
    93b0:	a005883a 	mov	r2,r20
    93b4:	18c01014 	ori	r3,r3,64
    93b8:	80c0030d 	sth	r3,12(r16)
    93bc:	dfc00717 	ldw	ra,28(sp)
    93c0:	dd400617 	ldw	r21,24(sp)
    93c4:	dd000517 	ldw	r20,20(sp)
    93c8:	dcc00417 	ldw	r19,16(sp)
    93cc:	dc800317 	ldw	r18,12(sp)
    93d0:	dc400217 	ldw	r17,8(sp)
    93d4:	dc000117 	ldw	r16,4(sp)
    93d8:	dec00804 	addi	sp,sp,32
    93dc:	f800283a 	ret
    93e0:	800d883a 	mov	r6,r16
    93e4:	29403fcc 	andi	r5,r5,255
    93e8:	9809883a 	mov	r4,r19
    93ec:	000964c0 	call	964c <__swbuf_r>
    93f0:	10bfffe0 	cmpeqi	r2,r2,-1
    93f4:	10803fcc 	andi	r2,r2,255
    93f8:	103fd626 	beq	r2,zero,9354 <__fputwc+0x80>
    93fc:	00bfffc4 	movi	r2,-1
    9400:	003fee06 	br	93bc <__fputwc+0xe8>
    9404:	90ffffc4 	addi	r3,r18,-1
    9408:	01003f84 	movi	r4,254
    940c:	20ffbf36 	bltu	r4,r3,930c <__fputwc+0x38>
    9410:	900b883a 	mov	r5,r18
    9414:	dc800005 	stb	r18,0(sp)
    9418:	1029883a 	mov	r20,r2
    941c:	003fc506 	br	9334 <__fputwc+0x60>
    9420:	800d883a 	mov	r6,r16
    9424:	a80b883a 	mov	r5,r21
    9428:	9809883a 	mov	r4,r19
    942c:	000964c0 	call	964c <__swbuf_r>
    9430:	10bfffe0 	cmpeqi	r2,r2,-1
    9434:	003fef06 	br	93f4 <__fputwc+0x120>

00009438 <_fputwc_r>:
    9438:	3080030b 	ldhu	r2,12(r6)
    943c:	10c8000c 	andi	r3,r2,8192
    9440:	1800051e 	bne	r3,zero,9458 <_fputwc_r+0x20>
    9444:	30c01917 	ldw	r3,100(r6)
    9448:	10880014 	ori	r2,r2,8192
    944c:	3080030d 	sth	r2,12(r6)
    9450:	18880014 	ori	r2,r3,8192
    9454:	30801915 	stw	r2,100(r6)
    9458:	00092d41 	jmpi	92d4 <__fputwc>

0000945c <fputwc>:
    945c:	00800074 	movhi	r2,1
    9460:	defffc04 	addi	sp,sp,-16
    9464:	1085cd04 	addi	r2,r2,5940
    9468:	dc000115 	stw	r16,4(sp)
    946c:	14000017 	ldw	r16,0(r2)
    9470:	dc400215 	stw	r17,8(sp)
    9474:	dfc00315 	stw	ra,12(sp)
    9478:	2023883a 	mov	r17,r4
    947c:	80000226 	beq	r16,zero,9488 <fputwc+0x2c>
    9480:	80800e17 	ldw	r2,56(r16)
    9484:	10001026 	beq	r2,zero,94c8 <fputwc+0x6c>
    9488:	2880030b 	ldhu	r2,12(r5)
    948c:	10c8000c 	andi	r3,r2,8192
    9490:	1800051e 	bne	r3,zero,94a8 <fputwc+0x4c>
    9494:	28c01917 	ldw	r3,100(r5)
    9498:	10880014 	ori	r2,r2,8192
    949c:	2880030d 	sth	r2,12(r5)
    94a0:	18880014 	ori	r2,r3,8192
    94a4:	28801915 	stw	r2,100(r5)
    94a8:	280d883a 	mov	r6,r5
    94ac:	8009883a 	mov	r4,r16
    94b0:	880b883a 	mov	r5,r17
    94b4:	dfc00317 	ldw	ra,12(sp)
    94b8:	dc400217 	ldw	r17,8(sp)
    94bc:	dc000117 	ldw	r16,4(sp)
    94c0:	dec00404 	addi	sp,sp,16
    94c4:	00092d41 	jmpi	92d4 <__fputwc>
    94c8:	8009883a 	mov	r4,r16
    94cc:	d9400015 	stw	r5,0(sp)
    94d0:	00047b40 	call	47b4 <__sinit>
    94d4:	d9400017 	ldw	r5,0(sp)
    94d8:	003feb06 	br	9488 <fputwc+0x2c>

000094dc <_fstat_r>:
    94dc:	defffd04 	addi	sp,sp,-12
    94e0:	2805883a 	mov	r2,r5
    94e4:	dc000015 	stw	r16,0(sp)
    94e8:	04000074 	movhi	r16,1
    94ec:	dc400115 	stw	r17,4(sp)
    94f0:	840ca804 	addi	r16,r16,12960
    94f4:	2023883a 	mov	r17,r4
    94f8:	300b883a 	mov	r5,r6
    94fc:	1009883a 	mov	r4,r2
    9500:	dfc00215 	stw	ra,8(sp)
    9504:	80000015 	stw	zero,0(r16)
    9508:	000cdf40 	call	cdf4 <fstat>
    950c:	00ffffc4 	movi	r3,-1
    9510:	10c00526 	beq	r2,r3,9528 <_fstat_r+0x4c>
    9514:	dfc00217 	ldw	ra,8(sp)
    9518:	dc400117 	ldw	r17,4(sp)
    951c:	dc000017 	ldw	r16,0(sp)
    9520:	dec00304 	addi	sp,sp,12
    9524:	f800283a 	ret
    9528:	80c00017 	ldw	r3,0(r16)
    952c:	183ff926 	beq	r3,zero,9514 <_fstat_r+0x38>
    9530:	88c00015 	stw	r3,0(r17)
    9534:	003ff706 	br	9514 <_fstat_r+0x38>

00009538 <_isatty_r>:
    9538:	defffd04 	addi	sp,sp,-12
    953c:	dc000015 	stw	r16,0(sp)
    9540:	04000074 	movhi	r16,1
    9544:	dc400115 	stw	r17,4(sp)
    9548:	840ca804 	addi	r16,r16,12960
    954c:	2023883a 	mov	r17,r4
    9550:	2809883a 	mov	r4,r5
    9554:	dfc00215 	stw	ra,8(sp)
    9558:	80000015 	stw	zero,0(r16)
    955c:	000cef40 	call	cef4 <isatty>
    9560:	00ffffc4 	movi	r3,-1
    9564:	10c00526 	beq	r2,r3,957c <_isatty_r+0x44>
    9568:	dfc00217 	ldw	ra,8(sp)
    956c:	dc400117 	ldw	r17,4(sp)
    9570:	dc000017 	ldw	r16,0(sp)
    9574:	dec00304 	addi	sp,sp,12
    9578:	f800283a 	ret
    957c:	80c00017 	ldw	r3,0(r16)
    9580:	183ff926 	beq	r3,zero,9568 <_isatty_r+0x30>
    9584:	88c00015 	stw	r3,0(r17)
    9588:	003ff706 	br	9568 <_isatty_r+0x30>

0000958c <_lseek_r>:
    958c:	defffd04 	addi	sp,sp,-12
    9590:	2805883a 	mov	r2,r5
    9594:	dc000015 	stw	r16,0(sp)
    9598:	04000074 	movhi	r16,1
    959c:	dc400115 	stw	r17,4(sp)
    95a0:	300b883a 	mov	r5,r6
    95a4:	840ca804 	addi	r16,r16,12960
    95a8:	2023883a 	mov	r17,r4
    95ac:	380d883a 	mov	r6,r7
    95b0:	1009883a 	mov	r4,r2
    95b4:	dfc00215 	stw	ra,8(sp)
    95b8:	80000015 	stw	zero,0(r16)
    95bc:	000d0d40 	call	d0d4 <lseek>
    95c0:	00ffffc4 	movi	r3,-1
    95c4:	10c00526 	beq	r2,r3,95dc <_lseek_r+0x50>
    95c8:	dfc00217 	ldw	ra,8(sp)
    95cc:	dc400117 	ldw	r17,4(sp)
    95d0:	dc000017 	ldw	r16,0(sp)
    95d4:	dec00304 	addi	sp,sp,12
    95d8:	f800283a 	ret
    95dc:	80c00017 	ldw	r3,0(r16)
    95e0:	183ff926 	beq	r3,zero,95c8 <_lseek_r+0x3c>
    95e4:	88c00015 	stw	r3,0(r17)
    95e8:	003ff706 	br	95c8 <_lseek_r+0x3c>

000095ec <_read_r>:
    95ec:	defffd04 	addi	sp,sp,-12
    95f0:	2805883a 	mov	r2,r5
    95f4:	dc000015 	stw	r16,0(sp)
    95f8:	04000074 	movhi	r16,1
    95fc:	dc400115 	stw	r17,4(sp)
    9600:	300b883a 	mov	r5,r6
    9604:	840ca804 	addi	r16,r16,12960
    9608:	2023883a 	mov	r17,r4
    960c:	380d883a 	mov	r6,r7
    9610:	1009883a 	mov	r4,r2
    9614:	dfc00215 	stw	ra,8(sp)
    9618:	80000015 	stw	zero,0(r16)
    961c:	000d2bc0 	call	d2bc <read>
    9620:	00ffffc4 	movi	r3,-1
    9624:	10c00526 	beq	r2,r3,963c <_read_r+0x50>
    9628:	dfc00217 	ldw	ra,8(sp)
    962c:	dc400117 	ldw	r17,4(sp)
    9630:	dc000017 	ldw	r16,0(sp)
    9634:	dec00304 	addi	sp,sp,12
    9638:	f800283a 	ret
    963c:	80c00017 	ldw	r3,0(r16)
    9640:	183ff926 	beq	r3,zero,9628 <_read_r+0x3c>
    9644:	88c00015 	stw	r3,0(r17)
    9648:	003ff706 	br	9628 <_read_r+0x3c>

0000964c <__swbuf_r>:
    964c:	defffb04 	addi	sp,sp,-20
    9650:	dcc00315 	stw	r19,12(sp)
    9654:	dc800215 	stw	r18,8(sp)
    9658:	dc000015 	stw	r16,0(sp)
    965c:	dfc00415 	stw	ra,16(sp)
    9660:	dc400115 	stw	r17,4(sp)
    9664:	2025883a 	mov	r18,r4
    9668:	2827883a 	mov	r19,r5
    966c:	3021883a 	mov	r16,r6
    9670:	20000226 	beq	r4,zero,967c <__swbuf_r+0x30>
    9674:	20800e17 	ldw	r2,56(r4)
    9678:	10004226 	beq	r2,zero,9784 <__swbuf_r+0x138>
    967c:	80800617 	ldw	r2,24(r16)
    9680:	8100030b 	ldhu	r4,12(r16)
    9684:	80800215 	stw	r2,8(r16)
    9688:	2080020c 	andi	r2,r4,8
    968c:	10003626 	beq	r2,zero,9768 <__swbuf_r+0x11c>
    9690:	80c00417 	ldw	r3,16(r16)
    9694:	18003426 	beq	r3,zero,9768 <__swbuf_r+0x11c>
    9698:	2088000c 	andi	r2,r4,8192
    969c:	9c403fcc 	andi	r17,r19,255
    96a0:	10001a26 	beq	r2,zero,970c <__swbuf_r+0xc0>
    96a4:	80800017 	ldw	r2,0(r16)
    96a8:	81000517 	ldw	r4,20(r16)
    96ac:	10c7c83a 	sub	r3,r2,r3
    96b0:	1900200e 	bge	r3,r4,9734 <__swbuf_r+0xe8>
    96b4:	18c00044 	addi	r3,r3,1
    96b8:	81000217 	ldw	r4,8(r16)
    96bc:	11400044 	addi	r5,r2,1
    96c0:	81400015 	stw	r5,0(r16)
    96c4:	213fffc4 	addi	r4,r4,-1
    96c8:	81000215 	stw	r4,8(r16)
    96cc:	14c00005 	stb	r19,0(r2)
    96d0:	80800517 	ldw	r2,20(r16)
    96d4:	10c01e26 	beq	r2,r3,9750 <__swbuf_r+0x104>
    96d8:	8080030b 	ldhu	r2,12(r16)
    96dc:	1080004c 	andi	r2,r2,1
    96e0:	10000226 	beq	r2,zero,96ec <__swbuf_r+0xa0>
    96e4:	00800284 	movi	r2,10
    96e8:	88801926 	beq	r17,r2,9750 <__swbuf_r+0x104>
    96ec:	8805883a 	mov	r2,r17
    96f0:	dfc00417 	ldw	ra,16(sp)
    96f4:	dcc00317 	ldw	r19,12(sp)
    96f8:	dc800217 	ldw	r18,8(sp)
    96fc:	dc400117 	ldw	r17,4(sp)
    9700:	dc000017 	ldw	r16,0(sp)
    9704:	dec00504 	addi	sp,sp,20
    9708:	f800283a 	ret
    970c:	81401917 	ldw	r5,100(r16)
    9710:	00b7ffc4 	movi	r2,-8193
    9714:	21080014 	ori	r4,r4,8192
    9718:	2884703a 	and	r2,r5,r2
    971c:	80801915 	stw	r2,100(r16)
    9720:	80800017 	ldw	r2,0(r16)
    9724:	8100030d 	sth	r4,12(r16)
    9728:	81000517 	ldw	r4,20(r16)
    972c:	10c7c83a 	sub	r3,r2,r3
    9730:	193fe016 	blt	r3,r4,96b4 <__swbuf_r+0x68>
    9734:	800b883a 	mov	r5,r16
    9738:	9009883a 	mov	r4,r18
    973c:	00043d80 	call	43d8 <_fflush_r>
    9740:	1000071e 	bne	r2,zero,9760 <__swbuf_r+0x114>
    9744:	80800017 	ldw	r2,0(r16)
    9748:	00c00044 	movi	r3,1
    974c:	003fda06 	br	96b8 <__swbuf_r+0x6c>
    9750:	800b883a 	mov	r5,r16
    9754:	9009883a 	mov	r4,r18
    9758:	00043d80 	call	43d8 <_fflush_r>
    975c:	103fe326 	beq	r2,zero,96ec <__swbuf_r+0xa0>
    9760:	00bfffc4 	movi	r2,-1
    9764:	003fe206 	br	96f0 <__swbuf_r+0xa4>
    9768:	800b883a 	mov	r5,r16
    976c:	9009883a 	mov	r4,r18
    9770:	00027e00 	call	27e0 <__swsetup_r>
    9774:	103ffa1e 	bne	r2,zero,9760 <__swbuf_r+0x114>
    9778:	8100030b 	ldhu	r4,12(r16)
    977c:	80c00417 	ldw	r3,16(r16)
    9780:	003fc506 	br	9698 <__swbuf_r+0x4c>
    9784:	00047b40 	call	47b4 <__sinit>
    9788:	003fbc06 	br	967c <__swbuf_r+0x30>

0000978c <__swbuf>:
    978c:	00800074 	movhi	r2,1
    9790:	1085cd04 	addi	r2,r2,5940
    9794:	280d883a 	mov	r6,r5
    9798:	200b883a 	mov	r5,r4
    979c:	11000017 	ldw	r4,0(r2)
    97a0:	000964c1 	jmpi	964c <__swbuf_r>

000097a4 <_wcrtomb_r>:
    97a4:	defff604 	addi	sp,sp,-40
    97a8:	00800074 	movhi	r2,1
    97ac:	dc800815 	stw	r18,32(sp)
    97b0:	dc400715 	stw	r17,28(sp)
    97b4:	dc000615 	stw	r16,24(sp)
    97b8:	1085d104 	addi	r2,r2,5956
    97bc:	dfc00915 	stw	ra,36(sp)
    97c0:	2021883a 	mov	r16,r4
    97c4:	3823883a 	mov	r17,r7
    97c8:	14800017 	ldw	r18,0(r2)
    97cc:	28001426 	beq	r5,zero,9820 <_wcrtomb_r+0x7c>
    97d0:	d9400415 	stw	r5,16(sp)
    97d4:	d9800515 	stw	r6,20(sp)
    97d8:	00052f80 	call	52f8 <__locale_charset>
    97dc:	d9800517 	ldw	r6,20(sp)
    97e0:	d9400417 	ldw	r5,16(sp)
    97e4:	100f883a 	mov	r7,r2
    97e8:	dc400015 	stw	r17,0(sp)
    97ec:	8009883a 	mov	r4,r16
    97f0:	903ee83a 	callr	r18
    97f4:	00ffffc4 	movi	r3,-1
    97f8:	10c0031e 	bne	r2,r3,9808 <_wcrtomb_r+0x64>
    97fc:	88000015 	stw	zero,0(r17)
    9800:	00c02284 	movi	r3,138
    9804:	80c00015 	stw	r3,0(r16)
    9808:	dfc00917 	ldw	ra,36(sp)
    980c:	dc800817 	ldw	r18,32(sp)
    9810:	dc400717 	ldw	r17,28(sp)
    9814:	dc000617 	ldw	r16,24(sp)
    9818:	dec00a04 	addi	sp,sp,40
    981c:	f800283a 	ret
    9820:	00052f80 	call	52f8 <__locale_charset>
    9824:	100f883a 	mov	r7,r2
    9828:	dc400015 	stw	r17,0(sp)
    982c:	000d883a 	mov	r6,zero
    9830:	d9400104 	addi	r5,sp,4
    9834:	8009883a 	mov	r4,r16
    9838:	903ee83a 	callr	r18
    983c:	003fed06 	br	97f4 <_wcrtomb_r+0x50>

00009840 <wcrtomb>:
    9840:	defff604 	addi	sp,sp,-40
    9844:	00800074 	movhi	r2,1
    9848:	dc800615 	stw	r18,24(sp)
    984c:	dc400515 	stw	r17,20(sp)
    9850:	1085cd04 	addi	r2,r2,5940
    9854:	dfc00915 	stw	ra,36(sp)
    9858:	dd000815 	stw	r20,32(sp)
    985c:	dcc00715 	stw	r19,28(sp)
    9860:	dc000415 	stw	r16,16(sp)
    9864:	3025883a 	mov	r18,r6
    9868:	14400017 	ldw	r17,0(r2)
    986c:	20001926 	beq	r4,zero,98d4 <wcrtomb+0x94>
    9870:	00800074 	movhi	r2,1
    9874:	1085d104 	addi	r2,r2,5956
    9878:	15000017 	ldw	r20,0(r2)
    987c:	2021883a 	mov	r16,r4
    9880:	2827883a 	mov	r19,r5
    9884:	00052f80 	call	52f8 <__locale_charset>
    9888:	100f883a 	mov	r7,r2
    988c:	dc800015 	stw	r18,0(sp)
    9890:	980d883a 	mov	r6,r19
    9894:	800b883a 	mov	r5,r16
    9898:	8809883a 	mov	r4,r17
    989c:	a03ee83a 	callr	r20
    98a0:	00ffffc4 	movi	r3,-1
    98a4:	10c0031e 	bne	r2,r3,98b4 <wcrtomb+0x74>
    98a8:	90000015 	stw	zero,0(r18)
    98ac:	00c02284 	movi	r3,138
    98b0:	88c00015 	stw	r3,0(r17)
    98b4:	dfc00917 	ldw	ra,36(sp)
    98b8:	dd000817 	ldw	r20,32(sp)
    98bc:	dcc00717 	ldw	r19,28(sp)
    98c0:	dc800617 	ldw	r18,24(sp)
    98c4:	dc400517 	ldw	r17,20(sp)
    98c8:	dc000417 	ldw	r16,16(sp)
    98cc:	dec00a04 	addi	sp,sp,40
    98d0:	f800283a 	ret
    98d4:	00800074 	movhi	r2,1
    98d8:	1085d104 	addi	r2,r2,5956
    98dc:	14000017 	ldw	r16,0(r2)
    98e0:	00052f80 	call	52f8 <__locale_charset>
    98e4:	100f883a 	mov	r7,r2
    98e8:	dc800015 	stw	r18,0(sp)
    98ec:	000d883a 	mov	r6,zero
    98f0:	d9400104 	addi	r5,sp,4
    98f4:	8809883a 	mov	r4,r17
    98f8:	803ee83a 	callr	r16
    98fc:	003fe806 	br	98a0 <wcrtomb+0x60>

00009900 <__ascii_wctomb>:
    9900:	28000526 	beq	r5,zero,9918 <__ascii_wctomb+0x18>
    9904:	00803fc4 	movi	r2,255
    9908:	11800536 	bltu	r2,r6,9920 <__ascii_wctomb+0x20>
    990c:	29800005 	stb	r6,0(r5)
    9910:	00800044 	movi	r2,1
    9914:	f800283a 	ret
    9918:	0005883a 	mov	r2,zero
    991c:	f800283a 	ret
    9920:	00802284 	movi	r2,138
    9924:	20800015 	stw	r2,0(r4)
    9928:	00bfffc4 	movi	r2,-1
    992c:	f800283a 	ret

00009930 <_wctomb_r>:
    9930:	00800074 	movhi	r2,1
    9934:	defff904 	addi	sp,sp,-28
    9938:	1085d104 	addi	r2,r2,5956
    993c:	dfc00615 	stw	ra,24(sp)
    9940:	dc400515 	stw	r17,20(sp)
    9944:	dc000415 	stw	r16,16(sp)
    9948:	3823883a 	mov	r17,r7
    994c:	14000017 	ldw	r16,0(r2)
    9950:	d9000115 	stw	r4,4(sp)
    9954:	d9400215 	stw	r5,8(sp)
    9958:	d9800315 	stw	r6,12(sp)
    995c:	00052f80 	call	52f8 <__locale_charset>
    9960:	d9800317 	ldw	r6,12(sp)
    9964:	d9400217 	ldw	r5,8(sp)
    9968:	d9000117 	ldw	r4,4(sp)
    996c:	100f883a 	mov	r7,r2
    9970:	dc400015 	stw	r17,0(sp)
    9974:	803ee83a 	callr	r16
    9978:	dfc00617 	ldw	ra,24(sp)
    997c:	dc400517 	ldw	r17,20(sp)
    9980:	dc000417 	ldw	r16,16(sp)
    9984:	dec00704 	addi	sp,sp,28
    9988:	f800283a 	ret

0000998c <__udivdi3>:
    998c:	defff504 	addi	sp,sp,-44
    9990:	dcc00415 	stw	r19,16(sp)
    9994:	dc000115 	stw	r16,4(sp)
    9998:	dfc00a15 	stw	ra,40(sp)
    999c:	df000915 	stw	fp,36(sp)
    99a0:	ddc00815 	stw	r23,32(sp)
    99a4:	dd800715 	stw	r22,28(sp)
    99a8:	dd400615 	stw	r21,24(sp)
    99ac:	dd000515 	stw	r20,20(sp)
    99b0:	dc800315 	stw	r18,12(sp)
    99b4:	dc400215 	stw	r17,8(sp)
    99b8:	2027883a 	mov	r19,r4
    99bc:	2821883a 	mov	r16,r5
    99c0:	3800411e 	bne	r7,zero,9ac8 <__udivdi3+0x13c>
    99c4:	3023883a 	mov	r17,r6
    99c8:	2025883a 	mov	r18,r4
    99cc:	2980522e 	bgeu	r5,r6,9b18 <__udivdi3+0x18c>
    99d0:	00bfffd4 	movui	r2,65535
    99d4:	282d883a 	mov	r22,r5
    99d8:	1180a836 	bltu	r2,r6,9c7c <__udivdi3+0x2f0>
    99dc:	00803fc4 	movi	r2,255
    99e0:	1185803a 	cmpltu	r2,r2,r6
    99e4:	100490fa 	slli	r2,r2,3
    99e8:	3086d83a 	srl	r3,r6,r2
    99ec:	01000074 	movhi	r4,1
    99f0:	213ec904 	addi	r4,r4,-1244
    99f4:	20c7883a 	add	r3,r4,r3
    99f8:	18c00003 	ldbu	r3,0(r3)
    99fc:	1885883a 	add	r2,r3,r2
    9a00:	00c00804 	movi	r3,32
    9a04:	1887c83a 	sub	r3,r3,r2
    9a08:	18000526 	beq	r3,zero,9a20 <__udivdi3+0x94>
    9a0c:	80e0983a 	sll	r16,r16,r3
    9a10:	9884d83a 	srl	r2,r19,r2
    9a14:	30e2983a 	sll	r17,r6,r3
    9a18:	98e4983a 	sll	r18,r19,r3
    9a1c:	142cb03a 	or	r22,r2,r16
    9a20:	882ad43a 	srli	r21,r17,16
    9a24:	b009883a 	mov	r4,r22
    9a28:	8d3fffcc 	andi	r20,r17,65535
    9a2c:	a80b883a 	mov	r5,r21
    9a30:	000a5980 	call	a598 <__umodsi3>
    9a34:	b009883a 	mov	r4,r22
    9a38:	a80b883a 	mov	r5,r21
    9a3c:	1027883a 	mov	r19,r2
    9a40:	000a5340 	call	a534 <__udivsi3>
    9a44:	102d883a 	mov	r22,r2
    9a48:	9826943a 	slli	r19,r19,16
    9a4c:	9004d43a 	srli	r2,r18,16
    9a50:	a5a1383a 	mul	r16,r20,r22
    9a54:	14c4b03a 	or	r2,r2,r19
    9a58:	1400052e 	bgeu	r2,r16,9a70 <__udivdi3+0xe4>
    9a5c:	1445883a 	add	r2,r2,r17
    9a60:	b0ffffc4 	addi	r3,r22,-1
    9a64:	14400136 	bltu	r2,r17,9a6c <__udivdi3+0xe0>
    9a68:	14012336 	bltu	r2,r16,9ef8 <__udivdi3+0x56c>
    9a6c:	182d883a 	mov	r22,r3
    9a70:	1421c83a 	sub	r16,r2,r16
    9a74:	a80b883a 	mov	r5,r21
    9a78:	8009883a 	mov	r4,r16
    9a7c:	000a5980 	call	a598 <__umodsi3>
    9a80:	1027883a 	mov	r19,r2
    9a84:	a80b883a 	mov	r5,r21
    9a88:	8009883a 	mov	r4,r16
    9a8c:	000a5340 	call	a534 <__udivsi3>
    9a90:	9826943a 	slli	r19,r19,16
    9a94:	a0a9383a 	mul	r20,r20,r2
    9a98:	94bfffcc 	andi	r18,r18,65535
    9a9c:	94e4b03a 	or	r18,r18,r19
    9aa0:	9500052e 	bgeu	r18,r20,9ab8 <__udivdi3+0x12c>
    9aa4:	8ca5883a 	add	r18,r17,r18
    9aa8:	10ffffc4 	addi	r3,r2,-1
    9aac:	9440f136 	bltu	r18,r17,9e74 <__udivdi3+0x4e8>
    9ab0:	9500f02e 	bgeu	r18,r20,9e74 <__udivdi3+0x4e8>
    9ab4:	10bfff84 	addi	r2,r2,-2
    9ab8:	b00c943a 	slli	r6,r22,16
    9abc:	0007883a 	mov	r3,zero
    9ac0:	3084b03a 	or	r2,r6,r2
    9ac4:	00005906 	br	9c2c <__udivdi3+0x2a0>
    9ac8:	29c05636 	bltu	r5,r7,9c24 <__udivdi3+0x298>
    9acc:	00bfffd4 	movui	r2,65535
    9ad0:	11c0622e 	bgeu	r2,r7,9c5c <__udivdi3+0x2d0>
    9ad4:	00804034 	movhi	r2,256
    9ad8:	10bfffc4 	addi	r2,r2,-1
    9adc:	11c0ee36 	bltu	r2,r7,9e98 <__udivdi3+0x50c>
    9ae0:	00800404 	movi	r2,16
    9ae4:	3886d83a 	srl	r3,r7,r2
    9ae8:	01000074 	movhi	r4,1
    9aec:	213ec904 	addi	r4,r4,-1244
    9af0:	20c7883a 	add	r3,r4,r3
    9af4:	18c00003 	ldbu	r3,0(r3)
    9af8:	05400804 	movi	r21,32
    9afc:	1885883a 	add	r2,r3,r2
    9b00:	a8abc83a 	sub	r21,r21,r2
    9b04:	a800621e 	bne	r21,zero,9c90 <__udivdi3+0x304>
    9b08:	3c00e936 	bltu	r7,r16,9eb0 <__udivdi3+0x524>
    9b0c:	9985403a 	cmpgeu	r2,r19,r6
    9b10:	0007883a 	mov	r3,zero
    9b14:	00004506 	br	9c2c <__udivdi3+0x2a0>
    9b18:	3000041e 	bne	r6,zero,9b2c <__udivdi3+0x1a0>
    9b1c:	000b883a 	mov	r5,zero
    9b20:	01000044 	movi	r4,1
    9b24:	000a5340 	call	a534 <__udivsi3>
    9b28:	1023883a 	mov	r17,r2
    9b2c:	00bfffd4 	movui	r2,65535
    9b30:	14404e2e 	bgeu	r2,r17,9c6c <__udivdi3+0x2e0>
    9b34:	00804034 	movhi	r2,256
    9b38:	10bfffc4 	addi	r2,r2,-1
    9b3c:	1440d836 	bltu	r2,r17,9ea0 <__udivdi3+0x514>
    9b40:	00800404 	movi	r2,16
    9b44:	8886d83a 	srl	r3,r17,r2
    9b48:	01000074 	movhi	r4,1
    9b4c:	213ec904 	addi	r4,r4,-1244
    9b50:	20c7883a 	add	r3,r4,r3
    9b54:	18c00003 	ldbu	r3,0(r3)
    9b58:	1885883a 	add	r2,r3,r2
    9b5c:	00c00804 	movi	r3,32
    9b60:	1887c83a 	sub	r3,r3,r2
    9b64:	18008f1e 	bne	r3,zero,9da4 <__udivdi3+0x418>
    9b68:	882ad43a 	srli	r21,r17,16
    9b6c:	8461c83a 	sub	r16,r16,r17
    9b70:	8d3fffcc 	andi	r20,r17,65535
    9b74:	00c00044 	movi	r3,1
    9b78:	8009883a 	mov	r4,r16
    9b7c:	a80b883a 	mov	r5,r21
    9b80:	d8c00015 	stw	r3,0(sp)
    9b84:	000a5980 	call	a598 <__umodsi3>
    9b88:	8009883a 	mov	r4,r16
    9b8c:	a80b883a 	mov	r5,r21
    9b90:	1027883a 	mov	r19,r2
    9b94:	000a5340 	call	a534 <__udivsi3>
    9b98:	9826943a 	slli	r19,r19,16
    9b9c:	9008d43a 	srli	r4,r18,16
    9ba0:	1521383a 	mul	r16,r2,r20
    9ba4:	102d883a 	mov	r22,r2
    9ba8:	24c8b03a 	or	r4,r4,r19
    9bac:	d8c00017 	ldw	r3,0(sp)
    9bb0:	2400052e 	bgeu	r4,r16,9bc8 <__udivdi3+0x23c>
    9bb4:	2449883a 	add	r4,r4,r17
    9bb8:	b0bfffc4 	addi	r2,r22,-1
    9bbc:	24400136 	bltu	r4,r17,9bc4 <__udivdi3+0x238>
    9bc0:	2400ca36 	bltu	r4,r16,9eec <__udivdi3+0x560>
    9bc4:	102d883a 	mov	r22,r2
    9bc8:	2421c83a 	sub	r16,r4,r16
    9bcc:	a80b883a 	mov	r5,r21
    9bd0:	8009883a 	mov	r4,r16
    9bd4:	d8c00015 	stw	r3,0(sp)
    9bd8:	000a5980 	call	a598 <__umodsi3>
    9bdc:	1027883a 	mov	r19,r2
    9be0:	a80b883a 	mov	r5,r21
    9be4:	8009883a 	mov	r4,r16
    9be8:	000a5340 	call	a534 <__udivsi3>
    9bec:	9826943a 	slli	r19,r19,16
    9bf0:	1529383a 	mul	r20,r2,r20
    9bf4:	94bfffcc 	andi	r18,r18,65535
    9bf8:	94e4b03a 	or	r18,r18,r19
    9bfc:	d8c00017 	ldw	r3,0(sp)
    9c00:	9500052e 	bgeu	r18,r20,9c18 <__udivdi3+0x28c>
    9c04:	8ca5883a 	add	r18,r17,r18
    9c08:	113fffc4 	addi	r4,r2,-1
    9c0c:	94409736 	bltu	r18,r17,9e6c <__udivdi3+0x4e0>
    9c10:	9500962e 	bgeu	r18,r20,9e6c <__udivdi3+0x4e0>
    9c14:	10bfff84 	addi	r2,r2,-2
    9c18:	b00c943a 	slli	r6,r22,16
    9c1c:	3084b03a 	or	r2,r6,r2
    9c20:	00000206 	br	9c2c <__udivdi3+0x2a0>
    9c24:	0007883a 	mov	r3,zero
    9c28:	0005883a 	mov	r2,zero
    9c2c:	dfc00a17 	ldw	ra,40(sp)
    9c30:	df000917 	ldw	fp,36(sp)
    9c34:	ddc00817 	ldw	r23,32(sp)
    9c38:	dd800717 	ldw	r22,28(sp)
    9c3c:	dd400617 	ldw	r21,24(sp)
    9c40:	dd000517 	ldw	r20,20(sp)
    9c44:	dcc00417 	ldw	r19,16(sp)
    9c48:	dc800317 	ldw	r18,12(sp)
    9c4c:	dc400217 	ldw	r17,8(sp)
    9c50:	dc000117 	ldw	r16,4(sp)
    9c54:	dec00b04 	addi	sp,sp,44
    9c58:	f800283a 	ret
    9c5c:	00803fc4 	movi	r2,255
    9c60:	11c5803a 	cmpltu	r2,r2,r7
    9c64:	100490fa 	slli	r2,r2,3
    9c68:	003f9e06 	br	9ae4 <__udivdi3+0x158>
    9c6c:	00803fc4 	movi	r2,255
    9c70:	1445803a 	cmpltu	r2,r2,r17
    9c74:	100490fa 	slli	r2,r2,3
    9c78:	003fb206 	br	9b44 <__udivdi3+0x1b8>
    9c7c:	00804034 	movhi	r2,256
    9c80:	10bfffc4 	addi	r2,r2,-1
    9c84:	11808836 	bltu	r2,r6,9ea8 <__udivdi3+0x51c>
    9c88:	00800404 	movi	r2,16
    9c8c:	003f5606 	br	99e8 <__udivdi3+0x5c>
    9c90:	30aed83a 	srl	r23,r6,r2
    9c94:	3d4e983a 	sll	r7,r7,r21
    9c98:	80acd83a 	srl	r22,r16,r2
    9c9c:	9884d83a 	srl	r2,r19,r2
    9ca0:	3deeb03a 	or	r23,r7,r23
    9ca4:	b824d43a 	srli	r18,r23,16
    9ca8:	8560983a 	sll	r16,r16,r21
    9cac:	b009883a 	mov	r4,r22
    9cb0:	900b883a 	mov	r5,r18
    9cb4:	3568983a 	sll	r20,r6,r21
    9cb8:	1420b03a 	or	r16,r2,r16
    9cbc:	000a5980 	call	a598 <__umodsi3>
    9cc0:	b009883a 	mov	r4,r22
    9cc4:	900b883a 	mov	r5,r18
    9cc8:	1023883a 	mov	r17,r2
    9ccc:	000a5340 	call	a534 <__udivsi3>
    9cd0:	8808943a 	slli	r4,r17,16
    9cd4:	bf3fffcc 	andi	fp,r23,65535
    9cd8:	8006d43a 	srli	r3,r16,16
    9cdc:	e0a3383a 	mul	r17,fp,r2
    9ce0:	100d883a 	mov	r6,r2
    9ce4:	1906b03a 	or	r3,r3,r4
    9ce8:	1c40042e 	bgeu	r3,r17,9cfc <__udivdi3+0x370>
    9cec:	1dc7883a 	add	r3,r3,r23
    9cf0:	10bfffc4 	addi	r2,r2,-1
    9cf4:	1dc0752e 	bgeu	r3,r23,9ecc <__udivdi3+0x540>
    9cf8:	100d883a 	mov	r6,r2
    9cfc:	1c63c83a 	sub	r17,r3,r17
    9d00:	900b883a 	mov	r5,r18
    9d04:	8809883a 	mov	r4,r17
    9d08:	d9800015 	stw	r6,0(sp)
    9d0c:	000a5980 	call	a598 <__umodsi3>
    9d10:	102d883a 	mov	r22,r2
    9d14:	8809883a 	mov	r4,r17
    9d18:	900b883a 	mov	r5,r18
    9d1c:	000a5340 	call	a534 <__udivsi3>
    9d20:	b02c943a 	slli	r22,r22,16
    9d24:	e089383a 	mul	r4,fp,r2
    9d28:	843fffcc 	andi	r16,r16,65535
    9d2c:	85a0b03a 	or	r16,r16,r22
    9d30:	d9800017 	ldw	r6,0(sp)
    9d34:	8100042e 	bgeu	r16,r4,9d48 <__udivdi3+0x3bc>
    9d38:	85e1883a 	add	r16,r16,r23
    9d3c:	10ffffc4 	addi	r3,r2,-1
    9d40:	85c05e2e 	bgeu	r16,r23,9ebc <__udivdi3+0x530>
    9d44:	1805883a 	mov	r2,r3
    9d48:	300c943a 	slli	r6,r6,16
    9d4c:	a17fffcc 	andi	r5,r20,65535
    9d50:	a028d43a 	srli	r20,r20,16
    9d54:	3084b03a 	or	r2,r6,r2
    9d58:	10ffffcc 	andi	r3,r2,65535
    9d5c:	100cd43a 	srli	r6,r2,16
    9d60:	194f383a 	mul	r7,r3,r5
    9d64:	1d07383a 	mul	r3,r3,r20
    9d68:	314b383a 	mul	r5,r6,r5
    9d6c:	3810d43a 	srli	r8,r7,16
    9d70:	8121c83a 	sub	r16,r16,r4
    9d74:	1947883a 	add	r3,r3,r5
    9d78:	40c7883a 	add	r3,r8,r3
    9d7c:	350d383a 	mul	r6,r6,r20
    9d80:	1940022e 	bgeu	r3,r5,9d8c <__udivdi3+0x400>
    9d84:	01000074 	movhi	r4,1
    9d88:	310d883a 	add	r6,r6,r4
    9d8c:	1828d43a 	srli	r20,r3,16
    9d90:	a18d883a 	add	r6,r20,r6
    9d94:	81803e36 	bltu	r16,r6,9e90 <__udivdi3+0x504>
    9d98:	81803826 	beq	r16,r6,9e7c <__udivdi3+0x4f0>
    9d9c:	0007883a 	mov	r3,zero
    9da0:	003fa206 	br	9c2c <__udivdi3+0x2a0>
    9da4:	88e2983a 	sll	r17,r17,r3
    9da8:	80a8d83a 	srl	r20,r16,r2
    9dac:	80e0983a 	sll	r16,r16,r3
    9db0:	882ad43a 	srli	r21,r17,16
    9db4:	9884d83a 	srl	r2,r19,r2
    9db8:	a009883a 	mov	r4,r20
    9dbc:	a80b883a 	mov	r5,r21
    9dc0:	142eb03a 	or	r23,r2,r16
    9dc4:	98e4983a 	sll	r18,r19,r3
    9dc8:	000a5980 	call	a598 <__umodsi3>
    9dcc:	a009883a 	mov	r4,r20
    9dd0:	a80b883a 	mov	r5,r21
    9dd4:	1021883a 	mov	r16,r2
    9dd8:	000a5340 	call	a534 <__udivsi3>
    9ddc:	1039883a 	mov	fp,r2
    9de0:	8d3fffcc 	andi	r20,r17,65535
    9de4:	8020943a 	slli	r16,r16,16
    9de8:	b804d43a 	srli	r2,r23,16
    9dec:	a72d383a 	mul	r22,r20,fp
    9df0:	1404b03a 	or	r2,r2,r16
    9df4:	1580062e 	bgeu	r2,r22,9e10 <__udivdi3+0x484>
    9df8:	1445883a 	add	r2,r2,r17
    9dfc:	e0ffffc4 	addi	r3,fp,-1
    9e00:	14403836 	bltu	r2,r17,9ee4 <__udivdi3+0x558>
    9e04:	1580372e 	bgeu	r2,r22,9ee4 <__udivdi3+0x558>
    9e08:	e73fff84 	addi	fp,fp,-2
    9e0c:	1445883a 	add	r2,r2,r17
    9e10:	15adc83a 	sub	r22,r2,r22
    9e14:	a80b883a 	mov	r5,r21
    9e18:	b009883a 	mov	r4,r22
    9e1c:	000a5980 	call	a598 <__umodsi3>
    9e20:	1027883a 	mov	r19,r2
    9e24:	b009883a 	mov	r4,r22
    9e28:	a80b883a 	mov	r5,r21
    9e2c:	000a5340 	call	a534 <__udivsi3>
    9e30:	9826943a 	slli	r19,r19,16
    9e34:	a0a1383a 	mul	r16,r20,r2
    9e38:	b93fffcc 	andi	r4,r23,65535
    9e3c:	24c8b03a 	or	r4,r4,r19
    9e40:	2400062e 	bgeu	r4,r16,9e5c <__udivdi3+0x4d0>
    9e44:	2449883a 	add	r4,r4,r17
    9e48:	10ffffc4 	addi	r3,r2,-1
    9e4c:	24402336 	bltu	r4,r17,9edc <__udivdi3+0x550>
    9e50:	2400222e 	bgeu	r4,r16,9edc <__udivdi3+0x550>
    9e54:	10bfff84 	addi	r2,r2,-2
    9e58:	2449883a 	add	r4,r4,r17
    9e5c:	e038943a 	slli	fp,fp,16
    9e60:	2421c83a 	sub	r16,r4,r16
    9e64:	e086b03a 	or	r3,fp,r2
    9e68:	003f4306 	br	9b78 <__udivdi3+0x1ec>
    9e6c:	2005883a 	mov	r2,r4
    9e70:	003f6906 	br	9c18 <__udivdi3+0x28c>
    9e74:	1805883a 	mov	r2,r3
    9e78:	003f0f06 	br	9ab8 <__udivdi3+0x12c>
    9e7c:	1806943a 	slli	r3,r3,16
    9e80:	9d66983a 	sll	r19,r19,r21
    9e84:	39ffffcc 	andi	r7,r7,65535
    9e88:	19c7883a 	add	r3,r3,r7
    9e8c:	98ffc32e 	bgeu	r19,r3,9d9c <__udivdi3+0x410>
    9e90:	10bfffc4 	addi	r2,r2,-1
    9e94:	003fc106 	br	9d9c <__udivdi3+0x410>
    9e98:	00800604 	movi	r2,24
    9e9c:	003f1106 	br	9ae4 <__udivdi3+0x158>
    9ea0:	00800604 	movi	r2,24
    9ea4:	003f2706 	br	9b44 <__udivdi3+0x1b8>
    9ea8:	00800604 	movi	r2,24
    9eac:	003ece06 	br	99e8 <__udivdi3+0x5c>
    9eb0:	0007883a 	mov	r3,zero
    9eb4:	00800044 	movi	r2,1
    9eb8:	003f5c06 	br	9c2c <__udivdi3+0x2a0>
    9ebc:	813fa12e 	bgeu	r16,r4,9d44 <__udivdi3+0x3b8>
    9ec0:	10bfff84 	addi	r2,r2,-2
    9ec4:	85e1883a 	add	r16,r16,r23
    9ec8:	003f9f06 	br	9d48 <__udivdi3+0x3bc>
    9ecc:	1c7f8a2e 	bgeu	r3,r17,9cf8 <__udivdi3+0x36c>
    9ed0:	31bfff84 	addi	r6,r6,-2
    9ed4:	1dc7883a 	add	r3,r3,r23
    9ed8:	003f8806 	br	9cfc <__udivdi3+0x370>
    9edc:	1805883a 	mov	r2,r3
    9ee0:	003fde06 	br	9e5c <__udivdi3+0x4d0>
    9ee4:	1839883a 	mov	fp,r3
    9ee8:	003fc906 	br	9e10 <__udivdi3+0x484>
    9eec:	b5bfff84 	addi	r22,r22,-2
    9ef0:	2449883a 	add	r4,r4,r17
    9ef4:	003f3406 	br	9bc8 <__udivdi3+0x23c>
    9ef8:	b5bfff84 	addi	r22,r22,-2
    9efc:	1445883a 	add	r2,r2,r17
    9f00:	003edb06 	br	9a70 <__udivdi3+0xe4>

00009f04 <__umoddi3>:
    9f04:	defff404 	addi	sp,sp,-48
    9f08:	df000a15 	stw	fp,40(sp)
    9f0c:	dc400315 	stw	r17,12(sp)
    9f10:	dc000215 	stw	r16,8(sp)
    9f14:	dfc00b15 	stw	ra,44(sp)
    9f18:	ddc00915 	stw	r23,36(sp)
    9f1c:	dd800815 	stw	r22,32(sp)
    9f20:	dd400715 	stw	r21,28(sp)
    9f24:	dd000615 	stw	r20,24(sp)
    9f28:	dcc00515 	stw	r19,20(sp)
    9f2c:	dc800415 	stw	r18,16(sp)
    9f30:	2021883a 	mov	r16,r4
    9f34:	2823883a 	mov	r17,r5
    9f38:	2839883a 	mov	fp,r5
    9f3c:	38003c1e 	bne	r7,zero,a030 <__umoddi3+0x12c>
    9f40:	3027883a 	mov	r19,r6
    9f44:	2029883a 	mov	r20,r4
    9f48:	2980512e 	bgeu	r5,r6,a090 <__umoddi3+0x18c>
    9f4c:	00bfffd4 	movui	r2,65535
    9f50:	11809a36 	bltu	r2,r6,a1bc <__umoddi3+0x2b8>
    9f54:	01003fc4 	movi	r4,255
    9f58:	2189803a 	cmpltu	r4,r4,r6
    9f5c:	200890fa 	slli	r4,r4,3
    9f60:	3104d83a 	srl	r2,r6,r4
    9f64:	00c00074 	movhi	r3,1
    9f68:	18fec904 	addi	r3,r3,-1244
    9f6c:	1885883a 	add	r2,r3,r2
    9f70:	10c00003 	ldbu	r3,0(r2)
    9f74:	00800804 	movi	r2,32
    9f78:	1909883a 	add	r4,r3,r4
    9f7c:	1125c83a 	sub	r18,r2,r4
    9f80:	90000526 	beq	r18,zero,9f98 <__umoddi3+0x94>
    9f84:	8ca2983a 	sll	r17,r17,r18
    9f88:	8108d83a 	srl	r4,r16,r4
    9f8c:	34a6983a 	sll	r19,r6,r18
    9f90:	84a8983a 	sll	r20,r16,r18
    9f94:	2478b03a 	or	fp,r4,r17
    9f98:	982ed43a 	srli	r23,r19,16
    9f9c:	e009883a 	mov	r4,fp
    9fa0:	9dbfffcc 	andi	r22,r19,65535
    9fa4:	b80b883a 	mov	r5,r23
    9fa8:	000a5980 	call	a598 <__umodsi3>
    9fac:	e009883a 	mov	r4,fp
    9fb0:	b80b883a 	mov	r5,r23
    9fb4:	102b883a 	mov	r21,r2
    9fb8:	000a5340 	call	a534 <__udivsi3>
    9fbc:	a806943a 	slli	r3,r21,16
    9fc0:	a008d43a 	srli	r4,r20,16
    9fc4:	b085383a 	mul	r2,r22,r2
    9fc8:	20c8b03a 	or	r4,r4,r3
    9fcc:	2080032e 	bgeu	r4,r2,9fdc <__umoddi3+0xd8>
    9fd0:	24c9883a 	add	r4,r4,r19
    9fd4:	24c00136 	bltu	r4,r19,9fdc <__umoddi3+0xd8>
    9fd8:	20811036 	bltu	r4,r2,a41c <__umoddi3+0x518>
    9fdc:	20abc83a 	sub	r21,r4,r2
    9fe0:	b80b883a 	mov	r5,r23
    9fe4:	a809883a 	mov	r4,r21
    9fe8:	000a5980 	call	a598 <__umodsi3>
    9fec:	1023883a 	mov	r17,r2
    9ff0:	b80b883a 	mov	r5,r23
    9ff4:	a809883a 	mov	r4,r21
    9ff8:	000a5340 	call	a534 <__udivsi3>
    9ffc:	8822943a 	slli	r17,r17,16
    a000:	b085383a 	mul	r2,r22,r2
    a004:	a0ffffcc 	andi	r3,r20,65535
    a008:	1c46b03a 	or	r3,r3,r17
    a00c:	1880042e 	bgeu	r3,r2,a020 <__umoddi3+0x11c>
    a010:	1cc7883a 	add	r3,r3,r19
    a014:	1cc00236 	bltu	r3,r19,a020 <__umoddi3+0x11c>
    a018:	1880012e 	bgeu	r3,r2,a020 <__umoddi3+0x11c>
    a01c:	1cc7883a 	add	r3,r3,r19
    a020:	1885c83a 	sub	r2,r3,r2
    a024:	1484d83a 	srl	r2,r2,r18
    a028:	0007883a 	mov	r3,zero
    a02c:	00004f06 	br	a16c <__umoddi3+0x268>
    a030:	29c04c36 	bltu	r5,r7,a164 <__umoddi3+0x260>
    a034:	00bfffd4 	movui	r2,65535
    a038:	11c0582e 	bgeu	r2,r7,a19c <__umoddi3+0x298>
    a03c:	00804034 	movhi	r2,256
    a040:	10bfffc4 	addi	r2,r2,-1
    a044:	11c0e736 	bltu	r2,r7,a3e4 <__umoddi3+0x4e0>
    a048:	01000404 	movi	r4,16
    a04c:	3904d83a 	srl	r2,r7,r4
    a050:	00c00074 	movhi	r3,1
    a054:	18fec904 	addi	r3,r3,-1244
    a058:	1885883a 	add	r2,r3,r2
    a05c:	14c00003 	ldbu	r19,0(r2)
    a060:	00c00804 	movi	r3,32
    a064:	9927883a 	add	r19,r19,r4
    a068:	1ce9c83a 	sub	r20,r3,r19
    a06c:	a000581e 	bne	r20,zero,a1d0 <__umoddi3+0x2cc>
    a070:	3c400136 	bltu	r7,r17,a078 <__umoddi3+0x174>
    a074:	8180eb36 	bltu	r16,r6,a424 <__umoddi3+0x520>
    a078:	8185c83a 	sub	r2,r16,r6
    a07c:	89e3c83a 	sub	r17,r17,r7
    a080:	8089803a 	cmpltu	r4,r16,r2
    a084:	8939c83a 	sub	fp,r17,r4
    a088:	e007883a 	mov	r3,fp
    a08c:	00003706 	br	a16c <__umoddi3+0x268>
    a090:	3000041e 	bne	r6,zero,a0a4 <__umoddi3+0x1a0>
    a094:	000b883a 	mov	r5,zero
    a098:	01000044 	movi	r4,1
    a09c:	000a5340 	call	a534 <__udivsi3>
    a0a0:	1027883a 	mov	r19,r2
    a0a4:	00bfffd4 	movui	r2,65535
    a0a8:	14c0402e 	bgeu	r2,r19,a1ac <__umoddi3+0x2a8>
    a0ac:	00804034 	movhi	r2,256
    a0b0:	10bfffc4 	addi	r2,r2,-1
    a0b4:	14c0cd36 	bltu	r2,r19,a3ec <__umoddi3+0x4e8>
    a0b8:	00800404 	movi	r2,16
    a0bc:	9886d83a 	srl	r3,r19,r2
    a0c0:	01000074 	movhi	r4,1
    a0c4:	213ec904 	addi	r4,r4,-1244
    a0c8:	20c7883a 	add	r3,r4,r3
    a0cc:	18c00003 	ldbu	r3,0(r3)
    a0d0:	1887883a 	add	r3,r3,r2
    a0d4:	00800804 	movi	r2,32
    a0d8:	10e5c83a 	sub	r18,r2,r3
    a0dc:	9000901e 	bne	r18,zero,a320 <__umoddi3+0x41c>
    a0e0:	982cd43a 	srli	r22,r19,16
    a0e4:	8ce3c83a 	sub	r17,r17,r19
    a0e8:	9d7fffcc 	andi	r21,r19,65535
    a0ec:	b00b883a 	mov	r5,r22
    a0f0:	8809883a 	mov	r4,r17
    a0f4:	000a5980 	call	a598 <__umodsi3>
    a0f8:	8809883a 	mov	r4,r17
    a0fc:	b00b883a 	mov	r5,r22
    a100:	1021883a 	mov	r16,r2
    a104:	000a5340 	call	a534 <__udivsi3>
    a108:	8006943a 	slli	r3,r16,16
    a10c:	a008d43a 	srli	r4,r20,16
    a110:	1545383a 	mul	r2,r2,r21
    a114:	20c8b03a 	or	r4,r4,r3
    a118:	2080042e 	bgeu	r4,r2,a12c <__umoddi3+0x228>
    a11c:	24c9883a 	add	r4,r4,r19
    a120:	24c00236 	bltu	r4,r19,a12c <__umoddi3+0x228>
    a124:	2080012e 	bgeu	r4,r2,a12c <__umoddi3+0x228>
    a128:	24c9883a 	add	r4,r4,r19
    a12c:	20a1c83a 	sub	r16,r4,r2
    a130:	b00b883a 	mov	r5,r22
    a134:	8009883a 	mov	r4,r16
    a138:	000a5980 	call	a598 <__umodsi3>
    a13c:	1023883a 	mov	r17,r2
    a140:	b00b883a 	mov	r5,r22
    a144:	8009883a 	mov	r4,r16
    a148:	000a5340 	call	a534 <__udivsi3>
    a14c:	8822943a 	slli	r17,r17,16
    a150:	1545383a 	mul	r2,r2,r21
    a154:	a53fffcc 	andi	r20,r20,65535
    a158:	a446b03a 	or	r3,r20,r17
    a15c:	18bfb02e 	bgeu	r3,r2,a020 <__umoddi3+0x11c>
    a160:	003fab06 	br	a010 <__umoddi3+0x10c>
    a164:	2005883a 	mov	r2,r4
    a168:	2807883a 	mov	r3,r5
    a16c:	dfc00b17 	ldw	ra,44(sp)
    a170:	df000a17 	ldw	fp,40(sp)
    a174:	ddc00917 	ldw	r23,36(sp)
    a178:	dd800817 	ldw	r22,32(sp)
    a17c:	dd400717 	ldw	r21,28(sp)
    a180:	dd000617 	ldw	r20,24(sp)
    a184:	dcc00517 	ldw	r19,20(sp)
    a188:	dc800417 	ldw	r18,16(sp)
    a18c:	dc400317 	ldw	r17,12(sp)
    a190:	dc000217 	ldw	r16,8(sp)
    a194:	dec00c04 	addi	sp,sp,48
    a198:	f800283a 	ret
    a19c:	04c03fc4 	movi	r19,255
    a1a0:	99c9803a 	cmpltu	r4,r19,r7
    a1a4:	200890fa 	slli	r4,r4,3
    a1a8:	003fa806 	br	a04c <__umoddi3+0x148>
    a1ac:	00803fc4 	movi	r2,255
    a1b0:	14c5803a 	cmpltu	r2,r2,r19
    a1b4:	100490fa 	slli	r2,r2,3
    a1b8:	003fc006 	br	a0bc <__umoddi3+0x1b8>
    a1bc:	00804034 	movhi	r2,256
    a1c0:	10bfffc4 	addi	r2,r2,-1
    a1c4:	11808b36 	bltu	r2,r6,a3f4 <__umoddi3+0x4f0>
    a1c8:	01000404 	movi	r4,16
    a1cc:	003f6406 	br	9f60 <__umoddi3+0x5c>
    a1d0:	34c4d83a 	srl	r2,r6,r19
    a1d4:	3d0e983a 	sll	r7,r7,r20
    a1d8:	8cf8d83a 	srl	fp,r17,r19
    a1dc:	8d10983a 	sll	r8,r17,r20
    a1e0:	38aab03a 	or	r21,r7,r2
    a1e4:	a82cd43a 	srli	r22,r21,16
    a1e8:	84e2d83a 	srl	r17,r16,r19
    a1ec:	e009883a 	mov	r4,fp
    a1f0:	b00b883a 	mov	r5,r22
    a1f4:	8a22b03a 	or	r17,r17,r8
    a1f8:	3524983a 	sll	r18,r6,r20
    a1fc:	000a5980 	call	a598 <__umodsi3>
    a200:	e009883a 	mov	r4,fp
    a204:	b00b883a 	mov	r5,r22
    a208:	102f883a 	mov	r23,r2
    a20c:	000a5340 	call	a534 <__udivsi3>
    a210:	100d883a 	mov	r6,r2
    a214:	b808943a 	slli	r4,r23,16
    a218:	aa3fffcc 	andi	r8,r21,65535
    a21c:	8804d43a 	srli	r2,r17,16
    a220:	41af383a 	mul	r23,r8,r6
    a224:	8520983a 	sll	r16,r16,r20
    a228:	1104b03a 	or	r2,r2,r4
    a22c:	15c0042e 	bgeu	r2,r23,a240 <__umoddi3+0x33c>
    a230:	1545883a 	add	r2,r2,r21
    a234:	30ffffc4 	addi	r3,r6,-1
    a238:	1540742e 	bgeu	r2,r21,a40c <__umoddi3+0x508>
    a23c:	180d883a 	mov	r6,r3
    a240:	15efc83a 	sub	r23,r2,r23
    a244:	b00b883a 	mov	r5,r22
    a248:	b809883a 	mov	r4,r23
    a24c:	d9800115 	stw	r6,4(sp)
    a250:	da000015 	stw	r8,0(sp)
    a254:	000a5980 	call	a598 <__umodsi3>
    a258:	b00b883a 	mov	r5,r22
    a25c:	b809883a 	mov	r4,r23
    a260:	1039883a 	mov	fp,r2
    a264:	000a5340 	call	a534 <__udivsi3>
    a268:	da000017 	ldw	r8,0(sp)
    a26c:	e038943a 	slli	fp,fp,16
    a270:	100b883a 	mov	r5,r2
    a274:	4089383a 	mul	r4,r8,r2
    a278:	8a3fffcc 	andi	r8,r17,65535
    a27c:	4710b03a 	or	r8,r8,fp
    a280:	d9800117 	ldw	r6,4(sp)
    a284:	4100042e 	bgeu	r8,r4,a298 <__umoddi3+0x394>
    a288:	4551883a 	add	r8,r8,r21
    a28c:	10bfffc4 	addi	r2,r2,-1
    a290:	45405a2e 	bgeu	r8,r21,a3fc <__umoddi3+0x4f8>
    a294:	100b883a 	mov	r5,r2
    a298:	300c943a 	slli	r6,r6,16
    a29c:	91ffffcc 	andi	r7,r18,65535
    a2a0:	9004d43a 	srli	r2,r18,16
    a2a4:	314cb03a 	or	r6,r6,r5
    a2a8:	317fffcc 	andi	r5,r6,65535
    a2ac:	300cd43a 	srli	r6,r6,16
    a2b0:	29d3383a 	mul	r9,r5,r7
    a2b4:	288b383a 	mul	r5,r5,r2
    a2b8:	31cf383a 	mul	r7,r6,r7
    a2bc:	4806d43a 	srli	r3,r9,16
    a2c0:	4111c83a 	sub	r8,r8,r4
    a2c4:	29cb883a 	add	r5,r5,r7
    a2c8:	194b883a 	add	r5,r3,r5
    a2cc:	3085383a 	mul	r2,r6,r2
    a2d0:	29c0022e 	bgeu	r5,r7,a2dc <__umoddi3+0x3d8>
    a2d4:	00c00074 	movhi	r3,1
    a2d8:	10c5883a 	add	r2,r2,r3
    a2dc:	2808d43a 	srli	r4,r5,16
    a2e0:	280a943a 	slli	r5,r5,16
    a2e4:	4a7fffcc 	andi	r9,r9,65535
    a2e8:	2085883a 	add	r2,r4,r2
    a2ec:	2a4b883a 	add	r5,r5,r9
    a2f0:	40803636 	bltu	r8,r2,a3cc <__umoddi3+0x4c8>
    a2f4:	40804d26 	beq	r8,r2,a42c <__umoddi3+0x528>
    a2f8:	4089c83a 	sub	r4,r8,r2
    a2fc:	280f883a 	mov	r7,r5
    a300:	81cfc83a 	sub	r7,r16,r7
    a304:	81c7803a 	cmpltu	r3,r16,r7
    a308:	20c7c83a 	sub	r3,r4,r3
    a30c:	1cc4983a 	sll	r2,r3,r19
    a310:	3d0ed83a 	srl	r7,r7,r20
    a314:	1d06d83a 	srl	r3,r3,r20
    a318:	11c4b03a 	or	r2,r2,r7
    a31c:	003f9306 	br	a16c <__umoddi3+0x268>
    a320:	9ca6983a 	sll	r19,r19,r18
    a324:	88e8d83a 	srl	r20,r17,r3
    a328:	80c4d83a 	srl	r2,r16,r3
    a32c:	982cd43a 	srli	r22,r19,16
    a330:	8ca2983a 	sll	r17,r17,r18
    a334:	a009883a 	mov	r4,r20
    a338:	b00b883a 	mov	r5,r22
    a33c:	1478b03a 	or	fp,r2,r17
    a340:	000a5980 	call	a598 <__umodsi3>
    a344:	a009883a 	mov	r4,r20
    a348:	b00b883a 	mov	r5,r22
    a34c:	1023883a 	mov	r17,r2
    a350:	000a5340 	call	a534 <__udivsi3>
    a354:	9d7fffcc 	andi	r21,r19,65535
    a358:	880a943a 	slli	r5,r17,16
    a35c:	e008d43a 	srli	r4,fp,16
    a360:	a885383a 	mul	r2,r21,r2
    a364:	84a8983a 	sll	r20,r16,r18
    a368:	2148b03a 	or	r4,r4,r5
    a36c:	2080042e 	bgeu	r4,r2,a380 <__umoddi3+0x47c>
    a370:	24c9883a 	add	r4,r4,r19
    a374:	24c00236 	bltu	r4,r19,a380 <__umoddi3+0x47c>
    a378:	2080012e 	bgeu	r4,r2,a380 <__umoddi3+0x47c>
    a37c:	24c9883a 	add	r4,r4,r19
    a380:	20a3c83a 	sub	r17,r4,r2
    a384:	b00b883a 	mov	r5,r22
    a388:	8809883a 	mov	r4,r17
    a38c:	000a5980 	call	a598 <__umodsi3>
    a390:	102f883a 	mov	r23,r2
    a394:	8809883a 	mov	r4,r17
    a398:	b00b883a 	mov	r5,r22
    a39c:	000a5340 	call	a534 <__udivsi3>
    a3a0:	b82e943a 	slli	r23,r23,16
    a3a4:	a885383a 	mul	r2,r21,r2
    a3a8:	e13fffcc 	andi	r4,fp,65535
    a3ac:	25c8b03a 	or	r4,r4,r23
    a3b0:	2080042e 	bgeu	r4,r2,a3c4 <__umoddi3+0x4c0>
    a3b4:	24c9883a 	add	r4,r4,r19
    a3b8:	24c00236 	bltu	r4,r19,a3c4 <__umoddi3+0x4c0>
    a3bc:	2080012e 	bgeu	r4,r2,a3c4 <__umoddi3+0x4c0>
    a3c0:	24c9883a 	add	r4,r4,r19
    a3c4:	20a3c83a 	sub	r17,r4,r2
    a3c8:	003f4806 	br	a0ec <__umoddi3+0x1e8>
    a3cc:	2c8fc83a 	sub	r7,r5,r18
    a3d0:	1545c83a 	sub	r2,r2,r21
    a3d4:	29cb803a 	cmpltu	r5,r5,r7
    a3d8:	1145c83a 	sub	r2,r2,r5
    a3dc:	4089c83a 	sub	r4,r8,r2
    a3e0:	003fc706 	br	a300 <__umoddi3+0x3fc>
    a3e4:	01000604 	movi	r4,24
    a3e8:	003f1806 	br	a04c <__umoddi3+0x148>
    a3ec:	00800604 	movi	r2,24
    a3f0:	003f3206 	br	a0bc <__umoddi3+0x1b8>
    a3f4:	01000604 	movi	r4,24
    a3f8:	003ed906 	br	9f60 <__umoddi3+0x5c>
    a3fc:	413fa52e 	bgeu	r8,r4,a294 <__umoddi3+0x390>
    a400:	297fff84 	addi	r5,r5,-2
    a404:	4551883a 	add	r8,r8,r21
    a408:	003fa306 	br	a298 <__umoddi3+0x394>
    a40c:	15ff8b2e 	bgeu	r2,r23,a23c <__umoddi3+0x338>
    a410:	31bfff84 	addi	r6,r6,-2
    a414:	1545883a 	add	r2,r2,r21
    a418:	003f8906 	br	a240 <__umoddi3+0x33c>
    a41c:	24c9883a 	add	r4,r4,r19
    a420:	003eee06 	br	9fdc <__umoddi3+0xd8>
    a424:	8005883a 	mov	r2,r16
    a428:	003f1706 	br	a088 <__umoddi3+0x184>
    a42c:	817fe736 	bltu	r16,r5,a3cc <__umoddi3+0x4c8>
    a430:	280f883a 	mov	r7,r5
    a434:	0009883a 	mov	r4,zero
    a438:	003fb106 	br	a300 <__umoddi3+0x3fc>

0000a43c <__divsi3>:
    a43c:	20001b16 	blt	r4,zero,a4ac <__divsi3+0x70>
    a440:	000f883a 	mov	r7,zero
    a444:	28001616 	blt	r5,zero,a4a0 <__divsi3+0x64>
    a448:	200d883a 	mov	r6,r4
    a44c:	29001a2e 	bgeu	r5,r4,a4b8 <__divsi3+0x7c>
    a450:	00800804 	movi	r2,32
    a454:	00c00044 	movi	r3,1
    a458:	00000106 	br	a460 <__divsi3+0x24>
    a45c:	10000d26 	beq	r2,zero,a494 <__divsi3+0x58>
    a460:	294b883a 	add	r5,r5,r5
    a464:	10bfffc4 	addi	r2,r2,-1
    a468:	18c7883a 	add	r3,r3,r3
    a46c:	293ffb36 	bltu	r5,r4,a45c <__divsi3+0x20>
    a470:	0005883a 	mov	r2,zero
    a474:	18000726 	beq	r3,zero,a494 <__divsi3+0x58>
    a478:	0005883a 	mov	r2,zero
    a47c:	31400236 	bltu	r6,r5,a488 <__divsi3+0x4c>
    a480:	314dc83a 	sub	r6,r6,r5
    a484:	10c4b03a 	or	r2,r2,r3
    a488:	1806d07a 	srli	r3,r3,1
    a48c:	280ad07a 	srli	r5,r5,1
    a490:	183ffa1e 	bne	r3,zero,a47c <__divsi3+0x40>
    a494:	38000126 	beq	r7,zero,a49c <__divsi3+0x60>
    a498:	0085c83a 	sub	r2,zero,r2
    a49c:	f800283a 	ret
    a4a0:	014bc83a 	sub	r5,zero,r5
    a4a4:	39c0005c 	xori	r7,r7,1
    a4a8:	003fe706 	br	a448 <__divsi3+0xc>
    a4ac:	0109c83a 	sub	r4,zero,r4
    a4b0:	01c00044 	movi	r7,1
    a4b4:	003fe306 	br	a444 <__divsi3+0x8>
    a4b8:	00c00044 	movi	r3,1
    a4bc:	003fee06 	br	a478 <__divsi3+0x3c>

0000a4c0 <__modsi3>:
    a4c0:	20001716 	blt	r4,zero,a520 <__modsi3+0x60>
    a4c4:	000f883a 	mov	r7,zero
    a4c8:	2005883a 	mov	r2,r4
    a4cc:	28001216 	blt	r5,zero,a518 <__modsi3+0x58>
    a4d0:	2900162e 	bgeu	r5,r4,a52c <__modsi3+0x6c>
    a4d4:	01800804 	movi	r6,32
    a4d8:	00c00044 	movi	r3,1
    a4dc:	00000106 	br	a4e4 <__modsi3+0x24>
    a4e0:	30000a26 	beq	r6,zero,a50c <__modsi3+0x4c>
    a4e4:	294b883a 	add	r5,r5,r5
    a4e8:	31bfffc4 	addi	r6,r6,-1
    a4ec:	18c7883a 	add	r3,r3,r3
    a4f0:	293ffb36 	bltu	r5,r4,a4e0 <__modsi3+0x20>
    a4f4:	18000526 	beq	r3,zero,a50c <__modsi3+0x4c>
    a4f8:	1806d07a 	srli	r3,r3,1
    a4fc:	11400136 	bltu	r2,r5,a504 <__modsi3+0x44>
    a500:	1145c83a 	sub	r2,r2,r5
    a504:	280ad07a 	srli	r5,r5,1
    a508:	183ffb1e 	bne	r3,zero,a4f8 <__modsi3+0x38>
    a50c:	38000126 	beq	r7,zero,a514 <__modsi3+0x54>
    a510:	0085c83a 	sub	r2,zero,r2
    a514:	f800283a 	ret
    a518:	014bc83a 	sub	r5,zero,r5
    a51c:	003fec06 	br	a4d0 <__modsi3+0x10>
    a520:	0109c83a 	sub	r4,zero,r4
    a524:	01c00044 	movi	r7,1
    a528:	003fe706 	br	a4c8 <__modsi3+0x8>
    a52c:	00c00044 	movi	r3,1
    a530:	003ff106 	br	a4f8 <__modsi3+0x38>

0000a534 <__udivsi3>:
    a534:	200d883a 	mov	r6,r4
    a538:	2900152e 	bgeu	r5,r4,a590 <__udivsi3+0x5c>
    a53c:	28001416 	blt	r5,zero,a590 <__udivsi3+0x5c>
    a540:	00800804 	movi	r2,32
    a544:	00c00044 	movi	r3,1
    a548:	00000206 	br	a554 <__udivsi3+0x20>
    a54c:	10000e26 	beq	r2,zero,a588 <__udivsi3+0x54>
    a550:	28000516 	blt	r5,zero,a568 <__udivsi3+0x34>
    a554:	294b883a 	add	r5,r5,r5
    a558:	10bfffc4 	addi	r2,r2,-1
    a55c:	18c7883a 	add	r3,r3,r3
    a560:	293ffa36 	bltu	r5,r4,a54c <__udivsi3+0x18>
    a564:	18000826 	beq	r3,zero,a588 <__udivsi3+0x54>
    a568:	0005883a 	mov	r2,zero
    a56c:	31400236 	bltu	r6,r5,a578 <__udivsi3+0x44>
    a570:	314dc83a 	sub	r6,r6,r5
    a574:	10c4b03a 	or	r2,r2,r3
    a578:	1806d07a 	srli	r3,r3,1
    a57c:	280ad07a 	srli	r5,r5,1
    a580:	183ffa1e 	bne	r3,zero,a56c <__udivsi3+0x38>
    a584:	f800283a 	ret
    a588:	0005883a 	mov	r2,zero
    a58c:	f800283a 	ret
    a590:	00c00044 	movi	r3,1
    a594:	003ff406 	br	a568 <__udivsi3+0x34>

0000a598 <__umodsi3>:
    a598:	2005883a 	mov	r2,r4
    a59c:	2900122e 	bgeu	r5,r4,a5e8 <__umodsi3+0x50>
    a5a0:	28001116 	blt	r5,zero,a5e8 <__umodsi3+0x50>
    a5a4:	01800804 	movi	r6,32
    a5a8:	00c00044 	movi	r3,1
    a5ac:	00000206 	br	a5b8 <__umodsi3+0x20>
    a5b0:	30000c26 	beq	r6,zero,a5e4 <__umodsi3+0x4c>
    a5b4:	28000516 	blt	r5,zero,a5cc <__umodsi3+0x34>
    a5b8:	294b883a 	add	r5,r5,r5
    a5bc:	31bfffc4 	addi	r6,r6,-1
    a5c0:	18c7883a 	add	r3,r3,r3
    a5c4:	293ffa36 	bltu	r5,r4,a5b0 <__umodsi3+0x18>
    a5c8:	18000626 	beq	r3,zero,a5e4 <__umodsi3+0x4c>
    a5cc:	1806d07a 	srli	r3,r3,1
    a5d0:	11400136 	bltu	r2,r5,a5d8 <__umodsi3+0x40>
    a5d4:	1145c83a 	sub	r2,r2,r5
    a5d8:	280ad07a 	srli	r5,r5,1
    a5dc:	183ffb1e 	bne	r3,zero,a5cc <__umodsi3+0x34>
    a5e0:	f800283a 	ret
    a5e4:	f800283a 	ret
    a5e8:	00c00044 	movi	r3,1
    a5ec:	003ff706 	br	a5cc <__umodsi3+0x34>

0000a5f0 <__adddf3>:
    a5f0:	02c00434 	movhi	r11,16
    a5f4:	5affffc4 	addi	r11,r11,-1
    a5f8:	2806d7fa 	srli	r3,r5,31
    a5fc:	2ad4703a 	and	r10,r5,r11
    a600:	3ad2703a 	and	r9,r7,r11
    a604:	3804d53a 	srli	r2,r7,20
    a608:	3018d77a 	srli	r12,r6,29
    a60c:	280ad53a 	srli	r5,r5,20
    a610:	501490fa 	slli	r10,r10,3
    a614:	2010d77a 	srli	r8,r4,29
    a618:	481290fa 	slli	r9,r9,3
    a61c:	380ed7fa 	srli	r7,r7,31
    a620:	defffb04 	addi	sp,sp,-20
    a624:	dc800215 	stw	r18,8(sp)
    a628:	dc400115 	stw	r17,4(sp)
    a62c:	dc000015 	stw	r16,0(sp)
    a630:	dfc00415 	stw	ra,16(sp)
    a634:	dcc00315 	stw	r19,12(sp)
    a638:	1c803fcc 	andi	r18,r3,255
    a63c:	2c01ffcc 	andi	r16,r5,2047
    a640:	5210b03a 	or	r8,r10,r8
    a644:	202290fa 	slli	r17,r4,3
    a648:	1081ffcc 	andi	r2,r2,2047
    a64c:	4b12b03a 	or	r9,r9,r12
    a650:	300c90fa 	slli	r6,r6,3
    a654:	91c07526 	beq	r18,r7,a82c <__adddf3+0x23c>
    a658:	8087c83a 	sub	r3,r16,r2
    a65c:	00c0ab0e 	bge	zero,r3,a90c <__adddf3+0x31c>
    a660:	10002a1e 	bne	r2,zero,a70c <__adddf3+0x11c>
    a664:	4984b03a 	or	r2,r9,r6
    a668:	1000961e 	bne	r2,zero,a8c4 <__adddf3+0x2d4>
    a66c:	888001cc 	andi	r2,r17,7
    a670:	10000726 	beq	r2,zero,a690 <__adddf3+0xa0>
    a674:	888003cc 	andi	r2,r17,15
    a678:	00c00104 	movi	r3,4
    a67c:	10c00426 	beq	r2,r3,a690 <__adddf3+0xa0>
    a680:	88c7883a 	add	r3,r17,r3
    a684:	1c63803a 	cmpltu	r17,r3,r17
    a688:	4451883a 	add	r8,r8,r17
    a68c:	1823883a 	mov	r17,r3
    a690:	4080202c 	andhi	r2,r8,128
    a694:	10005926 	beq	r2,zero,a7fc <__adddf3+0x20c>
    a698:	84000044 	addi	r16,r16,1
    a69c:	0081ffc4 	movi	r2,2047
    a6a0:	8080ba26 	beq	r16,r2,a98c <__adddf3+0x39c>
    a6a4:	00bfe034 	movhi	r2,65408
    a6a8:	10bfffc4 	addi	r2,r2,-1
    a6ac:	4090703a 	and	r8,r8,r2
    a6b0:	4004977a 	slli	r2,r8,29
    a6b4:	4010927a 	slli	r8,r8,9
    a6b8:	8822d0fa 	srli	r17,r17,3
    a6bc:	8401ffcc 	andi	r16,r16,2047
    a6c0:	4010d33a 	srli	r8,r8,12
    a6c4:	9007883a 	mov	r3,r18
    a6c8:	1444b03a 	or	r2,r2,r17
    a6cc:	8401ffcc 	andi	r16,r16,2047
    a6d0:	8020953a 	slli	r16,r16,20
    a6d4:	18c03fcc 	andi	r3,r3,255
    a6d8:	01000434 	movhi	r4,16
    a6dc:	213fffc4 	addi	r4,r4,-1
    a6e0:	180697fa 	slli	r3,r3,31
    a6e4:	4110703a 	and	r8,r8,r4
    a6e8:	4410b03a 	or	r8,r8,r16
    a6ec:	40c6b03a 	or	r3,r8,r3
    a6f0:	dfc00417 	ldw	ra,16(sp)
    a6f4:	dcc00317 	ldw	r19,12(sp)
    a6f8:	dc800217 	ldw	r18,8(sp)
    a6fc:	dc400117 	ldw	r17,4(sp)
    a700:	dc000017 	ldw	r16,0(sp)
    a704:	dec00504 	addi	sp,sp,20
    a708:	f800283a 	ret
    a70c:	0081ffc4 	movi	r2,2047
    a710:	80bfd626 	beq	r16,r2,a66c <__adddf3+0x7c>
    a714:	4a402034 	orhi	r9,r9,128
    a718:	00800e04 	movi	r2,56
    a71c:	10c09f16 	blt	r2,r3,a99c <__adddf3+0x3ac>
    a720:	008007c4 	movi	r2,31
    a724:	10c0c216 	blt	r2,r3,aa30 <__adddf3+0x440>
    a728:	00800804 	movi	r2,32
    a72c:	10c5c83a 	sub	r2,r2,r3
    a730:	488a983a 	sll	r5,r9,r2
    a734:	30c8d83a 	srl	r4,r6,r3
    a738:	3084983a 	sll	r2,r6,r2
    a73c:	48c6d83a 	srl	r3,r9,r3
    a740:	290cb03a 	or	r6,r5,r4
    a744:	1004c03a 	cmpne	r2,r2,zero
    a748:	308cb03a 	or	r6,r6,r2
    a74c:	898dc83a 	sub	r6,r17,r6
    a750:	89a3803a 	cmpltu	r17,r17,r6
    a754:	40d1c83a 	sub	r8,r8,r3
    a758:	4451c83a 	sub	r8,r8,r17
    a75c:	3023883a 	mov	r17,r6
    a760:	4080202c 	andhi	r2,r8,128
    a764:	10002326 	beq	r2,zero,a7f4 <__adddf3+0x204>
    a768:	04c02034 	movhi	r19,128
    a76c:	9cffffc4 	addi	r19,r19,-1
    a770:	44e6703a 	and	r19,r8,r19
    a774:	98007626 	beq	r19,zero,a950 <__adddf3+0x360>
    a778:	9809883a 	mov	r4,r19
    a77c:	000cbf40 	call	cbf4 <__clzsi2>
    a780:	10fffe04 	addi	r3,r2,-8
    a784:	010007c4 	movi	r4,31
    a788:	20c07716 	blt	r4,r3,a968 <__adddf3+0x378>
    a78c:	00800804 	movi	r2,32
    a790:	10c5c83a 	sub	r2,r2,r3
    a794:	8884d83a 	srl	r2,r17,r2
    a798:	98d0983a 	sll	r8,r19,r3
    a79c:	88e2983a 	sll	r17,r17,r3
    a7a0:	1204b03a 	or	r2,r2,r8
    a7a4:	1c007416 	blt	r3,r16,a978 <__adddf3+0x388>
    a7a8:	1c21c83a 	sub	r16,r3,r16
    a7ac:	82000044 	addi	r8,r16,1
    a7b0:	00c007c4 	movi	r3,31
    a7b4:	1a009116 	blt	r3,r8,a9fc <__adddf3+0x40c>
    a7b8:	00c00804 	movi	r3,32
    a7bc:	1a07c83a 	sub	r3,r3,r8
    a7c0:	8a08d83a 	srl	r4,r17,r8
    a7c4:	88e2983a 	sll	r17,r17,r3
    a7c8:	10c6983a 	sll	r3,r2,r3
    a7cc:	1210d83a 	srl	r8,r2,r8
    a7d0:	8804c03a 	cmpne	r2,r17,zero
    a7d4:	1906b03a 	or	r3,r3,r4
    a7d8:	18a2b03a 	or	r17,r3,r2
    a7dc:	0021883a 	mov	r16,zero
    a7e0:	003fa206 	br	a66c <__adddf3+0x7c>
    a7e4:	1890b03a 	or	r8,r3,r2
    a7e8:	40017d26 	beq	r8,zero,ade0 <__adddf3+0x7f0>
    a7ec:	1011883a 	mov	r8,r2
    a7f0:	1823883a 	mov	r17,r3
    a7f4:	888001cc 	andi	r2,r17,7
    a7f8:	103f9e1e 	bne	r2,zero,a674 <__adddf3+0x84>
    a7fc:	4004977a 	slli	r2,r8,29
    a800:	8822d0fa 	srli	r17,r17,3
    a804:	4010d0fa 	srli	r8,r8,3
    a808:	9007883a 	mov	r3,r18
    a80c:	1444b03a 	or	r2,r2,r17
    a810:	0101ffc4 	movi	r4,2047
    a814:	81002426 	beq	r16,r4,a8a8 <__adddf3+0x2b8>
    a818:	8120703a 	and	r16,r16,r4
    a81c:	01000434 	movhi	r4,16
    a820:	213fffc4 	addi	r4,r4,-1
    a824:	4110703a 	and	r8,r8,r4
    a828:	003fa806 	br	a6cc <__adddf3+0xdc>
    a82c:	8089c83a 	sub	r4,r16,r2
    a830:	01005e0e 	bge	zero,r4,a9ac <__adddf3+0x3bc>
    a834:	10002b26 	beq	r2,zero,a8e4 <__adddf3+0x2f4>
    a838:	0081ffc4 	movi	r2,2047
    a83c:	80bf8b26 	beq	r16,r2,a66c <__adddf3+0x7c>
    a840:	4a402034 	orhi	r9,r9,128
    a844:	00800e04 	movi	r2,56
    a848:	1100a40e 	bge	r2,r4,aadc <__adddf3+0x4ec>
    a84c:	498cb03a 	or	r6,r9,r6
    a850:	300ac03a 	cmpne	r5,r6,zero
    a854:	0013883a 	mov	r9,zero
    a858:	2c4b883a 	add	r5,r5,r17
    a85c:	2c63803a 	cmpltu	r17,r5,r17
    a860:	4a11883a 	add	r8,r9,r8
    a864:	8a11883a 	add	r8,r17,r8
    a868:	2823883a 	mov	r17,r5
    a86c:	4080202c 	andhi	r2,r8,128
    a870:	103fe026 	beq	r2,zero,a7f4 <__adddf3+0x204>
    a874:	84000044 	addi	r16,r16,1
    a878:	0081ffc4 	movi	r2,2047
    a87c:	8080d226 	beq	r16,r2,abc8 <__adddf3+0x5d8>
    a880:	00bfe034 	movhi	r2,65408
    a884:	10bfffc4 	addi	r2,r2,-1
    a888:	4090703a 	and	r8,r8,r2
    a88c:	880ad07a 	srli	r5,r17,1
    a890:	400897fa 	slli	r4,r8,31
    a894:	88c0004c 	andi	r3,r17,1
    a898:	28e2b03a 	or	r17,r5,r3
    a89c:	4010d07a 	srli	r8,r8,1
    a8a0:	2462b03a 	or	r17,r4,r17
    a8a4:	003f7106 	br	a66c <__adddf3+0x7c>
    a8a8:	4088b03a 	or	r4,r8,r2
    a8ac:	20014526 	beq	r4,zero,adc4 <__adddf3+0x7d4>
    a8b0:	01000434 	movhi	r4,16
    a8b4:	42000234 	orhi	r8,r8,8
    a8b8:	213fffc4 	addi	r4,r4,-1
    a8bc:	4110703a 	and	r8,r8,r4
    a8c0:	003f8206 	br	a6cc <__adddf3+0xdc>
    a8c4:	18ffffc4 	addi	r3,r3,-1
    a8c8:	1800491e 	bne	r3,zero,a9f0 <__adddf3+0x400>
    a8cc:	898bc83a 	sub	r5,r17,r6
    a8d0:	8963803a 	cmpltu	r17,r17,r5
    a8d4:	4251c83a 	sub	r8,r8,r9
    a8d8:	4451c83a 	sub	r8,r8,r17
    a8dc:	2823883a 	mov	r17,r5
    a8e0:	003f9f06 	br	a760 <__adddf3+0x170>
    a8e4:	4984b03a 	or	r2,r9,r6
    a8e8:	103f6026 	beq	r2,zero,a66c <__adddf3+0x7c>
    a8ec:	213fffc4 	addi	r4,r4,-1
    a8f0:	2000931e 	bne	r4,zero,ab40 <__adddf3+0x550>
    a8f4:	898d883a 	add	r6,r17,r6
    a8f8:	3463803a 	cmpltu	r17,r6,r17
    a8fc:	4251883a 	add	r8,r8,r9
    a900:	8a11883a 	add	r8,r17,r8
    a904:	3023883a 	mov	r17,r6
    a908:	003fd806 	br	a86c <__adddf3+0x27c>
    a90c:	1800541e 	bne	r3,zero,aa60 <__adddf3+0x470>
    a910:	80800044 	addi	r2,r16,1
    a914:	1081ffcc 	andi	r2,r2,2047
    a918:	00c00044 	movi	r3,1
    a91c:	1880a00e 	bge	r3,r2,aba0 <__adddf3+0x5b0>
    a920:	8989c83a 	sub	r4,r17,r6
    a924:	8905803a 	cmpltu	r2,r17,r4
    a928:	4267c83a 	sub	r19,r8,r9
    a92c:	98a7c83a 	sub	r19,r19,r2
    a930:	9880202c 	andhi	r2,r19,128
    a934:	10006326 	beq	r2,zero,aac4 <__adddf3+0x4d4>
    a938:	3463c83a 	sub	r17,r6,r17
    a93c:	4a07c83a 	sub	r3,r9,r8
    a940:	344d803a 	cmpltu	r6,r6,r17
    a944:	19a7c83a 	sub	r19,r3,r6
    a948:	3825883a 	mov	r18,r7
    a94c:	983f8a1e 	bne	r19,zero,a778 <__adddf3+0x188>
    a950:	8809883a 	mov	r4,r17
    a954:	000cbf40 	call	cbf4 <__clzsi2>
    a958:	10800804 	addi	r2,r2,32
    a95c:	10fffe04 	addi	r3,r2,-8
    a960:	010007c4 	movi	r4,31
    a964:	20ff890e 	bge	r4,r3,a78c <__adddf3+0x19c>
    a968:	10bff604 	addi	r2,r2,-40
    a96c:	8884983a 	sll	r2,r17,r2
    a970:	0023883a 	mov	r17,zero
    a974:	1c3f8c0e 	bge	r3,r16,a7a8 <__adddf3+0x1b8>
    a978:	023fe034 	movhi	r8,65408
    a97c:	423fffc4 	addi	r8,r8,-1
    a980:	80e1c83a 	sub	r16,r16,r3
    a984:	1210703a 	and	r8,r2,r8
    a988:	003f3806 	br	a66c <__adddf3+0x7c>
    a98c:	9007883a 	mov	r3,r18
    a990:	0011883a 	mov	r8,zero
    a994:	0005883a 	mov	r2,zero
    a998:	003f4c06 	br	a6cc <__adddf3+0xdc>
    a99c:	498cb03a 	or	r6,r9,r6
    a9a0:	300cc03a 	cmpne	r6,r6,zero
    a9a4:	0007883a 	mov	r3,zero
    a9a8:	003f6806 	br	a74c <__adddf3+0x15c>
    a9ac:	20009c1e 	bne	r4,zero,ac20 <__adddf3+0x630>
    a9b0:	80800044 	addi	r2,r16,1
    a9b4:	1141ffcc 	andi	r5,r2,2047
    a9b8:	01000044 	movi	r4,1
    a9bc:	2140670e 	bge	r4,r5,ab5c <__adddf3+0x56c>
    a9c0:	0101ffc4 	movi	r4,2047
    a9c4:	11007f26 	beq	r2,r4,abc4 <__adddf3+0x5d4>
    a9c8:	898d883a 	add	r6,r17,r6
    a9cc:	4247883a 	add	r3,r8,r9
    a9d0:	3451803a 	cmpltu	r8,r6,r17
    a9d4:	40d1883a 	add	r8,r8,r3
    a9d8:	402297fa 	slli	r17,r8,31
    a9dc:	300cd07a 	srli	r6,r6,1
    a9e0:	4010d07a 	srli	r8,r8,1
    a9e4:	1021883a 	mov	r16,r2
    a9e8:	89a2b03a 	or	r17,r17,r6
    a9ec:	003f1f06 	br	a66c <__adddf3+0x7c>
    a9f0:	0081ffc4 	movi	r2,2047
    a9f4:	80bf481e 	bne	r16,r2,a718 <__adddf3+0x128>
    a9f8:	003f1c06 	br	a66c <__adddf3+0x7c>
    a9fc:	843ff844 	addi	r16,r16,-31
    aa00:	01000804 	movi	r4,32
    aa04:	1406d83a 	srl	r3,r2,r16
    aa08:	41005026 	beq	r8,r4,ab4c <__adddf3+0x55c>
    aa0c:	01001004 	movi	r4,64
    aa10:	2211c83a 	sub	r8,r4,r8
    aa14:	1204983a 	sll	r2,r2,r8
    aa18:	88a2b03a 	or	r17,r17,r2
    aa1c:	8822c03a 	cmpne	r17,r17,zero
    aa20:	1c62b03a 	or	r17,r3,r17
    aa24:	0011883a 	mov	r8,zero
    aa28:	0021883a 	mov	r16,zero
    aa2c:	003f7106 	br	a7f4 <__adddf3+0x204>
    aa30:	193ff804 	addi	r4,r3,-32
    aa34:	00800804 	movi	r2,32
    aa38:	4908d83a 	srl	r4,r9,r4
    aa3c:	18804526 	beq	r3,r2,ab54 <__adddf3+0x564>
    aa40:	00801004 	movi	r2,64
    aa44:	10c5c83a 	sub	r2,r2,r3
    aa48:	4886983a 	sll	r3,r9,r2
    aa4c:	198cb03a 	or	r6,r3,r6
    aa50:	300cc03a 	cmpne	r6,r6,zero
    aa54:	218cb03a 	or	r6,r4,r6
    aa58:	0007883a 	mov	r3,zero
    aa5c:	003f3b06 	br	a74c <__adddf3+0x15c>
    aa60:	80002a26 	beq	r16,zero,ab0c <__adddf3+0x51c>
    aa64:	0101ffc4 	movi	r4,2047
    aa68:	11006826 	beq	r2,r4,ac0c <__adddf3+0x61c>
    aa6c:	00c7c83a 	sub	r3,zero,r3
    aa70:	42002034 	orhi	r8,r8,128
    aa74:	01000e04 	movi	r4,56
    aa78:	20c07c16 	blt	r4,r3,ac6c <__adddf3+0x67c>
    aa7c:	010007c4 	movi	r4,31
    aa80:	20c0da16 	blt	r4,r3,adec <__adddf3+0x7fc>
    aa84:	01000804 	movi	r4,32
    aa88:	20c9c83a 	sub	r4,r4,r3
    aa8c:	4114983a 	sll	r10,r8,r4
    aa90:	88cad83a 	srl	r5,r17,r3
    aa94:	8908983a 	sll	r4,r17,r4
    aa98:	40c6d83a 	srl	r3,r8,r3
    aa9c:	5162b03a 	or	r17,r10,r5
    aaa0:	2008c03a 	cmpne	r4,r4,zero
    aaa4:	8922b03a 	or	r17,r17,r4
    aaa8:	3463c83a 	sub	r17,r6,r17
    aaac:	48c7c83a 	sub	r3,r9,r3
    aab0:	344d803a 	cmpltu	r6,r6,r17
    aab4:	1991c83a 	sub	r8,r3,r6
    aab8:	1021883a 	mov	r16,r2
    aabc:	3825883a 	mov	r18,r7
    aac0:	003f2706 	br	a760 <__adddf3+0x170>
    aac4:	24d0b03a 	or	r8,r4,r19
    aac8:	40001b1e 	bne	r8,zero,ab38 <__adddf3+0x548>
    aacc:	0005883a 	mov	r2,zero
    aad0:	0007883a 	mov	r3,zero
    aad4:	0021883a 	mov	r16,zero
    aad8:	003f4d06 	br	a810 <__adddf3+0x220>
    aadc:	008007c4 	movi	r2,31
    aae0:	11003c16 	blt	r2,r4,abd4 <__adddf3+0x5e4>
    aae4:	00800804 	movi	r2,32
    aae8:	1105c83a 	sub	r2,r2,r4
    aaec:	488e983a 	sll	r7,r9,r2
    aaf0:	310ad83a 	srl	r5,r6,r4
    aaf4:	3084983a 	sll	r2,r6,r2
    aaf8:	4912d83a 	srl	r9,r9,r4
    aafc:	394ab03a 	or	r5,r7,r5
    ab00:	1004c03a 	cmpne	r2,r2,zero
    ab04:	288ab03a 	or	r5,r5,r2
    ab08:	003f5306 	br	a858 <__adddf3+0x268>
    ab0c:	4448b03a 	or	r4,r8,r17
    ab10:	20003e26 	beq	r4,zero,ac0c <__adddf3+0x61c>
    ab14:	00c6303a 	nor	r3,zero,r3
    ab18:	18003a1e 	bne	r3,zero,ac04 <__adddf3+0x614>
    ab1c:	3463c83a 	sub	r17,r6,r17
    ab20:	4a07c83a 	sub	r3,r9,r8
    ab24:	344d803a 	cmpltu	r6,r6,r17
    ab28:	1991c83a 	sub	r8,r3,r6
    ab2c:	1021883a 	mov	r16,r2
    ab30:	3825883a 	mov	r18,r7
    ab34:	003f0a06 	br	a760 <__adddf3+0x170>
    ab38:	2023883a 	mov	r17,r4
    ab3c:	003f0d06 	br	a774 <__adddf3+0x184>
    ab40:	0081ffc4 	movi	r2,2047
    ab44:	80bf3f1e 	bne	r16,r2,a844 <__adddf3+0x254>
    ab48:	003ec806 	br	a66c <__adddf3+0x7c>
    ab4c:	0005883a 	mov	r2,zero
    ab50:	003fb106 	br	aa18 <__adddf3+0x428>
    ab54:	0007883a 	mov	r3,zero
    ab58:	003fbc06 	br	aa4c <__adddf3+0x45c>
    ab5c:	4444b03a 	or	r2,r8,r17
    ab60:	8000871e 	bne	r16,zero,ad80 <__adddf3+0x790>
    ab64:	1000ba26 	beq	r2,zero,ae50 <__adddf3+0x860>
    ab68:	4984b03a 	or	r2,r9,r6
    ab6c:	103ebf26 	beq	r2,zero,a66c <__adddf3+0x7c>
    ab70:	8985883a 	add	r2,r17,r6
    ab74:	4247883a 	add	r3,r8,r9
    ab78:	1451803a 	cmpltu	r8,r2,r17
    ab7c:	40d1883a 	add	r8,r8,r3
    ab80:	40c0202c 	andhi	r3,r8,128
    ab84:	1023883a 	mov	r17,r2
    ab88:	183f1a26 	beq	r3,zero,a7f4 <__adddf3+0x204>
    ab8c:	00bfe034 	movhi	r2,65408
    ab90:	10bfffc4 	addi	r2,r2,-1
    ab94:	2021883a 	mov	r16,r4
    ab98:	4090703a 	and	r8,r8,r2
    ab9c:	003eb306 	br	a66c <__adddf3+0x7c>
    aba0:	4444b03a 	or	r2,r8,r17
    aba4:	8000291e 	bne	r16,zero,ac4c <__adddf3+0x65c>
    aba8:	10004b1e 	bne	r2,zero,acd8 <__adddf3+0x6e8>
    abac:	4990b03a 	or	r8,r9,r6
    abb0:	40008b26 	beq	r8,zero,ade0 <__adddf3+0x7f0>
    abb4:	4811883a 	mov	r8,r9
    abb8:	3023883a 	mov	r17,r6
    abbc:	3825883a 	mov	r18,r7
    abc0:	003eaa06 	br	a66c <__adddf3+0x7c>
    abc4:	1021883a 	mov	r16,r2
    abc8:	0011883a 	mov	r8,zero
    abcc:	0005883a 	mov	r2,zero
    abd0:	003f0f06 	br	a810 <__adddf3+0x220>
    abd4:	217ff804 	addi	r5,r4,-32
    abd8:	00800804 	movi	r2,32
    abdc:	494ad83a 	srl	r5,r9,r5
    abe0:	20807d26 	beq	r4,r2,add8 <__adddf3+0x7e8>
    abe4:	00801004 	movi	r2,64
    abe8:	1109c83a 	sub	r4,r2,r4
    abec:	4912983a 	sll	r9,r9,r4
    abf0:	498cb03a 	or	r6,r9,r6
    abf4:	300cc03a 	cmpne	r6,r6,zero
    abf8:	298ab03a 	or	r5,r5,r6
    abfc:	0013883a 	mov	r9,zero
    ac00:	003f1506 	br	a858 <__adddf3+0x268>
    ac04:	0101ffc4 	movi	r4,2047
    ac08:	113f9a1e 	bne	r2,r4,aa74 <__adddf3+0x484>
    ac0c:	4811883a 	mov	r8,r9
    ac10:	3023883a 	mov	r17,r6
    ac14:	1021883a 	mov	r16,r2
    ac18:	3825883a 	mov	r18,r7
    ac1c:	003e9306 	br	a66c <__adddf3+0x7c>
    ac20:	8000161e 	bne	r16,zero,ac7c <__adddf3+0x68c>
    ac24:	444ab03a 	or	r5,r8,r17
    ac28:	28005126 	beq	r5,zero,ad70 <__adddf3+0x780>
    ac2c:	0108303a 	nor	r4,zero,r4
    ac30:	20004d1e 	bne	r4,zero,ad68 <__adddf3+0x778>
    ac34:	89a3883a 	add	r17,r17,r6
    ac38:	4253883a 	add	r9,r8,r9
    ac3c:	898d803a 	cmpltu	r6,r17,r6
    ac40:	3251883a 	add	r8,r6,r9
    ac44:	1021883a 	mov	r16,r2
    ac48:	003f0806 	br	a86c <__adddf3+0x27c>
    ac4c:	1000301e 	bne	r2,zero,ad10 <__adddf3+0x720>
    ac50:	4984b03a 	or	r2,r9,r6
    ac54:	10007126 	beq	r2,zero,ae1c <__adddf3+0x82c>
    ac58:	4811883a 	mov	r8,r9
    ac5c:	3023883a 	mov	r17,r6
    ac60:	3825883a 	mov	r18,r7
    ac64:	0401ffc4 	movi	r16,2047
    ac68:	003e8006 	br	a66c <__adddf3+0x7c>
    ac6c:	4462b03a 	or	r17,r8,r17
    ac70:	8822c03a 	cmpne	r17,r17,zero
    ac74:	0007883a 	mov	r3,zero
    ac78:	003f8b06 	br	aaa8 <__adddf3+0x4b8>
    ac7c:	0141ffc4 	movi	r5,2047
    ac80:	11403b26 	beq	r2,r5,ad70 <__adddf3+0x780>
    ac84:	0109c83a 	sub	r4,zero,r4
    ac88:	42002034 	orhi	r8,r8,128
    ac8c:	01400e04 	movi	r5,56
    ac90:	29006716 	blt	r5,r4,ae30 <__adddf3+0x840>
    ac94:	014007c4 	movi	r5,31
    ac98:	29007016 	blt	r5,r4,ae5c <__adddf3+0x86c>
    ac9c:	01400804 	movi	r5,32
    aca0:	290bc83a 	sub	r5,r5,r4
    aca4:	4154983a 	sll	r10,r8,r5
    aca8:	890ed83a 	srl	r7,r17,r4
    acac:	894a983a 	sll	r5,r17,r5
    acb0:	4108d83a 	srl	r4,r8,r4
    acb4:	51e2b03a 	or	r17,r10,r7
    acb8:	280ac03a 	cmpne	r5,r5,zero
    acbc:	8962b03a 	or	r17,r17,r5
    acc0:	89a3883a 	add	r17,r17,r6
    acc4:	2253883a 	add	r9,r4,r9
    acc8:	898d803a 	cmpltu	r6,r17,r6
    accc:	3251883a 	add	r8,r6,r9
    acd0:	1021883a 	mov	r16,r2
    acd4:	003ee506 	br	a86c <__adddf3+0x27c>
    acd8:	4984b03a 	or	r2,r9,r6
    acdc:	103e6326 	beq	r2,zero,a66c <__adddf3+0x7c>
    ace0:	8987c83a 	sub	r3,r17,r6
    ace4:	88c9803a 	cmpltu	r4,r17,r3
    ace8:	4245c83a 	sub	r2,r8,r9
    acec:	1105c83a 	sub	r2,r2,r4
    acf0:	1100202c 	andhi	r4,r2,128
    acf4:	203ebb26 	beq	r4,zero,a7e4 <__adddf3+0x1f4>
    acf8:	3463c83a 	sub	r17,r6,r17
    acfc:	4a07c83a 	sub	r3,r9,r8
    ad00:	344d803a 	cmpltu	r6,r6,r17
    ad04:	1991c83a 	sub	r8,r3,r6
    ad08:	3825883a 	mov	r18,r7
    ad0c:	003e5706 	br	a66c <__adddf3+0x7c>
    ad10:	4984b03a 	or	r2,r9,r6
    ad14:	10002e26 	beq	r2,zero,add0 <__adddf3+0x7e0>
    ad18:	4004d0fa 	srli	r2,r8,3
    ad1c:	8822d0fa 	srli	r17,r17,3
    ad20:	4010977a 	slli	r8,r8,29
    ad24:	10c0022c 	andhi	r3,r2,8
    ad28:	4462b03a 	or	r17,r8,r17
    ad2c:	18000826 	beq	r3,zero,ad50 <__adddf3+0x760>
    ad30:	4808d0fa 	srli	r4,r9,3
    ad34:	20c0022c 	andhi	r3,r4,8
    ad38:	1800051e 	bne	r3,zero,ad50 <__adddf3+0x760>
    ad3c:	300cd0fa 	srli	r6,r6,3
    ad40:	4806977a 	slli	r3,r9,29
    ad44:	2005883a 	mov	r2,r4
    ad48:	3825883a 	mov	r18,r7
    ad4c:	19a2b03a 	or	r17,r3,r6
    ad50:	8810d77a 	srli	r8,r17,29
    ad54:	100490fa 	slli	r2,r2,3
    ad58:	882290fa 	slli	r17,r17,3
    ad5c:	0401ffc4 	movi	r16,2047
    ad60:	4090b03a 	or	r8,r8,r2
    ad64:	003e4106 	br	a66c <__adddf3+0x7c>
    ad68:	0141ffc4 	movi	r5,2047
    ad6c:	117fc71e 	bne	r2,r5,ac8c <__adddf3+0x69c>
    ad70:	4811883a 	mov	r8,r9
    ad74:	3023883a 	mov	r17,r6
    ad78:	1021883a 	mov	r16,r2
    ad7c:	003e3b06 	br	a66c <__adddf3+0x7c>
    ad80:	10002f26 	beq	r2,zero,ae40 <__adddf3+0x850>
    ad84:	4984b03a 	or	r2,r9,r6
    ad88:	10001126 	beq	r2,zero,add0 <__adddf3+0x7e0>
    ad8c:	4004d0fa 	srli	r2,r8,3
    ad90:	8822d0fa 	srli	r17,r17,3
    ad94:	4010977a 	slli	r8,r8,29
    ad98:	10c0022c 	andhi	r3,r2,8
    ad9c:	4462b03a 	or	r17,r8,r17
    ada0:	183feb26 	beq	r3,zero,ad50 <__adddf3+0x760>
    ada4:	4808d0fa 	srli	r4,r9,3
    ada8:	20c0022c 	andhi	r3,r4,8
    adac:	183fe81e 	bne	r3,zero,ad50 <__adddf3+0x760>
    adb0:	300cd0fa 	srli	r6,r6,3
    adb4:	4806977a 	slli	r3,r9,29
    adb8:	2005883a 	mov	r2,r4
    adbc:	19a2b03a 	or	r17,r3,r6
    adc0:	003fe306 	br	ad50 <__adddf3+0x760>
    adc4:	0011883a 	mov	r8,zero
    adc8:	0005883a 	mov	r2,zero
    adcc:	003e3f06 	br	a6cc <__adddf3+0xdc>
    add0:	0401ffc4 	movi	r16,2047
    add4:	003e2506 	br	a66c <__adddf3+0x7c>
    add8:	0013883a 	mov	r9,zero
    addc:	003f8406 	br	abf0 <__adddf3+0x600>
    ade0:	0005883a 	mov	r2,zero
    ade4:	0007883a 	mov	r3,zero
    ade8:	003e8906 	br	a810 <__adddf3+0x220>
    adec:	197ff804 	addi	r5,r3,-32
    adf0:	01000804 	movi	r4,32
    adf4:	414ad83a 	srl	r5,r8,r5
    adf8:	19002426 	beq	r3,r4,ae8c <__adddf3+0x89c>
    adfc:	01001004 	movi	r4,64
    ae00:	20c7c83a 	sub	r3,r4,r3
    ae04:	40c6983a 	sll	r3,r8,r3
    ae08:	1c46b03a 	or	r3,r3,r17
    ae0c:	1806c03a 	cmpne	r3,r3,zero
    ae10:	28e2b03a 	or	r17,r5,r3
    ae14:	0007883a 	mov	r3,zero
    ae18:	003f2306 	br	aaa8 <__adddf3+0x4b8>
    ae1c:	0007883a 	mov	r3,zero
    ae20:	5811883a 	mov	r8,r11
    ae24:	00bfffc4 	movi	r2,-1
    ae28:	0401ffc4 	movi	r16,2047
    ae2c:	003e7806 	br	a810 <__adddf3+0x220>
    ae30:	4462b03a 	or	r17,r8,r17
    ae34:	8822c03a 	cmpne	r17,r17,zero
    ae38:	0009883a 	mov	r4,zero
    ae3c:	003fa006 	br	acc0 <__adddf3+0x6d0>
    ae40:	4811883a 	mov	r8,r9
    ae44:	3023883a 	mov	r17,r6
    ae48:	0401ffc4 	movi	r16,2047
    ae4c:	003e0706 	br	a66c <__adddf3+0x7c>
    ae50:	4811883a 	mov	r8,r9
    ae54:	3023883a 	mov	r17,r6
    ae58:	003e0406 	br	a66c <__adddf3+0x7c>
    ae5c:	21fff804 	addi	r7,r4,-32
    ae60:	01400804 	movi	r5,32
    ae64:	41ced83a 	srl	r7,r8,r7
    ae68:	21400a26 	beq	r4,r5,ae94 <__adddf3+0x8a4>
    ae6c:	01401004 	movi	r5,64
    ae70:	2909c83a 	sub	r4,r5,r4
    ae74:	4108983a 	sll	r4,r8,r4
    ae78:	2448b03a 	or	r4,r4,r17
    ae7c:	2008c03a 	cmpne	r4,r4,zero
    ae80:	3922b03a 	or	r17,r7,r4
    ae84:	0009883a 	mov	r4,zero
    ae88:	003f8d06 	br	acc0 <__adddf3+0x6d0>
    ae8c:	0007883a 	mov	r3,zero
    ae90:	003fdd06 	br	ae08 <__adddf3+0x818>
    ae94:	0009883a 	mov	r4,zero
    ae98:	003ff706 	br	ae78 <__adddf3+0x888>

0000ae9c <__divdf3>:
    ae9c:	defff204 	addi	sp,sp,-56
    aea0:	dd400915 	stw	r21,36(sp)
    aea4:	282ad53a 	srli	r21,r5,20
    aea8:	dd000815 	stw	r20,32(sp)
    aeac:	2828d7fa 	srli	r20,r5,31
    aeb0:	dc000415 	stw	r16,16(sp)
    aeb4:	04000434 	movhi	r16,16
    aeb8:	df000c15 	stw	fp,48(sp)
    aebc:	843fffc4 	addi	r16,r16,-1
    aec0:	dfc00d15 	stw	ra,52(sp)
    aec4:	ddc00b15 	stw	r23,44(sp)
    aec8:	dd800a15 	stw	r22,40(sp)
    aecc:	dcc00715 	stw	r19,28(sp)
    aed0:	dc800615 	stw	r18,24(sp)
    aed4:	dc400515 	stw	r17,20(sp)
    aed8:	ad41ffcc 	andi	r21,r21,2047
    aedc:	2c20703a 	and	r16,r5,r16
    aee0:	a7003fcc 	andi	fp,r20,255
    aee4:	a8006126 	beq	r21,zero,b06c <__divdf3+0x1d0>
    aee8:	0081ffc4 	movi	r2,2047
    aeec:	2025883a 	mov	r18,r4
    aef0:	a8803726 	beq	r21,r2,afd0 <__divdf3+0x134>
    aef4:	80c00434 	orhi	r3,r16,16
    aef8:	180690fa 	slli	r3,r3,3
    aefc:	2020d77a 	srli	r16,r4,29
    af00:	202490fa 	slli	r18,r4,3
    af04:	ad7f0044 	addi	r21,r21,-1023
    af08:	80e0b03a 	or	r16,r16,r3
    af0c:	0027883a 	mov	r19,zero
    af10:	0013883a 	mov	r9,zero
    af14:	3808d53a 	srli	r4,r7,20
    af18:	382cd7fa 	srli	r22,r7,31
    af1c:	04400434 	movhi	r17,16
    af20:	8c7fffc4 	addi	r17,r17,-1
    af24:	2101ffcc 	andi	r4,r4,2047
    af28:	3011883a 	mov	r8,r6
    af2c:	3c62703a 	and	r17,r7,r17
    af30:	b5c03fcc 	andi	r23,r22,255
    af34:	20006c26 	beq	r4,zero,b0e8 <__divdf3+0x24c>
    af38:	0081ffc4 	movi	r2,2047
    af3c:	20806426 	beq	r4,r2,b0d0 <__divdf3+0x234>
    af40:	88c00434 	orhi	r3,r17,16
    af44:	180690fa 	slli	r3,r3,3
    af48:	3022d77a 	srli	r17,r6,29
    af4c:	301090fa 	slli	r8,r6,3
    af50:	213f0044 	addi	r4,r4,-1023
    af54:	88e2b03a 	or	r17,r17,r3
    af58:	000d883a 	mov	r6,zero
    af5c:	a584f03a 	xor	r2,r20,r22
    af60:	34cab03a 	or	r5,r6,r19
    af64:	1007883a 	mov	r3,r2
    af68:	14c03fcc 	andi	r19,r2,255
    af6c:	008003c4 	movi	r2,15
    af70:	a92bc83a 	sub	r21,r21,r4
    af74:	11409036 	bltu	r2,r5,b1b8 <__divdf3+0x31c>
    af78:	280a90ba 	slli	r5,r5,2
    af7c:	00800074 	movhi	r2,1
    af80:	10abe404 	addi	r2,r2,-20592
    af84:	288b883a 	add	r5,r5,r2
    af88:	28800017 	ldw	r2,0(r5)
    af8c:	1000683a 	jmp	r2
    af90:	0000b1b8 	rdprs	zero,zero,710
    af94:	0000b008 	cmpgei	zero,zero,704
    af98:	0000b1a8 	cmpgeui	zero,zero,710
    af9c:	0000affc 	xorhi	zero,zero,703
    afa0:	0000b1a8 	cmpgeui	zero,zero,710
    afa4:	0000b17c 	xorhi	zero,zero,709
    afa8:	0000b1a8 	cmpgeui	zero,zero,710
    afac:	0000affc 	xorhi	zero,zero,703
    afb0:	0000b008 	cmpgei	zero,zero,704
    afb4:	0000b008 	cmpgei	zero,zero,704
    afb8:	0000b17c 	xorhi	zero,zero,709
    afbc:	0000affc 	xorhi	zero,zero,703
    afc0:	0000afec 	andhi	zero,zero,703
    afc4:	0000afec 	andhi	zero,zero,703
    afc8:	0000afec 	andhi	zero,zero,703
    afcc:	0000b49c 	xori	zero,zero,722
    afd0:	2404b03a 	or	r2,r4,r16
    afd4:	1000661e 	bne	r2,zero,b170 <__divdf3+0x2d4>
    afd8:	04c00204 	movi	r19,8
    afdc:	0021883a 	mov	r16,zero
    afe0:	0025883a 	mov	r18,zero
    afe4:	02400084 	movi	r9,2
    afe8:	003fca06 	br	af14 <__divdf3+0x78>
    afec:	8023883a 	mov	r17,r16
    aff0:	9011883a 	mov	r8,r18
    aff4:	e02f883a 	mov	r23,fp
    aff8:	480d883a 	mov	r6,r9
    affc:	00800084 	movi	r2,2
    b000:	3081311e 	bne	r6,r2,b4c8 <__divdf3+0x62c>
    b004:	b827883a 	mov	r19,r23
    b008:	98c0004c 	andi	r3,r19,1
    b00c:	0081ffc4 	movi	r2,2047
    b010:	000b883a 	mov	r5,zero
    b014:	0025883a 	mov	r18,zero
    b018:	1004953a 	slli	r2,r2,20
    b01c:	18c03fcc 	andi	r3,r3,255
    b020:	04400434 	movhi	r17,16
    b024:	8c7fffc4 	addi	r17,r17,-1
    b028:	180697fa 	slli	r3,r3,31
    b02c:	2c4a703a 	and	r5,r5,r17
    b030:	288ab03a 	or	r5,r5,r2
    b034:	28c6b03a 	or	r3,r5,r3
    b038:	9005883a 	mov	r2,r18
    b03c:	dfc00d17 	ldw	ra,52(sp)
    b040:	df000c17 	ldw	fp,48(sp)
    b044:	ddc00b17 	ldw	r23,44(sp)
    b048:	dd800a17 	ldw	r22,40(sp)
    b04c:	dd400917 	ldw	r21,36(sp)
    b050:	dd000817 	ldw	r20,32(sp)
    b054:	dcc00717 	ldw	r19,28(sp)
    b058:	dc800617 	ldw	r18,24(sp)
    b05c:	dc400517 	ldw	r17,20(sp)
    b060:	dc000417 	ldw	r16,16(sp)
    b064:	dec00e04 	addi	sp,sp,56
    b068:	f800283a 	ret
    b06c:	2404b03a 	or	r2,r4,r16
    b070:	2027883a 	mov	r19,r4
    b074:	10003926 	beq	r2,zero,b15c <__divdf3+0x2c0>
    b078:	80012e26 	beq	r16,zero,b534 <__divdf3+0x698>
    b07c:	8009883a 	mov	r4,r16
    b080:	d9800315 	stw	r6,12(sp)
    b084:	d9c00215 	stw	r7,8(sp)
    b088:	000cbf40 	call	cbf4 <__clzsi2>
    b08c:	d9800317 	ldw	r6,12(sp)
    b090:	d9c00217 	ldw	r7,8(sp)
    b094:	10fffd44 	addi	r3,r2,-11
    b098:	01000704 	movi	r4,28
    b09c:	20c12116 	blt	r4,r3,b524 <__divdf3+0x688>
    b0a0:	01000744 	movi	r4,29
    b0a4:	147ffe04 	addi	r17,r2,-8
    b0a8:	20c9c83a 	sub	r4,r4,r3
    b0ac:	8460983a 	sll	r16,r16,r17
    b0b0:	9908d83a 	srl	r4,r19,r4
    b0b4:	9c64983a 	sll	r18,r19,r17
    b0b8:	2420b03a 	or	r16,r4,r16
    b0bc:	057f0084 	movi	r21,-1022
    b0c0:	a8ebc83a 	sub	r21,r21,r3
    b0c4:	0027883a 	mov	r19,zero
    b0c8:	0013883a 	mov	r9,zero
    b0cc:	003f9106 	br	af14 <__divdf3+0x78>
    b0d0:	3444b03a 	or	r2,r6,r17
    b0d4:	10001f1e 	bne	r2,zero,b154 <__divdf3+0x2b8>
    b0d8:	0023883a 	mov	r17,zero
    b0dc:	0011883a 	mov	r8,zero
    b0e0:	01800084 	movi	r6,2
    b0e4:	003f9d06 	br	af5c <__divdf3+0xc0>
    b0e8:	3444b03a 	or	r2,r6,r17
    b0ec:	10001526 	beq	r2,zero,b144 <__divdf3+0x2a8>
    b0f0:	88011b26 	beq	r17,zero,b560 <__divdf3+0x6c4>
    b0f4:	8809883a 	mov	r4,r17
    b0f8:	d9800315 	stw	r6,12(sp)
    b0fc:	da400115 	stw	r9,4(sp)
    b100:	000cbf40 	call	cbf4 <__clzsi2>
    b104:	d9800317 	ldw	r6,12(sp)
    b108:	da400117 	ldw	r9,4(sp)
    b10c:	10fffd44 	addi	r3,r2,-11
    b110:	01000704 	movi	r4,28
    b114:	20c10e16 	blt	r4,r3,b550 <__divdf3+0x6b4>
    b118:	01000744 	movi	r4,29
    b11c:	123ffe04 	addi	r8,r2,-8
    b120:	20c9c83a 	sub	r4,r4,r3
    b124:	8a22983a 	sll	r17,r17,r8
    b128:	3108d83a 	srl	r4,r6,r4
    b12c:	3210983a 	sll	r8,r6,r8
    b130:	2462b03a 	or	r17,r4,r17
    b134:	013f0084 	movi	r4,-1022
    b138:	20c9c83a 	sub	r4,r4,r3
    b13c:	000d883a 	mov	r6,zero
    b140:	003f8606 	br	af5c <__divdf3+0xc0>
    b144:	0023883a 	mov	r17,zero
    b148:	0011883a 	mov	r8,zero
    b14c:	01800044 	movi	r6,1
    b150:	003f8206 	br	af5c <__divdf3+0xc0>
    b154:	018000c4 	movi	r6,3
    b158:	003f8006 	br	af5c <__divdf3+0xc0>
    b15c:	04c00104 	movi	r19,4
    b160:	0021883a 	mov	r16,zero
    b164:	0025883a 	mov	r18,zero
    b168:	02400044 	movi	r9,1
    b16c:	003f6906 	br	af14 <__divdf3+0x78>
    b170:	04c00304 	movi	r19,12
    b174:	024000c4 	movi	r9,3
    b178:	003f6606 	br	af14 <__divdf3+0x78>
    b17c:	01400434 	movhi	r5,16
    b180:	0007883a 	mov	r3,zero
    b184:	297fffc4 	addi	r5,r5,-1
    b188:	04bfffc4 	movi	r18,-1
    b18c:	0081ffc4 	movi	r2,2047
    b190:	003fa106 	br	b018 <__divdf3+0x17c>
    b194:	00c00044 	movi	r3,1
    b198:	1887c83a 	sub	r3,r3,r2
    b19c:	01000e04 	movi	r4,56
    b1a0:	20c1210e 	bge	r4,r3,b628 <__divdf3+0x78c>
    b1a4:	98c0004c 	andi	r3,r19,1
    b1a8:	0005883a 	mov	r2,zero
    b1ac:	000b883a 	mov	r5,zero
    b1b0:	0025883a 	mov	r18,zero
    b1b4:	003f9806 	br	b018 <__divdf3+0x17c>
    b1b8:	8c00fd36 	bltu	r17,r16,b5b0 <__divdf3+0x714>
    b1bc:	8440fb26 	beq	r16,r17,b5ac <__divdf3+0x710>
    b1c0:	8007883a 	mov	r3,r16
    b1c4:	ad7fffc4 	addi	r21,r21,-1
    b1c8:	0021883a 	mov	r16,zero
    b1cc:	400ad63a 	srli	r5,r8,24
    b1d0:	8822923a 	slli	r17,r17,8
    b1d4:	1809883a 	mov	r4,r3
    b1d8:	402c923a 	slli	r22,r8,8
    b1dc:	8978b03a 	or	fp,r17,r5
    b1e0:	e028d43a 	srli	r20,fp,16
    b1e4:	d8c00015 	stw	r3,0(sp)
    b1e8:	e5ffffcc 	andi	r23,fp,65535
    b1ec:	a00b883a 	mov	r5,r20
    b1f0:	000a5340 	call	a534 <__udivsi3>
    b1f4:	d8c00017 	ldw	r3,0(sp)
    b1f8:	a00b883a 	mov	r5,r20
    b1fc:	d8800315 	stw	r2,12(sp)
    b200:	1809883a 	mov	r4,r3
    b204:	000a5980 	call	a598 <__umodsi3>
    b208:	d9800317 	ldw	r6,12(sp)
    b20c:	1006943a 	slli	r3,r2,16
    b210:	9004d43a 	srli	r2,r18,16
    b214:	b9a3383a 	mul	r17,r23,r6
    b218:	10c4b03a 	or	r2,r2,r3
    b21c:	1440062e 	bgeu	r2,r17,b238 <__divdf3+0x39c>
    b220:	1705883a 	add	r2,r2,fp
    b224:	30ffffc4 	addi	r3,r6,-1
    b228:	1700ee36 	bltu	r2,fp,b5e4 <__divdf3+0x748>
    b22c:	1440ed2e 	bgeu	r2,r17,b5e4 <__divdf3+0x748>
    b230:	31bfff84 	addi	r6,r6,-2
    b234:	1705883a 	add	r2,r2,fp
    b238:	1463c83a 	sub	r17,r2,r17
    b23c:	a00b883a 	mov	r5,r20
    b240:	8809883a 	mov	r4,r17
    b244:	d9800315 	stw	r6,12(sp)
    b248:	000a5340 	call	a534 <__udivsi3>
    b24c:	a00b883a 	mov	r5,r20
    b250:	8809883a 	mov	r4,r17
    b254:	d8800215 	stw	r2,8(sp)
    b258:	000a5980 	call	a598 <__umodsi3>
    b25c:	d9c00217 	ldw	r7,8(sp)
    b260:	1004943a 	slli	r2,r2,16
    b264:	94bfffcc 	andi	r18,r18,65535
    b268:	b9d1383a 	mul	r8,r23,r7
    b26c:	90a4b03a 	or	r18,r18,r2
    b270:	d9800317 	ldw	r6,12(sp)
    b274:	9200062e 	bgeu	r18,r8,b290 <__divdf3+0x3f4>
    b278:	9725883a 	add	r18,r18,fp
    b27c:	38bfffc4 	addi	r2,r7,-1
    b280:	9700d636 	bltu	r18,fp,b5dc <__divdf3+0x740>
    b284:	9200d52e 	bgeu	r18,r8,b5dc <__divdf3+0x740>
    b288:	39ffff84 	addi	r7,r7,-2
    b28c:	9725883a 	add	r18,r18,fp
    b290:	3004943a 	slli	r2,r6,16
    b294:	b012d43a 	srli	r9,r22,16
    b298:	b1bfffcc 	andi	r6,r22,65535
    b29c:	11e2b03a 	or	r17,r2,r7
    b2a0:	8806d43a 	srli	r3,r17,16
    b2a4:	893fffcc 	andi	r4,r17,65535
    b2a8:	218b383a 	mul	r5,r4,r6
    b2ac:	30c5383a 	mul	r2,r6,r3
    b2b0:	2249383a 	mul	r4,r4,r9
    b2b4:	280ed43a 	srli	r7,r5,16
    b2b8:	9225c83a 	sub	r18,r18,r8
    b2bc:	2089883a 	add	r4,r4,r2
    b2c0:	3909883a 	add	r4,r7,r4
    b2c4:	1a47383a 	mul	r3,r3,r9
    b2c8:	2080022e 	bgeu	r4,r2,b2d4 <__divdf3+0x438>
    b2cc:	00800074 	movhi	r2,1
    b2d0:	1887883a 	add	r3,r3,r2
    b2d4:	2004d43a 	srli	r2,r4,16
    b2d8:	2008943a 	slli	r4,r4,16
    b2dc:	297fffcc 	andi	r5,r5,65535
    b2e0:	10c7883a 	add	r3,r2,r3
    b2e4:	2149883a 	add	r4,r4,r5
    b2e8:	90c0a536 	bltu	r18,r3,b580 <__divdf3+0x6e4>
    b2ec:	90c0bf26 	beq	r18,r3,b5ec <__divdf3+0x750>
    b2f0:	90c7c83a 	sub	r3,r18,r3
    b2f4:	810fc83a 	sub	r7,r16,r4
    b2f8:	81e5803a 	cmpltu	r18,r16,r7
    b2fc:	1ca5c83a 	sub	r18,r3,r18
    b300:	e480c126 	beq	fp,r18,b608 <__divdf3+0x76c>
    b304:	a00b883a 	mov	r5,r20
    b308:	9009883a 	mov	r4,r18
    b30c:	d9800315 	stw	r6,12(sp)
    b310:	d9c00215 	stw	r7,8(sp)
    b314:	da400115 	stw	r9,4(sp)
    b318:	000a5340 	call	a534 <__udivsi3>
    b31c:	a00b883a 	mov	r5,r20
    b320:	9009883a 	mov	r4,r18
    b324:	d8800015 	stw	r2,0(sp)
    b328:	000a5980 	call	a598 <__umodsi3>
    b32c:	d9c00217 	ldw	r7,8(sp)
    b330:	da000017 	ldw	r8,0(sp)
    b334:	1006943a 	slli	r3,r2,16
    b338:	3804d43a 	srli	r2,r7,16
    b33c:	ba21383a 	mul	r16,r23,r8
    b340:	d9800317 	ldw	r6,12(sp)
    b344:	10c4b03a 	or	r2,r2,r3
    b348:	da400117 	ldw	r9,4(sp)
    b34c:	1400062e 	bgeu	r2,r16,b368 <__divdf3+0x4cc>
    b350:	1705883a 	add	r2,r2,fp
    b354:	40ffffc4 	addi	r3,r8,-1
    b358:	1700ad36 	bltu	r2,fp,b610 <__divdf3+0x774>
    b35c:	1400ac2e 	bgeu	r2,r16,b610 <__divdf3+0x774>
    b360:	423fff84 	addi	r8,r8,-2
    b364:	1705883a 	add	r2,r2,fp
    b368:	1421c83a 	sub	r16,r2,r16
    b36c:	a00b883a 	mov	r5,r20
    b370:	8009883a 	mov	r4,r16
    b374:	d9800315 	stw	r6,12(sp)
    b378:	d9c00215 	stw	r7,8(sp)
    b37c:	da000015 	stw	r8,0(sp)
    b380:	da400115 	stw	r9,4(sp)
    b384:	000a5340 	call	a534 <__udivsi3>
    b388:	8009883a 	mov	r4,r16
    b38c:	a00b883a 	mov	r5,r20
    b390:	1025883a 	mov	r18,r2
    b394:	000a5980 	call	a598 <__umodsi3>
    b398:	d9c00217 	ldw	r7,8(sp)
    b39c:	1004943a 	slli	r2,r2,16
    b3a0:	bcaf383a 	mul	r23,r23,r18
    b3a4:	393fffcc 	andi	r4,r7,65535
    b3a8:	2088b03a 	or	r4,r4,r2
    b3ac:	d9800317 	ldw	r6,12(sp)
    b3b0:	da000017 	ldw	r8,0(sp)
    b3b4:	da400117 	ldw	r9,4(sp)
    b3b8:	25c0062e 	bgeu	r4,r23,b3d4 <__divdf3+0x538>
    b3bc:	2709883a 	add	r4,r4,fp
    b3c0:	90bfffc4 	addi	r2,r18,-1
    b3c4:	27009436 	bltu	r4,fp,b618 <__divdf3+0x77c>
    b3c8:	25c0932e 	bgeu	r4,r23,b618 <__divdf3+0x77c>
    b3cc:	94bfff84 	addi	r18,r18,-2
    b3d0:	2709883a 	add	r4,r4,fp
    b3d4:	4004943a 	slli	r2,r8,16
    b3d8:	25efc83a 	sub	r23,r4,r23
    b3dc:	1490b03a 	or	r8,r2,r18
    b3e0:	4008d43a 	srli	r4,r8,16
    b3e4:	40ffffcc 	andi	r3,r8,65535
    b3e8:	30c5383a 	mul	r2,r6,r3
    b3ec:	1a47383a 	mul	r3,r3,r9
    b3f0:	310d383a 	mul	r6,r6,r4
    b3f4:	100ad43a 	srli	r5,r2,16
    b3f8:	4913383a 	mul	r9,r9,r4
    b3fc:	1987883a 	add	r3,r3,r6
    b400:	28c7883a 	add	r3,r5,r3
    b404:	1980022e 	bgeu	r3,r6,b410 <__divdf3+0x574>
    b408:	01000074 	movhi	r4,1
    b40c:	4913883a 	add	r9,r9,r4
    b410:	1808d43a 	srli	r4,r3,16
    b414:	1806943a 	slli	r3,r3,16
    b418:	10bfffcc 	andi	r2,r2,65535
    b41c:	2253883a 	add	r9,r4,r9
    b420:	1887883a 	add	r3,r3,r2
    b424:	ba403836 	bltu	r23,r9,b508 <__divdf3+0x66c>
    b428:	ba403626 	beq	r23,r9,b504 <__divdf3+0x668>
    b42c:	42000054 	ori	r8,r8,1
    b430:	a880ffc4 	addi	r2,r21,1023
    b434:	00bf570e 	bge	zero,r2,b194 <__divdf3+0x2f8>
    b438:	40c001cc 	andi	r3,r8,7
    b43c:	18000726 	beq	r3,zero,b45c <__divdf3+0x5c0>
    b440:	40c003cc 	andi	r3,r8,15
    b444:	01000104 	movi	r4,4
    b448:	19000426 	beq	r3,r4,b45c <__divdf3+0x5c0>
    b44c:	4107883a 	add	r3,r8,r4
    b450:	1a11803a 	cmpltu	r8,r3,r8
    b454:	8a23883a 	add	r17,r17,r8
    b458:	1811883a 	mov	r8,r3
    b45c:	88c0402c 	andhi	r3,r17,256
    b460:	18000426 	beq	r3,zero,b474 <__divdf3+0x5d8>
    b464:	00ffc034 	movhi	r3,65280
    b468:	18ffffc4 	addi	r3,r3,-1
    b46c:	a8810004 	addi	r2,r21,1024
    b470:	88e2703a 	and	r17,r17,r3
    b474:	00c1ff84 	movi	r3,2046
    b478:	18bee316 	blt	r3,r2,b008 <__divdf3+0x16c>
    b47c:	8824977a 	slli	r18,r17,29
    b480:	4010d0fa 	srli	r8,r8,3
    b484:	8822927a 	slli	r17,r17,9
    b488:	1081ffcc 	andi	r2,r2,2047
    b48c:	9224b03a 	or	r18,r18,r8
    b490:	880ad33a 	srli	r5,r17,12
    b494:	98c0004c 	andi	r3,r19,1
    b498:	003edf06 	br	b018 <__divdf3+0x17c>
    b49c:	8080022c 	andhi	r2,r16,8
    b4a0:	10001226 	beq	r2,zero,b4ec <__divdf3+0x650>
    b4a4:	8880022c 	andhi	r2,r17,8
    b4a8:	1000101e 	bne	r2,zero,b4ec <__divdf3+0x650>
    b4ac:	00800434 	movhi	r2,16
    b4b0:	89400234 	orhi	r5,r17,8
    b4b4:	10bfffc4 	addi	r2,r2,-1
    b4b8:	b007883a 	mov	r3,r22
    b4bc:	288a703a 	and	r5,r5,r2
    b4c0:	4025883a 	mov	r18,r8
    b4c4:	003f3106 	br	b18c <__divdf3+0x2f0>
    b4c8:	008000c4 	movi	r2,3
    b4cc:	3080a626 	beq	r6,r2,b768 <__divdf3+0x8cc>
    b4d0:	00800044 	movi	r2,1
    b4d4:	3080521e 	bne	r6,r2,b620 <__divdf3+0x784>
    b4d8:	b807883a 	mov	r3,r23
    b4dc:	0005883a 	mov	r2,zero
    b4e0:	000b883a 	mov	r5,zero
    b4e4:	0025883a 	mov	r18,zero
    b4e8:	003ecb06 	br	b018 <__divdf3+0x17c>
    b4ec:	00800434 	movhi	r2,16
    b4f0:	81400234 	orhi	r5,r16,8
    b4f4:	10bfffc4 	addi	r2,r2,-1
    b4f8:	a007883a 	mov	r3,r20
    b4fc:	288a703a 	and	r5,r5,r2
    b500:	003f2206 	br	b18c <__divdf3+0x2f0>
    b504:	183fca26 	beq	r3,zero,b430 <__divdf3+0x594>
    b508:	e5ef883a 	add	r23,fp,r23
    b50c:	40bfffc4 	addi	r2,r8,-1
    b510:	bf00392e 	bgeu	r23,fp,b5f8 <__divdf3+0x75c>
    b514:	1011883a 	mov	r8,r2
    b518:	ba7fc41e 	bne	r23,r9,b42c <__divdf3+0x590>
    b51c:	b0ffc31e 	bne	r22,r3,b42c <__divdf3+0x590>
    b520:	003fc306 	br	b430 <__divdf3+0x594>
    b524:	10bff604 	addi	r2,r2,-40
    b528:	98a0983a 	sll	r16,r19,r2
    b52c:	0025883a 	mov	r18,zero
    b530:	003ee206 	br	b0bc <__divdf3+0x220>
    b534:	d9800315 	stw	r6,12(sp)
    b538:	d9c00215 	stw	r7,8(sp)
    b53c:	000cbf40 	call	cbf4 <__clzsi2>
    b540:	10800804 	addi	r2,r2,32
    b544:	d9c00217 	ldw	r7,8(sp)
    b548:	d9800317 	ldw	r6,12(sp)
    b54c:	003ed106 	br	b094 <__divdf3+0x1f8>
    b550:	10bff604 	addi	r2,r2,-40
    b554:	30a2983a 	sll	r17,r6,r2
    b558:	0011883a 	mov	r8,zero
    b55c:	003ef506 	br	b134 <__divdf3+0x298>
    b560:	3009883a 	mov	r4,r6
    b564:	d9800315 	stw	r6,12(sp)
    b568:	da400115 	stw	r9,4(sp)
    b56c:	000cbf40 	call	cbf4 <__clzsi2>
    b570:	10800804 	addi	r2,r2,32
    b574:	da400117 	ldw	r9,4(sp)
    b578:	d9800317 	ldw	r6,12(sp)
    b57c:	003ee306 	br	b10c <__divdf3+0x270>
    b580:	85a1883a 	add	r16,r16,r22
    b584:	8585803a 	cmpltu	r2,r16,r22
    b588:	1705883a 	add	r2,r2,fp
    b58c:	14a5883a 	add	r18,r2,r18
    b590:	88bfffc4 	addi	r2,r17,-1
    b594:	e4800c2e 	bgeu	fp,r18,b5c8 <__divdf3+0x72c>
    b598:	90c03e36 	bltu	r18,r3,b694 <__divdf3+0x7f8>
    b59c:	1c806926 	beq	r3,r18,b744 <__divdf3+0x8a8>
    b5a0:	90c7c83a 	sub	r3,r18,r3
    b5a4:	1023883a 	mov	r17,r2
    b5a8:	003f5206 	br	b2f4 <__divdf3+0x458>
    b5ac:	923f0436 	bltu	r18,r8,b1c0 <__divdf3+0x324>
    b5b0:	800897fa 	slli	r4,r16,31
    b5b4:	9004d07a 	srli	r2,r18,1
    b5b8:	8006d07a 	srli	r3,r16,1
    b5bc:	902097fa 	slli	r16,r18,31
    b5c0:	20a4b03a 	or	r18,r4,r2
    b5c4:	003f0106 	br	b1cc <__divdf3+0x330>
    b5c8:	e4bff51e 	bne	fp,r18,b5a0 <__divdf3+0x704>
    b5cc:	85bff22e 	bgeu	r16,r22,b598 <__divdf3+0x6fc>
    b5d0:	e0c7c83a 	sub	r3,fp,r3
    b5d4:	1023883a 	mov	r17,r2
    b5d8:	003f4606 	br	b2f4 <__divdf3+0x458>
    b5dc:	100f883a 	mov	r7,r2
    b5e0:	003f2b06 	br	b290 <__divdf3+0x3f4>
    b5e4:	180d883a 	mov	r6,r3
    b5e8:	003f1306 	br	b238 <__divdf3+0x39c>
    b5ec:	813fe436 	bltu	r16,r4,b580 <__divdf3+0x6e4>
    b5f0:	0007883a 	mov	r3,zero
    b5f4:	003f3f06 	br	b2f4 <__divdf3+0x458>
    b5f8:	ba402c36 	bltu	r23,r9,b6ac <__divdf3+0x810>
    b5fc:	4dc05426 	beq	r9,r23,b750 <__divdf3+0x8b4>
    b600:	1011883a 	mov	r8,r2
    b604:	003f8906 	br	b42c <__divdf3+0x590>
    b608:	023fffc4 	movi	r8,-1
    b60c:	003f8806 	br	b430 <__divdf3+0x594>
    b610:	1811883a 	mov	r8,r3
    b614:	003f5406 	br	b368 <__divdf3+0x4cc>
    b618:	1025883a 	mov	r18,r2
    b61c:	003f6d06 	br	b3d4 <__divdf3+0x538>
    b620:	b827883a 	mov	r19,r23
    b624:	003f8206 	br	b430 <__divdf3+0x594>
    b628:	010007c4 	movi	r4,31
    b62c:	20c02616 	blt	r4,r3,b6c8 <__divdf3+0x82c>
    b630:	00800804 	movi	r2,32
    b634:	10c5c83a 	sub	r2,r2,r3
    b638:	888a983a 	sll	r5,r17,r2
    b63c:	40c8d83a 	srl	r4,r8,r3
    b640:	4084983a 	sll	r2,r8,r2
    b644:	88e2d83a 	srl	r17,r17,r3
    b648:	2906b03a 	or	r3,r5,r4
    b64c:	1004c03a 	cmpne	r2,r2,zero
    b650:	1886b03a 	or	r3,r3,r2
    b654:	188001cc 	andi	r2,r3,7
    b658:	10000726 	beq	r2,zero,b678 <__divdf3+0x7dc>
    b65c:	188003cc 	andi	r2,r3,15
    b660:	01000104 	movi	r4,4
    b664:	11000426 	beq	r2,r4,b678 <__divdf3+0x7dc>
    b668:	1805883a 	mov	r2,r3
    b66c:	10c00104 	addi	r3,r2,4
    b670:	1885803a 	cmpltu	r2,r3,r2
    b674:	88a3883a 	add	r17,r17,r2
    b678:	8880202c 	andhi	r2,r17,128
    b67c:	10002726 	beq	r2,zero,b71c <__divdf3+0x880>
    b680:	98c0004c 	andi	r3,r19,1
    b684:	00800044 	movi	r2,1
    b688:	000b883a 	mov	r5,zero
    b68c:	0025883a 	mov	r18,zero
    b690:	003e6106 	br	b018 <__divdf3+0x17c>
    b694:	85a1883a 	add	r16,r16,r22
    b698:	8585803a 	cmpltu	r2,r16,r22
    b69c:	1705883a 	add	r2,r2,fp
    b6a0:	14a5883a 	add	r18,r2,r18
    b6a4:	8c7fff84 	addi	r17,r17,-2
    b6a8:	003f1106 	br	b2f0 <__divdf3+0x454>
    b6ac:	b589883a 	add	r4,r22,r22
    b6b0:	25ad803a 	cmpltu	r22,r4,r22
    b6b4:	b739883a 	add	fp,r22,fp
    b6b8:	40bfff84 	addi	r2,r8,-2
    b6bc:	bf2f883a 	add	r23,r23,fp
    b6c0:	202d883a 	mov	r22,r4
    b6c4:	003f9306 	br	b514 <__divdf3+0x678>
    b6c8:	013ff844 	movi	r4,-31
    b6cc:	2085c83a 	sub	r2,r4,r2
    b6d0:	8888d83a 	srl	r4,r17,r2
    b6d4:	00800804 	movi	r2,32
    b6d8:	18802126 	beq	r3,r2,b760 <__divdf3+0x8c4>
    b6dc:	00801004 	movi	r2,64
    b6e0:	10c5c83a 	sub	r2,r2,r3
    b6e4:	8884983a 	sll	r2,r17,r2
    b6e8:	1204b03a 	or	r2,r2,r8
    b6ec:	1004c03a 	cmpne	r2,r2,zero
    b6f0:	2084b03a 	or	r2,r4,r2
    b6f4:	144001cc 	andi	r17,r2,7
    b6f8:	88000d1e 	bne	r17,zero,b730 <__divdf3+0x894>
    b6fc:	000b883a 	mov	r5,zero
    b700:	1024d0fa 	srli	r18,r2,3
    b704:	98c0004c 	andi	r3,r19,1
    b708:	0005883a 	mov	r2,zero
    b70c:	9464b03a 	or	r18,r18,r17
    b710:	003e4106 	br	b018 <__divdf3+0x17c>
    b714:	1007883a 	mov	r3,r2
    b718:	0023883a 	mov	r17,zero
    b71c:	880a927a 	slli	r5,r17,9
    b720:	1805883a 	mov	r2,r3
    b724:	8822977a 	slli	r17,r17,29
    b728:	280ad33a 	srli	r5,r5,12
    b72c:	003ff406 	br	b700 <__divdf3+0x864>
    b730:	10c003cc 	andi	r3,r2,15
    b734:	01000104 	movi	r4,4
    b738:	193ff626 	beq	r3,r4,b714 <__divdf3+0x878>
    b73c:	0023883a 	mov	r17,zero
    b740:	003fca06 	br	b66c <__divdf3+0x7d0>
    b744:	813fd336 	bltu	r16,r4,b694 <__divdf3+0x7f8>
    b748:	1023883a 	mov	r17,r2
    b74c:	003fa806 	br	b5f0 <__divdf3+0x754>
    b750:	b0ffd636 	bltu	r22,r3,b6ac <__divdf3+0x810>
    b754:	1011883a 	mov	r8,r2
    b758:	b0ff341e 	bne	r22,r3,b42c <__divdf3+0x590>
    b75c:	003f3406 	br	b430 <__divdf3+0x594>
    b760:	0005883a 	mov	r2,zero
    b764:	003fe006 	br	b6e8 <__divdf3+0x84c>
    b768:	00800434 	movhi	r2,16
    b76c:	89400234 	orhi	r5,r17,8
    b770:	10bfffc4 	addi	r2,r2,-1
    b774:	b807883a 	mov	r3,r23
    b778:	288a703a 	and	r5,r5,r2
    b77c:	4025883a 	mov	r18,r8
    b780:	003e8206 	br	b18c <__divdf3+0x2f0>

0000b784 <__eqdf2>:
    b784:	2804d53a 	srli	r2,r5,20
    b788:	3806d53a 	srli	r3,r7,20
    b78c:	02000434 	movhi	r8,16
    b790:	423fffc4 	addi	r8,r8,-1
    b794:	1081ffcc 	andi	r2,r2,2047
    b798:	0281ffc4 	movi	r10,2047
    b79c:	2a12703a 	and	r9,r5,r8
    b7a0:	18c1ffcc 	andi	r3,r3,2047
    b7a4:	3a10703a 	and	r8,r7,r8
    b7a8:	280ad7fa 	srli	r5,r5,31
    b7ac:	380ed7fa 	srli	r7,r7,31
    b7b0:	12801026 	beq	r2,r10,b7f4 <__eqdf2+0x70>
    b7b4:	0281ffc4 	movi	r10,2047
    b7b8:	1a800a26 	beq	r3,r10,b7e4 <__eqdf2+0x60>
    b7bc:	10c00226 	beq	r2,r3,b7c8 <__eqdf2+0x44>
    b7c0:	00800044 	movi	r2,1
    b7c4:	f800283a 	ret
    b7c8:	4a3ffd1e 	bne	r9,r8,b7c0 <__eqdf2+0x3c>
    b7cc:	21bffc1e 	bne	r4,r6,b7c0 <__eqdf2+0x3c>
    b7d0:	29c00c26 	beq	r5,r7,b804 <__eqdf2+0x80>
    b7d4:	103ffa1e 	bne	r2,zero,b7c0 <__eqdf2+0x3c>
    b7d8:	2244b03a 	or	r2,r4,r9
    b7dc:	1004c03a 	cmpne	r2,r2,zero
    b7e0:	f800283a 	ret
    b7e4:	3214b03a 	or	r10,r6,r8
    b7e8:	503ff426 	beq	r10,zero,b7bc <__eqdf2+0x38>
    b7ec:	00800044 	movi	r2,1
    b7f0:	f800283a 	ret
    b7f4:	2254b03a 	or	r10,r4,r9
    b7f8:	503fee26 	beq	r10,zero,b7b4 <__eqdf2+0x30>
    b7fc:	00800044 	movi	r2,1
    b800:	f800283a 	ret
    b804:	0005883a 	mov	r2,zero
    b808:	f800283a 	ret

0000b80c <__gedf2>:
    b80c:	2804d53a 	srli	r2,r5,20
    b810:	3806d53a 	srli	r3,r7,20
    b814:	02000434 	movhi	r8,16
    b818:	423fffc4 	addi	r8,r8,-1
    b81c:	1081ffcc 	andi	r2,r2,2047
    b820:	0241ffc4 	movi	r9,2047
    b824:	2a14703a 	and	r10,r5,r8
    b828:	18c1ffcc 	andi	r3,r3,2047
    b82c:	3a10703a 	and	r8,r7,r8
    b830:	280ad7fa 	srli	r5,r5,31
    b834:	380ed7fa 	srli	r7,r7,31
    b838:	12401d26 	beq	r2,r9,b8b0 <__gedf2+0xa4>
    b83c:	0241ffc4 	movi	r9,2047
    b840:	1a401226 	beq	r3,r9,b88c <__gedf2+0x80>
    b844:	1000081e 	bne	r2,zero,b868 <__gedf2+0x5c>
    b848:	2296b03a 	or	r11,r4,r10
    b84c:	5813003a 	cmpeq	r9,r11,zero
    b850:	1800091e 	bne	r3,zero,b878 <__gedf2+0x6c>
    b854:	3218b03a 	or	r12,r6,r8
    b858:	6000071e 	bne	r12,zero,b878 <__gedf2+0x6c>
    b85c:	0005883a 	mov	r2,zero
    b860:	5800101e 	bne	r11,zero,b8a4 <__gedf2+0x98>
    b864:	f800283a 	ret
    b868:	18000c1e 	bne	r3,zero,b89c <__gedf2+0x90>
    b86c:	3212b03a 	or	r9,r6,r8
    b870:	48000c26 	beq	r9,zero,b8a4 <__gedf2+0x98>
    b874:	0013883a 	mov	r9,zero
    b878:	39c03fcc 	andi	r7,r7,255
    b87c:	48000826 	beq	r9,zero,b8a0 <__gedf2+0x94>
    b880:	38000926 	beq	r7,zero,b8a8 <__gedf2+0x9c>
    b884:	00800044 	movi	r2,1
    b888:	f800283a 	ret
    b88c:	3212b03a 	or	r9,r6,r8
    b890:	483fec26 	beq	r9,zero,b844 <__gedf2+0x38>
    b894:	00bfff84 	movi	r2,-2
    b898:	f800283a 	ret
    b89c:	39c03fcc 	andi	r7,r7,255
    b8a0:	29c00626 	beq	r5,r7,b8bc <__gedf2+0xb0>
    b8a4:	283ff726 	beq	r5,zero,b884 <__gedf2+0x78>
    b8a8:	00bfffc4 	movi	r2,-1
    b8ac:	f800283a 	ret
    b8b0:	2292b03a 	or	r9,r4,r10
    b8b4:	483fe126 	beq	r9,zero,b83c <__gedf2+0x30>
    b8b8:	003ff606 	br	b894 <__gedf2+0x88>
    b8bc:	18bff916 	blt	r3,r2,b8a4 <__gedf2+0x98>
    b8c0:	10c00316 	blt	r2,r3,b8d0 <__gedf2+0xc4>
    b8c4:	42bff736 	bltu	r8,r10,b8a4 <__gedf2+0x98>
    b8c8:	52000326 	beq	r10,r8,b8d8 <__gedf2+0xcc>
    b8cc:	5200042e 	bgeu	r10,r8,b8e0 <__gedf2+0xd4>
    b8d0:	283fec1e 	bne	r5,zero,b884 <__gedf2+0x78>
    b8d4:	003ff406 	br	b8a8 <__gedf2+0x9c>
    b8d8:	313ff236 	bltu	r6,r4,b8a4 <__gedf2+0x98>
    b8dc:	21bffc36 	bltu	r4,r6,b8d0 <__gedf2+0xc4>
    b8e0:	0005883a 	mov	r2,zero
    b8e4:	f800283a 	ret

0000b8e8 <__ledf2>:
    b8e8:	2804d53a 	srli	r2,r5,20
    b8ec:	3810d53a 	srli	r8,r7,20
    b8f0:	00c00434 	movhi	r3,16
    b8f4:	18ffffc4 	addi	r3,r3,-1
    b8f8:	1081ffcc 	andi	r2,r2,2047
    b8fc:	0241ffc4 	movi	r9,2047
    b900:	28d4703a 	and	r10,r5,r3
    b904:	4201ffcc 	andi	r8,r8,2047
    b908:	38c6703a 	and	r3,r7,r3
    b90c:	280ad7fa 	srli	r5,r5,31
    b910:	380ed7fa 	srli	r7,r7,31
    b914:	12401f26 	beq	r2,r9,b994 <__ledf2+0xac>
    b918:	0241ffc4 	movi	r9,2047
    b91c:	42401426 	beq	r8,r9,b970 <__ledf2+0x88>
    b920:	1000091e 	bne	r2,zero,b948 <__ledf2+0x60>
    b924:	2296b03a 	or	r11,r4,r10
    b928:	5813003a 	cmpeq	r9,r11,zero
    b92c:	29403fcc 	andi	r5,r5,255
    b930:	40000a1e 	bne	r8,zero,b95c <__ledf2+0x74>
    b934:	30d8b03a 	or	r12,r6,r3
    b938:	6000081e 	bne	r12,zero,b95c <__ledf2+0x74>
    b93c:	0005883a 	mov	r2,zero
    b940:	5800111e 	bne	r11,zero,b988 <__ledf2+0xa0>
    b944:	f800283a 	ret
    b948:	29403fcc 	andi	r5,r5,255
    b94c:	40000c1e 	bne	r8,zero,b980 <__ledf2+0x98>
    b950:	30d2b03a 	or	r9,r6,r3
    b954:	48000c26 	beq	r9,zero,b988 <__ledf2+0xa0>
    b958:	0013883a 	mov	r9,zero
    b95c:	39c03fcc 	andi	r7,r7,255
    b960:	48000826 	beq	r9,zero,b984 <__ledf2+0x9c>
    b964:	38001126 	beq	r7,zero,b9ac <__ledf2+0xc4>
    b968:	00800044 	movi	r2,1
    b96c:	f800283a 	ret
    b970:	30d2b03a 	or	r9,r6,r3
    b974:	483fea26 	beq	r9,zero,b920 <__ledf2+0x38>
    b978:	00800084 	movi	r2,2
    b97c:	f800283a 	ret
    b980:	39c03fcc 	andi	r7,r7,255
    b984:	39400726 	beq	r7,r5,b9a4 <__ledf2+0xbc>
    b988:	2800081e 	bne	r5,zero,b9ac <__ledf2+0xc4>
    b98c:	00800044 	movi	r2,1
    b990:	f800283a 	ret
    b994:	2292b03a 	or	r9,r4,r10
    b998:	483fdf26 	beq	r9,zero,b918 <__ledf2+0x30>
    b99c:	00800084 	movi	r2,2
    b9a0:	f800283a 	ret
    b9a4:	4080030e 	bge	r8,r2,b9b4 <__ledf2+0xcc>
    b9a8:	383fef26 	beq	r7,zero,b968 <__ledf2+0x80>
    b9ac:	00bfffc4 	movi	r2,-1
    b9b0:	f800283a 	ret
    b9b4:	123feb16 	blt	r2,r8,b964 <__ledf2+0x7c>
    b9b8:	1abff336 	bltu	r3,r10,b988 <__ledf2+0xa0>
    b9bc:	50c00326 	beq	r10,r3,b9cc <__ledf2+0xe4>
    b9c0:	50c0042e 	bgeu	r10,r3,b9d4 <__ledf2+0xec>
    b9c4:	283fe81e 	bne	r5,zero,b968 <__ledf2+0x80>
    b9c8:	003ff806 	br	b9ac <__ledf2+0xc4>
    b9cc:	313fee36 	bltu	r6,r4,b988 <__ledf2+0xa0>
    b9d0:	21bffc36 	bltu	r4,r6,b9c4 <__ledf2+0xdc>
    b9d4:	0005883a 	mov	r2,zero
    b9d8:	f800283a 	ret

0000b9dc <__muldf3>:
    b9dc:	defff304 	addi	sp,sp,-52
    b9e0:	dd400815 	stw	r21,32(sp)
    b9e4:	282ad53a 	srli	r21,r5,20
    b9e8:	dd800915 	stw	r22,36(sp)
    b9ec:	282cd7fa 	srli	r22,r5,31
    b9f0:	dc000315 	stw	r16,12(sp)
    b9f4:	04000434 	movhi	r16,16
    b9f8:	dd000715 	stw	r20,28(sp)
    b9fc:	843fffc4 	addi	r16,r16,-1
    ba00:	dfc00c15 	stw	ra,48(sp)
    ba04:	df000b15 	stw	fp,44(sp)
    ba08:	ddc00a15 	stw	r23,40(sp)
    ba0c:	dcc00615 	stw	r19,24(sp)
    ba10:	dc800515 	stw	r18,20(sp)
    ba14:	dc400415 	stw	r17,16(sp)
    ba18:	ad41ffcc 	andi	r21,r21,2047
    ba1c:	2c20703a 	and	r16,r5,r16
    ba20:	b029883a 	mov	r20,r22
    ba24:	b2403fcc 	andi	r9,r22,255
    ba28:	a8006026 	beq	r21,zero,bbac <__muldf3+0x1d0>
    ba2c:	0081ffc4 	movi	r2,2047
    ba30:	2027883a 	mov	r19,r4
    ba34:	a8803626 	beq	r21,r2,bb10 <__muldf3+0x134>
    ba38:	80c00434 	orhi	r3,r16,16
    ba3c:	180690fa 	slli	r3,r3,3
    ba40:	2020d77a 	srli	r16,r4,29
    ba44:	202690fa 	slli	r19,r4,3
    ba48:	ad7f0044 	addi	r21,r21,-1023
    ba4c:	80e0b03a 	or	r16,r16,r3
    ba50:	0025883a 	mov	r18,zero
    ba54:	0039883a 	mov	fp,zero
    ba58:	3808d53a 	srli	r4,r7,20
    ba5c:	382ed7fa 	srli	r23,r7,31
    ba60:	04400434 	movhi	r17,16
    ba64:	8c7fffc4 	addi	r17,r17,-1
    ba68:	2101ffcc 	andi	r4,r4,2047
    ba6c:	3011883a 	mov	r8,r6
    ba70:	3c62703a 	and	r17,r7,r17
    ba74:	ba803fcc 	andi	r10,r23,255
    ba78:	20006d26 	beq	r4,zero,bc30 <__muldf3+0x254>
    ba7c:	0081ffc4 	movi	r2,2047
    ba80:	20806526 	beq	r4,r2,bc18 <__muldf3+0x23c>
    ba84:	88c00434 	orhi	r3,r17,16
    ba88:	180690fa 	slli	r3,r3,3
    ba8c:	3022d77a 	srli	r17,r6,29
    ba90:	301090fa 	slli	r8,r6,3
    ba94:	213f0044 	addi	r4,r4,-1023
    ba98:	88e2b03a 	or	r17,r17,r3
    ba9c:	000b883a 	mov	r5,zero
    baa0:	a909883a 	add	r4,r21,r4
    baa4:	2c84b03a 	or	r2,r5,r18
    baa8:	00c003c4 	movi	r3,15
    baac:	bdacf03a 	xor	r22,r23,r22
    bab0:	22c00044 	addi	r11,r4,1
    bab4:	18809936 	bltu	r3,r2,bd1c <__muldf3+0x340>
    bab8:	100490ba 	slli	r2,r2,2
    babc:	00c00074 	movhi	r3,1
    bac0:	18eeb404 	addi	r3,r3,-17712
    bac4:	10c5883a 	add	r2,r2,r3
    bac8:	10800017 	ldw	r2,0(r2)
    bacc:	1000683a 	jmp	r2
    bad0:	0000bd1c 	xori	zero,zero,756
    bad4:	0000bb30 	cmpltui	zero,zero,748
    bad8:	0000bb30 	cmpltui	zero,zero,748
    badc:	0000bb2c 	andhi	zero,zero,748
    bae0:	0000bcf8 	rdprs	zero,zero,755
    bae4:	0000bcf8 	rdprs	zero,zero,755
    bae8:	0000bce0 	cmpeqi	zero,zero,755
    baec:	0000bb2c 	andhi	zero,zero,748
    baf0:	0000bcf8 	rdprs	zero,zero,755
    baf4:	0000bce0 	cmpeqi	zero,zero,755
    baf8:	0000bcf8 	rdprs	zero,zero,755
    bafc:	0000bb2c 	andhi	zero,zero,748
    bb00:	0000bd08 	cmpgei	zero,zero,756
    bb04:	0000bd08 	cmpgei	zero,zero,756
    bb08:	0000bd08 	cmpgei	zero,zero,756
    bb0c:	0000bf24 	muli	zero,zero,764
    bb10:	2404b03a 	or	r2,r4,r16
    bb14:	10006f1e 	bne	r2,zero,bcd4 <__muldf3+0x2f8>
    bb18:	04800204 	movi	r18,8
    bb1c:	0021883a 	mov	r16,zero
    bb20:	0027883a 	mov	r19,zero
    bb24:	07000084 	movi	fp,2
    bb28:	003fcb06 	br	ba58 <__muldf3+0x7c>
    bb2c:	502d883a 	mov	r22,r10
    bb30:	00800084 	movi	r2,2
    bb34:	28805726 	beq	r5,r2,bc94 <__muldf3+0x2b8>
    bb38:	008000c4 	movi	r2,3
    bb3c:	28816626 	beq	r5,r2,c0d8 <__muldf3+0x6fc>
    bb40:	00800044 	movi	r2,1
    bb44:	2881411e 	bne	r5,r2,c04c <__muldf3+0x670>
    bb48:	b029883a 	mov	r20,r22
    bb4c:	0005883a 	mov	r2,zero
    bb50:	000b883a 	mov	r5,zero
    bb54:	0027883a 	mov	r19,zero
    bb58:	1004953a 	slli	r2,r2,20
    bb5c:	a0c03fcc 	andi	r3,r20,255
    bb60:	04400434 	movhi	r17,16
    bb64:	8c7fffc4 	addi	r17,r17,-1
    bb68:	180697fa 	slli	r3,r3,31
    bb6c:	2c4a703a 	and	r5,r5,r17
    bb70:	288ab03a 	or	r5,r5,r2
    bb74:	28c6b03a 	or	r3,r5,r3
    bb78:	9805883a 	mov	r2,r19
    bb7c:	dfc00c17 	ldw	ra,48(sp)
    bb80:	df000b17 	ldw	fp,44(sp)
    bb84:	ddc00a17 	ldw	r23,40(sp)
    bb88:	dd800917 	ldw	r22,36(sp)
    bb8c:	dd400817 	ldw	r21,32(sp)
    bb90:	dd000717 	ldw	r20,28(sp)
    bb94:	dcc00617 	ldw	r19,24(sp)
    bb98:	dc800517 	ldw	r18,20(sp)
    bb9c:	dc400417 	ldw	r17,16(sp)
    bba0:	dc000317 	ldw	r16,12(sp)
    bba4:	dec00d04 	addi	sp,sp,52
    bba8:	f800283a 	ret
    bbac:	2404b03a 	or	r2,r4,r16
    bbb0:	2025883a 	mov	r18,r4
    bbb4:	10004226 	beq	r2,zero,bcc0 <__muldf3+0x2e4>
    bbb8:	8000fc26 	beq	r16,zero,bfac <__muldf3+0x5d0>
    bbbc:	8009883a 	mov	r4,r16
    bbc0:	d9800215 	stw	r6,8(sp)
    bbc4:	d9c00015 	stw	r7,0(sp)
    bbc8:	da400115 	stw	r9,4(sp)
    bbcc:	000cbf40 	call	cbf4 <__clzsi2>
    bbd0:	d9800217 	ldw	r6,8(sp)
    bbd4:	d9c00017 	ldw	r7,0(sp)
    bbd8:	da400117 	ldw	r9,4(sp)
    bbdc:	10fffd44 	addi	r3,r2,-11
    bbe0:	01000704 	movi	r4,28
    bbe4:	20c0ed16 	blt	r4,r3,bf9c <__muldf3+0x5c0>
    bbe8:	01000744 	movi	r4,29
    bbec:	147ffe04 	addi	r17,r2,-8
    bbf0:	20c9c83a 	sub	r4,r4,r3
    bbf4:	8460983a 	sll	r16,r16,r17
    bbf8:	9108d83a 	srl	r4,r18,r4
    bbfc:	9466983a 	sll	r19,r18,r17
    bc00:	2420b03a 	or	r16,r4,r16
    bc04:	013f0084 	movi	r4,-1022
    bc08:	20ebc83a 	sub	r21,r4,r3
    bc0c:	0025883a 	mov	r18,zero
    bc10:	0039883a 	mov	fp,zero
    bc14:	003f9006 	br	ba58 <__muldf3+0x7c>
    bc18:	3444b03a 	or	r2,r6,r17
    bc1c:	1000261e 	bne	r2,zero,bcb8 <__muldf3+0x2dc>
    bc20:	0023883a 	mov	r17,zero
    bc24:	0011883a 	mov	r8,zero
    bc28:	01400084 	movi	r5,2
    bc2c:	003f9c06 	br	baa0 <__muldf3+0xc4>
    bc30:	3444b03a 	or	r2,r6,r17
    bc34:	10001c26 	beq	r2,zero,bca8 <__muldf3+0x2cc>
    bc38:	8800ce26 	beq	r17,zero,bf74 <__muldf3+0x598>
    bc3c:	8809883a 	mov	r4,r17
    bc40:	d9800215 	stw	r6,8(sp)
    bc44:	da400115 	stw	r9,4(sp)
    bc48:	da800015 	stw	r10,0(sp)
    bc4c:	000cbf40 	call	cbf4 <__clzsi2>
    bc50:	d9800217 	ldw	r6,8(sp)
    bc54:	da400117 	ldw	r9,4(sp)
    bc58:	da800017 	ldw	r10,0(sp)
    bc5c:	113ffd44 	addi	r4,r2,-11
    bc60:	00c00704 	movi	r3,28
    bc64:	1900bf16 	blt	r3,r4,bf64 <__muldf3+0x588>
    bc68:	00c00744 	movi	r3,29
    bc6c:	123ffe04 	addi	r8,r2,-8
    bc70:	1907c83a 	sub	r3,r3,r4
    bc74:	8a22983a 	sll	r17,r17,r8
    bc78:	30c6d83a 	srl	r3,r6,r3
    bc7c:	3210983a 	sll	r8,r6,r8
    bc80:	1c62b03a 	or	r17,r3,r17
    bc84:	017f0084 	movi	r5,-1022
    bc88:	2909c83a 	sub	r4,r5,r4
    bc8c:	000b883a 	mov	r5,zero
    bc90:	003f8306 	br	baa0 <__muldf3+0xc4>
    bc94:	b029883a 	mov	r20,r22
    bc98:	0081ffc4 	movi	r2,2047
    bc9c:	000b883a 	mov	r5,zero
    bca0:	0027883a 	mov	r19,zero
    bca4:	003fac06 	br	bb58 <__muldf3+0x17c>
    bca8:	0023883a 	mov	r17,zero
    bcac:	0011883a 	mov	r8,zero
    bcb0:	01400044 	movi	r5,1
    bcb4:	003f7a06 	br	baa0 <__muldf3+0xc4>
    bcb8:	014000c4 	movi	r5,3
    bcbc:	003f7806 	br	baa0 <__muldf3+0xc4>
    bcc0:	04800104 	movi	r18,4
    bcc4:	0021883a 	mov	r16,zero
    bcc8:	0027883a 	mov	r19,zero
    bccc:	07000044 	movi	fp,1
    bcd0:	003f6106 	br	ba58 <__muldf3+0x7c>
    bcd4:	04800304 	movi	r18,12
    bcd8:	070000c4 	movi	fp,3
    bcdc:	003f5e06 	br	ba58 <__muldf3+0x7c>
    bce0:	01400434 	movhi	r5,16
    bce4:	0029883a 	mov	r20,zero
    bce8:	297fffc4 	addi	r5,r5,-1
    bcec:	04ffffc4 	movi	r19,-1
    bcf0:	0081ffc4 	movi	r2,2047
    bcf4:	003f9806 	br	bb58 <__muldf3+0x17c>
    bcf8:	8023883a 	mov	r17,r16
    bcfc:	9811883a 	mov	r8,r19
    bd00:	e00b883a 	mov	r5,fp
    bd04:	003f8a06 	br	bb30 <__muldf3+0x154>
    bd08:	8023883a 	mov	r17,r16
    bd0c:	9811883a 	mov	r8,r19
    bd10:	482d883a 	mov	r22,r9
    bd14:	e00b883a 	mov	r5,fp
    bd18:	003f8506 	br	bb30 <__muldf3+0x154>
    bd1c:	980ad43a 	srli	r5,r19,16
    bd20:	401ad43a 	srli	r13,r8,16
    bd24:	9cffffcc 	andi	r19,r19,65535
    bd28:	423fffcc 	andi	r8,r8,65535
    bd2c:	44d9383a 	mul	r12,r8,r19
    bd30:	4145383a 	mul	r2,r8,r5
    bd34:	6ccd383a 	mul	r6,r13,r19
    bd38:	6006d43a 	srli	r3,r12,16
    bd3c:	2b5d383a 	mul	r14,r5,r13
    bd40:	308d883a 	add	r6,r6,r2
    bd44:	198d883a 	add	r6,r3,r6
    bd48:	3080022e 	bgeu	r6,r2,bd54 <__muldf3+0x378>
    bd4c:	00800074 	movhi	r2,1
    bd50:	709d883a 	add	r14,r14,r2
    bd54:	8828d43a 	srli	r20,r17,16
    bd58:	8bffffcc 	andi	r15,r17,65535
    bd5c:	7ce3383a 	mul	r17,r15,r19
    bd60:	7945383a 	mul	r2,r15,r5
    bd64:	a4e7383a 	mul	r19,r20,r19
    bd68:	8814d43a 	srli	r10,r17,16
    bd6c:	3012943a 	slli	r9,r6,16
    bd70:	98a7883a 	add	r19,r19,r2
    bd74:	633fffcc 	andi	r12,r12,65535
    bd78:	54d5883a 	add	r10,r10,r19
    bd7c:	3006d43a 	srli	r3,r6,16
    bd80:	4b13883a 	add	r9,r9,r12
    bd84:	2d0b383a 	mul	r5,r5,r20
    bd88:	5080022e 	bgeu	r10,r2,bd94 <__muldf3+0x3b8>
    bd8c:	00800074 	movhi	r2,1
    bd90:	288b883a 	add	r5,r5,r2
    bd94:	802ad43a 	srli	r21,r16,16
    bd98:	843fffcc 	andi	r16,r16,65535
    bd9c:	440d383a 	mul	r6,r8,r16
    bda0:	4565383a 	mul	r18,r8,r21
    bda4:	8359383a 	mul	r12,r16,r13
    bda8:	500e943a 	slli	r7,r10,16
    bdac:	3010d43a 	srli	r8,r6,16
    bdb0:	5026d43a 	srli	r19,r10,16
    bdb4:	6499883a 	add	r12,r12,r18
    bdb8:	8abfffcc 	andi	r10,r17,65535
    bdbc:	3a95883a 	add	r10,r7,r10
    bdc0:	4319883a 	add	r12,r8,r12
    bdc4:	9967883a 	add	r19,r19,r5
    bdc8:	1a87883a 	add	r3,r3,r10
    bdcc:	6d5b383a 	mul	r13,r13,r21
    bdd0:	6480022e 	bgeu	r12,r18,bddc <__muldf3+0x400>
    bdd4:	00800074 	movhi	r2,1
    bdd8:	689b883a 	add	r13,r13,r2
    bddc:	7c25383a 	mul	r18,r15,r16
    bde0:	7d4b383a 	mul	r5,r15,r21
    bde4:	850f383a 	mul	r7,r16,r20
    bde8:	901ed43a 	srli	r15,r18,16
    bdec:	6004d43a 	srli	r2,r12,16
    bdf0:	6010943a 	slli	r8,r12,16
    bdf4:	394f883a 	add	r7,r7,r5
    bdf8:	333fffcc 	andi	r12,r6,65535
    bdfc:	79df883a 	add	r15,r15,r7
    be00:	135b883a 	add	r13,r2,r13
    be04:	a563383a 	mul	r17,r20,r21
    be08:	4305883a 	add	r2,r8,r12
    be0c:	7940022e 	bgeu	r15,r5,be18 <__muldf3+0x43c>
    be10:	01400074 	movhi	r5,1
    be14:	8963883a 	add	r17,r17,r5
    be18:	780a943a 	slli	r5,r15,16
    be1c:	91bfffcc 	andi	r6,r18,65535
    be20:	70c7883a 	add	r3,r14,r3
    be24:	298d883a 	add	r6,r5,r6
    be28:	1a8f803a 	cmpltu	r7,r3,r10
    be2c:	34cb883a 	add	r5,r6,r19
    be30:	10c7883a 	add	r3,r2,r3
    be34:	3955883a 	add	r10,r7,r5
    be38:	1885803a 	cmpltu	r2,r3,r2
    be3c:	6a91883a 	add	r8,r13,r10
    be40:	780cd43a 	srli	r6,r15,16
    be44:	1219883a 	add	r12,r2,r8
    be48:	2ccb803a 	cmpltu	r5,r5,r19
    be4c:	51cf803a 	cmpltu	r7,r10,r7
    be50:	29ceb03a 	or	r7,r5,r7
    be54:	4351803a 	cmpltu	r8,r8,r13
    be58:	608b803a 	cmpltu	r5,r12,r2
    be5c:	4144b03a 	or	r2,r8,r5
    be60:	398f883a 	add	r7,r7,r6
    be64:	3885883a 	add	r2,r7,r2
    be68:	1810927a 	slli	r8,r3,9
    be6c:	1445883a 	add	r2,r2,r17
    be70:	1004927a 	slli	r2,r2,9
    be74:	6022d5fa 	srli	r17,r12,23
    be78:	1806d5fa 	srli	r3,r3,23
    be7c:	4252b03a 	or	r9,r8,r9
    be80:	600a927a 	slli	r5,r12,9
    be84:	4810c03a 	cmpne	r8,r9,zero
    be88:	1462b03a 	or	r17,r2,r17
    be8c:	40c6b03a 	or	r3,r8,r3
    be90:	8880402c 	andhi	r2,r17,256
    be94:	1950b03a 	or	r8,r3,r5
    be98:	10000726 	beq	r2,zero,beb8 <__muldf3+0x4dc>
    be9c:	4006d07a 	srli	r3,r8,1
    bea0:	880497fa 	slli	r2,r17,31
    bea4:	4200004c 	andi	r8,r8,1
    bea8:	8822d07a 	srli	r17,r17,1
    beac:	1a10b03a 	or	r8,r3,r8
    beb0:	1210b03a 	or	r8,r2,r8
    beb4:	5809883a 	mov	r4,r11
    beb8:	2080ffc4 	addi	r2,r4,1023
    bebc:	0080440e 	bge	zero,r2,bfd0 <__muldf3+0x5f4>
    bec0:	40c001cc 	andi	r3,r8,7
    bec4:	18000726 	beq	r3,zero,bee4 <__muldf3+0x508>
    bec8:	40c003cc 	andi	r3,r8,15
    becc:	01400104 	movi	r5,4
    bed0:	19400426 	beq	r3,r5,bee4 <__muldf3+0x508>
    bed4:	4147883a 	add	r3,r8,r5
    bed8:	1a11803a 	cmpltu	r8,r3,r8
    bedc:	8a23883a 	add	r17,r17,r8
    bee0:	1811883a 	mov	r8,r3
    bee4:	88c0402c 	andhi	r3,r17,256
    bee8:	18000426 	beq	r3,zero,befc <__muldf3+0x520>
    beec:	00ffc034 	movhi	r3,65280
    bef0:	18ffffc4 	addi	r3,r3,-1
    bef4:	20810004 	addi	r2,r4,1024
    bef8:	88e2703a 	and	r17,r17,r3
    befc:	00c1ff84 	movi	r3,2046
    bf00:	18bf6416 	blt	r3,r2,bc94 <__muldf3+0x2b8>
    bf04:	8826977a 	slli	r19,r17,29
    bf08:	4010d0fa 	srli	r8,r8,3
    bf0c:	8822927a 	slli	r17,r17,9
    bf10:	1081ffcc 	andi	r2,r2,2047
    bf14:	9a26b03a 	or	r19,r19,r8
    bf18:	880ad33a 	srli	r5,r17,12
    bf1c:	b029883a 	mov	r20,r22
    bf20:	003f0d06 	br	bb58 <__muldf3+0x17c>
    bf24:	8080022c 	andhi	r2,r16,8
    bf28:	10000926 	beq	r2,zero,bf50 <__muldf3+0x574>
    bf2c:	8880022c 	andhi	r2,r17,8
    bf30:	1000071e 	bne	r2,zero,bf50 <__muldf3+0x574>
    bf34:	00800434 	movhi	r2,16
    bf38:	89400234 	orhi	r5,r17,8
    bf3c:	10bfffc4 	addi	r2,r2,-1
    bf40:	b829883a 	mov	r20,r23
    bf44:	288a703a 	and	r5,r5,r2
    bf48:	4027883a 	mov	r19,r8
    bf4c:	003f6806 	br	bcf0 <__muldf3+0x314>
    bf50:	00800434 	movhi	r2,16
    bf54:	81400234 	orhi	r5,r16,8
    bf58:	10bfffc4 	addi	r2,r2,-1
    bf5c:	288a703a 	and	r5,r5,r2
    bf60:	003f6306 	br	bcf0 <__muldf3+0x314>
    bf64:	10bff604 	addi	r2,r2,-40
    bf68:	30a2983a 	sll	r17,r6,r2
    bf6c:	0011883a 	mov	r8,zero
    bf70:	003f4406 	br	bc84 <__muldf3+0x2a8>
    bf74:	3009883a 	mov	r4,r6
    bf78:	d9800215 	stw	r6,8(sp)
    bf7c:	da400115 	stw	r9,4(sp)
    bf80:	da800015 	stw	r10,0(sp)
    bf84:	000cbf40 	call	cbf4 <__clzsi2>
    bf88:	10800804 	addi	r2,r2,32
    bf8c:	da800017 	ldw	r10,0(sp)
    bf90:	da400117 	ldw	r9,4(sp)
    bf94:	d9800217 	ldw	r6,8(sp)
    bf98:	003f3006 	br	bc5c <__muldf3+0x280>
    bf9c:	10bff604 	addi	r2,r2,-40
    bfa0:	90a0983a 	sll	r16,r18,r2
    bfa4:	0027883a 	mov	r19,zero
    bfa8:	003f1606 	br	bc04 <__muldf3+0x228>
    bfac:	d9800215 	stw	r6,8(sp)
    bfb0:	d9c00015 	stw	r7,0(sp)
    bfb4:	da400115 	stw	r9,4(sp)
    bfb8:	000cbf40 	call	cbf4 <__clzsi2>
    bfbc:	10800804 	addi	r2,r2,32
    bfc0:	da400117 	ldw	r9,4(sp)
    bfc4:	d9c00017 	ldw	r7,0(sp)
    bfc8:	d9800217 	ldw	r6,8(sp)
    bfcc:	003f0306 	br	bbdc <__muldf3+0x200>
    bfd0:	00c00044 	movi	r3,1
    bfd4:	1887c83a 	sub	r3,r3,r2
    bfd8:	01000e04 	movi	r4,56
    bfdc:	20feda16 	blt	r4,r3,bb48 <__muldf3+0x16c>
    bfe0:	010007c4 	movi	r4,31
    bfe4:	20c01b16 	blt	r4,r3,c054 <__muldf3+0x678>
    bfe8:	00800804 	movi	r2,32
    bfec:	10c5c83a 	sub	r2,r2,r3
    bff0:	888a983a 	sll	r5,r17,r2
    bff4:	40c8d83a 	srl	r4,r8,r3
    bff8:	4084983a 	sll	r2,r8,r2
    bffc:	88e2d83a 	srl	r17,r17,r3
    c000:	2906b03a 	or	r3,r5,r4
    c004:	1004c03a 	cmpne	r2,r2,zero
    c008:	1886b03a 	or	r3,r3,r2
    c00c:	188001cc 	andi	r2,r3,7
    c010:	10000726 	beq	r2,zero,c030 <__muldf3+0x654>
    c014:	188003cc 	andi	r2,r3,15
    c018:	01000104 	movi	r4,4
    c01c:	11000426 	beq	r2,r4,c030 <__muldf3+0x654>
    c020:	1805883a 	mov	r2,r3
    c024:	10c00104 	addi	r3,r2,4
    c028:	1885803a 	cmpltu	r2,r3,r2
    c02c:	88a3883a 	add	r17,r17,r2
    c030:	8880202c 	andhi	r2,r17,128
    c034:	10001c26 	beq	r2,zero,c0a8 <__muldf3+0x6cc>
    c038:	b029883a 	mov	r20,r22
    c03c:	00800044 	movi	r2,1
    c040:	000b883a 	mov	r5,zero
    c044:	0027883a 	mov	r19,zero
    c048:	003ec306 	br	bb58 <__muldf3+0x17c>
    c04c:	5809883a 	mov	r4,r11
    c050:	003f9906 	br	beb8 <__muldf3+0x4dc>
    c054:	013ff844 	movi	r4,-31
    c058:	2085c83a 	sub	r2,r4,r2
    c05c:	8888d83a 	srl	r4,r17,r2
    c060:	00800804 	movi	r2,32
    c064:	18801a26 	beq	r3,r2,c0d0 <__muldf3+0x6f4>
    c068:	00801004 	movi	r2,64
    c06c:	10c5c83a 	sub	r2,r2,r3
    c070:	8884983a 	sll	r2,r17,r2
    c074:	1204b03a 	or	r2,r2,r8
    c078:	1004c03a 	cmpne	r2,r2,zero
    c07c:	2084b03a 	or	r2,r4,r2
    c080:	144001cc 	andi	r17,r2,7
    c084:	88000d1e 	bne	r17,zero,c0bc <__muldf3+0x6e0>
    c088:	000b883a 	mov	r5,zero
    c08c:	1026d0fa 	srli	r19,r2,3
    c090:	b029883a 	mov	r20,r22
    c094:	0005883a 	mov	r2,zero
    c098:	9c66b03a 	or	r19,r19,r17
    c09c:	003eae06 	br	bb58 <__muldf3+0x17c>
    c0a0:	1007883a 	mov	r3,r2
    c0a4:	0023883a 	mov	r17,zero
    c0a8:	880a927a 	slli	r5,r17,9
    c0ac:	1805883a 	mov	r2,r3
    c0b0:	8822977a 	slli	r17,r17,29
    c0b4:	280ad33a 	srli	r5,r5,12
    c0b8:	003ff406 	br	c08c <__muldf3+0x6b0>
    c0bc:	10c003cc 	andi	r3,r2,15
    c0c0:	01000104 	movi	r4,4
    c0c4:	193ff626 	beq	r3,r4,c0a0 <__muldf3+0x6c4>
    c0c8:	0023883a 	mov	r17,zero
    c0cc:	003fd506 	br	c024 <__muldf3+0x648>
    c0d0:	0005883a 	mov	r2,zero
    c0d4:	003fe706 	br	c074 <__muldf3+0x698>
    c0d8:	00800434 	movhi	r2,16
    c0dc:	89400234 	orhi	r5,r17,8
    c0e0:	10bfffc4 	addi	r2,r2,-1
    c0e4:	b029883a 	mov	r20,r22
    c0e8:	288a703a 	and	r5,r5,r2
    c0ec:	4027883a 	mov	r19,r8
    c0f0:	003eff06 	br	bcf0 <__muldf3+0x314>

0000c0f4 <__subdf3>:
    c0f4:	02000434 	movhi	r8,16
    c0f8:	423fffc4 	addi	r8,r8,-1
    c0fc:	defffb04 	addi	sp,sp,-20
    c100:	2a14703a 	and	r10,r5,r8
    c104:	3812d53a 	srli	r9,r7,20
    c108:	3a10703a 	and	r8,r7,r8
    c10c:	2006d77a 	srli	r3,r4,29
    c110:	3004d77a 	srli	r2,r6,29
    c114:	dc000015 	stw	r16,0(sp)
    c118:	501490fa 	slli	r10,r10,3
    c11c:	2820d53a 	srli	r16,r5,20
    c120:	401090fa 	slli	r8,r8,3
    c124:	dc800215 	stw	r18,8(sp)
    c128:	dc400115 	stw	r17,4(sp)
    c12c:	dfc00415 	stw	ra,16(sp)
    c130:	202290fa 	slli	r17,r4,3
    c134:	dcc00315 	stw	r19,12(sp)
    c138:	4a41ffcc 	andi	r9,r9,2047
    c13c:	0101ffc4 	movi	r4,2047
    c140:	2824d7fa 	srli	r18,r5,31
    c144:	8401ffcc 	andi	r16,r16,2047
    c148:	50c6b03a 	or	r3,r10,r3
    c14c:	380ed7fa 	srli	r7,r7,31
    c150:	408ab03a 	or	r5,r8,r2
    c154:	300c90fa 	slli	r6,r6,3
    c158:	49009626 	beq	r9,r4,c3b4 <__subdf3+0x2c0>
    c15c:	39c0005c 	xori	r7,r7,1
    c160:	8245c83a 	sub	r2,r16,r9
    c164:	3c807426 	beq	r7,r18,c338 <__subdf3+0x244>
    c168:	0080af0e 	bge	zero,r2,c428 <__subdf3+0x334>
    c16c:	48002a1e 	bne	r9,zero,c218 <__subdf3+0x124>
    c170:	2988b03a 	or	r4,r5,r6
    c174:	20009a1e 	bne	r4,zero,c3e0 <__subdf3+0x2ec>
    c178:	888001cc 	andi	r2,r17,7
    c17c:	10000726 	beq	r2,zero,c19c <__subdf3+0xa8>
    c180:	888003cc 	andi	r2,r17,15
    c184:	01000104 	movi	r4,4
    c188:	11000426 	beq	r2,r4,c19c <__subdf3+0xa8>
    c18c:	890b883a 	add	r5,r17,r4
    c190:	2c63803a 	cmpltu	r17,r5,r17
    c194:	1c47883a 	add	r3,r3,r17
    c198:	2823883a 	mov	r17,r5
    c19c:	1880202c 	andhi	r2,r3,128
    c1a0:	10005926 	beq	r2,zero,c308 <__subdf3+0x214>
    c1a4:	84000044 	addi	r16,r16,1
    c1a8:	0081ffc4 	movi	r2,2047
    c1ac:	8080be26 	beq	r16,r2,c4a8 <__subdf3+0x3b4>
    c1b0:	017fe034 	movhi	r5,65408
    c1b4:	297fffc4 	addi	r5,r5,-1
    c1b8:	1946703a 	and	r3,r3,r5
    c1bc:	1804977a 	slli	r2,r3,29
    c1c0:	1806927a 	slli	r3,r3,9
    c1c4:	8822d0fa 	srli	r17,r17,3
    c1c8:	8401ffcc 	andi	r16,r16,2047
    c1cc:	180ad33a 	srli	r5,r3,12
    c1d0:	9100004c 	andi	r4,r18,1
    c1d4:	1444b03a 	or	r2,r2,r17
    c1d8:	80c1ffcc 	andi	r3,r16,2047
    c1dc:	1820953a 	slli	r16,r3,20
    c1e0:	20c03fcc 	andi	r3,r4,255
    c1e4:	180897fa 	slli	r4,r3,31
    c1e8:	00c00434 	movhi	r3,16
    c1ec:	18ffffc4 	addi	r3,r3,-1
    c1f0:	28c6703a 	and	r3,r5,r3
    c1f4:	1c06b03a 	or	r3,r3,r16
    c1f8:	1906b03a 	or	r3,r3,r4
    c1fc:	dfc00417 	ldw	ra,16(sp)
    c200:	dcc00317 	ldw	r19,12(sp)
    c204:	dc800217 	ldw	r18,8(sp)
    c208:	dc400117 	ldw	r17,4(sp)
    c20c:	dc000017 	ldw	r16,0(sp)
    c210:	dec00504 	addi	sp,sp,20
    c214:	f800283a 	ret
    c218:	0101ffc4 	movi	r4,2047
    c21c:	813fd626 	beq	r16,r4,c178 <__subdf3+0x84>
    c220:	29402034 	orhi	r5,r5,128
    c224:	01000e04 	movi	r4,56
    c228:	2080a316 	blt	r4,r2,c4b8 <__subdf3+0x3c4>
    c22c:	010007c4 	movi	r4,31
    c230:	2080c616 	blt	r4,r2,c54c <__subdf3+0x458>
    c234:	01000804 	movi	r4,32
    c238:	2089c83a 	sub	r4,r4,r2
    c23c:	2910983a 	sll	r8,r5,r4
    c240:	308ed83a 	srl	r7,r6,r2
    c244:	3108983a 	sll	r4,r6,r4
    c248:	2884d83a 	srl	r2,r5,r2
    c24c:	41ccb03a 	or	r6,r8,r7
    c250:	2008c03a 	cmpne	r4,r4,zero
    c254:	310cb03a 	or	r6,r6,r4
    c258:	898dc83a 	sub	r6,r17,r6
    c25c:	89a3803a 	cmpltu	r17,r17,r6
    c260:	1887c83a 	sub	r3,r3,r2
    c264:	1c47c83a 	sub	r3,r3,r17
    c268:	3023883a 	mov	r17,r6
    c26c:	1880202c 	andhi	r2,r3,128
    c270:	10002326 	beq	r2,zero,c300 <__subdf3+0x20c>
    c274:	04c02034 	movhi	r19,128
    c278:	9cffffc4 	addi	r19,r19,-1
    c27c:	1ce6703a 	and	r19,r3,r19
    c280:	98007a26 	beq	r19,zero,c46c <__subdf3+0x378>
    c284:	9809883a 	mov	r4,r19
    c288:	000cbf40 	call	cbf4 <__clzsi2>
    c28c:	113ffe04 	addi	r4,r2,-8
    c290:	00c007c4 	movi	r3,31
    c294:	19007b16 	blt	r3,r4,c484 <__subdf3+0x390>
    c298:	00800804 	movi	r2,32
    c29c:	1105c83a 	sub	r2,r2,r4
    c2a0:	8884d83a 	srl	r2,r17,r2
    c2a4:	9906983a 	sll	r3,r19,r4
    c2a8:	8922983a 	sll	r17,r17,r4
    c2ac:	10c4b03a 	or	r2,r2,r3
    c2b0:	24007816 	blt	r4,r16,c494 <__subdf3+0x3a0>
    c2b4:	2421c83a 	sub	r16,r4,r16
    c2b8:	80c00044 	addi	r3,r16,1
    c2bc:	010007c4 	movi	r4,31
    c2c0:	20c09516 	blt	r4,r3,c518 <__subdf3+0x424>
    c2c4:	01400804 	movi	r5,32
    c2c8:	28cbc83a 	sub	r5,r5,r3
    c2cc:	88c8d83a 	srl	r4,r17,r3
    c2d0:	8962983a 	sll	r17,r17,r5
    c2d4:	114a983a 	sll	r5,r2,r5
    c2d8:	10c6d83a 	srl	r3,r2,r3
    c2dc:	8804c03a 	cmpne	r2,r17,zero
    c2e0:	290ab03a 	or	r5,r5,r4
    c2e4:	28a2b03a 	or	r17,r5,r2
    c2e8:	0021883a 	mov	r16,zero
    c2ec:	003fa206 	br	c178 <__subdf3+0x84>
    c2f0:	2090b03a 	or	r8,r4,r2
    c2f4:	40018e26 	beq	r8,zero,c930 <__subdf3+0x83c>
    c2f8:	1007883a 	mov	r3,r2
    c2fc:	2023883a 	mov	r17,r4
    c300:	888001cc 	andi	r2,r17,7
    c304:	103f9e1e 	bne	r2,zero,c180 <__subdf3+0x8c>
    c308:	1804977a 	slli	r2,r3,29
    c30c:	8822d0fa 	srli	r17,r17,3
    c310:	1810d0fa 	srli	r8,r3,3
    c314:	9100004c 	andi	r4,r18,1
    c318:	1444b03a 	or	r2,r2,r17
    c31c:	00c1ffc4 	movi	r3,2047
    c320:	80c02826 	beq	r16,r3,c3c4 <__subdf3+0x2d0>
    c324:	01400434 	movhi	r5,16
    c328:	297fffc4 	addi	r5,r5,-1
    c32c:	80e0703a 	and	r16,r16,r3
    c330:	414a703a 	and	r5,r8,r5
    c334:	003fa806 	br	c1d8 <__subdf3+0xe4>
    c338:	0080630e 	bge	zero,r2,c4c8 <__subdf3+0x3d4>
    c33c:	48003026 	beq	r9,zero,c400 <__subdf3+0x30c>
    c340:	0101ffc4 	movi	r4,2047
    c344:	813f8c26 	beq	r16,r4,c178 <__subdf3+0x84>
    c348:	29402034 	orhi	r5,r5,128
    c34c:	01000e04 	movi	r4,56
    c350:	2080a90e 	bge	r4,r2,c5f8 <__subdf3+0x504>
    c354:	298cb03a 	or	r6,r5,r6
    c358:	3012c03a 	cmpne	r9,r6,zero
    c35c:	0005883a 	mov	r2,zero
    c360:	4c53883a 	add	r9,r9,r17
    c364:	4c63803a 	cmpltu	r17,r9,r17
    c368:	10c7883a 	add	r3,r2,r3
    c36c:	88c7883a 	add	r3,r17,r3
    c370:	4823883a 	mov	r17,r9
    c374:	1880202c 	andhi	r2,r3,128
    c378:	1000d026 	beq	r2,zero,c6bc <__subdf3+0x5c8>
    c37c:	84000044 	addi	r16,r16,1
    c380:	0081ffc4 	movi	r2,2047
    c384:	8080fe26 	beq	r16,r2,c780 <__subdf3+0x68c>
    c388:	00bfe034 	movhi	r2,65408
    c38c:	10bfffc4 	addi	r2,r2,-1
    c390:	1886703a 	and	r3,r3,r2
    c394:	880ad07a 	srli	r5,r17,1
    c398:	180497fa 	slli	r2,r3,31
    c39c:	8900004c 	andi	r4,r17,1
    c3a0:	2922b03a 	or	r17,r5,r4
    c3a4:	1806d07a 	srli	r3,r3,1
    c3a8:	1462b03a 	or	r17,r2,r17
    c3ac:	3825883a 	mov	r18,r7
    c3b0:	003f7106 	br	c178 <__subdf3+0x84>
    c3b4:	2984b03a 	or	r2,r5,r6
    c3b8:	103f6826 	beq	r2,zero,c15c <__subdf3+0x68>
    c3bc:	39c03fcc 	andi	r7,r7,255
    c3c0:	003f6706 	br	c160 <__subdf3+0x6c>
    c3c4:	4086b03a 	or	r3,r8,r2
    c3c8:	18015226 	beq	r3,zero,c914 <__subdf3+0x820>
    c3cc:	00c00434 	movhi	r3,16
    c3d0:	41400234 	orhi	r5,r8,8
    c3d4:	18ffffc4 	addi	r3,r3,-1
    c3d8:	28ca703a 	and	r5,r5,r3
    c3dc:	003f7e06 	br	c1d8 <__subdf3+0xe4>
    c3e0:	10bfffc4 	addi	r2,r2,-1
    c3e4:	1000491e 	bne	r2,zero,c50c <__subdf3+0x418>
    c3e8:	898fc83a 	sub	r7,r17,r6
    c3ec:	89e3803a 	cmpltu	r17,r17,r7
    c3f0:	1947c83a 	sub	r3,r3,r5
    c3f4:	1c47c83a 	sub	r3,r3,r17
    c3f8:	3823883a 	mov	r17,r7
    c3fc:	003f9b06 	br	c26c <__subdf3+0x178>
    c400:	2988b03a 	or	r4,r5,r6
    c404:	203f5c26 	beq	r4,zero,c178 <__subdf3+0x84>
    c408:	10bfffc4 	addi	r2,r2,-1
    c40c:	1000931e 	bne	r2,zero,c65c <__subdf3+0x568>
    c410:	898d883a 	add	r6,r17,r6
    c414:	3463803a 	cmpltu	r17,r6,r17
    c418:	1947883a 	add	r3,r3,r5
    c41c:	88c7883a 	add	r3,r17,r3
    c420:	3023883a 	mov	r17,r6
    c424:	003fd306 	br	c374 <__subdf3+0x280>
    c428:	1000541e 	bne	r2,zero,c57c <__subdf3+0x488>
    c42c:	80800044 	addi	r2,r16,1
    c430:	1081ffcc 	andi	r2,r2,2047
    c434:	01000044 	movi	r4,1
    c438:	2080a20e 	bge	r4,r2,c6c4 <__subdf3+0x5d0>
    c43c:	8989c83a 	sub	r4,r17,r6
    c440:	8905803a 	cmpltu	r2,r17,r4
    c444:	1967c83a 	sub	r19,r3,r5
    c448:	98a7c83a 	sub	r19,r19,r2
    c44c:	9880202c 	andhi	r2,r19,128
    c450:	10006326 	beq	r2,zero,c5e0 <__subdf3+0x4ec>
    c454:	3463c83a 	sub	r17,r6,r17
    c458:	28c7c83a 	sub	r3,r5,r3
    c45c:	344d803a 	cmpltu	r6,r6,r17
    c460:	19a7c83a 	sub	r19,r3,r6
    c464:	3825883a 	mov	r18,r7
    c468:	983f861e 	bne	r19,zero,c284 <__subdf3+0x190>
    c46c:	8809883a 	mov	r4,r17
    c470:	000cbf40 	call	cbf4 <__clzsi2>
    c474:	10800804 	addi	r2,r2,32
    c478:	113ffe04 	addi	r4,r2,-8
    c47c:	00c007c4 	movi	r3,31
    c480:	193f850e 	bge	r3,r4,c298 <__subdf3+0x1a4>
    c484:	10bff604 	addi	r2,r2,-40
    c488:	8884983a 	sll	r2,r17,r2
    c48c:	0023883a 	mov	r17,zero
    c490:	243f880e 	bge	r4,r16,c2b4 <__subdf3+0x1c0>
    c494:	00ffe034 	movhi	r3,65408
    c498:	18ffffc4 	addi	r3,r3,-1
    c49c:	8121c83a 	sub	r16,r16,r4
    c4a0:	10c6703a 	and	r3,r2,r3
    c4a4:	003f3406 	br	c178 <__subdf3+0x84>
    c4a8:	9100004c 	andi	r4,r18,1
    c4ac:	000b883a 	mov	r5,zero
    c4b0:	0005883a 	mov	r2,zero
    c4b4:	003f4806 	br	c1d8 <__subdf3+0xe4>
    c4b8:	298cb03a 	or	r6,r5,r6
    c4bc:	300cc03a 	cmpne	r6,r6,zero
    c4c0:	0005883a 	mov	r2,zero
    c4c4:	003f6406 	br	c258 <__subdf3+0x164>
    c4c8:	10009a1e 	bne	r2,zero,c734 <__subdf3+0x640>
    c4cc:	82400044 	addi	r9,r16,1
    c4d0:	4881ffcc 	andi	r2,r9,2047
    c4d4:	02800044 	movi	r10,1
    c4d8:	5080670e 	bge	r10,r2,c678 <__subdf3+0x584>
    c4dc:	0081ffc4 	movi	r2,2047
    c4e0:	4880af26 	beq	r9,r2,c7a0 <__subdf3+0x6ac>
    c4e4:	898d883a 	add	r6,r17,r6
    c4e8:	1945883a 	add	r2,r3,r5
    c4ec:	3447803a 	cmpltu	r3,r6,r17
    c4f0:	1887883a 	add	r3,r3,r2
    c4f4:	182297fa 	slli	r17,r3,31
    c4f8:	300cd07a 	srli	r6,r6,1
    c4fc:	1806d07a 	srli	r3,r3,1
    c500:	4821883a 	mov	r16,r9
    c504:	89a2b03a 	or	r17,r17,r6
    c508:	003f1b06 	br	c178 <__subdf3+0x84>
    c50c:	0101ffc4 	movi	r4,2047
    c510:	813f441e 	bne	r16,r4,c224 <__subdf3+0x130>
    c514:	003f1806 	br	c178 <__subdf3+0x84>
    c518:	843ff844 	addi	r16,r16,-31
    c51c:	01400804 	movi	r5,32
    c520:	1408d83a 	srl	r4,r2,r16
    c524:	19405026 	beq	r3,r5,c668 <__subdf3+0x574>
    c528:	01401004 	movi	r5,64
    c52c:	28c7c83a 	sub	r3,r5,r3
    c530:	10c4983a 	sll	r2,r2,r3
    c534:	88a2b03a 	or	r17,r17,r2
    c538:	8822c03a 	cmpne	r17,r17,zero
    c53c:	2462b03a 	or	r17,r4,r17
    c540:	0007883a 	mov	r3,zero
    c544:	0021883a 	mov	r16,zero
    c548:	003f6d06 	br	c300 <__subdf3+0x20c>
    c54c:	11fff804 	addi	r7,r2,-32
    c550:	01000804 	movi	r4,32
    c554:	29ced83a 	srl	r7,r5,r7
    c558:	11004526 	beq	r2,r4,c670 <__subdf3+0x57c>
    c55c:	01001004 	movi	r4,64
    c560:	2089c83a 	sub	r4,r4,r2
    c564:	2904983a 	sll	r2,r5,r4
    c568:	118cb03a 	or	r6,r2,r6
    c56c:	300cc03a 	cmpne	r6,r6,zero
    c570:	398cb03a 	or	r6,r7,r6
    c574:	0005883a 	mov	r2,zero
    c578:	003f3706 	br	c258 <__subdf3+0x164>
    c57c:	80002a26 	beq	r16,zero,c628 <__subdf3+0x534>
    c580:	0101ffc4 	movi	r4,2047
    c584:	49006626 	beq	r9,r4,c720 <__subdf3+0x62c>
    c588:	0085c83a 	sub	r2,zero,r2
    c58c:	18c02034 	orhi	r3,r3,128
    c590:	01000e04 	movi	r4,56
    c594:	20807e16 	blt	r4,r2,c790 <__subdf3+0x69c>
    c598:	010007c4 	movi	r4,31
    c59c:	2080e716 	blt	r4,r2,c93c <__subdf3+0x848>
    c5a0:	01000804 	movi	r4,32
    c5a4:	2089c83a 	sub	r4,r4,r2
    c5a8:	1914983a 	sll	r10,r3,r4
    c5ac:	8890d83a 	srl	r8,r17,r2
    c5b0:	8908983a 	sll	r4,r17,r4
    c5b4:	1884d83a 	srl	r2,r3,r2
    c5b8:	5222b03a 	or	r17,r10,r8
    c5bc:	2006c03a 	cmpne	r3,r4,zero
    c5c0:	88e2b03a 	or	r17,r17,r3
    c5c4:	3463c83a 	sub	r17,r6,r17
    c5c8:	2885c83a 	sub	r2,r5,r2
    c5cc:	344d803a 	cmpltu	r6,r6,r17
    c5d0:	1187c83a 	sub	r3,r2,r6
    c5d4:	4821883a 	mov	r16,r9
    c5d8:	3825883a 	mov	r18,r7
    c5dc:	003f2306 	br	c26c <__subdf3+0x178>
    c5e0:	24d0b03a 	or	r8,r4,r19
    c5e4:	40001b1e 	bne	r8,zero,c654 <__subdf3+0x560>
    c5e8:	0005883a 	mov	r2,zero
    c5ec:	0009883a 	mov	r4,zero
    c5f0:	0021883a 	mov	r16,zero
    c5f4:	003f4906 	br	c31c <__subdf3+0x228>
    c5f8:	010007c4 	movi	r4,31
    c5fc:	20803a16 	blt	r4,r2,c6e8 <__subdf3+0x5f4>
    c600:	01000804 	movi	r4,32
    c604:	2089c83a 	sub	r4,r4,r2
    c608:	2912983a 	sll	r9,r5,r4
    c60c:	3090d83a 	srl	r8,r6,r2
    c610:	3108983a 	sll	r4,r6,r4
    c614:	2884d83a 	srl	r2,r5,r2
    c618:	4a12b03a 	or	r9,r9,r8
    c61c:	2008c03a 	cmpne	r4,r4,zero
    c620:	4912b03a 	or	r9,r9,r4
    c624:	003f4e06 	br	c360 <__subdf3+0x26c>
    c628:	1c48b03a 	or	r4,r3,r17
    c62c:	20003c26 	beq	r4,zero,c720 <__subdf3+0x62c>
    c630:	0084303a 	nor	r2,zero,r2
    c634:	1000381e 	bne	r2,zero,c718 <__subdf3+0x624>
    c638:	3463c83a 	sub	r17,r6,r17
    c63c:	28c5c83a 	sub	r2,r5,r3
    c640:	344d803a 	cmpltu	r6,r6,r17
    c644:	1187c83a 	sub	r3,r2,r6
    c648:	4821883a 	mov	r16,r9
    c64c:	3825883a 	mov	r18,r7
    c650:	003f0606 	br	c26c <__subdf3+0x178>
    c654:	2023883a 	mov	r17,r4
    c658:	003f0906 	br	c280 <__subdf3+0x18c>
    c65c:	0101ffc4 	movi	r4,2047
    c660:	813f3a1e 	bne	r16,r4,c34c <__subdf3+0x258>
    c664:	003ec406 	br	c178 <__subdf3+0x84>
    c668:	0005883a 	mov	r2,zero
    c66c:	003fb106 	br	c534 <__subdf3+0x440>
    c670:	0005883a 	mov	r2,zero
    c674:	003fbc06 	br	c568 <__subdf3+0x474>
    c678:	1c44b03a 	or	r2,r3,r17
    c67c:	80008e1e 	bne	r16,zero,c8b8 <__subdf3+0x7c4>
    c680:	1000c826 	beq	r2,zero,c9a4 <__subdf3+0x8b0>
    c684:	2984b03a 	or	r2,r5,r6
    c688:	103ebb26 	beq	r2,zero,c178 <__subdf3+0x84>
    c68c:	8989883a 	add	r4,r17,r6
    c690:	1945883a 	add	r2,r3,r5
    c694:	2447803a 	cmpltu	r3,r4,r17
    c698:	1887883a 	add	r3,r3,r2
    c69c:	1880202c 	andhi	r2,r3,128
    c6a0:	2023883a 	mov	r17,r4
    c6a4:	103f1626 	beq	r2,zero,c300 <__subdf3+0x20c>
    c6a8:	00bfe034 	movhi	r2,65408
    c6ac:	10bfffc4 	addi	r2,r2,-1
    c6b0:	5021883a 	mov	r16,r10
    c6b4:	1886703a 	and	r3,r3,r2
    c6b8:	003eaf06 	br	c178 <__subdf3+0x84>
    c6bc:	3825883a 	mov	r18,r7
    c6c0:	003f0f06 	br	c300 <__subdf3+0x20c>
    c6c4:	1c44b03a 	or	r2,r3,r17
    c6c8:	8000251e 	bne	r16,zero,c760 <__subdf3+0x66c>
    c6cc:	1000661e 	bne	r2,zero,c868 <__subdf3+0x774>
    c6d0:	2990b03a 	or	r8,r5,r6
    c6d4:	40009626 	beq	r8,zero,c930 <__subdf3+0x83c>
    c6d8:	2807883a 	mov	r3,r5
    c6dc:	3023883a 	mov	r17,r6
    c6e0:	3825883a 	mov	r18,r7
    c6e4:	003ea406 	br	c178 <__subdf3+0x84>
    c6e8:	127ff804 	addi	r9,r2,-32
    c6ec:	01000804 	movi	r4,32
    c6f0:	2a52d83a 	srl	r9,r5,r9
    c6f4:	11008c26 	beq	r2,r4,c928 <__subdf3+0x834>
    c6f8:	01001004 	movi	r4,64
    c6fc:	2085c83a 	sub	r2,r4,r2
    c700:	2884983a 	sll	r2,r5,r2
    c704:	118cb03a 	or	r6,r2,r6
    c708:	300cc03a 	cmpne	r6,r6,zero
    c70c:	4992b03a 	or	r9,r9,r6
    c710:	0005883a 	mov	r2,zero
    c714:	003f1206 	br	c360 <__subdf3+0x26c>
    c718:	0101ffc4 	movi	r4,2047
    c71c:	493f9c1e 	bne	r9,r4,c590 <__subdf3+0x49c>
    c720:	2807883a 	mov	r3,r5
    c724:	3023883a 	mov	r17,r6
    c728:	4821883a 	mov	r16,r9
    c72c:	3825883a 	mov	r18,r7
    c730:	003e9106 	br	c178 <__subdf3+0x84>
    c734:	80001f1e 	bne	r16,zero,c7b4 <__subdf3+0x6c0>
    c738:	1c48b03a 	or	r4,r3,r17
    c73c:	20005a26 	beq	r4,zero,c8a8 <__subdf3+0x7b4>
    c740:	0084303a 	nor	r2,zero,r2
    c744:	1000561e 	bne	r2,zero,c8a0 <__subdf3+0x7ac>
    c748:	89a3883a 	add	r17,r17,r6
    c74c:	1945883a 	add	r2,r3,r5
    c750:	898d803a 	cmpltu	r6,r17,r6
    c754:	3087883a 	add	r3,r6,r2
    c758:	4821883a 	mov	r16,r9
    c75c:	003f0506 	br	c374 <__subdf3+0x280>
    c760:	10002b1e 	bne	r2,zero,c810 <__subdf3+0x71c>
    c764:	2984b03a 	or	r2,r5,r6
    c768:	10008026 	beq	r2,zero,c96c <__subdf3+0x878>
    c76c:	2807883a 	mov	r3,r5
    c770:	3023883a 	mov	r17,r6
    c774:	3825883a 	mov	r18,r7
    c778:	0401ffc4 	movi	r16,2047
    c77c:	003e7e06 	br	c178 <__subdf3+0x84>
    c780:	3809883a 	mov	r4,r7
    c784:	0011883a 	mov	r8,zero
    c788:	0005883a 	mov	r2,zero
    c78c:	003ee306 	br	c31c <__subdf3+0x228>
    c790:	1c62b03a 	or	r17,r3,r17
    c794:	8822c03a 	cmpne	r17,r17,zero
    c798:	0005883a 	mov	r2,zero
    c79c:	003f8906 	br	c5c4 <__subdf3+0x4d0>
    c7a0:	3809883a 	mov	r4,r7
    c7a4:	4821883a 	mov	r16,r9
    c7a8:	0011883a 	mov	r8,zero
    c7ac:	0005883a 	mov	r2,zero
    c7b0:	003eda06 	br	c31c <__subdf3+0x228>
    c7b4:	0101ffc4 	movi	r4,2047
    c7b8:	49003b26 	beq	r9,r4,c8a8 <__subdf3+0x7b4>
    c7bc:	0085c83a 	sub	r2,zero,r2
    c7c0:	18c02034 	orhi	r3,r3,128
    c7c4:	01000e04 	movi	r4,56
    c7c8:	20806e16 	blt	r4,r2,c984 <__subdf3+0x890>
    c7cc:	010007c4 	movi	r4,31
    c7d0:	20807716 	blt	r4,r2,c9b0 <__subdf3+0x8bc>
    c7d4:	01000804 	movi	r4,32
    c7d8:	2089c83a 	sub	r4,r4,r2
    c7dc:	1914983a 	sll	r10,r3,r4
    c7e0:	8890d83a 	srl	r8,r17,r2
    c7e4:	8908983a 	sll	r4,r17,r4
    c7e8:	1884d83a 	srl	r2,r3,r2
    c7ec:	5222b03a 	or	r17,r10,r8
    c7f0:	2006c03a 	cmpne	r3,r4,zero
    c7f4:	88e2b03a 	or	r17,r17,r3
    c7f8:	89a3883a 	add	r17,r17,r6
    c7fc:	1145883a 	add	r2,r2,r5
    c800:	898d803a 	cmpltu	r6,r17,r6
    c804:	3087883a 	add	r3,r6,r2
    c808:	4821883a 	mov	r16,r9
    c80c:	003ed906 	br	c374 <__subdf3+0x280>
    c810:	2984b03a 	or	r2,r5,r6
    c814:	10004226 	beq	r2,zero,c920 <__subdf3+0x82c>
    c818:	1808d0fa 	srli	r4,r3,3
    c81c:	8822d0fa 	srli	r17,r17,3
    c820:	1806977a 	slli	r3,r3,29
    c824:	2080022c 	andhi	r2,r4,8
    c828:	1c62b03a 	or	r17,r3,r17
    c82c:	10000826 	beq	r2,zero,c850 <__subdf3+0x75c>
    c830:	2812d0fa 	srli	r9,r5,3
    c834:	4880022c 	andhi	r2,r9,8
    c838:	1000051e 	bne	r2,zero,c850 <__subdf3+0x75c>
    c83c:	300cd0fa 	srli	r6,r6,3
    c840:	2804977a 	slli	r2,r5,29
    c844:	4809883a 	mov	r4,r9
    c848:	3825883a 	mov	r18,r7
    c84c:	11a2b03a 	or	r17,r2,r6
    c850:	8806d77a 	srli	r3,r17,29
    c854:	200890fa 	slli	r4,r4,3
    c858:	882290fa 	slli	r17,r17,3
    c85c:	0401ffc4 	movi	r16,2047
    c860:	1906b03a 	or	r3,r3,r4
    c864:	003e4406 	br	c178 <__subdf3+0x84>
    c868:	2984b03a 	or	r2,r5,r6
    c86c:	103e4226 	beq	r2,zero,c178 <__subdf3+0x84>
    c870:	8989c83a 	sub	r4,r17,r6
    c874:	8911803a 	cmpltu	r8,r17,r4
    c878:	1945c83a 	sub	r2,r3,r5
    c87c:	1205c83a 	sub	r2,r2,r8
    c880:	1200202c 	andhi	r8,r2,128
    c884:	403e9a26 	beq	r8,zero,c2f0 <__subdf3+0x1fc>
    c888:	3463c83a 	sub	r17,r6,r17
    c88c:	28c5c83a 	sub	r2,r5,r3
    c890:	344d803a 	cmpltu	r6,r6,r17
    c894:	1187c83a 	sub	r3,r2,r6
    c898:	3825883a 	mov	r18,r7
    c89c:	003e3606 	br	c178 <__subdf3+0x84>
    c8a0:	0101ffc4 	movi	r4,2047
    c8a4:	493fc71e 	bne	r9,r4,c7c4 <__subdf3+0x6d0>
    c8a8:	2807883a 	mov	r3,r5
    c8ac:	3023883a 	mov	r17,r6
    c8b0:	4821883a 	mov	r16,r9
    c8b4:	003e3006 	br	c178 <__subdf3+0x84>
    c8b8:	10003626 	beq	r2,zero,c994 <__subdf3+0x8a0>
    c8bc:	2984b03a 	or	r2,r5,r6
    c8c0:	10001726 	beq	r2,zero,c920 <__subdf3+0x82c>
    c8c4:	1808d0fa 	srli	r4,r3,3
    c8c8:	8822d0fa 	srli	r17,r17,3
    c8cc:	1806977a 	slli	r3,r3,29
    c8d0:	2080022c 	andhi	r2,r4,8
    c8d4:	1c62b03a 	or	r17,r3,r17
    c8d8:	10000726 	beq	r2,zero,c8f8 <__subdf3+0x804>
    c8dc:	2812d0fa 	srli	r9,r5,3
    c8e0:	4880022c 	andhi	r2,r9,8
    c8e4:	1000041e 	bne	r2,zero,c8f8 <__subdf3+0x804>
    c8e8:	300cd0fa 	srli	r6,r6,3
    c8ec:	2804977a 	slli	r2,r5,29
    c8f0:	4809883a 	mov	r4,r9
    c8f4:	11a2b03a 	or	r17,r2,r6
    c8f8:	8806d77a 	srli	r3,r17,29
    c8fc:	200890fa 	slli	r4,r4,3
    c900:	882290fa 	slli	r17,r17,3
    c904:	3825883a 	mov	r18,r7
    c908:	1906b03a 	or	r3,r3,r4
    c90c:	0401ffc4 	movi	r16,2047
    c910:	003e1906 	br	c178 <__subdf3+0x84>
    c914:	000b883a 	mov	r5,zero
    c918:	0005883a 	mov	r2,zero
    c91c:	003e2e06 	br	c1d8 <__subdf3+0xe4>
    c920:	0401ffc4 	movi	r16,2047
    c924:	003e1406 	br	c178 <__subdf3+0x84>
    c928:	0005883a 	mov	r2,zero
    c92c:	003f7506 	br	c704 <__subdf3+0x610>
    c930:	0005883a 	mov	r2,zero
    c934:	0009883a 	mov	r4,zero
    c938:	003e7806 	br	c31c <__subdf3+0x228>
    c93c:	123ff804 	addi	r8,r2,-32
    c940:	01000804 	movi	r4,32
    c944:	1a10d83a 	srl	r8,r3,r8
    c948:	11002526 	beq	r2,r4,c9e0 <__subdf3+0x8ec>
    c94c:	01001004 	movi	r4,64
    c950:	2085c83a 	sub	r2,r4,r2
    c954:	1884983a 	sll	r2,r3,r2
    c958:	1444b03a 	or	r2,r2,r17
    c95c:	1004c03a 	cmpne	r2,r2,zero
    c960:	40a2b03a 	or	r17,r8,r2
    c964:	0005883a 	mov	r2,zero
    c968:	003f1606 	br	c5c4 <__subdf3+0x4d0>
    c96c:	02000434 	movhi	r8,16
    c970:	0009883a 	mov	r4,zero
    c974:	423fffc4 	addi	r8,r8,-1
    c978:	00bfffc4 	movi	r2,-1
    c97c:	0401ffc4 	movi	r16,2047
    c980:	003e6606 	br	c31c <__subdf3+0x228>
    c984:	1c62b03a 	or	r17,r3,r17
    c988:	8822c03a 	cmpne	r17,r17,zero
    c98c:	0005883a 	mov	r2,zero
    c990:	003f9906 	br	c7f8 <__subdf3+0x704>
    c994:	2807883a 	mov	r3,r5
    c998:	3023883a 	mov	r17,r6
    c99c:	0401ffc4 	movi	r16,2047
    c9a0:	003df506 	br	c178 <__subdf3+0x84>
    c9a4:	2807883a 	mov	r3,r5
    c9a8:	3023883a 	mov	r17,r6
    c9ac:	003df206 	br	c178 <__subdf3+0x84>
    c9b0:	123ff804 	addi	r8,r2,-32
    c9b4:	01000804 	movi	r4,32
    c9b8:	1a10d83a 	srl	r8,r3,r8
    c9bc:	11000a26 	beq	r2,r4,c9e8 <__subdf3+0x8f4>
    c9c0:	01001004 	movi	r4,64
    c9c4:	2085c83a 	sub	r2,r4,r2
    c9c8:	1884983a 	sll	r2,r3,r2
    c9cc:	1444b03a 	or	r2,r2,r17
    c9d0:	1004c03a 	cmpne	r2,r2,zero
    c9d4:	40a2b03a 	or	r17,r8,r2
    c9d8:	0005883a 	mov	r2,zero
    c9dc:	003f8606 	br	c7f8 <__subdf3+0x704>
    c9e0:	0005883a 	mov	r2,zero
    c9e4:	003fdc06 	br	c958 <__subdf3+0x864>
    c9e8:	0005883a 	mov	r2,zero
    c9ec:	003ff706 	br	c9cc <__subdf3+0x8d8>

0000c9f0 <__fixdfsi>:
    c9f0:	280cd53a 	srli	r6,r5,20
    c9f4:	00c00434 	movhi	r3,16
    c9f8:	18ffffc4 	addi	r3,r3,-1
    c9fc:	3181ffcc 	andi	r6,r6,2047
    ca00:	01c0ff84 	movi	r7,1022
    ca04:	28c6703a 	and	r3,r5,r3
    ca08:	280ad7fa 	srli	r5,r5,31
    ca0c:	3980120e 	bge	r7,r6,ca58 <__fixdfsi+0x68>
    ca10:	00810744 	movi	r2,1053
    ca14:	11800c16 	blt	r2,r6,ca48 <__fixdfsi+0x58>
    ca18:	00810cc4 	movi	r2,1075
    ca1c:	1185c83a 	sub	r2,r2,r6
    ca20:	01c007c4 	movi	r7,31
    ca24:	18c00434 	orhi	r3,r3,16
    ca28:	38800d16 	blt	r7,r2,ca60 <__fixdfsi+0x70>
    ca2c:	31befb44 	addi	r6,r6,-1043
    ca30:	2084d83a 	srl	r2,r4,r2
    ca34:	1986983a 	sll	r3,r3,r6
    ca38:	1884b03a 	or	r2,r3,r2
    ca3c:	28000726 	beq	r5,zero,ca5c <__fixdfsi+0x6c>
    ca40:	0085c83a 	sub	r2,zero,r2
    ca44:	f800283a 	ret
    ca48:	00a00034 	movhi	r2,32768
    ca4c:	10bfffc4 	addi	r2,r2,-1
    ca50:	2885883a 	add	r2,r5,r2
    ca54:	f800283a 	ret
    ca58:	0005883a 	mov	r2,zero
    ca5c:	f800283a 	ret
    ca60:	008104c4 	movi	r2,1043
    ca64:	1185c83a 	sub	r2,r2,r6
    ca68:	1884d83a 	srl	r2,r3,r2
    ca6c:	003ff306 	br	ca3c <__fixdfsi+0x4c>

0000ca70 <__floatsidf>:
    ca70:	defffd04 	addi	sp,sp,-12
    ca74:	dfc00215 	stw	ra,8(sp)
    ca78:	dc400115 	stw	r17,4(sp)
    ca7c:	dc000015 	stw	r16,0(sp)
    ca80:	20002b26 	beq	r4,zero,cb30 <__floatsidf+0xc0>
    ca84:	2023883a 	mov	r17,r4
    ca88:	2020d7fa 	srli	r16,r4,31
    ca8c:	20002d16 	blt	r4,zero,cb44 <__floatsidf+0xd4>
    ca90:	8809883a 	mov	r4,r17
    ca94:	000cbf40 	call	cbf4 <__clzsi2>
    ca98:	01410784 	movi	r5,1054
    ca9c:	288bc83a 	sub	r5,r5,r2
    caa0:	01010cc4 	movi	r4,1075
    caa4:	2149c83a 	sub	r4,r4,r5
    caa8:	00c007c4 	movi	r3,31
    caac:	1900160e 	bge	r3,r4,cb08 <__floatsidf+0x98>
    cab0:	00c104c4 	movi	r3,1043
    cab4:	1947c83a 	sub	r3,r3,r5
    cab8:	88c6983a 	sll	r3,r17,r3
    cabc:	00800434 	movhi	r2,16
    cac0:	10bfffc4 	addi	r2,r2,-1
    cac4:	1886703a 	and	r3,r3,r2
    cac8:	2941ffcc 	andi	r5,r5,2047
    cacc:	800d883a 	mov	r6,r16
    cad0:	0005883a 	mov	r2,zero
    cad4:	280a953a 	slli	r5,r5,20
    cad8:	31803fcc 	andi	r6,r6,255
    cadc:	01000434 	movhi	r4,16
    cae0:	300c97fa 	slli	r6,r6,31
    cae4:	213fffc4 	addi	r4,r4,-1
    cae8:	1906703a 	and	r3,r3,r4
    caec:	1946b03a 	or	r3,r3,r5
    caf0:	1986b03a 	or	r3,r3,r6
    caf4:	dfc00217 	ldw	ra,8(sp)
    caf8:	dc400117 	ldw	r17,4(sp)
    cafc:	dc000017 	ldw	r16,0(sp)
    cb00:	dec00304 	addi	sp,sp,12
    cb04:	f800283a 	ret
    cb08:	00c002c4 	movi	r3,11
    cb0c:	1887c83a 	sub	r3,r3,r2
    cb10:	88c6d83a 	srl	r3,r17,r3
    cb14:	8904983a 	sll	r2,r17,r4
    cb18:	01000434 	movhi	r4,16
    cb1c:	213fffc4 	addi	r4,r4,-1
    cb20:	2941ffcc 	andi	r5,r5,2047
    cb24:	1906703a 	and	r3,r3,r4
    cb28:	800d883a 	mov	r6,r16
    cb2c:	003fe906 	br	cad4 <__floatsidf+0x64>
    cb30:	000d883a 	mov	r6,zero
    cb34:	000b883a 	mov	r5,zero
    cb38:	0007883a 	mov	r3,zero
    cb3c:	0005883a 	mov	r2,zero
    cb40:	003fe406 	br	cad4 <__floatsidf+0x64>
    cb44:	0123c83a 	sub	r17,zero,r4
    cb48:	003fd106 	br	ca90 <__floatsidf+0x20>

0000cb4c <__floatunsidf>:
    cb4c:	defffe04 	addi	sp,sp,-8
    cb50:	dc000015 	stw	r16,0(sp)
    cb54:	dfc00115 	stw	ra,4(sp)
    cb58:	2021883a 	mov	r16,r4
    cb5c:	20002226 	beq	r4,zero,cbe8 <__floatunsidf+0x9c>
    cb60:	000cbf40 	call	cbf4 <__clzsi2>
    cb64:	01010784 	movi	r4,1054
    cb68:	2089c83a 	sub	r4,r4,r2
    cb6c:	01810cc4 	movi	r6,1075
    cb70:	310dc83a 	sub	r6,r6,r4
    cb74:	00c007c4 	movi	r3,31
    cb78:	1980120e 	bge	r3,r6,cbc4 <__floatunsidf+0x78>
    cb7c:	00c104c4 	movi	r3,1043
    cb80:	1907c83a 	sub	r3,r3,r4
    cb84:	80ca983a 	sll	r5,r16,r3
    cb88:	00800434 	movhi	r2,16
    cb8c:	10bfffc4 	addi	r2,r2,-1
    cb90:	2101ffcc 	andi	r4,r4,2047
    cb94:	0021883a 	mov	r16,zero
    cb98:	288a703a 	and	r5,r5,r2
    cb9c:	2008953a 	slli	r4,r4,20
    cba0:	00c00434 	movhi	r3,16
    cba4:	18ffffc4 	addi	r3,r3,-1
    cba8:	28c6703a 	and	r3,r5,r3
    cbac:	8005883a 	mov	r2,r16
    cbb0:	1906b03a 	or	r3,r3,r4
    cbb4:	dfc00117 	ldw	ra,4(sp)
    cbb8:	dc000017 	ldw	r16,0(sp)
    cbbc:	dec00204 	addi	sp,sp,8
    cbc0:	f800283a 	ret
    cbc4:	00c002c4 	movi	r3,11
    cbc8:	188bc83a 	sub	r5,r3,r2
    cbcc:	814ad83a 	srl	r5,r16,r5
    cbd0:	00c00434 	movhi	r3,16
    cbd4:	18ffffc4 	addi	r3,r3,-1
    cbd8:	81a0983a 	sll	r16,r16,r6
    cbdc:	2101ffcc 	andi	r4,r4,2047
    cbe0:	28ca703a 	and	r5,r5,r3
    cbe4:	003fed06 	br	cb9c <__floatunsidf+0x50>
    cbe8:	0009883a 	mov	r4,zero
    cbec:	000b883a 	mov	r5,zero
    cbf0:	003fea06 	br	cb9c <__floatunsidf+0x50>

0000cbf4 <__clzsi2>:
    cbf4:	00bfffd4 	movui	r2,65535
    cbf8:	11000536 	bltu	r2,r4,cc10 <__clzsi2+0x1c>
    cbfc:	00803fc4 	movi	r2,255
    cc00:	11000f36 	bltu	r2,r4,cc40 <__clzsi2+0x4c>
    cc04:	00800804 	movi	r2,32
    cc08:	0007883a 	mov	r3,zero
    cc0c:	00000506 	br	cc24 <__clzsi2+0x30>
    cc10:	00804034 	movhi	r2,256
    cc14:	10bfffc4 	addi	r2,r2,-1
    cc18:	11000c2e 	bgeu	r2,r4,cc4c <__clzsi2+0x58>
    cc1c:	00800204 	movi	r2,8
    cc20:	00c00604 	movi	r3,24
    cc24:	20c8d83a 	srl	r4,r4,r3
    cc28:	00c00074 	movhi	r3,1
    cc2c:	18fec904 	addi	r3,r3,-1244
    cc30:	1909883a 	add	r4,r3,r4
    cc34:	20c00003 	ldbu	r3,0(r4)
    cc38:	10c5c83a 	sub	r2,r2,r3
    cc3c:	f800283a 	ret
    cc40:	00800604 	movi	r2,24
    cc44:	00c00204 	movi	r3,8
    cc48:	003ff606 	br	cc24 <__clzsi2+0x30>
    cc4c:	00800404 	movi	r2,16
    cc50:	1007883a 	mov	r3,r2
    cc54:	003ff306 	br	cc24 <__clzsi2+0x30>

0000cc58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cc58:	defffe04 	addi	sp,sp,-8
    cc5c:	dfc00115 	stw	ra,4(sp)
    cc60:	df000015 	stw	fp,0(sp)
    cc64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cc68:	00800074 	movhi	r2,1
    cc6c:	1085d704 	addi	r2,r2,5980
    cc70:	10800017 	ldw	r2,0(r2)
    cc74:	10000526 	beq	r2,zero,cc8c <alt_get_errno+0x34>
    cc78:	00800074 	movhi	r2,1
    cc7c:	1085d704 	addi	r2,r2,5980
    cc80:	10800017 	ldw	r2,0(r2)
    cc84:	103ee83a 	callr	r2
    cc88:	00000206 	br	cc94 <alt_get_errno+0x3c>
    cc8c:	00800074 	movhi	r2,1
    cc90:	108ca804 	addi	r2,r2,12960
}
    cc94:	e037883a 	mov	sp,fp
    cc98:	dfc00117 	ldw	ra,4(sp)
    cc9c:	df000017 	ldw	fp,0(sp)
    cca0:	dec00204 	addi	sp,sp,8
    cca4:	f800283a 	ret

0000cca8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    cca8:	defffb04 	addi	sp,sp,-20
    ccac:	dfc00415 	stw	ra,16(sp)
    ccb0:	df000315 	stw	fp,12(sp)
    ccb4:	df000304 	addi	fp,sp,12
    ccb8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    ccbc:	e0bfff17 	ldw	r2,-4(fp)
    ccc0:	10000616 	blt	r2,zero,ccdc <close+0x34>
    ccc4:	e0bfff17 	ldw	r2,-4(fp)
    ccc8:	10c00324 	muli	r3,r2,12
    cccc:	00800074 	movhi	r2,1
    ccd0:	10814904 	addi	r2,r2,1316
    ccd4:	1885883a 	add	r2,r3,r2
    ccd8:	00000106 	br	cce0 <close+0x38>
    ccdc:	0005883a 	mov	r2,zero
    cce0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    cce4:	e0bffd17 	ldw	r2,-12(fp)
    cce8:	10001926 	beq	r2,zero,cd50 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    ccec:	e0bffd17 	ldw	r2,-12(fp)
    ccf0:	10800017 	ldw	r2,0(r2)
    ccf4:	10800417 	ldw	r2,16(r2)
    ccf8:	10000626 	beq	r2,zero,cd14 <close+0x6c>
    ccfc:	e0bffd17 	ldw	r2,-12(fp)
    cd00:	10800017 	ldw	r2,0(r2)
    cd04:	10800417 	ldw	r2,16(r2)
    cd08:	e13ffd17 	ldw	r4,-12(fp)
    cd0c:	103ee83a 	callr	r2
    cd10:	00000106 	br	cd18 <close+0x70>
    cd14:	0005883a 	mov	r2,zero
    cd18:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    cd1c:	e13fff17 	ldw	r4,-4(fp)
    cd20:	000d3b80 	call	d3b8 <alt_release_fd>
    if (rval < 0)
    cd24:	e0bffe17 	ldw	r2,-8(fp)
    cd28:	1000070e 	bge	r2,zero,cd48 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    cd2c:	000cc580 	call	cc58 <alt_get_errno>
    cd30:	1007883a 	mov	r3,r2
    cd34:	e0bffe17 	ldw	r2,-8(fp)
    cd38:	0085c83a 	sub	r2,zero,r2
    cd3c:	18800015 	stw	r2,0(r3)
      return -1;
    cd40:	00bfffc4 	movi	r2,-1
    cd44:	00000706 	br	cd64 <close+0xbc>
    }
    return 0;
    cd48:	0005883a 	mov	r2,zero
    cd4c:	00000506 	br	cd64 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    cd50:	000cc580 	call	cc58 <alt_get_errno>
    cd54:	1007883a 	mov	r3,r2
    cd58:	00801444 	movi	r2,81
    cd5c:	18800015 	stw	r2,0(r3)
    return -1;
    cd60:	00bfffc4 	movi	r2,-1
  }
}
    cd64:	e037883a 	mov	sp,fp
    cd68:	dfc00117 	ldw	ra,4(sp)
    cd6c:	df000017 	ldw	fp,0(sp)
    cd70:	dec00204 	addi	sp,sp,8
    cd74:	f800283a 	ret

0000cd78 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    cd78:	defffc04 	addi	sp,sp,-16
    cd7c:	df000315 	stw	fp,12(sp)
    cd80:	df000304 	addi	fp,sp,12
    cd84:	e13ffd15 	stw	r4,-12(fp)
    cd88:	e17ffe15 	stw	r5,-8(fp)
    cd8c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    cd90:	e0bfff17 	ldw	r2,-4(fp)
}
    cd94:	e037883a 	mov	sp,fp
    cd98:	df000017 	ldw	fp,0(sp)
    cd9c:	dec00104 	addi	sp,sp,4
    cda0:	f800283a 	ret

0000cda4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cda4:	defffe04 	addi	sp,sp,-8
    cda8:	dfc00115 	stw	ra,4(sp)
    cdac:	df000015 	stw	fp,0(sp)
    cdb0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cdb4:	00800074 	movhi	r2,1
    cdb8:	1085d704 	addi	r2,r2,5980
    cdbc:	10800017 	ldw	r2,0(r2)
    cdc0:	10000526 	beq	r2,zero,cdd8 <alt_get_errno+0x34>
    cdc4:	00800074 	movhi	r2,1
    cdc8:	1085d704 	addi	r2,r2,5980
    cdcc:	10800017 	ldw	r2,0(r2)
    cdd0:	103ee83a 	callr	r2
    cdd4:	00000206 	br	cde0 <alt_get_errno+0x3c>
    cdd8:	00800074 	movhi	r2,1
    cddc:	108ca804 	addi	r2,r2,12960
}
    cde0:	e037883a 	mov	sp,fp
    cde4:	dfc00117 	ldw	ra,4(sp)
    cde8:	df000017 	ldw	fp,0(sp)
    cdec:	dec00204 	addi	sp,sp,8
    cdf0:	f800283a 	ret

0000cdf4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    cdf4:	defffb04 	addi	sp,sp,-20
    cdf8:	dfc00415 	stw	ra,16(sp)
    cdfc:	df000315 	stw	fp,12(sp)
    ce00:	df000304 	addi	fp,sp,12
    ce04:	e13ffe15 	stw	r4,-8(fp)
    ce08:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ce0c:	e0bffe17 	ldw	r2,-8(fp)
    ce10:	10000616 	blt	r2,zero,ce2c <fstat+0x38>
    ce14:	e0bffe17 	ldw	r2,-8(fp)
    ce18:	10c00324 	muli	r3,r2,12
    ce1c:	00800074 	movhi	r2,1
    ce20:	10814904 	addi	r2,r2,1316
    ce24:	1885883a 	add	r2,r3,r2
    ce28:	00000106 	br	ce30 <fstat+0x3c>
    ce2c:	0005883a 	mov	r2,zero
    ce30:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    ce34:	e0bffd17 	ldw	r2,-12(fp)
    ce38:	10001026 	beq	r2,zero,ce7c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    ce3c:	e0bffd17 	ldw	r2,-12(fp)
    ce40:	10800017 	ldw	r2,0(r2)
    ce44:	10800817 	ldw	r2,32(r2)
    ce48:	10000726 	beq	r2,zero,ce68 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    ce4c:	e0bffd17 	ldw	r2,-12(fp)
    ce50:	10800017 	ldw	r2,0(r2)
    ce54:	10800817 	ldw	r2,32(r2)
    ce58:	e17fff17 	ldw	r5,-4(fp)
    ce5c:	e13ffd17 	ldw	r4,-12(fp)
    ce60:	103ee83a 	callr	r2
    ce64:	00000a06 	br	ce90 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    ce68:	e0bfff17 	ldw	r2,-4(fp)
    ce6c:	00c80004 	movi	r3,8192
    ce70:	10c00115 	stw	r3,4(r2)
      return 0;
    ce74:	0005883a 	mov	r2,zero
    ce78:	00000506 	br	ce90 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ce7c:	000cda40 	call	cda4 <alt_get_errno>
    ce80:	1007883a 	mov	r3,r2
    ce84:	00801444 	movi	r2,81
    ce88:	18800015 	stw	r2,0(r3)
    return -1;
    ce8c:	00bfffc4 	movi	r2,-1
  }
}
    ce90:	e037883a 	mov	sp,fp
    ce94:	dfc00117 	ldw	ra,4(sp)
    ce98:	df000017 	ldw	fp,0(sp)
    ce9c:	dec00204 	addi	sp,sp,8
    cea0:	f800283a 	ret

0000cea4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cea4:	defffe04 	addi	sp,sp,-8
    cea8:	dfc00115 	stw	ra,4(sp)
    ceac:	df000015 	stw	fp,0(sp)
    ceb0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ceb4:	00800074 	movhi	r2,1
    ceb8:	1085d704 	addi	r2,r2,5980
    cebc:	10800017 	ldw	r2,0(r2)
    cec0:	10000526 	beq	r2,zero,ced8 <alt_get_errno+0x34>
    cec4:	00800074 	movhi	r2,1
    cec8:	1085d704 	addi	r2,r2,5980
    cecc:	10800017 	ldw	r2,0(r2)
    ced0:	103ee83a 	callr	r2
    ced4:	00000206 	br	cee0 <alt_get_errno+0x3c>
    ced8:	00800074 	movhi	r2,1
    cedc:	108ca804 	addi	r2,r2,12960
}
    cee0:	e037883a 	mov	sp,fp
    cee4:	dfc00117 	ldw	ra,4(sp)
    cee8:	df000017 	ldw	fp,0(sp)
    ceec:	dec00204 	addi	sp,sp,8
    cef0:	f800283a 	ret

0000cef4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    cef4:	deffed04 	addi	sp,sp,-76
    cef8:	dfc01215 	stw	ra,72(sp)
    cefc:	df001115 	stw	fp,68(sp)
    cf00:	df001104 	addi	fp,sp,68
    cf04:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    cf08:	e0bfff17 	ldw	r2,-4(fp)
    cf0c:	10000616 	blt	r2,zero,cf28 <isatty+0x34>
    cf10:	e0bfff17 	ldw	r2,-4(fp)
    cf14:	10c00324 	muli	r3,r2,12
    cf18:	00800074 	movhi	r2,1
    cf1c:	10814904 	addi	r2,r2,1316
    cf20:	1885883a 	add	r2,r3,r2
    cf24:	00000106 	br	cf2c <isatty+0x38>
    cf28:	0005883a 	mov	r2,zero
    cf2c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    cf30:	e0bfef17 	ldw	r2,-68(fp)
    cf34:	10000e26 	beq	r2,zero,cf70 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    cf38:	e0bfef17 	ldw	r2,-68(fp)
    cf3c:	10800017 	ldw	r2,0(r2)
    cf40:	10800817 	ldw	r2,32(r2)
    cf44:	1000021e 	bne	r2,zero,cf50 <isatty+0x5c>
    {
      return 1;
    cf48:	00800044 	movi	r2,1
    cf4c:	00000d06 	br	cf84 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    cf50:	e0bff004 	addi	r2,fp,-64
    cf54:	100b883a 	mov	r5,r2
    cf58:	e13fff17 	ldw	r4,-4(fp)
    cf5c:	000cdf40 	call	cdf4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    cf60:	e0bff117 	ldw	r2,-60(fp)
    cf64:	10880020 	cmpeqi	r2,r2,8192
    cf68:	10803fcc 	andi	r2,r2,255
    cf6c:	00000506 	br	cf84 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    cf70:	000cea40 	call	cea4 <alt_get_errno>
    cf74:	1007883a 	mov	r3,r2
    cf78:	00801444 	movi	r2,81
    cf7c:	18800015 	stw	r2,0(r3)
    return 0;
    cf80:	0005883a 	mov	r2,zero
  }
}
    cf84:	e037883a 	mov	sp,fp
    cf88:	dfc00117 	ldw	ra,4(sp)
    cf8c:	df000017 	ldw	fp,0(sp)
    cf90:	dec00204 	addi	sp,sp,8
    cf94:	f800283a 	ret

0000cf98 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    cf98:	defffc04 	addi	sp,sp,-16
    cf9c:	df000315 	stw	fp,12(sp)
    cfa0:	df000304 	addi	fp,sp,12
    cfa4:	e13ffd15 	stw	r4,-12(fp)
    cfa8:	e17ffe15 	stw	r5,-8(fp)
    cfac:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    cfb0:	e0fffe17 	ldw	r3,-8(fp)
    cfb4:	e0bffd17 	ldw	r2,-12(fp)
    cfb8:	18800c26 	beq	r3,r2,cfec <alt_load_section+0x54>
  {
    while( to != end )
    cfbc:	00000806 	br	cfe0 <alt_load_section+0x48>
    {
      *to++ = *from++;
    cfc0:	e0bffe17 	ldw	r2,-8(fp)
    cfc4:	10c00104 	addi	r3,r2,4
    cfc8:	e0fffe15 	stw	r3,-8(fp)
    cfcc:	e0fffd17 	ldw	r3,-12(fp)
    cfd0:	19000104 	addi	r4,r3,4
    cfd4:	e13ffd15 	stw	r4,-12(fp)
    cfd8:	18c00017 	ldw	r3,0(r3)
    cfdc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    cfe0:	e0fffe17 	ldw	r3,-8(fp)
    cfe4:	e0bfff17 	ldw	r2,-4(fp)
    cfe8:	18bff51e 	bne	r3,r2,cfc0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    cfec:	0001883a 	nop
    cff0:	e037883a 	mov	sp,fp
    cff4:	df000017 	ldw	fp,0(sp)
    cff8:	dec00104 	addi	sp,sp,4
    cffc:	f800283a 	ret

0000d000 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    d000:	defffe04 	addi	sp,sp,-8
    d004:	dfc00115 	stw	ra,4(sp)
    d008:	df000015 	stw	fp,0(sp)
    d00c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    d010:	01800074 	movhi	r6,1
    d014:	3185dc04 	addi	r6,r6,6000
    d018:	01400074 	movhi	r5,1
    d01c:	297f1604 	addi	r5,r5,-936
    d020:	01000074 	movhi	r4,1
    d024:	2105dc04 	addi	r4,r4,6000
    d028:	000cf980 	call	cf98 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    d02c:	01800034 	movhi	r6,0
    d030:	31809204 	addi	r6,r6,584
    d034:	01400034 	movhi	r5,0
    d038:	29400804 	addi	r5,r5,32
    d03c:	01000034 	movhi	r4,0
    d040:	21000804 	addi	r4,r4,32
    d044:	000cf980 	call	cf98 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    d048:	01800074 	movhi	r6,1
    d04c:	31bf1604 	addi	r6,r6,-936
    d050:	01400074 	movhi	r5,1
    d054:	297e4d04 	addi	r5,r5,-1740
    d058:	01000074 	movhi	r4,1
    d05c:	213e4d04 	addi	r4,r4,-1740
    d060:	000cf980 	call	cf98 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    d064:	000e8c00 	call	e8c0 <alt_dcache_flush_all>
  alt_icache_flush_all();
    d068:	000eb4c0 	call	eb4c <alt_icache_flush_all>
}
    d06c:	0001883a 	nop
    d070:	e037883a 	mov	sp,fp
    d074:	dfc00117 	ldw	ra,4(sp)
    d078:	df000017 	ldw	fp,0(sp)
    d07c:	dec00204 	addi	sp,sp,8
    d080:	f800283a 	ret

0000d084 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d084:	defffe04 	addi	sp,sp,-8
    d088:	dfc00115 	stw	ra,4(sp)
    d08c:	df000015 	stw	fp,0(sp)
    d090:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d094:	00800074 	movhi	r2,1
    d098:	1085d704 	addi	r2,r2,5980
    d09c:	10800017 	ldw	r2,0(r2)
    d0a0:	10000526 	beq	r2,zero,d0b8 <alt_get_errno+0x34>
    d0a4:	00800074 	movhi	r2,1
    d0a8:	1085d704 	addi	r2,r2,5980
    d0ac:	10800017 	ldw	r2,0(r2)
    d0b0:	103ee83a 	callr	r2
    d0b4:	00000206 	br	d0c0 <alt_get_errno+0x3c>
    d0b8:	00800074 	movhi	r2,1
    d0bc:	108ca804 	addi	r2,r2,12960
}
    d0c0:	e037883a 	mov	sp,fp
    d0c4:	dfc00117 	ldw	ra,4(sp)
    d0c8:	df000017 	ldw	fp,0(sp)
    d0cc:	dec00204 	addi	sp,sp,8
    d0d0:	f800283a 	ret

0000d0d4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    d0d4:	defff904 	addi	sp,sp,-28
    d0d8:	dfc00615 	stw	ra,24(sp)
    d0dc:	df000515 	stw	fp,20(sp)
    d0e0:	df000504 	addi	fp,sp,20
    d0e4:	e13ffd15 	stw	r4,-12(fp)
    d0e8:	e17ffe15 	stw	r5,-8(fp)
    d0ec:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    d0f0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d0f4:	e0bffd17 	ldw	r2,-12(fp)
    d0f8:	10000616 	blt	r2,zero,d114 <lseek+0x40>
    d0fc:	e0bffd17 	ldw	r2,-12(fp)
    d100:	10c00324 	muli	r3,r2,12
    d104:	00800074 	movhi	r2,1
    d108:	10814904 	addi	r2,r2,1316
    d10c:	1885883a 	add	r2,r3,r2
    d110:	00000106 	br	d118 <lseek+0x44>
    d114:	0005883a 	mov	r2,zero
    d118:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    d11c:	e0bffc17 	ldw	r2,-16(fp)
    d120:	10001026 	beq	r2,zero,d164 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    d124:	e0bffc17 	ldw	r2,-16(fp)
    d128:	10800017 	ldw	r2,0(r2)
    d12c:	10800717 	ldw	r2,28(r2)
    d130:	10000926 	beq	r2,zero,d158 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    d134:	e0bffc17 	ldw	r2,-16(fp)
    d138:	10800017 	ldw	r2,0(r2)
    d13c:	10800717 	ldw	r2,28(r2)
    d140:	e1bfff17 	ldw	r6,-4(fp)
    d144:	e17ffe17 	ldw	r5,-8(fp)
    d148:	e13ffc17 	ldw	r4,-16(fp)
    d14c:	103ee83a 	callr	r2
    d150:	e0bffb15 	stw	r2,-20(fp)
    d154:	00000506 	br	d16c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    d158:	00bfde84 	movi	r2,-134
    d15c:	e0bffb15 	stw	r2,-20(fp)
    d160:	00000206 	br	d16c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    d164:	00bfebc4 	movi	r2,-81
    d168:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    d16c:	e0bffb17 	ldw	r2,-20(fp)
    d170:	1000070e 	bge	r2,zero,d190 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    d174:	000d0840 	call	d084 <alt_get_errno>
    d178:	1007883a 	mov	r3,r2
    d17c:	e0bffb17 	ldw	r2,-20(fp)
    d180:	0085c83a 	sub	r2,zero,r2
    d184:	18800015 	stw	r2,0(r3)
    rc = -1;
    d188:	00bfffc4 	movi	r2,-1
    d18c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    d190:	e0bffb17 	ldw	r2,-20(fp)
}
    d194:	e037883a 	mov	sp,fp
    d198:	dfc00117 	ldw	ra,4(sp)
    d19c:	df000017 	ldw	fp,0(sp)
    d1a0:	dec00204 	addi	sp,sp,8
    d1a4:	f800283a 	ret

0000d1a8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    d1a8:	defffd04 	addi	sp,sp,-12
    d1ac:	dfc00215 	stw	ra,8(sp)
    d1b0:	df000115 	stw	fp,4(sp)
    d1b4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    d1b8:	0009883a 	mov	r4,zero
    d1bc:	000d67c0 	call	d67c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    d1c0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    d1c4:	000d6b40 	call	d6b4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    d1c8:	01800074 	movhi	r6,1
    d1cc:	31bf0c04 	addi	r6,r6,-976
    d1d0:	01400074 	movhi	r5,1
    d1d4:	297f0c04 	addi	r5,r5,-976
    d1d8:	01000074 	movhi	r4,1
    d1dc:	213f0c04 	addi	r4,r4,-976
    d1e0:	000ec440 	call	ec44 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    d1e4:	000e9fc0 	call	e9fc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    d1e8:	01000074 	movhi	r4,1
    d1ec:	213a9704 	addi	r4,r4,-5540
    d1f0:	000f5a00 	call	f5a0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    d1f4:	d0a6dd17 	ldw	r2,-25740(gp)
    d1f8:	d0e6de17 	ldw	r3,-25736(gp)
    d1fc:	d126df17 	ldw	r4,-25732(gp)
    d200:	200d883a 	mov	r6,r4
    d204:	180b883a 	mov	r5,r3
    d208:	1009883a 	mov	r4,r2
    d20c:	00002940 	call	294 <main>
    d210:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    d214:	01000044 	movi	r4,1
    d218:	000cca80 	call	cca8 <close>
  exit (result);
    d21c:	e13fff17 	ldw	r4,-4(fp)
    d220:	000f5b40 	call	f5b4 <exit>

0000d224 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    d224:	defffe04 	addi	sp,sp,-8
    d228:	df000115 	stw	fp,4(sp)
    d22c:	df000104 	addi	fp,sp,4
    d230:	e13fff15 	stw	r4,-4(fp)
}
    d234:	0001883a 	nop
    d238:	e037883a 	mov	sp,fp
    d23c:	df000017 	ldw	fp,0(sp)
    d240:	dec00104 	addi	sp,sp,4
    d244:	f800283a 	ret

0000d248 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    d248:	defffe04 	addi	sp,sp,-8
    d24c:	df000115 	stw	fp,4(sp)
    d250:	df000104 	addi	fp,sp,4
    d254:	e13fff15 	stw	r4,-4(fp)
}
    d258:	0001883a 	nop
    d25c:	e037883a 	mov	sp,fp
    d260:	df000017 	ldw	fp,0(sp)
    d264:	dec00104 	addi	sp,sp,4
    d268:	f800283a 	ret

0000d26c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d26c:	defffe04 	addi	sp,sp,-8
    d270:	dfc00115 	stw	ra,4(sp)
    d274:	df000015 	stw	fp,0(sp)
    d278:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d27c:	00800074 	movhi	r2,1
    d280:	1085d704 	addi	r2,r2,5980
    d284:	10800017 	ldw	r2,0(r2)
    d288:	10000526 	beq	r2,zero,d2a0 <alt_get_errno+0x34>
    d28c:	00800074 	movhi	r2,1
    d290:	1085d704 	addi	r2,r2,5980
    d294:	10800017 	ldw	r2,0(r2)
    d298:	103ee83a 	callr	r2
    d29c:	00000206 	br	d2a8 <alt_get_errno+0x3c>
    d2a0:	00800074 	movhi	r2,1
    d2a4:	108ca804 	addi	r2,r2,12960
}
    d2a8:	e037883a 	mov	sp,fp
    d2ac:	dfc00117 	ldw	ra,4(sp)
    d2b0:	df000017 	ldw	fp,0(sp)
    d2b4:	dec00204 	addi	sp,sp,8
    d2b8:	f800283a 	ret

0000d2bc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    d2bc:	defff904 	addi	sp,sp,-28
    d2c0:	dfc00615 	stw	ra,24(sp)
    d2c4:	df000515 	stw	fp,20(sp)
    d2c8:	df000504 	addi	fp,sp,20
    d2cc:	e13ffd15 	stw	r4,-12(fp)
    d2d0:	e17ffe15 	stw	r5,-8(fp)
    d2d4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d2d8:	e0bffd17 	ldw	r2,-12(fp)
    d2dc:	10000616 	blt	r2,zero,d2f8 <read+0x3c>
    d2e0:	e0bffd17 	ldw	r2,-12(fp)
    d2e4:	10c00324 	muli	r3,r2,12
    d2e8:	00800074 	movhi	r2,1
    d2ec:	10814904 	addi	r2,r2,1316
    d2f0:	1885883a 	add	r2,r3,r2
    d2f4:	00000106 	br	d2fc <read+0x40>
    d2f8:	0005883a 	mov	r2,zero
    d2fc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d300:	e0bffb17 	ldw	r2,-20(fp)
    d304:	10002226 	beq	r2,zero,d390 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d308:	e0bffb17 	ldw	r2,-20(fp)
    d30c:	10800217 	ldw	r2,8(r2)
    d310:	108000cc 	andi	r2,r2,3
    d314:	10800060 	cmpeqi	r2,r2,1
    d318:	1000181e 	bne	r2,zero,d37c <read+0xc0>
        (fd->dev->read))
    d31c:	e0bffb17 	ldw	r2,-20(fp)
    d320:	10800017 	ldw	r2,0(r2)
    d324:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d328:	10001426 	beq	r2,zero,d37c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    d32c:	e0bffb17 	ldw	r2,-20(fp)
    d330:	10800017 	ldw	r2,0(r2)
    d334:	10800517 	ldw	r2,20(r2)
    d338:	e0ffff17 	ldw	r3,-4(fp)
    d33c:	180d883a 	mov	r6,r3
    d340:	e17ffe17 	ldw	r5,-8(fp)
    d344:	e13ffb17 	ldw	r4,-20(fp)
    d348:	103ee83a 	callr	r2
    d34c:	e0bffc15 	stw	r2,-16(fp)
    d350:	e0bffc17 	ldw	r2,-16(fp)
    d354:	1000070e 	bge	r2,zero,d374 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    d358:	000d26c0 	call	d26c <alt_get_errno>
    d35c:	1007883a 	mov	r3,r2
    d360:	e0bffc17 	ldw	r2,-16(fp)
    d364:	0085c83a 	sub	r2,zero,r2
    d368:	18800015 	stw	r2,0(r3)
          return -1;
    d36c:	00bfffc4 	movi	r2,-1
    d370:	00000c06 	br	d3a4 <read+0xe8>
        }
        return rval;
    d374:	e0bffc17 	ldw	r2,-16(fp)
    d378:	00000a06 	br	d3a4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    d37c:	000d26c0 	call	d26c <alt_get_errno>
    d380:	1007883a 	mov	r3,r2
    d384:	00800344 	movi	r2,13
    d388:	18800015 	stw	r2,0(r3)
    d38c:	00000406 	br	d3a0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    d390:	000d26c0 	call	d26c <alt_get_errno>
    d394:	1007883a 	mov	r3,r2
    d398:	00801444 	movi	r2,81
    d39c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d3a0:	00bfffc4 	movi	r2,-1
}
    d3a4:	e037883a 	mov	sp,fp
    d3a8:	dfc00117 	ldw	ra,4(sp)
    d3ac:	df000017 	ldw	fp,0(sp)
    d3b0:	dec00204 	addi	sp,sp,8
    d3b4:	f800283a 	ret

0000d3b8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    d3b8:	defffe04 	addi	sp,sp,-8
    d3bc:	df000115 	stw	fp,4(sp)
    d3c0:	df000104 	addi	fp,sp,4
    d3c4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    d3c8:	e0bfff17 	ldw	r2,-4(fp)
    d3cc:	108000d0 	cmplti	r2,r2,3
    d3d0:	10000d1e 	bne	r2,zero,d408 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    d3d4:	00800074 	movhi	r2,1
    d3d8:	10814904 	addi	r2,r2,1316
    d3dc:	e0ffff17 	ldw	r3,-4(fp)
    d3e0:	18c00324 	muli	r3,r3,12
    d3e4:	10c5883a 	add	r2,r2,r3
    d3e8:	10800204 	addi	r2,r2,8
    d3ec:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    d3f0:	00800074 	movhi	r2,1
    d3f4:	10814904 	addi	r2,r2,1316
    d3f8:	e0ffff17 	ldw	r3,-4(fp)
    d3fc:	18c00324 	muli	r3,r3,12
    d400:	10c5883a 	add	r2,r2,r3
    d404:	10000015 	stw	zero,0(r2)
  }
}
    d408:	0001883a 	nop
    d40c:	e037883a 	mov	sp,fp
    d410:	df000017 	ldw	fp,0(sp)
    d414:	dec00104 	addi	sp,sp,4
    d418:	f800283a 	ret

0000d41c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    d41c:	defff904 	addi	sp,sp,-28
    d420:	df000615 	stw	fp,24(sp)
    d424:	df000604 	addi	fp,sp,24
    d428:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d42c:	0005303a 	rdctl	r2,status
    d430:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d434:	e0fffe17 	ldw	r3,-8(fp)
    d438:	00bfff84 	movi	r2,-2
    d43c:	1884703a 	and	r2,r3,r2
    d440:	1001703a 	wrctl	status,r2
  
  return context;
    d444:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    d448:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    d44c:	d0a00c17 	ldw	r2,-32720(gp)
    d450:	10c000c4 	addi	r3,r2,3
    d454:	00bfff04 	movi	r2,-4
    d458:	1884703a 	and	r2,r3,r2
    d45c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    d460:	d0e00c17 	ldw	r3,-32720(gp)
    d464:	e0bfff17 	ldw	r2,-4(fp)
    d468:	1887883a 	add	r3,r3,r2
    d46c:	00800074 	movhi	r2,1
    d470:	10900004 	addi	r2,r2,16384
    d474:	10c0062e 	bgeu	r2,r3,d490 <sbrk+0x74>
    d478:	e0bffb17 	ldw	r2,-20(fp)
    d47c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d480:	e0bffa17 	ldw	r2,-24(fp)
    d484:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    d488:	00bfffc4 	movi	r2,-1
    d48c:	00000b06 	br	d4bc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    d490:	d0a00c17 	ldw	r2,-32720(gp)
    d494:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    d498:	d0e00c17 	ldw	r3,-32720(gp)
    d49c:	e0bfff17 	ldw	r2,-4(fp)
    d4a0:	1885883a 	add	r2,r3,r2
    d4a4:	d0a00c15 	stw	r2,-32720(gp)
    d4a8:	e0bffb17 	ldw	r2,-20(fp)
    d4ac:	e0bffc15 	stw	r2,-16(fp)
    d4b0:	e0bffc17 	ldw	r2,-16(fp)
    d4b4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    d4b8:	e0bffd17 	ldw	r2,-12(fp)
} 
    d4bc:	e037883a 	mov	sp,fp
    d4c0:	df000017 	ldw	fp,0(sp)
    d4c4:	dec00104 	addi	sp,sp,4
    d4c8:	f800283a 	ret

0000d4cc <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    d4cc:	defffd04 	addi	sp,sp,-12
    d4d0:	dfc00215 	stw	ra,8(sp)
    d4d4:	df000115 	stw	fp,4(sp)
    d4d8:	df000104 	addi	fp,sp,4
    d4dc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    d4e0:	e13fff17 	ldw	r4,-4(fp)
    d4e4:	000e7680 	call	e768 <alt_busy_sleep>
}
    d4e8:	e037883a 	mov	sp,fp
    d4ec:	dfc00117 	ldw	ra,4(sp)
    d4f0:	df000017 	ldw	fp,0(sp)
    d4f4:	dec00204 	addi	sp,sp,8
    d4f8:	f800283a 	ret

0000d4fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d4fc:	defffe04 	addi	sp,sp,-8
    d500:	dfc00115 	stw	ra,4(sp)
    d504:	df000015 	stw	fp,0(sp)
    d508:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d50c:	00800074 	movhi	r2,1
    d510:	1085d704 	addi	r2,r2,5980
    d514:	10800017 	ldw	r2,0(r2)
    d518:	10000526 	beq	r2,zero,d530 <alt_get_errno+0x34>
    d51c:	00800074 	movhi	r2,1
    d520:	1085d704 	addi	r2,r2,5980
    d524:	10800017 	ldw	r2,0(r2)
    d528:	103ee83a 	callr	r2
    d52c:	00000206 	br	d538 <alt_get_errno+0x3c>
    d530:	00800074 	movhi	r2,1
    d534:	108ca804 	addi	r2,r2,12960
}
    d538:	e037883a 	mov	sp,fp
    d53c:	dfc00117 	ldw	ra,4(sp)
    d540:	df000017 	ldw	fp,0(sp)
    d544:	dec00204 	addi	sp,sp,8
    d548:	f800283a 	ret

0000d54c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    d54c:	defff904 	addi	sp,sp,-28
    d550:	dfc00615 	stw	ra,24(sp)
    d554:	df000515 	stw	fp,20(sp)
    d558:	df000504 	addi	fp,sp,20
    d55c:	e13ffd15 	stw	r4,-12(fp)
    d560:	e17ffe15 	stw	r5,-8(fp)
    d564:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d568:	e0bffd17 	ldw	r2,-12(fp)
    d56c:	10000616 	blt	r2,zero,d588 <write+0x3c>
    d570:	e0bffd17 	ldw	r2,-12(fp)
    d574:	10c00324 	muli	r3,r2,12
    d578:	00800074 	movhi	r2,1
    d57c:	10814904 	addi	r2,r2,1316
    d580:	1885883a 	add	r2,r3,r2
    d584:	00000106 	br	d58c <write+0x40>
    d588:	0005883a 	mov	r2,zero
    d58c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d590:	e0bffb17 	ldw	r2,-20(fp)
    d594:	10002126 	beq	r2,zero,d61c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    d598:	e0bffb17 	ldw	r2,-20(fp)
    d59c:	10800217 	ldw	r2,8(r2)
    d5a0:	108000cc 	andi	r2,r2,3
    d5a4:	10001826 	beq	r2,zero,d608 <write+0xbc>
    d5a8:	e0bffb17 	ldw	r2,-20(fp)
    d5ac:	10800017 	ldw	r2,0(r2)
    d5b0:	10800617 	ldw	r2,24(r2)
    d5b4:	10001426 	beq	r2,zero,d608 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    d5b8:	e0bffb17 	ldw	r2,-20(fp)
    d5bc:	10800017 	ldw	r2,0(r2)
    d5c0:	10800617 	ldw	r2,24(r2)
    d5c4:	e0ffff17 	ldw	r3,-4(fp)
    d5c8:	180d883a 	mov	r6,r3
    d5cc:	e17ffe17 	ldw	r5,-8(fp)
    d5d0:	e13ffb17 	ldw	r4,-20(fp)
    d5d4:	103ee83a 	callr	r2
    d5d8:	e0bffc15 	stw	r2,-16(fp)
    d5dc:	e0bffc17 	ldw	r2,-16(fp)
    d5e0:	1000070e 	bge	r2,zero,d600 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    d5e4:	000d4fc0 	call	d4fc <alt_get_errno>
    d5e8:	1007883a 	mov	r3,r2
    d5ec:	e0bffc17 	ldw	r2,-16(fp)
    d5f0:	0085c83a 	sub	r2,zero,r2
    d5f4:	18800015 	stw	r2,0(r3)
        return -1;
    d5f8:	00bfffc4 	movi	r2,-1
    d5fc:	00000c06 	br	d630 <write+0xe4>
      }
      return rval;
    d600:	e0bffc17 	ldw	r2,-16(fp)
    d604:	00000a06 	br	d630 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    d608:	000d4fc0 	call	d4fc <alt_get_errno>
    d60c:	1007883a 	mov	r3,r2
    d610:	00800344 	movi	r2,13
    d614:	18800015 	stw	r2,0(r3)
    d618:	00000406 	br	d62c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    d61c:	000d4fc0 	call	d4fc <alt_get_errno>
    d620:	1007883a 	mov	r3,r2
    d624:	00801444 	movi	r2,81
    d628:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d62c:	00bfffc4 	movi	r2,-1
}
    d630:	e037883a 	mov	sp,fp
    d634:	dfc00117 	ldw	ra,4(sp)
    d638:	df000017 	ldw	fp,0(sp)
    d63c:	dec00204 	addi	sp,sp,8
    d640:	f800283a 	ret

0000d644 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    d644:	defffd04 	addi	sp,sp,-12
    d648:	dfc00215 	stw	ra,8(sp)
    d64c:	df000115 	stw	fp,4(sp)
    d650:	df000104 	addi	fp,sp,4
    d654:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    d658:	01400074 	movhi	r5,1
    d65c:	2945d404 	addi	r5,r5,5968
    d660:	e13fff17 	ldw	r4,-4(fp)
    d664:	000e9580 	call	e958 <alt_dev_llist_insert>
}
    d668:	e037883a 	mov	sp,fp
    d66c:	dfc00117 	ldw	ra,4(sp)
    d670:	df000017 	ldw	fp,0(sp)
    d674:	dec00204 	addi	sp,sp,8
    d678:	f800283a 	ret

0000d67c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    d67c:	defffd04 	addi	sp,sp,-12
    d680:	dfc00215 	stw	ra,8(sp)
    d684:	df000115 	stw	fp,4(sp)
    d688:	df000104 	addi	fp,sp,4
    d68c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOSII_CORE, niosII_core);
    d690:	000f2880 	call	f288 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    d694:	00800044 	movi	r2,1
    d698:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    d69c:	0001883a 	nop
    d6a0:	e037883a 	mov	sp,fp
    d6a4:	dfc00117 	ldw	ra,4(sp)
    d6a8:	df000017 	ldw	fp,0(sp)
    d6ac:	dec00204 	addi	sp,sp,8
    d6b0:	f800283a 	ret

0000d6b4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    d6b4:	defffe04 	addi	sp,sp,-8
    d6b8:	dfc00115 	stw	ra,4(sp)
    d6bc:	df000015 	stw	fp,0(sp)
    d6c0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_TIMER, Sys_Timer);
    d6c4:	01c0fa04 	movi	r7,1000
    d6c8:	01800044 	movi	r6,1
    d6cc:	000b883a 	mov	r5,zero
    d6d0:	010000b4 	movhi	r4,2
    d6d4:	21040004 	addi	r4,r4,4096
    d6d8:	000e2100 	call	e210 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, JTAG);
    d6dc:	000d883a 	mov	r6,zero
    d6e0:	000b883a 	mov	r5,zero
    d6e4:	01000074 	movhi	r4,1
    d6e8:	2101b304 	addi	r4,r4,1740
    d6ec:	000d8880 	call	d888 <altera_avalon_jtag_uart_init>
    d6f0:	01000074 	movhi	r4,1
    d6f4:	2101a904 	addi	r4,r4,1700
    d6f8:	000d6440 	call	d644 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSTEMID, SystemID);
    d6fc:	0001883a 	nop
    ALTERA_UP_AVALON_RS232_INIT ( UART_COM, UART_COM);
    d700:	01000074 	movhi	r4,1
    d704:	2105c104 	addi	r4,r4,5892
    d708:	000d6440 	call	d644 <alt_dev_reg>
}
    d70c:	0001883a 	nop
    d710:	e037883a 	mov	sp,fp
    d714:	dfc00117 	ldw	ra,4(sp)
    d718:	df000017 	ldw	fp,0(sp)
    d71c:	dec00204 	addi	sp,sp,8
    d720:	f800283a 	ret

0000d724 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    d724:	defffa04 	addi	sp,sp,-24
    d728:	dfc00515 	stw	ra,20(sp)
    d72c:	df000415 	stw	fp,16(sp)
    d730:	df000404 	addi	fp,sp,16
    d734:	e13ffd15 	stw	r4,-12(fp)
    d738:	e17ffe15 	stw	r5,-8(fp)
    d73c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d740:	e0bffd17 	ldw	r2,-12(fp)
    d744:	10800017 	ldw	r2,0(r2)
    d748:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    d74c:	e0bffc17 	ldw	r2,-16(fp)
    d750:	10c00a04 	addi	r3,r2,40
    d754:	e0bffd17 	ldw	r2,-12(fp)
    d758:	10800217 	ldw	r2,8(r2)
    d75c:	100f883a 	mov	r7,r2
    d760:	e1bfff17 	ldw	r6,-4(fp)
    d764:	e17ffe17 	ldw	r5,-8(fp)
    d768:	1809883a 	mov	r4,r3
    d76c:	000dd540 	call	dd54 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    d770:	e037883a 	mov	sp,fp
    d774:	dfc00117 	ldw	ra,4(sp)
    d778:	df000017 	ldw	fp,0(sp)
    d77c:	dec00204 	addi	sp,sp,8
    d780:	f800283a 	ret

0000d784 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    d784:	defffa04 	addi	sp,sp,-24
    d788:	dfc00515 	stw	ra,20(sp)
    d78c:	df000415 	stw	fp,16(sp)
    d790:	df000404 	addi	fp,sp,16
    d794:	e13ffd15 	stw	r4,-12(fp)
    d798:	e17ffe15 	stw	r5,-8(fp)
    d79c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d7a0:	e0bffd17 	ldw	r2,-12(fp)
    d7a4:	10800017 	ldw	r2,0(r2)
    d7a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    d7ac:	e0bffc17 	ldw	r2,-16(fp)
    d7b0:	10c00a04 	addi	r3,r2,40
    d7b4:	e0bffd17 	ldw	r2,-12(fp)
    d7b8:	10800217 	ldw	r2,8(r2)
    d7bc:	100f883a 	mov	r7,r2
    d7c0:	e1bfff17 	ldw	r6,-4(fp)
    d7c4:	e17ffe17 	ldw	r5,-8(fp)
    d7c8:	1809883a 	mov	r4,r3
    d7cc:	000df700 	call	df70 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    d7d0:	e037883a 	mov	sp,fp
    d7d4:	dfc00117 	ldw	ra,4(sp)
    d7d8:	df000017 	ldw	fp,0(sp)
    d7dc:	dec00204 	addi	sp,sp,8
    d7e0:	f800283a 	ret

0000d7e4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    d7e4:	defffc04 	addi	sp,sp,-16
    d7e8:	dfc00315 	stw	ra,12(sp)
    d7ec:	df000215 	stw	fp,8(sp)
    d7f0:	df000204 	addi	fp,sp,8
    d7f4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d7f8:	e0bfff17 	ldw	r2,-4(fp)
    d7fc:	10800017 	ldw	r2,0(r2)
    d800:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    d804:	e0bffe17 	ldw	r2,-8(fp)
    d808:	10c00a04 	addi	r3,r2,40
    d80c:	e0bfff17 	ldw	r2,-4(fp)
    d810:	10800217 	ldw	r2,8(r2)
    d814:	100b883a 	mov	r5,r2
    d818:	1809883a 	mov	r4,r3
    d81c:	000dbfc0 	call	dbfc <altera_avalon_jtag_uart_close>
}
    d820:	e037883a 	mov	sp,fp
    d824:	dfc00117 	ldw	ra,4(sp)
    d828:	df000017 	ldw	fp,0(sp)
    d82c:	dec00204 	addi	sp,sp,8
    d830:	f800283a 	ret

0000d834 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    d834:	defffa04 	addi	sp,sp,-24
    d838:	dfc00515 	stw	ra,20(sp)
    d83c:	df000415 	stw	fp,16(sp)
    d840:	df000404 	addi	fp,sp,16
    d844:	e13ffd15 	stw	r4,-12(fp)
    d848:	e17ffe15 	stw	r5,-8(fp)
    d84c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    d850:	e0bffd17 	ldw	r2,-12(fp)
    d854:	10800017 	ldw	r2,0(r2)
    d858:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    d85c:	e0bffc17 	ldw	r2,-16(fp)
    d860:	10800a04 	addi	r2,r2,40
    d864:	e1bfff17 	ldw	r6,-4(fp)
    d868:	e17ffe17 	ldw	r5,-8(fp)
    d86c:	1009883a 	mov	r4,r2
    d870:	000dc640 	call	dc64 <altera_avalon_jtag_uart_ioctl>
}
    d874:	e037883a 	mov	sp,fp
    d878:	dfc00117 	ldw	ra,4(sp)
    d87c:	df000017 	ldw	fp,0(sp)
    d880:	dec00204 	addi	sp,sp,8
    d884:	f800283a 	ret

0000d888 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    d888:	defffb04 	addi	sp,sp,-20
    d88c:	dfc00415 	stw	ra,16(sp)
    d890:	df000315 	stw	fp,12(sp)
    d894:	df000304 	addi	fp,sp,12
    d898:	e13ffd15 	stw	r4,-12(fp)
    d89c:	e17ffe15 	stw	r5,-8(fp)
    d8a0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    d8a4:	e0bffd17 	ldw	r2,-12(fp)
    d8a8:	00c00044 	movi	r3,1
    d8ac:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    d8b0:	e0bffd17 	ldw	r2,-12(fp)
    d8b4:	10800017 	ldw	r2,0(r2)
    d8b8:	10800104 	addi	r2,r2,4
    d8bc:	1007883a 	mov	r3,r2
    d8c0:	e0bffd17 	ldw	r2,-12(fp)
    d8c4:	10800817 	ldw	r2,32(r2)
    d8c8:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    d8cc:	e0bfff17 	ldw	r2,-4(fp)
    d8d0:	01800074 	movhi	r6,1
    d8d4:	31b65104 	addi	r6,r6,-9916
    d8d8:	e17ffd17 	ldw	r5,-12(fp)
    d8dc:	1009883a 	mov	r4,r2
    d8e0:	000ecc00 	call	ecc0 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    d8e4:	e0bffd17 	ldw	r2,-12(fp)
    d8e8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    d8ec:	e0bffd17 	ldw	r2,-12(fp)
    d8f0:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    d8f4:	00800074 	movhi	r2,1
    d8f8:	108cad04 	addi	r2,r2,12980
    d8fc:	10800017 	ldw	r2,0(r2)
    d900:	e1fffd17 	ldw	r7,-12(fp)
    d904:	01800074 	movhi	r6,1
    d908:	31b6d504 	addi	r6,r6,-9388
    d90c:	100b883a 	mov	r5,r2
    d910:	1809883a 	mov	r4,r3
    d914:	000e6280 	call	e628 <alt_alarm_start>
    d918:	1000040e 	bge	r2,zero,d92c <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    d91c:	e0fffd17 	ldw	r3,-12(fp)
    d920:	00a00034 	movhi	r2,32768
    d924:	10bfffc4 	addi	r2,r2,-1
    d928:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    d92c:	0001883a 	nop
    d930:	e037883a 	mov	sp,fp
    d934:	dfc00117 	ldw	ra,4(sp)
    d938:	df000017 	ldw	fp,0(sp)
    d93c:	dec00204 	addi	sp,sp,8
    d940:	f800283a 	ret

0000d944 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    d944:	defff704 	addi	sp,sp,-36
    d948:	df000815 	stw	fp,32(sp)
    d94c:	df000804 	addi	fp,sp,32
    d950:	e13ffe15 	stw	r4,-8(fp)
    d954:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    d958:	e0bffe17 	ldw	r2,-8(fp)
    d95c:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
    d960:	e0bffa17 	ldw	r2,-24(fp)
    d964:	10800017 	ldw	r2,0(r2)
    d968:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    d96c:	e0bffb17 	ldw	r2,-20(fp)
    d970:	10800104 	addi	r2,r2,4
    d974:	10800037 	ldwio	r2,0(r2)
    d978:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    d97c:	e0bffc17 	ldw	r2,-16(fp)
    d980:	1080c00c 	andi	r2,r2,768
    d984:	10006d26 	beq	r2,zero,db3c <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    d988:	e0bffc17 	ldw	r2,-16(fp)
    d98c:	1080400c 	andi	r2,r2,256
    d990:	10003526 	beq	r2,zero,da68 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    d994:	00800074 	movhi	r2,1
    d998:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d99c:	e0bffa17 	ldw	r2,-24(fp)
    d9a0:	10800a17 	ldw	r2,40(r2)
    d9a4:	10800044 	addi	r2,r2,1
    d9a8:	1081ffcc 	andi	r2,r2,2047
    d9ac:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
    d9b0:	e0bffa17 	ldw	r2,-24(fp)
    d9b4:	10c00b17 	ldw	r3,44(r2)
    d9b8:	e0bffd17 	ldw	r2,-12(fp)
    d9bc:	18801526 	beq	r3,r2,da14 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    d9c0:	e0bffb17 	ldw	r2,-20(fp)
    d9c4:	10800037 	ldwio	r2,0(r2)
    d9c8:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    d9cc:	e0bff817 	ldw	r2,-32(fp)
    d9d0:	10a0000c 	andi	r2,r2,32768
    d9d4:	10001126 	beq	r2,zero,da1c <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    d9d8:	e0bffa17 	ldw	r2,-24(fp)
    d9dc:	10800a17 	ldw	r2,40(r2)
    d9e0:	e0fff817 	ldw	r3,-32(fp)
    d9e4:	1809883a 	mov	r4,r3
    d9e8:	e0fffa17 	ldw	r3,-24(fp)
    d9ec:	1885883a 	add	r2,r3,r2
    d9f0:	10800e04 	addi	r2,r2,56
    d9f4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d9f8:	e0bffa17 	ldw	r2,-24(fp)
    d9fc:	10800a17 	ldw	r2,40(r2)
    da00:	10800044 	addi	r2,r2,1
    da04:	10c1ffcc 	andi	r3,r2,2047
    da08:	e0bffa17 	ldw	r2,-24(fp)
    da0c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    da10:	003fe206 	br	d99c <altera_avalon_jtag_uart_irq+0x58>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    da14:	0001883a 	nop
    da18:	00000106 	br	da20 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    da1c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    da20:	e0bff817 	ldw	r2,-32(fp)
    da24:	10bfffec 	andhi	r2,r2,65535
    da28:	10000f26 	beq	r2,zero,da68 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    da2c:	e0bffa17 	ldw	r2,-24(fp)
    da30:	10c00817 	ldw	r3,32(r2)
    da34:	00bfff84 	movi	r2,-2
    da38:	1886703a 	and	r3,r3,r2
    da3c:	e0bffa17 	ldw	r2,-24(fp)
    da40:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    da44:	e0bffb17 	ldw	r2,-20(fp)
    da48:	10800104 	addi	r2,r2,4
    da4c:	1007883a 	mov	r3,r2
    da50:	e0bffa17 	ldw	r2,-24(fp)
    da54:	10800817 	ldw	r2,32(r2)
    da58:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    da5c:	e0bffb17 	ldw	r2,-20(fp)
    da60:	10800104 	addi	r2,r2,4
    da64:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    da68:	e0bffc17 	ldw	r2,-16(fp)
    da6c:	1080800c 	andi	r2,r2,512
    da70:	103fbe26 	beq	r2,zero,d96c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    da74:	e0bffc17 	ldw	r2,-16(fp)
    da78:	1004d43a 	srli	r2,r2,16
    da7c:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    da80:	00001406 	br	dad4 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    da84:	e0bffb17 	ldw	r2,-20(fp)
    da88:	e0fffa17 	ldw	r3,-24(fp)
    da8c:	18c00d17 	ldw	r3,52(r3)
    da90:	e13ffa17 	ldw	r4,-24(fp)
    da94:	20c7883a 	add	r3,r4,r3
    da98:	18c20e04 	addi	r3,r3,2104
    da9c:	18c00003 	ldbu	r3,0(r3)
    daa0:	18c03fcc 	andi	r3,r3,255
    daa4:	18c0201c 	xori	r3,r3,128
    daa8:	18ffe004 	addi	r3,r3,-128
    daac:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    dab0:	e0bffa17 	ldw	r2,-24(fp)
    dab4:	10800d17 	ldw	r2,52(r2)
    dab8:	10800044 	addi	r2,r2,1
    dabc:	10c1ffcc 	andi	r3,r2,2047
    dac0:	e0bffa17 	ldw	r2,-24(fp)
    dac4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    dac8:	e0bff917 	ldw	r2,-28(fp)
    dacc:	10bfffc4 	addi	r2,r2,-1
    dad0:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    dad4:	e0bff917 	ldw	r2,-28(fp)
    dad8:	10000526 	beq	r2,zero,daf0 <altera_avalon_jtag_uart_irq+0x1ac>
    dadc:	e0bffa17 	ldw	r2,-24(fp)
    dae0:	10c00d17 	ldw	r3,52(r2)
    dae4:	e0bffa17 	ldw	r2,-24(fp)
    dae8:	10800c17 	ldw	r2,48(r2)
    daec:	18bfe51e 	bne	r3,r2,da84 <altera_avalon_jtag_uart_irq+0x140>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    daf0:	e0bff917 	ldw	r2,-28(fp)
    daf4:	103f9d26 	beq	r2,zero,d96c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    daf8:	e0bffa17 	ldw	r2,-24(fp)
    dafc:	10c00817 	ldw	r3,32(r2)
    db00:	00bfff44 	movi	r2,-3
    db04:	1886703a 	and	r3,r3,r2
    db08:	e0bffa17 	ldw	r2,-24(fp)
    db0c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    db10:	e0bffa17 	ldw	r2,-24(fp)
    db14:	10800017 	ldw	r2,0(r2)
    db18:	10800104 	addi	r2,r2,4
    db1c:	1007883a 	mov	r3,r2
    db20:	e0bffa17 	ldw	r2,-24(fp)
    db24:	10800817 	ldw	r2,32(r2)
    db28:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    db2c:	e0bffb17 	ldw	r2,-20(fp)
    db30:	10800104 	addi	r2,r2,4
    db34:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    db38:	003f8c06 	br	d96c <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    db3c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    db40:	0001883a 	nop
    db44:	e037883a 	mov	sp,fp
    db48:	df000017 	ldw	fp,0(sp)
    db4c:	dec00104 	addi	sp,sp,4
    db50:	f800283a 	ret

0000db54 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    db54:	defff804 	addi	sp,sp,-32
    db58:	df000715 	stw	fp,28(sp)
    db5c:	df000704 	addi	fp,sp,28
    db60:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    db64:	e0bffb17 	ldw	r2,-20(fp)
    db68:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    db6c:	e0bff917 	ldw	r2,-28(fp)
    db70:	10800017 	ldw	r2,0(r2)
    db74:	10800104 	addi	r2,r2,4
    db78:	10800037 	ldwio	r2,0(r2)
    db7c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    db80:	e0bffa17 	ldw	r2,-24(fp)
    db84:	1081000c 	andi	r2,r2,1024
    db88:	10000b26 	beq	r2,zero,dbb8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    db8c:	e0bff917 	ldw	r2,-28(fp)
    db90:	10800017 	ldw	r2,0(r2)
    db94:	10800104 	addi	r2,r2,4
    db98:	1007883a 	mov	r3,r2
    db9c:	e0bff917 	ldw	r2,-28(fp)
    dba0:	10800817 	ldw	r2,32(r2)
    dba4:	10810014 	ori	r2,r2,1024
    dba8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    dbac:	e0bff917 	ldw	r2,-28(fp)
    dbb0:	10000915 	stw	zero,36(r2)
    dbb4:	00000a06 	br	dbe0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    dbb8:	e0bff917 	ldw	r2,-28(fp)
    dbbc:	10c00917 	ldw	r3,36(r2)
    dbc0:	00a00034 	movhi	r2,32768
    dbc4:	10bfff04 	addi	r2,r2,-4
    dbc8:	10c00536 	bltu	r2,r3,dbe0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    dbcc:	e0bff917 	ldw	r2,-28(fp)
    dbd0:	10800917 	ldw	r2,36(r2)
    dbd4:	10c00044 	addi	r3,r2,1
    dbd8:	e0bff917 	ldw	r2,-28(fp)
    dbdc:	10c00915 	stw	r3,36(r2)
    dbe0:	00800074 	movhi	r2,1
    dbe4:	108cad04 	addi	r2,r2,12980
    dbe8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    dbec:	e037883a 	mov	sp,fp
    dbf0:	df000017 	ldw	fp,0(sp)
    dbf4:	dec00104 	addi	sp,sp,4
    dbf8:	f800283a 	ret

0000dbfc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    dbfc:	defffd04 	addi	sp,sp,-12
    dc00:	df000215 	stw	fp,8(sp)
    dc04:	df000204 	addi	fp,sp,8
    dc08:	e13ffe15 	stw	r4,-8(fp)
    dc0c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    dc10:	00000506 	br	dc28 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    dc14:	e0bfff17 	ldw	r2,-4(fp)
    dc18:	1090000c 	andi	r2,r2,16384
    dc1c:	10000226 	beq	r2,zero,dc28 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    dc20:	00bffd44 	movi	r2,-11
    dc24:	00000b06 	br	dc54 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    dc28:	e0bffe17 	ldw	r2,-8(fp)
    dc2c:	10c00d17 	ldw	r3,52(r2)
    dc30:	e0bffe17 	ldw	r2,-8(fp)
    dc34:	10800c17 	ldw	r2,48(r2)
    dc38:	18800526 	beq	r3,r2,dc50 <altera_avalon_jtag_uart_close+0x54>
    dc3c:	e0bffe17 	ldw	r2,-8(fp)
    dc40:	10c00917 	ldw	r3,36(r2)
    dc44:	e0bffe17 	ldw	r2,-8(fp)
    dc48:	10800117 	ldw	r2,4(r2)
    dc4c:	18bff136 	bltu	r3,r2,dc14 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    dc50:	0005883a 	mov	r2,zero
}
    dc54:	e037883a 	mov	sp,fp
    dc58:	df000017 	ldw	fp,0(sp)
    dc5c:	dec00104 	addi	sp,sp,4
    dc60:	f800283a 	ret

0000dc64 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    dc64:	defffa04 	addi	sp,sp,-24
    dc68:	df000515 	stw	fp,20(sp)
    dc6c:	df000504 	addi	fp,sp,20
    dc70:	e13ffd15 	stw	r4,-12(fp)
    dc74:	e17ffe15 	stw	r5,-8(fp)
    dc78:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    dc7c:	00bff9c4 	movi	r2,-25
    dc80:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    dc84:	e0bffe17 	ldw	r2,-8(fp)
    dc88:	10da8060 	cmpeqi	r3,r2,27137
    dc8c:	1800031e 	bne	r3,zero,dc9c <altera_avalon_jtag_uart_ioctl+0x38>
    dc90:	109a80a0 	cmpeqi	r2,r2,27138
    dc94:	1000181e 	bne	r2,zero,dcf8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    dc98:	00002906 	br	dd40 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    dc9c:	e0bffd17 	ldw	r2,-12(fp)
    dca0:	10c00117 	ldw	r3,4(r2)
    dca4:	00a00034 	movhi	r2,32768
    dca8:	10bfffc4 	addi	r2,r2,-1
    dcac:	18802126 	beq	r3,r2,dd34 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    dcb0:	e0bfff17 	ldw	r2,-4(fp)
    dcb4:	10800017 	ldw	r2,0(r2)
    dcb8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    dcbc:	e0bffc17 	ldw	r2,-16(fp)
    dcc0:	10800090 	cmplti	r2,r2,2
    dcc4:	1000061e 	bne	r2,zero,dce0 <altera_avalon_jtag_uart_ioctl+0x7c>
    dcc8:	e0fffc17 	ldw	r3,-16(fp)
    dccc:	00a00034 	movhi	r2,32768
    dcd0:	10bfffc4 	addi	r2,r2,-1
    dcd4:	18800226 	beq	r3,r2,dce0 <altera_avalon_jtag_uart_ioctl+0x7c>
    dcd8:	e0bffc17 	ldw	r2,-16(fp)
    dcdc:	00000206 	br	dce8 <altera_avalon_jtag_uart_ioctl+0x84>
    dce0:	00a00034 	movhi	r2,32768
    dce4:	10bfff84 	addi	r2,r2,-2
    dce8:	e0fffd17 	ldw	r3,-12(fp)
    dcec:	18800115 	stw	r2,4(r3)
      rc = 0;
    dcf0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    dcf4:	00000f06 	br	dd34 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    dcf8:	e0bffd17 	ldw	r2,-12(fp)
    dcfc:	10c00117 	ldw	r3,4(r2)
    dd00:	00a00034 	movhi	r2,32768
    dd04:	10bfffc4 	addi	r2,r2,-1
    dd08:	18800c26 	beq	r3,r2,dd3c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    dd0c:	e0bffd17 	ldw	r2,-12(fp)
    dd10:	10c00917 	ldw	r3,36(r2)
    dd14:	e0bffd17 	ldw	r2,-12(fp)
    dd18:	10800117 	ldw	r2,4(r2)
    dd1c:	1885803a 	cmpltu	r2,r3,r2
    dd20:	10c03fcc 	andi	r3,r2,255
    dd24:	e0bfff17 	ldw	r2,-4(fp)
    dd28:	10c00015 	stw	r3,0(r2)
      rc = 0;
    dd2c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    dd30:	00000206 	br	dd3c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    dd34:	0001883a 	nop
    dd38:	00000106 	br	dd40 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    dd3c:	0001883a 	nop

  default:
    break;
  }

  return rc;
    dd40:	e0bffb17 	ldw	r2,-20(fp)
}
    dd44:	e037883a 	mov	sp,fp
    dd48:	df000017 	ldw	fp,0(sp)
    dd4c:	dec00104 	addi	sp,sp,4
    dd50:	f800283a 	ret

0000dd54 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    dd54:	defff304 	addi	sp,sp,-52
    dd58:	dfc00c15 	stw	ra,48(sp)
    dd5c:	df000b15 	stw	fp,44(sp)
    dd60:	df000b04 	addi	fp,sp,44
    dd64:	e13ffc15 	stw	r4,-16(fp)
    dd68:	e17ffd15 	stw	r5,-12(fp)
    dd6c:	e1bffe15 	stw	r6,-8(fp)
    dd70:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    dd74:	e0bffd17 	ldw	r2,-12(fp)
    dd78:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    dd7c:	00004706 	br	de9c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    dd80:	e0bffc17 	ldw	r2,-16(fp)
    dd84:	10800a17 	ldw	r2,40(r2)
    dd88:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    dd8c:	e0bffc17 	ldw	r2,-16(fp)
    dd90:	10800b17 	ldw	r2,44(r2)
    dd94:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    dd98:	e0fff717 	ldw	r3,-36(fp)
    dd9c:	e0bff817 	ldw	r2,-32(fp)
    dda0:	18800536 	bltu	r3,r2,ddb8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    dda4:	e0fff717 	ldw	r3,-36(fp)
    dda8:	e0bff817 	ldw	r2,-32(fp)
    ddac:	1885c83a 	sub	r2,r3,r2
    ddb0:	e0bff615 	stw	r2,-40(fp)
    ddb4:	00000406 	br	ddc8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    ddb8:	00c20004 	movi	r3,2048
    ddbc:	e0bff817 	ldw	r2,-32(fp)
    ddc0:	1885c83a 	sub	r2,r3,r2
    ddc4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    ddc8:	e0bff617 	ldw	r2,-40(fp)
    ddcc:	10001e26 	beq	r2,zero,de48 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    ddd0:	e0fffe17 	ldw	r3,-8(fp)
    ddd4:	e0bff617 	ldw	r2,-40(fp)
    ddd8:	1880022e 	bgeu	r3,r2,dde4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    dddc:	e0bffe17 	ldw	r2,-8(fp)
    dde0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    dde4:	e0bffc17 	ldw	r2,-16(fp)
    dde8:	10c00e04 	addi	r3,r2,56
    ddec:	e0bff817 	ldw	r2,-32(fp)
    ddf0:	1885883a 	add	r2,r3,r2
    ddf4:	e1bff617 	ldw	r6,-40(fp)
    ddf8:	100b883a 	mov	r5,r2
    ddfc:	e13ff517 	ldw	r4,-44(fp)
    de00:	0005e040 	call	5e04 <memcpy>
      ptr   += n;
    de04:	e0fff517 	ldw	r3,-44(fp)
    de08:	e0bff617 	ldw	r2,-40(fp)
    de0c:	1885883a 	add	r2,r3,r2
    de10:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    de14:	e0fffe17 	ldw	r3,-8(fp)
    de18:	e0bff617 	ldw	r2,-40(fp)
    de1c:	1885c83a 	sub	r2,r3,r2
    de20:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    de24:	e0fff817 	ldw	r3,-32(fp)
    de28:	e0bff617 	ldw	r2,-40(fp)
    de2c:	1885883a 	add	r2,r3,r2
    de30:	10c1ffcc 	andi	r3,r2,2047
    de34:	e0bffc17 	ldw	r2,-16(fp)
    de38:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    de3c:	e0bffe17 	ldw	r2,-8(fp)
    de40:	00bfcf16 	blt	zero,r2,dd80 <altera_avalon_jtag_uart_read+0x2c>
    de44:	00000106 	br	de4c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    de48:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    de4c:	e0fff517 	ldw	r3,-44(fp)
    de50:	e0bffd17 	ldw	r2,-12(fp)
    de54:	1880141e 	bne	r3,r2,dea8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    de58:	e0bfff17 	ldw	r2,-4(fp)
    de5c:	1090000c 	andi	r2,r2,16384
    de60:	1000131e 	bne	r2,zero,deb0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    de64:	0001883a 	nop
    de68:	e0bffc17 	ldw	r2,-16(fp)
    de6c:	10c00a17 	ldw	r3,40(r2)
    de70:	e0bff717 	ldw	r2,-36(fp)
    de74:	1880051e 	bne	r3,r2,de8c <altera_avalon_jtag_uart_read+0x138>
    de78:	e0bffc17 	ldw	r2,-16(fp)
    de7c:	10c00917 	ldw	r3,36(r2)
    de80:	e0bffc17 	ldw	r2,-16(fp)
    de84:	10800117 	ldw	r2,4(r2)
    de88:	18bff736 	bltu	r3,r2,de68 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    de8c:	e0bffc17 	ldw	r2,-16(fp)
    de90:	10c00a17 	ldw	r3,40(r2)
    de94:	e0bff717 	ldw	r2,-36(fp)
    de98:	18800726 	beq	r3,r2,deb8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    de9c:	e0bffe17 	ldw	r2,-8(fp)
    dea0:	00bfb716 	blt	zero,r2,dd80 <altera_avalon_jtag_uart_read+0x2c>
    dea4:	00000506 	br	debc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    dea8:	0001883a 	nop
    deac:	00000306 	br	debc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    deb0:	0001883a 	nop
    deb4:	00000106 	br	debc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    deb8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    debc:	e0fff517 	ldw	r3,-44(fp)
    dec0:	e0bffd17 	ldw	r2,-12(fp)
    dec4:	18801826 	beq	r3,r2,df28 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dec8:	0005303a 	rdctl	r2,status
    decc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ded0:	e0fffb17 	ldw	r3,-20(fp)
    ded4:	00bfff84 	movi	r2,-2
    ded8:	1884703a 	and	r2,r3,r2
    dedc:	1001703a 	wrctl	status,r2
  
  return context;
    dee0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    dee4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    dee8:	e0bffc17 	ldw	r2,-16(fp)
    deec:	10800817 	ldw	r2,32(r2)
    def0:	10c00054 	ori	r3,r2,1
    def4:	e0bffc17 	ldw	r2,-16(fp)
    def8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    defc:	e0bffc17 	ldw	r2,-16(fp)
    df00:	10800017 	ldw	r2,0(r2)
    df04:	10800104 	addi	r2,r2,4
    df08:	1007883a 	mov	r3,r2
    df0c:	e0bffc17 	ldw	r2,-16(fp)
    df10:	10800817 	ldw	r2,32(r2)
    df14:	18800035 	stwio	r2,0(r3)
    df18:	e0bffa17 	ldw	r2,-24(fp)
    df1c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    df20:	e0bff917 	ldw	r2,-28(fp)
    df24:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    df28:	e0fff517 	ldw	r3,-44(fp)
    df2c:	e0bffd17 	ldw	r2,-12(fp)
    df30:	18800426 	beq	r3,r2,df44 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    df34:	e0fff517 	ldw	r3,-44(fp)
    df38:	e0bffd17 	ldw	r2,-12(fp)
    df3c:	1885c83a 	sub	r2,r3,r2
    df40:	00000606 	br	df5c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    df44:	e0bfff17 	ldw	r2,-4(fp)
    df48:	1090000c 	andi	r2,r2,16384
    df4c:	10000226 	beq	r2,zero,df58 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    df50:	00bffd44 	movi	r2,-11
    df54:	00000106 	br	df5c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    df58:	00bffec4 	movi	r2,-5
}
    df5c:	e037883a 	mov	sp,fp
    df60:	dfc00117 	ldw	ra,4(sp)
    df64:	df000017 	ldw	fp,0(sp)
    df68:	dec00204 	addi	sp,sp,8
    df6c:	f800283a 	ret

0000df70 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    df70:	defff304 	addi	sp,sp,-52
    df74:	dfc00c15 	stw	ra,48(sp)
    df78:	df000b15 	stw	fp,44(sp)
    df7c:	df000b04 	addi	fp,sp,44
    df80:	e13ffc15 	stw	r4,-16(fp)
    df84:	e17ffd15 	stw	r5,-12(fp)
    df88:	e1bffe15 	stw	r6,-8(fp)
    df8c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    df90:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    df94:	e0bffd17 	ldw	r2,-12(fp)
    df98:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    df9c:	00003706 	br	e07c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    dfa0:	e0bffc17 	ldw	r2,-16(fp)
    dfa4:	10800c17 	ldw	r2,48(r2)
    dfa8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    dfac:	e0bffc17 	ldw	r2,-16(fp)
    dfb0:	10800d17 	ldw	r2,52(r2)
    dfb4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    dfb8:	e0fff917 	ldw	r3,-28(fp)
    dfbc:	e0bff517 	ldw	r2,-44(fp)
    dfc0:	1880062e 	bgeu	r3,r2,dfdc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    dfc4:	e0fff517 	ldw	r3,-44(fp)
    dfc8:	e0bff917 	ldw	r2,-28(fp)
    dfcc:	1885c83a 	sub	r2,r3,r2
    dfd0:	10bfffc4 	addi	r2,r2,-1
    dfd4:	e0bff615 	stw	r2,-40(fp)
    dfd8:	00000b06 	br	e008 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    dfdc:	e0bff517 	ldw	r2,-44(fp)
    dfe0:	10000526 	beq	r2,zero,dff8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    dfe4:	00c20004 	movi	r3,2048
    dfe8:	e0bff917 	ldw	r2,-28(fp)
    dfec:	1885c83a 	sub	r2,r3,r2
    dff0:	e0bff615 	stw	r2,-40(fp)
    dff4:	00000406 	br	e008 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    dff8:	00c1ffc4 	movi	r3,2047
    dffc:	e0bff917 	ldw	r2,-28(fp)
    e000:	1885c83a 	sub	r2,r3,r2
    e004:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    e008:	e0bff617 	ldw	r2,-40(fp)
    e00c:	10001e26 	beq	r2,zero,e088 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    e010:	e0fffe17 	ldw	r3,-8(fp)
    e014:	e0bff617 	ldw	r2,-40(fp)
    e018:	1880022e 	bgeu	r3,r2,e024 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    e01c:	e0bffe17 	ldw	r2,-8(fp)
    e020:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    e024:	e0bffc17 	ldw	r2,-16(fp)
    e028:	10c20e04 	addi	r3,r2,2104
    e02c:	e0bff917 	ldw	r2,-28(fp)
    e030:	1885883a 	add	r2,r3,r2
    e034:	e1bff617 	ldw	r6,-40(fp)
    e038:	e17ffd17 	ldw	r5,-12(fp)
    e03c:	1009883a 	mov	r4,r2
    e040:	0005e040 	call	5e04 <memcpy>
      ptr   += n;
    e044:	e0fffd17 	ldw	r3,-12(fp)
    e048:	e0bff617 	ldw	r2,-40(fp)
    e04c:	1885883a 	add	r2,r3,r2
    e050:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    e054:	e0fffe17 	ldw	r3,-8(fp)
    e058:	e0bff617 	ldw	r2,-40(fp)
    e05c:	1885c83a 	sub	r2,r3,r2
    e060:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e064:	e0fff917 	ldw	r3,-28(fp)
    e068:	e0bff617 	ldw	r2,-40(fp)
    e06c:	1885883a 	add	r2,r3,r2
    e070:	10c1ffcc 	andi	r3,r2,2047
    e074:	e0bffc17 	ldw	r2,-16(fp)
    e078:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    e07c:	e0bffe17 	ldw	r2,-8(fp)
    e080:	00bfc716 	blt	zero,r2,dfa0 <altera_avalon_jtag_uart_write+0x30>
    e084:	00000106 	br	e08c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    e088:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e08c:	0005303a 	rdctl	r2,status
    e090:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e094:	e0fffb17 	ldw	r3,-20(fp)
    e098:	00bfff84 	movi	r2,-2
    e09c:	1884703a 	and	r2,r3,r2
    e0a0:	1001703a 	wrctl	status,r2
  
  return context;
    e0a4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    e0a8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    e0ac:	e0bffc17 	ldw	r2,-16(fp)
    e0b0:	10800817 	ldw	r2,32(r2)
    e0b4:	10c00094 	ori	r3,r2,2
    e0b8:	e0bffc17 	ldw	r2,-16(fp)
    e0bc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e0c0:	e0bffc17 	ldw	r2,-16(fp)
    e0c4:	10800017 	ldw	r2,0(r2)
    e0c8:	10800104 	addi	r2,r2,4
    e0cc:	1007883a 	mov	r3,r2
    e0d0:	e0bffc17 	ldw	r2,-16(fp)
    e0d4:	10800817 	ldw	r2,32(r2)
    e0d8:	18800035 	stwio	r2,0(r3)
    e0dc:	e0bffa17 	ldw	r2,-24(fp)
    e0e0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e0e4:	e0bff817 	ldw	r2,-32(fp)
    e0e8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    e0ec:	e0bffe17 	ldw	r2,-8(fp)
    e0f0:	0080100e 	bge	zero,r2,e134 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    e0f4:	e0bfff17 	ldw	r2,-4(fp)
    e0f8:	1090000c 	andi	r2,r2,16384
    e0fc:	1000101e 	bne	r2,zero,e140 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    e100:	0001883a 	nop
    e104:	e0bffc17 	ldw	r2,-16(fp)
    e108:	10c00d17 	ldw	r3,52(r2)
    e10c:	e0bff517 	ldw	r2,-44(fp)
    e110:	1880051e 	bne	r3,r2,e128 <altera_avalon_jtag_uart_write+0x1b8>
    e114:	e0bffc17 	ldw	r2,-16(fp)
    e118:	10c00917 	ldw	r3,36(r2)
    e11c:	e0bffc17 	ldw	r2,-16(fp)
    e120:	10800117 	ldw	r2,4(r2)
    e124:	18bff736 	bltu	r3,r2,e104 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    e128:	e0bffc17 	ldw	r2,-16(fp)
    e12c:	10800917 	ldw	r2,36(r2)
    e130:	1000051e 	bne	r2,zero,e148 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    e134:	e0bffe17 	ldw	r2,-8(fp)
    e138:	00bfd016 	blt	zero,r2,e07c <altera_avalon_jtag_uart_write+0x10c>
    e13c:	00000306 	br	e14c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    e140:	0001883a 	nop
    e144:	00000106 	br	e14c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    e148:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    e14c:	e0fffd17 	ldw	r3,-12(fp)
    e150:	e0bff717 	ldw	r2,-36(fp)
    e154:	18800426 	beq	r3,r2,e168 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    e158:	e0fffd17 	ldw	r3,-12(fp)
    e15c:	e0bff717 	ldw	r2,-36(fp)
    e160:	1885c83a 	sub	r2,r3,r2
    e164:	00000606 	br	e180 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    e168:	e0bfff17 	ldw	r2,-4(fp)
    e16c:	1090000c 	andi	r2,r2,16384
    e170:	10000226 	beq	r2,zero,e17c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    e174:	00bffd44 	movi	r2,-11
    e178:	00000106 	br	e180 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    e17c:	00bffec4 	movi	r2,-5
}
    e180:	e037883a 	mov	sp,fp
    e184:	dfc00117 	ldw	ra,4(sp)
    e188:	df000017 	ldw	fp,0(sp)
    e18c:	dec00204 	addi	sp,sp,8
    e190:	f800283a 	ret

0000e194 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    e194:	defff904 	addi	sp,sp,-28
    e198:	dfc00615 	stw	ra,24(sp)
    e19c:	df000515 	stw	fp,20(sp)
    e1a0:	df000504 	addi	fp,sp,20
    e1a4:	e13ffe15 	stw	r4,-8(fp)
    e1a8:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    e1ac:	0007883a 	mov	r3,zero
    e1b0:	e0bffe17 	ldw	r2,-8(fp)
    e1b4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    e1b8:	e0bffe17 	ldw	r2,-8(fp)
    e1bc:	10800104 	addi	r2,r2,4
    e1c0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e1c4:	0005303a 	rdctl	r2,status
    e1c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e1cc:	e0fffc17 	ldw	r3,-16(fp)
    e1d0:	00bfff84 	movi	r2,-2
    e1d4:	1884703a 	and	r2,r3,r2
    e1d8:	1001703a 	wrctl	status,r2
  
  return context;
    e1dc:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    e1e0:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
    e1e4:	000f1800 	call	f180 <alt_tick>
    e1e8:	e0bffb17 	ldw	r2,-20(fp)
    e1ec:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e1f0:	e0bffd17 	ldw	r2,-12(fp)
    e1f4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    e1f8:	0001883a 	nop
    e1fc:	e037883a 	mov	sp,fp
    e200:	dfc00117 	ldw	ra,4(sp)
    e204:	df000017 	ldw	fp,0(sp)
    e208:	dec00204 	addi	sp,sp,8
    e20c:	f800283a 	ret

0000e210 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    e210:	defff904 	addi	sp,sp,-28
    e214:	dfc00615 	stw	ra,24(sp)
    e218:	df000515 	stw	fp,20(sp)
    e21c:	df000504 	addi	fp,sp,20
    e220:	e13ffc15 	stw	r4,-16(fp)
    e224:	e17ffd15 	stw	r5,-12(fp)
    e228:	e1bffe15 	stw	r6,-8(fp)
    e22c:	e1ffff15 	stw	r7,-4(fp)
    e230:	e0bfff17 	ldw	r2,-4(fp)
    e234:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    e238:	00800074 	movhi	r2,1
    e23c:	108cad04 	addi	r2,r2,12980
    e240:	10800017 	ldw	r2,0(r2)
    e244:	1000041e 	bne	r2,zero,e258 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    e248:	00800074 	movhi	r2,1
    e24c:	108cad04 	addi	r2,r2,12980
    e250:	e0fffb17 	ldw	r3,-20(fp)
    e254:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    e258:	e0bffc17 	ldw	r2,-16(fp)
    e25c:	10800104 	addi	r2,r2,4
    e260:	00c001c4 	movi	r3,7
    e264:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    e268:	01800074 	movhi	r6,1
    e26c:	31b86504 	addi	r6,r6,-7788
    e270:	e17ffc17 	ldw	r5,-16(fp)
    e274:	e13ffe17 	ldw	r4,-8(fp)
    e278:	000ecc00 	call	ecc0 <alt_irq_register>
#endif  
}
    e27c:	0001883a 	nop
    e280:	e037883a 	mov	sp,fp
    e284:	dfc00117 	ldw	ra,4(sp)
    e288:	df000017 	ldw	fp,0(sp)
    e28c:	dec00204 	addi	sp,sp,8
    e290:	f800283a 	ret

0000e294 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
    e294:	defffd04 	addi	sp,sp,-12
    e298:	df000215 	stw	fp,8(sp)
    e29c:	df000204 	addi	fp,sp,8
    e2a0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    e2a4:	e0bfff17 	ldw	r2,-4(fp)
    e2a8:	10800a17 	ldw	r2,40(r2)
    e2ac:	10800104 	addi	r2,r2,4
    e2b0:	10800037 	ldwio	r2,0(r2)
    e2b4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    e2b8:	e0bffe17 	ldw	r2,-8(fp)
    e2bc:	10800054 	ori	r2,r2,1
    e2c0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    e2c4:	e0bfff17 	ldw	r2,-4(fp)
    e2c8:	10800a17 	ldw	r2,40(r2)
    e2cc:	10800104 	addi	r2,r2,4
    e2d0:	1007883a 	mov	r3,r2
    e2d4:	e0bffe17 	ldw	r2,-8(fp)
    e2d8:	18800035 	stwio	r2,0(r3)
}
    e2dc:	0001883a 	nop
    e2e0:	e037883a 	mov	sp,fp
    e2e4:	df000017 	ldw	fp,0(sp)
    e2e8:	dec00104 	addi	sp,sp,4
    e2ec:	f800283a 	ret

0000e2f0 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
    e2f0:	defffd04 	addi	sp,sp,-12
    e2f4:	df000215 	stw	fp,8(sp)
    e2f8:	df000204 	addi	fp,sp,8
    e2fc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    e300:	e0bfff17 	ldw	r2,-4(fp)
    e304:	10800a17 	ldw	r2,40(r2)
    e308:	10800104 	addi	r2,r2,4
    e30c:	10800037 	ldwio	r2,0(r2)
    e310:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    e314:	e0fffe17 	ldw	r3,-8(fp)
    e318:	00bfff84 	movi	r2,-2
    e31c:	1884703a 	and	r2,r3,r2
    e320:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    e324:	e0bfff17 	ldw	r2,-4(fp)
    e328:	10800a17 	ldw	r2,40(r2)
    e32c:	10800104 	addi	r2,r2,4
    e330:	1007883a 	mov	r3,r2
    e334:	e0bffe17 	ldw	r2,-8(fp)
    e338:	18800035 	stwio	r2,0(r3)
}
    e33c:	0001883a 	nop
    e340:	e037883a 	mov	sp,fp
    e344:	df000017 	ldw	fp,0(sp)
    e348:	dec00104 	addi	sp,sp,4
    e34c:	f800283a 	ret

0000e350 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
    e350:	defffd04 	addi	sp,sp,-12
    e354:	df000215 	stw	fp,8(sp)
    e358:	df000204 	addi	fp,sp,8
    e35c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    e360:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    e364:	e0bfff17 	ldw	r2,-4(fp)
    e368:	10800a17 	ldw	r2,40(r2)
    e36c:	10800084 	addi	r2,r2,2
    e370:	1080002b 	ldhuio	r2,0(r2)
    e374:	10bfffcc 	andi	r2,r2,65535
    e378:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
    e37c:	e0bffe0b 	ldhu	r2,-8(fp)
}
    e380:	e037883a 	mov	sp,fp
    e384:	df000017 	ldw	fp,0(sp)
    e388:	dec00104 	addi	sp,sp,4
    e38c:	f800283a 	ret

0000e390 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
    e390:	defffd04 	addi	sp,sp,-12
    e394:	df000215 	stw	fp,8(sp)
    e398:	df000204 	addi	fp,sp,8
    e39c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    e3a0:	e0bfff17 	ldw	r2,-4(fp)
    e3a4:	10800a17 	ldw	r2,40(r2)
    e3a8:	10800104 	addi	r2,r2,4
    e3ac:	10800037 	ldwio	r2,0(r2)
    e3b0:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
    e3b4:	e0bffe17 	ldw	r2,-8(fp)
    e3b8:	1004d43a 	srli	r2,r2,16
}
    e3bc:	e037883a 	mov	sp,fp
    e3c0:	df000017 	ldw	fp,0(sp)
    e3c4:	dec00104 	addi	sp,sp,4
    e3c8:	f800283a 	ret

0000e3cc <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
    e3cc:	defffd04 	addi	sp,sp,-12
    e3d0:	df000215 	stw	fp,8(sp)
    e3d4:	df000204 	addi	fp,sp,8
    e3d8:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    e3dc:	e0bfff17 	ldw	r2,-4(fp)
    e3e0:	1080800c 	andi	r2,r2,512
    e3e4:	1004d27a 	srli	r2,r2,9
    e3e8:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
    e3ec:	e0bffe17 	ldw	r2,-8(fp)
    e3f0:	10000226 	beq	r2,zero,e3fc <alt_up_rs232_check_parity+0x30>
    e3f4:	00bfffc4 	movi	r2,-1
    e3f8:	00000106 	br	e400 <alt_up_rs232_check_parity+0x34>
    e3fc:	0005883a 	mov	r2,zero
}
    e400:	e037883a 	mov	sp,fp
    e404:	df000017 	ldw	fp,0(sp)
    e408:	dec00104 	addi	sp,sp,4
    e40c:	f800283a 	ret

0000e410 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
    e410:	defffd04 	addi	sp,sp,-12
    e414:	df000215 	stw	fp,8(sp)
    e418:	df000204 	addi	fp,sp,8
    e41c:	e13ffe15 	stw	r4,-8(fp)
    e420:	2805883a 	mov	r2,r5
    e424:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    e428:	e0bffe17 	ldw	r2,-8(fp)
    e42c:	10800a17 	ldw	r2,40(r2)
    e430:	1007883a 	mov	r3,r2
    e434:	e0bfff03 	ldbu	r2,-4(fp)
    e438:	18800035 	stwio	r2,0(r3)
	return 0;
    e43c:	0005883a 	mov	r2,zero
}
    e440:	e037883a 	mov	sp,fp
    e444:	df000017 	ldw	fp,0(sp)
    e448:	dec00104 	addi	sp,sp,4
    e44c:	f800283a 	ret

0000e450 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    e450:	defffa04 	addi	sp,sp,-24
    e454:	dfc00515 	stw	ra,20(sp)
    e458:	df000415 	stw	fp,16(sp)
    e45c:	df000404 	addi	fp,sp,16
    e460:	e13ffd15 	stw	r4,-12(fp)
    e464:	e17ffe15 	stw	r5,-8(fp)
    e468:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    e46c:	e0bffd17 	ldw	r2,-12(fp)
    e470:	10800a17 	ldw	r2,40(r2)
    e474:	10800037 	ldwio	r2,0(r2)
    e478:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    e47c:	e0bffc17 	ldw	r2,-16(fp)
    e480:	1007883a 	mov	r3,r2
    e484:	e0bffe17 	ldw	r2,-8(fp)
    e488:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    e48c:	e13ffc17 	ldw	r4,-16(fp)
    e490:	000e3cc0 	call	e3cc <alt_up_rs232_check_parity>
    e494:	1007883a 	mov	r3,r2
    e498:	e0bfff17 	ldw	r2,-4(fp)
    e49c:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    e4a0:	e0bffc17 	ldw	r2,-16(fp)
    e4a4:	10a0000c 	andi	r2,r2,32768
    e4a8:	1004d3fa 	srli	r2,r2,15
    e4ac:	10bfffc4 	addi	r2,r2,-1
}
    e4b0:	e037883a 	mov	sp,fp
    e4b4:	dfc00117 	ldw	ra,4(sp)
    e4b8:	df000017 	ldw	fp,0(sp)
    e4bc:	dec00204 	addi	sp,sp,8
    e4c0:	f800283a 	ret

0000e4c4 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    e4c4:	defff804 	addi	sp,sp,-32
    e4c8:	dfc00715 	stw	ra,28(sp)
    e4cc:	df000615 	stw	fp,24(sp)
    e4d0:	df000604 	addi	fp,sp,24
    e4d4:	e13ffd15 	stw	r4,-12(fp)
    e4d8:	e17ffe15 	stw	r5,-8(fp)
    e4dc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    e4e0:	e0bffd17 	ldw	r2,-12(fp)
    e4e4:	10800017 	ldw	r2,0(r2)
    e4e8:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    e4ec:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    e4f0:	00000c06 	br	e524 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
    e4f4:	e0bffe17 	ldw	r2,-8(fp)
    e4f8:	10c00044 	addi	r3,r2,1
    e4fc:	e0fffe15 	stw	r3,-8(fp)
    e500:	e0fffc04 	addi	r3,fp,-16
    e504:	180d883a 	mov	r6,r3
    e508:	100b883a 	mov	r5,r2
    e50c:	e13ffb17 	ldw	r4,-20(fp)
    e510:	000e4500 	call	e450 <alt_up_rs232_read_data>
    e514:	1000081e 	bne	r2,zero,e538 <alt_up_rs232_read_fd+0x74>
			count++;
    e518:	e0bffa17 	ldw	r2,-24(fp)
    e51c:	10800044 	addi	r2,r2,1
    e520:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    e524:	e0bfff17 	ldw	r2,-4(fp)
    e528:	10ffffc4 	addi	r3,r2,-1
    e52c:	e0ffff15 	stw	r3,-4(fp)
    e530:	103ff01e 	bne	r2,zero,e4f4 <alt_up_rs232_read_fd+0x30>
    e534:	00000106 	br	e53c <alt_up_rs232_read_fd+0x78>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
    e538:	0001883a 	nop
	}
	return count;
    e53c:	e0bffa17 	ldw	r2,-24(fp)
}
    e540:	e037883a 	mov	sp,fp
    e544:	dfc00117 	ldw	ra,4(sp)
    e548:	df000017 	ldw	fp,0(sp)
    e54c:	dec00204 	addi	sp,sp,8
    e550:	f800283a 	ret

0000e554 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    e554:	defff904 	addi	sp,sp,-28
    e558:	dfc00615 	stw	ra,24(sp)
    e55c:	df000515 	stw	fp,20(sp)
    e560:	df000504 	addi	fp,sp,20
    e564:	e13ffd15 	stw	r4,-12(fp)
    e568:	e17ffe15 	stw	r5,-8(fp)
    e56c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    e570:	e0bffd17 	ldw	r2,-12(fp)
    e574:	10800017 	ldw	r2,0(r2)
    e578:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    e57c:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    e580:	00000d06 	br	e5b8 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    e584:	e0bffe17 	ldw	r2,-8(fp)
    e588:	10800003 	ldbu	r2,0(r2)
    e58c:	10803fcc 	andi	r2,r2,255
    e590:	100b883a 	mov	r5,r2
    e594:	e13ffc17 	ldw	r4,-16(fp)
    e598:	000e4100 	call	e410 <alt_up_rs232_write_data>
    e59c:	10000b1e 	bne	r2,zero,e5cc <alt_up_rs232_write_fd+0x78>
		{
			count++;
    e5a0:	e0bffb17 	ldw	r2,-20(fp)
    e5a4:	10800044 	addi	r2,r2,1
    e5a8:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
    e5ac:	e0bffe17 	ldw	r2,-8(fp)
    e5b0:	10800044 	addi	r2,r2,1
    e5b4:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    e5b8:	e0bfff17 	ldw	r2,-4(fp)
    e5bc:	10ffffc4 	addi	r3,r2,-1
    e5c0:	e0ffff15 	stw	r3,-4(fp)
    e5c4:	103fef1e 	bne	r2,zero,e584 <alt_up_rs232_write_fd+0x30>
    e5c8:	00000106 	br	e5d0 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
			ptr++;
		}
		else
			break;
    e5cc:	0001883a 	nop
	}
	return count;
    e5d0:	e0bffb17 	ldw	r2,-20(fp)
}
    e5d4:	e037883a 	mov	sp,fp
    e5d8:	dfc00117 	ldw	ra,4(sp)
    e5dc:	df000017 	ldw	fp,0(sp)
    e5e0:	dec00204 	addi	sp,sp,8
    e5e4:	f800283a 	ret

0000e5e8 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    e5e8:	defffc04 	addi	sp,sp,-16
    e5ec:	dfc00315 	stw	ra,12(sp)
    e5f0:	df000215 	stw	fp,8(sp)
    e5f4:	df000204 	addi	fp,sp,8
    e5f8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    e5fc:	01400074 	movhi	r5,1
    e600:	2945d404 	addi	r5,r5,5968
    e604:	e13fff17 	ldw	r4,-4(fp)
    e608:	000eabc0 	call	eabc <alt_find_dev>
    e60c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    e610:	e0bffe17 	ldw	r2,-8(fp)
}
    e614:	e037883a 	mov	sp,fp
    e618:	dfc00117 	ldw	ra,4(sp)
    e61c:	df000017 	ldw	fp,0(sp)
    e620:	dec00204 	addi	sp,sp,8
    e624:	f800283a 	ret

0000e628 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    e628:	defff504 	addi	sp,sp,-44
    e62c:	df000a15 	stw	fp,40(sp)
    e630:	df000a04 	addi	fp,sp,40
    e634:	e13ffc15 	stw	r4,-16(fp)
    e638:	e17ffd15 	stw	r5,-12(fp)
    e63c:	e1bffe15 	stw	r6,-8(fp)
    e640:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    e644:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    e648:	00800074 	movhi	r2,1
    e64c:	108cad04 	addi	r2,r2,12980
    e650:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    e654:	10003f26 	beq	r2,zero,e754 <alt_alarm_start+0x12c>
  {
    if (alarm)
    e658:	e0bffc17 	ldw	r2,-16(fp)
    e65c:	10003b26 	beq	r2,zero,e74c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    e660:	e0bffc17 	ldw	r2,-16(fp)
    e664:	e0fffe17 	ldw	r3,-8(fp)
    e668:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    e66c:	e0bffc17 	ldw	r2,-16(fp)
    e670:	e0ffff17 	ldw	r3,-4(fp)
    e674:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e678:	0005303a 	rdctl	r2,status
    e67c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e680:	e0fff917 	ldw	r3,-28(fp)
    e684:	00bfff84 	movi	r2,-2
    e688:	1884703a 	and	r2,r3,r2
    e68c:	1001703a 	wrctl	status,r2
  
  return context;
    e690:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    e694:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    e698:	00800074 	movhi	r2,1
    e69c:	108cae04 	addi	r2,r2,12984
    e6a0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    e6a4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    e6a8:	e0fffd17 	ldw	r3,-12(fp)
    e6ac:	e0bff617 	ldw	r2,-40(fp)
    e6b0:	1885883a 	add	r2,r3,r2
    e6b4:	10c00044 	addi	r3,r2,1
    e6b8:	e0bffc17 	ldw	r2,-16(fp)
    e6bc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    e6c0:	e0bffc17 	ldw	r2,-16(fp)
    e6c4:	10c00217 	ldw	r3,8(r2)
    e6c8:	e0bff617 	ldw	r2,-40(fp)
    e6cc:	1880042e 	bgeu	r3,r2,e6e0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    e6d0:	e0bffc17 	ldw	r2,-16(fp)
    e6d4:	00c00044 	movi	r3,1
    e6d8:	10c00405 	stb	r3,16(r2)
    e6dc:	00000206 	br	e6e8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    e6e0:	e0bffc17 	ldw	r2,-16(fp)
    e6e4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    e6e8:	e0fffc17 	ldw	r3,-16(fp)
    e6ec:	00800074 	movhi	r2,1
    e6f0:	1085da04 	addi	r2,r2,5992
    e6f4:	e0bffa15 	stw	r2,-24(fp)
    e6f8:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    e6fc:	e0bffb17 	ldw	r2,-20(fp)
    e700:	e0fffa17 	ldw	r3,-24(fp)
    e704:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    e708:	e0bffa17 	ldw	r2,-24(fp)
    e70c:	10c00017 	ldw	r3,0(r2)
    e710:	e0bffb17 	ldw	r2,-20(fp)
    e714:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    e718:	e0bffa17 	ldw	r2,-24(fp)
    e71c:	10800017 	ldw	r2,0(r2)
    e720:	e0fffb17 	ldw	r3,-20(fp)
    e724:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    e728:	e0bffa17 	ldw	r2,-24(fp)
    e72c:	e0fffb17 	ldw	r3,-20(fp)
    e730:	10c00015 	stw	r3,0(r2)
    e734:	e0bff817 	ldw	r2,-32(fp)
    e738:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e73c:	e0bff717 	ldw	r2,-36(fp)
    e740:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    e744:	0005883a 	mov	r2,zero
    e748:	00000306 	br	e758 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    e74c:	00bffa84 	movi	r2,-22
    e750:	00000106 	br	e758 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    e754:	00bfde84 	movi	r2,-134
  }
}
    e758:	e037883a 	mov	sp,fp
    e75c:	df000017 	ldw	fp,0(sp)
    e760:	dec00104 	addi	sp,sp,4
    e764:	f800283a 	ret

0000e768 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    e768:	defffa04 	addi	sp,sp,-24
    e76c:	dfc00515 	stw	ra,20(sp)
    e770:	df000415 	stw	fp,16(sp)
    e774:	df000404 	addi	fp,sp,16
    e778:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    e77c:	008000c4 	movi	r2,3
    e780:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    e784:	e0fffd17 	ldw	r3,-12(fp)
    e788:	008003f4 	movhi	r2,15
    e78c:	10909004 	addi	r2,r2,16960
    e790:	1885383a 	mul	r2,r3,r2
    e794:	100b883a 	mov	r5,r2
    e798:	01017db4 	movhi	r4,1526
    e79c:	21384004 	addi	r4,r4,-7936
    e7a0:	000a5340 	call	a534 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    e7a4:	100b883a 	mov	r5,r2
    e7a8:	01200034 	movhi	r4,32768
    e7ac:	213fffc4 	addi	r4,r4,-1
    e7b0:	000a5340 	call	a534 <__udivsi3>
    e7b4:	100b883a 	mov	r5,r2
    e7b8:	e13fff17 	ldw	r4,-4(fp)
    e7bc:	000a5340 	call	a534 <__udivsi3>
    e7c0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    e7c4:	e0bffe17 	ldw	r2,-8(fp)
    e7c8:	10002a26 	beq	r2,zero,e874 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    e7cc:	e03ffc15 	stw	zero,-16(fp)
    e7d0:	00001706 	br	e830 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    e7d4:	00a00034 	movhi	r2,32768
    e7d8:	10bfffc4 	addi	r2,r2,-1
    e7dc:	10bfffc4 	addi	r2,r2,-1
    e7e0:	103ffe1e 	bne	r2,zero,e7dc <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    e7e4:	e0fffd17 	ldw	r3,-12(fp)
    e7e8:	008003f4 	movhi	r2,15
    e7ec:	10909004 	addi	r2,r2,16960
    e7f0:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    e7f4:	100b883a 	mov	r5,r2
    e7f8:	01017db4 	movhi	r4,1526
    e7fc:	21384004 	addi	r4,r4,-7936
    e800:	000a5340 	call	a534 <__udivsi3>
    e804:	100b883a 	mov	r5,r2
    e808:	01200034 	movhi	r4,32768
    e80c:	213fffc4 	addi	r4,r4,-1
    e810:	000a5340 	call	a534 <__udivsi3>
    e814:	1007883a 	mov	r3,r2
    e818:	e0bfff17 	ldw	r2,-4(fp)
    e81c:	10c5c83a 	sub	r2,r2,r3
    e820:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    e824:	e0bffc17 	ldw	r2,-16(fp)
    e828:	10800044 	addi	r2,r2,1
    e82c:	e0bffc15 	stw	r2,-16(fp)
    e830:	e0fffc17 	ldw	r3,-16(fp)
    e834:	e0bffe17 	ldw	r2,-8(fp)
    e838:	18bfe616 	blt	r3,r2,e7d4 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    e83c:	e0fffd17 	ldw	r3,-12(fp)
    e840:	008003f4 	movhi	r2,15
    e844:	10909004 	addi	r2,r2,16960
    e848:	1885383a 	mul	r2,r3,r2
    e84c:	100b883a 	mov	r5,r2
    e850:	01017db4 	movhi	r4,1526
    e854:	21384004 	addi	r4,r4,-7936
    e858:	000a5340 	call	a534 <__udivsi3>
    e85c:	1007883a 	mov	r3,r2
    e860:	e0bfff17 	ldw	r2,-4(fp)
    e864:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    e868:	10bfffc4 	addi	r2,r2,-1
    e86c:	103ffe1e 	bne	r2,zero,e868 <alt_busy_sleep+0x100>
    e870:	00000d06 	br	e8a8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    e874:	e0fffd17 	ldw	r3,-12(fp)
    e878:	008003f4 	movhi	r2,15
    e87c:	10909004 	addi	r2,r2,16960
    e880:	1885383a 	mul	r2,r3,r2
    e884:	100b883a 	mov	r5,r2
    e888:	01017db4 	movhi	r4,1526
    e88c:	21384004 	addi	r4,r4,-7936
    e890:	000a5340 	call	a534 <__udivsi3>
    e894:	1007883a 	mov	r3,r2
    e898:	e0bfff17 	ldw	r2,-4(fp)
    e89c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    e8a0:	10bfffc4 	addi	r2,r2,-1
    e8a4:	00bffe16 	blt	zero,r2,e8a0 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    e8a8:	0005883a 	mov	r2,zero
}
    e8ac:	e037883a 	mov	sp,fp
    e8b0:	dfc00117 	ldw	ra,4(sp)
    e8b4:	df000017 	ldw	fp,0(sp)
    e8b8:	dec00204 	addi	sp,sp,8
    e8bc:	f800283a 	ret

0000e8c0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    e8c0:	defffe04 	addi	sp,sp,-8
    e8c4:	df000115 	stw	fp,4(sp)
    e8c8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    e8cc:	e03fff15 	stw	zero,-4(fp)
    e8d0:	00000506 	br	e8e8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    e8d4:	e0bfff17 	ldw	r2,-4(fp)
    e8d8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    e8dc:	e0bfff17 	ldw	r2,-4(fp)
    e8e0:	10800804 	addi	r2,r2,32
    e8e4:	e0bfff15 	stw	r2,-4(fp)
    e8e8:	e0bfff17 	ldw	r2,-4(fp)
    e8ec:	10820030 	cmpltui	r2,r2,2048
    e8f0:	103ff81e 	bne	r2,zero,e8d4 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    e8f4:	0001883a 	nop
    e8f8:	e037883a 	mov	sp,fp
    e8fc:	df000017 	ldw	fp,0(sp)
    e900:	dec00104 	addi	sp,sp,4
    e904:	f800283a 	ret

0000e908 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e908:	defffe04 	addi	sp,sp,-8
    e90c:	dfc00115 	stw	ra,4(sp)
    e910:	df000015 	stw	fp,0(sp)
    e914:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e918:	00800074 	movhi	r2,1
    e91c:	1085d704 	addi	r2,r2,5980
    e920:	10800017 	ldw	r2,0(r2)
    e924:	10000526 	beq	r2,zero,e93c <alt_get_errno+0x34>
    e928:	00800074 	movhi	r2,1
    e92c:	1085d704 	addi	r2,r2,5980
    e930:	10800017 	ldw	r2,0(r2)
    e934:	103ee83a 	callr	r2
    e938:	00000206 	br	e944 <alt_get_errno+0x3c>
    e93c:	00800074 	movhi	r2,1
    e940:	108ca804 	addi	r2,r2,12960
}
    e944:	e037883a 	mov	sp,fp
    e948:	dfc00117 	ldw	ra,4(sp)
    e94c:	df000017 	ldw	fp,0(sp)
    e950:	dec00204 	addi	sp,sp,8
    e954:	f800283a 	ret

0000e958 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    e958:	defffa04 	addi	sp,sp,-24
    e95c:	dfc00515 	stw	ra,20(sp)
    e960:	df000415 	stw	fp,16(sp)
    e964:	df000404 	addi	fp,sp,16
    e968:	e13ffe15 	stw	r4,-8(fp)
    e96c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    e970:	e0bffe17 	ldw	r2,-8(fp)
    e974:	10000326 	beq	r2,zero,e984 <alt_dev_llist_insert+0x2c>
    e978:	e0bffe17 	ldw	r2,-8(fp)
    e97c:	10800217 	ldw	r2,8(r2)
    e980:	1000061e 	bne	r2,zero,e99c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    e984:	000e9080 	call	e908 <alt_get_errno>
    e988:	1007883a 	mov	r3,r2
    e98c:	00800584 	movi	r2,22
    e990:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    e994:	00bffa84 	movi	r2,-22
    e998:	00001306 	br	e9e8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    e99c:	e0bffe17 	ldw	r2,-8(fp)
    e9a0:	e0ffff17 	ldw	r3,-4(fp)
    e9a4:	e0fffc15 	stw	r3,-16(fp)
    e9a8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    e9ac:	e0bffd17 	ldw	r2,-12(fp)
    e9b0:	e0fffc17 	ldw	r3,-16(fp)
    e9b4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    e9b8:	e0bffc17 	ldw	r2,-16(fp)
    e9bc:	10c00017 	ldw	r3,0(r2)
    e9c0:	e0bffd17 	ldw	r2,-12(fp)
    e9c4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    e9c8:	e0bffc17 	ldw	r2,-16(fp)
    e9cc:	10800017 	ldw	r2,0(r2)
    e9d0:	e0fffd17 	ldw	r3,-12(fp)
    e9d4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    e9d8:	e0bffc17 	ldw	r2,-16(fp)
    e9dc:	e0fffd17 	ldw	r3,-12(fp)
    e9e0:	10c00015 	stw	r3,0(r2)

  return 0;  
    e9e4:	0005883a 	mov	r2,zero
}
    e9e8:	e037883a 	mov	sp,fp
    e9ec:	dfc00117 	ldw	ra,4(sp)
    e9f0:	df000017 	ldw	fp,0(sp)
    e9f4:	dec00204 	addi	sp,sp,8
    e9f8:	f800283a 	ret

0000e9fc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    e9fc:	defffd04 	addi	sp,sp,-12
    ea00:	dfc00215 	stw	ra,8(sp)
    ea04:	df000115 	stw	fp,4(sp)
    ea08:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    ea0c:	00800074 	movhi	r2,1
    ea10:	10be4c04 	addi	r2,r2,-1744
    ea14:	e0bfff15 	stw	r2,-4(fp)
    ea18:	00000606 	br	ea34 <_do_ctors+0x38>
        (*ctor) (); 
    ea1c:	e0bfff17 	ldw	r2,-4(fp)
    ea20:	10800017 	ldw	r2,0(r2)
    ea24:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    ea28:	e0bfff17 	ldw	r2,-4(fp)
    ea2c:	10bfff04 	addi	r2,r2,-4
    ea30:	e0bfff15 	stw	r2,-4(fp)
    ea34:	e0ffff17 	ldw	r3,-4(fp)
    ea38:	00800074 	movhi	r2,1
    ea3c:	10be4d04 	addi	r2,r2,-1740
    ea40:	18bff62e 	bgeu	r3,r2,ea1c <_do_ctors+0x20>
        (*ctor) (); 
}
    ea44:	0001883a 	nop
    ea48:	e037883a 	mov	sp,fp
    ea4c:	dfc00117 	ldw	ra,4(sp)
    ea50:	df000017 	ldw	fp,0(sp)
    ea54:	dec00204 	addi	sp,sp,8
    ea58:	f800283a 	ret

0000ea5c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    ea5c:	defffd04 	addi	sp,sp,-12
    ea60:	dfc00215 	stw	ra,8(sp)
    ea64:	df000115 	stw	fp,4(sp)
    ea68:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    ea6c:	00800074 	movhi	r2,1
    ea70:	10be4c04 	addi	r2,r2,-1744
    ea74:	e0bfff15 	stw	r2,-4(fp)
    ea78:	00000606 	br	ea94 <_do_dtors+0x38>
        (*dtor) (); 
    ea7c:	e0bfff17 	ldw	r2,-4(fp)
    ea80:	10800017 	ldw	r2,0(r2)
    ea84:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    ea88:	e0bfff17 	ldw	r2,-4(fp)
    ea8c:	10bfff04 	addi	r2,r2,-4
    ea90:	e0bfff15 	stw	r2,-4(fp)
    ea94:	e0ffff17 	ldw	r3,-4(fp)
    ea98:	00800074 	movhi	r2,1
    ea9c:	10be4d04 	addi	r2,r2,-1740
    eaa0:	18bff62e 	bgeu	r3,r2,ea7c <_do_dtors+0x20>
        (*dtor) (); 
}
    eaa4:	0001883a 	nop
    eaa8:	e037883a 	mov	sp,fp
    eaac:	dfc00117 	ldw	ra,4(sp)
    eab0:	df000017 	ldw	fp,0(sp)
    eab4:	dec00204 	addi	sp,sp,8
    eab8:	f800283a 	ret

0000eabc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    eabc:	defffa04 	addi	sp,sp,-24
    eac0:	dfc00515 	stw	ra,20(sp)
    eac4:	df000415 	stw	fp,16(sp)
    eac8:	df000404 	addi	fp,sp,16
    eacc:	e13ffe15 	stw	r4,-8(fp)
    ead0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    ead4:	e0bfff17 	ldw	r2,-4(fp)
    ead8:	10800017 	ldw	r2,0(r2)
    eadc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    eae0:	e13ffe17 	ldw	r4,-8(fp)
    eae4:	00004780 	call	478 <strlen>
    eae8:	10800044 	addi	r2,r2,1
    eaec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    eaf0:	00000d06 	br	eb28 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    eaf4:	e0bffc17 	ldw	r2,-16(fp)
    eaf8:	10800217 	ldw	r2,8(r2)
    eafc:	e0fffd17 	ldw	r3,-12(fp)
    eb00:	180d883a 	mov	r6,r3
    eb04:	e17ffe17 	ldw	r5,-8(fp)
    eb08:	1009883a 	mov	r4,r2
    eb0c:	000f5ec0 	call	f5ec <memcmp>
    eb10:	1000021e 	bne	r2,zero,eb1c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    eb14:	e0bffc17 	ldw	r2,-16(fp)
    eb18:	00000706 	br	eb38 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    eb1c:	e0bffc17 	ldw	r2,-16(fp)
    eb20:	10800017 	ldw	r2,0(r2)
    eb24:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    eb28:	e0fffc17 	ldw	r3,-16(fp)
    eb2c:	e0bfff17 	ldw	r2,-4(fp)
    eb30:	18bff01e 	bne	r3,r2,eaf4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    eb34:	0005883a 	mov	r2,zero
}
    eb38:	e037883a 	mov	sp,fp
    eb3c:	dfc00117 	ldw	ra,4(sp)
    eb40:	df000017 	ldw	fp,0(sp)
    eb44:	dec00204 	addi	sp,sp,8
    eb48:	f800283a 	ret

0000eb4c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    eb4c:	defffe04 	addi	sp,sp,-8
    eb50:	dfc00115 	stw	ra,4(sp)
    eb54:	df000015 	stw	fp,0(sp)
    eb58:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    eb5c:	01440004 	movi	r5,4096
    eb60:	0009883a 	mov	r4,zero
    eb64:	000f4740 	call	f474 <alt_icache_flush>
#endif
}
    eb68:	0001883a 	nop
    eb6c:	e037883a 	mov	sp,fp
    eb70:	dfc00117 	ldw	ra,4(sp)
    eb74:	df000017 	ldw	fp,0(sp)
    eb78:	dec00204 	addi	sp,sp,8
    eb7c:	f800283a 	ret

0000eb80 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    eb80:	defff904 	addi	sp,sp,-28
    eb84:	dfc00615 	stw	ra,24(sp)
    eb88:	df000515 	stw	fp,20(sp)
    eb8c:	df000504 	addi	fp,sp,20
    eb90:	e13ffc15 	stw	r4,-16(fp)
    eb94:	e17ffd15 	stw	r5,-12(fp)
    eb98:	e1bffe15 	stw	r6,-8(fp)
    eb9c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    eba0:	e1bfff17 	ldw	r6,-4(fp)
    eba4:	e17ffe17 	ldw	r5,-8(fp)
    eba8:	e13ffd17 	ldw	r4,-12(fp)
    ebac:	000ef8c0 	call	ef8c <open>
    ebb0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    ebb4:	e0bffb17 	ldw	r2,-20(fp)
    ebb8:	10001c16 	blt	r2,zero,ec2c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    ebbc:	00800074 	movhi	r2,1
    ebc0:	10814904 	addi	r2,r2,1316
    ebc4:	e0fffb17 	ldw	r3,-20(fp)
    ebc8:	18c00324 	muli	r3,r3,12
    ebcc:	10c5883a 	add	r2,r2,r3
    ebd0:	10c00017 	ldw	r3,0(r2)
    ebd4:	e0bffc17 	ldw	r2,-16(fp)
    ebd8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    ebdc:	00800074 	movhi	r2,1
    ebe0:	10814904 	addi	r2,r2,1316
    ebe4:	e0fffb17 	ldw	r3,-20(fp)
    ebe8:	18c00324 	muli	r3,r3,12
    ebec:	10c5883a 	add	r2,r2,r3
    ebf0:	10800104 	addi	r2,r2,4
    ebf4:	10c00017 	ldw	r3,0(r2)
    ebf8:	e0bffc17 	ldw	r2,-16(fp)
    ebfc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    ec00:	00800074 	movhi	r2,1
    ec04:	10814904 	addi	r2,r2,1316
    ec08:	e0fffb17 	ldw	r3,-20(fp)
    ec0c:	18c00324 	muli	r3,r3,12
    ec10:	10c5883a 	add	r2,r2,r3
    ec14:	10800204 	addi	r2,r2,8
    ec18:	10c00017 	ldw	r3,0(r2)
    ec1c:	e0bffc17 	ldw	r2,-16(fp)
    ec20:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    ec24:	e13ffb17 	ldw	r4,-20(fp)
    ec28:	000d3b80 	call	d3b8 <alt_release_fd>
  }
} 
    ec2c:	0001883a 	nop
    ec30:	e037883a 	mov	sp,fp
    ec34:	dfc00117 	ldw	ra,4(sp)
    ec38:	df000017 	ldw	fp,0(sp)
    ec3c:	dec00204 	addi	sp,sp,8
    ec40:	f800283a 	ret

0000ec44 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    ec44:	defffb04 	addi	sp,sp,-20
    ec48:	dfc00415 	stw	ra,16(sp)
    ec4c:	df000315 	stw	fp,12(sp)
    ec50:	df000304 	addi	fp,sp,12
    ec54:	e13ffd15 	stw	r4,-12(fp)
    ec58:	e17ffe15 	stw	r5,-8(fp)
    ec5c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    ec60:	01c07fc4 	movi	r7,511
    ec64:	01800044 	movi	r6,1
    ec68:	e17ffd17 	ldw	r5,-12(fp)
    ec6c:	01000074 	movhi	r4,1
    ec70:	21014c04 	addi	r4,r4,1328
    ec74:	000eb800 	call	eb80 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    ec78:	01c07fc4 	movi	r7,511
    ec7c:	000d883a 	mov	r6,zero
    ec80:	e17ffe17 	ldw	r5,-8(fp)
    ec84:	01000074 	movhi	r4,1
    ec88:	21014904 	addi	r4,r4,1316
    ec8c:	000eb800 	call	eb80 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    ec90:	01c07fc4 	movi	r7,511
    ec94:	01800044 	movi	r6,1
    ec98:	e17fff17 	ldw	r5,-4(fp)
    ec9c:	01000074 	movhi	r4,1
    eca0:	21014f04 	addi	r4,r4,1340
    eca4:	000eb800 	call	eb80 <alt_open_fd>
}  
    eca8:	0001883a 	nop
    ecac:	e037883a 	mov	sp,fp
    ecb0:	dfc00117 	ldw	ra,4(sp)
    ecb4:	df000017 	ldw	fp,0(sp)
    ecb8:	dec00204 	addi	sp,sp,8
    ecbc:	f800283a 	ret

0000ecc0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    ecc0:	defff004 	addi	sp,sp,-64
    ecc4:	df000f15 	stw	fp,60(sp)
    ecc8:	df000f04 	addi	fp,sp,60
    eccc:	e13ffd15 	stw	r4,-12(fp)
    ecd0:	e17ffe15 	stw	r5,-8(fp)
    ecd4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
    ecd8:	00bffa84 	movi	r2,-22
    ecdc:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    ece0:	e0bffd17 	ldw	r2,-12(fp)
    ece4:	10800828 	cmpgeui	r2,r2,32
    ece8:	10005c1e 	bne	r2,zero,ee5c <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ecec:	0005303a 	rdctl	r2,status
    ecf0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ecf4:	e0fff617 	ldw	r3,-40(fp)
    ecf8:	00bfff84 	movi	r2,-2
    ecfc:	1884703a 	and	r2,r3,r2
    ed00:	1001703a 	wrctl	status,r2
  
  return context;
    ed04:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    ed08:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
    ed0c:	00800074 	movhi	r2,1
    ed10:	108cba04 	addi	r2,r2,13032
    ed14:	e0fffd17 	ldw	r3,-12(fp)
    ed18:	180690fa 	slli	r3,r3,3
    ed1c:	10c5883a 	add	r2,r2,r3
    ed20:	e0ffff17 	ldw	r3,-4(fp)
    ed24:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
    ed28:	00800074 	movhi	r2,1
    ed2c:	108cba04 	addi	r2,r2,13032
    ed30:	e0fffd17 	ldw	r3,-12(fp)
    ed34:	180690fa 	slli	r3,r3,3
    ed38:	10c5883a 	add	r2,r2,r3
    ed3c:	10800104 	addi	r2,r2,4
    ed40:	e0fffe17 	ldw	r3,-8(fp)
    ed44:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    ed48:	e0bfff17 	ldw	r2,-4(fp)
    ed4c:	10001f26 	beq	r2,zero,edcc <alt_irq_register+0x10c>
    ed50:	e0bffd17 	ldw	r2,-12(fp)
    ed54:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ed58:	0005303a 	rdctl	r2,status
    ed5c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ed60:	e0fff717 	ldw	r3,-36(fp)
    ed64:	00bfff84 	movi	r2,-2
    ed68:	1884703a 	and	r2,r3,r2
    ed6c:	1001703a 	wrctl	status,r2
  
  return context;
    ed70:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    ed74:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    ed78:	00c00044 	movi	r3,1
    ed7c:	e0bff217 	ldw	r2,-56(fp)
    ed80:	1884983a 	sll	r2,r3,r2
    ed84:	1007883a 	mov	r3,r2
    ed88:	00800074 	movhi	r2,1
    ed8c:	108cac04 	addi	r2,r2,12976
    ed90:	10800017 	ldw	r2,0(r2)
    ed94:	1886b03a 	or	r3,r3,r2
    ed98:	00800074 	movhi	r2,1
    ed9c:	108cac04 	addi	r2,r2,12976
    eda0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    eda4:	00800074 	movhi	r2,1
    eda8:	108cac04 	addi	r2,r2,12976
    edac:	10800017 	ldw	r2,0(r2)
    edb0:	100170fa 	wrctl	ienable,r2
    edb4:	e0bff817 	ldw	r2,-32(fp)
    edb8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    edbc:	e0bff917 	ldw	r2,-28(fp)
    edc0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    edc4:	0005883a 	mov	r2,zero
    edc8:	00001f06 	br	ee48 <alt_irq_register+0x188>
    edcc:	e0bffd17 	ldw	r2,-12(fp)
    edd0:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    edd4:	0005303a 	rdctl	r2,status
    edd8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eddc:	e0fffa17 	ldw	r3,-24(fp)
    ede0:	00bfff84 	movi	r2,-2
    ede4:	1884703a 	and	r2,r3,r2
    ede8:	1001703a 	wrctl	status,r2
  
  return context;
    edec:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    edf0:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
    edf4:	00c00044 	movi	r3,1
    edf8:	e0bff417 	ldw	r2,-48(fp)
    edfc:	1884983a 	sll	r2,r3,r2
    ee00:	0084303a 	nor	r2,zero,r2
    ee04:	1007883a 	mov	r3,r2
    ee08:	00800074 	movhi	r2,1
    ee0c:	108cac04 	addi	r2,r2,12976
    ee10:	10800017 	ldw	r2,0(r2)
    ee14:	1886703a 	and	r3,r3,r2
    ee18:	00800074 	movhi	r2,1
    ee1c:	108cac04 	addi	r2,r2,12976
    ee20:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    ee24:	00800074 	movhi	r2,1
    ee28:	108cac04 	addi	r2,r2,12976
    ee2c:	10800017 	ldw	r2,0(r2)
    ee30:	100170fa 	wrctl	ienable,r2
    ee34:	e0bffb17 	ldw	r2,-20(fp)
    ee38:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ee3c:	e0bffc17 	ldw	r2,-16(fp)
    ee40:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    ee44:	0005883a 	mov	r2,zero
    ee48:	e0bff115 	stw	r2,-60(fp)
    ee4c:	e0bff317 	ldw	r2,-52(fp)
    ee50:	e0bff515 	stw	r2,-44(fp)
    ee54:	e0bff517 	ldw	r2,-44(fp)
    ee58:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    ee5c:	e0bff117 	ldw	r2,-60(fp)
}
    ee60:	e037883a 	mov	sp,fp
    ee64:	df000017 	ldw	fp,0(sp)
    ee68:	dec00104 	addi	sp,sp,4
    ee6c:	f800283a 	ret

0000ee70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ee70:	defffe04 	addi	sp,sp,-8
    ee74:	dfc00115 	stw	ra,4(sp)
    ee78:	df000015 	stw	fp,0(sp)
    ee7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ee80:	00800074 	movhi	r2,1
    ee84:	1085d704 	addi	r2,r2,5980
    ee88:	10800017 	ldw	r2,0(r2)
    ee8c:	10000526 	beq	r2,zero,eea4 <alt_get_errno+0x34>
    ee90:	00800074 	movhi	r2,1
    ee94:	1085d704 	addi	r2,r2,5980
    ee98:	10800017 	ldw	r2,0(r2)
    ee9c:	103ee83a 	callr	r2
    eea0:	00000206 	br	eeac <alt_get_errno+0x3c>
    eea4:	00800074 	movhi	r2,1
    eea8:	108ca804 	addi	r2,r2,12960
}
    eeac:	e037883a 	mov	sp,fp
    eeb0:	dfc00117 	ldw	ra,4(sp)
    eeb4:	df000017 	ldw	fp,0(sp)
    eeb8:	dec00204 	addi	sp,sp,8
    eebc:	f800283a 	ret

0000eec0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    eec0:	defffd04 	addi	sp,sp,-12
    eec4:	df000215 	stw	fp,8(sp)
    eec8:	df000204 	addi	fp,sp,8
    eecc:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    eed0:	e0bfff17 	ldw	r2,-4(fp)
    eed4:	10800217 	ldw	r2,8(r2)
    eed8:	10d00034 	orhi	r3,r2,16384
    eedc:	e0bfff17 	ldw	r2,-4(fp)
    eee0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    eee4:	e03ffe15 	stw	zero,-8(fp)
    eee8:	00001d06 	br	ef60 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    eeec:	00800074 	movhi	r2,1
    eef0:	10814904 	addi	r2,r2,1316
    eef4:	e0fffe17 	ldw	r3,-8(fp)
    eef8:	18c00324 	muli	r3,r3,12
    eefc:	10c5883a 	add	r2,r2,r3
    ef00:	10c00017 	ldw	r3,0(r2)
    ef04:	e0bfff17 	ldw	r2,-4(fp)
    ef08:	10800017 	ldw	r2,0(r2)
    ef0c:	1880111e 	bne	r3,r2,ef54 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    ef10:	00800074 	movhi	r2,1
    ef14:	10814904 	addi	r2,r2,1316
    ef18:	e0fffe17 	ldw	r3,-8(fp)
    ef1c:	18c00324 	muli	r3,r3,12
    ef20:	10c5883a 	add	r2,r2,r3
    ef24:	10800204 	addi	r2,r2,8
    ef28:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    ef2c:	1000090e 	bge	r2,zero,ef54 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    ef30:	e0bffe17 	ldw	r2,-8(fp)
    ef34:	10c00324 	muli	r3,r2,12
    ef38:	00800074 	movhi	r2,1
    ef3c:	10814904 	addi	r2,r2,1316
    ef40:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    ef44:	e0bfff17 	ldw	r2,-4(fp)
    ef48:	18800226 	beq	r3,r2,ef54 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    ef4c:	00bffcc4 	movi	r2,-13
    ef50:	00000a06 	br	ef7c <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    ef54:	e0bffe17 	ldw	r2,-8(fp)
    ef58:	10800044 	addi	r2,r2,1
    ef5c:	e0bffe15 	stw	r2,-8(fp)
    ef60:	00800074 	movhi	r2,1
    ef64:	1085d604 	addi	r2,r2,5976
    ef68:	10800017 	ldw	r2,0(r2)
    ef6c:	1007883a 	mov	r3,r2
    ef70:	e0bffe17 	ldw	r2,-8(fp)
    ef74:	18bfdd2e 	bgeu	r3,r2,eeec <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    ef78:	0005883a 	mov	r2,zero
}
    ef7c:	e037883a 	mov	sp,fp
    ef80:	df000017 	ldw	fp,0(sp)
    ef84:	dec00104 	addi	sp,sp,4
    ef88:	f800283a 	ret

0000ef8c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    ef8c:	defff604 	addi	sp,sp,-40
    ef90:	dfc00915 	stw	ra,36(sp)
    ef94:	df000815 	stw	fp,32(sp)
    ef98:	df000804 	addi	fp,sp,32
    ef9c:	e13ffd15 	stw	r4,-12(fp)
    efa0:	e17ffe15 	stw	r5,-8(fp)
    efa4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    efa8:	00bfffc4 	movi	r2,-1
    efac:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    efb0:	00bffb44 	movi	r2,-19
    efb4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    efb8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    efbc:	01400074 	movhi	r5,1
    efc0:	2945d404 	addi	r5,r5,5968
    efc4:	e13ffd17 	ldw	r4,-12(fp)
    efc8:	000eabc0 	call	eabc <alt_find_dev>
    efcc:	e0bff815 	stw	r2,-32(fp)
    efd0:	e0bff817 	ldw	r2,-32(fp)
    efd4:	1000051e 	bne	r2,zero,efec <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    efd8:	e13ffd17 	ldw	r4,-12(fp)
    efdc:	000f2ac0 	call	f2ac <alt_find_file>
    efe0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    efe4:	00800044 	movi	r2,1
    efe8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    efec:	e0bff817 	ldw	r2,-32(fp)
    eff0:	10002926 	beq	r2,zero,f098 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    eff4:	e13ff817 	ldw	r4,-32(fp)
    eff8:	000f3c00 	call	f3c0 <alt_get_fd>
    effc:	e0bff915 	stw	r2,-28(fp)
    f000:	e0bff917 	ldw	r2,-28(fp)
    f004:	1000030e 	bge	r2,zero,f014 <open+0x88>
    {
      status = index;
    f008:	e0bff917 	ldw	r2,-28(fp)
    f00c:	e0bffa15 	stw	r2,-24(fp)
    f010:	00002306 	br	f0a0 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
    f014:	e0bff917 	ldw	r2,-28(fp)
    f018:	10c00324 	muli	r3,r2,12
    f01c:	00800074 	movhi	r2,1
    f020:	10814904 	addi	r2,r2,1316
    f024:	1885883a 	add	r2,r3,r2
    f028:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    f02c:	e0fffe17 	ldw	r3,-8(fp)
    f030:	00900034 	movhi	r2,16384
    f034:	10bfffc4 	addi	r2,r2,-1
    f038:	1886703a 	and	r3,r3,r2
    f03c:	e0bffc17 	ldw	r2,-16(fp)
    f040:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    f044:	e0bffb17 	ldw	r2,-20(fp)
    f048:	1000051e 	bne	r2,zero,f060 <open+0xd4>
    f04c:	e13ffc17 	ldw	r4,-16(fp)
    f050:	000eec00 	call	eec0 <alt_file_locked>
    f054:	e0bffa15 	stw	r2,-24(fp)
    f058:	e0bffa17 	ldw	r2,-24(fp)
    f05c:	10001016 	blt	r2,zero,f0a0 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    f060:	e0bff817 	ldw	r2,-32(fp)
    f064:	10800317 	ldw	r2,12(r2)
    f068:	10000826 	beq	r2,zero,f08c <open+0x100>
    f06c:	e0bff817 	ldw	r2,-32(fp)
    f070:	10800317 	ldw	r2,12(r2)
    f074:	e1ffff17 	ldw	r7,-4(fp)
    f078:	e1bffe17 	ldw	r6,-8(fp)
    f07c:	e17ffd17 	ldw	r5,-12(fp)
    f080:	e13ffc17 	ldw	r4,-16(fp)
    f084:	103ee83a 	callr	r2
    f088:	00000106 	br	f090 <open+0x104>
    f08c:	0005883a 	mov	r2,zero
    f090:	e0bffa15 	stw	r2,-24(fp)
    f094:	00000206 	br	f0a0 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
    f098:	00bffb44 	movi	r2,-19
    f09c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    f0a0:	e0bffa17 	ldw	r2,-24(fp)
    f0a4:	1000090e 	bge	r2,zero,f0cc <open+0x140>
  {
    alt_release_fd (index);  
    f0a8:	e13ff917 	ldw	r4,-28(fp)
    f0ac:	000d3b80 	call	d3b8 <alt_release_fd>
    ALT_ERRNO = -status;
    f0b0:	000ee700 	call	ee70 <alt_get_errno>
    f0b4:	1007883a 	mov	r3,r2
    f0b8:	e0bffa17 	ldw	r2,-24(fp)
    f0bc:	0085c83a 	sub	r2,zero,r2
    f0c0:	18800015 	stw	r2,0(r3)
    return -1;
    f0c4:	00bfffc4 	movi	r2,-1
    f0c8:	00000106 	br	f0d0 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    f0cc:	e0bff917 	ldw	r2,-28(fp)
}
    f0d0:	e037883a 	mov	sp,fp
    f0d4:	dfc00117 	ldw	ra,4(sp)
    f0d8:	df000017 	ldw	fp,0(sp)
    f0dc:	dec00204 	addi	sp,sp,8
    f0e0:	f800283a 	ret

0000f0e4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    f0e4:	defffa04 	addi	sp,sp,-24
    f0e8:	df000515 	stw	fp,20(sp)
    f0ec:	df000504 	addi	fp,sp,20
    f0f0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f0f4:	0005303a 	rdctl	r2,status
    f0f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f0fc:	e0fffc17 	ldw	r3,-16(fp)
    f100:	00bfff84 	movi	r2,-2
    f104:	1884703a 	and	r2,r3,r2
    f108:	1001703a 	wrctl	status,r2
  
  return context;
    f10c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    f110:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    f114:	e0bfff17 	ldw	r2,-4(fp)
    f118:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    f11c:	e0bffd17 	ldw	r2,-12(fp)
    f120:	10800017 	ldw	r2,0(r2)
    f124:	e0fffd17 	ldw	r3,-12(fp)
    f128:	18c00117 	ldw	r3,4(r3)
    f12c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    f130:	e0bffd17 	ldw	r2,-12(fp)
    f134:	10800117 	ldw	r2,4(r2)
    f138:	e0fffd17 	ldw	r3,-12(fp)
    f13c:	18c00017 	ldw	r3,0(r3)
    f140:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    f144:	e0bffd17 	ldw	r2,-12(fp)
    f148:	e0fffd17 	ldw	r3,-12(fp)
    f14c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    f150:	e0bffd17 	ldw	r2,-12(fp)
    f154:	e0fffd17 	ldw	r3,-12(fp)
    f158:	10c00015 	stw	r3,0(r2)
    f15c:	e0bffb17 	ldw	r2,-20(fp)
    f160:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f164:	e0bffe17 	ldw	r2,-8(fp)
    f168:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    f16c:	0001883a 	nop
    f170:	e037883a 	mov	sp,fp
    f174:	df000017 	ldw	fp,0(sp)
    f178:	dec00104 	addi	sp,sp,4
    f17c:	f800283a 	ret

0000f180 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    f180:	defffb04 	addi	sp,sp,-20
    f184:	dfc00415 	stw	ra,16(sp)
    f188:	df000315 	stw	fp,12(sp)
    f18c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    f190:	d0a00e17 	ldw	r2,-32712(gp)
    f194:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    f198:	d0a6e217 	ldw	r2,-25720(gp)
    f19c:	10800044 	addi	r2,r2,1
    f1a0:	d0a6e215 	stw	r2,-25720(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f1a4:	00002e06 	br	f260 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    f1a8:	e0bffd17 	ldw	r2,-12(fp)
    f1ac:	10800017 	ldw	r2,0(r2)
    f1b0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    f1b4:	e0bffd17 	ldw	r2,-12(fp)
    f1b8:	10800403 	ldbu	r2,16(r2)
    f1bc:	10803fcc 	andi	r2,r2,255
    f1c0:	10000426 	beq	r2,zero,f1d4 <alt_tick+0x54>
    f1c4:	d0a6e217 	ldw	r2,-25720(gp)
    f1c8:	1000021e 	bne	r2,zero,f1d4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    f1cc:	e0bffd17 	ldw	r2,-12(fp)
    f1d0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    f1d4:	e0bffd17 	ldw	r2,-12(fp)
    f1d8:	10800217 	ldw	r2,8(r2)
    f1dc:	d0e6e217 	ldw	r3,-25720(gp)
    f1e0:	18801d36 	bltu	r3,r2,f258 <alt_tick+0xd8>
    f1e4:	e0bffd17 	ldw	r2,-12(fp)
    f1e8:	10800403 	ldbu	r2,16(r2)
    f1ec:	10803fcc 	andi	r2,r2,255
    f1f0:	1000191e 	bne	r2,zero,f258 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    f1f4:	e0bffd17 	ldw	r2,-12(fp)
    f1f8:	10800317 	ldw	r2,12(r2)
    f1fc:	e0fffd17 	ldw	r3,-12(fp)
    f200:	18c00517 	ldw	r3,20(r3)
    f204:	1809883a 	mov	r4,r3
    f208:	103ee83a 	callr	r2
    f20c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    f210:	e0bfff17 	ldw	r2,-4(fp)
    f214:	1000031e 	bne	r2,zero,f224 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    f218:	e13ffd17 	ldw	r4,-12(fp)
    f21c:	000f0e40 	call	f0e4 <alt_alarm_stop>
    f220:	00000d06 	br	f258 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    f224:	e0bffd17 	ldw	r2,-12(fp)
    f228:	10c00217 	ldw	r3,8(r2)
    f22c:	e0bfff17 	ldw	r2,-4(fp)
    f230:	1887883a 	add	r3,r3,r2
    f234:	e0bffd17 	ldw	r2,-12(fp)
    f238:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    f23c:	e0bffd17 	ldw	r2,-12(fp)
    f240:	10c00217 	ldw	r3,8(r2)
    f244:	d0a6e217 	ldw	r2,-25720(gp)
    f248:	1880032e 	bgeu	r3,r2,f258 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    f24c:	e0bffd17 	ldw	r2,-12(fp)
    f250:	00c00044 	movi	r3,1
    f254:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    f258:	e0bffe17 	ldw	r2,-8(fp)
    f25c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f260:	e0fffd17 	ldw	r3,-12(fp)
    f264:	d0a00e04 	addi	r2,gp,-32712
    f268:	18bfcf1e 	bne	r3,r2,f1a8 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    f26c:	0001883a 	nop
}
    f270:	0001883a 	nop
    f274:	e037883a 	mov	sp,fp
    f278:	dfc00117 	ldw	ra,4(sp)
    f27c:	df000017 	ldw	fp,0(sp)
    f280:	dec00204 	addi	sp,sp,8
    f284:	f800283a 	ret

0000f288 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    f288:	deffff04 	addi	sp,sp,-4
    f28c:	df000015 	stw	fp,0(sp)
    f290:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    f294:	000170fa 	wrctl	ienable,zero
}
    f298:	0001883a 	nop
    f29c:	e037883a 	mov	sp,fp
    f2a0:	df000017 	ldw	fp,0(sp)
    f2a4:	dec00104 	addi	sp,sp,4
    f2a8:	f800283a 	ret

0000f2ac <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    f2ac:	defffb04 	addi	sp,sp,-20
    f2b0:	dfc00415 	stw	ra,16(sp)
    f2b4:	df000315 	stw	fp,12(sp)
    f2b8:	df000304 	addi	fp,sp,12
    f2bc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    f2c0:	00800074 	movhi	r2,1
    f2c4:	1085d204 	addi	r2,r2,5960
    f2c8:	10800017 	ldw	r2,0(r2)
    f2cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    f2d0:	00003106 	br	f398 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    f2d4:	e0bffd17 	ldw	r2,-12(fp)
    f2d8:	10800217 	ldw	r2,8(r2)
    f2dc:	1009883a 	mov	r4,r2
    f2e0:	00004780 	call	478 <strlen>
    f2e4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    f2e8:	e0bffd17 	ldw	r2,-12(fp)
    f2ec:	10c00217 	ldw	r3,8(r2)
    f2f0:	e0bffe17 	ldw	r2,-8(fp)
    f2f4:	10bfffc4 	addi	r2,r2,-1
    f2f8:	1885883a 	add	r2,r3,r2
    f2fc:	10800003 	ldbu	r2,0(r2)
    f300:	10803fcc 	andi	r2,r2,255
    f304:	1080201c 	xori	r2,r2,128
    f308:	10bfe004 	addi	r2,r2,-128
    f30c:	10800bd8 	cmpnei	r2,r2,47
    f310:	1000031e 	bne	r2,zero,f320 <alt_find_file+0x74>
    {
      len -= 1;
    f314:	e0bffe17 	ldw	r2,-8(fp)
    f318:	10bfffc4 	addi	r2,r2,-1
    f31c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    f320:	e0bffe17 	ldw	r2,-8(fp)
    f324:	e0ffff17 	ldw	r3,-4(fp)
    f328:	1885883a 	add	r2,r3,r2
    f32c:	10800003 	ldbu	r2,0(r2)
    f330:	10803fcc 	andi	r2,r2,255
    f334:	1080201c 	xori	r2,r2,128
    f338:	10bfe004 	addi	r2,r2,-128
    f33c:	10800be0 	cmpeqi	r2,r2,47
    f340:	1000081e 	bne	r2,zero,f364 <alt_find_file+0xb8>
    f344:	e0bffe17 	ldw	r2,-8(fp)
    f348:	e0ffff17 	ldw	r3,-4(fp)
    f34c:	1885883a 	add	r2,r3,r2
    f350:	10800003 	ldbu	r2,0(r2)
    f354:	10803fcc 	andi	r2,r2,255
    f358:	1080201c 	xori	r2,r2,128
    f35c:	10bfe004 	addi	r2,r2,-128
    f360:	10000a1e 	bne	r2,zero,f38c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    f364:	e0bffd17 	ldw	r2,-12(fp)
    f368:	10800217 	ldw	r2,8(r2)
    f36c:	e0fffe17 	ldw	r3,-8(fp)
    f370:	180d883a 	mov	r6,r3
    f374:	e17fff17 	ldw	r5,-4(fp)
    f378:	1009883a 	mov	r4,r2
    f37c:	000f5ec0 	call	f5ec <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    f380:	1000021e 	bne	r2,zero,f38c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    f384:	e0bffd17 	ldw	r2,-12(fp)
    f388:	00000806 	br	f3ac <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    f38c:	e0bffd17 	ldw	r2,-12(fp)
    f390:	10800017 	ldw	r2,0(r2)
    f394:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    f398:	e0fffd17 	ldw	r3,-12(fp)
    f39c:	00800074 	movhi	r2,1
    f3a0:	1085d204 	addi	r2,r2,5960
    f3a4:	18bfcb1e 	bne	r3,r2,f2d4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    f3a8:	0005883a 	mov	r2,zero
}
    f3ac:	e037883a 	mov	sp,fp
    f3b0:	dfc00117 	ldw	ra,4(sp)
    f3b4:	df000017 	ldw	fp,0(sp)
    f3b8:	dec00204 	addi	sp,sp,8
    f3bc:	f800283a 	ret

0000f3c0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    f3c0:	defffc04 	addi	sp,sp,-16
    f3c4:	df000315 	stw	fp,12(sp)
    f3c8:	df000304 	addi	fp,sp,12
    f3cc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    f3d0:	00bffa04 	movi	r2,-24
    f3d4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    f3d8:	e03ffd15 	stw	zero,-12(fp)
    f3dc:	00001d06 	br	f454 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    f3e0:	00800074 	movhi	r2,1
    f3e4:	10814904 	addi	r2,r2,1316
    f3e8:	e0fffd17 	ldw	r3,-12(fp)
    f3ec:	18c00324 	muli	r3,r3,12
    f3f0:	10c5883a 	add	r2,r2,r3
    f3f4:	10800017 	ldw	r2,0(r2)
    f3f8:	1000131e 	bne	r2,zero,f448 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    f3fc:	00800074 	movhi	r2,1
    f400:	10814904 	addi	r2,r2,1316
    f404:	e0fffd17 	ldw	r3,-12(fp)
    f408:	18c00324 	muli	r3,r3,12
    f40c:	10c5883a 	add	r2,r2,r3
    f410:	e0ffff17 	ldw	r3,-4(fp)
    f414:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    f418:	00800074 	movhi	r2,1
    f41c:	1085d604 	addi	r2,r2,5976
    f420:	10c00017 	ldw	r3,0(r2)
    f424:	e0bffd17 	ldw	r2,-12(fp)
    f428:	1880040e 	bge	r3,r2,f43c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    f42c:	00800074 	movhi	r2,1
    f430:	1085d604 	addi	r2,r2,5976
    f434:	e0fffd17 	ldw	r3,-12(fp)
    f438:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    f43c:	e0bffd17 	ldw	r2,-12(fp)
    f440:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    f444:	00000606 	br	f460 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    f448:	e0bffd17 	ldw	r2,-12(fp)
    f44c:	10800044 	addi	r2,r2,1
    f450:	e0bffd15 	stw	r2,-12(fp)
    f454:	e0bffd17 	ldw	r2,-12(fp)
    f458:	10800810 	cmplti	r2,r2,32
    f45c:	103fe01e 	bne	r2,zero,f3e0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    f460:	e0bffe17 	ldw	r2,-8(fp)
}
    f464:	e037883a 	mov	sp,fp
    f468:	df000017 	ldw	fp,0(sp)
    f46c:	dec00104 	addi	sp,sp,4
    f470:	f800283a 	ret

0000f474 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    f474:	defffb04 	addi	sp,sp,-20
    f478:	df000415 	stw	fp,16(sp)
    f47c:	df000404 	addi	fp,sp,16
    f480:	e13ffe15 	stw	r4,-8(fp)
    f484:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    f488:	e0bfff17 	ldw	r2,-4(fp)
    f48c:	10840070 	cmpltui	r2,r2,4097
    f490:	1000021e 	bne	r2,zero,f49c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    f494:	00840004 	movi	r2,4096
    f498:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    f49c:	e0fffe17 	ldw	r3,-8(fp)
    f4a0:	e0bfff17 	ldw	r2,-4(fp)
    f4a4:	1885883a 	add	r2,r3,r2
    f4a8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    f4ac:	e0bffe17 	ldw	r2,-8(fp)
    f4b0:	e0bffc15 	stw	r2,-16(fp)
    f4b4:	00000506 	br	f4cc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    f4b8:	e0bffc17 	ldw	r2,-16(fp)
    f4bc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    f4c0:	e0bffc17 	ldw	r2,-16(fp)
    f4c4:	10800804 	addi	r2,r2,32
    f4c8:	e0bffc15 	stw	r2,-16(fp)
    f4cc:	e0fffc17 	ldw	r3,-16(fp)
    f4d0:	e0bffd17 	ldw	r2,-12(fp)
    f4d4:	18bff836 	bltu	r3,r2,f4b8 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    f4d8:	e0bffe17 	ldw	r2,-8(fp)
    f4dc:	108007cc 	andi	r2,r2,31
    f4e0:	10000226 	beq	r2,zero,f4ec <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    f4e4:	e0bffc17 	ldw	r2,-16(fp)
    f4e8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    f4ec:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    f4f0:	0001883a 	nop
    f4f4:	e037883a 	mov	sp,fp
    f4f8:	df000017 	ldw	fp,0(sp)
    f4fc:	dec00104 	addi	sp,sp,4
    f500:	f800283a 	ret

0000f504 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    f504:	defffe04 	addi	sp,sp,-8
    f508:	df000115 	stw	fp,4(sp)
    f50c:	df000104 	addi	fp,sp,4
    f510:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    f514:	e0bfff17 	ldw	r2,-4(fp)
    f518:	10bffe84 	addi	r2,r2,-6
    f51c:	10c00428 	cmpgeui	r3,r2,16
    f520:	18001a1e 	bne	r3,zero,f58c <alt_exception_cause_generated_bad_addr+0x88>
    f524:	100690ba 	slli	r3,r2,2
    f528:	00800074 	movhi	r2,1
    f52c:	10bd4f04 	addi	r2,r2,-2756
    f530:	1885883a 	add	r2,r3,r2
    f534:	10800017 	ldw	r2,0(r2)
    f538:	1000683a 	jmp	r2
    f53c:	0000f57c 	xorhi	zero,zero,981
    f540:	0000f57c 	xorhi	zero,zero,981
    f544:	0000f58c 	andi	zero,zero,982
    f548:	0000f58c 	andi	zero,zero,982
    f54c:	0000f58c 	andi	zero,zero,982
    f550:	0000f57c 	xorhi	zero,zero,981
    f554:	0000f584 	movi	zero,982
    f558:	0000f58c 	andi	zero,zero,982
    f55c:	0000f57c 	xorhi	zero,zero,981
    f560:	0000f57c 	xorhi	zero,zero,981
    f564:	0000f58c 	andi	zero,zero,982
    f568:	0000f57c 	xorhi	zero,zero,981
    f56c:	0000f584 	movi	zero,982
    f570:	0000f58c 	andi	zero,zero,982
    f574:	0000f58c 	andi	zero,zero,982
    f578:	0000f57c 	xorhi	zero,zero,981
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    f57c:	00800044 	movi	r2,1
    f580:	00000306 	br	f590 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    f584:	0005883a 	mov	r2,zero
    f588:	00000106 	br	f590 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    f58c:	0005883a 	mov	r2,zero
  }
}
    f590:	e037883a 	mov	sp,fp
    f594:	df000017 	ldw	fp,0(sp)
    f598:	dec00104 	addi	sp,sp,4
    f59c:	f800283a 	ret

0000f5a0 <atexit>:
    f5a0:	200b883a 	mov	r5,r4
    f5a4:	000f883a 	mov	r7,zero
    f5a8:	000d883a 	mov	r6,zero
    f5ac:	0009883a 	mov	r4,zero
    f5b0:	000f6681 	jmpi	f668 <__register_exitproc>

0000f5b4 <exit>:
    f5b4:	defffe04 	addi	sp,sp,-8
    f5b8:	000b883a 	mov	r5,zero
    f5bc:	dc000015 	stw	r16,0(sp)
    f5c0:	dfc00115 	stw	ra,4(sp)
    f5c4:	2021883a 	mov	r16,r4
    f5c8:	000f7800 	call	f780 <__call_exitprocs>
    f5cc:	00800074 	movhi	r2,1
    f5d0:	1085cc04 	addi	r2,r2,5936
    f5d4:	11000017 	ldw	r4,0(r2)
    f5d8:	20800f17 	ldw	r2,60(r4)
    f5dc:	10000126 	beq	r2,zero,f5e4 <exit+0x30>
    f5e0:	103ee83a 	callr	r2
    f5e4:	8009883a 	mov	r4,r16
    f5e8:	000f9000 	call	f900 <_exit>

0000f5ec <memcmp>:
    f5ec:	01c000c4 	movi	r7,3
    f5f0:	3980192e 	bgeu	r7,r6,f658 <memcmp+0x6c>
    f5f4:	2144b03a 	or	r2,r4,r5
    f5f8:	11c4703a 	and	r2,r2,r7
    f5fc:	10000f26 	beq	r2,zero,f63c <memcmp+0x50>
    f600:	20800003 	ldbu	r2,0(r4)
    f604:	28c00003 	ldbu	r3,0(r5)
    f608:	10c0151e 	bne	r2,r3,f660 <memcmp+0x74>
    f60c:	31bfff84 	addi	r6,r6,-2
    f610:	01ffffc4 	movi	r7,-1
    f614:	00000406 	br	f628 <memcmp+0x3c>
    f618:	20800003 	ldbu	r2,0(r4)
    f61c:	28c00003 	ldbu	r3,0(r5)
    f620:	31bfffc4 	addi	r6,r6,-1
    f624:	10c00e1e 	bne	r2,r3,f660 <memcmp+0x74>
    f628:	21000044 	addi	r4,r4,1
    f62c:	29400044 	addi	r5,r5,1
    f630:	31fff91e 	bne	r6,r7,f618 <memcmp+0x2c>
    f634:	0005883a 	mov	r2,zero
    f638:	f800283a 	ret
    f63c:	20c00017 	ldw	r3,0(r4)
    f640:	28800017 	ldw	r2,0(r5)
    f644:	18bfee1e 	bne	r3,r2,f600 <memcmp+0x14>
    f648:	31bfff04 	addi	r6,r6,-4
    f64c:	21000104 	addi	r4,r4,4
    f650:	29400104 	addi	r5,r5,4
    f654:	39bff936 	bltu	r7,r6,f63c <memcmp+0x50>
    f658:	303fe91e 	bne	r6,zero,f600 <memcmp+0x14>
    f65c:	003ff506 	br	f634 <memcmp+0x48>
    f660:	10c5c83a 	sub	r2,r2,r3
    f664:	f800283a 	ret

0000f668 <__register_exitproc>:
    f668:	defffa04 	addi	sp,sp,-24
    f66c:	dc000315 	stw	r16,12(sp)
    f670:	04000074 	movhi	r16,1
    f674:	8405cc04 	addi	r16,r16,5936
    f678:	80c00017 	ldw	r3,0(r16)
    f67c:	dc400415 	stw	r17,16(sp)
    f680:	dfc00515 	stw	ra,20(sp)
    f684:	18805217 	ldw	r2,328(r3)
    f688:	2023883a 	mov	r17,r4
    f68c:	10003726 	beq	r2,zero,f76c <__register_exitproc+0x104>
    f690:	10c00117 	ldw	r3,4(r2)
    f694:	010007c4 	movi	r4,31
    f698:	20c00e16 	blt	r4,r3,f6d4 <__register_exitproc+0x6c>
    f69c:	1a000044 	addi	r8,r3,1
    f6a0:	8800221e 	bne	r17,zero,f72c <__register_exitproc+0xc4>
    f6a4:	18c00084 	addi	r3,r3,2
    f6a8:	18c7883a 	add	r3,r3,r3
    f6ac:	18c7883a 	add	r3,r3,r3
    f6b0:	12000115 	stw	r8,4(r2)
    f6b4:	10c7883a 	add	r3,r2,r3
    f6b8:	19400015 	stw	r5,0(r3)
    f6bc:	0005883a 	mov	r2,zero
    f6c0:	dfc00517 	ldw	ra,20(sp)
    f6c4:	dc400417 	ldw	r17,16(sp)
    f6c8:	dc000317 	ldw	r16,12(sp)
    f6cc:	dec00604 	addi	sp,sp,24
    f6d0:	f800283a 	ret
    f6d4:	00800034 	movhi	r2,0
    f6d8:	10800004 	addi	r2,r2,0
    f6dc:	10002626 	beq	r2,zero,f778 <__register_exitproc+0x110>
    f6e0:	01006404 	movi	r4,400
    f6e4:	d9400015 	stw	r5,0(sp)
    f6e8:	d9800115 	stw	r6,4(sp)
    f6ec:	d9c00215 	stw	r7,8(sp)
    f6f0:	00000000 	call	0 <__alt_mem_SRAM>
    f6f4:	d9400017 	ldw	r5,0(sp)
    f6f8:	d9800117 	ldw	r6,4(sp)
    f6fc:	d9c00217 	ldw	r7,8(sp)
    f700:	10001d26 	beq	r2,zero,f778 <__register_exitproc+0x110>
    f704:	81000017 	ldw	r4,0(r16)
    f708:	10000115 	stw	zero,4(r2)
    f70c:	02000044 	movi	r8,1
    f710:	22405217 	ldw	r9,328(r4)
    f714:	0007883a 	mov	r3,zero
    f718:	12400015 	stw	r9,0(r2)
    f71c:	20805215 	stw	r2,328(r4)
    f720:	10006215 	stw	zero,392(r2)
    f724:	10006315 	stw	zero,396(r2)
    f728:	883fde26 	beq	r17,zero,f6a4 <__register_exitproc+0x3c>
    f72c:	18c9883a 	add	r4,r3,r3
    f730:	2109883a 	add	r4,r4,r4
    f734:	1109883a 	add	r4,r2,r4
    f738:	21802215 	stw	r6,136(r4)
    f73c:	01800044 	movi	r6,1
    f740:	12406217 	ldw	r9,392(r2)
    f744:	30cc983a 	sll	r6,r6,r3
    f748:	4992b03a 	or	r9,r9,r6
    f74c:	12406215 	stw	r9,392(r2)
    f750:	21c04215 	stw	r7,264(r4)
    f754:	01000084 	movi	r4,2
    f758:	893fd21e 	bne	r17,r4,f6a4 <__register_exitproc+0x3c>
    f75c:	11006317 	ldw	r4,396(r2)
    f760:	218cb03a 	or	r6,r4,r6
    f764:	11806315 	stw	r6,396(r2)
    f768:	003fce06 	br	f6a4 <__register_exitproc+0x3c>
    f76c:	18805304 	addi	r2,r3,332
    f770:	18805215 	stw	r2,328(r3)
    f774:	003fc606 	br	f690 <__register_exitproc+0x28>
    f778:	00bfffc4 	movi	r2,-1
    f77c:	003fd006 	br	f6c0 <__register_exitproc+0x58>

0000f780 <__call_exitprocs>:
    f780:	defff504 	addi	sp,sp,-44
    f784:	df000915 	stw	fp,36(sp)
    f788:	dd400615 	stw	r21,24(sp)
    f78c:	dc800315 	stw	r18,12(sp)
    f790:	dfc00a15 	stw	ra,40(sp)
    f794:	ddc00815 	stw	r23,32(sp)
    f798:	dd800715 	stw	r22,28(sp)
    f79c:	dd000515 	stw	r20,20(sp)
    f7a0:	dcc00415 	stw	r19,16(sp)
    f7a4:	dc400215 	stw	r17,8(sp)
    f7a8:	dc000115 	stw	r16,4(sp)
    f7ac:	d9000015 	stw	r4,0(sp)
    f7b0:	2839883a 	mov	fp,r5
    f7b4:	04800044 	movi	r18,1
    f7b8:	057fffc4 	movi	r21,-1
    f7bc:	00800074 	movhi	r2,1
    f7c0:	1085cc04 	addi	r2,r2,5936
    f7c4:	12000017 	ldw	r8,0(r2)
    f7c8:	45005217 	ldw	r20,328(r8)
    f7cc:	44c05204 	addi	r19,r8,328
    f7d0:	a0001c26 	beq	r20,zero,f844 <__call_exitprocs+0xc4>
    f7d4:	a0800117 	ldw	r2,4(r20)
    f7d8:	15ffffc4 	addi	r23,r2,-1
    f7dc:	b8000d16 	blt	r23,zero,f814 <__call_exitprocs+0x94>
    f7e0:	14000044 	addi	r16,r2,1
    f7e4:	8421883a 	add	r16,r16,r16
    f7e8:	8421883a 	add	r16,r16,r16
    f7ec:	84402004 	addi	r17,r16,128
    f7f0:	a463883a 	add	r17,r20,r17
    f7f4:	a421883a 	add	r16,r20,r16
    f7f8:	e0001e26 	beq	fp,zero,f874 <__call_exitprocs+0xf4>
    f7fc:	80804017 	ldw	r2,256(r16)
    f800:	e0801c26 	beq	fp,r2,f874 <__call_exitprocs+0xf4>
    f804:	bdffffc4 	addi	r23,r23,-1
    f808:	843fff04 	addi	r16,r16,-4
    f80c:	8c7fff04 	addi	r17,r17,-4
    f810:	bd7ff91e 	bne	r23,r21,f7f8 <__call_exitprocs+0x78>
    f814:	00800034 	movhi	r2,0
    f818:	10800004 	addi	r2,r2,0
    f81c:	10000926 	beq	r2,zero,f844 <__call_exitprocs+0xc4>
    f820:	a0800117 	ldw	r2,4(r20)
    f824:	1000301e 	bne	r2,zero,f8e8 <__call_exitprocs+0x168>
    f828:	a0800017 	ldw	r2,0(r20)
    f82c:	10003226 	beq	r2,zero,f8f8 <__call_exitprocs+0x178>
    f830:	a009883a 	mov	r4,r20
    f834:	98800015 	stw	r2,0(r19)
    f838:	00000000 	call	0 <__alt_mem_SRAM>
    f83c:	9d000017 	ldw	r20,0(r19)
    f840:	a03fe41e 	bne	r20,zero,f7d4 <__call_exitprocs+0x54>
    f844:	dfc00a17 	ldw	ra,40(sp)
    f848:	df000917 	ldw	fp,36(sp)
    f84c:	ddc00817 	ldw	r23,32(sp)
    f850:	dd800717 	ldw	r22,28(sp)
    f854:	dd400617 	ldw	r21,24(sp)
    f858:	dd000517 	ldw	r20,20(sp)
    f85c:	dcc00417 	ldw	r19,16(sp)
    f860:	dc800317 	ldw	r18,12(sp)
    f864:	dc400217 	ldw	r17,8(sp)
    f868:	dc000117 	ldw	r16,4(sp)
    f86c:	dec00b04 	addi	sp,sp,44
    f870:	f800283a 	ret
    f874:	a0800117 	ldw	r2,4(r20)
    f878:	80c00017 	ldw	r3,0(r16)
    f87c:	10bfffc4 	addi	r2,r2,-1
    f880:	15c01426 	beq	r2,r23,f8d4 <__call_exitprocs+0x154>
    f884:	80000015 	stw	zero,0(r16)
    f888:	183fde26 	beq	r3,zero,f804 <__call_exitprocs+0x84>
    f88c:	95c8983a 	sll	r4,r18,r23
    f890:	a0806217 	ldw	r2,392(r20)
    f894:	a5800117 	ldw	r22,4(r20)
    f898:	2084703a 	and	r2,r4,r2
    f89c:	10000b26 	beq	r2,zero,f8cc <__call_exitprocs+0x14c>
    f8a0:	a0806317 	ldw	r2,396(r20)
    f8a4:	2088703a 	and	r4,r4,r2
    f8a8:	20000c1e 	bne	r4,zero,f8dc <__call_exitprocs+0x15c>
    f8ac:	89400017 	ldw	r5,0(r17)
    f8b0:	d9000017 	ldw	r4,0(sp)
    f8b4:	183ee83a 	callr	r3
    f8b8:	a0800117 	ldw	r2,4(r20)
    f8bc:	15bfbf1e 	bne	r2,r22,f7bc <__call_exitprocs+0x3c>
    f8c0:	98800017 	ldw	r2,0(r19)
    f8c4:	153fcf26 	beq	r2,r20,f804 <__call_exitprocs+0x84>
    f8c8:	003fbc06 	br	f7bc <__call_exitprocs+0x3c>
    f8cc:	183ee83a 	callr	r3
    f8d0:	003ff906 	br	f8b8 <__call_exitprocs+0x138>
    f8d4:	a5c00115 	stw	r23,4(r20)
    f8d8:	003feb06 	br	f888 <__call_exitprocs+0x108>
    f8dc:	89000017 	ldw	r4,0(r17)
    f8e0:	183ee83a 	callr	r3
    f8e4:	003ff406 	br	f8b8 <__call_exitprocs+0x138>
    f8e8:	a0800017 	ldw	r2,0(r20)
    f8ec:	a027883a 	mov	r19,r20
    f8f0:	1029883a 	mov	r20,r2
    f8f4:	003fb606 	br	f7d0 <__call_exitprocs+0x50>
    f8f8:	0005883a 	mov	r2,zero
    f8fc:	003ffb06 	br	f8ec <__call_exitprocs+0x16c>

0000f900 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    f900:	defffd04 	addi	sp,sp,-12
    f904:	df000215 	stw	fp,8(sp)
    f908:	df000204 	addi	fp,sp,8
    f90c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    f910:	0001883a 	nop
    f914:	e0bfff17 	ldw	r2,-4(fp)
    f918:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    f91c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    f920:	10000226 	beq	r2,zero,f92c <_exit+0x2c>
    ALT_SIM_FAIL();
    f924:	002af070 	cmpltui	zero,zero,43969
    f928:	00000106 	br	f930 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    f92c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    f930:	003fff06 	br	f930 <_exit+0x30>
