


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ;*******************************************************
                       *************************************************
    3 00000000         ;                                                uC/OS-I
                       I
    4 00000000         ;                                          The Real-Time
                        Kernel
    5 00000000         ;
    6 00000000         ;
    7 00000000         ;                         (c) Copyright 2009-2013; Micri
                       um, Inc.; Weston, FL
    8 00000000         ;                    All rights reserved.  Protected by 
                       international copyright laws.
    9 00000000         ;
   10 00000000         ;                                           ARM Cortex-M
                       4 Port
   11 00000000         ;
   12 00000000         ; File      : OS_CPU_A.ASM
   13 00000000         ; Version   : V2.92.09
   14 00000000         ; By        : JJL
   15 00000000         ;             BAN
   16 00000000         ;             JBL
   17 00000000         ;
   18 00000000         ; For       : ARMv7 Cortex-M4
   19 00000000         ; Mode      : Thumb-2 ISA
   20 00000000         ; Toolchain : RealView Development Suite
   21 00000000         ;             RealView Microcontroller Development Kit (
                       MDK)
   22 00000000         ;             ARM Developer Suite (ADS)
   23 00000000         ;             Keil uVision
   24 00000000         ;*******************************************************
                       *************************************************
   25 00000000         ;
   26 00000000         
   27 00000000         ;*******************************************************
                       *************************************************
   28 00000000         ;                                          PUBLIC FUNCTI
                       ONS
   29 00000000         ;*******************************************************
                       *************************************************
   30 00000000         
   31 00000000                 EXTERN           OSRunning   ; External referenc
                                                            es
   32 00000000                 EXTERN           OSPrioCur
   33 00000000                 EXTERN           OSPrioHighRdy
   34 00000000                 EXTERN           OSTCBCur
   35 00000000                 EXTERN           OSTCBHighRdy
   36 00000000                 EXTERN           OSIntExit
   37 00000000                 EXTERN           OSTaskSwHook
   38 00000000                 EXTERN           OS_CPU_ExceptStkBase
   39 00000000         
   40 00000000                 EXPORT           OS_CPU_SR_Save ; Functions decl
                                                            ared in this file
   41 00000000                 EXPORT           OS_CPU_SR_Restore
   42 00000000                 EXPORT           OSStartHighRdy
   43 00000000                 EXPORT           OSCtxSw
   44 00000000                 EXPORT           OSIntCtxSw
   45 00000000                 EXPORT           OS_CPU_PendSVHandler
   46 00000000         



ARM Macro Assembler    Page 2 


   47 00000000                 IF               {FPU} != "SoftVFP"
   50                          ENDIF
   51 00000000         
   52 00000000         
   53 00000000         ;*******************************************************
                       *************************************************
   54 00000000         ;                                               EQUATES
   55 00000000         ;*******************************************************
                       *************************************************
   56 00000000         
   57 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   58 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; System priority r
                                                            egister (priority 1
                                                            4).
   59 00000000 000000FF 
                       NVIC_PENDSV_PRI
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   60 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   61 00000000         
   62 00000000         
   63 00000000         ;*******************************************************
                       *************************************************
   64 00000000         ;                                     CODE GENERATION DI
                       RECTIVES
   65 00000000         ;*******************************************************
                       *************************************************
   66 00000000         
   67 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   68 00000000                 THUMB
   69 00000000                 REQUIRE8
   70 00000000                 PRESERVE8
   71 00000000         
   72 00000000         
   73 00000000         ;*******************************************************
                       *************************************************
   74 00000000         ;                                   FLOATING POINT REGIS
                       TERS PUSH
   75 00000000         ;                             void  OS_CPU_FP_Reg_Push (
                       CPU_STK  *stkPtr)
   76 00000000         ;
   77 00000000         ; Note(s) : 1) This function saves S0-S31, and FPSCR reg
                       isters of the Floating Point Unit.
   78 00000000         ;
   79 00000000         ;           2) Pseudo-code is:
   80 00000000         ;              a) Get FPSCR register value;
   81 00000000         ;              b) Push value on process stack;
   82 00000000         ;              c) Push remaining regs S0-S31 on process 
                       stack;
   83 00000000         ;              d) Update OSTCBCurPtr->StkPtr;



ARM Macro Assembler    Page 3 


   84 00000000         ;*******************************************************
                       *************************************************
   85 00000000         
   86 00000000                 IF               {FPU} != "SoftVFP"
  101                          ENDIF
  102 00000000         
  103 00000000         
  104 00000000         ;*******************************************************
                       *************************************************
  105 00000000         ;                                   FLOATING POINT REGIS
                       TERS POP
  106 00000000         ;                             void  OS_CPU_FP_Reg_Pop (C
                       PU_STK  *stkPtr)
  107 00000000         ;
  108 00000000         ; Note(s) : 1) This function restores S0-S31, and FPSCR 
                       registers of the Floating Point Unit.
  109 00000000         ;
  110 00000000         ;           2) Pseudo-code is:
  111 00000000         ;              a) Restore regs S0-S31 of new process sta
                       ck;
  112 00000000         ;              b) Restore FPSCR reg value
  113 00000000         ;              c) Update OSTCBHighRdyPtr->StkPtr pointer
                        of new proces stack;
  114 00000000         ;*******************************************************
                       *************************************************
  115 00000000         
  116 00000000                 IF               {FPU} != "SoftVFP"
  127                          ENDIF
  128 00000000         
  129 00000000         
  130 00000000         ;*******************************************************
                       *************************************************
  131 00000000         ;                                   CRITICAL SECTION MET
                       HOD 3 FUNCTIONS
  132 00000000         ;
  133 00000000         ; Description: Disable/Enable interrupts by preserving t
                       he state of interrupts.  Generally speaking you
  134 00000000         ;              would store the state of the interrupt di
                       sable flag in the local variable 'cpu_sr' and then
  135 00000000         ;              disable interrupts.  'cpu_sr' is allocate
                       d in all of uC/OS-II's functions that need to
  136 00000000         ;              disable interrupts.  You would restore th
                       e interrupt disable state by copying back 'cpu_sr'
  137 00000000         ;              into the CPU's status register.
  138 00000000         ;
  139 00000000         ; Prototypes :     OS_CPU_SR  OS_CPU_SR_Save(void);
  140 00000000         ;                  void       OS_CPU_SR_Restore(OS_CPU_S
                       R cpu_sr);
  141 00000000         ;
  142 00000000         ;
  143 00000000         ; Note(s)    : 1) These functions are used in general li
                       ke this:
  144 00000000         ;
  145 00000000         ;                 void Task (void *p_arg)
  146 00000000         ;                 {
  147 00000000         ;                 #if OS_CRITICAL_METHOD == 3          /
                       * Allocate storage for CPU status register */
  148 00000000         ;                     OS_CPU_SR  cpu_sr;
  149 00000000         ;                 #endif



ARM Macro Assembler    Page 4 


  150 00000000         ;
  151 00000000         ;                          :
  152 00000000         ;                          :
  153 00000000         ;                     OS_ENTER_CRITICAL();             /
                       * cpu_sr = OS_CPU_SaveSR();                */
  154 00000000         ;                          :
  155 00000000         ;                          :
  156 00000000         ;                     OS_EXIT_CRITICAL();              /
                       * OS_CPU_RestoreSR(cpu_sr);                */
  157 00000000         ;                          :
  158 00000000         ;                          :
  159 00000000         ;                 }
  160 00000000         ;*******************************************************
                       *************************************************
  161 00000000         
  162 00000000         OS_CPU_SR_Save
  163 00000000 F3EF 8010       MRS              R0, PRIMASK ; Set prio int mask
                                                             to mask all (excep
                                                            t faults)
  164 00000004 B672            CPSID            I
  165 00000006 4770            BX               LR
  166 00000008         
  167 00000008         OS_CPU_SR_Restore
  168 00000008 F380 8810       MSR              PRIMASK, R0
  169 0000000C 4770            BX               LR
  170 0000000E         
  171 0000000E         
  172 0000000E         ;*******************************************************
                       *************************************************
  173 0000000E         ;                                         START MULTITAS
                       KING
  174 0000000E         ;                                      void OSStartHighR
                       dy(void)
  175 0000000E         ;
  176 0000000E         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
  177 0000000E         ;              the first task to start.
  178 0000000E         ;
  179 0000000E         ;           2) OSStartHighRdy() MUST:
  180 0000000E         ;              a) Setup PendSV exception priority to low
                       est;
  181 0000000E         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
  182 0000000E         ;              c) Set the main stack to OS_CPU_ExceptStk
                       Base
  183 0000000E         ;              d) Set OSRunning to TRUE;
  184 0000000E         ;              e) Trigger PendSV exception;
  185 0000000E         ;              f) Enable interrupts (tasks will run with
                        interrupts enabled).
  186 0000000E         ;*******************************************************
                       *************************************************
  187 0000000E         
  188 0000000E         OSStartHighRdy
  189 0000000E 481F            LDR              R0, =NVIC_SYSPRI14 ; Set the Pe
                                                            ndSV exception prio
                                                            rity
  190 00000010 F04F 01FF       LDR              R1, =NVIC_PENDSV_PRI
  191 00000014 7001            STRB             R1, [R0]
  192 00000016         



ARM Macro Assembler    Page 5 


  193 00000016 2000            MOVS             R0, #0      ; Set the PSP to 0 
                                                            for initial context
                                                             switch call
  194 00000018 F380 8809       MSR              PSP, R0
  195 0000001C         
  196 0000001C 481C            LDR              R0, =OS_CPU_ExceptStkBase ; Ini
                                                            tialize the MSP to 
                                                            the OS_CPU_ExceptSt
                                                            kBase
  197 0000001E 6801            LDR              R1, [R0]
  198 00000020 F381 8808       MSR              MSP, R1
  199 00000024         
  200 00000024 481B            LDR              R0, =OSRunning 
                                                            ; OSRunning = TRUE
  201 00000026 2101            MOVS             R1, #1
  202 00000028 7001            STRB             R1, [R0]
  203 0000002A         
  204 0000002A 481B            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  205 0000002C F04F 5180       LDR              R1, =NVIC_PENDSVSET
  206 00000030 6001            STR              R1, [R0]
  207 00000032         
  208 00000032 B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
  209 00000034         
  210 00000034         OSStartHang
  211 00000034 E7FE            B                OSStartHang ; Should never get 
                                                            here
  212 00000036         
  213 00000036         
  214 00000036         ;*******************************************************
                       *************************************************
  215 00000036         ;                       PERFORM A CONTEXT SWITCH (From t
                       ask level) - OSCtxSw()
  216 00000036         ;
  217 00000036         ; Note(s) : 1) OSCtxSw() is called when OS wants to perf
                       orm a task context switch.  This function
  218 00000036         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
  219 00000036         ;*******************************************************
                       *************************************************
  220 00000036         
  221 00000036         OSCtxSw
  222 00000036 4818            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  223 00000038 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  224 0000003C 6001            STR              R1, [R0]
  225 0000003E 4770            BX               LR
  226 00000040         
  227 00000040         
  228 00000040         ;*******************************************************
                       *************************************************
  229 00000040         ;                   PERFORM A CONTEXT SWITCH (From inter
                       rupt level) - OSIntCtxSw()



ARM Macro Assembler    Page 6 


  230 00000040         ;
  231 00000040         ; Note(s) : 1) OSIntCtxSw() is called by OSIntExit() whe
                       n it determines a context switch is needed as
  232 00000040         ;              the result of an interrupt.  This functio
                       n simply triggers a PendSV exception which will
  233 00000040         ;              be handled when there are no more interru
                       pts active and interrupts are enabled.
  234 00000040         ;*******************************************************
                       *************************************************
  235 00000040         
  236 00000040         OSIntCtxSw
  237 00000040 4815            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  238 00000042 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  239 00000046 6001            STR              R1, [R0]
  240 00000048 4770            BX               LR
  241 0000004A         
  242 0000004A         
  243 0000004A         ;*******************************************************
                       *************************************************
  244 0000004A         ;                                       HANDLE PendSV EX
                       CEPTION
  245 0000004A         ;                                   void OS_CPU_PendSVHa
                       ndler(void)
  246 0000004A         ;
  247 0000004A         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
  248 0000004A         ;              context switches with Cortex-M3.  This is
                        because the Cortex-M3 auto-saves half of the
  249 0000004A         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
  250 0000004A         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
  251 0000004A         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
  252 0000004A         ;              a thread or occurs due to an interrupt or
                        exception.
  253 0000004A         ;
  254 0000004A         ;           2) Pseudo-code is:
  255 0000004A         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
  256 0000004A         ;              b) Save remaining regs r4-r11 on process 
                       stack;
  257 0000004A         ;              c) Save the process SP in its TCB, OSTCBC
                       ur->OSTCBStkPtr = SP;
  258 0000004A         ;              d) Call OSTaskSwHook();
  259 0000004A         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  260 0000004A         ;              f) Get current ready thread TCB, OSTCBCur
                        = OSTCBHighRdy;
  261 0000004A         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdy->OSTCBStkPtr;
  262 0000004A         ;              h) Restore R4-R11 from new process stack;
                       
  263 0000004A         ;              i) Perform exception return which will re
                       store remaining context.
  264 0000004A         ;



ARM Macro Assembler    Page 7 


  265 0000004A         ;           3) On entry into PendSV handler:
  266 0000004A         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  267 0000004A         ;                 xPSR, PC, LR, R12, R0-R3
  268 0000004A         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  269 0000004A         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  270 0000004A         ;              d) OSTCBCur      points to the OS_TCB of 
                       the task to suspend
  271 0000004A         ;                 OSTCBHighRdy  points to the OS_TCB of 
                       the task to resume
  272 0000004A         ;
  273 0000004A         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  274 0000004A         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  275 0000004A         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  276 0000004A         ;*******************************************************
                       *************************************************
  277 0000004A         
  278 0000004A         OS_CPU_PendSVHandler
  279 0000004A B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  280 0000004C F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
  281 00000050 B128            CBZ              R0, OS_CPU_PendSVHandler_nosave
 
                                                            ; Skip register sav
                                                            e the first time
  282 00000052         
  283 00000052 3820            SUBS             R0, R0, #0x20 ; Save remaining 
                                                            regs r4-11 on proce
                                                            ss stack
  284 00000054 E880 0FF0       STM              R0, {R4-R11}
  285 00000058         
  286 00000058 4910            LDR              R1, =OSTCBCur ; OSTCBCur->OSTCB
                                                            StkPtr = SP;
  287 0000005A 6809            LDR              R1, [R1]
  288 0000005C 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  289 0000005E         
  290 0000005E         ; At this point, entire context of process has been save
                       d
  291 0000005E         OS_CPU_PendSVHandler_nosave
  292 0000005E B500            PUSH             {R14}       ; Save LR exc_retur
                                                            n value
  293 00000060 480F            LDR              R0, =OSTaskSwHook 
                                                            ; OSTaskSwHook();
  294 00000062 4780            BLX              R0
  295 00000064 F85D EB04       POP              {R14}
  296 00000068         
  297 00000068 480E            LDR              R0, =OSPrioCur ; OSPrioCur = OS
                                                            PrioHighRdy;
  298 0000006A 490F            LDR              R1, =OSPrioHighRdy
  299 0000006C 780A            LDRB             R2, [R1]



ARM Macro Assembler    Page 8 


  300 0000006E 7002            STRB             R2, [R0]
  301 00000070         
  302 00000070 480A            LDR              R0, =OSTCBCur ; OSTCBCur  = OST
                                                            CBHighRdy;
  303 00000072 490E            LDR              R1, =OSTCBHighRdy
  304 00000074 680A            LDR              R2, [R1]
  305 00000076 6002            STR              R2, [R0]
  306 00000078         
  307 00000078 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            Rdy->OSTCBStkPtr;
  308 0000007A E890 0FF0       LDM              R0, {R4-R11} ; Restore r4-11 fr
                                                            om new process stac
                                                            k
  309 0000007E 3020            ADDS             R0, R0, #0x20
  310 00000080 F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  311 00000084 F04E 0EF4       ORR              LR, LR, #0xF4 ; Ensure exceptio
                                                            n return uses proce
                                                            ss stack
  312 00000088 B662            CPSIE            I
  313 0000008A 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  314 0000008C         
  315 0000008C                 END
              E000ED22 
              00000000 
              00000000 
              E000ED04 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\os_cpu
_a.d -o.\os_cpu_a.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Kei
l\ARM\Inc\TI\TM4C123 --list=.\os_cpu_a.lst ..\uCOS-II_files\Ports\os_cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 67 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
   Uses
      None
Comment: .text unused
OSCtxSw 00000036

Symbol: OSCtxSw
   Definitions
      At line 221 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
   Uses
      At line 43 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
Comment: OSCtxSw used once
OSIntCtxSw 00000040

Symbol: OSIntCtxSw
   Definitions
      At line 236 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
   Uses
      At line 44 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
Comment: OSIntCtxSw used once
OSStartHang 00000034

Symbol: OSStartHang
   Definitions
      At line 210 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
   Uses
      At line 211 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
Comment: OSStartHang used once
OSStartHighRdy 0000000E

Symbol: OSStartHighRdy
   Definitions
      At line 188 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
   Uses
      At line 42 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
Comment: OSStartHighRdy used once
OS_CPU_PendSVHandler 0000004A

Symbol: OS_CPU_PendSVHandler
   Definitions
      At line 278 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
   Uses
      At line 45 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
Comment: OS_CPU_PendSVHandler used once
OS_CPU_PendSVHandler_nosave 0000005E

Symbol: OS_CPU_PendSVHandler_nosave
   Definitions
      At line 291 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
   Uses
      At line 281 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
Comment: OS_CPU_PendSVHandler_nosave used once
OS_CPU_SR_Restore 00000008

Symbol: OS_CPU_SR_Restore



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 167 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
   Uses
      At line 41 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
Comment: OS_CPU_SR_Restore used once
OS_CPU_SR_Save 00000000

Symbol: OS_CPU_SR_Save
   Definitions
      At line 162 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
   Uses
      At line 40 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
Comment: OS_CPU_SR_Save used once
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 57 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
   Uses
      At line 204 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
      At line 222 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
      At line 237 in file ..\uCOS-II_files\Ports\os_cpu_a.asm

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 60 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
   Uses
      At line 205 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
      At line 223 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
      At line 238 in file ..\uCOS-II_files\Ports\os_cpu_a.asm

NVIC_PENDSV_PRI 000000FF

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 59 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
   Uses
      At line 190 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 58 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
   Uses
      At line 189 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
Comment: NVIC_SYSPRI14 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 36 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
   Uses
      None
Comment: OSIntExit unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 32 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
   Uses
      At line 297 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 33 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
   Uses
      At line 298 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
Comment: OSPrioHighRdy used once
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 31 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
   Uses
      At line 200 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
Comment: OSRunning used once
OSTCBCur 00000000

Symbol: OSTCBCur
   Definitions
      At line 34 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
   Uses
      At line 286 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
      At line 302 in file ..\uCOS-II_files\Ports\os_cpu_a.asm

OSTCBHighRdy 00000000

Symbol: OSTCBHighRdy
   Definitions
      At line 35 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
   Uses
      At line 303 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
Comment: OSTCBHighRdy used once
OSTaskSwHook 00000000

Symbol: OSTaskSwHook
   Definitions
      At line 37 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
   Uses
      At line 293 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
Comment: OSTaskSwHook used once
OS_CPU_ExceptStkBase 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Symbol: OS_CPU_ExceptStkBase
   Definitions
      At line 38 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
   Uses
      At line 196 in file ..\uCOS-II_files\Ports\os_cpu_a.asm
Comment: OS_CPU_ExceptStkBase used once
8 symbols
353 symbols in table
